{"total_count": 568, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/hgrecco/pint/issues/1153", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1153/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1153/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1153/events", "html_url": "https://github.com/hgrecco/pint/issues/1153", "id": 682661146, "node_id": "MDU6SXNzdWU2ODI2NjExNDY=", "number": 1153, "title": "Pint incorrectly interprets \"/\" when operands are in the same dimensionality", "user": {"login": "alexlitvinenko", "id": 5246563, "node_id": "MDQ6VXNlcjUyNDY1NjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5246563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexlitvinenko", "html_url": "https://github.com/alexlitvinenko", "followers_url": "https://api.github.com/users/alexlitvinenko/followers", "following_url": "https://api.github.com/users/alexlitvinenko/following{/other_user}", "gists_url": "https://api.github.com/users/alexlitvinenko/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexlitvinenko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexlitvinenko/subscriptions", "organizations_url": "https://api.github.com/users/alexlitvinenko/orgs", "repos_url": "https://api.github.com/users/alexlitvinenko/repos", "events_url": "https://api.github.com/users/alexlitvinenko/events{/privacy}", "received_events_url": "https://api.github.com/users/alexlitvinenko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-20T12:06:51Z", "updated_at": "2020-08-21T10:58:14Z", "closed_at": "2020-08-21T10:58:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "```pycon\r\n>>> from pint import UnitRegistry\r\n\r\n>>> ureg = UnitRegistry()\r\n>>> Q_ = ureg.Quantity\r\n\r\n>>> expected = 2 * ureg.m\r\n\r\n>>> actual = Q_('20 m / 10 m')\r\n>>> assert actual == expected  # fails: actual is <Quantity(2.0, 'meter ** 2')>\r\n\r\n>>> actual = (20 * ureg.m) / (10 * ureg.m)\r\n>>> assert actual == expected  # fails: actual is <Quantity(2.0, 'dimensionless')>\r\n```\r\n\r\nPint version is 0.14.\r\nPython version is 3.6.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1145", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1145/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1145/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1145/events", "html_url": "https://github.com/hgrecco/pint/issues/1145", "id": 679384922, "node_id": "MDU6SXNzdWU2NzkzODQ5MjI=", "number": 1145, "title": "Add case (in)senstive option to registry and extend to Unit and Quantity parsing", "user": {"login": "jthielen", "id": 3460034, "node_id": "MDQ6VXNlcjM0NjAwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3460034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jthielen", "html_url": "https://github.com/jthielen", "followers_url": "https://api.github.com/users/jthielen/followers", "following_url": "https://api.github.com/users/jthielen/following{/other_user}", "gists_url": "https://api.github.com/users/jthielen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jthielen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jthielen/subscriptions", "organizations_url": "https://api.github.com/users/jthielen/orgs", "repos_url": "https://api.github.com/users/jthielen/repos", "events_url": "https://api.github.com/users/jthielen/events{/privacy}", "received_events_url": "https://api.github.com/users/jthielen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-14T20:25:53Z", "updated_at": "2020-08-17T17:34:05Z", "closed_at": "2020-08-17T17:34:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[In our quest to handle CF compliant/UDUNITS style units in MetPy](https://github.com/Unidata/MetPy/issues/1362), we have come across a couple issues regarding case sensitivity. For example, we need to be able to parse `Meter` as `meter` and [`Celcius` as an alias of `degrees_Celcius`](https://github.com/hgrecco/pint/issues/1081). To enable this within Pint (as an option of course and not the default [to maintain standards](https://github.com/hgrecco/pint/issues/1081#issuecomment-615238512)), I would like to propose the following to extend the case insensitive handling already existing in Pint:\r\n\r\n1) Add a `case_sensitive` option to `BaseRegistry` which defaults to `True`\r\n2) Modify the existing `case_sensitive` options on `get_name`, `parse_unit_name`, `parse_pattern`, and `parse_expression` to default to `None` instead of `True`, and have `None` be replaced within the methods with the registry's `case_sensitive` option\r\n3) Add analogous `case_sensitive` kwarg to `parse_units`\r\n4) Optional: add analogous `case_sensitive` kwarg to any other public registry method that ends up using `parse_unit_name` (or something that uses it, recursively) so that it can be appropriately passed along.\r\n\r\nThis would allow something like the following to become valid, so that a greater extent of CF unit compliance can be achieved:\r\n\r\n```python\r\nimport pint\r\n\r\nureg = pint.UnitRegistry(case_sensitive=False)\r\n\r\nq = ureg(\"1 Meter\")\r\n\r\nprint(q)\r\n```\r\n\r\n```\r\n1 meter\r\n```\r\n\r\n@hgrecco Is this compatible enough with your philosophy for Pint in https://github.com/hgrecco/pint/issues/1081#issuecomment-618681303 and seem like a reasonable enough way forward in implementation?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1143", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1143/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1143/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1143/events", "html_url": "https://github.com/hgrecco/pint/issues/1143", "id": 677901523, "node_id": "MDU6SXNzdWU2Nzc5MDE1MjM=", "number": 1143, "title": "Why can't pint parse strings with degF and degC", "user": {"login": "jac0b-w", "id": 51512690, "node_id": "MDQ6VXNlcjUxNTEyNjkw", "avatar_url": "https://avatars0.githubusercontent.com/u/51512690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jac0b-w", "html_url": "https://github.com/jac0b-w", "followers_url": "https://api.github.com/users/jac0b-w/followers", "following_url": "https://api.github.com/users/jac0b-w/following{/other_user}", "gists_url": "https://api.github.com/users/jac0b-w/gists{/gist_id}", "starred_url": "https://api.github.com/users/jac0b-w/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jac0b-w/subscriptions", "organizations_url": "https://api.github.com/users/jac0b-w/orgs", "repos_url": "https://api.github.com/users/jac0b-w/repos", "events_url": "https://api.github.com/users/jac0b-w/events{/privacy}", "received_events_url": "https://api.github.com/users/jac0b-w/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-12T18:46:57Z", "updated_at": "2020-08-22T00:53:06Z", "closed_at": "2020-08-22T00:53:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "    >>> from pint import UnitRegistry\r\n    >>> ureg = UnitRegistry()\r\n    >>> Q_ = ureg.Quantity\r\n    >>> Q_(20,\"seconds\")\r\n    <Quantity(20, 'second')>\r\n    >>> Q_(\"20 seconds\")\r\n    <Quantity(20, 'second')>\r\n    >>> Q_(\"20 degK\")\r\n    <Quantity(20, 'kelvin')>\r\n    >>> Q_(20, \"degF\")\r\n    <Quantity(20, 'degree_Fahrenheit')>\r\n    >>> Q_(\"degF\")\r\n    <Quantity(1, 'degree_Fahrenheit')>\r\n    >>> Q_(\"20 degF\")  # CREATES ERROR\r\n\r\nError:\r\n\r\n    pint.errors.OffsetUnitCalculusError: Ambiguous operation with offset unit (degree_Fahrenheit, ). See https://pint.readthedocs.io/en/latest/nonmult.html for guidance.\r\n\r\nI don't understand why pint can parse the string with other units but not with degrees Celsius and Fahrenheit. It's not because its temperature either because Kelvin works as expected. Is this a bug? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1141", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1141/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1141/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1141/events", "html_url": "https://github.com/hgrecco/pint/issues/1141", "id": 676211028, "node_id": "MDU6SXNzdWU2NzYyMTEwMjg=", "number": 1141, "title": "cannot import name 'babel_parse'", "user": {"login": "dschick", "id": 13797420, "node_id": "MDQ6VXNlcjEzNzk3NDIw", "avatar_url": "https://avatars1.githubusercontent.com/u/13797420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dschick", "html_url": "https://github.com/dschick", "followers_url": "https://api.github.com/users/dschick/followers", "following_url": "https://api.github.com/users/dschick/following{/other_user}", "gists_url": "https://api.github.com/users/dschick/gists{/gist_id}", "starred_url": "https://api.github.com/users/dschick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dschick/subscriptions", "organizations_url": "https://api.github.com/users/dschick/orgs", "repos_url": "https://api.github.com/users/dschick/repos", "events_url": "https://api.github.com/users/dschick/events{/privacy}", "received_events_url": "https://api.github.com/users/dschick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-10T15:11:28Z", "updated_at": "2020-08-11T07:43:24Z", "closed_at": "2020-08-11T07:43:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have wired behaviour on an Ubuntu machine using Pint with python 3.6:\r\n\r\nwhen I import pint e.g. with:\r\n\r\n`from pint import UnitRegistry`\r\n\r\nI get the following error:\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nImportError                               Traceback (most recent call last)\r\n<ipython-input-1-b60d448f8dd3> in <module>\r\n----> 1 from pint import UnitRegistry\r\n\r\n~/.local/lib/python3.6/site-packages/pint/__init__.py in <module>\r\n     14 import sys\r\n     15 \r\n---> 16 from .context import Context\r\n     17 from .errors import (\r\n     18     DefinitionSyntaxError,\r\n\r\n~/.local/lib/python3.6/site-packages/pint/context.py in <module>\r\n     13 from collections import ChainMap, defaultdict\r\n     14 \r\n---> 15 from .definitions import Definition, UnitDefinition\r\n     16 from .errors import DefinitionSyntaxError\r\n     17 from .util import ParserHelper, SourceIterator, to_units_container\r\n\r\n~/.local/lib/python3.6/site-packages/pint/definitions.py in <module>\r\n     13 from .converters import OffsetConverter, ScaleConverter\r\n     14 from .errors import DefinitionSyntaxError\r\n---> 15 from .util import ParserHelper, UnitsContainer, _is_dim\r\n     16 \r\n     17 \r\n\r\n~/.local/lib/python3.6/site-packages/pint/util.py in <module>\r\n     22 from .compat import NUMERIC_TYPES, tokenizer\r\n     23 from .errors import DefinitionSyntaxError\r\n---> 24 from .formatting import format_unit\r\n     25 from .pint_eval import build_eval_tree\r\n     26 \r\n\r\n~/.local/lib/python3.6/site-packages/pint/formatting.py in <module>\r\n     12 \r\n     13 from .babel_names import _babel_lengths, _babel_units\r\n---> 14 from .compat import babel_parse\r\n     15 \r\n     16 __JOIN_REG_EXP = re.compile(r\"\\{\\d*\\}\")\r\n\r\nImportError: cannot import name 'babel_parse'\r\n```\r\n\r\nThis is pretty strange because `babel` is installed and I can run the accoring lines from `compat.py` without problems:\r\n```python\r\ntry:\r\n    from babel import Locale as Loc\r\n    from babel import units as babel_units\r\n\r\n    babel_parse = Loc.parse\r\n\r\n    HAS_BABEL = hasattr(babel_units, \"format_unit\")\r\nexcept ImportError:\r\n    HAS_BABEL = False\r\n\r\nif not HAS_BABEL:\r\n    babel_parse = babel_units = missing_dependency(\"Babel\")  # noqa: F811\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1139", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1139/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1139/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1139/events", "html_url": "https://github.com/hgrecco/pint/issues/1139", "id": 673676793, "node_id": "MDU6SXNzdWU2NzM2NzY3OTM=", "number": 1139, "title": "Programmatically set a default prefix", "user": {"login": "dcnadler", "id": 6414742, "node_id": "MDQ6VXNlcjY0MTQ3NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6414742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcnadler", "html_url": "https://github.com/dcnadler", "followers_url": "https://api.github.com/users/dcnadler/followers", "following_url": "https://api.github.com/users/dcnadler/following{/other_user}", "gists_url": "https://api.github.com/users/dcnadler/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcnadler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcnadler/subscriptions", "organizations_url": "https://api.github.com/users/dcnadler/orgs", "repos_url": "https://api.github.com/users/dcnadler/repos", "events_url": "https://api.github.com/users/dcnadler/events{/privacy}", "received_events_url": "https://api.github.com/users/dcnadler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-05T16:18:53Z", "updated_at": "2020-08-06T19:55:17Z", "closed_at": "2020-08-06T19:55:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see that default prefixes can be modified using `default_en.txt`, but is there a way to modify programmatically?\r\n\r\nSpecifically, I would like to change the output of\r\n```python\r\n'{:~}'.format(ureg.parse_units('micromolar'))\r\n```\r\nfrom '\u00b5M' to 'uM'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1136", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1136/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1136/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1136/events", "html_url": "https://github.com/hgrecco/pint/issues/1136", "id": 667145235, "node_id": "MDU6SXNzdWU2NjcxNDUyMzU=", "number": 1136, "title": "DimensionalityError when raising float or int to array of dimensionless values", "user": {"login": "rob5ives", "id": 68913462, "node_id": "MDQ6VXNlcjY4OTEzNDYy", "avatar_url": "https://avatars1.githubusercontent.com/u/68913462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rob5ives", "html_url": "https://github.com/rob5ives", "followers_url": "https://api.github.com/users/rob5ives/followers", "following_url": "https://api.github.com/users/rob5ives/following{/other_user}", "gists_url": "https://api.github.com/users/rob5ives/gists{/gist_id}", "starred_url": "https://api.github.com/users/rob5ives/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rob5ives/subscriptions", "organizations_url": "https://api.github.com/users/rob5ives/orgs", "repos_url": "https://api.github.com/users/rob5ives/repos", "events_url": "https://api.github.com/users/rob5ives/events{/privacy}", "received_events_url": "https://api.github.com/users/rob5ives/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-28T15:00:38Z", "updated_at": "2020-08-01T01:12:04Z", "closed_at": "2020-08-01T01:12:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "This works:\r\n```python\r\na = Q_(2, '')\r\nprint(2 ** a)\r\n```\r\n\r\nHowever this gives the error: pint.errors.DimensionalityError: Cannot convert from 'dimensionless' to 'dimensionless'\r\n\r\n```python\r\na = Q_([2, 3], '')\r\nprint(2 ** a)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1135", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1135/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1135/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1135/events", "html_url": "https://github.com/hgrecco/pint/issues/1135", "id": 664787504, "node_id": "MDU6SXNzdWU2NjQ3ODc1MDQ=", "number": 1135, "title": "Quantity wrapped Dask Arrays need deterministic hashing", "user": {"login": "rpmanser", "id": 19578931, "node_id": "MDQ6VXNlcjE5NTc4OTMx", "avatar_url": "https://avatars3.githubusercontent.com/u/19578931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpmanser", "html_url": "https://github.com/rpmanser", "followers_url": "https://api.github.com/users/rpmanser/followers", "following_url": "https://api.github.com/users/rpmanser/following{/other_user}", "gists_url": "https://api.github.com/users/rpmanser/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpmanser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpmanser/subscriptions", "organizations_url": "https://api.github.com/users/rpmanser/orgs", "repos_url": "https://api.github.com/users/rpmanser/repos", "events_url": "https://api.github.com/users/rpmanser/events{/privacy}", "received_events_url": "https://api.github.com/users/rpmanser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-23T21:51:50Z", "updated_at": "2020-08-19T13:53:02Z", "closed_at": "2020-08-19T13:53:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Based on [xarray/#4208 (comment)](https://github.com/pydata/xarray/issues/4208#issuecomment-663117842), Pint should implement deterministic hashing for Quantity wrapped Dask Arrays. This is a recommended step in implementing the Dask collection interface that I skipped in #1129. \r\n\r\nThis can be done in [one of two ways](https://docs.dask.org/en/latest/custom-collections.html#deterministic-hashing): either implementing `__dask_tokenize__` in the Quantity class, or registering a function with `dask.base.normalize_token`. The return value is the same. I'm wondering if there is a preference, since it seems that Pint tokenizes unit operations and I don't know if this would interfere with that. If there is no interference, I think `__dask_tokenize__` would be better since it is cleaner.\r\n\r\nI can follow up with a PR following any discussion.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1130", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1130/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1130/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1130/events", "html_url": "https://github.com/hgrecco/pint/issues/1130", "id": 652721899, "node_id": "MDU6SXNzdWU2NTI3MjE4OTk=", "number": 1130, "title": "guidelines for when to create extension packages", "user": {"login": "keewis", "id": 14808389, "node_id": "MDQ6VXNlcjE0ODA4Mzg5", "avatar_url": "https://avatars1.githubusercontent.com/u/14808389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keewis", "html_url": "https://github.com/keewis", "followers_url": "https://api.github.com/users/keewis/followers", "following_url": "https://api.github.com/users/keewis/following{/other_user}", "gists_url": "https://api.github.com/users/keewis/gists{/gist_id}", "starred_url": "https://api.github.com/users/keewis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keewis/subscriptions", "organizations_url": "https://api.github.com/users/keewis/orgs", "repos_url": "https://api.github.com/users/keewis/repos", "events_url": "https://api.github.com/users/keewis/events{/privacy}", "received_events_url": "https://api.github.com/users/keewis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-07T23:05:00Z", "updated_at": "2020-08-17T16:00:42Z", "closed_at": "2020-08-17T16:00:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In order to keep the `dask` / `distributed` PR (#1129) focused on that, let's continue the discussion here.\r\n\r\n@hgrecco:\r\n> I would like to take the opportunity to ask a question: When are we going to provide an external package (e.g. pint-pandas) and when are we going to include it in pint. I am not suggesting to create pint-dask but rather to start building a rationale about pint extensions.\r\n\r\n@dopplershift:\r\n> My concern with extension packages is that they won't necessarily receive the same level of maintenance as the core pint library. As a maintainer of a downstream library, I'm always concerned about adding more dependencies.\r\n>\r\n> What do people see as the benefits of having external packages?\r\n\r\nFirst of all, external packages do have the advantage of a separate release cycle.\r\n\r\nIf I'm not missing any, all the extension packages we have right now (`pint-pandas` and `pint-xarray`) are for *wrapping* `pint`, not the other way around. While the `dask` interface is not really part of it, `pint` wrapping other libraries is usually done using the `numpy` interface (the only exception is `measurements` / `uncertainties`).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1121", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1121/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1121/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1121/events", "html_url": "https://github.com/hgrecco/pint/issues/1121", "id": 641245492, "node_id": "MDU6SXNzdWU2NDEyNDU0OTI=", "number": 1121, "title": "Implementation of CO2eq (GWP)", "user": {"login": "lfaucheux", "id": 19575612, "node_id": "MDQ6VXNlcjE5NTc1NjEy", "avatar_url": "https://avatars0.githubusercontent.com/u/19575612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lfaucheux", "html_url": "https://github.com/lfaucheux", "followers_url": "https://api.github.com/users/lfaucheux/followers", "following_url": "https://api.github.com/users/lfaucheux/following{/other_user}", "gists_url": "https://api.github.com/users/lfaucheux/gists{/gist_id}", "starred_url": "https://api.github.com/users/lfaucheux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lfaucheux/subscriptions", "organizations_url": "https://api.github.com/users/lfaucheux/orgs", "repos_url": "https://api.github.com/users/lfaucheux/repos", "events_url": "https://api.github.com/users/lfaucheux/events{/privacy}", "received_events_url": "https://api.github.com/users/lfaucheux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-18T14:18:17Z", "updated_at": "2020-07-21T10:49:45Z", "closed_at": "2020-07-21T10:49:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pint is really amazing. 3 Questions:\r\n\r\nI am not physicist and I would like to implement (static) [***G***lobal ***W***arming ***P***otentials](https://en.wikipedia.org/wiki/Global_warming_potential). It all starts with [radiative forcings](https://en.wikipedia.org/wiki/Radiative_forcing), dimensionalized as *W/m\u00b2*, i.e. an intensity, which already exists in the default registry,\r\n\r\n```\r\n# Intensity\r\n[intensity] = [power] / [area]\r\n```\r\n\r\n#### Question 1\r\nDoes `[intensity]` have a given name when it is precisely instantiated as `watt / meter ** 2` ?\r\n<hr>\r\n\r\nThen it looks like we first have to imply the notion of ***absolute GWP*** (***AGWP***). Note that there is a **time-horizon non-linear** determinant behind any ***AGWP*** value.\r\nI made a [python package](https://github.com/lfaucheux/PyGWP) some years ago to compute those things continuously. Yet, it seems that dealing with precomputed constants is the rule when dealing with ***GWP***s, mainly for the sake of convenience. Let's thus adopt the culture: the most common used *i)* time horizons in the litterature are 5, 10, 20, 30, 50, 100 years and *ii)* ghgs are CO<sub>2</sub> (of course), CH<sub>4</sub> and N<sub>2</sub>O. The point is that the following constants are very likely -- I am not physicist --  to be true only for `kilogram`s since the idea behind warming potential is precisely about timing of emissions *<=>* clearly not a linear-in-mass phenomenon.\r\n\r\n#### Question 2\r\nDoes `[intensity] / kg` have a given name ?\r\n<hr>\r\n\r\nIn conjunction with of the notion of timing/temporality, `[temporality]`, let's call it `[absolute_global_warming_potential]` for now. And only specify things for 100- and 50-year horizons for the sake of clarity,\r\n\r\n```\r\n#### Absolute Global Warming Potentials ####\r\nagwp = [absolute_global_warming_potential] = [temporality] * [intensity] / kg\r\n\r\n# 100-year horizon\r\nagwp100 = nan agwp\r\nco2_agwp100 = 8.69e-14 * agwp100\r\nch4_agwp100 = 2.1725e-12 * agwp100\r\nn2o_agwp100 = 2.58962e-11 * agwp100\r\n\r\n# 50-year horizon\r\nagwp50 = nan agwp\r\nco2_agwp50 = 5.100128578061494e-14 * agwp50\r\nch4_agwp50 = 2.1393321081948863e-12 * agwp50\r\nn2o_agwp50 = 1.5742935781808625e-11 * agwp50\r\n```\r\n\r\nFinally, our (relative-to-CO<sub>2</sub>) ***GWP***s\r\n```\r\n#### Relative-to-CO2 Global Warming Potentials ####\r\nco2eq = [global_warming_potential]\r\n\r\n# 100-year horizon\r\nco2_gwp100 = 1.0 * co2eq\r\nch4_gwp100 = 25.0 * co2_gwp100 = ch4_agwp100 / co2_agwp100\r\nn2o_gwp100 = 298.0 * co2_gwp100 = n2o_agwp100 / co2_agwp100\r\n\r\n# 50-year horizon\r\nco2_gwp50 = nan co2eq\r\nch4_gwp50 = 41.94663086333451 * co2_gwp50 = ch4_agwp50 / co2_agwp50\r\nn2o_gwp50 = 308.6772331491366 * co2_gwp50 = n2o_agwp50 / co2_agwp50\r\n```\r\n#### Question 3\r\nAny suggestion that makes more sense *i)* regarding Pint's conventions as such and *ii)* ontologically speaking ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1118", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1118/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1118/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1118/events", "html_url": "https://github.com/hgrecco/pint/issues/1118", "id": 640795674, "node_id": "MDU6SXNzdWU2NDA3OTU2NzQ=", "number": 1118, "title": "synchronize Quantity.prod with np.prod(q)", "user": {"login": "keewis", "id": 14808389, "node_id": "MDQ6VXNlcjE0ODA4Mzg5", "avatar_url": "https://avatars1.githubusercontent.com/u/14808389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keewis", "html_url": "https://github.com/keewis", "followers_url": "https://api.github.com/users/keewis/followers", "following_url": "https://api.github.com/users/keewis/following{/other_user}", "gists_url": "https://api.github.com/users/keewis/gists{/gist_id}", "starred_url": "https://api.github.com/users/keewis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keewis/subscriptions", "organizations_url": "https://api.github.com/users/keewis/orgs", "repos_url": "https://api.github.com/users/keewis/repos", "events_url": "https://api.github.com/users/keewis/events{/privacy}", "received_events_url": "https://api.github.com/users/keewis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-17T23:07:58Z", "updated_at": "2020-06-18T20:23:39Z", "closed_at": "2020-06-18T20:23:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Continuing from #867: #1087 fixed the calculated units for `prod` when the `axis` or `where` (not both) parameters are passed, but only for the ufunc and not for the method (also, right now this will calculate the units using input and output sizes, but instead we could just use `q.shape[axis]`).\r\n\r\nI looked into implementing this but it seems this is somewhat complicated: the way it works right now, `__getattr__` will get the method from the magnitude and wrap it using `_numpy_method_wrap` which in turn will call `get_op_output_unit`. To make this work I think we'd need to move the units calculation of `_prod` into a new function that accepts the shape and the args (`axis` and `where`) and try to modify `get_op_output_unit` to accept functions in addition to names. @jthielen, thoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1115", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1115/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1115/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1115/events", "html_url": "https://github.com/hgrecco/pint/issues/1115", "id": 640305301, "node_id": "MDU6SXNzdWU2NDAzMDUzMDE=", "number": 1115, "title": "Possible regression in UnitRegistry.get_compatible_units()", "user": {"login": "clarkgwillison", "id": 253574, "node_id": "MDQ6VXNlcjI1MzU3NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/253574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarkgwillison", "html_url": "https://github.com/clarkgwillison", "followers_url": "https://api.github.com/users/clarkgwillison/followers", "following_url": "https://api.github.com/users/clarkgwillison/following{/other_user}", "gists_url": "https://api.github.com/users/clarkgwillison/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarkgwillison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarkgwillison/subscriptions", "organizations_url": "https://api.github.com/users/clarkgwillison/orgs", "repos_url": "https://api.github.com/users/clarkgwillison/repos", "events_url": "https://api.github.com/users/clarkgwillison/events{/privacy}", "received_events_url": "https://api.github.com/users/clarkgwillison/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-17T09:52:25Z", "updated_at": "2020-07-13T16:55:05Z", "closed_at": "2020-07-13T16:55:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While doing work on the doctests, I noticed there's a significant difference between the output of `ureg.get_compatible_units()` and what's in the docs.\r\n\r\nThe docs say \"You can also use system to narrow down the list of compatible units\" and gives the following example:\r\n```python\r\n>>> ureg.default_system = 'mks'\r\n>>> ureg.get_compatible_units('meter')\r\nfrozenset({<Unit('light_year')>, <Unit('angstrom')>})\r\n```\r\nBut when `.get_compatible_units('meter')` is run on f8ec2ca, many more units appear than just those in the `mks` system, including `nautical_mile`, which suggests either there's been a regression, or the docs are not up to date.\r\n\r\nRelevant test run output:\r\n```\r\nDocument: systems\r\n-----------------\r\n**********************************************************************\r\nFile \"systems.rst\", line 48, in default\r\nFailed example:\r\n    ureg.get_compatible_units('meter')\r\nExpected:\r\n    frozenset({<Unit('light_year')>, <Unit('angstrom')>})\r\nGot:\r\n    frozenset({<Unit('nautical_mile')>, <Unit('x_unit_Cu')>, <Unit('bohr')>, <Unit('angstrom')>, <Unit('parsec')>, <Unit('astronomical_unit')>, <Unit('micron')>, <Unit('lattice_spacing_of_Si')>, <Unit('meter')>, <Unit('classical_electron_radius')>, <Unit('light_year')>, <Unit('angstrom_star')>, <Unit('x_unit_Mo')>, <Unit('fermi')>, <Unit('planck_length')>})\r\n**********************************************************************\r\nFile \"systems.rst\", line 56, in default\r\nFailed example:\r\n    ureg.get_compatible_units('meter')\r\nExpected:\r\n    frozenset({<Unit('thou')>, <Unit('league')>, <Unit('nautical_mile')>, <Unit('inch')>, <Unit('mile')>, <Unit('yard')>, <Unit('foot')>})\r\nGot:\r\n    frozenset({<Unit('hand')>, <Unit('yard')>, <Unit('foot')>, <Unit('inch')>, <Unit('thou')>, <Unit('mile')>})\r\n**********************************************************************\r\nFile \"systems.rst\", line 71, in default\r\nFailed example:\r\n    dir(ureg.sys.imperial)\r\nExpected:\r\n    ['UK_hundredweight', 'UK_ton', 'acre_foot', 'cubic_foot', 'cubic_inch', 'cubic_yard', 'drachm', 'foot', 'grain', 'imperial_barrel', 'imperial_bushel', 'imperial_cup', 'imperial_fluid_drachm', 'imperial_fluid_ounce', 'imperial_gallon', 'imperial_gill', 'imperial_peck', 'imperial_pint', 'imperial_quart', 'inch', 'long_hunderweight', 'long_ton', 'mile', 'ounce', 'pound', 'quarter', 'short_hunderdweight', 'short_ton', 'square_foot', 'square_inch', 'square_mile', 'square_yard', 'stone', 'yard']\r\nGot:\r\n    ['UK_force_ton', 'UK_hundredweight', 'UK_ton', 'bag', 'circular_mil', 'cubic_foot', 'cubic_inch', 'cubic_yard', 'dram', 'foot', 'force_long_ton', 'force_ounce', 'force_pound', 'force_ton', 'hand', 'hundredweight', 'imperial_barrel', 'imperial_bushel', 'imperial_cup', 'imperial_fluid_drachm', 'imperial_fluid_ounce', 'imperial_fluid_scruple', 'imperial_gallon', 'imperial_gill', 'imperial_minim', 'imperial_peck', 'imperial_pint', 'imperial_quart', 'inch', 'kip', 'long_hundredweight', 'long_ton', 'mile', 'ounce', 'pound', 'poundal', 'quarter', 'slinch', 'slug', 'square_foot', 'square_inch', 'square_mile', 'square_yard', 'stone', 'thou', 'ton', 'yard']\r\n**********************************************************************\r\n1 items had failures:\r\n   3 of  18 in default\r\n18 tests in 1 items.\r\n15 passed and 3 failed.\r\n***Test Failed*** 3 failures.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1112", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1112/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1112/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1112/events", "html_url": "https://github.com/hgrecco/pint/issues/1112", "id": 638835579, "node_id": "MDU6SXNzdWU2Mzg4MzU1Nzk=", "number": 1112, "title": "enable_contexts: RuntimeError: generator raised StopIteration", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-15T13:02:11Z", "updated_at": "2020-06-16T17:37:53Z", "closed_at": "2020-06-16T17:37:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "No clue what's going on - investigating.\r\nVery slight changes to this POC make the issue disappear.\r\n\r\n```python\r\nimport pint\r\nureg = pint.UnitRegistry()\r\nureg.load_definitions(\r\n    \"\"\"\r\n    @context c1\r\n        [time]->[length] : value * 10 m/s\r\n    @end\r\n    @context c2\r\n        ft = 0.3 m\r\n    @end\r\n    @context c3\r\n        lb = 0.5 kg\r\n    @end\r\n    \"\"\".splitlines()\r\n)\r\nureg.enable_contexts(\"c1\")\r\nureg.enable_contexts(\"c2\")\r\nureg.enable_contexts(\"c3\")\r\n```\r\n\r\nOutput:\r\n```\r\n>       ureg.enable_contexts(\"c3\")\r\n\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nlib/python3.8/site-packages/pint/registry.py:1614: in enable_contexts\r\n    if self._active_ctx.defaults:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = ContextChain(<WeakValueDictionary at 0x7fd8366d3f70>, <WeakValueDictionary at 0x7fd8366e8100>)\r\n\r\n    @property\r\n    def defaults(self):\r\n        if self:\r\n>           return next(iter(self.maps[0].values())).defaults\r\nE           StopIteration\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1108", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1108/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1108/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1108/events", "html_url": "https://github.com/hgrecco/pint/issues/1108", "id": 637744156, "node_id": "MDU6SXNzdWU2Mzc3NDQxNTY=", "number": 1108, "title": "Context redefinitions can't be overlayed", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-12T13:18:17Z", "updated_at": "2020-06-16T13:43:08Z", "closed_at": "2020-06-16T13:43:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When multiple contexts are active and more than one redefines the same unit, pint incorrectly picks up the first redefinition instead of the latest:\r\n\r\n```python\r\nureg = pint.UnitRegistry()\r\nc1 = pint.Context.from_lines([\"@context a\", \"lb = 0.5 kg\"])\r\nc2 = pint.Context.from_lines([\"@context b\", \"lb = 0.7 kg\"])\r\none_src = ureg.Quantity(1, \"kg\")\r\nprint(one_src.to(\"lb\"))\r\nureg.enable_contexts(c1)\r\nprint(one_src.to(\"lb\"))\r\nureg.enable_contexts(c2)\r\nprint(one_src.to(\"lb\"))\r\n```\r\nExpected output:\r\n```\r\n2.2046226218487757 pound\r\n2.0 pound\r\n1.4285714285714286 pound\r\n```\r\nActual output:\r\n```\r\n2.2046226218487757 pound\r\n2.0 pound\r\n2.0 pound\r\n```\r\n\r\nInter-dimensional transforms instead work as expected:\r\n```python\r\nureg = pint.UnitRegistry()\r\nc1 = pint.Context.from_lines([\"@context a\", \"[volume] -> [mass]: value * 1 kg/l\"])\r\nc2 = pint.Context.from_lines([\"@context b\", \"[volume] -> [mass]: value * 2 kg/l\"])\r\none_src = ureg.Quantity(1, \"l\")\r\nureg.enable_contexts(c1)\r\nprint(one_src.to(\"kg\"))\r\nureg.enable_contexts(c2)\r\nprint(one_src.to(\"kg\"))\r\n```\r\nOutput:\r\n```\r\n1.0 kilogram\r\n2.0 kilogram\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1105", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1105/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1105/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1105/events", "html_url": "https://github.com/hgrecco/pint/issues/1105", "id": 630957572, "node_id": "MDU6SXNzdWU2MzA5NTc1NzI=", "number": 1105, "title": "Conversion kilogauss to Tesla", "user": {"login": "rtesse", "id": 26649180, "node_id": "MDQ6VXNlcjI2NjQ5MTgw", "avatar_url": "https://avatars1.githubusercontent.com/u/26649180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtesse", "html_url": "https://github.com/rtesse", "followers_url": "https://api.github.com/users/rtesse/followers", "following_url": "https://api.github.com/users/rtesse/following{/other_user}", "gists_url": "https://api.github.com/users/rtesse/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtesse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtesse/subscriptions", "organizations_url": "https://api.github.com/users/rtesse/orgs", "repos_url": "https://api.github.com/users/rtesse/repos", "events_url": "https://api.github.com/users/rtesse/events{/privacy}", "received_events_url": "https://api.github.com/users/rtesse/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-04T16:01:34Z", "updated_at": "2020-06-08T08:30:00Z", "closed_at": "2020-06-08T08:30:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I updated my version of Pint from 0.9 to 0.11 and I have a dimensionality error when I execute this portion of code:\r\n```\r\nimport pint\r\nureg = pint.UnitRegistry()\r\nval = 1*ureg.T # 1 tesla\r\nval_gauss = val.to('kilogauss') # -> DimensionalityError using v0.11\r\n```\r\n`Cannot convert from 'tesla' ([mass] / [current] / [time] ** 2) to 'kilogauss' ([mass] ** 0.5 / [length] ** 0.5 / [time])`\r\n\r\nI think this is related to issue #1048  but I am not sure.\r\n\r\nRegards,\r\n\r\nRobin Tesse", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1104", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1104/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1104/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1104/events", "html_url": "https://github.com/hgrecco/pint/issues/1104", "id": 626374078, "node_id": "MDU6SXNzdWU2MjYzNzQwNzg=", "number": 1104, "title": "reloading definitions with currencies", "user": {"login": "c4rnot", "id": 54359278, "node_id": "MDQ6VXNlcjU0MzU5Mjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/54359278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c4rnot", "html_url": "https://github.com/c4rnot", "followers_url": "https://api.github.com/users/c4rnot/followers", "following_url": "https://api.github.com/users/c4rnot/following{/other_user}", "gists_url": "https://api.github.com/users/c4rnot/gists{/gist_id}", "starred_url": "https://api.github.com/users/c4rnot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c4rnot/subscriptions", "organizations_url": "https://api.github.com/users/c4rnot/orgs", "repos_url": "https://api.github.com/users/c4rnot/repos", "events_url": "https://api.github.com/users/c4rnot/events{/privacy}", "received_events_url": "https://api.github.com/users/c4rnot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-28T09:49:01Z", "updated_at": "2020-05-28T09:56:52Z", "closed_at": "2020-05-28T09:56:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can load a definition file once fine,  but if I modify it and reload it, I get the following error\r\n\r\npint.errors.DefinitionSyntaxError: Only one unit per dimension can be a base unit\r\n\r\nIt's failing on importing this line:\r\n\r\nUSD = [currency]  # prevents registry from being reloaded\r\n\r\nset up as per the tutorial.   I assume this is a problem with any dimension definition??\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1103", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1103/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1103/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1103/events", "html_url": "https://github.com/hgrecco/pint/issues/1103", "id": 625648345, "node_id": "MDU6SXNzdWU2MjU2NDgzNDU=", "number": 1103, "title": "next release", "user": {"login": "keewis", "id": 14808389, "node_id": "MDQ6VXNlcjE0ODA4Mzg5", "avatar_url": "https://avatars1.githubusercontent.com/u/14808389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keewis", "html_url": "https://github.com/keewis", "followers_url": "https://api.github.com/users/keewis/followers", "following_url": "https://api.github.com/users/keewis/following{/other_user}", "gists_url": "https://api.github.com/users/keewis/gists{/gist_id}", "starred_url": "https://api.github.com/users/keewis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keewis/subscriptions", "organizations_url": "https://api.github.com/users/keewis/orgs", "repos_url": "https://api.github.com/users/keewis/repos", "events_url": "https://api.github.com/users/keewis/events{/privacy}", "received_events_url": "https://api.github.com/users/keewis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-05-27T12:22:10Z", "updated_at": "2020-06-18T00:11:18Z", "closed_at": "2020-05-29T15:50:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It has been quite some time since the last release and there are a few bug fixes I really need.\r\n\r\n@hgrecco, what would it take to get a new release (`0.11.1` or `0.12`) out? If you can make a list (or update the milestone) I think I can help with getting there.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1097", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1097/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1097/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1097/events", "html_url": "https://github.com/hgrecco/pint/issues/1097", "id": 616774611, "node_id": "MDU6SXNzdWU2MTY3NzQ2MTE=", "number": 1097, "title": "unit redefinition in a context breaks transform in another context (again)", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-12T16:01:26Z", "updated_at": "2020-05-15T13:37:05Z", "closed_at": "2020-05-15T13:37:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Reopen of #1062, which I thought I had fixed it in #1064.\r\nI just realised that my PR only moved the problem further: before #1064 the POC was failing at the second iteration; now it fails on the third one.\r\n\r\n```python\r\nureg = pint.UnitRegistry()\r\nfor i in range(3):\r\n    print(f\"run {i}\")\r\n    ctx = pint.Context.from_lines([\"@context _\", \"cal = 4 J\"])\r\n    with ureg.context(\"sp\", ctx):\r\n        u = ureg.Unit(\"nm\")\r\n        q = ureg.Quantity(1, u)\r\n        q.to('J')\r\n```\r\nOutput:\r\n```\r\nrun 0\r\nrun 1\r\nrun 2\r\nKeyError: 'nanometer'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1092", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1092/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1092/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1092/events", "html_url": "https://github.com/hgrecco/pint/issues/1092", "id": 612739150, "node_id": "MDU6SXNzdWU2MTI3MzkxNTA=", "number": 1092, "title": "How does scipy.optimize.fsolve works with pint?", "user": {"login": "hustquick", "id": 12826825, "node_id": "MDQ6VXNlcjEyODI2ODI1", "avatar_url": "https://avatars3.githubusercontent.com/u/12826825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hustquick", "html_url": "https://github.com/hustquick", "followers_url": "https://api.github.com/users/hustquick/followers", "following_url": "https://api.github.com/users/hustquick/following{/other_user}", "gists_url": "https://api.github.com/users/hustquick/gists{/gist_id}", "starred_url": "https://api.github.com/users/hustquick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hustquick/subscriptions", "organizations_url": "https://api.github.com/users/hustquick/orgs", "repos_url": "https://api.github.com/users/hustquick/repos", "events_url": "https://api.github.com/users/hustquick/events{/privacy}", "received_events_url": "https://api.github.com/users/hustquick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-05T16:36:49Z", "updated_at": "2020-05-06T04:53:23Z", "closed_at": "2020-05-06T04:53:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was trying to solve a simple problem with fsolve.\r\n```Python\r\nfrom scipy.optimize import fsolve\r\n\r\n\r\nh_1 = 47622     # J/kg\r\nh_2 = 135000    # J/kg\r\nh_3 = 167000    # J/kg\r\nh_4 = 100000    # J/kg\r\n\r\nm_3 = 50        # kg/s\r\n\r\nd_1 = 0.011\r\nd_2 = 0.038\r\n\r\ndef f(x):\r\n    m_a, m_4 = x\r\n    err0 = m_a * h_1 + m_3 * h_3 - m_a * h_2 - m_4 * h_4\r\n    err1 = m_a * d_1 + m_3 - m_a * d_2 - m_4\r\n    return err0, err1\r\n\r\nx0 = [1, 49]\r\nm_a, m_4 = fsolve(f, x0)\r\n```\r\nThen I want to add units for the variable with pint.\r\n```Python\r\nfrom scipy.optimize import fsolve\r\nfrom pint import UnitRegistry\r\n\r\nu = UnitRegistry()\r\nQ_ = u.Quantity\r\n\r\nh_1 = 47622 * (u.J/u.kg)\r\nh_2 = 135000 * (u.J/u.kg)\r\nh_3 = 167000 * (u.J/u.kg)\r\nh_4 = 100000 * (u.J/u.kg)\r\n\r\nm_3 = 50 * (u.kg / u.s)\r\n\r\nd_1 = 0.011\r\nd_2 = 0.038\r\n\r\ndef f(x):\r\n    m_a, m_4 = x\r\n    err0 = m_a * h_1 + m_3 * h_3 - m_a * h_2 - m_4 * h_4\r\n    err1 = m_a * d_1 + m_3 - m_a * d_2 - m_4\r\n    return err0, err1\r\n\r\nx0 = [1 * (u.kg/u.s), 49 * (u.kg/u.s)]\r\nm_a, m_4 = fsolve(f, x0)\r\n```\r\nHowever, it doesn't work. I also tried the wrapping functions ```@u.wraps```. But I dont know how to get the right result. How does scipy.optimize.fsolve works with pint?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1091", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1091/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1091/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1091/events", "html_url": "https://github.com/hgrecco/pint/issues/1091", "id": 612056601, "node_id": "MDU6SXNzdWU2MTIwNTY2MDE=", "number": 1091, "title": "Can't add alias to the unit definition file", "user": {"login": "esprit1995", "id": 8725577, "node_id": "MDQ6VXNlcjg3MjU1Nzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/8725577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/esprit1995", "html_url": "https://github.com/esprit1995", "followers_url": "https://api.github.com/users/esprit1995/followers", "following_url": "https://api.github.com/users/esprit1995/following{/other_user}", "gists_url": "https://api.github.com/users/esprit1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/esprit1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/esprit1995/subscriptions", "organizations_url": "https://api.github.com/users/esprit1995/orgs", "repos_url": "https://api.github.com/users/esprit1995/repos", "events_url": "https://api.github.com/users/esprit1995/events{/privacy}", "received_events_url": "https://api.github.com/users/esprit1995/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-04T17:53:21Z", "updated_at": "2020-05-06T02:44:10Z", "closed_at": "2020-05-06T02:44:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nWhile I try to add an alias to the unit definition file, i get an error: \r\n\"While opening pint_units.txt, in line None: Unknown directive @alias dos = ds\"\r\nThe file is loaded using the code:\r\n`import pint \r\nfrom pint import UnitRegistry\r\nureg = UnitRegistry()\r\nureg.load_definitions(\"pint_units.txt\")`\r\napart from alias, the file contains a bunch of unit definitions. Works fine without adding alias.\r\nI know I can add it programmatically, but it is better for me to use a file. Am I doing something wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1088", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1088/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1088/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1088/events", "html_url": "https://github.com/hgrecco/pint/issues/1088", "id": 606467134, "node_id": "MDU6SXNzdWU2MDY0NjcxMzQ=", "number": 1088, "title": "Wraps example typo", "user": {"login": "dimapu", "id": 16896578, "node_id": "MDQ6VXNlcjE2ODk2NTc4", "avatar_url": "https://avatars2.githubusercontent.com/u/16896578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimapu", "html_url": "https://github.com/dimapu", "followers_url": "https://api.github.com/users/dimapu/followers", "following_url": "https://api.github.com/users/dimapu/following{/other_user}", "gists_url": "https://api.github.com/users/dimapu/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimapu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimapu/subscriptions", "organizations_url": "https://api.github.com/users/dimapu/orgs", "repos_url": "https://api.github.com/users/dimapu/repos", "events_url": "https://api.github.com/users/dimapu/events{/privacy}", "received_events_url": "https://api.github.com/users/dimapu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-24T17:21:24Z", "updated_at": "2020-05-06T02:54:02Z", "closed_at": "2020-05-06T02:54:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all, \r\n\r\nThis example from the docs fails on master:\r\n```python\r\n@ureg.wraps(ureg.second, (ureg.meters, ureg.meters/ureg.second**2))  # <- Missing None here?\r\ndef calculate_time_to_fall(height, gravity=Q_(9.8, 'm/s^2'), verbose=False):\r\n    \"\"\"Calculate time to fall from a height h.\r\n\r\n    By default, the gravity is assumed to be earth gravity,\r\n    but it can be modified.\r\n\r\n    d = .5 * g * t**2\r\n    t = sqrt(2 * d / g)\r\n    \"\"\"\r\n    t = sqrt(2 * height / gravity)\r\n    if verbose: print(str(t) + \" seconds to fall\")\r\n    return t\r\n\r\nlunar_module_height = Q_(22, 'feet') + Q_(11, 'inches')\r\ncalculate_time_to_fall(lunar_module_height, verbose=True)\r\n```\r\n\r\nThe error is `TypeError: calculate_time_to_fall takes 3 parameters, but 2 units were passed`. I believe this is due to the missing `None` in the tuple for the input parameters. So the first line should be \r\n```python\r\n@ureg.wraps(ureg.second, (ureg.meters, ureg.meters/ureg.second**2, None))\r\n...\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1086", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1086/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1086/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1086/events", "html_url": "https://github.com/hgrecco/pint/issues/1086", "id": 605385871, "node_id": "MDU6SXNzdWU2MDUzODU4NzE=", "number": 1086, "title": "How can find if a unit is in the Registry?", "user": {"login": "matteopulega", "id": 45599916, "node_id": "MDQ6VXNlcjQ1NTk5OTE2", "avatar_url": "https://avatars3.githubusercontent.com/u/45599916?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matteopulega", "html_url": "https://github.com/matteopulega", "followers_url": "https://api.github.com/users/matteopulega/followers", "following_url": "https://api.github.com/users/matteopulega/following{/other_user}", "gists_url": "https://api.github.com/users/matteopulega/gists{/gist_id}", "starred_url": "https://api.github.com/users/matteopulega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matteopulega/subscriptions", "organizations_url": "https://api.github.com/users/matteopulega/orgs", "repos_url": "https://api.github.com/users/matteopulega/repos", "events_url": "https://api.github.com/users/matteopulega/events{/privacy}", "received_events_url": "https://api.github.com/users/matteopulega/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-23T09:35:14Z", "updated_at": "2020-06-16T22:19:23Z", "closed_at": "2020-06-16T22:19:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nwhen i make:\r\n`ureg.Quantity(value,unit).to_base_units()`\r\ni get the error:\r\n`xyz is not defined in the unit registry`\r\n\r\nIs there any function that allows me first to see if my unit exists in pint? I prefer not to use a \"try except\" operation", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1083", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1083/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1083/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1083/events", "html_url": "https://github.com/hgrecco/pint/issues/1083", "id": 601999912, "node_id": "MDU6SXNzdWU2MDE5OTk5MTI=", "number": 1083, "title": "Replace pkg_resources.version with importlib.metadata.version", "user": {"login": "jules-ch", "id": 43635101, "node_id": "MDQ6VXNlcjQzNjM1MTAx", "avatar_url": "https://avatars0.githubusercontent.com/u/43635101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jules-ch", "html_url": "https://github.com/jules-ch", "followers_url": "https://api.github.com/users/jules-ch/followers", "following_url": "https://api.github.com/users/jules-ch/following{/other_user}", "gists_url": "https://api.github.com/users/jules-ch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jules-ch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jules-ch/subscriptions", "organizations_url": "https://api.github.com/users/jules-ch/orgs", "repos_url": "https://api.github.com/users/jules-ch/repos", "events_url": "https://api.github.com/users/jules-ch/events{/privacy}", "received_events_url": "https://api.github.com/users/jules-ch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-17T14:03:31Z", "updated_at": "2020-04-23T21:58:23Z", "closed_at": "2020-04-23T21:55:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Replace setuptools `pkg_resources.version` with importlib.metadata.version from the standard library introduced in Python 3.8.\r\n\r\nFor Python < 3.8, we can rely on the backport imprtlib-metadata, which can be removed when we will move forward.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1081", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1081/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1081/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1081/events", "html_url": "https://github.com/hgrecco/pint/issues/1081", "id": 601804386, "node_id": "MDU6SXNzdWU2MDE4MDQzODY=", "number": 1081, "title": "Pint parses \"celsius\" but not \"Celsius\"", "user": {"login": "dopplershift", "id": 221526, "node_id": "MDQ6VXNlcjIyMTUyNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/221526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dopplershift", "html_url": "https://github.com/dopplershift", "followers_url": "https://api.github.com/users/dopplershift/followers", "following_url": "https://api.github.com/users/dopplershift/following{/other_user}", "gists_url": "https://api.github.com/users/dopplershift/gists{/gist_id}", "starred_url": "https://api.github.com/users/dopplershift/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dopplershift/subscriptions", "organizations_url": "https://api.github.com/users/dopplershift/orgs", "repos_url": "https://api.github.com/users/dopplershift/repos", "events_url": "https://api.github.com/users/dopplershift/events{/privacy}", "received_events_url": "https://api.github.com/users/dopplershift/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-17T08:41:04Z", "updated_at": "2020-04-23T21:27:28Z", "closed_at": "2020-04-22T07:43:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "So this works:\r\n```python\r\nfrom pint import UnitRegistry\r\nureg = UnitRegistry()\r\nureg.parse_units('celsius')\r\n```\r\nbut the following:\r\n``` python\r\nfrom pint import UnitRegistry\r\nureg = UnitRegistry()\r\nureg.parse_units('Celsius')\r\n```\r\ngives:\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/Users/rmay/miniconda3/envs/py38/lib/python3.8/site-packages/pint/registry.py\", line 1065, in parse_units\r\n    units = self._parse_units(input_string, as_delta)\r\n  File \"/Users/rmay/miniconda3/envs/py38/lib/python3.8/site-packages/pint/registry.py\", line 1264, in _parse_units\r\n    return super()._parse_units(input_string, as_delta)\r\n  File \"/Users/rmay/miniconda3/envs/py38/lib/python3.8/site-packages/pint/registry.py\", line 1093, in _parse_units\r\n    cname = self.get_name(name)\r\n  File \"/Users/rmay/miniconda3/envs/py38/lib/python3.8/site-packages/pint/registry.py\", line 626, in get_name\r\n    raise UndefinedUnitError(name_or_alias)\r\npint.errors.UndefinedUnitError: 'Celsius' is not defined in the unit registry\r\n```\r\n\r\nthat seems wrong. At the very least I would expect \"Celsius\" to be the one that works if only one of them works.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1072", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1072/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1072/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1072/events", "html_url": "https://github.com/hgrecco/pint/issues/1072", "id": 596415913, "node_id": "MDU6SXNzdWU1OTY0MTU5MTM=", "number": 1072, "title": "dir() mixes units with methods - implement __iter__ instead?", "user": {"login": "TomNicholas", "id": 35968931, "node_id": "MDQ6VXNlcjM1OTY4OTMx", "avatar_url": "https://avatars2.githubusercontent.com/u/35968931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomNicholas", "html_url": "https://github.com/TomNicholas", "followers_url": "https://api.github.com/users/TomNicholas/followers", "following_url": "https://api.github.com/users/TomNicholas/following{/other_user}", "gists_url": "https://api.github.com/users/TomNicholas/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomNicholas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomNicholas/subscriptions", "organizations_url": "https://api.github.com/users/TomNicholas/orgs", "repos_url": "https://api.github.com/users/TomNicholas/repos", "events_url": "https://api.github.com/users/TomNicholas/events{/privacy}", "received_events_url": "https://api.github.com/users/TomNicholas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-08T08:51:12Z", "updated_at": "2020-04-09T14:01:36Z", "closed_at": "2020-04-09T14:01:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If I explore the directory the `UnitRegistry` with `dir(unit_registry)`, the result displays methods and attributes mixed in with actual choices of units - for example `parse_units` appears right next to `parsec`.\r\n\r\n`__dir__` is conventionally used for methods and attributes: might it make for a cleaner interface to separate theses two distinct features of the class? \r\n\r\nI see that you need a way to list all the units easily, but I also notice `UnitRegistry` doesn't define an `__iter__` method. If `__iter__` returned the unit keys then you could instead list all the units with `list(unit_registry)`, which IMO would be a very intuitive syntax. You could of course then loop over units too for free. That would leave `__dir__` available to list just the actual class methods and attributes, which would make interactive exploration of the class structure easier.\r\n\r\nJust a thought anyway.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1071", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1071/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1071/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1071/events", "html_url": "https://github.com/hgrecco/pint/issues/1071", "id": 596305005, "node_id": "MDU6SXNzdWU1OTYzMDUwMDU=", "number": 1071, "title": "Why is the registry a private attribute once created?", "user": {"login": "TomNicholas", "id": 35968931, "node_id": "MDQ6VXNlcjM1OTY4OTMx", "avatar_url": "https://avatars2.githubusercontent.com/u/35968931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomNicholas", "html_url": "https://github.com/TomNicholas", "followers_url": "https://api.github.com/users/TomNicholas/followers", "following_url": "https://api.github.com/users/TomNicholas/following{/other_user}", "gists_url": "https://api.github.com/users/TomNicholas/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomNicholas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomNicholas/subscriptions", "organizations_url": "https://api.github.com/users/TomNicholas/orgs", "repos_url": "https://api.github.com/users/TomNicholas/repos", "events_url": "https://api.github.com/users/TomNicholas/events{/privacy}", "received_events_url": "https://api.github.com/users/TomNicholas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-08T04:46:19Z", "updated_at": "2020-04-09T05:57:26Z", "closed_at": "2020-04-09T05:57:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm currently making my first serious forays into pint, as I would really love to see it working fully with xarray.\r\n\r\nIf I'm loading data and quantifying it with pint, it makes sense to initialise the unit registry as part of that loading process. However, if I do that within a function, I won't have access to the namespace in which the `UnitRegistry` instance was created. I will almost certainly need the object again though, say if I want to convert my data to any other specific units. I noticed that `Unit` instances have ` _REGISTRY` private attribute containing the registry, so I can still get to it that way. But is there a reason why this isn't publicly-advertised?\r\n\r\nAlso, from a usage point of view, what are your opinions on immediately putting the registry into a global variable for later access? Is that against the design philosophy of pint somehow?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1062", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1062/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1062/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1062/events", "html_url": "https://github.com/hgrecco/pint/issues/1062", "id": 589080566, "node_id": "MDU6SXNzdWU1ODkwODA1NjY=", "number": 1062, "title": "unit redefinition in a context breaks transform in another context", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-27T11:52:30Z", "updated_at": "2020-04-02T19:31:28Z", "closed_at": "2020-04-02T19:31:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\nureg = pint.UnitRegistry()\r\nfor i in range(2):\r\n    print(f\"run {i}\")\r\n    ctx = pint.Context.from_lines([\"@context _\", \"cal = 4 J\"])\r\n    with ureg.context(\"sp\", ctx):\r\n        u = ureg.Unit(\"nm\")\r\n        q = ureg.Quantity(1, u)\r\n        q.to('J')\r\n```\r\nOutput:\r\n```\r\nrun 0\r\nrun 1\r\nKeyError: 'nanometer'\r\n```\r\nThe first run never fails.\r\nThe failure on the second run only happens if\r\n1. ctx is recreated from lines between runs, and\r\n2. the Unit instance is created while the contexts are enabled, and\r\n3. the target unit is one used as a source in a redefinition in ctx (``q.to('ft')`` has no problem)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1058", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1058/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1058/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1058/events", "html_url": "https://github.com/hgrecco/pint/issues/1058", "id": 582849425, "node_id": "MDU6SXNzdWU1ODI4NDk0MjU=", "number": 1058, "title": "Unit reduction on Quantity results in KeyError", "user": {"login": "matthiaskoenig", "id": 900538, "node_id": "MDQ6VXNlcjkwMDUzOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/900538?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskoenig", "html_url": "https://github.com/matthiaskoenig", "followers_url": "https://api.github.com/users/matthiaskoenig/followers", "following_url": "https://api.github.com/users/matthiaskoenig/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskoenig/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskoenig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskoenig/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskoenig/orgs", "repos_url": "https://api.github.com/users/matthiaskoenig/repos", "events_url": "https://api.github.com/users/matthiaskoenig/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskoenig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-17T08:44:39Z", "updated_at": "2020-08-22T01:00:58Z", "closed_at": "2020-08-22T01:00:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to do some simple unit manipulation with pint 0.11, but getting the following issue\r\n```\r\nfrom pint import UnitRegistry\r\n\r\nureg = UnitRegistry()\r\nQ_ = ureg.Quantity\r\ndose = Q_(10.0, \"mg/kg\") * Q_(1.0, \"mole/g\")\r\nprint(dose)\r\ndose.ito_reduced_units()\r\n```\r\nresults in\r\n```\r\n10.0 milligram * mole / gram / kilogram\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/mkoenig/git/pkdb_analysis/pkdb_analysis/deprecated/oven.py\", line 7, in <module>\r\n    dose.ito_reduced_units()\r\n  File \"/home/mkoenig/envs/pkdb_analysis/lib/python3.7/site-packages/pint/quantity.py\", line 625, in ito_reduced_units\r\n    newunits = newunits.add(unit2, exp / power).remove([unit1])\r\n  File \"/home/mkoenig/envs/pkdb_analysis/lib/python3.7/site-packages/pint/util.py\", line 362, in remove\r\n    new._d.pop(k)\r\nKeyError: 'kilogram'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1054", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1054/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1054/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1054/events", "html_url": "https://github.com/hgrecco/pint/issues/1054", "id": 580346467, "node_id": "MDU6SXNzdWU1ODAzNDY0Njc=", "number": 1054, "title": "Offset related dimensions - degrees API, oil specific gravity, and density", "user": {"login": "Amaretto-Coke", "id": 55115580, "node_id": "MDQ6VXNlcjU1MTE1NTgw", "avatar_url": "https://avatars1.githubusercontent.com/u/55115580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amaretto-Coke", "html_url": "https://github.com/Amaretto-Coke", "followers_url": "https://api.github.com/users/Amaretto-Coke/followers", "following_url": "https://api.github.com/users/Amaretto-Coke/following{/other_user}", "gists_url": "https://api.github.com/users/Amaretto-Coke/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amaretto-Coke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amaretto-Coke/subscriptions", "organizations_url": "https://api.github.com/users/Amaretto-Coke/orgs", "repos_url": "https://api.github.com/users/Amaretto-Coke/repos", "events_url": "https://api.github.com/users/Amaretto-Coke/events{/privacy}", "received_events_url": "https://api.github.com/users/Amaretto-Coke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-13T03:23:09Z", "updated_at": "2020-04-23T19:07:26Z", "closed_at": "2020-04-23T19:07:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Petroleum Engineering there is a lot of empirical formulas that rely on degrees API, which is a dimension related to the density of oil. I can define degrees API as a dimension in Pint but am having trouble setting up a context to convert back and forth between degAPI, specific gravity, and density interchangeably. Is this possible through Pint? \r\n\r\nThe formula for a substance's specific gravity is:\r\n`SG = \u03c1_substance/\u03c1_reference`\r\nwhere \u03c1 is density. SG should result in a dimensionless value. (For liquids, the denominator in the above expression is 1000 kg/m\u00b3, for gasses, it's 1.225 kg/m\u00b3).\r\n\r\nThe fomula for an oil's grade in degrees API is:\r\n`degAPI = 141.5/SG - 131.5`\r\nI'm currently running into problems with the `- 131.5`, as I don't believe pint allows offsets in dimension conversions.\r\n\r\nMy question is two fold:\r\n1) is it possible to set up a Pint context so that the `.to()` functionality can convert between density and specify gravity? \r\n2) is it possible to have an offset in a context dimension conversion, such as in the degAPI formula?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1051", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1051/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1051/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1051/events", "html_url": "https://github.com/hgrecco/pint/issues/1051", "id": 580120980, "node_id": "MDU6SXNzdWU1ODAxMjA5ODA=", "number": 1051, "title": "Add Quantity to bare NaN", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-12T18:01:34Z", "updated_at": "2020-03-13T02:28:23Z", "closed_at": "2020-03-13T02:28:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Related to https://github.com/hgrecco/pint/issues/1050\r\n\r\nThis correctly crashes:\r\n```python\r\n>>> pint.Quantity(1, \"kg\") + 1\r\npint.errors.DimensionalityError: Cannot convert from 'kilogram' to 'dimensionless'\r\n```\r\nWhile this, also correctly, graciously detects that RHS is zero:\r\n```python\r\n>>> pint.Quantity(1, \"kg\") + 0\r\n1 <Unit('kilogram')>\r\n```\r\nI would expect NaN to be treated in the same way as zero, but it isn't:\r\n```python\r\n>>> pint.Quantity(1, \"kg\") + float(\"nan\")\r\npint.errors.DimensionalityError: Cannot convert from 'kilogram' to 'dimensionless'\r\n```\r\nExpected output:\r\n```python\r\nnan <Unit('kilogram')>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1050", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1050/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1050/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1050/events", "html_url": "https://github.com/hgrecco/pint/issues/1050", "id": 580116257, "node_id": "MDU6SXNzdWU1ODAxMTYyNTc=", "number": 1050, "title": "numpy.concatenate Quantities and non-pint zeroes", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-12T17:54:28Z", "updated_at": "2020-03-19T14:17:38Z", "closed_at": "2020-03-19T14:17:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This correctly crashes:\r\n```python\r\n>>> pint.Quantity(1, \"kg\") + 1\r\npint.errors.DimensionalityError: Cannot convert from 'kilogram' to 'dimensionless'\r\n```\r\nWhile this, also correctly, graciously detects that RHS is full of zeroes:\r\n```python\r\n>>> pint.Quantity([1, 2], \"kg\") + numpy.array([0, 0])\r\narray([1, 2]) <Unit('kilogram')>\r\n```\r\nI would expect ``numpy.concatenate`` to behave in the same way as ``__add__``, but it doesn't:\r\n```python\r\n>>> numpy.concatenate([pint.Quantity([1, 2], \"kg\"), numpy.array([0])])\r\npint.errors.DimensionalityError: Cannot convert from 'dimensionless' to 'kilogram'\r\n```\r\nExpected output:\r\n```python\r\narray([1, 2, 0]) <Unit('kilogram')>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1043", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1043/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1043/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1043/events", "html_url": "https://github.com/hgrecco/pint/issues/1043", "id": 576416265, "node_id": "MDU6SXNzdWU1NzY0MTYyNjU=", "number": 1043, "title": "taking the logarithm of a quantity", "user": {"login": "jacopo-chevallard", "id": 8123595, "node_id": "MDQ6VXNlcjgxMjM1OTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/8123595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacopo-chevallard", "html_url": "https://github.com/jacopo-chevallard", "followers_url": "https://api.github.com/users/jacopo-chevallard/followers", "following_url": "https://api.github.com/users/jacopo-chevallard/following{/other_user}", "gists_url": "https://api.github.com/users/jacopo-chevallard/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacopo-chevallard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacopo-chevallard/subscriptions", "organizations_url": "https://api.github.com/users/jacopo-chevallard/orgs", "repos_url": "https://api.github.com/users/jacopo-chevallard/repos", "events_url": "https://api.github.com/users/jacopo-chevallard/events{/privacy}", "received_events_url": "https://api.github.com/users/jacopo-chevallard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-05T17:28:00Z", "updated_at": "2020-05-21T19:37:57Z", "closed_at": "2020-03-12T12:00:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everyone, congrats for this nice project !! ;)\r\n\r\nI see that in #71 you're discussing about logarithmic units, and perhaps my question is related to that issue: when I try to compute\r\n```\r\nimport numpy as np\r\nfrom pint import UnitRegistry\r\nureg = UnitRegistry()\r\nA = 10. * ureg.meter\r\nnp.log10(A)\r\n```\r\nI get the error \r\n```\r\nDimensionalityError: Cannot convert from 'meter' ([length]) to 'dimensionless' (dimensionless)\r\n```\r\nDoes this mean that standard arithmetic operations such as exp, log, pow, ... are unsupported when using a pint Quantity? In many situations you may want to compute the log of a quantity, do something, then revert back to linear units with exponentiation, so that the final and inital units are unchanged, although the final unit is really 10**(log10(unit))\r\n\r\nDigging into the CHANGES file I see that version 0.8.0 discussed some possibly related things, e.g.\r\n```\r\n- NumPy exp and log keeps the type\r\n  (Issue #95)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1040", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1040/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1040/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1040/events", "html_url": "https://github.com/hgrecco/pint/issues/1040", "id": 573645753, "node_id": "MDU6SXNzdWU1NzM2NDU3NTM=", "number": 1040, "title": "Addition of a Quantity to a float", "user": {"login": "ayushsgupta", "id": 16586331, "node_id": "MDQ6VXNlcjE2NTg2MzMx", "avatar_url": "https://avatars0.githubusercontent.com/u/16586331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayushsgupta", "html_url": "https://github.com/ayushsgupta", "followers_url": "https://api.github.com/users/ayushsgupta/followers", "following_url": "https://api.github.com/users/ayushsgupta/following{/other_user}", "gists_url": "https://api.github.com/users/ayushsgupta/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayushsgupta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayushsgupta/subscriptions", "organizations_url": "https://api.github.com/users/ayushsgupta/orgs", "repos_url": "https://api.github.com/users/ayushsgupta/repos", "events_url": "https://api.github.com/users/ayushsgupta/events{/privacy}", "received_events_url": "https://api.github.com/users/ayushsgupta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-02T00:01:16Z", "updated_at": "2020-03-06T01:01:36Z", "closed_at": "2020-03-06T01:01:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Apologies in advance if this question has been asked/discussed previously. Normally when adding a float to a `Quantity` object, a `DimensionalityError` is raised. I was wondering if there is a mode in pint that is not as strict in checking units for addition and subtraction. When adding two numbers, if one is not a `Quantity`, then the units can be inferred. For example, `Quantity(1.0, 'eV') + 1.0` would return `Quantity(2.0, 'eV')` instead of an error. If this sort of feature doesn't exist yet, do you think it would be useful or not?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1036", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1036/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1036/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1036/events", "html_url": "https://github.com/hgrecco/pint/issues/1036", "id": 569659596, "node_id": "MDU6SXNzdWU1Njk2NTk1OTY=", "number": 1036, "title": "__slots__ without __getstate__", "user": {"login": "dschien", "id": 229314, "node_id": "MDQ6VXNlcjIyOTMxNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/229314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dschien", "html_url": "https://github.com/dschien", "followers_url": "https://api.github.com/users/dschien/followers", "following_url": "https://api.github.com/users/dschien/following{/other_user}", "gists_url": "https://api.github.com/users/dschien/gists{/gist_id}", "starred_url": "https://api.github.com/users/dschien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dschien/subscriptions", "organizations_url": "https://api.github.com/users/dschien/orgs", "repos_url": "https://api.github.com/users/dschien/repos", "events_url": "https://api.github.com/users/dschien/events{/privacy}", "received_events_url": "https://api.github.com/users/dschien/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-24T06:26:50Z", "updated_at": "2020-03-02T17:36:25Z", "closed_at": "2020-03-02T17:36:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm trying to pickle a df with hdf5. \r\n\r\nThat fails with the below error because `__getstate__` has vanished from class `UnitsContainer`\r\n\r\n```python\r\n  File \"/Users/csxds/workspaces/venvs/dimpact_test/lib/python3.7/site-packages/tables/attributeset.py\", line 494, in __setattr__\r\n    self._g__setattr(name, value)\r\n  File \"/Users/csxds/workspaces/venvs/dimpact_test/lib/python3.7/site-packages/tables/attributeset.py\", line 436, in _g__setattr\r\n    self._g_setattr(self._v_node, name, stvalue)\r\n  File \"tables/hdf5extension.pyx\", line 708, in tables.hdf5extension.AttributeSet._g_setattr\r\n  File \"/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/copyreg.py\", line 73, in _reduce_ex\r\n    \"defining __getstate__ cannot be pickled\") from None\r\nTypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled\r\n```\r\nAny chance this can be brought back?\r\n\r\nMany thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1032", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1032/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1032/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1032/events", "html_url": "https://github.com/hgrecco/pint/issues/1032", "id": 567871225, "node_id": "MDU6SXNzdWU1Njc4NzEyMjU=", "number": 1032, "title": "Multiplication of quantity by dictionary-like object", "user": {"login": "bmlivin", "id": 61252787, "node_id": "MDQ6VXNlcjYxMjUyNzg3", "avatar_url": "https://avatars0.githubusercontent.com/u/61252787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmlivin", "html_url": "https://github.com/bmlivin", "followers_url": "https://api.github.com/users/bmlivin/followers", "following_url": "https://api.github.com/users/bmlivin/following{/other_user}", "gists_url": "https://api.github.com/users/bmlivin/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmlivin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmlivin/subscriptions", "organizations_url": "https://api.github.com/users/bmlivin/orgs", "repos_url": "https://api.github.com/users/bmlivin/repos", "events_url": "https://api.github.com/users/bmlivin/events{/privacy}", "received_events_url": "https://api.github.com/users/bmlivin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-19T21:53:33Z", "updated_at": "2020-04-02T21:52:18Z", "closed_at": "2020-04-02T21:52:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I want to multiply a `quantity` by a `dict`-like object which has its own multiply defined. I would like for `pint` to return a `NotImplemented` when it tries to multiply a `quantity` by an object of my type, forcing the multiply to be done using my object's multiply. Here's what currently happens:\r\n\r\n```python\r\nimport collections\r\nimport pint\r\n\r\nureg = pint.UnitRegistry()\r\nq = 5 * ureg.s\r\nc = collections.Counter({1:2, 3:4})\r\nq * c\r\nAttributeError: 'NotImplementedType' object has no attribute '_REGISTRY'\r\n```\r\nI understand that `collections.Counter` doesn't have its own multiply defined, but the error I get is the same if I attempt to multiply the `quantity` by my object with the `quantity` on the left (if the `quantity` is on the right, my object's multiply is used). The actual error here occurs in `pint.quantity.ireduce_dimensions`, when the result of calling the input function `f` is `NotImplemented`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1028", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1028/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1028/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1028/events", "html_url": "https://github.com/hgrecco/pint/issues/1028", "id": 565617523, "node_id": "MDU6SXNzdWU1NjU2MTc1MjM=", "number": 1028, "title": "Rounding error in unit conversion", "user": {"login": "drpeterfoster", "id": 7874935, "node_id": "MDQ6VXNlcjc4NzQ5MzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7874935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpeterfoster", "html_url": "https://github.com/drpeterfoster", "followers_url": "https://api.github.com/users/drpeterfoster/followers", "following_url": "https://api.github.com/users/drpeterfoster/following{/other_user}", "gists_url": "https://api.github.com/users/drpeterfoster/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpeterfoster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpeterfoster/subscriptions", "organizations_url": "https://api.github.com/users/drpeterfoster/orgs", "repos_url": "https://api.github.com/users/drpeterfoster/repos", "events_url": "https://api.github.com/users/drpeterfoster/events{/privacy}", "received_events_url": "https://api.github.com/users/drpeterfoster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-15T00:03:49Z", "updated_at": "2020-02-22T16:11:34Z", "closed_at": "2020-02-22T16:11:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that the unit registry conversion is introducing precision errors.\r\n```\r\n>>> import pint\r\n>>> ur = pint.UnitRegistry()\r\n>>> ur.Quantity(1, 'uM').m_as('nM')\r\n999.9999999999999\r\n\r\n>>> ur.Quantity(1, 'nM').m_as('uM')\r\n0.0010000000000000002\r\n```\r\npint=0.10.1\r\npython=3.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1026", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1026/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1026/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1026/events", "html_url": "https://github.com/hgrecco/pint/issues/1026", "id": 564340012, "node_id": "MDU6SXNzdWU1NjQzNDAwMTI=", "number": 1026, "title": "Numpy pad keyerror", "user": {"login": "mark-boer", "id": 12862013, "node_id": "MDQ6VXNlcjEyODYyMDEz", "avatar_url": "https://avatars0.githubusercontent.com/u/12862013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-boer", "html_url": "https://github.com/mark-boer", "followers_url": "https://api.github.com/users/mark-boer/followers", "following_url": "https://api.github.com/users/mark-boer/following{/other_user}", "gists_url": "https://api.github.com/users/mark-boer/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-boer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-boer/subscriptions", "organizations_url": "https://api.github.com/users/mark-boer/orgs", "repos_url": "https://api.github.com/users/mark-boer/repos", "events_url": "https://api.github.com/users/mark-boer/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-boer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-12T23:21:42Z", "updated_at": "2020-02-22T02:34:58Z", "closed_at": "2020-02-22T02:34:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hey all,\r\n\r\nFirst of all, really cool project. I ran into the following issue: when calling `numpy.pad` on a numpy array based quantity I ran into the following error:\r\n\r\n```\r\nnp.pad(np.array([1,1]) * ureg.meter, pad_width=1)\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"<__array_function__ internals>\", line 6, in pad\r\n  File \"/usr/local/lib/python3.7/site-packages/pint/quantity.py\", line 1513, in __array_function__\r\n    return numpy_wrap(\"function\", func, args, kwargs, types)\r\n  File \"/usr/local/lib/python3.7/site-packages/pint/numpy_func.py\", line 889, in numpy_wrap\r\n    return handled[name](*args, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/pint/numpy_func.py\", line 668, in _pad\r\n    kwargs[\"constant_values\"] = _recursive_convert(kwargs[\"constant_values\"], units)\r\nKeyError: 'constant_values'\r\n``` \r\n\r\nThe problem lies in the following lines, it is not checked if `kwargs` does contain \"constant_values\" or \"end_values\". Adding the check `and \"constant_values\" in kwargs` should probably work.\r\n```\r\nif mode == \"constant\":\r\n    kwargs[\"constant_values\"] = _recursive_convert(kwargs[\"constant_values\"], units)\r\nelif mode == \"linear_ramp\":\r\n    kwargs[\"end_values\"] = _recursive_convert(kwargs[\"end_values\"], units)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1018", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1018/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1018/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1018/events", "html_url": "https://github.com/hgrecco/pint/issues/1018", "id": 561535068, "node_id": "MDU6SXNzdWU1NjE1MzUwNjg=", "number": 1018, "title": "Error when converting motor voltage constant from V*s/rad in mV*min", "user": {"login": "thehalftruth", "id": 9128021, "node_id": "MDQ6VXNlcjkxMjgwMjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/9128021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thehalftruth", "html_url": "https://github.com/thehalftruth", "followers_url": "https://api.github.com/users/thehalftruth/followers", "following_url": "https://api.github.com/users/thehalftruth/following{/other_user}", "gists_url": "https://api.github.com/users/thehalftruth/gists{/gist_id}", "starred_url": "https://api.github.com/users/thehalftruth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thehalftruth/subscriptions", "organizations_url": "https://api.github.com/users/thehalftruth/orgs", "repos_url": "https://api.github.com/users/thehalftruth/repos", "events_url": "https://api.github.com/users/thehalftruth/events{/privacy}", "received_events_url": "https://api.github.com/users/thehalftruth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-07T09:58:54Z", "updated_at": "2020-02-12T00:18:53Z", "closed_at": "2020-02-12T00:18:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wanted to convert a motor voltage constant from V\\*s/rad in mV\\*min, but I get the wrong result.\r\n```\r\nfrom pint import UnitRegistry\r\nureg = UnitRegistry()\r\nQ_ = ureg.Quantity\r\na = Q_(0.32, \"V*s/rad\")\r\nb = a.to(ureg.parse_expression(\"mV*min\"))\r\nprint(a, \"==\", b)\r\n```\r\n\r\nOutput:\r\n0.32 second * volt / radian == 5.333333333333334 millivolt * minute\r\n\r\nBut this is wrong, 33.51 mV\\*min is correct:\r\n0.32 (V\\*s)/rad \\* (2\\*pi) = 2.01 V\\*s \r\n2.01 V\\*s / 60 = 0.03351 V\\*min\r\n0.03351 V\\*min \\* 1000 = 33.51 mV\\*min\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1017", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1017/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1017/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1017/events", "html_url": "https://github.com/hgrecco/pint/issues/1017", "id": 561176463, "node_id": "MDU6SXNzdWU1NjExNzY0NjM=", "number": 1017, "title": "Pickled Quantity Changes Type", "user": {"login": "SimonBoothroyd", "id": 22272126, "node_id": "MDQ6VXNlcjIyMjcyMTI2", "avatar_url": "https://avatars0.githubusercontent.com/u/22272126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonBoothroyd", "html_url": "https://github.com/SimonBoothroyd", "followers_url": "https://api.github.com/users/SimonBoothroyd/followers", "following_url": "https://api.github.com/users/SimonBoothroyd/following{/other_user}", "gists_url": "https://api.github.com/users/SimonBoothroyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonBoothroyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonBoothroyd/subscriptions", "organizations_url": "https://api.github.com/users/SimonBoothroyd/orgs", "repos_url": "https://api.github.com/users/SimonBoothroyd/repos", "events_url": "https://api.github.com/users/SimonBoothroyd/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonBoothroyd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9211125, "node_id": "MDU6TGFiZWw5MjExMTI1", "url": "https://api.github.com/repos/hgrecco/pint/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/hgrecco/pint/milestones/9", "html_url": "https://github.com/hgrecco/pint/milestone/9", "labels_url": "https://api.github.com/repos/hgrecco/pint/milestones/9/labels", "id": 4974941, "node_id": "MDk6TWlsZXN0b25lNDk3NDk0MQ==", "number": 9, "title": "0.11", "description": "", "creator": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2020-01-06T04:21:02Z", "updated_at": "2020-02-19T22:43:39Z", "due_on": "2020-02-18T08:00:00Z", "closed_at": "2020-02-19T22:43:39Z"}, "comments": 4, "created_at": "2020-02-06T18:00:04Z", "updated_at": "2020-06-03T12:38:01Z", "closed_at": "2020-02-19T16:34:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pickling and un-pickling a quantity will cause type coercion between the dynamic `Quantity` class defined by a `UnitRegistry` and the global `Quantity` class. \r\n\r\nThis leads to exceptions being raised when comparing quantities which have been pickled with those that haven't:\r\n\r\n## Steps to Reproduce the Problem\r\n\r\n```\r\nimport pint\r\nimport pickle\r\n\r\nureg = pint.UnitRegistry()\r\npint.set_application_registry(ureg)\r\n\r\nx = 1.0 * ureg.kelvin\r\ny = pickle.loads(pickle.dumps(x))\r\n\r\nz = x > y\r\n```\r\n(tested with `pint ==0.10.1`)\r\n\r\n## Exception Raised\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"xxx/python3.7/site-packages/IPython/core/interactiveshell.py\", line 3331, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-2-1f849a21d3d1>\", line 10, in <module>\r\n    z = x > y\r\n  File \"xxx/python3.7/site-packages/pint/quantity.py\", line 1484, in <lambda>\r\n    __gt__ = lambda self, other: self.compare(other, op=operator.gt)\r\n  File \"xxx/python3.7/site-packages/pint/quantity.py\", line 106, in wrapped\r\n    result = f(self, *args, **kwargs)\r\n  File \"xxx/python3.7/site-packages/pint/quantity.py\", line 1471, in compare\r\n    raise ValueError(\"Cannot compare Quantity and {}\".format(type(other)))\r\nValueError: Cannot compare Quantity and <class 'pint.quantity.Quantity'>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1016", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1016/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1016/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1016/events", "html_url": "https://github.com/hgrecco/pint/issues/1016", "id": 560549640, "node_id": "MDU6SXNzdWU1NjA1NDk2NDA=", "number": 1016, "title": "Constructing Quantity from Quantity", "user": {"login": "ipcoder", "id": 9642454, "node_id": "MDQ6VXNlcjk2NDI0NTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9642454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipcoder", "html_url": "https://github.com/ipcoder", "followers_url": "https://api.github.com/users/ipcoder/followers", "following_url": "https://api.github.com/users/ipcoder/following{/other_user}", "gists_url": "https://api.github.com/users/ipcoder/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipcoder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipcoder/subscriptions", "organizations_url": "https://api.github.com/users/ipcoder/orgs", "repos_url": "https://api.github.com/users/ipcoder/repos", "events_url": "https://api.github.com/users/ipcoder/events{/privacy}", "received_events_url": "https://api.github.com/users/ipcoder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-02-05T18:25:25Z", "updated_at": "2020-02-08T11:35:50Z", "closed_at": "2020-02-07T22:43:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is this a desirable behaviour?\r\n```python\r\na = Quantity([1,2], 'nm')\r\nb = Quantity(a, 'mm')\r\n\r\nisinstance(b.magnitude, Quantity) == True\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1012", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1012/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1012/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1012/events", "html_url": "https://github.com/hgrecco/pint/issues/1012", "id": 559157010, "node_id": "MDU6SXNzdWU1NTkxNTcwMTA=", "number": 1012, "title": "Command-line unit converter", "user": {"login": "Jellby", "id": 7943459, "node_id": "MDQ6VXNlcjc5NDM0NTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/7943459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jellby", "html_url": "https://github.com/Jellby", "followers_url": "https://api.github.com/users/Jellby/followers", "following_url": "https://api.github.com/users/Jellby/following{/other_user}", "gists_url": "https://api.github.com/users/Jellby/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jellby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jellby/subscriptions", "organizations_url": "https://api.github.com/users/Jellby/orgs", "repos_url": "https://api.github.com/users/Jellby/repos", "events_url": "https://api.github.com/users/Jellby/events{/privacy}", "received_events_url": "https://api.github.com/users/Jellby/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/hgrecco/pint/milestones/9", "html_url": "https://github.com/hgrecco/pint/milestone/9", "labels_url": "https://api.github.com/repos/hgrecco/pint/milestones/9/labels", "id": 4974941, "node_id": "MDk6TWlsZXN0b25lNDk3NDk0MQ==", "number": 9, "title": "0.11", "description": "", "creator": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2020-01-06T04:21:02Z", "updated_at": "2020-02-19T22:43:39Z", "due_on": "2020-02-18T08:00:00Z", "closed_at": "2020-02-19T22:43:39Z"}, "comments": 2, "created_at": "2020-02-03T15:29:47Z", "updated_at": "2020-02-19T16:31:55Z", "closed_at": "2020-02-19T16:31:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I wrote, mainly for my own use, a little script to use pint for quickly doing conversion between units and checking dimensionalities or conversion factors. It supports uncertainties in the physical constants (not in the values to be converted). Some examples:\r\n\r\n```\r\n$ unit_convert.py Eh   # to SI\r\n1 hartree = 4.359744722207(8)e-18 kg\u00b7m\u00b2/s\u00b2\r\n\r\n$ unit_convert.py Eh kcal/mol  # to other units, even using some default contexts\r\n1 hartree = 627.509474063(1) kcal/mol\r\n$ unit_convert.py Eh Btu\r\n1 hartree = 4.132240110674(8)e-21 Btu\r\n$ unit_convert.py Eh cm_1\r\n1 hartree = 219474.631363 cm_1\r\n\r\n$ unit_convert.py -p6 25torr psi  # request precision\r\n25 torr = 0.483419 psi\r\n\r\n$ unit_convert.py \"(3.47Eh/(0.12\u00c5)*pi)\" N  # more complex expressions\r\n28.916666666666668 hartree * pi / angstrom = 3.960583392343(8)e-06 N\r\n```\r\n\r\nThis is of course all done by pint, and the script does little more than setting the uncertainties, print formats and some defaults, and in that sense I guess it just reflects some personal preferences/needs.\r\n\r\nWould it be appropriate to include the script with pint somehow? Would it be useful for others? Should I host it elsewhere? Is there some other place where it may fit better?\r\n\r\nThis is the script:\r\n```\r\n#!/usr/bin/env python3\r\n\r\nimport argparse\r\nfrom pint import UnitRegistry\r\nimport sys\r\nimport re\r\n\r\nparser = argparse.ArgumentParser(description='Unit converter.')\r\nparser.add_argument('-s', '--system', metavar='sys', default='SI', help='unit system to convert to (default: SI)')\r\nparser.add_argument('-p', '--prec', metavar='n', type=int, default=12, help='number of maximum significant figures (default: 12)')\r\nparser.add_argument('-u', '--prec-unc', metavar='n', type=int, default=2, help='number of maximum uncertainty digits (default: 2)')\r\nparser.add_argument('-U', '--no-unc', dest='unc', action='store_false', help='ignore uncertainties in constants')\r\nparser.add_argument('-C', '--no-corr', dest='corr', action='store_false', help='ignore correlations between constants')\r\nparser.add_argument('fr', metavar='from', type=str, help='unit or quantity to convert from')\r\nparser.add_argument('to', type=str, nargs='?', help='unit to convert to')\r\nargs = parser.parse_args()\r\n\r\nureg = UnitRegistry()\r\nureg.auto_reduce_dimensions = True\r\nureg.autoconvert_offset_to_baseunit = True\r\nureg.enable_contexts('Gau', 'ESU', 'sp', 'energy', 'boltzmann')\r\nureg.default_system = args.system\r\n\r\nif args.unc:\r\n  import uncertainties\r\n  import numpy as np\r\n  # Measured constans subject to correlation\r\n  #  R_i: Rydberg constant\r\n  #  g_e: Electron g factor\r\n  #  m_u: Atomic mass constant\r\n  #  m_e: Electron mass\r\n  #  m_p: Proton mass\r\n  #  m_n: Neutron mass\r\n  R_i = (ureg._units['R_inf'].converter.scale, 0.0000000000021e7)\r\n  g_e = (ureg._units['g_e'].converter.scale,   0.00000000000035)\r\n  m_u = (ureg._units['m_u'].converter.scale,   0.00000000050e-27)\r\n  m_e = (ureg._units['m_e'].converter.scale,   0.00000000028e-30)\r\n  m_p = (ureg._units['m_p'].converter.scale,   0.00000000051e-27)\r\n  m_n = (ureg._units['m_n'].converter.scale,   0.00000000095e-27)\r\n  if args.corr:\r\n    # Correlation matrix between measured constants (to be completed below)\r\n    #                   R_i       g_e       m_u       m_e       m_p       m_n\r\n    corr = np.array([[  0.0    , -0.00206,  0.00369,  0.00436,  0.00194,  0.00233],   # R_i\r\n                     [  0.0    ,  0.0    ,  0.99029,  0.99490,  0.97560,  0.52445],   # g_e\r\n                     [  0.0    ,  0.0    ,  0.0    ,  0.99536,  0.98516,  0.52959],   # m_u\r\n                     [  0.0    ,  0.0    ,  0.0    ,  0.0    ,  0.98058,  0.52714],   # m_e\r\n                     [  0.0    ,  0.0    ,  0.0    ,  0.0    ,  0.0    ,  0.51521],   # m_p\r\n                     [  0.0    ,  0.0    ,  0.0    ,  0.0    ,  0.0    ,  0.0    ]])  # m_n\r\n    corr += corr.T\r\n    np.fill_diagonal(corr, 1.0)\r\n    (R_i, g_e, m_u, m_e, m_p, m_n) = uncertainties.correlated_values_norm([R_i, g_e, m_u, m_e, m_p, m_n], corr)\r\n  else:\r\n    R_i = uncertainties.ufloat(*R_i)\r\n    g_e = uncertainties.ufloat(*g_e)\r\n    m_u = uncertainties.ufloat(*m_u)\r\n    m_e = uncertainties.ufloat(*m_e)\r\n    m_p = uncertainties.ufloat(*m_p)\r\n    m_n = uncertainties.ufloat(*m_n)\r\n  ureg._units['R_inf'].converter.scale = R_i\r\n  ureg._units['g_e'].converter.scale   = g_e\r\n  ureg._units['m_u'].converter.scale   = m_u\r\n  ureg._units['m_e'].converter.scale   = m_e\r\n  ureg._units['m_p'].converter.scale   = m_p\r\n  ureg._units['m_n'].converter.scale   = m_n\r\n\r\n  # Measured constants with zero correlation\r\n  ureg._units['gravitational_constant'].converter.scale = uncertainties.ufloat(ureg._units['gravitational_constant'].converter.scale, 0.00015e-11)\r\n  ureg._units['d_220'].converter.scale                  = uncertainties.ufloat(ureg._units['d_220'].converter.scale,                  0.000000032e-10)\r\n  ureg._units['K_alpha_Cu_d_220'].converter.scale       = uncertainties.ufloat(ureg._units['K_alpha_Cu_d_220'].converter.scale,       0.00000022)\r\n  ureg._units['K_alpha_Mo_d_220'].converter.scale       = uncertainties.ufloat(ureg._units['K_alpha_Mo_d_220'].converter.scale,       0.00000019)\r\n  ureg._units['K_alpha_W_d_220'].converter.scale        = uncertainties.ufloat(ureg._units['K_alpha_W_d_220'].converter.scale,        0.000000098)\r\n\r\n  ureg._root_units_cache = dict()\r\n  ureg._build_cache()\r\n\r\ndef convert(u_from, u_to=None, unc=None, factor=None):\r\n  q = ureg.Quantity(u_from)\r\n  fmt = '.{}g'.format(args.prec)\r\n  if unc:\r\n    q = q.plus_minus(unc)\r\n  if u_to:\r\n    nq = q.to(u_to)\r\n  else:\r\n    nq = q.to_base_units()\r\n  if (factor):\r\n    q *= ureg.Quantity(factor)\r\n    nq *= ureg.Quantity(factor).to_base_units()\r\n  prec_unc = use_unc(nq.magnitude, fmt, args.prec_unc)\r\n  if (prec_unc > 0):\r\n    fmt = '.{}uS'.format(prec_unc)\r\n  else:\r\n    try:\r\n      nq = nq.magnitude.n * nq.units\r\n    except:\r\n      pass\r\n  fmt = '{:' + fmt + '} {:~P}'\r\n  print(('{:} = ' + fmt).format(q, nq.magnitude, nq.units))\r\n\r\ndef use_unc(num, fmt, prec_unc):\r\n  unc = 0\r\n  try:\r\n    if (isinstance(num, uncertainties.UFloat)):\r\n      full = ('{:'+fmt+'}').format(num)\r\n      unc = re.search(r'\\+\\/-[0.]*([\\d.]*)', full).group(1)\r\n      unc = len(unc.replace('.', ''))\r\n  except:\r\n    pass\r\n  return max(0, min(prec_unc, unc))\r\n\r\nconvert(args.fr, args.to)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1011", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1011/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1011/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1011/events", "html_url": "https://github.com/hgrecco/pint/issues/1011", "id": 558773726, "node_id": "MDU6SXNzdWU1NTg3NzM3MjY=", "number": 1011, "title": "Release 0.11 on Feb 18, 2020", "user": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-02T23:09:31Z", "updated_at": "2020-02-19T22:52:32Z", "closed_at": "2020-02-19T22:52:32Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I have proposing to release version 0.11 in two weeks. I have added a few milestones of things tha I would like to include in that release. Full decimal support is postponed on purpose as it is rather a large change and I would like to test it further.\r\n\r\nPlease comment or suggest", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1010", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1010/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1010/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1010/events", "html_url": "https://github.com/hgrecco/pint/issues/1010", "id": 558771453, "node_id": "MDU6SXNzdWU1NTg3NzE0NTM=", "number": 1010, "title": "Rename `ParsedDefinition` to `PreprocessedDefinition` ", "user": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/hgrecco/pint/milestones/9", "html_url": "https://github.com/hgrecco/pint/milestone/9", "labels_url": "https://api.github.com/repos/hgrecco/pint/milestones/9/labels", "id": 4974941, "node_id": "MDk6TWlsZXN0b25lNDk3NDk0MQ==", "number": 9, "title": "0.11", "description": "", "creator": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2020-01-06T04:21:02Z", "updated_at": "2020-02-19T22:43:39Z", "due_on": "2020-02-18T08:00:00Z", "closed_at": "2020-02-19T22:43:39Z"}, "comments": 2, "created_at": "2020-02-02T22:51:09Z", "updated_at": "2020-02-19T22:31:20Z", "closed_at": "2020-02-19T22:31:20Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1009", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1009/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1009/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1009/events", "html_url": "https://github.com/hgrecco/pint/issues/1009", "id": 558763619, "node_id": "MDU6SXNzdWU1NTg3NjM2MTk=", "number": 1009, "title": "Presume exponentiation when pint encounters unit followed by number without any operators", "user": {"login": "lukelbd", "id": 19657652, "node_id": "MDQ6VXNlcjE5NjU3NjUy", "avatar_url": "https://avatars2.githubusercontent.com/u/19657652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukelbd", "html_url": "https://github.com/lukelbd", "followers_url": "https://api.github.com/users/lukelbd/followers", "following_url": "https://api.github.com/users/lukelbd/following{/other_user}", "gists_url": "https://api.github.com/users/lukelbd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukelbd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukelbd/subscriptions", "organizations_url": "https://api.github.com/users/lukelbd/orgs", "repos_url": "https://api.github.com/users/lukelbd/repos", "events_url": "https://api.github.com/users/lukelbd/events{/privacy}", "received_events_url": "https://api.github.com/users/lukelbd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-02T21:48:10Z", "updated_at": "2020-02-02T22:46:26Z", "closed_at": "2020-02-02T22:38:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I often encounter NetCDF datasets with `'units'` attributes formatted like this:\r\n\r\n* `'J/m2'`\r\n* `'m/s2'`\r\n* `'m3'`\r\n* etc.\r\n\r\nIs there any way to presume exponentiation when the `pint.UnitRegistry.parse_expression` parser encounters floats following unit strings without any operators?\r\n\r\nAs a workaround I tried:\r\n\r\n```python\r\nimport pint\r\nureg = pint.UnitRegistry()\r\nureg.define('m2 = m**2')\r\n```\r\n\r\nbut this does not seem to work. For example:\r\n\r\n```python\r\n>>> ureg('m2') / ureg('m')\r\n1.0 <Unit('m2 / meter')>\r\n```\r\n\r\nAwesome package btw!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1008", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1008/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1008/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1008/events", "html_url": "https://github.com/hgrecco/pint/issues/1008", "id": 558532742, "node_id": "MDU6SXNzdWU1NTg1MzI3NDI=", "number": 1008, "title": "Problem with Setuptools", "user": {"login": "metroid120", "id": 57661320, "node_id": "MDQ6VXNlcjU3NjYxMzIw", "avatar_url": "https://avatars2.githubusercontent.com/u/57661320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/metroid120", "html_url": "https://github.com/metroid120", "followers_url": "https://api.github.com/users/metroid120/followers", "following_url": "https://api.github.com/users/metroid120/following{/other_user}", "gists_url": "https://api.github.com/users/metroid120/gists{/gist_id}", "starred_url": "https://api.github.com/users/metroid120/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/metroid120/subscriptions", "organizations_url": "https://api.github.com/users/metroid120/orgs", "repos_url": "https://api.github.com/users/metroid120/repos", "events_url": "https://api.github.com/users/metroid120/events{/privacy}", "received_events_url": "https://api.github.com/users/metroid120/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-02-01T12:16:18Z", "updated_at": "2020-04-07T17:03:37Z", "closed_at": "2020-02-10T02:04:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello guys, I have found a problem with setuptools.\r\n\r\nIn File quantity.py I needed to replace:\r\n`from pkg_resources.extern.packaging import version`\r\n\r\nwith\r\n`# from packaging import version`\r\n\r\nI think pkg_resources.extern is no longer provided by setuptools.\r\nThis is the first time I am writing something on Github, maybe you can point me to\r\na resource or tell me what to do in case I find such bugs in open sources projects.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1007", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1007/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1007/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1007/events", "html_url": "https://github.com/hgrecco/pint/issues/1007", "id": 558094679, "node_id": "MDU6SXNzdWU1NTgwOTQ2Nzk=", "number": 1007, "title": "Equality of kilobytes and gigabytes", "user": {"login": "nightm4re94", "id": 26114385, "node_id": "MDQ6VXNlcjI2MTE0Mzg1", "avatar_url": "https://avatars3.githubusercontent.com/u/26114385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nightm4re94", "html_url": "https://github.com/nightm4re94", "followers_url": "https://api.github.com/users/nightm4re94/followers", "following_url": "https://api.github.com/users/nightm4re94/following{/other_user}", "gists_url": "https://api.github.com/users/nightm4re94/gists{/gist_id}", "starred_url": "https://api.github.com/users/nightm4re94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nightm4re94/subscriptions", "organizations_url": "https://api.github.com/users/nightm4re94/orgs", "repos_url": "https://api.github.com/users/nightm4re94/repos", "events_url": "https://api.github.com/users/nightm4re94/events{/privacy}", "received_events_url": "https://api.github.com/users/nightm4re94/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-31T12:09:17Z", "updated_at": "2020-02-02T22:47:01Z", "closed_at": "2020-02-02T22:47:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, thank you for this amazing package - it makes life so much easier!\r\nThere is one odd issue converting between information units which I don't consider to be intentional. Have a look at this example where I define identical amounts of information in different units.\r\n```python\r\nureg = UnitRegistry()\r\n\r\nr1 = 1000000 * ureg.kB\r\nr2 = 1000 * ureg.MB\r\nr3 = 1 * ureg.GB\r\n\r\ntest1 = (r1==r2)\r\ntest2 = (r2==r3)\r\ntest3 = (r1==r3)\r\n```\r\nwhere \r\n```python\r\ntest1 = True\r\ntest2 = True\r\ntest3 = False\r\n```\r\n\r\nThis means that \r\n- 1000000 kilobytes is equal to 1000 megabytes (```test1```)\r\n- 1000 megabytes is equal to 1 gigabyte (```test2```)\r\n- 1000000 kilobytes is **not** equal to 1 gigabyte (```test3```)\r\n\r\nIs there any intention or reason for this? Why can't you directly check for equality of kilobytes and gigabytes?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1006", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1006/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1006/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1006/events", "html_url": "https://github.com/hgrecco/pint/issues/1006", "id": 557557079, "node_id": "MDU6SXNzdWU1NTc1NTcwNzk=", "number": 1006, "title": "`test_result_type_numpy_func` assumes 64-bit architecture", "user": {"login": "toddrme2178", "id": 4181796, "node_id": "MDQ6VXNlcjQxODE3OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4181796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toddrme2178", "html_url": "https://github.com/toddrme2178", "followers_url": "https://api.github.com/users/toddrme2178/followers", "following_url": "https://api.github.com/users/toddrme2178/following{/other_user}", "gists_url": "https://api.github.com/users/toddrme2178/gists{/gist_id}", "starred_url": "https://api.github.com/users/toddrme2178/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toddrme2178/subscriptions", "organizations_url": "https://api.github.com/users/toddrme2178/orgs", "repos_url": "https://api.github.com/users/toddrme2178/repos", "events_url": "https://api.github.com/users/toddrme2178/events{/privacy}", "received_events_url": "https://api.github.com/users/toddrme2178/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-30T15:08:56Z", "updated_at": "2020-02-04T14:59:51Z", "closed_at": "2020-02-04T14:59:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "The test `TestNumpyUnclassified.test_result_type_numpy_func` assumes it is running on a 64bit architecture.  This causes the test to fail on a 32bit architecture, I suspect because it expects an `int64` while numpy defaults to using an `int32`.  The full failure is below:\r\n\r\n```\r\n______________ TestNumpyUnclassified.test_result_type_numpy_func _______________\r\n\r\nself = <pint.testsuite.test_numpy.TestNumpyUnclassified testMethod=test_result_type_numpy_func>\r\n\r\n    @helpers.requires_array_function_protocol()\r\n    def test_result_type_numpy_func(self):\r\n>       self.assertEqual(np.result_type(self.q), np.dtype(\"int64\"))\r\nE       AssertionError: dtype('int32') != dtype('int64')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1003", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1003/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1003/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1003/events", "html_url": "https://github.com/hgrecco/pint/issues/1003", "id": 556296592, "node_id": "MDU6SXNzdWU1NTYyOTY1OTI=", "number": 1003, "title": "Pandas support - Cannot operate with Quantity and Quantity of different registries", "user": {"login": "UniqASL", "id": 60384123, "node_id": "MDQ6VXNlcjYwMzg0MTIz", "avatar_url": "https://avatars2.githubusercontent.com/u/60384123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/UniqASL", "html_url": "https://github.com/UniqASL", "followers_url": "https://api.github.com/users/UniqASL/followers", "following_url": "https://api.github.com/users/UniqASL/following{/other_user}", "gists_url": "https://api.github.com/users/UniqASL/gists{/gist_id}", "starred_url": "https://api.github.com/users/UniqASL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/UniqASL/subscriptions", "organizations_url": "https://api.github.com/users/UniqASL/orgs", "repos_url": "https://api.github.com/users/UniqASL/repos", "events_url": "https://api.github.com/users/UniqASL/events{/privacy}", "received_events_url": "https://api.github.com/users/UniqASL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-28T15:45:50Z", "updated_at": "2020-02-04T16:49:39Z", "closed_at": "2020-02-04T16:49:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear all,\r\n\r\nI ran the example described in the section _Reading from csv_ [described here](https://pint.readthedocs.io/en/latest/pint-pandas.html) with the following additional line:\r\n\r\n`ureg = pint.UnitRegistry()`\r\n`test = df_[\"fuel flow rate\"] * 10 * ureg[\"minute\"]`\r\n\r\nI was getting the error mentioned in the title:\r\n\r\n> ValueError: Cannot operate with Quantity and Quantity of different registries.\r\n\r\nTo solve it I tried the solution described [here](https://pint.readthedocs.io/en/latest/pint-pandas.html):\r\n\r\n`pint.PintType.ureg = ureg`\r\n\r\nbut I got the following error:\r\n\r\n> AttributeError: module 'pint' has no attribute 'PintType'\r\n\r\nAny advice on that last error?\r\n\r\nThank you in advance and best regards,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/1001", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/1001/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/1001/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/1001/events", "html_url": "https://github.com/hgrecco/pint/issues/1001", "id": 556082368, "node_id": "MDU6SXNzdWU1NTYwODIzNjg=", "number": 1001, "title": "Pandas support - Reading from csv", "user": {"login": "UniqASL", "id": 60384123, "node_id": "MDQ6VXNlcjYwMzg0MTIz", "avatar_url": "https://avatars2.githubusercontent.com/u/60384123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/UniqASL", "html_url": "https://github.com/UniqASL", "followers_url": "https://api.github.com/users/UniqASL/followers", "following_url": "https://api.github.com/users/UniqASL/following{/other_user}", "gists_url": "https://api.github.com/users/UniqASL/gists{/gist_id}", "starred_url": "https://api.github.com/users/UniqASL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/UniqASL/subscriptions", "organizations_url": "https://api.github.com/users/UniqASL/orgs", "repos_url": "https://api.github.com/users/UniqASL/repos", "events_url": "https://api.github.com/users/UniqASL/events{/privacy}", "received_events_url": "https://api.github.com/users/UniqASL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-28T09:27:52Z", "updated_at": "2020-02-04T16:49:39Z", "closed_at": "2020-02-04T16:49:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear all,\r\n\r\nI tried to reproduce the example \"Reading from csv\" described [here](https://pint.readthedocs.io/en/latest/pint-pandas.html) but I get the following \r\n\r\n> AttributeError: 'DataFrame' object has no attribute 'pint'\r\n\r\nwhen running \r\n\r\n`df_ = df.pint.quantify(level=-1)`\r\n\r\nAny advice on where the error might come from?\r\n\r\nThank you in advance for the reply.\r\n\r\nBest regards,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/997", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/997/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/997/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/997/events", "html_url": "https://github.com/hgrecco/pint/issues/997", "id": 553137675, "node_id": "MDU6SXNzdWU1NTMxMzc2NzU=", "number": 997, "title": "Feature request: Add a `parse_pattern` function which parses strings using regex patterns", "user": {"login": "abmyii", "id": 52673001, "node_id": "MDQ6VXNlcjUyNjczMDAx", "avatar_url": "https://avatars0.githubusercontent.com/u/52673001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abmyii", "html_url": "https://github.com/abmyii", "followers_url": "https://api.github.com/users/abmyii/followers", "following_url": "https://api.github.com/users/abmyii/following{/other_user}", "gists_url": "https://api.github.com/users/abmyii/gists{/gist_id}", "starred_url": "https://api.github.com/users/abmyii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abmyii/subscriptions", "organizations_url": "https://api.github.com/users/abmyii/orgs", "repos_url": "https://api.github.com/users/abmyii/repos", "events_url": "https://api.github.com/users/abmyii/events{/privacy}", "received_events_url": "https://api.github.com/users/abmyii/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9211127, "node_id": "MDU6TGFiZWw5MjExMTI3", "url": "https://api.github.com/repos/hgrecco/pint/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 42, "created_at": "2020-01-21T21:23:07Z", "updated_at": "2020-02-06T20:28:32Z", "closed_at": "2020-02-06T20:28:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was searching for a library which could parse units based on a pattern given, e.g. with the pattern `{foot}'{inches}` and the input `10'11`, it would apply the pattern to the input and then convert the results to units. It's a shame that none seem to do it, and I think it would be great if pint had such a feature.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/992", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/992/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/992/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/992/events", "html_url": "https://github.com/hgrecco/pint/issues/992", "id": 551513073, "node_id": "MDU6SXNzdWU1NTE1MTMwNzM=", "number": 992, "title": "non-quantity constant_values parameter to pad", "user": {"login": "keewis", "id": 14808389, "node_id": "MDQ6VXNlcjE0ODA4Mzg5", "avatar_url": "https://avatars1.githubusercontent.com/u/14808389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keewis", "html_url": "https://github.com/keewis", "followers_url": "https://api.github.com/users/keewis/followers", "following_url": "https://api.github.com/users/keewis/following{/other_user}", "gists_url": "https://api.github.com/users/keewis/gists{/gist_id}", "starred_url": "https://api.github.com/users/keewis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keewis/subscriptions", "organizations_url": "https://api.github.com/users/keewis/orgs", "repos_url": "https://api.github.com/users/keewis/repos", "events_url": "https://api.github.com/users/keewis/events{/privacy}", "received_events_url": "https://api.github.com/users/keewis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9211125, "node_id": "MDU6TGFiZWw5MjExMTI1", "url": "https://api.github.com/repos/hgrecco/pint/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 1712992969, "node_id": "MDU6TGFiZWwxNzEyOTkyOTY5", "url": "https://api.github.com/repos/hgrecco/pint/labels/numpy", "name": "numpy", "color": "e8a4e6", "default": false, "description": "Numpy related bug/enhancement"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-17T16:30:41Z", "updated_at": "2020-01-22T05:28:06Z", "closed_at": "2020-01-22T05:28:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Passing non-quantity parameters to `np.pad` in `constant` mode results in behaviour different from passing `dimensionless` quantities:\r\n```python\r\nIn [1]: import numpy as np \r\n   ...: import pint \r\n   ...: ureg = pint.UnitRegistry()\r\n\r\nIn [2]: a = np.arange(5) * ureg.m\r\n\r\nIn [3]: np.pad(a, (2, 4), mode=\"constant\", constant_values=4)                                                                                                                                                                   \r\nOut[3]: array([4, 4, 0, 1, 2, 3, 4, 4, 4, 4, 4]) <Unit('meter')>\r\n\r\nIn [4]: np.pad(a, (2, 4), mode=\"constant\", constant_values=4 * ureg.dimensionless)                                                                                                                                              \r\nDimensionalityError: Cannot convert from 'dimensionless' (dimensionless) to 'meter' ([length])\r\n```\r\nI'd expect `[3]` and `[4]` to be equivalent, but one of the checks in `test_pad` seems to expect the current behaviour so I'm not sure if this is a misconception on my part.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/991", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/991/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/991/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/991/events", "html_url": "https://github.com/hgrecco/pint/issues/991", "id": 550186160, "node_id": "MDU6SXNzdWU1NTAxODYxNjA=", "number": 991, "title": "Q: Is it possible to encode a substance type?", "user": {"login": "cwerner", "id": 13906519, "node_id": "MDQ6VXNlcjEzOTA2NTE5", "avatar_url": "https://avatars0.githubusercontent.com/u/13906519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cwerner", "html_url": "https://github.com/cwerner", "followers_url": "https://api.github.com/users/cwerner/followers", "following_url": "https://api.github.com/users/cwerner/following{/other_user}", "gists_url": "https://api.github.com/users/cwerner/gists{/gist_id}", "starred_url": "https://api.github.com/users/cwerner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cwerner/subscriptions", "organizations_url": "https://api.github.com/users/cwerner/orgs", "repos_url": "https://api.github.com/users/cwerner/repos", "events_url": "https://api.github.com/users/cwerner/events{/privacy}", "received_events_url": "https://api.github.com/users/cwerner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9211129, "node_id": "MDU6TGFiZWw5MjExMTI5", "url": "https://api.github.com/repos/hgrecco/pint/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-15T13:28:28Z", "updated_at": "2020-01-16T08:13:05Z", "closed_at": "2020-01-16T04:51:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\n\r\nVery fresh user of the library so I might be missing something. I'm looking for a solution to the following use case (also, I'd +1 for a discourse channel to discuss the use of this great library):\r\n\r\nI work with environmental data (greenhouse gas fluxes) and want to encode the units into my computations.\r\n\r\nNow, this works fine for basic calculations (i.e. kg ha-1 * area), however I usually have emissions like N2O, NOx or CH4 and their quantities are given in kg N ha-1 or kg C ha-1, respectively\r\n\r\n**Question 1:** Can I somehow enforce a check that additions of N-based substances work, but for instance 12 kg N2O-N + 6 kg CH4-C gives an error? Would I need to redefine kg for that or can the chemistry context help?\r\n\r\n**Question 2:** For N2O, CH4 or CO2 we often convert to CO2-eq (global worming potential, GWP). This is basically a ratio to convert from N2O-> CO2-eq (factor 285) or from CH4->CO2-eq (28). After the conversion the variables can be added up (i.e. the GWP). How would one do that?\r\n\r\nCheers ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/988", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/988/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/988/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/988/events", "html_url": "https://github.com/hgrecco/pint/issues/988", "id": 549893576, "node_id": "MDU6SXNzdWU1NDk4OTM1NzY=", "number": 988, "title": "checking for unit compatibility", "user": {"login": "keewis", "id": 14808389, "node_id": "MDQ6VXNlcjE0ODA4Mzg5", "avatar_url": "https://avatars1.githubusercontent.com/u/14808389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keewis", "html_url": "https://github.com/keewis", "followers_url": "https://api.github.com/users/keewis/followers", "following_url": "https://api.github.com/users/keewis/following{/other_user}", "gists_url": "https://api.github.com/users/keewis/gists{/gist_id}", "starred_url": "https://api.github.com/users/keewis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keewis/subscriptions", "organizations_url": "https://api.github.com/users/keewis/orgs", "repos_url": "https://api.github.com/users/keewis/repos", "events_url": "https://api.github.com/users/keewis/events{/privacy}", "received_events_url": "https://api.github.com/users/keewis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9211127, "node_id": "MDU6TGFiZWw5MjExMTI3", "url": "https://api.github.com/repos/hgrecco/pint/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-15T00:19:22Z", "updated_at": "2020-02-19T16:46:49Z", "closed_at": "2020-02-19T16:46:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "What is the official way to check compatibility between units (or arrays and units)? Right now I'm using\r\n```python\r\narray.check(unit)  # for mixed array / unit\r\narray.dimensionality == unit.dimensionality  # same as above\r\n\r\narray.dimensionality == other_array.dimensionality  # for two arrays\r\nunit.dimensionality == other_unit.dimensionality  # for two units\r\n```\r\nbut it took me some time to realize this was possible (it is not really obvious to me and I couldn't find it in the docs -- I might have missed it, though).\r\n\r\nI usually put this in a function named something like `is_compatible` to make it a little bit more robust. If there is no such function yet, is there any interest in adding one?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/985", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/985/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/985/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/985/events", "html_url": "https://github.com/hgrecco/pint/issues/985", "id": 548658406, "node_id": "MDU6SXNzdWU1NDg2NTg0MDY=", "number": 985, "title": "[Proposal] Remove `default_en_0.6.txt`", "user": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/hgrecco/pint/milestones/9", "html_url": "https://github.com/hgrecco/pint/milestone/9", "labels_url": "https://api.github.com/repos/hgrecco/pint/milestones/9/labels", "id": 4974941, "node_id": "MDk6TWlsZXN0b25lNDk3NDk0MQ==", "number": 9, "title": "0.11", "description": "", "creator": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2020-01-06T04:21:02Z", "updated_at": "2020-02-19T22:43:39Z", "due_on": "2020-02-18T08:00:00Z", "closed_at": "2020-02-19T22:43:39Z"}, "comments": 0, "created_at": "2020-01-13T01:06:54Z", "updated_at": "2020-02-05T14:55:12Z", "closed_at": "2020-02-05T14:55:12Z", "author_association": "OWNER", "active_lock_reason": null, "body": "We have been keeping an old definitions file `default_en_0.6.txt` for backwards compatibiliy. I suggest to remove it now.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/984", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/984/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/984/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/984/events", "html_url": "https://github.com/hgrecco/pint/issues/984", "id": 548656053, "node_id": "MDU6SXNzdWU1NDg2NTYwNTM=", "number": 984, "title": "[PROPOSAL] Make `__str__` and `__format__` locale aware", "user": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/hgrecco/pint/milestones/9", "html_url": "https://github.com/hgrecco/pint/milestone/9", "labels_url": "https://api.github.com/repos/hgrecco/pint/milestones/9/labels", "id": 4974941, "node_id": "MDk6TWlsZXN0b25lNDk3NDk0MQ==", "number": 9, "title": "0.11", "description": "", "creator": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2020-01-06T04:21:02Z", "updated_at": "2020-02-19T22:43:39Z", "due_on": "2020-02-18T08:00:00Z", "closed_at": "2020-02-19T22:43:39Z"}, "comments": 0, "created_at": "2020-01-13T00:48:57Z", "updated_at": "2020-02-19T13:05:37Z", "closed_at": "2020-02-19T13:05:37Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Since #944, the format locale of the registry can be defined using [set_fmt_locale](https://github.com/hgrecco/pint/blame/master/pint/registry.py#L294). \r\n\r\nI propose here to continue in this path and change `__str__` and `__format__` to automatically use `format_babel` under the hooed when the registry locale is not `None`. To ensure backwards compatibility, `None` (which means that no locale is used) will be the default value for the registry locale (as it is today).\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/983", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/983/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/983/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/983/events", "html_url": "https://github.com/hgrecco/pint/issues/983", "id": 548654100, "node_id": "MDU6SXNzdWU1NDg2NTQxMDA=", "number": 983, "title": "[PROPOSAL] Reorganize `long_description`", "user": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/hgrecco/pint/milestones/9", "html_url": "https://github.com/hgrecco/pint/milestone/9", "labels_url": "https://api.github.com/repos/hgrecco/pint/milestones/9/labels", "id": 4974941, "node_id": "MDk6TWlsZXN0b25lNDk3NDk0MQ==", "number": 9, "title": "0.11", "description": "", "creator": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2020-01-06T04:21:02Z", "updated_at": "2020-02-19T22:43:39Z", "due_on": "2020-02-18T08:00:00Z", "closed_at": "2020-02-19T22:43:39Z"}, "comments": 0, "created_at": "2020-01-13T00:37:15Z", "updated_at": "2020-02-05T14:55:12Z", "closed_at": "2020-02-05T14:55:12Z", "author_association": "OWNER", "active_lock_reason": null, "body": "`long_description` provides the content which is displayed for the project in [PyPI](https://pypi.org/project/Pint/). Currently is the concatenation of `README.rst`, `AUTHORS` and `CHANGES`. While this structure has serve us well, the growth of the project is making this harder to read and (in my opinion) annoying.\r\n\r\nMy proposal would be to remove AUTHORS and CHANGES from the `long_description` and add to `README.rst`.\r\n\r\n```\r\nPint is maintained by a community of scientists, programmers and entusiasts around the world. See [AUTHORS](https://github.com/hgrecco/pint/blob/master/AUTHORS) for a full list.\r\n\r\nTo see the an ordered list of notable changes for each version of a project, see [CHANGES](https://github.com/hgrecco/pint/blob/master/CHANGES).\r\n```\r\n\r\nAlternatively, we could add this file to the docs but I think that linking to GitHub directly is easier.\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/978", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/978/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/978/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/978/events", "html_url": "https://github.com/hgrecco/pint/issues/978", "id": 546813465, "node_id": "MDU6SXNzdWU1NDY4MTM0NjU=", "number": 978, "title": "Support for numpy.allclose", "user": {"login": "SimonBoothroyd", "id": 22272126, "node_id": "MDQ6VXNlcjIyMjcyMTI2", "avatar_url": "https://avatars0.githubusercontent.com/u/22272126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonBoothroyd", "html_url": "https://github.com/SimonBoothroyd", "followers_url": "https://api.github.com/users/SimonBoothroyd/followers", "following_url": "https://api.github.com/users/SimonBoothroyd/following{/other_user}", "gists_url": "https://api.github.com/users/SimonBoothroyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonBoothroyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonBoothroyd/subscriptions", "organizations_url": "https://api.github.com/users/SimonBoothroyd/orgs", "repos_url": "https://api.github.com/users/SimonBoothroyd/repos", "events_url": "https://api.github.com/users/SimonBoothroyd/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonBoothroyd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/hgrecco/pint/milestones/9", "html_url": "https://github.com/hgrecco/pint/milestone/9", "labels_url": "https://api.github.com/repos/hgrecco/pint/milestones/9/labels", "id": 4974941, "node_id": "MDk6TWlsZXN0b25lNDk3NDk0MQ==", "number": 9, "title": "0.11", "description": "", "creator": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2020-01-06T04:21:02Z", "updated_at": "2020-02-19T22:43:39Z", "due_on": "2020-02-18T08:00:00Z", "closed_at": "2020-02-19T22:43:39Z"}, "comments": 2, "created_at": "2020-01-08T11:49:55Z", "updated_at": "2020-01-09T17:07:46Z", "closed_at": "2020-01-09T17:07:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems `pint > 0.10` loses support for `numpy.allclose`. Running\r\n\r\n```\r\nfrom pint import Unit\r\nimport numpy as np\r\n\r\nx = np.array([1, 2, 3]) * Unit(\"kelvin\")\r\nnp.allclose(x, x)\r\n```\r\n\r\nyields\r\n\r\n```\r\nTypeError: no implementation found for 'numpy.allclose' on types that implement __array_function__: [<class 'pint.quantity.build_quantity_class.<locals>.Quantity'>]\r\n```\r\n\r\nI'm guessing this was just missed by #905? Happy to submit a PR / test if this is the case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/976", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/976/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/976/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/976/events", "html_url": "https://github.com/hgrecco/pint/issues/976", "id": 546618284, "node_id": "MDU6SXNzdWU1NDY2MTgyODQ=", "number": 976, "title": "No implementation for numpy.intersect1d", "user": {"login": "dopplershift", "id": 221526, "node_id": "MDQ6VXNlcjIyMTUyNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/221526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dopplershift", "html_url": "https://github.com/dopplershift", "followers_url": "https://api.github.com/users/dopplershift/followers", "following_url": "https://api.github.com/users/dopplershift/following{/other_user}", "gists_url": "https://api.github.com/users/dopplershift/gists{/gist_id}", "starred_url": "https://api.github.com/users/dopplershift/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dopplershift/subscriptions", "organizations_url": "https://api.github.com/users/dopplershift/orgs", "repos_url": "https://api.github.com/users/dopplershift/repos", "events_url": "https://api.github.com/users/dopplershift/events{/privacy}", "received_events_url": "https://api.github.com/users/dopplershift/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9211127, "node_id": "MDU6TGFiZWw5MjExMTI3", "url": "https://api.github.com/repos/hgrecco/pint/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 1712992969, "node_id": "MDU6TGFiZWwxNzEyOTkyOTY5", "url": "https://api.github.com/repos/hgrecco/pint/labels/numpy", "name": "numpy", "color": "e8a4e6", "default": false, "description": "Numpy related bug/enhancement"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/hgrecco/pint/milestones/9", "html_url": "https://github.com/hgrecco/pint/milestone/9", "labels_url": "https://api.github.com/repos/hgrecco/pint/milestones/9/labels", "id": 4974941, "node_id": "MDk6TWlsZXN0b25lNDk3NDk0MQ==", "number": 9, "title": "0.11", "description": "", "creator": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2020-01-06T04:21:02Z", "updated_at": "2020-02-19T22:43:39Z", "due_on": "2020-02-18T08:00:00Z", "closed_at": "2020-02-19T22:43:39Z"}, "comments": 0, "created_at": "2020-01-08T03:04:40Z", "updated_at": "2020-01-09T17:07:46Z", "closed_at": "2020-01-09T17:07:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Just ran into this with some of our code. Not critical, but would be good for things not to fail.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/974", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/974/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/974/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/974/events", "html_url": "https://github.com/hgrecco/pint/issues/974", "id": 546591455, "node_id": "MDU6SXNzdWU1NDY1OTE0NTU=", "number": 974, "title": "TypeError: __array__() takes 1 positional argument but 2 were given", "user": {"login": "dopplershift", "id": 221526, "node_id": "MDQ6VXNlcjIyMTUyNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/221526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dopplershift", "html_url": "https://github.com/dopplershift", "followers_url": "https://api.github.com/users/dopplershift/followers", "following_url": "https://api.github.com/users/dopplershift/following{/other_user}", "gists_url": "https://api.github.com/users/dopplershift/gists{/gist_id}", "starred_url": "https://api.github.com/users/dopplershift/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dopplershift/subscriptions", "organizations_url": "https://api.github.com/users/dopplershift/orgs", "repos_url": "https://api.github.com/users/dopplershift/repos", "events_url": "https://api.github.com/users/dopplershift/events{/privacy}", "received_events_url": "https://api.github.com/users/dopplershift/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9211125, "node_id": "MDU6TGFiZWw5MjExMTI1", "url": "https://api.github.com/repos/hgrecco/pint/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-08T01:16:21Z", "updated_at": "2020-01-08T18:30:51Z", "closed_at": "2020-01-08T02:49:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Looks like a bug crept into 0.10 when `PINT_ARRAY_PROTOCOL_FALLBACK` is `'0'`:\r\n```python\r\nimport os\r\nos.environ['PINT_ARRAY_PROTOCOL_FALLBACK'] = '0'\r\n\r\nimport numpy as np\r\nimport pint\r\n\r\nq = pint.Quantity(np.arange(3, dtype=np.float32), 'm')\r\nnp.array(q) # OK\r\nnp.array(q, dtype=np.float64) # Error\r\n```\r\nThe last one yields:\r\n```pytb\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-5-ba6cd2ac8160> in <module>\r\n      8 np.array(q)\r\n      9 \r\n---> 10 np.array(q, dtype=np.float64)\r\n\r\nTypeError: __array__() takes 1 positional argument but 2 were given\r\n```\r\n\r\nI think that's because the `__array__` implementation does not accept any args:\r\nhttps://github.com/hgrecco/pint/blob/a70be489c46c03ca15c2832a308a56a556270461/pint/quantity.py#L1554-L1560\r\n\r\nPR with tests incoming...\r\n\r\n(attn: @jthielen)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/973", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/973/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/973/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/973/events", "html_url": "https://github.com/hgrecco/pint/issues/973", "id": 546171544, "node_id": "MDU6SXNzdWU1NDYxNzE1NDQ=", "number": 973, "title": "IndexError on assigning units to empty Numpy array (Pint 0.10)", "user": {"login": "rebeccafair", "id": 18187336, "node_id": "MDQ6VXNlcjE4MTg3MzM2", "avatar_url": "https://avatars2.githubusercontent.com/u/18187336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rebeccafair", "html_url": "https://github.com/rebeccafair", "followers_url": "https://api.github.com/users/rebeccafair/followers", "following_url": "https://api.github.com/users/rebeccafair/following{/other_user}", "gists_url": "https://api.github.com/users/rebeccafair/gists{/gist_id}", "starred_url": "https://api.github.com/users/rebeccafair/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rebeccafair/subscriptions", "organizations_url": "https://api.github.com/users/rebeccafair/orgs", "repos_url": "https://api.github.com/users/rebeccafair/repos", "events_url": "https://api.github.com/users/rebeccafair/events{/privacy}", "received_events_url": "https://api.github.com/users/rebeccafair/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9211125, "node_id": "MDU6TGFiZWw5MjExMTI1", "url": "https://api.github.com/repos/hgrecco/pint/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/hgrecco/pint/milestones/9", "html_url": "https://github.com/hgrecco/pint/milestone/9", "labels_url": "https://api.github.com/repos/hgrecco/pint/milestones/9/labels", "id": 4974941, "node_id": "MDk6TWlsZXN0b25lNDk3NDk0MQ==", "number": 9, "title": "0.11", "description": "", "creator": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2020-01-06T04:21:02Z", "updated_at": "2020-02-19T22:43:39Z", "due_on": "2020-02-18T08:00:00Z", "closed_at": "2020-02-19T22:43:39Z"}, "comments": 6, "created_at": "2020-01-07T09:23:22Z", "updated_at": "2020-01-08T09:56:49Z", "closed_at": "2020-01-08T04:36:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since the 0.10 update if I try to assign units to an empty array, I get an IndexError\r\n\r\n```\r\n>>> import numpy as np\r\n>>> import pint\r\n>>> ureg = pint.UnitRegistry()\r\n>>> x = np.array([])\r\n>>> x*ureg('kg')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\mll13652\\AppData\\Local\\conda\\conda\\envs\\py37\\lib\\site-packages\\pint\\quantity.py\", line 1507, in __array_ufunc__\r\n    return numpy_wrap(\"ufunc\", ufunc, inputs, kwargs, types)\r\n  File \"C:\\Users\\mll13652\\AppData\\Local\\conda\\conda\\envs\\py37\\lib\\site-packages\\pint\\numpy_func.py\", line 888, in numpy_wrap\r\n    return handled[name](*args, **kwargs)\r\n  File \"C:\\Users\\mll13652\\AppData\\Local\\conda\\conda\\envs\\py37\\lib\\site-packages\\pint\\numpy_func.py\", line 268, in implementation\r\n    first_input_units = _get_first_input_units(args, kwargs)\r\n  File \"C:\\Users\\mll13652\\AppData\\Local\\conda\\conda\\envs\\py37\\lib\\site-packages\\pint\\numpy_func.py\", line 69, in _get_first_input_units\r\n    return arg[0].units\r\nIndexError: index 0 is out of bounds for axis 0 with size 0\r\n```\r\n\r\nAfter looking into it a bit more it seems that in `_get_first_input_units`, `_is_quantity_sequence()` incorrectly returns `True` for empty arrays as the final check:\r\n```\r\nall(_is_quantity(item) for item in obj)\r\n```\r\nreturns `True` for empty arrays.\r\n\r\nOne possible fix would be to get `sized` to also check for zero length and return `False`, preventing the check from getting to the above line, and I'd be happy enough to make a PR for this\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/968", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/968/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/968/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/968/events", "html_url": "https://github.com/hgrecco/pint/issues/968", "id": 545093487, "node_id": "MDU6SXNzdWU1NDUwOTM0ODc=", "number": 968, "title": "Decimal Parsing Issue", "user": {"login": "rerobins", "id": 950264, "node_id": "MDQ6VXNlcjk1MDI2NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/950264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rerobins", "html_url": "https://github.com/rerobins", "followers_url": "https://api.github.com/users/rerobins/followers", "following_url": "https://api.github.com/users/rerobins/following{/other_user}", "gists_url": "https://api.github.com/users/rerobins/gists{/gist_id}", "starred_url": "https://api.github.com/users/rerobins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rerobins/subscriptions", "organizations_url": "https://api.github.com/users/rerobins/orgs", "repos_url": "https://api.github.com/users/rerobins/repos", "events_url": "https://api.github.com/users/rerobins/events{/privacy}", "received_events_url": "https://api.github.com/users/rerobins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-03T17:51:14Z", "updated_at": "2020-02-22T15:25:53Z", "closed_at": "2020-02-22T15:25:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "In version 0.9 the following code doesn't work with python 3.7.5.\r\n\r\n```python\r\nimport decimal\r\nimport pint\r\n\r\nregistry = pint.UnitRegistry()\r\n\r\nmps = decimal.Decimal('65000.0') * registry('m/s')\r\n```\r\n\r\nI get the following exception:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<console>\", line 1, in <module>\r\n  File \"env/lib64/python3.7/site-packages/pint/quantity.py\", line 900, in __mul__\r\n    return self._mul_div(other, operator.mul)\r\n  File \"env/lib64/python3.7/site-packages/pint/quantity.py\", line 75, in wrapped\r\n    result = f(self, *args, **kwargs)\r\n  File \"env/lib64/python3.7/site-packages/pint/quantity.py\", line 60, in wrapped\r\n    result = f(self, *args, **kwargs)\r\n  File \"env/lib64/python3.7/site-packages/pint/quantity.py\", line 866, in _mul_div\r\n    magnitude = magnitude_op(self._magnitude, other_magnitude)\r\nTypeError: unsupported operand type(s) for *: 'float' and 'decimal.Decimal'\r\n```\r\n\r\nThe work around is to use quantities:\r\n\r\n```python\r\nQ_ = registry.Quantity                                                                                                                                                                                                           \r\nQ_(decimal.Decimal('65000.0'), 'm/s')\r\n```\r\nI would expect that both would work?  Is this not correct?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/960", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/960/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/960/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/960/events", "html_url": "https://github.com/hgrecco/pint/issues/960", "id": 543043000, "node_id": "MDU6SXNzdWU1NDMwNDMwMDA=", "number": 960, "title": "`to_compact` handles prefixed units incorrectly.", "user": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9211125, "node_id": "MDU6TGFiZWw5MjExMTI1", "url": "https://api.github.com/repos/hgrecco/pint/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-28T02:02:41Z", "updated_at": "2020-01-22T05:42:28Z", "closed_at": "2020-01-22T05:42:28Z", "author_association": "OWNER", "active_lock_reason": null, "body": "There is a bug in `to_compact` handling the `unit` argument\r\n\r\n```python\r\n>>> (1 * ureg.nanometer).to_compact(ureg.micrometer)\r\n<Quantity(1.0000000000000002, 'millimicrometer')>\r\n```\r\n\r\nwhen the unit is prefixed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/955", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/955/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/955/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/955/events", "html_url": "https://github.com/hgrecco/pint/issues/955", "id": 542689637, "node_id": "MDU6SXNzdWU1NDI2ODk2Mzc=", "number": 955, "title": "What shall we include for 0.10?", "user": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/hgrecco/pint/milestones/8", "html_url": "https://github.com/hgrecco/pint/milestone/8", "labels_url": "https://api.github.com/repos/hgrecco/pint/milestones/8/labels", "id": 4958463, "node_id": "MDk6TWlsZXN0b25lNDk1ODQ2Mw==", "number": 8, "title": "0.10", "description": null, "creator": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2019-12-26T23:24:49Z", "updated_at": "2020-02-06T22:14:14Z", "due_on": null, "closed_at": "2020-02-06T22:14:14Z"}, "comments": 6, "created_at": "2019-12-26T23:00:51Z", "updated_at": "2020-01-06T17:29:39Z", "closed_at": "2020-01-06T05:27:51Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I would like to release version 0.10 soon. What shall we include (i.e. wait for)? Please add issues and PR below", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/952", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/952/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/952/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/952/events", "html_url": "https://github.com/hgrecco/pint/issues/952", "id": 542628306, "node_id": "MDU6SXNzdWU1NDI2MjgzMDY=", "number": 952, "title": "Slug and slinch not recognized in UnitRegistry", "user": {"login": "clark3493", "id": 37091734, "node_id": "MDQ6VXNlcjM3MDkxNzM0", "avatar_url": "https://avatars2.githubusercontent.com/u/37091734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clark3493", "html_url": "https://github.com/clark3493", "followers_url": "https://api.github.com/users/clark3493/followers", "following_url": "https://api.github.com/users/clark3493/following{/other_user}", "gists_url": "https://api.github.com/users/clark3493/gists{/gist_id}", "starred_url": "https://api.github.com/users/clark3493/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clark3493/subscriptions", "organizations_url": "https://api.github.com/users/clark3493/orgs", "repos_url": "https://api.github.com/users/clark3493/repos", "events_url": "https://api.github.com/users/clark3493/events{/privacy}", "received_events_url": "https://api.github.com/users/clark3493/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-26T18:19:32Z", "updated_at": "2019-12-26T22:59:53Z", "closed_at": "2019-12-26T22:59:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Slug and slinch are not recognized in the UnitRegistry, although they do appear to be defined in default_en.txt.\r\n\r\n```python\r\n>>> import pint\r\n>>> ureg = pint.UnitRegistry()\r\n>>> x = 3. * ureg.slug\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\clark\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pint\\registry.py\", line 203, in __getattr__\r\n    return self.Unit(item)\r\n  File \"C:\\Users\\clark\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pint\\unit.py\", line 46, in __new__\r\n    inst._units = inst._REGISTRY.parse_units(units)._units\r\n  File \"C:\\Users\\clark\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pint\\registry.py\", line 792, in parse_units\r\n    units = self._parse_units(input_string, as_delta)\r\n  File \"C:\\Users\\clark\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pint\\registry.py\", line 902, in _parse_units\r\n    return super(NonMultiplicativeRegistry, self)._parse_units(input_string, as_delta)\r\n  File \"C:\\Users\\clark\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pint\\registry.py\", line 817, in _parse_units\r\n    cname = self.get_name(name)\r\n  File \"C:\\Users\\clark\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pint\\registry.py\", line 478, in get_name\r\n    raise UndefinedUnitError(name_or_alias)\r\npint.errors.UndefinedUnitError: 'slug' is not defined in the unit registry\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/950", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/950/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/950/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/950/events", "html_url": "https://github.com/hgrecco/pint/issues/950", "id": 541506258, "node_id": "MDU6SXNzdWU1NDE1MDYyNTg=", "number": 950, "title": "NEP-18 and python scalars", "user": {"login": "keewis", "id": 14808389, "node_id": "MDQ6VXNlcjE0ODA4Mzg5", "avatar_url": "https://avatars1.githubusercontent.com/u/14808389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keewis", "html_url": "https://github.com/keewis", "followers_url": "https://api.github.com/users/keewis/followers", "following_url": "https://api.github.com/users/keewis/following{/other_user}", "gists_url": "https://api.github.com/users/keewis/gists{/gist_id}", "starred_url": "https://api.github.com/users/keewis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keewis/subscriptions", "organizations_url": "https://api.github.com/users/keewis/orgs", "repos_url": "https://api.github.com/users/keewis/repos", "events_url": "https://api.github.com/users/keewis/events{/privacy}", "received_events_url": "https://api.github.com/users/keewis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-22T22:01:41Z", "updated_at": "2019-12-23T20:36:21Z", "closed_at": "2019-12-23T20:36:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We now implement `__array_function__` which makes `pint.Quantity` seem like a `numpy` duck array. However, if we use `pint` to wrap python scalars, this is wrong: python scalars don't have attributes like `shape` or `ndim`.\r\n\r\nI don't know how we could fix this but it is something we definitely should not leave as it is right now.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/945", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/945/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/945/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/945/events", "html_url": "https://github.com/hgrecco/pint/issues/945", "id": 541314489, "node_id": "MDU6SXNzdWU1NDEzMTQ0ODk=", "number": 945, "title": "proper handling of division", "user": {"login": "bje-", "id": 4327840, "node_id": "MDQ6VXNlcjQzMjc4NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4327840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bje-", "html_url": "https://github.com/bje-", "followers_url": "https://api.github.com/users/bje-/followers", "following_url": "https://api.github.com/users/bje-/following{/other_user}", "gists_url": "https://api.github.com/users/bje-/gists{/gist_id}", "starred_url": "https://api.github.com/users/bje-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bje-/subscriptions", "organizations_url": "https://api.github.com/users/bje-/orgs", "repos_url": "https://api.github.com/users/bje-/repos", "events_url": "https://api.github.com/users/bje-/events{/privacy}", "received_events_url": "https://api.github.com/users/bje-/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 9211129, "node_id": "MDU6TGFiZWw5MjExMTI5", "url": "https://api.github.com/repos/hgrecco/pint/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-21T11:04:10Z", "updated_at": "2019-12-21T13:57:12Z", "closed_at": "2019-12-21T13:57:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nIn [7]: x = 10 * ureg.MWh                                                          \r\nIn [10]: y = x / (1.0 * ureg.hour)                                                 \r\nIn [11]: y                                                                      \r\nOut[11]: 10.0 <Unit('megawatt_hour / hour')>\r\n```\r\n\r\nI was expecting pint to simplify the units down to megawatts. Am I expecting too much from pint?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/942", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/942/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/942/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/942/events", "html_url": "https://github.com/hgrecco/pint/issues/942", "id": 540447052, "node_id": "MDU6SXNzdWU1NDA0NDcwNTI=", "number": 942, "title": "[SECURITY] Arbitrary code execution from definitions", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-19T17:16:54Z", "updated_at": "2019-12-22T05:18:18Z", "closed_at": "2019-12-22T05:18:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Critical security vulnerability\r\n\r\nA user who is allowed to upload a definitions file can run arbitrary code as the user running pint, thanks to two calls to eval() in definitions.py,\r\n\r\nhere\r\nhttps://github.com/hgrecco/pint/blob/23c44ee335797c051feea0103e28c6a7221b3b75/pint/definitions.py#L90-L96\r\nand here\r\nhttps://github.com/hgrecco/pint/blob/23c44ee335797c051feea0103e28c6a7221b3b75/pint/definitions.py#L103-L119\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/939", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/939/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/939/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/939/events", "html_url": "https://github.com/hgrecco/pint/issues/939", "id": 539998895, "node_id": "MDU6SXNzdWU1Mzk5OTg4OTU=", "number": 939, "title": "array function implementation for np.cumprod / np.nancumprod fails with axis", "user": {"login": "keewis", "id": 14808389, "node_id": "MDQ6VXNlcjE0ODA4Mzg5", "avatar_url": "https://avatars1.githubusercontent.com/u/14808389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keewis", "html_url": "https://github.com/keewis", "followers_url": "https://api.github.com/users/keewis/followers", "following_url": "https://api.github.com/users/keewis/following{/other_user}", "gists_url": "https://api.github.com/users/keewis/gists{/gist_id}", "starred_url": "https://api.github.com/users/keewis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keewis/subscriptions", "organizations_url": "https://api.github.com/users/keewis/orgs", "repos_url": "https://api.github.com/users/keewis/repos", "events_url": "https://api.github.com/users/keewis/events{/privacy}", "received_events_url": "https://api.github.com/users/keewis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1712992969, "node_id": "MDU6TGFiZWwxNzEyOTkyOTY5", "url": "https://api.github.com/repos/hgrecco/pint/labels/numpy", "name": "numpy", "color": "e8a4e6", "default": false, "description": "Numpy related bug/enhancement"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-19T00:22:23Z", "updated_at": "2019-12-20T01:52:51Z", "closed_at": "2019-12-20T01:52:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Passing a `axis` argument to `cumprod` / `nancumprod` will make them fail. I tracked it down to https://github.com/hgrecco/pint/blob/4c3114c72bdae1e3c5c9f839659169eeb06071cd/pint/numpy_func.py#L62 where `pre_calc_units` can be a string (`\"dimensionless\"`), but a `Unit` object was expected. The string was created when `implement_func` was called for `cumprod` and `nancumprod` (by the way, `cumprod` also gets implemented with `set_units_ufuncs`). We can fix this by passing `None` as `input_units` instead, but if feasible I'd prefer `\"dimensionless\"` since that is way easier to read and understand. For that, we might need to preprocess the `input_units` parameter in `implement_func`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/935", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/935/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/935/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/935/events", "html_url": "https://github.com/hgrecco/pint/issues/935", "id": 538124705, "node_id": "MDU6SXNzdWU1MzgxMjQ3MDU=", "number": 935, "title": "Automatic inference of units for numeric literals", "user": {"login": "artgoldberg", "id": 33882, "node_id": "MDQ6VXNlcjMzODgy", "avatar_url": "https://avatars2.githubusercontent.com/u/33882?v=4", "gravatar_id": "", "url": "https://api.github.com/users/artgoldberg", "html_url": "https://github.com/artgoldberg", "followers_url": "https://api.github.com/users/artgoldberg/followers", "following_url": "https://api.github.com/users/artgoldberg/following{/other_user}", "gists_url": "https://api.github.com/users/artgoldberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/artgoldberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/artgoldberg/subscriptions", "organizations_url": "https://api.github.com/users/artgoldberg/orgs", "repos_url": "https://api.github.com/users/artgoldberg/repos", "events_url": "https://api.github.com/users/artgoldberg/events{/privacy}", "received_events_url": "https://api.github.com/users/artgoldberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-15T23:45:15Z", "updated_at": "2019-12-19T22:27:40Z", "closed_at": "2019-12-19T22:27:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider this equation, the mass action rate law for the chemical reaction 2P -> X:\r\n\r\n    rate = k1 * P * (P - 1)) / 2\r\n\r\nIt has these units:\r\n\r\n    k1: 1 / (molecule^2 * second)\r\n    P: molecule\r\n    rate: 1 / second\r\n\r\nBut it's not dimensionally correct, because the '1' must have the unit molecule.\r\n\r\nThis creates an inconvenience in our biochemical simulator, as users will need to define a parameter with the right units in place of '1'.\r\n\r\nDoes Pint contain functionality to infer that '1' has the unit molecule? More generally, I'm suggesting that Pint could have an analysis function that determines the units of numerical literals if and only if the units for the literals are completely unambiguous. Thus, this function would always assign correct units, except when declared terms already had incorrect units.\r\n\r\nThanks\r\nArthur", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/932", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/932/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/932/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/932/events", "html_url": "https://github.com/hgrecco/pint/issues/932", "id": 537658862, "node_id": "MDU6SXNzdWU1Mzc2NTg4NjI=", "number": 932, "title": "Disable all throwaway contexts", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-13T16:58:28Z", "updated_at": "2019-12-20T01:18:54Z", "closed_at": "2019-12-20T01:18:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Anonymous contexts (#870) are enabled on the fly with ``ureg.enable_contexts()``, but are not previously registered with ``ureg.add_context()``. Regardless of having a name or not, it is convenient in some cases to use throwaway contexts.\r\n\r\nWhen there are more throwaway contexts enabled than the number of contexts permanently registered with ``ureg.add_context()``,  then ``ureg.disable_contexts()``  invoked without parameter fails to disable them all.\r\n\r\n```python\r\n>>> import pint\r\n>>> ureg = pint.UnitRegistry()\r\n>>> len(ureg._active_ctx.maps)\r\n1  # Empty context - this is a separate bug\r\n>>> ureg.enable_contexts(*(pint.Context() for _ in range(len(ureg._contexts) + 3)))\r\n>>> len(ureg._active_ctx.maps)\r\n15\r\n>>> ureg.disable_contexts()\r\n>>> len(ureg._active_ctx.maps)\r\n4\r\n>>> ureg.disable_contexts()\r\n>>> len(ureg._active_ctx.maps)\r\n0\r\n```\r\nThe context manager syntax is unaffected:\r\n```python\r\n>>> with ureg.context(*(pint.Context() for _ in range(len(ureg._contexts) + 3))):\r\n...     pass\r\n>>> len(ureg._active_ctx.maps)\r\n0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/927", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/927/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/927/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/927/events", "html_url": "https://github.com/hgrecco/pint/issues/927", "id": 537076803, "node_id": "MDU6SXNzdWU1MzcwNzY4MDM=", "number": 927, "title": "Bad Jupyter rendering of underscores with numpy quantities", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-12T16:16:28Z", "updated_at": "2019-12-12T22:52:12Z", "closed_at": "2019-12-12T22:52:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "default_en.txt makes extensive use of snake_case for all unit names that are made of multiple words.\r\nSuch units render poorly in Jupyter Notebook when associated with a numpy magnitude:\r\n\r\n![](https://i.postimg.cc/P5JvkPYb/pint-render.png)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/925", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/925/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/925/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/925/events", "html_url": "https://github.com/hgrecco/pint/issues/925", "id": 536453957, "node_id": "MDU6SXNzdWU1MzY0NTM5NTc=", "number": 925, "title": "Add tests to ensure internal type is not mutated except in inplace operations", "user": {"login": "jthielen", "id": 3460034, "node_id": "MDQ6VXNlcjM0NjAwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3460034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jthielen", "html_url": "https://github.com/jthielen", "followers_url": "https://api.github.com/users/jthielen/followers", "following_url": "https://api.github.com/users/jthielen/following{/other_user}", "gists_url": "https://api.github.com/users/jthielen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jthielen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jthielen/subscriptions", "organizations_url": "https://api.github.com/users/jthielen/orgs", "repos_url": "https://api.github.com/users/jthielen/repos", "events_url": "https://api.github.com/users/jthielen/events{/privacy}", "received_events_url": "https://api.github.com/users/jthielen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1712992969, "node_id": "MDU6TGFiZWwxNzEyOTkyOTY5", "url": "https://api.github.com/repos/hgrecco/pint/labels/numpy", "name": "numpy", "color": "e8a4e6", "default": false, "description": "Numpy related bug/enhancement"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/hgrecco/pint/milestones/8", "html_url": "https://github.com/hgrecco/pint/milestone/8", "labels_url": "https://api.github.com/repos/hgrecco/pint/milestones/8/labels", "id": 4958463, "node_id": "MDk6TWlsZXN0b25lNDk1ODQ2Mw==", "number": 8, "title": "0.10", "description": null, "creator": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2019-12-26T23:24:49Z", "updated_at": "2020-02-06T22:14:14Z", "due_on": null, "closed_at": "2020-02-06T22:14:14Z"}, "comments": 0, "created_at": "2019-12-11T15:43:54Z", "updated_at": "2019-12-27T03:46:09Z", "closed_at": "2019-12-27T03:46:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Several of the linked issues to #905 were related to the internal type being mutated by NumPy operations (see below). While #905 contained a provisional fix to this in the behavior of `__getattr__`, no tests to that effect were added. To fully resolve these related issues, tests should be added that NumPy operations do not mutate the internal type. While doing this, it may be a good idea to check non-NumPy operations as well to ensure that the internal type is only changed during explicitly in place operations.\r\n\r\nSupersedes #399, #481, #509, #622, #678", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/924", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/924/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/924/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/924/events", "html_url": "https://github.com/hgrecco/pint/issues/924", "id": 535459827, "node_id": "MDU6SXNzdWU1MzU0NTk4Mjc=", "number": 924, "title": "Proper handling of `__array_*__` attributes/methods", "user": {"login": "jthielen", "id": 3460034, "node_id": "MDQ6VXNlcjM0NjAwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3460034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jthielen", "html_url": "https://github.com/jthielen", "followers_url": "https://api.github.com/users/jthielen/followers", "following_url": "https://api.github.com/users/jthielen/following{/other_user}", "gists_url": "https://api.github.com/users/jthielen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jthielen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jthielen/subscriptions", "organizations_url": "https://api.github.com/users/jthielen/orgs", "repos_url": "https://api.github.com/users/jthielen/repos", "events_url": "https://api.github.com/users/jthielen/events{/privacy}", "received_events_url": "https://api.github.com/users/jthielen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1712992969, "node_id": "MDU6TGFiZWwxNzEyOTkyOTY5", "url": "https://api.github.com/repos/hgrecco/pint/labels/numpy", "name": "numpy", "color": "e8a4e6", "default": false, "description": "Numpy related bug/enhancement"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-10T02:55:18Z", "updated_at": "2019-12-27T03:17:25Z", "closed_at": "2019-12-27T03:17:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After #905 is merged, the following NumPy array protocol attributes/methods will be explicitly handed by Pint Quantities:\r\n\r\n- `__array_priority__`\r\n- `__array_ufunc__`\r\n- `__array_function__`\r\n\r\nAll others (any starting with `__array_`) are implicitly handled by\r\n\r\n1) Warning with a `UnitStrippedWarning`\r\n2) If magnitude is an `ndarray`, return the corresponding attribute on the magnitude\r\n3) If the magnitude is not an `ndarray`, return the corresponding attribute on the magnitude converted to an `ndarray`.\r\n\r\nBefore #905, step 3 above was extremely problematic, since the conversion was done *in place* (see #399, #481, #509). While now it's a bit better because it should no longer mutate the Quantity, the conversion to ndarray may not respect the behavior of arbitrary duck arrays (see #845 / #878), and may return misleading values (such as may be the case with `__array_struct__` and `__array_interface__` as brought up in #905).\r\n\r\nBeing uncomfortable with this implicit handing, and seeing the issues it has caused, I would suggest that Pint Quantities instead only (explicitly) respond to:\r\n\r\n- `__array__` (by warning with `UnitStrippedWarning` and then returning `np.asarray` called on the magnitude)\r\n- `__array_priority__` (see suggestions in https://github.com/hgrecco/pint/pull/905#discussion_r356564550)\r\n- `__array_ufunc__` (as done in #905)\r\n- `__array_function__` (as done in #905)\r\n\r\nand raise `AttributeError` for all other `__array_*__` attributes. This would bring Pint into alignment with the recommendations set by NumPy for custom array containers (see https://docs.scipy.org/doc/numpy-1.17.0/user/basics.dispatch.html) and, to the best I can tell, the example set by Dask and Sparse (and to a certain extent CuPy).\r\n\r\nHowever, while it seems to be the \"more correct\" implementation, given that this would be removing a fallback, it would be a major breaking change with potentially unforeseen consequences. And so, I wanted to reach out for feedback before I try putting together a follow-up PR to #905 to address these issues and work towards resolving #845 / #878.\r\n\r\nIf this is an acceptable change, would it make sense to include a deprecation cycle, by leaving in the `__array_*__` fallback with a `DeprecationWarning` for Pint v0.10, and then changing to `AttributeError` in v0.11? Or is there a consensus to leave the current behavior in place and try working around the issues that arise?\r\n\r\n---\r\n\r\nFor reference, for the three duck array packages pointed to in [NEP 30](https://numpy.org/neps/nep-0030-duck-array-protocol.html) (Dask, CuPy, and Sparse), here is a brief summary of their behavior with these attributes from what I could scour from their source code (no guarantee on correctness though, as I haven't worked with any of their internals):\r\n\r\n**Dask** and **Sparse**\r\n\r\n- Explicitly defines\r\n  - `__array__`\r\n  - `__array_priority__`\r\n  - `__array_ufunc__`\r\n  - `__array_function__`\r\n- Does not respond to others\r\n\r\n**CuPy**\r\n\r\n- Explicitly defines\r\n  - `__array__`\r\n  - `__array_priority__`\r\n  - `__array_ufunc__`\r\n  - `__array_function__`\r\n- `__array_wrap__`, `__array_interface__` listed as TODO in comments\r\n- Has an experimental \"fallback mode\" in which it would seem to defer to the attribute on the corresponding `ndarray` (see https://github.com/cupy/cupy/blob/1928c3b22c972647ecf2242ddced62015407593f/cupyx/fallback_mode/fallback.py)\r\n- Otherwise does not respond to others", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/917", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/917/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/917/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/917/events", "html_url": "https://github.com/hgrecco/pint/issues/917", "id": 533328427, "node_id": "MDU6SXNzdWU1MzMzMjg0Mjc=", "number": 917, "title": "2019 Xmas cleanup ", "user": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-05T12:43:11Z", "updated_at": "2020-01-06T17:28:51Z", "closed_at": "2020-01-06T17:28:51Z", "author_association": "OWNER", "active_lock_reason": null, "body": "It would be very nice to start 2020 with less open issues and PRs. Merging #905 will help to close / redefine many PRs but I am inviting all the community to review old issues to see if they are still needed. You are also encourage to rewrite old issues into new combined ones.\r\n\r\nFrom a quick look, I could tell we have the following topics:\r\n- Numpy compatibility (Should be dicussed in the context of #905 )\r\n- Scipy compatibility\r\n- Pandas compatibility\r\n- Better/New API to define/redefine: Units/Systems/Groups/Contexts\r\n- Measurements\r\n- Improved wraps/checks\r\n- New unit definitions\r\n- Better error/warning messages\r\n- Better output formatting\r\n- Better documentation\r\n\r\nWe do not need to solve everything, but I think it will be worth to have a better roadmap.\r\n\r\nIf you are interest in champion one of these topics (or other):\r\n- create a new issue\r\n- summarize the ideas, problems and solutions\r\n- link the relevant issues (I will close those to clean up)\r\n- start a discussion for a roadmap.\r\n\r\nAlso, if you encounter issues or PRs that are not longer valid, please flag them and I will close them.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/914", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/914/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/914/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/914/events", "html_url": "https://github.com/hgrecco/pint/issues/914", "id": 532732710, "node_id": "MDU6SXNzdWU1MzI3MzI3MTA=", "number": 914, "title": "pint Exceptions can't be pickled", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-04T14:49:17Z", "updated_at": "2019-12-05T13:41:06Z", "closed_at": "2019-12-05T13:41:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "pint Exceptions cause a crash on pickle.loads.\r\n\r\n```python\r\npickle.loads(pickle.dumps(DefinitionSyntaxError(\"foo\")\r\n# TypeError: __init__() missing 1 required positional argument: 'msg'\r\n\r\npickle.loads(pickle.dumps(RedefinitionError(\"foo\", \"bar\")))\r\n# TypeError: __init__() missing 2 required positional arguments: 'name' and 'definition_type'\r\n\r\npickle.loads(pickle.dumps(UndefinedUnitError))\r\n# TypeError: __init__() missing 1 required positional argument: 'unit_names'\r\n\r\npickle.loads(pickle.dumps(DimensionalityError(\"a\", \"b\", \"c\", \"d\")))\r\n# TypeError: __init__() missing 2 required positional arguments: 'units1' and 'units2'\r\n\r\npickle.loads(pickle.dumps(OffsetUnitCalculusError(\"foo\", \"bar\")))\r\n# TypeError: __init__() missing 1 required positional argument: 'units1'\r\n```\r\n\r\nThis is a problem for users of ``concurrent.futures.ProcessPoolExecutor``, ``dask.multiprocessing``, ``dask.distributed`` (not when using ``dask.array``), spark, etc.\r\n\r\nThe issue is caused by a short-sighted implementation of ``Exception.__reduce__``, which causes pickle.loads to invoke``type(self)(*self.args)``.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/912", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/912/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/912/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/912/events", "html_url": "https://github.com/hgrecco/pint/issues/912", "id": 532595523, "node_id": "MDU6SXNzdWU1MzI1OTU1MjM=", "number": 912, "title": "Unit.__lt__ makes pprint crash", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-04T10:38:10Z", "updated_at": "2019-12-05T13:41:06Z", "closed_at": "2019-12-05T13:41:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The vast majority of the implementations of (dis)equality methods in Python (``__lt__`` etc.) raise TypeError when a comparison doesn't make sense. Although this isn't explicitly mandated by the data model, it is a de facto standard.\r\n\r\npint, however, can raise DimensionalityError, which is a subclass of ValueError.\r\nThis breaks pprint.pformat, which tries to sort sets and frozensets beyond a certain size and graciously handles TypeError, but not arbitrary exceptions. pprint.pformat is invoked by unittest.TestCase.assertEqual when a comparison fails.\r\n\r\n```python\r\nimport pprint\r\nimport pint\r\n\r\nureg = pint.UnitRegistry()\r\nmeter_units = ureg.get_compatible_units(ureg.meter)\r\nhertz_units = ureg.get_compatible_units(ureg.hertz)\r\npprint.pformat(meter_units | hertz_units)\r\n```\r\nOutput:\r\n```\r\nTraceback (most recent call last):\r\n  File \"lib/python3.6/site-packages/IPython/core/interactiveshell.py\", line 3326, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-26-eecee46faec1>\", line 1, in <module>\r\n    pprint.pformat(units)\r\n  File \"lib/python3.6/pprint.py\", line 58, in pformat\r\n    compact=compact).pformat(object)\r\n  File \"lib/python3.6/pprint.py\", line 144, in pformat\r\n    self._format(object, sio, 0, 0, {}, 0)\r\n  File \"lib/python3.6/pprint.py\", line 167, in _format\r\n    p(self, object, stream, indent, allowance, context, level + 1)\r\n  File \"lib/python3.6/pprint.py\", line 236, in _pprint_set\r\n    object = sorted(object, key=_safe_key)\r\n  File \"lib/python3.6/pprint.py\", line 89, in __lt__\r\n    return self.obj < other.obj\r\n  File \"pint/unit.py\", line 219, in <lambda>\r\n    __lt__ = lambda self, other: self.compare(other, op=operator.lt)\r\n  File \"pint/unit.py\", line 215, in compare\r\n    return self_q.compare(self._REGISTRY.Quantity(1, other), op)\r\n  File \"pint/quantity.py\", line 78, in wrapped\r\n    result = f(self, *args, **kwargs)\r\n  File \"pint/quantity.py\", line 1274, in compare\r\n    self.dimensionality, other.dimensionality)\r\npint.errors.DimensionalityError: Cannot convert from 'x_unit_Cu' ([length]) to 'becquerel' (1 / [time])\r\npprint.pformat(frozenset({Unit(\"m\"), Unit(\"Hz\")}))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/906", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/906/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/906/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/906/events", "html_url": "https://github.com/hgrecco/pint/issues/906", "id": 530817875, "node_id": "MDU6SXNzdWU1MzA4MTc4NzU=", "number": 906, "title": "Drop Python 2.7 support?", "user": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-01T23:41:45Z", "updated_at": "2019-12-03T15:07:20Z", "closed_at": "2019-12-03T15:07:20Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Dropping  Python 2.7 support has popped up a few times recently. I would like to make a list of issues and PR, and arguments to drop (or keep). Furthermore, if we drop: what will be the minimum Python 3 version we will support?\r\n\r\nIssues suggesting drop:\r\n- #905", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/904", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/904/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/904/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/904/events", "html_url": "https://github.com/hgrecco/pint/issues/904", "id": 528734971, "node_id": "MDU6SXNzdWU1Mjg3MzQ5NzE=", "number": 904, "title": "Add option to set locale on UnitRegistry; auto-Babelise (resp. Babelize!)", "user": {"login": "OJFord", "id": 3946014, "node_id": "MDQ6VXNlcjM5NDYwMTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3946014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OJFord", "html_url": "https://github.com/OJFord", "followers_url": "https://api.github.com/users/OJFord/followers", "following_url": "https://api.github.com/users/OJFord/following{/other_user}", "gists_url": "https://api.github.com/users/OJFord/gists{/gist_id}", "starred_url": "https://api.github.com/users/OJFord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OJFord/subscriptions", "organizations_url": "https://api.github.com/users/OJFord/orgs", "repos_url": "https://api.github.com/users/OJFord/repos", "events_url": "https://api.github.com/users/OJFord/events{/privacy}", "received_events_url": "https://api.github.com/users/OJFord/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-26T13:46:06Z", "updated_at": "2019-12-27T23:25:01Z", "closed_at": "2019-12-27T23:25:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be good to be able to set, for example, `locale='en_GB'` on instantiating a `UnitRegistry`, and then have it automatically `format_babel` to that locale.\r\n\r\nAs it is, the following is a little odd:\r\n\r\n```\r\n>>> ureg.litre\r\n<Unit('liter')>\r\n>>> str(3 * ureg.litre)\r\n'3 liter'\r\n```\r\n\r\nit's good that both spellings are accepted in Python, but it's a bit odd to then have it come back out in AmE having explicitly used BrE.\r\n\r\nHaving `ureg = UnitRegistry(locale='en_GB')` could mitigate that, and then also allow `'litre'` in the response of `ureg.cc.compatible_units()`.\r\n\r\nI could help with this, if it is something you agree with. Cheers.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/903", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/903/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/903/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/903/events", "html_url": "https://github.com/hgrecco/pint/issues/903", "id": 528725051, "node_id": "MDU6SXNzdWU1Mjg3MjUwNTE=", "number": 903, "title": "Bad babel formatting, not as documented", "user": {"login": "OJFord", "id": 3946014, "node_id": "MDQ6VXNlcjM5NDYwMTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3946014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OJFord", "html_url": "https://github.com/OJFord", "followers_url": "https://api.github.com/users/OJFord/followers", "following_url": "https://api.github.com/users/OJFord/following{/other_user}", "gists_url": "https://api.github.com/users/OJFord/gists{/gist_id}", "starred_url": "https://api.github.com/users/OJFord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OJFord/subscriptions", "organizations_url": "https://api.github.com/users/OJFord/orgs", "repos_url": "https://api.github.com/users/OJFord/repos", "events_url": "https://api.github.com/users/OJFord/events{/privacy}", "received_events_url": "https://api.github.com/users/OJFord/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-26T13:29:06Z", "updated_at": "2019-12-04T00:38:10Z", "closed_at": "2019-12-04T00:38:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "[Docs](https://pint.readthedocs.io/en/0.9/tutorial.html?highlight=babel):\r\n\r\n> Finally, if Babel is installed you can translate unit names to any language\r\n> ```\r\n> >>> accel.format_babel(locale='fr_FR')\r\n> '1.3 m\u00e8tre par seconde\u00b2'\r\n> ```\r\n\r\nv0.9.0:\r\n```\r\n>>> ureg=pint.UnitRegistry()\r\n>>> accel = 1.3 * ureg['meter/second**2']\r\n>>> accel.format_babel(locale='fr_FR')\r\n'1.3 {0}\\xa0m\u00e8tre par {0}\\xa0seconde\u00b2'\r\n>>> accel.format_babel(locale='en_GB')\r\n'1.3 {0} metres per {0} seconds\u00b2'\r\n```\r\n\r\ni.e. `{0} ` is inserted between the magnitude and units, and before each subsequent compounding unit.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/902", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/902/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/902/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/902/events", "html_url": "https://github.com/hgrecco/pint/issues/902", "id": 523881367, "node_id": "MDU6SXNzdWU1MjM4ODEzNjc=", "number": 902, "title": "DimensionalityError with auto_reduce_dimensions=True", "user": {"login": "pcatach", "id": 12431489, "node_id": "MDQ6VXNlcjEyNDMxNDg5", "avatar_url": "https://avatars0.githubusercontent.com/u/12431489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcatach", "html_url": "https://github.com/pcatach", "followers_url": "https://api.github.com/users/pcatach/followers", "following_url": "https://api.github.com/users/pcatach/following{/other_user}", "gists_url": "https://api.github.com/users/pcatach/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcatach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcatach/subscriptions", "organizations_url": "https://api.github.com/users/pcatach/orgs", "repos_url": "https://api.github.com/users/pcatach/repos", "events_url": "https://api.github.com/users/pcatach/events{/privacy}", "received_events_url": "https://api.github.com/users/pcatach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-16T18:48:31Z", "updated_at": "2019-12-20T01:32:13Z", "closed_at": "2019-12-20T01:32:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have encountered the following situation: a division between two quantities gives an error depending on the operand's order:\r\n```\r\n>>> from pint import UnitRegistry\r\n>>> ureg = UnitRegistry(auto_reduce_dimensions=True)\r\n>>> velocity = 1 *ureg.m/ureg.s\r\n>>> cross_section = 1 * ureg.um**2\r\n>>> velocity / cross_section\r\n<Quantity(1000000.0, '1 / micrometer / second')>\r\n>>> 1 / (velocity / cross_section)\r\n<Quantity(1e-06, 'micrometer * second')>\r\n>>> cross_section/velocity\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/pcatach/Projects/test/env/lib/python3.7/site-packages/pint/quantity.py\", line 911, in __truediv__\r\n    return self._mul_div(other, operator.truediv)\r\n  File \"/home/pcatach/Projects/test/env/lib/python3.7/site-packages/pint/quantity.py\", line 75, in wrapped\r\n    result = f(self, *args, **kwargs)\r\n  File \"/home/pcatach/Projects/test/env/lib/python3.7/site-packages/pint/quantity.py\", line 62, in wrapped\r\n    result.ito_reduced_units()\r\n  File \"/home/pcatach/Projects/test/env/lib/python3.7/site-packages/pint/quantity.py\", line 443, in ito_reduced_units\r\n    return self.ito(newunits)\r\n  File \"/home/pcatach/Projects/test/env/lib/python3.7/site-packages/pint/quantity.py\", line 362, in ito\r\n    **ctx_kwargs)\r\n  File \"/home/pcatach/Projects/test/env/lib/python3.7/site-packages/pint/quantity.py\", line 351, in _convert_magnitude\r\n    inplace=isinstance(self._magnitude, ndarray))\r\n  File \"/home/pcatach/Projects/test/env/lib/python3.7/site-packages/pint/registry.py\", line 711, in convert\r\n    return self._convert(value, src, dst, inplace)\r\n  File \"/home/pcatach/Projects/test/env/lib/python3.7/site-packages/pint/registry.py\", line 1242, in _convert\r\n    return super(ContextRegistry, self)._convert(value, src, dst, inplace)\r\n  File \"/home/pcatach/Projects/test/env/lib/python3.7/site-packages/pint/registry.py\", line 995, in _convert\r\n    return super(NonMultiplicativeRegistry, self)._convert(value, src, dst, inplace)\r\n  File \"/home/pcatach/Projects/test/env/lib/python3.7/site-packages/pint/registry.py\", line 733, in _convert\r\n    raise DimensionalityError(src, dst, src_dim, dst_dim)\r\npint.errors.DimensionalityError: Cannot convert from 'micrometer ** 2 * second / meter' ([length] * [time]) to 'second' ([time])\r\n```\r\nThe error does not occur when I have `auto_reduce_dimensions` set to `False`. It also does not occur when `cross_section` is set to `1*ureg.m**2` (but it persists if `nm`, `pm`, etc.)\r\n`python=3.7.3`\r\n`pint=0.9`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/901", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/901/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/901/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/901/events", "html_url": "https://github.com/hgrecco/pint/issues/901", "id": 522799934, "node_id": "MDU6SXNzdWU1MjI3OTk5MzQ=", "number": 901, "title": "How to properly deal with dimensionality errors", "user": {"login": "bartlettD", "id": 2047912, "node_id": "MDQ6VXNlcjIwNDc5MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2047912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bartlettD", "html_url": "https://github.com/bartlettD", "followers_url": "https://api.github.com/users/bartlettD/followers", "following_url": "https://api.github.com/users/bartlettD/following{/other_user}", "gists_url": "https://api.github.com/users/bartlettD/gists{/gist_id}", "starred_url": "https://api.github.com/users/bartlettD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bartlettD/subscriptions", "organizations_url": "https://api.github.com/users/bartlettD/orgs", "repos_url": "https://api.github.com/users/bartlettD/repos", "events_url": "https://api.github.com/users/bartlettD/events{/privacy}", "received_events_url": "https://api.github.com/users/bartlettD/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-14T11:32:18Z", "updated_at": "2019-11-14T12:00:18Z", "closed_at": "2019-11-14T12:00:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to write a python script which uses some variables using pint to implement this formula\r\n\r\n![image](https://user-images.githubusercontent.com/2047912/68853115-1f394580-06d1-11ea-8a37-2d8c160fad35.png)\r\n\r\nSo far I've not had much luck as I keep running into `DimensionalityError`s when trying to use my variables in calculations.\r\n\r\nThis is the code that I'm trying to run, am I using pint correctly in this case? The value that I'm trying to compute doesn't really have a unit so to speak but I'd still like to use pint in other parts of my program to compute power from current and voltage while being able to easily print in a human readable SI prefix.\r\n```\r\nfrom pint import UnitRegistry\r\nureg = UnitRegistry()\r\n\r\n\r\n#Diode Voltage Drop\r\nVDropD = 1 * ureg.V # Assuming 1V for now.\r\nVinMin = 4 * ureg.V\r\nVout = 180 * ureg.V\r\n\r\n#Nturns = list(range(1,11))\r\nNturns = 2\r\n#print(Nturns)\r\n\r\nDuty = (Vout + VDropD) \\\r\n    /(Nturns * VinMin) + Vout + VDropD\r\n\r\nprint(Duty)\r\n```\r\n\r\nWhen I run the program this is the error I get out. Is there a good way to deal with this? I'm not really trying to do a conversion so is there any way to tell pint just to ignore or skip this? I haven't managed to notice anything in the docs.\r\n\r\n`pint.errors.DimensionalityError: Cannot convert from 'dimensionless' (dimensionless) to 'volt' ([length] ** 2 * [mass] / [current] / [time] ** 3)`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/900", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/900/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/900/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/900/events", "html_url": "https://github.com/hgrecco/pint/issues/900", "id": 522195588, "node_id": "MDU6SXNzdWU1MjIxOTU1ODg=", "number": 900, "title": "unintuitive behaviour interacting with numpy scalars", "user": {"login": "Michaeldz36", "id": 48056522, "node_id": "MDQ6VXNlcjQ4MDU2NTIy", "avatar_url": "https://avatars2.githubusercontent.com/u/48056522?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Michaeldz36", "html_url": "https://github.com/Michaeldz36", "followers_url": "https://api.github.com/users/Michaeldz36/followers", "following_url": "https://api.github.com/users/Michaeldz36/following{/other_user}", "gists_url": "https://api.github.com/users/Michaeldz36/gists{/gist_id}", "starred_url": "https://api.github.com/users/Michaeldz36/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Michaeldz36/subscriptions", "organizations_url": "https://api.github.com/users/Michaeldz36/orgs", "repos_url": "https://api.github.com/users/Michaeldz36/repos", "events_url": "https://api.github.com/users/Michaeldz36/events{/privacy}", "received_events_url": "https://api.github.com/users/Michaeldz36/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1712992969, "node_id": "MDU6TGFiZWwxNzEyOTkyOTY5", "url": "https://api.github.com/repos/hgrecco/pint/labels/numpy", "name": "numpy", "color": "e8a4e6", "default": false, "description": "Numpy related bug/enhancement"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-13T12:41:23Z", "updated_at": "2019-12-30T22:51:36Z", "closed_at": "2019-12-30T22:51:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport pint, numpy\r\nsi = pint.UnitRegistry()\r\n\r\na = numpy.ones(1)\r\nb = 10. * si.gram / si.kilogram\r\nprint(a[0]+b, \"vs.\", float(a[0])+b)\r\n```\r\n```\r\n11.0 gram / kilogram vs. 1.01 dimensionless\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/899", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/899/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/899/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/899/events", "html_url": "https://github.com/hgrecco/pint/issues/899", "id": 515037467, "node_id": "MDU6SXNzdWU1MTUwMzc0Njc=", "number": 899, "title": "calling format_babel without babel installed causes an AttributeError", "user": {"login": "tgbugs", "id": 4299776, "node_id": "MDQ6VXNlcjQyOTk3NzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/4299776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgbugs", "html_url": "https://github.com/tgbugs", "followers_url": "https://api.github.com/users/tgbugs/followers", "following_url": "https://api.github.com/users/tgbugs/following{/other_user}", "gists_url": "https://api.github.com/users/tgbugs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgbugs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgbugs/subscriptions", "organizations_url": "https://api.github.com/users/tgbugs/orgs", "repos_url": "https://api.github.com/users/tgbugs/repos", "events_url": "https://api.github.com/users/tgbugs/events{/privacy}", "received_events_url": "https://api.github.com/users/tgbugs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1712726098, "node_id": "MDU6TGFiZWwxNzEyNzI2MDk4", "url": "https://api.github.com/repos/hgrecco/pint/labels/usability", "name": "usability", "color": "16a049", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-30T22:59:31Z", "updated_at": "2019-12-21T23:34:20Z", "closed_at": "2019-12-21T23:34:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "[babel](https://pypi.org/project/Babel/) is not listed as a dependency for pint, however there are cases where not having it installed can lead to errors at runtime.\r\n```\r\nself = <Quantity(200, 'micrometer')>, spec = '~', kwspec = {'locale': 'en_US'}, obj = <Quantity(200, 'micrometer')>\r\n\r\n    def format_babel(self, spec='', **kwspec):\r\n        spec = spec or self.default_format\r\n    \r\n        # standard cases\r\n        if '#' in spec:\r\n            spec = spec.replace('#', '')\r\n            obj = self.to_compact()\r\n        else:\r\n            obj = self\r\n        kwspec = dict(kwspec)\r\n        if 'length' in kwspec:\r\n            kwspec['babel_length'] = kwspec.pop('length')\r\n>       kwspec['locale'] = Loc.parse(kwspec['locale'])\r\nE       AttributeError: 'NoneType' object has no attribute 'parse'\r\n```\r\nThe line causing the issue is in quantity\r\nhttps://github.com/hgrecco/pint/blob/b664af69c40821111d13a126accf7deef7dee90d/pint/quantity.py#L272\r\n\r\nWould it be sufficient to simply set `kwspec['locale'] = None` in the event that Loc is None?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/897", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/897/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/897/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/897/events", "html_url": "https://github.com/hgrecco/pint/issues/897", "id": 513411805, "node_id": "MDU6SXNzdWU1MTM0MTE4MDU=", "number": 897, "title": "Implement tests for matplotlib functionality", "user": {"login": "jthielen", "id": 3460034, "node_id": "MDQ6VXNlcjM0NjAwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3460034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jthielen", "html_url": "https://github.com/jthielen", "followers_url": "https://api.github.com/users/jthielen/followers", "following_url": "https://api.github.com/users/jthielen/following{/other_user}", "gists_url": "https://api.github.com/users/jthielen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jthielen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jthielen/subscriptions", "organizations_url": "https://api.github.com/users/jthielen/orgs", "repos_url": "https://api.github.com/users/jthielen/repos", "events_url": "https://api.github.com/users/jthielen/events{/privacy}", "received_events_url": "https://api.github.com/users/jthielen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-28T16:22:26Z", "updated_at": "2019-12-26T23:04:41Z", "closed_at": "2019-12-26T23:04:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As discussed in #891, pint.matplotlib is currently lacking tests in the test suite. Adding those would be beneficial so that issues can be caught in pint and not downstream!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/895", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/895/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/895/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/895/events", "html_url": "https://github.com/hgrecco/pint/issues/895", "id": 511143403, "node_id": "MDU6SXNzdWU1MTExNDM0MDM=", "number": 895, "title": "degreeC is not defined in the unit registry", "user": {"login": "make-ing", "id": 1367506, "node_id": "MDQ6VXNlcjEzNjc1MDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1367506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/make-ing", "html_url": "https://github.com/make-ing", "followers_url": "https://api.github.com/users/make-ing/followers", "following_url": "https://api.github.com/users/make-ing/following{/other_user}", "gists_url": "https://api.github.com/users/make-ing/gists{/gist_id}", "starred_url": "https://api.github.com/users/make-ing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/make-ing/subscriptions", "organizations_url": "https://api.github.com/users/make-ing/orgs", "repos_url": "https://api.github.com/users/make-ing/repos", "events_url": "https://api.github.com/users/make-ing/events{/privacy}", "received_events_url": "https://api.github.com/users/make-ing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-23T07:53:05Z", "updated_at": "2019-10-23T13:53:10Z", "closed_at": "2019-10-23T13:53:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nif i want to create a Quantity object with the unit '\u00b0C' i get the following error:\r\n```pint.errors.UndefinedUnitError: 'degreeC' is not defined in the unit registry```\r\n\r\ni try to create is this way:\r\n```t = ureg.Quantity(24, '\u00b0C')```\r\n\r\nif i try it this way its works:\r\n```t = ureg.Quantity(24, 'degC')```\r\n\r\nHowever in may case since i want to call it with the degree symbol because i need it somewhere else (to display it) i realy want to be able to create it with this '\u00b0C' string.\r\n\r\nOf course i could check for that string and replace it in this case but i want to keep my code simple and clean and that would definitly be a dirty hack.\r\n\r\nSince the '\u00b0C' is a valid alias this method should actually work right?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/893", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/893/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/893/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/893/events", "html_url": "https://github.com/hgrecco/pint/issues/893", "id": 508765466, "node_id": "MDU6SXNzdWU1MDg3NjU0NjY=", "number": 893, "title": "fine_structure_constant is completely wrong", "user": {"login": "mikapfl", "id": 7226087, "node_id": "MDQ6VXNlcjcyMjYwODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7226087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikapfl", "html_url": "https://github.com/mikapfl", "followers_url": "https://api.github.com/users/mikapfl/followers", "following_url": "https://api.github.com/users/mikapfl/following{/other_user}", "gists_url": "https://api.github.com/users/mikapfl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikapfl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikapfl/subscriptions", "organizations_url": "https://api.github.com/users/mikapfl/orgs", "repos_url": "https://api.github.com/users/mikapfl/repos", "events_url": "https://api.github.com/users/mikapfl/events{/privacy}", "received_events_url": "https://api.github.com/users/mikapfl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-17T23:08:54Z", "updated_at": "2019-12-21T05:22:45Z", "closed_at": "2019-12-21T05:22:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nwhat I get is:\r\n```python\r\n>>> import pint\r\n>>> u = pint.UnitRegistry()\r\n>>> (1*u.fine_structure_constant).to(u.m/u.m)\r\n<Quantity(1.0, 'dimensionless')>\r\n>>> pint.__version__\r\n'0.9'\r\n```\r\nhowever, the correct value of the fine structure constant is:\r\n```python\r\n>>> (1/(2*u.c*u.vacuum_permittivity) * u.elementary_charge**2 / u.h).to(u.m/u.m)\r\n<Quantity(0.0072973518649977285, 'dimensionless')>\r\n```\r\nAlso, the definition in constants_en.txt (line 67) seems somewhat opaque:\r\n```\r\nfine_structure_constant = (2 * h * R_inf / (m_e * c)) ** 0.5 = \u03b1 = alpha\r\n```\r\n\r\nCheers,\r\n\r\nMika", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/892", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/892/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/892/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/892/events", "html_url": "https://github.com/hgrecco/pint/issues/892", "id": 508511731, "node_id": "MDU6SXNzdWU1MDg1MTE3MzE=", "number": 892, "title": "setting warnings to errors changes the behaviour of `np.asarray` on quantities", "user": {"login": "keewis", "id": 14808389, "node_id": "MDQ6VXNlcjE0ODA4Mzg5", "avatar_url": "https://avatars1.githubusercontent.com/u/14808389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keewis", "html_url": "https://github.com/keewis", "followers_url": "https://api.github.com/users/keewis/followers", "following_url": "https://api.github.com/users/keewis/following{/other_user}", "gists_url": "https://api.github.com/users/keewis/gists{/gist_id}", "starred_url": "https://api.github.com/users/keewis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keewis/subscriptions", "organizations_url": "https://api.github.com/users/keewis/orgs", "repos_url": "https://api.github.com/users/keewis/repos", "events_url": "https://api.github.com/users/keewis/events{/privacy}", "received_events_url": "https://api.github.com/users/keewis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1712992969, "node_id": "MDU6TGFiZWwxNzEyOTkyOTY5", "url": "https://api.github.com/repos/hgrecco/pint/labels/numpy", "name": "numpy", "color": "e8a4e6", "default": false, "description": "Numpy related bug/enhancement"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-17T14:22:12Z", "updated_at": "2019-12-27T03:17:26Z", "closed_at": "2019-12-27T03:17:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using `warnings.filterwarnings` to promote warnings to errors changes the behaviour of `np.asarray` (or rather `np.array` as `np.asarray` delegates to that):\r\n```python\r\n>>> array = np.arange(10) * ureg.m\r\n>>> np.asarray(array)  # warning emitted because units were stripped\r\n[0 1 2 3 4 5 6 7 8 9]\r\n>>> warnings.filterwarnings(\"error\")\r\n>>> np.asarray(array)  # warning should have become an error, but completely disappeared\r\narray([<Quantity(0, 'meter')>, <Quantity(1, 'meter')>,\r\n       <Quantity(2, 'meter')>, <Quantity(3, 'meter')>,\r\n       <Quantity(4, 'meter')>, <Quantity(5, 'meter')>,\r\n       <Quantity(6, 'meter')>, <Quantity(7, 'meter')>,\r\n       <Quantity(8, 'meter')>, <Quantity(9, 'meter')>], dtype=object)\r\n```\r\n\r\nThis happens with pint `0.9`, but also with the version from #764 (because `__array_function__` does not allow overloading `np.asarray`)\r\n\r\nEdit: I do think this is an issue within numpy, but I think it might help to also track this here. Possibly related: numpy/numpy#9761", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/883", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/883/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/883/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/883/events", "html_url": "https://github.com/hgrecco/pint/issues/883", "id": 493796437, "node_id": "MDU6SXNzdWU0OTM3OTY0Mzc=", "number": 883, "title": "Integration with Dask (add tests; implement the Dask collection interface on Quantity)", "user": {"login": "jthielen", "id": 3460034, "node_id": "MDQ6VXNlcjM0NjAwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3460034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jthielen", "html_url": "https://github.com/jthielen", "followers_url": "https://api.github.com/users/jthielen/followers", "following_url": "https://api.github.com/users/jthielen/following{/other_user}", "gists_url": "https://api.github.com/users/jthielen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jthielen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jthielen/subscriptions", "organizations_url": "https://api.github.com/users/jthielen/orgs", "repos_url": "https://api.github.com/users/jthielen/repos", "events_url": "https://api.github.com/users/jthielen/events{/privacy}", "received_events_url": "https://api.github.com/users/jthielen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/hgrecco/pint/milestones/10", "html_url": "https://github.com/hgrecco/pint/milestone/10", "labels_url": "https://api.github.com/repos/hgrecco/pint/milestones/10/labels", "id": 5086620, "node_id": "MDk6TWlsZXN0b25lNTA4NjYyMA==", "number": 10, "title": "0.12", "description": "", "creator": {"login": "hgrecco", "id": 278566, "node_id": "MDQ6VXNlcjI3ODU2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/278566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgrecco", "html_url": "https://github.com/hgrecco", "followers_url": "https://api.github.com/users/hgrecco/followers", "following_url": "https://api.github.com/users/hgrecco/following{/other_user}", "gists_url": "https://api.github.com/users/hgrecco/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgrecco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgrecco/subscriptions", "organizations_url": "https://api.github.com/users/hgrecco/orgs", "repos_url": "https://api.github.com/users/hgrecco/repos", "events_url": "https://api.github.com/users/hgrecco/events{/privacy}", "received_events_url": "https://api.github.com/users/hgrecco/received_events", "type": "User", "site_admin": false}, "open_issues": 3, "closed_issues": 1, "state": "closed", "created_at": "2020-02-10T02:07:52Z", "updated_at": "2020-07-08T23:22:54Z", "due_on": "2020-03-19T07:00:00Z", "closed_at": "2020-05-29T15:44:16Z"}, "comments": 7, "created_at": "2019-09-15T22:53:56Z", "updated_at": "2020-07-08T23:22:54Z", "closed_at": "2020-07-08T23:22:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Based on https://github.com/hgrecco/pint/issues/878 and https://github.com/pydata/xarray/issues/525, it would be helpful for [interoperability between xarray, pint, and dask](https://github.com/hgrecco/pint/issues/845) for pint to implement the [dask collection interface](https://docs.dask.org/en/latest/custom-collections.html) for when a pint Quantity wraps a dask array. This should allow a Quantity-wrapped dask array to still behave in a dask-array-like way (i.e., as a \"duck dask array\"). There could also be convenience methods like `compute()`, `persist()`, and `chunk()`, following xarray's example.\r\n\r\nImplementation of this could likely follow or come along with changes discussed in https://github.com/hgrecco/pint/issues/878 and https://github.com/hgrecco/pint/issues/845. Based on @hgrecco's comment (https://github.com/hgrecco/pint/issues/878#issuecomment-530796790), I would guess that this would also all be following a decision being made about https://github.com/hgrecco/pint/pull/875 and https://github.com/hgrecco/pint/pull/764 to know when this should be implemented.\r\n\r\nAlso, ping @crusaderky, since you've been working a lot with xarray, pint, and dask together, and I'd want to hear your thoughts on this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/881", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/881/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/881/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/881/events", "html_url": "https://github.com/hgrecco/pint/issues/881", "id": 493431858, "node_id": "MDU6SXNzdWU0OTM0MzE4NTg=", "number": 881, "title": "Sphinx errors", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-13T17:12:25Z", "updated_at": "2020-01-06T17:39:40Z", "closed_at": "2020-01-06T17:39:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Downstream of #880, I'm still getting a few errors when running sphinx-build:\r\n\r\n```\r\npint/docs/plotting.rst:32: WARNING: Exception occurred in plotting plotting-1\r\n from pint/docs/plotting.rst:\r\nTraceback (most recent call last):\r\n  File \"pint/pint/quantity.py\", line 1476, in __getitem__\r\n    value = self._magnitude[key]\r\nTypeError: 'int' object is not subscriptable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"site-packages/matplotlib/sphinxext/plot_directive.py\", line 499, in run_code\r\n    exec(code, ns)\r\n  File \"<string>\", line 13, in <module>\r\n  File \"site-packages/matplotlib/axes/_axes.py\", line 798, in axhline\r\n    yy = self.convert_yunits(y)\r\n  File \"site-packages/matplotlib/artist.py\", line 195, in convert_yunits\r\n    return ax.yaxis.convert_units(y)\r\n  File \"site-packages/matplotlib/axis.py\", line 1521, in convert_units\r\n    if munits.ConversionInterface.is_numlike(x):\r\n  File \"site-packages/matplotlib/units.py\", line 126, in is_numlike\r\n    for thisx in x:\r\n  File \"pint/pint/quantity.py\", line 1480, in __getitem__\r\n    \"supports indexing\".format(self._magnitude))\r\nTypeError: Neither Quantity object nor its magnitude (26400)supports indexing\r\npint/docs/plotting.rst:52: WARNING: Exception occurred in plotting plotting-2\r\n from pint/docs/plotting.rst:\r\nTraceback (most recent call last):\r\n  File \"pint/pint/quantity.py\", line 1476, in __getitem__\r\n    value = self._magnitude[key]\r\nTypeError: 'int' object is not subscriptable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"site-packages/matplotlib/sphinxext/plot_directive.py\", line 499, in run_code\r\n    exec(code, ns)\r\n  File \"<string>\", line 16, in <module>\r\n  File \"site-packages/matplotlib/axes/_axes.py\", line 798, in axhline\r\n    yy = self.convert_yunits(y)\r\n  File \"site-packages/matplotlib/artist.py\", line 195, in convert_yunits\r\n    return ax.yaxis.convert_units(y)\r\n  File \"site-packages/matplotlib/axis.py\", line 1521, in convert_units\r\n    if munits.ConversionInterface.is_numlike(x):\r\n  File \"site-packages/matplotlib/units.py\", line 126, in is_numlike\r\n    for thisx in x:\r\n  File \"pint/pint/quantity.py\", line 1480, in __getitem__\r\n    \"supports indexing\".format(self._magnitude))\r\nTypeError: Neither Quantity object nor its magnitude (26400)supports indexing\r\n\r\npint/pint/quantity.py:docstring of pint.Quantity:: WARNING: py:class reference target not found: any numeric type                                                                                                                   \r\npint/pint/quantity.py:docstring of pint.Quantity.from_list:: WARNING: py:class reference target not found: list of pint.Quantity\r\npint/pint/quantity.py:docstring of pint.Quantity.from_sequence:: WARNING: py:class reference target not found: sequence of pint.Quantity\r\npint/pint/quantity.py:docstring of pint.quantity.Quantity:: WARNING: py:class reference target not found: any numeric type\r\npint/pint/quantity.py:docstring of pint.quantity.Quantity.from_list:: WARNING: py:class reference target not found: list of pint.Quantity\r\npint/pint/quantity.py:docstring of pint.quantity.Quantity.from_sequence:: WARNING: py:class reference target not found: sequence of pint.Quantity\r\npint/pint/systems.py:docstring of pint.systems.Group.from_lines:: WARNING: py:class reference target not found: str -> None\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/879", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/879/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/879/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/879/events", "html_url": "https://github.com/hgrecco/pint/issues/879", "id": 492925936, "node_id": "MDU6SXNzdWU0OTI5MjU5MzY=", "number": 879, "title": "hundredweight/hunderdweight typo", "user": {"login": "matthewpearlson", "id": 45362680, "node_id": "MDQ6VXNlcjQ1MzYyNjgw", "avatar_url": "https://avatars2.githubusercontent.com/u/45362680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewpearlson", "html_url": "https://github.com/matthewpearlson", "followers_url": "https://api.github.com/users/matthewpearlson/followers", "following_url": "https://api.github.com/users/matthewpearlson/following{/other_user}", "gists_url": "https://api.github.com/users/matthewpearlson/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewpearlson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewpearlson/subscriptions", "organizations_url": "https://api.github.com/users/matthewpearlson/orgs", "repos_url": "https://api.github.com/users/matthewpearlson/repos", "events_url": "https://api.github.com/users/matthewpearlson/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewpearlson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-12T17:05:47Z", "updated_at": "2020-07-28T05:55:24Z", "closed_at": "2019-10-03T15:49:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "hunderdweight should be replaced with hundredweight to resolve a typo for both the us/uk and short/long hundredweight units in the default_en.txt \r\n\r\nUK_hundredweight = long_hunderweight = UK_cwt\r\nUS_hundredweight = short_hunderdweight = US_cwt\r\nshort_hundrdweight = 100 avoirdupois_pound = ch_cwt\r\nlong_hunderweight = 112 avoirdupois_pound = lg_cwt\r\n  \r\n \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/876", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/876/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/876/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/876/events", "html_url": "https://github.com/hgrecco/pint/issues/876", "id": 492048579, "node_id": "MDU6SXNzdWU0OTIwNDg1Nzk=", "number": 876, "title": "Bug in compound unit dimensionality/unit reduction after caching?", "user": {"login": "jthielen", "id": 3460034, "node_id": "MDQ6VXNlcjM0NjAwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3460034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jthielen", "html_url": "https://github.com/jthielen", "followers_url": "https://api.github.com/users/jthielen/followers", "following_url": "https://api.github.com/users/jthielen/following{/other_user}", "gists_url": "https://api.github.com/users/jthielen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jthielen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jthielen/subscriptions", "organizations_url": "https://api.github.com/users/jthielen/orgs", "repos_url": "https://api.github.com/users/jthielen/repos", "events_url": "https://api.github.com/users/jthielen/events{/privacy}", "received_events_url": "https://api.github.com/users/jthielen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-11T06:44:53Z", "updated_at": "2019-09-11T14:10:58Z", "closed_at": "2019-09-11T14:10:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I came across a bizarre bug that popped up on the master branch recently:\r\n\r\n```python\r\nimport pint\r\nureg = pint.UnitRegistry()\r\nprint(ureg('joule').to_base_units())\r\nprint(ureg('joule * second ** 2 / kilogram / meter').to_base_units())\r\n```\r\n\r\ngives the following traceback\r\n\r\n```\r\nDimensionalityError                       Traceback (most recent call last)\r\n<ipython-input-18-62589ad7e050> in <module>\r\n----> 1 print((1 * ureg.joule * ureg.second ** 2 / ureg.kilogram / ureg.meter).to_base_units())\r\n\r\n~/dev/pint/pint/quantity.py in to_base_units(self)\r\n    478         _, other = self._REGISTRY._get_base_units(self._units)\r\n    479 \r\n--> 480         magnitude = self._convert_magnitude_not_inplace(other)\r\n    481 \r\n    482         return self.__class__(magnitude, other)\r\n\r\n~/dev/pint/pint/quantity.py in _convert_magnitude_not_inplace(self, other, *contexts, **ctx_kwargs)\r\n    406                 return self._REGISTRY.convert(self._magnitude, self._units, other)\r\n    407 \r\n--> 408         return self._REGISTRY.convert(self._magnitude, self._units, other)\r\n    409 \r\n    410     def _convert_magnitude(self, other, *contexts, **ctx_kwargs):\r\n\r\n~/dev/pint/pint/registry.py in convert(self, value, src, dst, inplace)\r\n    707             return value\r\n    708 \r\n--> 709         return self._convert(value, src, dst, inplace)\r\n    710 \r\n    711     def _convert(self, value, src, dst, inplace=False, check_dimensionality=True):\r\n\r\n~/dev/pint/pint/registry.py in _convert(self, value, src, dst, inplace)\r\n   1237                 value, src = src._magnitude, src._units\r\n   1238 \r\n-> 1239         return super(ContextRegistry, self)._convert(value, src, dst, inplace)\r\n   1240 \r\n   1241     def _get_compatible_units(self, input_units, group_or_system):\r\n\r\n~/dev/pint/pint/registry.py in _convert(self, value, src, dst, inplace)\r\n    990 \r\n    991         if not (src_offset_unit or dst_offset_unit):\r\n--> 992             return super(NonMultiplicativeRegistry, self)._convert(value, src, dst, inplace)\r\n    993 \r\n    994         src_dim = self._get_dimensionality(src)\r\n\r\n~/dev/pint/pint/registry.py in _convert(self, value, src, dst, inplace, check_dimensionality)\r\n    729             # then the conversion cannot be performed.\r\n    730             if src_dim != dst_dim:\r\n--> 731                 raise DimensionalityError(src, dst, src_dim, dst_dim)\r\n    732 \r\n    733         # Here src and dst have only multiplicative units left. Thus we can\r\n\r\nDimensionalityError: Cannot convert from 'joule * second ** 2 / kilogram / meter' ([length]) to 'dimensionless' (dimensionless)\r\n```\r\n\r\nbut it works fine after removing the `joule` line.\r\n\r\nAfter digging through the commit history, it seems to lead back to https://github.com/hgrecco/pint/commit/a9a97ba98167a6a20df874a14343d303a3cd2163, since any point in the history I checked including that commit fails with this error, and any without it returns the expected result of `1.0 meter` for the second line. Glancing through the changes made there, it makes sense that it is tied to this seemingly cache-related issue. That being said, I have no clue what is particularly going wrong here or what exactly in https://github.com/hgrecco/pint/commit/a9a97ba98167a6a20df874a14343d303a3cd2163 could have caused this.\r\n\r\nIn case it helps with troubleshooting...\r\n\r\n...the error no longer arises when any of the compound pieces of the last unit are removed.\r\n\r\n...it still arises with the following:\r\n\r\n```python\r\nimport pint\r\nureg = pint.UnitRegistry()\r\nprint((1 * ureg.joule).to_base_units())\r\nprint((1 * ureg.joule * ureg.second ** 2 / ureg.kilogram / ureg.meter).to_base_units())\r\n```\r\n\r\n...but does not arise with the following:\r\n\r\n```python\r\nimport pint\r\nureg = pint.UnitRegistry()\r\nprint((1 * ureg.joule).to_base_units())\r\nprint((1 * ureg.joule * ureg.second ** 2 / ureg.kilogram / ureg.meter).to('m'))\r\n```\r\n\r\nAnother oddity is that, despite what the last non-failing example may suggest, this first arose in MetPy through a function that does not use `.to_base_units`, but rather just `.to`. However, after spending a decent amount of time on it, I can't seem to come up with a short example that replicates the failure with `.to`.\r\n\r\nping @crusaderky, in case you may have any insight here with the seemingly problematic commit from https://github.com/hgrecco/pint/pull/864.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/874", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/874/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/874/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/874/events", "html_url": "https://github.com/hgrecco/pint/issues/874", "id": 490753804, "node_id": "MDU6SXNzdWU0OTA3NTM4MDQ=", "number": 874, "title": "kb translates to kilobarn instead of kilobyte", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-08T13:20:13Z", "updated_at": "2019-10-06T14:36:36Z", "closed_at": "2019-10-06T14:36:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "The same goes for `b`, `mb` `Gb` etc.\r\nHow do I force pint to parse them as measurements of bytes?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/873", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/873/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/873/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/873/events", "html_url": "https://github.com/hgrecco/pint/issues/873", "id": 490581328, "node_id": "MDU6SXNzdWU0OTA1ODEzMjg=", "number": 873, "title": "Custom _FORMAT", "user": {"login": "mrclary", "id": 9618975, "node_id": "MDQ6VXNlcjk2MTg5NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/9618975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrclary", "html_url": "https://github.com/mrclary", "followers_url": "https://api.github.com/users/mrclary/followers", "following_url": "https://api.github.com/users/mrclary/following{/other_user}", "gists_url": "https://api.github.com/users/mrclary/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrclary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrclary/subscriptions", "organizations_url": "https://api.github.com/users/mrclary/orgs", "repos_url": "https://api.github.com/users/mrclary/repos", "events_url": "https://api.github.com/users/mrclary/events{/privacy}", "received_events_url": "https://api.github.com/users/mrclary/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-07T02:31:43Z", "updated_at": "2019-10-28T17:31:33Z", "closed_at": "2019-10-28T17:31:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/hgrecco/pint/blob/c777e3ca392b77a2d48bce7416e5c9cf10321176/pint/formatting.py#L190\r\nIs there a good reason for `_KNOWN_TYPES` to be a `frozenset`? This prevents creating custom unit string formats. For example, one could create a custom unit string format for a package by including the following in a package level `__init__.py`.\r\n```python\r\nimport pint\r\nfrom pint.formatting import _FORMATS, _KNOWN_TYPES\r\n\r\n_FORMATS.update({'T': {'as_ratio': True,\r\n                       'single_denominator': True,\r\n                       'product_fmt': ' ',\r\n                       'division_fmt': '/',\r\n                       'power_fmt': '{}^{}',\r\n                       'parentheses_fmt': r'({})',\r\n                       }\r\n                 }\r\n                )\r\n_KNOWN_TYPES.append('T')\r\n\r\nureg = pint.UnitRegistry()\r\n```\r\nThen one can do the following.\r\n```python\r\nIn [1]: from <pkg> import ureg\r\nIn [2]: u = ureg.Unit('m^-3 * s')\r\nIn [3]: u\r\nOut[3]: <Unit('second / meter ** 3')>\r\nIn [4]: '{:C}'.format(u)\r\nOut[4]: 'second/meter**3'\r\nIn [5]: '{:~C}'.format(u)\r\nOut[5]: 's/m**3'\r\nIn [6]: '{:~T}'.format(u)\r\nOut[6]: 's/m^3'\r\n```\r\nAlternatively, `_KNOWN_TYPES` could be replaced with `list(_FORMATS.keys()).append('~')` on lines \r\nhttps://github.com/hgrecco/pint/blob/c777e3ca392b77a2d48bce7416e5c9cf10321176/pint/formatting.py#L197 and\r\nhttps://github.com/hgrecco/pint/blob/c777e3ca392b77a2d48bce7416e5c9cf10321176/pint/formatting.py#L275\r\n\r\nUnless I'm missing an easier way to create a custom string format...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/872", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/872/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/872/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/872/events", "html_url": "https://github.com/hgrecco/pint/issues/872", "id": 490040569, "node_id": "MDU6SXNzdWU0OTAwNDA1Njk=", "number": 872, "title": "Pint doesn't declare `setuptools` as a dependency.", "user": {"login": "deanishe", "id": 747913, "node_id": "MDQ6VXNlcjc0NzkxMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/747913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deanishe", "html_url": "https://github.com/deanishe", "followers_url": "https://api.github.com/users/deanishe/followers", "following_url": "https://api.github.com/users/deanishe/following{/other_user}", "gists_url": "https://api.github.com/users/deanishe/gists{/gist_id}", "starred_url": "https://api.github.com/users/deanishe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deanishe/subscriptions", "organizations_url": "https://api.github.com/users/deanishe/orgs", "repos_url": "https://api.github.com/users/deanishe/repos", "events_url": "https://api.github.com/users/deanishe/events{/privacy}", "received_events_url": "https://api.github.com/users/deanishe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-05T22:33:51Z", "updated_at": "2019-12-12T13:24:13Z", "closed_at": "2019-12-12T13:24:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pint imports `pkg_resources` (part of `setuptools` AFAIK), but doesn't declare `setuptools` as a dependency.\r\n\r\nThis means that bundling `pint` in the normal way (i.e. `pip install --target .`) doesn't work properly, as its dependencies aren't included.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/871", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/871/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/871/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/871/events", "html_url": "https://github.com/hgrecco/pint/issues/871", "id": 489905438, "node_id": "MDU6SXNzdWU0ODk5MDU0Mzg=", "number": 871, "title": "py27 loss of precision", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-05T17:38:34Z", "updated_at": "2019-12-03T15:07:20Z", "closed_at": "2019-12-03T15:07:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There are precision issues in python 2.7:\r\n\r\n```python\r\n>>> ureg.define(\"mylen = 1.000000000001 m\")\r\n>>> ureg.Quantity(1, \"mylen\").to(\"m\")\r\n<Quantity(1.0, 'meter')>\r\n```\r\n\r\nIn Python 3:\r\n```\r\n1.000000000001 <Unit('meter')>\r\n```\r\n\r\nThis is caused by incorrectly using str(float) instead of repr(float) across the codebase. In Python 2.7, the two are not the same:\r\n```python\r\n>>> str(1.000000000001)\r\n'1.0'\r\n>>> repr(1.000000000001)\r\n'1.000000000001'\r\n```\r\n\r\nI noticed this issue after my eye fell on one of these cases:\r\nhttps://github.com/hgrecco/pint/blob/c777e3ca392b77a2d48bce7416e5c9cf10321176/pint/registry.py#L751-L754\r\n\r\n**Personal note:** I hold no interest in Python 2.7 so I'm afraid I'm not volunteering to fix this. I strongly suggest canning support for Python < 3.5 ASAP.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/867", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/867/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/867/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/867/events", "html_url": "https://github.com/hgrecco/pint/issues/867", "id": 488316096, "node_id": "MDU6SXNzdWU0ODgzMTYwOTY=", "number": 867, "title": "Quantity.prod() result unit is incorrect with axis or where argument", "user": {"login": "jthielen", "id": 3460034, "node_id": "MDQ6VXNlcjM0NjAwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3460034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jthielen", "html_url": "https://github.com/jthielen", "followers_url": "https://api.github.com/users/jthielen/followers", "following_url": "https://api.github.com/users/jthielen/following{/other_user}", "gists_url": "https://api.github.com/users/jthielen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jthielen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jthielen/subscriptions", "organizations_url": "https://api.github.com/users/jthielen/orgs", "repos_url": "https://api.github.com/users/jthielen/repos", "events_url": "https://api.github.com/users/jthielen/events{/privacy}", "received_events_url": "https://api.github.com/users/jthielen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1712992969, "node_id": "MDU6TGFiZWwxNzEyOTkyOTY5", "url": "https://api.github.com/repos/hgrecco/pint/labels/numpy", "name": "numpy", "color": "e8a4e6", "default": false, "description": "Numpy related bug/enhancement"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-09-02T20:57:18Z", "updated_at": "2020-04-23T21:57:48Z", "closed_at": "2020-04-23T21:31:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now, the `.prod()` method assumes the full size of the input is collapsed in the result. This gives incorrect results when the `axis` or `where` arguments are supplied, as seen below:\r\n\r\n```python\r\nimport pint\r\n\r\nureg = pint.UnitRegistry()\r\n\r\nq = [[1, 2], [3, 4]] * ureg.m\r\n\r\nprint(q.prod())\r\nprint(q.prod(axis=0))\r\nprint(q.prod(where=[True, False]))\r\n```\r\n```\r\n24 meter ** 4\r\n[3 8] meter ** 4\r\n3 meter ** 4\r\n```\r\n\r\nThe unit on the first result where the full array is collapsed to a scalar is correct, but the other two results should have `meter ** 2` as the unit.\r\n\r\nI don't have a good fix for this yet, since this is the same problem mentioned in https://github.com/hgrecco/pint/pull/764#issuecomment-523749008. If anyone has any suggestions for a performant way to determine how many unit multiplications occur given both `axis` and `where` arguments, please do let me know! Otherwise, I'll try to figure something out and get a PR in for this or include it alongside a `prod` implementation for `__array_function__`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/866", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/866/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/866/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/866/events", "html_url": "https://github.com/hgrecco/pint/issues/866", "id": 488295842, "node_id": "MDU6SXNzdWU0ODgyOTU4NDI=", "number": 866, "title": "Expected truthiness of quantities with offsets", "user": {"login": "jthielen", "id": 3460034, "node_id": "MDQ6VXNlcjM0NjAwMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3460034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jthielen", "html_url": "https://github.com/jthielen", "followers_url": "https://api.github.com/users/jthielen/followers", "following_url": "https://api.github.com/users/jthielen/following{/other_user}", "gists_url": "https://api.github.com/users/jthielen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jthielen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jthielen/subscriptions", "organizations_url": "https://api.github.com/users/jthielen/orgs", "repos_url": "https://api.github.com/users/jthielen/repos", "events_url": "https://api.github.com/users/jthielen/events{/privacy}", "received_events_url": "https://api.github.com/users/jthielen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-02T19:06:57Z", "updated_at": "2019-12-30T23:44:48Z", "closed_at": "2019-12-30T23:44:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With https://github.com/hgrecco/pint/pull/764 and https://github.com/pydata/xarray/pull/3238, in trying to implement proper `np.any` and `np.all` for Quantities, I got to wondering what the expected \"truthiness\" of a scalar quantity with offset should be. Right now, there seems to be no explicit behavior defined, so it falls back to the magnitude. This leads to the following type of result:\r\n\r\n```python\r\nimport pint\r\n\r\nureg = pint.UnitRegistry()\r\n\r\ntemp = ureg.Quantity(0, ureg.degC)\r\n\r\nprint(bool(temp))\r\nprint(bool(temp.to(ureg.degF)))\r\nprint(bool(temp.to(ureg.K)))\r\n```\r\n```\r\nFalse\r\nTrue\r\nTrue\r\n```\r\n\r\nShould this be the expected behavior?\r\n\r\nAt first glance, this kind of changing the truthiness of a quantity by changing the unit it is expressed in is a bit unsettling...making a small change like converting the unit doesn't seem like it should change the truthiness. In this case, I think there would need to be an explicit `__bool__` method that either converts to the non-offset equivalent or raises a `ValueError` due to ambiguity.\r\n\r\nHowever, I would also understand if the current behavior is what is expected, since thinking about it more, I would imagine that in most use cases checking for truthiness of a quantity reduces to checking for nonzero values. Also, I'm not sure what pint's stance on breaking existing but undocumented behavior is.\r\n\r\nEither way, however, I think tests should be written for the expected behavior and it should be documented clearly (https://pint.readthedocs.io/en/0.9/nonmult.html). Once the expected behavior is decided upon, I'd be glad to put in a PR for that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/861", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/861/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/861/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/861/events", "html_url": "https://github.com/hgrecco/pint/issues/861", "id": 487428732, "node_id": "MDU6SXNzdWU0ODc0Mjg3MzI=", "number": 861, "title": "' _ ' (unnamed variable) in defaults_en.txt", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-30T11:13:59Z", "updated_at": "2019-08-30T14:10:30Z", "closed_at": "2019-08-30T14:10:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "defaults_en.txt contains 19 cases of the character ``_`` used as an alias, e.g.\r\n\r\nhttps://github.com/hgrecco/pint/blob/2afdc4bf5c5727ed9cef6fdaccb00b88813c4a24/pint/default_en.txt#L47\r\nhttps://github.com/hgrecco/pint/blob/2afdc4bf5c5727ed9cef6fdaccb00b88813c4a24/pint/default_en.txt#L77\r\n\r\nDoes it define an unnamed, temporary alias (``_`` being a legal Python variable)?\r\nWhat is its purpose? There is no documentation about it that I could find.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/860", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/860/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/860/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/860/events", "html_url": "https://github.com/hgrecco/pint/issues/860", "id": 487426015, "node_id": "MDU6SXNzdWU0ODc0MjYwMTU=", "number": 860, "title": "Add aliases to already existing definitions", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-30T11:06:46Z", "updated_at": "2019-09-05T15:00:21Z", "closed_at": "2019-09-05T15:00:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'd like to write a custom definitions file that adds new aliases to definitions from defaults_en.txt - as opposed to creating entirely new units.\r\n\r\nHowever, I could not find a way to do it without scouting for the original definition line and writing it again whole.\r\n\r\nFor example, defaults_en.txt contains:\r\n```\r\ncalorie = 4.184 * joule = cal = thermochemical_calorie = cal_th\r\n```\r\n\r\nIf I want to add an alias, I have to write in my custom definitions file:\r\n```\r\ncalorie = 4.184 * joule = cal = thermochemical_calorie = cal_th = CUSTOM_CAL\r\n```\r\nwhereas I'd like to just write something like:\r\n```\r\ncalorie = ... = CUSTOM_CAL\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/859", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/859/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/859/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/859/events", "html_url": "https://github.com/hgrecco/pint/issues/859", "id": 487395305, "node_id": "MDU6SXNzdWU0ODczOTUzMDU=", "number": 859, "title": "Missing `__matmul__` @ operator. ", "user": {"login": "agoose77", "id": 1248413, "node_id": "MDQ6VXNlcjEyNDg0MTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1248413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agoose77", "html_url": "https://github.com/agoose77", "followers_url": "https://api.github.com/users/agoose77/followers", "following_url": "https://api.github.com/users/agoose77/following{/other_user}", "gists_url": "https://api.github.com/users/agoose77/gists{/gist_id}", "starred_url": "https://api.github.com/users/agoose77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agoose77/subscriptions", "organizations_url": "https://api.github.com/users/agoose77/orgs", "repos_url": "https://api.github.com/users/agoose77/repos", "events_url": "https://api.github.com/users/agoose77/events{/privacy}", "received_events_url": "https://api.github.com/users/agoose77/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-30T09:52:17Z", "updated_at": "2019-12-11T16:05:12Z", "closed_at": "2019-12-11T16:05:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm not too sure on how pint works, but I imagine we can directly delegate to `np.matmul(self, other)`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/hgrecco/pint/issues/858", "repository_url": "https://api.github.com/repos/hgrecco/pint", "labels_url": "https://api.github.com/repos/hgrecco/pint/issues/858/labels{/name}", "comments_url": "https://api.github.com/repos/hgrecco/pint/issues/858/comments", "events_url": "https://api.github.com/repos/hgrecco/pint/issues/858/events", "html_url": "https://github.com/hgrecco/pint/issues/858", "id": 487365648, "node_id": "MDU6SXNzdWU0ODczNjU2NDg=", "number": 858, "title": "ISO British Thermal Units", "user": {"login": "crusaderky", "id": 6213168, "node_id": "MDQ6VXNlcjYyMTMxNjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6213168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crusaderky", "html_url": "https://github.com/crusaderky", "followers_url": "https://api.github.com/users/crusaderky/followers", "following_url": "https://api.github.com/users/crusaderky/following{/other_user}", "gists_url": "https://api.github.com/users/crusaderky/gists{/gist_id}", "starred_url": "https://api.github.com/users/crusaderky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crusaderky/subscriptions", "organizations_url": "https://api.github.com/users/crusaderky/orgs", "repos_url": "https://api.github.com/users/crusaderky/repos", "events_url": "https://api.github.com/users/crusaderky/events{/privacy}", "received_events_url": "https://api.github.com/users/crusaderky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-30T08:48:56Z", "updated_at": "2020-01-06T17:04:06Z", "closed_at": "2020-01-06T17:04:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Wikipedia mentions that Btu, according to ISO 31-4, is equal to **1055.06** (https://en.wikipedia.org/wiki/British_thermal_unit).\r\nPint instead states **1055.056** (commit: https://github.com/hgrecco/pint/commit/3ad5c2bb24ca92cb69353af9a84458da9bebc8f3 by @Jellby).\r\nBrowsing the ISO website, I understand that the latest authoritative document is ISO 80000-5:2019 (https://www.iso.org/standard/64976.html), which however is behind a paywall. -_-\r\n\r\nCan anybody with access figure out which one is right so that either pint or wikipedia can be fixed?\r\n", "performed_via_github_app": null, "score": 1.0}]}