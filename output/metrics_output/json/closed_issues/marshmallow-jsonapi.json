{"total_count": 69, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/318", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/318/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/318/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/318/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/318", "id": 661783587, "node_id": "MDU6SXNzdWU2NjE3ODM1ODc=", "number": 318, "title": "Importing ABC directly from collections has been deprecated and will be removed in Python 3.10", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-20T12:48:32Z", "updated_at": "2020-07-20T13:35:37Z", "closed_at": "2020-07-20T13:35:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Use collections.abc instead since library is Python 3.6+ only\r\n\r\n```\r\nmarshmallow_jsonapi/fields.py\r\n332:        if isinstance(value, collections.Mapping):\r\n341:        if isinstance(value, collections.Mapping):\r\n377:        if isinstance(value, collections.Mapping):\r\n386:        if isinstance(value, collections.Mapping):\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/277", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/277/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/277/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/277/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/277", "id": 537511610, "node_id": "MDU6SXNzdWU1Mzc1MTE2MTA=", "number": 277, "title": "Avoid fetching included relationship in creating link", "user": {"login": "iamareebjamal", "id": 3874064, "node_id": "MDQ6VXNlcjM4NzQwNjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3874064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iamareebjamal", "html_url": "https://github.com/iamareebjamal", "followers_url": "https://api.github.com/users/iamareebjamal/followers", "following_url": "https://api.github.com/users/iamareebjamal/following{/other_user}", "gists_url": "https://api.github.com/users/iamareebjamal/gists{/gist_id}", "starred_url": "https://api.github.com/users/iamareebjamal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iamareebjamal/subscriptions", "organizations_url": "https://api.github.com/users/iamareebjamal/orgs", "repos_url": "https://api.github.com/users/iamareebjamal/repos", "events_url": "https://api.github.com/users/iamareebjamal/events{/privacy}", "received_events_url": "https://api.github.com/users/iamareebjamal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-13T11:58:36Z", "updated_at": "2020-02-02T17:58:04Z", "closed_at": "2020-02-02T17:58:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We were suffering from huge performance problem which fetching a list of resource. It was taking up to 3 seconds. And for a single resource, up to 150 ms. We thought it is due to inefficiency of python and serialization time of marshmallow, but when we profiled the code. SQL query was taking 3 ms and through python (SQLAlchemy), only 7 ms. After analyzing where the most time was being consumed, we found out that for every relationship of the resource, a query was made to fetch them in link creation phase, even when we didn't include the resource. \r\n\r\nImagine an event with speakers, sessions, tracks, tickets, attendees, orders, rooms, event_type, etc. When we were fetching a single event. This was being fetched:\r\n\r\n```sql\r\nSELECT * from event where id = 1;\r\nSELECT * from speakers where event_id = 1;\r\nSELECT * from sessions where event_id = 1;\r\nSELECT * from tracks where event_id = 1;\r\n...\r\n```\r\n\r\nYou get the idea and can see how wasteful it is, specially for a list of events. By cutting the link generation, our single resource endpoint completes in 9 ms and list of resources return in 250 ms. It's 10x and sometimes more than 50x improvement if more resources are being fetched", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/265", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/265/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/265/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/265/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/265", "id": 512753283, "node_id": "MDU6SXNzdWU1MTI3NTMyODM=", "number": 265, "title": "Does the Flask integration support blueprints?", "user": {"login": "dan-bowen", "id": 865741, "node_id": "MDQ6VXNlcjg2NTc0MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/865741?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dan-bowen", "html_url": "https://github.com/dan-bowen", "followers_url": "https://api.github.com/users/dan-bowen/followers", "following_url": "https://api.github.com/users/dan-bowen/following{/other_user}", "gists_url": "https://api.github.com/users/dan-bowen/gists{/gist_id}", "starred_url": "https://api.github.com/users/dan-bowen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dan-bowen/subscriptions", "organizations_url": "https://api.github.com/users/dan-bowen/orgs", "repos_url": "https://api.github.com/users/dan-bowen/repos", "events_url": "https://api.github.com/users/dan-bowen/events{/privacy}", "received_events_url": "https://api.github.com/users/dan-bowen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-25T23:06:36Z", "updated_at": "2019-11-13T04:21:29Z", "closed_at": "2019-11-13T04:21:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am following the Flask example as documented here: https://github.com/marshmallow-code/marshmallow-jsonapi/blob/dev/examples/flask_example.py\r\n\r\nI have created a simple `/ping` endpoint using the Flask integration with the minor exception that I am using blueprints to organize my routes. Here is the complete blueprint:\r\n\r\n```python\r\nfrom flask import Blueprint, jsonify\r\nfrom marshmallow_jsonapi import fields\r\nfrom marshmallow_jsonapi.flask import Relationship, Schema\r\n\r\nblueprint = Blueprint('ping', __name__)\r\n\r\n\r\ndef J(*args, **kwargs):\r\n    \"\"\"Wrapper around jsonify that sets the Content-Type of the response to\r\n    application/vnd.api+json.\r\n    \"\"\"\r\n    response = jsonify(*args, **kwargs)\r\n    response.mimetype = \"application/vnd.api+json\"\r\n\r\n    return response\r\n\r\n\r\nclass PingModel:\r\n    def __init__(self, ping_id, result):\r\n        self.id = ping_id\r\n        self.result = result\r\n\r\n\r\nclass PingSchema(Schema):\r\n    id = fields.Str(dump_only=True)\r\n    result = fields.Str(required=True)\r\n\r\n    class Meta:\r\n        type_ = \"ping\"\r\n        strict = True\r\n        self_view = \"ping.ping_detail\"\r\n\r\n\r\n@blueprint.route('/ping', methods=['GET'])\r\ndef ping_detail():\r\n    ping_model = PingModel('GUID_GOES_HERE', 'success')\r\n    ping_result = PingSchema().dump(ping_model)\r\n\r\n    return J(ping_result)\r\n```\r\n\r\nThe problem I am having with this is an unexpected JSON response. When I access `http://localhost:5000/ping` I get the following:\r\n\r\n```json\r\n[\r\n  {\r\n    \"data\": {\r\n      \"attributes\": {\r\n        \"result\": \"success\"\r\n      }, \r\n      \"id\": \"GUID_GOES_HERE\", \r\n      \"links\": {\r\n        \"self\": \"/ping\"\r\n      }, \r\n      \"type\": \"ping\"\r\n    }, \r\n    \"links\": {\r\n      \"self\": \"/ping\"\r\n    }\r\n  }, \r\n  {}\r\n]\r\n```\r\n\r\nI would have expected this response:\r\n\r\n```json\r\n{\r\n  \"data\": {\r\n    \"attributes\": {\r\n      \"result\": \"success\"\r\n    }, \r\n    \"id\": \"GUID_GOES_HERE\", \r\n    \"links\": {\r\n      \"self\": \"/ping\"\r\n    }, \r\n    \"type\": \"ping\"\r\n  }, \r\n  \"links\": {\r\n    \"self\": \"/ping\"\r\n  }\r\n}\r\n```\r\n\r\nI suspect this is a side-effect of using blueprints but I'm not sure. Can you tell me what I am doing wrong? Is there something special I need to do in order to use this with blueprints?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/261", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/261/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/261/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/261/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/261", "id": 508869352, "node_id": "MDU6SXNzdWU1MDg4NjkzNTI=", "number": 261, "title": "Auto load all relationships if data is present", "user": {"login": "TMiguelT", "id": 5019367, "node_id": "MDQ6VXNlcjUwMTkzNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5019367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TMiguelT", "html_url": "https://github.com/TMiguelT", "followers_url": "https://api.github.com/users/TMiguelT/followers", "following_url": "https://api.github.com/users/TMiguelT/following{/other_user}", "gists_url": "https://api.github.com/users/TMiguelT/gists{/gist_id}", "starred_url": "https://api.github.com/users/TMiguelT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TMiguelT/subscriptions", "organizations_url": "https://api.github.com/users/TMiguelT/orgs", "repos_url": "https://api.github.com/users/TMiguelT/repos", "events_url": "https://api.github.com/users/TMiguelT/events{/privacy}", "received_events_url": "https://api.github.com/users/TMiguelT/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-18T05:53:13Z", "updated_at": "2019-10-18T06:08:41Z", "closed_at": "2019-10-18T06:08:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I have a dictionary of data that includes some relationships, e.g.:\r\n```json\r\n{\r\n  \"data\": {\r\n    \"attributes\": {\r\n      \"key\": \"analysis\",\r\n      \"value\": \"csDIvvHvkxNLTGYaLrFn\"\r\n    },\r\n    \"id\": null,\r\n    \"relationships\": {\r\n      \"report\": {\r\n        \"data\": {\r\n          \"id\": \"1\",\r\n          \"type\": \"report\"\r\n        }\r\n      }\r\n    },\r\n    \"type\": \"report_meta\"\r\n  },\r\n  \"included\": [\r\n    {\r\n      \"attributes\": {\r\n        \"created_at\": \"1976-10-06T16:41:44\",\r\n        \"hash\": \"7c71f726a0c72adec6c577bd3233d63f24d2b5de\",\r\n        \"uploaded_at\": \"1976-07-05T20:28:45\"\r\n      },\r\n      \"id\": \"1\",\r\n      \"links\": {\r\n        \"self\": \"/rest_api/v1/reports/1\"\r\n      },\r\n      \"type\": \"reports\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nAnd this schema:\r\n\r\n```python\r\nclass ReportMetaSchema(Schema):\r\n    class Meta:\r\n        type_ = 'report_meta'\r\n\r\n    id = f.Integer(attribute='report_meta_id', allow_none=True, as_string=True)\r\n    key = f.String(attribute='report_meta_key')\r\n    value = f.String(attribute='report_meta_value')\r\n\r\n    report = f.Relationship(\r\n        related_view='rest_api.report',\r\n        related_view_kwargs={\r\n            'report_id': '<report_id>'\r\n        },\r\n        many=False,\r\n        type_='report',\r\n        id_field='report_id',\r\n        include_resource_linkage=True,\r\n        schema='ReportSchema'\r\n    )\r\n```\r\n\r\nI want some way to load the relationship data without having to specify `include_data=['report']` *if the relationship data is present*, and to otherwise fall back to simply loading the ID.\r\n\r\nThe main use case for this is a `POST` request, where we allow users to either submit a resource that has links to existing resources in our database, *or* to submit a resource with nested data, indicating that these nested resources should be created.\r\n\r\nThus, I'm proposing a `ReportMetaSchema(include_data='auto')`, which will auto load any included data that is provided, and ignore data that isn't provided.\r\n\r\nThoughts? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/251", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/251/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/251/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/251", "id": 489508658, "node_id": "MDU6SXNzdWU0ODk1MDg2NTg=", "number": 251, "title": "Drop support for Python 2.7 and 3.5", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1537836343, "node_id": "MDU6TGFiZWwxNTM3ODM2MzQz", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/backwards%20incompatible", "name": "backwards incompatible", "color": "ff712b", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-05T03:31:26Z", "updated_at": "2019-09-15T15:07:30Z", "closed_at": "2019-09-15T15:07:30Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "* py2 EOL is nigh\r\n* marshmallow 3 no longer supports Python 2\r\n* Very few marshmallow users use Python 3.5 (even fewer than Python 2): https://marshmallow.sloria.io/#ma2-vs-ma3-pyminor", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/250", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/250/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/250/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/250", "id": 489017201, "node_id": "MDU6SXNzdWU0ODkwMTcyMDE=", "number": 250, "title": "data.relationships.obj.id value is string although it was declared as fields.Int", "user": {"login": "tadams42", "id": 664505, "node_id": "MDQ6VXNlcjY2NDUwNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/664505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tadams42", "html_url": "https://github.com/tadams42", "followers_url": "https://api.github.com/users/tadams42/followers", "following_url": "https://api.github.com/users/tadams42/following{/other_user}", "gists_url": "https://api.github.com/users/tadams42/gists{/gist_id}", "starred_url": "https://api.github.com/users/tadams42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tadams42/subscriptions", "organizations_url": "https://api.github.com/users/tadams42/orgs", "repos_url": "https://api.github.com/users/tadams42/repos", "events_url": "https://api.github.com/users/tadams42/events{/privacy}", "received_events_url": "https://api.github.com/users/tadams42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-04T08:30:48Z", "updated_at": "2019-09-05T03:28:28Z", "closed_at": "2019-09-05T03:28:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is result that I get from `schema.dump` (full working code example is at the end):\r\n\r\n```json\r\n{\r\n    \"data\": {\r\n        \"attributes\": {\"title\": \"post1\"},\r\n        \"id\": 1,\r\n        \"relationships\": {\r\n            \"author\": {\r\n                \"data\": {\"id\": \"1\", \"type\": \"users\"},\r\n                \"links\": {\"related\": \"/authors/1\"},\r\n            }\r\n        },\r\n        \"type\": \"posts\",\r\n    },\r\n    \"included\": [{\"attributes\": {\"name\": \"user\"}, \"id\": 1, \"type\": \"users\"}],\r\n}\r\n```\r\nThe problem I'm having is that `data.relationships.author.id` is string `\"1\"` although it was declared as `fields.Int`. \r\n\r\nMajor problem where this surfaces is for JS clients trying to match by `id` object from `relationships` by included data for that object in `included`.\r\n\r\nFull working code example:\r\n\r\n```python\r\nfrom marshmallow_jsonapi import Schema, fields\r\nfrom sqlalchemy import Column, ForeignKey, Integer, String, create_engine, orm\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import sessionmaker\r\n\r\nBase = declarative_base()\r\nengine = create_engine(\"sqlite:///:memory:\", echo=True)\r\nSession = sessionmaker(bind=engine)\r\nsession = Session()\r\n\r\n\r\nclass User(Base):\r\n    __tablename__ = \"users\"\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    name = Column(String)\r\n    posts = orm.relationship(\"Post\", back_populates=\"author\")\r\n\r\n\r\nclass Post(Base):\r\n    __tablename__ = \"posts\"\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    title = Column(String)\r\n    author_id = Column(ForeignKey(User.id))\r\n    author = orm.relationship(User, back_populates=\"posts\", uselist=False)\r\n\r\n\r\nBase.metadata.create_all(engine)\r\n\r\nuser = User(id=1, name=\"user\")\r\npost1 = Post(id=1, title=\"post1\", author=user)\r\nsession.add_all([user, post1])\r\nsession.commit()\r\n\r\n\r\nclass UserSchema(Schema):\r\n    class Meta:\r\n        type_ = \"users\"\r\n        strict = True\r\n\r\n    id = fields.Int(dump_only=True)\r\n    name = fields.Str()\r\n\r\n\r\nclass PostSchema(Schema):\r\n    class Meta:\r\n        type_ = \"posts\"\r\n        strict = True\r\n\r\n    id = fields.Int(dump_only=True)\r\n    title = fields.Str()\r\n    author = fields.Relationship(\r\n        \"/authors/{author_id}\",\r\n        related_url_kwargs={\"author_id\": \"<author.id>\"},\r\n        include_resource_linkage=True,\r\n        type_=\"users\",\r\n        schema=UserSchema,\r\n    )\r\n\r\n\r\ndata, errors = PostSchema(many=False, include_data=(\"author\",)).dump(post1)\r\n\r\ndata\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/244", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/244/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/244/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/244", "id": 481239813, "node_id": "MDU6SXNzdWU0ODEyMzk4MTM=", "number": 244, "title": "id required in relationship objects", "user": {"login": "sproctor", "id": 217337, "node_id": "MDQ6VXNlcjIxNzMzNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/217337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sproctor", "html_url": "https://github.com/sproctor", "followers_url": "https://api.github.com/users/sproctor/followers", "following_url": "https://api.github.com/users/sproctor/following{/other_user}", "gists_url": "https://api.github.com/users/sproctor/gists{/gist_id}", "starred_url": "https://api.github.com/users/sproctor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sproctor/subscriptions", "organizations_url": "https://api.github.com/users/sproctor/orgs", "repos_url": "https://api.github.com/users/sproctor/repos", "events_url": "https://api.github.com/users/sproctor/events{/privacy}", "received_events_url": "https://api.github.com/users/sproctor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-15T16:50:06Z", "updated_at": "2019-08-15T17:42:37Z", "closed_at": "2019-08-15T17:42:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm new to JSON:API and this library, so I apologize if I'm doing something obviously wrong. I'm trying to parse a patch request. The contents of my request looks something like:\r\n\r\n```json\r\n{\r\n    \"data\": {\r\n        \"type\": \"tickets\",\r\n        \"id\": \"5aeb9ac4-27c1-45ca-bb03-bc66bc332890\",\r\n        \"relationships\": {\r\n            \"items\": {\r\n                \"data\": [\r\n                    {\r\n                        \"type\": \"items\",\r\n                        ...\r\n                    },\r\n                    {\r\n                        \"type\": \"items\",\r\n                        ...\r\n                    },\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\nThis fails with the exception: ```marshmallow.exceptions.ValidationError: {'items': ['Must have an `id` field']}```\r\n\r\nIt seems to put the id from the parent object in the members of relationships when serializing and if I do the same, like this:\r\n```json\r\n{\r\n    \"data\": {\r\n        \"type\": \"tickets\",\r\n        \"id\": \"5aeb9ac4-27c1-45ca-bb03-bc66bc332890\",\r\n        \"relationships\": {\r\n            \"items\": {\r\n                \"id\": \"5aeb9ac4-27c1-45ca-bb03-bc66bc332890\",\r\n                \"data\": [\r\n                    {\r\n                        \"type\": \"items\",\r\n                        ...\r\n                    },\r\n                    {\r\n                        \"type\": \"items\",\r\n                        ...\r\n                    },\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\nThat solves the problem. This doesn't appear to be part of the standard as I read it. Is there a more appropriate way to do patching?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/227", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/227/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/227/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/227", "id": 446538757, "node_id": "MDU6SXNzdWU0NDY1Mzg3NTc=", "number": 227, "title": "Version 0.21.1 not published on pypi", "user": {"login": "SteffenDE", "id": 4116351, "node_id": "MDQ6VXNlcjQxMTYzNTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4116351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SteffenDE", "html_url": "https://github.com/SteffenDE", "followers_url": "https://api.github.com/users/SteffenDE/followers", "following_url": "https://api.github.com/users/SteffenDE/following{/other_user}", "gists_url": "https://api.github.com/users/SteffenDE/gists{/gist_id}", "starred_url": "https://api.github.com/users/SteffenDE/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SteffenDE/subscriptions", "organizations_url": "https://api.github.com/users/SteffenDE/orgs", "repos_url": "https://api.github.com/users/SteffenDE/repos", "events_url": "https://api.github.com/users/SteffenDE/events{/privacy}", "received_events_url": "https://api.github.com/users/SteffenDE/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-21T10:24:12Z", "updated_at": "2019-05-21T17:45:31Z", "closed_at": "2019-05-21T14:02:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Therefore, the current release does not work with marshmallow 3.0.0-rc6\r\n\r\nhttps://pypi.org/project/marshmallow-jsonapi/#history", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/189", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/189/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/189/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/189", "id": 378162067, "node_id": "MDU6SXNzdWUzNzgxNjIwNjc=", "number": 189, "title": "Dependabot couldn't fetch all your path-based dependencies", "user": {"login": "dependabot-preview[bot]", "id": 27856297, "node_id": "MDM6Qm90Mjc4NTYyOTc=", "avatar_url": "https://avatars3.githubusercontent.com/in/2141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dependabot-preview%5Bbot%5D", "html_url": "https://github.com/apps/dependabot-preview", "followers_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/followers", "following_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/repos", "events_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/dependabot-preview%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-07T06:46:34Z", "updated_at": "2018-11-08T23:01:42Z", "closed_at": "2018-11-08T23:01:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Dependabot couldn't fetch one or more of your project's path-based Python dependencies. The affected dependencies were `'.'/setup.py`.\n\nTo use path-based dependancies with Dependabot the paths must be relative and resolve to a directory in this project's source code.\n\nYou can mention @dependabot in the comments below to contact the Dependabot team.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/188", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/188/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/188/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/188/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/188", "id": 377993261, "node_id": "MDU6SXNzdWUzNzc5OTMyNjE=", "number": 188, "title": "Generate multiple relationship links per resource", "user": {"login": "darwinyip", "id": 3499338, "node_id": "MDQ6VXNlcjM0OTkzMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3499338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darwinyip", "html_url": "https://github.com/darwinyip", "followers_url": "https://api.github.com/users/darwinyip/followers", "following_url": "https://api.github.com/users/darwinyip/following{/other_user}", "gists_url": "https://api.github.com/users/darwinyip/gists{/gist_id}", "starred_url": "https://api.github.com/users/darwinyip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darwinyip/subscriptions", "organizations_url": "https://api.github.com/users/darwinyip/orgs", "repos_url": "https://api.github.com/users/darwinyip/repos", "events_url": "https://api.github.com/users/darwinyip/events{/privacy}", "received_events_url": "https://api.github.com/users/darwinyip/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 259607566, "node_id": "MDU6TGFiZWwyNTk2MDc1NjY=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-06T19:12:41Z", "updated_at": "2018-11-08T04:19:32Z", "closed_at": "2018-11-08T04:19:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to show a list `related_urls` even if no resources attached?\r\n```\r\nclass BookSchema(Schema):\r\n    id = fields.UUID()\r\n    name = fields.Str()\r\n    chapters = jsonapi.fields.Relationship(\r\n        related_url='/books/{id}/chapters',\r\n        related_url_kwargs={'id': '<id>'}\r\n    )\r\n    pages = jsonapi.fields.Relationship(\r\n        related_url='/books/{id}/pages',\r\n        related_url_kwargs={'id': '<id>'}\r\n    )\r\n    class Meta:\r\n        type_ = 'books'\r\n        strict = True\r\n\r\nbook = Book(id=UUID(\"d9576d03-6ecf-4834-9a7d-fe8fd9129f65\"), name='Book 1')\r\nBookSchema().dump(book)\r\n```\r\nNote that even though `book` does not specify any `chapters` or `pages`, I still want it to show the links specified below. \r\n\r\n```\r\n{\r\n  \"attributes\": {\r\n    \"name\": \"Book 1\"\r\n  },\r\n  \"id\": \"d9576d03-6ecf-4834-9a7d-fe8fd9129f65\",\r\n  \"links\": {\r\n    \"self\": \"/books/d9576d03-6ecf-4834-9a7d-fe8fd9129f65\"\r\n  },\r\n  \"relationships\": {\r\n    \"chapters\": {\r\n      \"links\": {\r\n        \"related\": \"/books/d9576d03-6ecf-4834-9a7d-fe8fd9129f65/chapters\"\r\n      }\r\n    },\r\n    \"pages\": {\r\n      \"links\": {\r\n        \"related\": \"/books/d9576d03-6ecf-4834-9a7d-fe8fd9129f65/pages\"\r\n      }\r\n    }\r\n  },\r\n  \"type\": \"pools\"\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/177", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/177/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/177/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/177", "id": 369504121, "node_id": "MDU6SXNzdWUzNjk1MDQxMjE=", "number": 177, "title": "Relationships are not optional even when \"required=False\"", "user": {"login": "aberres", "id": 20811121, "node_id": "MDQ6VXNlcjIwODExMTIx", "avatar_url": "https://avatars1.githubusercontent.com/u/20811121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aberres", "html_url": "https://github.com/aberres", "followers_url": "https://api.github.com/users/aberres/followers", "following_url": "https://api.github.com/users/aberres/following{/other_user}", "gists_url": "https://api.github.com/users/aberres/gists{/gist_id}", "starred_url": "https://api.github.com/users/aberres/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aberres/subscriptions", "organizations_url": "https://api.github.com/users/aberres/orgs", "repos_url": "https://api.github.com/users/aberres/repos", "events_url": "https://api.github.com/users/aberres/events{/privacy}", "received_events_url": "https://api.github.com/users/aberres/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 259607561, "node_id": "MDU6TGFiZWwyNTk2MDc1NjE=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-12T11:03:32Z", "updated_at": "2018-12-16T13:00:34Z", "closed_at": "2018-12-16T13:00:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems as if relationships must be always passed even when not marked as required.\r\n\r\nWhen introducing a new optional relationship into an API this behavior makes things a bit inconvenient.\r\n\r\n```python\r\n\r\nclass ASchema(marshmallow_jsonapi.Schema):\r\n    id = fields.Int(dump_only=True)\r\n\r\n    a_rel = fields.Relationship(type_=\"rel\", required=False, allow_none=True)\r\n\r\n    class Meta:\r\n        type_ = \"a_schema\"\r\n\r\n\r\ns = ASchema()\r\n\r\n# works\r\ns.load({\"data\": {\"type\": \"a_schema\", \"relationships\": {\"a_rel\": {\"data\": None}}}})\r\n\r\n#fails with \"ValidationError: {'a_rel': ['Must include a `data` key']}\"\r\ns.load({\"data\": {\"type\": \"a_schema\"}})", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/175", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/175/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/175/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/175", "id": 368830334, "node_id": "MDU6SXNzdWUzNjg4MzAzMzQ=", "number": 175, "title": "Version 0.20.4 is not published on pypi", "user": {"login": "kumy", "id": 176794, "node_id": "MDQ6VXNlcjE3Njc5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/176794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kumy", "html_url": "https://github.com/kumy", "followers_url": "https://api.github.com/users/kumy/followers", "following_url": "https://api.github.com/users/kumy/following{/other_user}", "gists_url": "https://api.github.com/users/kumy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kumy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kumy/subscriptions", "organizations_url": "https://api.github.com/users/kumy/orgs", "repos_url": "https://api.github.com/users/kumy/repos", "events_url": "https://api.github.com/users/kumy/events{/privacy}", "received_events_url": "https://api.github.com/users/kumy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-10T20:04:35Z", "updated_at": "2018-10-12T00:15:17Z", "closed_at": "2018-10-12T00:15:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I can't find version 0.20.4 on pypi https://pypi.org/project/marshmallow-jsonapi/\r\n\r\nAnd pip install say\r\n`No matching distribution found for marshmallow-jsonapi==0.20.4 (from -r requirements/common.txt (line 3))`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/171", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/171/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/171/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/171", "id": 366494357, "node_id": "MDU6SXNzdWUzNjY0OTQzNTc=", "number": 171, "title": "Self links are incorrectly encoding URL scheme", "user": {"login": "kgutwin", "id": 6315798, "node_id": "MDQ6VXNlcjYzMTU3OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6315798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kgutwin", "html_url": "https://github.com/kgutwin", "followers_url": "https://api.github.com/users/kgutwin/followers", "following_url": "https://api.github.com/users/kgutwin/following{/other_user}", "gists_url": "https://api.github.com/users/kgutwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/kgutwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kgutwin/subscriptions", "organizations_url": "https://api.github.com/users/kgutwin/orgs", "repos_url": "https://api.github.com/users/kgutwin/repos", "events_url": "https://api.github.com/users/kgutwin/events{/privacy}", "received_events_url": "https://api.github.com/users/kgutwin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-10-03T19:35:33Z", "updated_at": "2018-12-16T13:14:49Z", "closed_at": "2018-12-16T13:14:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recently-merged PR #147 introduced quoting for URLs such as self_url. My codebase includes fully-qualified URLs such as `https://example.com`. Unfortunately, these are now being incorrectly quoted to `https%3A//example.com`. \r\n\r\n```\r\n>>> from marshmallow_jsonapi import Schema, fields\r\n>>> class TestSchema(Schema):\r\n...     id = fields.Str()\r\n...     class Meta:\r\n...         type_ = 'post'\r\n...         self_url = 'https://example.com/posts'\r\n... \r\n>>> class TestObject:\r\n...     def __init__(self):\r\n...         self.id = 4\r\n... \r\n>>> result = TestSchema().dump(TestObject())\r\n>>> result.data['links']['self']\r\n'https%3A//example.com/posts'\r\n```\r\n\r\nWould it be possible to apply the URL encoding only to the path and query portions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/149", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/149/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/149/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/149", "id": 348934698, "node_id": "MDU6SXNzdWUzNDg5MzQ2OTg=", "number": 149, "title": "Fix compatibility with marshmallow 3.0.0b13", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 259607564, "node_id": "MDU6TGFiZWwyNTk2MDc1NjQ=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-09T00:12:19Z", "updated_at": "2018-08-15T11:12:01Z", "closed_at": "2018-08-15T11:12:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Tests are currently failing when marshmallow 3.0.0b13 is installed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/148", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/148/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/148/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/148", "id": 348883909, "node_id": "MDU6SXNzdWUzNDg4ODM5MDk=", "number": 148, "title": "Passing something that isn't a dict (like None) into load causes an unhandled exception", "user": {"login": "grantHarris", "id": 1750776, "node_id": "MDQ6VXNlcjE3NTA3NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1750776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grantHarris", "html_url": "https://github.com/grantHarris", "followers_url": "https://api.github.com/users/grantHarris/followers", "following_url": "https://api.github.com/users/grantHarris/following{/other_user}", "gists_url": "https://api.github.com/users/grantHarris/gists{/gist_id}", "starred_url": "https://api.github.com/users/grantHarris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grantHarris/subscriptions", "organizations_url": "https://api.github.com/users/grantHarris/orgs", "repos_url": "https://api.github.com/users/grantHarris/repos", "events_url": "https://api.github.com/users/grantHarris/events{/privacy}", "received_events_url": "https://api.github.com/users/grantHarris/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-08T20:41:05Z", "updated_at": "2018-08-09T21:17:44Z", "closed_at": "2018-08-09T21:17:44Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Passing something that isn't a dict into load or validate causes an unhandled AttributeError.\r\n\r\n`AttributeError: 'NoneType' object has no attribute 'get'`\r\n\r\nThe library should handle this and raise a proper validation error instead.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/130", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/130/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/130/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/130", "id": 334239452, "node_id": "MDU6SXNzdWUzMzQyMzk0NTI=", "number": 130, "title": "Relationship fail to deserialize missing value", "user": {"login": "kumy", "id": 176794, "node_id": "MDQ6VXNlcjE3Njc5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/176794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kumy", "html_url": "https://github.com/kumy", "followers_url": "https://api.github.com/users/kumy/followers", "following_url": "https://api.github.com/users/kumy/following{/other_user}", "gists_url": "https://api.github.com/users/kumy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kumy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kumy/subscriptions", "organizations_url": "https://api.github.com/users/kumy/orgs", "repos_url": "https://api.github.com/users/kumy/repos", "events_url": "https://api.github.com/users/kumy/events{/privacy}", "received_events_url": "https://api.github.com/users/kumy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-20T20:35:23Z", "updated_at": "2018-07-15T21:55:42Z", "closed_at": "2018-07-15T21:55:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While upgrading our dependency from 0.16.0 to 0.20.0, we got a new stack trace\r\n\r\n```\r\n[\u2026]\r\n  File \"/home/kumy/GIT/geokrety-api/venv/local/lib/python2.7/site-packages/marshmallow/schema.py\", line 660, in _do_load\r\n    index_errors=self.opts.index_errors,\r\n  File \"/home/kumy/GIT/geokrety-api/venv/local/lib/python2.7/site-packages/marshmallow/marshalling.py\", line 295, in deserialize\r\n    index=(index if index_errors else None)\r\n  File \"/home/kumy/GIT/geokrety-api/venv/local/lib/python2.7/site-packages/marshmallow/marshalling.py\", line 68, in call_and_store\r\n    value = getter_func(data)\r\n  File \"/home/kumy/GIT/geokrety-api/venv/local/lib/python2.7/site-packages/marshmallow/marshalling.py\", line 288, in <lambda>\r\n    data\r\n  File \"/home/kumy/GIT/geokrety-api/venv/local/lib/python2.7/site-packages/marshmallow_jsonapi/fields.py\", line 208, in deserialize\r\n    if 'links' in value:\r\nTypeError: argument of type '_Missing' is not iterable\r\n\r\n```\r\n\r\nPosted data are:\r\n```\r\n{'data': {'relationships': {}, 'attributes': {'comment': 'My news comment'}, 'type': 'news-comment'}}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/127", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/127/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/127/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/127", "id": 331639768, "node_id": "MDU6SXNzdWUzMzE2Mzk3Njg=", "number": 127, "title": "Multi-level relationhips objects deserialized as their IDs (instead of the complete data)", "user": {"login": "ww3pl", "id": 13837022, "node_id": "MDQ6VXNlcjEzODM3MDIy", "avatar_url": "https://avatars1.githubusercontent.com/u/13837022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ww3pl", "html_url": "https://github.com/ww3pl", "followers_url": "https://api.github.com/users/ww3pl/followers", "following_url": "https://api.github.com/users/ww3pl/following{/other_user}", "gists_url": "https://api.github.com/users/ww3pl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ww3pl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ww3pl/subscriptions", "organizations_url": "https://api.github.com/users/ww3pl/orgs", "repos_url": "https://api.github.com/users/ww3pl/repos", "events_url": "https://api.github.com/users/ww3pl/events{/privacy}", "received_events_url": "https://api.github.com/users/ww3pl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-12T15:28:39Z", "updated_at": "2018-11-19T22:41:43Z", "closed_at": "2018-11-19T22:41:43Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Hi folks, I hope you're doing well.\r\n\r\nI come here with a problem regarding multi-level nested relationships. Consider the following code:\r\n\r\n```\r\nfrom marshmallow_jsonapi import Schema, fields\r\n\r\n\r\nclass Country(Schema):\r\n    id = fields.String()\r\n    name = fields.String()\r\n\r\n    class Meta:\r\n        type_ = 'country'\r\n\r\n\r\nclass Author(Schema):\r\n    id = fields.String()\r\n    first_name = fields.String()\r\n    last_name = fields.String()\r\n    country = fields.Relationship(schema=Country, type_='country')\r\n\r\n    class Meta:\r\n        type_ = 'author'\r\n\r\n\r\nclass Book(Schema):\r\n    id = fields.String()\r\n    title = fields.String()\r\n    authors = fields.Relationship(schema=Author, many=True, type_='author')\r\n\r\n    class Meta:\r\n        type_ = 'book'\r\n\r\n\r\nbook_data = {\r\n    'id': 'book-1',\r\n    'title': 'Fifty Shades of Marshmallow',\r\n    'authors': [\r\n        {\r\n            'id': '1',\r\n            'first_name': 'Dorian',\r\n            'last_name': 'Grey',\r\n            'country': {\r\n                'id': '1',\r\n                'name': 'England'\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\n\r\ndumped_book_data = Book(include_data=('authors', 'authors.country')).dump(book_data)\r\nprint(dumped_book_data.data)\r\n\r\n```\r\n\r\nWhen you run the above code, you'll receive the following (**and, I think, a very correct one**!) result:\r\n\r\n```\r\n{\r\n  'data': {\r\n    'type': 'book',\r\n    'attributes': {\r\n      'title': 'Fifty Shades of Marshmallow'\r\n    },\r\n    'relationships': {\r\n      'authors': {\r\n        'data': [\r\n          {\r\n            'type': 'author',\r\n            'id': '1'\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    'id': 'book-1'\r\n  },\r\n  'included': [\r\n    {\r\n      'type': 'author',\r\n      'relationships': {\r\n        'country': {\r\n          'data': {\r\n            'type': 'country',\r\n            'id': '1'\r\n          }\r\n        }\r\n      },\r\n      'attributes': {\r\n        'first_name': 'Dorian',\r\n        'last_name': 'Grey'\r\n      },\r\n      'id': '1'\r\n    },\r\n    {\r\n      'type': 'country',\r\n      'attributes': {\r\n        'name': 'England'\r\n      },\r\n      'id': '1'\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThis shows that Marshmallow-Jsonapi has no problems when serializing multiple-level relationships. \r\n\r\nHowever, **loading the dumped object** seems to lose some of the data on its way.\r\n\r\n\r\n```\r\nloaded_book_data1 = Book(include_data=('authors', 'authors.country')).load(dumped_book_data.data)\r\nprint(loaded_book_data1.data)\r\n\r\nloaded_book_data2 = Book().load(dumped_book_data.data)\r\nprint(loaded_book_data2.data)\r\n```\r\n\r\nBoth of these print statements will return the following object, where the author's country is represented as its ID (instead of having the whole object nested in the author):\r\n```\r\n{\r\n  'title': 'Fifty Shades of Marshmallow',\r\n  'authors': [\r\n    {\r\n      'country': '1',\r\n      'first_name': 'Dorian',\r\n      'id': '1',\r\n      'last_name': 'Grey'\r\n    }\r\n  ],\r\n  'id': 'book-1'\r\n}\r\n\r\n```\r\n\r\n# A possible solution\r\nI found a quick fix (although I'm not sure if it's clean enough), changing just a single line of code.\r\n\r\n- marshmalow_jsonapi/fields.py, line 192, where I add an 'included' key to the passed data.\r\n```\r\n        if 'attributes' in data and self.__schema:\r\n            result = self.schema.load({'data': data, 'included': self.root.included_data})\r\n            return result.data if _MARSHMALLOW_VERSION_INFO[0] < 3 else result\r\n```\r\nThanks to this, included_data is following the relationships route, no matter how many levels we have. \r\n\r\nThis solution does not break the currently implemented tests, keeping them all green. \r\n\r\nVersions used:\r\nmarshmallow==2.15.3\r\nmarshmallow-jsonapi==0.20.0\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/120", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/120/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/120/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/120", "id": 327790225, "node_id": "MDU6SXNzdWUzMjc3OTAyMjU=", "number": 120, "title": "Validation errors for nested fields are not formatted properly", "user": {"login": "arnold-iakab", "id": 9372866, "node_id": "MDQ6VXNlcjkzNzI4NjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/9372866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arnold-iakab", "html_url": "https://github.com/arnold-iakab", "followers_url": "https://api.github.com/users/arnold-iakab/followers", "following_url": "https://api.github.com/users/arnold-iakab/following{/other_user}", "gists_url": "https://api.github.com/users/arnold-iakab/gists{/gist_id}", "starred_url": "https://api.github.com/users/arnold-iakab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arnold-iakab/subscriptions", "organizations_url": "https://api.github.com/users/arnold-iakab/orgs", "repos_url": "https://api.github.com/users/arnold-iakab/repos", "events_url": "https://api.github.com/users/arnold-iakab/events{/privacy}", "received_events_url": "https://api.github.com/users/arnold-iakab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-30T15:44:46Z", "updated_at": "2020-03-22T14:23:40Z", "closed_at": "2020-03-22T14:23:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfrom marshmallow import validate, Schema as BasicSchema\r\nfrom marshmallow_jsonapi import Schema, fields\r\n\r\n\r\nclass SecondNestedSchema(BasicSchema):\r\n    second = fields.String(validate=validate.OneOf(['test']))\r\n\r\n\r\nclass FirstNestedSchema(BasicSchema):\r\n    first = fields.String(validate=validate.OneOf(['test']))\r\n    second_nest = fields.Nested(SecondNestedSchema, many=True)\r\n\r\n\r\nclass SimpleSchema(Schema):\r\n    id = fields.UUID(dump_only=True)\r\n    simple = fields.String(validate=validate.OneOf(['test']))\r\n    first_nest = fields.Nested(FirstNestedSchema, many=True)\r\n\r\n    class Meta:\r\n        type_ = 'simples'\r\n\r\n###########################################################\r\n\r\nschema = SimpleSchema()\r\ndata = {\r\n    'data': {\r\n        'type': 'simples',\r\n        'attributes': {\r\n            'simple': 'tes',\r\n            'first_nest': [\r\n                {\r\n                    'first': 'tes',\r\n                    'second_nest': [\r\n                        {\r\n                            'second': 'tes'\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\ntry:\r\n    data = schema.load(data)\r\n    print(data)\r\nexcept ValidationError as err:\r\n    print(err.messages)\r\n\r\n```\r\nThis will be printed:\r\n```\r\n{\r\n  'errors': [\r\n    {\r\n      'detail': 0,\r\n      'source': {\r\n        'pointer': '/data/attributes/first_nest'\r\n      }\r\n    },\r\n    {\r\n      'detail': 'Not a valid choice.',\r\n      'source': {\r\n        'pointer': '/data/attributes/simple'\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\nThis is what I wished for:\r\n```\r\n{\r\n  'errors': [\r\n    {\r\n      'detail': 'Not a valid choice.',\r\n      'source': {\r\n        'pointer': '/data/attributes/first_nest/first'\r\n      }\r\n    },\r\n    {\r\n      'detail': 'Not a valid choice.',\r\n      'source': {\r\n        'pointer': '/data/attributes/first_nest/second_nest/second'\r\n      }\r\n    },\r\n    {\r\n      'detail': 'Not a valid choice.',\r\n      'source': {\r\n        'pointer': '/data/attributes/simple'\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\nIs there a possibility for the desired output to happen?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/107", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/107/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/107/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/107", "id": 319593736, "node_id": "MDU6SXNzdWUzMTk1OTM3MzY=", "number": 107, "title": "Document vs Root Meta Information", "user": {"login": "rgant", "id": 710553, "node_id": "MDQ6VXNlcjcxMDU1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/710553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rgant", "html_url": "https://github.com/rgant", "followers_url": "https://api.github.com/users/rgant/followers", "following_url": "https://api.github.com/users/rgant/following{/other_user}", "gists_url": "https://api.github.com/users/rgant/gists{/gist_id}", "starred_url": "https://api.github.com/users/rgant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rgant/subscriptions", "organizations_url": "https://api.github.com/users/rgant/orgs", "repos_url": "https://api.github.com/users/rgant/repos", "events_url": "https://api.github.com/users/rgant/events{/privacy}", "received_events_url": "https://api.github.com/users/rgant/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 259607566, "node_id": "MDU6TGFiZWwyNTk2MDc1NjY=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "scottwernervt", "id": 1048949, "node_id": "MDQ6VXNlcjEwNDg5NDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1048949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottwernervt", "html_url": "https://github.com/scottwernervt", "followers_url": "https://api.github.com/users/scottwernervt/followers", "following_url": "https://api.github.com/users/scottwernervt/following{/other_user}", "gists_url": "https://api.github.com/users/scottwernervt/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottwernervt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottwernervt/subscriptions", "organizations_url": "https://api.github.com/users/scottwernervt/orgs", "repos_url": "https://api.github.com/users/scottwernervt/repos", "events_url": "https://api.github.com/users/scottwernervt/events{/privacy}", "received_events_url": "https://api.github.com/users/scottwernervt/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "scottwernervt", "id": 1048949, "node_id": "MDQ6VXNlcjEwNDg5NDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1048949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottwernervt", "html_url": "https://github.com/scottwernervt", "followers_url": "https://api.github.com/users/scottwernervt/followers", "following_url": "https://api.github.com/users/scottwernervt/following{/other_user}", "gists_url": "https://api.github.com/users/scottwernervt/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottwernervt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottwernervt/subscriptions", "organizations_url": "https://api.github.com/users/scottwernervt/orgs", "repos_url": "https://api.github.com/users/scottwernervt/repos", "events_url": "https://api.github.com/users/scottwernervt/events{/privacy}", "received_events_url": "https://api.github.com/users/scottwernervt/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-05-02T15:08:54Z", "updated_at": "2018-05-17T02:49:25Z", "closed_at": "2018-05-17T02:49:25Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "In my project I was making use of the Meta field type to include resource object level meta information about the object. This was especially important when the primary data was a list of resource objects.\r\n\r\n```\"python\"\r\n{'data': [{'attributes': {'name': 'Impossible Stand'},\r\n          'id': '21',\r\n          'links': {'self': '/persons/21'},\r\n          'meta': {'modified_at': '2017-08-14T17:50:19+00:00'},\r\n          'relationships': {'children': {'links': {'related': '/persons/21/children',\r\n                                                   'self': '/persons/21/relationships/children'}},\r\n                            'parent': {'links': {'related': '/persons/21/parent',\r\n                                                 'self': '/persons/21/relationships/parent'}}},\r\n          'type': 'persons'},\r\n         {'attributes': {'name': 'Carry Cool'},\r\n          'id': '22',\r\n          'links': {'self': '/persons/22'},\r\n          'meta': {'modified_at': '2017-08-14T17:50:19+00:00'},\r\n          'relationships': {'children': {'links': {'related': '/persons/22/children',\r\n                                                   'self': '/persons/22/relationships/children'}},\r\n                            'parent': {'links': {'related': '/persons/22/parent',\r\n                                                 'self': '/persons/22/relationships/parent'}}},\r\n          'type': 'persons'}],\r\n'links': {'self': '/persons/20/children'}}\r\n```\r\n\r\n#95 broke my build and makes it impossible to include specific meta data about a resource object in the serialized data. I understand that there is a need for both types of meta information, but I am not sure how to go about addressing both needs in a way that is applicable to all use cases.\r\n\r\nAny advice about how to proceed would be welcome.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/101", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/101/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/101/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/101", "id": 318233099, "node_id": "MDU6SXNzdWUzMTgyMzMwOTk=", "number": 101, "title": "fix \"only\" with Relationship fields using marshmallow 2.15.1", "user": {"login": "mdodsworth", "id": 343158, "node_id": "MDQ6VXNlcjM0MzE1OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/343158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdodsworth", "html_url": "https://github.com/mdodsworth", "followers_url": "https://api.github.com/users/mdodsworth/followers", "following_url": "https://api.github.com/users/mdodsworth/following{/other_user}", "gists_url": "https://api.github.com/users/mdodsworth/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdodsworth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdodsworth/subscriptions", "organizations_url": "https://api.github.com/users/mdodsworth/orgs", "repos_url": "https://api.github.com/users/mdodsworth/repos", "events_url": "https://api.github.com/users/mdodsworth/events{/privacy}", "received_events_url": "https://api.github.com/users/mdodsworth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-26T23:45:58Z", "updated_at": "2018-04-29T12:27:54Z", "closed_at": "2018-04-29T12:27:54Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "This change made in Marshmallow 2.15.1 changes behaviour when the caller is passing through `only=()`:\r\n\r\nhttps://github.com/marshmallow-code/marshmallow/commit/98f2b4759c9a7c7ac5e790727d47f2b328520713#diff-035365c88325ed9779fcb020f7bcb35a\r\n\r\nPreviously, `only=()` essentially meant no filtering is applied; after the change, `only=()` results in *all* fields being filtered.\r\n\r\nHere, we're defaulting the value of `only` to be `()`, which then results in all fields being filtered (incl. `id`). https://github.com/marshmallow-code/marshmallow-jsonapi/blob/dev/marshmallow_jsonapi/fields.py#L104\r\n\r\n\r\nThis causes a bunch of tests to fail with issues similar to this:\r\n\r\n```\r\nself = <CommentSchema(many=False, strict=False)>, args = (), kwargs = {'exclude': (), 'only': ()}\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        self.include_data = kwargs.pop('include_data', ())\r\n        super(Schema, self).__init__(*args, **kwargs)\r\n        if self.include_data:\r\n            self.check_relations(self.include_data)\r\n\r\n        if not self.opts.type_:\r\n            raise ValueError('Must specify type_ class Meta option')\r\n\r\n        if 'id' not in self.fields:\r\n>           raise ValueError('Must have an `id` field')\r\nE           ValueError: Must have an `id` field\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/99", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/99/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/99/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/99", "id": 307536979, "node_id": "MDU6SXNzdWUzMDc1MzY5Nzk=", "number": 99, "title": "How to optimize deep includes", "user": {"login": "FelixEnescu", "id": 2485129, "node_id": "MDQ6VXNlcjI0ODUxMjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2485129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixEnescu", "html_url": "https://github.com/FelixEnescu", "followers_url": "https://api.github.com/users/FelixEnescu/followers", "following_url": "https://api.github.com/users/FelixEnescu/following{/other_user}", "gists_url": "https://api.github.com/users/FelixEnescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixEnescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixEnescu/subscriptions", "organizations_url": "https://api.github.com/users/FelixEnescu/orgs", "repos_url": "https://api.github.com/users/FelixEnescu/repos", "events_url": "https://api.github.com/users/FelixEnescu/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixEnescu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 259607566, "node_id": "MDU6TGFiZWwyNTk2MDc1NjY=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-22T07:47:29Z", "updated_at": "2018-05-17T22:36:57Z", "closed_at": "2018-05-17T22:36:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nHi\r\n\r\nWe are using marshmallow-jsonapi with SQLAlchemy and we have few cases where we need to retrieve a groups of objects involving some deep includes. One such example is \r\n\r\nGET /v3/portfolios/672/investments?fields[accounts]=name&fields[files]=url&fields[indicators]=name&fields[investment_invitations]=organization&fields[reports]=name,stage,status&fields[results]=forecast_current&filter[allocations.results.indicator.relevant]=true&include=allocations.report,allocations.report.results,allocations.report.results.indicator,allocations.report.logo_file,invitation,grantee\r\n\r\nThe issues is that such calls takes ages.\r\n\r\nI looked into `marshmallow-jsonapi` and understand how include data is gathered and how that can generate lot's of queries. \r\n\r\nI looked for ways to optimize that but did not see any obvious way to modify `fields.py`.\r\n\r\nAny suggestion will be highly welcome.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/97", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/97/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/97/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/97", "id": 300794573, "node_id": "MDU6SXNzdWUzMDA3OTQ1NzM=", "number": 97, "title": "Breaking change to load() in marshmallow 3.0.0b7", "user": {"login": "rockmnew", "id": 34722322, "node_id": "MDQ6VXNlcjM0NzIyMzIy", "avatar_url": "https://avatars2.githubusercontent.com/u/34722322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rockmnew", "html_url": "https://github.com/rockmnew", "followers_url": "https://api.github.com/users/rockmnew/followers", "following_url": "https://api.github.com/users/rockmnew/following{/other_user}", "gists_url": "https://api.github.com/users/rockmnew/gists{/gist_id}", "starred_url": "https://api.github.com/users/rockmnew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rockmnew/subscriptions", "organizations_url": "https://api.github.com/users/rockmnew/orgs", "repos_url": "https://api.github.com/users/rockmnew/repos", "events_url": "https://api.github.com/users/rockmnew/events{/privacy}", "received_events_url": "https://api.github.com/users/rockmnew/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-27T21:12:43Z", "updated_at": "2018-04-29T13:17:29Z", "closed_at": "2018-04-29T13:17:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "http://marshmallow.readthedocs.io/en/latest/upgrading.html#schemas-are-always-strict\r\n\r\n\"Schema().load and Schema().dump don\u2019t return a (data, errors) duple any more. Only data is returned.\"\r\n\r\nThis results in a traceback similar to the following:\r\n\r\n```\r\n.../marshmallow/schema.py:542: in validate\r\n    self._do_load(data, many, partial=partial, postprocess=False)\r\n.../marshmallow_jsonapi/schema.py:219: in _do_load\r\n    result, errors = super(Schema, self)._do_load(data, many, **kwargs)\r\nE   ValueError: too many values to unpack (expected 2)\r\n```\r\n\r\nI did attempt to modify `_do_load()` to only use `errors`, not `result`, but then I got another traceback when it tried to validate a boolean field:\r\n\r\n```\r\n.../marshmallow/schema.py:498: in load\r\n    return self._do_load(data, many, partial=partial, postprocess=True)\r\n.../marshmallow_jsonapi/schema.py:231: in _do_load\r\n    formatted_messages = self.format_errors(error_messages, many=many)\r\n.../marshmallow_jsonapi/schema.py:272: in format_errors\r\n    for message in field_errors\r\nE   TypeError: 'bool' object is not iterable\r\n```\r\n\r\nSince I didn't have the TypeError before upgrading marshmallow, there's obviously a little more going on than I know about, having just looked at the code for the first time.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/96", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/96/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/96/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/96", "id": 273128578, "node_id": "MDU6SXNzdWUyNzMxMjg1Nzg=", "number": 96, "title": "Pagination links?", "user": {"login": "CaptObvious", "id": 1114144, "node_id": "MDQ6VXNlcjExMTQxNDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1114144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CaptObvious", "html_url": "https://github.com/CaptObvious", "followers_url": "https://api.github.com/users/CaptObvious/followers", "following_url": "https://api.github.com/users/CaptObvious/following{/other_user}", "gists_url": "https://api.github.com/users/CaptObvious/gists{/gist_id}", "starred_url": "https://api.github.com/users/CaptObvious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CaptObvious/subscriptions", "organizations_url": "https://api.github.com/users/CaptObvious/orgs", "repos_url": "https://api.github.com/users/CaptObvious/repos", "events_url": "https://api.github.com/users/CaptObvious/events{/privacy}", "received_events_url": "https://api.github.com/users/CaptObvious/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-11T08:09:35Z", "updated_at": "2018-05-27T20:47:48Z", "closed_at": "2018-05-27T20:47:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see that the [JSONAPI Spec](http://jsonapi.org/format/#fetching-pagination) mentions pagination and that the URLs for first, last, next and prev must appear in the links object but I can't see any way to do that at serialization time with marshmallow-jsonapi.  Is this possible at the moment?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/95", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/95/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/95/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/95", "id": 268955040, "node_id": "MDU6SXNzdWUyNjg5NTUwNDA=", "number": 95, "title": "Serializing a collection of objects with top level meta object", "user": {"login": "aschatten", "id": 2970024, "node_id": "MDQ6VXNlcjI5NzAwMjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2970024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aschatten", "html_url": "https://github.com/aschatten", "followers_url": "https://api.github.com/users/aschatten/followers", "following_url": "https://api.github.com/users/aschatten/following{/other_user}", "gists_url": "https://api.github.com/users/aschatten/gists{/gist_id}", "starred_url": "https://api.github.com/users/aschatten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aschatten/subscriptions", "organizations_url": "https://api.github.com/users/aschatten/orgs", "repos_url": "https://api.github.com/users/aschatten/repos", "events_url": "https://api.github.com/users/aschatten/events{/privacy}", "received_events_url": "https://api.github.com/users/aschatten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-10-27T00:45:49Z", "updated_at": "2018-05-02T20:23:54Z", "closed_at": "2018-03-09T22:08:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "JSON API allows adding a top level meta object: http://jsonapi.org/format/#document-meta\r\n```json\r\n{\r\n  \"meta\": {\r\n    \"copyright\": \"Copyright 2015 Example Corp.\",\r\n    \"authors\": [\r\n      \"Yehuda Katz\",\r\n      \"Steve Klabnik\",\r\n      \"Dan Gebhardt\",\r\n      \"Tyler Kellen\"\r\n    ]\r\n  },\r\n  \"data\": {\r\n    // ...\r\n  }\r\n}\r\n```\r\nIs there a way to do it in `marshmallow-jsonapi`? It seems like it's only allows to have a `meta` in Resource Objects. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/89", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/89/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/89/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/89", "id": 247167199, "node_id": "MDU6SXNzdWUyNDcxNjcxOTk=", "number": 89, "title": "Doesn't seem to support using vanilla fields.Nested", "user": {"login": "robneville73", "id": 115929, "node_id": "MDQ6VXNlcjExNTkyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/115929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robneville73", "html_url": "https://github.com/robneville73", "followers_url": "https://api.github.com/users/robneville73/followers", "following_url": "https://api.github.com/users/robneville73/following{/other_user}", "gists_url": "https://api.github.com/users/robneville73/gists{/gist_id}", "starred_url": "https://api.github.com/users/robneville73/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robneville73/subscriptions", "organizations_url": "https://api.github.com/users/robneville73/orgs", "repos_url": "https://api.github.com/users/robneville73/repos", "events_url": "https://api.github.com/users/robneville73/events{/privacy}", "received_events_url": "https://api.github.com/users/robneville73/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-01T18:55:21Z", "updated_at": "2018-05-17T22:39:25Z", "closed_at": "2018-05-17T22:39:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to the JSON-API spec, \r\n\"Attributes may contain any valid JSON value.\r\n\r\nComplex data structures involving JSON objects and arrays are allowed as attribute values\"\r\n\r\nSo I should be able to do:\r\n```json\r\n{\r\n    \"data\": {\r\n        \"type\": \"customers\",\r\n        \"id\": \"bae39533-b9c5-4819-b69a-9d2674c83c6e\",\r\n        \"attributes\": {\r\n            \"phone\": \"XXX-YYY-ZZZZ\",\r\n            \"firstname\": \"Me\",\r\n            \"email\": \"me@you.com\",\r\n            \"lastname\": \"You\",\r\n            \"address\": {\r\n                 \"street\": \"Somewhere St.\",\r\n                 \"city\": \"New York\",\r\n             }\r\n        },\r\n        \"links\": {\r\n            \"self\": \"/customers/bae39533-b9c5-4819-b69a-9d2674c83c6e\"\r\n        }\r\n    },\r\n    \"links\": {\r\n        \"self\": \"/customers/bae39533-b9c5-4819-b69a-9d2674c83c6e\"\r\n    }\r\n}\r\n```\r\n\r\nmarshmallow supports this concept fine via Nested fields however marshmallow_jsonapi appears to ignore Nested fields when serializing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/87", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/87/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/87/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/87", "id": 242471381, "node_id": "MDU6SXNzdWUyNDI0NzEzODE=", "number": 87, "title": "How to apply a database filter to an included relationship?", "user": {"login": "michaelgodshall", "id": 55355, "node_id": "MDQ6VXNlcjU1MzU1", "avatar_url": "https://avatars3.githubusercontent.com/u/55355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelgodshall", "html_url": "https://github.com/michaelgodshall", "followers_url": "https://api.github.com/users/michaelgodshall/followers", "following_url": "https://api.github.com/users/michaelgodshall/following{/other_user}", "gists_url": "https://api.github.com/users/michaelgodshall/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelgodshall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelgodshall/subscriptions", "organizations_url": "https://api.github.com/users/michaelgodshall/orgs", "repos_url": "https://api.github.com/users/michaelgodshall/repos", "events_url": "https://api.github.com/users/michaelgodshall/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelgodshall/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 259607566, "node_id": "MDU6TGFiZWwyNTk2MDc1NjY=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-12T18:22:10Z", "updated_at": "2018-05-31T15:38:05Z", "closed_at": "2018-05-31T15:38:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "My include api request looks like this: `http://127.0.0.1:5000/api/products?include=favorites`\r\n\r\nIt's working correctly and includes favorites for products in the payload.  However, I'd like to only include favorites for products that the current user has favorited.  Where is the right place to set this up?  I've looked through the source code quite a bit and can't seem to find the right way to filter the database query for the included `favorites` relationship (using SqlAlchemy).  Any recommendations on how to approach this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/86", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/86/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/86/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/86", "id": 242392019, "node_id": "MDU6SXNzdWUyNDIzOTIwMTk=", "number": 86, "title": "Docs: Define `article` in quickstart examples", "user": {"login": "thorbjornwolf", "id": 3935060, "node_id": "MDQ6VXNlcjM5MzUwNjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3935060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thorbjornwolf", "html_url": "https://github.com/thorbjornwolf", "followers_url": "https://api.github.com/users/thorbjornwolf/followers", "following_url": "https://api.github.com/users/thorbjornwolf/following{/other_user}", "gists_url": "https://api.github.com/users/thorbjornwolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/thorbjornwolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thorbjornwolf/subscriptions", "organizations_url": "https://api.github.com/users/thorbjornwolf/orgs", "repos_url": "https://api.github.com/users/thorbjornwolf/repos", "events_url": "https://api.github.com/users/thorbjornwolf/events{/privacy}", "received_events_url": "https://api.github.com/users/thorbjornwolf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 946417383, "node_id": "MDU6TGFiZWw5NDY0MTczODM=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/docs", "name": "docs", "color": "c2e0c6", "default": false, "description": ""}, {"id": 259607564, "node_id": "MDU6TGFiZWwyNTk2MDc1NjQ=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "scottwernervt", "id": 1048949, "node_id": "MDQ6VXNlcjEwNDg5NDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1048949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottwernervt", "html_url": "https://github.com/scottwernervt", "followers_url": "https://api.github.com/users/scottwernervt/followers", "following_url": "https://api.github.com/users/scottwernervt/following{/other_user}", "gists_url": "https://api.github.com/users/scottwernervt/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottwernervt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottwernervt/subscriptions", "organizations_url": "https://api.github.com/users/scottwernervt/orgs", "repos_url": "https://api.github.com/users/scottwernervt/repos", "events_url": "https://api.github.com/users/scottwernervt/events{/privacy}", "received_events_url": "https://api.github.com/users/scottwernervt/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "scottwernervt", "id": 1048949, "node_id": "MDQ6VXNlcjEwNDg5NDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1048949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottwernervt", "html_url": "https://github.com/scottwernervt", "followers_url": "https://api.github.com/users/scottwernervt/followers", "following_url": "https://api.github.com/users/scottwernervt/following{/other_user}", "gists_url": "https://api.github.com/users/scottwernervt/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottwernervt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottwernervt/subscriptions", "organizations_url": "https://api.github.com/users/scottwernervt/orgs", "repos_url": "https://api.github.com/users/scottwernervt/repos", "events_url": "https://api.github.com/users/scottwernervt/events{/privacy}", "received_events_url": "https://api.github.com/users/scottwernervt/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-07-12T14:05:00Z", "updated_at": "2018-06-10T14:29:03Z", "closed_at": "2018-06-10T14:29:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "The quickstart section of the docs ([readthedocs](http://marshmallow-jsonapi.readthedocs.io/en/latest/quickstart.html#serialization) and [in the repo](https://github.com/marshmallow-code/marshmallow-jsonapi/blob/dev/docs/quickstart.rst#serialization)) show some neat examples using an undefined object named `article`. \r\n\r\nFor clarity (and so I'm sure I understand what is going on), it would be nice to have a definition of `article`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/83", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/83/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/83/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/83", "id": 228753542, "node_id": "MDU6SXNzdWUyMjg3NTM1NDI=", "number": 83, "title": "How to deserialize included_data", "user": {"login": "anuragagarwal561994", "id": 6075379, "node_id": "MDQ6VXNlcjYwNzUzNzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6075379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anuragagarwal561994", "html_url": "https://github.com/anuragagarwal561994", "followers_url": "https://api.github.com/users/anuragagarwal561994/followers", "following_url": "https://api.github.com/users/anuragagarwal561994/following{/other_user}", "gists_url": "https://api.github.com/users/anuragagarwal561994/gists{/gist_id}", "starred_url": "https://api.github.com/users/anuragagarwal561994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anuragagarwal561994/subscriptions", "organizations_url": "https://api.github.com/users/anuragagarwal561994/orgs", "repos_url": "https://api.github.com/users/anuragagarwal561994/repos", "events_url": "https://api.github.com/users/anuragagarwal561994/events{/privacy}", "received_events_url": "https://api.github.com/users/anuragagarwal561994/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-15T15:29:51Z", "updated_at": "2017-07-11T11:45:23Z", "closed_at": "2017-06-28T02:31:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using marshmallow_jsonapi on python client side where I was expecting to make the schemas and deserialize the returned response in python objects. I was able to do so successfully but when the response comes up with included data, the deserialization ignores the included key.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/79", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/79/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/79/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/79", "id": 221567348, "node_id": "MDU6SXNzdWUyMjE1NjczNDg=", "number": 79, "title": "include_data is always set to False for Relationship fields.", "user": {"login": "BillBrower", "id": 1717845, "node_id": "MDQ6VXNlcjE3MTc4NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1717845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BillBrower", "html_url": "https://github.com/BillBrower", "followers_url": "https://api.github.com/users/BillBrower/followers", "following_url": "https://api.github.com/users/BillBrower/following{/other_user}", "gists_url": "https://api.github.com/users/BillBrower/gists{/gist_id}", "starred_url": "https://api.github.com/users/BillBrower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BillBrower/subscriptions", "organizations_url": "https://api.github.com/users/BillBrower/orgs", "repos_url": "https://api.github.com/users/BillBrower/repos", "events_url": "https://api.github.com/users/BillBrower/events{/privacy}", "received_events_url": "https://api.github.com/users/BillBrower/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-13T13:43:43Z", "updated_at": "2017-04-15T21:14:13Z", "closed_at": "2017-04-14T16:16:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's not possible to set include_data to True via the constructor.\r\n\r\n```\r\ndef __init__(\r\n        self,\r\n        related_url='', related_url_kwargs=None,\r\n        self_url='', self_url_kwargs=None,\r\n        include_resource_linkage=False, schema=None,\r\n        many=False, type_=None, id_field=None, **kwargs\r\n    ):\r\n        self.related_url = related_url\r\n        self.related_url_kwargs = related_url_kwargs or {}\r\n        self.self_url = self_url\r\n        self.self_url_kwargs = self_url_kwargs or {}\r\n        if include_resource_linkage and not type_:\r\n            raise ValueError('include_resource_linkage=True requires the type_ argument.')\r\n        self.many = many\r\n        self.include_resource_linkage = include_resource_linkage\r\n        self.include_data = False\r\n        self.__schema = schema\r\n        self.type_ = type_\r\n        self.id_field = id_field or self.id_field\r\n        super(Relationship, self).__init__(**kwargs)\r\n```\r\n\r\nshould be\r\n\r\n```\r\ndef __init__(\r\n        self,\r\n        related_url='', related_url_kwargs=None,\r\n        self_url='', self_url_kwargs=None,\r\n        include_resource_linkage=False, \r\n        include_data=False, schema=None,\r\n        many=False, type_=None, id_field=None, **kwargs\r\n    ):\r\n        self.related_url = related_url\r\n        self.related_url_kwargs = related_url_kwargs or {}\r\n        self.self_url = self_url\r\n        self.self_url_kwargs = self_url_kwargs or {}\r\n        if include_resource_linkage and not type_:\r\n            raise ValueError('include_resource_linkage=True requires the type_ argument.')\r\n        self.many = many\r\n        self.include_resource_linkage = include_resource_linkage\r\n        self.include_data = include_data\r\n        self.__schema = schema\r\n        self.type_ = type_\r\n        self.id_field = id_field or self.id_field\r\n        super(Relationship, self).__init__(**kwargs)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/78", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/78/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/78/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/78", "id": 221188399, "node_id": "MDU6SXNzdWUyMjExODgzOTk=", "number": 78, "title": "How to fetch only the relationship?", "user": {"login": "krypttr", "id": 7353461, "node_id": "MDQ6VXNlcjczNTM0NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/7353461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krypttr", "html_url": "https://github.com/krypttr", "followers_url": "https://api.github.com/users/krypttr/followers", "following_url": "https://api.github.com/users/krypttr/following{/other_user}", "gists_url": "https://api.github.com/users/krypttr/gists{/gist_id}", "starred_url": "https://api.github.com/users/krypttr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krypttr/subscriptions", "organizations_url": "https://api.github.com/users/krypttr/orgs", "repos_url": "https://api.github.com/users/krypttr/repos", "events_url": "https://api.github.com/users/krypttr/events{/privacy}", "received_events_url": "https://api.github.com/users/krypttr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-12T08:30:41Z", "updated_at": "2017-11-08T22:43:24Z", "closed_at": "2017-11-08T22:43:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to fetch the relationship data as described in http://jsonapi.org/format/#fetching-relationships\r\n\r\n    schema = StuffSchema(only=(\"user\", \"id\"))\r\n\r\n is not compliant with the above specification.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/76", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/76/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/76/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/76", "id": 219593737, "node_id": "MDU6SXNzdWUyMTk1OTM3Mzc=", "number": 76, "title": "Schema.format_error incorrectly checks if index is falsely, when 0 (zero) is a valid index ", "user": {"login": "danpoland", "id": 6596169, "node_id": "MDQ6VXNlcjY1OTYxNjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6596169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danpoland", "html_url": "https://github.com/danpoland", "followers_url": "https://api.github.com/users/danpoland/followers", "following_url": "https://api.github.com/users/danpoland/following{/other_user}", "gists_url": "https://api.github.com/users/danpoland/gists{/gist_id}", "starred_url": "https://api.github.com/users/danpoland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danpoland/subscriptions", "organizations_url": "https://api.github.com/users/danpoland/orgs", "repos_url": "https://api.github.com/users/danpoland/repos", "events_url": "https://api.github.com/users/danpoland/events{/privacy}", "received_events_url": "https://api.github.com/users/danpoland/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-05T14:03:43Z", "updated_at": "2017-05-02T15:49:44Z", "closed_at": "2017-05-02T15:49:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Schema.format_error incorrectly checks if index is falsely, when 0 (zero) is a valid index and should be used when formatting the pointer.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/72", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/72/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/72/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/72", "id": 216463947, "node_id": "MDU6SXNzdWUyMTY0NjM5NDc=", "number": 72, "title": "Support \"link objects\"", "user": {"login": "danpoland", "id": 6596169, "node_id": "MDQ6VXNlcjY1OTYxNjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6596169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danpoland", "html_url": "https://github.com/danpoland", "followers_url": "https://api.github.com/users/danpoland/followers", "following_url": "https://api.github.com/users/danpoland/following{/other_user}", "gists_url": "https://api.github.com/users/danpoland/gists{/gist_id}", "starred_url": "https://api.github.com/users/danpoland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danpoland/subscriptions", "organizations_url": "https://api.github.com/users/danpoland/orgs", "repos_url": "https://api.github.com/users/danpoland/repos", "events_url": "https://api.github.com/users/danpoland/events{/privacy}", "received_events_url": "https://api.github.com/users/danpoland/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-23T15:13:35Z", "updated_at": "2019-08-23T12:45:35Z", "closed_at": "2019-08-23T12:45:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "From http://jsonapi.org/format/#document-links:\r\n\r\n### Each member of a links object is a \u201clink\u201d. A link MUST be represented as either:\r\n\r\n- a containing the link\u2019s URL.\r\n- an object (\u201clink object\u201d) which can contain the following members:\r\nhref: a string containing the link\u2019s URL.\r\nmeta: a meta object containing non-standard meta-information about the link.\r\n\r\nCurrently the library supports the first option but not the second. I will be creating a PR for the second, I just wanted to create a ticket to reference first.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/70", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/70/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/70/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/70", "id": 213383420, "node_id": "MDU6SXNzdWUyMTMzODM0MjA=", "number": 70, "title": "Dependency error with Marshmallow>=2.3.0", "user": {"login": "jasonmotylinski", "id": 7274, "node_id": "MDQ6VXNlcjcyNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/7274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonmotylinski", "html_url": "https://github.com/jasonmotylinski", "followers_url": "https://api.github.com/users/jasonmotylinski/followers", "following_url": "https://api.github.com/users/jasonmotylinski/following{/other_user}", "gists_url": "https://api.github.com/users/jasonmotylinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonmotylinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonmotylinski/subscriptions", "organizations_url": "https://api.github.com/users/jasonmotylinski/orgs", "repos_url": "https://api.github.com/users/jasonmotylinski/repos", "events_url": "https://api.github.com/users/jasonmotylinski/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonmotylinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-10T16:14:14Z", "updated_at": "2017-03-13T00:38:27Z", "closed_at": "2017-03-10T17:00:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "We ran into a weird issue when using marshmallow-jsonapi pulling in an incompatible version of marshmallow. In setup.py marshmallow-jsonapi requires marshmallow>=2.3.0. We found that this was pulling in the recently released 3.0 release of marshmallow, which is not compatible with marshmallow-jsoonapi. \r\n\r\nTo fix the issue we added a hard dependency on marshmallow==2.13.0 to our requirements.txt. \r\n\r\nCan the dependency on marshmallow version be set to a compatible version or have marshallow-jsonapi updated to work with the 3.0 release of marshmallow?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/69", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/69/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/69/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/69", "id": 212656042, "node_id": "MDU6SXNzdWUyMTI2NTYwNDI=", "number": 69, "title": "Relationship field serializes entire related object data as a string when specifying an attribute for the id field", "user": {"login": "jordal", "id": 885653, "node_id": "MDQ6VXNlcjg4NTY1Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/885653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jordal", "html_url": "https://github.com/jordal", "followers_url": "https://api.github.com/users/jordal/followers", "following_url": "https://api.github.com/users/jordal/following{/other_user}", "gists_url": "https://api.github.com/users/jordal/gists{/gist_id}", "starred_url": "https://api.github.com/users/jordal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jordal/subscriptions", "organizations_url": "https://api.github.com/users/jordal/orgs", "repos_url": "https://api.github.com/users/jordal/repos", "events_url": "https://api.github.com/users/jordal/events{/privacy}", "received_events_url": "https://api.github.com/users/jordal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 259607561, "node_id": "MDU6TGFiZWwyNTk2MDc1NjE=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 259607564, "node_id": "MDU6TGFiZWwyNTk2MDc1NjQ=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "scottwernervt", "id": 1048949, "node_id": "MDQ6VXNlcjEwNDg5NDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1048949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottwernervt", "html_url": "https://github.com/scottwernervt", "followers_url": "https://api.github.com/users/scottwernervt/followers", "following_url": "https://api.github.com/users/scottwernervt/following{/other_user}", "gists_url": "https://api.github.com/users/scottwernervt/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottwernervt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottwernervt/subscriptions", "organizations_url": "https://api.github.com/users/scottwernervt/orgs", "repos_url": "https://api.github.com/users/scottwernervt/repos", "events_url": "https://api.github.com/users/scottwernervt/events{/privacy}", "received_events_url": "https://api.github.com/users/scottwernervt/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "scottwernervt", "id": 1048949, "node_id": "MDQ6VXNlcjEwNDg5NDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1048949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottwernervt", "html_url": "https://github.com/scottwernervt", "followers_url": "https://api.github.com/users/scottwernervt/followers", "following_url": "https://api.github.com/users/scottwernervt/following{/other_user}", "gists_url": "https://api.github.com/users/scottwernervt/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottwernervt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottwernervt/subscriptions", "organizations_url": "https://api.github.com/users/scottwernervt/orgs", "repos_url": "https://api.github.com/users/scottwernervt/repos", "events_url": "https://api.github.com/users/scottwernervt/events{/privacy}", "received_events_url": "https://api.github.com/users/scottwernervt/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-03-08T07:09:31Z", "updated_at": "2018-06-10T14:14:08Z", "closed_at": "2018-06-10T14:14:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using a Relationship to serialize a compound document, if the related Schema specifies an attribute name for the id field, the related data object is wrong (it serializes the whole object as a string).\r\n\r\nHere's an example of the happy case, which works perfectly well:\r\n\r\n```\r\nfrom pprint import pprint\r\nfrom marshmallow_jsonapi import fields, Schema\r\n\r\nclass BookSchema(Schema):\r\n    id = fields.Str()\r\n    title = fields.Str()\r\n    author = fields.Relationship(\r\n        include_resource_linkage=True,\r\n        type_='authors',\r\n        schema='AuthorSchema',\r\n    )\r\n\r\n    class Meta:\r\n        type_ = 'books'\r\n        strict = True\r\n\r\nclass AuthorSchema(Schema):\r\n    id = fields.Str()\r\n\r\n    class Meta:\r\n        type_ = 'authors'\r\n        strict = True\r\n\r\nbook_data = {\r\n    'id': '978-1451673319',\r\n    'title': 'Fahrenheit 451',\r\n    'author': {'id': 'Ray Bradbury'},\r\n}\r\n\r\nbook_schema = BookSchema(include_data=['author'])\r\npprint(book_schema.dump(book_data).data)\r\n\r\n# {'data': {'attributes': {u'title': u'Fahrenheit 451'},\r\n#           'id': u'978-1451673319',\r\n#           'relationships': {\r\n#               u'author': {'data': {\r\n#                   'id': 'Ray Bradbury',\r\n#                   'type': 'authors'}}\r\n#           },\r\n#           'type': 'books'},\r\n#  'included': [{'id': u'Ray Bradbury', 'type': 'authors'}]}\r\n```\r\n\r\nNow if you only change the `AuthorSchema` and the input data, as follows, then the relationship data object is toast:\r\n\r\n```\r\nclass AuthorSchema(Schema):\r\n    id = fields.Str(attribute='name')  # <---- changed this\r\n\r\n    class Meta:\r\n        type_ = 'authors'\r\n        strict = True\r\n\r\nbook_data = {\r\n    'id': '978-1451673319',\r\n    'title': 'Fahrenheit 451',\r\n    'author': {'name': 'Ray Bradbury'},  # <---- and changed this\r\n}\r\n\r\nbook_schema = BookSchema(include_data=['author'])\r\npprint(book_schema.dump(book_data).data)\r\n\r\n# {'data': {'attributes': {u'title': u'Fahrenheit 451'},\r\n#           'id': u'978-1451673319',\r\n#           'relationships': {\r\n#               u'author': {'data': {\r\n#                   'id': \"{'name': 'Ray Bradbury'}\",  <--- what happened here??\r\n#                   'type': 'authors'}}\r\n#           },\r\n#           'type': 'books'},\r\n#  'included': [{'id': u'Ray Bradbury', 'type': 'authors'}]}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/67", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/67/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/67/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/67", "id": 212550849, "node_id": "MDU6SXNzdWUyMTI1NTA4NDk=", "number": 67, "title": "Compound documents fail when the Relationship's schema is a class reference and many=True", "user": {"login": "danpoland", "id": 6596169, "node_id": "MDQ6VXNlcjY1OTYxNjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6596169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danpoland", "html_url": "https://github.com/danpoland", "followers_url": "https://api.github.com/users/danpoland/followers", "following_url": "https://api.github.com/users/danpoland/following{/other_user}", "gists_url": "https://api.github.com/users/danpoland/gists{/gist_id}", "starred_url": "https://api.github.com/users/danpoland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danpoland/subscriptions", "organizations_url": "https://api.github.com/users/danpoland/orgs", "repos_url": "https://api.github.com/users/danpoland/repos", "events_url": "https://api.github.com/users/danpoland/events{/privacy}", "received_events_url": "https://api.github.com/users/danpoland/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-03-07T20:35:30Z", "updated_at": "2017-03-09T01:53:28Z", "closed_at": "2017-03-09T01:53:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When the schema argument to the Relationship field is a class reference and many=True, the schema property on the Relationship instance incorrectly initializes the schema class with many=True.   It does not need to be set at all. The `_serialize` method iterates over each item in the included_data. This bug causes a TypeError to be thrown because the object being serialized is not an iterable.\r\n\r\nI have the fix for this and will submit the PR. I just wanted to get a ticket in first.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/63", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/63/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/63/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/63", "id": 208182104, "node_id": "MDU6SXNzdWUyMDgxODIxMDQ=", "number": 63, "title": "flask_example.py /posts/1/comments relationship is broken.", "user": {"login": "lukeorland", "id": 11611, "node_id": "MDQ6VXNlcjExNjEx", "avatar_url": "https://avatars0.githubusercontent.com/u/11611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukeorland", "html_url": "https://github.com/lukeorland", "followers_url": "https://api.github.com/users/lukeorland/followers", "following_url": "https://api.github.com/users/lukeorland/following{/other_user}", "gists_url": "https://api.github.com/users/lukeorland/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukeorland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukeorland/subscriptions", "organizations_url": "https://api.github.com/users/lukeorland/orgs", "repos_url": "https://api.github.com/users/lukeorland/repos", "events_url": "https://api.github.com/users/lukeorland/events{/privacy}", "received_events_url": "https://api.github.com/users/lukeorland/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 259607561, "node_id": "MDU6TGFiZWwyNTk2MDc1NjE=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "scottwernervt", "id": 1048949, "node_id": "MDQ6VXNlcjEwNDg5NDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1048949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottwernervt", "html_url": "https://github.com/scottwernervt", "followers_url": "https://api.github.com/users/scottwernervt/followers", "following_url": "https://api.github.com/users/scottwernervt/following{/other_user}", "gists_url": "https://api.github.com/users/scottwernervt/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottwernervt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottwernervt/subscriptions", "organizations_url": "https://api.github.com/users/scottwernervt/orgs", "repos_url": "https://api.github.com/users/scottwernervt/repos", "events_url": "https://api.github.com/users/scottwernervt/events{/privacy}", "received_events_url": "https://api.github.com/users/scottwernervt/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "scottwernervt", "id": 1048949, "node_id": "MDQ6VXNlcjEwNDg5NDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1048949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottwernervt", "html_url": "https://github.com/scottwernervt", "followers_url": "https://api.github.com/users/scottwernervt/followers", "following_url": "https://api.github.com/users/scottwernervt/following{/other_user}", "gists_url": "https://api.github.com/users/scottwernervt/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottwernervt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottwernervt/subscriptions", "organizations_url": "https://api.github.com/users/scottwernervt/orgs", "repos_url": "https://api.github.com/users/scottwernervt/repos", "events_url": "https://api.github.com/users/scottwernervt/events{/privacy}", "received_events_url": "https://api.github.com/users/scottwernervt/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2017-02-16T16:57:06Z", "updated_at": "2018-06-10T01:50:28Z", "closed_at": "2018-06-10T01:50:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "The response to `GET http://127.0.0.1:5000/posts/1` is\r\n\r\n```\r\n{\r\n  \"data\": {\r\n    \"attributes\": {\r\n      \"title\": \"JSON API paints my bikeshed!\"\r\n    }, \r\n    \"id\": \"1\", \r\n    \"links\": {\r\n      \"self\": \"/posts/1\"\r\n    }, \r\n    \"relationships\": {\r\n      \"author\": {\r\n        \"links\": {\r\n          \"related\": \"http://127.0.0.1:5000/authors/1\"\r\n        }\r\n      }, \r\n      \"comments\": {\r\n        \"links\": {\r\n          \"related\": \"http://127.0.0.1:5000/posts/1/comments/\"\r\n        }\r\n      }\r\n    }, \r\n    \"type\": \"posts\"\r\n  }, \r\n  \"links\": {\r\n    \"self\": \"/posts/1\"\r\n  }\r\n}\r\n```\r\n\r\nThen following the comments relationship with `GET http://127.0.0.1:5000/posts/1/comments/`,\r\n\r\nThere is a server error:\r\n\r\n```\r\nBuildError(endpoint, values, method, self)\r\nwerkzeug.routing.BuildError: Could not build url for endpoint 'posts_comments'. Did you forget to specify values ['post_id']?\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/62", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/62/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/62/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/62", "id": 204337387, "node_id": "MDU6SXNzdWUyMDQzMzczODc=", "number": 62, "title": "Drop top level links container when self_url is empty", "user": {"login": "xmcpam", "id": 6130602, "node_id": "MDQ6VXNlcjYxMzA2MDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6130602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xmcpam", "html_url": "https://github.com/xmcpam", "followers_url": "https://api.github.com/users/xmcpam/followers", "following_url": "https://api.github.com/users/xmcpam/following{/other_user}", "gists_url": "https://api.github.com/users/xmcpam/gists{/gist_id}", "starred_url": "https://api.github.com/users/xmcpam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xmcpam/subscriptions", "organizations_url": "https://api.github.com/users/xmcpam/orgs", "repos_url": "https://api.github.com/users/xmcpam/repos", "events_url": "https://api.github.com/users/xmcpam/events{/privacy}", "received_events_url": "https://api.github.com/users/xmcpam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-31T15:50:41Z", "updated_at": "2018-05-31T19:36:30Z", "closed_at": "2018-05-31T19:36:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "This line seems to always evaluate to True: https://github.com/marshmallow-code/marshmallow-jsonapi/blob/dev/marshmallow_jsonapi/schema.py#L317. In the `many` case with `self_url_many` beeing *not set*, I exepect that the top level link is dropped like so:\r\n```\r\ndiff --git a/marshmallow_jsonapi/schema.py b/marshmallow_jsonapi/schema.py\r\nindex d276baa..1f9db81 100644\r\n--- a/marshmallow_jsonapi/schema.py\r\n+++ b/marshmallow_jsonapi/schema.py\r\n@@ -299,7 +299,10 @@ class Schema(ma.Schema):\r\n             if self.opts.self_url:\r\n                 self_link = data.get('links', {}).get('self', None)\r\n \r\n-        return {'self': self_link}\r\n+        if self_link:\r\n+            return {'self': self_link}\r\n+\r\n+        return None\r\n \r\n     def get_resource_links(self, item):\r\n         \"\"\"Hook for adding links to a resource object.\"\"\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/58", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/58/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/58/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/58", "id": 201933412, "node_id": "MDU6SXNzdWUyMDE5MzM0MTI=", "number": 58, "title": "Schema.dump(None) Should Follow JSONAPI Spec", "user": {"login": "rgant", "id": 710553, "node_id": "MDQ6VXNlcjcxMDU1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/710553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rgant", "html_url": "https://github.com/rgant", "followers_url": "https://api.github.com/users/rgant/followers", "following_url": "https://api.github.com/users/rgant/following{/other_user}", "gists_url": "https://api.github.com/users/rgant/gists{/gist_id}", "starred_url": "https://api.github.com/users/rgant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rgant/subscriptions", "organizations_url": "https://api.github.com/users/rgant/orgs", "repos_url": "https://api.github.com/users/rgant/repos", "events_url": "https://api.github.com/users/rgant/events{/privacy}", "received_events_url": "https://api.github.com/users/rgant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-19T18:04:49Z", "updated_at": "2017-02-05T17:02:35Z", "closed_at": "2017-02-05T17:02:35Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "According to the [JSONAPI Spec](http://jsonapi.org/format/#document-top-level):\r\n\r\n> Primary data MUST be either... a single resource object, a single resource identifier object, or null, for requests that target single resources\r\n\r\nAnd when [fetching empty relationships](http://jsonapi.org/format/#fetching-relationships-responses-200) you must return a 200 with a `null` or `[]` for the data key.\r\n\r\nIn this example we don't properly follow the spec:\r\n```python\r\n>>> from marshmallow_jsonapi import Schema, fields\r\n>>> class PostSchema(Schema):\r\n...     id = fields.Str(dump_only=True)\r\n...     class Meta:\r\n...         type_ = 'posts'\r\n...         strict = True\r\n... \r\n>>> schema = PostSchema()\r\n>>> schema.dump(None).data\r\n{'data': {'type': 'posts'}}\r\n>>> schema.dump([]).data\r\n{'data': {'type': 'posts'}}\r\n```\r\n\r\nFurther there is an issue with self links and None or [] objects:\r\n```python\r\n>>> class PostSchema(Schema):\r\n...     id = fields.Str(dump_only=True)\r\n...     class Meta:\r\n...         type_ = 'posts'\r\n...         strict = True\r\n...         self_url_kwargs = {'id': '<id>'}\r\n...         self_url = '/articles/{id}'\r\n... \r\n>>> schema = PostSchema()\r\n>>> schema.dump(None).data\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"./marshmallow/schema.py\", line 515, in dump\r\n    original_data=obj)\r\n  File \"./marshmallow/schema.py\", line 830, in _invoke_dump_processors\r\n    data=data, many=many, original_data=original_data)\r\n  File \"./marshmallow/schema.py\", line 930, in _invoke_processors\r\n    data = utils.if_none(processor(data, many), data)\r\n  File \"./marshmallow_jsonapi/schema.py\", line 113, in format_json_api_response\r\n    ret = self.format_items(data, many)\r\n  File \"./marshmallow_jsonapi/schema.py\", line 276, in format_items\r\n    return self.format_item(data)\r\n  File \"./marshmallow_jsonapi/schema.py\", line 263, in format_item\r\n    links = self.get_resource_links(item)\r\n  File \"./marshmallow_jsonapi/schema.py\", line 294, in get_resource_links\r\n    kwargs = resolve_params(item, self.opts.self_url_kwargs or {})\r\n  File \"./marshmallow_jsonapi/utils.py\", line 33, in resolve_params\r\n    'attribute of {obj!r}'.format(attr_name=attr_name, obj=obj)\r\nAttributeError: 'id' is not a valid attribute of {}\r\n```\r\n(Same is true for `[]`)\r\n\r\nI'm working on a fork and a fix for this currently.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/55", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/55/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/55/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/55", "id": 195091310, "node_id": "MDU6SXNzdWUxOTUwOTEzMTA=", "number": 55, "title": "How to include deep nested resources?", "user": {"login": "jannis-a", "id": 2538064, "node_id": "MDQ6VXNlcjI1MzgwNjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2538064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jannis-a", "html_url": "https://github.com/jannis-a", "followers_url": "https://api.github.com/users/jannis-a/followers", "following_url": "https://api.github.com/users/jannis-a/following{/other_user}", "gists_url": "https://api.github.com/users/jannis-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/jannis-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jannis-a/subscriptions", "organizations_url": "https://api.github.com/users/jannis-a/orgs", "repos_url": "https://api.github.com/users/jannis-a/repos", "events_url": "https://api.github.com/users/jannis-a/events{/privacy}", "received_events_url": "https://api.github.com/users/jannis-a/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-12T21:31:22Z", "updated_at": "2017-04-02T15:26:09Z", "closed_at": "2017-04-02T15:26:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi folks,\r\nI'm currently working on project and using marshmallow-jsonapi. According to [this](https://github.com/marshmallow-code/marshmallow-jsonapi/commit/1bb97af81cf975f54f7d6b851b5e3ffb28d0105f) commit deep nested relations can be included. Does this also include ForeignKeys to a model? \r\n\r\nNow I want to serialize a Video, it's relating user, the comments **and** the users for comments. Everything works except for the comments user with the following code:\r\n\r\n```python\r\nclass User(Base, UserMixin):\r\n    pass\r\n\r\nclass Comment(Base):\r\n    user_id = db.Column(db.ForeignKey('user.id'))\r\n    user = relationship('User', backref=backref('comments', lazy='dynamic'))\r\n    video_id = db.Column(db.ForeignKey('video.id'))\r\n    video = relationship('Video', backref=backref('comments', lazy='joined'))\r\n\r\n\r\nclass Video(Base):\r\n    user_id = db.Column(db.ForeignKey('user.id'))\r\n    user = relationship('User', backref=backref('videos', lazy='dynamic'))\r\n\r\n\r\nclass UserSchema(Schema):\r\n    class Meta(BaseMeta):\r\n        type_ = 'user'\r\n        fields = []\r\n\r\n\r\nclass CommentSchema(Schema):\r\n    user = Relationship(\r\n        type_='user',\r\n        schema='UserSchema',\r\n        include_resource_linkage=True,\r\n    )\r\n    video = Relationship(\r\n        type_='video',\r\n        schema='VideoSchema',\r\n        include_resource_linkage=True,\r\n    )\r\n\r\n    class Meta(BaseMeta):\r\n        type_ = 'comment'\r\n        fields = ['user', 'video']\r\n\r\n\r\nclass VideoSchema(Schema):\r\n    user = Relationship(\r\n        type_='user',\r\n        schema='UserSchema',\r\n        include_resource_linkage=True,\r\n    )\r\n    comments = Relationship(\r\n        many=True,\r\n        type_='comment',\r\n        schema='CommentSchema',\r\n        include_resource_linkage=True,\r\n    )\r\n\r\n    class Meta(BaseMeta):\r\n        type_ = 'video'\r\n        fields = ['user', 'comments']\r\n\r\nvideo_schema = VideoSchema(include_data=('user, 'comments'))\r\n# Retrieve video und call video_schema.dump()\r\n```\r\n\r\nCan this be archived and how? I checked the docs but could find anything helpful.\r\n\r\nThanks for help \ud83d\ude03", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/54", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/54/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/54/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/54", "id": 188695033, "node_id": "MDU6SXNzdWUxODg2OTUwMzM=", "number": 54, "title": "Specifying fields breaks relationship serialization", "user": {"login": "hirecom", "id": 704114, "node_id": "MDQ6VXNlcjcwNDExNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/704114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirecom", "html_url": "https://github.com/hirecom", "followers_url": "https://api.github.com/users/hirecom/followers", "following_url": "https://api.github.com/users/hirecom/following{/other_user}", "gists_url": "https://api.github.com/users/hirecom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirecom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirecom/subscriptions", "organizations_url": "https://api.github.com/users/hirecom/orgs", "repos_url": "https://api.github.com/users/hirecom/repos", "events_url": "https://api.github.com/users/hirecom/events{/privacy}", "received_events_url": "https://api.github.com/users/hirecom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-11-11T06:35:54Z", "updated_at": "2016-11-11T07:00:04Z", "closed_at": "2016-11-11T07:00:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a schema with a many-to-one relationship, like below.  \r\n```\r\nauthor = fields.Relationship(\r\n   include_resource_linkage=True,\r\n   type_='users',\r\n   schema='UserSchema'\r\n)\r\n```\r\nIt serializes to JSON correctly when the query is basic query like below\r\n\r\nnotices = Notice.query\r\nresult = NoticeSchema(many=True, include_data=('author',), partial=True).dump(notices)\r\n\r\nHowever, adding a field like Notice.query.add_column(...) does not work and loses the author relationship. \r\n\r\nHow do I use custom fields like doing a SUM or COUNT fields?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/53", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/53/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/53/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/53", "id": 184655182, "node_id": "MDU6SXNzdWUxODQ2NTUxODI=", "number": 53, "title": "Relationship field `id` serialization and linkage", "user": {"login": "aholik", "id": 1625423, "node_id": "MDQ6VXNlcjE2MjU0MjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1625423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aholik", "html_url": "https://github.com/aholik", "followers_url": "https://api.github.com/users/aholik/followers", "following_url": "https://api.github.com/users/aholik/following{/other_user}", "gists_url": "https://api.github.com/users/aholik/gists{/gist_id}", "starred_url": "https://api.github.com/users/aholik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aholik/subscriptions", "organizations_url": "https://api.github.com/users/aholik/orgs", "repos_url": "https://api.github.com/users/aholik/repos", "events_url": "https://api.github.com/users/aholik/events{/privacy}", "received_events_url": "https://api.github.com/users/aholik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-22T21:29:16Z", "updated_at": "2017-05-01T02:18:41Z", "closed_at": "2017-05-01T02:18:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use [hashids](http://hashids.org/) to encode ID values when serializing objects. The most straightforward way to doing this seemed to me to declare ID field using `fields.Method`. However when serializing a `Relationship` field then it picks up ID value straight from the source object instead of obtaining it through the schema`s ID field.\n\nExample code:\n\n``` python\nfrom marshmallow import pprint\nfrom marshmallow_jsonapi import Schema, fields\n\nclass BaseSchema(Schema):\n    id = fields.Method('serialize_id', dump_only=True)\n\n    def serialize_id(self, obj):\n        # faking hashids.encode()\n        return \"%s+%s\"%(self.opts.type_, obj['id'])\n\nclass CarSchema(BaseSchema):\n    class Meta:\n        type_ = 'cars'\n        self_url = '/cars/{id}'\n        self_url_kwargs = { 'id': '<id>' }\n\n    name = fields.Str()\n    parts = fields.Relationship(\n        many=True,\n        self_url='/cars/{id}/parts',\n        self_url_kwargs={'id': '<id>'},\n        include_resource_linkage=True,\n        type_=\"parts\",\n        schema=\"PartSchema\",\n        required=True)\n\nclass PartSchema(BaseSchema):\n    class Meta:\n        type_ = 'parts'\n        self_url = '/parts/{id}'\n        self_url_kwargs = { 'id': '<id>' }\n\n    name = fields.Str()\n\ndata = {\n    'id': '0',\n    'name': 'tesla',\n    'parts': [\n        {'id': '10', 'name': 'battery'}\n    ]\n}\n\npprint(CarSchema().dump(data).data)\n\n{'attributes': {'name': 'tesla'},\n 'id': 'cars+0',\n 'links': {'self': '/cars/cars+0'},\n 'relationships': {'parts': {'data': [{'id': '10', 'type': 'parts'}],\n                             'links': {'self': '/cars/0/parts'}}},\n 'type': 'cars'}\n```\n\nI would expect that `relationships.parts.links.self` should equal to `/cars/cars+0` and the related part ID `10` should equal to `parts+10` since `schema` is specified on the `parts` relationship field. Or is this an expected serialization behavior?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/50", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/50/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/50/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/50", "id": 161967297, "node_id": "MDU6SXNzdWUxNjE5NjcyOTc=", "number": 50, "title": "marshmallow in dev-requirements.txt", "user": {"login": "asteinlein", "id": 904794, "node_id": "MDQ6VXNlcjkwNDc5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/904794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asteinlein", "html_url": "https://github.com/asteinlein", "followers_url": "https://api.github.com/users/asteinlein/followers", "following_url": "https://api.github.com/users/asteinlein/following{/other_user}", "gists_url": "https://api.github.com/users/asteinlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/asteinlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asteinlein/subscriptions", "organizations_url": "https://api.github.com/users/asteinlein/orgs", "repos_url": "https://api.github.com/users/asteinlein/repos", "events_url": "https://api.github.com/users/asteinlein/events{/privacy}", "received_events_url": "https://api.github.com/users/asteinlein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-23T16:33:17Z", "updated_at": "2016-10-09T14:22:02Z", "closed_at": "2016-10-09T14:22:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Shouldn't marshmallow itself be in `dev-requirements.txt`? I set up a fresh development environment according to the contributing guidelines, but that doesn't give me marshmallow which makes the tests fail.\n\nI'll happily provide the PR to either update the guidelines or add the requirement, but I'm just unsure what the intention is.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/48", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/48/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/48/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/48", "id": 153671118, "node_id": "MDU6SXNzdWUxNTM2NzExMTg=", "number": 48, "title": "Throw error when `id` field is an integer?", "user": {"login": "ZeeD26", "id": 2487468, "node_id": "MDQ6VXNlcjI0ODc0Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2487468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZeeD26", "html_url": "https://github.com/ZeeD26", "followers_url": "https://api.github.com/users/ZeeD26/followers", "following_url": "https://api.github.com/users/ZeeD26/following{/other_user}", "gists_url": "https://api.github.com/users/ZeeD26/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZeeD26/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZeeD26/subscriptions", "organizations_url": "https://api.github.com/users/ZeeD26/orgs", "repos_url": "https://api.github.com/users/ZeeD26/repos", "events_url": "https://api.github.com/users/ZeeD26/events{/privacy}", "received_events_url": "https://api.github.com/users/ZeeD26/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-05-08T18:44:12Z", "updated_at": "2018-05-31T20:50:58Z", "closed_at": "2018-05-31T20:50:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When a model requires the use of integer based IDs the behavior desired by JSON API is to use strings anyway. Thus I use the `as_string` option in my schema definition. For dumping data everything works like a charm, also for loading -- except for an edge case: If the client sends a resource object with an integer ID marshmallow is smart enough to deal with this -- but JSON API requires the use of strings. Hence validation of the `id` should include checking whether it is a string or not. As far as I understand this is not possible with the method based validation approach (`validates(field_name)` decorator) as the conversion from string to integer already took place and the original data is not available. It is, however, available with the `validates_shema` decorator. If I use it like this\n\n``` python\n@validates_schema(pass_original=True)\ndef check_whether_id_is_a_string(self, data, original_data):\n    if not isinstance(original_data['data']['id'], str):\n        raise ValidationError('`id` object must be of type `string`.', 'id')\n```\n\nthe error message gets formatted like this\n\n```\n{\n    'errors': [\n        {\n            'detail': '`id` object must be of type `string`.',\n            'source': {\n                'pointer': '/data/attributes/id'\n            }\n        }\n    ]\n}\n```\n\nSo as you can see the pointer points to the wrong level.\n\nMy question hence is: Is there a proper way to do this already, or should I try to set something up within the `format_error` method of the Schema class that incorporates another if clause checking whether the field name is `id`?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/46", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/46/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/46/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/46", "id": 151228863, "node_id": "MDU6SXNzdWUxNTEyMjg4NjM=", "number": 46, "title": "[Feature] List field with nested schema is too verbose", "user": {"login": "deckar01", "id": 3108007, "node_id": "MDQ6VXNlcjMxMDgwMDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3108007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deckar01", "html_url": "https://github.com/deckar01", "followers_url": "https://api.github.com/users/deckar01/followers", "following_url": "https://api.github.com/users/deckar01/following{/other_user}", "gists_url": "https://api.github.com/users/deckar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/deckar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deckar01/subscriptions", "organizations_url": "https://api.github.com/users/deckar01/orgs", "repos_url": "https://api.github.com/users/deckar01/repos", "events_url": "https://api.github.com/users/deckar01/events{/privacy}", "received_events_url": "https://api.github.com/users/deckar01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-26T20:16:27Z", "updated_at": "2016-04-26T20:22:03Z", "closed_at": "2016-04-26T20:22:03Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`fields.List(fields.Nested(CustomSchema))` is not very readable.\n\nConsider supporting list fields constructed directly from `Schema` classes:\n- `fields.List(CustomSchema)`\n\nConsider exposing a convenience wrapper:\n- `fields.NestedList(CustomSchema)`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/45", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/45/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/45/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/45", "id": 149606009, "node_id": "MDU6SXNzdWUxNDk2MDYwMDk=", "number": 45, "title": "Relationships aren't being serialized", "user": {"login": "BillBrower", "id": 1717845, "node_id": "MDQ6VXNlcjE3MTc4NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1717845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BillBrower", "html_url": "https://github.com/BillBrower", "followers_url": "https://api.github.com/users/BillBrower/followers", "following_url": "https://api.github.com/users/BillBrower/following{/other_user}", "gists_url": "https://api.github.com/users/BillBrower/gists{/gist_id}", "starred_url": "https://api.github.com/users/BillBrower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BillBrower/subscriptions", "organizations_url": "https://api.github.com/users/BillBrower/orgs", "repos_url": "https://api.github.com/users/BillBrower/repos", "events_url": "https://api.github.com/users/BillBrower/events{/privacy}", "received_events_url": "https://api.github.com/users/BillBrower/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-04-19T22:56:50Z", "updated_at": "2016-08-01T16:18:03Z", "closed_at": "2016-08-01T16:18:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having trouble getting my Schemas to dump Relationships when many=True is specified.\nFor example, I have a ListingReportSchema that has listings as a relationship field and although that relationship gets included for singular ListingReport objects it doesn't get included when many is set to True. Looking through the source code it seemed like setting include_data=('listings',) would fix the problem but it has not. Is there any other way to get those relationships included?\n\n```\nListingReportSchema(many=True, include_data=('listings',), strict=True).dump(listing_reports).data\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/43", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/43/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/43/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/43", "id": 143540036, "node_id": "MDU6SXNzdWUxNDM1NDAwMzY=", "number": 43, "title": "Format ValidationError due to missing type key as if it was any other error.", "user": {"login": "ZeeD26", "id": 2487468, "node_id": "MDQ6VXNlcjI0ODc0Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2487468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZeeD26", "html_url": "https://github.com/ZeeD26", "followers_url": "https://api.github.com/users/ZeeD26/followers", "following_url": "https://api.github.com/users/ZeeD26/following{/other_user}", "gists_url": "https://api.github.com/users/ZeeD26/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZeeD26/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZeeD26/subscriptions", "organizations_url": "https://api.github.com/users/ZeeD26/orgs", "repos_url": "https://api.github.com/users/ZeeD26/repos", "events_url": "https://api.github.com/users/ZeeD26/events{/privacy}", "received_events_url": "https://api.github.com/users/ZeeD26/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-03-25T16:50:51Z", "updated_at": "2016-04-02T19:51:49Z", "closed_at": "2016-04-02T19:51:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While the IncorrectTypeError gets formatted according to JSONAPI, the ValidationError raised due to a missing `type` key is not. I think it would be more appropriate to format this according to the JSONAPI error specifications as well, wouldn't it?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/42", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/42/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/42/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/42", "id": 142470835, "node_id": "MDU6SXNzdWUxNDI0NzA4MzU=", "number": 42, "title": "Schema without attributes can not be deserialized due to missing attributes key.", "user": {"login": "ZeeD26", "id": 2487468, "node_id": "MDQ6VXNlcjI0ODc0Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2487468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZeeD26", "html_url": "https://github.com/ZeeD26", "followers_url": "https://api.github.com/users/ZeeD26/followers", "following_url": "https://api.github.com/users/ZeeD26/following{/other_user}", "gists_url": "https://api.github.com/users/ZeeD26/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZeeD26/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZeeD26/subscriptions", "organizations_url": "https://api.github.com/users/ZeeD26/orgs", "repos_url": "https://api.github.com/users/ZeeD26/repos", "events_url": "https://api.github.com/users/ZeeD26/events{/privacy}", "received_events_url": "https://api.github.com/users/ZeeD26/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-03-21T21:03:06Z", "updated_at": "2016-03-25T06:33:48Z", "closed_at": "2016-03-25T06:33:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When I define my schema\n\n``` python\nclass MyFirstSchema(Schema):\n    id = fields.Int()\n\n    class Meta:\n        type_ = 'firsts'\n```\n\nand then try to load it like this\n\n``` python\ndata = {'data': {'id': 1, 'type': 'firsts'}}\nMyFirstSchema().load(data)\n\n\n```\n\nI get the following error:\n\n```\nmarshmallow.exceptions.ValidationError: `data` object must include `attributes` key.\n```\n\nI do, however, not find any specification in JSON API saying that the `attributes` key has to be present.\n\nHere is a full example:\n\n``` python\nfrom marshmallow_jsonapi import Schema, fields\n\nclass MyFirstSchema(Schema):\n    id = fields.Int()\n\n    class Meta:\n        type_ = 'firsts'\n\ndata = {'data': {'id': 1, 'type': 'firsts'}}\nMyFirstSchema().load(data)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/36", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/36/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/36/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/36", "id": 134663285, "node_id": "MDU6SXNzdWUxMzQ2NjMyODU=", "number": 36, "title": "resolve self_url from flask view name", "user": {"login": "jo-tham", "id": 7353689, "node_id": "MDQ6VXNlcjczNTM2ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7353689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jo-tham", "html_url": "https://github.com/jo-tham", "followers_url": "https://api.github.com/users/jo-tham/followers", "following_url": "https://api.github.com/users/jo-tham/following{/other_user}", "gists_url": "https://api.github.com/users/jo-tham/gists{/gist_id}", "starred_url": "https://api.github.com/users/jo-tham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jo-tham/subscriptions", "organizations_url": "https://api.github.com/users/jo-tham/orgs", "repos_url": "https://api.github.com/users/jo-tham/repos", "events_url": "https://api.github.com/users/jo-tham/events{/privacy}", "received_events_url": "https://api.github.com/users/jo-tham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-02-18T18:56:16Z", "updated_at": "2016-10-09T14:24:24Z", "closed_at": "2016-10-09T14:24:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "thanks to @asteinlein, [pr 19](https://github.com/marshmallow-code/marshmallow-jsonapi/pull/19/files) introduced self_url to the schema via `Schema` `Meta`\n\n```\n...\nclass Meta:\n    self_url = 'api/users/{}'\n    self_url_kwargs = {'id': '<id>'}\n    self_url_many = 'api/users'\n```\n\nit would be nice to be able to use route names to avoid hard-coding these urls, in the manner that relationship fields operate.\n\n```\n...\nclass Meta:\n    self_view = 'user'\n    self_view_kwargs = {'id': '<id>'}\n    self_view_many = 'users'\n```\n\nbut how to introduce this to the `Schema` without introducing flask dependency. \n\nperhaps on a case by case basis with `@post_dump`?\nor have a `FlaskSchema` that implements this?\n\nany suggestions on the most suitable approach @sloria & co? with some input on the general direction I'm glad to make a PR \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/35", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/35/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/35/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/35", "id": 133860337, "node_id": "MDU6SXNzdWUxMzM4NjAzMzc=", "number": 35, "title": "Example for flask doesn't return the right content-type for JSON API", "user": {"login": "kdart", "id": 33999, "node_id": "MDQ6VXNlcjMzOTk5", "avatar_url": "https://avatars2.githubusercontent.com/u/33999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdart", "html_url": "https://github.com/kdart", "followers_url": "https://api.github.com/users/kdart/followers", "following_url": "https://api.github.com/users/kdart/following{/other_user}", "gists_url": "https://api.github.com/users/kdart/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdart/subscriptions", "organizations_url": "https://api.github.com/users/kdart/orgs", "repos_url": "https://api.github.com/users/kdart/repos", "events_url": "https://api.github.com/users/kdart/events{/privacy}", "received_events_url": "https://api.github.com/users/kdart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-02-16T01:48:28Z", "updated_at": "2016-02-16T04:38:17Z", "closed_at": "2016-02-16T04:38:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "The jsonify function in Flask, that the example uses, puts in a mime type of \"application/json\". But the JSON API spec says it should be \"application/vnd.api+json\".  So it needs a custom response object.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/34", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/34/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/34/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/34", "id": 132571718, "node_id": "MDU6SXNzdWUxMzI1NzE3MTg=", "number": 34, "title": "marshmallow-jsonapi forcing loading of related data", "user": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars3.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-02-09T23:56:35Z", "updated_at": "2018-05-19T19:25:32Z", "closed_at": "2018-05-17T22:41:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using marshmallow-jsonapi with sqlalchemy, and it's forcing loading of related data, when all  I want is for marshmallow-json to create a link to related data. Here's a snippet of what I'm doing:\n\n```\nclass Server(db.Model):\n    __tablename__ = 'servers'\n\n    id = db.Column(db.Integer,\n                   primary_key=True)\n    hostname = db.Column(db.String(255, collation='utf8_bin'),\n                         unique=True,\n                         nullable=False)\n\n    jobs = db.relationship('Job', back_populates='server')\n\n\nclass Job(db.Model):\n    __tablename__ = 'jobs'\n\n    id = db.Column(db.Integer,\n                   primary_key=True)\n    server_id = db.Column(db.Integer, db.ForeignKey('servers.id'),\n                          nullable=False)\n    name = db.Column(db.String(255, collation='utf8_bin'),\n                     index=True,\n                     nullable=False)\n\n    server = db.relationship('Server', back_populates='jobs')\n\n\nclass JobSchema(Schema):\n    id = fields.Integer(dump_only=True)\n    name = fields.String()\n\n    server = Relationship(\n        related_view='.server_detail',\n        related_view_kwargs={'server_id': '<server_id>'},\n        include_data=False,\n    )\n\n    class Meta:\n        type_ = 'jobs'\n\ndata = JobSchema().dump(Job.query.all(), many=True).data\n```\n\nRendering these jobs triggers an access to a job's `server` field, which triggers a SQL query to fetch the server, even though the fetched server record is never used. It would be great if marshmallow-jsonapi was able to suppress marshmallow accessing this field.\n\nAs a workaround, I can cheat the relationship, and just add a `attribute=\"id\"` to the `Relationship` constructor, which I know will always be present on the record. It's not ideal, but it works.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/28", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/28/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/28/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/28", "id": 126892665, "node_id": "MDU6SXNzdWUxMjY4OTI2NjU=", "number": 28, "title": "Support for metadata", "user": {"login": "rubdos", "id": 1263440, "node_id": "MDQ6VXNlcjEyNjM0NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1263440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rubdos", "html_url": "https://github.com/rubdos", "followers_url": "https://api.github.com/users/rubdos/followers", "following_url": "https://api.github.com/users/rubdos/following{/other_user}", "gists_url": "https://api.github.com/users/rubdos/gists{/gist_id}", "starred_url": "https://api.github.com/users/rubdos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rubdos/subscriptions", "organizations_url": "https://api.github.com/users/rubdos/orgs", "repos_url": "https://api.github.com/users/rubdos/repos", "events_url": "https://api.github.com/users/rubdos/events{/privacy}", "received_events_url": "https://api.github.com/users/rubdos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-01-15T15:17:11Z", "updated_at": "2017-01-05T11:10:22Z", "closed_at": "2017-01-05T11:10:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "As in the example on the [documentation](http://jsonapi.org/format/#document-meta), I'd like to add copyright and license information to my JSONAPI objects. It would be nice if the meta top-level objects would be supported.\n\n``` javascript\n{\n  \"meta\": {\n    \"copyright\": \"Copyright 2015 Example Corp.\",\n    \"authors\": [\n      \"Yehuda Katz\",\n      \"Steve Klabnik\",\n      \"Dan Gebhardt\",\n      \"Tyler Kellen\"\n    ]\n  },\n  \"data\": {\n    // ...\n  }\n}\n```\n\nI'm interested in doing this, any remarks before I begin?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/24", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/24/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/24/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/24", "id": 119948487, "node_id": "MDU6SXNzdWUxMTk5NDg0ODc=", "number": 24, "title": "Empty relationship", "user": {"login": "floqqi", "id": 969443, "node_id": "MDQ6VXNlcjk2OTQ0Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/969443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/floqqi", "html_url": "https://github.com/floqqi", "followers_url": "https://api.github.com/users/floqqi/followers", "following_url": "https://api.github.com/users/floqqi/following{/other_user}", "gists_url": "https://api.github.com/users/floqqi/gists{/gist_id}", "starred_url": "https://api.github.com/users/floqqi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/floqqi/subscriptions", "organizations_url": "https://api.github.com/users/floqqi/orgs", "repos_url": "https://api.github.com/users/floqqi/repos", "events_url": "https://api.github.com/users/floqqi/events{/privacy}", "received_events_url": "https://api.github.com/users/floqqi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-12-02T14:07:52Z", "updated_at": "2015-12-19T17:34:20Z", "closed_at": "2015-12-19T17:34:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "How to handle empty relationship (e.g. nullable foreign key)?\n\nCode in [line 55](https://github.com/marshmallow-code/marshmallow-jsonapi/blob/dev/marshmallow_jsonapi/flask.py#L55) currently results in:\n\n```\nwerkzeug.routing.BuildError: Could not build url for endpoint '...'. Did you forget to specify values ['...']?\n```\n\nThis is caused by an empty foreign key (-> `None` in `kwargs`) in the model of the my resource.\n\nI have to work around with\n\n``` python\nif None in kwargs.values():\n    return\n```\n\nafter [line 53](https://github.com/marshmallow-code/marshmallow-jsonapi/blob/dev/marshmallow_jsonapi/flask.py#L53).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/23", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/23/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/23/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/23", "id": 119200984, "node_id": "MDU6SXNzdWUxMTkyMDA5ODQ=", "number": 23, "title": "Validate not interpret missing values as if they were included with their current values.", "user": {"login": "Leo-G", "id": 3602061, "node_id": "MDQ6VXNlcjM2MDIwNjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3602061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Leo-G", "html_url": "https://github.com/Leo-G", "followers_url": "https://api.github.com/users/Leo-G/followers", "following_url": "https://api.github.com/users/Leo-G/following{/other_user}", "gists_url": "https://api.github.com/users/Leo-G/gists{/gist_id}", "starred_url": "https://api.github.com/users/Leo-G/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Leo-G/subscriptions", "organizations_url": "https://api.github.com/users/Leo-G/orgs", "repos_url": "https://api.github.com/users/Leo-G/repos", "events_url": "https://api.github.com/users/Leo-G/events{/privacy}", "received_events_url": "https://api.github.com/users/Leo-G/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-11-27T14:03:26Z", "updated_at": "2015-11-30T12:51:58Z", "closed_at": "2015-11-30T12:51:58Z", "author_association": "NONE", "active_lock_reason": null, "body": " As  per http://jsonapi.org/format/#crud-updating, while updating if the value is not there then it should use the current value.\n\nHow ever I am not able to achieve this, my code\n\n```\n    raw_dict = request.get_json(force=True)\n    try:\n        schema.validate(raw_dict)\n        request_dict = raw_dict['data']['attributes']\n        for key, value in request_dict.items():\n            setattr(customer, key, value)\n```\n\nNow if in the schema class i declare a field as cannot be blank, then the above code will not let me interpret the missing field as current when I do an update without the field. How do I proceed?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/22", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/22/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/22/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/22", "id": 119192108, "node_id": "MDU6SXNzdWUxMTkxOTIxMDg=", "number": 22, "title": "Inflection should be applied to relationship names in addition to attribute names.", "user": {"login": "angelosarto", "id": 1548171, "node_id": "MDQ6VXNlcjE1NDgxNzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1548171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angelosarto", "html_url": "https://github.com/angelosarto", "followers_url": "https://api.github.com/users/angelosarto/followers", "following_url": "https://api.github.com/users/angelosarto/following{/other_user}", "gists_url": "https://api.github.com/users/angelosarto/gists{/gist_id}", "starred_url": "https://api.github.com/users/angelosarto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angelosarto/subscriptions", "organizations_url": "https://api.github.com/users/angelosarto/orgs", "repos_url": "https://api.github.com/users/angelosarto/repos", "events_url": "https://api.github.com/users/angelosarto/events{/privacy}", "received_events_url": "https://api.github.com/users/angelosarto/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 259607561, "node_id": "MDU6TGFiZWwyNTk2MDc1NjE=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-27T12:56:35Z", "updated_at": "2015-12-21T05:04:13Z", "closed_at": "2015-12-21T05:04:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems as if the relationship names do not get the inflect option applied.   I wasn't sure of the best approach to a fix here - but I have a modified version of the flask_example that illustrates the issue.\nIn this case the output of calling GET on /posts will return the post object with an attribute 'some-title' and a relationship of 'some_comments'\n\n``` python\nfrom flask import Flask, url_for, jsonify as J, request\n\n### MODELS ###\n\nclass Model:\n    def __init__(self, **kwargs):\n        for key, val in kwargs.items():\n            setattr(self, key, val)\n\nclass Comment(Model):\n    pass\n\nclass Author(Model):\n    pass\n\nclass Post(Model):\n    pass\n\ndef dasherize(text):\n    return text.replace('_', '-')\n\n### MOCK DATABASE ###\n\ncomment1 = Comment(id=1, body='First!')\ncomment2 = Comment(id=2, body='I like XML better!')\n\nauthor1 = Author(id=1, first_name='Dan', last_name='Gebhardt', twitter='dgeb')\n\npost1 = Post(id=1, some_title='JSON API paints my bikeshed!',\n             author=author1, some_comments=[comment1, comment2])\n\ndb = {\n    'comments': [\n        comment1,\n        comment2\n    ],\n    'authors': [author1],\n    'posts': [post1]\n}\n\n\n### SCHEMAS ###\n\nfrom marshmallow import validate\nfrom marshmallow_jsonapi import Schema, fields\nfrom marshmallow_jsonapi.flask import Relationship\n\nclass CommentSchema(Schema):\n    id = fields.Str(dump_only=True)\n    body = fields.Str()\n\n    class Meta:\n        type_ = 'comments'\n\nclass AuthorSchema(Schema):\n    id = fields.Str(dump_only=True)\n    first_name = fields.Str(required=True)\n    last_name = fields.Str(required=True)\n    password = fields.Str(load_only=True, validate=validate.Length(6))\n    twitter = fields.Str()\n\n    def get_top_level_links(self, data, many):\n        if many:\n            self_link = url_for('authors_list', _external=True)\n        else:\n            self_link = url_for('author_detail', author_id=data['id'], _external=True)\n        return {'self': self_link}\n\n    class Meta:\n        type_ = 'people'\n\nclass PostSchema(Schema):\n    id = fields.Str(dump_only=True)\n    some_title = fields.Str()\n\n    author = Relationship(\n        related_view='author_detail',\n        related_view_kwargs={'author_id': '<author.id>', '_external': True},\n        include_data=True,\n        type_='people',\n    )\n\n    some_comments = Relationship(\n        related_view='posts_comments',\n        related_view_kwargs={'post_id': '<id>', '_external': True},\n        many=True,\n        include_data=True,\n        type_='comments'\n    )\n\n    def get_top_level_links(self, data, many):\n        if many:\n            self_link = url_for('posts_list', _external=True)\n        else:\n            self_link = url_for('posts_detail', post_id=data['id'], _external=True)\n        return {'self': self_link}\n\n    class Meta:\n        type_ = 'posts'\n        inflect = dasherize\n\n\n### VIEWS ###\n\napp = Flask(__name__)\napp.config['DEBUG'] = True\n\n@app.route('/posts/', methods=['GET'])\ndef posts_list():\n    posts = db['posts']\n    data, errs = PostSchema(many=True).dump(posts)\n    return J(data)\n\n@app.route('/posts/<int:post_id>')\ndef posts_detail(post_id):\n    post = db['posts'][post_id - 1]\n    data, errs = PostSchema().dump(post)\n    return J(data)\n\n@app.route('/posts/<int:post_id>/comments/')\ndef posts_comments(post_id):\n    post = db['posts'][post_id - 1]\n    comments = post.comments\n    data, errs = CommentSchema(many=True).dump(comments)\n    return J(data)\n\n@app.route('/authors/')\ndef authors_list():\n    author = db['authors']\n    data, errs = AuthorSchema(many=True).dump(author)\n    return J(data)\n\n@app.route('/authors/<int:author_id>')\ndef author_detail(author_id):\n    author = db['authors'][author_id - 1]\n    data, errs = AuthorSchema().dump(author)\n    return J(data)\n\n@app.route('/authors/', methods=['POST'])\ndef author_create():\n    schema = AuthorSchema()\n    input_data = request.get_json() or {}\n    data, errs = schema.load(input_data)\n    if errs:\n        return J(errs), 422\n    id_ = len(db['authors'])\n    author = Author(id=id_, **data)\n    db['authors'].append(author)\n    result = schema.dump(author)\n    return J(result.data)\n\nif __name__ == \"__main__\":\n    app.run()\n\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/21", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/21/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/21/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/21", "id": 118897031, "node_id": "MDU6SXNzdWUxMTg4OTcwMzE=", "number": 21, "title": "pre_load needs to be updated for complete deserialization", "user": {"login": "jo-tham", "id": 7353689, "node_id": "MDQ6VXNlcjczNTM2ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7353689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jo-tham", "html_url": "https://github.com/jo-tham", "followers_url": "https://api.github.com/users/jo-tham/followers", "following_url": "https://api.github.com/users/jo-tham/following{/other_user}", "gists_url": "https://api.github.com/users/jo-tham/gists{/gist_id}", "starred_url": "https://api.github.com/users/jo-tham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jo-tham/subscriptions", "organizations_url": "https://api.github.com/users/jo-tham/orgs", "repos_url": "https://api.github.com/users/jo-tham/repos", "events_url": "https://api.github.com/users/jo-tham/events{/privacy}", "received_events_url": "https://api.github.com/users/jo-tham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-11-25T18:31:51Z", "updated_at": "2016-02-09T04:14:23Z", "closed_at": "2016-02-09T04:14:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@sloria @cmanallen @micheljung\nI'm very much liking marshmallow jsonapi, but it feels like it is only useful for dumping data as a few significant issues have come up with deserialization. See:\n#15 - data from relationship (and type) fields is not loaded\n#18 - ma-jsonapi not compatible with webargs parser\n#20 - no documentation for deserialization\n\nTo focus on #15 and #18; I get the impression that the underlying problem is that the ma-jsonapi schema does not use marshmallow fields for the 1st level jsonapi objects (e.g. relationships, data)\n\nWould using [nested schemas](http://marshmallow.readthedocs.org/en/latest/nesting.html?highlight=nested#nesting-schemas) for the 1st level objects resolve these deserialization issues?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/20", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/20/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/20/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/20", "id": 118297618, "node_id": "MDU6SXNzdWUxMTgyOTc2MTg=", "number": 20, "title": "Deserializing ID", "user": {"login": "micheljung", "id": 1864183, "node_id": "MDQ6VXNlcjE4NjQxODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1864183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/micheljung", "html_url": "https://github.com/micheljung", "followers_url": "https://api.github.com/users/micheljung/followers", "following_url": "https://api.github.com/users/micheljung/following{/other_user}", "gists_url": "https://api.github.com/users/micheljung/gists{/gist_id}", "starred_url": "https://api.github.com/users/micheljung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/micheljung/subscriptions", "organizations_url": "https://api.github.com/users/micheljung/orgs", "repos_url": "https://api.github.com/users/micheljung/repos", "events_url": "https://api.github.com/users/micheljung/events{/privacy}", "received_events_url": "https://api.github.com/users/micheljung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-22T23:20:36Z", "updated_at": "2016-02-09T04:15:04Z", "closed_at": "2016-02-09T04:15:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Deserializing a json-api object currently only gives you all 'attributes'. Since ID is not in there, it's not accessible. The documentation does not cover deserialization at all :-(\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/18", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/18/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/18/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/18", "id": 118231999, "node_id": "MDU6SXNzdWUxMTgyMzE5OTk=", "number": 18, "title": "marshmallow-jsonapi as argmap/schema for webargs parser", "user": {"login": "jo-tham", "id": 7353689, "node_id": "MDQ6VXNlcjczNTM2ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7353689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jo-tham", "html_url": "https://github.com/jo-tham", "followers_url": "https://api.github.com/users/jo-tham/followers", "following_url": "https://api.github.com/users/jo-tham/following{/other_user}", "gists_url": "https://api.github.com/users/jo-tham/gists{/gist_id}", "starred_url": "https://api.github.com/users/jo-tham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jo-tham/subscriptions", "organizations_url": "https://api.github.com/users/jo-tham/orgs", "repos_url": "https://api.github.com/users/jo-tham/repos", "events_url": "https://api.github.com/users/jo-tham/events{/privacy}", "received_events_url": "https://api.github.com/users/jo-tham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2015-11-22T01:23:48Z", "updated_at": "2016-11-06T22:07:18Z", "closed_at": "2016-02-09T04:14:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I tried to use a marshmallow-jsonapi schema for webargs parser and get the following errors\n\nI am trying this, but \n\n```\n> curl -i -H \"Content-type:application/json\" -X POST -d '{ \"data\": { \"attributes\": { \"nickname\": \"two\" }, \"type\": \"user\" }}' http://localhost:5000/api/v1/users\nHTTP/1.0 422 UNPROCESSABLE ENTITY\nContent-Type: application/json\nContent-Length: 146\nContent-Length: 215\nServer: Werkzeug/0.10.4 Python/3.5.0\nDate: Sun, 22 Nov 2015 00:35:08 GMT\n\n{\n    \"message\": {\n        \"errors\": [\n            \"Object must include `data` key.\"\n        ]\n    },\n    \"status\": 422,\n    \"title\": \"Invalid\"\n}\n```\n\nAny suggestions?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/17", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/17/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/17/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/17", "id": 117237779, "node_id": "MDU6SXNzdWUxMTcyMzc3Nzk=", "number": 17, "title": "Missing support for \"links\" object", "user": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars3.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-16T22:50:51Z", "updated_at": "2016-02-09T04:15:43Z", "closed_at": "2016-02-09T04:15:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "`marshmallow-jsonapi` is great, but it appears to be missing support for the [document links object](http://jsonapi.org/format/#document-links). I've hacked this into a schema with:\n\n``` python\nclass JiraSchema(Schema):\n  def get_links(self, item):\n    return {\n      'self': api.url_for(Jira, jira_id=item['id'], _external=True),\n    }\n\n  def format_items(self, item, many):\n    ret = super(JiraSchema, self).format_items(item, many)\n    if many:\n      for doc in ret:\n        doc['links'] = self.get_links(doc)\n\n    return ret\n\n  def get_top_level_links(self, data, many):\n    if many:\n      self_link = api.url_for(Jiras, _external=True)\n    else:\n      self_link = api.url_for(Jira, jira_id=data['id'], _external=True)\n\n    return { 'self': self_link }\n```\n\nBut it'd be nice if there was formal support for it.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/15", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/15/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/15/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/15", "id": 116431613, "node_id": "MDU6SXNzdWUxMTY0MzE2MTM=", "number": 15, "title": "Loading data from a relationship field", "user": {"login": "cmanallen", "id": 6018782, "node_id": "MDQ6VXNlcjYwMTg3ODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6018782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmanallen", "html_url": "https://github.com/cmanallen", "followers_url": "https://api.github.com/users/cmanallen/followers", "following_url": "https://api.github.com/users/cmanallen/following{/other_user}", "gists_url": "https://api.github.com/users/cmanallen/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmanallen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmanallen/subscriptions", "organizations_url": "https://api.github.com/users/cmanallen/orgs", "repos_url": "https://api.github.com/users/cmanallen/repos", "events_url": "https://api.github.com/users/cmanallen/events{/privacy}", "received_events_url": "https://api.github.com/users/cmanallen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-11T22:07:27Z", "updated_at": "2016-02-09T04:14:30Z", "closed_at": "2016-02-09T04:14:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to load data from a relationship field:\n\nRequest:\n\n``` python\n\"data\": {\n    \"attributes\": {},\n    \"relationships\": {\n        \"upload\": {\n            \"data\": {\"type\": \"uploads\", \"id\": \"1\"}\n        }\n    }\n}\n```\n\nSchema:\n\n``` python\nupload = fields.Relationship(include_data=True, type_='uploads')\n```\n\nHow do I access the value of the upload relationship.\n\nI'm looking at this section of the JSON API spec (http://jsonapi.org/format/#crud-creating).  It seems to support this form of relationship loading.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/13", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/13/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/13/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/13", "id": 112976358, "node_id": "MDU6SXNzdWUxMTI5NzYzNTg=", "number": 13, "title": "Load schema with only=str gives empty UnmarshalResult ", "user": {"login": "erlingbo", "id": 16657, "node_id": "MDQ6VXNlcjE2NjU3", "avatar_url": "https://avatars3.githubusercontent.com/u/16657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erlingbo", "html_url": "https://github.com/erlingbo", "followers_url": "https://api.github.com/users/erlingbo/followers", "following_url": "https://api.github.com/users/erlingbo/following{/other_user}", "gists_url": "https://api.github.com/users/erlingbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/erlingbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erlingbo/subscriptions", "organizations_url": "https://api.github.com/users/erlingbo/orgs", "repos_url": "https://api.github.com/users/erlingbo/repos", "events_url": "https://api.github.com/users/erlingbo/events{/privacy}", "received_events_url": "https://api.github.com/users/erlingbo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-10-23T08:30:34Z", "updated_at": "2015-10-23T09:26:47Z", "closed_at": "2015-10-23T09:24:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using a schema with the only attribute set to a string, the load method returns UnmarshalResult without errors nor data.\n\n```\nclass MySchema(Schema):\n    class Meta:\n        fields = ('pk',)\n\n    pk = fields.String()\n\nMySchema(only='pk').load('an_id1234')\nMySchema(only='pk').load({'pk': 'an_id1234'})\n```\n\nBoth return the same UnmarshalResult\n`UnmarshalResult(data={}, errors={})`\n\nPreferably the first should work, but the second could be used with a pre load method on the schema class.\n\nIs there anything I have done wrong or is this a bug?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/11", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/11/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/11/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/11", "id": 111863841, "node_id": "MDU6SXNzdWUxMTE4NjM4NDE=", "number": 11, "title": "How to implement JSON API Compound Document", "user": {"login": "thedrew12", "id": 15160724, "node_id": "MDQ6VXNlcjE1MTYwNzI0", "avatar_url": "https://avatars0.githubusercontent.com/u/15160724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrew12", "html_url": "https://github.com/thedrew12", "followers_url": "https://api.github.com/users/thedrew12/followers", "following_url": "https://api.github.com/users/thedrew12/following{/other_user}", "gists_url": "https://api.github.com/users/thedrew12/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrew12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrew12/subscriptions", "organizations_url": "https://api.github.com/users/thedrew12/orgs", "repos_url": "https://api.github.com/users/thedrew12/repos", "events_url": "https://api.github.com/users/thedrew12/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrew12/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-10-16T16:21:00Z", "updated_at": "2018-05-27T20:51:24Z", "closed_at": "2018-05-27T20:51:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "http://jsonapi.org/format/#document-compound-documents\n\nIs there a way to do this? I want to use the top-level `included` member. Similar to this example:\n\n``` python\n{\n  \"data\": [{\n    \"type\": \"articles\",\n    \"id\": \"1\",\n    \"attributes\": {\n      \"title\": \"JSON API paints my bikeshed!\"\n    },\n    \"links\": {\n      \"self\": \"http://example.com/articles/1\"\n    },\n    \"relationships\": {\n      \"author\": {\n        \"links\": {\n          \"self\": \"http://example.com/articles/1/relationships/author\",\n          \"related\": \"http://example.com/articles/1/author\"\n        },\n        \"data\": { \"type\": \"people\", \"id\": \"9\" }\n      },\n      \"comments\": {\n        \"links\": {\n          \"self\": \"http://example.com/articles/1/relationships/comments\",\n          \"related\": \"http://example.com/articles/1/comments\"\n        },\n        \"data\": [\n          { \"type\": \"comments\", \"id\": \"5\" },\n          { \"type\": \"comments\", \"id\": \"12\" }\n        ]\n      }\n    }\n  }],\n  \"included\": [{\n    \"type\": \"people\",\n    \"id\": \"9\",\n    \"attributes\": {\n      \"first-name\": \"Dan\",\n      \"last-name\": \"Gebhardt\",\n      \"twitter\": \"dgeb\"\n    },\n    \"links\": {\n      \"self\": \"http://example.com/people/9\"\n    }\n  }, {\n    \"type\": \"comments\",\n    \"id\": \"5\",\n    \"attributes\": {\n      \"body\": \"First!\"\n    },\n  }]\n}\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/10", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/10/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/10/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/10", "id": 110187219, "node_id": "MDU6SXNzdWUxMTAxODcyMTk=", "number": 10, "title": "relations one-to-one with None value", "user": {"login": "jklapuch", "id": 9129066, "node_id": "MDQ6VXNlcjkxMjkwNjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/9129066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jklapuch", "html_url": "https://github.com/jklapuch", "followers_url": "https://api.github.com/users/jklapuch/followers", "following_url": "https://api.github.com/users/jklapuch/following{/other_user}", "gists_url": "https://api.github.com/users/jklapuch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jklapuch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jklapuch/subscriptions", "organizations_url": "https://api.github.com/users/jklapuch/orgs", "repos_url": "https://api.github.com/users/jklapuch/repos", "events_url": "https://api.github.com/users/jklapuch/events{/privacy}", "received_events_url": "https://api.github.com/users/jklapuch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-07T09:39:59Z", "updated_at": "2015-11-23T04:18:53Z", "closed_at": "2015-11-23T04:18:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nIs schema.dump() works, when relationship \"author\" is None? I need it for another database schema. Generaly some one-to-one, or many-to-one relationships may be None or null (db) and dump function should return something like:\n\n```\n....\n\"relationship\":{\n    \"author\":{\n        \"data\":null\n    }\n}\n```\n\nright?\n\nI have exception:\n\n```\ndata, errors = serializer.dump(post)\nFile \"C:\\Python27\\lib\\site-packages\\marshmallow\\marshalling.py\", line 140, in serialize\nindex=(index if index_errors else None)\nFile \"C:\\Python27\\lib\\site-packages\\marshmallow\\marshalling.py\", line 63, in call_and_store\nvalue = getter_func(data)\nFile \"C:\\Python27\\lib\\site-packages\\marshmallow\\marshalling.py\", line 134, in <lambda>\ngetter = lambda d: field_obj.serialize(attr_name, d, accessor=accessor)\nFile \"C:\\Python27\\lib\\site-packages\\marshmallow\\fields.py\", line 258, in serialize\nreturn self._serialize(value, attr, obj)\nFile \"C:\\Python27\\lib\\site-packages\\marshmallow_jsonapi\\fields.py\", line 88, in _serialize\nret[attr]['links']['related'] = self.get_url(obj)\nFile \"C:\\Python27\\lib\\site-packages\\marshmallow_jsonapi\\flask.py\", line 39, in get_url\nkwargs = resolve_params(obj, self.url_kwargs)\nFile \"C:\\Python27\\lib\\site-packages\\marshmallow_jsonapi\\utils.py\", line 33, in resolve_params\n'attribute of {obj!r}'.format(attr_name=attr_name, obj=obj)\nAttributeError: 'author.id' is not a valid attribute of <app.models.post.Post object at 0x05721B70>\n```\n\nI think my proble is somewhere in function\n\n```\ndef _serialize(self, value, attr, obj):\n...\n```\n\nwhere \"value\" is None and relationship id in \"obj\" is also None\n\nWhat about:\n\n```\ndef _serialize(self, value, attr, obj):\n    dict_class = self.parent.dict_class if self.parent else dict\n    ret = dict_class()\n    ret[attr] = dict_class()\n    if value is not None: <---- new line\n        ret[attr]['links'] = dict_class()\n        ret[attr]['links']['related'] = self.get_url(obj)\n        if self.include_data:\n            ret[attr]['data'] = self.add_resource_linkage(value)\n    return ret\n```\n\nhttps://github.com/marshmallow-code/marshmallow-jsonapi/blob/master/marshmallow_jsonapi/fields.py\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/9", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/9/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/9/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/9", "id": 108645961, "node_id": "MDU6SXNzdWUxMDg2NDU5NjE=", "number": 9, "title": "If a request does not include all of the attributes for a resource, the server MUST interpret the missing attributes as if they were included with their current values. ", "user": {"login": "Leo-G", "id": 3602061, "node_id": "MDQ6VXNlcjM2MDIwNjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3602061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Leo-G", "html_url": "https://github.com/Leo-G", "followers_url": "https://api.github.com/users/Leo-G/followers", "following_url": "https://api.github.com/users/Leo-G/following{/other_user}", "gists_url": "https://api.github.com/users/Leo-G/gists{/gist_id}", "starred_url": "https://api.github.com/users/Leo-G/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Leo-G/subscriptions", "organizations_url": "https://api.github.com/users/Leo-G/orgs", "repos_url": "https://api.github.com/users/Leo-G/repos", "events_url": "https://api.github.com/users/Leo-G/events{/privacy}", "received_events_url": "https://api.github.com/users/Leo-G/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 259607566, "node_id": "MDU6TGFiZWwyNTk2MDc1NjY=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-09-28T12:16:01Z", "updated_at": "2018-05-31T20:34:17Z", "closed_at": "2018-05-31T20:34:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am struggling to implement this my code \n\n```\n      def patch(self, id):\n             user = Users.query.get_or_404(id)\n             raw_dict = request.get_json(force=True)\n             user_dict = raw_dict['data']['attributes']\n             try:\n                 for key, value in user_dict.items():\n                 schema.validate({key:value})\n                 setattr(user, key, value)\n\n             user.update()            \n             return self.get(id)\n```\n\nComplete code at https://github.com/Leo-G/Flask-CRUD-API/blob/master/app/users/views.py\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/8", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/8/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/8/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/8", "id": 108483263, "node_id": "MDU6SXNzdWUxMDg0ODMyNjM=", "number": 8, "title": "Doesn't work with marshmallow 2.0", "user": {"login": "alapshin", "id": 321946, "node_id": "MDQ6VXNlcjMyMTk0Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/321946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alapshin", "html_url": "https://github.com/alapshin", "followers_url": "https://api.github.com/users/alapshin/followers", "following_url": "https://api.github.com/users/alapshin/following{/other_user}", "gists_url": "https://api.github.com/users/alapshin/gists{/gist_id}", "starred_url": "https://api.github.com/users/alapshin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alapshin/subscriptions", "organizations_url": "https://api.github.com/users/alapshin/orgs", "repos_url": "https://api.github.com/users/alapshin/repos", "events_url": "https://api.github.com/users/alapshin/events{/privacy}", "received_events_url": "https://api.github.com/users/alapshin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-26T17:42:09Z", "updated_at": "2015-09-26T23:01:22Z", "closed_at": "2015-09-26T23:01:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looks like `plain_function` was removed from `marshmallow.compat`: https://github.com/marshmallow-code/marshmallow/commit/dbc339fc16b08bb933b735e4ad13c44e29bfa6d0\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/7", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/7/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/7/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/7", "id": 108134742, "node_id": "MDU6SXNzdWUxMDgxMzQ3NDI=", "number": 7, "title": "How do I add self links", "user": {"login": "Leo-G", "id": 3602061, "node_id": "MDQ6VXNlcjM2MDIwNjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3602061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Leo-G", "html_url": "https://github.com/Leo-G", "followers_url": "https://api.github.com/users/Leo-G/followers", "following_url": "https://api.github.com/users/Leo-G/following{/other_user}", "gists_url": "https://api.github.com/users/Leo-G/gists{/gist_id}", "starred_url": "https://api.github.com/users/Leo-G/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Leo-G/subscriptions", "organizations_url": "https://api.github.com/users/Leo-G/orgs", "repos_url": "https://api.github.com/users/Leo-G/repos", "events_url": "https://api.github.com/users/Leo-G/events{/privacy}", "received_events_url": "https://api.github.com/users/Leo-G/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-09-24T13:54:22Z", "updated_at": "2015-09-28T11:39:59Z", "closed_at": "2015-09-28T11:39:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see a function \n      def get_top_level_links(self, data, many):\n        \"\"\"Hook for adding links to the root of the response data.\"\"\"\n        return None\n\nBut i am not sure how to use it to get self links, any help will be apreciated?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/6", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/6/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/6/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/6", "id": 107939847, "node_id": "MDU6SXNzdWUxMDc5Mzk4NDc=", "number": 6, "title": "\"Type\" validation?", "user": {"login": "taion", "id": 3112159, "node_id": "MDQ6VXNlcjMxMTIxNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3112159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taion", "html_url": "https://github.com/taion", "followers_url": "https://api.github.com/users/taion/followers", "following_url": "https://api.github.com/users/taion/following{/other_user}", "gists_url": "https://api.github.com/users/taion/gists{/gist_id}", "starred_url": "https://api.github.com/users/taion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taion/subscriptions", "organizations_url": "https://api.github.com/users/taion/orgs", "repos_url": "https://api.github.com/users/taion/repos", "events_url": "https://api.github.com/users/taion/events{/privacy}", "received_events_url": "https://api.github.com/users/taion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-09-23T15:01:33Z", "updated_at": "2015-10-06T14:46:38Z", "closed_at": "2015-10-06T06:08:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Do you plan to validate item `type`s as part of your schema definition? The JSON API spec requires raising a 409 when there is a `type` mismatch. A nice way to handle this might be with a custom exception type (that subclasses `ValueError` instead of `ValidationError`) that applications can catch and re-raise as a 409 (it'd be a bit tricker to figure this out from a generic `ValidationError`).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/4", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/4/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/4/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/4", "id": 107910607, "node_id": "MDU6SXNzdWUxMDc5MTA2MDc=", "number": 4, "title": "Can this be available in Marshmallow itself?", "user": {"login": "Leo-G", "id": 3602061, "node_id": "MDQ6VXNlcjM2MDIwNjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3602061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Leo-G", "html_url": "https://github.com/Leo-G", "followers_url": "https://api.github.com/users/Leo-G/followers", "following_url": "https://api.github.com/users/Leo-G/following{/other_user}", "gists_url": "https://api.github.com/users/Leo-G/gists{/gist_id}", "starred_url": "https://api.github.com/users/Leo-G/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Leo-G/subscriptions", "organizations_url": "https://api.github.com/users/Leo-G/orgs", "repos_url": "https://api.github.com/users/Leo-G/repos", "events_url": "https://api.github.com/users/Leo-G/events{/privacy}", "received_events_url": "https://api.github.com/users/Leo-G/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-23T12:40:37Z", "updated_at": "2015-09-23T13:05:27Z", "closed_at": "2015-09-23T13:05:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Its a pain to look at the docs of two libraries and troubleshoot issues, can this be included a method of schema in marhmallow?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/2", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/2/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/2/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/2", "id": 106188791, "node_id": "MDU6SXNzdWUxMDYxODg3OTE=", "number": 2, "title": "Support inflection of attribute names", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-12T22:43:24Z", "updated_at": "2015-09-14T04:56:07Z", "closed_at": "2015-09-14T04:56:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "...for those that want to abide by JSON API's recommendation for dasherized attribute names.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/1", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/1/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-jsonapi/issues/1/events", "html_url": "https://github.com/marshmallow-code/marshmallow-jsonapi/issues/1", "id": 106188773, "node_id": "MDU6SXNzdWUxMDYxODg3NzM=", "number": 1, "title": "Support for Django", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-12T22:42:46Z", "updated_at": "2018-05-27T20:48:33Z", "closed_at": "2018-05-27T20:48:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It would be relatively straightforward to implement `HyperlinkRelated` for Django (and other frameworks). \n", "performed_via_github_app": null, "score": 1.0}]}