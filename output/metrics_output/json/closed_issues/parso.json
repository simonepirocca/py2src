{"total_count": 69, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/davidhalter/parso/issues/148", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/148/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/148/events", "html_url": "https://github.com/davidhalter/parso/issues/148", "id": 678806838, "node_id": "MDU6SXNzdWU2Nzg4MDY4Mzg=", "number": 148, "title": "Version 0.8.0 doesn't work correctly with ipython auto-complete methods", "user": {"login": "erykoff", "id": 5167891, "node_id": "MDQ6VXNlcjUxNjc4OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5167891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erykoff", "html_url": "https://github.com/erykoff", "followers_url": "https://api.github.com/users/erykoff/followers", "following_url": "https://api.github.com/users/erykoff/following{/other_user}", "gists_url": "https://api.github.com/users/erykoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/erykoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erykoff/subscriptions", "organizations_url": "https://api.github.com/users/erykoff/orgs", "repos_url": "https://api.github.com/users/erykoff/repos", "events_url": "https://api.github.com/users/erykoff/events{/privacy}", "received_events_url": "https://api.github.com/users/erykoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-08-13T23:54:35Z", "updated_at": "2020-08-14T21:54:47Z", "closed_at": "2020-08-14T21:54:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was having some issues with `ipython` (latest) 7.17 autocomplete, namely that it could not expand methods in modules/classes, and I tracked it down to `parso=0.8.0`.  In particular, to see the problem:\r\n\r\n```\r\nconda create -c conda-forge -n ipy717 ipython=7.17 numpy\r\n```\r\n(As of August 13th, this will install `parso=0.8.0`).\r\n\r\nThen after `conda activate ipy171` if you fire up `ipython` and then `import numpy` you can't auto-complete anything in `numpy`.  After running `conda install -c conda-forge parso=0.7` then everything works as expected.\r\n\r\nI'm not sure if this is a `parso` problem or an `ipython` problem, however.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/147", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/147/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/147/events", "html_url": "https://github.com/davidhalter/parso/issues/147", "id": 671577514, "node_id": "MDU6SXNzdWU2NzE1Nzc1MTQ=", "number": 147, "title": "Confusing returned value for get_leaf_for_position", "user": {"login": "marcglobality", "id": 63643283, "node_id": "MDQ6VXNlcjYzNjQzMjgz", "avatar_url": "https://avatars1.githubusercontent.com/u/63643283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcglobality", "html_url": "https://github.com/marcglobality", "followers_url": "https://api.github.com/users/marcglobality/followers", "following_url": "https://api.github.com/users/marcglobality/following{/other_user}", "gists_url": "https://api.github.com/users/marcglobality/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcglobality/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcglobality/subscriptions", "organizations_url": "https://api.github.com/users/marcglobality/orgs", "repos_url": "https://api.github.com/users/marcglobality/repos", "events_url": "https://api.github.com/users/marcglobality/events{/privacy}", "received_events_url": "https://api.github.com/users/marcglobality/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 600765137, "node_id": "MDU6TGFiZWw2MDA3NjUxMzc=", "url": "https://api.github.com/repos/davidhalter/parso/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-02T08:40:00Z", "updated_at": "2020-08-06T14:54:46Z", "closed_at": "2020-08-04T14:29:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfile_contents = \"\"\"\r\ndef foo(x):\r\n    pass\r\n\r\n\"\"\"\r\nmodule = parso.parse(file_contents)\r\nfoo = module.children[0]\r\nprint(foo.get_params())\r\n# [<Param: <Name: x@2,8>>]\r\nmodule.get_leaf_for_position((2, 8)), module.get_leaf_for_position((2, 9))\r\n# (<Operator: (>, <Name: x@2,8>)\r\n```\r\n\r\nIs this a bug? I would expect calling `get_leaf_for_position(pos)` returning `x`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/144", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/144/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/144/events", "html_url": "https://github.com/davidhalter/parso/issues/144", "id": 663296102, "node_id": "MDU6SXNzdWU2NjMyOTYxMDI=", "number": 144, "title": "Internal type annotations?", "user": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-21T20:43:13Z", "updated_at": "2020-07-21T21:55:34Z", "closed_at": "2020-07-21T21:55:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Would there be interest in adding type annotations within parso?\r\n\r\nI realise the codebase currently supports Python 2.7 still, which would complicate things a bit, though I think this could help both catch some errors and also make it a bit easier for newcomers to navigate the code.\r\n\r\nThis feels like it could help with type annotating Jedi (discussion at https://github.com/davidhalter/jedi/issues/1533).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/142", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/142/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/142/events", "html_url": "https://github.com/davidhalter/parso/issues/142", "id": 648460886, "node_id": "MDU6SXNzdWU2NDg0NjA4ODY=", "number": 142, "title": "Detect alpha, beta and rc versions of Python", "user": {"login": "Carreau", "id": 335567, "node_id": "MDQ6VXNlcjMzNTU2Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Carreau", "html_url": "https://github.com/Carreau", "followers_url": "https://api.github.com/users/Carreau/followers", "following_url": "https://api.github.com/users/Carreau/following{/other_user}", "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions", "organizations_url": "https://api.github.com/users/Carreau/orgs", "repos_url": "https://api.github.com/users/Carreau/repos", "events_url": "https://api.github.com/users/Carreau/events{/privacy}", "received_events_url": "https://api.github.com/users/Carreau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-30T20:10:22Z", "updated_at": "2020-07-01T08:14:41Z", "closed_at": "2020-07-01T08:14:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nIn [1]: from parso.utils import parse_version_string\r\n\r\nIn [2]: parse_version_string('3.10.0a0')\r\n\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-2-70c767a0d0a3> in <module>\r\n----> 1 parse_version_string('3.10.0a0')\r\n\r\n~/dev/parso/parso/utils.py in parse_version_string(version)\r\n    183         raise TypeError('version must be a string like \"3.8\"')\r\n    184\r\n--> 185     return _parse_version(version)\r\n\r\n~/dev/parso/parso/utils.py in _parse_version(version)\r\n    132     match = re.match(r'(\\d+)(?:\\.(\\d{1,2})(?:\\.\\d+)?)?$', version)\r\n    133     if match is None:\r\n--> 134         raise ValueError('The given version is not in the right format. '\r\n    135                          'Use something like \"3.8\" or \"3\".')\r\n    136\r\n\r\nValueError: The given version is not in the right format. Use something like \"3.8\" or \"3\".\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/139", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/139/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/139/events", "html_url": "https://github.com/davidhalter/parso/issues/139", "id": 646508681, "node_id": "MDU6SXNzdWU2NDY1MDg2ODE=", "number": 139, "title": "Syntax error in async for comprehension depending on newline", "user": {"login": "Kazy", "id": 59063, "node_id": "MDQ6VXNlcjU5MDYz", "avatar_url": "https://avatars3.githubusercontent.com/u/59063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kazy", "html_url": "https://github.com/Kazy", "followers_url": "https://api.github.com/users/Kazy/followers", "following_url": "https://api.github.com/users/Kazy/following{/other_user}", "gists_url": "https://api.github.com/users/Kazy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kazy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kazy/subscriptions", "organizations_url": "https://api.github.com/users/Kazy/orgs", "repos_url": "https://api.github.com/users/Kazy/repos", "events_url": "https://api.github.com/users/Kazy/events{/privacy}", "received_events_url": "https://api.github.com/users/Kazy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 600765132, "node_id": "MDU6TGFiZWw2MDA3NjUxMzI=", "url": "https://api.github.com/repos/davidhalter/parso/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}, {"id": 600765135, "node_id": "MDU6TGFiZWw2MDA3NjUxMzU=", "url": "https://api.github.com/repos/davidhalter/parso/labels/help%20wanted", "name": "help wanted", "color": "128A0C", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-26T20:59:16Z", "updated_at": "2020-06-29T17:01:54Z", "closed_at": "2020-06-29T17:01:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nUsing the latest master of `parso`, with Python 3.7.6, in an async for comprehension, it reports a `SyntaxError` depending on whether or not there is a newline before `]` (in the case of a list comprehension).\r\n\r\nThis is accepted:\r\n```python\r\nasync def go():\r\n    return [1 \r\n        async for _ in range(5)]\r\n```\r\n\r\nBut this isn't even though CPython is fine with it:\r\n```python\r\nasync def go():\r\n    return [1 \r\n        async for _ in range(5)\r\n    ]\r\n```\r\n\r\nI first experienced it with Jedi and I've reproduced it in `parso` like this:\r\n```python\r\nimport parso\r\n\r\nscript_success = \"\"\"\r\nasync def go():\r\n    return [1 async for _ in range(5)]\r\n\"\"\"\r\n\r\nscript_success_2 = \"\"\"\r\nasync def go():\r\n    return [1 \r\n        async for _ in range(5)]\r\n\"\"\"\r\n\r\nscript_fail = \"\"\"\r\nasync def go():\r\n    return [1 \r\n        async for _ in range(5)\r\n    ]\r\n\"\"\"\r\n\r\ngrammar = parso.load_grammar()\r\nfor module in map(grammar.parse, [script_success, script_success_2, script_fail]):\r\n    errors = grammar.iter_errors(module)\r\n    print(errors)\r\n    for err in errors:\r\n        print(err.message)\r\n\r\n# Output:\r\n# []\r\n# []\r\n# [<Issue: 901>, <Issue: 901>]\r\n# SyntaxError: invalid syntax\r\n# SyntaxError: invalid syntax\r\n```\r\n\r\n\r\nThanks !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/134", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/134/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/134/events", "html_url": "https://github.com/davidhalter/parso/issues/134", "id": 629404205, "node_id": "MDU6SXNzdWU2Mjk0MDQyMDU=", "number": 134, "title": "Providing a built-in Cython Grammar", "user": {"login": "isidentical", "id": 47358913, "node_id": "MDQ6VXNlcjQ3MzU4OTEz", "avatar_url": "https://avatars3.githubusercontent.com/u/47358913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isidentical", "html_url": "https://github.com/isidentical", "followers_url": "https://api.github.com/users/isidentical/followers", "following_url": "https://api.github.com/users/isidentical/following{/other_user}", "gists_url": "https://api.github.com/users/isidentical/gists{/gist_id}", "starred_url": "https://api.github.com/users/isidentical/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isidentical/subscriptions", "organizations_url": "https://api.github.com/users/isidentical/orgs", "repos_url": "https://api.github.com/users/isidentical/repos", "events_url": "https://api.github.com/users/isidentical/events{/privacy}", "received_events_url": "https://api.github.com/users/isidentical/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 600765134, "node_id": "MDU6TGFiZWw2MDA3NjUxMzQ=", "url": "https://api.github.com/repos/davidhalter/parso/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-02T17:59:46Z", "updated_at": "2020-06-17T20:01:27Z", "closed_at": "2020-06-17T20:01:27Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Cython is well known and a well-used extension/superset of python which uses a slightly extended grammar, but similar. They [already have](https://github.com/cython/cython/blob/master/Cython/Parser/Grammar) a grammar that can be parsed by pgen2. The real question is that would it benefit the Jedi / or any other client of this library to have a first-class support for it? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/133", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/133/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/133/events", "html_url": "https://github.com/davidhalter/parso/issues/133", "id": 628391144, "node_id": "MDU6SXNzdWU2MjgzOTExNDQ=", "number": 133, "title": "Syntax error when using starred expressions in list and set displays", "user": {"login": "eugenhu", "id": 16740189, "node_id": "MDQ6VXNlcjE2NzQwMTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/16740189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eugenhu", "html_url": "https://github.com/eugenhu", "followers_url": "https://api.github.com/users/eugenhu/followers", "following_url": "https://api.github.com/users/eugenhu/following{/other_user}", "gists_url": "https://api.github.com/users/eugenhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/eugenhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eugenhu/subscriptions", "organizations_url": "https://api.github.com/users/eugenhu/orgs", "repos_url": "https://api.github.com/users/eugenhu/repos", "events_url": "https://api.github.com/users/eugenhu/events{/privacy}", "received_events_url": "https://api.github.com/users/eugenhu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-01T04:46:19Z", "updated_at": "2020-06-05T10:58:15Z", "closed_at": "2020-06-05T10:58:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not very familiar with how jedi works, I've just been using a vim plugin that uses jedi for python auto-completions.\r\n\r\nBut I think I've noticed a bug with jedi flagging starred expressions in list and set displays as syntax errors,\r\n```python\r\n>>> jedi.Script(\"[*(1,2,3)]\").get_syntax_errors()\r\n[<SyntaxError from=(1, 1) to=(1, 9)>]\r\n>>> jedi.Script(\"{*(1,2,3)}\").get_syntax_errors()\r\n[<SyntaxError from=(1, 1) to=(1, 9)>]\r\n```\r\n\r\nIf the starred expression is not the only item in the list, or if there is a trailing comma, there are no syntax errors,\r\n```python\r\n>>> jedi.Script(\"[*(1,2,3),]\").get_syntax_errors()\r\n[]\r\n>>> jedi.Script(\"[*(1,2,3), *(4,5,6)]\").get_syntax_errors()\r\n[]\r\n>>> jedi.Script(\"[0, *(1,2,3)]\").get_syntax_errors()\r\n[]\r\n```\r\n\r\nHowever, it seems like using a starred expression in a set always gives a syntax error,\r\n```python\r\n>>> jedi.Script(\"{*(1,2,3),}\").get_syntax_errors()\r\n[<SyntaxError from=(1, 1) to=(1, 9)>]\r\n>>> jedi.Script(\"{*(1,2,3), *(4,5,6)}\").get_syntax_errors()\r\n[<SyntaxError from=(1, 1) to=(1, 9)>]\r\n>>> jedi.Script(\"{0, *(4,5,6)}\").get_syntax_errors()\r\n[<SyntaxError from=(1, 4) to=(1, 12)>]\r\n```\r\n\r\nIm using Python 3.8.2,\r\n```python\r\n>>> jedi.Script(\"\")\r\n<Script: None <SameEnvironment: 3.8.2 in /usr>>\r\n```\r\nand my jedi version is\r\n```python\r\n>>> jedi.__version__\r\n'0.17.0'\r\n```\r\n\r\nUnpacking in lists and sets should be allowed since Python 3.5 I think, see [PEP 448](https://www.python.org/dev/peps/pep-0448/).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/128", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/128/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/128/events", "html_url": "https://github.com/davidhalter/parso/issues/128", "id": 624500226, "node_id": "MDU6SXNzdWU2MjQ1MDAyMjY=", "number": 128, "title": "Can't parse extended RHS for annotated assignments", "user": {"login": "isidentical", "id": 47358913, "node_id": "MDQ6VXNlcjQ3MzU4OTEz", "avatar_url": "https://avatars3.githubusercontent.com/u/47358913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isidentical", "html_url": "https://github.com/isidentical", "followers_url": "https://api.github.com/users/isidentical/followers", "following_url": "https://api.github.com/users/isidentical/following{/other_user}", "gists_url": "https://api.github.com/users/isidentical/gists{/gist_id}", "starred_url": "https://api.github.com/users/isidentical/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isidentical/subscriptions", "organizations_url": "https://api.github.com/users/isidentical/orgs", "repos_url": "https://api.github.com/users/isidentical/repos", "events_url": "https://api.github.com/users/isidentical/events{/privacy}", "received_events_url": "https://api.github.com/users/isidentical/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-25T22:00:50Z", "updated_at": "2020-05-25T22:13:47Z", "closed_at": "2020-05-25T22:13:47Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "(this usage is legit in 3.8+)\r\n```\r\n(.venv) (Python 3.10.0a0) [  1:00\u00d6\u00d6 ]  [ isidentical@x200:~/parso(master\u2714) ]\r\n $ python\r\nPython 3.10.0a0 (heads/bpo-xxxxx:f2947e354c, May 21 2020, 18:54:57) \r\n[GCC 9.2.1 20191008] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> parso.parse(\"x: Tuple[int, ...] = a,*b,c\").children\r\n[<PythonErrorNode: x: Tuple[int, ...] = a@1,0>, <PythonErrorLeaf: OP:',', (1, 22)>, PythonNode(testlist_star_expr, [PythonNode(star_expr, [<Operator: *>, <Name: b@1,24>]), <Operator: ,>, <Name: c@1,26>]), <EndMarker: prefix='' end_pos=(1, 27)>]\r\n>>> ast.parse(\"x: Tuple[int, ...] = a,*b,c\")\r\n<ast.Module object at 0x7f1034c53050>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/126", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/126/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/126/events", "html_url": "https://github.com/davidhalter/parso/issues/126", "id": 624420940, "node_id": "MDU6SXNzdWU2MjQ0MjA5NDA=", "number": 126, "title": "Correctly distinguish dict/sets", "user": {"login": "isidentical", "id": 47358913, "node_id": "MDQ6VXNlcjQ3MzU4OTEz", "avatar_url": "https://avatars3.githubusercontent.com/u/47358913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isidentical", "html_url": "https://github.com/isidentical", "followers_url": "https://api.github.com/users/isidentical/followers", "following_url": "https://api.github.com/users/isidentical/following{/other_user}", "gists_url": "https://api.github.com/users/isidentical/gists{/gist_id}", "starred_url": "https://api.github.com/users/isidentical/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isidentical/subscriptions", "organizations_url": "https://api.github.com/users/isidentical/orgs", "repos_url": "https://api.github.com/users/isidentical/repos", "events_url": "https://api.github.com/users/isidentical/events{/privacy}", "received_events_url": "https://api.github.com/users/isidentical/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 600765135, "node_id": "MDU6TGFiZWw2MDA3NjUxMzU=", "url": "https://api.github.com/repos/davidhalter/parso/labels/help%20wanted", "name": "help wanted", "color": "128A0C", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-25T17:49:16Z", "updated_at": "2020-05-27T11:05:40Z", "closed_at": "2020-05-27T11:05:40Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I was checking the `check_assignment` function and then noticed it isn't able to detect dict/sets fully (this is a really rare case, I don't even know if it worths fixing)\r\n```\r\n>>> get_errors(\"{a:b} = 1\")[0].message\r\n'SyntaxError: cannot assign to dict display'\r\n>>> get_errors(\"{**x} = 1\")[0].message\r\n'SyntaxError: cannot assign to set display'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/123", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/123/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/123/events", "html_url": "https://github.com/davidhalter/parso/issues/123", "id": 623941366, "node_id": "MDU6SXNzdWU2MjM5NDEzNjY=", "number": 123, "title": "Python 3.9.0b1+ incompatible SyntaxError messages in tests", "user": {"login": "hroncok", "id": 2401856, "node_id": "MDQ6VXNlcjI0MDE4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2401856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hroncok", "html_url": "https://github.com/hroncok", "followers_url": "https://api.github.com/users/hroncok/followers", "following_url": "https://api.github.com/users/hroncok/following{/other_user}", "gists_url": "https://api.github.com/users/hroncok/gists{/gist_id}", "starred_url": "https://api.github.com/users/hroncok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hroncok/subscriptions", "organizations_url": "https://api.github.com/users/hroncok/orgs", "repos_url": "https://api.github.com/users/hroncok/repos", "events_url": "https://api.github.com/users/hroncok/events{/privacy}", "received_events_url": "https://api.github.com/users/hroncok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "isidentical", "id": 47358913, "node_id": "MDQ6VXNlcjQ3MzU4OTEz", "avatar_url": "https://avatars3.githubusercontent.com/u/47358913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isidentical", "html_url": "https://github.com/isidentical", "followers_url": "https://api.github.com/users/isidentical/followers", "following_url": "https://api.github.com/users/isidentical/following{/other_user}", "gists_url": "https://api.github.com/users/isidentical/gists{/gist_id}", "starred_url": "https://api.github.com/users/isidentical/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isidentical/subscriptions", "organizations_url": "https://api.github.com/users/isidentical/orgs", "repos_url": "https://api.github.com/users/isidentical/repos", "events_url": "https://api.github.com/users/isidentical/events{/privacy}", "received_events_url": "https://api.github.com/users/isidentical/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "isidentical", "id": 47358913, "node_id": "MDQ6VXNlcjQ3MzU4OTEz", "avatar_url": "https://avatars3.githubusercontent.com/u/47358913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isidentical", "html_url": "https://github.com/isidentical", "followers_url": "https://api.github.com/users/isidentical/followers", "following_url": "https://api.github.com/users/isidentical/following{/other_user}", "gists_url": "https://api.github.com/users/isidentical/gists{/gist_id}", "starred_url": "https://api.github.com/users/isidentical/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isidentical/subscriptions", "organizations_url": "https://api.github.com/users/isidentical/orgs", "repos_url": "https://api.github.com/users/isidentical/repos", "events_url": "https://api.github.com/users/isidentical/events{/privacy}", "received_events_url": "https://api.github.com/users/isidentical/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2020-05-24T20:36:29Z", "updated_at": "2020-06-29T19:20:37Z", "closed_at": "2020-06-29T19:20:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello. When I run the tests with Python 3.9.0b1, I get:\r\n\r\n```\r\n$ tox -e py39\r\nGLOB sdist-make: .../parso/setup.py\r\npy39 inst-nodeps: .../parso/.tox/.tmp/package/1/parso-0.7.0.zip\r\npy39 installed: attrs==19.3.0,docopt==0.6.2,more-itertools==8.3.0,packaging==20.4,parso==0.7.0,pluggy==0.13.1,py==1.8.1,pyparsing==2.4.7,pytest==5.4.2,six==1.15.0,wcwidth==0.1.9\r\npy39 run-test-pre: PYTHONHASHSEED='1552893667'\r\npy39 run-test: commands[0] | pytest\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.9.0b1, pytest-5.4.2, py-1.8.1, pluggy-0.13.1\r\ncachedir: .tox/py39/.pytest_cache\r\nrootdir: .../parso, inifile: pytest.ini, testpaths: parso, test\r\ncollected 1160 items\r\n\r\nparso/__init__.py .                                                      [  0%]\r\nparso/python/tree.py .                                                   [  0%]\r\ntest/test_absolute_import.py ...                                         [  0%]\r\ntest/test_cache.py .......                                               [  1%]\r\ntest/test_diff_parser.py ............................................... [  5%]\r\n...................................                                      [  8%]\r\ntest/test_error_recovery.py ..............                               [  9%]\r\ntest/test_file_python_errors.py ......                                   [  9%]\r\ntest/test_fstring.py ..................................................  [ 14%]\r\ntest/test_get_code.py .............                                      [ 15%]\r\ntest/test_grammar.py .                                                   [ 15%]\r\ntest/test_load_grammar.py ...........                                    [ 16%]\r\ntest/test_normalizer_issues_files.py ..................................  [ 19%]\r\ntest/test_old_fast_parser.py ...............                             [ 20%]\r\ntest/test_param_splitting.py ........                                    [ 21%]\r\ntest/test_parser.py .................................................... [ 25%]\r\n........................................................................ [ 31%]\r\n..............................................                           [ 35%]\r\ntest/test_parser_tree.py ............................................... [ 39%]\r\n.........................                                                [ 42%]\r\ntest/test_pep8.py ...                                                    [ 42%]\r\ntest/test_pgen2.py ........................x............................ [ 46%]\r\n........................................................................ [ 53%]\r\n........................................................................ [ 59%]\r\n.................................................................        [ 64%]\r\ntest/test_prefix.py .....................                                [ 66%]\r\ntest/test_python_errors.py .......F....F.....FF............FFF.......... [ 70%]\r\n...........F....F.FFFFFFF.............F..F.............................. [ 76%]\r\n..............................F......................................... [ 83%]\r\n........................................................................ [ 89%]\r\n.........                                                                [ 90%]\r\ntest/test_tokenize.py .................................................. [ 94%]\r\n......................................                                   [ 97%]\r\ntest/test_utils.py ............................                          [100%]\r\n\r\n=================================== FAILURES ===================================\r\n______________ test_python_exception_matches[from foo import a,] _______________\r\n\r\ncode = 'from foo import a,'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: trailing comma not allowed without surrounding parentheses' in ['SyntaxError: invalid syntax']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n_______________ test_python_exception_matches[lambda x=3, y: x] ________________\r\n\r\ncode = 'lambda x=3, y: x'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: non-default argument follows default argument' in ['SyntaxError: invalid syntax']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n___________________ test_python_exception_matches[(()): int] ___________________\r\n\r\ncode = '(()): int'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: only single target (not tuple) can be annotated' in ['SyntaxError: illegal target for annotation']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n__________________ test_python_exception_matches[((())): int] __________________\r\n\r\ncode = '((())): int'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: only single target (not tuple) can be annotated' in ['SyntaxError: illegal target for annotation']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n___________________ test_python_exception_matches[a, b += 3] ___________________\r\n\r\ncode = 'a, b += 3'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert 'SyntaxError: illegal expression for augmented assignment' in [\"SyntaxError: 'tuple' is an illegal expression for augmented assignment\"]\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n__________________ test_python_exception_matches[(a, b) += 3] __________________\r\n\r\ncode = '(a, b) += 3'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert 'SyntaxError: illegal expression for augmented assignment' in [\"SyntaxError: 'tuple' is an illegal expression for augmented assignment\"]\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n__________________ test_python_exception_matches[[a, b] += 3] __________________\r\n\r\ncode = '[a, b] += 3'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert 'SyntaxError: illegal expression for augmented assignment' in [\"SyntaxError: 'list' is an illegal expression for augmented assignment\"]\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n__________ test_python_exception_matches[def foo(): x = yield 1 = 3] ___________\r\n\r\ncode = 'def foo(): x = yield 1 = 3'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: assignment to yield expression not possible' in ['SyntaxError: invalid syntax']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n_____________ test_python_exception_matches[with x as foo(): pass] _____________\r\n\r\ncode = 'with x as foo(): pass'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: cannot assign to function call' in ['SyntaxError: invalid syntax']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n_____________ test_python_exception_matches[for x, 1 in []: pass] ______________\r\n\r\ncode = 'for x, 1 in []: pass'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: cannot assign to literal' in ['SyntaxError: invalid syntax']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n____________ test_python_exception_matches[for (not 1) in []: pass] ____________\r\n\r\ncode = 'for (not 1) in []: pass'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: cannot assign to operator' in ['SyntaxError: invalid syntax']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n________________ test_python_exception_matches[[x for 1 in y]] _________________\r\n\r\ncode = '[x for 1 in y]'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: cannot assign to literal' in ['SyntaxError: invalid syntax']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n_______________ test_python_exception_matches[[x for a, 3 in y]] _______________\r\n\r\ncode = '[x for a, 3 in y]'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: cannot assign to literal' in ['SyntaxError: invalid syntax']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n________________ test_python_exception_matches[(x for 1 in y)] _________________\r\n\r\ncode = '(x for 1 in y)'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: cannot assign to literal' in ['SyntaxError: invalid syntax']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n________________ test_python_exception_matches[{x for 1 in y}] _________________\r\n\r\ncode = '{x for 1 in y}'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: cannot assign to literal' in ['SyntaxError: invalid syntax']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n_______________ test_python_exception_matches[{x:x for 1 in y}] ________________\r\n\r\ncode = '{x:x for 1 in y}'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: cannot assign to literal' in ['SyntaxError: invalid syntax']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n___________________ test_python_exception_matches[del *a, b] ___________________\r\n\r\ncode = 'del *a, b'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't use starred expression here\" in ['SyntaxError: cannot delete starred']\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n______________ test_python_exception_matches[{**{} for a in [1]}] ______________\r\n\r\ncode = '{**{} for a in [1]}'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert 'SyntaxError: dict unpacking cannot be used in dict comprehension' in [\"SyntaxError: (value error) field 'key' is required for DictComp\"]\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n__________________ test_python_exception_matches[[a, 1] += 3] __________________\r\n\r\ncode = '[a, 1] += 3'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert 'SyntaxError: cannot assign to literal' in [\"SyntaxError: 'list' is an illegal expression for augmented assignment\"]\r\n\r\ntest/test_python_errors.py:41: AssertionError\r\n=========================== short test summary info ============================\r\nFAILED test/test_python_errors.py::test_python_exception_matches[from foo import a,]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[lambda x=3, y: x]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[(()): int]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[((())): int]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[a, b += 3]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[(a, b) += 3]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[[a, b] += 3]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[def foo(): x = yield 1 = 3]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[with x as foo(): pass]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[for x, 1 in []: pass]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[for (not 1) in []: pass]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[[x for 1 in y]]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[[x for a, 3 in y]]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[(x for 1 in y)]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[{x for 1 in y}]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[{x:x for 1 in y}]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[del *a, b]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[{**{} for a in [1]}]\r\nFAILED test/test_python_errors.py::test_python_exception_matches[[a, 1] += 3]\r\n================== 19 failed, 1140 passed, 1 xfailed in 7.28s ==================\r\nERROR: InvocationError for command .../parso/.tox/py39/bin/pytest (exited with code 1)\r\n___________________________________ summary ____________________________________\r\nERROR:   py39: commands failed\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/120", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/120/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/120/events", "html_url": "https://github.com/davidhalter/parso/issues/120", "id": 623705074, "node_id": "MDU6SXNzdWU2MjM3MDUwNzQ=", "number": 120, "title": "Parso Cache Garbage Collection", "user": {"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "isidentical", "id": 47358913, "node_id": "MDQ6VXNlcjQ3MzU4OTEz", "avatar_url": "https://avatars3.githubusercontent.com/u/47358913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isidentical", "html_url": "https://github.com/isidentical", "followers_url": "https://api.github.com/users/isidentical/followers", "following_url": "https://api.github.com/users/isidentical/following{/other_user}", "gists_url": "https://api.github.com/users/isidentical/gists{/gist_id}", "starred_url": "https://api.github.com/users/isidentical/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isidentical/subscriptions", "organizations_url": "https://api.github.com/users/isidentical/orgs", "repos_url": "https://api.github.com/users/isidentical/repos", "events_url": "https://api.github.com/users/isidentical/events{/privacy}", "received_events_url": "https://api.github.com/users/isidentical/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "isidentical", "id": 47358913, "node_id": "MDQ6VXNlcjQ3MzU4OTEz", "avatar_url": "https://avatars3.githubusercontent.com/u/47358913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isidentical", "html_url": "https://github.com/isidentical", "followers_url": "https://api.github.com/users/isidentical/followers", "following_url": "https://api.github.com/users/isidentical/following{/other_user}", "gists_url": "https://api.github.com/users/isidentical/gists{/gist_id}", "starred_url": "https://api.github.com/users/isidentical/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isidentical/subscriptions", "organizations_url": "https://api.github.com/users/isidentical/orgs", "repos_url": "https://api.github.com/users/isidentical/repos", "events_url": "https://api.github.com/users/isidentical/events{/privacy}", "received_events_url": "https://api.github.com/users/isidentical/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2020-05-23T17:28:03Z", "updated_at": "2020-06-02T09:36:06Z", "closed_at": "2020-06-02T09:36:06Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently people using parso might be using a lot of disk space after a while. `~/.cache/parso` might get quite big. (or whatever it is on other OS's, see `parso/cache.py`.\r\n\r\nIMO we should probably clean up in `parso.cache.save_module`. That function should just check \"once a day\" if files are older than a month. In that case they should be deleted. It should be fine to delete stuff that we might parse again, since the cache is not extremely important and just there to speed up some things.\r\n\r\nAs a small additional thing, we should probably use `scandir`, see also https://github.com/davidhalter/jedi/blob/7fd5c8af8ff04711599fea10ca8babe51b280464/jedi/_compatibility.py#L29-L47 for Python 2.7/3.5. However we could also just remove Python 2.7/3.5 support for this feature. I don't plan on maintaining it for a long time.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/107", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/107/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/107/events", "html_url": "https://github.com/davidhalter/parso/issues/107", "id": 618059170, "node_id": "MDU6SXNzdWU2MTgwNTkxNzA=", "number": 107, "title": "python_bytes_to_unicode fail with unknown encoding", "user": {"login": "muffinmad", "id": 2702727, "node_id": "MDQ6VXNlcjI3MDI3Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2702727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muffinmad", "html_url": "https://github.com/muffinmad", "followers_url": "https://api.github.com/users/muffinmad/followers", "following_url": "https://api.github.com/users/muffinmad/following{/other_user}", "gists_url": "https://api.github.com/users/muffinmad/gists{/gist_id}", "starred_url": "https://api.github.com/users/muffinmad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muffinmad/subscriptions", "organizations_url": "https://api.github.com/users/muffinmad/orgs", "repos_url": "https://api.github.com/users/muffinmad/repos", "events_url": "https://api.github.com/users/muffinmad/events{/privacy}", "received_events_url": "https://api.github.com/users/muffinmad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-14T09:07:21Z", "updated_at": "2020-05-15T16:20:40Z", "closed_at": "2020-05-14T21:34:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n$ mkdir test-bad-coding && cd test-bad-coding\r\n$ echo \"# coding: wtf-12\" > bad-coding.py\r\n```\r\n\r\n```python\r\nPython 3.7.4 (default, Sep 28 2019, 16:39:19)\r\n>>> from jedi import Script\r\n>>> script = Script('foo', path='foo.py')\r\n>>> script.get_references()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/api/helpers.py\", line 482, in wrapper\r\n    return func(self, line, column, *args, **kwargs)\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/api/__init__.py\", line 525, in get_references\r\n    return _references(**kwargs)\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/api/__init__.py\", line 519, in _references\r\n    names = find_references(self._get_module_context(), tree_name)\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/inference/references.py\", line 143, in find_references\r\n    for module_context in potential_modules:\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/inference/references.py\", line 269, in get_module_contexts_containing_name\r\n    limit_reduction=limit_reduction):\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/inference/references.py\", line 281, in search_in_file_ios\r\n    m = _check_fs(inference_state, file_io, regex)\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/inference/references.py\", line 168, in _check_fs\r\n    code = python_bytes_to_unicode(code, errors='replace')\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/parso/utils.py\", line 109, in python_bytes_to_unicode\r\n    return unicode(source, encoding, errors)\r\nLookupError: unknown encoding: wtf-12\r\n```\r\n\r\nI'm faced this issue with simpler STR:\r\n\r\n```python\r\n>>> from jedi import Script\r\n>>> Script('from inspect import Parameter').get_references(1, 29)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/api/helpers.py\", line 482, in wrapper\r\n    return func(self, line, column, *args, **kwargs)\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/api/__init__.py\", line 525, in get_references\r\n    return _references(**kwargs)\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/api/__init__.py\", line 519, in _references\r\n    names = find_references(self._get_module_context(), tree_name)\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/inference/references.py\", line 143, in find_references\r\n    for module_context in potential_modules:\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/inference/references.py\", line 269, in get_module_contexts_containing_name\r\n    limit_reduction=limit_reduction):\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/inference/references.py\", line 281, in search_in_file_ios\r\n    m = _check_fs(inference_state, file_io, regex)\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/jedi/inference/references.py\", line 168, in _check_fs\r\n    code = python_bytes_to_unicode(code, errors='replace')\r\n  File \"/Users/mad/Library/Python/3.7/lib/python/site-packages/parso/utils.py\", line 109, in python_bytes_to_unicode\r\n    return unicode(source, encoding, errors)\r\nLookupError: unknown encoding: uft-8\r\n```\r\n\r\nbecause of the file on my machine `/usr/local/Cellar/python/3.7.4_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/test/bad_coding.py` with this content:\r\n\r\n```python\r\n# -*- coding: uft-8 -*-\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/106", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/106/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/106/events", "html_url": "https://github.com/davidhalter/parso/issues/106", "id": 604942153, "node_id": "MDU6SXNzdWU2MDQ5NDIxNTM=", "number": 106, "title": "Python 3.10+ support?", "user": {"login": "carljm", "id": 61586, "node_id": "MDQ6VXNlcjYxNTg2", "avatar_url": "https://avatars0.githubusercontent.com/u/61586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carljm", "html_url": "https://github.com/carljm", "followers_url": "https://api.github.com/users/carljm/followers", "following_url": "https://api.github.com/users/carljm/following{/other_user}", "gists_url": "https://api.github.com/users/carljm/gists{/gist_id}", "starred_url": "https://api.github.com/users/carljm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carljm/subscriptions", "organizations_url": "https://api.github.com/users/carljm/orgs", "repos_url": "https://api.github.com/users/carljm/repos", "events_url": "https://api.github.com/users/carljm/events{/privacy}", "received_events_url": "https://api.github.com/users/carljm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-22T17:41:13Z", "updated_at": "2020-05-14T21:52:58Z", "closed_at": "2020-05-14T21:52:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is an early-warning issue; just wanted to note that PEP 617 was accepted (https://www.python.org/dev/peps/pep-0617/), meaning that the default parser in Python 3.9 will be a new PEG parser instead of the LL(1) pgen2 parser. By Python 3.10, there could be new syntax added to Python which is not parsable with an LL(1) parser.\r\n\r\nI'm curious about parso's plans to support Python 3.10+ in part because I'm updating the Python docs to deprecate `lib2to3` (see https://bugs.python.org/issue40360), and would like to link to maintained alternatives outside the standard library, but only if they plan to update to support Python 3.10+.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/105", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/105/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/105/events", "html_url": "https://github.com/davidhalter/parso/issues/105", "id": 574501712, "node_id": "MDU6SXNzdWU1NzQ1MDE3MTI=", "number": 105, "title": "[QUESTION] Are there any Visitor or Iterator (e.g. node.iter_imports()) for function call?", "user": {"login": "ChangeType", "id": 54389253, "node_id": "MDQ6VXNlcjU0Mzg5MjUz", "avatar_url": "https://avatars0.githubusercontent.com/u/54389253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChangeType", "html_url": "https://github.com/ChangeType", "followers_url": "https://api.github.com/users/ChangeType/followers", "following_url": "https://api.github.com/users/ChangeType/following{/other_user}", "gists_url": "https://api.github.com/users/ChangeType/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChangeType/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChangeType/subscriptions", "organizations_url": "https://api.github.com/users/ChangeType/orgs", "repos_url": "https://api.github.com/users/ChangeType/repos", "events_url": "https://api.github.com/users/ChangeType/events{/privacy}", "received_events_url": "https://api.github.com/users/ChangeType/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-03T08:36:52Z", "updated_at": "2020-03-06T04:34:32Z", "closed_at": "2020-03-05T20:29:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, thank you so much for the amazing tool.\r\nI am asking this question after searching for the answer a couple of hours. \r\n\r\nMy requirement \r\nExample:\r\n```\r\ndef _bn_relu_conv(nb_filter, nb_row, nb_col, subsample=(1, 1)):\r\n       .\r\n       .\r\n       .\r\n        norm = BatchNormalization(mode=0, axis=1)(input)\r\n        activation = Activation.ready(\"relu\")(norm)\r\n        return Convolution2D(nb_filter=nb_filter, nb_row=nb_row, nb_col=nb_col)\r\n \r\n\r\n```\r\n\r\nI want to extract all the function calls inside the above code.\r\ni.e.\r\n```\r\nBatchNormalization\r\nActivation.ready\r\nConvolution2D\r\n```\r\n\r\nI was using the ast module from Python and then I heard about this tool (parso)  from one of my friends. I was so amaized after doing a couple of experiments. \r\nTo extract function calls, what I do with ast module in Python is:\r\n- extend the class [ast.NodeVisitor](https://docs.python.org/3/library/ast.html#ast.NodeVisitor) \r\n- use [visit_Call](https://greentreesnakes.readthedocs.io/en/latest/nodes.html#Call) method to extract method calls. \r\n\r\nI am not sure about the proper way of doing this with parso. If someone can help me with this, it would be a great help for me. \r\n\r\nThanks in advance. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/103", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/103/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/103/events", "html_url": "https://github.com/davidhalter/parso/issues/103", "id": 572160742, "node_id": "MDU6SXNzdWU1NzIxNjA3NDI=", "number": 103, "title": "Numerous test failures with py3.8.2 (exception messages changed?)", "user": {"login": "mgorny", "id": 110765, "node_id": "MDQ6VXNlcjExMDc2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/110765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgorny", "html_url": "https://github.com/mgorny", "followers_url": "https://api.github.com/users/mgorny/followers", "following_url": "https://api.github.com/users/mgorny/following{/other_user}", "gists_url": "https://api.github.com/users/mgorny/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgorny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgorny/subscriptions", "organizations_url": "https://api.github.com/users/mgorny/orgs", "repos_url": "https://api.github.com/users/mgorny/repos", "events_url": "https://api.github.com/users/mgorny/events{/privacy}", "received_events_url": "https://api.github.com/users/mgorny/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-27T15:30:11Z", "updated_at": "2020-02-28T13:15:15Z", "closed_at": "2020-02-27T23:33:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example:\r\n\r\n```\r\n==================================================================== FAILURES =====================================================================\r\n_________________________________________________ test_python_exception_matches[(lambda: x := 1)] _________________________________________________\r\n\r\ncode = '(lambda: x := 1)'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: cannot use named assignment with lambda' in ['SyntaxError: cannot use assignment expressions with lambda']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n```\r\n\r\nIf I'm looking correctly, all tests failures have the same error.\r\n\r\nFull log: [dev-python:parso-0.6.2:20200227-151454.log](https://github.com/davidhalter/parso/files/4262356/dev-python.parso-0.6.2.20200227-151454.log)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/102", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/102/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/102/events", "html_url": "https://github.com/davidhalter/parso/issues/102", "id": 568732389, "node_id": "MDU6SXNzdWU1Njg3MzIzODk=", "number": 102, "title": "AttributeError: 'NoneType' object has no attribute 'children'", "user": {"login": "qdbp", "id": 8152233, "node_id": "MDQ6VXNlcjgxNTIyMzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/8152233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qdbp", "html_url": "https://github.com/qdbp", "followers_url": "https://api.github.com/users/qdbp/followers", "following_url": "https://api.github.com/users/qdbp/following{/other_user}", "gists_url": "https://api.github.com/users/qdbp/gists{/gist_id}", "starred_url": "https://api.github.com/users/qdbp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qdbp/subscriptions", "organizations_url": "https://api.github.com/users/qdbp/orgs", "repos_url": "https://api.github.com/users/qdbp/repos", "events_url": "https://api.github.com/users/qdbp/events{/privacy}", "received_events_url": "https://api.github.com/users/qdbp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 600765132, "node_id": "MDU6TGFiZWw2MDA3NjUxMzI=", "url": "https://api.github.com/repos/davidhalter/parso/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-21T04:43:12Z", "updated_at": "2020-02-21T17:31:19Z", "closed_at": "2020-02-21T17:31:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "This was found through `deoplete-jedi`. Autocomplete on some modules (`pymc3` in my case) results in the following (I included some calls in jedi for context):\r\n\r\n```\r\n  File \"/home/main/.config/nvim/plugins/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/classes.py\", line 257, in _get_docstring\r\n    return self._name.py__doc__()\r\n  File \"/home/main/.config/nvim/plugins/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/names.py\", line 345, in py__doc__\r\n    return find_statement_documentation(self.tree_name.get_definition())\r\n  File \"/home/main/.config/nvim/plugins/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/parser_utils.py\", line 115, in find_statement_documentation\r\n    maybe_string = tree_node.get_next_sibling()\r\nFile \"/home/main/.config/nvim/plugins/deoplete-jedi/rplugin/python3/deoplete/vendored/parso/parso/tree.py\", line 50, in get_next_sibling\r\n    for i, child in enumerate(self.parent.children):\r\nAttributeError: 'NoneType' object has no attribute 'children'\r\n```\r\n\r\nThe end-user impact is that autocomplete doesn't work for this module.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/99", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/99/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/99/events", "html_url": "https://github.com/davidhalter/parso/issues/99", "id": 544563057, "node_id": "MDU6SXNzdWU1NDQ1NjMwNTc=", "number": 99, "title": "Make `Scope._search_in_scope` public and documented", "user": {"login": "jack1142", "id": 6032823, "node_id": "MDQ6VXNlcjYwMzI4MjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6032823?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jack1142", "html_url": "https://github.com/jack1142", "followers_url": "https://api.github.com/users/jack1142/followers", "following_url": "https://api.github.com/users/jack1142/following{/other_user}", "gists_url": "https://api.github.com/users/jack1142/gists{/gist_id}", "starred_url": "https://api.github.com/users/jack1142/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jack1142/subscriptions", "organizations_url": "https://api.github.com/users/jack1142/orgs", "repos_url": "https://api.github.com/users/jack1142/repos", "events_url": "https://api.github.com/users/jack1142/events{/privacy}", "received_events_url": "https://api.github.com/users/jack1142/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-02T12:39:10Z", "updated_at": "2020-01-02T14:43:14Z", "closed_at": "2020-01-02T14:43:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my opinion, this could be a very useful utility and I think it would be nice if we weren't only limited to `iter_*` methods that are provided and make our own generators to properly go through whole scope.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/98", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/98/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/98/events", "html_url": "https://github.com/davidhalter/parso/issues/98", "id": 544562066, "node_id": "MDU6SXNzdWU1NDQ1NjIwNjY=", "number": 98, "title": "`iter_funcdefs()` doesn't return `funcdef` nodes that are wrapped in `async_funcdef`", "user": {"login": "jack1142", "id": 6032823, "node_id": "MDQ6VXNlcjYwMzI4MjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6032823?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jack1142", "html_url": "https://github.com/jack1142", "followers_url": "https://api.github.com/users/jack1142/followers", "following_url": "https://api.github.com/users/jack1142/following{/other_user}", "gists_url": "https://api.github.com/users/jack1142/gists{/gist_id}", "starred_url": "https://api.github.com/users/jack1142/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jack1142/subscriptions", "organizations_url": "https://api.github.com/users/jack1142/orgs", "repos_url": "https://api.github.com/users/jack1142/repos", "events_url": "https://api.github.com/users/jack1142/events{/privacy}", "received_events_url": "https://api.github.com/users/jack1142/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 600765132, "node_id": "MDU6TGFiZWw2MDA3NjUxMzI=", "url": "https://api.github.com/repos/davidhalter/parso/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}, {"id": 600765135, "node_id": "MDU6TGFiZWw2MDA3NjUxMzU=", "url": "https://api.github.com/repos/davidhalter/parso/labels/help%20wanted", "name": "help wanted", "color": "128A0C", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-02T12:35:50Z", "updated_at": "2020-01-26T19:01:08Z", "closed_at": "2020-01-26T19:01:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/96", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/96/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/96/events", "html_url": "https://github.com/davidhalter/parso/issues/96", "id": 543046981, "node_id": "MDU6SXNzdWU1NDMwNDY5ODE=", "number": 96, "title": "Question: Is it possible to edit code with this library?", "user": {"login": "jack1142", "id": 6032823, "node_id": "MDQ6VXNlcjYwMzI4MjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6032823?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jack1142", "html_url": "https://github.com/jack1142", "followers_url": "https://api.github.com/users/jack1142/followers", "following_url": "https://api.github.com/users/jack1142/following{/other_user}", "gists_url": "https://api.github.com/users/jack1142/gists{/gist_id}", "starred_url": "https://api.github.com/users/jack1142/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jack1142/subscriptions", "organizations_url": "https://api.github.com/users/jack1142/orgs", "repos_url": "https://api.github.com/users/jack1142/repos", "events_url": "https://api.github.com/users/jack1142/events{/privacy}", "received_events_url": "https://api.github.com/users/jack1142/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-28T02:33:04Z", "updated_at": "2019-12-28T15:34:49Z", "closed_at": "2019-12-28T11:23:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm sorry that I'm asking a question through issue, but I didn't see any other way to ask questions about this lib in README. \r\n\r\nSo, I'm looking at docs and it isn't obvious if I can edit code with this library or is this library only for analysing code without making any changes to it? I've been looking for an alternative to `redbaron` (and underlying `baron`) that is more maintained and this library has been mentioned in few places but docs don't really mention editing so I'm not sure if that's possible with this library.\r\n\r\nWhatever the answer will be, thank you for this library, Python really needs good syntax parsers.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/94", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/94/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/94/events", "html_url": "https://github.com/davidhalter/parso/issues/94", "id": 538650087, "node_id": "MDU6SXNzdWU1Mzg2NTAwODc=", "number": 94, "title": "Fix simple typo: utitilies -> utilities", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-16T20:52:13Z", "updated_at": "2019-12-17T09:00:29Z", "closed_at": "2019-12-17T09:00:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in parso/python/tree.py.\nShould read `utilities` rather than `utitilies`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/91", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/91/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/91/events", "html_url": "https://github.com/davidhalter/parso/issues/91", "id": 532764085, "node_id": "MDU6SXNzdWU1MzI3NjQwODU=", "number": 91, "title": "False Positive: SyntaxError: trailing comma not allowed without surrounding parentheses", "user": {"login": "RobinFrcd", "id": 29704178, "node_id": "MDQ6VXNlcjI5NzA0MTc4", "avatar_url": "https://avatars0.githubusercontent.com/u/29704178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RobinFrcd", "html_url": "https://github.com/RobinFrcd", "followers_url": "https://api.github.com/users/RobinFrcd/followers", "following_url": "https://api.github.com/users/RobinFrcd/following{/other_user}", "gists_url": "https://api.github.com/users/RobinFrcd/gists{/gist_id}", "starred_url": "https://api.github.com/users/RobinFrcd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RobinFrcd/subscriptions", "organizations_url": "https://api.github.com/users/RobinFrcd/orgs", "repos_url": "https://api.github.com/users/RobinFrcd/repos", "events_url": "https://api.github.com/users/RobinFrcd/events{/privacy}", "received_events_url": "https://api.github.com/users/RobinFrcd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-04T15:37:07Z", "updated_at": "2019-12-04T21:59:25Z", "closed_at": "2019-12-04T21:59:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\nI encountered a False positive about _trailing comma not allowed without surrounding parentheses_. I've made imports with trailing comma *with surrounding parenthesis* but the parser raises this error, even if it's valid.\r\n\r\n```python\r\nimport parso\r\n\r\nstring = \"\"\"\r\nfrom hashlib import (\r\n    md5,\r\n    sha256,\r\n)\r\n\"\"\"\r\n\r\ngrammar = parso.load_grammar(version='3.8')\r\nmodule = grammar.parse(string, error_recovery=True)\r\n\r\nprint(grammar.iter_errors(module)[0].message)\r\n#SyntaxError: trailing comma not allowed without surrounding parentheses\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/89", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/89/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/89/events", "html_url": "https://github.com/davidhalter/parso/issues/89", "id": 529379031, "node_id": "MDU6SXNzdWU1MjkzNzkwMzE=", "number": 89, "title": "Incorrect parsing behaviour with assignment expressions", "user": {"login": "JarryShaw", "id": 15666417, "node_id": "MDQ6VXNlcjE1NjY2NDE3", "avatar_url": "https://avatars1.githubusercontent.com/u/15666417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarryShaw", "html_url": "https://github.com/JarryShaw", "followers_url": "https://api.github.com/users/JarryShaw/followers", "following_url": "https://api.github.com/users/JarryShaw/following{/other_user}", "gists_url": "https://api.github.com/users/JarryShaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarryShaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarryShaw/subscriptions", "organizations_url": "https://api.github.com/users/JarryShaw/orgs", "repos_url": "https://api.github.com/users/JarryShaw/repos", "events_url": "https://api.github.com/users/JarryShaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JarryShaw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 600765132, "node_id": "MDU6TGFiZWw2MDA3NjUxMzI=", "url": "https://api.github.com/repos/davidhalter/parso/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-27T14:24:53Z", "updated_at": "2019-12-14T23:23:16Z", "closed_at": "2019-12-14T23:23:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Recently, we encountered several issues with `parso` when implementing a backport compiler for assignment expressions.\r\n\r\n1. Parsing f-strings with `:=` formatter produces incorrect SyntaxError\r\n2. Parsing invalid use cases of assignment expressions do not raise SyntaxError\r\n\r\n---\r\n\r\n**NB**: all codes are running under Python 3.8.0; *actual behaviours* are running through `parso.parse(code, error_recovery=False, version='3.8')`.\r\n\r\n## Case 1\r\n\r\n**Source code**:\r\n\r\n```python\r\nf'{x:=5}'\r\n```\r\n\r\n**Expected behaviour**: valid, passes `=5` to formatter\r\n\r\n**Actual behaviour**:\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/fakepath/.venv/lib/python3.8/site-packages/parso/parser.py\", line 181, in _add_token\r\n    plan = stack[-1].dfa.transitions[transition]\r\nKeyError: ReservedString(:=)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/fakepath/.venv/lib/python3.8/site-packages/parso/__init__.py\", line 58, in parse\r\n    return grammar.parse(code, **kwargs)\r\n  File \"/fakepath/.venv/lib/python3.8/site-packages/parso/grammar.py\", line 78, in parse\r\n    return self._parse(code=code, **kwargs)\r\n  File \"/fakepath/.venv/lib/python3.8/site-packages/parso/grammar.py\", line 147, in _parse\r\n    root_node = p.parse(tokens=tokens)\r\n  File \"/fakepath/.venv/lib/python3.8/site-packages/parso/python/parser.py\", line 82, in parse\r\n    return super(Parser, self).parse(tokens)\r\n  File \"/fakepath/.venv/lib/python3.8/site-packages/parso/parser.py\", line 128, in parse\r\n    self._add_token(token)\r\n  File \"/fakepath/.venv/lib/python3.8/site-packages/parso/parser.py\", line 187, in _add_token\r\n    self.error_recovery(token)\r\n  File \"/fakepath/.venv/lib/python3.8/site-packages/parso/python/parser.py\", line 151, in error_recovery\r\n    return super(Parser, self).error_recovery(token)\r\n  File \"/fakepath/.venv/lib/python3.8/site-packages/parso/parser.py\", line 151, in error_recovery\r\n    raise ParserSyntaxError('SyntaxError: invalid syntax', error_leaf)\r\nparso.parser.ParserSyntaxError: ('SyntaxError: invalid syntax', <ErrorLeaf: TokenType(OP):':=', (1, 4)>)\r\n```\r\n\r\n## Case 2\r\n\r\n**Source code**:\r\n\r\n```python\r\n(lambda: x := 1)\r\n```\r\n\r\n**Expected behaviour**:\r\n\r\n```pytb\r\nSyntaxError: cannot use named assignment with lambda\r\n```\r\n\r\n**Actual behaviour**: parsed as valid code\r\n\r\n## Case 3\r\n\r\n**Source code**:\r\n\r\n```python\r\n(a[i] := x)\r\n```\r\n\r\n**Expected behaviour**:\r\n\r\n```pytb\r\nSyntaxError: cannot use named assignment with subscript\r\n```\r\n\r\n**Actual behaviour**: parsed as valid code\r\n\r\n## Case 4\r\n\r\n**Source code**:\r\n\r\n```python\r\n(a.b := c)\r\n```\r\n\r\n**Expected behaviour**:\r\n\r\n```pytb\r\nSyntaxError: cannot use named assignment with attribute\r\n```\r\n\r\n**Actual behaviour**: parsed as valid code\r\n\r\n## Case 5\r\n\r\n**Source code**:\r\n\r\n```python\r\n[i := 0 for i, j in range(5)]\r\n[[(i := i) for j in range(5)] for i in range(5)]\r\n[i for i, j in range(5) if True or (i := 1)]\r\n[False and (i := 0) for i, j in range(5)]\r\n```\r\n\r\n**Expected behaviour**:\r\n\r\n```pytb\r\nSyntaxError: assignment expression cannot rebind comprehension iteration variable 'i'\r\n```\r\n\r\n**Actual behaviour**: parsed as valid code\r\n\r\n## Case 6\r\n\r\n**Source code**:\r\n\r\n```python\r\n[i+1 for i in (i := range(5))]\r\n[i+1 for i in (j := range(5))]\r\n[i+1 for i in (lambda: (j := range(5)))()]\r\n```\r\n\r\n**Expected behaviour**:\r\n\r\n```pytb\r\nSyntaxError: assignment expression cannot be used in a comprehension iterable expression\r\n```\r\n\r\n**Actual behaviour**: parsed as valid code\r\n\r\n## Case 7\r\n\r\n**Source code**:\r\n\r\n```python\r\nclass Example:\r\n    [(j := i) for i in range(5)]\r\n```\r\n\r\n**Expected behaviour**:\r\n\r\n```pytb\r\nSyntaxError: assignment expression within a comprehension cannot be used in a class body\r\n```\r\n\r\n**Actual behaviour**: parsed as valid code\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/88", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/88/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/88/events", "html_url": "https://github.com/davidhalter/parso/issues/88", "id": 526412447, "node_id": "MDU6SXNzdWU1MjY0MTI0NDc=", "number": 88, "title": "Possible misuse of `hashlib.sha256`", "user": {"login": "aivarannamaa", "id": 1802, "node_id": "MDQ6VXNlcjE4MDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aivarannamaa", "html_url": "https://github.com/aivarannamaa", "followers_url": "https://api.github.com/users/aivarannamaa/followers", "following_url": "https://api.github.com/users/aivarannamaa/following{/other_user}", "gists_url": "https://api.github.com/users/aivarannamaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/aivarannamaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aivarannamaa/subscriptions", "organizations_url": "https://api.github.com/users/aivarannamaa/orgs", "repos_url": "https://api.github.com/users/aivarannamaa/repos", "events_url": "https://api.github.com/users/aivarannamaa/events{/privacy}", "received_events_url": "https://api.github.com/users/aivarannamaa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-21T07:23:53Z", "updated_at": "2019-11-25T07:21:14Z", "closed_at": "2019-11-25T07:20:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Parso includes calls to `hashlib.sha256` with an argument.\r\n\r\n[The documentation](https://docs.python.org/3.8/library/hashlib.html) doesn't mention arguments. In my Windows Python 3.8 it does take arguments, but here is a [log from a package build in Fedora](https://kojipkgs.fedoraproject.org/work/tasks/7156/39137156/build.log), which failed with:\r\n\r\n```\r\nparser = <class 'parso.python.parser.Parser'>\r\ndiff_parser = <class 'parso.python.diff.DiffParser'>\r\n    def __init__(self, text, tokenizer, parser=BaseParser, diff_parser=None):\r\n        self._pgen_grammar = generate_grammar(\r\n            text,\r\n            token_namespace=self._get_token_namespace()\r\n        )\r\n        self._parser = parser\r\n        self._tokenizer = tokenizer\r\n        self._diff_parser = diff_parser\r\n>       self._hashed = hashlib.sha256(text.encode(\"utf-8\")).hexdigest()\r\nE       TypeError: sha256() takes no arguments\r\n/usr/lib/python3.8/site-packages/parso/grammar.py:39: TypeError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/87", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/87/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/87/events", "html_url": "https://github.com/davidhalter/parso/issues/87", "id": 510922191, "node_id": "MDU6SXNzdWU1MTA5MjIxOTE=", "number": 87, "title": "Parsing f-strings with seeming assignment expressions produces incorrect SyntaxError", "user": {"login": "gousaiyang", "id": 15073518, "node_id": "MDQ6VXNlcjE1MDczNTE4", "avatar_url": "https://avatars0.githubusercontent.com/u/15073518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gousaiyang", "html_url": "https://github.com/gousaiyang", "followers_url": "https://api.github.com/users/gousaiyang/followers", "following_url": "https://api.github.com/users/gousaiyang/following{/other_user}", "gists_url": "https://api.github.com/users/gousaiyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/gousaiyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gousaiyang/subscriptions", "organizations_url": "https://api.github.com/users/gousaiyang/orgs", "repos_url": "https://api.github.com/users/gousaiyang/repos", "events_url": "https://api.github.com/users/gousaiyang/events{/privacy}", "received_events_url": "https://api.github.com/users/gousaiyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 600765132, "node_id": "MDU6TGFiZWw2MDA3NjUxMzI=", "url": "https://api.github.com/repos/davidhalter/parso/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-22T21:18:32Z", "updated_at": "2019-12-15T01:33:59Z", "closed_at": "2019-12-14T23:49:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a subtle issue when parsing f-strings whose expression parts look like an assignment expression in Python 3.8. As illustrated in [PEP 572](https://www.python.org/dev/peps/pep-0572/#exceptional-cases), both `f'{(x:=10)}'` and `f'{x:=10}'` are valid expressions.\r\n\r\n```\r\n>>> f'{(x:=10)}'  # Valid, uses assignment expression\r\n'10'\r\n>>> x = 10\r\n>>> f'{x:=10}'    # Valid, passes '=10' to formatter\r\n'        10'\r\n```\r\n\r\nThe former is an f-string with an assignment expression, while the latter is an f-string with `=10` as the format specifiers of `x`. Both are valid, although this may be confusing and is not a good programming practice.\r\n\r\nHowever, parso fails to parse `f'{x:=10}'`:\r\n\r\n```\r\n>>> import parso\r\n>>> parso.parse(\"f'{x:=10}'\", error_recovery=False)\r\nTraceback (most recent call last):\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\parser.py\", line 181, in _add_token\r\n    plan = stack[-1].dfa.transitions[transition]\r\nKeyError: ReservedString(:=)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\__init__.py\", line 58, in parse\r\n    return grammar.parse(code, **kwargs)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\grammar.py\", line 78, in parse\r\n    return self._parse(code=code, **kwargs)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\grammar.py\", line 147, in _parse\r\n    root_node = p.parse(tokens=tokens)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\python\\parser.py\", line 82, in parse\r\n    return super(Parser, self).parse(tokens)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\parser.py\", line 128, in parse\r\n    self._add_token(token)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\parser.py\", line 187, in _add_token\r\n    self.error_recovery(token)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\python\\parser.py\", line 151, in error_recovery\r\n    return super(Parser, self).error_recovery(token)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\parser.py\", line 151, in error_recovery\r\n    raise ParserSyntaxError('SyntaxError: invalid syntax', error_leaf)\r\nparso.parser.ParserSyntaxError: ('SyntaxError: invalid syntax', <ErrorLeaf: TokenType(OP):':=', (1, 4)>)\r\n```\r\n\r\nI am using parso 0.5.1. This issue only happens on Python 3.8.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/86", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/86/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/86/events", "html_url": "https://github.com/davidhalter/parso/issues/86", "id": 510913208, "node_id": "MDU6SXNzdWU1MTA5MTMyMDg=", "number": 86, "title": "Parsing f-strings with invalid quotes in expression part does not raise SyntaxError", "user": {"login": "gousaiyang", "id": 15073518, "node_id": "MDQ6VXNlcjE1MDczNTE4", "avatar_url": "https://avatars0.githubusercontent.com/u/15073518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gousaiyang", "html_url": "https://github.com/gousaiyang", "followers_url": "https://api.github.com/users/gousaiyang/followers", "following_url": "https://api.github.com/users/gousaiyang/following{/other_user}", "gists_url": "https://api.github.com/users/gousaiyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/gousaiyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gousaiyang/subscriptions", "organizations_url": "https://api.github.com/users/gousaiyang/orgs", "repos_url": "https://api.github.com/users/gousaiyang/repos", "events_url": "https://api.github.com/users/gousaiyang/events{/privacy}", "received_events_url": "https://api.github.com/users/gousaiyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 600765132, "node_id": "MDU6TGFiZWw2MDA3NjUxMzI=", "url": "https://api.github.com/repos/davidhalter/parso/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-22T21:04:31Z", "updated_at": "2019-12-14T23:47:34Z", "closed_at": "2019-12-14T23:47:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! I think I've found a small issue with parsing f-strings with invalid quotes in the expression part.\r\n\r\n```\r\n>>> import parso\r\n>>> parso.parse(\"f'{ ''}'\", error_recovery=False)\r\n<Module: @1-1>\r\n```\r\n\r\nThe code being parsed above is syntactically invalid, but parso is not generating an error.  \r\nHowever, I found that when I remove the leading the space in the expression part (before the invalid quote), parso works correctly.\r\n\r\n```\r\n>>> import parso\r\n>>> parso.parse(\"f'{''}'\", error_recovery=False)\r\nTraceback (most recent call last):\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\parser.py\", line 181, in _add_token\r\n    plan = stack[-1].dfa.transitions[transition]\r\nKeyError: TokenType(FSTRING_END)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\__init__.py\", line 58, in parse\r\n    return grammar.parse(code, **kwargs)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\grammar.py\", line 78, in parse\r\n    return self._parse(code=code, **kwargs)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\grammar.py\", line 147, in _parse\r\n    root_node = p.parse(tokens=tokens)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\python\\parser.py\", line 82, in parse\r\n    return super(Parser, self).parse(tokens)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\parser.py\", line 128, in parse\r\n    self._add_token(token)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\parser.py\", line 187, in _add_token\r\n    self.error_recovery(token)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\python\\parser.py\", line 151, in error_recovery\r\n    return super(Parser, self).error_recovery(token)\r\n  File \"C:\\Python38\\lib\\site-packages\\parso\\parser.py\", line 151, in error_recovery\r\n    raise ParserSyntaxError('SyntaxError: invalid syntax', error_leaf)\r\nparso.parser.ParserSyntaxError: ('SyntaxError: invalid syntax', <ErrorLeaf: TokenType(FSTRING_END):\"'\", (1, 3)>)\r\n```\r\n\r\nMaybe there is a subtle bug when parsing the expression part? As for my test, this bug happens on both Python 3.8 and Python 3.6.\r\n(I'm using parso 0.5.1)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/83", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/83/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/83/events", "html_url": "https://github.com/davidhalter/parso/issues/83", "id": 482452478, "node_id": "MDU6SXNzdWU0ODI0NTI0Nzg=", "number": 83, "title": "Async and await can't be used as identifiers in 3.6", "user": {"login": "bgw", "id": 180404, "node_id": "MDQ6VXNlcjE4MDQwNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/180404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgw", "html_url": "https://github.com/bgw", "followers_url": "https://api.github.com/users/bgw/followers", "following_url": "https://api.github.com/users/bgw/following{/other_user}", "gists_url": "https://api.github.com/users/bgw/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgw/subscriptions", "organizations_url": "https://api.github.com/users/bgw/orgs", "repos_url": "https://api.github.com/users/bgw/repos", "events_url": "https://api.github.com/users/bgw/events{/privacy}", "received_events_url": "https://api.github.com/users/bgw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-19T18:07:48Z", "updated_at": "2019-08-19T20:34:46Z", "closed_at": "2019-08-19T20:34:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It looks like parso's tokenizer unconditionally treats `async` and `await` as keywords under 3.6. However, while that's valid on 3.7+, on 3.6 it's conditionally treated as a keyword or identifier depending on if you're inside an async function.\r\n\r\nBlack has some logic to support this behavior when parsing as <3.7: https://github.com/psf/black/blob/40e8b3a231bade22d838858435a33d60a8325306/blib2to3/pgen2/tokenize.py#L359\r\n\r\nThis was reported by @zhammer on https://github.com/Instagram/LibCST/issues/32\r\n\r\nIt might not be worth supporting because it's an older version of Python, and the hacks required to support it are pretty ugly, but I figured I'd upstream this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/82", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/82/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/82/events", "html_url": "https://github.com/davidhalter/parso/issues/82", "id": 479843221, "node_id": "MDU6SXNzdWU0Nzk4NDMyMjE=", "number": 82, "title": "<TAB> autocomplete stops working for objects with customized __dir__() and __getattr__()", "user": {"login": "wyzhao", "id": 9028815, "node_id": "MDQ6VXNlcjkwMjg4MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9028815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wyzhao", "html_url": "https://github.com/wyzhao", "followers_url": "https://api.github.com/users/wyzhao/followers", "following_url": "https://api.github.com/users/wyzhao/following{/other_user}", "gists_url": "https://api.github.com/users/wyzhao/gists{/gist_id}", "starred_url": "https://api.github.com/users/wyzhao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wyzhao/subscriptions", "organizations_url": "https://api.github.com/users/wyzhao/orgs", "repos_url": "https://api.github.com/users/wyzhao/repos", "events_url": "https://api.github.com/users/wyzhao/events{/privacy}", "received_events_url": "https://api.github.com/users/wyzhao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-12T20:48:05Z", "updated_at": "2019-08-14T23:22:43Z", "closed_at": "2019-08-12T22:03:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Environments:\r\njedi                          0.13.1   \r\njupyter                       1.0.0    \r\njupyter-client                5.2.3    \r\njupyter-console               5.2.0    \r\njupyter-core                  4.4.0    \r\njupyterlab                    1.0.5    \r\njupyterlab-server             1.0.0    \r\nparso                         0.5.0    or 0.5.1\t\r\npython                        3.6.2\r\n\r\nThe object's attributes are shown as \"module\" and therefore lose the ability to do <TAB> completion.\r\n\r\nIf I downgrade to parso 0.4, it works fine.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/79", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/79/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/79/events", "html_url": "https://github.com/davidhalter/parso/issues/79", "id": 466144133, "node_id": "MDU6SXNzdWU0NjYxNDQxMzM=", "number": 79, "title": "Replace pickle cache files with a file-format without code execution", "user": {"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-10T07:25:00Z", "updated_at": "2020-05-23T13:32:25Z", "closed_at": "2020-05-23T13:32:25Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Having pickle as a serialization format is not the best pick for a cache (for parso's case). However it seems like there aren't really a lot of \"fast\" alternatives in the standard library.\r\n\r\nThis issue is also related to #75.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/77", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/77/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/77/events", "html_url": "https://github.com/davidhalter/parso/issues/77", "id": 460858758, "node_id": "MDU6SXNzdWU0NjA4NTg3NTg=", "number": 77, "title": "Dates wrong in changelog?", "user": {"login": "sedm0784", "id": 139165, "node_id": "MDQ6VXNlcjEzOTE2NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/139165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sedm0784", "html_url": "https://github.com/sedm0784", "followers_url": "https://api.github.com/users/sedm0784/followers", "following_url": "https://api.github.com/users/sedm0784/following{/other_user}", "gists_url": "https://api.github.com/users/sedm0784/gists{/gist_id}", "starred_url": "https://api.github.com/users/sedm0784/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sedm0784/subscriptions", "organizations_url": "https://api.github.com/users/sedm0784/orgs", "repos_url": "https://api.github.com/users/sedm0784/repos", "events_url": "https://api.github.com/users/sedm0784/events{/privacy}", "received_events_url": "https://api.github.com/users/sedm0784/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-26T09:24:40Z", "updated_at": "2019-06-28T09:01:02Z", "closed_at": "2019-06-28T09:00:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Versions 0.3.2 through 0.3.4 were added to the [GitHub releases page](https://github.com/davidhalter/parso/releases) in 2019, but are listed in [`CHANGELOG.rst`](https://github.com/davidhalter/parso/blob/master/CHANGELOG.rst) with dates in 2018. Are the dates in the changelog wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/76", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/76/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/76/events", "html_url": "https://github.com/davidhalter/parso/issues/76", "id": 459024098, "node_id": "MDU6SXNzdWU0NTkwMjQwOTg=", "number": 76, "title": "Python 3.7 deprecation warning on collections.Mapping import", "user": {"login": "pquentin", "id": 42327, "node_id": "MDQ6VXNlcjQyMzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/42327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pquentin", "html_url": "https://github.com/pquentin", "followers_url": "https://api.github.com/users/pquentin/followers", "following_url": "https://api.github.com/users/pquentin/following{/other_user}", "gists_url": "https://api.github.com/users/pquentin/gists{/gist_id}", "starred_url": "https://api.github.com/users/pquentin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pquentin/subscriptions", "organizations_url": "https://api.github.com/users/pquentin/orgs", "repos_url": "https://api.github.com/users/pquentin/repos", "events_url": "https://api.github.com/users/pquentin/events{/privacy}", "received_events_url": "https://api.github.com/users/pquentin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-21T06:01:56Z", "updated_at": "2019-06-21T08:22:45Z", "closed_at": "2019-06-21T08:17:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since https://github.com/davidhalter/parso/commit/3fa8630ba9824aee3dc5f769d8fb56034890cb94, parso uses `from collections import Mapping`, but that's deprecated since Python 3.7:\r\n\r\n`DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working`\r\n\r\nThe plan is now to remove this starting with Python 3.9: https://docs.python.org/3.8/library/collections.html, but that still issues a warning on Python 3.7, and we [fail our test suite on warnings](https://github.com/python-trio/trio/pull/1120:). Since parso stills supports Python 2, I guess the fix looks like this (untested):\r\n\r\n```\r\ntry:\r\n    from collections.abc import Mapping\r\nexcept ImportErrror:\r\n    from collections import Mapping\r\n```\r\n\r\nThanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/75", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/75/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/75/events", "html_url": "https://github.com/davidhalter/parso/issues/75", "id": 454561153, "node_id": "MDU6SXNzdWU0NTQ1NjExNTM=", "number": 75, "title": "Deserialization vulnerability (CVE-2019-12760)", "user": {"login": "dhondta", "id": 9108102, "node_id": "MDQ6VXNlcjkxMDgxMDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9108102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhondta", "html_url": "https://github.com/dhondta", "followers_url": "https://api.github.com/users/dhondta/followers", "following_url": "https://api.github.com/users/dhondta/following{/other_user}", "gists_url": "https://api.github.com/users/dhondta/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhondta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhondta/subscriptions", "organizations_url": "https://api.github.com/users/dhondta/orgs", "repos_url": "https://api.github.com/users/dhondta/repos", "events_url": "https://api.github.com/users/dhondta/events{/privacy}", "received_events_url": "https://api.github.com/users/dhondta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 37, "created_at": "2019-06-11T08:51:37Z", "updated_at": "2019-07-13T13:54:29Z", "closed_at": "2019-07-10T07:26:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Vulnerability Description** : See [CVE-2019-12760](https://nvd.nist.gov/vuln/detail/CVE-2019-12760)\r\n\r\n**Note** : Let us be honest, this should be very unlikely to be exploitable in the wild.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/74", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/74/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/74/events", "html_url": "https://github.com/davidhalter/parso/issues/74", "id": 448866048, "node_id": "MDU6SXNzdWU0NDg4NjYwNDg=", "number": 74, "title": "Parsing f-strings with nested format specifiers produces incorrect SyntaxError", "user": {"login": "gousaiyang", "id": 15073518, "node_id": "MDQ6VXNlcjE1MDczNTE4", "avatar_url": "https://avatars0.githubusercontent.com/u/15073518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gousaiyang", "html_url": "https://github.com/gousaiyang", "followers_url": "https://api.github.com/users/gousaiyang/followers", "following_url": "https://api.github.com/users/gousaiyang/following{/other_user}", "gists_url": "https://api.github.com/users/gousaiyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/gousaiyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gousaiyang/subscriptions", "organizations_url": "https://api.github.com/users/gousaiyang/orgs", "repos_url": "https://api.github.com/users/gousaiyang/repos", "events_url": "https://api.github.com/users/gousaiyang/events{/privacy}", "received_events_url": "https://api.github.com/users/gousaiyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-27T13:46:07Z", "updated_at": "2019-06-02T13:19:04Z", "closed_at": "2019-06-02T13:18:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! I think I've found an issue with parsing f-strings with nested format specifiers (this should be a very rare use case though).\r\n\r\n```python\r\nimport parso\r\nx = 1\r\ny = 2\r\ntest_fmtspec_in_fmtspec = \"\"\"f'{x:{y:1}}'\"\"\"\r\nprint(f'Result: {eval(test_fmtspec_in_fmtspec)!r}')\r\nmodule = parso.parse(test_fmtspec_in_fmtspec, error_recovery=False)\r\n```\r\n\r\nThe code `test_fmtspec_in_fmtspec` is syntactically valid according to [Python document of f-strings](https://docs.python.org/3/reference/lexical_analysis.html#f-strings):\r\n\r\n```\r\nTop-level format specifiers may include nested replacement fields. These nested fields may include their own conversion fields and format specifiers, but may not include more deeply-nested replacement fields. The format specifier mini-language is the same as that used by the string .format() method.\r\n```\r\n\r\nBut the code above will produce an exception:\r\n\r\n```\r\nResult: ' 1'\r\nTraceback (most recent call last):\r\n  File \"C:\\Python37\\lib\\site-packages\\parso\\parser.py\", line 181, in _add_token\r\n    plan = stack[-1].dfa.transitions[transition]\r\nKeyError: TokenType(NUMBER)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"test_fmtspec_in_fmtspec.py\", line 6, in <module>\r\n    module = parso.parse(test_fmtspec_in_fmtspec, error_recovery=False)\r\n  File \"C:\\Python37\\lib\\site-packages\\parso\\__init__.py\", line 58, in parse\r\n    return grammar.parse(code, **kwargs)\r\n  File \"C:\\Python37\\lib\\site-packages\\parso\\grammar.py\", line 77, in parse\r\n    return self._parse(code=code, **kwargs)\r\n  File \"C:\\Python37\\lib\\site-packages\\parso\\grammar.py\", line 146, in _parse\r\n    root_node = p.parse(tokens=tokens)\r\n  File \"C:\\Python37\\lib\\site-packages\\parso\\python\\parser.py\", line 82, in parse\r\n    return super(Parser, self).parse(tokens)\r\n  File \"C:\\Python37\\lib\\site-packages\\parso\\parser.py\", line 128, in parse\r\n    self._add_token(token)\r\n  File \"C:\\Python37\\lib\\site-packages\\parso\\parser.py\", line 187, in _add_token\r\n    self.error_recovery(token)\r\n  File \"C:\\Python37\\lib\\site-packages\\parso\\python\\parser.py\", line 151, in error_recovery\r\n    return super(Parser, self).error_recovery(token)\r\n  File \"C:\\Python37\\lib\\site-packages\\parso\\parser.py\", line 151, in error_recovery\r\n    raise ParserSyntaxError('SyntaxError: invalid syntax', error_leaf)\r\nparso.parser.ParserSyntaxError: ('SyntaxError: invalid syntax', <ErrorLeaf: TokenType(NUMBER):'1', (1, 8)>)\r\n```\r\n\r\nI tested the code on both Python 3.7 and Python 3.6, both will produce this exception.\r\n(I'm using parso 0.4.0)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/73", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/73/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/73/events", "html_url": "https://github.com/davidhalter/parso/issues/73", "id": 445976666, "node_id": "MDU6SXNzdWU0NDU5NzY2NjY=", "number": 73, "title": "cython for performance", "user": {"login": "kodonnell", "id": 8204904, "node_id": "MDQ6VXNlcjgyMDQ5MDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8204904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kodonnell", "html_url": "https://github.com/kodonnell", "followers_url": "https://api.github.com/users/kodonnell/followers", "following_url": "https://api.github.com/users/kodonnell/following{/other_user}", "gists_url": "https://api.github.com/users/kodonnell/gists{/gist_id}", "starred_url": "https://api.github.com/users/kodonnell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kodonnell/subscriptions", "organizations_url": "https://api.github.com/users/kodonnell/orgs", "repos_url": "https://api.github.com/users/kodonnell/repos", "events_url": "https://api.github.com/users/kodonnell/events{/privacy}", "received_events_url": "https://api.github.com/users/kodonnell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-05-20T08:06:22Z", "updated_at": "2019-07-19T17:18:32Z", "closed_at": "2019-05-21T10:17:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently in a try-to-optimize-static-analysers mood, and I'm wondering whether we could Cythonise this? [Here's](https://github.com/PyCQA/astroid/pull/606) an example for astroid where I basically change no code, and just compile it with cython for a 20% performance improvement. There's more relevant discussion in that PR about other options too.\r\n\r\nThoughts? I imagine parso is pretty performance critical (jedi-vim etc.), but if not, then there's not much point. Especially if you don't want to depend on users installing `Cython`.\r\n\r\nIf you're interested and can point to a standard performance test case, I can submit a PR like the above for you to look at, including quantified performance improvements.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/71", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/71/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/71/events", "html_url": "https://github.com/davidhalter/parso/issues/71", "id": 443278397, "node_id": "MDU6SXNzdWU0NDMyNzgzOTc=", "number": 71, "title": "Parsing print function with \"file\" argument results in error node in Python 2 grammers", "user": {"login": "prim", "id": 1023487, "node_id": "MDQ6VXNlcjEwMjM0ODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1023487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prim", "html_url": "https://github.com/prim", "followers_url": "https://api.github.com/users/prim/followers", "following_url": "https://api.github.com/users/prim/following{/other_user}", "gists_url": "https://api.github.com/users/prim/gists{/gist_id}", "starred_url": "https://api.github.com/users/prim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prim/subscriptions", "organizations_url": "https://api.github.com/users/prim/orgs", "repos_url": "https://api.github.com/users/prim/repos", "events_url": "https://api.github.com/users/prim/events{/privacy}", "received_events_url": "https://api.github.com/users/prim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-13T08:50:59Z", "updated_at": "2019-05-20T06:09:34Z", "closed_at": "2019-05-20T06:09:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```bash \r\nPython 2.7.15 (v2.7.15:ca079a3ea3, Apr 30 2018, 16:22:17) [MSC v.1500 32 bit (Intel)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> code = \"\"\"\r\n... from __future__ import print_function\r\n... try:\r\n...     print(warn, file=sys.stderr)\r\n... except IOError:\r\n...     pass\r\n... \"\"\"\r\n>>> import parso; parso.load_grammar(version='2.7').parse(code).children[1].children[2]\r\nPythonNode(suite, [<Newline: u'\\n'>, <PythonErrorNode: print(warn, file@4,4>, <PythonErrorLeaf: OP:u'=', (4, 20)>, <PythonErrorNode: sys.stderr@4,21>, <PythonErrorLeaf: OP:u')', (4, 31)>, <PythonErrorLeaf: NEWLINE:u'\\n', (4, 32)>])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/68", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/68/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/68/events", "html_url": "https://github.com/davidhalter/parso/issues/68", "id": 440829689, "node_id": "MDU6SXNzdWU0NDA4Mjk2ODk=", "number": 68, "title": "Interest in shipping type annotations with the project?", "user": {"login": "carljm", "id": 61586, "node_id": "MDQ6VXNlcjYxNTg2", "avatar_url": "https://avatars0.githubusercontent.com/u/61586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carljm", "html_url": "https://github.com/carljm", "followers_url": "https://api.github.com/users/carljm/followers", "following_url": "https://api.github.com/users/carljm/following{/other_user}", "gists_url": "https://api.github.com/users/carljm/gists{/gist_id}", "starred_url": "https://api.github.com/users/carljm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carljm/subscriptions", "organizations_url": "https://api.github.com/users/carljm/orgs", "repos_url": "https://api.github.com/users/carljm/repos", "events_url": "https://api.github.com/users/carljm/events{/privacy}", "received_events_url": "https://api.github.com/users/carljm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-05-06T18:36:07Z", "updated_at": "2019-07-26T01:45:05Z", "closed_at": "2019-05-19T20:44:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi! Thanks for parso.\r\n\r\nWe are using parso in a project that uses Python PEP 484 type annotations and a typechecker, so we have written fairly comprehensive type stubs for Parso's API. We'd like to share this work with the community, if you are amenable. There are many options for how to do this:\r\n\r\n1) Integrate type annotations directly into the codebase (need to use the comment-based syntax in order to preserve Python2 support). This is perhaps the best in terms of ensuring they stay up to date, but it depends if you want type hint comments in the code.\r\n\r\n2) Add `.pyi` stub files next to the `.py` files in the repo. This is next-best for ensuring they stay up to date, but keeps them out of the code for those who don't care.\r\n\r\n3) Keep them out of the parso repo entirely and include them in github.com/python/typeshed instead. This is the best option if you don't want to adopt any responsibility for maintaining them, and leave it up to the users of parso and typecheckers. But we won't do this either without your permission.\r\n\r\nLet me know if any of those options sound acceptable to you, and which you prefer! Thanks again for your work on parso.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/67", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/67/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/67/events", "html_url": "https://github.com/davidhalter/parso/issues/67", "id": 439042857, "node_id": "MDU6SXNzdWU0MzkwNDI4NTc=", "number": 67, "title": "Support for adding and removing nodes in the parsed tree", "user": {"login": "mkurnikov", "id": 2341827, "node_id": "MDQ6VXNlcjIzNDE4Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2341827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkurnikov", "html_url": "https://github.com/mkurnikov", "followers_url": "https://api.github.com/users/mkurnikov/followers", "following_url": "https://api.github.com/users/mkurnikov/following{/other_user}", "gists_url": "https://api.github.com/users/mkurnikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkurnikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkurnikov/subscriptions", "organizations_url": "https://api.github.com/users/mkurnikov/orgs", "repos_url": "https://api.github.com/users/mkurnikov/repos", "events_url": "https://api.github.com/users/mkurnikov/events{/privacy}", "received_events_url": "https://api.github.com/users/mkurnikov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-05-01T01:43:04Z", "updated_at": "2020-07-31T21:59:45Z", "closed_at": "2019-05-06T18:42:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working on support for this for `isort` now in their repo. If/when I finish, I'll try to make a PR to `parso` itself. \r\n\r\nI would like to have a functionality to:\r\n1. Add/remove node (adjusting `start_pos` of nodes for subsequent nodes). \r\n2. Add/remove lines (same thing). ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/66", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/66/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/66/events", "html_url": "https://github.com/davidhalter/parso/issues/66", "id": 433630981, "node_id": "MDU6SXNzdWU0MzM2MzA5ODE=", "number": 66, "title": "Abnormal behavior when using get_defined_names", "user": {"login": "DennielZhang", "id": 43083462, "node_id": "MDQ6VXNlcjQzMDgzNDYy", "avatar_url": "https://avatars3.githubusercontent.com/u/43083462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DennielZhang", "html_url": "https://github.com/DennielZhang", "followers_url": "https://api.github.com/users/DennielZhang/followers", "following_url": "https://api.github.com/users/DennielZhang/following{/other_user}", "gists_url": "https://api.github.com/users/DennielZhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/DennielZhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DennielZhang/subscriptions", "organizations_url": "https://api.github.com/users/DennielZhang/orgs", "repos_url": "https://api.github.com/users/DennielZhang/repos", "events_url": "https://api.github.com/users/DennielZhang/events{/privacy}", "received_events_url": "https://api.github.com/users/DennielZhang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-16T07:43:27Z", "updated_at": "2019-09-04T23:06:57Z", "closed_at": "2019-05-06T18:43:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI found that when I use `get_defined_names` for a atom_expr object, it just don't wok.\r\n\r\nThen atom_expr code that I used to test is below:\r\n```python\r\ndetections['detection_masks'] = tf.to_float(\r\n          tf.greater_equal(tf.sigmoid(mask_predictions), mask_threshold))\r\n```\r\nI thought it will return me `detections['detection_masks]` after `get_defined_names`, but it returns nothing.\r\n\r\nI checked your codes in `get_defined_names` and `_defined_names`. I found that you handle it like this:\r\n```python\r\nelif current.type in ('power', 'atom_expr'):\r\n        if current.children[-2] != '**':  # Just if there's no operation\r\n            trailer = current.children[-1]\r\n            if trailer.children[0] == '.':\r\n                names.append(trailer.children[1])\r\n```\r\nSo, you just add to `names` only if it looks like `xx.xxx`. So I just want to ask why don't you consider situation that I met and how you define `defined_name`.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/65", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/65/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/65/events", "html_url": "https://github.com/davidhalter/parso/issues/65", "id": 432975656, "node_id": "MDU6SXNzdWU0MzI5NzU2NTY=", "number": 65, "title": "Parsing integer literals with 'L' or 'l' suffix results in error nodes in Python 2 grammars", "user": {"login": "adam-kucz", "id": 17096872, "node_id": "MDQ6VXNlcjE3MDk2ODcy", "avatar_url": "https://avatars3.githubusercontent.com/u/17096872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adam-kucz", "html_url": "https://github.com/adam-kucz", "followers_url": "https://api.github.com/users/adam-kucz/followers", "following_url": "https://api.github.com/users/adam-kucz/following{/other_user}", "gists_url": "https://api.github.com/users/adam-kucz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adam-kucz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adam-kucz/subscriptions", "organizations_url": "https://api.github.com/users/adam-kucz/orgs", "repos_url": "https://api.github.com/users/adam-kucz/repos", "events_url": "https://api.github.com/users/adam-kucz/events{/privacy}", "received_events_url": "https://api.github.com/users/adam-kucz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 600765132, "node_id": "MDU6TGFiZWw2MDA3NjUxMzI=", "url": "https://api.github.com/repos/davidhalter/parso/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-14T13:20:27Z", "updated_at": "2019-05-19T20:45:33Z", "closed_at": "2019-05-19T20:45:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Minimal example\r\n\r\n`parso.load_grammar(version='2.7').parse(\"n = 1L\").children`\r\n\r\nresults in\r\n\r\n`[<PythonErrorNode: n = 1@1,0>,\r\n <Name: L@1,5>,\r\n <EndMarker: prefix='' end_pos=(1, 6)>]`\r\n\r\nbut it is valid Python 2 code", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/63", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/63/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/63/events", "html_url": "https://github.com/davidhalter/parso/issues/63", "id": 423768301, "node_id": "MDU6SXNzdWU0MjM3NjgzMDE=", "number": 63, "title": "tests fail under Python 3.8", "user": {"login": "carlwgeorge", "id": 12187228, "node_id": "MDQ6VXNlcjEyMTg3MjI4", "avatar_url": "https://avatars2.githubusercontent.com/u/12187228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlwgeorge", "html_url": "https://github.com/carlwgeorge", "followers_url": "https://api.github.com/users/carlwgeorge/followers", "following_url": "https://api.github.com/users/carlwgeorge/following{/other_user}", "gists_url": "https://api.github.com/users/carlwgeorge/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlwgeorge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlwgeorge/subscriptions", "organizations_url": "https://api.github.com/users/carlwgeorge/orgs", "repos_url": "https://api.github.com/users/carlwgeorge/repos", "events_url": "https://api.github.com/users/carlwgeorge/events{/privacy}", "received_events_url": "https://api.github.com/users/carlwgeorge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-03-21T14:46:32Z", "updated_at": "2019-04-05T17:11:30Z", "closed_at": "2019-04-05T17:11:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed that Python 3.8 is at least on your mind due to #47 and #52.  However I discovered that the tests do not pass on that version.  Using the `python:3.8.0a2` container image from Docker Hub, I cloned this repo, ran `pip install -e .[testing]`, then `pytest`, and got many failures.\r\n\r\n<details>\r\n<summary>pytest output (click to expand)</summary>\r\n\r\n```\r\nroot@tassadar:~/parso# pytest \r\n========================================================= test session starts ==========================================================\r\nplatform linux -- Python 3.8.0a2, pytest-4.3.1, py-1.8.0, pluggy-0.9.0\r\nrootdir: /root/parso, inifile: pytest.ini\r\ncollected 937 items                                                                                                                    \r\n\r\nparso/__init__.py .                                                                                                              [  0%]\r\nparso/python/tree.py .                                                                                                           [  0%]\r\ntest/test_absolute_import.py ...                                                                                                 [  0%]\r\ntest/test_cache.py ..                                                                                                            [  0%]\r\ntest/test_diff_parser.py ............................................................                                            [  7%]\r\ntest/test_error_recovery.py ............                                                                                         [  8%]\r\ntest/test_file_python_errors.py .......                                                                                          [  9%]\r\ntest/test_fstring.py .................................                                                                           [ 12%]\r\ntest/test_get_code.py ......                                                                                                     [ 13%]\r\ntest/test_grammar.py .                                                                                                           [ 13%]\r\ntest/test_load_grammar.py ............                                                                                           [ 14%]\r\ntest/test_normalizer_issues_files.py ..................................                                                          [ 18%]\r\ntest/test_old_fast_parser.py ...............                                                                                     [ 19%]\r\ntest/test_param_splitting.py .........                                                                                           [ 20%]\r\ntest/test_parser.py ............................................................................................................ [ 32%]\r\n.............                                                                                                                    [ 33%]\r\ntest/test_parser_tree.py ...................................................                                                     [ 39%]\r\ntest/test_pep8.py ...                                                                                                            [ 39%]\r\ntest/test_pgen2.py .......................x..................................................................................... [ 51%]\r\n................................................................................................................................ [ 64%]\r\n.................................................                                                                                [ 70%]\r\ntest/test_prefix.py .....................                                                                                        [ 72%]\r\ntest/test_python_errors.py ..F....F......FF..........FF........FFFFFFFFFFFFFFFFFFFFF.FFFFFFFFFFFFF................F............. [ 83%]\r\n..................................FF.FFF.......F................................................                                 [ 93%]\r\ntest/test_tokenize.py ........................................                                                                   [ 97%]\r\ntest/test_utils.py ......................                                                                                        [100%]\r\n\r\n=============================================================== FAILURES ===============================================================\r\n________________ test_python_exception_matches[for a in [1]:\\n    try:\\n        pass\\n    finally:\\n        continue\\n] ________________\r\n\r\ncode = 'for a in [1]:\\n    try:\\n        pass\\n    finally:\\n        continue\\n'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n>       wanted, line_nr = _get_actual_exception(code)\r\n\r\ntest/test_python_errors.py:32: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncode = 'for a in [1]:\\n    try:\\n        pass\\n    finally:\\n        continue\\n'\r\n\r\n    def _get_actual_exception(code):\r\n        with warnings.catch_warnings():\r\n            # We don't care about warnings where locals/globals misbehave here.\r\n            # It's as simple as either an error or not.\r\n            warnings.filterwarnings('ignore', category=SyntaxWarning)\r\n            try:\r\n                compile(code, '<unknown>', 'exec')\r\n            except (SyntaxError, IndentationError) as e:\r\n                wanted = e.__class__.__name__ + ': ' + e.msg\r\n                line_nr = e.lineno\r\n            except ValueError as e:\r\n                # The ValueError comes from byte literals in Python 2 like '\\x'\r\n                # that are oddly enough not SyntaxErrors.\r\n                wanted = 'SyntaxError: (value error) ' + str(e)\r\n                line_nr = None\r\n            else:\r\n>               assert False, \"The piece of code should raise an exception.\"\r\nE               AssertionError: The piece of code should raise an exception.\r\nE               assert False\r\n\r\ntest/test_python_errors.py:95: AssertionError\r\n_________________________________________ test_python_exception_matches[f(x for x in bar, 1)] __________________________________________\r\n\r\ncode = 'f(x for x in bar, 1)'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: positional argument follows keyword argument' in ['SyntaxError: Generator expression must be parenthesized']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_____________________________________________ test_python_exception_matches[__debug__ = 1] _____________________________________________\r\n\r\ncode = '__debug__ = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: assignment to keyword' in ['SyntaxError: cannot assign to __debug__']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n______________________________________ test_python_exception_matches[with x() as __debug__: pass] ______________________________________\r\n\r\ncode = 'with x() as __debug__: pass'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert 'SyntaxError: assignment to keyword' in ['SyntaxError: cannot assign to __debug__']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_______________________________________________ test_python_exception_matches[foo(+a=3)] _______________________________________________\r\n\r\ncode = 'foo(+a=3)'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: keyword can't be an expression\" in ['SyntaxError: expression cannot contain assignment, perhaps you meant \"==\"?']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n____________________________________________ test_python_exception_matches[f(lambda: 1=1)] _____________________________________________\r\n\r\ncode = 'f(lambda: 1=1)'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert 'SyntaxError: lambda cannot contain assignment' in ['SyntaxError: expression cannot contain assignment, perhaps you meant \"==\"?']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n____________________________________________ test_python_exception_matches[lambda a: 1 = 1] ____________________________________________\r\n\r\ncode = 'lambda a: 1 = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to lambda\" in ['SyntaxError: cannot assign to lambda']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n__________________________________________ test_python_exception_matches[[x for x in y] = 1] ___________________________________________\r\n\r\ncode = '[x for x in y] = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert None in ['SyntaxError: cannot assign to list comprehension']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n__________________________________________ test_python_exception_matches[{x for x in y} = 1] ___________________________________________\r\n\r\ncode = '{x for x in y} = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to literal\" in ['SyntaxError: cannot assign to set comprehension']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_________________________________________ test_python_exception_matches[{x:x for x in y} = 1] __________________________________________\r\n\r\ncode = '{x:x for x in y} = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to literal\" in ['SyntaxError: cannot assign to dict comprehension']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n__________________________________________ test_python_exception_matches[(x for x in y) = 1] ___________________________________________\r\n\r\ncode = '(x for x in y) = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert None in ['SyntaxError: cannot assign to generator expression']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_______________________________________________ test_python_exception_matches[None = 1] ________________________________________________\r\n\r\ncode = 'None = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to keyword\" in ['SyntaxError: cannot assign to None']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n________________________________________________ test_python_exception_matches[... = 1] ________________________________________________\r\n\r\ncode = '... = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to Ellipsis\" in ['SyntaxError: cannot assign to Ellipsis']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n______________________________________________ test_python_exception_matches[a == b = 1] _______________________________________________\r\n\r\ncode = 'a == b = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to comparison\" in ['SyntaxError: cannot assign to comparison']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n______________________________________________ test_python_exception_matches[{a, b} = 1] _______________________________________________\r\n\r\ncode = '{a, b} = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to literal\" in ['SyntaxError: cannot assign to set display']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n______________________________________________ test_python_exception_matches[{a: b} = 1] _______________________________________________\r\n\r\ncode = '{a: b} = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to literal\" in ['SyntaxError: cannot assign to dict display']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_________________________________________________ test_python_exception_matches[1 = 1] _________________________________________________\r\n\r\ncode = '1 = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to literal\" in ['SyntaxError: cannot assign to literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n________________________________________________ test_python_exception_matches[\"\" = 1] _________________________________________________\r\n\r\ncode = '\"\" = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to literal\" in ['SyntaxError: cannot assign to literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_______________________________________________ test_python_exception_matches[b\"\" = 10] ________________________________________________\r\n\r\ncode = 'b\"\" = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to literal\" in ['SyntaxError: cannot assign to literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_______________________________________________ test_python_exception_matches[b\"\" = 11] ________________________________________________\r\n\r\ncode = 'b\"\" = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to literal\" in ['SyntaxError: cannot assign to literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_______________________________________________ test_python_exception_matches[\"\" \"\" = 1] _______________________________________________\r\n\r\ncode = '\"\" \"\" = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to literal\" in ['SyntaxError: cannot assign to literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_______________________________________________ test_python_exception_matches[1 | 1 = 3] _______________________________________________\r\n\r\ncode = '1 | 1 = 3'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to operator\" in ['SyntaxError: cannot assign to operator']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_______________________________________________ test_python_exception_matches[1**1 = 3] ________________________________________________\r\n\r\ncode = '1**1 = 3'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to operator\" in ['SyntaxError: cannot assign to operator']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n________________________________________________ test_python_exception_matches[~ 1 = 3] ________________________________________________\r\n\r\ncode = '~ 1 = 3'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to operator\" in ['SyntaxError: cannot assign to operator']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_______________________________________________ test_python_exception_matches[not 1 = 3] _______________________________________________\r\n\r\ncode = 'not 1 = 3'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to operator\" in ['SyntaxError: cannot assign to operator']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n______________________________________________ test_python_exception_matches[1 and 1 = 3] ______________________________________________\r\n\r\ncode = '1 and 1 = 3'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to operator\" in ['SyntaxError: cannot assign to operator']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_______________________________________ test_python_exception_matches[def foo(): (yield 1) = 3] ________________________________________\r\n\r\ncode = 'def foo(): (yield 1) = 3'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to yield expression\" in ['SyntaxError: cannot assign to yield expression']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_____________________________________ test_python_exception_matches[async def foo(): await x = 3] ______________________________________\r\n\r\ncode = 'async def foo(): await x = 3'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to await expression\" in ['SyntaxError: cannot assign to await expression']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n__________________________________________ test_python_exception_matches[(a if a else a) = a] __________________________________________\r\n\r\ncode = '(a if a else a) = a'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to conditional expression\" in ['SyntaxError: cannot assign to conditional expression']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_______________________________________________ test_python_exception_matches[a, 1 = x] ________________________________________________\r\n\r\ncode = 'a, 1 = x'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to literal\" in ['SyntaxError: cannot assign to literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_______________________________________________ test_python_exception_matches[foo() = 1] _______________________________________________\r\n\r\ncode = 'foo() = 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to function call\" in ['SyntaxError: cannot assign to function call']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_________________________________________ test_python_exception_matches[with x as foo(): pass] _________________________________________\r\n\r\ncode = 'with x as foo(): pass'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to function call\" in ['SyntaxError: cannot assign to function call']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n______________________________________________ test_python_exception_matches[del bar, 1] _______________________________________________\r\n\r\ncode = 'del bar, 1'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't delete literal\" in ['SyntaxError: cannot delete literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_________________________________________ test_python_exception_matches[for x, 1 in []: pass] __________________________________________\r\n\r\ncode = 'for x, 1 in []: pass'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to literal\" in ['SyntaxError: cannot assign to literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n________________________________________ test_python_exception_matches[for (not 1) in []: pass] ________________________________________\r\n\r\ncode = 'for (not 1) in []: pass'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to operator\" in ['SyntaxError: cannot assign to operator']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n____________________________________________ test_python_exception_matches[[x for 1 in y]] _____________________________________________\r\n\r\ncode = '[x for 1 in y]'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert None in ['SyntaxError: cannot assign to literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n___________________________________________ test_python_exception_matches[[x for a, 3 in y]] ___________________________________________\r\n\r\ncode = '[x for a, 3 in y]'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert None in ['SyntaxError: cannot assign to literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n____________________________________________ test_python_exception_matches[(x for 1 in y)] _____________________________________________\r\n\r\ncode = '(x for 1 in y)'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert None in ['SyntaxError: cannot assign to literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n____________________________________________ test_python_exception_matches[{x for 1 in y}] _____________________________________________\r\n\r\ncode = '{x for 1 in y}'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert None in ['SyntaxError: cannot assign to literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n___________________________________________ test_python_exception_matches[{x:x for 1 in y}] ____________________________________________\r\n\r\ncode = '{x:x for 1 in y}'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert None in ['SyntaxError: cannot assign to literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n__________________________________________ test_python_exception_matches[{**{} for a in [1]}] __________________________________________\r\n\r\ncode = '{**{} for a in [1]}'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert None in ['SyntaxError: dict unpacking cannot be used in dict comprehension']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_________________________ test_python_exception_matches[async def foo():\\n def nofoo():[x async for x in []]] __________________________\r\n\r\ncode = 'async def foo():\\n def nofoo():[x async for x in []]'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n>       errors = _get_error_list(code)\r\n\r\ntest/test_python_errors.py:34: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ntest/test_python_errors.py:22: in _get_error_list\r\n    return list(grammar.iter_errors(tree))\r\nparso/grammar.py:165: in iter_errors\r\n    return self._get_normalizer_issues(node, self._error_normalizer_config)\r\nparso/grammar.py:185: in _get_normalizer_issues\r\n    normalizer.walk(node)\r\nparso/normalizer.py:34: in walk\r\n    value = self.visit(node)\r\nparso/python/errors.py:280: in visit\r\n    return super(ErrorFinder, self).visit(node)\r\nparso/normalizer.py:45: in visit\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/normalizer.py:45: in <genexpr>\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/python/errors.py:280: in visit\r\n    return super(ErrorFinder, self).visit(node)\r\nparso/normalizer.py:45: in visit\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/normalizer.py:45: in <genexpr>\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/python/errors.py:280: in visit\r\n    return super(ErrorFinder, self).visit(node)\r\nparso/normalizer.py:45: in visit\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/normalizer.py:45: in <genexpr>\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/python/errors.py:280: in visit\r\n    return super(ErrorFinder, self).visit(node)\r\nparso/normalizer.py:45: in visit\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/normalizer.py:45: in <genexpr>\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/python/errors.py:280: in visit\r\n    return super(ErrorFinder, self).visit(node)\r\nparso/normalizer.py:45: in visit\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/normalizer.py:45: in <genexpr>\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/python/errors.py:280: in visit\r\n    return super(ErrorFinder, self).visit(node)\r\nparso/normalizer.py:45: in visit\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/normalizer.py:45: in <genexpr>\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/python/errors.py:280: in visit\r\n    return super(ErrorFinder, self).visit(node)\r\nparso/normalizer.py:45: in visit\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/normalizer.py:45: in <genexpr>\r\n    return ''.join(self.visit(child) for child in children)\r\nparso/python/errors.py:280: in visit\r\n    return super(ErrorFinder, self).visit(node)\r\nparso/normalizer.py:44: in visit\r\n    with self.visit_node(node):\r\n/usr/local/lib/python3.8/contextlib.py:113: in __enter__\r\n    return next(self.gen)\r\nparso/python/errors.py:285: in visit_node\r\n    self._check_type_rules(node)\r\nparso/normalizer.py:54: in _check_type_rules\r\n    rule.feed_node(node)\r\nparso/normalizer.py:182: in feed_node\r\n    if self.is_issue(node):\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <parso.python.errors._CompForRule object at 0x7f2dfe14cb50>, node = <CompFor: async for x in []@2,16>\r\n\r\n    def is_issue(self, node):\r\n        # Some of the nodes here are already used, so no else if\r\n>       expr_list = node.children[1 + int(node.children[0] == 'async')]\r\nE       IndexError: list index out of range\r\n\r\nparso/python/errors.py:948: IndexError\r\n__________________________________________ test_python_exception_matches[[*[] for a in [1]]] ___________________________________________\r\n\r\ncode = '[*[] for a in [1]]'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       AssertionError: assert None in ['SyntaxError: iterable unpacking cannot be used in comprehension']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n_______________________________________________ test_python_exception_matches[del None] ________________________________________________\r\n\r\ncode = 'del None'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't delete keyword\" in ['SyntaxError: cannot delete None']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n______________________________________________ test_python_exception_matches[(True,) = x] ______________________________________________\r\n\r\ncode = '(True,) = x'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to keyword\" in ['SyntaxError: cannot assign to True']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n___________________________________________ test_python_exception_matches[([False], a) = x] ____________________________________________\r\n\r\ncode = '([False], a) = x'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to keyword\" in ['SyntaxError: cannot assign to False']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n______________________________________________ test_python_exception_matches[[a, 1] += 3] ______________________________________________\r\n\r\ncode = '[a, 1] += 3'\r\n\r\n    @pytest.mark.parametrize('code', FAILING_EXAMPLES)\r\n    def test_python_exception_matches(code):\r\n        wanted, line_nr = _get_actual_exception(code)\r\n    \r\n        errors = _get_error_list(code)\r\n        actual = None\r\n        if errors:\r\n            error, = errors\r\n            actual = error.message\r\n>       assert actual in wanted\r\nE       assert \"SyntaxError: can't assign to literal\" in ['SyntaxError: cannot assign to literal']\r\n\r\ntest/test_python_errors.py:39: AssertionError\r\n========================================== 47 failed, 889 passed, 1 xfailed in 11.89 seconds ===========================================\r\n```\r\n</details>\r\n\r\nI was able to reproduce the same errors using the python38 package in Fedora.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/60", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/60/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/60/events", "html_url": "https://github.com/davidhalter/parso/issues/60", "id": 412983021, "node_id": "MDU6SXNzdWU0MTI5ODMwMjE=", "number": 60, "title": "Question: Possible to serialize AST, or get the INDENT token in the parse tree?", "user": {"login": "awwong1", "id": 2760111, "node_id": "MDQ6VXNlcjI3NjAxMTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2760111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awwong1", "html_url": "https://github.com/awwong1", "followers_url": "https://api.github.com/users/awwong1/followers", "following_url": "https://api.github.com/users/awwong1/following{/other_user}", "gists_url": "https://api.github.com/users/awwong1/gists{/gist_id}", "starred_url": "https://api.github.com/users/awwong1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awwong1/subscriptions", "organizations_url": "https://api.github.com/users/awwong1/orgs", "repos_url": "https://api.github.com/users/awwong1/repos", "events_url": "https://api.github.com/users/awwong1/events{/privacy}", "received_events_url": "https://api.github.com/users/awwong1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-21T15:29:28Z", "updated_at": "2019-02-22T18:32:16Z", "closed_at": "2019-02-22T18:32:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using `Python3.6` with Parso `v0.3.4`.\r\n\r\nI am looking for a way to serialize an AST into a list. Is it possible to get the `INDENT` and `DEDENT` tokens from the parse tree?\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n# -*- coding: utf-8 -*-\r\ndef main():\r\n    print(\"Hello, world!\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nI parse this code block by stepping through the siblings and children of each node, starting from the root module.\r\n```python\r\nfrom parso import load_grammar\r\n\r\nTYPE_TERMINAL = \"T\"\r\nTYPE_STRUCTURE = \"S\" # todo handle structure start & end?\r\n\r\ndummy_code = \"\"\"#!/usr/bin/env python3\r\n# -*- coding: utf-8 -*-\r\ndef main():\r\n    print(\"Hello, world!\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n\"\"\"\r\n\r\ndef parse_source_code(source_code):\r\n    \"\"\"take source code, convert into serialized AST\r\n    \"\"\"\r\n    grammar = load_grammar()\r\n    root = grammar.parse(source_code)\r\n    ast_serialized = []\r\n\r\n    to_parse_stack = [root, ]\r\n\r\n    while to_parse_stack:\r\n        struct_or_terminal_node = to_parse_stack.pop()\r\n        if hasattr(struct_or_terminal_node, 'children') and struct_or_terminal_node.children:\r\n            # this is a structure node\r\n            struct_node = struct_or_terminal_node\r\n            ast_serialized.append((TYPE_STRUCTURE, struct_node.type))\r\n            for child in reversed(struct_node.children):\r\n                to_parse_stack.append(child)\r\n        else:\r\n            # there are no children, this is a leaf\r\n            terminal_node = struct_or_terminal_node\r\n            child_code = terminal_node.get_code(include_prefix=False)\r\n            child_type = terminal_node.type\r\n            ast_serialized.append((TYPE_TERMINAL, child_type, child_code))\r\n    return ast_serialized\r\n\r\nprint(parse_source_code(dummy_code))\r\n```\r\n\r\nThe outputted list show the structure nodes and terminal nodes as 2,3-tuples.\r\n```python\r\n[('S', 'file_input'), ('S', 'funcdef'), ('T', 'keyword', 'def'), ('T', 'name', 'main'), ('S', 'parameters'), ('T', 'operator', '('), ('T', 'operator', ')'), ('T', 'operator', ':'), ('S', 'suite'), ('T', 'newline', '\\n'), ('S', 'simple_stmt'), ('S', 'atom_expr'), ('T', 'name', 'print'), ('S', 'trailer'), ('T', 'operator', '('), ('T', 'string', '\"Hello, world!\"'), ('T', 'operator', ')'), ('T', 'newline', '\\n'), ('S', 'if_stmt'), ('T', 'keyword', 'if'), ('S', 'comparison'), ('T', 'name', '__name__'), ('T', 'operator', '=='), ('T', 'string', '\"__main__\"'), ('T', 'operator', ':'), ('S', 'suite'), ('T', 'newline', '\\n'), ('S', 'simple_stmt'), ('S', 'atom_expr'), ('T', 'name', 'main'), ('S', 'trailer'), ('T', 'operator', '('), ('T', 'operator', ')'), ('T', 'newline', '\\n'), ('T', 'endmarker', '')]\r\n```\r\nIs it possible to also output the `indent` and `dedent` tokens similar to how the `newline` tokens are provided?\r\n\r\nThe high level goal is to get a serialized AST that I can reconstruct the original source code from. Right now, I join all of the leaf node values together with a single white space separator. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/59", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/59/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/59/events", "html_url": "https://github.com/davidhalter/parso/issues/59", "id": 411024816, "node_id": "MDU6SXNzdWU0MTEwMjQ4MTY=", "number": 59, "title": "module.iter_imports() doesn't give all the imports in a file", "user": {"login": "maldil", "id": 20140049, "node_id": "MDQ6VXNlcjIwMTQwMDQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/20140049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maldil", "html_url": "https://github.com/maldil", "followers_url": "https://api.github.com/users/maldil/followers", "following_url": "https://api.github.com/users/maldil/following{/other_user}", "gists_url": "https://api.github.com/users/maldil/gists{/gist_id}", "starred_url": "https://api.github.com/users/maldil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maldil/subscriptions", "organizations_url": "https://api.github.com/users/maldil/orgs", "repos_url": "https://api.github.com/users/maldil/repos", "events_url": "https://api.github.com/users/maldil/events{/privacy}", "received_events_url": "https://api.github.com/users/maldil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-16T04:21:51Z", "updated_at": "2019-02-19T19:56:52Z", "closed_at": "2019-02-19T19:56:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all thank you for the wonderful tool. \r\nI am trying to parse couple of python projects from the tool. \r\nI wrote following test code to print all the import statements in a file.\r\n\r\n```\r\npath = \"xxx\"\r\n    try:\r\n        source = open(path, \"r\", encoding=\"ISO-8859-1\").read()\r\n    except FileNotFoundError as f:\r\n        print(f)\r\n\r\n        #\r\n    module = parso.parse(source)\r\n    for x in module.iter_imports():\r\n        if isinstance(x,parso.python.tree.ImportFrom):\r\n            print ([y.value for y in x.get_from_names()])\r\n            print([y.value for y in x.get_defined_names()])\r\n        else:\r\n            importname = []\r\n            imname = [y[0] for y in x._dotted_as_names()]\r\n            for l in imname:\r\n                for r in l:\r\n                    importname.append(r.value)\r\n```\r\nIt gives me correct results for all the imports which are at the start of the file.\r\nHowever it doesn't provide me the import statements which are at the middle of the file\r\n```\r\n      def _build(self, model):\r\n                \"\"\" Create the backend-specific placeholder.\r\n                \"\"\"\r\n                backend = model.get_backend()\r\n                if backend.get_name() == 'keras':\r\n\r\n                        if self.highway:\r\n                                raise ValueError('Backend does not support highway dense '\r\n                                        'layers.')\r\n\r\n                        import keras.layers as L                        # pylint: disable=import-error\r\n\r\n                        if self.auto_flatten:\r\n                                yield L.Flatten()\r\n\r\n                        if backend.keras_version() == 1:\r\n                                func = lambda x, **kwargs: L.Dense(output_dim=x, **kwargs)\r\n                        else:\r\n                                func = lambda x, **kwargs: L.Dense(units=x, **kwargs)\r\n\r\n                        for v in self.size[:-1]:\r\n                                yield func(v, trainable=not self.frozen)\r\n\r\n                        yield func(\r\n                                self.size[-1],\r\n                                name=self.name,\r\n                                trainable=not self.frozen\r\n                        )\r\n\r\n                elif backend.get_name() == 'pytorch':\r\n\r\n```\r\nThe result of the ```iter_imports``` doesn't give me the stmt ``` import keras.layers as L ```\r\nWould this be a bug or error in my parsing code?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/58", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/58/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/58/events", "html_url": "https://github.com/davidhalter/parso/issues/58", "id": 406154691, "node_id": "MDU6SXNzdWU0MDYxNTQ2OTE=", "number": 58, "title": "Python 3.7.2 and diff parser", "user": {"login": "iced", "id": 391447, "node_id": "MDQ6VXNlcjM5MTQ0Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/391447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iced", "html_url": "https://github.com/iced", "followers_url": "https://api.github.com/users/iced/followers", "following_url": "https://api.github.com/users/iced/following{/other_user}", "gists_url": "https://api.github.com/users/iced/gists{/gist_id}", "starred_url": "https://api.github.com/users/iced/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iced/subscriptions", "organizations_url": "https://api.github.com/users/iced/orgs", "repos_url": "https://api.github.com/users/iced/repos", "events_url": "https://api.github.com/users/iced/events{/privacy}", "received_events_url": "https://api.github.com/users/iced/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-04T01:19:40Z", "updated_at": "2019-02-10T20:15:46Z", "closed_at": "2019-02-05T23:55:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Issue is consistently reproducible with python 3.7.2 and doesn't exist with python 3.5.6.\r\n\r\nI'm using parso (used from anaconda-mode/jedi, but that should not matter - I'm pretty sure it's easy to reproduce with 2 direct parso invokes, but sadly I don't have time for this right now) and encountering following error time to time:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/root/.emacs.d/var/anaconda-mode/0.1.13/service_factory-0.1.5-py3.7.egg/service_factory/service.py\", line 101, in apply\r\n    result = method(**params)\r\n  File \"<string>\", line 97, in wrapper\r\n  File \"/root/.emacs.d/var/anaconda-mode/0.1.13/jedi-0.13.2-py3.7.egg/jedi/api/__init__.py\", line 118, in __init__\r\n    cache_path=settings.cache_directory,\r\n  File \"/root/.emacs.d/var/anaconda-mode/0.1.13/jedi-0.13.2-py3.7.egg/jedi/evaluate/__init__.py\", line 388, in parse_and_get_code\r\n    return self.grammar.parse(code=code, path=path, **kwargs), code\r\n  File \"/root/.emacs.d/var/anaconda-mode/0.1.13/parso-0.3.2-py3.7.egg/parso/grammar.py\", line 76, in parse\r\n    return self._parse(code=code, **kwargs)\r\n  File \"/root/.emacs.d/var/anaconda-mode/0.1.13/parso-0.3.2-py3.7.egg/parso/grammar.py\", line 126, in _parse\r\n    new_lines=lines\r\n  File \"/root/.emacs.d/var/anaconda-mode/0.1.13/parso-0.3.2-py3.7.egg/parso/python/diff.py\", line 236, in update\r\n    self._copy_from_old_parser(line_offset, i2, j2)\r\n  File \"/root/.emacs.d/var/anaconda-mode/0.1.13/parso-0.3.2-py3.7.egg/parso/python/diff.py\", line 289, in _copy_from_old_parser\r\n    line_offset\r\n  File \"/root/.emacs.d/var/anaconda-mode/0.1.13/parso-0.3.2-py3.7.egg/parso/python/diff.py\", line 598, in copy_nodes\r\n    self.prefix,\r\n  File \"/root/.emacs.d/var/anaconda-mode/0.1.13/parso-0.3.2-py3.7.egg/parso/python/diff.py\", line 686, in _copy_nodes\r\n    assert last_line_offset_leaf == ':'\r\nAssertionError\r\n```\r\n\r\nApparently it got something to do with parser results caching/diffing. After some code reading/debugging of diff.py I decided to turn it off in jedi (jedi.settings.fast_parser = False) and problem disappeared for 3.7.2 as well.\r\n\r\nI don't think it's high priority issue but it'd be nice if it'll be fixed at some point.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/57", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/57/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/57/events", "html_url": "https://github.com/davidhalter/parso/issues/57", "id": 405916358, "node_id": "MDU6SXNzdWU0MDU5MTYzNTg=", "number": 57, "title": "AttributeError: 'PythonNode' object has no attribute 'string_prefix'", "user": {"login": "awwong1", "id": 2760111, "node_id": "MDQ6VXNlcjI3NjAxMTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2760111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awwong1", "html_url": "https://github.com/awwong1", "followers_url": "https://api.github.com/users/awwong1/followers", "following_url": "https://api.github.com/users/awwong1/following{/other_user}", "gists_url": "https://api.github.com/users/awwong1/gists{/gist_id}", "starred_url": "https://api.github.com/users/awwong1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awwong1/subscriptions", "organizations_url": "https://api.github.com/users/awwong1/orgs", "repos_url": "https://api.github.com/users/awwong1/repos", "events_url": "https://api.github.com/users/awwong1/events{/privacy}", "received_events_url": "https://api.github.com/users/awwong1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-01T23:46:11Z", "updated_at": "2019-02-06T09:06:26Z", "closed_at": "2019-02-06T00:28:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using `Python 3.6.7` and Parso `0.3.2`\r\n\r\n```python\r\nfrom parso import load_grammar\r\n\r\ngrammar = load_grammar()\r\nmodule = grammar.parse('%p25%=\" & echoc -y \"F\" & echoc -w \"')\r\nerrors = grammar.iter_errors(module)\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/grammar.py\", line 165, in iter_errors\r\n    return self._get_normalizer_issues(node, self._error_normalizer_config)\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/grammar.py\", line 185, in _get_normalizer_issues\r\n    normalizer.walk(node)\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/normalizer.py\", line 34, in walk\r\n    value = self.visit(node)\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/python/errors.py\", line 280, in visit\r\n    return super(ErrorFinder, self).visit(node)\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/normalizer.py\", line 45, in visit\r\n    return ''.join(self.visit(child) for child in children)\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/normalizer.py\", line 45, in <genexpr>\r\n    return ''.join(self.visit(child) for child in children)\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/python/errors.py\", line 280, in visit\r\n    return super(ErrorFinder, self).visit(node)\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/normalizer.py\", line 45, in visit\r\n    return ''.join(self.visit(child) for child in children)\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/normalizer.py\", line 45, in <genexpr>\r\n    return ''.join(self.visit(child) for child in children)\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/python/errors.py\", line 280, in visit\r\n    return super(ErrorFinder, self).visit(node)\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/normalizer.py\", line 44, in visit\r\n    with self.visit_node(node):\r\n  File \"/usr/lib/python3.7/contextlib.py\", line 112, in __enter__\r\n    return next(self.gen)\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/python/errors.py\", line 285, in visit_node\r\n    self._check_type_rules(node)\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/normalizer.py\", line 54, in _check_type_rules\r\n    rule.feed_node(node)\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/normalizer.py\", line 182, in feed_node\r\n    if self.is_issue(node):\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/python/errors.py\", line 580, in is_issue\r\n    if first_is_bytes != self._is_bytes_literal(string):\r\n  File \"/home/alexander/sandbox/src/git.udia.ca/alex/msr-2019-analysis/venv/lib/python3.7/site-packages/parso/python/errors.py\", line 573, in _is_bytes_literal\r\n    return 'b' in string.string_prefix.lower()\r\nAttributeError: 'PythonNode' object has no attribute 'string_prefix'\r\n```\r\n\r\nIs this expected? I'm doing some data mining and my input source code is not guaranteed to be python source code.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/56", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/56/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/56/events", "html_url": "https://github.com/davidhalter/parso/issues/56", "id": 404627124, "node_id": "MDU6SXNzdWU0MDQ2MjcxMjQ=", "number": 56, "title": "AssertionError thrown on autocomplete keyword `from`", "user": {"login": "sw00", "id": 2427972, "node_id": "MDQ6VXNlcjI0Mjc5NzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2427972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sw00", "html_url": "https://github.com/sw00", "followers_url": "https://api.github.com/users/sw00/followers", "following_url": "https://api.github.com/users/sw00/following{/other_user}", "gists_url": "https://api.github.com/users/sw00/gists{/gist_id}", "starred_url": "https://api.github.com/users/sw00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sw00/subscriptions", "organizations_url": "https://api.github.com/users/sw00/orgs", "repos_url": "https://api.github.com/users/sw00/repos", "events_url": "https://api.github.com/users/sw00/events{/privacy}", "received_events_url": "https://api.github.com/users/sw00/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-01-30T06:52:18Z", "updated_at": "2019-02-06T11:50:14Z", "closed_at": "2019-02-06T08:50:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running from a `pipenv` managed virtualenv (Python 3.6.5).\r\n\r\nI'm using Neovim v0.3.1 with `deoplete-jedi`. Trying to autocomplete after typing any keyword throws this exception:\r\n\r\n```\r\n[deoplete] Traceback (most recent call last):\r\n  File \"/home/sett/.vim/plugged/deoplete.nvim/rplugin/python3/deoplete/child.py\", line 179, in _gather_results\r\n    result = self._get_result(context, source)\r\n  File \"/home/sett/.vim/plugged/deoplete.nvim/rplugin/python3/deoplete/child.py\", line 234, in _get_result\r\n    ctx['candidates'] = source.gather_candidates(ctx)\r\n  File \"/home/sett/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi/profiler.py\", line 37, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/home/sett/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi.py\", line 167, in gather_candidates\r\n    environment=self._env)\r\n  File \"/home/sett/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi/profiler.py\", line 37, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/home/sett/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi.py\", line 119, in get_script\r\n    return jedi.Script(source, line, col, filename, environment=self._env)\r\n  File \"/home/sett/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/__init__.py\", line 118, in __init__\r\n    cache_path=settings.cache_directory,\r\n  File \"/home/sett/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/evaluate/__init__.py\", line 388, in parse_and_get_code\r\n    return self.grammar.parse(code=code, path=path, **kwargs), code\r\n  File \"/home/sett/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/vendored/parso/parso/grammar.py\", line 76, in parse\r\n    return self._parse(code=code, **kwargs)\r\n  File \"/home/sett/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/vendored/parso/parso/grammar.py\", line 126, in _parse\r\n    new_lines=lines\r\n  File \"/home/sett/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/vendored/parso/parso/python/diff.py\", line 236, in update\r\n    self._copy_from_old_parser(line_offset, i2, j2)\r\n  File \"/home/sett/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/vendored/parso/parso/python/diff.py\", line 289, in _copy_from_old_parser\r\n    line_offset\r\n  File \"/home/sett/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/vendored/parso/parso/python/diff.py\", line 598, in copy_nodes\r\n    self.prefix,\r\n  File \"/home/sett/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/vendored/parso/parso/python/diff.py\", line 686, in _copy_nodes\r\n    assert last_line_offset_leaf == ':'\r\nAssertionError\r\nError from jedi: AssertionError().  Use :messages / see above for error details.\r\n```\r\n\r\nSimply removing/commenting offending line (line 686, diff.py) makes it work normally.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/55", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/55/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/55/events", "html_url": "https://github.com/davidhalter/parso/issues/55", "id": 402993603, "node_id": "MDU6SXNzdWU0MDI5OTM2MDM=", "number": 55, "title": "Duplicate statements in `KeywordStatement` docstring", "user": {"login": "Hoboneer", "id": 27191401, "node_id": "MDQ6VXNlcjI3MTkxNDAx", "avatar_url": "https://avatars0.githubusercontent.com/u/27191401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hoboneer", "html_url": "https://github.com/Hoboneer", "followers_url": "https://api.github.com/users/Hoboneer/followers", "following_url": "https://api.github.com/users/Hoboneer/following{/other_user}", "gists_url": "https://api.github.com/users/Hoboneer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hoboneer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hoboneer/subscriptions", "organizations_url": "https://api.github.com/users/Hoboneer/orgs", "repos_url": "https://api.github.com/users/Hoboneer/repos", "events_url": "https://api.github.com/users/Hoboneer/events{/privacy}", "received_events_url": "https://api.github.com/users/Hoboneer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-25T03:44:20Z", "updated_at": "2019-01-26T20:35:30Z", "closed_at": "2019-01-26T20:35:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Specifically this part of the docstring repeats a pair at the end:\r\n\r\n```For the following statements: `assert`, `del`, `global`, `nonlocal`, `raise`, `return`, `yield`, `return`, `yield`.```\r\n\r\n`return` and `yield` are repeated, but I'm not sure what is meant to be in their place (if any). Someone more knowledgeable than I am about the Python grammar would be able to create a fix.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/54", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/54/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/54/events", "html_url": "https://github.com/davidhalter/parso/issues/54", "id": 395062138, "node_id": "MDU6SXNzdWUzOTUwNjIxMzg=", "number": 54, "title": "Usability issue: complicated to separate between multiplication/pow and argument unpacking", "user": {"login": "boxed", "id": 332428, "node_id": "MDQ6VXNlcjMzMjQyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/332428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boxed", "html_url": "https://github.com/boxed", "followers_url": "https://api.github.com/users/boxed/followers", "following_url": "https://api.github.com/users/boxed/following{/other_user}", "gists_url": "https://api.github.com/users/boxed/gists{/gist_id}", "starred_url": "https://api.github.com/users/boxed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boxed/subscriptions", "organizations_url": "https://api.github.com/users/boxed/orgs", "repos_url": "https://api.github.com/users/boxed/repos", "events_url": "https://api.github.com/users/boxed/events{/privacy}", "received_events_url": "https://api.github.com/users/boxed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-01-01T07:15:18Z", "updated_at": "2019-01-09T21:24:39Z", "closed_at": "2019-01-09T21:24:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The * in `foo * bar` produces produces an operator AST node with value `*`, same as the * in `foo(*bar)` even though these are radically different things. The same goes for `**`. It would be much nicer if these were differentiated in the AST clearly.\r\n\r\nThis was found when working on mutmut.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/53", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/53/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/53/events", "html_url": "https://github.com/davidhalter/parso/issues/53", "id": 394935716, "node_id": "MDU6SXNzdWUzOTQ5MzU3MTY=", "number": 53, "title": "Make the _split_prefix public and documented to make comment parsing easy.", "user": {"login": "boxed", "id": 332428, "node_id": "MDQ6VXNlcjMzMjQyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/332428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boxed", "html_url": "https://github.com/boxed", "followers_url": "https://api.github.com/users/boxed/followers", "following_url": "https://api.github.com/users/boxed/following{/other_user}", "gists_url": "https://api.github.com/users/boxed/gists{/gist_id}", "starred_url": "https://api.github.com/users/boxed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boxed/subscriptions", "organizations_url": "https://api.github.com/users/boxed/orgs", "repos_url": "https://api.github.com/users/boxed/repos", "events_url": "https://api.github.com/users/boxed/events{/privacy}", "received_events_url": "https://api.github.com/users/boxed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2018-12-31T06:27:05Z", "updated_at": "2020-02-21T17:59:15Z", "closed_at": "2020-02-21T17:59:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Comments being baked into the prefix member of nodes is unintuitive and awkward to use for parsing I think. It would make much more sense to have a Comment class. \r\n\r\n(This has come up while I'm working on mutmut).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/51", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/51/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/51/events", "html_url": "https://github.com/davidhalter/parso/issues/51", "id": 371970006, "node_id": "MDU6SXNzdWUzNzE5NzAwMDY=", "number": 51, "title": "Error when parsing f-strings with multiple arguments and formatting options", "user": {"login": "mallamanis", "id": 443771, "node_id": "MDQ6VXNlcjQ0Mzc3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/443771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mallamanis", "html_url": "https://github.com/mallamanis", "followers_url": "https://api.github.com/users/mallamanis/followers", "following_url": "https://api.github.com/users/mallamanis/following{/other_user}", "gists_url": "https://api.github.com/users/mallamanis/gists{/gist_id}", "starred_url": "https://api.github.com/users/mallamanis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mallamanis/subscriptions", "organizations_url": "https://api.github.com/users/mallamanis/orgs", "repos_url": "https://api.github.com/users/mallamanis/repos", "events_url": "https://api.github.com/users/mallamanis/events{/privacy}", "received_events_url": "https://api.github.com/users/mallamanis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-19T13:59:10Z", "updated_at": "2019-01-23T23:09:19Z", "closed_at": "2019-01-23T10:00:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for the very useful library! I believe that there is an issue with parsing multiple arguments of an f-string when one has a formatting argument:\r\n\r\n```[python]\r\nimport parso\r\n\r\nsimple = \"print(f'Some {x} and some {y}')\"\r\ngrammar = parso.load_grammar()\r\nmodule = grammar.parse(simple)\r\nerr = grammar.iter_errors(module)\r\nprint(f'`simple` f-string: {len(err)}')\r\n\r\nwith_formatting = \"print(f'Some {x:.2f} and some {y}')\"\r\ngrammar = parso.load_grammar()\r\nmodule = grammar.parse(with_formatting)\r\n(err,) = grammar.iter_errors(module)\r\nprint(f'`with_formatting` f-string: {err.message}')\r\n\r\nwith_formatting2 = \"print(f'Some {x:,} and some {y}')\"\r\ngrammar = parso.load_grammar()\r\nmodule = grammar.parse(with_formatting2)\r\n(err,) = grammar.iter_errors(module)\r\nprint(f'`with_formatting2` f-string: {err.message}')\r\n\r\nsingle = \"print(f'Some {x:,}')\"\r\ngrammar = parso.load_grammar()\r\nmodule = grammar.parse(single)\r\nerr = grammar.iter_errors(module)\r\nprint(f'`single` f-string: {len(err)}')\r\n```\r\n\r\nprints\r\n\r\n```\r\n`simple` f-string: 0\r\n`with_formatting` f-string: SyntaxError: invalid syntax\r\n`with_formatting2` f-string: SyntaxError: invalid syntax\r\n`single` f-string: 0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/48", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/48/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/48/events", "html_url": "https://github.com/davidhalter/parso/issues/48", "id": 355424161, "node_id": "MDU6SXNzdWUzNTU0MjQxNjE=", "number": 48, "title": "Escaped quotes produce incorrect SyntaxError in f-strings", "user": {"login": "PythonNut", "id": 5009546, "node_id": "MDQ6VXNlcjUwMDk1NDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5009546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PythonNut", "html_url": "https://github.com/PythonNut", "followers_url": "https://api.github.com/users/PythonNut/followers", "following_url": "https://api.github.com/users/PythonNut/following{/other_user}", "gists_url": "https://api.github.com/users/PythonNut/gists{/gist_id}", "starred_url": "https://api.github.com/users/PythonNut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PythonNut/subscriptions", "organizations_url": "https://api.github.com/users/PythonNut/orgs", "repos_url": "https://api.github.com/users/PythonNut/repos", "events_url": "https://api.github.com/users/PythonNut/events{/privacy}", "received_events_url": "https://api.github.com/users/PythonNut/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 600765132, "node_id": "MDU6TGFiZWw2MDA3NjUxMzI=", "url": "https://api.github.com/repos/davidhalter/parso/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-08-30T04:55:09Z", "updated_at": "2019-01-22T21:21:49Z", "closed_at": "2019-01-22T21:21:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think I've found a small issue with quote escaping in `f-strings`. Consider the following code:\r\n```python\r\nimport parso\r\ns = \"f\\\"\\\\\\\"\\\"\"\r\neval(s) # this works\r\ngrammar = parso.load_grammar()\r\nmodule = grammar.parse(s)\r\n(err,) = grammar.iter_errors(module)\r\nprint(err.message)\r\n```\r\nThe `eval` call works fine (and produces `\"` as expected), while the `err.message` is:\r\n\r\n> SyntaxError: EOL while scanning string literal.\r\n\r\nThis is with:\r\n\r\n* `python 3.7`\r\n* `parso 0.3.1`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/47", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/47/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/47/events", "html_url": "https://github.com/davidhalter/parso/issues/47", "id": 353180565, "node_id": "MDU6SXNzdWUzNTMxODA1NjU=", "number": 47, "title": "question: what's your timeline for supporting new python versions?", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-23T01:09:53Z", "updated_at": "2019-01-23T23:12:43Z", "closed_at": "2019-01-23T23:12:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "In [this PR](https://github.com/python-trio/trio/pull/594), we're trying to write a test that uses jedi. The overall project tests against 3.8-dev, but of course trying to use jedi under python 3.8 currently [errors out](https://travis-ci.org/python-trio/trio/jobs/419421251) with:\r\n\r\n```\r\nE                   FileNotFoundError: [Errno 2] No such file or directory: '/home/travis/virtualenv/python3.8-dev/lib/python3.8/site-packages/parso/python/grammar38.txt'\r\n```\r\n\r\nTotally reasonable, and we can skip the test on 3.8 for now.\r\n\r\nBut... I don't want to just mark the test as skipped on Python 3.8, because then it'll remain skipped and forgotten forever, past when 3.8 comes out :-).\r\n\r\nDo you have a usual timeline for adding grammars for new python releases? For example, we could mark the test as skipped until 3.8-beta is released, or 3.8-final...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/45", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/45/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/45/events", "html_url": "https://github.com/davidhalter/parso/issues/45", "id": 339263188, "node_id": "MDU6SXNzdWUzMzkyNjMxODg=", "number": 45, "title": "Issue with the diff parser in update", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-08T22:22:06Z", "updated_at": "2018-07-10T10:33:00Z", "closed_at": "2018-07-09T18:57:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Just have seen this:\r\n\r\n```\r\n[deoplete] Traceback (most recent call last):                          \r\n  File \"/home/user/.vim/plugged/deoplete.nvim/rplugin/python3/deoplete/child.py\", line 229, in _gather_results\r\n    ctx['candidates'] = source.gather_candidates(ctx)                                                           \r\n  File \"/home/user/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi/profiler.py\", line 39, in wrapper\r\n    ret = func(self, *args, **kwargs)                                                                                           \r\n  File \"/home/user/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi.py\", line 124, in gather_candidates\r\n  File \"/home/user/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi/profiler.py\", line 39, in wrapper  \r\n    ret = func(self, *args, **kwargs)                                                                                           \r\n  File \"/home/user/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi.py\", line 92, in get_completions\r\n    # TODO: skip creating Script instances if not necessary.                                                                   \r\n  File \"/home/user/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/__init__.py\", line 120, in __init__\r\n    cache_path=settings.cache_directory                                                                                            \r\n  File \"/home/user/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/evaluate/__init__.py\", line 383, in parse_and_get_code\r\n    return self.grammar.parse(code=code, path=path, **kwargs), code                                                                               \r\n  File \"/home/user/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/vendored/parso/parso/grammar.py\", line 76, in parse\r\n    return self._parse(code=code, **kwargs)                                                                                 \r\n  File \"/home/user/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/vendored/parso/parso/grammar.py\", line 126, in _parse\r\n    new_lines=lines                                                                                                           \r\n  File \"/home/user/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/vendored/parso/parso/python/diff.py\", line 162, in update\r\n    % (last_pos, line_length, ''.join(diff))                                                                                      \r\nException: There's an issue (294 != 293) with the diff parser. Please report:\r\n---                                                                          \r\n+++ \r\n@@ -102,7 +102,6 @@\r\n                                filename,\r\n                                environment=self._env).completions()\r\n                                                                    \r\n-    @profiler.profile\r\n     @profiler.profile\r\n     def massage_completions(self, completions):\r\n         out = []                               \r\n@@ -291,5 +290,4 @@\r\n                     i -= 1\r\n             return self.completion_dict(name, type_, comp)\r\n                                                           \r\n-        return self.completion_dict(name, type_, comp)\r\n-    +        return self.completion_dict(name, type_, comp)\r\n```\r\n\r\nMaybe it is related to providing source together with an outdated (because currently being edited) filename?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/44", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/44/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/44/events", "html_url": "https://github.com/davidhalter/parso/issues/44", "id": 337990090, "node_id": "MDU6SXNzdWUzMzc5OTAwOTA=", "number": 44, "title": "Index error when parsing parameters with wrong bare asterisk usage", "user": {"login": "micbou", "id": 10026824, "node_id": "MDQ6VXNlcjEwMDI2ODI0", "avatar_url": "https://avatars2.githubusercontent.com/u/10026824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/micbou", "html_url": "https://github.com/micbou", "followers_url": "https://api.github.com/users/micbou/followers", "following_url": "https://api.github.com/users/micbou/following{/other_user}", "gists_url": "https://api.github.com/users/micbou/gists{/gist_id}", "starred_url": "https://api.github.com/users/micbou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/micbou/subscriptions", "organizations_url": "https://api.github.com/users/micbou/orgs", "repos_url": "https://api.github.com/users/micbou/repos", "events_url": "https://api.github.com/users/micbou/events{/privacy}", "received_events_url": "https://api.github.com/users/micbou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 600765132, "node_id": "MDU6TGFiZWw2MDA3NjUxMzI=", "url": "https://api.github.com/repos/davidhalter/parso/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-03T17:25:58Z", "updated_at": "2018-07-04T07:51:40Z", "closed_at": "2018-07-04T07:51:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code (the `version` parameter can be any Python 3):\r\n```python\r\nimport parso\r\nparso.parse('def test(arg, *):\\n    pass', version='3.6')\r\n```\r\nraises an `IndexError` exception:\r\n```sh\r\nTraceback (most recent call last):\r\n  File \"parso\\parser.py\", line 178, in _add_token\r\n    plan = stack[-1].dfa.transitions[transition]\r\nKeyError: TokenType(ENDMARKER)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"script.py\", line 9, in <module>\r\n    parso.parse('def test(arg, *):\\n    pass', version='3.6')\r\n  File \"parso\\__init__.py\", line 58, in parse\r\n    return grammar.parse(code, **kwargs)\r\n  File \"parso\\grammar.py\", line 76, in parse\r\n    return self._parse(code=code, **kwargs)\r\n  File \"parso\\grammar.py\", line 141, in _parse\r\n    root_node = p.parse(tokens=tokens)\r\n  File \"parso\\python\\parser.py\", line 82, in parse\r\n    return super(Parser, self).parse(tokens)\r\n  File \"parso\\parser.py\", line 128, in parse\r\n    self._add_token(token)\r\n  File \"parso\\parser.py\", line 182, in _add_token\r\n    self._pop()\r\n  File \"parso\\parser.py\", line 206, in _pop\r\n    new_node = self.convert_node(tos.dfa.from_rule, tos.nodes)\r\n  File \"parso\\python\\parser.py\", line 93, in convert_node\r\n    return self.node_map[nonterminal](children)\r\n  File \"parso\\python\\tree.py\", line 570, in __init__\r\n    parameters.children[1:-1] = _create_params(parameters, parameters.children[1:-1])\r\n  File \"parso\\python\\tree.py\", line 540, in _create_params\r\n    if param_children[0] == '*' and param_children[1] == ',' \\\r\nIndexError: list index out of range\r\n```\r\nThis occurs on Parso e05d7fd59f301296dea705173de70d60a4a5d9e9.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/41", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/41/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/41/events", "html_url": "https://github.com/davidhalter/parso/issues/41", "id": 329954150, "node_id": "MDU6SXNzdWUzMjk5NTQxNTA=", "number": 41, "title": "Don't mutate the token.tok_name dictionary", "user": {"login": "asmeurer", "id": 71486, "node_id": "MDQ6VXNlcjcxNDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asmeurer", "html_url": "https://github.com/asmeurer", "followers_url": "https://api.github.com/users/asmeurer/followers", "following_url": "https://api.github.com/users/asmeurer/following{/other_user}", "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}", "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions", "organizations_url": "https://api.github.com/users/asmeurer/orgs", "repos_url": "https://api.github.com/users/asmeurer/repos", "events_url": "https://api.github.com/users/asmeurer/events{/privacy}", "received_events_url": "https://api.github.com/users/asmeurer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 600765132, "node_id": "MDU6TGFiZWw2MDA3NjUxMzI=", "url": "https://api.github.com/repos/davidhalter/parso/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-06-06T17:01:48Z", "updated_at": "2018-06-08T16:48:11Z", "closed_at": "2018-06-08T16:46:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The parso `token` library takes the standard library `token.tok_name` dictionary and mutates it [here](https://github.com/davidhalter/parso/blob/a91e5f277564a1e4f535ed463e358efd67531697/parso/python/token.py#L21). \r\n\r\nThis results in some very odd behavior when using `tokenize` in my Python shell that uses Jedi. Before I do any tab completions, things work just fine. But as soon as I do a tab completion, parso is imported, and `ENCODING` is replaced with `BACKQUOTE`. \r\n\r\nParso should instead use its own copies of mutable data structures and leave the standard library alone. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/40", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/40/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/40/events", "html_url": "https://github.com/davidhalter/parso/issues/40", "id": 326383671, "node_id": "MDU6SXNzdWUzMjYzODM2NzE=", "number": 40, "title": "Short PythonErrorLeaf strings", "user": {"login": "apnewberry", "id": 31109952, "node_id": "MDQ6VXNlcjMxMTA5OTUy", "avatar_url": "https://avatars1.githubusercontent.com/u/31109952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apnewberry", "html_url": "https://github.com/apnewberry", "followers_url": "https://api.github.com/users/apnewberry/followers", "following_url": "https://api.github.com/users/apnewberry/following{/other_user}", "gists_url": "https://api.github.com/users/apnewberry/gists{/gist_id}", "starred_url": "https://api.github.com/users/apnewberry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apnewberry/subscriptions", "organizations_url": "https://api.github.com/users/apnewberry/orgs", "repos_url": "https://api.github.com/users/apnewberry/repos", "events_url": "https://api.github.com/users/apnewberry/events{/privacy}", "received_events_url": "https://api.github.com/users/apnewberry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-05-25T05:13:01Z", "updated_at": "2018-07-03T00:25:35Z", "closed_at": "2018-07-02T23:31:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm starting out using parso, and enjoying what I've used so far. Here's my question:\r\n\r\nGiven an invalid character, the `PythonErrorLeaf` eats up the rest of the expression. Is it possible to make the error more localized, like `tokenize` does? This is useful when parsing errors in f-strings because `tokenize` doesn't handle them as granularly. Specifically, instead of getting an error token `'? + b'` I'd love to get `'?'`. Would it be possible to get these smaller PythonErrorLeaf strings, or is that infeasible or a bad idea? \r\n\r\nThank you!\r\n\r\n```python\r\nfrom pprint import pprint\r\nimport io\r\nimport ast\r\nfrom tokenize import tokenize, untokenize\r\nimport inspect\r\nimport token\r\nimport re\r\n\r\n\r\nimport parso\r\n\r\n\r\ndef string_to_tokens(string):\r\n    bytestring = string.encode('utf-8')\r\n    bytesio = io.BytesIO(bytestring)\r\n    tokens = tokenize(bytesio.readline)\r\n    return list(tokens)\r\n\r\n\r\ndef iter_repeat(obj, func, sentinel=None):\r\n    while obj is not None:\r\n        yield obj\r\n        obj = func(obj)\r\n\r\n\r\ndef iter_leaves(node):\r\n    yield from iter_repeat(node, lambda x: x.get_next_leaf())\r\n\r\n\r\nstring = 'a + ? + b'\r\n\r\n\r\ntokens = string_to_tokens(string)\r\npprint(tokens)\r\ntree = parso.parse(string)\r\nlist(iter_leaves(tree.get_first_leaf()))\r\n\r\n```\r\n```\r\n[TokenInfo(type=59 (BACKQUOTE), string='utf-8', start=(0, 0), end=(0, 0), line=''),\r\n TokenInfo(type=1 (NAME), string='a', start=(1, 0), end=(1, 1), line='a + ? + b'),\r\n TokenInfo(type=53 (OP), string='+', start=(1, 2), end=(1, 3), line='a + ? + b'),\r\n TokenInfo(type=56 (ERRORTOKEN), string=' ', start=(1, 3), end=(1, 4), line='a + ? + b'),\r\n TokenInfo(type=56 (ERRORTOKEN), string='?', start=(1, 4), end=(1, 5), line='a + ? + b'),\r\n TokenInfo(type=53 (OP), string='+', start=(1, 6), end=(1, 7), line='a + ? + b'),\r\n TokenInfo(type=1 (NAME), string='b', start=(1, 8), end=(1, 9), line='a + ? + b'),\r\n TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]\r\n```\r\n\r\n```\r\n[<Name: a@1,0>,\r\n <Operator: +>,\r\n <PythonErrorLeaf: errortoken:'? + b', (1, 4)>,\r\n <EndMarker: prefix=''>]\r\n```\r\n```\r\nstring = 'f\"{a + ? + b}\"'\r\n```\r\n```\r\n[TokenInfo(type=59 (BACKQUOTE), string='utf-8', start=(0, 0), end=(0, 0), line=''),\r\n TokenInfo(type=3 (STRING), string='f\"{a + ? + b}\"', start=(1, 0), end=(1, 14), line='f\"{a + ? + b}\"'),\r\n TokenInfo(type=0 (ENDMARKER), string='', start=(2, 0), end=(2, 0), line='')]\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/39", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/39/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/39/events", "html_url": "https://github.com/davidhalter/parso/issues/39", "id": 326378993, "node_id": "MDU6SXNzdWUzMjYzNzg5OTM=", "number": 39, "title": "cajarename", "user": {"login": "josifoski", "id": 6044019, "node_id": "MDQ6VXNlcjYwNDQwMTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6044019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josifoski", "html_url": "https://github.com/josifoski", "followers_url": "https://api.github.com/users/josifoski/followers", "following_url": "https://api.github.com/users/josifoski/following{/other_user}", "gists_url": "https://api.github.com/users/josifoski/gists{/gist_id}", "starred_url": "https://api.github.com/users/josifoski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josifoski/subscriptions", "organizations_url": "https://api.github.com/users/josifoski/orgs", "repos_url": "https://api.github.com/users/josifoski/repos", "events_url": "https://api.github.com/users/josifoski/events{/privacy}", "received_events_url": "https://api.github.com/users/josifoski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-25T04:40:05Z", "updated_at": "2018-05-25T23:18:11Z", "closed_at": "2018-05-25T23:18:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Yesterday I've installed ubuntu-mate 18.04.\r\nPreviosly jedi was installing without problems. I'm using it with geany (https://github.com/notetau/geany-jedi-complete)\r\nsudo pip2 install parso\r\ngives\r\n...\r\nCollecting parso\r\n  Downloading https://files.pythonhosted.org/packages/cd/3e/5908f9577dbd1e5df53e64349bfd11e46b726c1e4d8cd676bbe8aa4de316/parso-0.2.1-py2.py3-none-any.whl (91kB)\r\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 92kB 654kB/s \r\ncajarename 17.3.28 requires caja, which is not installed.\r\ncajarename 17.3.28 requires gir1.2-gtk-3.0, which is not installed.\r\ncajarename 17.3.28 requires python-caja, which is not installed.\r\ncajarename 17.3.28 requires python-gi, which is not installed.\r\nInstalling collected packages: parso\r\nSuccessfully installed parso-0.2.1\r\n\r\nall those packages are installed via apt, and cajarename is in apt caja-rename\r\nalias cajarename='caja-rename' is not helping\r\nAny suggestion?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/36", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/36/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/36/events", "html_url": "https://github.com/davidhalter/parso/issues/36", "id": 316441714, "node_id": "MDU6SXNzdWUzMTY0NDE3MTQ=", "number": 36, "title": "Improve Unicode name matching regex", "user": {"login": "ambv", "id": 55281, "node_id": "MDQ6VXNlcjU1Mjgx", "avatar_url": "https://avatars1.githubusercontent.com/u/55281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ambv", "html_url": "https://github.com/ambv", "followers_url": "https://api.github.com/users/ambv/followers", "following_url": "https://api.github.com/users/ambv/following{/other_user}", "gists_url": "https://api.github.com/users/ambv/gists{/gist_id}", "starred_url": "https://api.github.com/users/ambv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ambv/subscriptions", "organizations_url": "https://api.github.com/users/ambv/orgs", "repos_url": "https://api.github.com/users/ambv/repos", "events_url": "https://api.github.com/users/ambv/events{/privacy}", "received_events_url": "https://api.github.com/users/ambv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-04-20T23:50:28Z", "updated_at": "2018-05-04T08:16:46Z", "closed_at": "2018-04-22T16:50:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Great that you're already matching Unicode names! However, looks like you're currently simply accepting one-or-more characters of class `w`:\r\n```py3\r\nName = r'\\w+'\r\n```\r\nAFAICT, a better regex for this would be:\r\n```py3\r\nName = r'[^\\d\\W]\\w*'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/34", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/34/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/34/events", "html_url": "https://github.com/davidhalter/parso/issues/34", "id": 303334260, "node_id": "MDU6SXNzdWUzMDMzMzQyNjA=", "number": 34, "title": "Enable to disable LOG.Debug", "user": {"login": "giangm9", "id": 10234339, "node_id": "MDQ6VXNlcjEwMjM0MzM5", "avatar_url": "https://avatars3.githubusercontent.com/u/10234339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giangm9", "html_url": "https://github.com/giangm9", "followers_url": "https://api.github.com/users/giangm9/followers", "following_url": "https://api.github.com/users/giangm9/following{/other_user}", "gists_url": "https://api.github.com/users/giangm9/gists{/gist_id}", "starred_url": "https://api.github.com/users/giangm9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giangm9/subscriptions", "organizations_url": "https://api.github.com/users/giangm9/orgs", "repos_url": "https://api.github.com/users/giangm9/repos", "events_url": "https://api.github.com/users/giangm9/events{/privacy}", "received_events_url": "https://api.github.com/users/giangm9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-08T02:33:03Z", "updated_at": "2018-05-03T04:31:57Z", "closed_at": "2018-03-08T09:09:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I embed IPython in [blender](https://www.blender.org/), when I type a variable name and ' 'tab', parso's debug log shows up and this so annoying \r\n```\r\nIn [1]: armDEBUG:THREE:pickle loaded: /home/gl/tools/blender-2.79a-linux-glibc219-x86_64/2.79/scripts/modules/bpy_types.py\r\natureDEBUG:THREE:diff parser start\r\nDEBUG:THREE:diff parser calculated\r\nDEBUG:THREE:diff: line_lengths old: 1, new: 1\r\nDEBUG:THREE:diff replace old[1:1] new[1:1]\r\nDEBUG:THREE:parse_part from 1 to 1 (to 0 in part parser)\r\nDEBUG:THREE:diff parser end\r\n```\r\nMy current solution is remove log from source code file. I think there is must be a better way to disable Logs", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/32", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/32/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/32/events", "html_url": "https://github.com/davidhalter/parso/issues/32", "id": 285484659, "node_id": "MDU6SXNzdWUyODU0ODQ2NTk=", "number": 32, "title": "An option to disable cache completely", "user": {"login": "KOLANICH", "id": 240344, "node_id": "MDQ6VXNlcjI0MDM0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/240344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KOLANICH", "html_url": "https://github.com/KOLANICH", "followers_url": "https://api.github.com/users/KOLANICH/followers", "following_url": "https://api.github.com/users/KOLANICH/following{/other_user}", "gists_url": "https://api.github.com/users/KOLANICH/gists{/gist_id}", "starred_url": "https://api.github.com/users/KOLANICH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KOLANICH/subscriptions", "organizations_url": "https://api.github.com/users/KOLANICH/orgs", "repos_url": "https://api.github.com/users/KOLANICH/repos", "events_url": "https://api.github.com/users/KOLANICH/events{/privacy}", "received_events_url": "https://api.github.com/users/KOLANICH/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-02T17:10:42Z", "updated_at": "2018-01-03T09:07:23Z", "closed_at": "2018-01-03T00:22:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "This cache takes a lot of space. I guess I'm ready to trade some speed for not having this eating space on my HDD. I guess there should be a global config file for parso and jedi where I should be able to disable caching completely.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/28", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/28/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/28/events", "html_url": "https://github.com/davidhalter/parso/issues/28", "id": 285170920, "node_id": "MDU6SXNzdWUyODUxNzA5MjA=", "number": 28, "title": "Travis Itself Fails", "user": {"login": "MohamedAlFahim", "id": 31521089, "node_id": "MDQ6VXNlcjMxNTIxMDg5", "avatar_url": "https://avatars0.githubusercontent.com/u/31521089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MohamedAlFahim", "html_url": "https://github.com/MohamedAlFahim", "followers_url": "https://api.github.com/users/MohamedAlFahim/followers", "following_url": "https://api.github.com/users/MohamedAlFahim/following{/other_user}", "gists_url": "https://api.github.com/users/MohamedAlFahim/gists{/gist_id}", "starred_url": "https://api.github.com/users/MohamedAlFahim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MohamedAlFahim/subscriptions", "organizations_url": "https://api.github.com/users/MohamedAlFahim/orgs", "repos_url": "https://api.github.com/users/MohamedAlFahim/repos", "events_url": "https://api.github.com/users/MohamedAlFahim/events{/privacy}", "received_events_url": "https://api.github.com/users/MohamedAlFahim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-29T23:55:18Z", "updated_at": "2017-12-30T17:18:12Z", "closed_at": "2017-12-30T17:18:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "> Invocation failed (exit code 1), logfile: /home/travis/build/davidhalter/parso/.tox/py33/log/py33-1.log\r\n\r\nCheck out the RecursiveChildPrinter pull request for more information.\r\n\r\nGenerally speaking, the testing method is failing itself, causing an overall build failure.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/24", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/24/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/24/events", "html_url": "https://github.com/davidhalter/parso/issues/24", "id": 275920275, "node_id": "MDU6SXNzdWUyNzU5MjAyNzU=", "number": 24, "title": "YAML parsing", "user": {"login": "asmeurer", "id": 71486, "node_id": "MDQ6VXNlcjcxNDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/71486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asmeurer", "html_url": "https://github.com/asmeurer", "followers_url": "https://api.github.com/users/asmeurer/followers", "following_url": "https://api.github.com/users/asmeurer/following{/other_user}", "gists_url": "https://api.github.com/users/asmeurer/gists{/gist_id}", "starred_url": "https://api.github.com/users/asmeurer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asmeurer/subscriptions", "organizations_url": "https://api.github.com/users/asmeurer/orgs", "repos_url": "https://api.github.com/users/asmeurer/repos", "events_url": "https://api.github.com/users/asmeurer/events{/privacy}", "received_events_url": "https://api.github.com/users/asmeurer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-22T02:00:51Z", "updated_at": "2019-01-18T19:17:51Z", "closed_at": "2019-01-18T19:17:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@davidhalter mentioned to me on [Twitter](https://twitter.com/jedidjah_ch/status/932912266118336513) that parso could potentially be used to create a round-trippable YAML parser, if one has a tokenizer and a grammar. \r\n\r\nSo I thought I'd open this issue to discuss the possibility. How hard is it to write a tokenizer? \r\n\r\nIt looks like the grammar is context sensitive, which is expressed in the BNF grammar as production parameters (http://www.yaml.org/spec/1.2/spec.html, section 4.1).\r\n\r\nIs this something that parso can handle? \r\n\r\nI'm also happy to have only a subset of YAML supported, so long as it's a commonly used one. My personal use-case is programmatically modifying .travis.yml files. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/23", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/23/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/23/events", "html_url": "https://github.com/davidhalter/parso/issues/23", "id": 273459484, "node_id": "MDU6SXNzdWUyNzM0NTk0ODQ=", "number": 23, "title": "Debug info in django shell", "user": {"login": "Ritmix3300", "id": 7917034, "node_id": "MDQ6VXNlcjc5MTcwMzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7917034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ritmix3300", "html_url": "https://github.com/Ritmix3300", "followers_url": "https://api.github.com/users/Ritmix3300/followers", "following_url": "https://api.github.com/users/Ritmix3300/following{/other_user}", "gists_url": "https://api.github.com/users/Ritmix3300/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ritmix3300/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ritmix3300/subscriptions", "organizations_url": "https://api.github.com/users/Ritmix3300/orgs", "repos_url": "https://api.github.com/users/Ritmix3300/repos", "events_url": "https://api.github.com/users/Ritmix3300/events{/privacy}", "received_events_url": "https://api.github.com/users/Ritmix3300/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-13T15:00:02Z", "updated_at": "2018-02-12T22:00:27Z", "closed_at": "2017-11-13T17:46:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\nWhen I use Django shell and try to use autocomplete I see this strings.\r\n```\r\ndiff parser start\r\ndiff parser calculated                                                                        \r\ndiff: line_lengths old: 1, new: 1                                                             \r\ndiff replace old[1:1] new[1:1]                                                                \r\nparse_part from 1 to 1 (to 0 in part parser)                                                  \r\ndiff parser end\r\n```\r\nDoes your parser use the same logger as Django default?\r\nI use Python 3.6.3, Django 1.10 and Ipython 6.2.1 which installed your package.\r\n\r\nCan you change logger to prevent make output noise?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/22", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/22/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/22/events", "html_url": "https://github.com/davidhalter/parso/issues/22", "id": 272280635, "node_id": "MDU6SXNzdWUyNzIyODA2MzU=", "number": 22, "title": "Uses root logger", "user": {"login": "demosdemon", "id": 310610, "node_id": "MDQ6VXNlcjMxMDYxMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/310610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/demosdemon", "html_url": "https://github.com/demosdemon", "followers_url": "https://api.github.com/users/demosdemon/followers", "following_url": "https://api.github.com/users/demosdemon/following{/other_user}", "gists_url": "https://api.github.com/users/demosdemon/gists{/gist_id}", "starred_url": "https://api.github.com/users/demosdemon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/demosdemon/subscriptions", "organizations_url": "https://api.github.com/users/demosdemon/orgs", "repos_url": "https://api.github.com/users/demosdemon/repos", "events_url": "https://api.github.com/users/demosdemon/events{/privacy}", "received_events_url": "https://api.github.com/users/demosdemon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-08T17:20:16Z", "updated_at": "2017-11-08T17:22:19Z", "closed_at": "2017-11-08T17:22:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI noticed while using iPython that this library uses the root logger. That's typically poor practice for published packages. I recommend changing to a named logger (`logging.getLogger('parso')`, `logging.getLogger(__name__)`, etc) to make it easier for others to filter out your messages.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/21", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/21/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/21/events", "html_url": "https://github.com/davidhalter/parso/issues/21", "id": 272011228, "node_id": "MDU6SXNzdWUyNzIwMTEyMjg=", "number": 21, "title": "Question: How to integrate it to vim?", "user": {"login": "moylop260", "id": 6644187, "node_id": "MDQ6VXNlcjY2NDQxODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6644187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moylop260", "html_url": "https://github.com/moylop260", "followers_url": "https://api.github.com/users/moylop260/followers", "following_url": "https://api.github.com/users/moylop260/following{/other_user}", "gists_url": "https://api.github.com/users/moylop260/gists{/gist_id}", "starred_url": "https://api.github.com/users/moylop260/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moylop260/subscriptions", "organizations_url": "https://api.github.com/users/moylop260/orgs", "repos_url": "https://api.github.com/users/moylop260/repos", "events_url": "https://api.github.com/users/moylop260/events{/privacy}", "received_events_url": "https://api.github.com/users/moylop260/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-07T22:41:32Z", "updated_at": "2017-11-07T23:14:10Z", "closed_at": "2017-11-07T23:14:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\r\nThis tools is great\r\nThanks\r\n\r\nIs posible a integration with vim?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/20", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/20/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/20/events", "html_url": "https://github.com/davidhalter/parso/issues/20", "id": 271154559, "node_id": "MDU6SXNzdWUyNzExNTQ1NTk=", "number": 20, "title": "incorrect path string syntax", "user": {"login": "fuljo", "id": 11810438, "node_id": "MDQ6VXNlcjExODEwNDM4", "avatar_url": "https://avatars0.githubusercontent.com/u/11810438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fuljo", "html_url": "https://github.com/fuljo", "followers_url": "https://api.github.com/users/fuljo/followers", "following_url": "https://api.github.com/users/fuljo/following{/other_user}", "gists_url": "https://api.github.com/users/fuljo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fuljo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fuljo/subscriptions", "organizations_url": "https://api.github.com/users/fuljo/orgs", "repos_url": "https://api.github.com/users/fuljo/repos", "events_url": "https://api.github.com/users/fuljo/events{/privacy}", "received_events_url": "https://api.github.com/users/fuljo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-04T01:01:42Z", "updated_at": "2017-11-04T13:59:07Z", "closed_at": "2017-11-04T13:59:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/davidhalter/parso/blob/4824534f8a61746fd8235e7ae9deba3b619ac943/parso/grammar.py#L260\r\n\r\n`'python/grammar%s%s.txt'` does not work on all OS (e.g. Windows)\r\nyou should use\r\n`os.path.join('python', 'grammar%s%s.txt' % (version_info.major, version_info.minor))` instead\r\n\r\nHope this is helpful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/15", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/15/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/15/events", "html_url": "https://github.com/davidhalter/parso/issues/15", "id": 269079415, "node_id": "MDU6SXNzdWUyNjkwNzk0MTU=", "number": 15, "title": "No requirements-dev.txt", "user": {"login": "robodair", "id": 8318231, "node_id": "MDQ6VXNlcjgzMTgyMzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/8318231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robodair", "html_url": "https://github.com/robodair", "followers_url": "https://api.github.com/users/robodair/followers", "following_url": "https://api.github.com/users/robodair/following{/other_user}", "gists_url": "https://api.github.com/users/robodair/gists{/gist_id}", "starred_url": "https://api.github.com/users/robodair/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robodair/subscriptions", "organizations_url": "https://api.github.com/users/robodair/orgs", "repos_url": "https://api.github.com/users/robodair/repos", "events_url": "https://api.github.com/users/robodair/events{/privacy}", "received_events_url": "https://api.github.com/users/robodair/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-27T11:46:29Z", "updated_at": "2018-09-24T20:08:54Z", "closed_at": "2018-09-24T20:08:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I know it's not necessary but it would be a great help when installing sphinx, py.test, pylint, etc when setting up a new clone.\r\n\r\nI'd make one but I'm not sure what other dev dependencies should be included.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/9", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/9/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/9/events", "html_url": "https://github.com/davidhalter/parso/issues/9", "id": 265039347, "node_id": "MDU6SXNzdWUyNjUwMzkzNDc=", "number": 9, "title": "diff.py logs to root logger", "user": {"login": "density", "id": 2256484, "node_id": "MDQ6VXNlcjIyNTY0ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2256484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/density", "html_url": "https://github.com/density", "followers_url": "https://api.github.com/users/density/followers", "following_url": "https://api.github.com/users/density/following{/other_user}", "gists_url": "https://api.github.com/users/density/gists{/gist_id}", "starred_url": "https://api.github.com/users/density/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/density/subscriptions", "organizations_url": "https://api.github.com/users/density/orgs", "repos_url": "https://api.github.com/users/density/repos", "events_url": "https://api.github.com/users/density/events{/privacy}", "received_events_url": "https://api.github.com/users/density/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-10-12T18:22:31Z", "updated_at": "2017-10-27T16:07:55Z", "closed_at": "2017-10-12T20:59:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "in various places in https://github.com/davidhalter/parso/blob/master/parso/python/diff.py, logging is done using the root logger instead of creating a separate logger using `logging.getLogger`. this makes it difficult to customize the logging behavior of parso separately from other loggers in one's app.\r\n\r\nexample:\r\n\r\nhttps://github.com/davidhalter/parso/blob/0ec02e1d7feb8e79a238f79a06aa1749f02794c4/parso/python/diff.py#L119\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/7", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/7/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/7/events", "html_url": "https://github.com/davidhalter/parso/issues/7", "id": 259996793, "node_id": "MDU6SXNzdWUyNTk5OTY3OTM=", "number": 7, "title": "No grammar for Python 3.7", "user": {"login": "thorstenkampe", "id": 475462, "node_id": "MDQ6VXNlcjQ3NTQ2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/475462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thorstenkampe", "html_url": "https://github.com/thorstenkampe", "followers_url": "https://api.github.com/users/thorstenkampe/followers", "following_url": "https://api.github.com/users/thorstenkampe/following{/other_user}", "gists_url": "https://api.github.com/users/thorstenkampe/gists{/gist_id}", "starred_url": "https://api.github.com/users/thorstenkampe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thorstenkampe/subscriptions", "organizations_url": "https://api.github.com/users/thorstenkampe/orgs", "repos_url": "https://api.github.com/users/thorstenkampe/repos", "events_url": "https://api.github.com/users/thorstenkampe/events{/privacy}", "received_events_url": "https://api.github.com/users/thorstenkampe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-23T09:49:09Z", "updated_at": "2017-10-01T22:48:10Z", "closed_at": "2017-10-01T22:48:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using IPython 6.2 with Python 3.7.0a1 (early adopter so to say), I get an error when trying to tab-complete which refers to a missing grammar text file. Copying the grammar for 3.6 to 3.7 resolves the problem.\r\n\r\nCould you deliver a preliminary grammar for Python 3.7 by using the grammar from Python 3.6?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/6", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/6/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/6/events", "html_url": "https://github.com/davidhalter/parso/issues/6", "id": 257490469, "node_id": "MDU6SXNzdWUyNTc0OTA0Njk=", "number": 6, "title": "Possibly incorrect line at parso/python/pep8.py:148", "user": {"login": "MiguelLatorre", "id": 7765171, "node_id": "MDQ6VXNlcjc3NjUxNzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7765171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MiguelLatorre", "html_url": "https://github.com/MiguelLatorre", "followers_url": "https://api.github.com/users/MiguelLatorre/followers", "following_url": "https://api.github.com/users/MiguelLatorre/following{/other_user}", "gists_url": "https://api.github.com/users/MiguelLatorre/gists{/gist_id}", "starred_url": "https://api.github.com/users/MiguelLatorre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MiguelLatorre/subscriptions", "organizations_url": "https://api.github.com/users/MiguelLatorre/orgs", "repos_url": "https://api.github.com/users/MiguelLatorre/repos", "events_url": "https://api.github.com/users/MiguelLatorre/events{/privacy}", "received_events_url": "https://api.github.com/users/MiguelLatorre/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-13T19:14:11Z", "updated_at": "2017-09-14T07:04:12Z", "closed_at": "2017-09-14T07:04:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was looking at some of the new parso library just for fun and I found:\r\n```\r\ndef _is_magic_name(name):\r\n    return name.value.startswith('__') and name.value.startswith('__')\r\n```\r\nI guess the intention is \r\n```\r\ndef _is_magic_name(name):\r\n    return name.value.startswith('__') and name.value.endswith('__')\r\n```\r\n\r\ni.e.: \"endswith\" instead of repeating \"startswith\". :)\r\n\r\nGood library by the way, keep it up! I use jedi-vim every day!!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/parso/issues/4", "repository_url": "https://api.github.com/repos/davidhalter/parso", "labels_url": "https://api.github.com/repos/davidhalter/parso/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/parso/issues/4/comments", "events_url": "https://api.github.com/repos/davidhalter/parso/issues/4/events", "html_url": "https://github.com/davidhalter/parso/issues/4", "id": 255141080, "node_id": "MDU6SXNzdWUyNTUxNDEwODA=", "number": 4, "title": "dead code in `get_definition()`", "user": {"login": "thisfred", "id": 32273, "node_id": "MDQ6VXNlcjMyMjcz", "avatar_url": "https://avatars3.githubusercontent.com/u/32273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thisfred", "html_url": "https://github.com/thisfred", "followers_url": "https://api.github.com/users/thisfred/followers", "following_url": "https://api.github.com/users/thisfred/following{/other_user}", "gists_url": "https://api.github.com/users/thisfred/gists{/gist_id}", "starred_url": "https://api.github.com/users/thisfred/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thisfred/subscriptions", "organizations_url": "https://api.github.com/users/thisfred/orgs", "repos_url": "https://api.github.com/users/thisfred/repos", "events_url": "https://api.github.com/users/thisfred/events{/privacy}", "received_events_url": "https://api.github.com/users/thisfred/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-05T02:03:10Z", "updated_at": "2017-09-05T07:00:02Z", "closed_at": "2017-09-05T06:59:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "this if condition is always false, so the branch never executes:\r\n\r\nhttps://github.com/davidhalter/parso/blob/dcdd3bbc8e2432006ccd9b3c565441885e38af57/parso/python/tree.py#L217-L220\r\n\r\n(this may be intentional or temporary, I'm not sure there's an actual bug here, but I found this while investigating a case where variables that occur within a function are not finding their definition within the same function body.)", "performed_via_github_app": null, "score": 1.0}]}