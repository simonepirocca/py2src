{"total_count": 173, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/497", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/497/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/497/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/497/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/497", "id": 675143355, "node_id": "MDU6SXNzdWU2NzUxNDMzNTU=", "number": 497, "title": "Bug: Indentation Error in method docstring", "user": {"login": "jauerb", "id": 1742415, "node_id": "MDQ6VXNlcjE3NDI0MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1742415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jauerb", "html_url": "https://github.com/jauerb", "followers_url": "https://api.github.com/users/jauerb/followers", "following_url": "https://api.github.com/users/jauerb/following{/other_user}", "gists_url": "https://api.github.com/users/jauerb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jauerb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jauerb/subscriptions", "organizations_url": "https://api.github.com/users/jauerb/orgs", "repos_url": "https://api.github.com/users/jauerb/repos", "events_url": "https://api.github.com/users/jauerb/events{/privacy}", "received_events_url": "https://api.github.com/users/jauerb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-07T16:45:57Z", "updated_at": "2020-08-07T16:56:00Z", "closed_at": "2020-08-07T16:55:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been experiencing a weird bug, and this is the most minimal example I have been able to come up with\r\n\r\ntest.py:\r\n```\r\n\"\"\"Minimal example of pydocstyle bug.\"\"\"\r\n\r\nclass Bug:\r\n    \"\"\"Seems to only happen with method inside of a class.\"\"\"\r\n\r\n    def do_something(x):\r\n        \"\"\"Do something.\r\n\r\n        Args:\r\n            x: some value\r\n        \"\"\"\r\n        print(f\"\"\"{x}\r\n\"\"\")\r\n```\r\n\r\nIf I run\r\n`pydocstyle test.py`\r\n\r\nI get\r\n```\r\n$ pydocstyle test.py \r\nTraceback (most recent call last):\r\n  File \"ENVIRONMENT_PATH/bin/pydocstyle\", line 8, in <module>\r\n    sys.exit(main())\r\n  File \"ENVIRONMENT_PATH/lib/python3.7/site-packages/pydocstyle/cli.py\", line 68, in main\r\n    sys.exit(run_pydocstyle())\r\n  File \"ENVIRONMENT_PATH/lib/python3.7/site-packages/pydocstyle/cli.py\", line 45, in run_pydocstyle\r\n    ignore_decorators=ignore_decorators))\r\n  File \"ENVIRONMENT_PATH/lib/python3.7/site-packages/pydocstyle/checker.py\", line 969, in check\r\n    ignore_decorators):\r\n  File \"ENVIRONMENT_PATH/lib/python3.7/site-packages/pydocstyle/checker.py\", line 123, in check_source\r\n    for error in errors:\r\n  File \"ENVIRONMENT_PATH/lib/python3.7/site-packages/pydocstyle/checker.py\", line 917, in check_docstring_sections\r\n    yield from self._check_google_sections(lines, definition, docstring)\r\n  File \"ENVIRONMENT_PATH/lib/python3.7/site-packages/pydocstyle/checker.py\", line 903, in _check_google_sections\r\n    yield from self._check_google_section(docstring, definition, ctx)\r\n  File \"ENVIRONMENT_PATH/lib/python3.7/site-packages/pydocstyle/checker.py\", line 796, in _check_google_section\r\n    yield from cls._check_args_section(docstring, definition, context)\r\n  File \"ENVIRONMENT_PATH/lib/python3.7/site-packages/pydocstyle/checker.py\", line 748, in _check_args_section\r\n    yield from ConventionChecker._check_missing_args(docstring_args, definition)\r\n  File \"ENVIRONMENT_PATH/lib/python3.7/site-packages/pydocstyle/checker.py\", line 762, in _check_missing_args\r\n    function_args = get_function_args(definition.source)\r\n  File \"ENVIRONMENT_PATH/lib/python3.7/site-packages/pydocstyle/checker.py\", line 1002, in get_function_args\r\n    function_arg_node = ast.parse(textwrap.dedent(function_string)).body[0].args\r\n  File \"ENVIRONMENT_PATH/lib/python3.7/ast.py\", line 35, in parse\r\n    return compile(source, filename, mode, PyCF_ONLY_AST)\r\n  File \"<unknown>\", line 1\r\n    def do_something(x):\r\n    ^\r\nIndentationError: unexpected indent\r\n```\r\n\r\nBut the file parses fine by the Python interpreter, and it goes away if I either omit the multiline string literal, omit the `Args:` block of my docstring, or add a `Returns:` or `Raises:` block after the `Args:` block (adding other stuff there does not seem to fix the issue).\r\n\r\nMy environment details\r\nPython 3.7.7 on Linux (though have also seen on other versions)\r\n\r\n```\r\n$ pip freeze\r\ncertifi==2020.6.20\r\npydocstyle==5.0.2\r\nsnowballstemmer==2.0.0\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/490", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/490/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/490/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/490/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/490", "id": 649411379, "node_id": "MDU6SXNzdWU2NDk0MTEzNzk=", "number": 490, "title": "Google convention doesn't raise D417 when section `Returns` is present", "user": {"login": "freddyaboulton", "id": 41651716, "node_id": "MDQ6VXNlcjQxNjUxNzE2", "avatar_url": "https://avatars2.githubusercontent.com/u/41651716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/freddyaboulton", "html_url": "https://github.com/freddyaboulton", "followers_url": "https://api.github.com/users/freddyaboulton/followers", "following_url": "https://api.github.com/users/freddyaboulton/following{/other_user}", "gists_url": "https://api.github.com/users/freddyaboulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/freddyaboulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/freddyaboulton/subscriptions", "organizations_url": "https://api.github.com/users/freddyaboulton/orgs", "repos_url": "https://api.github.com/users/freddyaboulton/repos", "events_url": "https://api.github.com/users/freddyaboulton/events{/privacy}", "received_events_url": "https://api.github.com/users/freddyaboulton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-01T23:37:54Z", "updated_at": "2020-07-02T00:54:39Z", "closed_at": "2020-07-02T00:54:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pydocstyle won't raise D417 when a section called `Returns` is present in the docstring. \r\n\r\nWith pydocstyle 5.0.1, the following example won't raise a D417 (`pydocstyle example.py --convention google`):\r\n\r\n```\r\n\"\"\"Example.\"\"\"\r\n\r\ndef foo(a, b, c):\r\n    \"\"\"Docstring.\r\n\r\n    Arguments:\r\n        a (int): First number\r\n        b (int): Second number\r\n        d (int): Third number\r\n\r\n    Returns:\r\n       int: sum\r\n    \"\"\"\r\n    return a + b + c\r\n```\r\n\r\nWhen I change `Returns` to `Returns`, D417 is raised. Also, when no `Returns` or `Return` section is present, D417 is raised. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/477", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/477/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/477/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/477/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/477", "id": 617818016, "node_id": "MDU6SXNzdWU2MTc4MTgwMTY=", "number": 477, "title": "Indentation error thrown if comment is incorrectly indented", "user": {"login": "karl-malakoff", "id": 5793360, "node_id": "MDQ6VXNlcjU3OTMzNjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5793360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karl-malakoff", "html_url": "https://github.com/karl-malakoff", "followers_url": "https://api.github.com/users/karl-malakoff/followers", "following_url": "https://api.github.com/users/karl-malakoff/following{/other_user}", "gists_url": "https://api.github.com/users/karl-malakoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/karl-malakoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karl-malakoff/subscriptions", "organizations_url": "https://api.github.com/users/karl-malakoff/orgs", "repos_url": "https://api.github.com/users/karl-malakoff/repos", "events_url": "https://api.github.com/users/karl-malakoff/events{/privacy}", "received_events_url": "https://api.github.com/users/karl-malakoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-13T23:28:18Z", "updated_at": "2020-05-14T06:55:07Z", "closed_at": "2020-05-14T06:55:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've found an odd bug where an indentation error is thrown by the ast module if certain conditions are met.\r\n\r\nThe following minimal example will throw the error below.\r\n\r\n```python\r\nclass example:\r\n\r\n    def func(self, arg:str): \r\n        \"\"\"\r\n        description\r\n\r\n        Arguments:\r\n            arg (str): I'm an arg\r\n        \"\"\"\r\n\r\n#  the quick fox jumps over the lazy dog\r\n        \r\n        pass\r\n```\r\n\r\n```Traceback (most recent call last):\r\n  File \"/home/support/miniconda3/envs/peat_test/bin/pydocstyle\", line 8, in <module>\r\n    sys.exit(main())\r\n  File \"/home/support/miniconda3/envs/peat_test/lib/python3.7/site-packages/pydocstyle/cli.py\", line 68, in main\r\n    sys.exit(run_pydocstyle())\r\n  File \"/home/support/miniconda3/envs/peat_test/lib/python3.7/site-packages/pydocstyle/cli.py\", line 45, in run_pydocstyle\r\n    ignore_decorators=ignore_decorators))\r\n  File \"/home/support/miniconda3/envs/peat_test/lib/python3.7/site-packages/pydocstyle/checker.py\", line 969, in check\r\n    ignore_decorators):\r\n  File \"/home/support/miniconda3/envs/peat_test/lib/python3.7/site-packages/pydocstyle/checker.py\", line 123, in check_source\r\n    for error in errors:\r\n  File \"/home/support/miniconda3/envs/peat_test/lib/python3.7/site-packages/pydocstyle/checker.py\", line 917, in check_docstring_sections\r\n    yield from self._check_google_sections(lines, definition, docstring)\r\n  File \"/home/support/miniconda3/envs/peat_test/lib/python3.7/site-packages/pydocstyle/checker.py\", line 903, in _check_google_sections\r\n    yield from self._check_google_section(docstring, definition, ctx)\r\n  File \"/home/support/miniconda3/envs/peat_test/lib/python3.7/site-packages/pydocstyle/checker.py\", line 796, in _check_google_section\r\n    yield from cls._check_args_section(docstring, definition, context)\r\n  File \"/home/support/miniconda3/envs/peat_test/lib/python3.7/site-packages/pydocstyle/checker.py\", line 748, in _check_args_section\r\n    yield from ConventionChecker._check_missing_args(docstring_args, definition)\r\n  File \"/home/support/miniconda3/envs/peat_test/lib/python3.7/site-packages/pydocstyle/checker.py\", line 762, in _check_missing_args\r\n    function_args = get_function_args(definition.source)\r\n  File \"/home/support/miniconda3/envs/peat_test/lib/python3.7/site-packages/pydocstyle/checker.py\", line 1002, in get_function_args\r\n    function_arg_node = ast.parse(textwrap.dedent(function_string)).body[0].args\r\n  File \"/home/support/miniconda3/envs/peat_test/lib/python3.7/ast.py\", line 35, in parse\r\n    return compile(source, filename, mode, PyCF_ONLY_AST)\r\n  File \"<unknown>\", line 1\r\n    def func(self, arg:str): \r\n    ^\r\nIndentationError: unexpected indent\r\n```\r\n\r\nI did some minimal debugging of the checker.py module and found that the string it passes to ast has a leading tab for the function func.\r\n\r\nRemoving any of the following resolves the error:\r\n* the 'description' line in the doc comment\r\n* Removing the 'Arguments:' line or changing it to anything else, eg 'Returns:'\r\n* Removing the docstring entirely \r\n* Removing the pass statement at the bottom of the function\r\n\r\nFixing the indentation in the comment also fixes it as you would expect.\r\n\r\nEven though this is bad style it is legal python so I would of expected this code to be passed though this module correctly if it was formatted like this. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/476", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/476/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/476/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/476/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/476", "id": 616729850, "node_id": "MDU6SXNzdWU2MTY3Mjk4NTA=", "number": 476, "title": "Sphinx compatibility?", "user": {"login": "fkromer", "id": 10199742, "node_id": "MDQ6VXNlcjEwMTk5NzQy", "avatar_url": "https://avatars1.githubusercontent.com/u/10199742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fkromer", "html_url": "https://github.com/fkromer", "followers_url": "https://api.github.com/users/fkromer/followers", "following_url": "https://api.github.com/users/fkromer/following{/other_user}", "gists_url": "https://api.github.com/users/fkromer/gists{/gist_id}", "starred_url": "https://api.github.com/users/fkromer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fkromer/subscriptions", "organizations_url": "https://api.github.com/users/fkromer/orgs", "repos_url": "https://api.github.com/users/fkromer/repos", "events_url": "https://api.github.com/users/fkromer/events{/privacy}", "received_events_url": "https://api.github.com/users/fkromer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-12T15:03:37Z", "updated_at": "2020-05-12T23:51:02Z", "closed_at": "2020-05-12T23:51:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "`pydocstyle` needs to be configured w.r.t. alternative rules. Refer e.g. to https://github.com/PyCQA/pydocstyle/issues/475 and https://github.com/PyCQA/pydocstyle/issues/474 . I wondered if pydocstyle checked docstrings are compatible with [Sphinx](https://www.sphinx-doc.org/en/master/) with all possible configurations. Do I have to consider something w.r.t. Sphinx compatibility. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/475", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/475/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/475/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/475", "id": 616726856, "node_id": "MDU6SXNzdWU2MTY3MjY4NTY=", "number": 475, "title": " Rules D212 and D213 are conflicting", "user": {"login": "fkromer", "id": 10199742, "node_id": "MDQ6VXNlcjEwMTk5NzQy", "avatar_url": "https://avatars1.githubusercontent.com/u/10199742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fkromer", "html_url": "https://github.com/fkromer", "followers_url": "https://api.github.com/users/fkromer/followers", "following_url": "https://api.github.com/users/fkromer/following{/other_user}", "gists_url": "https://api.github.com/users/fkromer/gists{/gist_id}", "starred_url": "https://api.github.com/users/fkromer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fkromer/subscriptions", "organizations_url": "https://api.github.com/users/fkromer/orgs", "repos_url": "https://api.github.com/users/fkromer/repos", "events_url": "https://api.github.com/users/fkromer/events{/privacy}", "received_events_url": "https://api.github.com/users/fkromer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-12T14:59:42Z", "updated_at": "2020-05-13T05:02:13Z", "closed_at": "2020-05-13T05:02:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n\"\"\"Summary.\r\n\r\nExtensive docs.\r\n\"\"\"\r\n```\r\nleads to \"Multi-line docstring summary should start at the second line pydocstyle(D213)\".\r\n\r\n```python\r\n\"\"\"\r\nSummary.\r\n\r\nExtensive docs.\r\n\"\"\"\r\n```\r\n\r\nleads to \"Multi-line docstring summary should start at the first line pydocstyle(D212)\".\r\n\r\nObviously these rules are conflicting and it's worth a note that pydocstyle is not usable out-of-the-box but requires configuration (ignoring at least one of these two rules).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/474", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/474/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/474/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/474/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/474", "id": 616720876, "node_id": "MDU6SXNzdWU2MTY3MjA4NzY=", "number": 474, "title": "Rules D203 and D211 are conflicting", "user": {"login": "fkromer", "id": 10199742, "node_id": "MDQ6VXNlcjEwMTk5NzQy", "avatar_url": "https://avatars1.githubusercontent.com/u/10199742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fkromer", "html_url": "https://github.com/fkromer", "followers_url": "https://api.github.com/users/fkromer/followers", "following_url": "https://api.github.com/users/fkromer/following{/other_user}", "gists_url": "https://api.github.com/users/fkromer/gists{/gist_id}", "starred_url": "https://api.github.com/users/fkromer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fkromer/subscriptions", "organizations_url": "https://api.github.com/users/fkromer/orgs", "repos_url": "https://api.github.com/users/fkromer/repos", "events_url": "https://api.github.com/users/fkromer/events{/privacy}", "received_events_url": "https://api.github.com/users/fkromer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-12T14:52:06Z", "updated_at": "2020-05-13T05:02:23Z", "closed_at": "2020-05-13T05:02:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nclass Something:\r\n\r\n    \"\"\"Some docstring.\"\"\"\"\r\n    \r\n    ...\r\n\r\n```\r\n\r\nleads to \"No blank lines allowed before class docstring (found 1) pydocstyle(D211)\". But\r\n\r\n```python\r\nclass Something:\r\n    \"\"\"Some docstring.\"\"\"\"\r\n\r\n    ...\r\n```\r\n\r\nleads to \"1 blank line required before class docstring (found 0) pydocstyle(D203)\". Obviously these rules are conflicting and it's worth a note that pydocstyle is not usable out-of-the-box but requires configuration (ignoring at least one of these two rules).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/469", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/469/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/469/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/469/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/469", "id": 609369026, "node_id": "MDU6SXNzdWU2MDkzNjkwMjY=", "number": 469, "title": "python3-pydocstyle has no executable in /usr/bin or /usr/local/bin - Ubuntu 20.04", "user": {"login": "palisadoes", "id": 16875803, "node_id": "MDQ6VXNlcjE2ODc1ODAz", "avatar_url": "https://avatars2.githubusercontent.com/u/16875803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palisadoes", "html_url": "https://github.com/palisadoes", "followers_url": "https://api.github.com/users/palisadoes/followers", "following_url": "https://api.github.com/users/palisadoes/following{/other_user}", "gists_url": "https://api.github.com/users/palisadoes/gists{/gist_id}", "starred_url": "https://api.github.com/users/palisadoes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palisadoes/subscriptions", "organizations_url": "https://api.github.com/users/palisadoes/orgs", "repos_url": "https://api.github.com/users/palisadoes/repos", "events_url": "https://api.github.com/users/palisadoes/events{/privacy}", "received_events_url": "https://api.github.com/users/palisadoes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-29T21:23:05Z", "updated_at": "2020-04-29T22:56:48Z", "closed_at": "2020-04-29T22:56:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "With a clean install of Ubuntu 20.04 I noticed that the python3-pydocstyle standard package doesn't come with an executable. I've had to copy it from other systems that were upgraded to Ubuntu 20.04\r\n\r\nYou can uninstall the package and use `pip3` to get the executable, but the Ubuntu package should include it.\r\n\r\n```\r\n$ cat /etc/issue\r\nUbuntu 20.04 LTS \\n \\l\r\n$\r\n```\r\n\r\n\r\n```\r\n$ dpkg-query -L python3-pydocstyle\r\n/.\r\n/usr\r\n/usr/lib\r\n/usr/lib/python3\r\n/usr/lib/python3/dist-packages\r\n/usr/lib/python3/dist-packages/pydocstyle\r\n/usr/lib/python3/dist-packages/pydocstyle/__init__.py\r\n/usr/lib/python3/dist-packages/pydocstyle/__main__.py\r\n/usr/lib/python3/dist-packages/pydocstyle/checker.py\r\n/usr/lib/python3/dist-packages/pydocstyle/cli.py\r\n/usr/lib/python3/dist-packages/pydocstyle/config.py\r\n/usr/lib/python3/dist-packages/pydocstyle/data\r\n/usr/lib/python3/dist-packages/pydocstyle/data/imperatives.txt\r\n/usr/lib/python3/dist-packages/pydocstyle/data/imperatives_blacklist.txt\r\n/usr/lib/python3/dist-packages/pydocstyle/parser.py\r\n/usr/lib/python3/dist-packages/pydocstyle/utils.py\r\n/usr/lib/python3/dist-packages/pydocstyle/violations.py\r\n/usr/lib/python3/dist-packages/pydocstyle/wordlists.py\r\n/usr/lib/python3/dist-packages/pydocstyle-2.1.1.egg-info\r\n/usr/lib/python3/dist-packages/pydocstyle-2.1.1.egg-info/PKG-INFO\r\n/usr/lib/python3/dist-packages/pydocstyle-2.1.1.egg-info/dependency_links.txt\r\n/usr/lib/python3/dist-packages/pydocstyle-2.1.1.egg-info/entry_points.txt\r\n/usr/lib/python3/dist-packages/pydocstyle-2.1.1.egg-info/requires.txt\r\n/usr/lib/python3/dist-packages/pydocstyle-2.1.1.egg-info/top_level.txt\r\n/usr/share\r\n/usr/share/doc\r\n/usr/share/doc/python3-pydocstyle\r\n/usr/share/doc/python3-pydocstyle/changelog.Debian.gz\r\n/usr/share/doc/python3-pydocstyle/copyright\r\n$\r\n```\r\n\r\n\r\n```\r\n$ dpkg --list python3-pydocstyle\r\nDesired=Unknown/Install/Remove/Purge/Hold\r\n| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend\r\n|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)\r\n||/ Name               Version      Architecture Description\r\n+++-==================-============-============-=================================================\r\nii  python3-pydocstyle 2.1.1-1      all          Python docstring style checker (Python 3 library)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/468", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/468/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/468/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/468/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/468", "id": 609264416, "node_id": "MDU6SXNzdWU2MDkyNjQ0MTY=", "number": 468, "title": "D401 for \"Run\"", "user": {"login": "Dreamsorcerer", "id": 2203121, "node_id": "MDQ6VXNlcjIyMDMxMjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2203121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dreamsorcerer", "html_url": "https://github.com/Dreamsorcerer", "followers_url": "https://api.github.com/users/Dreamsorcerer/followers", "following_url": "https://api.github.com/users/Dreamsorcerer/following{/other_user}", "gists_url": "https://api.github.com/users/Dreamsorcerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dreamsorcerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dreamsorcerer/subscriptions", "organizations_url": "https://api.github.com/users/Dreamsorcerer/orgs", "repos_url": "https://api.github.com/users/Dreamsorcerer/repos", "events_url": "https://api.github.com/users/Dreamsorcerer/events{/privacy}", "received_events_url": "https://api.github.com/users/Dreamsorcerer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-29T18:26:35Z", "updated_at": "2020-04-29T18:27:25Z", "closed_at": "2020-04-29T18:27:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get `D401 First line should be in imperative mood` for:\r\n`\"\"\"Runs the web app.\"\"\"` and `\"\"\"Run the web app.\"\"\"`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/466", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/466/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/466/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/466/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/466", "id": 606834835, "node_id": "MDU6SXNzdWU2MDY4MzQ4MzU=", "number": 466, "title": "Allow blank line between docstring and coroutine definition", "user": {"login": "rytilahti", "id": 3705853, "node_id": "MDQ6VXNlcjM3MDU4NTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3705853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rytilahti", "html_url": "https://github.com/rytilahti", "followers_url": "https://api.github.com/users/rytilahti/followers", "following_url": "https://api.github.com/users/rytilahti/following{/other_user}", "gists_url": "https://api.github.com/users/rytilahti/gists{/gist_id}", "starred_url": "https://api.github.com/users/rytilahti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rytilahti/subscriptions", "organizations_url": "https://api.github.com/users/rytilahti/orgs", "repos_url": "https://api.github.com/users/rytilahti/repos", "events_url": "https://api.github.com/users/rytilahti/events{/privacy}", "received_events_url": "https://api.github.com/users/rytilahti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-25T19:05:06Z", "updated_at": "2020-05-03T10:18:22Z", "closed_at": "2020-05-03T10:17:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "#426 fixed `D202: No blank lines allowed after function docstring` errors for blackified inner functions, but it seems this was only a partial fix and D202 is still being reported for `async def`ed inner functions.\r\n\r\nExample code based on https://github.com/PyCQA/pydocstyle/issues/361#issuecomment-498625056:\r\n```\r\n\"\"\"foo.\"\"\"\r\n\r\ndef spam():\r\n    \"\"\"Spam.\"\"\"\r\n\r\n    def ham():\r\n        return \"ham\"\r\n\r\n    return \"spam\"\r\n\r\n\r\ndef async_spam():\r\n    \"\"\"Async spam.\"\"\"\r\n\r\n    async def ham():\r\n        return \"ham\"\r\n\r\n    return \"spam\"\r\n```\r\nproduces the following:\r\n```\r\n/tmp/test.py:13 in public function `async_spam`:\r\n        D202: No blank lines allowed after function docstring (found 1)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/464", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/464/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/464/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/464/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/464", "id": 603089122, "node_id": "MDU6SXNzdWU2MDMwODkxMjI=", "number": 464, "title": "Codebase itself is not pydocstyle compliant.", "user": {"login": "yanxun827", "id": 11940335, "node_id": "MDQ6VXNlcjExOTQwMzM1", "avatar_url": "https://avatars2.githubusercontent.com/u/11940335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanxun827", "html_url": "https://github.com/yanxun827", "followers_url": "https://api.github.com/users/yanxun827/followers", "following_url": "https://api.github.com/users/yanxun827/following{/other_user}", "gists_url": "https://api.github.com/users/yanxun827/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanxun827/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanxun827/subscriptions", "organizations_url": "https://api.github.com/users/yanxun827/orgs", "repos_url": "https://api.github.com/users/yanxun827/repos", "events_url": "https://api.github.com/users/yanxun827/events{/privacy}", "received_events_url": "https://api.github.com/users/yanxun827/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-20T09:33:05Z", "updated_at": "2020-04-24T15:01:16Z", "closed_at": "2020-04-24T15:01:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Out of curiosity, I ran `pydocstyle src/` I the pydocstyle codebase and to my surprise there are many errors raised. I would have assumed that a tool being used to check for compliance would strive for compliance itself.\r\n\r\nNot sure if this has been raised before or if this is a deliberate decision. If not, I suggest that `pydocstring` should be part of the CI pipeline, so compliance is maintained for every commit. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/457", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/457/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/457/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/457/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/457", "id": 576389935, "node_id": "MDU6SXNzdWU1NzYzODk5MzU=", "number": 457, "title": "Documentation link is outdated", "user": {"login": "Glyphack", "id": 20788334, "node_id": "MDQ6VXNlcjIwNzg4MzM0", "avatar_url": "https://avatars0.githubusercontent.com/u/20788334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Glyphack", "html_url": "https://github.com/Glyphack", "followers_url": "https://api.github.com/users/Glyphack/followers", "following_url": "https://api.github.com/users/Glyphack/following{/other_user}", "gists_url": "https://api.github.com/users/Glyphack/gists{/gist_id}", "starred_url": "https://api.github.com/users/Glyphack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Glyphack/subscriptions", "organizations_url": "https://api.github.com/users/Glyphack/orgs", "repos_url": "https://api.github.com/users/Glyphack/repos", "events_url": "https://api.github.com/users/Glyphack/events{/privacy}", "received_events_url": "https://api.github.com/users/Glyphack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-05T16:46:22Z", "updated_at": "2020-06-16T15:51:43Z", "closed_at": "2020-06-16T15:51:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nThe documentation link in `README.md` file refers to http://pydocstyle.org which redirects to http://www.pydocstyle.org/en/5.0.1/ but as It says:\r\n\r\n> You are not reading the most recent version of this documentation. 5.0.2 is the latest version available.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/447", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/447/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/447/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/447/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/447", "id": 547452292, "node_id": "MDU6SXNzdWU1NDc0NTIyOTI=", "number": 447, "title": "pyproject.toml configuration support ", "user": {"login": "wlcx", "id": 3065381, "node_id": "MDQ6VXNlcjMwNjUzODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3065381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wlcx", "html_url": "https://github.com/wlcx", "followers_url": "https://api.github.com/users/wlcx/followers", "following_url": "https://api.github.com/users/wlcx/following{/other_user}", "gists_url": "https://api.github.com/users/wlcx/gists{/gist_id}", "starred_url": "https://api.github.com/users/wlcx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wlcx/subscriptions", "organizations_url": "https://api.github.com/users/wlcx/orgs", "repos_url": "https://api.github.com/users/wlcx/repos", "events_url": "https://api.github.com/users/wlcx/events{/privacy}", "received_events_url": "https://api.github.com/users/wlcx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-09T12:36:14Z", "updated_at": "2020-03-29T12:36:38Z", "closed_at": "2020-01-17T14:10:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Many other python formatting/style tools have added support for the `pyproject.toml` file's `[tool.*]` sections for their configuration. Is this something that pydocstyle would be open to supporting?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/443", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/443/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/443/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/443/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/443", "id": 545322951, "node_id": "MDU6SXNzdWU1NDUzMjI5NTE=", "number": 443, "title": "D417 - inconsistent results with Google-style (possible bug)", "user": {"login": "ColinKennedy", "id": 10103049, "node_id": "MDQ6VXNlcjEwMTAzMDQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/10103049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ColinKennedy", "html_url": "https://github.com/ColinKennedy", "followers_url": "https://api.github.com/users/ColinKennedy/followers", "following_url": "https://api.github.com/users/ColinKennedy/following{/other_user}", "gists_url": "https://api.github.com/users/ColinKennedy/gists{/gist_id}", "starred_url": "https://api.github.com/users/ColinKennedy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ColinKennedy/subscriptions", "organizations_url": "https://api.github.com/users/ColinKennedy/orgs", "repos_url": "https://api.github.com/users/ColinKennedy/repos", "events_url": "https://api.github.com/users/ColinKennedy/events{/privacy}", "received_events_url": "https://api.github.com/users/ColinKennedy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 10650658, "node_id": "MDU6TGFiZWwxMDY1MDY1OA==", "url": "https://api.github.com/repos/PyCQA/pydocstyle/labels/Bugfix", "name": "Bugfix", "color": "8e0830", "default": false, "description": ""}, {"id": 1708080435, "node_id": "MDU6TGFiZWwxNzA4MDgwNDM1", "url": "https://api.github.com/repos/PyCQA/pydocstyle/labels/Waiting%20for%20Assignee", "name": "Waiting for Assignee", "color": "04dd5f", "default": false, "description": "This issue has been triaged as a good idea, waiting for a volunteer to implement"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-01-04T19:29:17Z", "updated_at": "2020-05-28T04:16:55Z", "closed_at": "2020-05-28T04:16:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "D417 does not report for all parameters in a function docstring. Take this example file, below.\r\n\r\n```python\r\n\r\n\"\"\"Something here.\"\"\"\r\n\r\ndef foo(skips, verbose):\r\n    \"\"\"Do stuff.\r\n\r\n    Args:\r\n        skips (:attr:`.Skip`):\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\r\n            Etiam at tellus a tellus faucibus maximus. Curabitur tellus\r\n            mauris, semper id vehicula ac, feugiat ut tortor.\r\n        verbose (bool):\r\n            If True, print out as much infromation as possible.\r\n            If False, print out concise \"one-liner\" information.\r\n\r\n    \"\"\"\r\n    pass\r\n\r\n\r\ndef bar(skips, verbose):\r\n    \"\"\"Do stuff.\r\n\r\n    Args:\r\n        skips (:attr:`.Skip`):\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit.\r\n            Etiam at tellus a tellus faucibus maximus. Curabitur tellus\r\n            mauris, semper id vehicula ac, feugiat ut tortor.\r\n        verbose (bool): If True, print out as much infromation as possible.\r\n            If False, print out concise \"one-liner\" information.\r\n\r\n    \"\"\"\r\n    pass\r\n\r\n```\r\n\r\n## Results\r\n\r\nWhen I ran pydocstyle, it only complains with\r\n\r\n```\r\nfoo.py:7 in public function `foo`:                                                                                                                                                                                                                                                            \r\n        D417: Missing argument descriptions in the docstring (argument(s) verbose are missing descriptions in 'foo' docstring)      \r\n```\r\n\r\nThis strikes me as inconsistent. The `verbose` parameter in `bar` is considered valid because its description starts on the same line as the parameter. `skips` doesn't start on the same line of the parameter in both `foo` and `bar` but pydocstyle doesn't ever complain about `skips`. It only seems to care about `verbose`.\r\n\r\nShouldn't pydocstyle be complaining that `skips` doesn't start on the same line, too?\r\nPersonally I'd prefer pydocstyle to accept that docstrings can start on the line below a parameter instead of forcing the user to write on the same like \r\n\r\ne.g.\r\n\r\nThis is considered valid.\r\n\r\n```\r\n    Args:\r\n        verbose (bool): If True, print out as much infromation as possible.\r\n            If False, print out concise \"one-liner\" information.\r\n```\r\n\r\nThis should also be considered valid.\r\n\r\n```\r\n    Args:\r\n        verbose (bool): \r\n            If True, print out as much infromation as possible.\r\n            If False, print out concise \"one-liner\" information.\r\n```\r\n\r\nTo me, the latter feels more \"right\". But to be fair though, I didn't see anything in the google style guide indicating it's okay for descriptions could start one line down. So maybe you don't agree with that suggestion. \r\n\r\nAt the very least though, I'd like pydocstyle to enforce D417 consistently. `skips` should also be failing, which it isn't currently.\r\n\r\n### Environment Details\r\nPython: 3.7.3\r\ncommand: `pydocstyle --ignore=D213,D202,D203,D406,D407 foo.py`\r\npydocstyle version: 5.0.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/442", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/442/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/442/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/442", "id": 545181892, "node_id": "MDU6SXNzdWU1NDUxODE4OTI=", "number": 442, "title": "Colored terminal output", "user": {"login": "timhoffm", "id": 2836374, "node_id": "MDQ6VXNlcjI4MzYzNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2836374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timhoffm", "html_url": "https://github.com/timhoffm", "followers_url": "https://api.github.com/users/timhoffm/followers", "following_url": "https://api.github.com/users/timhoffm/following{/other_user}", "gists_url": "https://api.github.com/users/timhoffm/gists{/gist_id}", "starred_url": "https://api.github.com/users/timhoffm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timhoffm/subscriptions", "organizations_url": "https://api.github.com/users/timhoffm/orgs", "repos_url": "https://api.github.com/users/timhoffm/repos", "events_url": "https://api.github.com/users/timhoffm/events{/privacy}", "received_events_url": "https://api.github.com/users/timhoffm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-03T21:59:29Z", "updated_at": "2020-01-05T10:58:43Z", "closed_at": "2020-01-05T10:58:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The filename, line numbers and function are hard to read in the command line output, e.g.\r\n\r\n~~~\r\nlib/matplotlib/patches.py:3887 in public method `__init__`:\r\n        D301: Use r\"\"\" if any backslashes in a docstring\r\nlib/matplotlib/offsetbox.py:238 in public method `set_offset`:\r\n        D301: Use r\"\"\" if any backslashes in a docstring\r\nlib/matplotlib/image.py:741 in private method `set_interpolation`:\r\n        D301: Use r\"\"\" if any backslashes in a docstring\r\n~~~\r\n\r\nIt would be great to color them differently. I would be willing to provide a PR if there is interest.\r\n\r\nIf so:\r\n- Should color be on or off by default?\r\n- I'd use https://pypi.org/project/colorama/ for the output. Can I make it a dependency (hard or optional)?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/439", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/439/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/439/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/439/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/439", "id": 536358937, "node_id": "MDU6SXNzdWU1MzYzNTg5Mzc=", "number": 439, "title": "Add option to ignore specific errors per module", "user": {"login": "tpazderka", "id": 7734753, "node_id": "MDQ6VXNlcjc3MzQ3NTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/7734753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tpazderka", "html_url": "https://github.com/tpazderka", "followers_url": "https://api.github.com/users/tpazderka/followers", "following_url": "https://api.github.com/users/tpazderka/following{/other_user}", "gists_url": "https://api.github.com/users/tpazderka/gists{/gist_id}", "starred_url": "https://api.github.com/users/tpazderka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tpazderka/subscriptions", "organizations_url": "https://api.github.com/users/tpazderka/orgs", "repos_url": "https://api.github.com/users/tpazderka/repos", "events_url": "https://api.github.com/users/tpazderka/events{/privacy}", "received_events_url": "https://api.github.com/users/tpazderka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-11T13:08:35Z", "updated_at": "2019-12-13T19:40:04Z", "closed_at": "2019-12-13T19:40:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice to be able to skip certain errors per module.\r\n\r\nFor example, I do want to force existence of docstrings in my projects (D1 is not ignored), but I only want to enforce format but not existence of docstrings in tests (ignore D1).\r\n\r\nIt could be similar to [isort](https://github.com/timothycrosley/isort#skip-processing-of-imports-outside-of-configuration) way of doing it. Add an option in module docstring.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/438", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/438/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/438/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/438/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/438", "id": 536298332, "node_id": "MDU6SXNzdWU1MzYyOTgzMzI=", "number": 438, "title": "D417: Ignore arguments marked as unused", "user": {"login": "karlch", "id": 12006766, "node_id": "MDQ6VXNlcjEyMDA2NzY2", "avatar_url": "https://avatars2.githubusercontent.com/u/12006766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karlch", "html_url": "https://github.com/karlch", "followers_url": "https://api.github.com/users/karlch/followers", "following_url": "https://api.github.com/users/karlch/following{/other_user}", "gists_url": "https://api.github.com/users/karlch/gists{/gist_id}", "starred_url": "https://api.github.com/users/karlch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karlch/subscriptions", "organizations_url": "https://api.github.com/users/karlch/orgs", "repos_url": "https://api.github.com/users/karlch/repos", "events_url": "https://api.github.com/users/karlch/events{/privacy}", "received_events_url": "https://api.github.com/users/karlch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-11T11:04:55Z", "updated_at": "2020-02-29T06:53:39Z", "closed_at": "2020-02-29T06:53:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all thanks for a really useful tool and the great D417 which has caught many issues for me!\r\n\r\nI feel like D417 should not complain for arguments marked as unused by prepending an underscore. This is also how pylint handles the `unused-argument` error.\r\n\r\nConsider e.g.:\r\n```\r\ndef handle_interrupt(self, signum: int, _frame: FrameType) -> None:\r\n    ...\r\n```\r\n\r\nWe provide the `_frame` argument to make the callback signature valid, but never actually use it in the later code. IMHO documenting `_frame` in this case should not be required.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/437", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/437/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/437/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/437/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/437", "id": 536237028, "node_id": "MDU6SXNzdWU1MzYyMzcwMjg=", "number": 437, "title": "IndentationError on line continuations for numpydoc", "user": {"login": "anntzer", "id": 1322974, "node_id": "MDQ6VXNlcjEzMjI5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1322974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anntzer", "html_url": "https://github.com/anntzer", "followers_url": "https://api.github.com/users/anntzer/followers", "following_url": "https://api.github.com/users/anntzer/following{/other_user}", "gists_url": "https://api.github.com/users/anntzer/gists{/gist_id}", "starred_url": "https://api.github.com/users/anntzer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anntzer/subscriptions", "organizations_url": "https://api.github.com/users/anntzer/orgs", "repos_url": "https://api.github.com/users/anntzer/repos", "events_url": "https://api.github.com/users/anntzer/events{/privacy}", "received_events_url": "https://api.github.com/users/anntzer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-11T09:14:04Z", "updated_at": "2020-07-08T08:20:25Z", "closed_at": "2020-07-08T08:20:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "as of pydocstyle 5.0.1:\r\n```python\r\nclass T:\r\n\r\n    def foo(self, x):\r\n        \"\"\"\r\n        Does foo.\r\n\r\n        Parameters\r\n        ----------\r\n        x : {'some', 'value', 'and', 'more', 'values', \\\r\n'numpydoc', 'says', 'they', 'have', 'to', 'fit', 'in', 'one', 'line'}\r\n        \"\"\"\r\n```\r\nanalyzing with --convention=numpy results in\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/bin/pydocstyle\", line 11, in <module>\r\n    load_entry_point('pydocstyle==5.0.1', 'console_scripts', 'pydocstyle')()\r\n  File \"/usr/lib/python3.8/site-packages/pydocstyle/cli.py\", line 68, in main\r\n    sys.exit(run_pydocstyle())\r\n  File \"/usr/lib/python3.8/site-packages/pydocstyle/cli.py\", line 44, in run_pydocstyle\r\n    errors.extend(check((filename,), select=checked_codes,\r\n  File \"/usr/lib/python3.8/site-packages/pydocstyle/checker.py\", line 968, in check\r\n    for error in ConventionChecker().check_source(source, filename,\r\n  File \"/usr/lib/python3.8/site-packages/pydocstyle/checker.py\", line 123, in check_source\r\n    for error in errors:\r\n  File \"/usr/lib/python3.8/site-packages/pydocstyle/checker.py\", line 915, in check_docstring_sections\r\n    found_numpy = yield from self._check_numpy_sections(lines, definition, docstring)\r\n  File \"/usr/lib/python3.8/site-packages/pydocstyle/checker.py\", line 879, in _check_numpy_sections\r\n    yield from self._check_numpy_section(docstring, definition, ctx)\r\n  File \"/usr/lib/python3.8/site-packages/pydocstyle/checker.py\", line 693, in _check_numpy_section\r\n    yield from cls._check_parameters_section(docstring, definition, context)\r\n  File \"/usr/lib/python3.8/site-packages/pydocstyle/checker.py\", line 731, in _check_parameters_section\r\n    yield from ConventionChecker._check_missing_args(docstring_args, definition)\r\n  File \"/usr/lib/python3.8/site-packages/pydocstyle/checker.py\", line 762, in _check_missing_args\r\n    function_args = get_function_args(definition.source)\r\n  File \"/usr/lib/python3.8/site-packages/pydocstyle/checker.py\", line 1002, in get_function_args\r\n    function_arg_node = ast.parse(textwrap.dedent(function_string)).body[0].args\r\n  File \"/usr/lib/python3.8/ast.py\", line 47, in parse\r\n    return compile(source, filename, mode, flags,\r\n  File \"<unknown>\", line 1\r\n    def foo(self, x):\r\n    ^\r\nIndentationError: unexpected indent\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/435", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/435/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/435/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/435/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/435", "id": 535112976, "node_id": "MDU6SXNzdWU1MzUxMTI5NzY=", "number": 435, "title": "AttributeError: 'ClassDef' object has no attribute 'args'](url)", "user": {"login": "ucabsdp", "id": 1112504, "node_id": "MDQ6VXNlcjExMTI1MDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1112504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ucabsdp", "html_url": "https://github.com/ucabsdp", "followers_url": "https://api.github.com/users/ucabsdp/followers", "following_url": "https://api.github.com/users/ucabsdp/following{/other_user}", "gists_url": "https://api.github.com/users/ucabsdp/gists{/gist_id}", "starred_url": "https://api.github.com/users/ucabsdp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ucabsdp/subscriptions", "organizations_url": "https://api.github.com/users/ucabsdp/orgs", "repos_url": "https://api.github.com/users/ucabsdp/repos", "events_url": "https://api.github.com/users/ucabsdp/events{/privacy}", "received_events_url": "https://api.github.com/users/ucabsdp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-09T18:27:51Z", "updated_at": "2019-12-09T19:50:01Z", "closed_at": "2019-12-09T19:50:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running release 5.0.0 on Travis:\r\n\r\nTraceback (most recent call last):\r\n  File \"/opt/python/3.6.7/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/opt/python/3.6.7/lib/python3.6/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pydocstyle/__main__.py\", line 19, in <module>\r\n    main()\r\n  File \"/home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pydocstyle/__main__.py\", line 15, in main\r\n    cli.main()\r\n  File \"/home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pydocstyle/cli.py\", line 68, in main\r\n    sys.exit(run_pydocstyle())\r\n  File \"/home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pydocstyle/cli.py\", line 45, in run_pydocstyle\r\n    ignore_decorators=ignore_decorators))\r\n  File \"/home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pydocstyle/checker.py\", line 968, in check\r\n    ignore_decorators):\r\n  File \"/home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pydocstyle/checker.py\", line 123, in check_source\r\n    for error in errors:\r\n  File \"/home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pydocstyle/checker.py\", line 916, in check_docstring_sections\r\n    yield from self._check_google_sections(lines, definition, docstring)\r\n  File \"/home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pydocstyle/checker.py\", line 902, in _check_google_sections\r\n    yield from self._check_google_section(docstring, definition, ctx)\r\n  File \"/home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pydocstyle/checker.py\", line 795, in _check_google_section\r\n    yield from cls._check_args_section(docstring, definition, context)\r\n  File \"/home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pydocstyle/checker.py\", line 748, in _check_args_section\r\n    yield from ConventionChecker._check_missing_args(docstring_args, definition)\r\n  File \"/home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pydocstyle/checker.py\", line 761, in _check_missing_args\r\n    function_args = get_function_args(definition.source)\r\n  File \"/home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/pydocstyle/checker.py\", line 1001, in get_function_args\r\n    function_arg_node = ast.parse(textwrap.dedent(function_string)).body[0].args\r\nAttributeError: 'ClassDef' object has no attribute 'args'](url)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/434", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/434/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/434/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/434/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/434", "id": 534842387, "node_id": "MDU6SXNzdWU1MzQ4NDIzODc=", "number": 434, "title": "AttributeError when parameters are documented in the class docstring.", "user": {"login": "anntzer", "id": 1322974, "node_id": "MDQ6VXNlcjEzMjI5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1322974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anntzer", "html_url": "https://github.com/anntzer", "followers_url": "https://api.github.com/users/anntzer/followers", "following_url": "https://api.github.com/users/anntzer/following{/other_user}", "gists_url": "https://api.github.com/users/anntzer/gists{/gist_id}", "starred_url": "https://api.github.com/users/anntzer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anntzer/subscriptions", "organizations_url": "https://api.github.com/users/anntzer/orgs", "repos_url": "https://api.github.com/users/anntzer/repos", "events_url": "https://api.github.com/users/anntzer/events{/privacy}", "received_events_url": "https://api.github.com/users/anntzer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-09T10:43:25Z", "updated_at": "2019-12-11T07:39:05Z", "closed_at": "2019-12-11T07:39:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Running pydocstyle 5.0.0 on\r\n```python\r\nclass Blah:\r\n    \"\"\"\r\n    Blah.\r\n\r\n    Parameters\r\n    ----------\r\n    x : int\r\n    \"\"\"\r\n\r\n    def __init__(self, x):\r\n        pass\r\n```\r\nresults in\r\n```\r\n<elided>\r\n  File \".../lib/python3.8/site-packages/pydocstyle/checker.py\", line 1002, in get_function_args\r\n    function_arg_node = ast.parse(textwrap.dedent(function_string)).body[0].args\r\nAttributeError: 'ClassDef' object has no attribute 'args'\r\n```\r\n\r\nOne can argue whether parameter lists should be allowed on the class docstring rather than the init docstring, but in any case this shouldn't fail with an AttributeError.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/421", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/421/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/421/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/421/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/421", "id": 508947930, "node_id": "MDU6SXNzdWU1MDg5NDc5MzA=", "number": 421, "title": "D401 does not properly check one-word documentations", "user": {"login": "Strus", "id": 978264, "node_id": "MDQ6VXNlcjk3ODI2NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/978264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Strus", "html_url": "https://github.com/Strus", "followers_url": "https://api.github.com/users/Strus/followers", "following_url": "https://api.github.com/users/Strus/following{/other_user}", "gists_url": "https://api.github.com/users/Strus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Strus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Strus/subscriptions", "organizations_url": "https://api.github.com/users/Strus/orgs", "repos_url": "https://api.github.com/users/Strus/repos", "events_url": "https://api.github.com/users/Strus/events{/privacy}", "received_events_url": "https://api.github.com/users/Strus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-18T09:00:06Z", "updated_at": "2019-11-30T21:31:49Z", "closed_at": "2019-11-30T21:31:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "pydocstyle version: 4.0.1\r\n\r\nD401 does not detect errors in documentation if it is just one word.\r\n\r\nExample:\r\n\r\n```python\r\n\"\"\"Test file.\"\"\"\r\n\r\nclass Foo:\r\n    \"\"\"Represents something.\"\"\"\r\n\r\n    def __init__(self, bar):\r\n        \"\"\"Constructor.\r\n\r\n        :param bar: bar\r\n        \"\"\"\r\n        self.bar = bar\r\n```\r\n\r\n```bash\r\npydocstyle --ignore D203,D213,D407,D416 test.py\r\n<empty output>\r\n```\r\n\r\nWhen I add some more words to `__init__` documentation, it properly detects D401:\r\n\r\n\r\n```python\r\n\"\"\"Test file.\"\"\"\r\n\r\nclass Foo:\r\n    \"\"\"Represents something.\"\"\"\r\n\r\n    def __init__(self, bar):\r\n        \"\"\"Constructor of Foo.\r\n\r\n        :param bar: bar\r\n        \"\"\"\r\n        self.bar = bar\r\n```\r\n\r\n```bash\r\npydocstyle --ignore D203,D213,D407,D416 test.py\r\ntest.py:7 in public method `__init__`:\r\n        D401: First line should be in imperative mood; try rephrasing (found 'Constructor')\r\n```\r\n\r\nIt also does not detect other single words like for example `Initalizer.`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/417", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/417/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/417/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/417/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/417", "id": 508556173, "node_id": "MDU6SXNzdWU1MDg1NTYxNzM=", "number": 417, "title": "noqa cannot be used in module docstrings", "user": {"login": "raabf", "id": 4788201, "node_id": "MDQ6VXNlcjQ3ODgyMDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4788201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raabf", "html_url": "https://github.com/raabf", "followers_url": "https://api.github.com/users/raabf/followers", "following_url": "https://api.github.com/users/raabf/following{/other_user}", "gists_url": "https://api.github.com/users/raabf/gists{/gist_id}", "starred_url": "https://api.github.com/users/raabf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raabf/subscriptions", "organizations_url": "https://api.github.com/users/raabf/orgs", "repos_url": "https://api.github.com/users/raabf/repos", "events_url": "https://api.github.com/users/raabf/events{/privacy}", "received_events_url": "https://api.github.com/users/raabf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-17T15:29:14Z", "updated_at": "2020-07-15T13:22:08Z", "closed_at": "2020-07-15T09:13:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "It is not possible to use `# noqa`, e.g. to ignore something within a module docstring\r\n\r\nFor example, consider this file:\r\n\r\n```python\r\n# noqa: D400\r\n\"\"\"Fullstop at end missing 1\r\n\r\nFoo bar documentation.\r\n\"\"\" # noqa: D400\r\n\r\ndef func(): # noqa: D400\r\n\"\"\"Fullstop at end missing 2\r\n\r\nFoo bar documentation.\r\n\"\"\"\r\n```\r\nWhich would result in the following pydocstyle error:\r\n\r\n    /home/raabf/Dokumente/module_doc_test.py:2 at module level:\r\n        D400: First line should end with a period (not '1')\r\n\r\nError codes\u2014such as the D400 in the exapmle\u2014can be ignored by putting an `# noqa: D400` at the end of the line for which the docstring is intended, such as the function definition. However, this is not possible for module docstrings. I did not find a place wher the noqa can be put for module docstrings. Is there a way to use the noqa for module docstrings?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/410", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/410/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/410/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/410/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/410", "id": 499655900, "node_id": "MDU6SXNzdWU0OTk2NTU5MDA=", "number": 410, "title": "Option ignore-decorators does not work properly", "user": {"login": "donpatrice", "id": 25233352, "node_id": "MDQ6VXNlcjI1MjMzMzUy", "avatar_url": "https://avatars0.githubusercontent.com/u/25233352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/donpatrice", "html_url": "https://github.com/donpatrice", "followers_url": "https://api.github.com/users/donpatrice/followers", "following_url": "https://api.github.com/users/donpatrice/following{/other_user}", "gists_url": "https://api.github.com/users/donpatrice/gists{/gist_id}", "starred_url": "https://api.github.com/users/donpatrice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/donpatrice/subscriptions", "organizations_url": "https://api.github.com/users/donpatrice/orgs", "repos_url": "https://api.github.com/users/donpatrice/repos", "events_url": "https://api.github.com/users/donpatrice/events{/privacy}", "received_events_url": "https://api.github.com/users/donpatrice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-27T21:19:28Z", "updated_at": "2019-10-23T07:04:58Z", "closed_at": "2019-10-23T07:04:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "The ignore-decorators option does not work, when the decorated method is the first method in  a class.\r\n\r\nConsider the following example file named foo.py:\r\n```\r\n\"\"\"Shut up.\"\"\"\r\n\r\n\r\nclass FooClass:\r\n    \"\"\"Shut up.\"\"\"\r\n\r\n    @property\r\n    def bar(self):\r\n        pass\r\n\r\n```\r\nThen\r\n```\r\n$ pydocstyle --ignore-decorators='.*' foo.py\r\nfoo.py:8 in public method `bar`:\r\n        D102: Missing docstring in public method\r\n```\r\n\r\nWhile the example foo2.py\r\n```\r\n\"\"\"Shut up.\"\"\"\r\n\r\n\r\nclass FooClass:\r\n    \"\"\"Shut up.\"\"\"\r\n\r\n    def foo(self):\r\n        \"\"\"Shut up.\"\"\"\r\n        pass\r\n\r\n    @property\r\n    def bar(self):\r\n        pass\r\n```\r\nis working as expected:\r\n```$ pydocstyle --ignore-decorators='.*' foo2.py```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/405", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/405/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/405/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/405/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/405", "id": 495870341, "node_id": "MDU6SXNzdWU0OTU4NzAzNDE=", "number": 405, "title": "Pypi version publish request with latest features", "user": {"login": "ljades", "id": 3341493, "node_id": "MDQ6VXNlcjMzNDE0OTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3341493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljades", "html_url": "https://github.com/ljades", "followers_url": "https://api.github.com/users/ljades/followers", "following_url": "https://api.github.com/users/ljades/following{/other_user}", "gists_url": "https://api.github.com/users/ljades/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljades/subscriptions", "organizations_url": "https://api.github.com/users/ljades/orgs", "repos_url": "https://api.github.com/users/ljades/repos", "events_url": "https://api.github.com/users/ljades/events{/privacy}", "received_events_url": "https://api.github.com/users/ljades/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-19T15:22:34Z", "updated_at": "2019-12-09T10:10:48Z", "closed_at": "2019-12-09T08:55:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "The extension of missing argument detection with Google-style docstrings is super helpful. When might we expect a new version on Pypi?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/401", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/401/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/401/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/401", "id": 485979204, "node_id": "MDU6SXNzdWU0ODU5NzkyMDQ=", "number": 401, "title": "D413 problems since pydocstyle 4.0.0", "user": {"login": "MarkusPiotrowski", "id": 4503120, "node_id": "MDQ6VXNlcjQ1MDMxMjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4503120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarkusPiotrowski", "html_url": "https://github.com/MarkusPiotrowski", "followers_url": "https://api.github.com/users/MarkusPiotrowski/followers", "following_url": "https://api.github.com/users/MarkusPiotrowski/following{/other_user}", "gists_url": "https://api.github.com/users/MarkusPiotrowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarkusPiotrowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarkusPiotrowski/subscriptions", "organizations_url": "https://api.github.com/users/MarkusPiotrowski/orgs", "repos_url": "https://api.github.com/users/MarkusPiotrowski/repos", "events_url": "https://api.github.com/users/MarkusPiotrowski/events{/privacy}", "received_events_url": "https://api.github.com/users/MarkusPiotrowski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-27T19:00:20Z", "updated_at": "2019-09-21T16:03:07Z", "closed_at": "2019-09-21T16:03:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Updating `pydocstyle` from version 3.0.0 to version 4.0.0 or 4.0.1 throw numerous new `D413` (and few `D412`) issues on code that passes with version 3.0.0.\r\n\r\nExample: The following code:\r\n```python\r\n\"\"\"Test module to demonstrate D413 problem.\"\"\"\r\n\r\n\r\ndef example_1(one, two):\r\n    \"\"\"Demonstrate case.\r\n\r\n    Arguments:\r\n     - one      first argument\r\n     - second   second argument\r\n\r\n    This function shows if a D413 is thrown or not.\r\n    In my view, this is not a D413.\r\n    \"\"\"\r\n    pass\r\n\r\n\r\ndef example_2(one, two):\r\n    \"\"\"Demonstrate case.\r\n\r\n    Attributes:\r\n     - one      first attribute\r\n     - second   second attribute\r\n\r\n    This function shows if a D413 is thrown or not.\r\n    In my view, this is not a D413.\r\n    \"\"\"\r\n    pass\r\n\r\n\r\n# Original PEP-257 example from https://www.python.org/dev/peps/pep-0257/:\r\ndef complex(real=0.0, imag=0.0):\r\n    \"\"\"Form a complex number.\r\n\r\n    Keyword arguments:\r\n    real -- the real part (default 0.0)\r\n    imag -- the imaginary part (default 0.0)\r\n    \"\"\"\r\n    if imag == 0.0 and real == 0.0:\r\n        return complex_zero\r\n```\r\nthrows 'only' one issue with `pydocstyle` ver. 3.0.0:\r\n```bash\r\n>pydocstyle --version\r\n3.0.0\r\n\r\n>pydocstyle D413_example.py\r\nD413_example.py:18 in public function `example_2`:\r\n        D413: Missing blank line after last section ('Attributes')\r\n```\r\n\r\nbut **4** with ver. 4.0.1 (or 4.0.0), even with the original PEP-257 example (from https://www.python.org/dev/peps/pep-0257/):\r\n```bash\r\n>pydocstyle --version\r\n4.0.1\r\n\r\n>pydocstyle D413_example.py\r\nD413_example.py:5 in public function `example_1`:\r\n        D413: Missing blank line after last section ('Arguments')\r\nD413_example.py:18 in public function `example_2`:\r\n        D413: Missing blank line after last section ('Attributes')\r\nD413_example.py:18 in public function `example_2`:\r\n        D413: Missing blank line after last section ('Attributes')\r\nD413_example.py:32 in public function `complex`:\r\n        D413: Missing blank line after last section ('Keyword Arguments')\r\n```\r\n\r\nActually, I think that **no** of these example docstrings should give an issue (at least in pep257 mode). The only way to get rid of this error is to put an empty line before the closing quotes, but this isn't a PEP 257 rule? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/400", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/400/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/400/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/400/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/400", "id": 481843285, "node_id": "MDU6SXNzdWU0ODE4NDMyODU=", "number": 400, "title": "Conflicting class docstring rules D203 and D211", "user": {"login": "mbdevpl", "id": 1270332, "node_id": "MDQ6VXNlcjEyNzAzMzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1270332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbdevpl", "html_url": "https://github.com/mbdevpl", "followers_url": "https://api.github.com/users/mbdevpl/followers", "following_url": "https://api.github.com/users/mbdevpl/following{/other_user}", "gists_url": "https://api.github.com/users/mbdevpl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbdevpl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbdevpl/subscriptions", "organizations_url": "https://api.github.com/users/mbdevpl/orgs", "repos_url": "https://api.github.com/users/mbdevpl/repos", "events_url": "https://api.github.com/users/mbdevpl/events{/privacy}", "received_events_url": "https://api.github.com/users/mbdevpl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-17T03:42:25Z", "updated_at": "2019-08-17T03:55:51Z", "closed_at": "2019-08-17T03:55:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, unserstanding this issue requires familiarity with PEP8, PEP257, as well as this commit (from year 2014): https://hg.python.org/peps/rev/9b715d8246db which changed PEP257 in a mysterious way.\r\n\r\nLet me share a curious occurence in a following code (for simplicity I skip surrounding code):\r\n```python3\r\n...\r\n\r\nclass Folder(t.List[Message]):\r\n\r\n    \"\"\"For storing messages.\r\n\r\n    Extends the list in order to store messages.\r\n    \"\"\"\r\n\r\n    def __init__(self, name: str, *args, **kwargs):\r\n        ...\r\n```\r\n\r\nAnd then, I run `pycodestyle` (skipping other results for simplicity):\r\n```\r\n$ pydocstyle maildaemon/folder.py\r\nmaildaemon/folder.py:13 in public class `Folder`:\r\n        D211: No blank lines allowed before class docstring (found 1)\r\n```\r\n\r\nAnd then, I delete the blank line that causes D211, only to get this (skipping other results for simplicity):\r\n```\r\n$ pydocstyle maildaemon/folder.py\r\nmaildaemon/folder.py:12 in public class `Folder`:\r\n        D203: 1 blank line required before class docstring (found 0)\r\n```\r\n\r\nTherefore rules D203 and D211 conflict with each other.\r\n\r\nIn any case, the official Python docs (at this point in time) don't clearly recommend one way or the other, but the comment in the commit mentioned above states \"Do not recommend a blank line before any docstrings.\" so the trend seems to be towards recommending no new-lines before class docstrings, which at least is consistent with \"no new-lines before function docstrings\" rule.\r\n\r\nTo sum up, I think one (or both) of the rules mentioned above need(s) to be removed from pydocstyle. From how I see the what's going on in the Python community, I'd recommend removing D203 and keeping D211, but have no strong opinion one way or the other.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/399", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/399/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/399/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/399/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/399", "id": 480798957, "node_id": "MDU6SXNzdWU0ODA3OTg5NTc=", "number": 399, "title": "Pypi version bump with latest bug fix", "user": {"login": "ljades", "id": 3341493, "node_id": "MDQ6VXNlcjMzNDE0OTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3341493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljades", "html_url": "https://github.com/ljades", "followers_url": "https://api.github.com/users/ljades/followers", "following_url": "https://api.github.com/users/ljades/following{/other_user}", "gists_url": "https://api.github.com/users/ljades/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljades/subscriptions", "organizations_url": "https://api.github.com/users/ljades/orgs", "repos_url": "https://api.github.com/users/ljades/repos", "events_url": "https://api.github.com/users/ljades/events{/privacy}", "received_events_url": "https://api.github.com/users/ljades/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-14T17:28:22Z", "updated_at": "2019-08-15T19:18:38Z", "closed_at": "2019-08-15T19:18:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "The nested function IndentationError bug fix has been extremely valuable for using the 4.x version of Pydocstyle in my project. When can we expect a pinned and published version on Pypi with the bug fix (I imagine it would probably be 4.0.1)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/397", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/397/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/397/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/397/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/397", "id": 479577236, "node_id": "MDU6SXNzdWU0Nzk1NzcyMzY=", "number": 397, "title": "Support convention=all (for pep257, numpy, google, etc, with no ignores)", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-08-12T10:40:33Z", "updated_at": "2019-08-15T09:13:02Z", "closed_at": "2019-08-15T05:23:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently there are three predefined conventions, ``pep257`` (default), ``numpy`` (for numpydoc standard), and ``google`` (for the Google Python coding style).\r\n\r\nThey are implemented as three ignore lists, see:\r\n\r\nhttps://github.com/PyCQA/pydocstyle/blob/4.0.0/src/pydocstyle/violations.py#L265\r\n\r\n```python\r\nconventions = AttrDict({\r\n    'pep257': all_errors - {'D203', 'D212', 'D213', 'D214', 'D215', 'D404',\r\n                            'D405', 'D406', 'D407', 'D408', 'D409', 'D410',\r\n                            'D411', 'D415', 'D416', 'D417'},\r\n    'numpy': all_errors - {'D107', 'D203', 'D212', 'D213', 'D402', 'D413',\r\n                           'D415', 'D416', 'D417'},\r\n    'google': all_errors - {'D203', 'D204', 'D213', 'D215', 'D400', 'D401',\r\n                            'D404', 'D406', 'D407', 'D408', 'D409'}\r\n})\r\n```\r\n\r\nI would like to be able to run the tool with *all* the checks active (and selectively ignore individual codes as needed - consider a large legacy code base with a mix of documentation style), and suggest adding a new convention ``all`` as a way for the user to request this:\r\n\r\n```\r\n    'all': all_Errors,\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/394", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/394/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/394/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/394/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/394", "id": 476848685, "node_id": "MDU6SXNzdWU0NzY4NDg2ODU=", "number": 394, "title": "D417 for missing arguments is google only", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-05T13:05:58Z", "updated_at": "2019-10-23T07:15:59Z", "closed_at": "2019-10-23T07:15:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In principle D417 (new in v4.0.0 c02884919e3f3708a1343443b52cb9b69434663c by @samj1912 as part of support for the Google coding style #275, further enhancement in #384 ) could be performed under the ``numpy`` convention, which has a well defined parameters section.\r\n\r\nIn fact, it could be applied to the default ``pep257`` convention with a simple substring check - are all the function arguments present anywhere in the docstring? This wouldn't catch everything but would be better than nothing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/388", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/388/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/388/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/388/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/388", "id": 474714122, "node_id": "MDU6SXNzdWU0NzQ3MTQxMjI=", "number": 388, "title": "Numpy convention breaks when a parameter is \"error\".", "user": {"login": "mrshannon", "id": 5324939, "node_id": "MDQ6VXNlcjUzMjQ5Mzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5324939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrshannon", "html_url": "https://github.com/mrshannon", "followers_url": "https://api.github.com/users/mrshannon/followers", "following_url": "https://api.github.com/users/mrshannon/following{/other_user}", "gists_url": "https://api.github.com/users/mrshannon/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrshannon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrshannon/subscriptions", "organizations_url": "https://api.github.com/users/mrshannon/orgs", "repos_url": "https://api.github.com/users/mrshannon/repos", "events_url": "https://api.github.com/users/mrshannon/events{/privacy}", "received_events_url": "https://api.github.com/users/mrshannon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "shacharoo", "id": 13560060, "node_id": "MDQ6VXNlcjEzNTYwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/13560060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacharoo", "html_url": "https://github.com/shacharoo", "followers_url": "https://api.github.com/users/shacharoo/followers", "following_url": "https://api.github.com/users/shacharoo/following{/other_user}", "gists_url": "https://api.github.com/users/shacharoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacharoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacharoo/subscriptions", "organizations_url": "https://api.github.com/users/shacharoo/orgs", "repos_url": "https://api.github.com/users/shacharoo/repos", "events_url": "https://api.github.com/users/shacharoo/events{/privacy}", "received_events_url": "https://api.github.com/users/shacharoo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shacharoo", "id": 13560060, "node_id": "MDQ6VXNlcjEzNTYwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/13560060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacharoo", "html_url": "https://github.com/shacharoo", "followers_url": "https://api.github.com/users/shacharoo/followers", "following_url": "https://api.github.com/users/shacharoo/following{/other_user}", "gists_url": "https://api.github.com/users/shacharoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacharoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacharoo/subscriptions", "organizations_url": "https://api.github.com/users/shacharoo/orgs", "repos_url": "https://api.github.com/users/shacharoo/repos", "events_url": "https://api.github.com/users/shacharoo/events{/privacy}", "received_events_url": "https://api.github.com/users/shacharoo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-07-30T17:40:15Z", "updated_at": "2019-10-24T16:51:51Z", "closed_at": "2019-10-24T16:51:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When a parameter is labeled `error`, pydocstyle checking breaks for the remainder of the docstring.\r\n\r\nExample\r\n-----------\r\n\r\n```.python\r\ndef do_stuff(error):\r\n    \"\"\"Do stuff with error.\r\n\r\n    Parameters\r\n    ----------\r\n    error\r\n        An error.\r\n\r\n    \"\"\"\r\n```\r\n\r\npydocstyle output\r\n----------------------\r\n\r\n```\r\npydocstyle_numpy.py:2 in public function `do_stuff`:\r\n        D410: Missing blank line after section ('Parameters')\r\npydocstyle_numpy.py:2 in public function `do_stuff`:\r\n        D414: Section has no content ('Parameters')\r\npydocstyle_numpy.py:2 in public function `do_stuff`:\r\n        D405: Section name should be properly capitalized ('Error', not 'error')\r\npydocstyle_numpy.py:2 in public function `do_stuff`:\r\n        D411: Missing blank line before section ('Error')\r\npydocstyle_numpy.py:2 in public function `do_stuff`:\r\n        D407: Missing dashed underline after section ('Error')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/387", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/387/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/387/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/387/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/387", "id": 474630068, "node_id": "MDU6SXNzdWU0NzQ2MzAwNjg=", "number": 387, "title": "Author name(s) should be ignored", "user": {"login": "sif", "id": 327998, "node_id": "MDQ6VXNlcjMyNzk5OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/327998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sif", "html_url": "https://github.com/sif", "followers_url": "https://api.github.com/users/sif/followers", "following_url": "https://api.github.com/users/sif/following{/other_user}", "gists_url": "https://api.github.com/users/sif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sif/subscriptions", "organizations_url": "https://api.github.com/users/sif/orgs", "repos_url": "https://api.github.com/users/sif/repos", "events_url": "https://api.github.com/users/sif/events{/privacy}", "received_events_url": "https://api.github.com/users/sif/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-30T14:46:49Z", "updated_at": "2019-07-30T20:19:39Z", "closed_at": "2019-07-30T20:19:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I've recently started using pydocstyle on all of my code and generally run into a single problem. I put my name on top of all of my code. It tells me that I should end my line with a period, not the last letter of my last name. \r\n\r\nI tried looking for a solution using the terms \"pydocstyle author name\" but couldn't find anything. Other than telling pydocstyle to ignore that line, is there anything else I can do? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/385", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/385/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/385/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/385/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/385", "id": 471258175, "node_id": "MDU6SXNzdWU0NzEyNTgxNzU=", "number": 385, "title": "No release on PyPI for 4.0", "user": {"login": "dopplershift", "id": 221526, "node_id": "MDQ6VXNlcjIyMTUyNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/221526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dopplershift", "html_url": "https://github.com/dopplershift", "followers_url": "https://api.github.com/users/dopplershift/followers", "following_url": "https://api.github.com/users/dopplershift/following{/other_user}", "gists_url": "https://api.github.com/users/dopplershift/gists{/gist_id}", "starred_url": "https://api.github.com/users/dopplershift/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dopplershift/subscriptions", "organizations_url": "https://api.github.com/users/dopplershift/orgs", "repos_url": "https://api.github.com/users/dopplershift/repos", "events_url": "https://api.github.com/users/dopplershift/events{/privacy}", "received_events_url": "https://api.github.com/users/dopplershift/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-22T18:54:42Z", "updated_at": "2019-08-23T12:28:52Z", "closed_at": "2019-08-23T12:28:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "There's no source release on PyPI for the 4.0 release:\r\n![image](https://user-images.githubusercontent.com/221526/61657228-b4768100-ac7f-11e9-84cd-60de9e7ef801.png)\r\nhttps://pypi.org/project/pydocstyle/#files\r\n\r\nWas this intentional? Previous releases included it, so I wanted to confirm.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/380", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/380/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/380/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/380/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/380", "id": 469333434, "node_id": "MDU6SXNzdWU0NjkzMzM0MzQ=", "number": 380, "title": "Error codes missing from ReadTheDocs as of 4.0.0", "user": {"login": "lordmauve", "id": 617224, "node_id": "MDQ6VXNlcjYxNzIyNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/617224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lordmauve", "html_url": "https://github.com/lordmauve", "followers_url": "https://api.github.com/users/lordmauve/followers", "following_url": "https://api.github.com/users/lordmauve/following{/other_user}", "gists_url": "https://api.github.com/users/lordmauve/gists{/gist_id}", "starred_url": "https://api.github.com/users/lordmauve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lordmauve/subscriptions", "organizations_url": "https://api.github.com/users/lordmauve/orgs", "repos_url": "https://api.github.com/users/lordmauve/repos", "events_url": "https://api.github.com/users/lordmauve/events{/privacy}", "received_events_url": "https://api.github.com/users/lordmauve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-07-17T16:51:03Z", "updated_at": "2019-08-15T09:46:54Z", "closed_at": "2019-08-15T05:44:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On ReadTheDocs, [the current error codes page](http://www.pydocstyle.org/en/4.0.0/error_codes.html) has a blank **Grouping** heading.\r\n\r\nFor the [3.0.0 release docs](http://www.pydocstyle.org/en/3.0.0/error_codes.html), this is where the table of error codes would be printed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/378", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/378/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/378/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/378/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/378", "id": 467653619, "node_id": "MDU6SXNzdWU0Njc2NTM2MTk=", "number": 378, "title": "ImportError: No module named 'typing'", "user": {"login": "myint", "id": 1235108, "node_id": "MDQ6VXNlcjEyMzUxMDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1235108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/myint", "html_url": "https://github.com/myint", "followers_url": "https://api.github.com/users/myint/followers", "following_url": "https://api.github.com/users/myint/following{/other_user}", "gists_url": "https://api.github.com/users/myint/gists{/gist_id}", "starred_url": "https://api.github.com/users/myint/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/myint/subscriptions", "organizations_url": "https://api.github.com/users/myint/orgs", "repos_url": "https://api.github.com/users/myint/repos", "events_url": "https://api.github.com/users/myint/events{/privacy}", "received_events_url": "https://api.github.com/users/myint/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-13T01:39:25Z", "updated_at": "2019-09-28T17:58:24Z", "closed_at": "2019-09-28T17:58:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Looks like #342 broke support for Python 3.4:\r\n\r\nhttps://travis-ci.org/myint/autoflake/jobs/557940762#L626-L640\r\n\r\n```\r\n$ pydocstyle autoflake.py setup.py\r\nTraceback (most recent call last):\r\n  File \"/home/travis/virtualenv/python3.4.6/bin/pydocstyle\", line 7, in <module>\r\n    from pydocstyle.cli import main\r\n  File \"/home/travis/virtualenv/python3.4.6/lib/python3.4/site-packages/pydocstyle/__init__.py\", line 1, in <module>\r\n    from .checker import check\r\n  File \"/home/travis/virtualenv/python3.4.6/lib/python3.4/site-packages/pydocstyle/checker.py\", line 11, in <module>\r\n    from . import violations\r\n  File \"/home/travis/virtualenv/python3.4.6/lib/python3.4/site-packages/pydocstyle/violations.py\", line 6, in <module>\r\n    from typing import Iterable, Optional, List, Callable, Any\r\nImportError: No module named 'typing'\r\nThe command \"pydocstyle autoflake.py setup.py\" exited with 1.\r\n```\r\n\r\nOn Python 3.4, `typing` should be added to:\r\n\r\nhttps://github.com/PyCQA/pydocstyle/blob/cc5a96b356e2f10e8c95f1ca719efa3380237671/setup.py#L9-L11\r\n\r\nNote that #344 added this `typing` dependency under `requirements/tests.txt`, but that won't get invoked by normal users that install `pydocstyle` via `pip`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/377", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/377/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/377/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/377", "id": 465963807, "node_id": "MDU6SXNzdWU0NjU5NjM4MDc=", "number": 377, "title": "Initiate imperative mood", "user": {"login": "Dreamsorcerer", "id": 2203121, "node_id": "MDQ6VXNlcjIyMDMxMjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2203121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dreamsorcerer", "html_url": "https://github.com/Dreamsorcerer", "followers_url": "https://api.github.com/users/Dreamsorcerer/followers", "following_url": "https://api.github.com/users/Dreamsorcerer/following{/other_user}", "gists_url": "https://api.github.com/users/Dreamsorcerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dreamsorcerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dreamsorcerer/subscriptions", "organizations_url": "https://api.github.com/users/Dreamsorcerer/orgs", "repos_url": "https://api.github.com/users/Dreamsorcerer/repos", "events_url": "https://api.github.com/users/Dreamsorcerer/events{/privacy}", "received_events_url": "https://api.github.com/users/Dreamsorcerer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-09T20:11:27Z", "updated_at": "2019-07-17T15:35:53Z", "closed_at": "2019-07-12T10:17:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting a D401 should be imperative for:\r\n`Initiate an a/b test.`\r\n\r\nUnless I'm confusing my grammar, that is already in the imperative mood. 'Initiates' would be incorrect.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/376", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/376/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/376/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/376/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/376", "id": 465682101, "node_id": "MDU6SXNzdWU0NjU2ODIxMDE=", "number": 376, "title": "False positive for D416 on function with Numpy convention in 4.0.0 version", "user": {"login": "roubaeli", "id": 5748167, "node_id": "MDQ6VXNlcjU3NDgxNjc=", "avatar_url": "https://avatars0.githubusercontent.com/u/5748167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roubaeli", "html_url": "https://github.com/roubaeli", "followers_url": "https://api.github.com/users/roubaeli/followers", "following_url": "https://api.github.com/users/roubaeli/following{/other_user}", "gists_url": "https://api.github.com/users/roubaeli/gists{/gist_id}", "starred_url": "https://api.github.com/users/roubaeli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roubaeli/subscriptions", "organizations_url": "https://api.github.com/users/roubaeli/orgs", "repos_url": "https://api.github.com/users/roubaeli/repos", "events_url": "https://api.github.com/users/roubaeli/events{/privacy}", "received_events_url": "https://api.github.com/users/roubaeli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-09T09:47:49Z", "updated_at": "2019-07-30T10:24:14Z", "closed_at": "2019-07-30T10:24:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Previously worked correctly, in new **4.0.0** version functions with **Numpy** style docstring fail with:\r\n`D416: Section name should end with a semicolon ('Parameters:', not 'Parameters')`\r\non a docstring like:\r\n```\r\n\"\"\"\r\nFunction description.\r\n\r\nParameters\r\n----------\r\nfirst_parameter\r\n    Description of the parameter.\r\n\"\"\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/375", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/375/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/375/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/375", "id": 465117253, "node_id": "MDU6SXNzdWU0NjUxMTcyNTM=", "number": 375, "title": "Issue on pydocstyle version 4.0.0", "user": {"login": "kkkothari", "id": 46557216, "node_id": "MDQ6VXNlcjQ2NTU3MjE2", "avatar_url": "https://avatars2.githubusercontent.com/u/46557216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kkkothari", "html_url": "https://github.com/kkkothari", "followers_url": "https://api.github.com/users/kkkothari/followers", "following_url": "https://api.github.com/users/kkkothari/following{/other_user}", "gists_url": "https://api.github.com/users/kkkothari/gists{/gist_id}", "starred_url": "https://api.github.com/users/kkkothari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kkkothari/subscriptions", "organizations_url": "https://api.github.com/users/kkkothari/orgs", "repos_url": "https://api.github.com/users/kkkothari/repos", "events_url": "https://api.github.com/users/kkkothari/events{/privacy}", "received_events_url": "https://api.github.com/users/kkkothari/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-08T08:17:05Z", "updated_at": "2020-08-11T09:41:00Z", "closed_at": "2019-07-11T08:58:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "\"flake8-docstrings\" failed during execution due to \"module 'pydocstyle' has no attribute 'tokenize_open'\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/372", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/372/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/372/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/372", "id": 461580987, "node_id": "MDU6SXNzdWU0NjE1ODA5ODc=", "number": 372, "title": "New PyPI Release, Publish", "user": {"login": "ljades", "id": 3341493, "node_id": "MDQ6VXNlcjMzNDE0OTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3341493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljades", "html_url": "https://github.com/ljades", "followers_url": "https://api.github.com/users/ljades/followers", "following_url": "https://api.github.com/users/ljades/following{/other_user}", "gists_url": "https://api.github.com/users/ljades/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljades/subscriptions", "organizations_url": "https://api.github.com/users/ljades/orgs", "repos_url": "https://api.github.com/users/ljades/repos", "events_url": "https://api.github.com/users/ljades/events{/privacy}", "received_events_url": "https://api.github.com/users/ljades/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-27T14:59:18Z", "updated_at": "2019-07-09T18:20:36Z", "closed_at": "2019-07-09T18:20:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "A lot of the updates that have been made to pydocstyle on this repo since the 3.0.0 release have been extremely valuable. Are there any plans for a new release on PyPI anytime soon with these features?\r\n\r\nIf need be my team can do a pip install by the git hash but we'd rather do it if possible by PyPI release.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/371", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/371/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/371/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/371/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/371", "id": 460254599, "node_id": "MDU6SXNzdWU0NjAyNTQ1OTk=", "number": 371, "title": "NameError: name 'sesssion_token' is not defined", "user": {"login": "JesusFernandez1986", "id": 49410289, "node_id": "MDQ6VXNlcjQ5NDEwMjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/49410289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JesusFernandez1986", "html_url": "https://github.com/JesusFernandez1986", "followers_url": "https://api.github.com/users/JesusFernandez1986/followers", "following_url": "https://api.github.com/users/JesusFernandez1986/following{/other_user}", "gists_url": "https://api.github.com/users/JesusFernandez1986/gists{/gist_id}", "starred_url": "https://api.github.com/users/JesusFernandez1986/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JesusFernandez1986/subscriptions", "organizations_url": "https://api.github.com/users/JesusFernandez1986/orgs", "repos_url": "https://api.github.com/users/JesusFernandez1986/repos", "events_url": "https://api.github.com/users/JesusFernandez1986/events{/privacy}", "received_events_url": "https://api.github.com/users/JesusFernandez1986/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-25T07:19:38Z", "updated_at": "2019-06-25T15:40:44Z", "closed_at": "2019-06-25T15:40:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hola buenas, soy nuevo en el mundo de la programacion, y practicando con las sesiones en flask, me da este error y no entiendo porque me dice que no esta definido cuando lo defino justo antes:\r\n\r\n```\r\n[@app.route('/', methods=[\"GET\", \"POST\"])\r\ndef index():\r\n    if request.method == \"GET\":\r\n        data = {}\r\n        session_token = request.cookies.get(\"session_token\")                        #guardamos el valor de la cookie session token en la variable session_token\r\n\r\n        if sesssion_token:\r\n            user = db.query(User).filter_by(session_token=session_token).first()  #si tenemos una session token, miramos y comparamos en la base de datos\r\n        else:                                                                       #si no creamos una instancia user vacia\r\n            user = None\r\n\r\n        data.update({'user': user})\r\n        return render_template(\"index.html\", data=data)](url)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/370", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/370/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/370/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/370/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/370", "id": 456638933, "node_id": "MDU6SXNzdWU0NTY2Mzg5MzM=", "number": 370, "title": "IndentationError: unexpected indent when docstring is in nested function.", "user": {"login": "pinkavaj", "id": 692166, "node_id": "MDQ6VXNlcjY5MjE2Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/692166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pinkavaj", "html_url": "https://github.com/pinkavaj", "followers_url": "https://api.github.com/users/pinkavaj/followers", "following_url": "https://api.github.com/users/pinkavaj/following{/other_user}", "gists_url": "https://api.github.com/users/pinkavaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pinkavaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pinkavaj/subscriptions", "organizations_url": "https://api.github.com/users/pinkavaj/orgs", "repos_url": "https://api.github.com/users/pinkavaj/repos", "events_url": "https://api.github.com/users/pinkavaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pinkavaj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-16T12:58:49Z", "updated_at": "2019-08-19T07:48:08Z", "closed_at": "2019-08-19T07:48:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Exception is raised for latest (6de6d93) pydocstyle when nested function contains docstring with arguments section.\r\n\r\n## How to reproduce:\r\n\r\nWrite python file `sample.py`:\r\n```\r\ndef foo():\r\n    def bar(a):\r\n        \"\"\"A docstring\r\n\r\n        Args:\r\n            a : An argument.\r\n        \"\"\"\r\n        pass\r\n```\r\n\r\nRun:  `pydocstyle sample.py`\r\n\r\n## Result:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/pinky/.local/bin/pydocstyle\", line 11, in <module>\r\n    load_entry_point('pydocstyle', 'console_scripts', 'pydocstyle')()\r\n  File \"/home/pinky/work/pydocstyle/src/pydocstyle/cli.py\", line 68, in main\r\n    sys.exit(run_pydocstyle())\r\n  File \"/home/pinky/work/pydocstyle/src/pydocstyle/cli.py\", line 45, in run_pydocstyle\r\n    ignore_decorators=ignore_decorators))\r\n  File \"/home/pinky/work/pydocstyle/src/pydocstyle/checker.py\", line 883, in check\r\n    ignore_decorators):\r\n  File \"/home/pinky/work/pydocstyle/src/pydocstyle/checker.py\", line 124, in check_source\r\n    for error in errors:\r\n  File \"/home/pinky/work/pydocstyle/src/pydocstyle/checker.py\", line 831, in check_docstring_sections\r\n    yield from self._check_google_sections(lines, definition, docstring)\r\n  File \"/home/pinky/work/pydocstyle/src/pydocstyle/checker.py\", line 819, in _check_google_sections\r\n    yield from self._check_google_section(docstring, definition, ctx)\r\n  File \"/home/pinky/work/pydocstyle/src/pydocstyle/checker.py\", line 714, in _check_google_section\r\n    yield from cls._check_args_section(docstring, definition, context)\r\n  File \"/home/pinky/work/pydocstyle/src/pydocstyle/checker.py\", line 681, in _check_args_section\r\n    function_pos_args = get_function_args(definition.source)\r\n  File \"/home/pinky/work/pydocstyle/src/pydocstyle/checker.py\", line 916, in get_function_args\r\n    function_arg_node = ast.parse(function_string).body[0].args\r\n  File \"/usr/lib/python3.7/ast.py\", line 35, in parse\r\n    return compile(source, filename, mode, PyCF_ONLY_AST)\r\n  File \"<unknown>\", line 1\r\n    def bar(a):\r\n    ^\r\nIndentationError: unexpected indent\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/367", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/367/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/367/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/367", "id": 453174393, "node_id": "MDU6SXNzdWU0NTMxNzQzOTM=", "number": 367, "title": "PEP498 f-string leads to parse error", "user": {"login": "nritsche", "id": 2536635, "node_id": "MDQ6VXNlcjI1MzY2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2536635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nritsche", "html_url": "https://github.com/nritsche", "followers_url": "https://api.github.com/users/nritsche/followers", "following_url": "https://api.github.com/users/nritsche/following{/other_user}", "gists_url": "https://api.github.com/users/nritsche/gists{/gist_id}", "starred_url": "https://api.github.com/users/nritsche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nritsche/subscriptions", "organizations_url": "https://api.github.com/users/nritsche/orgs", "repos_url": "https://api.github.com/users/nritsche/repos", "events_url": "https://api.github.com/users/nritsche/events{/privacy}", "received_events_url": "https://api.github.com/users/nritsche/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-06T18:23:41Z", "updated_at": "2019-06-06T18:26:35Z", "closed_at": "2019-06-06T18:26:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "A file using string formatting as described in https://www.python.org/dev/peps/pep-0498/\r\n```\r\na = 1\r\ns = f\"a is {a}\"\r\nprint(s)\r\n```\r\nbreaks pydocstyle:\r\n```\r\npydocstyle -v ./test.py \r\nChecking file ./test.py.\r\nWARNING: Error in file ./test.py: Cannot parse file.\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/366", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/366/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/366/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/366", "id": 452571378, "node_id": "MDU6SXNzdWU0NTI1NzEzNzg=", "number": 366, "title": "Comment after __all__ causes pydocstyle to freeze", "user": {"login": "ig248", "id": 25141514, "node_id": "MDQ6VXNlcjI1MTQxNTE0", "avatar_url": "https://avatars3.githubusercontent.com/u/25141514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ig248", "html_url": "https://github.com/ig248", "followers_url": "https://api.github.com/users/ig248/followers", "following_url": "https://api.github.com/users/ig248/following{/other_user}", "gists_url": "https://api.github.com/users/ig248/gists{/gist_id}", "starred_url": "https://api.github.com/users/ig248/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ig248/subscriptions", "organizations_url": "https://api.github.com/users/ig248/orgs", "repos_url": "https://api.github.com/users/ig248/repos", "events_url": "https://api.github.com/users/ig248/events{/privacy}", "received_events_url": "https://api.github.com/users/ig248/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-05T15:35:17Z", "updated_at": "2019-08-02T18:20:43Z", "closed_at": "2019-08-02T18:20:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Including a comment at the end of a `__all__ = ...` line causes `pydocstyle` to freeze.\r\n\r\n## Steps to reproduce\r\n```\r\npip install --upgrade pydocstyle\r\nmkdir tmp/\r\ncd tmp/\r\necho \"__all__ = [] #\" > test.py\r\npydocstyle . -esdv\r\n```\r\n\r\n## Output\r\n```\r\n$ pydocstyle . -esdv\r\nstarting in debug mode.\r\nNo config file specified, discovering.\r\nNo config file specified, discovering.\r\nNo config file specified, discovering.\r\nNo config file specified, discovering.\r\nNo config file specified, discovering.\r\nNo config file specified, discovering.\r\nChecking file ./test.py.\r\nparsing module.\r\nparsing docstring, token is tk.NAME (__all__)\r\nparsing definition list, current token is tk.NAME (__all__)\r\ngot_newline: True\r\n\r\n```\r\n## Environment\r\n- Ubuntu 18.04\r\n- python 3.6.4\r\n- pydocstyle 3.0.0\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/364", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/364/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/364/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/364/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/364", "id": 448592386, "node_id": "MDU6SXNzdWU0NDg1OTIzODY=", "number": 364, "title": "D301 should not notify line-continuations", "user": {"login": "timhoffm", "id": 2836374, "node_id": "MDQ6VXNlcjI4MzYzNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2836374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timhoffm", "html_url": "https://github.com/timhoffm", "followers_url": "https://api.github.com/users/timhoffm/followers", "following_url": "https://api.github.com/users/timhoffm/following{/other_user}", "gists_url": "https://api.github.com/users/timhoffm/gists{/gist_id}", "starred_url": "https://api.github.com/users/timhoffm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timhoffm/subscriptions", "organizations_url": "https://api.github.com/users/timhoffm/orgs", "repos_url": "https://api.github.com/users/timhoffm/repos", "events_url": "https://api.github.com/users/timhoffm/events{/privacy}", "received_events_url": "https://api.github.com/users/timhoffm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-26T18:15:14Z", "updated_at": "2019-10-21T16:12:50Z", "closed_at": "2019-10-21T16:12:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There are cases in which one needs to use a line continuation in a multiline-docstring if one want to set a strict limit on line length. E.g. the `variable : type` parameter in numpydoc must be on a single line:\r\n\r\n~~~\r\n    Returns\r\n    -------\r\n    axes : an `.axes.SubplotBase` subclass of `~.axes.Axes` (or a subclass \\\r\n    of `~.axes.Axes`)\r\n~~~\r\n\r\nThese cases should not be reported as needing a raw docstring.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/362", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/362/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/362/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/362/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/362", "id": 439170462, "node_id": "MDU6SXNzdWU0MzkxNzA0NjI=", "number": 362, "title": "A D105 is raised for a magic method despite ignore = D105", "user": {"login": "AlexArcPy", "id": 7373268, "node_id": "MDQ6VXNlcjczNzMyNjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7373268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexArcPy", "html_url": "https://github.com/AlexArcPy", "followers_url": "https://api.github.com/users/AlexArcPy/followers", "following_url": "https://api.github.com/users/AlexArcPy/following{/other_user}", "gists_url": "https://api.github.com/users/AlexArcPy/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexArcPy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexArcPy/subscriptions", "organizations_url": "https://api.github.com/users/AlexArcPy/orgs", "repos_url": "https://api.github.com/users/AlexArcPy/repos", "events_url": "https://api.github.com/users/AlexArcPy/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexArcPy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-01T13:49:13Z", "updated_at": "2020-05-20T18:42:34Z", "closed_at": "2020-05-20T18:42:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having this piece of code in `bla.py`:\r\n\r\n```python\r\nclass Foo():\r\n    def __call__(self):\r\n        pass\r\n```\r\n\r\nand `flake8`:\r\n\r\n\r\n> flake8 --version\r\n> 3.7.7 (flake8-comprehensions: 1.4.1, flake8-docstrings: 1.3.0, pydocstyle: 3.0.0, flake8-print: 3.1.0, flake8-string-format: 0.2.3, flake8_builtins: 1.4.1, flake8_commas: 2.0.0, logging-format: 0.6.0, mccabe: 0.6.1, naming: 0.8.2, pycodestyle: 2.5.0, pyflakes: 2.1.0) CPython 2.7.15 on Windows\r\n> \r\n\r\nWill raise \r\n\r\n```\r\n.\\bla.py:2:1: D102 Missing docstring in public method\r\n```\r\n\r\nDespite having in `setup.cfg`\r\n\r\n```\r\n[flake8]\r\nignore = D105,D100,D101,W292\r\n```\r\n\r\nI assume you don't consider the `__call__` to be a magic method\r\n\r\nSo, `D105 | Missing docstring in magic method` won't be applying to `__call__`. \r\n\r\n1. Do you think it would be fair to include it into the magic methods list?\r\n2. If not, it could perhaps be handy to have a separate rule to ignore missing docstrings in dunder methods?\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/361", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/361/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/361/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/361/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/361", "id": 438475755, "node_id": "MDU6SXNzdWU0Mzg0NzU3NTU=", "number": 361, "title": "Allow blank lines after multi-line function docstrings", "user": {"login": "anntzer", "id": 1322974, "node_id": "MDQ6VXNlcjEzMjI5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1322974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anntzer", "html_url": "https://github.com/anntzer", "followers_url": "https://api.github.com/users/anntzer/followers", "following_url": "https://api.github.com/users/anntzer/following{/other_user}", "gists_url": "https://api.github.com/users/anntzer/gists{/gist_id}", "starred_url": "https://api.github.com/users/anntzer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anntzer/subscriptions", "organizations_url": "https://api.github.com/users/anntzer/orgs", "repos_url": "https://api.github.com/users/anntzer/repos", "events_url": "https://api.github.com/users/anntzer/events{/privacy}", "received_events_url": "https://api.github.com/users/anntzer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-29T19:42:24Z", "updated_at": "2019-12-13T19:47:39Z", "closed_at": "2019-12-13T19:34:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, pydocstyle warns by default when a function docstring is followed by a blank line (D202).  However, a careful reading of PEP257 indicates that this rule should only apply to one-line docstrings, not to multiline docstrings: the sole sentence regarding this, \"There's no blank line either before or after the docstring.\", occurs in the \"One-line docstrings\" section, immediately after the \"The closing quotes are on the same line as the opening quotes. This looks better for one-liners.\" sentence which clearly only applies to one-line docstrings.  Allowing an empty line after the function docstring also makes sense if e.g. the function body contains empty lines: in something like\r\n```\r\ndef func():\r\n    \"\"\"\r\n    Some docstring.\r\n\r\n    Some more stuff.\r\n    \"\"\"\r\n    do_this()\r\n    do_that()\r\n\r\n    do_this_again()\r\n    do_that_again()\r\n```\r\nif there's no empty line after the docstring, I personally feel the docstring \"binds\" too closely to the first part of the body at the expense of the second part.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/360", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/360/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/360/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/360/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/360", "id": 437393356, "node_id": "MDU6SXNzdWU0MzczOTMzNTY=", "number": 360, "title": "Revive or enable way to report D401 reason", "user": {"login": "svenevs", "id": 5871461, "node_id": "MDQ6VXNlcjU4NzE0NjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5871461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svenevs", "html_url": "https://github.com/svenevs", "followers_url": "https://api.github.com/users/svenevs/followers", "following_url": "https://api.github.com/users/svenevs/following{/other_user}", "gists_url": "https://api.github.com/users/svenevs/gists{/gist_id}", "starred_url": "https://api.github.com/users/svenevs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svenevs/subscriptions", "organizations_url": "https://api.github.com/users/svenevs/orgs", "repos_url": "https://api.github.com/users/svenevs/repos", "events_url": "https://api.github.com/users/svenevs/events{/privacy}", "received_events_url": "https://api.github.com/users/svenevs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-25T20:54:33Z", "updated_at": "2019-07-17T11:49:47Z", "closed_at": "2019-07-17T11:49:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I like D401, it makes me create better one-liners.  Sometimes it would be really helpful to know what exactly is triggering the warning.\r\n\r\nIf you search around the issues here you will find #68 and then #235 which will let you know you should reference the data files added, but this doesn't always help (or maybe it is just confusing to me).\r\n\r\n```py\r\ndef set_env(**kwargs: str):\r\n    \"\"\"\r\n    Function decorator to set environment variables.\r\n    \"\"\"\r\n    pass\r\n```\r\n\r\nIt can be reversed, e.g. `Set environment variables function decorator.`  So is it mad about the `to`?  You can make a not so great `To set environment variables function decorator.` though.  It's commented out in the blacklist for what I thought is this use case.\r\n\r\nThe idea would be maybe to:\r\n\r\n1. Keep the current generic \"try rephrasing\" message by default.\r\n2. Enable some way to ask for more info.  E.g., `--verbose` mode or some kind of `setup.cfg` setting or something.  I don't know how this would be achieved though.\r\n\r\nGiven that I don't think anybody intends to \"fully implement\" D401 (it's a _very_ hard problem...), there's a bit of fuzz room.  This fuzz room can lead to a lot of time spent trying to reorder things for people like me who aren't great with grammar xD  If I knew what was triggering D401, I could know which part of the sentence needs to be rephrased.\r\n\r\nI'm using this indirectly through `flake8-docstrings`, but I think this repo is the right place to discuss.  I'm happy to implement if desired / with a little guidance on how to approach it :slightly_smiling_face:\r\n\r\n**Update**: it seems that `function` is the problem child\r\n\r\nhttps://github.com/PyCQA/pydocstyle/blob/2549847f9efad225789f931e83dfe782418ca13e/src/pydocstyle/data/imperatives_blacklist.txt#L49\r\n\r\nI would still like to implement a way to report back why the D401 exists.  Maybe `function` should be moved to its friends at the bottom that are marked OK (for situations like this)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/354", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/354/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/354/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/354/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/354", "id": 420459456, "node_id": "MDU6SXNzdWU0MjA0NTk0NTY=", "number": 354, "title": "How to exclude functions matching a pattern from D100 error?", "user": {"login": "AlexArcPy", "id": 7373268, "node_id": "MDQ6VXNlcjczNzMyNjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7373268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexArcPy", "html_url": "https://github.com/AlexArcPy", "followers_url": "https://api.github.com/users/AlexArcPy/followers", "following_url": "https://api.github.com/users/AlexArcPy/following{/other_user}", "gists_url": "https://api.github.com/users/AlexArcPy/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexArcPy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexArcPy/subscriptions", "organizations_url": "https://api.github.com/users/AlexArcPy/orgs", "repos_url": "https://api.github.com/users/AlexArcPy/repos", "events_url": "https://api.github.com/users/AlexArcPy/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexArcPy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-13T11:53:37Z", "updated_at": "2019-03-14T10:00:46Z", "closed_at": "2019-03-14T09:58:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a few functions on a legacy code base named `call` that do not have a docstring. I would like to be able to specify that I do not want to check for docstring presence for the functions named `call`. It would be helpful to have an extra configuration with the whitelist of such functions. Adding `# noqa` comment is not an option. \r\n\r\nIs it something already supported? If not, I would love to see this feature implemented.\r\nIs it something that I could implement relatively easy in the source code for submitting a PR?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/352", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/352/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/352/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/352", "id": 410295954, "node_id": "MDU6SXNzdWU0MTAyOTU5NTQ=", "number": 352, "title": "__all__ is parsed incorrectly", "user": {"login": "webknjaz", "id": 578543, "node_id": "MDQ6VXNlcjU3ODU0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/578543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/webknjaz", "html_url": "https://github.com/webknjaz", "followers_url": "https://api.github.com/users/webknjaz/followers", "following_url": "https://api.github.com/users/webknjaz/following{/other_user}", "gists_url": "https://api.github.com/users/webknjaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/webknjaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/webknjaz/subscriptions", "organizations_url": "https://api.github.com/users/webknjaz/orgs", "repos_url": "https://api.github.com/users/webknjaz/repos", "events_url": "https://api.github.com/users/webknjaz/events{/privacy}", "received_events_url": "https://api.github.com/users/webknjaz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 10650658, "node_id": "MDU6TGFiZWwxMDY1MDY1OA==", "url": "https://api.github.com/repos/PyCQA/pydocstyle/labels/Bugfix", "name": "Bugfix", "color": "8e0830", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-14T13:19:35Z", "updated_at": "2019-03-24T17:36:37Z", "closed_at": "2019-03-24T17:36:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Causes warning:\r\n```python\r\n__all__ = 'exportable1', 'exportable2'\r\n```\r\n\r\nWorks well:\r\n```python\r\n__all__ = ('exportable1', 'exportable2')\r\n```\r\n\r\n\r\nBut both use valid tuple syntax so in the first case, `pydocstyle` is not supposed to yell at user.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/351", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/351/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/351/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/351/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/351", "id": 409587862, "node_id": "MDU6SXNzdWU0MDk1ODc4NjI=", "number": 351, "title": "Include tests in source tarball", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-13T02:00:56Z", "updated_at": "2019-02-13T13:31:45Z", "closed_at": "2019-02-13T13:31:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The source tarballs should include the tests, so that packaging systems can use the pypi release tarballs to run the tests to validate the package in the built environment.\r\n\r\nAlso note that README.rst uses dos EOL.\r\n\r\nc.f. https://build.opensuse.org/request/show/673404", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/350", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/350/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/350/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/350/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/350", "id": 406795262, "node_id": "MDU6SXNzdWU0MDY3OTUyNjI=", "number": 350, "title": "pydocstyle can't parse a function when *args is specified before argument with default value", "user": {"login": "oerp-odoo", "id": 7812986, "node_id": "MDQ6VXNlcjc4MTI5ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7812986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oerp-odoo", "html_url": "https://github.com/oerp-odoo", "followers_url": "https://api.github.com/users/oerp-odoo/followers", "following_url": "https://api.github.com/users/oerp-odoo/following{/other_user}", "gists_url": "https://api.github.com/users/oerp-odoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/oerp-odoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oerp-odoo/subscriptions", "organizations_url": "https://api.github.com/users/oerp-odoo/orgs", "repos_url": "https://api.github.com/users/oerp-odoo/repos", "events_url": "https://api.github.com/users/oerp-odoo/events{/privacy}", "received_events_url": "https://api.github.com/users/oerp-odoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-05T14:00:01Z", "updated_at": "2019-02-06T12:31:49Z", "closed_at": "2019-02-06T06:56:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "For some reason pydcostyle fails, when trying to parse file that has this function:\r\n\r\n```python\r\ndef _func(a, b, *args, c=5, **kwargs):\r\n    pass\r\n```\r\n\r\nAnd problem is with `*args` specified before `c=5`. If I remove `*args` or `c=5` (or swap it in places), then it parses the file.\r\n\r\nUsing pydocstyle 3.0.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/346", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/346/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/346/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/346/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/346", "id": 382105080, "node_id": "MDU6SXNzdWUzODIxMDUwODA=", "number": 346, "title": "Official pre-commit hook", "user": {"login": "1oglop1", "id": 7480694, "node_id": "MDQ6VXNlcjc0ODA2OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7480694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1oglop1", "html_url": "https://github.com/1oglop1", "followers_url": "https://api.github.com/users/1oglop1/followers", "following_url": "https://api.github.com/users/1oglop1/following{/other_user}", "gists_url": "https://api.github.com/users/1oglop1/gists{/gist_id}", "starred_url": "https://api.github.com/users/1oglop1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1oglop1/subscriptions", "organizations_url": "https://api.github.com/users/1oglop1/orgs", "repos_url": "https://api.github.com/users/1oglop1/repos", "events_url": "https://api.github.com/users/1oglop1/events{/privacy}", "received_events_url": "https://api.github.com/users/1oglop1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-19T08:30:28Z", "updated_at": "2019-01-11T17:07:29Z", "closed_at": "2019-01-11T17:07:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, I've been using `pre-commit` for a long time with this hook: https://github.com/MSchuwalow/pre-commit-mirrors-pydocstyle\r\nThen I found out it's not maintained and hook version does not follow the `pydocstyle`\r\n\r\nWhat do you think about official pre-commit hook associated with this repository?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/345", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/345/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/345/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/345/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/345", "id": 380583808, "node_id": "MDU6SXNzdWUzODA1ODM4MDg=", "number": 345, "title": "FutureWarning: Possible nested set at position 1", "user": {"login": "vigo", "id": 82952, "node_id": "MDQ6VXNlcjgyOTUy", "avatar_url": "https://avatars3.githubusercontent.com/u/82952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vigo", "html_url": "https://github.com/vigo", "followers_url": "https://api.github.com/users/vigo/followers", "following_url": "https://api.github.com/users/vigo/following{/other_user}", "gists_url": "https://api.github.com/users/vigo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vigo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vigo/subscriptions", "organizations_url": "https://api.github.com/users/vigo/orgs", "repos_url": "https://api.github.com/users/vigo/repos", "events_url": "https://api.github.com/users/vigo/events{/privacy}", "received_events_url": "https://api.github.com/users/vigo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-14T08:21:16Z", "updated_at": "2020-03-10T14:36:15Z", "closed_at": "2018-11-14T09:40:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have this warning:\r\n\r\n    ...../python3.7/site-packages/pep8.py:110: FutureWarning: Possible nested set at position 1\r\n    EXTRANEOUS_WHITESPACE_REGEX = re.compile(r'[[({] | []}),;:]')\r\n\r\n- Python 3.7.0\r\n- flake8 version 3.6.0 (flake8-blind-except: 0.1.1, flake8-docstrings: 1.3.0, pydocstyle: 3.0.0, flake8_builtins: 1.4.1, flake8_commas: 2.0.0, flake8_quotes: 1.0.0, import-order: 0.18, mccabe: 0.6.1, naming: 0.7.0, pycodestyle: 2.4.0, pyflakes: 2.0.0) CPython 3.7.0 on Darwin\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/330", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/330/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/330/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/330/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/330", "id": 362192443, "node_id": "MDU6SXNzdWUzNjIxOTI0NDM=", "number": 330, "title": "Google style docstring encofcement", "user": {"login": "dickreuter", "id": 1256318, "node_id": "MDQ6VXNlcjEyNTYzMTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1256318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dickreuter", "html_url": "https://github.com/dickreuter", "followers_url": "https://api.github.com/users/dickreuter/followers", "following_url": "https://api.github.com/users/dickreuter/following{/other_user}", "gists_url": "https://api.github.com/users/dickreuter/gists{/gist_id}", "starred_url": "https://api.github.com/users/dickreuter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dickreuter/subscriptions", "organizations_url": "https://api.github.com/users/dickreuter/orgs", "repos_url": "https://api.github.com/users/dickreuter/repos", "events_url": "https://api.github.com/users/dickreuter/events{/privacy}", "received_events_url": "https://api.github.com/users/dickreuter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-20T13:39:11Z", "updated_at": "2018-09-20T13:43:41Z", "closed_at": "2018-09-20T13:43:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to enforce google style docstring with all input arguments listed correctly?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/323", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/323/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/323/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/323", "id": 334913981, "node_id": "MDU6SXNzdWUzMzQ5MTM5ODE=", "number": 323, "title": "Publicity and privacy derived from modules seems wrong", "user": {"login": "willfrey", "id": 13784361, "node_id": "MDQ6VXNlcjEzNzg0MzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/13784361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willfrey", "html_url": "https://github.com/willfrey", "followers_url": "https://api.github.com/users/willfrey/followers", "following_url": "https://api.github.com/users/willfrey/following{/other_user}", "gists_url": "https://api.github.com/users/willfrey/gists{/gist_id}", "starred_url": "https://api.github.com/users/willfrey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willfrey/subscriptions", "organizations_url": "https://api.github.com/users/willfrey/orgs", "repos_url": "https://api.github.com/users/willfrey/repos", "events_url": "https://api.github.com/users/willfrey/events{/privacy}", "received_events_url": "https://api.github.com/users/willfrey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-06-22T15:07:56Z", "updated_at": "2019-12-06T18:04:09Z", "closed_at": "2019-12-06T18:04:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Based on the current implementation, the module `_private.py` here is considered public\r\n\r\n```\r\npublicpackage\r\n\u251c\u2500\u2500 __init__.py\r\n\u251c\u2500\u2500 _private.py  # D100 for no docstring\r\n\u2514\u2500\u2500 public.py\r\n```\r\n\r\nsince `publicpackage` is considered public. With the current definition of a private module, it is impossible to have them under any public top-level package namespace. Should this be the case, though?\r\n\r\nFurthermore, let's consider a single private module `_module.py` with the contents\r\n\r\n```python\r\n# _module.py\r\ndef not_public():  # I get a D103 error.\r\n    pass\r\n```\r\n\r\nThe function `not_public` should not require a docstring because its only parent is private; however, `pydocstyle _module.py` would still yield a `D103` error.\r\n\r\nI will note that I can get around this by defining `__all__` to be empty, which is more explicit and probably a good practice even inside of a private module. That is, I can change `_module.py` to contain\r\n\r\n```python\r\n# _module.py\r\n__all__ = []  # Export nothing.\r\n\r\ndef not_public():  # No more D103!\r\n    passs\r\n```\r\n\r\nand I won't get the `D103` error anymore. That being said, this still isn't the behavior outlined [in the documentation](https://github.com/PyCQA/pydocstyle/blob/master/docs/snippets/publicity.rst).\r\n\r\nIt'd be nice to not get yelled at by `pydocstyle` while I'm working on an idea inside of a private submodule of my public package!\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/322", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/322/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/322/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/322/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/322", "id": 330976361, "node_id": "MDU6SXNzdWUzMzA5NzYzNjE=", "number": 322, "title": "pydocstyle should not check setup.py", "user": {"login": "nbraud", "id": 1155801, "node_id": "MDQ6VXNlcjExNTU4MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1155801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbraud", "html_url": "https://github.com/nbraud", "followers_url": "https://api.github.com/users/nbraud/followers", "following_url": "https://api.github.com/users/nbraud/following{/other_user}", "gists_url": "https://api.github.com/users/nbraud/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbraud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbraud/subscriptions", "organizations_url": "https://api.github.com/users/nbraud/orgs", "repos_url": "https://api.github.com/users/nbraud/repos", "events_url": "https://api.github.com/users/nbraud/events{/privacy}", "received_events_url": "https://api.github.com/users/nbraud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-10T15:08:50Z", "updated_at": "2018-10-14T08:06:10Z", "closed_at": "2018-10-14T08:06:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "pydocstyle, in its default configuration, complains about the `setup.py` file missing a module-level docstring:\r\n```\r\n$ tox\r\nGLOB sdist-make: /home/nicoo/devel/py/emanate/setup.py\r\ndocstyle inst-nodeps: /home/nicoo/devel/py/emanate/.tox/dist/emanate-2.0.0.zip\r\ndocstyle installed: emanate==2.0.0,pkg-resources==0.0.0,pydocstyle==2.1.1,six==1.11.0,snowballstemmer==1.2.1\r\ndocstyle runtests: PYTHONHASHSEED='3374526676'\r\ndocstyle runtests: commands[0] | pydocstyle\r\n./setup.py:1 at module level:\r\n        D100: Missing docstring in public module\r\n[...]\r\n```\r\n\r\nThe tox.ini file didn't contain anything special:\r\n```\r\n[testenv:docstyle]\r\ndeps = pydocstyle\r\ncommands = pydocstyle\r\n```\r\n\r\nI worked around the default behaviour by specifying a single subdirectory to check, but pydocstyle probably shouldn't check setup.py by default.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/321", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/321/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/321/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/321/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/321", "id": 330663367, "node_id": "MDU6SXNzdWUzMzA2NjMzNjc=", "number": 321, "title": "Exception in case file lacks newline at end of file", "user": {"login": "languitar", "id": 1336287, "node_id": "MDQ6VXNlcjEzMzYyODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1336287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/languitar", "html_url": "https://github.com/languitar", "followers_url": "https://api.github.com/users/languitar/followers", "following_url": "https://api.github.com/users/languitar/following{/other_user}", "gists_url": "https://api.github.com/users/languitar/gists{/gist_id}", "starred_url": "https://api.github.com/users/languitar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/languitar/subscriptions", "organizations_url": "https://api.github.com/users/languitar/orgs", "repos_url": "https://api.github.com/users/languitar/repos", "events_url": "https://api.github.com/users/languitar/events{/privacy}", "received_events_url": "https://api.github.com/users/languitar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-08T13:42:28Z", "updated_at": "2018-10-14T09:11:29Z", "closed_at": "2018-10-14T09:11:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Attached is a file that makes pydocstyle crash because it lacks a trailing newline.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/languitar/src/autosuspend/.tox/check/bin/pydocstyle\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/languitar/src/autosuspend/.tox/check/lib/python3.6/site-packages/pydocstyle/cli.py\", line 68, in main\r\n    sys.exit(run_pydocstyle())\r\n  File \"/home/languitar/src/autosuspend/.tox/check/lib/python3.6/site-packages/pydocstyle/cli.py\", line 45, in run_pydocstyle\r\n    ignore_decorators=ignore_decorators))\r\n  File \"/home/languitar/src/autosuspend/.tox/check/lib/python3.6/site-packages/pydocstyle/checker.py\", line 703, in check\r\n    ignore_decorators):\r\n  File \"/home/languitar/src/autosuspend/.tox/check/lib/python3.6/site-packages/pydocstyle/checker.py\", line 64, in check_source\r\n    module = parse(StringIO(source), filename)\r\n  File \"/home/languitar/src/autosuspend/.tox/check/lib/python3.6/site-packages/pydocstyle/parser.py\", line 305, in __call__\r\n    return self.parse(*args, **kwargs)\r\n  File \"/home/languitar/src/autosuspend/.tox/check/lib/python3.6/site-packages/pydocstyle/parser.py\", line 300, in parse\r\n    return self.parse_module()\r\n  File \"/home/languitar/src/autosuspend/.tox/check/lib/python3.6/site-packages/pydocstyle/parser.py\", line 451, in parse_module\r\n    children = list(self.parse_definitions(Module, all=True))\r\n  File \"/home/languitar/src/autosuspend/.tox/check/lib/python3.6/site-packages/pydocstyle/parser.py\", line 401, in parse_definitions\r\n    yield self.parse_definition(class_._nest(self.current.value))\r\n  File \"/home/languitar/src/autosuspend/.tox/check/lib/python3.6/site-packages/pydocstyle/parser.py\", line 513, in parse_definition\r\n    class_.__name__, name, self.current.kind,\r\nAttributeError: 'NoneType' object has no attribute 'kind'\r\n```\r\n[test.py.txt](https://github.com/PyCQA/pydocstyle/files/2084570/test.py.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/315", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/315/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/315/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/315/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/315", "id": 329754690, "node_id": "MDU6SXNzdWUzMjk3NTQ2OTA=", "number": 315, "title": "Drop support for python3.3 and fix broken build", "user": {"login": "shacharoo", "id": 13560060, "node_id": "MDQ6VXNlcjEzNTYwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/13560060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacharoo", "html_url": "https://github.com/shacharoo", "followers_url": "https://api.github.com/users/shacharoo/followers", "following_url": "https://api.github.com/users/shacharoo/following{/other_user}", "gists_url": "https://api.github.com/users/shacharoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacharoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacharoo/subscriptions", "organizations_url": "https://api.github.com/users/shacharoo/orgs", "repos_url": "https://api.github.com/users/shacharoo/repos", "events_url": "https://api.github.com/users/shacharoo/events{/privacy}", "received_events_url": "https://api.github.com/users/shacharoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-06T07:59:51Z", "updated_at": "2018-06-06T09:34:55Z", "closed_at": "2018-06-06T09:34:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The build fails because `pip uninstall` does not accept `.` as a package name anymore.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/314", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/314/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/314/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/314/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/314", "id": 323252941, "node_id": "MDU6SXNzdWUzMjMyNTI5NDE=", "number": 314, "title": "Be able to configure the line width limit.", "user": {"login": "define-private-public", "id": 4551425, "node_id": "MDQ6VXNlcjQ1NTE0MjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4551425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/define-private-public", "html_url": "https://github.com/define-private-public", "followers_url": "https://api.github.com/users/define-private-public/followers", "following_url": "https://api.github.com/users/define-private-public/following{/other_user}", "gists_url": "https://api.github.com/users/define-private-public/gists{/gist_id}", "starred_url": "https://api.github.com/users/define-private-public/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/define-private-public/subscriptions", "organizations_url": "https://api.github.com/users/define-private-public/orgs", "repos_url": "https://api.github.com/users/define-private-public/repos", "events_url": "https://api.github.com/users/define-private-public/events{/privacy}", "received_events_url": "https://api.github.com/users/define-private-public/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-15T14:50:38Z", "updated_at": "2018-05-15T15:25:17Z", "closed_at": "2018-05-15T15:05:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working on a project where I'd like to adhere to PEP8/PEP257 standards, but I prefer to have line widths that are not limited to a hard 80 characters.  Is there a way to configure this setting?  It would be a really neat feature.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/313", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/313/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/313/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/313/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/313", "id": 321855748, "node_id": "MDU6SXNzdWUzMjE4NTU3NDg=", "number": 313, "title": "Unexpected token kind tk.OP when __all__ contains non str literals; noqa does not help", "user": {"login": "OJFord", "id": 3946014, "node_id": "MDQ6VXNlcjM5NDYwMTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3946014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OJFord", "html_url": "https://github.com/OJFord", "followers_url": "https://api.github.com/users/OJFord/followers", "following_url": "https://api.github.com/users/OJFord/following{/other_user}", "gists_url": "https://api.github.com/users/OJFord/gists{/gist_id}", "starred_url": "https://api.github.com/users/OJFord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OJFord/subscriptions", "organizations_url": "https://api.github.com/users/OJFord/orgs", "repos_url": "https://api.github.com/users/OJFord/repos", "events_url": "https://api.github.com/users/OJFord/events{/privacy}", "received_events_url": "https://api.github.com/users/OJFord/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-05-10T08:46:31Z", "updated_at": "2018-10-14T07:59:43Z", "closed_at": "2018-10-14T07:59:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "With an `__all__` like:\r\n```python\r\nfrom .other import __all__ as other_all\r\nfrom .other import *\r\n\r\n__all__ = (\r\n    *other_all,\r\n    'something',\r\n)\r\n```\r\n\r\nI see:\r\n```\r\nWARNING: Error in file path/to/__init__.py: Unexpected token kind in  __all__: tk.OP.\r\nThat means pydocstyle cannot decide which definitions are\r\npublic. Variable __all__ should be present at most once in\r\neach file, in form\r\n`__all__ = ('a_public_function', 'APublicClass', ...)`.\r\nMore info on __all__: http://stackoverflow.com/q/44834/. ')\r\n```\r\n\r\nThinking the 'present at most once' was a clue, I changed to using `from . import other` and `*other.__all__`, but got the same error.\r\n\r\nEither of these seems to _work_ as Python, but it cannot be ignored with `# noqa`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/311", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/311/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/311/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/311/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/311", "id": 318992397, "node_id": "MDU6SXNzdWUzMTg5OTIzOTc=", "number": 311, "title": "Incorrect D405 on lowercase \"attributes\" used in docstring.", "user": {"login": "TimZaman", "id": 7721540, "node_id": "MDQ6VXNlcjc3MjE1NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7721540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimZaman", "html_url": "https://github.com/TimZaman", "followers_url": "https://api.github.com/users/TimZaman/followers", "following_url": "https://api.github.com/users/TimZaman/following{/other_user}", "gists_url": "https://api.github.com/users/TimZaman/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimZaman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimZaman/subscriptions", "organizations_url": "https://api.github.com/users/TimZaman/orgs", "repos_url": "https://api.github.com/users/TimZaman/repos", "events_url": "https://api.github.com/users/TimZaman/events{/privacy}", "received_events_url": "https://api.github.com/users/TimZaman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "shacharoo", "id": 13560060, "node_id": "MDQ6VXNlcjEzNTYwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/13560060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacharoo", "html_url": "https://github.com/shacharoo", "followers_url": "https://api.github.com/users/shacharoo/followers", "following_url": "https://api.github.com/users/shacharoo/following{/other_user}", "gists_url": "https://api.github.com/users/shacharoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacharoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacharoo/subscriptions", "organizations_url": "https://api.github.com/users/shacharoo/orgs", "repos_url": "https://api.github.com/users/shacharoo/repos", "events_url": "https://api.github.com/users/shacharoo/events{/privacy}", "received_events_url": "https://api.github.com/users/shacharoo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shacharoo", "id": 13560060, "node_id": "MDQ6VXNlcjEzNTYwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/13560060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacharoo", "html_url": "https://github.com/shacharoo", "followers_url": "https://api.github.com/users/shacharoo/followers", "following_url": "https://api.github.com/users/shacharoo/following{/other_user}", "gists_url": "https://api.github.com/users/shacharoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacharoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacharoo/subscriptions", "organizations_url": "https://api.github.com/users/shacharoo/orgs", "repos_url": "https://api.github.com/users/shacharoo/repos", "events_url": "https://api.github.com/users/shacharoo/events{/privacy}", "received_events_url": "https://api.github.com/users/shacharoo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-04-30T18:41:47Z", "updated_at": "2018-10-14T09:17:47Z", "closed_at": "2018-10-14T09:17:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "```py\r\n    def clip(self, attributes_per_polyline):  # noqa: D405 (pydocstring bug)\r\n        \"\"\"\r\n        Some stuff here.\r\n\r\n        Args:\r\n            attributes_per_polyline (tensor): attributes for each polyline.\r\n\r\n        Returns:\r\n            stuff\r\n        \"\"\"\r\n```\r\n\r\nThrows: \r\n`D405`\r\n```\r\nstuff.py:1337 in public method `clip`:\r\n        D405: Section name should be properly capitalized ('Attributes', not 'attributes')\r\n```\r\nI think 'attributes' is seen as some kind of special keyword here by pydocstyle, which it isn't/doesn't have to be.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/309", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/309/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/309/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/309/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/309", "id": 314951613, "node_id": "MDU6SXNzdWUzMTQ5NTE2MTM=", "number": 309, "title": "Allow missing docstrings when overriding methods", "user": {"login": "torfsen", "id": 2877717, "node_id": "MDQ6VXNlcjI4Nzc3MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2877717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/torfsen", "html_url": "https://github.com/torfsen", "followers_url": "https://api.github.com/users/torfsen/followers", "following_url": "https://api.github.com/users/torfsen/following{/other_user}", "gists_url": "https://api.github.com/users/torfsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/torfsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/torfsen/subscriptions", "organizations_url": "https://api.github.com/users/torfsen/orgs", "repos_url": "https://api.github.com/users/torfsen/repos", "events_url": "https://api.github.com/users/torfsen/events{/privacy}", "received_events_url": "https://api.github.com/users/torfsen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-04-17T08:15:35Z", "updated_at": "2020-01-10T18:01:56Z", "closed_at": "2018-04-25T10:00:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Python, abstract base classes often play the role of an interface:\r\n\r\n```python\r\nclass MyInterface:\r\n    def some_method(self):\r\n        \"Do something useful\"\r\n        pass\r\n\r\nclass MyImplementation(MyInterface):\r\n    def some_method(self):\r\n        # Actual implementation\r\n```\r\n\r\nIn such situations, the docstring of the abstract method is often also appropriate for the implementing method, and duplicating it there would be redundant.\r\n\r\nHowever, omitting the docstring causes `pydocstyle` 2.1.1 to emit a D102 warning (missing docstring in public method).\r\n\r\nExcluding D102 in general is not a good option, since one obviously wants to catch \"normal\" undocumented public methods.\r\n\r\nI therefore suggest the following feature: if a public method has no docstring then it is first checked whether it overrides an inherited method. If this is not the case then D102 is raised as before. For an overriding method, we check whether one of the parent implementations (there could be multiple in the inheritance chain) has a docstring. If that is the case, a newly created warning is raised (e.g. \"DXXX Overriding method inherits docstring from superclass implementation\"). If the parent implementations also do not have docstrings then D102 is raised for the overriding method.\r\n\r\nThis would make sure that, by default, all undocumented public methods are reported (just as they are now). However, inheriting docstrings could be explicitly allowed by excluding the new warning (DXXX).\r\n\r\nAn obvious work-around in the meantime is to add `# noqa: D102` to the offending methods.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/306", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/306/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/306/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/306", "id": 304606040, "node_id": "MDU6SXNzdWUzMDQ2MDYwNDA=", "number": 306, "title": "D100 and unicode_literals", "user": {"login": "omercnet", "id": 639682, "node_id": "MDQ6VXNlcjYzOTY4Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/639682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omercnet", "html_url": "https://github.com/omercnet", "followers_url": "https://api.github.com/users/omercnet/followers", "following_url": "https://api.github.com/users/omercnet/following{/other_user}", "gists_url": "https://api.github.com/users/omercnet/gists{/gist_id}", "starred_url": "https://api.github.com/users/omercnet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omercnet/subscriptions", "organizations_url": "https://api.github.com/users/omercnet/orgs", "repos_url": "https://api.github.com/users/omercnet/repos", "events_url": "https://api.github.com/users/omercnet/events{/privacy}", "received_events_url": "https://api.github.com/users/omercnet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-13T02:29:08Z", "updated_at": "2018-03-13T09:40:24Z", "closed_at": "2018-03-13T09:40:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I couldn't find a good reference, sorry if I missed it - but should `from __future__ import unicode_literals` come before the module's docstring?\r\n\r\nmaybe it's a question for https://github.com/python/cpython but `__doc__` isn't populated unless the docstring is the first line, shouldn't the import come first otherwise the docstring should have a `u` prefix ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/304", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/304/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/304/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/304/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/304", "id": 304101977, "node_id": "MDU6SXNzdWUzMDQxMDE5Nzc=", "number": 304, "title": "Allow user to specify a particular file to run on", "user": {"login": "annawoodard", "id": 5114833, "node_id": "MDQ6VXNlcjUxMTQ4MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5114833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/annawoodard", "html_url": "https://github.com/annawoodard", "followers_url": "https://api.github.com/users/annawoodard/followers", "following_url": "https://api.github.com/users/annawoodard/following{/other_user}", "gists_url": "https://api.github.com/users/annawoodard/gists{/gist_id}", "starred_url": "https://api.github.com/users/annawoodard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/annawoodard/subscriptions", "organizations_url": "https://api.github.com/users/annawoodard/orgs", "repos_url": "https://api.github.com/users/annawoodard/repos", "events_url": "https://api.github.com/users/annawoodard/events{/privacy}", "received_events_url": "https://api.github.com/users/annawoodard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-10T20:27:25Z", "updated_at": "2018-03-11T18:53:36Z", "closed_at": "2018-03-10T21:57:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks to all the contributors for this great software!\r\n\r\nI want to plug this into Vim, but I'm finding it not very straightforward to indicate a specific file I want to run on. The `match-dirs` option is great for selecting particular groups of matches, but because of the walk that happens [here](https://github.com/PyCQA/pydocstyle/blob/master/src/pydocstyle/config.py#L154) I'm finding it difficult to match a specific file which may be several layers deep with any combination of `match-dirs` and `match`. Am I missing something obvious here? Are there objections to just implementing a `--file` option which would take the filepath to be checked? If not, I can implement it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/303", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/303/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/303/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/303/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/303", "id": 302106780, "node_id": "MDU6SXNzdWUzMDIxMDY3ODA=", "number": 303, "title": "Crash on invalid syntax without detail", "user": {"login": "fclaerho", "id": 8522210, "node_id": "MDQ6VXNlcjg1MjIyMTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8522210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fclaerho", "html_url": "https://github.com/fclaerho", "followers_url": "https://api.github.com/users/fclaerho/followers", "following_url": "https://api.github.com/users/fclaerho/following{/other_user}", "gists_url": "https://api.github.com/users/fclaerho/gists{/gist_id}", "starred_url": "https://api.github.com/users/fclaerho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fclaerho/subscriptions", "organizations_url": "https://api.github.com/users/fclaerho/orgs", "repos_url": "https://api.github.com/users/fclaerho/repos", "events_url": "https://api.github.com/users/fclaerho/events{/privacy}", "received_events_url": "https://api.github.com/users/fclaerho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-04T18:04:36Z", "updated_at": "2018-03-08T13:50:35Z", "closed_at": "2018-03-08T13:50:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "```bash\r\n$ pydocstyle --version\r\n2.1.1\r\n```\r\n\r\n### ISSUE\r\n\r\nCurrently pydocstyle crashes (with a stack trace, and no detail about the problem) on any syntax error.\r\nAs much as pydocstyle is not meant to validate a python source file (this is defer to e.g. pylint), this is still disturbing to have it crash without information when the user passes directories to scan.\r\n\r\nI would suggest to at least exit gracefully with a message specifying which file was scanned and that the file is invalid.\r\n\r\n### REPRODUCTION\r\n\r\nSource file, anything invalid will do:\r\n```python\r\n# some_dir/foo.py\r\nmsg =\r\n```\r\n\r\nExpected output:\r\n```bash\r\n$ pydocstyle some_dir/ another_dir/ yet_another_dir/\r\nfatal: some_dir/foo.py: invalid file\r\n$ echo $?\r\n1\r\n```\r\n\r\nActual output:\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"/Users/$user/Library/Python/2.7/bin/pydocstyle\", line 11, in <module>\r\n    sys.exit(main())\r\n[\u2026]\r\n    module = parse(StringIO(source), filename)\r\n  File \"/Users/$user/Library/Python/2.7/lib/python/site-packages/pydocstyle/parser.py\", line 305, in __call__\r\n    return self.parse(*args, **kwargs)\r\n  File \"/Users/$user/Library/Python/2.7/lib/python/site-packages/pydocstyle/parser.py\", line 294, in parse\r\n    six.raise_from(ParseError(), error)\r\nAttributeError: 'module' object has no attribute 'raise_from'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/302", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/302/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/302/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/302", "id": 301345281, "node_id": "MDU6SXNzdWUzMDEzNDUyODE=", "number": 302, "title": "Upload tests to PyPI", "user": {"login": "dotlambda", "id": 6806011, "node_id": "MDQ6VXNlcjY4MDYwMTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6806011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotlambda", "html_url": "https://github.com/dotlambda", "followers_url": "https://api.github.com/users/dotlambda/followers", "following_url": "https://api.github.com/users/dotlambda/following{/other_user}", "gists_url": "https://api.github.com/users/dotlambda/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotlambda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotlambda/subscriptions", "organizations_url": "https://api.github.com/users/dotlambda/orgs", "repos_url": "https://api.github.com/users/dotlambda/repos", "events_url": "https://api.github.com/users/dotlambda/events{/privacy}", "received_events_url": "https://api.github.com/users/dotlambda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-01T10:07:03Z", "updated_at": "2018-03-01T20:07:42Z", "closed_at": "2018-03-01T18:27:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please upload the files in `src/tests` to PyPI.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/297", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/297/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/297/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/297", "id": 286458477, "node_id": "MDU6SXNzdWUyODY0NTg0Nzc=", "number": 297, "title": "pydocstyle should not immediately quit when it can't evaluate contents of __all__", "user": {"login": "5j9", "id": 1055747, "node_id": "MDQ6VXNlcjEwNTU3NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1055747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5j9", "html_url": "https://github.com/5j9", "followers_url": "https://api.github.com/users/5j9/followers", "following_url": "https://api.github.com/users/5j9/following{/other_user}", "gists_url": "https://api.github.com/users/5j9/gists{/gist_id}", "starred_url": "https://api.github.com/users/5j9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5j9/subscriptions", "organizations_url": "https://api.github.com/users/5j9/orgs", "repos_url": "https://api.github.com/users/5j9/repos", "events_url": "https://api.github.com/users/5j9/events{/privacy}", "received_events_url": "https://api.github.com/users/5j9/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 452210245, "node_id": "MDU6TGFiZWw0NTIyMTAyNDU=", "url": "https://api.github.com/repos/PyCQA/pydocstyle/labels/Minor%20(New%20Feature)", "name": "Minor (New Feature)", "color": "eeeeee", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-01-06T04:26:38Z", "updated_at": "2018-10-14T07:58:49Z", "closed_at": "2018-10-14T07:58:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Create a module with the following content:\r\n```\r\n__all__ = ('a',)\r\n__all__ += ('b',)\r\n\r\n\r\na = 1\r\nb = 2\r\n```\r\n\r\nRun pydocstyle on it:\r\n\r\n```\r\n$ pydocstyle.exe mymodule.py\r\nWARNING: Error in file mymodule.py: Could not evaluate contents of __all__.\r\nThat means pydocstyle cannot decide which definitions are\r\npublic. Variable __all__ should be present at most once in\r\neach file, in form\r\n`__all__ = ('a_public_function', 'APublicClass', ...)`.\r\nMore info on __all__: http://stackoverflow.com/q/44834/. ')\r\n```\r\n\r\nI think that even if it can't evaluate `__all__`, it still can and should warn about `D100: Missing docstring in public module`.\r\n  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/296", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/296/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/296/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/296/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/296", "id": 275105118, "node_id": "MDU6SXNzdWUyNzUxMDUxMTg=", "number": 296, "title": "Documentation Example for Config errors", "user": {"login": "erichiller", "id": 5379325, "node_id": "MDQ6VXNlcjUzNzkzMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/5379325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erichiller", "html_url": "https://github.com/erichiller", "followers_url": "https://api.github.com/users/erichiller/followers", "following_url": "https://api.github.com/users/erichiller/following{/other_user}", "gists_url": "https://api.github.com/users/erichiller/gists{/gist_id}", "starred_url": "https://api.github.com/users/erichiller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erichiller/subscriptions", "organizations_url": "https://api.github.com/users/erichiller/orgs", "repos_url": "https://api.github.com/users/erichiller/repos", "events_url": "https://api.github.com/users/erichiller/events{/privacy}", "received_events_url": "https://api.github.com/users/erichiller/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-18T19:54:50Z", "updated_at": "2018-10-14T09:13:23Z", "closed_at": "2018-10-14T09:13:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [config example](http://www.pydocstyle.org/en/2.1.1/usage.html#example) has \r\n\r\n`match = *.py\r\n`\r\nThis is invalid and throws an error when used as a config file option.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/293", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/293/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/293/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/293/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/293", "id": 266486704, "node_id": "MDU6SXNzdWUyNjY0ODY3MDQ=", "number": 293, "title": "Incoherent code line raising ParseError", "user": {"login": "rubenseam", "id": 5056930, "node_id": "MDQ6VXNlcjUwNTY5MzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5056930?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rubenseam", "html_url": "https://github.com/rubenseam", "followers_url": "https://api.github.com/users/rubenseam/followers", "following_url": "https://api.github.com/users/rubenseam/following{/other_user}", "gists_url": "https://api.github.com/users/rubenseam/gists{/gist_id}", "starred_url": "https://api.github.com/users/rubenseam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rubenseam/subscriptions", "organizations_url": "https://api.github.com/users/rubenseam/orgs", "repos_url": "https://api.github.com/users/rubenseam/repos", "events_url": "https://api.github.com/users/rubenseam/events{/privacy}", "received_events_url": "https://api.github.com/users/rubenseam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-10-18T13:09:20Z", "updated_at": "2017-10-18T20:41:22Z", "closed_at": "2017-10-18T20:41:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to develop a plugin to Flake8, for p\u013aain syntax checking. I've installed the library, and installed pydocstyle as well, which is a dependency. However, depending on the file I use as input to 'pydocstyle', it gives me the error:\r\n\r\n```\r\n$ pydocstyle\r\nWARNING: Error in file ./setup.py: Cannot parse file.      \r\nWARNING: Error in file ./smarttcheck.py: Cannot parse file.\r\n```\r\n\r\nWandering through the code, I've eventually found the error was coming from line:\r\nhttps://github.com/PyCQA/pydocstyle/blob/df872e43915bcb6d94a334fff9c879574f78abc4/src/pydocstyle/parser.py#L292\r\n\r\nIn the same parser.py source file, at line 8, you guys do the following import:\r\nhttps://github.com/PyCQA/pydocstyle/blob/df872e43915bcb6d94a334fff9c879574f78abc4/src/pydocstyle/parser.py#L8\r\nWhich, I believe, invalidates the use of `compile` at line 292.\r\n\r\nMy \"issue/question\" is: is that line intentional, or was it a typo? When I comment it out, the files are checked properly by pydocstyle. Sorry for duplicates, or for a potentially non-sensical issue submission.\r\nFor some reason I fail to see, some files pass through this check without raising the error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/290", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/290/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/290/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/290", "id": 264054824, "node_id": "MDU6SXNzdWUyNjQwNTQ4MjQ=", "number": 290, "title": "Test wheel dists installation in CI", "user": {"login": "shacharoo", "id": 13560060, "node_id": "MDQ6VXNlcjEzNTYwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/13560060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacharoo", "html_url": "https://github.com/shacharoo", "followers_url": "https://api.github.com/users/shacharoo/followers", "following_url": "https://api.github.com/users/shacharoo/following{/other_user}", "gists_url": "https://api.github.com/users/shacharoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacharoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacharoo/subscriptions", "organizations_url": "https://api.github.com/users/shacharoo/orgs", "repos_url": "https://api.github.com/users/shacharoo/repos", "events_url": "https://api.github.com/users/shacharoo/events{/privacy}", "received_events_url": "https://api.github.com/users/shacharoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-09T23:28:29Z", "updated_at": "2017-10-10T12:43:15Z", "closed_at": "2017-10-10T12:43:15Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Opened due to #289.\r\nI think this should be checked for the latest in every (supported) major python version (i.e. 2.7 and 3.6), not for the entire build matrix. @Nurdok?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/289", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/289/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/289/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/289/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/289", "id": 263837607, "node_id": "MDU6SXNzdWUyNjM4Mzc2MDc=", "number": 289, "title": "Broken install with pip on python 2.x", "user": {"login": "tpazderka", "id": 7734753, "node_id": "MDQ6VXNlcjc3MzQ3NTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/7734753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tpazderka", "html_url": "https://github.com/tpazderka", "followers_url": "https://api.github.com/users/tpazderka/followers", "following_url": "https://api.github.com/users/tpazderka/following{/other_user}", "gists_url": "https://api.github.com/users/tpazderka/gists{/gist_id}", "starred_url": "https://api.github.com/users/tpazderka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tpazderka/subscriptions", "organizations_url": "https://api.github.com/users/tpazderka/orgs", "repos_url": "https://api.github.com/users/tpazderka/repos", "events_url": "https://api.github.com/users/tpazderka/events{/privacy}", "received_events_url": "https://api.github.com/users/tpazderka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-10-09T09:48:24Z", "updated_at": "2017-10-09T17:04:52Z", "closed_at": "2017-10-09T17:04:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pydocstyle does not install properly on python 2.\r\n```bash\r\n$ python --version\r\nPython 2.7.13\r\n$ pip install pydocstyle\r\nCollecting pydocstyle\r\n  Using cached pydocstyle-2.1.0-py2.py3-none-any.whl\r\nCollecting six (from pydocstyle)\r\n  Using cached six-1.11.0-py2.py3-none-any.whl\r\nCollecting snowballstemmer (from pydocstyle)\r\n  Using cached snowballstemmer-1.2.1-py2.py3-none-any.whl\r\nInstalling collected packages: six, snowballstemmer, pydocstyle\r\nSuccessfully installed pydocstyle-2.1.0 six-1.11.0 snowballstemmer-1.2.1\r\n$ pydocstyle\r\nTraceback (most recent call last):\r\n  File \"/tmp/test/bin/pydocstyle\", line 7, in <module>\r\n    from pydocstyle.cli import main\r\n  File \"/tmp/test/local/lib/python2.7/site-packages/pydocstyle/__init__.py\", line 1, in <module>\r\n    from .checker import check\r\n  File \"/tmp/test/local/lib/python2.7/site-packages/pydocstyle/checker.py\", line 12, in <module>\r\n    from .config import IllegalConfiguration\r\n  File \"/tmp/test/local/lib/python2.7/site-packages/pydocstyle/config.py\", line 10, in <module>\r\n    from configparser import RawConfigParser\r\nImportError: No module named configparser\r\n$ pip list\r\npip (9.0.1)\r\npydocstyle (2.1.0)\r\nsetuptools (36.5.0)\r\nsix (1.11.0)\r\nsnowballstemmer (1.2.1)\r\nwheel (0.30.0)\r\n```\r\n\r\n`configparser`  is not installed through `pip`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/286", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/286/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/286/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/286/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/286", "id": 260274310, "node_id": "MDU6SXNzdWUyNjAyNzQzMTA=", "number": 286, "title": "Add pypy environment to the windows CI in appveyor", "user": {"login": "shacharoo", "id": 13560060, "node_id": "MDQ6VXNlcjEzNTYwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/13560060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacharoo", "html_url": "https://github.com/shacharoo", "followers_url": "https://api.github.com/users/shacharoo/followers", "following_url": "https://api.github.com/users/shacharoo/following{/other_user}", "gists_url": "https://api.github.com/users/shacharoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacharoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacharoo/subscriptions", "organizations_url": "https://api.github.com/users/shacharoo/orgs", "repos_url": "https://api.github.com/users/shacharoo/repos", "events_url": "https://api.github.com/users/shacharoo/events{/privacy}", "received_events_url": "https://api.github.com/users/shacharoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-25T13:20:46Z", "updated_at": "2017-10-05T12:22:51Z", "closed_at": "2017-10-05T12:22:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This issue is a follow up for #285. \r\n\r\nThere's a problem with `pypy` in windows. [This stackoverflow question](https://stackoverflow.com/questions/46401252/failure-to-remove-a-python-package-from-within-a-unit-test-in-a-pypy-virtualenv) describes it.\r\n\r\nWhen this is solved, this should be added to the `.appveyor.yml`:\r\n\r\n```\r\n- TOXENV: \"pypy\"\r\n```\r\n\r\nAnd under `install` (before `pip install tox`):\r\n\r\n```\r\n    # This takes a long time, so only for pypy env.\r\n  - if \"%TOXENV%\"==\"pypy\" choco install python.pypy\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/278", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/278/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/278/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/278/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/278", "id": 254079447, "node_id": "MDU6SXNzdWUyNTQwNzk0NDc=", "number": 278, "title": "Make config file discovery simple, like pycodestyle", "user": {"login": "nlfiedler", "id": 2184927, "node_id": "MDQ6VXNlcjIxODQ5Mjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2184927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlfiedler", "html_url": "https://github.com/nlfiedler", "followers_url": "https://api.github.com/users/nlfiedler/followers", "following_url": "https://api.github.com/users/nlfiedler/following{/other_user}", "gists_url": "https://api.github.com/users/nlfiedler/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlfiedler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlfiedler/subscriptions", "organizations_url": "https://api.github.com/users/nlfiedler/orgs", "repos_url": "https://api.github.com/users/nlfiedler/repos", "events_url": "https://api.github.com/users/nlfiedler/events{/privacy}", "received_events_url": "https://api.github.com/users/nlfiedler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-08-30T17:35:57Z", "updated_at": "2017-09-02T07:31:10Z", "closed_at": "2017-09-02T07:31:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use `pycodestyle` and `pydocstyle` with Atom (via `pylama`), so I am not invoking either tool myself. As such, configuring them is tricky. Fortunately, `pycodestyle` will read the configuration file from `~/.config/pycodestyle`, regardless of how the tool is run. However, there is nothing similar for `pydocstyle`. What's more, it's difficult to know how/where the tool is being run via `pylama`, so I don't know where to put the pydocstyle config. If I could put it in `~/.config` then it would be much simpler. Plus it would be consistent with the other tool.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/276", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/276/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/276/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/276/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/276", "id": 252836485, "node_id": "MDU6SXNzdWUyNTI4MzY0ODU=", "number": 276, "title": "Cryptic error messages when providing a config file without the expected section", "user": {"login": "tovrstra", "id": 99431, "node_id": "MDQ6VXNlcjk5NDMx", "avatar_url": "https://avatars3.githubusercontent.com/u/99431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tovrstra", "html_url": "https://github.com/tovrstra", "followers_url": "https://api.github.com/users/tovrstra/followers", "following_url": "https://api.github.com/users/tovrstra/following{/other_user}", "gists_url": "https://api.github.com/users/tovrstra/gists{/gist_id}", "starred_url": "https://api.github.com/users/tovrstra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tovrstra/subscriptions", "organizations_url": "https://api.github.com/users/tovrstra/orgs", "repos_url": "https://api.github.com/users/tovrstra/repos", "events_url": "https://api.github.com/users/tovrstra/events{/privacy}", "received_events_url": "https://api.github.com/users/tovrstra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 10650658, "node_id": "MDU6TGFiZWwxMDY1MDY1OA==", "url": "https://api.github.com/repos/PyCQA/pydocstyle/labels/Bugfix", "name": "Bugfix", "color": "8e0830", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "shacharoo", "id": 13560060, "node_id": "MDQ6VXNlcjEzNTYwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/13560060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacharoo", "html_url": "https://github.com/shacharoo", "followers_url": "https://api.github.com/users/shacharoo/followers", "following_url": "https://api.github.com/users/shacharoo/following{/other_user}", "gists_url": "https://api.github.com/users/shacharoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacharoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacharoo/subscriptions", "organizations_url": "https://api.github.com/users/shacharoo/orgs", "repos_url": "https://api.github.com/users/shacharoo/repos", "events_url": "https://api.github.com/users/shacharoo/events{/privacy}", "received_events_url": "https://api.github.com/users/shacharoo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shacharoo", "id": 13560060, "node_id": "MDQ6VXNlcjEzNTYwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/13560060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacharoo", "html_url": "https://github.com/shacharoo", "followers_url": "https://api.github.com/users/shacharoo/followers", "following_url": "https://api.github.com/users/shacharoo/following{/other_user}", "gists_url": "https://api.github.com/users/shacharoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacharoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacharoo/subscriptions", "organizations_url": "https://api.github.com/users/shacharoo/orgs", "repos_url": "https://api.github.com/users/shacharoo/repos", "events_url": "https://api.github.com/users/shacharoo/events{/privacy}", "received_events_url": "https://api.github.com/users/shacharoo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2017-08-25T08:50:21Z", "updated_at": "2017-09-04T07:09:20Z", "closed_at": "2017-09-03T11:59:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "This accidentally happened to me and is easy to reproduce. Do the following in an empty directory, using pydocstyle 2.0.0:\r\n\r\n```bash\r\necho '[pydcstyle]' > config\r\ntouch test.py\r\npydocstyle test.py --config=config\r\n```\r\n\r\nThen I get the following error message:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/toon/.local/bin/pydocstyle\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/toon/.local/lib/python2.7/site-packages/pydocstyle/cli.py\", line 68, in main\r\n    sys.exit(run_pydocstyle())\r\n  File \"/home/toon/.local/lib/python2.7/site-packages/pydocstyle/cli.py\", line 43, in run_pydocstyle\r\n    conf.get_files_to_check():\r\n  File \"/home/toon/.local/lib/python2.7/site-packages/pydocstyle/config.py\", line 171, in get_files_to_check\r\n    config = self._get_config(name)\r\n  File \"/home/toon/.local/lib/python2.7/site-packages/pydocstyle/config.py\", line 262, in _get_config\r\n    config = self._create_check_config(options)\r\n  File \"/home/toon/.local/lib/python2.7/site-packages/pydocstyle/config.py\", line 383, in _create_check_config\r\n    if cls._has_exclusive_option(options) or use_defaults:\r\n  File \"/home/toon/.local/lib/python2.7/site-packages/pydocstyle/config.py\", line 497, in _has_exclusive_option\r\n    cls.BASE_ERROR_SELECTION_OPTIONS])\r\nAttributeError: 'NoneType' object has no attribute 'ignore'\r\n```\r\nIt is too difficult to figure out what this error message means.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/275", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/275/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/275/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/275/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/275", "id": 250055067, "node_id": "MDU6SXNzdWUyNTAwNTUwNjc=", "number": 275, "title": "Add Google docstring convention ", "user": {"login": "pmatos", "id": 7911, "node_id": "MDQ6VXNlcjc5MTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/7911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmatos", "html_url": "https://github.com/pmatos", "followers_url": "https://api.github.com/users/pmatos/followers", "following_url": "https://api.github.com/users/pmatos/following{/other_user}", "gists_url": "https://api.github.com/users/pmatos/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmatos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmatos/subscriptions", "organizations_url": "https://api.github.com/users/pmatos/orgs", "repos_url": "https://api.github.com/users/pmatos/repos", "events_url": "https://api.github.com/users/pmatos/events{/privacy}", "received_events_url": "https://api.github.com/users/pmatos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2017-08-14T14:51:26Z", "updated_at": "2019-09-18T18:43:45Z", "closed_at": "2019-09-18T18:43:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "There are lots of projects out there using the google docstring convention. Given numpy has been recently added under #129, this is a request to add the google docstring convention.\r\n\r\nComparison between the two can be found [here](http://sphinxcontrib-napoleon.readthedocs.io/en/latest/index.html#google-vs-numpy).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/273", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/273/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/273/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/273/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/273", "id": 246613237, "node_id": "MDU6SXNzdWUyNDY2MTMyMzc=", "number": 273, "title": "Allow __init__ to not have a docstring", "user": {"login": "mitar", "id": 585279, "node_id": "MDQ6VXNlcjU4NTI3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitar", "html_url": "https://github.com/mitar", "followers_url": "https://api.github.com/users/mitar/followers", "following_url": "https://api.github.com/users/mitar/following{/other_user}", "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitar/subscriptions", "organizations_url": "https://api.github.com/users/mitar/orgs", "repos_url": "https://api.github.com/users/mitar/repos", "events_url": "https://api.github.com/users/mitar/events{/privacy}", "received_events_url": "https://api.github.com/users/mitar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 452210245, "node_id": "MDU6TGFiZWw0NTIyMTAyNDU=", "url": "https://api.github.com/repos/PyCQA/pydocstyle/labels/Minor%20(New%20Feature)", "name": "Minor (New Feature)", "color": "eeeeee", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-07-30T22:28:06Z", "updated_at": "2017-10-04T15:24:19Z", "closed_at": "2017-09-02T06:29:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I prefer to have docstring for __init__ as part of the class docstring. Currently it seems there is no way to disable just the requirement for the __init__ docstring.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/269", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/269/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/269/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/269/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/269", "id": 240596181, "node_id": "MDU6SXNzdWUyNDA1OTYxODE=", "number": 269, "title": "Not working with files without `*.py` extension", "user": {"login": "luator", "id": 9333121, "node_id": "MDQ6VXNlcjkzMzMxMjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/9333121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luator", "html_url": "https://github.com/luator", "followers_url": "https://api.github.com/users/luator/followers", "following_url": "https://api.github.com/users/luator/following{/other_user}", "gists_url": "https://api.github.com/users/luator/gists{/gist_id}", "starred_url": "https://api.github.com/users/luator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luator/subscriptions", "organizations_url": "https://api.github.com/users/luator/orgs", "repos_url": "https://api.github.com/users/luator/repos", "events_url": "https://api.github.com/users/luator/events{/privacy}", "received_events_url": "https://api.github.com/users/luator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-05T09:47:35Z", "updated_at": "2017-07-13T07:58:44Z", "closed_at": "2017-07-12T19:00:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some executable Python scripts that do not have a file name extension (i.e. `script` instead of `script.py`).\r\nNow I noticed that I don't get any warning for these files when running `pydocstyle`. As soon as I add the `.py`, it is working.\r\n\r\nIs this indented behaviour for some reason or is it a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/267", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/267/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/267/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/267/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/267", "id": 237709740, "node_id": "MDU6SXNzdWUyMzc3MDk3NDA=", "number": 267, "title": "Class docstring does not need blank line before", "user": {"login": "benf-wspdigital", "id": 19219318, "node_id": "MDQ6VXNlcjE5MjE5MzE4", "avatar_url": "https://avatars2.githubusercontent.com/u/19219318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benf-wspdigital", "html_url": "https://github.com/benf-wspdigital", "followers_url": "https://api.github.com/users/benf-wspdigital/followers", "following_url": "https://api.github.com/users/benf-wspdigital/following{/other_user}", "gists_url": "https://api.github.com/users/benf-wspdigital/gists{/gist_id}", "starred_url": "https://api.github.com/users/benf-wspdigital/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benf-wspdigital/subscriptions", "organizations_url": "https://api.github.com/users/benf-wspdigital/orgs", "repos_url": "https://api.github.com/users/benf-wspdigital/repos", "events_url": "https://api.github.com/users/benf-wspdigital/events{/privacy}", "received_events_url": "https://api.github.com/users/benf-wspdigital/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-06-22T01:43:26Z", "updated_at": "2018-06-06T09:37:13Z", "closed_at": "2018-06-06T09:37:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "The PEP 257 recommendation for a class docstring states, in part:\r\n\r\n> Insert a blank line after all docstrings [\u2026] that document a class -- generally speaking, the class's methods are separated from each other by a single blank line, and the docstring needs to be offset from the first method by a blank line.\r\n\r\nThat is covered (correctly) by the D204 check.\r\n\r\nThere is no mention of blank line *before* the class docstring. The D203 check is incorrect to require a blank line.\r\n\r\nPlease remove the D203 check as it is not a PEP 257 recommendation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/266", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/266/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/266/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/266/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/266", "id": 236983559, "node_id": "MDU6SXNzdWUyMzY5ODM1NTk=", "number": 266, "title": "D100 on import os", "user": {"login": "SitiSchu", "id": 18517178, "node_id": "MDQ6VXNlcjE4NTE3MTc4", "avatar_url": "https://avatars1.githubusercontent.com/u/18517178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SitiSchu", "html_url": "https://github.com/SitiSchu", "followers_url": "https://api.github.com/users/SitiSchu/followers", "following_url": "https://api.github.com/users/SitiSchu/following{/other_user}", "gists_url": "https://api.github.com/users/SitiSchu/gists{/gist_id}", "starred_url": "https://api.github.com/users/SitiSchu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SitiSchu/subscriptions", "organizations_url": "https://api.github.com/users/SitiSchu/orgs", "repos_url": "https://api.github.com/users/SitiSchu/repos", "events_url": "https://api.github.com/users/SitiSchu/events{/privacy}", "received_events_url": "https://api.github.com/users/SitiSchu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-19T18:43:24Z", "updated_at": "2017-06-19T19:24:41Z", "closed_at": "2017-06-19T19:24:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get a `D100 Missing docstring in public module` for `import os`. Maybe add an option to ignore Built-in Modules ? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/258", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/258/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/258/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/258", "id": 227007466, "node_id": "MDU6SXNzdWUyMjcwMDc0NjY=", "number": 258, "title": "pydocstyle 2.0.0 raises UnicodeDecodeError", "user": {"login": "kashewnuts", "id": 1122795, "node_id": "MDQ6VXNlcjExMjI3OTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1122795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kashewnuts", "html_url": "https://github.com/kashewnuts", "followers_url": "https://api.github.com/users/kashewnuts/followers", "following_url": "https://api.github.com/users/kashewnuts/following{/other_user}", "gists_url": "https://api.github.com/users/kashewnuts/gists{/gist_id}", "starred_url": "https://api.github.com/users/kashewnuts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kashewnuts/subscriptions", "organizations_url": "https://api.github.com/users/kashewnuts/orgs", "repos_url": "https://api.github.com/users/kashewnuts/repos", "events_url": "https://api.github.com/users/kashewnuts/events{/privacy}", "received_events_url": "https://api.github.com/users/kashewnuts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-05-08T10:45:59Z", "updated_at": "2017-06-10T07:33:10Z", "closed_at": "2017-06-10T07:33:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Problems summary\r\nUnicodeDecodeError occurs when executing a command with a file containing a Unicode character string.\r\n\r\n## Expected\r\nTo succeed the command and not cause an error.\r\n\r\n## Environment Information\r\n- OS: CentOS release 6.5 (Final)\r\n- Python Versions: 2.7.7\r\n- requirements.txt\r\n\r\n```\r\npydocstyle==2.0.0\r\n```\r\n\r\n## Error Messages\r\n```\r\n[vagrant@localhost apps]$ pydocstyle\r\n/home/vagrant/.virtualenvs/spamspam/lib/python2.7/site-packages/snowballstemmer/basestemmer.py:122: UnicodeWarning: Unicode unequal comparison failed to convert both arguments to Unicode - interpreting them as being unequal\r\n  if self.current[self.cursor:self.cursor + s_size] != s:\r\n/home/vagrant/.virtualenvs/spamspam/lib/python2.7/site-packages/snowballstemmer/basestemmer.py:130: UnicodeWarning: Unicode unequal comparison failed to convert both arguments to Unicode - interpreting them as being unequal\r\n  if self.current[self.cursor - s_size:self.cursor] != s:\r\nTraceback (most recent call last):\r\n  File \"/home/vagrant/.virtualenvs/spamspam/bin/pydocstyle\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/vagrant/.virtualenvs/spamspam/lib/python2.7/site-packages/pydocstyle/cli.py\", line 68, in main\r\n    sys.exit(run_pydocstyle())\r\n  File \"/home/vagrant/.virtualenvs/spamspam/lib/python2.7/site-packages/pydocstyle/cli.py\", line 45, in run_pydocstyle\r\n    ignore_decorators=ignore_decorators))\r\n  File \"/home/vagrant/.virtualenvs/spamspam/lib/python2.7/site-packages/pydocstyle/checker.py\", line 695, in check\r\n    ignore_decorators):\r\n  File \"/home/vagrant/.virtualenvs/spamspam/lib/python2.7/site-packages/pydocstyle/checker.py\", line 75, in check_source\r\n    definition.docstring)\r\n  File \"/home/vagrant/.virtualenvs/spamspam/lib/python2.7/site-packages/pydocstyle/checker.py\", line 375, in check_imperative_mood\r\n    correct_form = IMPERATIVE_VERBS.get(stem(check_word))\r\n  File \"/home/vagrant/.virtualenvs/spamspam/lib/python2.7/site-packages/snowballstemmer/basestemmer.py\", line 342, in stemWord\r\n    result = self._stem_word(word)\r\n  File \"/home/vagrant/.virtualenvs/spamspam/lib/python2.7/site-packages/snowballstemmer/basestemmer.py\", line 326, in _stem_word\r\n    self._stem()\r\n  File \"/home/vagrant/.virtualenvs/spamspam/lib/python2.7/site-packages/snowballstemmer/english_stemmer.py\", line 999, in _stem\r\n    if not self.r_prelude():\r\n  File \"/home/vagrant/.virtualenvs/spamspam/lib/python2.7/site-packages/snowballstemmer/english_stemmer.py\", line 247, in r_prelude\r\n    if not self.slice_from(u\"Y\"):\r\n  File \"/home/vagrant/.virtualenvs/spamspam/lib/python2.7/site-packages/snowballstemmer/basestemmer.py\", line 286, in slice_from\r\n    self.replace_s(self.bra, self.ket, s)\r\n  File \"/home/vagrant/.virtualenvs/spamspam/lib/python2.7/site-packages/snowballstemmer/basestemmer.py\", line 267, in replace_s\r\n    self.current = self.current[0:c_bra] + s + self.current[c_ket:]\r\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe3 in position 8: ordinal not in range(128)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/256", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/256/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/256/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/256", "id": 226942498, "node_id": "MDU6SXNzdWUyMjY5NDI0OTg=", "number": 256, "title": "--source is broken", "user": {"login": "brbsix", "id": 6672131, "node_id": "MDQ6VXNlcjY2NzIxMzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6672131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brbsix", "html_url": "https://github.com/brbsix", "followers_url": "https://api.github.com/users/brbsix/followers", "following_url": "https://api.github.com/users/brbsix/following{/other_user}", "gists_url": "https://api.github.com/users/brbsix/gists{/gist_id}", "starred_url": "https://api.github.com/users/brbsix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brbsix/subscriptions", "organizations_url": "https://api.github.com/users/brbsix/orgs", "repos_url": "https://api.github.com/users/brbsix/repos", "events_url": "https://api.github.com/users/brbsix/events{/privacy}", "received_events_url": "https://api.github.com/users/brbsix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-08T05:36:35Z", "updated_at": "2017-06-10T07:55:13Z", "closed_at": "2017-06-10T07:55:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `--source` option is broken. Output looks like:\r\n\r\n\tsrc/pydocstyle/violations.py:87 in public method `__lt__`:\r\n\t\t    D105: Missing docstring in magic method\r\n\r\n\t876:     def __lt__(self, other):\r\n\t\t87:     def __lt__(self, other):\r\n\t886:         return (self.filename, self.line) < (other.filename, other.line)\r\n\t\t88:         return (self.filename, self.line) < (other.filename, other.line)\r\n\r\nWhen it (presumably) should look like:\r\n\r\n\tsrc/pydocstyle/violations.py:87 in public method `__lt__`:\r\n\t\t    D105: Missing docstring in magic method\r\n\r\n\t87:     def __lt__(self, other):\r\n\t88:         return (self.filename, self.line) < (other.filename, other.line)\r\n\r\nThe issue originates in `Errors.lines`, found here: https://github.com/PyCQA/pydocstyle/blob/master/src/pydocstyle/violations.py#L49\r\n\r\nIt looks like some code may have been committed accidentally before it was complete.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/253", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/253/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/253/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/253", "id": 224438446, "node_id": "MDU6SXNzdWUyMjQ0Mzg0NDY=", "number": 253, "title": "No error when use --select with unsupported code", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-26T11:41:19Z", "updated_at": "2017-09-18T12:23:00Z", "closed_at": "2017-09-18T12:23:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "e.g.\r\n\r\n```\r\n$ pydocstyle --version\r\n2.0.0\r\n$ pydocstyle --select \"D400,E321\" BioSQL\r\nBioSQL/__init__.py:1 at module level:\r\n        D400: First line should end with a period (not 'L')\r\nBioSQL/BioSeqDatabase.py:344 in public class `Adaptor`:\r\n        D400: First line should end with a period (not 'r')\r\nBioSQL/BioSeqDatabase.py:483 in public method `execute_one`:\r\n        D400: First line should end with a period (not 'd')\r\nBioSQL/BioSeqDatabase.py:529 in public class `MysqlConnectorAdaptor`:\r\n        D400: First line should end with a period (not 'e')\r\nBioSQL/Loader.py:1053 in private method `_get_dbxref_id`:\r\n        D400: First line should end with a period (not 't')\r\nBioSQL/Loader.py:1075 in private method `_get_seqfeature_dbxref`:\r\n        D400: First line should end with a period (not 'd')\r\nBioSQL/Loader.py:1092 in private method `_add_seqfeature_dbxref`:\r\n        D400: First line should end with a period (not 'd')\r\n```\r\n\r\nGiven there is (currently) no E321 defined, I would expect this to give an error.\r\n\r\nUse-case: Accidentally using an older version of pydocstyle and you want to test an issue only added to recent versions of pydocstyle\r\n\r\nUse-case: There is a typo in the user's command line or configuration, and this is silently overlooked.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/251", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/251/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/251/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/251", "id": 224415741, "node_id": "MDU6SXNzdWUyMjQ0MTU3NDE=", "number": 251, "title": "Git tag for version 2.0.0 references different code than the code released on PyPI", "user": {"login": "tjanez", "id": 2518544, "node_id": "MDQ6VXNlcjI1MTg1NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2518544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjanez", "html_url": "https://github.com/tjanez", "followers_url": "https://api.github.com/users/tjanez/followers", "following_url": "https://api.github.com/users/tjanez/following{/other_user}", "gists_url": "https://api.github.com/users/tjanez/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjanez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjanez/subscriptions", "organizations_url": "https://api.github.com/users/tjanez/orgs", "repos_url": "https://api.github.com/users/tjanez/repos", "events_url": "https://api.github.com/users/tjanez/events{/privacy}", "received_events_url": "https://api.github.com/users/tjanez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-26T10:14:33Z", "updated_at": "2017-04-28T08:13:53Z", "closed_at": "2017-04-27T17:48:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, [git tag `2.0.0`](https://github.com/PyCQA/pydocstyle/releases/tag/2.0.0) references commit d77af70be15e70ad2db62a59bb80400c378cb62b from Mar 19, 2017.\r\n\r\nBut this code differs from the [code released on PyPI](https://pypi.python.org/packages/b0/33/52e2fa5662fbb2a8bc9bdfe31327cd58c2f856b31851b73fc5baf86a2a14/pydocstyle-2.0.0.zip#md5=2be57712e2743d23949bafed957d8c86).\r\n\r\n```bash\r\n$ curl -sSL https://github.com/PyCQA/pydocstyle/archive/2.0.0.zip > pydocstyle-2.0.0-from-github-tag.zip\r\n$ curl -sSL \"https://pypi.python.org/packages/b0/33/52e2fa5662fbb2a8bc9bdfe31327cd58c2f856b31851b73fc5baf86a2a14/pydocstyle-2.0.0.zip#md5=2be57712e2743d23949bafed957d8c86\" > pydocstyle-2.0.0-from-pypi.zip\r\n$ unzip -q pydocstyle-2.0.0-from-github-tag.zip\r\n$ mv pydocstyle-2.0.0 pydocstyle-from-github-tag\r\n$ unzip -q pydocstyle-2.0.0-from-pypi.zip \r\n$ mv pydocstyle-2.0.0 pydocstyle-from-pypi\r\n$ diff --recursive --brief pydocstyle-from-github-tag/ pydocstyle-from-pypi/ | grep -v \"^Only in pydocstyle-from-\"\r\nFiles pydocstyle-from-github-tag/LICENSE-MIT and pydocstyle-from-pypi/LICENSE-MIT differ\r\nFiles pydocstyle-from-github-tag/MANIFEST.in and pydocstyle-from-pypi/MANIFEST.in differ\r\nFiles pydocstyle-from-github-tag/README.rst and pydocstyle-from-pypi/README.rst differ\r\nFiles pydocstyle-from-github-tag/setup.cfg and pydocstyle-from-pypi/setup.cfg differ\r\nFiles pydocstyle-from-github-tag/setup.py and pydocstyle-from-pypi/setup.py differ\r\nFiles pydocstyle-from-github-tag/src/pydocstyle/checker.py and pydocstyle-from-pypi/src/pydocstyle/checker.py differ\r\nFiles pydocstyle-from-github-tag/src/pydocstyle/cli.py and pydocstyle-from-pypi/src/pydocstyle/cli.py differ\r\nFiles pydocstyle-from-github-tag/src/pydocstyle/config.py and pydocstyle-from-pypi/src/pydocstyle/config.py differ\r\nFiles pydocstyle-from-github-tag/src/pydocstyle/data/imperatives_blacklist.txt and pydocstyle-from-pypi/src/pydocstyle/data/imperatives_blacklist.txt differ\r\nFiles pydocstyle-from-github-tag/src/pydocstyle/data/imperatives.txt and pydocstyle-from-pypi/src/pydocstyle/data/imperatives.txt differ\r\nFiles pydocstyle-from-github-tag/src/pydocstyle/__init__.py and pydocstyle-from-pypi/src/pydocstyle/__init__.py differ\r\nFiles pydocstyle-from-github-tag/src/pydocstyle/__main__.py and pydocstyle-from-pypi/src/pydocstyle/__main__.py differ\r\nFiles pydocstyle-from-github-tag/src/pydocstyle/parser.py and pydocstyle-from-pypi/src/pydocstyle/parser.py differ\r\nFiles pydocstyle-from-github-tag/src/pydocstyle/utils.py and pydocstyle-from-pypi/src/pydocstyle/utils.py differ\r\nFiles pydocstyle-from-github-tag/src/pydocstyle/violations.py and pydocstyle-from-pypi/src/pydocstyle/violations.py differ\r\nFiles pydocstyle-from-github-tag/src/pydocstyle/wordlists.py and pydocstyle-from-pypi/src/pydocstyle/wordlists.py differ\r\n$ diff --recursive pydocstyle-from-github-tag/ pydocstyle-from-pypi/ | grep -v \"^Only in pydocstyle-from-\" | wc -l\r\n5586\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/250", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/250/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/250/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/250", "id": 224080865, "node_id": "MDU6SXNzdWUyMjQwODA4NjU=", "number": 250, "title": "Multi-line entries in configuration file", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "shacharoo", "id": 13560060, "node_id": "MDQ6VXNlcjEzNTYwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/13560060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacharoo", "html_url": "https://github.com/shacharoo", "followers_url": "https://api.github.com/users/shacharoo/followers", "following_url": "https://api.github.com/users/shacharoo/following{/other_user}", "gists_url": "https://api.github.com/users/shacharoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacharoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacharoo/subscriptions", "organizations_url": "https://api.github.com/users/shacharoo/orgs", "repos_url": "https://api.github.com/users/shacharoo/repos", "events_url": "https://api.github.com/users/shacharoo/events{/privacy}", "received_events_url": "https://api.github.com/users/shacharoo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shacharoo", "id": 13560060, "node_id": "MDQ6VXNlcjEzNTYwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/13560060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacharoo", "html_url": "https://github.com/shacharoo", "followers_url": "https://api.github.com/users/shacharoo/followers", "following_url": "https://api.github.com/users/shacharoo/following{/other_user}", "gists_url": "https://api.github.com/users/shacharoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacharoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacharoo/subscriptions", "organizations_url": "https://api.github.com/users/shacharoo/orgs", "repos_url": "https://api.github.com/users/shacharoo/repos", "events_url": "https://api.github.com/users/shacharoo/events{/privacy}", "received_events_url": "https://api.github.com/users/shacharoo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-04-25T09:46:17Z", "updated_at": "2017-09-18T12:15:18Z", "closed_at": "2017-09-18T12:15:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Related tool ``flake8`` explicitly supports multi-line configuration entries (which can be intermixed with comments) as described in http://flake8.pycqa.org/en/latest/user/configuration.html\r\n\r\ne.g.\r\n\r\n```\r\n[flake8]\r\n# it's not a bug that we aren't using all of hacking\r\nignore =\r\n    # F812: list comprehension redefines ...\r\n    F812,\r\n    # H101: Use TODO(NAME)\r\n    H101,\r\n    # H202: assertRaises Exception too broad\r\n    H202,\r\n    # H233: Python 3.x incompatible use of print operator\r\n    H233,\r\n    # H301: one import per line\r\n    H301,\r\n    # H306: imports not in alphabetical order (time, os)\r\n    H306,\r\n    # H401: docstring should not start with a space\r\n    H401,\r\n    # H403: multi line docstrings should end on a new line\r\n    H403,\r\n    # H404: multi line docstring should start without a leading new line\r\n    H404,\r\n    # H405: multi line docstring summary not separated with an empty line\r\n    H405,\r\n    # H501: Do not use self.__dict__ for string formatting\r\n    H501\r\n```\r\n\r\nI would like to be able to do the same in ``.pydocstyle`` for our ``ignore =`` list in order to comment why we ignore some entries, and facilitate merging edits to the file.\r\n\r\nIn my testing with pydocstyle v2.0.0 an example like this fails (it seems to use an empty ignore list).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/245", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/245/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/245/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/245", "id": 219948788, "node_id": "MDU6SXNzdWUyMTk5NDg3ODg=", "number": 245, "title": "Perform markup validation of docstrings, e.g. reStructuredText", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-06T16:03:06Z", "updated_at": "2017-06-17T14:32:37Z", "closed_at": "2017-06-17T14:32:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is an enhancement suggestion / wish list item.\r\n\r\nI would like to be able to validate the markup used in Python docstrings, specifically as reStructuredText (aka RST, which as per PEP287 https://www.python.org/dev/peps/pep-0287/ is recommended), but others might want to use e.g. markdown.\r\n\r\nCross-reference ``restructuredtext-lint`` question https://github.com/twolfson/restructuredtext-lint/issues/34", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/244", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/244/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/244/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/244", "id": 218564037, "node_id": "MDU6SXNzdWUyMTg1NjQwMzc=", "number": 244, "title": "Config file options are not all valid", "user": {"login": "dsayling", "id": 8107880, "node_id": "MDQ6VXNlcjgxMDc4ODA=", "avatar_url": "https://avatars3.githubusercontent.com/u/8107880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsayling", "html_url": "https://github.com/dsayling", "followers_url": "https://api.github.com/users/dsayling/followers", "following_url": "https://api.github.com/users/dsayling/following{/other_user}", "gists_url": "https://api.github.com/users/dsayling/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsayling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsayling/subscriptions", "organizations_url": "https://api.github.com/users/dsayling/orgs", "repos_url": "https://api.github.com/users/dsayling/repos", "events_url": "https://api.github.com/users/dsayling/events{/privacy}", "received_events_url": "https://api.github.com/users/dsayling/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-31T17:16:25Z", "updated_at": "2017-03-31T20:04:59Z", "closed_at": "2017-03-31T20:04:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried setting up a \".pydocstyle.ini\" as my config file, however it wasn't detected on execute. I've worked around it be calling it \".pydocstyle\". Either the documentation should be updated or the config file option allowed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/242", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/242/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/242/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/242", "id": 215324289, "node_id": "MDU6SXNzdWUyMTUzMjQyODk=", "number": 242, "title": "How to fix error D213?", "user": {"login": "htiga", "id": 10069953, "node_id": "MDQ6VXNlcjEwMDY5OTUz", "avatar_url": "https://avatars2.githubusercontent.com/u/10069953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/htiga", "html_url": "https://github.com/htiga", "followers_url": "https://api.github.com/users/htiga/followers", "following_url": "https://api.github.com/users/htiga/following{/other_user}", "gists_url": "https://api.github.com/users/htiga/gists{/gist_id}", "starred_url": "https://api.github.com/users/htiga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/htiga/subscriptions", "organizations_url": "https://api.github.com/users/htiga/orgs", "repos_url": "https://api.github.com/users/htiga/repos", "events_url": "https://api.github.com/users/htiga/events{/privacy}", "received_events_url": "https://api.github.com/users/htiga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-20T03:40:17Z", "updated_at": "2017-03-23T14:19:42Z", "closed_at": "2017-03-23T14:19:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I find that no matter how I write multi-line docstring, there is an error D213. Even the source code of pydocstyle itself below: [source code of pydocstyle that raises D213](https://github.com/PyCQA/pydocstyle/blob/286d9336f05d4a4fa9f0f0e7d2d42423467736e4/src/pydocstyle/checker.py#L263). Is this a bug or do I miss anything?\r\n\r\n```python\r\ndef check_multi_line_summary_start(self, definition, docstring):\r\n    \"\"\"D21{2,3}: Multi-line docstring summary style check.\r\n\r\n    A multi-line docstring summary should start either at the first,\r\n    or separately at the second line of a docstring.\r\n\r\n    \"\"\"\r\n    if docstring:\r\n        start_triple = [\r\n            '\"\"\"', \"'''\",\r\n            'u\"\"\"', \"u'''\",\r\n            'r\"\"\"', \"r'''\",\r\n            'ur\"\"\"', \"ur'''\"\r\n        ]\r\n\r\n        lines = ast.literal_eval(docstring).split('\\n')\r\n        if len(lines) > 1:\r\n            first = docstring.split(\"\\n\")[0].strip().lower()\r\n            if first in start_triple:\r\n                return violations.D212()\r\n            else:\r\n                return violations.D213()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/239", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/239/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/239/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/239", "id": 211161758, "node_id": "MDU6SXNzdWUyMTExNjE3NTg=", "number": 239, "title": "1.2 Release?", "user": {"login": "jacebrowning", "id": 939501, "node_id": "MDQ6VXNlcjkzOTUwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/939501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacebrowning", "html_url": "https://github.com/jacebrowning", "followers_url": "https://api.github.com/users/jacebrowning/followers", "following_url": "https://api.github.com/users/jacebrowning/following{/other_user}", "gists_url": "https://api.github.com/users/jacebrowning/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacebrowning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacebrowning/subscriptions", "organizations_url": "https://api.github.com/users/jacebrowning/orgs", "repos_url": "https://api.github.com/users/jacebrowning/repos", "events_url": "https://api.github.com/users/jacebrowning/events{/privacy}", "received_events_url": "https://api.github.com/users/jacebrowning/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-01T18:04:08Z", "updated_at": "2017-04-19T15:46:56Z", "closed_at": "2017-04-19T15:22:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There have been 88 commits since the 1.1.1 release on October 4, 2016 and the 1.2.0 milestone is 5 months overdue. Can we get a new release?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/234", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/234/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/234/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/234", "id": 204598010, "node_id": "MDU6SXNzdWUyMDQ1OTgwMTA=", "number": 234, "title": "How to work with long literal lines in docstring? (backslash-newline not supported)", "user": {"login": "glennmatthews", "id": 5603551, "node_id": "MDQ6VXNlcjU2MDM1NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5603551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glennmatthews", "html_url": "https://github.com/glennmatthews", "followers_url": "https://api.github.com/users/glennmatthews/followers", "following_url": "https://api.github.com/users/glennmatthews/following{/other_user}", "gists_url": "https://api.github.com/users/glennmatthews/gists{/gist_id}", "starred_url": "https://api.github.com/users/glennmatthews/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glennmatthews/subscriptions", "organizations_url": "https://api.github.com/users/glennmatthews/orgs", "repos_url": "https://api.github.com/users/glennmatthews/repos", "events_url": "https://api.github.com/users/glennmatthews/events{/privacy}", "received_events_url": "https://api.github.com/users/glennmatthews/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-02-01T14:28:03Z", "updated_at": "2017-04-15T09:22:52Z", "closed_at": "2017-02-15T19:40:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If I have have long lines in a docstring that need to remain so (e.g., a doctest that produces long output), it gets flagged by `pycodestyle` for exceeding the 79-character line limit (`E501`). However, if I use backslash-newlines to wrap the doctest, then `pydocstyle` flags it with `D207` and `D301`. Short of using `# noqa`, is there some other workaround? If not, can `D207`/`D301` be enhanced to permit backslash-newline wrapping as valid?\r\n\r\nexample.py:\r\n\r\n```python\r\n\"\"\"Module docstring.\"\"\"\r\n\r\n\r\ndef foo():\r\n    \"\"\"Docstring not liked by pycodestyle.\r\n\r\n    >>> print(\"this is a doctest which produces some long unwrapped output, sorry about that!\")\r\n    this is a doctest which produces some long unwrapped output, sorry about that!\r\n    \"\"\"\r\n    pass\r\n\r\n\r\ndef bar():\r\n    \"\"\"Docstring not liked by pydocstyle.\r\n\r\n    >>> print(\"this is a doctest which produces some long unwrapped output,\\\r\nsorry about that!\")\r\n    this is a doctest which produces some long unwrapped output,\\\r\nsorry about that!\r\n    \"\"\"\r\n    pass\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import doctest\r\n    doctest.testmod()\r\n```\r\n\r\n```\r\nGLMATTHE-M-33R4:cot glmatthe$ pycodestyle example.py\r\nexample.py:7:80: E501 line too long (95 > 79 characters)\r\nexample.py:8:80: E501 line too long (82 > 79 characters)\r\nGLMATTHE-M-33R4:cot glmatthe$ pydocstyle example.py\r\nexample.py:13 in public function `bar`:\r\n        D301: Use r\"\"\" if any backslashes in a docstring\r\nexample.py:13 in public function `bar`:\r\n        D207: Docstring is under-indented\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/231", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/231/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/231/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/231", "id": 202415342, "node_id": "MDU6SXNzdWUyMDI0MTUzNDI=", "number": 231, "title": "Improve description of --add-ignore option", "user": {"login": "cdeil", "id": 852409, "node_id": "MDQ6VXNlcjg1MjQwOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/852409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdeil", "html_url": "https://github.com/cdeil", "followers_url": "https://api.github.com/users/cdeil/followers", "following_url": "https://api.github.com/users/cdeil/following{/other_user}", "gists_url": "https://api.github.com/users/cdeil/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdeil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdeil/subscriptions", "organizations_url": "https://api.github.com/users/cdeil/orgs", "repos_url": "https://api.github.com/users/cdeil/repos", "events_url": "https://api.github.com/users/cdeil/events{/privacy}", "received_events_url": "https://api.github.com/users/cdeil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "shacharoo", "id": 13560060, "node_id": "MDQ6VXNlcjEzNTYwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/13560060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacharoo", "html_url": "https://github.com/shacharoo", "followers_url": "https://api.github.com/users/shacharoo/followers", "following_url": "https://api.github.com/users/shacharoo/following{/other_user}", "gists_url": "https://api.github.com/users/shacharoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacharoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacharoo/subscriptions", "organizations_url": "https://api.github.com/users/shacharoo/orgs", "repos_url": "https://api.github.com/users/shacharoo/repos", "events_url": "https://api.github.com/users/shacharoo/events{/privacy}", "received_events_url": "https://api.github.com/users/shacharoo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shacharoo", "id": 13560060, "node_id": "MDQ6VXNlcjEzNTYwMDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/13560060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacharoo", "html_url": "https://github.com/shacharoo", "followers_url": "https://api.github.com/users/shacharoo/followers", "following_url": "https://api.github.com/users/shacharoo/following{/other_user}", "gists_url": "https://api.github.com/users/shacharoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacharoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacharoo/subscriptions", "organizations_url": "https://api.github.com/users/shacharoo/orgs", "repos_url": "https://api.github.com/users/shacharoo/repos", "events_url": "https://api.github.com/users/shacharoo/events{/privacy}", "received_events_url": "https://api.github.com/users/shacharoo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2017-01-22T22:27:28Z", "updated_at": "2017-09-23T06:27:05Z", "closed_at": "2017-09-23T06:27:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think the current `--add-ignore` option is a copy of `--add-select`, and it should be changed from \"errors to check\" to \"errors to ignore\", no?\r\n```\r\n  --add-select=<codes>  amend the list of errors to check for by specifying\r\n                        more error codes to check.\r\n  --add-ignore=<codes>  amend the list of errors to check for by specifying\r\n                        more error codes to ignore.\r\n```\r\n\r\nAn unrelated suggestion concerning:\r\n```\r\n$ pydocstyle --convention=numpy --ignore=D410\r\nCannot pass both ignore and convention. They are mutually exclusive.\r\n```\r\nI would have found it useful if that message had this at the end:\r\n```\r\nYou can use `--add-ignore` instead of `--ignore`.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/230", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/230/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/230/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/230", "id": 202414546, "node_id": "MDU6SXNzdWUyMDI0MTQ1NDY=", "number": 230, "title": "False positives for D410 in Numpy convention", "user": {"login": "cdeil", "id": 852409, "node_id": "MDQ6VXNlcjg1MjQwOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/852409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdeil", "html_url": "https://github.com/cdeil", "followers_url": "https://api.github.com/users/cdeil/followers", "following_url": "https://api.github.com/users/cdeil/following{/other_user}", "gists_url": "https://api.github.com/users/cdeil/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdeil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdeil/subscriptions", "organizations_url": "https://api.github.com/users/cdeil/orgs", "repos_url": "https://api.github.com/users/cdeil/repos", "events_url": "https://api.github.com/users/cdeil/events{/privacy}", "received_events_url": "https://api.github.com/users/cdeil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-01-22T22:16:18Z", "updated_at": "2017-04-19T07:28:24Z", "closed_at": "2017-04-19T05:37:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "@farmersez - Thank you very much for adding the Numpy convention in #226!!!\r\n\r\nRunning it on some larger projects using the Numpy convention (Numpy, Scipy, Astropy), the most common message I see is\r\n```\r\n D410: Missing blank line after section\r\n```\r\n\r\nPersonally, I don't see how requiring an empty newline at the end of the docstring is useful.\r\n\r\nBut even if that is considered part of the convention, I think pydocstyle reports false positives.\r\n\r\nFor example for https://github.com/numpy/numpy/blob/master/doc/example.py I get\r\n```\r\n$ pydocstyle --convention=numpy example.py\r\nexample.py:1 at module level:\r\n        D400: First line should end with a period (not 'd')\r\nexample.py:1 at module level:\r\n        D205: 1 blank line required between summary line and description (found 0)\r\nexample.py:1 at module level:\r\n        D404: First word of the docstring should not be `This`\r\nexample.py:38 in public function `foo`:\r\n        D400: First line should end with a period (not 'e')\r\nexample.py:38 in public function `foo`:\r\n        D205: 1 blank line required between summary line and description (found 0)\r\nexample.py:38 in public function `foo`:\r\n        D202: No blank lines allowed after function docstring (found 1)\r\nexample.py:38 in public function `foo`:\r\n        D410: Missing blank line after section ('Parameters')\r\nexample.py:38 in public function `foo`:\r\n        D410: Missing blank line after section ('Returns')\r\nexample.py:38 in public function `foo`:\r\n        D410: Missing blank line after section ('Other Parameters')\r\nexample.py:38 in public function `foo`:\r\n        D410: Missing blank line after section ('Raises')\r\nexample.py:38 in public function `foo`:\r\n        D410: Missing blank line after section ('See Also')\r\nexample.py:38 in public function `foo`:\r\n        D410: Missing blank line after section ('Notes')\r\nexample.py:38 in public function `foo`:\r\n        D410: Missing blank line after section ('References')\r\nexample.py:38 in public function `foo`:\r\n        D410: Missing blank line after section ('Examples')\r\n```\r\n\r\nE.g. the last D410 is incorrect, I think: there is a blank line after the `Examples` section.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/228", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/228/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/228/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/228", "id": 202280059, "node_id": "MDU6SXNzdWUyMDIyODAwNTk=", "number": 228, "title": "Checks for docstring line lengths", "user": {"login": "brianv0", "id": 549395, "node_id": "MDQ6VXNlcjU0OTM5NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/549395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianv0", "html_url": "https://github.com/brianv0", "followers_url": "https://api.github.com/users/brianv0/followers", "following_url": "https://api.github.com/users/brianv0/following{/other_user}", "gists_url": "https://api.github.com/users/brianv0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianv0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianv0/subscriptions", "organizations_url": "https://api.github.com/users/brianv0/orgs", "repos_url": "https://api.github.com/users/brianv0/repos", "events_url": "https://api.github.com/users/brianv0/events{/privacy}", "received_events_url": "https://api.github.com/users/brianv0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-21T01:24:53Z", "updated_at": "2018-06-29T23:03:07Z", "closed_at": "2018-06-26T18:50:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "PEP8 recommends doc strings actually be 72 characters or less, and it'd be nice to have a way to check for docstring length.\r\n\r\nThis may be a bit controversial as this project itself would violate the 72 character recommendation, but it does adhere to the 79 character recommendation. Meanwhile, PEP8 also mentions a relaxed 100 character line length:\r\n\r\n> Some teams strongly prefer a longer line length. For code maintained exclusively or primarily by a team that can reach agreement on this issue, it is okay to increase the nominal line length from 80 to 100 characters (effectively increasing the maximum length to 99 characters), provided that comments and docstrings are still wrapped at 72 characters.\r\n\r\nIt may be tough to reconcile these, but I a check that verifies that all doc strings are less than 79 characters would be less controversial (as this project meets those standards) as well as a potential additional 72 character length check that could be added in the future.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/216", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/216/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/216/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/216", "id": 183086941, "node_id": "MDU6SXNzdWUxODMwODY5NDE=", "number": 216, "title": "Drop pep257 backward compatability ", "user": {"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 452210184, "node_id": "MDU6TGFiZWw0NTIyMTAxODQ=", "url": "https://api.github.com/repos/PyCQA/pydocstyle/labels/Major%20(API%20Change)", "name": "Major (API Change)", "color": "eeeeee", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2016-10-14T15:57:57Z", "updated_at": "2016-10-25T16:00:21Z", "closed_at": "2016-10-25T16:00:21Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Remove the `pep257` executable entry point and relevant tests.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/211", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/211/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/211/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/211", "id": 181742728, "node_id": "MDU6SXNzdWUxODE3NDI3Mjg=", "number": 211, "title": "Add an api?", "user": {"login": "goanpeca", "id": 3627835, "node_id": "MDQ6VXNlcjM2Mjc4MzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3627835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goanpeca", "html_url": "https://github.com/goanpeca", "followers_url": "https://api.github.com/users/goanpeca/followers", "following_url": "https://api.github.com/users/goanpeca/following{/other_user}", "gists_url": "https://api.github.com/users/goanpeca/gists{/gist_id}", "starred_url": "https://api.github.com/users/goanpeca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goanpeca/subscriptions", "organizations_url": "https://api.github.com/users/goanpeca/orgs", "repos_url": "https://api.github.com/users/goanpeca/repos", "events_url": "https://api.github.com/users/goanpeca/events{/privacy}", "received_events_url": "https://api.github.com/users/goanpeca/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-07T18:55:17Z", "updated_at": "2016-10-25T16:09:07Z", "closed_at": "2016-10-25T16:06:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am working currently on a small library to unify all different available tools around python and I was wondering if there was a plan to have an api that would provide results as a dictionary, or at least add a `--json` flag to the command so it can be parsed easily. Using regex feels clunky\n\nSomething along the lines of\n\n``` python\nfrom pydocstyle.api import check\n\nresults = check(...)\n\n# Where results would store the info as\nresults = {\n    'filepath1.py':\n        {\n        'problems:\n            [{'line': '#', 'col': '#', 'code': '###', 'message': ''}, ...],\n        'error': '',\n    },\n    'filepath2.py':\n        {\n        'problems:\n            [{'line': '#', 'col': '#', 'code': '###', 'message': ''}, ...],\n        'error': '',\n    }\n}\n\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/207", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/207/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/207/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/207", "id": 180301602, "node_id": "MDU6SXNzdWUxODAzMDE2MDI=", "number": 207, "title": "pydocstyle 1.1.0 isn't compatible with flake8", "user": {"login": "danieljacobs1", "id": 19263953, "node_id": "MDQ6VXNlcjE5MjYzOTUz", "avatar_url": "https://avatars2.githubusercontent.com/u/19263953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieljacobs1", "html_url": "https://github.com/danieljacobs1", "followers_url": "https://api.github.com/users/danieljacobs1/followers", "following_url": "https://api.github.com/users/danieljacobs1/following{/other_user}", "gists_url": "https://api.github.com/users/danieljacobs1/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieljacobs1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieljacobs1/subscriptions", "organizations_url": "https://api.github.com/users/danieljacobs1/orgs", "repos_url": "https://api.github.com/users/danieljacobs1/repos", "events_url": "https://api.github.com/users/danieljacobs1/events{/privacy}", "received_events_url": "https://api.github.com/users/danieljacobs1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-09-30T13:18:03Z", "updated_at": "2016-10-07T13:24:14Z", "closed_at": "2016-10-07T13:24:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have started seeing errors in our flake8 output upon upgrading to the newest version of pydocstyle (1.1.0). We normally use pydocstyle through flake8. The errors were like the below:\n\n`flake8.exceptions.FailedToLoadPlugin: Flake8 failed to load plugin \"D\" due to module 'pydocstyle' has no attribute 'Error'.`\n\nAnd indeed, when I run: `python -c \"import pydocstyle; print(dir(pydocstyle))\"`\n\nI can see that there are many symbols not present in 1.1.0 that are present in 1.0.0:\n\n```\n$ python -c \"import pydocstyle; print(dir(pydocstyle))\" # pydocstyle version 1.1.0\n\n['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'check', 'checker', 'config', 'parser', 'utils', 'violations']\n\n $ python -c \"import pydocstyle; print(dir(pydocstyle))\" # pydocstyle version 1.0.0\n\n['AllError', 'AttrDict', 'CheckConfiguration', 'Class', 'ConfigurationParser', 'D100', 'D101', 'D102', 'D103', 'D104', 'D105', 'D1xx', 'D200', 'D201', 'D202', 'D203', 'D204', 'D205', 'D206', 'D207', 'D208', 'D209', 'D210', 'D211', 'D2xx', 'D300', 'D301', 'D302', 'D3xx', 'D400', 'D401', 'D402', 'D403', 'D4xx', 'Decorator', 'Definition', 'Error', 'ErrorRegistry', 'Function', 'INVALID_OPTIONS_RETURN_CODE', 'IllegalConfiguration', 'Method', 'Module', 'NO_VIOLATIONS_RETURN_CODE', 'NestedClass', 'NestedFunction', 'PEP257Checker', 'Package', 'Parser', 'RawConfigParser', 'RunConfiguration', 'Set', 'StringIO', 'Token', 'TokenKind', 'TokenStream', 'VARIADIC_MAGIC_METHODS', 'VIOLATIONS_RETURN_CODE', 'Value', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '__version__', 'ast', 'chain', 'check', 'check_for', 'check_initialized', 'conventions', 'copy', 'defaultdict', 'dropwhile', 'humanize', 'is_ascii', 'is_blank', 'is_magic', 'itertools', 'leading_space', 'log', 'logging', 'main', 'main_pep257', 'namedtuple', 'os', 'parse', 're', 'run_pydocstyle', 'setup_stream_handlers', 'string', 'sys', 'takewhile', 'tk', 'tokenize_open', 'with_statement']\n```\n\nClearly `flake8` is expecting `Error` (at the very least), which is the problem.\n\nHowever, the `__all__` of `pydocstyle` only includes `check`, so it might not be appropriate for `flake8` to be accessing the other symbols.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/206", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/206/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/206/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/206", "id": 180093227, "node_id": "MDU6SXNzdWUxODAwOTMyMjc=", "number": 206, "title": "Drop support for Python 2.6", "user": {"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 452210184, "node_id": "MDU6TGFiZWw0NTIyMTAxODQ=", "url": "https://api.github.com/repos/PyCQA/pydocstyle/labels/Major%20(API%20Change)", "name": "Major (API Change)", "color": "eeeeee", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2016-09-29T16:08:37Z", "updated_at": "2016-10-14T16:49:34Z", "closed_at": "2016-10-14T16:49:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The 2.0.0 release will not support Python 2.6 - this issue is for dropping it from the docs and making some changes:\n1. Remove indices from `format` calls where possible.\n2. Use set literals where possible (e.g., `{\"D100\", \"D102\"}`)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/202", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/202/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/202/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/202", "id": 174091515, "node_id": "MDU6SXNzdWUxNzQwOTE1MTU=", "number": 202, "title": "Add ignore comments", "user": {"login": "larsoner", "id": 2365790, "node_id": "MDQ6VXNlcjIzNjU3OTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2365790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larsoner", "html_url": "https://github.com/larsoner", "followers_url": "https://api.github.com/users/larsoner/followers", "following_url": "https://api.github.com/users/larsoner/following{/other_user}", "gists_url": "https://api.github.com/users/larsoner/gists{/gist_id}", "starred_url": "https://api.github.com/users/larsoner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larsoner/subscriptions", "organizations_url": "https://api.github.com/users/larsoner/orgs", "repos_url": "https://api.github.com/users/larsoner/repos", "events_url": "https://api.github.com/users/larsoner/events{/privacy}", "received_events_url": "https://api.github.com/users/larsoner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-30T18:31:10Z", "updated_at": "2016-08-31T19:15:51Z", "closed_at": "2016-08-31T19:15:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In most packages like `pyflakes`, `pep8`, and `flake8` you can do something like a `# noqa`:\n\n```\nbad_style = whatever  # noqa\n```\n\nIt seems like there should be something like this for `pydocstyle`. It would allow temporary workarounds (or maybe permanent enough ones!) for things like #68, #171, #189, and any other shortcomings that may be present.\n\nI'm happy to try adding this. I'd probably try to follow what `flake8` does since it seems pretty complete:\n- `# noqa` no checks\n- `# pydocstyle: noqa` no checks\n- `# noqa: D200` ignore a specific error or comma-separated list of errors\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/201", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/201/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/201/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/201", "id": 173662700, "node_id": "MDU6SXNzdWUxNzM2NjI3MDA=", "number": 201, "title": "Errors should be printed to stdout", "user": {"login": "gvanrossum", "id": 2894642, "node_id": "MDQ6VXNlcjI4OTQ2NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2894642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gvanrossum", "html_url": "https://github.com/gvanrossum", "followers_url": "https://api.github.com/users/gvanrossum/followers", "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}", "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}", "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions", "organizations_url": "https://api.github.com/users/gvanrossum/orgs", "repos_url": "https://api.github.com/users/gvanrossum/repos", "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}", "received_events_url": "https://api.github.com/users/gvanrossum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 450888814, "node_id": "MDU6TGFiZWw0NTA4ODg4MTQ=", "url": "https://api.github.com/repos/PyCQA/pydocstyle/labels/Hacktoberfest", "name": "Hacktoberfest", "color": "7983e0", "default": false, "description": ""}, {"id": 452210184, "node_id": "MDU6TGFiZWw0NTIyMTAxODQ=", "url": "https://api.github.com/repos/PyCQA/pydocstyle/labels/Major%20(API%20Change)", "name": "Major (API Change)", "color": "eeeeee", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-08-28T19:24:11Z", "updated_at": "2016-12-03T20:06:25Z", "closed_at": "2016-12-03T20:06:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "In #26 and #29 you changed errors to be printed to stderr. But actually for a linter that's quite inconvenient when you want to post-process the output. I checked flake8, pycodestyle, pyflakes and they all write their errors to stdout (and so does mypy).\n\nOnly errors that cause the program to exit immediately (e.g. command line syntax or can't open file) should go to stderr; the expected output (diagnostics about doc style) should go to stdout.\n\nPlease?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/199", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/199/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/199/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/199", "id": 167678146, "node_id": "MDU6SXNzdWUxNjc2NzgxNDY=", "number": 199, "title": "D100 claims module is public when it is prefixed _", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 10650658, "node_id": "MDU6TGFiZWwxMDY1MDY1OA==", "url": "https://api.github.com/repos/PyCQA/pydocstyle/labels/Bugfix", "name": "Bugfix", "color": "8e0830", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2016-07-26T18:30:09Z", "updated_at": "2016-12-03T10:23:43Z", "closed_at": "2016-12-03T10:23:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`Module.is_public` is hardwired to `True`, which means the following occurs\n\n```\nhtml5lib-python/html5lib/_inputstream.py:1:1: D100 Missing docstring in public module\n```\n\nProcessing modules like this raises lots of other terminology problems, such as : should a class/def without a `_` prefix in a private module be considered \"public\".\n\nA simplistic approach is to simply not process modules beginning with `_` unless they are `__init__`, both in the pydocstyle `main()` and hope flake8-docstrings does the same.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/196", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/196/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/196/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/196/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/196", "id": 163517694, "node_id": "MDU6SXNzdWUxNjM1MTc2OTQ=", "number": 196, "title": "pydocstyle fails on \"raise X from Y\"", "user": {"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/PyCQA/pydocstyle/milestones/4", "html_url": "https://github.com/PyCQA/pydocstyle/milestone/4", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/milestones/4/labels", "id": 1726544, "node_id": "MDk6TWlsZXN0b25lMTcyNjU0NA==", "number": 4, "title": "pydocstyle 1.1.0", "description": "", "creator": {"login": "Nurdok", "id": 80665, "node_id": "MDQ6VXNlcjgwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/80665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nurdok", "html_url": "https://github.com/Nurdok", "followers_url": "https://api.github.com/users/Nurdok/followers", "following_url": "https://api.github.com/users/Nurdok/following{/other_user}", "gists_url": "https://api.github.com/users/Nurdok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nurdok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nurdok/subscriptions", "organizations_url": "https://api.github.com/users/Nurdok/orgs", "repos_url": "https://api.github.com/users/Nurdok/repos", "events_url": "https://api.github.com/users/Nurdok/events{/privacy}", "received_events_url": "https://api.github.com/users/Nurdok/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 6, "state": "closed", "created_at": "2016-04-23T11:24:01Z", "updated_at": "2016-09-29T15:29:17Z", "due_on": "2016-09-29T07:00:00Z", "closed_at": "2016-09-29T15:29:17Z"}, "comments": 2, "created_at": "2016-07-02T13:03:49Z", "updated_at": "2016-09-11T11:54:23Z", "closed_at": "2016-09-11T11:54:23Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The reason is that the \"from\" keyword triggers a \"from X import Y\" parsing, which fails.\n\n```\nC:\\Users\\rachum\\code\\testing_grounds>cat example.py\nraise RuntimeError() from None\nC:\\Users\\rachum\\code\\testing_grounds>python example.py  # this syntax is legal in Python 3\nTraceback (most recent call last):\n  File \"example.py\", line 1, in <module>\n    raise RuntimeError() from None\nRuntimeError\n\nC:\\Users\\rachum\\code\\testing_grounds>pydocstyle example.py\nTraceback (most recent call last):\n  File \"c:\\users\\rachum\\appdata\\local\\programs\\python\\python35-32\\lib\\runpy.py\", line 170, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"c:\\users\\rachum\\appdata\\local\\programs\\python\\python35-32\\lib\\runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"C:\\Users\\rachum\\AppData\\Local\\Programs\\Python\\Python35-32\\Scripts\\pydocstyle.exe\\__main__.py\", line 9, in <module>\n  File \"c:\\users\\rachum\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\pydocstyle.py\", line 1745, in main\n    sys.exit(run_pydocstyle(use_pep257))\n  File \"c:\\users\\rachum\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\pydocstyle.py\", line 1360, in run_pydocstyle\n    errors.extend(check((filename,), select=checked_codes))\n  File \"c:\\users\\rachum\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\pydocstyle.py\", line 1297, in check\n    for error in PEP257Checker().check_source(source, filename):\n  File \"c:\\users\\rachum\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\pydocstyle.py\", line 1398, in check_source\n    module = parse(StringIO(source), filename)\n  File \"c:\\users\\rachum\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\pydocstyle.py\", line 276, in __call__\n    return self.parse_module()\n  File \"c:\\users\\rachum\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\pydocstyle.py\", line 429, in parse_module\n    children = list(self.parse_definitions(Module, all=True))\n  File \"c:\\users\\rachum\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\pydocstyle.py\", line 376, in parse_definitions\n    self.parse_from_import_statement()\n  File \"c:\\users\\rachum\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\pydocstyle.py\", line 510, in parse_from_import_statement\n    is_future_import = self._parse_from_import_source()\n  File \"c:\\users\\rachum\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\pydocstyle.py\", line 525, in _parse_from_import_source\n    self.check_current(value='import')\n  File \"c:\\users\\rachum\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\pydocstyle.py\", line 501, in check_current\n    assert kind_valid and value_valid, msg\nAssertionError:\nUnexpected token at line 2:\n\nIn file: example.py\n\nGot kind tk.ENDMARKER\nGot value\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/194", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/194/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/194/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/194", "id": 162336086, "node_id": "MDU6SXNzdWUxNjIzMzYwODY=", "number": 194, "title": "New bugfix release", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-26T16:45:48Z", "updated_at": "2016-09-29T15:51:55Z", "closed_at": "2016-09-29T15:51:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be nice to have a new release, since the bug where filenames are getting lowercased is very annoying (https://github.com/PyCQA/pydocstyle/pull/181).\n\nFrom the milestones it looks like 1.1.0 is meant to get some more things in, so maybe 1.0.1 could be released with selected bug fixes only (in case master is not considered to be stable enough at the moment)?!\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/193", "repository_url": "https://api.github.com/repos/PyCQA/pydocstyle", "labels_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/193/comments", "events_url": "https://api.github.com/repos/PyCQA/pydocstyle/issues/193/events", "html_url": "https://github.com/PyCQA/pydocstyle/issues/193", "id": 162043551, "node_id": "MDU6SXNzdWUxNjIwNDM1NTE=", "number": 193, "title": "Check for consistency of implicit and explicit return values", "user": {"login": "FichteFoll", "id": 931051, "node_id": "MDQ6VXNlcjkzMTA1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/931051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FichteFoll", "html_url": "https://github.com/FichteFoll", "followers_url": "https://api.github.com/users/FichteFoll/followers", "following_url": "https://api.github.com/users/FichteFoll/following{/other_user}", "gists_url": "https://api.github.com/users/FichteFoll/gists{/gist_id}", "starred_url": "https://api.github.com/users/FichteFoll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FichteFoll/subscriptions", "organizations_url": "https://api.github.com/users/FichteFoll/orgs", "repos_url": "https://api.github.com/users/FichteFoll/repos", "events_url": "https://api.github.com/users/FichteFoll/events{/privacy}", "received_events_url": "https://api.github.com/users/FichteFoll/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-23T23:10:36Z", "updated_at": "2016-06-23T23:28:55Z", "closed_at": "2016-06-23T23:28:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "About a year ago, a recommendation about consistency with implicit and explicit return values was added: https://hg.python.org/peps/comparison/dcca553d365d/pep-0008.txt\n\nIt would be nice if pydocstyle could check for this. I don't know parsing is performed, but I believe this to be possible.\n\nDue to the controversy of this recommendation and it most likely not being followed in a lot of code bases, it should probably be disabled by default.\n", "performed_via_github_app": null, "score": 1.0}]}