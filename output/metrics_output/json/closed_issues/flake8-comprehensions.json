{"total_count": 28, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/253", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/253/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/253/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/253", "id": 642904332, "node_id": "MDU6SXNzdWU2NDI5MDQzMzI=", "number": 253, "title": "Performance implications of C412", "user": {"login": "javierhonduco", "id": 959128, "node_id": "MDQ6VXNlcjk1OTEyOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/959128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/javierhonduco", "html_url": "https://github.com/javierhonduco", "followers_url": "https://api.github.com/users/javierhonduco/followers", "following_url": "https://api.github.com/users/javierhonduco/following{/other_user}", "gists_url": "https://api.github.com/users/javierhonduco/gists{/gist_id}", "starred_url": "https://api.github.com/users/javierhonduco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/javierhonduco/subscriptions", "organizations_url": "https://api.github.com/users/javierhonduco/orgs", "repos_url": "https://api.github.com/users/javierhonduco/repos", "events_url": "https://api.github.com/users/javierhonduco/events{/privacy}", "received_events_url": "https://api.github.com/users/javierhonduco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-06-22T09:22:29Z", "updated_at": "2020-06-22T14:14:23Z", "closed_at": "2020-06-22T09:56:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWe have some code that looks like:\r\n```python\r\ndef is_valid(vm: str) -> bool:\r\n  return vm in {machine for machine in machines}\r\n```\r\n\r\nAnd we got this lint error:\r\n\r\n> C412: Unnecessary (dict/list/set) comprehension - \u2018in\u2019 can take a generator.\r\n\r\nThis code is not particularly performance sensitive, so using a set or a generator probably does not make a big difference (and in fact probably the generator is faster!), but I am concerned that in other cases, applying the lint suggestion might result in a `O(n)` search rather than an amortised constant time.\r\n\r\nIn the original PR (#166) @adamchainz mentioned that [checking for inclusion in some generators, such as `range` is optimised](https://stackoverflow.com/questions/30081275/why-is-1000000000000000-in-range1000000000000001-so-fast-in-python-3) and that converting to a list / set and checking for including incurs in more memory copies and slower time overall, but as far as I know this is not true in other cases such as the one we bumped into.\r\n\r\nMaybe the lint message could be updated so folks are aware that it might have a performance penalty?\r\n\r\nCheers,\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/249", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/249/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/249/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/249", "id": 632009809, "node_id": "MDU6SXNzdWU2MzIwMDk4MDk=", "number": 249, "title": "Incorrect C408 rule warning for dict with keyword arguments", "user": {"login": "deveshks", "id": 13155849, "node_id": "MDQ6VXNlcjEzMTU1ODQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/13155849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deveshks", "html_url": "https://github.com/deveshks", "followers_url": "https://api.github.com/users/deveshks/followers", "following_url": "https://api.github.com/users/deveshks/following{/other_user}", "gists_url": "https://api.github.com/users/deveshks/gists{/gist_id}", "starred_url": "https://api.github.com/users/deveshks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deveshks/subscriptions", "organizations_url": "https://api.github.com/users/deveshks/orgs", "repos_url": "https://api.github.com/users/deveshks/repos", "events_url": "https://api.github.com/users/deveshks/events{/privacy}", "received_events_url": "https://api.github.com/users/deveshks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-06-05T22:12:03Z", "updated_at": "2020-06-06T09:07:55Z", "closed_at": "2020-06-05T23:30:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [C408 rule](https://github.com/adamchainz/flake8-comprehensions#c408-unnecessary-dictlisttuple-call---rewrite-as-a-literal) seems to fail on a dict with keyword arguments, but from the description of the rule, it should not fail.\r\n\r\n```\r\n$ cat scratch.py \r\na = dict(one=1, two=2, three=3)\r\n\r\n$ flake8 --version\r\n3.8.2 (flake8-bugbear: 20.1.4, flake8-comprehensions: 3.2.2, mccabe: 0.6.1, pycodestyle: 2.6.0, pyflakes: 2.2.0) CPython 3.8.2\r\non Darwin\r\n\r\n$ flake8 ~/Library/Preferences/PyCharmCE2019.3/scratches/scratch.py \r\nscratch.py:1:5: C408 Unnecessary dict call - rewrite as a literal.\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/234", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/234/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/234/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/234", "id": 595205966, "node_id": "MDU6SXNzdWU1OTUyMDU5NjY=", "number": 234, "title": "reversed(sorted(x)) is not the same thing as sorted(x, reverse=True)", "user": {"login": "gimbo", "id": 133770, "node_id": "MDQ6VXNlcjEzMzc3MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/133770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gimbo", "html_url": "https://github.com/gimbo", "followers_url": "https://api.github.com/users/gimbo/followers", "following_url": "https://api.github.com/users/gimbo/following{/other_user}", "gists_url": "https://api.github.com/users/gimbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/gimbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gimbo/subscriptions", "organizations_url": "https://api.github.com/users/gimbo/orgs", "repos_url": "https://api.github.com/users/gimbo/repos", "events_url": "https://api.github.com/users/gimbo/events{/privacy}", "received_events_url": "https://api.github.com/users/gimbo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-06T15:21:03Z", "updated_at": "2020-04-07T11:22:08Z", "closed_at": "2020-04-07T11:22:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Issue #60 recommended introducing a new rule suggesting that `reversed(sorted(...))` be replaced with `sorted(..., reverse=True)`, and that's now been released (C413).\r\n\r\nHowever, they are not equivalent. `sorted()` always returns a list (an iterable), but `reversed()` returns an `listreverseiterator` object (an iterator).\r\n\r\nThus, if we use `sorted(..., reverse=True`, we get a result which may be iterated over multiple times:\r\n\r\n```\r\n>>> x = sorted([2,4,5], reverse=True)\r\n>>> list(x)\r\n[5, 4, 2]\r\n>>> list(x)\r\n[5, 4, 2]\r\n```\r\n\r\nWhereas if we use `reversed(sorted(...))`, we get a result which may be iterated over just once:\r\n\r\n```\r\n>>> y = reversed(sorted([2,4,5]))\r\n>>> list(y)\r\n[5, 4, 2]\r\n>>> list(y)\r\n[]\r\n```\r\n\r\nThis is nitpicking, and it's probably less of a problem than if it was the other way around (at least the recommended change shouldn't introduce any logical errors this way round), so perhaps this is a WONTFIX \u2014 but I thought it was worth pointing out.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/212", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/212/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/212/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/212", "id": 551961644, "node_id": "MDU6SXNzdWU1NTE5NjE2NDQ=", "number": 212, "title": "Add filter, map, reduce to list of functions that take a generator in C407.", "user": {"login": "joaoe", "id": 461983, "node_id": "MDQ6VXNlcjQ2MTk4Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/461983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joaoe", "html_url": "https://github.com/joaoe", "followers_url": "https://api.github.com/users/joaoe/followers", "following_url": "https://api.github.com/users/joaoe/following{/other_user}", "gists_url": "https://api.github.com/users/joaoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/joaoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joaoe/subscriptions", "organizations_url": "https://api.github.com/users/joaoe/orgs", "repos_url": "https://api.github.com/users/joaoe/repos", "events_url": "https://api.github.com/users/joaoe/events{/privacy}", "received_events_url": "https://api.github.com/users/joaoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-19T18:23:48Z", "updated_at": "2020-01-20T09:41:41Z", "closed_at": "2020-01-20T09:12:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "filter \r\nhttps://docs.python.org/3/library/functions.html#filter\r\nmap\r\nhttps://docs.python.org/3/library/functions.html#map\r\nreduce or functools.reduce\r\nhttps://docs.python.org/3/library/functools.html#functools.reduce\r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/208", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/208/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/208/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/208", "id": 536038572, "node_id": "MDU6SXNzdWU1MzYwMzg1NzI=", "number": 208, "title": "Erroneous C408 for `dict(\u2026)` as defaultdict default value", "user": {"login": "wadetregaskis-linkedin", "id": 53880436, "node_id": "MDQ6VXNlcjUzODgwNDM2", "avatar_url": "https://avatars0.githubusercontent.com/u/53880436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wadetregaskis-linkedin", "html_url": "https://github.com/wadetregaskis-linkedin", "followers_url": "https://api.github.com/users/wadetregaskis-linkedin/followers", "following_url": "https://api.github.com/users/wadetregaskis-linkedin/following{/other_user}", "gists_url": "https://api.github.com/users/wadetregaskis-linkedin/gists{/gist_id}", "starred_url": "https://api.github.com/users/wadetregaskis-linkedin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wadetregaskis-linkedin/subscriptions", "organizations_url": "https://api.github.com/users/wadetregaskis-linkedin/orgs", "repos_url": "https://api.github.com/users/wadetregaskis-linkedin/repos", "events_url": "https://api.github.com/users/wadetregaskis-linkedin/events{/privacy}", "received_events_url": "https://api.github.com/users/wadetregaskis-linkedin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-10T22:47:50Z", "updated_at": "2019-12-10T22:54:00Z", "closed_at": "2019-12-10T22:54:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you have something like `foo = defaultdict(lambda: dict(a=1, b=2, c=3))`, flake8-comprehensions erroneously states that you must convert that `dict(\u2026)` to a dict literal.  That is a very bad idea - doing so makes the default value of the `defaultdict` _shared across all keys_.  That's almost certainly not what the programmer intends.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/204", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/204/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/204/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/204", "id": 525908444, "node_id": "MDU6SXNzdWU1MjU5MDg0NDQ=", "number": 204, "title": "A false positive for C416", "user": {"login": "arnimarj", "id": 143150, "node_id": "MDQ6VXNlcjE0MzE1MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/143150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arnimarj", "html_url": "https://github.com/arnimarj", "followers_url": "https://api.github.com/users/arnimarj/followers", "following_url": "https://api.github.com/users/arnimarj/following{/other_user}", "gists_url": "https://api.github.com/users/arnimarj/gists{/gist_id}", "starred_url": "https://api.github.com/users/arnimarj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arnimarj/subscriptions", "organizations_url": "https://api.github.com/users/arnimarj/orgs", "repos_url": "https://api.github.com/users/arnimarj/repos", "events_url": "https://api.github.com/users/arnimarj/events{/privacy}", "received_events_url": "https://api.github.com/users/arnimarj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-20T16:15:34Z", "updated_at": "2019-11-20T17:26:50Z", "closed_at": "2019-11-20T17:04:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI saw some fixes were committed for C416 false positives before, and I believe I've found a new one.\r\n\r\nI was working on some code, which converts a list of 2-element sequences to a list of 2-tuples:\r\n\r\n```python\r\nfrom typing import List, Tuple\r\n\r\na_list_of_2lists: List[List[int]] = [[i, i + 1] for i in range(10)]\r\n\r\na_list_of_2tuples: List[Tuple[int, int]] = [(a, b) for a, b in a_list_of_2lists]\r\n```\r\n\r\nIncidentally, the code passes if I create a 3-tuple instead:\r\n\r\n```python\r\na_list_of_3tuples: List[Tuple[int, int, str]] = [(a, b, 'foobar') for a, b in a_list_of_2lists]\r\n```\r\n\r\nThen I had this idea:\r\n```\r\na_list_of_2tuples: List[Tuple[int, int]] = [tuple((a, b)) for a, b in a_list_of_2lists]\r\n```\r\nbut that gave me a C409\r\n\r\nCheers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/203", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/203/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/203/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/203", "id": 524990127, "node_id": "MDU6SXNzdWU1MjQ5OTAxMjc=", "number": 203, "title": "False positive C416", "user": {"login": "kalekseev", "id": 367259, "node_id": "MDQ6VXNlcjM2NzI1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/367259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kalekseev", "html_url": "https://github.com/kalekseev", "followers_url": "https://api.github.com/users/kalekseev/followers", "following_url": "https://api.github.com/users/kalekseev/following{/other_user}", "gists_url": "https://api.github.com/users/kalekseev/gists{/gist_id}", "starred_url": "https://api.github.com/users/kalekseev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kalekseev/subscriptions", "organizations_url": "https://api.github.com/users/kalekseev/orgs", "repos_url": "https://api.github.com/users/kalekseev/repos", "events_url": "https://api.github.com/users/kalekseev/events{/privacy}", "received_events_url": "https://api.github.com/users/kalekseev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-19T12:51:27Z", "updated_at": "2019-11-19T13:29:03Z", "closed_at": "2019-11-19T13:29:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "With version 3.1.1 I get `C416 Unnecessary list comprehension - rewrite using list().` for this code `x = [(a, b, 1) for (a, b) in []]`\r\nI think linter just checks that first two params of \"(a, b, 1)\" tuple equal \"(a, b)\" tuple.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/198", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/198/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/198/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/198", "id": 524032235, "node_id": "MDU6SXNzdWU1MjQwMzIyMzU=", "number": 198, "title": "C416 false positive with sequences as comprehension elements", "user": {"login": "discosultan", "id": 2970736, "node_id": "MDQ6VXNlcjI5NzA3MzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2970736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/discosultan", "html_url": "https://github.com/discosultan", "followers_url": "https://api.github.com/users/discosultan/followers", "following_url": "https://api.github.com/users/discosultan/following{/other_user}", "gists_url": "https://api.github.com/users/discosultan/gists{/gist_id}", "starred_url": "https://api.github.com/users/discosultan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/discosultan/subscriptions", "organizations_url": "https://api.github.com/users/discosultan/orgs", "repos_url": "https://api.github.com/users/discosultan/repos", "events_url": "https://api.github.com/users/discosultan/events{/privacy}", "received_events_url": "https://api.github.com/users/discosultan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-17T19:32:51Z", "updated_at": "2019-11-19T06:48:28Z", "closed_at": "2019-11-18T22:02:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "The example below produces a C416 (\"Unnecessary list comprehension - rewrite using list()\"):\r\n```py\r\ninput = [\r\n    (1, 1),\r\n    (1, 1),\r\n    (1, 1),\r\n]\r\noutput = [(x, y, 1) for x, y in input]\r\n```\r\nI suspect it is because both an input and output element is a tuple. I don't think it should happen since the shapes of the tuples differ.\r\n\r\nIt feels rather tricky to analyze the shape, so maybe in this case the check should be disabled.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/196", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/196/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/196/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/196/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/196", "id": 523620871, "node_id": "MDU6SXNzdWU1MjM2MjA4NzE=", "number": 196, "title": "False positive in C416", "user": {"login": "NoAnyLove", "id": 1233483, "node_id": "MDQ6VXNlcjEyMzM0ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1233483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NoAnyLove", "html_url": "https://github.com/NoAnyLove", "followers_url": "https://api.github.com/users/NoAnyLove/followers", "following_url": "https://api.github.com/users/NoAnyLove/following{/other_user}", "gists_url": "https://api.github.com/users/NoAnyLove/gists{/gist_id}", "starred_url": "https://api.github.com/users/NoAnyLove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NoAnyLove/subscriptions", "organizations_url": "https://api.github.com/users/NoAnyLove/orgs", "repos_url": "https://api.github.com/users/NoAnyLove/repos", "events_url": "https://api.github.com/users/NoAnyLove/events{/privacy}", "received_events_url": "https://api.github.com/users/NoAnyLove/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-15T18:25:11Z", "updated_at": "2019-11-19T11:45:32Z", "closed_at": "2019-11-16T15:09:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example file, `demo.py`\r\n```python\r\nimport asyncio\r\n\r\n\r\nasync def ticker(delay, to):\r\n    for i in range(to):\r\n        yield i\r\n        await asyncio.sleep(delay)\r\n\r\n\r\nasync def main():\r\n    return [item async for item in ticker(1, 10)]\r\n\r\n```\r\n\r\nError message,\r\n```\r\ndemo.py:5:15: C416 Unnecessary list comprehension - rewrite using list()\r\n```\r\n\r\nI don't think we can rewrite asynchronous list/dict/set comprehensions (https://www.python.org/dev/peps/pep-0525/#asynchronous-list-dict-set-comprehensions) using `list()`, `dict()` or `set()`.\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/194", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/194/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/194/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/194", "id": 521947738, "node_id": "MDU6SXNzdWU1MjE5NDc3Mzg=", "number": 194, "title": "False positive on C404", "user": {"login": "schinckel", "id": 23411, "node_id": "MDQ6VXNlcjIzNDEx", "avatar_url": "https://avatars1.githubusercontent.com/u/23411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schinckel", "html_url": "https://github.com/schinckel", "followers_url": "https://api.github.com/users/schinckel/followers", "following_url": "https://api.github.com/users/schinckel/following{/other_user}", "gists_url": "https://api.github.com/users/schinckel/gists{/gist_id}", "starred_url": "https://api.github.com/users/schinckel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schinckel/subscriptions", "organizations_url": "https://api.github.com/users/schinckel/orgs", "repos_url": "https://api.github.com/users/schinckel/repos", "events_url": "https://api.github.com/users/schinckel/events{/privacy}", "received_events_url": "https://api.github.com/users/schinckel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-13T04:12:10Z", "updated_at": "2019-11-15T10:16:04Z", "closed_at": "2019-11-13T13:49:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a block of code that looks like:\r\n\r\n    instance_kwargs = dict([\r\n        key_value.split('=')\r\n        key_value in full_lookup.split(':')[1].split('&')\r\n    ])\r\n\r\nThis is being marked as  C404: unnecessary list comprehension.\r\n\r\nHowever, I don't believe it's possible to use a single dict comprehension to perform this.\r\n\r\n(I'm not saying it's great code, btw...)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/193", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/193/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/193/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/193", "id": 521213805, "node_id": "MDU6SXNzdWU1MjEyMTM4MDU=", "number": 193, "title": "Integration problems with VSCode", "user": {"login": "sobolevn", "id": 4660275, "node_id": "MDQ6VXNlcjQ2NjAyNzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4660275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sobolevn", "html_url": "https://github.com/sobolevn", "followers_url": "https://api.github.com/users/sobolevn/followers", "following_url": "https://api.github.com/users/sobolevn/following{/other_user}", "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions", "organizations_url": "https://api.github.com/users/sobolevn/orgs", "repos_url": "https://api.github.com/users/sobolevn/repos", "events_url": "https://api.github.com/users/sobolevn/events{/privacy}", "received_events_url": "https://api.github.com/users/sobolevn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-11T22:07:42Z", "updated_at": "2019-11-12T08:51:20Z", "closed_at": "2019-11-11T22:29:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Origin: https://github.com/wemake-services/wemake-python-styleguide/issues/973\r\n\r\n# Bug report\r\n\r\n<!--\r\nHi, thanks for submitting a bug. We appreciate that.\r\n\r\nBut, we will need some information about what's wrong to help you.\r\n-->\r\n\r\n## What's wrong\r\n\r\nWhen a run the command `flake8 .` is everything okay but when I want to see the errors inside of **VSCode** I can't see anything.\r\n\r\n<!-- Describe what is not working. Please, attach a traceback. -->\r\n\r\n## How is that should be\r\n\r\nShow the errors in **VSCode**.\r\n\r\n<!-- Describe how it should work. -->\r\n\r\n<!--\r\n\r\n  Love wemake-python-styleguide? \u2764\ufe0f\r\n  Do you want your bugs to be solved faster?\r\n\r\n  Please consider supporting our collective:\r\n\ud83d\udc49  https://opencollective.com/wemake-python-styleguide/donate\r\n\r\n-->\r\n\r\n## System information\r\n\r\n### flake8 information\r\n\r\nContents of `flake8 --bug-report`:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/alexis/Documents/Development/Fondeadora/python-service-template/env/bin/flake8\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/alexis/Documents/Development/Fondeadora/python-service-template/env/lib/python3.7/site-packages/flake8/main/cli.py\", line 18, in main\r\n    app.run(argv)\r\n  File \"/home/alexis/Documents/Development/Fondeadora/python-service-template/env/lib/python3.7/site-packages/flake8/main/application.py\", line 393, in run\r\n    self._run(argv)\r\n  File \"/home/alexis/Documents/Development/Fondeadora/python-service-template/env/lib/python3.7/site-packages/flake8/main/application.py\", line 380, in _run\r\n    self.initialize(argv)\r\n  File \"/home/alexis/Documents/Development/Fondeadora/python-service-template/env/lib/python3.7/site-packages/flake8/main/application.py\", line 365, in initialize\r\n    self.parse_configuration_and_cli(argv)\r\n  File \"/home/alexis/Documents/Development/Fondeadora/python-service-template/env/lib/python3.7/site-packages/flake8/main/application.py\", line 218, in parse_configuration_and_cli\r\n    self.option_manager, self.config_finder, argv\r\n  File \"/home/alexis/Documents/Development/Fondeadora/python-service-template/env/lib/python3.7/site-packages/flake8/options/aggregator.py\", line 36, in aggregate_options\r\n    original_values, _ = manager.parse_args(arglist)\r\n  File \"/home/alexis/Documents/Development/Fondeadora/python-service-template/env/lib/python3.7/site-packages/flake8/options/manager.py\", line 313, in parse_args\r\n    options, xargs = self.parser.parse_args(args, values)\r\n  File \"/usr/lib/python3.7/optparse.py\", line 1387, in parse_args\r\n    stop = self._process_args(largs, rargs, values)\r\n  File \"/usr/lib/python3.7/optparse.py\", line 1427, in _process_args\r\n    self._process_long_opt(rargs, values)\r\n  File \"/usr/lib/python3.7/optparse.py\", line 1501, in _process_long_opt\r\n    option.process(opt, value, values, self)\r\n  File \"/usr/lib/python3.7/optparse.py\", line 785, in process\r\n    self.action, self.dest, opt, value, values, parser)\r\n  File \"/usr/lib/python3.7/optparse.py\", line 805, in take_action\r\n    self.callback(self, opt, value, parser, *args, **kwargs)\r\n  File \"/home/alexis/Documents/Development/Fondeadora/python-service-template/env/lib/python3.7/site-packages/flake8/main/debug.py\", line 37, in print_information\r\n    print(json.dumps(information(option_manager), indent=2, sort_keys=True))\r\n  File \"/usr/lib/python3.7/json/__init__.py\", line 238, in dumps\r\n    **kw).encode(obj)\r\n  File \"/usr/lib/python3.7/json/encoder.py\", line 201, in encode\r\n    chunks = list(chunks)\r\n  File \"/usr/lib/python3.7/json/encoder.py\", line 431, in _iterencode\r\n    yield from _iterencode_dict(o, _current_indent_level)\r\n  File \"/usr/lib/python3.7/json/encoder.py\", line 405, in _iterencode_dict\r\n    yield from chunks\r\n  File \"/usr/lib/python3.7/json/encoder.py\", line 325, in _iterencode_list\r\n    yield from chunks\r\n  File \"/usr/lib/python3.7/json/encoder.py\", line 405, in _iterencode_dict\r\n    yield from chunks\r\n  File \"/usr/lib/python3.7/json/encoder.py\", line 438, in _iterencode\r\n    o = _default(o)\r\n  File \"/usr/lib/python3.7/json/encoder.py\", line 179, in default\r\n    raise TypeError(f'Object of type {o.__class__.__name__} '\r\nTypeError: Object of type cached_property is not JSON serializable\r\n```\r\n\r\n### pip information\r\n\r\nContents of `pip freeze`:\r\n\r\n```\r\naspy.yaml==1.3.0\r\nastor==0.8.0\r\nastroid==2.3.2\r\natomicwrites==1.3.0\r\nattrs==19.3.0\r\nautopep8==1.4.4\r\nbandit==1.6.2\r\nboto3==1.9.86\r\nbotocore==1.12.253\r\ncached-property==1.5.1\r\ncfgv==2.0.1\r\ncolorama==0.3.9\r\ndocutils==0.15.2\r\nentrypoints==0.3\r\neradicate==1.0\r\nflake8==3.7.9\r\nflake8-annotations-complexity==0.0.2\r\nflake8-bandit==2.1.2\r\nflake8-broken-line==0.1.1\r\nflake8-bugbear==19.8.0\r\nflake8-builtins==1.4.1\r\nflake8-coding==1.3.2\r\nflake8-commas==2.0.0\r\nflake8-comprehensions==2.3.0\r\nflake8-debugger==3.2.0\r\nflake8-docstrings==1.5.0\r\nflake8-eradicate==0.2.3\r\nflake8-executable==2.0.3\r\nflake8-isort==2.7.0\r\nflake8-logging-format==0.6.0\r\nflake8-pep3101==1.2.1\r\nflake8-polyfill==1.0.2\r\nflake8-print==3.1.1\r\nflake8-quotes==2.1.0\r\nflake8-rst-docstrings==0.0.11\r\nflake8-string-format==0.2.3\r\nflakehell==0.3.0\r\ngitdb2==2.0.6\r\nGitPython==3.0.4\r\nidentify==1.4.7\r\nimportlib-metadata==0.23\r\nisort==4.3.21\r\njmespath==0.9.4\r\nlazy-object-proxy==1.4.3\r\nmando==0.6.4\r\nmccabe==0.6.1\r\nmore-itertools==7.2.0\r\nmypy==0.740\r\nmypy-extensions==0.4.3\r\nnodeenv==1.3.3\r\npackaging==19.2\r\npbr==5.4.3\r\npep8==1.7.1\r\npep8-naming==0.8.2\r\npkg-resources==0.0.0\r\npluggy==0.13.0\r\npre-commit==1.20.0\r\npy==1.8.0\r\npycodestyle==2.5.0\r\npydocstyle==4.0.1\r\npyflakes==2.1.1\r\nPygments==2.4.2\r\npylint==2.4.3\r\npyparsing==2.4.2\r\npytest==5.2.2\r\npython-dateutil==2.8.0\r\nPyYAML==5.1.2\r\nradon==2.4.0\r\nrestructuredtext-lint==1.3.0\r\ns3transfer==0.1.13\r\nsix==1.12.0\r\nsmmap2==2.0.5\r\nsnowballstemmer==2.0.0\r\nstevedore==1.31.0\r\ntermcolor==1.1.0\r\ntestfixtures==6.10.0\r\ntoml==0.10.0\r\ntyped-ast==1.4.0\r\ntyping-extensions==3.7.4.1\r\nurllib3==1.25.6\r\nvirtualenv==16.7.7\r\nwcwidth==0.1.7\r\nwemake-python-styleguide==0.12.5\r\nwrapt==1.11.2\r\nzipp==0.6.0\r\n```\r\n\r\n`.vscode/settings.json`\r\n\r\n```json\r\n{\r\n  \"python.pythonPath\": \"env/bin/python3.7\",\r\n  \"python.linting.pylintEnabled\": false,\r\n  \"python.linting.flake8Enabled\": true,\r\n  \"python.formatting.provider\": \"autopep8\"\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/178", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/178/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/178/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/178", "id": 511867328, "node_id": "MDU6SXNzdWU1MTE4NjczMjg=", "number": 178, "title": "Sum list vs generator comprehesion detection with startpoint arg", "user": {"login": "wanaryytel", "id": 13919593, "node_id": "MDQ6VXNlcjEzOTE5NTkz", "avatar_url": "https://avatars3.githubusercontent.com/u/13919593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanaryytel", "html_url": "https://github.com/wanaryytel", "followers_url": "https://api.github.com/users/wanaryytel/followers", "following_url": "https://api.github.com/users/wanaryytel/following{/other_user}", "gists_url": "https://api.github.com/users/wanaryytel/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanaryytel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanaryytel/subscriptions", "organizations_url": "https://api.github.com/users/wanaryytel/orgs", "repos_url": "https://api.github.com/users/wanaryytel/repos", "events_url": "https://api.github.com/users/wanaryytel/events{/privacy}", "received_events_url": "https://api.github.com/users/wanaryytel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-24T10:55:00Z", "updated_at": "2019-10-25T17:47:11Z", "closed_at": "2019-10-25T14:44:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "So right now the linter highlights this:\r\n```sum([x + 1 for x in range(30)])``` and for all the right reasons.\r\nHowever, this isn't detected right now:\r\n```sum([x + 1 for x in range(30)], 0)```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/163", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/163/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/163/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/163", "id": 464872923, "node_id": "MDU6SXNzdWU0NjQ4NzI5MjM=", "number": 163, "title": "Unnecessary list comprehension that can be a call to list()", "user": {"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-06T17:10:22Z", "updated_at": "2019-11-15T10:15:38Z", "closed_at": "2019-11-15T10:13:19Z", "author_association": "OWNER", "active_lock_reason": null, "body": "As per https://treyhunner.com/2019/03/abusing-and-overusing-list-comprehensions-in-python/\r\n\r\nif we have\r\n\r\n```\r\n[x for x in foobar]\r\n```\r\n\r\nit can always be replaced with\r\n\r\n```\r\nlist(foobar)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/141", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/141/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/141/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/141", "id": 411460796, "node_id": "MDU6SXNzdWU0MTE0NjA3OTY=", "number": 141, "title": "easy english", "user": {"login": "vpoulailleau", "id": 17438768, "node_id": "MDQ6VXNlcjE3NDM4NzY4", "avatar_url": "https://avatars0.githubusercontent.com/u/17438768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vpoulailleau", "html_url": "https://github.com/vpoulailleau", "followers_url": "https://api.github.com/users/vpoulailleau/followers", "following_url": "https://api.github.com/users/vpoulailleau/following{/other_user}", "gists_url": "https://api.github.com/users/vpoulailleau/gists{/gist_id}", "starred_url": "https://api.github.com/users/vpoulailleau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vpoulailleau/subscriptions", "organizations_url": "https://api.github.com/users/vpoulailleau/orgs", "repos_url": "https://api.github.com/users/vpoulailleau/repos", "events_url": "https://api.github.com/users/vpoulailleau/events{/privacy}", "received_events_url": "https://api.github.com/users/vpoulailleau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-18T12:50:38Z", "updated_at": "2019-02-21T11:03:18Z", "closed_at": "2019-02-21T11:03:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Your project seems a good idea.\r\n\r\nI have a remark though. I'm not a native English speaker, and I think that the README might lead to some confusion:\r\n\r\n> `list(f(x) for x in foo)` is better as `[f(x) for x in foo]`\r\n\r\ncan be understood as\r\n\r\n`list(f(x) for x in foo)` is better than `[f(x) for x in foo]`\r\n\r\nI would consider using this instead:\r\nDon't use `list(f(x) for x in foo)`, use `[f(x) for x in foo]`\r\n\r\nOr\r\n\r\nDon't | Do\r\n------- | ---\r\n`list(f(x) for x in foo)`|`[f(x) for x in foo]`\r\n\r\nFeel free to reject my issue, or comment it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/64", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/64/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/64/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/64", "id": 228865054, "node_id": "MDU6SXNzdWUyMjg4NjUwNTQ=", "number": 64, "title": "\"Unnecessary dict call\" false positives", "user": {"login": "faulkner", "id": 22268, "node_id": "MDQ6VXNlcjIyMjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/22268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faulkner", "html_url": "https://github.com/faulkner", "followers_url": "https://api.github.com/users/faulkner/followers", "following_url": "https://api.github.com/users/faulkner/following{/other_user}", "gists_url": "https://api.github.com/users/faulkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/faulkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faulkner/subscriptions", "organizations_url": "https://api.github.com/users/faulkner/orgs", "repos_url": "https://api.github.com/users/faulkner/repos", "events_url": "https://api.github.com/users/faulkner/events{/privacy}", "received_events_url": "https://api.github.com/users/faulkner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-05-15T22:32:31Z", "updated_at": "2020-06-19T10:24:17Z", "closed_at": "2017-05-17T15:20:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "The dict function has 3 forms: `dict(**kwarg)`, `dict(mapping, **kwarg)`, and `dict(iterable, **kwarg)`.  I'm not sure if it makes sense to apply this rule to every form.\r\n\r\nHere's one example use case:\r\n```py\r\ndef foo(data):\r\n    defaults = {'a': 1, 'b': 2}\r\n    return dict(defaults, **data)\r\n```\r\n\r\nThis example could be rewritten to use literals, but it would be less succinct and (I assume, but haven't confirmed) less performant.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/61", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/61/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/61/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/61", "id": 226563476, "node_id": "MDU6SXNzdWUyMjY1NjM0NzY=", "number": 61, "title": "Add new rule for enumerate(<comprehension>)", "user": {"login": "pope1ni", "id": 2855582, "node_id": "MDQ6VXNlcjI4NTU1ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2855582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pope1ni", "html_url": "https://github.com/pope1ni", "followers_url": "https://api.github.com/users/pope1ni/followers", "following_url": "https://api.github.com/users/pope1ni/following{/other_user}", "gists_url": "https://api.github.com/users/pope1ni/gists{/gist_id}", "starred_url": "https://api.github.com/users/pope1ni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pope1ni/subscriptions", "organizations_url": "https://api.github.com/users/pope1ni/orgs", "repos_url": "https://api.github.com/users/pope1ni/repos", "events_url": "https://api.github.com/users/pope1ni/events{/privacy}", "received_events_url": "https://api.github.com/users/pope1ni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-05-05T12:51:57Z", "updated_at": "2019-03-01T17:44:58Z", "closed_at": "2019-03-01T17:44:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Suggest change from `enumerate(<comprehension>)` to `enumerate(<generator>)` with the caveat that the generator needs to be wrapped in parentheses if [`enumerate()`](https://docs.python.org/3/library/functions.html#enumerate) is passed the `start` argument.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/60", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/60/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/60/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/60", "id": 226562051, "node_id": "MDU6SXNzdWUyMjY1NjIwNTE=", "number": 60, "title": "Add new rule for reversed(sorted(...))", "user": {"login": "pope1ni", "id": 2855582, "node_id": "MDQ6VXNlcjI4NTU1ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2855582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pope1ni", "html_url": "https://github.com/pope1ni", "followers_url": "https://api.github.com/users/pope1ni/followers", "following_url": "https://api.github.com/users/pope1ni/following{/other_user}", "gists_url": "https://api.github.com/users/pope1ni/gists{/gist_id}", "starred_url": "https://api.github.com/users/pope1ni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pope1ni/subscriptions", "organizations_url": "https://api.github.com/users/pope1ni/orgs", "repos_url": "https://api.github.com/users/pope1ni/repos", "events_url": "https://api.github.com/users/pope1ni/events{/privacy}", "received_events_url": "https://api.github.com/users/pope1ni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-05T12:46:15Z", "updated_at": "2019-11-15T10:15:32Z", "closed_at": "2019-11-15T10:13:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Simply this would recommend changing `reversed(sorted(...))` to [`sorted(..., reverse=True)`.](https://docs.python.org/3/library/functions.html#sorted)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/59", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/59/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/59/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/59", "id": 226561405, "node_id": "MDU6SXNzdWUyMjY1NjE0MDU=", "number": 59, "title": "Add new rule for <comprehension>[0]", "user": {"login": "pope1ni", "id": 2855582, "node_id": "MDQ6VXNlcjI4NTU1ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2855582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pope1ni", "html_url": "https://github.com/pope1ni", "followers_url": "https://api.github.com/users/pope1ni/followers", "following_url": "https://api.github.com/users/pope1ni/following{/other_user}", "gists_url": "https://api.github.com/users/pope1ni/gists{/gist_id}", "starred_url": "https://api.github.com/users/pope1ni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pope1ni/subscriptions", "organizations_url": "https://api.github.com/users/pope1ni/orgs", "repos_url": "https://api.github.com/users/pope1ni/repos", "events_url": "https://api.github.com/users/pope1ni/events{/privacy}", "received_events_url": "https://api.github.com/users/pope1ni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-05T12:43:36Z", "updated_at": "2020-01-20T09:25:58Z", "closed_at": "2020-01-20T09:25:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Suggest change from `<comprehension>[0]` `next(<generator>)`, e.g.\r\n\r\n```diff\r\n-[x for x in y if x == z][0]\r\n+next(x for x in y if x == z)\r\n```\r\n\r\nThis may be a bad idea as there would be the change of exception from `IndexError` to `StopIteration` if there are no elements returned by the generator. But it could also be possible to do the following to avoid the overhead of list creation:\r\n\r\n```diff\r\n-try:\r\n-    v = [x for x in y if x == z][0]\r\n-except IndexError:\r\n-    v = 123\r\n+v = next((x for x in y if x == z), 123)\r\n```\r\nThis may not be feasible as it would be quite complicated to implement sanely.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/57", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/57/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/57/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/57", "id": 226558711, "node_id": "MDU6SXNzdWUyMjY1NTg3MTE=", "number": 57, "title": "Add new rule for next(<comprehension>)", "user": {"login": "pope1ni", "id": 2855582, "node_id": "MDQ6VXNlcjI4NTU1ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2855582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pope1ni", "html_url": "https://github.com/pope1ni", "followers_url": "https://api.github.com/users/pope1ni/followers", "following_url": "https://api.github.com/users/pope1ni/following{/other_user}", "gists_url": "https://api.github.com/users/pope1ni/gists{/gist_id}", "starred_url": "https://api.github.com/users/pope1ni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pope1ni/subscriptions", "organizations_url": "https://api.github.com/users/pope1ni/orgs", "repos_url": "https://api.github.com/users/pope1ni/repos", "events_url": "https://api.github.com/users/pope1ni/events{/privacy}", "received_events_url": "https://api.github.com/users/pope1ni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-05T12:31:57Z", "updated_at": "2019-03-01T17:43:18Z", "closed_at": "2019-03-01T17:43:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Suggest change from `next(<comprehension>)` to `next(<generator>)` as [`next()`](https://docs.python.org/3/library/functions.html#next) will happily consume a generator. Need to be aware of the `default` argument in which case the generator will need still to be wrapped in parentheses.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/56", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/56/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/56/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/56", "id": 226549770, "node_id": "MDU6SXNzdWUyMjY1NDk3NzA=", "number": 56, "title": "Add support for next() to builtins checked?", "user": {"login": "pope1ni", "id": 2855582, "node_id": "MDQ6VXNlcjI4NTU1ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2855582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pope1ni", "html_url": "https://github.com/pope1ni", "followers_url": "https://api.github.com/users/pope1ni/followers", "following_url": "https://api.github.com/users/pope1ni/following{/other_user}", "gists_url": "https://api.github.com/users/pope1ni/gists{/gist_id}", "starred_url": "https://api.github.com/users/pope1ni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pope1ni/subscriptions", "organizations_url": "https://api.github.com/users/pope1ni/orgs", "repos_url": "https://api.github.com/users/pope1ni/repos", "events_url": "https://api.github.com/users/pope1ni/events{/privacy}", "received_events_url": "https://api.github.com/users/pope1ni/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-05T11:50:02Z", "updated_at": "2017-05-05T12:53:10Z", "closed_at": "2017-05-05T12:53:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`next()` will happily take a generator instead of a list or tuple.\r\n\r\nWould it also be possible to recommend simplifications such as:\r\n\r\n```diff\r\n-[x for x in y if x == z][0]\r\n+next(x for x in y if x == z)\r\n```\r\n\r\nThe main problem here would be the change of exception from `IndexError` to `StopIteration` if there are no elements in the iterable.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/49", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/49/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/49/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/49", "id": 225223864, "node_id": "MDU6SXNzdWUyMjUyMjM4NjQ=", "number": 49, "title": "Should recommend list() be replaced with []", "user": {"login": "jdufresne", "id": 347634, "node_id": "MDQ6VXNlcjM0NzYzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/347634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdufresne", "html_url": "https://github.com/jdufresne", "followers_url": "https://api.github.com/users/jdufresne/followers", "following_url": "https://api.github.com/users/jdufresne/following{/other_user}", "gists_url": "https://api.github.com/users/jdufresne/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdufresne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdufresne/subscriptions", "organizations_url": "https://api.github.com/users/jdufresne/orgs", "repos_url": "https://api.github.com/users/jdufresne/repos", "events_url": "https://api.github.com/users/jdufresne/events{/privacy}", "received_events_url": "https://api.github.com/users/jdufresne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-29T01:09:20Z", "updated_at": "2017-05-08T20:40:17Z", "closed_at": "2017-05-08T20:40:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "test.py\r\n\r\n```python\r\nl = list()\r\nprint(l)\r\n```\r\n\r\n```\r\n$ flake8 test.py\r\n```\r\n\r\nActual: (no output)\r\n\r\nExpected: I think perhaps this should output that `list()` is better written as `[]`. Same is true for `dict()` -> `{}`.\r\n\r\nI see this as being very similar to \"Unnecessary generator - rewrite as a list comprehension.\", except it is a literal instead of a comprehension.\r\n\r\nWhat do you think?\r\n\r\nNoticed while running against the Django codebase:\r\n\r\nhttps://github.com/django/django/blob/f3427ccb25806bb062becad0d6a0904930b36635/tests/model_inheritance/test_abstract_inheritance.py#L321", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/48", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/48/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/48/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/48", "id": 225220525, "node_id": "MDU6SXNzdWUyMjUyMjA1MjU=", "number": 48, "title": "False positive: C402 Unnecessary generator - rewrite as a dict comprehension.", "user": {"login": "jdufresne", "id": 347634, "node_id": "MDQ6VXNlcjM0NzYzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/347634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdufresne", "html_url": "https://github.com/jdufresne", "followers_url": "https://api.github.com/users/jdufresne/followers", "following_url": "https://api.github.com/users/jdufresne/following{/other_user}", "gists_url": "https://api.github.com/users/jdufresne/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdufresne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdufresne/subscriptions", "organizations_url": "https://api.github.com/users/jdufresne/orgs", "repos_url": "https://api.github.com/users/jdufresne/repos", "events_url": "https://api.github.com/users/jdufresne/events{/privacy}", "received_events_url": "https://api.github.com/users/jdufresne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2017-04-29T00:21:52Z", "updated_at": "2017-05-01T20:54:02Z", "closed_at": "2017-05-01T20:36:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "test.py\r\n\r\n```python\r\ns = 'a=1,b=2,c=3'\r\nd = dict(pair.split('=') for pair in s.split(','))\r\nprint(d)\r\n```\r\n\r\n```\r\n(venv) $ flake8 test.py \r\ntest.py:2:5: C402 Unnecessary generator - rewrite as a dict comprehension.\r\n```\r\n\r\nExpected no warnings or errors.\r\n\r\nThis can't be conveniently rewritten as dict comprehension becuase `pair.split('=')` is an expression, not a simple value. In some cases the expression may be expensive and unwise to execute and index twice.\r\n\r\nDiscovered by running against the Django code base:\r\n\r\nhttps://github.com/django/django/blob/f3427ccb25806bb062becad0d6a0904930b36635/django/contrib/auth/hashers.py#L381", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/22", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/22/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/22/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/22", "id": 169805529, "node_id": "MDU6SXNzdWUxNjk4MDU1Mjk=", "number": 22, "title": "Unnecessary list literal that should be a tuple", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-08-07T17:02:33Z", "updated_at": "2019-07-06T17:13:23Z", "closed_at": "2019-07-06T17:13:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "This isnt strictly a case for comprehension, but seems to fit nicely with your other errors.\n `sorted([1, 3, 2])` is an unnecessary list, that should be replaced with a tuple as the iterable processor `sorted` (and any other readonly processor) doesnt need a list.\n\ni.e. this should be\n\n`sorted((1, 3, 2))`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/21", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/21/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/21/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/21", "id": 169787114, "node_id": "MDU6SXNzdWUxNjk3ODcxMTQ=", "number": 21, "title": "Python 2.6 mode", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-08-07T08:57:17Z", "updated_at": "2017-05-08T21:27:33Z", "closed_at": "2017-05-08T21:27:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice if a project can specify that they need '2.6' support, and only rules that dont break 2.6 support would be active.\n\nFor example, the set rules in #2 rely on Python 2.7 syntax.\nAs a result, we need to turn off those codes, despite those codes having many good rules that are applicable and valid on Python 2.6, because a few rules are not.\n\nhttps://gerrit.wikimedia.org/r/#/c/302103/\n\nIt would be especially lovely if you supported `min-version = 2.6` that [flake8-future-import](https://pypi.python.org/pypi/flake8-future-import) uses, which also allows for other versions to have specific syntax that affects these rules.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/15", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/15/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/15/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/15", "id": 164828632, "node_id": "MDU6SXNzdWUxNjQ4Mjg2MzI=", "number": 15, "title": "New PyPI release", "user": {"login": "danpalmer", "id": 202400, "node_id": "MDQ6VXNlcjIwMjQwMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/202400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danpalmer", "html_url": "https://github.com/danpalmer", "followers_url": "https://api.github.com/users/danpalmer/followers", "following_url": "https://api.github.com/users/danpalmer/following{/other_user}", "gists_url": "https://api.github.com/users/danpalmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/danpalmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danpalmer/subscriptions", "organizations_url": "https://api.github.com/users/danpalmer/orgs", "repos_url": "https://api.github.com/users/danpalmer/repos", "events_url": "https://api.github.com/users/danpalmer/events{/privacy}", "received_events_url": "https://api.github.com/users/danpalmer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-07-11T12:46:36Z", "updated_at": "2016-07-11T20:51:31Z", "closed_at": "2016-07-11T20:48:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I've just noticed that the version on GitHub is not on PyPI. Could you do a new release please?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/6", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/6/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/6/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/6", "id": 146862340, "node_id": "MDU6SXNzdWUxNDY4NjIzNDA=", "number": 6, "title": "Split C400 by type", "user": {"login": "danpalmer", "id": 202400, "node_id": "MDQ6VXNlcjIwMjQwMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/202400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danpalmer", "html_url": "https://github.com/danpalmer", "followers_url": "https://api.github.com/users/danpalmer/followers", "following_url": "https://api.github.com/users/danpalmer/following{/other_user}", "gists_url": "https://api.github.com/users/danpalmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/danpalmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danpalmer/subscriptions", "organizations_url": "https://api.github.com/users/danpalmer/orgs", "repos_url": "https://api.github.com/users/danpalmer/repos", "events_url": "https://api.github.com/users/danpalmer/events{/privacy}", "received_events_url": "https://api.github.com/users/danpalmer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-08T08:44:48Z", "updated_at": "2016-04-18T14:11:27Z", "closed_at": "2016-04-18T14:11:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "To eliminate confusion between dict and set comprehensions, our style guideline is that we do not use set literals or comprehensions, and instead use the explicit `set()` constructor.\n\nFor this reason, I'd like to be able to ignore `C400` warnings about set comprehensions, but keep them for dict/list comprehensions.\n\nWhat do you think about splitting `C400` into 3 separate warnings? This appears to be a fairly common sort of thing to do, i.e. if you see `E127` and `E128`, they are both \"you indented it wrong\", but in opposite directions, to allow more fine-tuning.\n\nWould you accept a PR for this if I implemented it?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/5", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/5/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/5/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/5", "id": 146297555, "node_id": "MDU6SXNzdWUxNDYyOTc1NTU=", "number": 5, "title": "sum of list comprehension better as sum of generator", "user": {"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2016-04-06T12:22:46Z", "updated_at": "2016-07-27T22:31:53Z", "closed_at": "2016-07-27T22:31:53Z", "author_association": "OWNER", "active_lock_reason": null, "body": "e.g. `sum([foo.bar for foo in get_foos()])` -> `sum(foo for foo in get_foos())`\n\nProbably extensible to other callables like `any`, `all`, `sorted`, etc.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/2", "repository_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions", "labels_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/2/comments", "events_url": "https://api.github.com/repos/adamchainz/flake8-comprehensions/issues/2/events", "html_url": "https://github.com/adamchainz/flake8-comprehensions/issues/2", "id": 146002707, "node_id": "MDU6SXNzdWUxNDYwMDI3MDc=", "number": 2, "title": "Set of a list comprehension/literal", "user": {"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-05T14:13:27Z", "updated_at": "2016-04-06T09:32:40Z", "closed_at": "2016-04-06T09:32:40Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Suggested by @tolomea\n- `set([f(x) for x in foo])` -> `{f(x) for x in foo}`\n- `set([1, 2])` -> `{1, 2}` (n.b. can't complain about empty list in this way though since `{}` = empty dict - myabe can do `set([])` -> `set()` though)\n", "performed_via_github_app": null, "score": 1.0}]}