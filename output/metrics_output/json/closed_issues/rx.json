{"total_count": 212, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/530", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/530/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/530/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/530/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/530", "id": 662146202, "node_id": "MDU6SXNzdWU2NjIxNDYyMDI=", "number": 530, "title": "make a great wheel again", "user": {"login": "stonebig", "id": 4312421, "node_id": "MDQ6VXNlcjQzMTI0MjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4312421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stonebig", "html_url": "https://github.com/stonebig", "followers_url": "https://api.github.com/users/stonebig/followers", "following_url": "https://api.github.com/users/stonebig/following{/other_user}", "gists_url": "https://api.github.com/users/stonebig/gists{/gist_id}", "starred_url": "https://api.github.com/users/stonebig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stonebig/subscriptions", "organizations_url": "https://api.github.com/users/stonebig/orgs", "repos_url": "https://api.github.com/users/stonebig/repos", "events_url": "https://api.github.com/users/stonebig/events{/privacy}", "received_events_url": "https://api.github.com/users/stonebig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-20T18:51:06Z", "updated_at": "2020-07-22T21:15:03Z", "closed_at": "2020-07-22T21:15:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "would it be possible to have also Rx published under wheel form, like it was for Rx-1.6.1 ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/520", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/520/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/520/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/520/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/520", "id": 636597585, "node_id": "MDU6SXNzdWU2MzY1OTc1ODU=", "number": 520, "title": "Buffer losing/ignoring items", "user": {"login": "darrickyee", "id": 18172544, "node_id": "MDQ6VXNlcjE4MTcyNTQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/18172544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darrickyee", "html_url": "https://github.com/darrickyee", "followers_url": "https://api.github.com/users/darrickyee/followers", "following_url": "https://api.github.com/users/darrickyee/following{/other_user}", "gists_url": "https://api.github.com/users/darrickyee/gists{/gist_id}", "starred_url": "https://api.github.com/users/darrickyee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darrickyee/subscriptions", "organizations_url": "https://api.github.com/users/darrickyee/orgs", "repos_url": "https://api.github.com/users/darrickyee/repos", "events_url": "https://api.github.com/users/darrickyee/events{/privacy}", "received_events_url": "https://api.github.com/users/darrickyee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-10T22:53:45Z", "updated_at": "2020-06-23T12:43:50Z", "closed_at": "2020-06-23T12:43:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't know if this is an issue or my own misunderstanding, but:\r\n\r\nI have a Subject that can be called to emit items via `on_next()`.  The Subject's observers may themselves call `on_next()` on the Subject.  If an observer does so, the usual behavior is for the Subject to emit the item immediately, so that the observer gets called recursively.\r\n\r\nInstead, I want the observers to handle items in the order that the Subject receives them, so that any nested `on_next()` calls are \"appended\" to the END of the Subject's item list, instead of causing the Subject to immediately emit them.\r\n\r\nI thought a buffer would be appropriate for this, but it doesn't work the way I expected.  Here is an example:\r\n\r\n````\r\nimport rx.operators as op\r\nfrom rx.subject import Subject\r\n\r\nsender = Subject()\r\ncloser = Subject()\r\n\r\n# Buffer should close whenever `closer` emits an item\r\nevents = sender.pipe(op.buffer(closer))\r\n\r\n# Call this to close buffer & print notification\r\ndef close():\r\n    print('Buffer closed')\r\n    closer.on_next(True)\r\n\r\n\r\ndef process(buffer):\r\n    print(buffer)\r\n    for num in buffer:\r\n        print(num)\r\n        if num < 5:\r\n            # Should add item to the next buffer?\r\n            sender.on_next(num+5)\r\n    close()\r\n\r\n\r\nevents.subscribe(process)\r\n# Log everything the Subject receives\r\nsender.subscribe(lambda i: print(f'Sender received {i}'))\r\n\r\nfor i in range(3):\r\n    sender.on_next(i)\r\nclose()\r\n````\r\n\r\nI was expecting this to happen:\r\n1. `for` loop sends three items to the Subject, `sender`, and then `close()` is called\r\n2. `sender` emits the list of items due to the call to `close()`\r\n3. `process` prints the received list [0, 1, 2], then for each item, it prints the item (integer) and tells `sender` to emit another item\r\n4. After looping through the items, `process` sends `close()`\r\n5. `sender` sends another item list [5, 6, 7] to `process`\r\n\r\nIt seems steps 1-4 happen correctly, but after `process` calls `close()`, the buffer is empty.  Here's the output:\r\n\r\n````\r\nSender received 0\r\nSender received 1\r\nSender received 2\r\nBuffer closed\r\n[0, 1, 2]\r\n0\r\nSender received 5\r\n1\r\nSender received 6\r\n2\r\nSender received 7\r\nBuffer closed\r\n````\r\n\r\nYou can see that `sender` is in fact receiving the items emitted by `process`, but there's no buffer emitted after the second `close()`.  After the second \"Buffed closed\" I would expect the output to show a buffer of [5, 6, 7] and then to print 5, 6, 7 on successive lines.\r\n\r\nIs there something I'm doing wrong here?  I have a feeling the problem might be due to garbage collection of the `num+5` values emitted from inside `process`.  If instead of calling `sender.on_next()`, I add the items to a global list, then define `close()` to call `sender.on_next()` with the list contents (and clear the list), it works as expected - possibly because the emitted items are \"kept alive\" after executing exits `process`?\r\n\r\nBut I would expect `buffer` to have that behavior without having to \"manually\" keep references alive.  Or is that not how it should be expected to work?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/515", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/515/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/515/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/515/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/515", "id": 615894841, "node_id": "MDU6SXNzdWU2MTU4OTQ4NDE=", "number": 515, "title": "Support mypy", "user": {"login": "Carsten-Leue", "id": 55989662, "node_id": "MDQ6VXNlcjU1OTg5NjYy", "avatar_url": "https://avatars0.githubusercontent.com/u/55989662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Carsten-Leue", "html_url": "https://github.com/Carsten-Leue", "followers_url": "https://api.github.com/users/Carsten-Leue/followers", "following_url": "https://api.github.com/users/Carsten-Leue/following{/other_user}", "gists_url": "https://api.github.com/users/Carsten-Leue/gists{/gist_id}", "starred_url": "https://api.github.com/users/Carsten-Leue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Carsten-Leue/subscriptions", "organizations_url": "https://api.github.com/users/Carsten-Leue/orgs", "repos_url": "https://api.github.com/users/Carsten-Leue/repos", "events_url": "https://api.github.com/users/Carsten-Leue/events{/privacy}", "received_events_url": "https://api.github.com/users/Carsten-Leue/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "jcafhe", "id": 11948994, "node_id": "MDQ6VXNlcjExOTQ4OTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/11948994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcafhe", "html_url": "https://github.com/jcafhe", "followers_url": "https://api.github.com/users/jcafhe/followers", "following_url": "https://api.github.com/users/jcafhe/following{/other_user}", "gists_url": "https://api.github.com/users/jcafhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcafhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcafhe/subscriptions", "organizations_url": "https://api.github.com/users/jcafhe/orgs", "repos_url": "https://api.github.com/users/jcafhe/repos", "events_url": "https://api.github.com/users/jcafhe/events{/privacy}", "received_events_url": "https://api.github.com/users/jcafhe/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jcafhe", "id": 11948994, "node_id": "MDQ6VXNlcjExOTQ4OTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/11948994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcafhe", "html_url": "https://github.com/jcafhe", "followers_url": "https://api.github.com/users/jcafhe/followers", "following_url": "https://api.github.com/users/jcafhe/following{/other_user}", "gists_url": "https://api.github.com/users/jcafhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcafhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcafhe/subscriptions", "organizations_url": "https://api.github.com/users/jcafhe/orgs", "repos_url": "https://api.github.com/users/jcafhe/repos", "events_url": "https://api.github.com/users/jcafhe/events{/privacy}", "received_events_url": "https://api.github.com/users/jcafhe/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/ReactiveX/RxPY/milestones/4", "html_url": "https://github.com/ReactiveX/RxPY/milestone/4", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/milestones/4/labels", "id": 5637868, "node_id": "MDk6TWlsZXN0b25lNTYzNzg2OA==", "number": 4, "title": "3.1.1", "description": null, "creator": {"login": "jcafhe", "id": 11948994, "node_id": "MDQ6VXNlcjExOTQ4OTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/11948994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcafhe", "html_url": "https://github.com/jcafhe", "followers_url": "https://api.github.com/users/jcafhe/followers", "following_url": "https://api.github.com/users/jcafhe/following{/other_user}", "gists_url": "https://api.github.com/users/jcafhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcafhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcafhe/subscriptions", "organizations_url": "https://api.github.com/users/jcafhe/orgs", "repos_url": "https://api.github.com/users/jcafhe/repos", "events_url": "https://api.github.com/users/jcafhe/events{/privacy}", "received_events_url": "https://api.github.com/users/jcafhe/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "open", "created_at": "2020-07-09T18:14:50Z", "updated_at": "2020-07-09T18:20:08Z", "due_on": null, "closed_at": null}, "comments": 5, "created_at": "2020-05-11T13:41:23Z", "updated_at": "2020-07-09T18:14:51Z", "closed_at": "2020-07-07T06:34:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why I run [mypy](http://mypy-lang.org/) on my project that uses `rx` I get the following kind of errors:\r\n\r\n```\r\nSkipping analyzing 'rx': found module but no type hints or library stubs\r\nSkipping analyzing 'rx.subject': found module but no type hints or library stubs\r\nSkipping analyzing 'rx.operators': found module but no type hints or library stubs\r\n```\r\n\r\nand the recommendation https://mypy.readthedocs.io/en/latest/running_mypy.html#missing-imports to ask the maintainer to support type hints, what this issue is about.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/512", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/512/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/512/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/512/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/512", "id": 610938319, "node_id": "MDU6SXNzdWU2MTA5MzgzMTk=", "number": 512, "title": "Pipeline called as many times as Observers", "user": {"login": "mecton", "id": 1779146, "node_id": "MDQ6VXNlcjE3NzkxNDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1779146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mecton", "html_url": "https://github.com/mecton", "followers_url": "https://api.github.com/users/mecton/followers", "following_url": "https://api.github.com/users/mecton/following{/other_user}", "gists_url": "https://api.github.com/users/mecton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mecton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mecton/subscriptions", "organizations_url": "https://api.github.com/users/mecton/orgs", "repos_url": "https://api.github.com/users/mecton/repos", "events_url": "https://api.github.com/users/mecton/events{/privacy}", "received_events_url": "https://api.github.com/users/mecton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928883, "node_id": "MDU6TGFiZWwzMjkyODg4Mw==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-01T19:56:15Z", "updated_at": "2020-08-18T07:02:57Z", "closed_at": "2020-08-18T07:02:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a first pipeline (main) to which some Observers subscribe and some pipelines branch out.\r\nI was quite surprised to see that the code in my main pipeline runs as many times as the amount of Observers.\r\n\r\n``` python\r\nsource = Subject()\r\n\r\nmain = source.pipe(\r\n    # do something\r\n    operators.do_action(lambda x: print('Main pipeline: ' + x))\r\n)\r\n\r\nmain.subscribe(lambda x: print(' Main Subscriber 1: ' + x))\r\nmain.subscribe(lambda x: print(' Main Subscriber 2: ' + x))\r\n\r\nbranch = main.pipe(\r\n    # do something else\r\n)\r\n\r\nbranch.subscribe(lambda x: print(' Branch Subscriber 1: ' + x))\r\nbranch.subscribe(lambda x: print(' Branch Subscriber 2: ' + x))\r\n\r\nsource.on_next('Hey')\r\n```\r\n\r\nAbove code prints:\r\n```\r\nMain pipeline: Hey\r\n Main Subscriber 1: Hey\r\nMain pipeline: Hey\r\n Main Subscriber 2: Hey\r\nMain pipeline: Hey\r\n Branch Subscriber 1: Hey\r\nMain pipeline: Hey\r\n Branch Subscriber 2: Hey\r\n```\r\n\r\nI was expecting the main pipeline to run only once per `on_next`, and populate Observers and branches sequentially, like:\r\n```\r\nMain pipeline: Hey\r\n Main Subscriber 1: Hey\r\n Main Subscriber 2: Hey\r\n Branch Subscriber 1: Hey\r\n Branch Subscriber 2: Hey\r\n```\r\n\r\nIs there a way to make it work as such?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/508", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/508/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/508/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/508/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/508", "id": 606759727, "node_id": "MDU6SXNzdWU2MDY3NTk3Mjc=", "number": 508, "title": "How to get observable mongo data", "user": {"login": "tareksamoud", "id": 25536043, "node_id": "MDQ6VXNlcjI1NTM2MDQz", "avatar_url": "https://avatars1.githubusercontent.com/u/25536043?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tareksamoud", "html_url": "https://github.com/tareksamoud", "followers_url": "https://api.github.com/users/tareksamoud/followers", "following_url": "https://api.github.com/users/tareksamoud/following{/other_user}", "gists_url": "https://api.github.com/users/tareksamoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/tareksamoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tareksamoud/subscriptions", "organizations_url": "https://api.github.com/users/tareksamoud/orgs", "repos_url": "https://api.github.com/users/tareksamoud/repos", "events_url": "https://api.github.com/users/tareksamoud/events{/privacy}", "received_events_url": "https://api.github.com/users/tareksamoud/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928883, "node_id": "MDU6TGFiZWwzMjkyODg4Mw==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-25T12:29:13Z", "updated_at": "2020-05-09T21:26:21Z", "closed_at": "2020-05-09T21:26:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello i'm try to get observable mongo data using Rx 3.1.0, im trying to implement \"Observable.from_\" an error appear that \"from_\" is not recongized as observable method\r\n\r\n> from pymongo import MongoClient\r\n> from rx import Observable\r\n> \r\n> def collect_data(dbname, collection):\r\n>     clt = MongoClient('localhost', 27017)\r\n>     db = clt[dbname]\r\n>     col = db[collection]\r\n> \r\n>     colData= col.find().limit(10)\r\n>     return Observable.from_(colData)\r\n> \r\n> collect_data('test', 'money').subscribe(print(data))\r\n\r\nan error appear that \"from_\" is not recongized as observable method\r\n\r\nI'm trying to use `rx.of` \r\n\r\n> from pymongo import MongoClient\r\n> import rx\r\n> \r\n> def collect_data(dbname, collection):\r\n>     clt = MongoClient('localhost', 27017)\r\n>     db = clt[dbname]\r\n>     col = db[collection]\r\n> \r\n>     colData= col.find().limit(10)\r\n>     return rx.of(colData)\r\n> \r\n> collect_data('test', 'money').subscribe(lambda data: print('{0}'.format(data)))\r\n\r\nI get `<pymongo.cursor.Cursor object at 0x000001BF824FE8C8>`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/505", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/505/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/505/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/505/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/505", "id": 600495463, "node_id": "MDU6SXNzdWU2MDA0OTU0NjM=", "number": 505, "title": "Concurrency issue using zip operator", "user": {"login": "mmpio", "id": 1876002, "node_id": "MDQ6VXNlcjE4NzYwMDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1876002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmpio", "html_url": "https://github.com/mmpio", "followers_url": "https://api.github.com/users/mmpio/followers", "following_url": "https://api.github.com/users/mmpio/following{/other_user}", "gists_url": "https://api.github.com/users/mmpio/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmpio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmpio/subscriptions", "organizations_url": "https://api.github.com/users/mmpio/orgs", "repos_url": "https://api.github.com/users/mmpio/repos", "events_url": "https://api.github.com/users/mmpio/events{/privacy}", "received_events_url": "https://api.github.com/users/mmpio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-15T18:16:32Z", "updated_at": "2020-07-24T21:18:33Z", "closed_at": "2020-07-24T21:18:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello, \r\nThe piece of code below produces an exception \"pop from empty list\".\r\n```python\r\nimport rx.scheduler\r\nimport rx.operators\r\nimport rx.disposable\r\nimport time\r\nimport typing\r\n\r\n\r\nclass Generator:\r\n    def __init__(self):\r\n        self.__index = 0\r\n        self.__acquire = True\r\n\r\n    def generate(self) -> 'rx.Observable':\r\n        return rx.create(\r\n            self.__generate\r\n        )\r\n\r\n    def __generate(self,\r\n                   observer: 'rx.typing.Observer',\r\n                   scheduler: 'typing.Optional[rx.typing.ScheduledAction]') -> 'rx.typing.Disposable':\r\n        while self.__acquire:\r\n            observer.on_next(self.__index)\r\n            self.__index += 1\r\n\r\n        return rx.disposable.Disposable(action=self.__dispose)\r\n\r\n    def __dispose(self):\r\n        pass\r\n\r\n\r\nif __name__ == '__main__':\r\n    rx.zip(\r\n        Generator().generate().pipe(rx.operators.subscribe_on(scheduler=rx.scheduler.NewThreadScheduler())),\r\n        Generator().generate().pipe(rx.operators.subscribe_on(scheduler=rx.scheduler.NewThreadScheduler())),\r\n    ).subscribe(\r\n        on_next=lambda x: print(x),\r\n        on_error=lambda e: print(e),\r\n        on_completed=lambda: print(\"onCompleted\")\r\n    )\r\n    time.sleep(3600)\r\n\r\n```\r\n\r\nI have proposed a fix : #506 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/498", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/498/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/498/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/498/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/498", "id": 562494825, "node_id": "MDU6SXNzdWU1NjI0OTQ4MjU=", "number": 498, "title": "from_future and asyncio.CancelledError", "user": {"login": "frederikaalund", "id": 545423, "node_id": "MDQ6VXNlcjU0NTQyMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/545423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frederikaalund", "html_url": "https://github.com/frederikaalund", "followers_url": "https://api.github.com/users/frederikaalund/followers", "following_url": "https://api.github.com/users/frederikaalund/following{/other_user}", "gists_url": "https://api.github.com/users/frederikaalund/gists{/gist_id}", "starred_url": "https://api.github.com/users/frederikaalund/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frederikaalund/subscriptions", "organizations_url": "https://api.github.com/users/frederikaalund/orgs", "repos_url": "https://api.github.com/users/frederikaalund/repos", "events_url": "https://api.github.com/users/frederikaalund/events{/privacy}", "received_events_url": "https://api.github.com/users/frederikaalund/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 32928881, "node_id": "MDU6TGFiZWwzMjkyODg4MQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/ReactiveX/RxPY/milestones/4", "html_url": "https://github.com/ReactiveX/RxPY/milestone/4", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/milestones/4/labels", "id": 5637868, "node_id": "MDk6TWlsZXN0b25lNTYzNzg2OA==", "number": 4, "title": "3.1.1", "description": null, "creator": {"login": "jcafhe", "id": 11948994, "node_id": "MDQ6VXNlcjExOTQ4OTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/11948994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcafhe", "html_url": "https://github.com/jcafhe", "followers_url": "https://api.github.com/users/jcafhe/followers", "following_url": "https://api.github.com/users/jcafhe/following{/other_user}", "gists_url": "https://api.github.com/users/jcafhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcafhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcafhe/subscriptions", "organizations_url": "https://api.github.com/users/jcafhe/orgs", "repos_url": "https://api.github.com/users/jcafhe/repos", "events_url": "https://api.github.com/users/jcafhe/events{/privacy}", "received_events_url": "https://api.github.com/users/jcafhe/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "open", "created_at": "2020-07-09T18:14:50Z", "updated_at": "2020-07-09T18:20:08Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2020-02-10T11:20:23Z", "updated_at": "2020-07-09T18:17:12Z", "closed_at": "2020-05-26T20:19:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The [`from_future`](https://github.com/ReactiveX/RxPY/blob/master/rx/core/observable/fromfuture.py) operator no longer forwards `asyncio.CancelledError`s. This is due to a [change](https://bugs.python.org/issue32528) in Python 3.8 that makes `asyncio.CancelledError` inherit from `BaseException` (it inherited from `Exception` in previous releases).\r\n\r\nThe [current implementation](https://github.com/ReactiveX/RxPY/blob/master/rx/core/observable/fromfuture.py#L29) of `from_future` only forwards `Exception`s:\r\n```\r\n        def done(future):\r\n            try:\r\n                value = future.result()\r\n            except Exception as ex:  # pylint: disable=broad-except\r\n                observer.on_error(ex)\r\n            else:\r\n                observer.on_next(value)\r\n                observer.on_completed()\r\n```\r\n\r\nI suggest that we either:\r\n * Broaden the exception handler even more, so that `BaseException`s are forwarded.\r\n * Make a specialized version of `from_future` (say `from_coro`) that forwards the relevant cancellation exceptions. I think that the built-in `asyncio.CancelledError` should be supported by default.\r\n * Add argument to `from_future` that specifies the exception types, that we want to forward. E.g., `ops.from_future(fut, exceptions=(Exception, asyncio.CancelledError))`.\r\n\r\n---\r\n\r\nI got hit by this issue in practice. It gave me a short and non-descriptive stack trace:\r\n```\r\n<27>1 2020-02-10T11:43:55.556901+01:00 zeus1934001 baxter 5680 - - [geist.geist] Stopped due to error:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/site-packages/baxter/__main__.py\", line 40, in main\r\n    geist.run(_amain())\r\n  File \"/usr/lib/python3.8/site-packages/geist/geist.py\", line 40, in run\r\n    self.loop.run_forever()\r\n  File \"uvloop/loop.pyx\", line 1312, in uvloop.loop.Loop.run_forever\r\n  File \"uvloop/loop.pyx\", line 492, in uvloop.loop.Loop._run\r\n  File \"uvloop/loop.pyx\", line 409, in uvloop.loop.Loop._on_idle\r\n  File \"uvloop/cbhandles.pyx\", line 70, in uvloop.loop.Handle._run\r\n  File \"usr/lib/python3.8/site-packages/rx/core/observable/fromfuture.py\", line 28, in done\r\nasyncio.exceptions.CancelledError\r\n```\r\nThere are no indications of which task got cancelled. This makes it very difficult to debug.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/491", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/491/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/491/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/491/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/491", "id": 558663280, "node_id": "MDU6SXNzdWU1NTg2NjMyODA=", "number": 491, "title": "AttributeError: type object 'Observable' has no attribute 'from_iter'", "user": {"login": "binbjz", "id": 8213913, "node_id": "MDQ6VXNlcjgyMTM5MTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/8213913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/binbjz", "html_url": "https://github.com/binbjz", "followers_url": "https://api.github.com/users/binbjz/followers", "following_url": "https://api.github.com/users/binbjz/following{/other_user}", "gists_url": "https://api.github.com/users/binbjz/gists{/gist_id}", "starred_url": "https://api.github.com/users/binbjz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/binbjz/subscriptions", "organizations_url": "https://api.github.com/users/binbjz/orgs", "repos_url": "https://api.github.com/users/binbjz/repos", "events_url": "https://api.github.com/users/binbjz/events{/privacy}", "received_events_url": "https://api.github.com/users/binbjz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928883, "node_id": "MDU6TGFiZWwzMjkyODg4Mw==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-02T08:31:14Z", "updated_at": "2020-02-06T22:02:53Z", "closed_at": "2020-02-06T22:02:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Create the data flow based on the iterator.**\r\n\r\n**Version info:**\r\nOS: Mac OS catalina 10.15.3\r\npython version: 3.8.1\r\nRx Version: 3.0.1\r\n```python\r\nfrom rx import Observable\r\nobs = Observable.from_iterable(range(4))\r\nobs.subscribe(print)\r\n```\r\n**Expected results:**\r\noutput\uff1a\r\n0\r\n1\r\n2\r\n3\r\n\r\n**Actual results:**\r\nAttributeError: type object 'Observable' has no attribute 'from_iter'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/490", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/490/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/490/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/490/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/490", "id": 557383924, "node_id": "MDU6SXNzdWU1NTczODM5MjQ=", "number": 490, "title": "Schedulers behaviour question.", "user": {"login": "ldulcic", "id": 10235218, "node_id": "MDQ6VXNlcjEwMjM1MjE4", "avatar_url": "https://avatars2.githubusercontent.com/u/10235218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldulcic", "html_url": "https://github.com/ldulcic", "followers_url": "https://api.github.com/users/ldulcic/followers", "following_url": "https://api.github.com/users/ldulcic/following{/other_user}", "gists_url": "https://api.github.com/users/ldulcic/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldulcic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldulcic/subscriptions", "organizations_url": "https://api.github.com/users/ldulcic/orgs", "repos_url": "https://api.github.com/users/ldulcic/repos", "events_url": "https://api.github.com/users/ldulcic/events{/privacy}", "received_events_url": "https://api.github.com/users/ldulcic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928883, "node_id": "MDU6TGFiZWwzMjkyODg4Mw==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-30T09:59:51Z", "updated_at": "2020-05-09T21:27:13Z", "closed_at": "2020-05-09T21:27:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I'm fairly new to RxPY (I worked with RxJava before) and so far it's been a good experience but there are some examples that I just don't understand well enough. Here is an example where I'm not sure what's going on.\r\n\r\nObservable:\r\n```python\r\ndef observable():\r\n    def subscribe(observer, scheduler):\r\n        while True:\r\n            observer.on_next(\"item\")\r\n\r\n    return rx.create(subscribe)\r\n```\r\n\r\nWhen I subscribe to observable and sample it every second, `on_next` is never called:\r\n```python\r\nobservable().pipe(\r\n    ops.sample(1)\r\n).subscribe(on_next=print)\r\n```\r\nIf I omit `sample` operator, everything works fine. \r\n\r\nWhen I subscribe observable on background thread, everything works fine, `on_next` is called every second:\r\n```python\r\nobservable().pipe(\r\n    ops.subscribe_on(ThreadPoolScheduler(1)),\r\n    ops.sample(1)\r\n).subscribe(on_next=print)\r\n```\r\n```\r\nitem\r\nitem\r\nitem\r\n...\r\n```\r\nAlso, if I subscribe on background thread via `scheduler` parameter it doesn't work, `on_next` is never called:\r\n```python\r\nobservable().pipe(\r\n    ops.sample(1)\r\n).subscribe(on_next=print, scheduler=ThreadPoolScheduler(1))\r\n```\r\n\r\nI'd appreciate if someone could explain why is `on_next` never called in first example, I also don't understand what's the difference between second and third example? I tried googling, reading the docs and searching issues but I didn't find anything that clarifies this.\r\n\r\nAlso is there some way to get back on main thread with `observe_on` when we subscribe on background thread? I didn't found `MainThreadScheduler`.\r\n\r\nI'm using Python 3.6 and rx==3.0.1.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/489", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/489/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/489/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/489/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/489", "id": 554759872, "node_id": "MDU6SXNzdWU1NTQ3NTk4NzI=", "number": 489, "title": "Scheduler provided in subscribe is not used for all observable factories", "user": {"login": "frederikaalund", "id": 545423, "node_id": "MDQ6VXNlcjU0NTQyMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/545423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frederikaalund", "html_url": "https://github.com/frederikaalund", "followers_url": "https://api.github.com/users/frederikaalund/followers", "following_url": "https://api.github.com/users/frederikaalund/following{/other_user}", "gists_url": "https://api.github.com/users/frederikaalund/gists{/gist_id}", "starred_url": "https://api.github.com/users/frederikaalund/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frederikaalund/subscriptions", "organizations_url": "https://api.github.com/users/frederikaalund/orgs", "repos_url": "https://api.github.com/users/frederikaalund/repos", "events_url": "https://api.github.com/users/frederikaalund/events{/privacy}", "received_events_url": "https://api.github.com/users/frederikaalund/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-24T14:15:19Z", "updated_at": "2020-02-03T15:12:25Z", "closed_at": "2020-02-03T13:49:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We now have `Observable.subcribe(..., scheduler=scheduler)`, which is really nice. Let's take the API all the way.\r\n\r\n[The documentation says that](https://rxpy.readthedocs.io/en/latest/get_started.html#default-scheduler):\r\n\r\n> Operators that accept a scheduler select the scheduler to use in the following way:\r\n>  * If a scheduler is provided for the operator, then use it.\r\n>  * If a default scheduler is provided in subscribe, then use it.\r\n>  * Otherwise use the default scheduler of the operator.\r\n\r\nI know that this applies to operators but I think that it would make sense if it also applied to observable factories. This way, we can finally get rid of all the `scheduler=scheduler` boilerplate. See #183 for additional info.\r\n\r\nThe `timer` observable factory, for instance, still defaults to the `TimeoutScheduler` .\r\n\r\nI guess this is a feature request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/488", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/488/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/488/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/488/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/488", "id": 552905988, "node_id": "MDU6SXNzdWU1NTI5MDU5ODg=", "number": 488, "title": "count() doesn't seem to work with group_by()", "user": {"login": "fra-luc", "id": 44058367, "node_id": "MDQ6VXNlcjQ0MDU4MzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/44058367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fra-luc", "html_url": "https://github.com/fra-luc", "followers_url": "https://api.github.com/users/fra-luc/followers", "following_url": "https://api.github.com/users/fra-luc/following{/other_user}", "gists_url": "https://api.github.com/users/fra-luc/gists{/gist_id}", "starred_url": "https://api.github.com/users/fra-luc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fra-luc/subscriptions", "organizations_url": "https://api.github.com/users/fra-luc/orgs", "repos_url": "https://api.github.com/users/fra-luc/repos", "events_url": "https://api.github.com/users/fra-luc/events{/privacy}", "received_events_url": "https://api.github.com/users/fra-luc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 32928883, "node_id": "MDU6TGFiZWwzMjkyODg4Mw==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-21T14:18:25Z", "updated_at": "2020-05-26T20:20:37Z", "closed_at": "2020-05-26T20:20:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\nwhile trying this library I came across what seems to be a bug. I'm trying to group a stream of integers ranging from 0 to 9 by being odd or even.\r\n\r\n```python\r\nfrom rx import from_, range as rxrange\r\nfrom rx.operators import group_by, count\r\n\r\n\r\ndef even_or_odd(x):\r\n    if x % 2 == 0:\r\n        return 'even'\r\n    return 'odd'\r\n\r\n\r\ndef group_consumer(group_observable):\r\n    def print_number(n):\r\n        print(f\"Observable {group_observable.key}: count {n}\")\r\n\r\n    group_observable.pipe(count()).subscribe(print_number)\r\n\r\n\r\nprint(\"---> With from_\")\r\ntest1 = from_(range(10)).pipe(group_by(even_or_odd)).subscribe(group_consumer)\r\nprint(\"\\n---> With rx.range\")\r\ntest2 = rxrange(0, 10, 1).pipe(group_by(even_or_odd)).subscribe(group_consumer)\r\n\r\n```\r\n\r\nThe output is:\r\n\r\n```bash\r\n---> With from_\r\nObservable even: count 0\r\nObservable odd: count 0\r\n\r\n---> With rx.range\r\nObservable even: count 3\r\nObservable odd: count 3\r\n\r\nProcess finished with exit code 0\r\n```\r\n\r\nTwo things are odd in the output:\r\n\r\n1. The result is different depending upon the usage of `from_` or `rx.range` (they should do the same, right?)\r\n2. In both cases the result is wrong (should be 5 and 5, right?)\r\n\r\nI hope I am not making some silly mistake,\r\nthank you for your help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/485", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/485/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/485/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/485/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/485", "id": 552522355, "node_id": "MDU6SXNzdWU1NTI1MjIzNTU=", "number": 485, "title": "observable is not repeated after concat", "user": {"login": "shilonosov", "id": 471391, "node_id": "MDQ6VXNlcjQ3MTM5MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/471391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shilonosov", "html_url": "https://github.com/shilonosov", "followers_url": "https://api.github.com/users/shilonosov/followers", "following_url": "https://api.github.com/users/shilonosov/following{/other_user}", "gists_url": "https://api.github.com/users/shilonosov/gists{/gist_id}", "starred_url": "https://api.github.com/users/shilonosov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shilonosov/subscriptions", "organizations_url": "https://api.github.com/users/shilonosov/orgs", "repos_url": "https://api.github.com/users/shilonosov/repos", "events_url": "https://api.github.com/users/shilonosov/events{/privacy}", "received_events_url": "https://api.github.com/users/shilonosov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-20T21:48:01Z", "updated_at": "2020-03-02T19:51:02Z", "closed_at": "2020-03-02T19:51:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI was trying to port some code I have in c# to python. Especially a piece of code that does error handling and retry. One part of that code is using catch and repeat on observable generated with defer. However, I can't make it work.\r\n\r\nIt seems to me that **retry** operator is being ignored after **concat** operator.\r\n\r\nHere is my code:\r\n```python\r\nfrom datetime import timedelta, datetime\r\n\r\nimport rx\r\nfrom rx import operators as ops\r\nfrom rx.core.typing import Observer\r\nfrom rx.scheduler import NewThreadScheduler\r\n\r\n\r\nclass ConsoleObserver(Observer):\r\n    def __init__(self):\r\n        self._start = datetime.now()\r\n\r\n    def on_next(self, x):\r\n        print(f\"{datetime.now() - self._start} next: {x}\")\r\n\r\n    def on_error(self, e):\r\n        print(f\"{datetime.now() - self._start} error: {e}\")\r\n\r\n    def on_completed(self):\r\n        print(f\"{datetime.now() - self._start} completed\")\r\n\r\n\r\ndef main():\r\n    scheduler = NewThreadScheduler()\r\n\r\n    ints = rx.interval(period=timedelta(seconds=1), scheduler=scheduler)\r\n    ints = ints.pipe(\r\n        ops.take(3)\r\n    )\r\n\r\n    error = rx.of(\"error?\")\r\n\r\n    stream = rx.concat(ints, error)\r\n    stream = stream.pipe(\r\n        ops.repeat(2),\r\n    )\r\n\r\n    d = stream.subscribe(ConsoleObserver())\r\n\r\n    print(\"Hello world!\")\r\n    input()\r\n\r\n    d.dispose()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    try:\r\n        main()\r\n    except Exception as e:\r\n        print(\"got an exception:\", e)\r\n```\r\n\r\nActual output:\r\n```\r\nHello world!\r\n0:00:01.002891 next: 0\r\n0:00:02.002933 next: 1\r\n0:00:03.002997 next: 2\r\n0:00:03.004000 next: error?\r\n0:00:03.005997 completed\r\n```\r\n\r\nExpected output:\r\n```\r\nHello world!\r\n0:00:01.002891 next: 0\r\n0:00:02.002933 next: 1\r\n0:00:03.002997 next: 2\r\n0:00:03.004000 next: error?\r\n0:00:04.002891 next: 0\r\n0:00:05.002933 next: 1\r\n0:00:06.002997 next: 2\r\n0:00:06.004000 next: error?\r\n0:00:06.005997 completed\r\n```\r\n\r\nIf I replace `stream = rx.concat(ints, error)` with just `stream = ints` I can see the sequence is repeated, which is expected.\r\n\r\nThanks,\r\nDmitry", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/484", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/484/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/484/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/484/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/484", "id": 549873054, "node_id": "MDU6SXNzdWU1NDk4NzMwNTQ=", "number": 484, "title": "to_iterator seems to spin forever", "user": {"login": "c200chromebook", "id": 9907030, "node_id": "MDQ6VXNlcjk5MDcwMzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9907030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c200chromebook", "html_url": "https://github.com/c200chromebook", "followers_url": "https://api.github.com/users/c200chromebook/followers", "following_url": "https://api.github.com/users/c200chromebook/following{/other_user}", "gists_url": "https://api.github.com/users/c200chromebook/gists{/gist_id}", "starred_url": "https://api.github.com/users/c200chromebook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c200chromebook/subscriptions", "organizations_url": "https://api.github.com/users/c200chromebook/orgs", "repos_url": "https://api.github.com/users/c200chromebook/repos", "events_url": "https://api.github.com/users/c200chromebook/events{/privacy}", "received_events_url": "https://api.github.com/users/c200chromebook/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928883, "node_id": "MDU6TGFiZWwzMjkyODg4Mw==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-14T23:15:23Z", "updated_at": "2020-08-10T22:17:19Z", "closed_at": "2020-08-10T22:17:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "You'll excuse me if this is a dumb question - I'm looking to, in lieu of a subscribe fn, send back an iterator. I think this would be how to do it, but this indeed seems to spin forever. What am I doing wrong? Can I convert a observable to a generator or iterable?\r\n\r\n    z=rx.from_list(range(25)).to_iterator()", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/482", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/482/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/482/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/482/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/482", "id": 546958239, "node_id": "MDU6SXNzdWU1NDY5NTgyMzk=", "number": 482, "title": "Expand seems to be hitting some limit.", "user": {"login": "c200chromebook", "id": 9907030, "node_id": "MDQ6VXNlcjk5MDcwMzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9907030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c200chromebook", "html_url": "https://github.com/c200chromebook", "followers_url": "https://api.github.com/users/c200chromebook/followers", "following_url": "https://api.github.com/users/c200chromebook/following{/other_user}", "gists_url": "https://api.github.com/users/c200chromebook/gists{/gist_id}", "starred_url": "https://api.github.com/users/c200chromebook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c200chromebook/subscriptions", "organizations_url": "https://api.github.com/users/c200chromebook/orgs", "repos_url": "https://api.github.com/users/c200chromebook/repos", "events_url": "https://api.github.com/users/c200chromebook/events{/privacy}", "received_events_url": "https://api.github.com/users/c200chromebook/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-08T16:11:21Z", "updated_at": "2020-01-14T20:51:40Z", "closed_at": "2020-01-14T20:51:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have created this simple pipeline which should count up to 500, however, it only counts up to 319. 319 is somewhat less than 500, therefore I am confused. Why is this happening?\r\n\r\nPython 3.7.5 (default, Oct 31 2019, 15:18:51) [MSC v.1916 64 bit (AMD64)] on win32\r\nrx.__version__\r\n'3.0.1'\r\n```python\r\nimport rx\r\nfrom rx import operators as ops\r\n\r\nwork = [0]\r\nz = []\r\ninit = rx.from_list(work).pipe(ops.expand(lambda x: rx.Observable() if x == 500 else rx.from_list([x+1])))\r\ninit.subscribe(lambda x: z.append(x))\r\nprint(max(z))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/478", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/478/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/478/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/478/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/478", "id": 543960989, "node_id": "MDU6SXNzdWU1NDM5NjA5ODk=", "number": 478, "title": "release 3.0.2 or 3.1.0", "user": {"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-12-30T17:55:44Z", "updated_at": "2020-04-25T20:15:45Z", "closed_at": "2020-04-25T20:15:45Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Once #477 and #469 are merged, it would be worth doing a maintenance release with the few fixes that we did since July.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/476", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/476/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/476/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/476/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/476", "id": 537635847, "node_id": "MDU6SXNzdWU1Mzc2MzU4NDc=", "number": 476, "title": "timeout and retry cause \"Do not schedule blocking work!\"", "user": {"login": "freelancer1845", "id": 15095909, "node_id": "MDQ6VXNlcjE1MDk1OTA5", "avatar_url": "https://avatars0.githubusercontent.com/u/15095909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/freelancer1845", "html_url": "https://github.com/freelancer1845", "followers_url": "https://api.github.com/users/freelancer1845/followers", "following_url": "https://api.github.com/users/freelancer1845/following{/other_user}", "gists_url": "https://api.github.com/users/freelancer1845/gists{/gist_id}", "starred_url": "https://api.github.com/users/freelancer1845/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/freelancer1845/subscriptions", "organizations_url": "https://api.github.com/users/freelancer1845/orgs", "repos_url": "https://api.github.com/users/freelancer1845/repos", "events_url": "https://api.github.com/users/freelancer1845/events{/privacy}", "received_events_url": "https://api.github.com/users/freelancer1845/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-13T16:14:51Z", "updated_at": "2020-01-03T12:20:10Z", "closed_at": "2020-01-03T12:20:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\r\n\r\nI can't figure out how to use **timeout** and **retry** in the same operator chain. I think the timeout is scheduled in \"TimeoutScheduler\" but the retry moves it back to \"Trampolinscheduler\" resulting in strange behavior.\r\n\r\n\r\n# Example\r\n\r\n\r\n```python\r\nimport rx\r\nimport rx.operators\r\nimport datetime\r\nimport time\r\n\r\nrx.interval(5.0).pipe(\r\n    rx.operators.timeout(4.0),\r\n    rx.operators.retry()\r\n).subscribe(on_next=lambda x: print(\"next\"), on_error=lambda x: print(\"Error: \" + str(x)))\r\n\r\n\r\nwhile True:\r\n    time.sleep(1.0)\r\n```\r\nThis example produces unending \"Do not schedule blocking work!\" log messages originating form TrampolinScheduler.\r\n\r\nIf I add \r\n```python\r\nrx.operators.do_action(on_error=lambda x: print(\"Error: \" + str(x))),\r\n```\r\nto the operator chain i get:\r\n\r\n> Do not schedule blocking work!\r\n> Error: 'CurrentThreadSchedulerSingleton' object has no attribute 'schedule_periodic'\r\n\r\n(Also flooding the log)\r\n\r\nI tried using \r\n```python\r\nscheduler = rx.scheduler.ThreadPoolScheduler(max_workers=10)\r\n````\r\nwhich works if I use it as scheduler in the subscribe call.\r\n\r\nBut I'm wondering If this is the correct solution... because I don't really do blocking calls, do I?\r\n\r\nI my case I have an Observable that works like a heartbeat and if there is no heartbeat I want to emit a signal.\r\n\r\n\r\n## Java\r\n* I'm more used to RxJava where this works.\r\n\r\n```java\r\nObservable.interval(5000, TimeUnit.MILLISECONDS)\r\n                  .timeout(1000, TimeUnit.MILLISECONDS)\r\n                  .doOnError(er -> System.out.println(\"Timeout...\"))\r\n                  .retry()\r\n                  .subscribe();\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/472", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/472/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/472/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/472/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/472", "id": 532161581, "node_id": "MDU6SXNzdWU1MzIxNjE1ODE=", "number": 472, "title": "Could not await a subject that would pushed a value later", "user": {"login": "kerol2r20", "id": 3398826, "node_id": "MDQ6VXNlcjMzOTg4MjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/3398826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kerol2r20", "html_url": "https://github.com/kerol2r20", "followers_url": "https://api.github.com/users/kerol2r20/followers", "following_url": "https://api.github.com/users/kerol2r20/following{/other_user}", "gists_url": "https://api.github.com/users/kerol2r20/gists{/gist_id}", "starred_url": "https://api.github.com/users/kerol2r20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kerol2r20/subscriptions", "organizations_url": "https://api.github.com/users/kerol2r20/orgs", "repos_url": "https://api.github.com/users/kerol2r20/repos", "events_url": "https://api.github.com/users/kerol2r20/events{/privacy}", "received_events_url": "https://api.github.com/users/kerol2r20/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-12-03T17:57:05Z", "updated_at": "2020-01-16T02:22:11Z", "closed_at": "2020-01-16T02:22:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\n```py\r\nimport rx\r\nfrom rx import operators as rxop\r\nfrom rx.subject import ReplaySubject, Subject\r\nimport asyncio\r\n\r\nasync def main():\r\n    interval = rx.interval(2.0)\r\n    subject = Subject()\r\n    interval.subscribe(subject)\r\n\r\n    await subject.pipe(rxop.take(1)) # This would block forever\r\n\r\nasyncio.run(main())\r\n```\r\n\r\nI found a subject could not be awaited when it was empty at the beginning.\r\nBut if subject contain value at the beginning, it would work well.\r\n\r\n```py\r\nimport rx\r\nfrom rx import operators as rxop\r\nfrom rx.subject import ReplaySubject, Subject\r\nimport asyncio\r\n\r\nasync def main():\r\n    interval = rx.interval(2.0)\r\n    sub = ReplaySubject()\r\n    interval.subscribe(sub)\r\n    await asyncio.sleep(2.0) # Wait one value pushed into subject\r\n    await sub.pipe(rxop.take(1)) # This would work well\r\n\r\nasyncio.run(main())\r\n```\r\n\r\nHow to deal with it?\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/471", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/471/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/471/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/471", "id": 529649669, "node_id": "MDU6SXNzdWU1Mjk2NDk2Njk=", "number": 471, "title": "Could not await timeout observable", "user": {"login": "kerol2r20", "id": 3398826, "node_id": "MDQ6VXNlcjMzOTg4MjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/3398826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kerol2r20", "html_url": "https://github.com/kerol2r20", "followers_url": "https://api.github.com/users/kerol2r20/followers", "following_url": "https://api.github.com/users/kerol2r20/following{/other_user}", "gists_url": "https://api.github.com/users/kerol2r20/gists{/gist_id}", "starred_url": "https://api.github.com/users/kerol2r20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kerol2r20/subscriptions", "organizations_url": "https://api.github.com/users/kerol2r20/orgs", "repos_url": "https://api.github.com/users/kerol2r20/repos", "events_url": "https://api.github.com/users/kerol2r20/events{/privacy}", "received_events_url": "https://api.github.com/users/kerol2r20/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-28T01:49:18Z", "updated_at": "2019-12-02T03:08:49Z", "closed_at": "2019-11-30T03:16:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\n```py\r\nimport rx\r\nimport asyncio\r\nfrom rx import operators as op\r\n\r\nasync def main():\r\n    obs = rx.never().pipe(\r\n        op.timeout(1.0)\r\n    )\r\n    await obs\r\n\r\nasyncio.run(main())\r\n```\r\n\r\nThis snippet would block at `await obs`.\r\nI expect it would throw out a timeout exception, but it no do that.\r\nHow could I deal with it?\r\n\r\nThanks~", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/468", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/468/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/468/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/468/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/468", "id": 521982216, "node_id": "MDU6SXNzdWU1MjE5ODIyMTY=", "number": 468, "title": "How can I implement gRPC stream service with rxpy 3?", "user": {"login": "rld2drkw", "id": 6766414, "node_id": "MDQ6VXNlcjY3NjY0MTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6766414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rld2drkw", "html_url": "https://github.com/rld2drkw", "followers_url": "https://api.github.com/users/rld2drkw/followers", "following_url": "https://api.github.com/users/rld2drkw/following{/other_user}", "gists_url": "https://api.github.com/users/rld2drkw/gists{/gist_id}", "starred_url": "https://api.github.com/users/rld2drkw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rld2drkw/subscriptions", "organizations_url": "https://api.github.com/users/rld2drkw/orgs", "repos_url": "https://api.github.com/users/rld2drkw/repos", "events_url": "https://api.github.com/users/rld2drkw/events{/privacy}", "received_events_url": "https://api.github.com/users/rld2drkw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-13T06:10:15Z", "updated_at": "2019-12-05T04:35:47Z", "closed_at": "2019-12-05T04:35:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to implement gRPC stream servicer like below:\r\n\r\n```protobuf\r\nsyntax = \"proto3\";\r\n\r\nimport \"google/protobuf/empty.proto\";\r\n\r\nmessage Greeting {\r\n    string message = 1;\r\n}\r\n\r\nservice GreetingService {\r\n    rpc GreetStreaming(google.protobuf.Empty) returns (stream Greeting);\r\n}\r\n\r\n```\r\n\r\nIn RxPy 1.6, I could implement this service as shown below:\r\n\r\n```python\r\nimport rx\r\nimport grpc\r\nimport time\r\n\r\nfrom concurrent import futures\r\nfrom greeting_pb2_grpc import add_GreetingServiceServicer_to_server, GreetingServiceServicer\r\nfrom greeting_pb2 import Greeting\r\n\r\nclass GreetingServiceServicerImpl(GreetingServiceServicer):\r\n  def GreetStreaming(self, request, context):\r\n    message_stream = rx.Observable.interval(1000).take(5).map(lambda _: \"hello\")\r\n    for msg in message_stream.to_blocking():\r\n        yield Greeting(message=msg)\r\n\r\ndef serve():\r\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\r\n\r\n    add_GreetingServiceServicer_to_server(GreetingServiceServicerImpl(), server)\r\n    server.add_insecure_port(\"[::]:51216\")\r\n\r\n    server.start()\r\n    try:\r\n        while True:\r\n            time.sleep(60 * 60 * 24)\r\n    except KeyboardInterrupt:\r\n        print(\"finishing...\")\r\n        server.stop(1)\r\n    print(\"finished\")\r\n\r\nif __name__ == \"__main__\":\r\n    serve()\r\n\r\n```\r\n\r\nI could call this rpc method like this:\r\n\r\n```python\r\nimport grpc\r\n\r\nfrom greeting_pb2_grpc import GreetingServiceStub\r\nfrom google.protobuf.empty_pb2 import Empty\r\n\r\ndef client():\r\n    channel = grpc.insecure_channel(\"localhost:51216\")\r\n    greeting = GreetingServiceStub(channel)\r\n\r\n    for response in greeting.GreetStreaming(Empty()):\r\n        print(response.message)\r\n\r\nif __name__ == \"__main__\":\r\n    client()\r\n\r\n```\r\n\r\nNow, I would like to migrate this gRPC servicer to RxPy3, but I could not find the equivalent of \"to_blocking()\" which can iterate each item in a stream.\r\nI could find \"run()\" which blocks until an Observable completes, but it might not be helpful for my usecase.\r\n\r\nAny suggestions? Thank you in advance.\r\nRegards.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/466", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/466/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/466/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/466/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/466", "id": 518584759, "node_id": "MDU6SXNzdWU1MTg1ODQ3NTk=", "number": 466, "title": "Naming Conventions in RxPy", "user": {"login": "mahmoudajawad", "id": 316734, "node_id": "MDQ6VXNlcjMxNjczNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/316734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoudajawad", "html_url": "https://github.com/mahmoudajawad", "followers_url": "https://api.github.com/users/mahmoudajawad/followers", "following_url": "https://api.github.com/users/mahmoudajawad/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoudajawad/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoudajawad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoudajawad/subscriptions", "organizations_url": "https://api.github.com/users/mahmoudajawad/orgs", "repos_url": "https://api.github.com/users/mahmoudajawad/repos", "events_url": "https://api.github.com/users/mahmoudajawad/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoudajawad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928884, "node_id": "MDU6TGFiZWwzMjkyODg4NA==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-06T16:28:21Z", "updated_at": "2019-11-06T17:05:51Z", "closed_at": "2019-11-06T17:05:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Coming from `rxjs`, I'm finding few naming conventions little wired. Here I'm listing two that most noted by me:\r\n1. `rx.subject.Subject` uses `on_next` as method to send message to the `Subject`. I expect method name to be `Subject.name`.\r\n2. Although `Observable.subscribe` method is using `on_completed` as arg for `complete` event, `Observable` uses method name `dispose`. I expect method name to be `Observable.complete`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/465", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/465/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/465/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/465", "id": 516808657, "node_id": "MDU6SXNzdWU1MTY4MDg2NTc=", "number": 465, "title": "Completable, Single and Maybe", "user": {"login": "leinardi", "id": 273338, "node_id": "MDQ6VXNlcjI3MzMzOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/273338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leinardi", "html_url": "https://github.com/leinardi", "followers_url": "https://api.github.com/users/leinardi/followers", "following_url": "https://api.github.com/users/leinardi/following{/other_user}", "gists_url": "https://api.github.com/users/leinardi/gists{/gist_id}", "starred_url": "https://api.github.com/users/leinardi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leinardi/subscriptions", "organizations_url": "https://api.github.com/users/leinardi/orgs", "repos_url": "https://api.github.com/users/leinardi/repos", "events_url": "https://api.github.com/users/leinardi/events{/privacy}", "received_events_url": "https://api.github.com/users/leinardi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-03T10:34:05Z", "updated_at": "2019-11-03T20:45:33Z", "closed_at": "2019-11-03T20:45:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there something equivalent to the concept of Completable, Single and Maybe in RxPy3?\r\n\r\nI'm referring to this: http://reactivex.io/RxJava/javadoc/io/reactivex/Completable.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/457", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/457/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/457/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/457/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/457", "id": 485464569, "node_id": "MDU6SXNzdWU0ODU0NjQ1Njk=", "number": 457, "title": "Async function with flat_map()", "user": {"login": "belolap", "id": 12296900, "node_id": "MDQ6VXNlcjEyMjk2OTAw", "avatar_url": "https://avatars0.githubusercontent.com/u/12296900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belolap", "html_url": "https://github.com/belolap", "followers_url": "https://api.github.com/users/belolap/followers", "following_url": "https://api.github.com/users/belolap/following{/other_user}", "gists_url": "https://api.github.com/users/belolap/gists{/gist_id}", "starred_url": "https://api.github.com/users/belolap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belolap/subscriptions", "organizations_url": "https://api.github.com/users/belolap/orgs", "repos_url": "https://api.github.com/users/belolap/repos", "events_url": "https://api.github.com/users/belolap/events{/privacy}", "received_events_url": "https://api.github.com/users/belolap/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-08-26T21:35:25Z", "updated_at": "2019-10-05T20:44:32Z", "closed_at": "2019-10-05T20:44:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Observer does not recieve values if there is `flat_map()` operator in chain and mapper returns `Future`.\r\n\r\nRx: v3.0.1-2-g19b19087\r\nPython: 3.7.4\r\n\r\nTest code:\r\n```python\r\nfrom asyncio import get_event_loop, create_task, sleep\r\n\r\nfrom rx import operators as op\r\nfrom rx.core import Observer\r\nfrom rx.subject import Subject\r\nfrom rx.scheduler.eventloop import AsyncIOScheduler\r\n\r\n\r\ndef on_next(value, *args, **kwargs):\r\n    print('Recieve', value)\r\n\r\n\r\ndef maptest(value):\r\n    async def increase(value):\r\n        print('Increasing')\r\n        return value + 1\r\n\r\n    print('Returning task')\r\n    return create_task(increase(value))\r\n\r\n\r\nasync def go(loop):\r\n    print('Starting, creating stream')\r\n    stream = Subject()\r\n    tail = stream.pipe(op.flat_map(maptest))\r\n    tail.subscribe(Observer(on_next), scheduler=AsyncIOScheduler(loop))\r\n\r\n    print('Sending value')\r\n    stream.on_next(10)\r\n\r\n    print('Sleeping 5 sec')\r\n    await sleep(5)\r\n    print('End of sleeping')\r\n\r\nloop = get_event_loop()\r\nloop.run_until_complete(go(loop))\r\nprint('Happy end')\r\n```\r\nResult output:\r\n```\r\nStarting, creating stream\r\nSending value\r\nReturning task\r\nSleeping 5 sec\r\nIncreasing\r\nEnd of sleeping\r\nHappy end\r\n```\r\n\r\nThis is because of type checking in `_flat_map_internal()` from [flat_map()](../blob/cd3d5a5b833a0df3ecd91116c0243ebaa762578c/rx/core/operators/flatmap.py#L13-L18) operator:\r\n```python\r\n        if isinstance(mapper_result, collections.abc.Iterable):\r\n            result = from_(mapper_result)\r\n        else:\r\n            result = from_future(mapper_result) if is_future(\r\n                mapper_result) else mapper_result\r\n        return result\r\n```\r\n\r\nIf mapper returns `Future` Observable will create with `from_` operator, not with `from_future` operator, because:\r\n\r\n```python\r\n>>> issubclass(asyncio.Future, collections.abc.Iterable)\r\nTrue\r\n>>> issubclass(asyncio.Task, asyncio.Future)\r\nTrue\r\n```\r\n\r\nSo we need rewrite `mapper_result` type checking, for example:\r\n```python\r\n        if is_future(mapper_result):\r\n            result = from_future(mapper_result)\r\n        elif isinstance(mapper_result, collections.abc.Iterable):\r\n            result = from_(mapper_result)\r\n        else:\r\n            result = mapper_result\r\n        return result\r\n```\r\n\r\nNow all is ok, test output:\r\n```\r\nStarting, creating stream\r\nSending value\r\nReturning task\r\nSleeping 5 sec\r\nIncreasing\r\nRecieve 11\r\nEnd of sleeping\r\nHappy end\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/456", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/456/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/456/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/456", "id": 485311625, "node_id": "MDU6SXNzdWU0ODUzMTE2MjU=", "number": 456, "title": "from_marbles never returns when using Observable.__await__", "user": {"login": "remorses", "id": 31321188, "node_id": "MDQ6VXNlcjMxMzIxMTg4", "avatar_url": "https://avatars3.githubusercontent.com/u/31321188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/remorses", "html_url": "https://github.com/remorses", "followers_url": "https://api.github.com/users/remorses/followers", "following_url": "https://api.github.com/users/remorses/following{/other_user}", "gists_url": "https://api.github.com/users/remorses/gists{/gist_id}", "starred_url": "https://api.github.com/users/remorses/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/remorses/subscriptions", "organizations_url": "https://api.github.com/users/remorses/orgs", "repos_url": "https://api.github.com/users/remorses/repos", "events_url": "https://api.github.com/users/remorses/events{/privacy}", "received_events_url": "https://api.github.com/users/remorses/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-08-26T15:59:04Z", "updated_at": "2019-10-28T22:28:49Z", "closed_at": "2019-10-28T22:28:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code waits forever,\r\n```python\r\nimport asyncio\r\nimport rx\r\nimport rx.operators as op\r\nimport time\r\n\r\n\r\nsource1: rx.Observable = rx.from_marbles('a-b-3-4-|', )\r\n\r\nasync def main(loop):\r\n    x = source1.subscribe(\r\n        on_next = lambda i: print(\"1: {0}\".format(i)),\r\n        on_error = lambda e: print(\"Error Occurred: {0}\".format(e)),\r\n        on_completed = lambda: print(\"1 Done!\"),\r\n    )\r\n    await source1\r\n\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(main(loop))\r\nloop.close()\r\nprint('end')\r\n```\r\nbut replacing `await source1` with `source1.run()` works as expected.\r\nThis problem occurs only with `rx.from_marbles` and `rx.hot`, \r\nthe following code works as expected\r\n```python\r\nimport asyncio\r\nimport rx\r\nimport rx.operators as op\r\nimport time\r\nfrom rx.scheduler import ThreadPoolScheduler, NewThreadScheduler\r\n\r\nscheduler = ThreadPoolScheduler(2)\r\nscheduler = NewThreadScheduler()\r\n\r\ndef emitter(observer: rx.typing.Observer, _):\r\n    observer.on_next('a')\r\n    time.sleep(.2)\r\n    observer.on_next('b')\r\n    observer.on_completed()\r\n\r\nsource2 = rx.create(emitter)\r\n\r\nasync def main(loop):\r\n    x = source2.subscribe(\r\n        on_next = lambda i: print(\"2: {0}\".format(i)),\r\n        on_error = lambda e: print(\"Error Occurred: {0}\".format(e)),\r\n        on_completed = lambda: print(\"2 Done!\"),\r\n        # scheduler=scheduler,\r\n    )\r\n    await source2\r\n\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(main(loop))\r\nloop.close()\r\nprint('end')\r\n```\r\nUsing python 3.7.2 and `rx==3.0.1`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/454", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/454/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/454/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/454/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/454", "id": 476536041, "node_id": "MDU6SXNzdWU0NzY1MzYwNDE=", "number": 454, "title": "Learning, Examples, Tutorials", "user": {"login": "mitchelllisle", "id": 18128531, "node_id": "MDQ6VXNlcjE4MTI4NTMx", "avatar_url": "https://avatars2.githubusercontent.com/u/18128531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitchelllisle", "html_url": "https://github.com/mitchelllisle", "followers_url": "https://api.github.com/users/mitchelllisle/followers", "following_url": "https://api.github.com/users/mitchelllisle/following{/other_user}", "gists_url": "https://api.github.com/users/mitchelllisle/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitchelllisle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitchelllisle/subscriptions", "organizations_url": "https://api.github.com/users/mitchelllisle/orgs", "repos_url": "https://api.github.com/users/mitchelllisle/repos", "events_url": "https://api.github.com/users/mitchelllisle/events{/privacy}", "received_events_url": "https://api.github.com/users/mitchelllisle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1278977167, "node_id": "MDU6TGFiZWwxMjc4OTc3MTY3", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/documentation", "name": "documentation", "color": "bfdadc", "default": true, "description": ""}, {"id": 32928883, "node_id": "MDU6TGFiZWwzMjkyODg4Mw==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-04T10:02:27Z", "updated_at": "2020-08-10T22:11:58Z", "closed_at": "2020-08-10T22:11:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I am just getting into ReactiveX but am really enjoying it so far. With 3.0 coming out a lot of the old code snippets are out of data and although it's not too difficult to transpose, a lot of the old examples don't cover things like creating Observable from scratch etc.\r\n\r\nAre there any plans to work on some training material? If so, I would be happy to send across a list of things that would really help me as I'm learning that might help in determining what training material would be of use to others.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/451", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/451/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/451/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/451/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/451", "id": 470794732, "node_id": "MDU6SXNzdWU0NzA3OTQ3MzI=", "number": 451, "title": "RxPY 3.0.1: 'pytest-runner' package not found", "user": {"login": "leinardi", "id": 273338, "node_id": "MDQ6VXNlcjI3MzMzOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/273338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leinardi", "html_url": "https://github.com/leinardi", "followers_url": "https://api.github.com/users/leinardi/followers", "following_url": "https://api.github.com/users/leinardi/following{/other_user}", "gists_url": "https://api.github.com/users/leinardi/gists{/gist_id}", "starred_url": "https://api.github.com/users/leinardi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leinardi/subscriptions", "organizations_url": "https://api.github.com/users/leinardi/orgs", "repos_url": "https://api.github.com/users/leinardi/repos", "events_url": "https://api.github.com/users/leinardi/events{/privacy}", "received_events_url": "https://api.github.com/users/leinardi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928881, "node_id": "MDU6TGFiZWwzMjkyODg4MQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-07-21T15:35:47Z", "updated_at": "2019-07-22T20:18:36Z", "closed_at": "2019-07-22T20:18:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to bundle RxPY with flatpak but when I run the `setup.py` it fails with the following error:\r\n```\r\n    Complete output from command python setup.py egg_info:\r\n    Download error on https://pypi.org/simple/pytest-runner/: [Errno -3] Temporary failure in name resolution -- Some packages may not be found!\r\n    Couldn't find index page for 'pytest-runner' (maybe misspelled?)\r\n    Download error on https://pypi.org/simple/: [Errno -3] Temporary failure in name resolution -- Some packages may not be found!\r\n    No local packages or working download links found for pytest-runner\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-install-ejmo8xpg/Rx/setup.py\", line 64, in <module>\r\n        include_package_data=True\r\n      File \"/usr/lib/python3.7/site-packages/setuptools/__init__.py\", line 144, in setup\r\n        _install_setup_requires(attrs)\r\n      File \"/usr/lib/python3.7/site-packages/setuptools/__init__.py\", line 139, in _install_setup_requires\r\n        dist.fetch_build_eggs(dist.setup_requires)\r\n      File \"/usr/lib/python3.7/site-packages/setuptools/dist.py\", line 724, in fetch_build_eggs\r\n        replace_conflicting=True,\r\n      File \"/usr/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 782, in resolve\r\n        replace_conflicting=replace_conflicting\r\n      File \"/usr/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 1065, in best_match\r\n        return self.obtain(req, installer)\r\n      File \"/usr/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 1077, in obtain\r\n        return installer(requirement)\r\n      File \"/usr/lib/python3.7/site-packages/setuptools/dist.py\", line 791, in fetch_build_egg\r\n        return cmd.easy_install(req)\r\n      File \"/usr/lib/python3.7/site-packages/setuptools/command/easy_install.py\", line 673, in easy_install\r\n        raise DistutilsError(msg)\r\n    distutils.errors.DistutilsError: Could not find suitable distribution for Requirement.parse('pytest-runner')\r\n```\r\n\r\nAs a workaround I have to manually delete the line `setup_requires=['pytest-runner'],` from `setup.py` but it would be better to find a solution that doesn't require any manual workaround (like most of the other libraries on PyPI).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/449", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/449/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/449/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/449", "id": 470770606, "node_id": "MDU6SXNzdWU0NzA3NzA2MDY=", "number": 449, "title": "RxPY 3.0.1: catch_exception operator missing", "user": {"login": "leinardi", "id": 273338, "node_id": "MDQ6VXNlcjI3MzMzOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/273338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leinardi", "html_url": "https://github.com/leinardi", "followers_url": "https://api.github.com/users/leinardi/followers", "following_url": "https://api.github.com/users/leinardi/following{/other_user}", "gists_url": "https://api.github.com/users/leinardi/gists{/gist_id}", "starred_url": "https://api.github.com/users/leinardi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leinardi/subscriptions", "organizations_url": "https://api.github.com/users/leinardi/orgs", "repos_url": "https://api.github.com/users/leinardi/repos", "events_url": "https://api.github.com/users/leinardi/events{/privacy}", "received_events_url": "https://api.github.com/users/leinardi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-21T11:22:45Z", "updated_at": "2019-07-22T04:43:27Z", "closed_at": "2019-07-22T04:43:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm porting some code from RxPY 1.6.1 to 3.0.1 but I just notice that the operator `catch_exception` seems to be missing.\r\n\r\nIt is documented on the official doc:\r\n![image](https://user-images.githubusercontent.com/273338/61590463-12d92c00-abba-11e9-9acf-033ae86952b5.png)\r\n\r\nbut if you search for it inside the repo code you can't find any occurrence, beside the doc itself:\r\n![image](https://user-images.githubusercontent.com/273338/61590470-313f2780-abba-11e9-86dd-7a9fbb4be5fc.png)\r\n\r\nI noticed that there is an operator called `catch`: https://github.com/ReactiveX/RxPY/blob/43f54f4d4f1e6369cb3c2e0d9ed0359115a49847/rx/operators/__init__.py#L298\r\n\r\nshould this be used instead of  `catch_exception`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/445", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/445/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/445/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/445/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/445", "id": 462422716, "node_id": "MDU6SXNzdWU0NjI0MjI3MTY=", "number": 445, "title": "Multithreading problem with CurrentThreadScheduler", "user": {"login": "MichaelSchneeberger", "id": 2394299, "node_id": "MDQ6VXNlcjIzOTQyOTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2394299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelSchneeberger", "html_url": "https://github.com/MichaelSchneeberger", "followers_url": "https://api.github.com/users/MichaelSchneeberger/followers", "following_url": "https://api.github.com/users/MichaelSchneeberger/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelSchneeberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelSchneeberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelSchneeberger/subscriptions", "organizations_url": "https://api.github.com/users/MichaelSchneeberger/orgs", "repos_url": "https://api.github.com/users/MichaelSchneeberger/repos", "events_url": "https://api.github.com/users/MichaelSchneeberger/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelSchneeberger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-30T16:29:33Z", "updated_at": "2019-07-03T18:39:22Z", "closed_at": "2019-07-03T18:39:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "The code ...\r\n\r\n``` python\r\nrx.range(10).pipe(\r\n    rxop.flat_map(lambda v: rx.range(1)),\r\n    rxop.flat_map(lambda v: rx.range(1)),\r\n).run()\r\n```\r\n\r\n... raises the following exception ...\r\n\r\n```\r\n  File \"/home/mike/workspace/python/RxPY_3v0/rx/scheduler/currentthreadscheduler.py\", line 145, in schedule_absolute\r\n    Trampoline.run(local.queue)\r\n  File \"/home/mike/workspace/python/RxPY_3v0/rx/scheduler/currentthreadscheduler.py\", line 29, in run\r\n    queue.dequeue()\r\n  File \"/home/mike/workspace/python/RxPY_3v0/rx/internal/priorityqueue.py\", line 29, in dequeue\r\n    item: T1 = heapq.heappop(self.items)[0]\r\nIndexError: index out of range\r\n\r\n```\r\n\r\nI suspect that there is something wrong with the threading.local usage or the library itself. Because when I print the object pointers, I get sometimes different `PriorityQueue` pointers from the caller and the callee of the `PriorityQueue.clear` function. Here are the printed pointers from a run on my computer (they differ from run to run) where the second call to `clear` has different `PriorityQueue` pointers.\r\n\r\n```\r\ncall queue.clear <rx.internal.priorityqueue.PriorityQueue object at 0x7fd171c71f60>\r\ninside queue.clear <rx.internal.priorityqueue.PriorityQueue object at 0x7fd171c71f60>\r\ncall queue.clear <rx.internal.priorityqueue.PriorityQueue object at 0x7fd171be04a8>\r\ninside queue.clear <rx.internal.priorityqueue.PriorityQueue object at 0x7fd171be0860>\r\ncall queue.clear <rx.internal.priorityqueue.PriorityQueue object at 0x7fd171be0860>\r\ninside queue.clear <rx.internal.priorityqueue.PriorityQueue object at 0x7fd171be0860>\r\n...\r\n```\r\n\r\nHere are the prints statements I used:\r\n\r\n**currentthreadscheduler.py**\r\n\r\n``` python\r\n        local.queue.enqueue(si)\r\n        if local.idle:\r\n            local.idle = False\r\n            try:\r\n                Trampoline.run(local.queue)\r\n            finally:\r\n                local.idle = True\r\n                print('call queue.clear {}'.format(local.queue))\r\n                local.queue.clear()\r\n```\r\n\r\n**priorityqueue.py**\r\n\r\n``` python\r\n    def clear(self):\r\n        \"\"\"Remove all items from the queue.\"\"\"\r\n\r\n        print('inside queue.clear {}'.format(self))\r\n        self.items = []\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/439", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/439/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/439/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/439/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/439", "id": 459968398, "node_id": "MDU6SXNzdWU0NTk5NjgzOTg=", "number": 439, "title": "Can we create a new beta release before the final one?", "user": {"login": "4n4nd", "id": 22333506, "node_id": "MDQ6VXNlcjIyMzMzNTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/22333506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/4n4nd", "html_url": "https://github.com/4n4nd", "followers_url": "https://api.github.com/users/4n4nd/followers", "following_url": "https://api.github.com/users/4n4nd/following{/other_user}", "gists_url": "https://api.github.com/users/4n4nd/gists{/gist_id}", "starred_url": "https://api.github.com/users/4n4nd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/4n4nd/subscriptions", "organizations_url": "https://api.github.com/users/4n4nd/orgs", "repos_url": "https://api.github.com/users/4n4nd/repos", "events_url": "https://api.github.com/users/4n4nd/events{/privacy}", "received_events_url": "https://api.github.com/users/4n4nd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-24T15:50:26Z", "updated_at": "2019-07-02T18:40:31Z", "closed_at": "2019-07-02T18:40:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "the release on pypi and github are not in sync. Can we please create a `3.0.0b5` release so that they are in sync until the final v3 release?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/436", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/436/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/436/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/436", "id": 457687204, "node_id": "MDU6SXNzdWU0NTc2ODcyMDQ=", "number": 436, "title": "Difference between  subscribe_on and observe_on?", "user": {"login": "4n4nd", "id": 22333506, "node_id": "MDQ6VXNlcjIyMzMzNTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/22333506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/4n4nd", "html_url": "https://github.com/4n4nd", "followers_url": "https://api.github.com/users/4n4nd/followers", "following_url": "https://api.github.com/users/4n4nd/following{/other_user}", "gists_url": "https://api.github.com/users/4n4nd/gists{/gist_id}", "starred_url": "https://api.github.com/users/4n4nd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/4n4nd/subscriptions", "organizations_url": "https://api.github.com/users/4n4nd/orgs", "repos_url": "https://api.github.com/users/4n4nd/repos", "events_url": "https://api.github.com/users/4n4nd/events{/privacy}", "received_events_url": "https://api.github.com/users/4n4nd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1278977167, "node_id": "MDU6TGFiZWwxMjc4OTc3MTY3", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/documentation", "name": "documentation", "color": "bfdadc", "default": true, "description": ""}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-18T20:44:47Z", "updated_at": "2020-06-24T18:08:21Z", "closed_at": "2019-06-20T13:44:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": "resolved", "body": "[Here](https://rxpy.readthedocs.io/en/latest/reference_operators.html?highlight=observe_on#rx.operators.subscribe_on) it says to see the remarks section, but I couldn't find it. Is there any other documentation available for it?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/435", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/435/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/435/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/435/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/435", "id": 457643994, "node_id": "MDU6SXNzdWU0NTc2NDM5OTQ=", "number": 435, "title": "Question about 3.0 upgrade path", "user": {"login": "cowlicks", "id": 598099, "node_id": "MDQ6VXNlcjU5ODA5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/598099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cowlicks", "html_url": "https://github.com/cowlicks", "followers_url": "https://api.github.com/users/cowlicks/followers", "following_url": "https://api.github.com/users/cowlicks/following{/other_user}", "gists_url": "https://api.github.com/users/cowlicks/gists{/gist_id}", "starred_url": "https://api.github.com/users/cowlicks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cowlicks/subscriptions", "organizations_url": "https://api.github.com/users/cowlicks/orgs", "repos_url": "https://api.github.com/users/cowlicks/repos", "events_url": "https://api.github.com/users/cowlicks/events{/privacy}", "received_events_url": "https://api.github.com/users/cowlicks/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928883, "node_id": "MDU6TGFiZWwzMjkyODg4Mw==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-18T18:58:58Z", "updated_at": "2019-10-07T20:44:12Z", "closed_at": "2019-10-07T20:44:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I'm excited about using 3.0 in my own projects whenever it is released. However, I'm concerned there won't be a practical upgrade path for most projects.\r\n\r\nMy understanding is that 3.0 contains significant breaking changes (which are all needed improvements). But if I want to include it in a project, it would mean that my project cannot have dependencies which depend on rx 1.x. It would also mean no one could include my project as a dependency as long as they had anything that depended on 1.x. I feel like these limitations would dramatically slow adoption of 3.0.\r\n\r\nHave y'all considered releasing 3.0 as a separate package? I'd  use it immediately if so.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/432", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/432/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/432/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/432/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/432", "id": 457026732, "node_id": "MDU6SXNzdWU0NTcwMjY3MzI=", "number": 432, "title": "How to run the CPU concurrency example?", "user": {"login": "4n4nd", "id": 22333506, "node_id": "MDQ6VXNlcjIyMzMzNTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/22333506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/4n4nd", "html_url": "https://github.com/4n4nd", "followers_url": "https://api.github.com/users/4n4nd/followers", "following_url": "https://api.github.com/users/4n4nd/following{/other_user}", "gists_url": "https://api.github.com/users/4n4nd/gists{/gist_id}", "starred_url": "https://api.github.com/users/4n4nd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/4n4nd/subscriptions", "organizations_url": "https://api.github.com/users/4n4nd/orgs", "repos_url": "https://api.github.com/users/4n4nd/repos", "events_url": "https://api.github.com/users/4n4nd/events{/privacy}", "received_events_url": "https://api.github.com/users/4n4nd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-06-17T16:23:26Z", "updated_at": "2020-06-24T18:14:59Z", "closed_at": "2019-06-17T21:08:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": "resolved", "body": "I was trying to run the example [here](https://rxpy.readthedocs.io/en/latest/get_started.html#cpu-concurrency), but I get an error when I try to import `from rx.scheduler import ThreadPoolScheduler`. I am on pre-release `v3.0.0b4`. \r\n\r\nI think this might just be an outdated example that needs to be updated.\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/395", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/395/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/395/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/395/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/395", "id": 448460200, "node_id": "MDU6SXNzdWU0NDg0NjAyMDA=", "number": 395, "title": "to_list operator", "user": {"login": "MichaelSchneeberger", "id": 2394299, "node_id": "MDQ6VXNlcjIzOTQyOTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2394299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelSchneeberger", "html_url": "https://github.com/MichaelSchneeberger", "followers_url": "https://api.github.com/users/MichaelSchneeberger/followers", "following_url": "https://api.github.com/users/MichaelSchneeberger/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelSchneeberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelSchneeberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelSchneeberger/subscriptions", "organizations_url": "https://api.github.com/users/MichaelSchneeberger/orgs", "repos_url": "https://api.github.com/users/MichaelSchneeberger/repos", "events_url": "https://api.github.com/users/MichaelSchneeberger/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelSchneeberger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-25T12:27:16Z", "updated_at": "2020-06-24T20:58:52Z", "closed_at": "2019-05-30T11:03:54Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Why is there no `to_list` operator? (There was one in RxPY v1.6)\r\n\r\nThe current implementation of `to_iterable` is buffering all incoming elements into a list, and then converting it into an iterator. Why not directly returning the list itself?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/390", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/390/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/390/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/390/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/390", "id": 447085355, "node_id": "MDU6SXNzdWU0NDcwODUzNTU=", "number": 390, "title": "Unable to concat Observable[Observable]", "user": {"login": "hulucc", "id": 4343900, "node_id": "MDQ6VXNlcjQzNDM5MDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/4343900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hulucc", "html_url": "https://github.com/hulucc", "followers_url": "https://api.github.com/users/hulucc/followers", "following_url": "https://api.github.com/users/hulucc/following{/other_user}", "gists_url": "https://api.github.com/users/hulucc/gists{/gist_id}", "starred_url": "https://api.github.com/users/hulucc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hulucc/subscriptions", "organizations_url": "https://api.github.com/users/hulucc/orgs", "repos_url": "https://api.github.com/users/hulucc/repos", "events_url": "https://api.github.com/users/hulucc/events{/privacy}", "received_events_url": "https://api.github.com/users/hulucc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-22T11:37:29Z", "updated_at": "2020-06-24T22:03:48Z", "closed_at": "2019-05-23T03:07:49Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "It seems `concat` only support Iterable[Observable]", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/389", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/389/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/389/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/389/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/389", "id": 446770560, "node_id": "MDU6SXNzdWU0NDY3NzA1NjA=", "number": 389, "title": "type annotation style guide", "user": {"login": "jcafhe", "id": 11948994, "node_id": "MDQ6VXNlcjExOTQ4OTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/11948994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcafhe", "html_url": "https://github.com/jcafhe", "followers_url": "https://api.github.com/users/jcafhe/followers", "following_url": "https://api.github.com/users/jcafhe/following{/other_user}", "gists_url": "https://api.github.com/users/jcafhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcafhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcafhe/subscriptions", "organizations_url": "https://api.github.com/users/jcafhe/orgs", "repos_url": "https://api.github.com/users/jcafhe/repos", "events_url": "https://api.github.com/users/jcafhe/events{/privacy}", "received_events_url": "https://api.github.com/users/jcafhe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928883, "node_id": "MDU6TGFiZWwzMjkyODg4Mw==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-21T18:49:18Z", "updated_at": "2020-06-24T21:42:17Z", "closed_at": "2019-05-23T16:44:29Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "@dbrattli @erikkemperman  @MainRo Sorry to bother you but I have a question regarding the `Optional` qualifier. \r\n\r\nI'm planning to complete missing type annotations for operators and I often see in the public API (rx.operators.init) function parameters with a default value = `None` typed as not being `Optional` while they are typed as `Optional` in implementation files. E.g. `replay` operator: \r\n\r\n```python\r\n# public API\r\ndef replay(mapper: Mapper = None, \r\n           buffer_size: int = None, \r\n           window: typing.RelativeTime = None,\r\n           scheduler: typing.Scheduler = None) -> Callable[[Observable], Union[Observable, ConnectableObservable]]:\r\n\r\n# Implementation file\r\ndef _replay(mapper: Optional[Mapper] = None,\r\n            buffer_size: Optional[int] = None,\r\n            window: Optional[typing.RelativeTime] = None,\r\n            scheduler: Optional[Scheduler] = None\r\n            ) -> Callable[[Observable], Union[Observable, ConnectableObservable]]:\r\n```\r\n\r\n I understand that `Optional` is used to mark an argument which could be `None`, not an 'optional' parameter (default value).\r\n\r\nSo I was wondering if this is simply something that should be corrected or if this is some kind of pattern I'm not aware of?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/381", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/381/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/381/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/381/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/381", "id": 445677639, "node_id": "MDU6SXNzdWU0NDU2Nzc2Mzk=", "number": 381, "title": "provide version number in module.", "user": {"login": "honglei", "id": 1011330, "node_id": "MDQ6VXNlcjEwMTEzMzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1011330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honglei", "html_url": "https://github.com/honglei", "followers_url": "https://api.github.com/users/honglei/followers", "following_url": "https://api.github.com/users/honglei/following{/other_user}", "gists_url": "https://api.github.com/users/honglei/gists{/gist_id}", "starred_url": "https://api.github.com/users/honglei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honglei/subscriptions", "organizations_url": "https://api.github.com/users/honglei/orgs", "repos_url": "https://api.github.com/users/honglei/repos", "events_url": "https://api.github.com/users/honglei/events{/privacy}", "received_events_url": "https://api.github.com/users/honglei/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 972994944, "node_id": "MDU6TGFiZWw5NzI5OTQ5NDQ=", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/PR%20welcome", "name": "PR welcome", "color": "abfcc1", "default": false, "description": ""}, {"id": 32928881, "node_id": "MDU6TGFiZWwzMjkyODg4MQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-18T04:30:46Z", "updated_at": "2020-05-20T20:43:19Z", "closed_at": "2019-05-20T12:37:05Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Some thing like:\r\n\r\n```python\r\nimport rx\r\nrx.__version__\r\n```\r\n[https://stackoverflow.com/questions/20180543/how-to-check-version-of-python-modules](https://stackoverflow.com/questions/20180543/how-to-check-version-of-python-modules)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/380", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/380/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/380/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/380/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/380", "id": 445677007, "node_id": "MDU6SXNzdWU0NDU2NzcwMDc=", "number": 380, "title": "what is the function of the  `on_error` function in subscribe ?", "user": {"login": "honglei", "id": 1011330, "node_id": "MDQ6VXNlcjEwMTEzMzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1011330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honglei", "html_url": "https://github.com/honglei", "followers_url": "https://api.github.com/users/honglei/followers", "following_url": "https://api.github.com/users/honglei/following{/other_user}", "gists_url": "https://api.github.com/users/honglei/gists{/gist_id}", "starred_url": "https://api.github.com/users/honglei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honglei/subscriptions", "organizations_url": "https://api.github.com/users/honglei/orgs", "repos_url": "https://api.github.com/users/honglei/repos", "events_url": "https://api.github.com/users/honglei/events{/privacy}", "received_events_url": "https://api.github.com/users/honglei/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-18T04:19:33Z", "updated_at": "2020-05-20T20:52:16Z", "closed_at": "2019-05-19T20:04:50Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "\r\nVersion: python3.7/Rxpy3.0.0b1\r\nThe on_error won't catch the Exception raised in function `next_proc`, so , what is the function of `on_error`?\r\n\r\n```python\r\nfrom rx import of\r\nsource = of(None, 444, \"Gamma\", \"Delta\", \"Epsilon\")\r\ndef next_proc(i):\r\n    print(f\"Len: {len(i)}\")\r\nsource.subscribe(\r\n    on_next = next_proc ,\r\n    on_error = lambda e: print(f\"Error Occurred: {e}\"),\r\n    on_completed = lambda: print(\"Done!\"),\r\n)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/379", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/379/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/379/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/379/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/379", "id": 445671539, "node_id": "MDU6SXNzdWU0NDU2NzE1Mzk=", "number": 379, "title": "Is there an example of a smtp server?", "user": {"login": "jet10000", "id": 2258120, "node_id": "MDQ6VXNlcjIyNTgxMjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2258120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jet10000", "html_url": "https://github.com/jet10000", "followers_url": "https://api.github.com/users/jet10000/followers", "following_url": "https://api.github.com/users/jet10000/following{/other_user}", "gists_url": "https://api.github.com/users/jet10000/gists{/gist_id}", "starred_url": "https://api.github.com/users/jet10000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jet10000/subscriptions", "organizations_url": "https://api.github.com/users/jet10000/orgs", "repos_url": "https://api.github.com/users/jet10000/repos", "events_url": "https://api.github.com/users/jet10000/events{/privacy}", "received_events_url": "https://api.github.com/users/jet10000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-18T02:56:08Z", "updated_at": "2020-05-21T06:38:42Z", "closed_at": "2019-05-22T05:01:15Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "RxPY\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/377", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/377/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/377/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/377", "id": 444133072, "node_id": "MDU6SXNzdWU0NDQxMzMwNzI=", "number": 377, "title": "Invalid publish() annotation?", "user": {"login": "SF-300", "id": 3274505, "node_id": "MDQ6VXNlcjMyNzQ1MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3274505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SF-300", "html_url": "https://github.com/SF-300", "followers_url": "https://api.github.com/users/SF-300/followers", "following_url": "https://api.github.com/users/SF-300/following{/other_user}", "gists_url": "https://api.github.com/users/SF-300/gists{/gist_id}", "starred_url": "https://api.github.com/users/SF-300/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SF-300/subscriptions", "organizations_url": "https://api.github.com/users/SF-300/orgs", "repos_url": "https://api.github.com/users/SF-300/repos", "events_url": "https://api.github.com/users/SF-300/events{/privacy}", "received_events_url": "https://api.github.com/users/SF-300/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-14T21:27:02Z", "updated_at": "2020-05-20T21:05:32Z", "closed_at": "2019-05-16T17:24:13Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Hi,\r\n\r\n`publish` method is annotated as returning `ConnectableObservable` however - as far as I understand - it actually returns `Callable[[Observable], ConnectableObservable]`. This inconsistency makes Pycharm typechecker go nuts and I have to use `typing.cast` to silence it. Is it my misunderstanding or should I make PR to fix the annotation?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/375", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/375/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/375/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/375", "id": 442981023, "node_id": "MDU6SXNzdWU0NDI5ODEwMjM=", "number": 375, "title": "RxPY v3 Release It!", "user": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-05-11T10:58:07Z", "updated_at": "2019-07-17T20:14:01Z", "closed_at": "2019-07-17T05:57:34Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The release of v3 is set to June 1, and I would really like to get it released. What are the remaining issues or blockers? \r\n\r\nI don't think everything should be perfect for the release. After the release we should continue to improve RxPY and target a release v3.1 etc as soon as we get feedback on the v3 release.\r\n\r\nLets get it out!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/371", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/371/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/371/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/371/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/371", "id": 442716797, "node_id": "MDU6SXNzdWU0NDI3MTY3OTc=", "number": 371, "title": "rx.operators.do() broken in 3.0.0a3", "user": {"login": "SF-300", "id": 3274505, "node_id": "MDQ6VXNlcjMyNzQ1MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3274505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SF-300", "html_url": "https://github.com/SF-300", "followers_url": "https://api.github.com/users/SF-300/followers", "following_url": "https://api.github.com/users/SF-300/following{/other_user}", "gists_url": "https://api.github.com/users/SF-300/gists{/gist_id}", "starred_url": "https://api.github.com/users/SF-300/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SF-300/subscriptions", "organizations_url": "https://api.github.com/users/SF-300/orgs", "repos_url": "https://api.github.com/users/SF-300/repos", "events_url": "https://api.github.com/users/SF-300/events{/privacy}", "received_events_url": "https://api.github.com/users/SF-300/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-10T13:21:05Z", "updated_at": "2020-05-20T21:11:18Z", "closed_at": "2019-05-12T07:05:13Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Hello, \r\nIt seems that rx.operators.do() is broken in 3.0.0a3:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/*/lib/python3.7/site-packages/rx/core/observable/observable.py\", line 228, in pipe\r\n    return pipe(*operators)(self)\r\n  File \"/*/lib/python3.7/site-packages/rx/core/pipe.py\", line 25, in compose\r\n    return reduce(lambda obs, op: op(obs), operators, source)\r\n  File \"/*/lib/python3.7/site-packages/rx/core/pipe.py\", line 25, in <lambda>\r\n    return reduce(lambda obs, op: op(obs), operators, source)\r\n  File \"/*/lib/python3.7/site-packages/rx/core/operators/do.py\", line 94, in partial\r\n    return source.do_action(observer.on_next, observer.on_error, observer.on_completed)\r\nAttributeError: 'Observable' object has no attribute 'do_action'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/370", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/370/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/370/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/370/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/370", "id": 441736819, "node_id": "MDU6SXNzdWU0NDE3MzY4MTk=", "number": 370, "title": "Quick question: schedule_periodic(0.0, ...)", "user": {"login": "erikkemperman", "id": 3100637, "node_id": "MDQ6VXNlcjMxMDA2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3100637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikkemperman", "html_url": "https://github.com/erikkemperman", "followers_url": "https://api.github.com/users/erikkemperman/followers", "following_url": "https://api.github.com/users/erikkemperman/following{/other_user}", "gists_url": "https://api.github.com/users/erikkemperman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikkemperman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikkemperman/subscriptions", "organizations_url": "https://api.github.com/users/erikkemperman/orgs", "repos_url": "https://api.github.com/users/erikkemperman/repos", "events_url": "https://api.github.com/users/erikkemperman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikkemperman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-05-08T13:31:30Z", "updated_at": "2020-06-24T19:53:42Z", "closed_at": "2019-05-30T11:04:35Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "Quick question, there seem to be two competing approaches to implementing `schedule_periodic(0.0, ...)`:\r\n- Invoke the action once, and then don't re-schedule\r\n- Invoke the action very often, as quickly as possible\r\n\r\nThe first is mostly true for the schedulers which inherit the `SchedulerBase` implementation, the second is due to overriding that.\r\n\r\nIf I want to make things consistent for all schedulers, which approach should be used?\r\n\r\nI kind of think the first one is a bit weird, then we are simply doing `schedule()` but with a different callback signature. The second one is probably what people would expect, but might be a bit dangerous (e.g. CurrentThreadScheduler would never return from this call unless one of the action invocations disposes \"itself\").", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/365", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/365/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/365/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/365", "id": 440255367, "node_id": "MDU6SXNzdWU0NDAyNTUzNjc=", "number": 365, "title": "Wrong take_while_indexed example", "user": {"login": "Hongbo-Miao", "id": 3375461, "node_id": "MDQ6VXNlcjMzNzU0NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/3375461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hongbo-Miao", "html_url": "https://github.com/Hongbo-Miao", "followers_url": "https://api.github.com/users/Hongbo-Miao/followers", "following_url": "https://api.github.com/users/Hongbo-Miao/following{/other_user}", "gists_url": "https://api.github.com/users/Hongbo-Miao/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hongbo-Miao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hongbo-Miao/subscriptions", "organizations_url": "https://api.github.com/users/Hongbo-Miao/orgs", "repos_url": "https://api.github.com/users/Hongbo-Miao/repos", "events_url": "https://api.github.com/users/Hongbo-Miao/events{/privacy}", "received_events_url": "https://api.github.com/users/Hongbo-Miao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-03T23:16:53Z", "updated_at": "2020-05-05T21:55:38Z", "closed_at": "2019-05-04T03:49:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": "resolved", "body": "`take_while_indexed` currently is using `take_while` example.\r\n\r\nhttps://github.com/ReactiveX/RxPY/blob/e92a80f695489fff652a953a530d86d5a931a599/rx/operators/__init__.py#L2828-L2830", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/364", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/364/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/364/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/364/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/364", "id": 439421378, "node_id": "MDU6SXNzdWU0Mzk0MjEzNzg=", "number": 364, "title": "Bug in example for async V3", "user": {"login": "japrogramer", "id": 1387859, "node_id": "MDQ6VXNlcjEzODc4NTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1387859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japrogramer", "html_url": "https://github.com/japrogramer", "followers_url": "https://api.github.com/users/japrogramer/followers", "following_url": "https://api.github.com/users/japrogramer/following{/other_user}", "gists_url": "https://api.github.com/users/japrogramer/gists{/gist_id}", "starred_url": "https://api.github.com/users/japrogramer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japrogramer/subscriptions", "organizations_url": "https://api.github.com/users/japrogramer/orgs", "repos_url": "https://api.github.com/users/japrogramer/repos", "events_url": "https://api.github.com/users/japrogramer/events{/privacy}", "received_events_url": "https://api.github.com/users/japrogramer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 972994944, "node_id": "MDU6TGFiZWw5NzI5OTQ5NDQ=", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/PR%20welcome", "name": "PR welcome", "color": "abfcc1", "default": false, "description": ""}, {"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/ReactiveX/RxPY/milestones/2", "html_url": "https://github.com/ReactiveX/RxPY/milestone/2", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/milestones/2/labels", "id": 916147, "node_id": "MDk6TWlsZXN0b25lOTE2MTQ3", "number": 2, "title": "v3.0", "description": "", "creator": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2014-12-28T15:34:55Z", "updated_at": "2020-08-10T22:34:06Z", "due_on": "2019-06-01T07:00:00Z", "closed_at": "2019-07-17T06:26:56Z"}, "comments": 3, "created_at": "2019-05-02T04:18:17Z", "updated_at": "2020-06-24T18:44:14Z", "closed_at": "2019-05-30T17:18:38Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "```\r\n\u25b6 python examples/asyncio/toasyncgenerator.py                                                      \u221e\r\nTraceback (most recent call last):\r\n  File \"examples/asyncio/toasyncgenerator.py\", line 2, in <module>\r\n    asyncio = rx.config['asyncio']\r\nAttributeError: module 'rx' has no attribute 'config'\r\n(Science)\r\nCode/Forks/RxPY  master \u2714                                                                          4d  \u2349\r\n\u25b6 python examples/asyncio/toasynciterator.py                                                      \u221e\r\nTraceback (most recent call last):\r\n  File \"examples/asyncio/toasynciterator.py\", line 3, in <module>\r\n    from rx.concurrency import AsyncIOScheduler\r\nImportError: cannot import name 'AsyncIOScheduler' from 'rx.concurrency' (/home/archangel/VENV/Science/lib/python3.7/site-packages/rx/concurrency/__init__.py)\r\n(Science)\r\nCode/Forks/RxPY  master \u2714                                                                          4d  \u2349\r\n\u25b6 python examples/asyncio/await.py                                                                \u221e\r\nTraceback (most recent call last):\r\n  File \"examples/asyncio/await.py\", line 5, in <module>\r\n    stream = Observable.just(\"Hello, world!\")\r\nAttributeError: type object 'Observable' has no attribute 'just'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/358", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/358/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/358/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/358", "id": 436382361, "node_id": "MDU6SXNzdWU0MzYzODIzNjE=", "number": 358, "title": "Enforce CurrentThreadScheduler to run on a dedicated thread?", "user": {"login": "MichaelSchneeberger", "id": 2394299, "node_id": "MDQ6VXNlcjIzOTQyOTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2394299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelSchneeberger", "html_url": "https://github.com/MichaelSchneeberger", "followers_url": "https://api.github.com/users/MichaelSchneeberger/followers", "following_url": "https://api.github.com/users/MichaelSchneeberger/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelSchneeberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelSchneeberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelSchneeberger/subscriptions", "organizations_url": "https://api.github.com/users/MichaelSchneeberger/orgs", "repos_url": "https://api.github.com/users/MichaelSchneeberger/repos", "events_url": "https://api.github.com/users/MichaelSchneeberger/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelSchneeberger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 27, "created_at": "2019-04-23T20:46:05Z", "updated_at": "2020-05-20T20:59:46Z", "closed_at": "2019-05-18T15:19:11Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I have two concerns about the `rx.concurrency.currentthreadscheduler.CurrentThreadScheduler` class implementation. Both relate to the `__new__` method:\r\n\r\n``` python\r\n    def __new__(cls) -> 'CurrentThreadScheduler':\r\n        \"\"\"Ensure that each thread has at most a single instance.\"\"\"\r\n\r\n        thread = threading.current_thread()\r\n        self: 'CurrentThreadScheduler' = CurrentThreadScheduler._global.get(thread)\r\n        if not self:\r\n            self = super().__new__(cls)\r\n            CurrentThreadScheduler._global[thread] = self\r\n        return self\r\n```\r\n\r\n**1.** Is a `CurrentThreadScheduler` always supposed to schedule actions on the same thread? In my opinion, the `CurrentThreadScheduler` is attached to some thread once the trampoline is run for the first time or \"reactivated\".\r\n\r\n**2.** When I tried to extend from `CurrentThreadScheduler` in [rxbackpressure](https://github.com/MichaelSchneeberger/rxbackpressure) I couldn't do it because the `__new__` method would always return a `CurrentThreadScheduler`.\r\n\r\n``` python\r\nclass MyCurrentThreadScheduler(SchedulerMixin, CurrentThreadScheduler):\r\n    pass\r\n\r\nmy_current_thread_scheduler = MyCurrentThreadScheduler()\r\nprint(type(my_current_thread_scheduler))     # would print CurrentThreadScheduler\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/356", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/356/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/356/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/356/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/356", "id": 435911425, "node_id": "MDU6SXNzdWU0MzU5MTE0MjU=", "number": 356, "title": "observe_on operator does not propagate subscription scheduler", "user": {"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": {"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-04-22T22:04:24Z", "updated_at": "2020-04-25T08:38:50Z", "closed_at": "2019-04-24T20:20:21Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "The observe_on scheduler drops the scheduler parameter provided during subscription. As a consequence, the default scheduler provided in the pipe operator is lost when observe_on is used in the chain.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/355", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/355/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/355/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/355", "id": 435359760, "node_id": "MDU6SXNzdWU0MzUzNTk3NjA=", "number": 355, "title": "Fix type hints for pipe", "user": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 972994944, "node_id": "MDU6TGFiZWw5NzI5OTQ5NDQ=", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/PR%20welcome", "name": "PR welcome", "color": "abfcc1", "default": false, "description": ""}, {"id": 32928881, "node_id": "MDU6TGFiZWwzMjkyODg4MQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/ReactiveX/RxPY/milestones/2", "html_url": "https://github.com/ReactiveX/RxPY/milestone/2", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/milestones/2/labels", "id": 916147, "node_id": "MDk6TWlsZXN0b25lOTE2MTQ3", "number": 2, "title": "v3.0", "description": "", "creator": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2014-12-28T15:34:55Z", "updated_at": "2020-08-10T22:34:06Z", "due_on": "2019-06-01T07:00:00Z", "closed_at": "2019-07-17T06:26:56Z"}, "comments": 7, "created_at": "2019-04-20T05:41:10Z", "updated_at": "2020-05-20T21:16:49Z", "closed_at": "2019-05-11T21:40:49Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "The current type hints for the pipe operator is not correct since it assumes that the final type will always be an `Observable`. Thus there's problems when piping to functions such as `to_future` that returns a `Future`.  The current typing hints are:\r\n\r\n```py\r\ndef pipe(*operators: Callable[[Observable], Observable]) -> Callable[[Observable], Observable]:\r\n```\r\n\r\nThe correct would be that the callables were `Callable[[A], B]` and `Callable[[B], C]` etc, but this is not possible when using the star operator as above. We would probably need to do something like using overloads and specifying the N first cases as with [RxJS and typescript](https://github.com/ReactiveX/rxjs/blob/a9c87f6a6b7deed12950ac926409a0c4617f4313/src/internal/Observable.ts#L309) e.g:\r\n\r\n```ts\r\n/* tslint:disable:max-line-length */\r\n  pipe(): Observable<T>;\r\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\r\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\r\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\r\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\r\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\r\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\r\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\r\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\r\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\r\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\r\n```\r\n\r\nBut I'm unsure how to do this properly in Python so that IDEs, mypy and linters acually can handle this so you get proper completion on the stuff that comes out of the pipe. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/353", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/353/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/353/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/353", "id": 434158999, "node_id": "MDU6SXNzdWU0MzQxNTg5OTk=", "number": 353, "title": "Why does the on_next() operation of a subject in NewThreadScheduler does not affect its behavior in the main thread?", "user": {"login": "tonyabracadabra", "id": 6690727, "node_id": "MDQ6VXNlcjY2OTA3Mjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6690727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tonyabracadabra", "html_url": "https://github.com/tonyabracadabra", "followers_url": "https://api.github.com/users/tonyabracadabra/followers", "following_url": "https://api.github.com/users/tonyabracadabra/following{/other_user}", "gists_url": "https://api.github.com/users/tonyabracadabra/gists{/gist_id}", "starred_url": "https://api.github.com/users/tonyabracadabra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tonyabracadabra/subscriptions", "organizations_url": "https://api.github.com/users/tonyabracadabra/orgs", "repos_url": "https://api.github.com/users/tonyabracadabra/repos", "events_url": "https://api.github.com/users/tonyabracadabra/events{/privacy}", "received_events_url": "https://api.github.com/users/tonyabracadabra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-17T08:36:13Z", "updated_at": "2020-04-17T12:36:41Z", "closed_at": "2019-04-18T06:01:39Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I am having trouble debugging the code snippet I wrote below, it is actually really weird as the on_next() called through `NewThreadScheduler()` is not resolving the `subj.pipe(op.take(1))`, therefore it runs forever on the last line waiting for the future to be resolved.\r\n\r\n```\r\nsubj = Subject()\r\n# grpc_stream is an observable sequence created from grpc \r\ngrpc_stream = rx.from_(some grpc call...) \r\n\r\n# subscribe function, it will call on_next on subj and print out the event\r\ndef subscribe_func(e):\r\n    subj.on_next(e)\r\n    print('received', e)\r\n\r\n# the grpc stream will send event data continously to the observable sequence, \r\ndisposable: Disposable = grpc_stream.subscribe(subscribe_func, scheduler=NewThreadScheduler())\r\n\r\n# this is expected to be resolved upon the receipt of any event comes from the stream\r\nasync def wait_for_first_event():\r\n    await subj.pipe(op.take(1))\r\n\r\n# this line runs forever waiting for the future returned from subj.pipe(op.take(1)) to be resolved. \r\nasyncio.run(wait_for_first_event()) \r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/352", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/352/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/352/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/352", "id": 433807970, "node_id": "MDU6SXNzdWU0MzM4MDc5NzA=", "number": 352, "title": "Suggestion: syntactic sugar for pipe calls", "user": {"login": "erikkemperman", "id": 3100637, "node_id": "MDQ6VXNlcjMxMDA2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3100637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikkemperman", "html_url": "https://github.com/erikkemperman", "followers_url": "https://api.github.com/users/erikkemperman/followers", "following_url": "https://api.github.com/users/erikkemperman/following{/other_user}", "gists_url": "https://api.github.com/users/erikkemperman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikkemperman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikkemperman/subscriptions", "organizations_url": "https://api.github.com/users/erikkemperman/orgs", "repos_url": "https://api.github.com/users/erikkemperman/repos", "events_url": "https://api.github.com/users/erikkemperman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikkemperman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-16T14:21:01Z", "updated_at": "2020-04-25T08:37:38Z", "closed_at": "2019-04-26T04:23:58Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "I had this idea a while ago, and I can't decide if this is a pretty nice and pythonic idea, or else if it might be too clever by half...\r\n\r\nSo I should probably just ask the community: what do you think if we add something like this to `Observable`?\r\n\r\n```python\r\n    def __or__(self, other):\r\n        \"\"\"Pythonic version of pipe.\r\n\r\n        Example:\r\n            >>> zs = xs | op          # Equivalent to zs = xs.pipe(op)\r\n            >>> zs = xs | (op1, op2)  # Equivalent to zs = xs.pipe(op1, op2)\r\n\r\n        Returns:\r\n            self.pipe(*other) if other is iterable, otherwise self.pipe(other)\r\n        \"\"\"\r\n        if isinstance(other, Iterable):\r\n            return self.pipe(*other)\r\n        return self.pipe(other)\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/347", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/347/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/347/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/347/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/347", "id": 433569347, "node_id": "MDU6SXNzdWU0MzM1NjkzNDc=", "number": 347, "title": "How to wait for an on_next operation on subject?", "user": {"login": "tonyabracadabra", "id": 6690727, "node_id": "MDQ6VXNlcjY2OTA3Mjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6690727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tonyabracadabra", "html_url": "https://github.com/tonyabracadabra", "followers_url": "https://api.github.com/users/tonyabracadabra/followers", "following_url": "https://api.github.com/users/tonyabracadabra/following{/other_user}", "gists_url": "https://api.github.com/users/tonyabracadabra/gists{/gist_id}", "starred_url": "https://api.github.com/users/tonyabracadabra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tonyabracadabra/subscriptions", "organizations_url": "https://api.github.com/users/tonyabracadabra/orgs", "repos_url": "https://api.github.com/users/tonyabracadabra/repos", "events_url": "https://api.github.com/users/tonyabracadabra/events{/privacy}", "received_events_url": "https://api.github.com/users/tonyabracadabra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928883, "node_id": "MDU6TGFiZWwzMjkyODg4Mw==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-04-16T03:39:14Z", "updated_at": "2020-05-05T21:57:30Z", "closed_at": "2019-05-02T21:08:12Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I have a subject `subj = Subject()` whose `on_next(event)` will be called asynchronouly on a different thread through NewThreadScheduler\r\n\r\n```\r\nobservable.subscribe(lambda event: subj.on_next(event), scheduler=NewThreadScheduler())\r\n```\r\n\r\nNow I want to listen to the `on_next()` operation so I will know that there is a new event being added to `subj`, how am I suppose to do it?\r\n\r\nI am now writing as,\r\n\r\n```\r\nsubj = ReplaySubject()\r\nscheduler = NewThreadScheduler()\r\n\r\n# this is an Observable created from grpc stream\r\ngrpc_stream: Observable = client.subscribe_to_workspace(subscription_input)\r\n\r\ndef subscribe_func(e):\r\n    subj.on_next(e)\r\n    print('completed on_next', subj, e)\r\n\r\ngrpc_dispose: Disposable = grpc_stream.subscribe(subscribe_func, scheduler=scheduler)\r\n\r\n# creating an event to grpc_stream (not immediately), after a while I can see screen print out 'completed on_next' as written the subscribe_func \r\nsend_event()\r\n\r\nasync def a():\r\n    print('waiting...', subj)\r\n\r\n    # it blocks here and never get resolved\r\n    return await subj.pipe(op.take(1))\r\n\r\nasyncio.run(a())\r\n```\r\n\r\n\r\nSo I can wait for the first event being added to `subj` until executing other tasks that depend on the creation of the first event through `send_event()`.\r\n\r\nThe code I tried above doesn't really work as I got blocked at `await subj.pipe(op.take(1)) `, I'm pretty sure that `grpc_stream` has received events, and the `on_next(event)` was executed perfectly with `NewThreadScheduler` so there won't be a block when I am executing the code. However, the line `await subj.pipe(op.take(1))` seems to wait forever and never get solved. Where did I do wrong? Should I use a different scheduler or anything that helps?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/346", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/346/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/346/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/346/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/346", "id": 432440558, "node_id": "MDU6SXNzdWU0MzI0NDA1NTg=", "number": 346, "title": "How can i rewrite the subscriber in RXJS with rxpy", "user": {"login": "masonCaminer", "id": 45963533, "node_id": "MDQ6VXNlcjQ1OTYzNTMz", "avatar_url": "https://avatars3.githubusercontent.com/u/45963533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/masonCaminer", "html_url": "https://github.com/masonCaminer", "followers_url": "https://api.github.com/users/masonCaminer/followers", "following_url": "https://api.github.com/users/masonCaminer/following{/other_user}", "gists_url": "https://api.github.com/users/masonCaminer/gists{/gist_id}", "starred_url": "https://api.github.com/users/masonCaminer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/masonCaminer/subscriptions", "organizations_url": "https://api.github.com/users/masonCaminer/orgs", "repos_url": "https://api.github.com/users/masonCaminer/repos", "events_url": "https://api.github.com/users/masonCaminer/events{/privacy}", "received_events_url": "https://api.github.com/users/masonCaminer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928883, "node_id": "MDU6TGFiZWwzMjkyODg4Mw==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-12T08:09:31Z", "updated_at": "2020-04-17T12:36:45Z", "closed_at": "2019-04-17T09:39:24Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I don't know how to change the Subscriber of RXJS to the form of Python, which is not effective.\r\nTypescript USES the GRPC stream form and plugs in the RXJS Subscriber. Python doesn't know how to write it.\r\n\r\nRXJS code\r\n`import * as grpc from 'grpc';\r\nimport { Observable, Subscriber } from 'rxjs';\r\n\r\nexport function subscribeToWorkspace(\r\n  input: WorkspaceSubscriptionInput,\r\n): Observable<EventPayload> {\r\n  return new Observable<EventPayload>((observer: Subscriber<EventPayload>) => {\r\n    log(`opening stream for subscription ${input.toString()}`);\r\n\r\n    const stream: grpc.ClientReadableStream<EventPayload> =\r\n      client.subscribeToWorkspace(input, metadata);\r\n\r\n    stream.on('data', (eventPayload: EventPayload) => {\r\n      if (observer.closed) {\r\n        return;\r\n      }\r\n      observer.next(eventPayload);\r\n    });\r\n\r\n    stream.on('error', (err) => observer.error(err));\r\n    stream.on('end', () => observer.complete());\r\n\r\n    return () => {\r\n      log(`closing stream for subscription ${input.toString()}`);\r\n      stream.cancel();\r\n    };\r\n  });\r\n}\r\nPython code\r\n`\r\nfrom rx import of\r\ndef subscribe_to_workspace(cls, subsinput: WorkspaceSubscriptionInput) -> Observable:\r\n        return of(cls.client.SubscribeToWorkspace(subsinput))\r\n`\r\nRxpy does not work. What should Python do", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/341", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/341/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/341/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/341/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/341", "id": 428300536, "node_id": "MDU6SXNzdWU0MjgzMDA1MzY=", "number": 341, "title": "Cannot filter multiple values", "user": {"login": "obiben", "id": 3718280, "node_id": "MDQ6VXNlcjM3MTgyODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3718280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obiben", "html_url": "https://github.com/obiben", "followers_url": "https://api.github.com/users/obiben/followers", "following_url": "https://api.github.com/users/obiben/following{/other_user}", "gists_url": "https://api.github.com/users/obiben/gists{/gist_id}", "starred_url": "https://api.github.com/users/obiben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obiben/subscriptions", "organizations_url": "https://api.github.com/users/obiben/orgs", "repos_url": "https://api.github.com/users/obiben/repos", "events_url": "https://api.github.com/users/obiben/events{/privacy}", "received_events_url": "https://api.github.com/users/obiben/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-02T15:37:27Z", "updated_at": "2020-04-02T15:06:32Z", "closed_at": "2019-04-02T17:58:11Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I'm trying to sample a hot observable every second for every symbol I am watching:\r\n\r\n```python\r\nimport rx\r\nfrom rx.subjects import Subject\r\nlevel1_observable = Subject()\r\nsymbols = ['BMO.CA', 'TD.CA']\r\n\r\ndef handle_level1(channel, data):\r\n    l1 = L1.decode(data)\r\n    level1_observable.on_next(l1)\r\n\r\ndef matches(level1, symbol):\r\n    print('matching {} with {}'.format(level1.Symbol, symbol))\r\n    return level1.Symbol == symbol\r\n\r\nfor symbol in symbols:\r\n    sub = level1_observable.filter(lambda l1: matches(l1, symbol)).sample(1000).subscribe(on_next_level1)\r\n```\r\n\r\nOnce `handle_level1` starts getting called, `matches` compares all values to the last symbol in the list (in this snippet, 'TD.CA'). Is this supposed to work?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/339", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/339/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/339/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/339", "id": 427569447, "node_id": "MDU6SXNzdWU0Mjc1Njk0NDc=", "number": 339, "title": "Doc build fails on ReadTheDocs", "user": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": {"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2019-04-01T08:15:24Z", "updated_at": "2020-04-02T21:46:12Z", "closed_at": "2019-04-03T20:16:27Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "Not sure why RTD uses the latex builder, i.e `make latex` will trigger the error.\r\n\r\n```\r\nException occurred:\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sphinx/writers/latex.py\", line 2569, in unknown_visit\r\n    raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\r\nNotImplementedError: Unknown node: marble\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/337", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/337/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/337/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/337/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/337", "id": 427523625, "node_id": "MDU6SXNzdWU0Mjc1MjM2MjU=", "number": 337, "title": "EventLoopScheduler test fails on Travis CI", "user": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": {"login": "erikkemperman", "id": 3100637, "node_id": "MDQ6VXNlcjMxMDA2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3100637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikkemperman", "html_url": "https://github.com/erikkemperman", "followers_url": "https://api.github.com/users/erikkemperman/followers", "following_url": "https://api.github.com/users/erikkemperman/following{/other_user}", "gists_url": "https://api.github.com/users/erikkemperman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikkemperman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikkemperman/subscriptions", "organizations_url": "https://api.github.com/users/erikkemperman/orgs", "repos_url": "https://api.github.com/users/erikkemperman/repos", "events_url": "https://api.github.com/users/erikkemperman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikkemperman/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "erikkemperman", "id": 3100637, "node_id": "MDQ6VXNlcjMxMDA2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3100637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikkemperman", "html_url": "https://github.com/erikkemperman", "followers_url": "https://api.github.com/users/erikkemperman/followers", "following_url": "https://api.github.com/users/erikkemperman/following{/other_user}", "gists_url": "https://api.github.com/users/erikkemperman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikkemperman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikkemperman/subscriptions", "organizations_url": "https://api.github.com/users/erikkemperman/orgs", "repos_url": "https://api.github.com/users/erikkemperman/repos", "events_url": "https://api.github.com/users/erikkemperman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikkemperman/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-04-01T05:52:52Z", "updated_at": "2020-04-02T15:07:10Z", "closed_at": "2019-04-01T09:29:38Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "```\r\n================================== FAILURES ===================================\r\n_____ TestEventLoopScheduler.test_event_loop_schedule_ordered_actions_due _____\r\nself = <tests.test_concurrency.test_eventloopscheduler.TestEventLoopScheduler testMethod=test_event_loop_schedule_ordered_actions_due>\r\n    def test_event_loop_schedule_ordered_actions_due(self):\r\n        scheduler = EventLoopScheduler(exit_if_empty=True)\r\n        gate = threading.Semaphore(0)\r\n        result = []\r\n    \r\n        def action(scheduler, state):\r\n            result.append(3)\r\n            gate.release()\r\n    \r\n        scheduler.schedule_relative(0.10, action)\r\n        scheduler.schedule_relative(0.05, lambda s, t: result.append(2))\r\n        scheduler.schedule(lambda s, t: result.append(1))\r\n    \r\n        gate.acquire()\r\n>       assert result == [1, 2, 3]\r\nE       AssertionError: assert [1, 3] == [1, 2, 3]\r\nE         At index 1 diff: 3 != 2\r\nE         Right contains more items, first extra item: 3\r\nE         Use -v to get the full diff\r\ntests\\test_concurrency\\test_eventloopscheduler.py:77: AssertionError\r\n```\r\n\r\nhttps://travis-ci.org/ReactiveX/RxPY/jobs/513968253", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/334", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/334/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/334/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/334/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/334", "id": 427499804, "node_id": "MDU6SXNzdWU0Mjc0OTk4MDQ=", "number": 334, "title": "Unsubscribe a specific observer from a Subject", "user": {"login": "devonhuangcodes", "id": 39835747, "node_id": "MDQ6VXNlcjM5ODM1NzQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/39835747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhuangcodes", "html_url": "https://github.com/devonhuangcodes", "followers_url": "https://api.github.com/users/devonhuangcodes/followers", "following_url": "https://api.github.com/users/devonhuangcodes/following{/other_user}", "gists_url": "https://api.github.com/users/devonhuangcodes/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhuangcodes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhuangcodes/subscriptions", "organizations_url": "https://api.github.com/users/devonhuangcodes/orgs", "repos_url": "https://api.github.com/users/devonhuangcodes/repos", "events_url": "https://api.github.com/users/devonhuangcodes/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhuangcodes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-01T03:53:02Z", "updated_at": "2020-04-02T15:07:44Z", "closed_at": "2019-04-01T04:03:51Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "In RxJs, you can unsubscribe an observer from an observable (Subject in my particular case) by using the unsubscribe() method on the subscription object (yielded through a subscription). Is the same possible in RxPy? A disposable object seems to be returned instead in RxPy.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/332", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/332/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/332/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/332/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/332", "id": 426397551, "node_id": "MDU6SXNzdWU0MjYzOTc1NTE=", "number": 332, "title": "CatchScheduler", "user": {"login": "erikkemperman", "id": 3100637, "node_id": "MDQ6VXNlcjMxMDA2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3100637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikkemperman", "html_url": "https://github.com/erikkemperman", "followers_url": "https://api.github.com/users/erikkemperman/followers", "following_url": "https://api.github.com/users/erikkemperman/following{/other_user}", "gists_url": "https://api.github.com/users/erikkemperman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikkemperman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikkemperman/subscriptions", "organizations_url": "https://api.github.com/users/erikkemperman/orgs", "repos_url": "https://api.github.com/users/erikkemperman/repos", "events_url": "https://api.github.com/users/erikkemperman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikkemperman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-28T09:53:06Z", "updated_at": "2020-04-15T15:22:44Z", "closed_at": "2019-04-16T14:17:03Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "hi all,\r\n\r\nI am wondering about how the CatchScheduler is supposed to work when\r\n- the given handler returns False (doesn't actually handle the exception)\r\n- the action is invoked in a different thread; not the one that called the schedule method\r\n\r\nI don't see how the exception can be expected to end up in the right place under those circumstances. It will just barf all over the console, as far as I can tell. Am I missing something? Or does this CatchScheduler only really make sense if it wraps a CurrentThreadScheduler?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/328", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/328/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/328/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/328/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/328", "id": 421809220, "node_id": "MDU6SXNzdWU0MjE4MDkyMjA=", "number": 328, "title": "RxPY Collaborator Workflow", "user": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": {"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}, {"login": "jcafhe", "id": 11948994, "node_id": "MDQ6VXNlcjExOTQ4OTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/11948994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcafhe", "html_url": "https://github.com/jcafhe", "followers_url": "https://api.github.com/users/jcafhe/followers", "following_url": "https://api.github.com/users/jcafhe/following{/other_user}", "gists_url": "https://api.github.com/users/jcafhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcafhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcafhe/subscriptions", "organizations_url": "https://api.github.com/users/jcafhe/orgs", "repos_url": "https://api.github.com/users/jcafhe/repos", "events_url": "https://api.github.com/users/jcafhe/events{/privacy}", "received_events_url": "https://api.github.com/users/jcafhe/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2019-03-16T13:49:43Z", "updated_at": "2020-04-19T07:05:46Z", "closed_at": "2019-04-20T05:56:19Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "Adding a workflow to RxPY for collaborators to make things more community driven. Every change to the master branch must be in form of a PR and approved by at least 2 collaborators. When 2 or more have approved the PR, you are free to merge (with or without my approval). I'm currently NJNL (new job, new language) and do not want to slow down the speed of RxPY development. What do you think? Any other things we should do?\r\n\r\nPS: I've also added @erikkemperman as a collaborator and hope he will accept the invitation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/326", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/326/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/326/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/326/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/326", "id": 421530444, "node_id": "MDU6SXNzdWU0MjE1MzA0NDQ=", "number": 326, "title": "Cannot schedule new futures after interpreter shutdown", "user": {"login": "kunalpal", "id": 7130709, "node_id": "MDQ6VXNlcjcxMzA3MDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/7130709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kunalpal", "html_url": "https://github.com/kunalpal", "followers_url": "https://api.github.com/users/kunalpal/followers", "following_url": "https://api.github.com/users/kunalpal/following{/other_user}", "gists_url": "https://api.github.com/users/kunalpal/gists{/gist_id}", "starred_url": "https://api.github.com/users/kunalpal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kunalpal/subscriptions", "organizations_url": "https://api.github.com/users/kunalpal/orgs", "repos_url": "https://api.github.com/users/kunalpal/repos", "events_url": "https://api.github.com/users/kunalpal/events{/privacy}", "received_events_url": "https://api.github.com/users/kunalpal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-15T13:55:11Z", "updated_at": "2020-03-21T20:15:04Z", "closed_at": "2019-03-21T08:19:51Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I have a function making recursive calls using the same scheduler. However, after the first go I encounter the error that \"cannot schedule new futures afterinterpreter shutdown\".\r\n\r\n```python\r\n    def fetch_all(self, queue=None):\r\n        print(\"Fetch things\")\r\n        if queue is None:\r\n            queue = self.uids\r\n        Observable.from_(queue) \\\r\n            .flat_map(lambda uid: Observable.just(uid, self.scheduler)) \\\r\n            .map(lambda uid: self.fetch(uid)) \\ \r\n            .filter(lambda uid: uid is not None) \\\r\n            .to_list() \\\r\n            .subscribe(on_next=lambda uids: self.fetch_all(queue=uids), on_error=print)\r\n```\r\nI am using the built-in rxpy `ThreadPoolScheduler` for this. `fetch` makes a simple network request and returns the next uid. I don't have any clue about how to fix the problem and will appreciate any help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/325", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/325/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/325/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/325/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/325", "id": 420785604, "node_id": "MDU6SXNzdWU0MjA3ODU2MDQ=", "number": 325, "title": "Infinite Busy Wait", "user": {"login": "Alexhuszagh", "id": 9440903, "node_id": "MDQ6VXNlcjk0NDA5MDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/9440903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexhuszagh", "html_url": "https://github.com/Alexhuszagh", "followers_url": "https://api.github.com/users/Alexhuszagh/followers", "following_url": "https://api.github.com/users/Alexhuszagh/following{/other_user}", "gists_url": "https://api.github.com/users/Alexhuszagh/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexhuszagh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexhuszagh/subscriptions", "organizations_url": "https://api.github.com/users/Alexhuszagh/orgs", "repos_url": "https://api.github.com/users/Alexhuszagh/repos", "events_url": "https://api.github.com/users/Alexhuszagh/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexhuszagh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": {"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-03-14T01:01:28Z", "updated_at": "2020-04-15T07:54:41Z", "closed_at": "2019-04-07T15:45:29Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "# Reproducing\r\n\r\n```python\r\nimport asyncio\r\nimport rx\r\n\r\nasync def x(y):\r\n    return await y\r\n    \r\ny = rx.Observable.from_([])\r\nasyncio.get_event_loop().run_until_complete(y)\r\n```\r\n\r\n# Tested Versions\r\n\r\nTested on RxPy 1.6, but also confirmed the issue is present on master.\r\n\r\n# Potential Fixes\r\n\r\n[The following implementation](https://github.com/ReactiveX/RxPY/blob/b333440871ad5e74dbdf5365fe99643f22f92c25/rx/core/operators/tofuture.py#L33) shows the issue: if no value has been produced, awaiting the observable will block forever, since no result or exception is set.\r\n\r\nIn my (biased) opinion, a few options are possible, since I feel that silently blocking forever based on an opaque type is an unsatisfactory solution:\r\n\r\n1. Silently set the value to `None`. This would have the added advantage that the original statement would work, but would also be difficult to distinguish between an function that does not return a value, and an empty iterable, which are two completely different types. It also has 1 more benefit, which is similar to future-like objects (see below).\r\n2. Raise `StopAsyncIteration`. This would be explicit, but would mean the above statement would fail, but would clearly signal intent.\r\n3. Raise a custom error. Also explicit, and would also clearly signal intent. It could potentially derive from `StopAsyncIteration`.\r\n\r\n# Footnotes\r\n\r\n**Future-Like Objects**\r\n\r\n[PEP 492](https://www.python.org/dev/peps/pep-0492/#asyncio) defines future-like objects which have `__await__ = __iter__` to simplify implementations. These cannot return a value, and I believe are only used for the side-effects (that is, to ensure the logic in `__iter__` is executed without having to modify existing code).\r\n\r\n```python\r\nimport asyncio\r\n\r\nclass A:\r\n    def __iter__(self):\r\n        return self\r\n    def __next__(self):\r\n        raise StopIteration\r\n    __await__ = __iter__\r\n\r\nasyncio.get_event_loop().run_until_complete(A())\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/323", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/323/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/323/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/323", "id": 417029831, "node_id": "MDU6SXNzdWU0MTcwMjk4MzE=", "number": 323, "title": "python3.6 and python3.7 support", "user": {"login": "achukka", "id": 8088570, "node_id": "MDQ6VXNlcjgwODg1NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8088570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achukka", "html_url": "https://github.com/achukka", "followers_url": "https://api.github.com/users/achukka/followers", "following_url": "https://api.github.com/users/achukka/following{/other_user}", "gists_url": "https://api.github.com/users/achukka/gists{/gist_id}", "starred_url": "https://api.github.com/users/achukka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achukka/subscriptions", "organizations_url": "https://api.github.com/users/achukka/orgs", "repos_url": "https://api.github.com/users/achukka/repos", "events_url": "https://api.github.com/users/achukka/events{/privacy}", "received_events_url": "https://api.github.com/users/achukka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-04T22:52:15Z", "updated_at": "2020-03-10T18:49:35Z", "closed_at": "2019-03-06T16:07:07Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Hi reactive developers,\r\n\r\nI was wondering if the [v1.5.9](https://github.com/ReactiveX/RxPY/releases/tag/v1.5.9) of rxpy supports python3.6 and/or python3.7.\r\n\r\nNote: Sorry I couldn't find any other place to ask this question.\r\n\r\nThanks,\r\nAditya.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/316", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/316/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/316/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/316/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/316", "id": 413717387, "node_id": "MDU6SXNzdWU0MTM3MTczODc=", "number": 316, "title": "Coveralls reports", "user": {"login": "erikkemperman", "id": 3100637, "node_id": "MDQ6VXNlcjMxMDA2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3100637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikkemperman", "html_url": "https://github.com/erikkemperman", "followers_url": "https://api.github.com/users/erikkemperman/followers", "following_url": "https://api.github.com/users/erikkemperman/following{/other_user}", "gists_url": "https://api.github.com/users/erikkemperman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikkemperman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikkemperman/subscriptions", "organizations_url": "https://api.github.com/users/erikkemperman/orgs", "repos_url": "https://api.github.com/users/erikkemperman/repos", "events_url": "https://api.github.com/users/erikkemperman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikkemperman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-23T17:29:57Z", "updated_at": "2020-03-17T21:19:26Z", "closed_at": "2019-03-18T20:29:50Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "It seems coveralls as run in Travis (sometimes) pushes its results to the wrong place, namely dbrattli/rxpy instead of reactivex/rxpy, and consequently they are not reported back to github correctly.\r\n\r\nI\u2019m not totally sure, but I think it might be confused by the repo tokens in .coveralls.yml \u2014 these are identical for those two repositories. I would suggest generating a new token for the main repository, if I\u2019m right about the cause of this, it may resolve it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/314", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/314/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/314/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/314/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/314", "id": 413609700, "node_id": "MDU6SXNzdWU0MTM2MDk3MDA=", "number": 314, "title": "AsyncIOScheduler behaves differently depending on loop.set_debug", "user": {"login": "radoye", "id": 6981187, "node_id": "MDQ6VXNlcjY5ODExODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6981187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radoye", "html_url": "https://github.com/radoye", "followers_url": "https://api.github.com/users/radoye/followers", "following_url": "https://api.github.com/users/radoye/following{/other_user}", "gists_url": "https://api.github.com/users/radoye/gists{/gist_id}", "starred_url": "https://api.github.com/users/radoye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radoye/subscriptions", "organizations_url": "https://api.github.com/users/radoye/orgs", "repos_url": "https://api.github.com/users/radoye/repos", "events_url": "https://api.github.com/users/radoye/events{/privacy}", "received_events_url": "https://api.github.com/users/radoye/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-22T22:49:36Z", "updated_at": "2020-02-28T06:53:15Z", "closed_at": "2019-02-24T00:53:12Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I'm observing significantly different behavior of rx chains using `AsyncIOScheduler(loop)` depending on the `loop.set_debug(True/False)`. Any pointers here? \r\n\r\n## Output\r\n\r\n```bash\r\n>>>>>>>>>> DBG True\r\n[TPS @ ThreadPoolExecutor-1_0] 0\r\n[TPS @ ThreadPoolExecutor-1_1] 1\r\n[TPS @ ThreadPoolExecutor-1_1] 2\r\n[TPS @ ThreadPoolExecutor-1_1] 3\r\n[TPS @ ThreadPoolExecutor-1_1] 4\r\n[TPS @ ThreadPoolExecutor-1_1] 5\r\n[TPS @ ThreadPoolExecutor-1_1] 6\r\n[TPS @ ThreadPoolExecutor-1_1] 7\r\n[TPS @ ThreadPoolExecutor-1_1] 8\r\n[TPS @ ThreadPoolExecutor-1_1] 9\r\n[AIO @ MainThread] 0\r\nON_NEXT 0\r\n[AIO @ MainThread] 1\r\n[AIO @ MainThread] 2\r\n[AIO @ MainThread] 3\r\nON_NEXT 1\r\nON_NEXT 2\r\nON_NEXT 3\r\n[AIO @ MainThread] 4\r\nON_NEXT 4\r\n[AIO @ MainThread] 5\r\nON_NEXT 5\r\n[AIO @ MainThread] 6\r\nON_NEXT 6\r\n[AIO @ MainThread] 7\r\nON_NEXT 7\r\n[AIO @ MainThread] 8\r\nON_NEXT 8\r\n[AIO @ MainThread] 9\r\nON_NEXT 9\r\nON_COMPLETED\r\n>>>>>>>>>> DBG False\r\n[TPS @ ThreadPoolExecutor-2_0] 0\r\n[TPS @ ThreadPoolExecutor-2_1] 1\r\n[TPS @ ThreadPoolExecutor-2_1] 2\r\n[TPS @ ThreadPoolExecutor-2_1] 3\r\n[TPS @ ThreadPoolExecutor-2_1] 4\r\n[TPS @ ThreadPoolExecutor-2_1] 5\r\n[TPS @ ThreadPoolExecutor-2_1] 6\r\n[TPS @ ThreadPoolExecutor-2_1] 7\r\n[TPS @ ThreadPoolExecutor-2_1] 8\r\n[TPS @ ThreadPoolExecutor-2_1] 9\r\n[AIO @ MainThread] 0\r\n[AIO @ MainThread] 1\r\nON_NEXT 0\r\n[AIO @ MainThread] 2\r\nON_NEXT 1\r\nON_NEXT 2\r\n```\r\n## Code \r\n\r\n```python\r\nimport time\r\nimport asyncio\r\nimport rx\r\nfrom rx import Observable\r\nfrom rx.concurrency import AsyncIOScheduler, ThreadPoolScheduler\r\nfrom rx.subjects import Subject\r\nimport threading as thr\r\n\r\ndef tagged(fun, tag=\"???\"):\r\n    def tagger(itm):\r\n        x = fun(itm)\r\n        print(\"[{} @ {}] {}\".format(tag, thr.currentThread().name, x))\r\n        return x\r\n    return tagger\r\n\r\ndef on_next(itm):\r\n    print(\"ON_NEXT {}\".format(itm))\r\n\r\ndef on_error(e):\r\n    print(\"ON_ERROR {}\".format(e))\r\n\r\ndef on_completed():\r\n    print(\"ON_COMPLETED\")\r\n\r\ndef chain(aio_dbg=False):\r\n\r\n    loop = asyncio.get_event_loop()\r\n    loop.set_debug(aio_dbg)\r\n    aio_sched = AsyncIOScheduler(loop)\r\n\r\n    thr_sched = ThreadPoolScheduler(2)\r\n    \r\n    src = Observable.from_(list(range(10)))\r\n\r\n    disp = (\r\n        src\r\n        .observe_on(thr_sched)\r\n        .map(tagged(lambda x: x, \"TPS\"))\r\n        .observe_on(aio_sched)\r\n        .map(tagged(lambda x: x, \"AIO\"))\r\n        .observe_on(thr_sched)\r\n        .subscribe(\r\n            on_next=on_next, \r\n            on_error=on_error, \r\n            on_completed=on_completed)\r\n        )\r\n\r\n    loop.run_until_complete(asyncio.sleep(10))\r\n\r\nif __name__ == \"__main__\":\r\n    print(\">>>>>>>>>> DBG True\")\r\n    chain(True)\r\n    print(\">>>>>>>>>> DBG False\")\r\n    chain(False)\r\n```\r\n\r\n## Environment\r\n\r\n```bash\r\naiohttp==3.5.4\r\nasync-timeout==3.0.1\r\nasyncio==3.4.3\r\nattrs==18.2.0\r\nchardet==3.0.4\r\nidna==2.8\r\nmultidict==4.5.2\r\nRx==1.6.1\r\nyarl==1.3.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/312", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/312/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/312/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/312/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/312", "id": 412469557, "node_id": "MDU6SXNzdWU0MTI0Njk1NTc=", "number": 312, "title": "Examples with rx.interval() don't work", "user": {"login": "devtud", "id": 6808024, "node_id": "MDQ6VXNlcjY4MDgwMjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6808024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devtud", "html_url": "https://github.com/devtud", "followers_url": "https://api.github.com/users/devtud/followers", "following_url": "https://api.github.com/users/devtud/following{/other_user}", "gists_url": "https://api.github.com/users/devtud/gists{/gist_id}", "starred_url": "https://api.github.com/users/devtud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devtud/subscriptions", "organizations_url": "https://api.github.com/users/devtud/orgs", "repos_url": "https://api.github.com/users/devtud/repos", "events_url": "https://api.github.com/users/devtud/events{/privacy}", "received_events_url": "https://api.github.com/users/devtud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-20T14:58:34Z", "updated_at": "2020-02-04T16:34:59Z", "closed_at": "2019-02-28T11:03:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've just installed rxpy and I can't figure out why the examples with `rx.interval()` don't work.\r\n\r\nRx==3.0.0a2\r\nPython 3.7.2\r\n\r\nFor example:\r\n\r\n```\r\nimport rx\r\n\r\nrx.interval(1.0).subscribe(AnonymousObserver(on_next=lambda t: print(t)))\r\n```\r\n\r\nThrows:\r\n\r\n```\r\n...\r\nFile \"[PATH]/python3.7/site-packages/rx/core/observable/timer.py\", line 70, in subscribe\r\n    return _scheduler.schedule_periodic(period, action, state=0)\r\nAttributeError: 'NoneType' object has no attribute 'schedule_periodic'\r\n```\r\n\r\nWhat am I doing wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/311", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/311/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/311/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/311/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/311", "id": 412322840, "node_id": "MDU6SXNzdWU0MTIzMjI4NDA=", "number": 311, "title": "can't add param to subscribe()", "user": {"login": "molysama", "id": 6489372, "node_id": "MDQ6VXNlcjY0ODkzNzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/6489372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/molysama", "html_url": "https://github.com/molysama", "followers_url": "https://api.github.com/users/molysama/followers", "following_url": "https://api.github.com/users/molysama/following{/other_user}", "gists_url": "https://api.github.com/users/molysama/gists{/gist_id}", "starred_url": "https://api.github.com/users/molysama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/molysama/subscriptions", "organizations_url": "https://api.github.com/users/molysama/orgs", "repos_url": "https://api.github.com/users/molysama/repos", "events_url": "https://api.github.com/users/molysama/events{/privacy}", "received_events_url": "https://api.github.com/users/molysama/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-20T09:21:31Z", "updated_at": "2020-02-21T21:21:21Z", "closed_at": "2019-02-21T09:15:51Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I can't add any param to the subscribe()\r\nNor does example code work.\r\n\r\nPython version 3.7.2\r\nrxpy version 3.0.0a2\r\n\r\n```\r\nimport rx\r\nfrom rx import operators as ops\r\n\r\nsource = rx.of(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\r\n\r\ncomposed = source.pipe(\r\n    ops.map(lambda s: len(s)),\r\n    ops.filter(lambda i: i >= 5)\r\n)\r\ncomposed.subscribe(lambda value: print(\"Received {0}\".format(value)))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/310", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/310/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/310/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/310/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/310", "id": 412225668, "node_id": "MDU6SXNzdWU0MTIyMjU2Njg=", "number": 310, "title": "Subscriber assertion error", "user": {"login": "Sammyalhashe", "id": 20797997, "node_id": "MDQ6VXNlcjIwNzk3OTk3", "avatar_url": "https://avatars3.githubusercontent.com/u/20797997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sammyalhashe", "html_url": "https://github.com/Sammyalhashe", "followers_url": "https://api.github.com/users/Sammyalhashe/followers", "following_url": "https://api.github.com/users/Sammyalhashe/following{/other_user}", "gists_url": "https://api.github.com/users/Sammyalhashe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sammyalhashe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sammyalhashe/subscriptions", "organizations_url": "https://api.github.com/users/Sammyalhashe/orgs", "repos_url": "https://api.github.com/users/Sammyalhashe/repos", "events_url": "https://api.github.com/users/Sammyalhashe/events{/privacy}", "received_events_url": "https://api.github.com/users/Sammyalhashe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-20T03:19:23Z", "updated_at": "2020-05-20T20:25:36Z", "closed_at": "2019-05-20T12:40:01Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Okay, I know I'm doing something slightly wrong here. \r\n\r\nSo basically, I have two classes communicating, a `data` class and a `plotter` class. What I'm doing right now is creating a `Subject` in `data` class, then instantiating an instance of the `data` class in my `plotter` class.  The `data` class calls the `on_next()` function.\r\n\r\nBasically, in my `data` class, I have this:\r\n```\r\ndef activateStream(self):\r\n        if not self.stream:\r\n            self.stream = Subject()\r\n\r\ndef getStream(self):\r\n        if not self.stream:\r\n            print(\"Activate the Data Stream first\")\r\n            return None\r\n        print(type(self.stream))\r\n        return self.stream\r\n```\r\n\r\nIn my `plotter` class I have this:\r\n```\r\ndef getObserver(self):\r\n        if not self.observer:\r\n            self.data_rpc.activateStream()\r\n            self.observer = self.data_rpc.getStream()\r\n\r\n    def plotData(self):\r\n        if not self.observer:\r\n            self.getObserver()\r\n        self.data = np.array([])\r\n        self.observer.subscribe(lambda x: self.addData(x))\r\n        self.data_rpc.getData_test()\r\n\r\ndef addData(self, newData):\r\n        self.data = np.append(self.data, newData[0])\r\n        self.plot.plot(self.data)\r\n```\r\n\r\nWhen I was running this I was getting `assert isinstance(observer, abc.Observer)`.\r\n\r\nThis was weird because I ran a test in my terminal:\r\n```\r\n>>> from rx.subjects import Subject\r\n>>> s = Subject()\r\n>>> d = s.subscribe(lambda x: print(x))\r\n>>> s.on_next(34)\r\n34\r\n>>> print(type(s))\r\n<class 'rx.subjects.subject.Subject'>\r\n```\r\nEverything worked fine. I went into the source code [here](https://github.com/ReactiveX/RxPY/blob/master/rx/core/observable/observable.py) and found I was calling the `subscribe` method to get the `AssertionError`. But I also noticed there is a `subscribe_` method. I tried it out, and it worked.\r\n\r\nI am doing something slightly wrong, but I don't know what. How come I was successful with the `subscribe_` method but not the `subscribe` method in my code. And why did the `subscribe` method work in my simple test?\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/305", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/305/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/305/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/305", "id": 408863371, "node_id": "MDU6SXNzdWU0MDg4NjMzNzE=", "number": 305, "title": "Syntax error at contains operator docstring", "user": {"login": "SilvaEmerson", "id": 24184325, "node_id": "MDQ6VXNlcjI0MTg0MzI1", "avatar_url": "https://avatars3.githubusercontent.com/u/24184325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SilvaEmerson", "html_url": "https://github.com/SilvaEmerson", "followers_url": "https://api.github.com/users/SilvaEmerson/followers", "following_url": "https://api.github.com/users/SilvaEmerson/following{/other_user}", "gists_url": "https://api.github.com/users/SilvaEmerson/gists{/gist_id}", "starred_url": "https://api.github.com/users/SilvaEmerson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SilvaEmerson/subscriptions", "organizations_url": "https://api.github.com/users/SilvaEmerson/orgs", "repos_url": "https://api.github.com/users/SilvaEmerson/repos", "events_url": "https://api.github.com/users/SilvaEmerson/events{/privacy}", "received_events_url": "https://api.github.com/users/SilvaEmerson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-11T16:24:16Z", "updated_at": "2020-02-13T06:24:57Z", "closed_at": "2019-02-13T05:58:37Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I found that's missing a '`]`' :\r\nhttps://github.com/ReactiveX/RxPY/blob/e87718220bc374e0dd534590ec53f65a911adec5/rx/operators/__init__.py#L243", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/296", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/296/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/296/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/296/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/296", "id": 402436205, "node_id": "MDU6SXNzdWU0MDI0MzYyMDU=", "number": 296, "title": "Prefer nonlocal or array in closure", "user": {"login": "erikkemperman", "id": 3100637, "node_id": "MDQ6VXNlcjMxMDA2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3100637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikkemperman", "html_url": "https://github.com/erikkemperman", "followers_url": "https://api.github.com/users/erikkemperman/followers", "following_url": "https://api.github.com/users/erikkemperman/following{/other_user}", "gists_url": "https://api.github.com/users/erikkemperman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikkemperman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikkemperman/subscriptions", "organizations_url": "https://api.github.com/users/erikkemperman/orgs", "repos_url": "https://api.github.com/users/erikkemperman/repos", "events_url": "https://api.github.com/users/erikkemperman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikkemperman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-23T21:25:01Z", "updated_at": "2020-01-25T20:53:48Z", "closed_at": "2019-01-25T18:52:02Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "I sometimes find code like this\r\n\r\n```python\r\nfoo = [0]\r\ndef fun():\r\n  foo[0] = 1\r\n```\r\n\r\nbut also like this\r\n\r\n```python\r\nfoo = 0\r\ndef fun():\r\n  nonlocal foo\r\n  foo = 1\r\n```\r\n\r\nAny reason to prefer one or the other, in general, when I write new code, or tweak existing stuff? I like the second, but perhaps there's considerations I am not thinking of.\r\n\r\n@dbrattli Sorry, by the way, for spamming you like this... I understand it might be annoying. Please feel free to close issues like this one straight away, they're not really interesting for anyone else.\r\n\r\nFor what it is worth, I feel I am almost ready to contribute something back!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/295", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/295/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/295/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/295/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/295", "id": 402430591, "node_id": "MDU6SXNzdWU0MDI0MzA1OTE=", "number": 295, "title": "Comparing `PeriodicScheduler` and `SchedulerBase.schedule_periodic()`", "user": {"login": "erikkemperman", "id": 3100637, "node_id": "MDQ6VXNlcjMxMDA2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3100637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikkemperman", "html_url": "https://github.com/erikkemperman", "followers_url": "https://api.github.com/users/erikkemperman/followers", "following_url": "https://api.github.com/users/erikkemperman/following{/other_user}", "gists_url": "https://api.github.com/users/erikkemperman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikkemperman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikkemperman/subscriptions", "organizations_url": "https://api.github.com/users/erikkemperman/orgs", "repos_url": "https://api.github.com/users/erikkemperman/repos", "events_url": "https://api.github.com/users/erikkemperman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikkemperman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-23T21:08:44Z", "updated_at": "2020-01-26T11:28:44Z", "closed_at": "2019-01-26T09:26:14Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "I notice some inconsistency whilst comparing  these two:\r\n\r\n|            | SchedulePeriodic    | SchedulerBase.schedule_periodic  |\r\n|------------|---------------------|----------------------------------|\r\n| disposable | serial              |   multiple                       |\r\n| order      | re-schedule, action |  action, re-schedule             |\r\n| error | dispose and re-raise     |  emit directly, no disposal      |\r\n\r\nCan/should this be made consistent?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/293", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/293/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/293/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/293/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/293", "id": 402421656, "node_id": "MDU6SXNzdWU0MDI0MjE2NTY=", "number": 293, "title": "Artifacts exposed from `core/__init__.py`", "user": {"login": "erikkemperman", "id": 3100637, "node_id": "MDQ6VXNlcjMxMDA2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3100637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikkemperman", "html_url": "https://github.com/erikkemperman", "followers_url": "https://api.github.com/users/erikkemperman/followers", "following_url": "https://api.github.com/users/erikkemperman/following{/other_user}", "gists_url": "https://api.github.com/users/erikkemperman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikkemperman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikkemperman/subscriptions", "organizations_url": "https://api.github.com/users/erikkemperman/orgs", "repos_url": "https://api.github.com/users/erikkemperman/repos", "events_url": "https://api.github.com/users/erikkemperman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikkemperman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2019-01-23T20:43:31Z", "updated_at": "2020-02-23T18:39:52Z", "closed_at": "2019-02-23T08:21:21Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "Sorry if this is a silly question, but I am slightly confused as to what artifacts are being exposed from `core/__init__.py`. In some cases these are typings (such as Disposable, Scheduler, Observer) and in other cases these are base implementations (e.g. Observable) which  extend the typings.\r\n\r\nWould it be better to consistently expose base implementations here, which are presumably more directly relevant for users, and keep the typings only in the package of the same name, for (mostly) internal use?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/290", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/290/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/290/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/290", "id": 402015239, "node_id": "MDU6SXNzdWU0MDIwMTUyMzk=", "number": 290, "title": "README.md: RxPy v3 isn't available", "user": {"login": "dima-spire", "id": 37819078, "node_id": "MDQ6VXNlcjM3ODE5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/37819078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dima-spire", "html_url": "https://github.com/dima-spire", "followers_url": "https://api.github.com/users/dima-spire/followers", "following_url": "https://api.github.com/users/dima-spire/following{/other_user}", "gists_url": "https://api.github.com/users/dima-spire/gists{/gist_id}", "starred_url": "https://api.github.com/users/dima-spire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dima-spire/subscriptions", "organizations_url": "https://api.github.com/users/dima-spire/orgs", "repos_url": "https://api.github.com/users/dima-spire/repos", "events_url": "https://api.github.com/users/dima-spire/events{/privacy}", "received_events_url": "https://api.github.com/users/dima-spire/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-01-23T00:27:56Z", "updated_at": "2020-01-24T11:48:21Z", "closed_at": "2019-01-23T15:56:43Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "README.md says:\r\n> RxPY v3.x runs on Python 3. To install RxPY:\r\n> ```\r\n> pip3 install rx\r\n> ```\r\nbut when doing that, I only get RxPY v1.6.1, not v3.x.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/287", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/287/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/287/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/287/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/287", "id": 401822009, "node_id": "MDU6SXNzdWU0MDE4MjIwMDk=", "number": 287, "title": "Contract of ScheduledAction", "user": {"login": "erikkemperman", "id": 3100637, "node_id": "MDQ6VXNlcjMxMDA2Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3100637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikkemperman", "html_url": "https://github.com/erikkemperman", "followers_url": "https://api.github.com/users/erikkemperman/followers", "following_url": "https://api.github.com/users/erikkemperman/following{/other_user}", "gists_url": "https://api.github.com/users/erikkemperman/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikkemperman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikkemperman/subscriptions", "organizations_url": "https://api.github.com/users/erikkemperman/orgs", "repos_url": "https://api.github.com/users/erikkemperman/repos", "events_url": "https://api.github.com/users/erikkemperman/events{/privacy}", "received_events_url": "https://api.github.com/users/erikkemperman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2019-01-22T15:35:48Z", "updated_at": "2020-01-24T11:50:03Z", "closed_at": "2019-01-22T17:14:13Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "I was looking at the code in `concurrency` and it's not really clear to me what the contract of a `ScheduledAction` is: should my implementations return a disposable or an updated state?\r\n\r\nThe code in `SchedulerBase` seems to be expecting two distinct kinds of action arguments. The class-level `invoke_action` method handles separately the case where the action return value is a disposable and it ignores any other return types.\r\nhttps://github.com/ReactiveX/RxPY/blob/master/rx/concurrency/schedulerbase.py#L14\r\n\r\nBut the nested `invoke_action` function within the `schedule_periodic` method uses whatever the return value is for the state in the next period, even if it is disposable. And if the return value is disposable, it is ignored (rather than, say, composited with the result of the recursive scheduling).\r\nhttps://github.com/ReactiveX/RxPY/blob/master/rx/concurrency/schedulerbase.py#L39\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/285", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/285/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/285/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/285/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/285", "id": 401241726, "node_id": "MDU6SXNzdWU0MDEyNDE3MjY=", "number": 285, "title": "RxPY v3 Remaining Work", "user": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/ReactiveX/RxPY/milestones/2", "html_url": "https://github.com/ReactiveX/RxPY/milestone/2", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/milestones/2/labels", "id": 916147, "node_id": "MDk6TWlsZXN0b25lOTE2MTQ3", "number": 2, "title": "v3.0", "description": "", "creator": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2014-12-28T15:34:55Z", "updated_at": "2020-08-10T22:34:06Z", "due_on": "2019-06-01T07:00:00Z", "closed_at": "2019-07-17T06:26:56Z"}, "comments": 26, "created_at": "2019-01-21T08:28:22Z", "updated_at": "2020-05-20T21:21:59Z", "closed_at": "2019-05-11T10:42:34Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "This issue is for tracking the remaining work for RxPY v3.\r\n\r\n- [x] Fix type hints for pipe #355 \r\n- [x] Disposables. Have been removed for RxJS 6. I think we should keep disposables, but make them simpler and remove the static Disposable object with methods and only have the simpler creation functions like `create`, `empty` etc.\r\n- [x] Move all observer files to `core/observer`. \r\n- [x] Fix `testing/marbles.py`.\r\n- [x] Lazy load schedulers. We have many schedulers that are not being used. Perhaps eventloop schedulers should be imported explicitly (full path) so they don't add to startup time\r\n- [x] Remove (result) mappers from `combine_latest` and `with_latest_from`.\r\n- [x] Add a `starmap` operator based on itertools for use with `combine_latest` et al.\r\n- [x] Remove `BlockingObservable` and methods and provide a blocking `run()` method instead.\r\n- [x] Remove all first arguments that accept `Iterable[Observable]` for all operators. Use `*args` instead.\r\n\r\nLater, i.e v3.1\r\n- Merge `internal` and `core` to `internal` similar to RxJS.\r\n- Making Observables of type `Generic[T]` instead of `Generic[Any]`. The problem is what to do with vararg operators such as `zip`, `combine_latest` etc. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/282", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/282/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/282/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/282/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/282", "id": 398992261, "node_id": "MDU6SXNzdWUzOTg5OTIyNjE=", "number": 282, "title": "RxPY 3.0: Tests update", "user": {"login": "jcafhe", "id": 11948994, "node_id": "MDQ6VXNlcjExOTQ4OTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/11948994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcafhe", "html_url": "https://github.com/jcafhe", "followers_url": "https://api.github.com/users/jcafhe/followers", "following_url": "https://api.github.com/users/jcafhe/following{/other_user}", "gists_url": "https://api.github.com/users/jcafhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcafhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcafhe/subscriptions", "organizations_url": "https://api.github.com/users/jcafhe/orgs", "repos_url": "https://api.github.com/users/jcafhe/repos", "events_url": "https://api.github.com/users/jcafhe/events{/privacy}", "received_events_url": "https://api.github.com/users/jcafhe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-14T17:23:38Z", "updated_at": "2020-01-18T18:49:36Z", "closed_at": "2019-01-18T17:26:35Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "Following the MainRo's idea, this issue can be used to track tests update to the new API (rx & rx.operators namespaces) as well as the new pipe mechanism.\r\n\r\nI've made a new repository [RxPY3.0-tests-tracking](http://github.com/jcafhe/RxPY3.0-tests-tracking) to track this in a table (much better than my paper & pencil). For convenience, I also copy/paste this table in the post below and occasionally will keep it up to date.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/270", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/270/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/270/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/270", "id": 396203308, "node_id": "MDU6SXNzdWUzOTYyMDMzMDg=", "number": 270, "title": "RxPY 3.0: Documentation", "user": {"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1278977167, "node_id": "MDU6TGFiZWwxMjc4OTc3MTY3", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/documentation", "name": "documentation", "color": "bfdadc", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "MainRo", "id": 814804, "node_id": "MDQ6VXNlcjgxNDgwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/814804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MainRo", "html_url": "https://github.com/MainRo", "followers_url": "https://api.github.com/users/MainRo/followers", "following_url": "https://api.github.com/users/MainRo/following{/other_user}", "gists_url": "https://api.github.com/users/MainRo/gists{/gist_id}", "starred_url": "https://api.github.com/users/MainRo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MainRo/subscriptions", "organizations_url": "https://api.github.com/users/MainRo/orgs", "repos_url": "https://api.github.com/users/MainRo/repos", "events_url": "https://api.github.com/users/MainRo/events{/privacy}", "received_events_url": "https://api.github.com/users/MainRo/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/ReactiveX/RxPY/milestones/2", "html_url": "https://github.com/ReactiveX/RxPY/milestone/2", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/milestones/2/labels", "id": 916147, "node_id": "MDk6TWlsZXN0b25lOTE2MTQ3", "number": 2, "title": "v3.0", "description": "", "creator": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 12, "state": "closed", "created_at": "2014-12-28T15:34:55Z", "updated_at": "2020-08-10T22:34:06Z", "due_on": "2019-06-01T07:00:00Z", "closed_at": "2019-07-17T06:26:56Z"}, "comments": 18, "created_at": "2019-01-05T21:54:19Z", "updated_at": "2019-07-22T20:19:46Z", "closed_at": "2019-07-22T20:19:45Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "With v3, an official documentation should be provided. This issue can be used to follow the progress on this topic. The following things must be done\r\n\r\n- [X] create outline\r\n- [X] migrate part of readme in doc\r\n- [X] reference doc from readme\r\n- [X] add a migration section\r\n- [X] document APIs : autodoc for all operators and classes\r\n- [X] choose a theme : Guzzle. \r\n- [x] publish the doc somewhere:  https://rxpy.readthedocs.io\r\n- [x] add marble diagrams for operators\r\n- [X] add additional readings section\r\n- [X] license section\r\n- [X] contributing section\r\n- [X] Fix docstring errors in __init__.py\r\n- [x] spellcheck\r\n- [ ] final pass on each section", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/269", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/269/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/269/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/269/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/269", "id": 395383102, "node_id": "MDU6SXNzdWUzOTUzODMxMDI=", "number": 269, "title": "RxPY 3.0", "user": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 972994944, "node_id": "MDU6TGFiZWw5NzI5OTQ5NDQ=", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/PR%20welcome", "name": "PR welcome", "color": "abfcc1", "default": false, "description": ""}, {"id": 32928881, "node_id": "MDU6TGFiZWwzMjkyODg4MQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 32, "created_at": "2019-01-02T21:16:46Z", "updated_at": "2020-01-24T11:50:54Z", "closed_at": "2019-01-21T06:46:56Z", "author_association": "COLLABORATOR", "active_lock_reason": "resolved", "body": "Currently working on [RxPY 3.0](https://github.com/ReactiveX/RxPY/tree/feature/rxpy-3.0) which is heavily inspired by RxJS 6.0. Need help with fixing things after code refactoring. New features:\r\n\r\n- Operators are plain and pipable functions\r\n- New pipe operator\r\n- No more method chaining (see [timeflies_tkinter.py](https://github.com/ReactiveX/RxPY/blob/feature/rxpy-3.0/examples/timeflies/timeflies_tkinter.py) for working example)\r\n- Code base reduced. With pipable operators it's very easy to create your own operators\r\n- Backpressure removed. Can be made as extension if anyone wants to care for it.\r\n- Result mappers (`result_mapper`) will be removed to make implementation simpler.\r\n\r\nWhat remains needs to be done is:\r\n\r\n- Unit tests (currently only test_map and test_filter is working). Needs to be updated to new pipeline style.\r\n- Documentation. The current README.md is bloated. Needs to be simplified.\r\n- Add lazy loading for the rest of the operators in `rx/operators/__init__.py`.\r\n- Add lazy loading for the rest of the static creation operators in `rx/.__init__.py`.\r\n\r\nPRs are very much welcome to the [feature/rxpy-3.0](https://github.com/ReactiveX/RxPY/tree/feature/rxpy-3.0) branch.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/268", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/268/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/268/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/268", "id": 394245868, "node_id": "MDU6SXNzdWUzOTQyNDU4Njg=", "number": 268, "title": "Subjects and ThreadPoolScheduler Question", "user": {"login": "avikaza", "id": 2014004, "node_id": "MDQ6VXNlcjIwMTQwMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2014004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avikaza", "html_url": "https://github.com/avikaza", "followers_url": "https://api.github.com/users/avikaza/followers", "following_url": "https://api.github.com/users/avikaza/following{/other_user}", "gists_url": "https://api.github.com/users/avikaza/gists{/gist_id}", "starred_url": "https://api.github.com/users/avikaza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avikaza/subscriptions", "organizations_url": "https://api.github.com/users/avikaza/orgs", "repos_url": "https://api.github.com/users/avikaza/repos", "events_url": "https://api.github.com/users/avikaza/events{/privacy}", "received_events_url": "https://api.github.com/users/avikaza/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-26T21:40:15Z", "updated_at": "2020-01-09T23:30:26Z", "closed_at": "2019-01-09T21:17:12Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Thanks in advance.\r\n\r\nI have an existing application where I am trying to slowly start bringing in RxPy and I have a confusion with regard to subscribe_on(ThreadPoolScheduler) when used with a Subject (I am using a Subject in order to do an on_next after subscription).\r\n\r\nI understand ideally I should be creating a hot observable instead of doing an on_next on Subject after subscription like this but that will mean re-writing a bigger chunk of code.\r\n\r\n```\r\n...\r\ncpu_cnt = multiprocessing.cpu_count()\r\npool_scheduler = ThreadPoolScheduler(cpu_cnt)\r\n\r\nprocess_one_subject = Subject()\r\nprocess_two_subject = Subject()\r\n\r\nprocess_one_subject \\\r\n        .subscribe_on(pool_scheduler) \\\r\n        .subscribe(on_next=lambda msg: p1_handler(msg))\r\n\r\nprocess_two_subject \\\r\n        .subscribe_on(pool_scheduler) \\\r\n        .subscribe(on_next=lambda msg: p2_handler(msg))\r\n\r\n\r\ndef p1_handler(msg):\r\n    print('{0} {1} started p1: {2}'.format(os.getpid(), current_thread().name, msg))\r\n    time.sleep(3)\r\n    print('{0} {1} finished p1: {2}'.format(os.getpid(), current_thread().name, msg))\r\n\r\ndef p2_handler(msg):\r\n    print('{0} {1} started p2: {2}'.format(os.getpid(), current_thread().name, msg))\r\n    time.sleep(5)\r\n    print('{0} {1} finished p2: {2}'.format(os.getpid(), current_thread().name, msg))\r\n\r\ndef process_function(subj, msg):\r\n    subj.on_next(msg)\r\n\r\ndef main():\r\n    start = time.time()\r\n    for i in range(0, 5):\r\n        process_one_subject.on_next(i)\r\n        process_two_subject.on_next(i)\r\n    end = time.time()\r\n    print(end - start)\r\n```\r\nQ1: I was expecting that processes use multiple threads (atleast one per subscription) to handle the work but everything works on the main thread. \r\n\r\nQ2: Are there plans to create ProcessPoolScheduler from multiprocessing.Pool? Because it is better to use sub-process based pools primarily for CPU intensive operations.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/267", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/267/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/267/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/267/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/267", "id": 388268551, "node_id": "MDU6SXNzdWUzODgyNjg1NTE=", "number": 267, "title": "OSError with chess.py", "user": {"login": "Yoiro", "id": 25454277, "node_id": "MDQ6VXNlcjI1NDU0Mjc3", "avatar_url": "https://avatars3.githubusercontent.com/u/25454277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yoiro", "html_url": "https://github.com/Yoiro", "followers_url": "https://api.github.com/users/Yoiro/followers", "following_url": "https://api.github.com/users/Yoiro/following{/other_user}", "gists_url": "https://api.github.com/users/Yoiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yoiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yoiro/subscriptions", "organizations_url": "https://api.github.com/users/Yoiro/orgs", "repos_url": "https://api.github.com/users/Yoiro/repos", "events_url": "https://api.github.com/users/Yoiro/events{/privacy}", "received_events_url": "https://api.github.com/users/Yoiro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-06T15:36:41Z", "updated_at": "2020-01-26T11:28:49Z", "closed_at": "2019-01-26T10:48:14Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Hi, \r\n\r\nWhile searching for resources about merging RxPy with PyGame, I just found your chess.py example.\r\n\r\nI copied your code and wanted to check if it ran OK, but when I do my `python chess.py`, I run into an OSError (see full log below). I'm using Windows 10 (with Git Bash) and Python 3.6.2. Also I tried to add some logging inside your SchedulerBase.to_datetime() in order to understand this error a bit more, but without much result.\r\n\r\nI'd be glad to help solve this one but I can't see where the error can come from so if anybody here can help me find a way that would be very much appreciated.\r\n\r\nThanks.\r\n\r\n```\r\n$ pip freeze\r\npygame==1.9.4\r\nRx==1.6.1\r\n\r\n$ python chess.py\r\npygame 1.9.4\r\nHello from the pygame community. https://www.pygame.org/contribute.html\r\n<class 'int'> 639 # ------ logger.error(\"%s %s\", % (type(duetime), duetime)\r\n0.639 # ------------------ logger.error(str(duetime/1000.0))\r\nTraceback (most recent call last):\r\n  File \"chess.py\", line 91, in <module>\r\n    main()\r\n  File \"chess.py\", line 69, in main\r\n    mousemove.on_next(pos)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\subjects\\subject.py\", line 92, in on_next\r\n    observer.on_next(value)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\core\\observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\core\\autodetachobserver.py\", line 16, in _on_next_core\r\n    self.observer.on_next(value)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\core\\observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\core\\anonymousobserver.py\", line 14, in _on_next_core\r\n    self._next(value)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\linq\\observable\\materialize.py\", line 19, in on_next\r\n    observer.on_next(OnNext(value))\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\core\\observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\core\\autodetachobserver.py\", line 16, in _on_next_core\r\n    self.observer.on_next(value)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\core\\observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\core\\anonymousobserver.py\", line 14, in _on_next_core\r\n    self._next(value)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\linq\\observable\\select.py\", line 33, in on_next\r\n    observer.on_error(err)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\core\\observerbase.py\", line 33, in on_error\r\n    self._on_error_core(error)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\core\\autodetachobserver.py\", line 23, in _on_error_core\r\n    self.observer.on_error(exn)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\core\\observerbase.py\", line 33, in on_error\r\n    self._on_error_core(error)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\core\\anonymousobserver.py\", line 17, in _on_error_core\r\n    self._error(error)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\internal\\basic.py\", line 33, in default_error\r\n    raise err\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\linq\\observable\\select.py\", line 31, in on_next\r\n    result = selector(value, count[0])\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\internal\\utils.py\", line 57, in func_wrapped\r\n    ret = fn(*args, **kw)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\internal\\utils.py\", line 46, in func1\r\n    return func(arg1)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\linq\\observable\\timestamp.py\", line 28, in selector\r\n    return Timestamp(value=x, timestamp=scheduler.now)\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\concurrency\\mainloopscheduler\\pygamescheduler.py\", line 79, in now\r\n    return self.to_datetime(pygame.time.get_ticks())\r\n  File \"C:\\dev\\prj\\intellichess\\.venv\\lib\\site-packages\\rx\\concurrency\\schedulerbase.py\", line 83, in to_datetime\r\n    duetime = datetime.fromtimestamp(duetime/1000.0)\r\nOSError: [Errno 22] Invalid argument", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/264", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/264/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/264/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/264/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/264", "id": 383958716, "node_id": "MDU6SXNzdWUzODM5NTg3MTY=", "number": 264, "title": "to_iterable produces list, not iterator.", "user": {"login": "akhilman", "id": 180812, "node_id": "MDQ6VXNlcjE4MDgxMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/180812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akhilman", "html_url": "https://github.com/akhilman", "followers_url": "https://api.github.com/users/akhilman/followers", "following_url": "https://api.github.com/users/akhilman/following{/other_user}", "gists_url": "https://api.github.com/users/akhilman/gists{/gist_id}", "starred_url": "https://api.github.com/users/akhilman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akhilman/subscriptions", "organizations_url": "https://api.github.com/users/akhilman/orgs", "repos_url": "https://api.github.com/users/akhilman/repos", "events_url": "https://api.github.com/users/akhilman/events{/privacy}", "received_events_url": "https://api.github.com/users/akhilman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-24T04:40:48Z", "updated_at": "2019-12-26T04:06:22Z", "closed_at": "2018-12-25T11:38:25Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Why to_iterable operator renamed from to_list but still produces list. Should it be written to produce generator?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/263", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/263/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/263/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/263/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/263", "id": 383958548, "node_id": "MDU6SXNzdWUzODM5NTg1NDg=", "number": 263, "title": "while_do  and on_completed/on_error", "user": {"login": "akhilman", "id": 180812, "node_id": "MDQ6VXNlcjE4MDgxMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/180812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akhilman", "html_url": "https://github.com/akhilman", "followers_url": "https://api.github.com/users/akhilman/followers", "following_url": "https://api.github.com/users/akhilman/following{/other_user}", "gists_url": "https://api.github.com/users/akhilman/gists{/gist_id}", "starred_url": "https://api.github.com/users/akhilman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akhilman/subscriptions", "organizations_url": "https://api.github.com/users/akhilman/orgs", "repos_url": "https://api.github.com/users/akhilman/repos", "events_url": "https://api.github.com/users/akhilman/events{/privacy}", "received_events_url": "https://api.github.com/users/akhilman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-24T04:36:29Z", "updated_at": "2020-01-26T11:28:46Z", "closed_at": "2019-01-26T10:53:20Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Why [while_do](https://github.com/ReactiveX/RxPY/blob/master/rx/operators/iterable/whiledo.py) doesn't handle on_error and on_competed? Seems like we will have frozen iterable in case of on_error/on_completed events.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/262", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/262/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/262/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/262/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/262", "id": 377197928, "node_id": "MDU6SXNzdWUzNzcxOTc5Mjg=", "number": 262, "title": "Unexpected scheduling order", "user": {"login": "ablaagaard", "id": 3254369, "node_id": "MDQ6VXNlcjMyNTQzNjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3254369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ablaagaard", "html_url": "https://github.com/ablaagaard", "followers_url": "https://api.github.com/users/ablaagaard/followers", "following_url": "https://api.github.com/users/ablaagaard/following{/other_user}", "gists_url": "https://api.github.com/users/ablaagaard/gists{/gist_id}", "starred_url": "https://api.github.com/users/ablaagaard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ablaagaard/subscriptions", "organizations_url": "https://api.github.com/users/ablaagaard/orgs", "repos_url": "https://api.github.com/users/ablaagaard/repos", "events_url": "https://api.github.com/users/ablaagaard/events{/privacy}", "received_events_url": "https://api.github.com/users/ablaagaard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928883, "node_id": "MDU6TGFiZWwzMjkyODg4Mw==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-04T21:42:08Z", "updated_at": "2019-12-26T04:06:16Z", "closed_at": "2018-12-25T11:50:39Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Not sure if this is a bug. I was expecting to get the range back ordered?\r\n\r\nrx.Observable.range(0,21).buffer_with_count(10).flat_map(lambda x: x).take(15).subscribe(print)\r\n\r\nConsistently includes 20 as the second to last item for me:\r\n0\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n20\r\n13\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/261", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/261/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/261/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/261/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/261", "id": 376922698, "node_id": "MDU6SXNzdWUzNzY5MjI2OTg=", "number": 261, "title": "RxPy and backpressure dropping", "user": {"login": "tadas-subonis", "id": 247218, "node_id": "MDQ6VXNlcjI0NzIxOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/247218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tadas-subonis", "html_url": "https://github.com/tadas-subonis", "followers_url": "https://api.github.com/users/tadas-subonis/followers", "following_url": "https://api.github.com/users/tadas-subonis/following{/other_user}", "gists_url": "https://api.github.com/users/tadas-subonis/gists{/gist_id}", "starred_url": "https://api.github.com/users/tadas-subonis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tadas-subonis/subscriptions", "organizations_url": "https://api.github.com/users/tadas-subonis/orgs", "repos_url": "https://api.github.com/users/tadas-subonis/repos", "events_url": "https://api.github.com/users/tadas-subonis/events{/privacy}", "received_events_url": "https://api.github.com/users/tadas-subonis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-02T18:32:13Z", "updated_at": "2020-01-24T11:50:11Z", "closed_at": "2019-01-22T11:43:43Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Hi all,\r\n\r\nis it possible to create a backpressured Obserable that would drop the items, that the downstream cannot process?\r\n\r\nTadas", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/260", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/260/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/260/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/260", "id": 369990028, "node_id": "MDU6SXNzdWUzNjk5OTAwMjg=", "number": 260, "title": "test suit fails on Python 3.7", "user": {"login": "carlwgeorge", "id": 12187228, "node_id": "MDQ6VXNlcjEyMTg3MjI4", "avatar_url": "https://avatars2.githubusercontent.com/u/12187228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlwgeorge", "html_url": "https://github.com/carlwgeorge", "followers_url": "https://api.github.com/users/carlwgeorge/followers", "following_url": "https://api.github.com/users/carlwgeorge/following{/other_user}", "gists_url": "https://api.github.com/users/carlwgeorge/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlwgeorge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlwgeorge/subscriptions", "organizations_url": "https://api.github.com/users/carlwgeorge/orgs", "repos_url": "https://api.github.com/users/carlwgeorge/repos", "events_url": "https://api.github.com/users/carlwgeorge/events{/privacy}", "received_events_url": "https://api.github.com/users/carlwgeorge/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-10-15T03:58:24Z", "updated_at": "2019-12-28T20:09:58Z", "closed_at": "2018-12-28T19:47:07Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I'm working on packaging this library as an RPM for Fedora.  The test suite passes on Fedora 28 with Python 3.6, but has two failures on Fedora 29 with Python 3.7.\r\n\r\n```\r\n======================================================================\r\nFAIL: test_while_always_false (tests.test_observable.test_while.TestWhile)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/carl/development/RxPY/tests/test_observable/test_while.py\", line 24, in test_while_always_false\r\n    results.messages.assert_equal(on_completed(200))\r\n  File \"/home/carl/development/RxPY/rx/testing/reactive_assert.py\", line 28, in assert_equal\r\n    return are_elements_equal(expected, self, default_comparer)\r\n  File \"/home/carl/development/RxPY/rx/testing/reactive_assert.py\", line 19, in are_elements_equal\r\n    assert is_ok, message or create_message(actual, expected)\r\nAssertionError: \r\n\tExpected: [[OnCompleted()@200]]\r\n\tActual:   [[OnError(generator raised StopIteration)@200]]\r\n>>  assert False, None or create_message([OnError(generator raised StopIteration)@200], [OnCompleted()@200])\r\n```\r\n\r\n```\r\n======================================================================\r\nFAIL: test_while_sometimes_true (tests.test_observable.test_while.TestWhile)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/carl/development/RxPY/tests/test_observable/test_while.py\", line 90, in test_while_sometimes_true\r\n    results.messages.assert_equal(on_next(250, 1), on_next(300, 2), on_next(350, 3), on_next(400, 4), on_next(500, 1), on_next(550, 2), on_next(600, 3), on_next(650, 4), on_completed(700))\r\n  File \"/home/carl/development/RxPY/rx/testing/reactive_assert.py\", line 28, in assert_equal\r\n    return are_elements_equal(expected, self, default_comparer)\r\n  File \"/home/carl/development/RxPY/rx/testing/reactive_assert.py\", line 19, in are_elements_equal\r\n    assert is_ok, message or create_message(actual, expected)\r\nAssertionError: \r\n\tExpected: [[OnNext(1)@250, OnNext(2)@300, OnNext(3)@350, OnNext(4)@400, OnNext(1)@500, OnNext(2)@550, OnNext(3)@600, OnNext(4)@650, OnCompleted()@700]]\r\n\tActual:   [[OnNext(1)@250, OnNext(2)@300, OnNext(3)@350, OnNext(4)@400, OnNext(1)@500, OnNext(2)@550, OnNext(3)@600, OnNext(4)@650, OnError(generator raised StopIteration)@700]]\r\n>>  assert False, None or create_message([OnNext(1)@250, OnNext(2)@300, OnNext(3)@350, OnNext(4)@400, OnNext(1)@500, OnNext(2)@550, OnNext(3)@600, OnNext(4)@650, OnError(generator raised StopIteration)@700], [OnNext(1)@250, OnNext(2)@300, OnNext(3)@350, OnNext(4)@400, OnNext(1)@500, OnNext(2)@550, OnNext(3)@600, OnNext(4)@650, OnCompleted()@700])\r\n```\r\n\r\n[full output](https://gist.github.com/carlwgeorge/983ff26bb181e3c44b9b9a91eb30d0d6)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/257", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/257/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/257/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/257/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/257", "id": 359589790, "node_id": "MDU6SXNzdWUzNTk1ODk3OTA=", "number": 257, "title": "examples/timefiles_tkinter.py failing", "user": {"login": "octetta", "id": 903098, "node_id": "MDQ6VXNlcjkwMzA5OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/903098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/octetta", "html_url": "https://github.com/octetta", "followers_url": "https://api.github.com/users/octetta/followers", "following_url": "https://api.github.com/users/octetta/following{/other_user}", "gists_url": "https://api.github.com/users/octetta/gists{/gist_id}", "starred_url": "https://api.github.com/users/octetta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/octetta/subscriptions", "organizations_url": "https://api.github.com/users/octetta/orgs", "repos_url": "https://api.github.com/users/octetta/repos", "events_url": "https://api.github.com/users/octetta/events{/privacy}", "received_events_url": "https://api.github.com/users/octetta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-12T17:58:31Z", "updated_at": "2020-01-24T11:49:45Z", "closed_at": "2019-01-23T09:18:32Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Tested on macOS 10.13.6 with Python 3.6.4\r\n\r\nError:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"timeflies_tkinter.py\", line 37, in <module>\r\n    main()\r\n  File \"timeflies_tkinter.py\", line 31, in main\r\n    handle_label(i, label)\r\n  File \"timeflies_tkinter.py\", line 28, in handle_label\r\n    mousemove.delay(i*100).subscribe(on_next, scheduler=scheduler)\r\nTypeError: subscribe() got an unexpected keyword argument 'scheduler'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/256", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/256/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/256/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/256", "id": 358731111, "node_id": "MDU6SXNzdWUzNTg3MzExMTE=", "number": 256, "title": "While True loop in observable followed by flat_map", "user": {"login": "lucaruzzola", "id": 17249705, "node_id": "MDQ6VXNlcjE3MjQ5NzA1", "avatar_url": "https://avatars0.githubusercontent.com/u/17249705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucaruzzola", "html_url": "https://github.com/lucaruzzola", "followers_url": "https://api.github.com/users/lucaruzzola/followers", "following_url": "https://api.github.com/users/lucaruzzola/following{/other_user}", "gists_url": "https://api.github.com/users/lucaruzzola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucaruzzola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucaruzzola/subscriptions", "organizations_url": "https://api.github.com/users/lucaruzzola/orgs", "repos_url": "https://api.github.com/users/lucaruzzola/repos", "events_url": "https://api.github.com/users/lucaruzzola/events{/privacy}", "received_events_url": "https://api.github.com/users/lucaruzzola/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-10T18:01:23Z", "updated_at": "2019-09-13T14:32:53Z", "closed_at": "2018-09-13T14:03:36Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Hi everyone, I modified the code example on flat_map to have an infinite loop in the Observable, the effect I am seeing is that the observer is never called and the system just hangs forever.\r\nThe code is fine when flat_map is swapped for map and the called function does not return an Observable.\r\n\r\n[Here you can find sample code.\r\n](https://gist.github.com/lucaruzzola/d226c0e9d6034df22255cdf2378f1c07)\r\n\r\nThe program also works fine if you substitute the infinte_obs for a list.\r\nAm I doing something wrong?\r\n\r\nI am using rx 1.6 on python 3.5\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/255", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/255/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/255/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/255", "id": 356882272, "node_id": "MDU6SXNzdWUzNTY4ODIyNzI=", "number": 255, "title": "How to add my own Operators", "user": {"login": "dalianzhu", "id": 19216434, "node_id": "MDQ6VXNlcjE5MjE2NDM0", "avatar_url": "https://avatars2.githubusercontent.com/u/19216434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dalianzhu", "html_url": "https://github.com/dalianzhu", "followers_url": "https://api.github.com/users/dalianzhu/followers", "following_url": "https://api.github.com/users/dalianzhu/following{/other_user}", "gists_url": "https://api.github.com/users/dalianzhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/dalianzhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dalianzhu/subscriptions", "organizations_url": "https://api.github.com/users/dalianzhu/orgs", "repos_url": "https://api.github.com/users/dalianzhu/repos", "events_url": "https://api.github.com/users/dalianzhu/events{/privacy}", "received_events_url": "https://api.github.com/users/dalianzhu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928883, "node_id": "MDU6TGFiZWwzMjkyODg4Mw==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-04T16:15:55Z", "updated_at": "2019-12-26T08:12:26Z", "closed_at": "2018-12-26T05:38:11Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I want to add a method _my_map_ to operators, it can filter out the data that caused the error (just for example, I know there are other ways to solve this problem ).\r\nlike this:\r\n```\r\nstream = Observable.from_([1, 2, '3', 4]) \\\r\n            .my_map(lambda x: x + 1) \\\r\n            .do_action(lambda x: print(x))\r\nawait stream\r\noutput:\r\n2,3,5  # '3' is removed\r\n```\r\nBut as we know,  Observable.from_ returns AnonymousObservable object. Inheriting Observable can't achieve the goal. I can only find a ugly way to change the AnonymousObservable like this code:\r\n```\r\n    def my_map(*args):\r\n        args = list(args)\r\n        def _handle_err(fn):\r\n            def _inner(*args):\r\n                try:\r\n                    return fn(*args)\r\n                except:\r\n                    return None\r\n            return _inner\r\n        args[1] = _handle_err(args[1])\r\n        return AnonymousObservable.map(*args).where(lambda x: x is not None)\r\n\r\n    AnonymousObservable.my_map = my_map  # I dont want to use this way.\r\n\r\n    stream = Observable.from_([1, 2, '3', 4]) \\\r\n        .my_map(lambda x: x + 1) \\\r\n        .do_action(lambda x: print(x))\r\n    await stream\r\n```\r\nDo we have a better choice?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/254", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/254/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/254/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/254/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/254", "id": 353330507, "node_id": "MDU6SXNzdWUzNTMzMzA1MDc=", "number": 254, "title": "Observable.timer with IOLoopScheduler", "user": {"login": "hulucc", "id": 4343900, "node_id": "MDQ6VXNlcjQzNDM5MDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/4343900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hulucc", "html_url": "https://github.com/hulucc", "followers_url": "https://api.github.com/users/hulucc/followers", "following_url": "https://api.github.com/users/hulucc/following{/other_user}", "gists_url": "https://api.github.com/users/hulucc/gists{/gist_id}", "starred_url": "https://api.github.com/users/hulucc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hulucc/subscriptions", "organizations_url": "https://api.github.com/users/hulucc/orgs", "repos_url": "https://api.github.com/users/hulucc/repos", "events_url": "https://api.github.com/users/hulucc/events{/privacy}", "received_events_url": "https://api.github.com/users/hulucc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-23T11:01:33Z", "updated_at": "2020-01-26T11:28:52Z", "closed_at": "2019-01-26T09:36:19Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "The period will increase with each emit. It supposed to be a constant value\r\npython: `3.3.6`\r\n```python\r\nfrom rx.concurrency import IOLoopScheduler\r\nfrom rx import Observable\r\nimport tornado\r\n\r\nscheduler = IOLoopScheduler()\r\nObservable.timer(0, 1000, scheduler).subscribe(print)\r\ntornado.ioloop.IOLoop.current().start()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/253", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/253/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/253/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/253", "id": 349762592, "node_id": "MDU6SXNzdWUzNDk3NjI1OTI=", "number": 253, "title": "on_error_resume_next emits even if there is no error", "user": {"login": "leinardi", "id": 273338, "node_id": "MDQ6VXNlcjI3MzMzOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/273338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leinardi", "html_url": "https://github.com/leinardi", "followers_url": "https://api.github.com/users/leinardi/followers", "following_url": "https://api.github.com/users/leinardi/following{/other_user}", "gists_url": "https://api.github.com/users/leinardi/gists{/gist_id}", "starred_url": "https://api.github.com/users/leinardi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leinardi/subscriptions", "organizations_url": "https://api.github.com/users/leinardi/orgs", "repos_url": "https://api.github.com/users/leinardi/repos", "events_url": "https://api.github.com/users/leinardi/events{/privacy}", "received_events_url": "https://api.github.com/users/leinardi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-11T20:46:20Z", "updated_at": "2020-01-28T12:37:03Z", "closed_at": "2019-01-28T12:04:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": "resolved", "body": "In the following example the operator `on_error_resume_next` emits even if there is no error.\r\n\r\n```\r\n#!/usr/bin/env python3\r\nimport multiprocessing\r\n\r\nfrom rx import Observable\r\nfrom rx.concurrency import ThreadPoolScheduler\r\nfrom rx.disposables import CompositeDisposable\r\n\r\nif __name__ == \"__main__\":\r\n    print(\"start\")\r\n    scheduler = ThreadPoolScheduler(multiprocessing.cpu_count())\r\n    composite_disposable = CompositeDisposable()\r\n    composite_disposable.add(\r\n        Observable\r\n            .interval(3000, scheduler=scheduler)\r\n            .start_with(0)\r\n            .map(lambda _: \"start\")\r\n            .subscribe_on(scheduler)\r\n            .flat_map(lambda s:\r\n                      Observable.just(\"foo\")\r\n                      .map(lambda f: s + f)\r\n                      .on_error_resume_next(Observable.just(\"err_f\"))\r\n                      )\r\n            .flat_map(lambda s:\r\n                      Observable.just(\"bar\")\r\n                      .map(lambda b: s + b)\r\n                      .on_error_resume_next(Observable.just(\"err_b\"))\r\n                      )\r\n            .subscribe(on_next=lambda s: print(\"on_next %s\" % s),\r\n                       on_completed=lambda: print(\"on_completed\"),\r\n                       on_error=lambda e: print(\"on_error: %s\" % str(e)))\r\n    )\r\n```\r\n\r\nExpected result:\r\n```\r\nstart\r\non_next startfoobar\r\non_next startfoobar\r\non_next startfoobar\r\non_next startfoobar\r\n```\r\n\r\nActual result:\r\n```\r\nstart\r\non_next startfoobar\r\non_next err_b\r\non_next err_fbar\r\non_next err_b\r\non_next startfoobar\r\non_next err_b\r\non_next err_fbar\r\non_next err_b\r\non_next startfoobar\r\non_next err_b\r\non_next err_fbar\r\non_next err_b\r\non_next startfoobar\r\non_next err_b\r\non_next err_fbar\r\non_next err_b\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/251", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/251/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/251/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/251", "id": 339356612, "node_id": "MDU6SXNzdWUzMzkzNTY2MTI=", "number": 251, "title": "rx.streams is not installed", "user": {"login": "Dodobibi", "id": 13240092, "node_id": "MDQ6VXNlcjEzMjQwMDky", "avatar_url": "https://avatars3.githubusercontent.com/u/13240092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dodobibi", "html_url": "https://github.com/Dodobibi", "followers_url": "https://api.github.com/users/Dodobibi/followers", "following_url": "https://api.github.com/users/Dodobibi/following{/other_user}", "gists_url": "https://api.github.com/users/Dodobibi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dodobibi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dodobibi/subscriptions", "organizations_url": "https://api.github.com/users/Dodobibi/orgs", "repos_url": "https://api.github.com/users/Dodobibi/repos", "events_url": "https://api.github.com/users/Dodobibi/events{/privacy}", "received_events_url": "https://api.github.com/users/Dodobibi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-07-09T08:42:54Z", "updated_at": "2019-07-22T07:45:34Z", "closed_at": "2018-07-22T06:46:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": "resolved", "body": "I install RxPY from git :\r\n`pip install -U git+https://github.com/ReactiveX/RxPY`\r\n\r\nthe sub module rx.streams is not installed (it's not in setup.py)\r\n\r\nI have this error :\r\n```\r\n  File \"/opt/DEVELOPEMENT3.7/lib/python3.7/site-packages/rx/core/observablebase.py\", line 803, in filter\r\n    from ..operators.observable.filter import filter as _filter\r\n  File \"/opt/DEVELOPEMENT3.7/lib/python3.7/site-packages/rx/operators/observable/filter.py\", line 5, in <module>\r\n    from rx.streams import SingleStream\r\nModuleNotFoundError: No module named 'rx.streams'\r\n\r\n```\r\nProcess finished with exit code 1\r\n\r\nAs workaround - Adding rx.streams manually resolve this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/250", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/250/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/250/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/250", "id": 339234712, "node_id": "MDU6SXNzdWUzMzkyMzQ3MTI=", "number": 250, "title": "Using RxPy in current thread without any scheduler", "user": {"login": "Soamid", "id": 3297450, "node_id": "MDQ6VXNlcjMyOTc0NTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3297450?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Soamid", "html_url": "https://github.com/Soamid", "followers_url": "https://api.github.com/users/Soamid/followers", "following_url": "https://api.github.com/users/Soamid/following{/other_user}", "gists_url": "https://api.github.com/users/Soamid/gists{/gist_id}", "starred_url": "https://api.github.com/users/Soamid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Soamid/subscriptions", "organizations_url": "https://api.github.com/users/Soamid/orgs", "repos_url": "https://api.github.com/users/Soamid/repos", "events_url": "https://api.github.com/users/Soamid/events{/privacy}", "received_events_url": "https://api.github.com/users/Soamid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-08T15:30:08Z", "updated_at": "2020-06-24T19:13:42Z", "closed_at": "2019-05-30T12:23:11Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I have some experience working with RxJava and recently I've started project in RxPy. During writing tests I found something that looked like a bug and totally changed expected behavior of my application: if there're nested `subscribe()` operations anywhere in code, instructions are not invoked sequentially, like they were non-blocking. For example:\r\n```python\r\ndef test():\r\n    rx.Observable.from_iterable([1,2,3]) \\\r\n        .subscribe(lambda x : print(x))\r\n    print(\"after subscribe\")\r\n\r\nfor i in range(3):\r\n    test()\r\n```\r\nIn such case output will be:\r\n```\r\n1\r\n2\r\n3\r\nafter subscribe\r\n1\r\n2\r\n3\r\nafter subscribe\r\n1\r\n2\r\n3\r\nafter subscribe\r\n```\r\nBut, if you write this loop using RxPy:\r\n```python\r\nrx.Observable.range(0, 3) \\\r\n    .do_action(lambda _ : test()) \\\r\n    .subscribe()\r\n```\r\nsubscriptions in `test()` function are non-blocking, producing (for example) following output:\r\n```\r\nafter subscribe\r\n1\r\nafter subscribe\r\n2\r\n1\r\nafter subscribe\r\n3\r\n2\r\n1\r\n3\r\n2\r\n3\r\n``` \r\nAfter debugging RxPy code I've came to conclusion that all subscriptions are by default scheduled on `CurrentThreadScheduler`, that works like `trampoline()` in RxJava. It's great that we can have such behavior in RxPy, but is it possible to use RxPy **without** scheduling, just like it's working in RxJava by default? \r\nI think it can be also really confusing for new users, especially that I can't find any information about default behavior in RxPy documentation. :(", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/247", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/247/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/247/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/247", "id": 334867540, "node_id": "MDU6SXNzdWUzMzQ4Njc1NDA=", "number": 247, "title": "Examples are broken", "user": {"login": "lherman-cs", "id": 15654932, "node_id": "MDQ6VXNlcjE1NjU0OTMy", "avatar_url": "https://avatars2.githubusercontent.com/u/15654932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lherman-cs", "html_url": "https://github.com/lherman-cs", "followers_url": "https://api.github.com/users/lherman-cs/followers", "following_url": "https://api.github.com/users/lherman-cs/following{/other_user}", "gists_url": "https://api.github.com/users/lherman-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/lherman-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lherman-cs/subscriptions", "organizations_url": "https://api.github.com/users/lherman-cs/orgs", "repos_url": "https://api.github.com/users/lherman-cs/repos", "events_url": "https://api.github.com/users/lherman-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/lherman-cs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-22T12:53:49Z", "updated_at": "2019-06-22T17:45:16Z", "closed_at": "2018-06-22T15:31:39Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I can't use any module from RxPy.\r\n<img width=\"643\" alt=\"screen shot 2018-06-22 at 8 51 31 am\" src=\"https://user-images.githubusercontent.com/15654932/41777517-94c21454-75f9-11e8-8575-c41f0c7f416b.png\">\r\n\r\nPython environment: Python 3.6.5 on MAC (homebrew)\r\n\r\nSteps to reproduce:\r\n* ```pip3 install rx```\r\n* Copy the example from README.md\r\n* Run it", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/246", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/246/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/246/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/246", "id": 334049949, "node_id": "MDU6SXNzdWUzMzQwNDk5NDk=", "number": 246, "title": "subscribe_ method in readme tutorial throws AttributeError", "user": {"login": "oyeyipowale", "id": 16971163, "node_id": "MDQ6VXNlcjE2OTcxMTYz", "avatar_url": "https://avatars0.githubusercontent.com/u/16971163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oyeyipowale", "html_url": "https://github.com/oyeyipowale", "followers_url": "https://api.github.com/users/oyeyipowale/followers", "following_url": "https://api.github.com/users/oyeyipowale/following{/other_user}", "gists_url": "https://api.github.com/users/oyeyipowale/gists{/gist_id}", "starred_url": "https://api.github.com/users/oyeyipowale/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oyeyipowale/subscriptions", "organizations_url": "https://api.github.com/users/oyeyipowale/orgs", "repos_url": "https://api.github.com/users/oyeyipowale/repos", "events_url": "https://api.github.com/users/oyeyipowale/events{/privacy}", "received_events_url": "https://api.github.com/users/oyeyipowale/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928882, "node_id": "MDU6TGFiZWwzMjkyODg4Mg==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-20T12:14:23Z", "updated_at": "2019-07-22T09:45:36Z", "closed_at": "2018-07-22T08:45:48Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Error\r\n\r\n```\r\nTraceback (most recent call last):\r\n...\r\n.filter(lambda i: i >= 5)\\\r\nAttributeError: 'AnonymousObservable' object has no attribute 'subscribe_'\r\n```\r\ntest env:\r\n\r\n- current version of RxPy\r\n- in python IDLE (v 3.5 and v 3.6)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/244", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/244/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/244/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/244", "id": 333041558, "node_id": "MDU6SXNzdWUzMzMwNDE1NTg=", "number": 244, "title": "Dispose leaking?", "user": {"login": "diorcety", "id": 636199, "node_id": "MDQ6VXNlcjYzNjE5OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/636199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diorcety", "html_url": "https://github.com/diorcety", "followers_url": "https://api.github.com/users/diorcety/followers", "following_url": "https://api.github.com/users/diorcety/following{/other_user}", "gists_url": "https://api.github.com/users/diorcety/gists{/gist_id}", "starred_url": "https://api.github.com/users/diorcety/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diorcety/subscriptions", "organizations_url": "https://api.github.com/users/diorcety/orgs", "repos_url": "https://api.github.com/users/diorcety/repos", "events_url": "https://api.github.com/users/diorcety/events{/privacy}", "received_events_url": "https://api.github.com/users/diorcety/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-06-17T07:11:52Z", "updated_at": "2019-06-24T07:33:21Z", "closed_at": "2018-06-24T06:54:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": "resolved", "body": "I can't provide the full code right now (I have to extract the meaning part) but I have issue with dispose not called in a two thread application. I have tracking down my code to find the issue and I found a \"funny\" behaviour\r\n\r\n```\r\nobs = obs.do_on_subscribe(lambda : logger.debug(\"AAAA8 Subscribe\")).do_on_dispose(lambda : logger.debug(\"AAAA8 Dispose\"))\r\nobs = obs.do_on_subscribe(lambda : logger.debug(\"AAAA81 Subscribe\")).do_on_dispose(lambda : logger.debug(\"AAAA81 Dispose\"))\r\n```\r\nI run a stress test, which will produce 100000(or 10000) loop on a test using this part\r\nI put the stderr in a file and doing a wc on it\r\n\r\n\r\n> cat tt | grep 'AAAA81 Sub' | wc\r\n>  100000 1100000 7500000\r\n> cat tt | grep 'AAAA8 Sub' | wc \r\n>  100000 1100000 7400000\r\n\r\nOkay that seems logic\r\n\r\n> cat tt | grep 'AAAA81 Dis' | wc\r\n>   99986 1099846 7235654\r\n\r\nOkay maybe on my code I was leaking some dipose after the code sample.\r\n\r\n> cat tt | grep 'AAAA8 Dis' | wc\r\n>   99991 1099901 7135035\r\n\r\nWhat???\r\n\r\nHere it's only print, but I have few important dispose actions, which sometime are not called...\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/241", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/241/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/241/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/241", "id": 318700585, "node_id": "MDU6SXNzdWUzMTg3MDA1ODU=", "number": 241, "title": "compatibility for upcoming PySide2-5.11 preview", "user": {"login": "stonebig", "id": 4312421, "node_id": "MDQ6VXNlcjQzMTI0MjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4312421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stonebig", "html_url": "https://github.com/stonebig", "followers_url": "https://api.github.com/users/stonebig/followers", "following_url": "https://api.github.com/users/stonebig/following{/other_user}", "gists_url": "https://api.github.com/users/stonebig/gists{/gist_id}", "starred_url": "https://api.github.com/users/stonebig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stonebig/subscriptions", "organizations_url": "https://api.github.com/users/stonebig/orgs", "repos_url": "https://api.github.com/users/stonebig/repos", "events_url": "https://api.github.com/users/stonebig/events{/privacy}", "received_events_url": "https://api.github.com/users/stonebig/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 972994944, "node_id": "MDU6TGFiZWw5NzI5OTQ5NDQ=", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/PR%20welcome", "name": "PR welcome", "color": "abfcc1", "default": false, "description": ""}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-29T08:44:05Z", "updated_at": "2020-06-24T18:22:44Z", "closed_at": "2019-06-06T04:24:39Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "After 2 years of brewing, PySide2-5.11 will reach preview status in may 2018, with:\r\n- full support per the Qt Company,\r\n- full API support at release time of Qt versions.\r\n\r\nWould it be possible to have PySide2 compatibility for that may 2018 milestone ?\r\n(QtPy, vendored or not,  being a possible intermediate layer)\r\n\r\nsee http://blog.qt.io/blog/category/qt-for-python/\r\n\r\nfor PySide2 bug tracker, see https://wiki.qt.io/Qt_for_Python\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/240", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/240/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/240/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/240", "id": 317961201, "node_id": "MDU6SXNzdWUzMTc5NjEyMDE=", "number": 240, "title": "Unexplained AttributeError for a long lasting process", "user": {"login": "victorbartel", "id": 23211406, "node_id": "MDQ6VXNlcjIzMjExNDA2", "avatar_url": "https://avatars1.githubusercontent.com/u/23211406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/victorbartel", "html_url": "https://github.com/victorbartel", "followers_url": "https://api.github.com/users/victorbartel/followers", "following_url": "https://api.github.com/users/victorbartel/following{/other_user}", "gists_url": "https://api.github.com/users/victorbartel/gists{/gist_id}", "starred_url": "https://api.github.com/users/victorbartel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/victorbartel/subscriptions", "organizations_url": "https://api.github.com/users/victorbartel/orgs", "repos_url": "https://api.github.com/users/victorbartel/repos", "events_url": "https://api.github.com/users/victorbartel/events{/privacy}", "received_events_url": "https://api.github.com/users/victorbartel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-26T10:06:04Z", "updated_at": "2019-04-26T12:56:31Z", "closed_at": "2018-04-26T12:05:54Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Hi,\r\n\r\nI'm facing very strange issue with PyRx, in few words my scripts stop working after ~2h of processing with a weird exception which has nothing to do with my code. \r\n\r\nThe exception in fact is `AttributeError: 'dict' object has no attribute 'subscribe'`\r\n\r\n```\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/python/3.6.4_4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/threading.py\", line 916, in _bootstrap_inner\r\n    self.run()\r\n  File \"/usr/local/Cellar/python/3.6.4_4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/threading.py\", line 864, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/concurrency/eventloopscheduler.py\", line 151, in run\r\n    item.invoke()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/concurrency/scheduleditem.py\", line 17, in invoke\r\n    ret = self.scheduler.invoke_action(self.action, self.state)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/concurrency/schedulerbase.py\", line 14, in invoke_action\r\n    ret = action(self, state)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/subscribeon.py\", line 34, in action\r\n    d.disposable = ScheduledDisposable(scheduler, source.subscribe(observer))\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observablebase.py\", line 83, in subscribe\r\n    current_thread_scheduler.schedule(set_disposable)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/concurrency/currentthreadscheduler.py\", line 50, in schedule\r\n    return self.schedule_relative(timedelta(0), action, state)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/concurrency/currentthreadscheduler.py\", line 67, in schedule_relative\r\n    Trampoline.run(queue)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/concurrency/currentthreadscheduler.py\", line 31, in run\r\n    item.invoke()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/concurrency/scheduleditem.py\", line 17, in invoke\r\n    ret = self.scheduler.invoke_action(self.action, self.state)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/concurrency/schedulerbase.py\", line 14, in invoke_action\r\n    ret = action(self, state)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/fromiterable.py\", line 41, in action\r\n    observer.on_next(item)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/autodetachobserver.py\", line 16, in _on_next_core\r\n    self.observer.on_next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/anonymousobserver.py\", line 14, in _on_next_core\r\n    self._next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/merge.py\", line 128, in on_next\r\n    observer.on_next(x)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/autodetachobserver.py\", line 16, in _on_next_core\r\n    self.observer.on_next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/anonymousobserver.py\", line 14, in _on_next_core\r\n    self._next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/select.py\", line 36, in on_next\r\n    observer.on_next(result)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/autodetachobserver.py\", line 16, in _on_next_core\r\n    self.observer.on_next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/anonymousobserver.py\", line 14, in _on_next_core\r\n    self._next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/windowwithcount.py\", line 58, in on_next\r\n    s.on_completed()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/subjects/subject.py\", line 55, in on_completed\r\n    observer.on_completed()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 44, in on_completed\r\n    self._on_completed_core()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/autodetachobserver.py\", line 29, in _on_completed_core\r\n    self.observer.on_completed()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 44, in on_completed\r\n    self._on_completed_core()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/autodetachobserver.py\", line 29, in _on_completed_core\r\n    self.observer.on_completed()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 44, in on_completed\r\n    self._on_completed_core()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/anonymousobserver.py\", line 20, in _on_completed_core\r\n    self._completed()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 44, in on_completed\r\n    self._on_completed_core()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/autodetachobserver.py\", line 29, in _on_completed_core\r\n    self.observer.on_completed()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 44, in on_completed\r\n    self._on_completed_core()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/autodetachobserver.py\", line 29, in _on_completed_core\r\n    self.observer.on_completed()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 44, in on_completed\r\n    self._on_completed_core()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/anonymousobserver.py\", line 20, in _on_completed_core\r\n    self._completed()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/concat.py\", line 89, in on_completed\r\n    cancelable.disposable = scheduler.schedule(action)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/concurrency/currentthreadscheduler.py\", line 50, in schedule\r\n    return self.schedule_relative(timedelta(0), action, state)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/concurrency/currentthreadscheduler.py\", line 67, in schedule_relative\r\n    Trampoline.run(queue)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/concurrency/currentthreadscheduler.py\", line 31, in run\r\n    item.invoke()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/concurrency/scheduleditem.py\", line 17, in invoke\r\n    ret = self.scheduler.invoke_action(self.action, self.state)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/concurrency/schedulerbase.py\", line 14, in invoke_action\r\n    ret = action(self, state)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/concat.py\", line 94, in action\r\n    observer.on_completed()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 44, in on_completed\r\n    self._on_completed_core()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/autodetachobserver.py\", line 29, in _on_completed_core\r\n    self.observer.on_completed()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 44, in on_completed\r\n    self._on_completed_core()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/anonymousobserver.py\", line 20, in _on_completed_core\r\n    self._completed()\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/lastordefault.py\", line 19, in on_completed\r\n    observer.on_next(value[0])\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/autodetachobserver.py\", line 16, in _on_next_core\r\n    self.observer.on_next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/anonymousobserver.py\", line 14, in _on_next_core\r\n    self._next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/merge.py\", line 128, in on_next\r\n    observer.on_next(x)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/autodetachobserver.py\", line 16, in _on_next_core\r\n    self.observer.on_next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/anonymousobserver.py\", line 14, in _on_next_core\r\n    self._next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/where.py\", line 42, in on_next\r\n    observer.on_next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/autodetachobserver.py\", line 16, in _on_next_core\r\n    self.observer.on_next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/anonymousobserver.py\", line 14, in _on_next_core\r\n    self._next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/select.py\", line 36, in on_next\r\n    observer.on_next(result)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/autodetachobserver.py\", line 16, in _on_next_core\r\n    self.observer.on_next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/anonymousobserver.py\", line 14, in _on_next_core\r\n    self._next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/where.py\", line 42, in on_next\r\n    observer.on_next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/autodetachobserver.py\", line 16, in _on_next_core\r\n    self.observer.on_next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/observerbase.py\", line 19, in on_next\r\n    self._on_next_core(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/core/anonymousobserver.py\", line 14, in _on_next_core\r\n    self._next(value)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/merge.py\", line 59, in on_next\r\n    subscribe(inner_source)\r\n  File \"/somefolder/scripts/venv/lib/python3.6/site-packages/rx/linq/observable/merge.py\", line 52, in subscribe\r\n    subscription.disposable = xs.subscribe(observer.on_next,\r\nAttributeError: 'dict' object has no attribute 'subscribe'\r\n``` \r\n\r\nMy code is:\r\n\r\n```python\r\ndef form_import_chain(count_query,\r\n                      get_query,\r\n                      produce_events,\r\n                      loop,\r\n                      get_from_db):\r\n    scheduler = AsyncIOScheduler(loop)\r\n    send_them_all = curry(send_to_firehose)(get_firehose_client())\r\n    count_ = get_from_db(query=count_query)[0]['count']\r\n    query_rows = curry(_get_rows_from_db)(get_from_db)(get_query)\r\n    return Observable \\\r\n        .just(count_) \\\r\n        .flat_map(lambda x: arange(0, x, Const.STEP.value)) \\\r\n        .flat_map(query_rows) \\\r\n        .flat_map(produce_events) \\\r\n        .map(encode_event) \\\r\n        .buffer_with_count(Const.BUFFER_SIZE.value) \\\r\n        .map(send_them_all) \\\r\n        .filter(lambda x: x['FailedPutCount'] > 0) \\\r\n        .concat_all() \\\r\n        .subscribe_on(scheduler)\r\n\r\n# .......\r\n\r\nasync def import_all_offers_accepted(loop, get_from_db):\r\n    chain = curry(form_import_chain)(_COUNT_QUERY)(_GET_QUERY)(_produce_events)\r\n    chain(loop)(get_from_db).subscribe(on_finish)\r\n\r\ndef main():\r\n    connection = MySQLdb.connect(**Const.MYSQL_DB.value)\r\n    _exec_sql = partial(exec_sql, connection=connection)\r\n    loop = asyncio.get_event_loop()\r\n    loop.run_until_complete(import_all_offers_accepted(loop, _exec_sql))\r\n    connection.close()\r\n```\r\n\r\nOS: **OSX**\r\nI've tried to make it work with `AsyncIOScheduler` and `TreadPoolScheduler` but result was exactly the same. The weirdest thing is that happens from time to time on lasting import processes. \r\n\r\nMany thanks for your help.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/238", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/238/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/238/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/238", "id": 314761681, "node_id": "MDU6SXNzdWUzMTQ3NjE2ODE=", "number": 238, "title": "RxPy subject broken on blank ubuntu 16.04", "user": {"login": "jasmith79", "id": 7632166, "node_id": "MDQ6VXNlcjc2MzIxNjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/7632166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasmith79", "html_url": "https://github.com/jasmith79", "followers_url": "https://api.github.com/users/jasmith79/followers", "following_url": "https://api.github.com/users/jasmith79/following{/other_user}", "gists_url": "https://api.github.com/users/jasmith79/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasmith79/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasmith79/subscriptions", "organizations_url": "https://api.github.com/users/jasmith79/orgs", "repos_url": "https://api.github.com/users/jasmith79/repos", "events_url": "https://api.github.com/users/jasmith79/events{/privacy}", "received_events_url": "https://api.github.com/users/jasmith79/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-16T18:07:57Z", "updated_at": "2019-04-16T18:46:49Z", "closed_at": "2018-04-16T18:27:22Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "In a fresh install of Ubuntu 16.04 trying to import anything from `rx.subject` (including the entire module) fails with the following:\r\n\r\n> Traceback (most recent call last):\r\n>  File \"<stdin>\", line 1, in <module>\r\n>  File \"/home/myuser/.local/lib/python3.5/site-packages/rx/subject.py\", line 4, in <module>\r\n>    from rx.observable import Observable\r\n>  File \"/home/myuser/.local/lib/python3.5/site-packages/rx/observable.py\", line 187, in <module>\r\n>    import rx.linq.allOperators\r\n>  File \"/home/myuser/.local/lib/python3.5/site-packages/rx/linq/allOperators.py\", line 3, in <module>\r\n>    import rx.linq.bindingOperators\r\n>  File \"/home/myuser/.local/lib/python3.5/site-packages/rx/linq/bindingOperators.py\", line 6, in <module>\r\n>    from rx.subject import AsyncSubject, BehaviorSubject, ReplaySubject, Subject\r\n> ImportError: cannot import name 'AsyncSubject'\r\n\r\nSteps to reproduce:\r\n\r\n1. Install 16.04\r\n2. sudo apt install python3-pip\r\n3. pip3 install rxpython --user\r\n4. Fire up python3 interpeter\r\n5. `import rx.subject`\r\n\r\nAlso happens for `from rx.subject import AsyncSubject` and `from rx.subject import Subject` the latter being copied from the 'Getting Started with RxPy' tutorial.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/236", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/236/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/236/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/236/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/236", "id": 312136506, "node_id": "MDU6SXNzdWUzMTIxMzY1MDY=", "number": 236, "title": "merge() does not serialize on_next() calls", "user": {"login": "vermaport", "id": 1252721, "node_id": "MDQ6VXNlcjEyNTI3MjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1252721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vermaport", "html_url": "https://github.com/vermaport", "followers_url": "https://api.github.com/users/vermaport/followers", "following_url": "https://api.github.com/users/vermaport/following{/other_user}", "gists_url": "https://api.github.com/users/vermaport/gists{/gist_id}", "starred_url": "https://api.github.com/users/vermaport/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vermaport/subscriptions", "organizations_url": "https://api.github.com/users/vermaport/orgs", "repos_url": "https://api.github.com/users/vermaport/repos", "events_url": "https://api.github.com/users/vermaport/events{/privacy}", "received_events_url": "https://api.github.com/users/vermaport/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 32928879, "node_id": "MDU6TGFiZWwzMjkyODg3OQ==", "url": "https://api.github.com/repos/ReactiveX/RxPY/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": {"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dbrattli", "id": 849479, "node_id": "MDQ6VXNlcjg0OTQ3OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/849479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbrattli", "html_url": "https://github.com/dbrattli", "followers_url": "https://api.github.com/users/dbrattli/followers", "following_url": "https://api.github.com/users/dbrattli/following{/other_user}", "gists_url": "https://api.github.com/users/dbrattli/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbrattli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbrattli/subscriptions", "organizations_url": "https://api.github.com/users/dbrattli/orgs", "repos_url": "https://api.github.com/users/dbrattli/repos", "events_url": "https://api.github.com/users/dbrattli/events{/privacy}", "received_events_url": "https://api.github.com/users/dbrattli/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-04-06T22:16:13Z", "updated_at": "2019-06-23T10:01:24Z", "closed_at": "2018-06-23T09:47:52Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Similar to https://github.com/ReactiveX/RxJava/issues/200, it seems like merge() does not serialize emissions if its sources are emitting on different threads. Is there an RxPy equivalent to SynchronizedObserver to work around this?\r\n\r\nI translated the unit test written for this issue, and it fails on RxPy 1.6.1 (latest in PIP).\r\n\r\nhttps://github.com/ReactiveX/RxJava/pull/201/commits/effc08d548518df5a54c916e1b50daadb8bf4228#diff-e28fd5678569ef71dfc9e835c73a5c36R42\r\n\r\n```python\r\nfrom threading import Event, Lock\r\n\r\nfrom rx import Observable\r\nfrom rx.concurrency import EventLoopScheduler\r\nfrom rx.core import ObservableBase\r\n\r\n\r\nclass TestAsynchronousObservable(ObservableBase):\r\n    def __init__(self, scheduler=None):\r\n        super(TestAsynchronousObservable, self).__init__()\r\n        self.scheduler = scheduler or EventLoopScheduler()\r\n        self.on_next_being_sent = Event()\r\n\r\n    def hello(self, scheduler, observer):\r\n        self.on_next_being_sent.set()\r\n        observer.on_next(\"hello\")\r\n        observer.on_completed()\r\n\r\n    def _subscribe_core(self, observer):\r\n        self.scheduler.schedule(self.hello, observer)\r\n\r\n\r\ncounter_lock = Lock()\r\ntotal_counter = 0\r\nconcurrent_counter = 0\r\nunblock = Event()\r\ncompleted = Event()\r\n\r\n\r\ndef on_next(item):\r\n    global counter_lock\r\n    global total_counter\r\n    global concurrent_counter\r\n    global unblock\r\n\r\n    with counter_lock:\r\n        total_counter += 1\r\n        concurrent_counter += 1\r\n\r\n    unblock.wait()\r\n\r\n    concurrent_counter -= 1\r\n\r\n\r\no1 = TestAsynchronousObservable()\r\no2 = TestAsynchronousObservable()\r\nm = Observable.merge(o1, o2).subscribe(on_next, on_completed=completed.set)\r\n\r\n# Wait for both Observables to send.\r\no1.on_next_being_sent.wait()\r\no2.on_next_being_sent.wait()\r\n\r\n# One of the Observables should be blocked.\r\nassert concurrent_counter == 1  # <-- Asserts here since merge() does not serialize the on_next() calls.\r\n\r\n# Release it so it can finish.\r\nunblock.set()\r\n\r\n# Wait for the merge to complete.\r\ncompleted.wait()\r\n\r\nassert total_counter == 2\r\nassert concurrent_counter == 0\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/235", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/235/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/235/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/235", "id": 312124415, "node_id": "MDU6SXNzdWUzMTIxMjQ0MTU=", "number": 235, "title": "merge", "user": {"login": "vermaport", "id": 1252721, "node_id": "MDQ6VXNlcjEyNTI3MjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1252721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vermaport", "html_url": "https://github.com/vermaport", "followers_url": "https://api.github.com/users/vermaport/followers", "following_url": "https://api.github.com/users/vermaport/following{/other_user}", "gists_url": "https://api.github.com/users/vermaport/gists{/gist_id}", "starred_url": "https://api.github.com/users/vermaport/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vermaport/subscriptions", "organizations_url": "https://api.github.com/users/vermaport/orgs", "repos_url": "https://api.github.com/users/vermaport/repos", "events_url": "https://api.github.com/users/vermaport/events{/privacy}", "received_events_url": "https://api.github.com/users/vermaport/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-06T21:27:10Z", "updated_at": "2019-04-07T01:44:14Z", "closed_at": "2018-04-07T00:38:49Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "https://github.com/ReactiveX/RxJava/issues/200", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/234", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/234/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/234/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/234", "id": 309775710, "node_id": "MDU6SXNzdWUzMDk3NzU3MTA=", "number": 234, "title": "Possible bug with emitting method observable through subject", "user": {"login": "malibu66", "id": 1365070, "node_id": "MDQ6VXNlcjEzNjUwNzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1365070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/malibu66", "html_url": "https://github.com/malibu66", "followers_url": "https://api.github.com/users/malibu66/followers", "following_url": "https://api.github.com/users/malibu66/following{/other_user}", "gists_url": "https://api.github.com/users/malibu66/gists{/gist_id}", "starred_url": "https://api.github.com/users/malibu66/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/malibu66/subscriptions", "organizations_url": "https://api.github.com/users/malibu66/orgs", "repos_url": "https://api.github.com/users/malibu66/repos", "events_url": "https://api.github.com/users/malibu66/events{/privacy}", "received_events_url": "https://api.github.com/users/malibu66/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-29T14:24:24Z", "updated_at": "2019-03-29T16:11:42Z", "closed_at": "2018-03-29T15:14:00Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "In the code below I am setting up two 'endpoint' observables, 'catted_source' and 'native_source'.  native_source is an Observable built with Observable class method, and catted_source is two sources catted together.  Each of these sources is .create() with an observable function that emits to observer.\r\n\r\nIf I do the commented subscribe on native_source, all entries are emitted.\r\nIf I do it on catted_source, nothing is emitted\r\nIf I do it on source1 (single-execution function) I see the onCompleted but nothing else\r\nif I do it on source2 (permanently looping function) I see nothing.\r\n\r\nI thought all Observables should behave the same in this case?  I'm sorry if this isn't a bug but I have been searching for three days online and I cannot see anything and I have tried everything I can find.\r\n\r\n```\r\nimport random\r\nimport time\r\nfrom rx import Observable,Observer\r\nfrom rx.subjects import Subject\r\n\r\nclass PrintObserver1(Observer):\r\n\r\n    def on_next(self, value):\r\n        print(\"Received 1 {0}\".format(value))\r\n        #bsubject.on_next(value)\r\n\r\n    def on_completed(self):\r\n        print(\"Done 1!\")\r\n\r\n    def on_error(self, error):\r\n        print(\"Error Occurred: 1 {0}\".format(error))\r\n\r\nclass PrintObserver2(Observer):\r\n\r\n    def on_next(self, value):\r\n        print(\"Received 2 {0}\".format(value))\r\n        #bsubject.on_next(value)\r\n\r\n    def on_completed(self):\r\n        print(\"Done 2!\")\r\n\r\n    def on_error(self, error):\r\n        print(\"Error Occurred: 2 {0}\".format(error))\r\n\r\ndef fake_initialization(observer):\r\n    time.sleep(5)  # It takes some time\r\n    observer.on_next(\"Alpha\")\r\n    observer.on_completed()\r\n\r\ndef fake_subscription(observer):\r\n    iter = 0 # Subscription emits forever\r\n    while True:\r\n        observer.on_next(\"message %02d\"%(iter))\r\n        time.sleep(random.randrange(2,5))\r\n        iter += 1\r\n\r\nsource1 = Observable.create(fake_initialization)\r\nsource2 = Observable.create(fake_subscription)\r\ncatted_source = source1 + source2\r\n\r\nnative_source = Observable.interval(1000)\r\nprint native_source,catted_source\r\n#source = source3\r\nsubject = Subject()\r\n# native_source = works\r\n# catted_source = not works\r\nsubSource = native_source.subscribe(subject)\r\n#####\r\n\r\nsubSubject1 = subject.subscribe(PrintObserver1())\r\nsubSubject2 = subject.subscribe(PrintObserver2())\r\ntime.sleep(30)\r\nsubject.on_completed()\r\nsubSubject1.dispose()\r\nsubSubject2.dispose()\r\n```\r\n\r\nHere is the working output:\r\n```\r\n<rx.core.anonymousobservable.AnonymousObservable object at 0x7f179730c510> <rx.core.anonymousobservable.AnonymousObservable object at 0x7f179730c450>\r\nReceived 1 0\r\nReceived 2 0\r\nReceived 1 1\r\nReceived 2 1\r\nReceived 1 2\r\nReceived 2 2\r\nReceived 1 3\r\nReceived 2 3\r\n... for 30 seconds\r\nDone 1!\r\nDone 2!\r\n```\r\n\r\nFrom catted_output I would expect (cold observable):\r\n```\r\nReceived 1 Alpha\r\nReceived 2 Alpha\r\nReceived 1 message00\r\nReceived 2 message00\r\nReceived 1 message01\r\nReceived 2 message01\r\n... for 30 seconds\r\nDone 1!\r\nDone 2!\r\n```\r\n\r\nFrom source1 I would expect (cold observable):\r\n```\r\nReceived 1 Alpha\r\nReceived 2 Alpha\r\nDone 1!\r\nDone 2!\r\n````\r\n\r\nFrom source2 I would expect (cold observable):\r\n```\r\nReceived 1 message00\r\nReceived 2 message00\r\nReceived 1 message01\r\nReceived 2 message01\r\nReceived 1 message02\r\nReceived 2 message02\r\n... for 30 seconds\r\nDone 1!\r\nDone 2!\r\n```\r\n\r\nPython environment recently installed through pycharm interface (which uses pip install I assume?):\r\n```\r\nRx==1.6.1\r\nargparse==1.2.1\r\npip==9.0.3\r\nsetuptools==39.0.1\r\nwheel==0.30.0\r\nwsgiref==0.1.2\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/231", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/231/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/231/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/231", "id": 304012888, "node_id": "MDU6SXNzdWUzMDQwMTI4ODg=", "number": 231, "title": "Retry with exception handler", "user": {"login": "ettoreleandrotognoli", "id": 4960560, "node_id": "MDQ6VXNlcjQ5NjA1NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4960560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ettoreleandrotognoli", "html_url": "https://github.com/ettoreleandrotognoli", "followers_url": "https://api.github.com/users/ettoreleandrotognoli/followers", "following_url": "https://api.github.com/users/ettoreleandrotognoli/following{/other_user}", "gists_url": "https://api.github.com/users/ettoreleandrotognoli/gists{/gist_id}", "starred_url": "https://api.github.com/users/ettoreleandrotognoli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ettoreleandrotognoli/subscriptions", "organizations_url": "https://api.github.com/users/ettoreleandrotognoli/orgs", "repos_url": "https://api.github.com/users/ettoreleandrotognoli/repos", "events_url": "https://api.github.com/users/ettoreleandrotognoli/events{/privacy}", "received_events_url": "https://api.github.com/users/ettoreleandrotognoli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-09T23:30:28Z", "updated_at": "2020-06-24T18:58:06Z", "closed_at": "2019-05-30T12:23:58Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I think would be useful pass a handler here\r\n\r\nhttps://github.com/ReactiveX/RxPY/blob/6beb2e2cbb108fdf924561f9431eb4aa610c6ad9/rx/linq/observable/retry.py#L6-L22\r\n\r\nhttps://github.com/ReactiveX/RxPY/blob/0e2a8849617e67c618ff6ed62ee674db323c1a36/rx/linq/observable/catch.py#L38\r\n\r\n### Example:\r\n\r\n``` python\r\n@extensionmethod(Observable) \r\ndef retry(self, retry_count=None,handler=None):   \r\n  return Observable.catch_exception(Enumerable.repeat(self, retry_count),handler) \r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/230", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/230/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/230/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/230", "id": 303257278, "node_id": "MDU6SXNzdWUzMDMyNTcyNzg=", "number": 230, "title": "Is there a list of other libraries using RxPY ? e.g. State Machine using RxPY", "user": {"login": "kavink", "id": 1228810, "node_id": "MDQ6VXNlcjEyMjg4MTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1228810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kavink", "html_url": "https://github.com/kavink", "followers_url": "https://api.github.com/users/kavink/followers", "following_url": "https://api.github.com/users/kavink/following{/other_user}", "gists_url": "https://api.github.com/users/kavink/gists{/gist_id}", "starred_url": "https://api.github.com/users/kavink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kavink/subscriptions", "organizations_url": "https://api.github.com/users/kavink/orgs", "repos_url": "https://api.github.com/users/kavink/repos", "events_url": "https://api.github.com/users/kavink/events{/privacy}", "received_events_url": "https://api.github.com/users/kavink/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-07T21:00:04Z", "updated_at": "2019-10-08T21:04:23Z", "closed_at": "2019-10-08T21:04:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am interested in building a user configurable State machine which does some i.e. Something like https://mobx.js.org but on server side for Python.\r\n\r\nWondering if there is already some work done or I need to build a configuration example for user on top RxPY, i.e. allow user to configure what to do on_next or on_error or on_complete for a DAG (Directed acyclic graph).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ReactiveX/RxPY/issues/229", "repository_url": "https://api.github.com/repos/ReactiveX/RxPY", "labels_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/229/comments", "events_url": "https://api.github.com/repos/ReactiveX/RxPY/issues/229/events", "html_url": "https://github.com/ReactiveX/RxPY/issues/229", "id": 303203003, "node_id": "MDU6SXNzdWUzMDMyMDMwMDM=", "number": 229, "title": "IndexError: pop from empty list - race condition or thread safety issue identified in 2016 still there", "user": {"login": "wolfch", "id": 555451, "node_id": "MDQ6VXNlcjU1NTQ1MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/555451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wolfch", "html_url": "https://github.com/wolfch", "followers_url": "https://api.github.com/users/wolfch/followers", "following_url": "https://api.github.com/users/wolfch/following{/other_user}", "gists_url": "https://api.github.com/users/wolfch/gists{/gist_id}", "starred_url": "https://api.github.com/users/wolfch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wolfch/subscriptions", "organizations_url": "https://api.github.com/users/wolfch/orgs", "repos_url": "https://api.github.com/users/wolfch/repos", "events_url": "https://api.github.com/users/wolfch/events{/privacy}", "received_events_url": "https://api.github.com/users/wolfch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-07T18:06:58Z", "updated_at": "2019-03-07T18:13:53Z", "closed_at": "2018-03-07T18:11:08Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I can still recreate the issue identified in #100  - is there any further progress on this?\r\n\r\nThis code sometimes completes normally, but sometimes it blows up with `IndexError: pop from empty list`:\r\n\r\n```\r\nimport concurrent.futures\r\nfrom rx import Observable\r\n\r\ndef custom_print_buffer(items):\r\n    if len(items) > 0 :\r\n        print (len(items))\r\n\r\ndef custom_print(item):\r\n    print (item)\r\n\r\ndef return_item(item):\r\n    return item\r\n\r\nx = Observable.from_(range(500))\r\nwith concurrent.futures.ThreadPoolExecutor(5) as executor:\r\n     x.flat_map(lambda item : executor.submit(return_item, item)).buffer_with_count(100).subscribe(custom_print_buffer)\r\nprint(\"Done executing\")\r\n```", "performed_via_github_app": null, "score": 1.0}]}