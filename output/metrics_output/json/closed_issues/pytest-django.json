{"total_count": 271, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/862", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/862/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/862/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/862/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/862", "id": 680417762, "node_id": "MDU6SXNzdWU2ODA0MTc3NjI=", "number": 862, "title": "`django_db_setup ` fixture broken with pytest-xdist 2.0.0", "user": {"login": "jshields", "id": 3101751, "node_id": "MDQ6VXNlcjMxMDE3NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3101751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jshields", "html_url": "https://github.com/jshields", "followers_url": "https://api.github.com/users/jshields/followers", "following_url": "https://api.github.com/users/jshields/following{/other_user}", "gists_url": "https://api.github.com/users/jshields/gists{/gist_id}", "starred_url": "https://api.github.com/users/jshields/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jshields/subscriptions", "organizations_url": "https://api.github.com/users/jshields/orgs", "repos_url": "https://api.github.com/users/jshields/repos", "events_url": "https://api.github.com/users/jshields/events{/privacy}", "received_events_url": "https://api.github.com/users/jshields/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-17T17:54:30Z", "updated_at": "2020-08-17T18:09:34Z", "closed_at": "2020-08-17T18:08:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Upon upgrading pytest-xdist to 2.0.0 (and pytest-cov to 2.10.1 for compatibility), pytest-django fails to setup the test database.\r\n\r\nHighlights of the traceback (some purgatory where `test_circle` database can't be created because it exists and can't be dropped because it doesn't exist):\r\n```\r\n>       _mysql.connection.query(self, query)\r\nE       django.db.utils.ProgrammingError: (1007, \"Can't create database 'test_circle'; database exists\")\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/connections.py:259: ProgrammingError\r\n```\r\n\r\n```\r\n>       _mysql.connection.query(self, query)\r\nE       django.db.utils.OperationalError: (1008, \"Can't drop database 'test_circle'; database doesn't exist\")\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/connections.py:259: OperationalError\r\n```\r\n\r\n```\r\n>       request.getfixturevalue(\"django_db_setup\")\r\n\r\nvenv/lib/python3.6/site-packages/pytest_django/plugin.py:534:\r\n```\r\n\r\n```\r\n                    except Exception as e:\r\n                        self.log('Got an error recreating the test database: %s' % e)\r\n>                       sys.exit(2)\r\nE                       SystemExit: 2\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/base/creation.py:200: SystemExit\r\n```\r\n\r\nFull traceback:\r\n```\r\nfailed on setup with \"SystemExit: 2\"\r\nself = <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>\r\nsql = 'CREATE DATABASE `test_circle` ', params = None\r\nignored_wrapper_args = (False, {'connection': <django.db.backends.mysql.base.DatabaseWrapper object at 0x7f773eb7c630>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>})\r\n\r\n    def _execute(self, sql, params, *ignored_wrapper_args):\r\n        self.db.validate_no_broken_transaction()\r\n        with self.db.wrap_database_errors:\r\n            if params is None:\r\n                # params default might be backend specific.\r\n>               return self.cursor.execute(sql)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/utils.py:82: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.mysql.base.CursorWrapper object at 0x7f773eb67e80>\r\nquery = 'CREATE DATABASE `test_circle` ', args = None\r\n\r\n    def execute(self, query, args=None):\r\n        try:\r\n            # args is None means no string interpolation\r\n>           return self.cursor.execute(query, args)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/mysql/base.py:73: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <MySQLdb.cursors.Cursor object at 0x7f773eb67e10>\r\nquery = b'CREATE DATABASE `test_circle` ', args = None\r\n\r\n    def execute(self, query, args=None):\r\n        \"\"\"Execute a query.\r\n    \r\n        query -- string, query to execute on server\r\n        args -- optional sequence or mapping, parameters to use with query.\r\n    \r\n        Note: If args is a sequence, then %s must be used as the\r\n        parameter placeholder in the query. If a mapping is used,\r\n        %(key)s must be used as the placeholder.\r\n    \r\n        Returns integer represents rows affected, if any\r\n        \"\"\"\r\n        while self.nextset():\r\n            pass\r\n        db = self._get_db()\r\n    \r\n        if isinstance(query, str):\r\n            query = query.encode(db.encoding)\r\n    \r\n        if args is not None:\r\n            if isinstance(args, dict):\r\n                nargs = {}\r\n                for key, item in args.items():\r\n                    if isinstance(key, str):\r\n                        key = key.encode(db.encoding)\r\n                    nargs[key] = db.literal(item)\r\n                args = nargs\r\n            else:\r\n                args = tuple(map(db.literal, args))\r\n            try:\r\n                query = query % args\r\n            except TypeError as m:\r\n                raise ProgrammingError(str(m))\r\n    \r\n        assert isinstance(query, (bytes, bytearray))\r\n>       res = self._query(query)\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/cursors.py:206: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <MySQLdb.cursors.Cursor object at 0x7f773eb67e10>\r\nq = b'CREATE DATABASE `test_circle` '\r\n\r\n    def _query(self, q):\r\n        db = self._get_db()\r\n        self._result = None\r\n>       db.query(q)\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/cursors.py:319: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <_mysql.connection closed at 0x55f66195d6d8>\r\nquery = b'CREATE DATABASE `test_circle` '\r\n\r\n    def query(self, query):\r\n        # Since _mysql releases GIL while querying, we need immutable buffer.\r\n        if isinstance(query, bytearray):\r\n            query = bytes(query)\r\n>       _mysql.connection.query(self, query)\r\nE       MySQLdb._exceptions.ProgrammingError: (1007, \"Can't create database 'test_circle'; database exists\")\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/connections.py:259: ProgrammingError\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nself = <django.db.backends.mysql.creation.DatabaseCreation object at 0x7f76defa6ba8>\r\nverbosity = 0, autoclobber = True, keepdb = False\r\n\r\n    def _create_test_db(self, verbosity, autoclobber, keepdb=False):\r\n        \"\"\"\r\n        Internal implementation - create the test db tables.\r\n        \"\"\"\r\n        test_database_name = self._get_test_db_name()\r\n        test_db_params = {\r\n            'dbname': self.connection.ops.quote_name(test_database_name),\r\n            'suffix': self.sql_table_creation_suffix(),\r\n        }\r\n        # Create the test database and connect to it.\r\n        with self._nodb_cursor() as cursor:\r\n            try:\r\n>               self._execute_create_test_db(cursor, test_db_params, keepdb)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/base/creation.py:178: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.mysql.creation.DatabaseCreation object at 0x7f76defa6ba8>\r\ncursor = <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>\r\nparameters = {'dbname': '`test_circle`', 'suffix': ''}, keepdb = False\r\n\r\n    def _execute_create_test_db(self, cursor, parameters, keepdb=False):\r\n        try:\r\n>           super()._execute_create_test_db(cursor, parameters, keepdb)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/mysql/creation.py:22: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.mysql.creation.DatabaseCreation object at 0x7f76defa6ba8>\r\ncursor = <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>\r\nparameters = {'dbname': '`test_circle`', 'suffix': ''}, keepdb = False\r\n\r\n    def _execute_create_test_db(self, cursor, parameters, keepdb=False):\r\n>       cursor.execute('CREATE DATABASE %(dbname)s %(suffix)s' % parameters)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/base/creation.py:164: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>\r\nsql = 'CREATE DATABASE `test_circle` ', params = None\r\n\r\n    def execute(self, sql, params=None):\r\n>       return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/utils.py:66: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>\r\nsql = 'CREATE DATABASE `test_circle` ', params = None, many = False\r\nexecutor = <bound method CursorWrapper._execute of <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>>\r\n\r\n    def _execute_with_wrappers(self, sql, params, many, executor):\r\n        context = {'connection': self.db, 'cursor': self}\r\n        for wrapper in reversed(self.db.execute_wrappers):\r\n            executor = functools.partial(wrapper, executor)\r\n>       return executor(sql, params, many, context)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/utils.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>\r\nsql = 'CREATE DATABASE `test_circle` ', params = None\r\nignored_wrapper_args = (False, {'connection': <django.db.backends.mysql.base.DatabaseWrapper object at 0x7f773eb7c630>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>})\r\n\r\n    def _execute(self, sql, params, *ignored_wrapper_args):\r\n        self.db.validate_no_broken_transaction()\r\n        with self.db.wrap_database_errors:\r\n            if params is None:\r\n                # params default might be backend specific.\r\n>               return self.cursor.execute(sql)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/utils.py:82: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.utils.DatabaseErrorWrapper object at 0x7f773eb7c780>\r\nexc_type = <class 'MySQLdb._exceptions.ProgrammingError'>\r\nexc_value = ProgrammingError(1007, \"Can't create database 'test_circle'; database exists\")\r\ntraceback = <traceback object at 0x7f773ea14648>\r\n\r\n    def __exit__(self, exc_type, exc_value, traceback):\r\n        if exc_type is None:\r\n            return\r\n        for dj_exc_type in (\r\n                DataError,\r\n                OperationalError,\r\n                IntegrityError,\r\n                InternalError,\r\n                ProgrammingError,\r\n                NotSupportedError,\r\n                DatabaseError,\r\n                InterfaceError,\r\n                Error,\r\n        ):\r\n            db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\r\n            if issubclass(exc_type, db_exc_type):\r\n                dj_exc_value = dj_exc_type(*exc_value.args)\r\n                # Only set the 'errors_occurred' flag for errors that may make\r\n                # the connection unusable.\r\n                if dj_exc_type not in (DataError, IntegrityError):\r\n                    self.wrapper.errors_occurred = True\r\n>               raise dj_exc_value.with_traceback(traceback) from exc_value\r\n\r\nvenv/lib/python3.6/site-packages/django/db/utils.py:90: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>\r\nsql = 'CREATE DATABASE `test_circle` ', params = None\r\nignored_wrapper_args = (False, {'connection': <django.db.backends.mysql.base.DatabaseWrapper object at 0x7f773eb7c630>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>})\r\n\r\n    def _execute(self, sql, params, *ignored_wrapper_args):\r\n        self.db.validate_no_broken_transaction()\r\n        with self.db.wrap_database_errors:\r\n            if params is None:\r\n                # params default might be backend specific.\r\n>               return self.cursor.execute(sql)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/utils.py:82: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.mysql.base.CursorWrapper object at 0x7f773eb67e80>\r\nquery = 'CREATE DATABASE `test_circle` ', args = None\r\n\r\n    def execute(self, query, args=None):\r\n        try:\r\n            # args is None means no string interpolation\r\n>           return self.cursor.execute(query, args)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/mysql/base.py:73: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <MySQLdb.cursors.Cursor object at 0x7f773eb67e10>\r\nquery = b'CREATE DATABASE `test_circle` ', args = None\r\n\r\n    def execute(self, query, args=None):\r\n        \"\"\"Execute a query.\r\n    \r\n        query -- string, query to execute on server\r\n        args -- optional sequence or mapping, parameters to use with query.\r\n    \r\n        Note: If args is a sequence, then %s must be used as the\r\n        parameter placeholder in the query. If a mapping is used,\r\n        %(key)s must be used as the placeholder.\r\n    \r\n        Returns integer represents rows affected, if any\r\n        \"\"\"\r\n        while self.nextset():\r\n            pass\r\n        db = self._get_db()\r\n    \r\n        if isinstance(query, str):\r\n            query = query.encode(db.encoding)\r\n    \r\n        if args is not None:\r\n            if isinstance(args, dict):\r\n                nargs = {}\r\n                for key, item in args.items():\r\n                    if isinstance(key, str):\r\n                        key = key.encode(db.encoding)\r\n                    nargs[key] = db.literal(item)\r\n                args = nargs\r\n            else:\r\n                args = tuple(map(db.literal, args))\r\n            try:\r\n                query = query % args\r\n            except TypeError as m:\r\n                raise ProgrammingError(str(m))\r\n    \r\n        assert isinstance(query, (bytes, bytearray))\r\n>       res = self._query(query)\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/cursors.py:206: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <MySQLdb.cursors.Cursor object at 0x7f773eb67e10>\r\nq = b'CREATE DATABASE `test_circle` '\r\n\r\n    def _query(self, q):\r\n        db = self._get_db()\r\n        self._result = None\r\n>       db.query(q)\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/cursors.py:319: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <_mysql.connection closed at 0x55f66195d6d8>\r\nquery = b'CREATE DATABASE `test_circle` '\r\n\r\n    def query(self, query):\r\n        # Since _mysql releases GIL while querying, we need immutable buffer.\r\n        if isinstance(query, bytearray):\r\n            query = bytes(query)\r\n>       _mysql.connection.query(self, query)\r\nE       django.db.utils.ProgrammingError: (1007, \"Can't create database 'test_circle'; database exists\")\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/connections.py:259: ProgrammingError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nself = <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>\r\nsql = 'DROP DATABASE `test_circle`', params = None\r\nignored_wrapper_args = (False, {'connection': <django.db.backends.mysql.base.DatabaseWrapper object at 0x7f773eb7c630>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>})\r\n\r\n    def _execute(self, sql, params, *ignored_wrapper_args):\r\n        self.db.validate_no_broken_transaction()\r\n        with self.db.wrap_database_errors:\r\n            if params is None:\r\n                # params default might be backend specific.\r\n>               return self.cursor.execute(sql)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/utils.py:82: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.mysql.base.CursorWrapper object at 0x7f773eb67e80>\r\nquery = 'DROP DATABASE `test_circle`', args = None\r\n\r\n    def execute(self, query, args=None):\r\n        try:\r\n            # args is None means no string interpolation\r\n>           return self.cursor.execute(query, args)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/mysql/base.py:73: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <MySQLdb.cursors.Cursor object at 0x7f773eb67e10>\r\nquery = b'DROP DATABASE `test_circle`', args = None\r\n\r\n    def execute(self, query, args=None):\r\n        \"\"\"Execute a query.\r\n    \r\n        query -- string, query to execute on server\r\n        args -- optional sequence or mapping, parameters to use with query.\r\n    \r\n        Note: If args is a sequence, then %s must be used as the\r\n        parameter placeholder in the query. If a mapping is used,\r\n        %(key)s must be used as the placeholder.\r\n    \r\n        Returns integer represents rows affected, if any\r\n        \"\"\"\r\n        while self.nextset():\r\n            pass\r\n        db = self._get_db()\r\n    \r\n        if isinstance(query, str):\r\n            query = query.encode(db.encoding)\r\n    \r\n        if args is not None:\r\n            if isinstance(args, dict):\r\n                nargs = {}\r\n                for key, item in args.items():\r\n                    if isinstance(key, str):\r\n                        key = key.encode(db.encoding)\r\n                    nargs[key] = db.literal(item)\r\n                args = nargs\r\n            else:\r\n                args = tuple(map(db.literal, args))\r\n            try:\r\n                query = query % args\r\n            except TypeError as m:\r\n                raise ProgrammingError(str(m))\r\n    \r\n        assert isinstance(query, (bytes, bytearray))\r\n>       res = self._query(query)\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/cursors.py:206: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <MySQLdb.cursors.Cursor object at 0x7f773eb67e10>\r\nq = b'DROP DATABASE `test_circle`'\r\n\r\n    def _query(self, q):\r\n        db = self._get_db()\r\n        self._result = None\r\n>       db.query(q)\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/cursors.py:319: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <_mysql.connection closed at 0x55f66195d6d8>\r\nquery = b'DROP DATABASE `test_circle`'\r\n\r\n    def query(self, query):\r\n        # Since _mysql releases GIL while querying, we need immutable buffer.\r\n        if isinstance(query, bytearray):\r\n            query = bytes(query)\r\n>       _mysql.connection.query(self, query)\r\nE       MySQLdb._exceptions.OperationalError: (1008, \"Can't drop database 'test_circle'; database doesn't exist\")\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/connections.py:259: OperationalError\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nself = <django.db.backends.mysql.creation.DatabaseCreation object at 0x7f76defa6ba8>\r\nverbosity = 0, autoclobber = True, keepdb = False\r\n\r\n    def _create_test_db(self, verbosity, autoclobber, keepdb=False):\r\n        \"\"\"\r\n        Internal implementation - create the test db tables.\r\n        \"\"\"\r\n        test_database_name = self._get_test_db_name()\r\n        test_db_params = {\r\n            'dbname': self.connection.ops.quote_name(test_database_name),\r\n            'suffix': self.sql_table_creation_suffix(),\r\n        }\r\n        # Create the test database and connect to it.\r\n        with self._nodb_cursor() as cursor:\r\n            try:\r\n                self._execute_create_test_db(cursor, test_db_params, keepdb)\r\n            except Exception as e:\r\n                # if we want to keep the db, then no need to do any of the below,\r\n                # just return and skip it all.\r\n                if keepdb:\r\n                    return test_database_name\r\n    \r\n                self.log('Got an error creating the test database: %s' % e)\r\n                if not autoclobber:\r\n                    confirm = input(\r\n                        \"Type 'yes' if you would like to try deleting the test \"\r\n                        \"database '%s', or 'no' to cancel: \" % test_database_name)\r\n                if autoclobber or confirm == 'yes':\r\n                    try:\r\n                        if verbosity >= 1:\r\n                            self.log('Destroying old test database for alias %s...' % (\r\n                                self._get_database_display_str(verbosity, test_database_name),\r\n                            ))\r\n>                       cursor.execute('DROP DATABASE %(dbname)s' % test_db_params)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/base/creation.py:196: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>\r\nsql = 'DROP DATABASE `test_circle`', params = None\r\n\r\n    def execute(self, sql, params=None):\r\n>       return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/utils.py:66: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>\r\nsql = 'DROP DATABASE `test_circle`', params = None, many = False\r\nexecutor = <bound method CursorWrapper._execute of <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>>\r\n\r\n    def _execute_with_wrappers(self, sql, params, many, executor):\r\n        context = {'connection': self.db, 'cursor': self}\r\n        for wrapper in reversed(self.db.execute_wrappers):\r\n            executor = functools.partial(wrapper, executor)\r\n>       return executor(sql, params, many, context)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/utils.py:75: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>\r\nsql = 'DROP DATABASE `test_circle`', params = None\r\nignored_wrapper_args = (False, {'connection': <django.db.backends.mysql.base.DatabaseWrapper object at 0x7f773eb7c630>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>})\r\n\r\n    def _execute(self, sql, params, *ignored_wrapper_args):\r\n        self.db.validate_no_broken_transaction()\r\n        with self.db.wrap_database_errors:\r\n            if params is None:\r\n                # params default might be backend specific.\r\n>               return self.cursor.execute(sql)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/utils.py:82: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.utils.DatabaseErrorWrapper object at 0x7f773eb7c780>\r\nexc_type = <class 'MySQLdb._exceptions.OperationalError'>\r\nexc_value = OperationalError(1008, \"Can't drop database 'test_circle'; database doesn't exist\")\r\ntraceback = <traceback object at 0x7f773ea14288>\r\n\r\n    def __exit__(self, exc_type, exc_value, traceback):\r\n        if exc_type is None:\r\n            return\r\n        for dj_exc_type in (\r\n                DataError,\r\n                OperationalError,\r\n                IntegrityError,\r\n                InternalError,\r\n                ProgrammingError,\r\n                NotSupportedError,\r\n                DatabaseError,\r\n                InterfaceError,\r\n                Error,\r\n        ):\r\n            db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\r\n            if issubclass(exc_type, db_exc_type):\r\n                dj_exc_value = dj_exc_type(*exc_value.args)\r\n                # Only set the 'errors_occurred' flag for errors that may make\r\n                # the connection unusable.\r\n                if dj_exc_type not in (DataError, IntegrityError):\r\n                    self.wrapper.errors_occurred = True\r\n>               raise dj_exc_value.with_traceback(traceback) from exc_value\r\n\r\nvenv/lib/python3.6/site-packages/django/db/utils.py:90: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>\r\nsql = 'DROP DATABASE `test_circle`', params = None\r\nignored_wrapper_args = (False, {'connection': <django.db.backends.mysql.base.DatabaseWrapper object at 0x7f773eb7c630>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7f773eb67eb8>})\r\n\r\n    def _execute(self, sql, params, *ignored_wrapper_args):\r\n        self.db.validate_no_broken_transaction()\r\n        with self.db.wrap_database_errors:\r\n            if params is None:\r\n                # params default might be backend specific.\r\n>               return self.cursor.execute(sql)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/utils.py:82: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.mysql.base.CursorWrapper object at 0x7f773eb67e80>\r\nquery = 'DROP DATABASE `test_circle`', args = None\r\n\r\n    def execute(self, query, args=None):\r\n        try:\r\n            # args is None means no string interpolation\r\n>           return self.cursor.execute(query, args)\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/mysql/base.py:73: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <MySQLdb.cursors.Cursor object at 0x7f773eb67e10>\r\nquery = b'DROP DATABASE `test_circle`', args = None\r\n\r\n    def execute(self, query, args=None):\r\n        \"\"\"Execute a query.\r\n    \r\n        query -- string, query to execute on server\r\n        args -- optional sequence or mapping, parameters to use with query.\r\n    \r\n        Note: If args is a sequence, then %s must be used as the\r\n        parameter placeholder in the query. If a mapping is used,\r\n        %(key)s must be used as the placeholder.\r\n    \r\n        Returns integer represents rows affected, if any\r\n        \"\"\"\r\n        while self.nextset():\r\n            pass\r\n        db = self._get_db()\r\n    \r\n        if isinstance(query, str):\r\n            query = query.encode(db.encoding)\r\n    \r\n        if args is not None:\r\n            if isinstance(args, dict):\r\n                nargs = {}\r\n                for key, item in args.items():\r\n                    if isinstance(key, str):\r\n                        key = key.encode(db.encoding)\r\n                    nargs[key] = db.literal(item)\r\n                args = nargs\r\n            else:\r\n                args = tuple(map(db.literal, args))\r\n            try:\r\n                query = query % args\r\n            except TypeError as m:\r\n                raise ProgrammingError(str(m))\r\n    \r\n        assert isinstance(query, (bytes, bytearray))\r\n>       res = self._query(query)\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/cursors.py:206: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <MySQLdb.cursors.Cursor object at 0x7f773eb67e10>\r\nq = b'DROP DATABASE `test_circle`'\r\n\r\n    def _query(self, q):\r\n        db = self._get_db()\r\n        self._result = None\r\n>       db.query(q)\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/cursors.py:319: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <_mysql.connection closed at 0x55f66195d6d8>\r\nquery = b'DROP DATABASE `test_circle`'\r\n\r\n    def query(self, query):\r\n        # Since _mysql releases GIL while querying, we need immutable buffer.\r\n        if isinstance(query, bytearray):\r\n            query = bytes(query)\r\n>       _mysql.connection.query(self, query)\r\nE       django.db.utils.OperationalError: (1008, \"Can't drop database 'test_circle'; database doesn't exist\")\r\n\r\nvenv/lib/python3.6/site-packages/MySQLdb/connections.py:259: OperationalError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nrequest = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_non_place_attributes>>\r\ndjango_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f7745582128>\r\n\r\n    @pytest.fixture(autouse=True, scope=\"class\")\r\n    def _django_setup_unittest(request, django_db_blocker):\r\n        \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\r\n        if not django_settings_is_configured() or not is_django_unittest(request):\r\n            yield\r\n            return\r\n    \r\n        # Fix/patch pytest.\r\n        # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\r\n        # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\r\n        from _pytest.monkeypatch import MonkeyPatch\r\n    \r\n        def non_debugging_runtest(self):\r\n            self._testcase(result=self)\r\n    \r\n        mp_debug = MonkeyPatch()\r\n        mp_debug.setattr(\"_pytest.unittest.TestCaseFunction.runtest\", non_debugging_runtest)\r\n    \r\n>       request.getfixturevalue(\"django_db_setup\")\r\n\r\nvenv/lib/python3.6/site-packages/pytest_django/plugin.py:534: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nvenv/lib/python3.6/site-packages/pytest_django/fixtures.py:108: in django_db_setup\r\n    **setup_databases_args\r\nvenv/lib/python3.6/site-packages/django/test/utils.py:174: in setup_databases\r\n    serialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\r\nvenv/lib/python3.6/site-packages/django/db/backends/base/creation.py:55: in create_test_db\r\n    self._create_test_db(verbosity, autoclobber, keepdb)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.mysql.creation.DatabaseCreation object at 0x7f76defa6ba8>\r\nverbosity = 0, autoclobber = True, keepdb = False\r\n\r\n    def _create_test_db(self, verbosity, autoclobber, keepdb=False):\r\n        \"\"\"\r\n        Internal implementation - create the test db tables.\r\n        \"\"\"\r\n        test_database_name = self._get_test_db_name()\r\n        test_db_params = {\r\n            'dbname': self.connection.ops.quote_name(test_database_name),\r\n            'suffix': self.sql_table_creation_suffix(),\r\n        }\r\n        # Create the test database and connect to it.\r\n        with self._nodb_cursor() as cursor:\r\n            try:\r\n                self._execute_create_test_db(cursor, test_db_params, keepdb)\r\n            except Exception as e:\r\n                # if we want to keep the db, then no need to do any of the below,\r\n                # just return and skip it all.\r\n                if keepdb:\r\n                    return test_database_name\r\n    \r\n                self.log('Got an error creating the test database: %s' % e)\r\n                if not autoclobber:\r\n                    confirm = input(\r\n                        \"Type 'yes' if you would like to try deleting the test \"\r\n                        \"database '%s', or 'no' to cancel: \" % test_database_name)\r\n                if autoclobber or confirm == 'yes':\r\n                    try:\r\n                        if verbosity >= 1:\r\n                            self.log('Destroying old test database for alias %s...' % (\r\n                                self._get_database_display_str(verbosity, test_database_name),\r\n                            ))\r\n                        cursor.execute('DROP DATABASE %(dbname)s' % test_db_params)\r\n                        self._execute_create_test_db(cursor, test_db_params, keepdb)\r\n                    except Exception as e:\r\n                        self.log('Got an error recreating the test database: %s' % e)\r\n>                       sys.exit(2)\r\nE                       SystemExit: 2\r\n\r\nvenv/lib/python3.6/site-packages/django/db/backends/base/creation.py:200: SystemExit\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/860", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/860/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/860/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/860/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/860", "id": 679748226, "node_id": "MDU6SXNzdWU2Nzk3NDgyMjY=", "number": 860, "title": "duplicate key value violates unique constraint \"pg_extension_name_index\" after update pytest-xdist to 2.0.0", "user": {"login": "MuslimBeibytuly", "id": 24839111, "node_id": "MDQ6VXNlcjI0ODM5MTEx", "avatar_url": "https://avatars2.githubusercontent.com/u/24839111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MuslimBeibytuly", "html_url": "https://github.com/MuslimBeibytuly", "followers_url": "https://api.github.com/users/MuslimBeibytuly/followers", "following_url": "https://api.github.com/users/MuslimBeibytuly/following{/other_user}", "gists_url": "https://api.github.com/users/MuslimBeibytuly/gists{/gist_id}", "starred_url": "https://api.github.com/users/MuslimBeibytuly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MuslimBeibytuly/subscriptions", "organizations_url": "https://api.github.com/users/MuslimBeibytuly/orgs", "repos_url": "https://api.github.com/users/MuslimBeibytuly/repos", "events_url": "https://api.github.com/users/MuslimBeibytuly/events{/privacy}", "received_events_url": "https://api.github.com/users/MuslimBeibytuly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-16T12:43:06Z", "updated_at": "2020-08-16T20:37:19Z", "closed_at": "2020-08-16T20:37:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "pytest==6.0.1\r\npytest-asyncio==0.14.0\r\npytest-cov==2.10.1\r\npytest-benchmark==3.2.3\r\npytest-django==3.9.0\r\npytest-flake8==1.0.6\r\npytest-mock==3.2.0\r\npytest-xdist==2.0.0\r\npytest-bdd==3.4.0\r\npython:3.8.5-alpine3.12\r\nDjango 3.1\r\n\r\nUpgraded pytest-xdist from 1.34.0 to 2.0.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/858", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/858/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/858/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/858/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/858", "id": 679556447, "node_id": "MDU6SXNzdWU2Nzk1NTY0NDc=", "number": 858, "title": "Django setup_databases call signature change post  3.1 causes test setup to fail", "user": {"login": "hugorodgerbrown", "id": 200944, "node_id": "MDQ6VXNlcjIwMDk0NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/200944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hugorodgerbrown", "html_url": "https://github.com/hugorodgerbrown", "followers_url": "https://api.github.com/users/hugorodgerbrown/followers", "following_url": "https://api.github.com/users/hugorodgerbrown/following{/other_user}", "gists_url": "https://api.github.com/users/hugorodgerbrown/gists{/gist_id}", "starred_url": "https://api.github.com/users/hugorodgerbrown/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hugorodgerbrown/subscriptions", "organizations_url": "https://api.github.com/users/hugorodgerbrown/orgs", "repos_url": "https://api.github.com/users/hugorodgerbrown/repos", "events_url": "https://api.github.com/users/hugorodgerbrown/events{/privacy}", "received_events_url": "https://api.github.com/users/hugorodgerbrown/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-15T12:29:25Z", "updated_at": "2020-08-16T20:33:00Z", "closed_at": "2020-08-16T20:33:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the Django dev branch the `django.test.utils.setup_databases` function signature has changed, and this breaks the setup of tests:\r\n\r\nThe cause of this is a change in the method signature:\r\n\r\n```diff\r\n- def setup_databases(verbosity, interactive, keepdb=False, debug_sql=False, parallel=0, aliases=None, **kwargs):\r\n+ def setup_databases(verbosity, interactive, *, time_keeper, keepdb=False, debug_sql=False, parallel=0, aliases=None):\r\n```\r\n\r\n### Steps to reproduce:\r\n\r\nTake any existing, working Django test suite, and run against latest dev commit - e.g. the `djangomaster` in the following `tox.ini`:\r\n\r\n```ini\r\n[testenv]\r\ndeps =\r\n    pytest\r\n    pytest-django\r\n    django30: Django>=3.0,<3.1\r\n    django31: Django>=3.1,<3.2\r\n    djangomaster: https://github.com/django/django/archive/master.tar.gz\r\n```\r\n\r\n### Expected outcome\r\n\r\nTests will run against master as they do for 3.0, 3.1 etc.\r\n\r\n### Actual outcome\r\n\r\nAll tests fail, at database setup:\r\n\r\n```\r\n________________________________________________ ERROR at setup of SettingsFunctionTests.test_get_settings ________________________________________________\r\n\r\nrequest = <SubRequest '_django_setup_unittest' for <TestCaseFunction test_auto_sync>>\r\ndjango_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x106a02a30>\r\n\r\n    @pytest.fixture(autouse=True, scope=\"class\")\r\n    def _django_setup_unittest(request, django_db_blocker):\r\n        \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\r\n        if not django_settings_is_configured() or not is_django_unittest(request):\r\n            yield\r\n            return\r\n\r\n        # Fix/patch pytest.\r\n        # Before pytest 5.4: https://github.com/pytest-dev/pytest/issues/5991\r\n        # After pytest 5.4: https://github.com/pytest-dev/pytest-django/issues/824\r\n        from _pytest.monkeypatch import MonkeyPatch\r\n\r\n        def non_debugging_runtest(self):\r\n            self._testcase(result=self)\r\n\r\n        mp_debug = MonkeyPatch()\r\n        mp_debug.setattr(\"_pytest.unittest.TestCaseFunction.runtest\", non_debugging_runtest)\r\n\r\n>       request.getfixturevalue(\"django_db_setup\")\r\n\r\n.tox/py38-djangomaster/lib/python3.8/site-packages/pytest_django/plugin.py:534:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nrequest = <SubRequest 'django_db_setup' for <TestCaseFunction test_ready>>, django_test_environment = None\r\ndjango_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x106a02a30>, django_db_use_migrations = True, django_db_keepdb = False\r\ndjango_db_createdb = False, django_db_modify_db_settings = None\r\n\r\n    @pytest.fixture(scope=\"session\")\r\n    def django_db_setup(\r\n        request,\r\n        django_test_environment,\r\n        django_db_blocker,\r\n        django_db_use_migrations,\r\n        django_db_keepdb,\r\n        django_db_createdb,\r\n        django_db_modify_db_settings,\r\n    ):\r\n        \"\"\"Top level fixture to ensure test databases are available\"\"\"\r\n        from .compat import setup_databases, teardown_databases\r\n\r\n        setup_databases_args = {}\r\n\r\n        if not django_db_use_migrations:\r\n            _disable_native_migrations()\r\n\r\n        if django_db_keepdb and not django_db_createdb:\r\n            setup_databases_args[\"keepdb\"] = True\r\n\r\n        with django_db_blocker.unblock():\r\n>           db_cfg = setup_databases(\r\n                verbosity=request.config.option.verbose,\r\n                interactive=False,\r\n                **setup_databases_args\r\n            )\r\nE           TypeError: setup_databases() missing 1 required keyword-only argument: 'time_keeper'\r\n\r\n.tox/py38-djangomaster/lib/python3.8/site-packages/pytest_django/fixtures.py:105: TypeError\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/854", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/854/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/854/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/854/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/854", "id": 666963647, "node_id": "MDU6SXNzdWU2NjY5NjM2NDc=", "number": 854, "title": "Trouble in docker's services connection", "user": {"login": "Bulbashful", "id": 16623073, "node_id": "MDQ6VXNlcjE2NjIzMDcz", "avatar_url": "https://avatars2.githubusercontent.com/u/16623073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bulbashful", "html_url": "https://github.com/Bulbashful", "followers_url": "https://api.github.com/users/Bulbashful/followers", "following_url": "https://api.github.com/users/Bulbashful/following{/other_user}", "gists_url": "https://api.github.com/users/Bulbashful/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bulbashful/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bulbashful/subscriptions", "organizations_url": "https://api.github.com/users/Bulbashful/orgs", "repos_url": "https://api.github.com/users/Bulbashful/repos", "events_url": "https://api.github.com/users/Bulbashful/events{/privacy}", "received_events_url": "https://api.github.com/users/Bulbashful/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-28T10:29:28Z", "updated_at": "2020-08-08T20:30:15Z", "closed_at": "2020-08-08T20:30:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to run simple test function via pytest.\r\n`import redis`\r\n`r = redis.Redis(host='redis', port=6379, db=0)`\r\n`r.set('foo', 'bar')`\r\nAs result i catch the following error:\r\n`redis.exceptions.ConnectionError: Error -3 connecting to redis:6379. Lookup timed out`\r\nBut if run this chunk of code via django's TestCase all works fine ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/847", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/847/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/847/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/847/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/847", "id": 629878341, "node_id": "MDU6SXNzdWU2Mjk4NzgzNDE=", "number": 847, "title": "Test code that gets its own database connection", "user": {"login": "alex-yobota", "id": 55692845, "node_id": "MDQ6VXNlcjU1NjkyODQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/55692845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-yobota", "html_url": "https://github.com/alex-yobota", "followers_url": "https://api.github.com/users/alex-yobota/followers", "following_url": "https://api.github.com/users/alex-yobota/following{/other_user}", "gists_url": "https://api.github.com/users/alex-yobota/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-yobota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-yobota/subscriptions", "organizations_url": "https://api.github.com/users/alex-yobota/orgs", "repos_url": "https://api.github.com/users/alex-yobota/repos", "events_url": "https://api.github.com/users/alex-yobota/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-yobota/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-03T10:25:22Z", "updated_at": "2020-06-11T10:38:37Z", "closed_at": "2020-06-11T10:38:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some classes that obtain their own connection from django's connection manager, in order to talk to a database that does not allow the creation of schemata. The code looks like this:\r\n\r\n```\r\nfrom django.db import connections\r\nfrom psycopg2 import extensions\r\n\r\nclass Foo:\r\n    def __init__(self, *args, **kwargs):\r\n        conn_wrapper = connections[\"name\"]\r\n    if not conn_wrapper.connection:\r\n        conn_wrapper.connect()\r\n    conn = conn_wrapper.connection\r\n    conn.set_isolation_level(extensions.ISOLATION_LEVEL_AUTOCOMMIT)\r\n    self.conn = conn\r\n```\r\nThis code works, but when I try to run tests that call it, pytest complains that it requires the `@pytest.mark.django_db` decorator. When I add this decorator to the test class, however, it says the same thing. Am I missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/842", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/842/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/842/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/842/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/842", "id": 619685170, "node_id": "MDU6SXNzdWU2MTk2ODUxNzA=", "number": 842, "title": "Inconsistent results for a test when running in-suite", "user": {"login": "SHxKM", "id": 6573474, "node_id": "MDQ6VXNlcjY1NzM0NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6573474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SHxKM", "html_url": "https://github.com/SHxKM", "followers_url": "https://api.github.com/users/SHxKM/followers", "following_url": "https://api.github.com/users/SHxKM/following{/other_user}", "gists_url": "https://api.github.com/users/SHxKM/gists{/gist_id}", "starred_url": "https://api.github.com/users/SHxKM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SHxKM/subscriptions", "organizations_url": "https://api.github.com/users/SHxKM/orgs", "repos_url": "https://api.github.com/users/SHxKM/repos", "events_url": "https://api.github.com/users/SHxKM/events{/privacy}", "received_events_url": "https://api.github.com/users/SHxKM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-17T12:03:11Z", "updated_at": "2020-06-07T02:52:10Z", "closed_at": "2020-05-18T13:00:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nPython 3.6.8\r\npytest==5.4.2\r\npytest-django==3.9.0\r\npytest-forked==1.0.2\r\npytest-socket==0.3.3\r\npytest-xdist==1.29.0\r\n```\r\n\r\nIt seems that one particular test outputs different results based on if I'm running the whole suite or not.\r\n\r\nWhen running the test like so:\r\n\r\n```\r\npytest -k \"test_name_of_test_func\"\r\n```\r\n\r\nThe test passes. But the test fails if I run the whole suite:\r\n\r\n```\r\npytest -vvv\r\n```\r\n\r\nI've been debugging this for the past few hours to no avail. I've removed `--reuse-db --no-migrations` and brought them back, no dice. The behaviour under test has been manually verified, and the test should definitely pass.\r\n\r\nSome details:\r\n\r\nThe test uses indirect parametrization like so:\r\n\r\n```\r\n@pytest.mark.parametrize(\r\n    \"profile, expected\",\r\n    [(\"test_some\", False), (\"test_some_other\", True)],\r\n    indirect=[\"profile\"],\r\n)\r\ndef test_name_of_test_func(profile, client, expected)\r\n``` \r\n\r\nBoth `test_some` and `test_some_other` are fixtures defined in `fixtures.py`:\r\n\r\n```\r\n@pytest.fixture\r\ndef profile(request):\r\n    return request.getfixturevalue(request.param)\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef test_some(db):\r\n    # ...\r\n@pytest.fixture(scope=\"function\")\r\ndef test_some_other(db):\r\n    # ...\r\n```\r\n\r\nAny suggestions?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/840", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/840/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/840/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/840/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/840", "id": 615308739, "node_id": "MDU6SXNzdWU2MTUzMDg3Mzk=", "number": 840, "title": "Multiple application, multiple database - not able to access any DB other than default db", "user": {"login": "praveenelan", "id": 64993140, "node_id": "MDQ6VXNlcjY0OTkzMTQw", "avatar_url": "https://avatars2.githubusercontent.com/u/64993140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/praveenelan", "html_url": "https://github.com/praveenelan", "followers_url": "https://api.github.com/users/praveenelan/followers", "following_url": "https://api.github.com/users/praveenelan/following{/other_user}", "gists_url": "https://api.github.com/users/praveenelan/gists{/gist_id}", "starred_url": "https://api.github.com/users/praveenelan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/praveenelan/subscriptions", "organizations_url": "https://api.github.com/users/praveenelan/orgs", "repos_url": "https://api.github.com/users/praveenelan/repos", "events_url": "https://api.github.com/users/praveenelan/events{/privacy}", "received_events_url": "https://api.github.com/users/praveenelan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-07T23:06:12Z", "updated_at": "2020-05-10T03:39:32Z", "closed_at": "2020-05-10T03:39:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Problem\r\n\r\nI have a Django(1.8) project running 2 applications: App1, App2. Both of the applications run with their own databases: app1db and app2db, sharing the defaultdb for users and groups. I am trying to integrate pytest-django as part of the unit testing. This is where I am hitting with problem as Pytest do not support multiple databases.\r\n\r\nMy use case is I would be needing the unit tests only on app1 and I am pretty much sure I won't be needing it on app2. And I can mock my users and groups objects from defaultdb for this unit tests and I won't be needing access to defaultdb. But the problem is I always see the unit tests access the defaultdb and I don't see a way of making the app1db accessible from unit test cases. When I try to access any object form app1db, I get the following error:\r\n\r\nE ProgrammingError: relation \"app1_table\" does not exist E LINE 1: INSERT INTO \"app1_table\" (\"field1\", \"field2\", \"... E ^\r\n\r\nDatabase Settings\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\r\n        'USER': 'postgres',\r\n        'NAME': 'defaultdb',\r\n        'PASSWORD': 'pass',\r\n        'HOST': localhost,\r\n        },\r\n    'app1': {\r\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\r\n        'NAME': 'app1db',\r\n        'USER': 'postgres',\r\n        'PASSWORD': 'pass',\r\n        'HOST': localhost,\r\n    },\r\n    \"app2\": {\r\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\r\n        'NAME': 'app2db',\r\n        'USER': 'postgres',\r\n        'PASSWORD': 'pass',\r\n        'HOST': localhost,\r\n    },\r\nHow do I make my pytest just look for app1db ignoring all other DBs?\r\n\r\nSO : https://stackoverflow.com/questions/61621853/pytest-django-multiple-application-multiple-database-not-able-to-access-any", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/838", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/838/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/838/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/838/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/838", "id": 609585659, "node_id": "MDU6SXNzdWU2MDk1ODU2NTk=", "number": 838, "title": "Multiple Database Support (again, but with new databases options from Django 2.2)", "user": {"login": "Andrew-Chen-Wang", "id": 60190294, "node_id": "MDQ6VXNlcjYwMTkwMjk0", "avatar_url": "https://avatars0.githubusercontent.com/u/60190294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andrew-Chen-Wang", "html_url": "https://github.com/Andrew-Chen-Wang", "followers_url": "https://api.github.com/users/Andrew-Chen-Wang/followers", "following_url": "https://api.github.com/users/Andrew-Chen-Wang/following{/other_user}", "gists_url": "https://api.github.com/users/Andrew-Chen-Wang/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andrew-Chen-Wang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andrew-Chen-Wang/subscriptions", "organizations_url": "https://api.github.com/users/Andrew-Chen-Wang/orgs", "repos_url": "https://api.github.com/users/Andrew-Chen-Wang/repos", "events_url": "https://api.github.com/users/Andrew-Chen-Wang/events{/privacy}", "received_events_url": "https://api.github.com/users/Andrew-Chen-Wang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-30T05:13:13Z", "updated_at": "2020-04-30T16:02:59Z", "closed_at": "2020-04-30T16:02:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've taken a look at all the issues and #431 before. I'm somewhat new to `pytest-django` since I mostly used regular unit tests. I noticed the age of that issue, though, and according to https://docs.djangoproject.com/en/3.0/topics/testing/tools/#django.test.TransactionTestCase.databases, it seems like it should be possible now? But how? It just seems confusing how or where I'd set the `databases` value... \r\n\r\nThe error I get when running with a PostGIS and a PostgreSQL database (yes, using two different engines) is this:\r\n```\r\n\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 ERROR at setup of test_update \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\r\n3373\r\n3374request = <SubRequest '_django_db_marker' for <Function test_update>>\r\n3375\r\n3376    @pytest.fixture(autouse=True)\r\n3377    def _django_db_marker(request):\r\n3378        \"\"\"Implement the django_db marker, internal to pytest-django.\r\n3379    \r\n3380        This will dynamically request the ``db``, ``transactional_db`` or\r\n3381        ``django_db_reset_sequences`` fixtures as required by the django_db marker.\r\n3382        \"\"\"\r\n3383        marker = request.node.get_closest_marker(\"django_db\")\r\n3384        if marker:\r\n3385            transaction, reset_sequences = validate_django_db(marker)\r\n3386            if reset_sequences:\r\n3387                request.getfixturevalue(\"django_db_reset_sequences\")\r\n3388            elif transaction:\r\n3389                request.getfixturevalue(\"transactional_db\")\r\n3390            else:\r\n3391>               request.getfixturevalue(\"db\")\r\n3392\r\n3393/usr/local/lib/python3.7/site-packages/pytest_django/plugin.py:499: \r\n3394_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n3395/usr/local/lib/python3.7/site-packages/pytest_django/fixtures.py:108: in django_db_setup\r\n3396    **setup_databases_args\r\n3397/usr/local/lib/python3.7/site-packages/django/test/utils.py:173: in setup_databases\r\n3398    serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\r\n3399/usr/local/lib/python3.7/site-packages/django/db/backends/base/creation.py:72: in create_test_db\r\n3400    run_syncdb=True,\r\n3401/usr/local/lib/python3.7/site-packages/django/core/management/__init__.py:168: in call_command\r\n3402    return command.execute(*args, **defaults)\r\n3403/usr/local/lib/python3.7/site-packages/django/core/management/base.py:369: in execute\r\n3404    output = self.handle(*args, **options)\r\n3405/usr/local/lib/python3.7/site-packages/django/core/management/base.py:83: in wrapped\r\n3406    res = handle_func(*args, **kwargs)\r\n3407/usr/local/lib/python3.7/site-packages/django/core/management/commands/migrate.py:233: in handle\r\n3408    fake_initial=fake_initial,\r\n3409/usr/local/lib/python3.7/site-packages/django/db/migrations/executor.py:117: in migrate\r\n3410    state = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)\r\n3411/usr/local/lib/python3.7/site-packages/django/db/migrations/executor.py:147: in _migrate_all_forwards\r\n3412    state = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)\r\n3413/usr/local/lib/python3.7/site-packages/django/db/migrations/executor.py:245: in apply_migration\r\n3414    state = migration.apply(state, schema_editor)\r\n3415/usr/local/lib/python3.7/site-packages/django/db/migrations/migration.py:124: in apply\r\n3416    operation.database_forwards(self.app_label, schema_editor, old_state, project_state)\r\n3417/usr/local/lib/python3.7/site-packages/django/db/migrations/operations/models.py:92: in database_forwards\r\n3418    schema_editor.create_model(model)\r\n3419/usr/local/lib/python3.7/site-packages/django/db/backends/base/schema.py:322: in create_model\r\n3420    sql, params = self.table_sql(model)\r\n3421/usr/local/lib/python3.7/site-packages/django/db/backends/base/schema.py:159: in table_sql\r\n3422    definition, extra_params = self.column_sql(model, field)\r\n3423/usr/local/lib/python3.7/site-packages/django/db/backends/base/schema.py:212: in column_sql\r\n3424    db_params = field.db_parameters(connection=self.connection)\r\n3425/usr/local/lib/python3.7/site-packages/django/db/models/fields/__init__.py:715: in db_parameters\r\n3426    type_string = self.db_type(connection)\r\n3427_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n3428\r\n3429self = <django.contrib.gis.db.models.fields.MultiPolygonField: polygon>\r\n3430connection = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f008e3938d0>\r\n3431\r\n3432    def db_type(self, connection):\r\n3433>       return connection.ops.geo_db_type(self)\r\n3434E       AttributeError: 'DatabaseOperations' object has no attribute 'geo_db_type'\r\n3435\r\n3436/usr/local/lib/python3.7/site-packages/django/contrib/gis/db/models/fields.py:105: AttributeError\r\n3437                 \r\n```\r\nThere was also some discussion in Django Dev of this being a syncdb issue for a geo and a non-geo database, but I'm having no trouble writing the code and testing it via the Django views... for now, of course.\r\n\r\nI will admit, I haven't tried testing this with normal Django TestCase.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/836", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/836/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/836/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/836/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/836", "id": 603904760, "node_id": "MDU6SXNzdWU2MDM5MDQ3NjA=", "number": 836, "title": "\ud83d\udd19 Enable `serialized_rollback` in TestCases", "user": {"login": "coiax", "id": 609465, "node_id": "MDQ6VXNlcjYwOTQ2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/609465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coiax", "html_url": "https://github.com/coiax", "followers_url": "https://api.github.com/users/coiax/followers", "following_url": "https://api.github.com/users/coiax/following{/other_user}", "gists_url": "https://api.github.com/users/coiax/gists{/gist_id}", "starred_url": "https://api.github.com/users/coiax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coiax/subscriptions", "organizations_url": "https://api.github.com/users/coiax/orgs", "repos_url": "https://api.github.com/users/coiax/repos", "events_url": "https://api.github.com/users/coiax/events{/privacy}", "received_events_url": "https://api.github.com/users/coiax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-21T10:56:20Z", "updated_at": "2020-05-07T14:28:54Z", "closed_at": "2020-05-07T14:28:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://docs.djangoproject.com/en/2.2/topics/testing/overview/#rollback-emulation\r\n\r\nWhen using the `transactional_db` or `live_server` fixtures, during cleanup, Django will truncate the tables.\r\nIf you have data migrations that provide initial data, that initial data will be wiped as well.\r\n\r\nBy using the `serialized_rollback` attribute in TestCases, it should enable you to load the initial data at the start of every test, but using `pytest-django` means you can't edit the TestCase classes directly.\r\n\r\n---\r\n\r\nI propose a mark, `django_serialized_rollback` (?), which if present, will enable the `serialized_rollback` attribute, thus enabling this behavior.\r\n\r\nWanted to open an issue first to check that was the right way of going about this, before actually writing the tests and code for it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/835", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/835/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/835/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/835/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/835", "id": 601183425, "node_id": "MDU6SXNzdWU2MDExODM0MjU=", "number": 835, "title": "Pytest-django , factory_boy InterfaceError: connection already closed", "user": {"login": "PyB1l", "id": 15942239, "node_id": "MDQ6VXNlcjE1OTQyMjM5", "avatar_url": "https://avatars0.githubusercontent.com/u/15942239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PyB1l", "html_url": "https://github.com/PyB1l", "followers_url": "https://api.github.com/users/PyB1l/followers", "following_url": "https://api.github.com/users/PyB1l/following{/other_user}", "gists_url": "https://api.github.com/users/PyB1l/gists{/gist_id}", "starred_url": "https://api.github.com/users/PyB1l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PyB1l/subscriptions", "organizations_url": "https://api.github.com/users/PyB1l/orgs", "repos_url": "https://api.github.com/users/PyB1l/repos", "events_url": "https://api.github.com/users/PyB1l/events{/privacy}", "received_events_url": "https://api.github.com/users/PyB1l/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-16T15:44:37Z", "updated_at": "2020-04-17T13:08:13Z", "closed_at": "2020-04-17T13:07:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Failed tests occur when running multiple tests that use @django_db or / and @django_db(transaction=True) complaining that connection is already closed.\r\n\r\n```\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f082a459a90>\r\nname = None\r\n\r\n    @async_unsafe\r\n    def create_cursor(self, name=None):\r\n        if name:\r\n            # In autocommit mode, the cursor will be used outside of a\r\n            # transaction, hence use a holdable cursor.\r\n            cursor = self.connection.cursor(name, scrollable=False, withhold=self.connection.autocommit)\r\n        else:\r\n>           cursor = self.connection.cursor()\r\nE           django.db.utils.InterfaceError: connection already closed\r\n```\r\n\r\n\r\nOn the other sode,running the single test that failed alone, works as expected. Affected version are:\r\n\r\nPython                     3.7\r\nDjango                     3.0\r\npytest                       5.4.1     \r\npytest-cov                2.8.1     \r\npytest-django           3.9.0     \r\npytest-factoryboy     2.0.3     \r\npytest-forked           1.1.3   \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/827", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/827/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/827/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/827/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/827", "id": 583824653, "node_id": "MDU6SXNzdWU1ODM4MjQ2NTM=", "number": 827, "title": "Unexpected test order when mixing pytest / unittest tests and transactional tests", "user": {"login": "pmourlanne", "id": 3375050, "node_id": "MDQ6VXNlcjMzNzUwNTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3375050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmourlanne", "html_url": "https://github.com/pmourlanne", "followers_url": "https://api.github.com/users/pmourlanne/followers", "following_url": "https://api.github.com/users/pmourlanne/following{/other_user}", "gists_url": "https://api.github.com/users/pmourlanne/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmourlanne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmourlanne/subscriptions", "organizations_url": "https://api.github.com/users/pmourlanne/orgs", "repos_url": "https://api.github.com/users/pmourlanne/repos", "events_url": "https://api.github.com/users/pmourlanne/events{/privacy}", "received_events_url": "https://api.github.com/users/pmourlanne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-18T15:46:20Z", "updated_at": "2020-03-20T22:20:59Z", "closed_at": "2020-03-20T22:20:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Let's say I have the following tests:\r\n```python\r\nimport pytest\r\nfrom django.test import TestCase, TransactionTestCase\r\n\r\n@pytest.mark.django_db()\r\ndef test_function_with_db():\r\n    ...\r\n\r\n@pytest.mark.django_db(transaction=True)\r\ndef test_function_with_transactional_db():\r\n    ...\r\n\r\nclass MyTestCase(TestCase):\r\n    def test_method(self):\r\n        ...\r\n\r\nclass MyTransactionTestCase(TransactionTestCase):\r\n    def test_method(self):\r\n        ...\r\n```\r\n\r\nI expect transactional tests, here `test_function_with_transactional_db` and `MyTransactionTestCase.test_method` to run last.\r\n\r\nRunning pytest yields:\r\n```bash\r\n$ pytest -v\r\n\r\nprototype/test_prototype.py::test_function_with_db PASSED\r\nprototype/test_prototype.py::test_function_with_transactional_db PASSED\r\nprototype/test_prototype.py::MyTestCase::test_method PASSED\r\nprototype/test_prototype.py::MyTransactionTestCase::test_method PASSED\r\n```\r\n\r\nI tried fixing this by adding a `pytest_collection_modifyitems` in my project but my custom ordering runs *before* pytest-django's ordering. So pytest-django gets the last word, and in this case it's not what I want :>\r\n\r\nI think this can be fixed by improving on what's being done in `pytest_collection_modifyitems`, I'll try something out and hopefully open a PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/824", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/824/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/824/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/824/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/824", "id": 580745791, "node_id": "MDU6SXNzdWU1ODA3NDU3OTE=", "number": 824, "title": "pytest 5.4 skips Django's teardown (causing e.g. \"connection already closed\" errors)", "user": {"login": "Fak3", "id": 991641, "node_id": "MDQ6VXNlcjk5MTY0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/991641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fak3", "html_url": "https://github.com/Fak3", "followers_url": "https://api.github.com/users/Fak3/followers", "following_url": "https://api.github.com/users/Fak3/following{/other_user}", "gists_url": "https://api.github.com/users/Fak3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fak3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fak3/subscriptions", "organizations_url": "https://api.github.com/users/Fak3/orgs", "repos_url": "https://api.github.com/users/Fak3/repos", "events_url": "https://api.github.com/users/Fak3/events{/privacy}", "received_events_url": "https://api.github.com/users/Fak3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2020-03-13T17:33:18Z", "updated_at": "2020-05-15T21:39:53Z", "closed_at": "2020-03-31T11:12:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "pytest-django==3.5.1\r\ndjango versions tested: 2.2.11 and 3.0.4\r\n\r\nWhen one test fails, all tests which use database launched after this test will fail with traceback:\r\n```\r\ntest/apiv2/put_inputevent__test.py:34: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/model_mommy/mommy.py:54: in make\r\n    return mommy.make(_save_kwargs=_save_kwargs, **attrs)\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/model_mommy/mommy.py:228: in make\r\n    return self._make(commit=True, commit_related=True, _save_kwargs=_save_kwargs, **attrs)\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/model_mommy/mommy.py:265: in _make\r\n    instance = self.instance(self.model_attrs, _commit=commit, _save_kwargs=_save_kwargs)\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/model_mommy/mommy.py:289: in instance\r\n    instance.save(**_save_kwargs)\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/django/db/models/base.py:741: in save\r\n    force_update=force_update, update_fields=update_fields)\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/django/db/models/base.py:779: in save_base\r\n    force_update, using, update_fields,\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/django/db/models/base.py:851: in _save_table\r\n    forced_update)\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/django/db/models/base.py:900: in _do_update\r\n    return filtered._update(values) > 0\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/django/db/models/query.py:760: in _update\r\n    return query.get_compiler(self.db).execute_sql(CURSOR)\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/django/db/models/sql/compiler.py:1469: in execute_sql\r\n    cursor = super().execute_sql(result_type)\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/django/db/models/sql/compiler.py:1138: in execute_sql\r\n    cursor = self.connection.cursor()\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/django/db/backends/base/base.py:256: in cursor\r\n    return self._cursor()\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\r\n    return self._prepare_cursor(self.create_cursor(name))\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/django/db/utils.py:89: in __exit__\r\n    raise dj_exc_value.with_traceback(traceback) from exc_value\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/django/db/backends/base/base.py:235: in _cursor\r\n    return self._prepare_cursor(self.create_cursor(name))\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7fe8150ed208>, name = None\r\n\r\n    def create_cursor(self, name=None):\r\n        if name:\r\n            # In autocommit mode, the cursor will be used outside of a\r\n            # transaction, hence use a holdable cursor.\r\n            cursor = self.connection.cursor(name, scrollable=False, withhold=self.connection.autocommit)\r\n        else:\r\n>           cursor = self.connection.cursor()\r\nE           django.db.utils.InterfaceError: connection already closed\r\n\r\n/home/u1/.virtualenvs/npserver/lib/python3.7/site-packages/django/db/backends/postgresql/base.py:223: InterfaceError\r\n\r\n```\r\n\r\nDowngrading to pytest==5.3.5 fixes the issue.\r\n\r\nNot yet sure if this is pytest issue or pytest-django.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/819", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/819/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/819/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/819/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/819", "id": 571993153, "node_id": "MDU6SXNzdWU1NzE5OTMxNTM=", "number": 819, "title": "Test re-ordering breaks Pytest's --failed-first and --stepwise options", "user": {"login": "callahad", "id": 24193, "node_id": "MDQ6VXNlcjI0MTkz", "avatar_url": "https://avatars2.githubusercontent.com/u/24193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/callahad", "html_url": "https://github.com/callahad", "followers_url": "https://api.github.com/users/callahad/followers", "following_url": "https://api.github.com/users/callahad/following{/other_user}", "gists_url": "https://api.github.com/users/callahad/gists{/gist_id}", "starred_url": "https://api.github.com/users/callahad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/callahad/subscriptions", "organizations_url": "https://api.github.com/users/callahad/orgs", "repos_url": "https://api.github.com/users/callahad/repos", "events_url": "https://api.github.com/users/callahad/events{/privacy}", "received_events_url": "https://api.github.com/users/callahad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-27T11:01:17Z", "updated_at": "2020-02-28T03:21:12Z", "closed_at": "2020-02-28T03:21:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The test re-ordering introduced in response to #214 seems to execute after pytest's own `--failed-first`, `--new-first`, `--stepwise`, etc. ordering options, breaking them.\r\n\r\nWe ran across this in mdn/kuma#6531, where even with `--failed-first` pytest was running dozens of known good tests before executing the failed tests.\r\n\r\nRemoving the `pytest_collection_modifyitems` function or decorating it with `@pytest.hookimpl(tryfirst=True)` seems to resolve this, though I'm not familiar enough with pytest to know if that's an appropriate solution, or if there's something we should be doing on our end instead.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/816", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/816/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/816/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/816/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/816", "id": 567621768, "node_id": "MDU6SXNzdWU1Njc2MjE3Njg=", "number": 816, "title": "Difference logs outputs", "user": {"login": "Quron", "id": 26869885, "node_id": "MDQ6VXNlcjI2ODY5ODg1", "avatar_url": "https://avatars3.githubusercontent.com/u/26869885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Quron", "html_url": "https://github.com/Quron", "followers_url": "https://api.github.com/users/Quron/followers", "following_url": "https://api.github.com/users/Quron/following{/other_user}", "gists_url": "https://api.github.com/users/Quron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Quron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Quron/subscriptions", "organizations_url": "https://api.github.com/users/Quron/orgs", "repos_url": "https://api.github.com/users/Quron/repos", "events_url": "https://api.github.com/users/Quron/events{/privacy}", "received_events_url": "https://api.github.com/users/Quron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-19T14:48:29Z", "updated_at": "2020-02-19T18:27:36Z", "closed_at": "2020-02-19T16:35:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nplatform linux -- Python 3.7.5, pytest-5.3.2, py-1.8.1, pluggy-0.13.1\r\nDjango settings: settings.tests_selenium (from command line option)\r\nrootdir: /home/amiroshnichenko/tests/selenium, inifile: pytest.ini\r\nplugins: allure-pytest-2.8.6, celery-4.3.0, flaky-3.6.1, django-3.7.0\r\n```\r\n```\r\n# pytest.ini\r\n[pytest]\r\nlog_cli = true\r\nlog_level = INFO\r\nlog_format = %(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\r\n```\r\n\r\nI run selenium test via django like that\r\n\r\n```bash\r\npytest --alluredir=selenium/allure-results --ds=settings.tests_selenium tests/selenium --host=localhost --port=6285\r\n```\r\nAnd if elements not found i get this exceptions\r\n\r\n```\r\nurllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='127.0.0.1', port=52212): Read timed out. (read timeout=<object object at 0x7fbc15eb45f0>)\r\n```\r\n\r\nTrace:\r\n```\r\n../lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:564: in find_element_by_class_name\r\n    return self.find_element(by=By.CLASS_NAME, value=name)\r\n../lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:978: in find_element\r\n    'value': value})['value']\r\n../lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:319: in execute\r\n    response = self.command_executor.execute(driver_command, params)\r\n../lib/python3.7/site-packages/selenium/webdriver/remote/remote_connection.py:374: in execute\r\n    return self._request(command_info[0], url, body=data)\r\n../lib/python3.7/site-packages/selenium/webdriver/remote/remote_connection.py:397: in _request\r\n    resp = self._conn.request(method, url, body=body, headers=headers)\r\n../lib/python3.7/site-packages/urllib3/request.py:70: in request\r\n    **urlopen_kw)\r\n../lib/python3.7/site-packages/urllib3/request.py:148: in request_encode_body\r\n    return self.urlopen(method, url, **extra_kw)\r\n../lib/python3.7/site-packages/urllib3/poolmanager.py:321: in urlopen\r\n    response = conn.urlopen(method, u.request_uri, **kw)\r\n../lib/python3.7/site-packages/urllib3/connectionpool.py:639: in urlopen\r\n    _stacktrace=sys.exc_info()[2])\r\n../lib/python3.7/site-packages/urllib3/util/retry.py:357: in increment\r\n    raise six.reraise(type(error), error, _stacktrace)\r\n../lib/python3.7/site-packages/urllib3/packages/six.py:686: in reraise\r\n    raise value\r\n../lib/python3.7/site-packages/urllib3/connectionpool.py:601: in urlopen\r\n    chunked=chunked)\r\n../lib/python3.7/site-packages/urllib3/connectionpool.py:389: in _make_request\r\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\r\n```\r\n\r\nIf i start test without django like that\r\n\r\n```bash\r\npytest --alluredir=selenium/allure-results tests/selenium --host=localhost --port=6285\r\n```\r\nI get normal exception log\r\n\r\n```\r\nselenium.common.exceptions.NoSuchElementException: no such element: Unable to locate element: {\"method\":\"class name\",\"selector\":\".no_such_selector\"}\r\n```\r\nTrace:\r\n```\r\n..lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:564: in find_element_by_class_name\r\n    return self.find_element(by=By.CLASS_NAME, value=name)\r\n..lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:978: in find_element\r\n    'value': value})['value']\r\n..lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\r\n    self.error_handler.check_response(response)\r\n```\r\n\r\nI have no idea what is that's going on, why is log output is different.\r\nIn django settings i set `LOGGING = {}`  and `LOGGING_CONFIG = None`  is not help.\r\nMaybe someone had a similar problem?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/815", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/815/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/815/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/815/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/815", "id": 560713084, "node_id": "MDU6SXNzdWU1NjA3MTMwODQ=", "number": 815, "title": "Incorrectly reports errors that occur in migration files.", "user": {"login": "Steffan-Ennis", "id": 16796843, "node_id": "MDQ6VXNlcjE2Nzk2ODQz", "avatar_url": "https://avatars0.githubusercontent.com/u/16796843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Steffan-Ennis", "html_url": "https://github.com/Steffan-Ennis", "followers_url": "https://api.github.com/users/Steffan-Ennis/followers", "following_url": "https://api.github.com/users/Steffan-Ennis/following{/other_user}", "gists_url": "https://api.github.com/users/Steffan-Ennis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Steffan-Ennis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Steffan-Ennis/subscriptions", "organizations_url": "https://api.github.com/users/Steffan-Ennis/orgs", "repos_url": "https://api.github.com/users/Steffan-Ennis/repos", "events_url": "https://api.github.com/users/Steffan-Ennis/events{/privacy}", "received_events_url": "https://api.github.com/users/Steffan-Ennis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-02-06T00:45:18Z", "updated_at": "2020-02-06T04:19:46Z", "closed_at": "2020-02-06T02:43:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "An exception is thrown in a RunPython function in a migration file\r\n\r\nWithout revealing too much it was an Index out of range exception\r\n<img width=\"876\" alt=\"Screen Shot 2020-02-06 at 11 06 48 am\" src=\"https://user-images.githubusercontent.com/16796843/73896217-2b006680-48d2-11ea-80bd-599d8c7cfa55.png\">\r\n\r\n\r\n**Expected Behaviour** \r\nThat exception should be reported and it's traceback\r\n\r\n**Actual Behaviour**\r\nThe following Error and traceback is reported\r\n\r\n```INTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/main.py\", line 191, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/main.py\", line 235, in _main\r\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/manager.py\", line 87, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/main.py\", line 256, in pytest_runtestloop\r\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/manager.py\", line 87, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/runner.py\", line 80, in pytest_runtest_protocol\r\nINTERNALERROR>     runtestprotocol(item, nextitem=nextitem)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/runner.py\", line 89, in runtestprotocol\r\nINTERNALERROR>     rep = call_and_report(item, \"setup\", log)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/runner.py\", line 178, in call_and_report\r\nINTERNALERROR>     report = hook.pytest_runtest_makereport(item=item, call=call)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/manager.py\", line 87, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/callers.py\", line 203, in _multicall\r\nINTERNALERROR>     gen.send(outcome)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/skipping.py\", line 123, in pytest_runtest_makereport\r\nINTERNALERROR>     rep = outcome.get_result()\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/runner.py\", line 252, in pytest_runtest_makereport\r\nINTERNALERROR>     return TestReport.from_item_and_call(item, call)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/reports.py\", line 282, in from_item_and_call\r\nINTERNALERROR>     excinfo, style=item.config.getoption(\"tbstyle\", \"auto\")\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/nodes.py\", line 299, in _repr_failure_py\r\nINTERNALERROR>     truncate_locals=truncate_locals,\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/_code/code.py\", line 597, in getrepr\r\nINTERNALERROR>     return fmt.repr_excinfo(self)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/_code/code.py\", line 829, in repr_excinfo\r\nINTERNALERROR>     reprtraceback = self.repr_traceback(excinfo)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/_code/code.py\", line 777, in repr_traceback\r\nINTERNALERROR>     reprentry = self.repr_traceback_entry(entry, einfo)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/_code/code.py\", line 736, in repr_traceback_entry\r\nINTERNALERROR>     reprargs = self.repr_args(entry) if not short else None\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/_code/code.py\", line 655, in repr_args\r\nINTERNALERROR>     args.append((argname, saferepr(argvalue)))\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/_io/saferepr.py\", line 67, in saferepr\r\nINTERNALERROR>     return SafeRepr(maxsize).repr(obj)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/_io/saferepr.py\", line 36, in repr\r\nINTERNALERROR>     s = super().repr(x)\r\nINTERNALERROR>   File \"****/lib/python3.6/reprlib.py\", line 55, in repr\r\nINTERNALERROR>     return self.repr1(x, self.maxlevel)\r\nINTERNALERROR>   File \"****/lib/python3.6/reprlib.py\", line 65, in repr1\r\nINTERNALERROR>     return self.repr_instance(x, level)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/_io/saferepr.py\", line 43, in repr_instance\r\nINTERNALERROR>     s = repr(x)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/django/db/models/query.py\", line 250, in __repr__\r\nINTERNALERROR>     data = list(self[:REPR_OUTPUT_SIZE + 1])\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/django/db/models/query.py\", line 274, in __iter__\r\nINTERNALERROR>     self._fetch_all()\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/django/db/models/query.py\", line 1242, in _fetch_all\r\nINTERNALERROR>     self._result_cache = list(self._iterable_class(self))\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/django/db/models/query.py\", line 55, in __iter__\r\nINTERNALERROR>     results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/django/db/models/sql/compiler.py\", line 1098, in execute_sql\r\nINTERNALERROR>     cursor = self.connection.cursor()\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/django/db/backends/base/base.py\", line 256, in cursor\r\nINTERNALERROR>     return self._cursor()\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/django/db/backends/base/base.py\", line 233, in _cursor\r\nINTERNALERROR>     self.ensure_connection()\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/pytest_django/plugin.py\", line 772, in _blocking_wrapper\r\nINTERNALERROR>     \"Database access not allowed, \"\r\nINTERNALERROR>   File \"****/lib/python3.6/site-packages/_pytest/outcomes.py\", line 128, in fail\r\nINTERNALERROR>     raise Failed(msg=msg, pytrace=pytrace)\r\nINTERNALERROR> Failed: Database access not allowed, use the \"django_db\" mark, or the \"db\" or \"transactional_db\" fixtures to enable it.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/801", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/801/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/801/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/801/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/801", "id": 551448199, "node_id": "MDU6SXNzdWU1NTE0NDgxOTk=", "number": 801, "title": "pytest-django builds incorrect database names with pytest 5.3.3 and pytest-xdist", "user": {"login": "rixx", "id": 2657547, "node_id": "MDQ6VXNlcjI2NTc1NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2657547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rixx", "html_url": "https://github.com/rixx", "followers_url": "https://api.github.com/users/rixx/followers", "following_url": "https://api.github.com/users/rixx/following{/other_user}", "gists_url": "https://api.github.com/users/rixx/gists{/gist_id}", "starred_url": "https://api.github.com/users/rixx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rixx/subscriptions", "organizations_url": "https://api.github.com/users/rixx/orgs", "repos_url": "https://api.github.com/users/rixx/repos", "events_url": "https://api.github.com/users/rixx/events{/privacy}", "received_events_url": "https://api.github.com/users/rixx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-17T14:32:07Z", "updated_at": "2020-01-17T16:19:09Z", "closed_at": "2020-01-17T16:19:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "pytet 5.3.3 was just released today, and pytest-django performs very slowly and incorrectly when run with pytest-xdist. There is a tracking issue up at pytest-dev/pytest#6492, which includes a git-bisect run and a more detailed description.\r\n\r\nThe tl;dr is that due to a change in fixture handling, pytest-django plus pytest-xdist build increasingly long database names until you reach errors such as `django.core.exceptions.ImproperlyConfigured: The database name 'test_travis_ci_test_gw0_gw0_gw0_gw0_gw0_gw0_gw0_gw0_gw0_gw0_gw0_gw0_gw0' (71 characters) is longer than PostgreSQL's limit of 63 characters. Supply a shorter NAME in settings.DATABASES.`, while performing very slowly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/790", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/790/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/790/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/790/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/790", "id": 545311127, "node_id": "MDU6SXNzdWU1NDUzMTExMjc=", "number": 790, "title": "Tests do not run without django-configuration installed.", "user": {"login": "jakubjanuzik", "id": 7289290, "node_id": "MDQ6VXNlcjcyODkyOTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/7289290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjanuzik", "html_url": "https://github.com/jakubjanuzik", "followers_url": "https://api.github.com/users/jakubjanuzik/followers", "following_url": "https://api.github.com/users/jakubjanuzik/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjanuzik/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjanuzik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjanuzik/subscriptions", "organizations_url": "https://api.github.com/users/jakubjanuzik/orgs", "repos_url": "https://api.github.com/users/jakubjanuzik/repos", "events_url": "https://api.github.com/users/jakubjanuzik/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjanuzik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-04T17:42:33Z", "updated_at": "2020-01-07T00:25:04Z", "closed_at": "2020-01-07T00:25:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my project I do not use django-configuration as I don't really need it.\r\n\r\nWhen installing `pytest-django` I try to run my tests, here's what I've got:\r\n```\r\npytest  \r\nTraceback (most recent call last):\r\n  File \"/home/jakub/.virtualenvs/mobigol/bin/pytest\", line 8, in <module>\r\n    sys.exit(main())\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/_pytest/config/__init__.py\", line 72, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/_pytest/config/__init__.py\", line 223, in _prepareconfig\r\n    pluginmanager=pluginmanager, args=args\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/pluggy/hooks.py\", line 286, in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/pluggy/manager.py\", line 87, in <lambda>\r\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/pluggy/callers.py\", line 203, in _multicall\r\n    gen.send(outcome)\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/_pytest/helpconfig.py\", line 89, in pytest_cmdline_parse\r\n    config = outcome.get_result()\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/pluggy/callers.py\", line 80, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/pluggy/callers.py\", line 187, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/_pytest/config/__init__.py\", line 742, in pytest_cmdline_parse\r\n    self.parse(args)\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/_pytest/config/__init__.py\", line 948, in parse\r\n    self._preparse(args, addopts=addopts)\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/_pytest/config/__init__.py\", line 906, in _preparse\r\n    early_config=self, args=args, parser=self._parser\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/pluggy/hooks.py\", line 286, in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/pluggy/manager.py\", line 87, in <lambda>\r\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/pluggy/callers.py\", line 208, in _multicall\r\n    return outcome.get_result()\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/pluggy/callers.py\", line 80, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/pluggy/callers.py\", line 187, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/home/jakub/.virtualenvs/mobigol/lib/python3.6/site-packages/pytest_django/plugin.py\", line 239, in pytest_load_initial_conftests\r\n    import configurations.importer\r\nModuleNotFoundError: No module named 'configurations'\r\n```\r\n\r\nAlso my package versions:\r\n```\r\npytest==5.3.1\r\npytest-django==3.3.0\r\npytest-factoryboy==2.0.3\r\n```\r\n\r\n\r\nIs `django-configuration` required? I couldn't find any information about it in the documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/783", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/783/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/783/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/783/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/783", "id": 524422758, "node_id": "MDU6SXNzdWU1MjQ0MjI3NTg=", "number": 783, "title": "Live server error with sqlite3", "user": {"login": "cleder", "id": 1218010, "node_id": "MDQ6VXNlcjEyMTgwMTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1218010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cleder", "html_url": "https://github.com/cleder", "followers_url": "https://api.github.com/users/cleder/followers", "following_url": "https://api.github.com/users/cleder/following{/other_user}", "gists_url": "https://api.github.com/users/cleder/gists{/gist_id}", "starred_url": "https://api.github.com/users/cleder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cleder/subscriptions", "organizations_url": "https://api.github.com/users/cleder/orgs", "repos_url": "https://api.github.com/users/cleder/repos", "events_url": "https://api.github.com/users/cleder/events{/privacy}", "received_events_url": "https://api.github.com/users/cleder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-11-18T15:01:00Z", "updated_at": "2020-04-29T06:03:22Z", "closed_at": "2020-01-06T11:12:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using the live_server in an integration test fixture:\r\n```python\r\n@pytest.fixture(scope='session', name='server_url')\r\ndef get_server_url(live_server, environment):\r\n    \"\"\"Start a django server to test against and return the url of the server.\"\"\"\r\n    yield live_server.url\r\n```\r\nthe following error is generated:\r\n\r\n```\r\n\r\nself = <[AttributeError(\"'LiveServer' object has no attribute 'thread'\") raised in repr()] LiveServer object at 0x80526a8d0>\r\naddr = 'localhost'\r\n\r\n    def __init__(self, addr):\r\n        import django\r\n        from django.db import connections\r\n        from django.test.testcases import LiveServerThread\r\n        from django.test.utils import modify_settings\r\n    \r\n        connections_override = {}\r\n        for conn in connections.all():\r\n            # If using in-memory sqlite databases, pass the connections to\r\n            # the server thread.\r\n            if (\r\n                conn.settings_dict[\"ENGINE\"] == \"django.db.backends.sqlite3\"\r\n                and conn.settings_dict[\"NAME\"] == \":memory:\"\r\n            ):\r\n                # Explicitly enable thread-shareability for this connection\r\n>               conn.allow_thread_sharing = True\r\nE               AttributeError: can't set attribute\r\n\r\n/home/goldeneagle/venv/lib/python3.7/site-packages/pytest_django/live_server_helper.py:27: AttributeError\r\n``` \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/780", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/780/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/780/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/780/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/780", "id": 513717168, "node_id": "MDU6SXNzdWU1MTM3MTcxNjg=", "number": 780, "title": "ModuleError", "user": {"login": "abhijmr143", "id": 42037014, "node_id": "MDQ6VXNlcjQyMDM3MDE0", "avatar_url": "https://avatars3.githubusercontent.com/u/42037014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abhijmr143", "html_url": "https://github.com/abhijmr143", "followers_url": "https://api.github.com/users/abhijmr143/followers", "following_url": "https://api.github.com/users/abhijmr143/following{/other_user}", "gists_url": "https://api.github.com/users/abhijmr143/gists{/gist_id}", "starred_url": "https://api.github.com/users/abhijmr143/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abhijmr143/subscriptions", "organizations_url": "https://api.github.com/users/abhijmr143/orgs", "repos_url": "https://api.github.com/users/abhijmr143/repos", "events_url": "https://api.github.com/users/abhijmr143/events{/privacy}", "received_events_url": "https://api.github.com/users/abhijmr143/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-29T06:22:45Z", "updated_at": "2019-10-29T06:31:04Z", "closed_at": "2019-10-29T06:31:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I writed 'rest_framework',\r\nin installed App\r\nbut it shows error", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/772", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/772/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/772/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/772/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/772", "id": 509080479, "node_id": "MDU6SXNzdWU1MDkwODA0Nzk=", "number": 772, "title": "`TestCase.skipTest()` skips `_post_teardown`", "user": {"login": "lanzz", "id": 130721, "node_id": "MDQ6VXNlcjEzMDcyMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/130721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lanzz", "html_url": "https://github.com/lanzz", "followers_url": "https://api.github.com/users/lanzz/followers", "following_url": "https://api.github.com/users/lanzz/following{/other_user}", "gists_url": "https://api.github.com/users/lanzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/lanzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lanzz/subscriptions", "organizations_url": "https://api.github.com/users/lanzz/orgs", "repos_url": "https://api.github.com/users/lanzz/repos", "events_url": "https://api.github.com/users/lanzz/events{/privacy}", "received_events_url": "https://api.github.com/users/lanzz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-10-18T13:27:34Z", "updated_at": "2019-11-09T06:04:12Z", "closed_at": "2019-11-09T05:55:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "`TestCase.skipTest()` will raise a `SkipTest` exception, which is not caught in `_cleaning_debug`, so the `_post_teardown()` call is skipped. Also apparently cleanups registered with `TestCase.addCleanup()` will not be run. If setup done in `_pre_setup` needs to be undone in `_post_teardown` (or in cleanups scheduled with `addCleanup()`), that will not happen for tests skipped with `skipTest()`.\r\n\r\nThis does not apply to tests skipped with a `@unittest.skip` decorator.\r\n\r\nFor comparison, `nose` runs `_post_teardown` methods for tests skipped with `skipTest()`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/769", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/769/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/769/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/769/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/769", "id": 507739156, "node_id": "MDU6SXNzdWU1MDc3MzkxNTY=", "number": 769, "title": "_pre_setup is being run twice in certain cases", "user": {"login": "lanzz", "id": 130721, "node_id": "MDQ6VXNlcjEzMDcyMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/130721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lanzz", "html_url": "https://github.com/lanzz", "followers_url": "https://api.github.com/users/lanzz/followers", "following_url": "https://api.github.com/users/lanzz/following{/other_user}", "gists_url": "https://api.github.com/users/lanzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/lanzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lanzz/subscriptions", "organizations_url": "https://api.github.com/users/lanzz/orgs", "repos_url": "https://api.github.com/users/lanzz/repos", "events_url": "https://api.github.com/users/lanzz/events{/privacy}", "received_events_url": "https://api.github.com/users/lanzz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-16T09:46:26Z", "updated_at": "2019-10-16T21:53:15Z", "closed_at": "2019-10-16T21:53:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nfrom django.test import TestCase\r\n\r\nclass TestClass1(TestCase):\r\n\r\n    def test_method(self):\r\n        pass\r\n\r\nclass TestClass2(TestClass1):\r\n\r\n    def _pre_setup(self):\r\n        print 'running _pre_setup'\r\n        super(TestClass2, self)._pre_setup()\r\n\r\n    def test_method(self):\r\n        self.fail()\r\n```\r\nOutput:\r\n```\r\n...\r\ntest_cleaning_debug.py .F\r\n>>>>>>>> captured stdout >>>>>>>>\r\nrunning _pre_setup\r\nrunning _pre_setup\r\n>>>>>>>> traceback >>>>>>>>\r\nself = <test_cleaning_debug.TestClass2 testMethod=test_method>\r\n\r\n    def test_method(self):\r\n>       self.fail()\r\nE       AssertionError: None\r\n\r\ntest_cleaning_debug.py:15: AssertionError\r\n>>>>>>>> entering PDB >>>>>>>>\r\n...\r\n```\r\nNote how \"running _pre_setup\" is being printed _twice_. This will only trigger when `--pdb` is passed to `pytest`.\r\n\r\nCulprit is here: https://github.com/pytest-dev/pytest-django/blob/d2973e2/pytest_django/plugin.py#L527-L539\r\nThe problem is that the `debug` method has been patched in _both_ `TestClass1` _and_ `TestClass2`, so when `TestClass2.debug()` is called it will invoke its super, `TestClass1.debug`, which is _also_ patched with `_cleaning_debug`, so it will run `_pre_setup` a second time.\r\n\r\nThis is normally not an issue, but in our (very specific) case, we're doing stuff in `_pre_setup` that is not idempotent and breaks stuff when run a second time.\r\n\r\nI'm not sure what the right thing to do here is. I'll work around it in our case, but it feels like this behaviour is wrong, so you might want to think how to fix it properly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/766", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/766/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/766/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/766/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/766", "id": 498188409, "node_id": "MDU6SXNzdWU0OTgxODg0MDk=", "number": 766, "title": "Python 2.7: ImportError via  _handle_import_error", "user": {"login": "gudge25", "id": 2346208, "node_id": "MDQ6VXNlcjIzNDYyMDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2346208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gudge25", "html_url": "https://github.com/gudge25", "followers_url": "https://api.github.com/users/gudge25/followers", "following_url": "https://api.github.com/users/gudge25/following{/other_user}", "gists_url": "https://api.github.com/users/gudge25/gists{/gist_id}", "starred_url": "https://api.github.com/users/gudge25/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gudge25/subscriptions", "organizations_url": "https://api.github.com/users/gudge25/orgs", "repos_url": "https://api.github.com/users/gudge25/repos", "events_url": "https://api.github.com/users/gudge25/events{/privacy}", "received_events_url": "https://api.github.com/users/gudge25/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-25T10:14:55Z", "updated_at": "2019-09-26T14:39:50Z", "closed_at": "2019-09-26T14:39:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "File \"/home/travis/virtualenv/python2.7.15/lib/python2.7/site-packages/pytest_django/plugin.py\", line 170, in _handle_import_error\r\n\r\n    raise ImportError(msg)\r\n\r\nImportError: cannot import name _uuid_generate_random", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/765", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/765/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/765/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/765/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/765", "id": 497731422, "node_id": "MDU6SXNzdWU0OTc3MzE0MjI=", "number": 765, "title": "Empty querysets when connecting to database", "user": {"login": "suzil", "id": 13723264, "node_id": "MDQ6VXNlcjEzNzIzMjY0", "avatar_url": "https://avatars2.githubusercontent.com/u/13723264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suzil", "html_url": "https://github.com/suzil", "followers_url": "https://api.github.com/users/suzil/followers", "following_url": "https://api.github.com/users/suzil/following{/other_user}", "gists_url": "https://api.github.com/users/suzil/gists{/gist_id}", "starred_url": "https://api.github.com/users/suzil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suzil/subscriptions", "organizations_url": "https://api.github.com/users/suzil/orgs", "repos_url": "https://api.github.com/users/suzil/repos", "events_url": "https://api.github.com/users/suzil/events{/privacy}", "received_events_url": "https://api.github.com/users/suzil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-24T14:37:39Z", "updated_at": "2019-09-25T08:59:47Z", "closed_at": "2019-09-25T08:59:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I create a repo using django-cookiecutter with some small modifications. I run Docker containers for both Django and Postgres. I want to run pytest outside of Docker on my host machine. The code is here: https://github.com/suzil/test-pytest-django\r\n\r\nInside of the test, I am unable to access any of the data from the Postgres using the Django ORM. However, I know that DATABASE_URL is set correctly as I do not get a connection error.\r\n\r\nHere are the steps I take to reproduce:\r\n\r\n```shell\r\n# Install test requirements, run in a virtualenv\r\n$ pip3 install -r requirements/local.txt\r\n\r\n# Run all services (Django + Postgres)\r\n$ sudo docker-compose -f local.yml up -d\r\n\r\n# Populate the Postgres with a User\r\n$ sudo docker exec -i test_project_django_1 python3 manage.py shell < scripts/populate_postgres.py\r\n\r\n# Run a test to check for that User with DATABASE_URL=postgres://postgresuser:mysecretpass@localhost:5432/test_project\r\n$ python3 -m pytest -s -vv tests/\r\n# AssertionError: assert <QuerySet []>\r\n```\r\n\r\nHowever, I can manually check that the data is in the Postgres by running the manage.py shell inside of the Django container.\r\n```shell\r\n# DATABASE_URL=postgres://postgresuser:mysecretpass@postgres:5432/test_project\r\n$ sudo docker exec -i test_project_django_1 python3 manage.py shell\r\nPython 3.6.9 (default, Jul 13 2019, 15:16:41) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.8.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: from test_project.users.models import User\r\n\r\nIn [2]: User.objects.all()\r\nOut[2]: <QuerySet [<User: cats>]>\r\n```\r\n\r\nAny idea why this is happening? Do I have something mis-configured?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/754", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/754/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/754/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/754/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/754", "id": 477665930, "node_id": "MDU6SXNzdWU0Nzc2NjU5MzA=", "number": 754, "title": "pytest is unable to catch django's IntegrityError", "user": {"login": "vanyakosmos", "id": 16745500, "node_id": "MDQ6VXNlcjE2NzQ1NTAw", "avatar_url": "https://avatars2.githubusercontent.com/u/16745500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vanyakosmos", "html_url": "https://github.com/vanyakosmos", "followers_url": "https://api.github.com/users/vanyakosmos/followers", "following_url": "https://api.github.com/users/vanyakosmos/following{/other_user}", "gists_url": "https://api.github.com/users/vanyakosmos/gists{/gist_id}", "starred_url": "https://api.github.com/users/vanyakosmos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vanyakosmos/subscriptions", "organizations_url": "https://api.github.com/users/vanyakosmos/orgs", "repos_url": "https://api.github.com/users/vanyakosmos/repos", "events_url": "https://api.github.com/users/vanyakosmos/events{/privacy}", "received_events_url": "https://api.github.com/users/vanyakosmos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-08-06T20:22:24Z", "updated_at": "2019-08-09T16:45:57Z", "closed_at": "2019-08-07T14:59:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "pytest is unable to catch django's IntegrityError\r\n\r\n```python\r\n# models.py\r\nclass A(models.Model):\r\n    val = models.BooleanField(default=True)\r\n\r\nclass B(models.Model):\r\n    a = models.ForeignKey(A, on_delete=models.CASCADE)\r\n```\r\n\r\n```python\r\n# tests.py\r\nfrom django.db import IntegrityError\r\nimport pytest\r\n\r\n@pytest.mark.django_db\r\ndef test_integrity():\r\n    with pytest.raises(IntegrityError):\r\n        # using object A with id=1 before creating it \r\n        B.objects.create(a_id=1)\r\n```\r\n\r\nAfter running `pytest` it will show two errors for `test_integrity` function: \r\n\r\n- FAILURES: \"DID NOT RAISE <class 'django.db.utils.IntegrityError'>\"\r\n- ERROR at teardown: \"django.db.utils.IntegrityError: insert or update on table \"core_b\" violates foreign key constraint \"core_b_a_id_2a5b83ce_fk_core_a_id\"\r\n\r\nWhich is basically: \"here is an error about not raising IntegrityError in test_foo, and here is an error for raising IntegrityError in test_foo, deal with it\"\r\n\r\nI can catch Integrity error w/o problems outside of pytest:\r\n\r\n```\r\nroot@1f28fc583eed:/app# ./manage.py shell\r\nPython 3.6.7 (default, Oct 24 2018, 22:47:56)\r\n[GCC 6.3.0 20170516] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n(InteractiveConsole)\r\n>>> from core.tests import test_integrity\r\n>>> test_integrity()\r\n>>> exit()\r\n```\r\n\r\n<details><summary>pip list</summary>\r\n<p>\r\n```\r\nPackage             Version\r\n------------------- ---------\r\napipkg              1.5\r\nasn1crypto          0.24.0\r\natomicwrites        1.3.0\r\nattrs               19.1.0\r\ncertifi             2019.3.9\r\ncffi                1.12.3\r\nchardet             3.0.4\r\ncodecov             2.0.15\r\ncoverage            4.5.4\r\ncryptography        2.6.1\r\ndj-database-url     0.5.0\r\nDjango              2.2.3\r\ndjango-dbbackup     3.2.0\r\ndjango-extensions   2.1.7\r\nemoji               0.5.2\r\nexecnet             1.6.1\r\nfuture              0.17.1\r\ngunicorn            19.9.0\r\nidna                2.8\r\nmore-itertools      7.0.0\r\npip                 18.1\r\npluggy              0.11.0\r\npsycopg2-binary     2.8.2\r\npy                  1.8.0\r\npycparser           2.19\r\npytest              4.5.0\r\npytest-cov          2.7.1\r\npytest-django       3.4.8\r\npytest-forked       1.0.2\r\npytest-mock         1.10.4\r\npytest-xdist        1.29.0\r\npython-telegram-bot 12.0.0b1\r\npytz                2019.1\r\nredis               3.2.1\r\nregex               2019.4.14\r\nrequests            2.22.0\r\nschedule            0.6.0\r\nsetuptools          40.4.3\r\nsix                 1.12.0\r\nsqlparse            0.3.0\r\ntornado             6.0.2\r\nurllib3             1.25.3\r\nwcwidth             0.1.7\r\nwheel               0.32.2\r\nwhitenoise          4.1.3\r\n```\r\n</p>\r\n</details>\r\n\r\nVersions:\r\n```\r\npytest: 4.5.0\r\ndjango: 2.2.4\r\n```\r\n\r\n- [x] a detailed description of the bug or suggestion\r\n- [x] output of `pip list` from the virtual environment you are using\r\n- [x] pytest and operating system versions\r\n- [x] minimal example if possible\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/749", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/749/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/749/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/749/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/749", "id": 460026045, "node_id": "MDU6SXNzdWU0NjAwMjYwNDU=", "number": 749, "title": "Unable to specify Django settings when using pytest-django's admin_client", "user": {"login": "beaugunderson", "id": 61791, "node_id": "MDQ6VXNlcjYxNzkx", "avatar_url": "https://avatars0.githubusercontent.com/u/61791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beaugunderson", "html_url": "https://github.com/beaugunderson", "followers_url": "https://api.github.com/users/beaugunderson/followers", "following_url": "https://api.github.com/users/beaugunderson/following{/other_user}", "gists_url": "https://api.github.com/users/beaugunderson/gists{/gist_id}", "starred_url": "https://api.github.com/users/beaugunderson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beaugunderson/subscriptions", "organizations_url": "https://api.github.com/users/beaugunderson/orgs", "repos_url": "https://api.github.com/users/beaugunderson/repos", "events_url": "https://api.github.com/users/beaugunderson/events{/privacy}", "received_events_url": "https://api.github.com/users/beaugunderson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-24T18:10:26Z", "updated_at": "2019-06-24T19:39:14Z", "closed_at": "2019-06-24T18:19:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a simple test that uses the `admin_client` fixture.\r\n\r\nI've tried to use the `settings` fixture to override `settings.AXES_HANDLER` to the dummy axes handler because the default axes backend requires that any call to `client.login` contains the request in the `request=` parameter.\r\n\r\nThe `settings` fixture seems to have no effect on the `admin_client` fixture.\r\n\r\nI've also tried using a Django `TestCase` plus the `@override_settings` decorator, but that did not work either.\r\n\r\nIs there a different way I can specify the `settings` that will be used by the time the code in the `admin_client` executes?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/746", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/746/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/746/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/746/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/746", "id": 456156924, "node_id": "MDU6SXNzdWU0NTYxNTY5MjQ=", "number": 746, "title": "Using custom class instead of TestCase.", "user": {"login": "Kanzey", "id": 7619787, "node_id": "MDQ6VXNlcjc2MTk3ODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/7619787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kanzey", "html_url": "https://github.com/Kanzey", "followers_url": "https://api.github.com/users/Kanzey/followers", "following_url": "https://api.github.com/users/Kanzey/following{/other_user}", "gists_url": "https://api.github.com/users/Kanzey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kanzey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kanzey/subscriptions", "organizations_url": "https://api.github.com/users/Kanzey/orgs", "repos_url": "https://api.github.com/users/Kanzey/repos", "events_url": "https://api.github.com/users/Kanzey/events{/privacy}", "received_events_url": "https://api.github.com/users/Kanzey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-14T09:43:25Z", "updated_at": "2020-04-02T14:09:52Z", "closed_at": "2020-04-02T14:09:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi folks, i would like to change test case class used with db fixture i understand that i can do it like:\r\n```python\r\nfrom django.test import TestCase, TransactionTestCase\r\nfrom django.conf import settings\r\n\r\nTestCase.databases = ('default', settings.DICTIONARIES_DB_NAME)\r\nTransactionTestCase.databases = ('default', settings.DICTIONARIES_DB_NAME)\r\n```\r\nin contest.py file but it's not the most elegant solution. Alternative to it would be:\r\n```python\r\nfrom django.test import TestCase, TransactionTestCase\r\nfrom django.conf import settings\r\n\r\nclass CustomTestCase(TestCase):\r\n    databases = ('default', settings.DICTIONARIES_DB_NAME)\r\n\r\n\r\nclass CustomTransactionTestCase(TransactionTestCase):\r\n    databases = ('default', settings.DICTIONARIES_DB_NAME)\r\n\r\n\r\n@pytest.fixture\r\ndef django_test_case():\r\n    return CustomTestCase\r\n\r\n@pytest.fixture\r\ndef django_transaction_test_case():\r\n    return CustomTransactionTestCase\r\n\r\n\r\ndef _django_db_fixture_helper(\r\n    request, django_db_blocker, django_test_case, django_transaction_test_case, transactional=False, reset_sequences=False\r\n):\r\n    if is_django_unittest(request):\r\n        return\r\n\r\n    if not transactional and \"live_server\" in request.funcargnames:\r\n        # Do nothing, we get called with transactional=True, too.\r\n        return\r\n\r\n    django_db_blocker.unblock()\r\n    request.addfinalizer(django_db_blocker.restore)\r\n\r\n    if transactional:\r\n        django_case = django_transaction_test_case\r\n\r\n        if reset_sequences:\r\n\r\n            class ResetSequenceTestCase(django_case):\r\n                reset_sequences = True\r\n\r\n            django_case = ResetSequenceTestCase\r\n    else:\r\n        django_case = django_test_case\r\n\r\n    test_case = django_case(methodName=\"__init__\")\r\n    test_case._pre_setup()\r\n    request.addfinalizer(test_case._post_teardown)\r\n\r\n\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef db(request, django_db_setup, django_db_blocker, django_test_case, django_transaction_test_case):\r\n    if \"django_db_reset_sequences\" in request.funcargnames:\r\n        request.getfixturevalue(\"django_db_reset_sequences\")\r\n    if (\r\n        \"transactional_db\" in request.funcargnames\r\n        or \"live_server\" in request.funcargnames\r\n    ):\r\n        request.getfixturevalue(\"transactional_db\")\r\n    else:\r\n        _django_db_fixture_helper(request, django_db_blocker, django_test_case, django_transaction_test_case, transactional=False)\r\n\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef transactional_db(request, django_db_setup, django_db_blocker, django_test_case, django_transaction_test_case):\r\n    if \"django_db_reset_sequences\" in request.funcargnames:\r\n        request.getfixturevalue(\"django_db_reset_sequences\")\r\n    _django_db_fixture_helper(request, django_db_blocker, django_test_case, django_transaction_test_case, transactional=True)\r\n\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef django_db_reset_sequences(request, django_db_setup, django_db_blocker, django_test_case, django_transaction_test_case):\r\n    _django_db_fixture_helper(\r\n        request, django_db_blocker, django_test_case, django_transaction_test_case, transactional=True, reset_sequences=True\r\n    )\r\n```\r\n\r\nis there any better option than that or could testcase class customization be added to pytest-django plugin.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/745", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/745/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/745/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/745/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/745", "id": 453844961, "node_id": "MDU6SXNzdWU0NTM4NDQ5NjE=", "number": 745, "title": "pytest triggers deprecation warning about something I'm not even using", "user": {"login": "SHxKM", "id": 6573474, "node_id": "MDQ6VXNlcjY1NzM0NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6573474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SHxKM", "html_url": "https://github.com/SHxKM", "followers_url": "https://api.github.com/users/SHxKM/followers", "following_url": "https://api.github.com/users/SHxKM/following{/other_user}", "gists_url": "https://api.github.com/users/SHxKM/gists{/gist_id}", "starred_url": "https://api.github.com/users/SHxKM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SHxKM/subscriptions", "organizations_url": "https://api.github.com/users/SHxKM/orgs", "repos_url": "https://api.github.com/users/SHxKM/repos", "events_url": "https://api.github.com/users/SHxKM/events{/privacy}", "received_events_url": "https://api.github.com/users/SHxKM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-08T23:19:27Z", "updated_at": "2019-10-16T20:41:06Z", "closed_at": "2019-10-16T20:41:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Upon finishing my test, I get the following warnings from `pytest`:\r\n\r\n```\r\n======================================================================== warnings summary ========================================================================\r\ntests/test_accounts_feeds.py::test_correct_item_types_in_feed\r\n  /Users/user/.virtualenvs/bap_dev/lib/python3.6/site-packages/registration/auth_urls_classes.py:20: DeprecationWarning: \r\n  include('registration.auth_urls') is deprecated and will be\r\n  removed in django-registration 3.0. Use\r\n  include('django.contrib.auth.urls') instead.\r\n  \r\n    DeprecationWarning\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n======================================================= 1 passed, 2 deselected, 1 warnings in 3.94 seconds =======================================================\r\n```\r\n\r\nNotice `DeprecationWarning: include('registration.auth_urls')`. I am indeed using `django-registration=2.5.x`, but I have searched all of my project's files, and nowhere do I use that include or even the string `'registration.auth_urls'`. I'm perplexed as to where this deprecation warning is coming from then.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/734", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/734/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/734/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/734/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/734", "id": 445870245, "node_id": "MDU6SXNzdWU0NDU4NzAyNDU=", "number": 734, "title": "Django_migrations table not created?", "user": {"login": "apenney", "id": 9492, "node_id": "MDQ6VXNlcjk0OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apenney", "html_url": "https://github.com/apenney", "followers_url": "https://api.github.com/users/apenney/followers", "following_url": "https://api.github.com/users/apenney/following{/other_user}", "gists_url": "https://api.github.com/users/apenney/gists{/gist_id}", "starred_url": "https://api.github.com/users/apenney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apenney/subscriptions", "organizations_url": "https://api.github.com/users/apenney/orgs", "repos_url": "https://api.github.com/users/apenney/repos", "events_url": "https://api.github.com/users/apenney/events{/privacy}", "received_events_url": "https://api.github.com/users/apenney/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-05-19T22:13:37Z", "updated_at": "2019-05-20T13:05:21Z", "closed_at": "2019-05-20T12:34:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've spent a while trying to trouble shoot this, but I've given up and I'm here to beg for help.  In a nutshell, I'm trying to add pytest-django to an existing legacy Django 1.8 codebase.\r\n\r\nI'm in a weird position where I can do:\r\n\r\n`pytest tests/test_credentials.py` - this will pass.\r\n`pytest tests` - this will fail like:\r\n\r\n```\r\ncollected 3851 items                                                                                             [55/47488]\r\n\r\nsimon/tests/test_alerting.py ..............                                                                         [  0%]\r\nsimon/tests/test_audit_log.py ..                                                                                    [  0%]\r\nsimon/tests/test_celery_routing.py .....                                                                            [  0%]\r\nsimon/tests/test_channel_log_dal.py ...                                                                             [  0%]\r\nsimon/tests/test_contactinfo.py .................................                                                   [  1%]\r\nsimon/tests/test_credentials.py E\r\n\r\n========================================================= ERRORS ==========================================================\r\n_______________________ ERROR at setup of TestCredentials.test_create_new_customer_database_record ________________________\r\n\r\nrequest = <SubRequest '_django_db_marker' for <Function 'test_create_new_customer_database_record'>>\r\n\r\n    @pytest.fixture(autouse=True)\r\n    def _django_db_marker(request):\r\n        \"\"\"Implement the django_db marker, internal to pytest-django.\r\n\r\n        This will dynamically request the ``db``, ``transactional_db`` or\r\n        ``django_db_reset_sequences`` fixtures as required by the django_db marker.\r\n        \"\"\"\r\n        marker = request.node.get_closest_marker(\"django_db\")\r\n        if marker:\r\n            transaction, reset_sequences = validate_django_db(marker)\r\n            if reset_sequences:\r\n                request.getfixturevalue(\"django_db_reset_sequences\")\r\n            elif transaction:\r\n                request.getfixturevalue(\"transactional_db\")\r\n            else:\r\n>               request.getfixturevalue(\"db\")\r\n\r\n/root/.local/lib/python2.7/site-packages/pytest_django/plugin.py:485:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/root/.local/lib/python2.7/site-packages/pytest_django/fixtures.py:108: in django_db_setup\r\n    **setup_databases_args\r\n/root/.local/lib/python2.7/site-packages/django/test/runner.py:370: in setup_databases\r\n    serialize=connection.settings_dict.get(\"TEST\", {}).get(\"SERIALIZE\", True),\r\n/root/.local/lib/python2.7/site-packages/django/db/backends/base/creation.py:368: in create_test_db\r\n    test_flush=not keepdb,\r\n/root/.local/lib/python2.7/site-packages/django/core/management/__init__.py:120: in call_command\r\n    return command.execute(*args, **defaults)\r\n/root/.local/lib/python2.7/site-packages/django/core/management/base.py:445: in execute\r\n    output = self.handle(*args, **options)\r\n/root/.local/lib/python2.7/site-packages/django/core/management/commands/migrate.py:93: in handle\r\n    executor = MigrationExecutor(connection, self.migration_progress_callback)\r\n/root/.local/lib/python2.7/site-packages/django/db/migrations/executor.py:19: in __init__\r\n    self.loader = MigrationLoader(self.connection)\r\n/root/.local/lib/python2.7/site-packages/django/db/migrations/loader.py:47: in __init__\r\n    self.build_graph()\r\n/root/.local/lib/python2.7/site-packages/django/db/migrations/loader.py:191: in build_graph\r\n    self.applied_migrations = recorder.applied_migrations()\r\n/root/.local/lib/python2.7/site-packages/django/db/migrations/recorder.py:60: in applied_migrations\r\n    return set(tuple(x) for x in self.migration_qs.values_list(\"app\", \"name\"))\r\n/root/.local/lib/python2.7/site-packages/django/db/models/query.py:162: in __iter__\r\n    self._fetch_all()\r\n/root/.local/lib/python2.7/site-packages/django/db/models/query.py:965: in _fetch_all\r\n    self._result_cache = list(self.iterator())\r\n/root/.local/lib/python2.7/site-packages/django/db/models/query.py:1220: in iterator\r\n    for row in compiler.results_iter():\r\n/root/.local/lib/python2.7/site-packages/django/db/models/sql/compiler.py:794: in results_iter\r\n    results = self.execute_sql(MULTI)\r\n/root/.local/lib/python2.7/site-packages/django/db/models/sql/compiler.py:840: in execute_sql\r\n    cursor.execute(sql, params)\r\n/root/.local/lib/python2.7/site-packages/django/db/backends/utils.py:64: in execute\r\n    return self.cursor.execute(sql, params)\r\n/root/.local/lib/python2.7/site-packages/django/db/utils.py:98: in __exit__\r\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\r\n/root/.local/lib/python2.7/site-packages/django/db/backends/utils.py:64: in execute\r\n    return self.cursor.execute(sql, params)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x7f0da84fd9d0>\r\nquery = 'SELECT \"django_migrations\".\"app\", \"django_migrations\".\"name\" FROM \"django_migrations\"', params = ()\r\n\r\n    def execute(self, query, params=None):\r\n        if params is None:\r\n            return Database.Cursor.execute(self, query)\r\n        query = self.convert_query(query)\r\n>       return Database.Cursor.execute(self, query, params)\r\nE       OperationalError: no such table: django_migrations\r\n\r\n/root/.local/lib/python2.7/site-packages/django/db/backends/sqlite3/base.py:318: OperationalError\r\n```\r\n\r\nI can't figure out why it would fail here when I do either `pytest` or `pytest simon/tests`, but work if I execute specific tests.  I'd really appreciate some help.\r\n\r\nI've tried:\r\n\r\n--keepdb, --reuse-db, --nomigrations, a mysql test database instead of sqlite..., changing our settings in various ways, landing on just:\r\n\r\n```\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': os.path.join(ROOTDIR, 'test.sqlite.db')\r\n    },```\r\n\r\nNot sure if any of that is relevant but I'd appreciate any help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/732", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/732/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/732/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/732/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/732", "id": 442787288, "node_id": "MDU6SXNzdWU0NDI3ODcyODg=", "number": 732, "title": "Base Tests for Django Models", "user": {"login": "erayerdin", "id": 2399084, "node_id": "MDQ6VXNlcjIzOTkwODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2399084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erayerdin", "html_url": "https://github.com/erayerdin", "followers_url": "https://api.github.com/users/erayerdin/followers", "following_url": "https://api.github.com/users/erayerdin/following{/other_user}", "gists_url": "https://api.github.com/users/erayerdin/gists{/gist_id}", "starred_url": "https://api.github.com/users/erayerdin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erayerdin/subscriptions", "organizations_url": "https://api.github.com/users/erayerdin/orgs", "repos_url": "https://api.github.com/users/erayerdin/repos", "events_url": "https://api.github.com/users/erayerdin/events{/privacy}", "received_events_url": "https://api.github.com/users/erayerdin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-10T15:56:07Z", "updated_at": "2019-05-10T23:03:47Z", "closed_at": "2019-05-10T23:03:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everybody,\r\n\r\nI kinda adapted myself into `pytest-django`. It is great to use Django's testing features as fixtures.\r\n\r\nMy workflow when I test models is quite close to test-driven approach. For testing a model, I simply follow these steps:\r\n\r\n1. Create a test class for model.\r\n2. Import target model class.\r\n3. Test `issubclass(TargetModel, django.db.models.Model)` in `test_issubclass` method.\r\n\r\nFor a \"write test first\" approach, this ensures;\r\n\r\n1. if I created `TargetModel` in Django app's `models.py`,\r\n2. if `TargetModel` is subclass of Django's `Model`, which also ensures it is not *something else*.\r\n\r\nThis correspons to a base class like:\r\n\r\n```python\r\nclass BaseModelTest:\r\n    model: models.Model = None\r\n\r\n    def test_issubclass_model(self):\r\n        assert issubclass(self.model, models.Model)\r\n```\r\n\r\nSo whenever I write test for a model, I simply inherit as so:\r\n\r\n```python\r\nclass TestTargetModel(BaseModelTest):\r\n    model = TargetModel\r\n```\r\n\r\nAnd for testing a model, I simply follow the steps below:\r\n\r\n1. Create a test class for field.\r\n2. Import target model class.\r\n3. Test if the field is *nullable*.\r\n4. Test if the field *can be blank*.\r\n5. Test if the field has a default value, and if so, what that default value *is*.\r\n6. Test if the field has `auto_now` set **if the field is a date and time related field**.\r\n7. Test if the field has `auto_now_add` set **if the field is a date and time related field**.\r\n\r\nThis ensures the target field's attributes, so I can write that field to the model. It also corresponds to a base class like this:\r\n\r\n```python\r\nDATETIME_FIELDS = (models.DateTimeField, models.DateField, models.TimeField)\r\n\r\nclass BaseModelFieldTest:\r\n    model: models.Model = None\r\n    field_name: str = None\r\n\r\n    field_type: models.Field = None\r\n    is_null: bool = False\r\n    is_blank: bool = False\r\n    default_value = models.fields.NOT_PROVIDED\r\n\r\n    is_auto_now: bool = True\r\n    is_auto_now_add: bool = True\r\n\r\n    @property\r\n    def field(self):\r\n        return self.model._meta.get_field(self.field_name)\r\n\r\n    def test_field_type(self):\r\n        assert isinstance(self.field, self.field_type)\r\n\r\n    def test_is_null(self):\r\n        assert self.field.null == self.is_null\r\n\r\n    def test_is_blank(self):\r\n        assert self.field.blank == self.is_blank\r\n\r\n    def test_default_value(self):\r\n        assert self.field.default == self.default_value\r\n\r\n    def test_auto_now(self):\r\n        if self.field.__class__ not in DATETIME_FIELDS:\r\n            pytest.skip(\r\n                f\"{self.model.__name__}->{self.field_name} is not a date/time model type.\"\r\n            )\r\n\r\n        assert self.field.auto_now == self.is_auto_now\r\n\r\n    def test_auto_now_add(self):\r\n        if self.field.__class__ not in DATETIME_FIELDS:\r\n            pytest.skip(\r\n                f\"{self.model.__name__}->{self.field_name} is not a date/time model type.\"\r\n            )\r\n\r\n        assert self.field.auto_now_add == self.is_auto_now_add\r\n```\r\n\r\nSo I can write a test as such:\r\n\r\n```python\r\n# first I write test\r\nclass TestTargetModelFooField(BaseModelFieldTest):\r\n    model = TargetModel\r\n    field_name = \"foo\"\r\n    field_type = models.CharField\r\n\r\n    def test_max_length(self):\r\n        assert self.field.max_length == 64\r\n\r\n# then I write model\r\nclass TargetModel(models.Model):\r\n    foo = models.CharField(max_length=64)\r\n```\r\n\r\nThis, as you can guess, does not only tests `foo`'s `max_length`, but things like if it is null or blank etc.\r\n\r\nSo, as a rule, I write test first and then create a corresponding model. The thing is, I repeat this pattern for *almost all my projects* and simply copying and pasting [base class codes](https://hastebin.com/ocunuzipup.rb) to every darn project.\r\n\r\nSo, I thought, instead of copying this to every project, I could simply send this as a pull-request to this project, `pytest-django`.\r\n\r\nSo, reviewing the base classes above, what do you think? Would it be great if we had this code in `pytest-django`?\r\n\r\nI opened this issue and have not written the code yet since I had some hesitations. My hesitations includes the points below:\r\n\r\n - This is just an approach, which also can be implementable in Django's standard testing suite. It might mean I should not send this as a PR but create a new project and support both Django's standard testing suite and `pytest-django`.\r\n - `pytest` is a testing tool, but it stands out with its feature named *fixtures*. This approach does not implement any *fixture*, it just utilizes plain old inheritation pattern. Currently, `pytest-django` mainly has helpers a.k.a. fixtures. This is a whole different pattern and I thought it might not be welcome in the codebase with a proper way of thinking. Because this pattern might also lead to base  classes for views, templates and other aspects of Django, model is the only one aspect of it.\r\n\r\nSo, what do you think?\r\n\r\n1. Should I send a PR?\r\n2. Should I create my own project both supporting Django's standard testing suite and pytest?\r\n\r\nLooking forward for your answer. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/720", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/720/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/720/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/720/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/720", "id": 436492110, "node_id": "MDU6SXNzdWU0MzY0OTIxMTA=", "number": 720, "title": "Running under xdist causes FileNotFoundError", "user": {"login": "daneah", "id": 1808306, "node_id": "MDQ6VXNlcjE4MDgzMDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1808306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daneah", "html_url": "https://github.com/daneah", "followers_url": "https://api.github.com/users/daneah/followers", "following_url": "https://api.github.com/users/daneah/following{/other_user}", "gists_url": "https://api.github.com/users/daneah/gists{/gist_id}", "starred_url": "https://api.github.com/users/daneah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daneah/subscriptions", "organizations_url": "https://api.github.com/users/daneah/orgs", "repos_url": "https://api.github.com/users/daneah/repos", "events_url": "https://api.github.com/users/daneah/events{/privacy}", "received_events_url": "https://api.github.com/users/daneah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-04-24T04:30:34Z", "updated_at": "2019-04-26T14:40:26Z", "closed_at": "2019-04-26T14:40:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey! I've just gotten a big project onto pytest and now I'm working on speeding up the test suite. Running an otherwise working suite using pytest-xdist with any number of workers causes an error via pytest-django when Django tries to load PyYAML for serialization:\r\n\r\n```\r\n.../.pyenv/versions/3.4.3/envs/jstor/lib/python3.4/site-packages/pytest_django/fixtures.py:108: in django_db_setup\r\n    **setup_databases_args\r\n.../.pyenv/versions/3.4.3/envs/jstor/lib/python3.4/site-packages/django/test/utils.py:187: in setup_databases\r\n    serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\r\n.../.pyenv/versions/3.4.3/envs/jstor/lib/python3.4/site-packages/django/db/backends/base/creation.py:77: in create_test_db\r\n    self.connection._test_serialized_contents = self.serialize_db_to_string()\r\n.../.pyenv/versions/3.4.3/envs/jstor/lib/python3.4/site-packages/django/db/backends/base/creation.py:121: in serialize_db_to_string\r\n    serializers.serialize(\"json\", get_objects(), indent=None, stream=out)\r\n.../.pyenv/versions/3.4.3/envs/jstor/lib/python3.4/site-packages/django/core/serializers/__init__.py:128: in serialize\r\n    s = get_serializer(format)()\r\n.../.pyenv/versions/3.4.3/envs/jstor/lib/python3.4/site-packages/django/core/serializers/__init__.py:97: in get_serializer\r\n    _load_serializers()\r\n.../.pyenv/versions/3.4.3/envs/jstor/lib/python3.4/site-packages/django/core/serializers/__init__.py:153: in _load_serializers\r\n    register_serializer(format, BUILTIN_SERIALIZERS[format], serializers)\r\n.../.pyenv/versions/3.4.3/envs/jstor/lib/python3.4/site-packages/django/core/serializers/__init__.py:71: in register_serializer\r\n    module = importlib.import_module(serializer_module)\r\n.../.pyenv/versions/3.4.3/lib/python3.4/importlib/__init__.py:109: in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n    \"\"\"\r\n\r\n    import collections\r\n    import decimal\r\n    import sys\r\n    from io import StringIO\r\n\r\n>   import yaml\r\nE   FileNotFoundError: [Errno 2] No such file or directory\r\n\r\n/.../.pyenv/versions/3.4.3/envs/jstor/lib/python3.4/site-packages/django/core/serializers/pyyaml.py:12: FileNotFoundError\r\n```\r\n\r\nDjango's docs state:\r\n\r\n> This serializer is only available if PyYAML is installed.\r\n\r\nBut this occurs whether PyYAML is installed or not. I'm filing here because it feels like a variation pytest-django is creating in the presence of xdist, but I'd be happy to file in pytest-xdist if it appears more likely to be implicated. Thanks for any help you can provide!\r\n\r\nPython: 3.4.3\r\nDjango: 1.11.20\r\npytest: 4.4.1\r\npytest-django: 3.4.8\r\npytest-xdist: 1.28.0\r\nPyYAML: 5.1.0\r\nDatabases: Postgres and MySQL", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/716", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/716/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/716/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/716/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/716", "id": 432835658, "node_id": "MDU6SXNzdWU0MzI4MzU2NTg=", "number": 716, "title": "Site cache clear does not work", "user": {"login": "codingjoe", "id": 1772890, "node_id": "MDQ6VXNlcjE3NzI4OTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1772890?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codingjoe", "html_url": "https://github.com/codingjoe", "followers_url": "https://api.github.com/users/codingjoe/followers", "following_url": "https://api.github.com/users/codingjoe/following{/other_user}", "gists_url": "https://api.github.com/users/codingjoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/codingjoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codingjoe/subscriptions", "organizations_url": "https://api.github.com/users/codingjoe/orgs", "repos_url": "https://api.github.com/users/codingjoe/repos", "events_url": "https://api.github.com/users/codingjoe/events{/privacy}", "received_events_url": "https://api.github.com/users/codingjoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-13T11:05:30Z", "updated_at": "2019-04-15T15:18:00Z", "closed_at": "2019-04-13T12:44:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If you use `pytest-django` with `django.contrib.sites` inside your `INSTALLED_APPS` you will get, the following exception:\r\n\r\n```\r\nvenv/lib/python3.7/site-packages/pytest_django/plugin.py:702: in _django_clear_site_cache\r\n    from django.contrib.sites.models import Site\r\nvenv/lib/python3.7/site-packages/django/contrib/sites/models.py:78: in <module>\r\n    class Site(models.Model):\r\nvenv/lib/python3.7/site-packages/django/db/models/base.py:103: in __new__\r\n    app_config = apps.get_containing_app_config(module)\r\nvenv/lib/python3.7/site-packages/django/apps/registry.py:252: in get_containing_app_config\r\n    self.check_apps_ready()\r\nvenv/lib/python3.7/site-packages/django/apps/registry.py:135: in check_apps_ready\r\n    raise AppRegistryNotReady(\"Apps aren't loaded yet.\")\r\nE   django.core.exceptions.AppRegistryNotReady: Apps aren't loaded yet.\r\n```\r\n\r\nI could fix this, be overwriting the extension and actually checking if the models are ready:\r\n\r\n```python\r\nimport pytest\r\nfrom django.apps import apps\r\nfrom pytest_django.lazy_django import django_settings_is_configured\r\n\r\n\r\n@pytest.fixture(autouse=True, scope=\"function\")\r\ndef _django_clear_site_cache():\r\n    \"\"\"Clears ``django.contrib.sites.models.SITE_CACHE`` to avoid\r\n    unexpected behavior with cached site objects.\r\n    \"\"\"\r\n\r\n    if django_settings_is_configured() and apps.models_ready:\r\n        from django.conf import settings as dj_settings\r\n\r\n        if \"django.contrib.sites\" in dj_settings.INSTALLED_APPS:\r\n            from django.contrib.sites.models import Site\r\n\r\n            Site.objects.clear_cache()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/715", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/715/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/715/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/715/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/715", "id": 432649501, "node_id": "MDU6SXNzdWU0MzI2NDk1MDE=", "number": 715, "title": "Why I don't need @pytest.mark.django_db?", "user": {"login": "jonbesga", "id": 9107782, "node_id": "MDQ6VXNlcjkxMDc3ODI=", "avatar_url": "https://avatars2.githubusercontent.com/u/9107782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonbesga", "html_url": "https://github.com/jonbesga", "followers_url": "https://api.github.com/users/jonbesga/followers", "following_url": "https://api.github.com/users/jonbesga/following{/other_user}", "gists_url": "https://api.github.com/users/jonbesga/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonbesga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonbesga/subscriptions", "organizations_url": "https://api.github.com/users/jonbesga/orgs", "repos_url": "https://api.github.com/users/jonbesga/repos", "events_url": "https://api.github.com/users/jonbesga/events{/privacy}", "received_events_url": "https://api.github.com/users/jonbesga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-12T16:32:43Z", "updated_at": "2019-04-12T19:02:43Z", "closed_at": "2019-04-12T19:02:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I just installed pytest-django into my project and I realized that I can run tests that try to access the database without using the decorator? Anyone could explain why? Is the [documentation](https://pytest-django.readthedocs.io/en/latest/database.html) outdated?\r\n\r\nI run:\r\n`pytest`\r\n\r\nExample of one of my tests:\r\n\r\n```\r\ndef test_my_user(django_user_model):\r\n    me = django_user_model.objects.all().count()\r\n    assert me == 0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/713", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/713/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/713/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/713/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/713", "id": 424558439, "node_id": "MDU6SXNzdWU0MjQ1NTg0Mzk=", "number": 713, "title": "INTERNALERROR> Failed: Database access not allowed", "user": {"login": "cmermingas", "id": 7100704, "node_id": "MDQ6VXNlcjcxMDA3MDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7100704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmermingas", "html_url": "https://github.com/cmermingas", "followers_url": "https://api.github.com/users/cmermingas/followers", "following_url": "https://api.github.com/users/cmermingas/following{/other_user}", "gists_url": "https://api.github.com/users/cmermingas/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmermingas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmermingas/subscriptions", "organizations_url": "https://api.github.com/users/cmermingas/orgs", "repos_url": "https://api.github.com/users/cmermingas/repos", "events_url": "https://api.github.com/users/cmermingas/events{/privacy}", "received_events_url": "https://api.github.com/users/cmermingas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2019-03-24T00:06:35Z", "updated_at": "2019-11-01T15:13:22Z", "closed_at": "2019-11-01T14:46:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been facing this issue:\r\n\r\n```\r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/main.py\", line 203, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/main.py\", line 243, in _main\r\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/hooks.py\", line 289, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/manager.py\", line 68, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/manager.py\", line 62, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/main.py\", line 264, in pytest_runtestloop\r\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/hooks.py\", line 289, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/manager.py\", line 68, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/manager.py\", line 62, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/runner.py\", line 78, in pytest_runtest_protocol\r\nINTERNALERROR>     runtestprotocol(item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/runner.py\", line 87, in runtestprotocol\r\nINTERNALERROR>     rep = call_and_report(item, \"setup\", log)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/runner.py\", line 175, in call_and_report\r\nINTERNALERROR>     report = hook.pytest_runtest_makereport(item=item, call=call)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/hooks.py\", line 289, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/manager.py\", line 68, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/manager.py\", line 62, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 203, in _multicall\r\nINTERNALERROR>     gen.send(outcome)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/skipping.py\", line 127, in pytest_runtest_makereport\r\nINTERNALERROR>     rep = outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/runner.py\", line 271, in pytest_runtest_makereport\r\nINTERNALERROR>     excinfo, style=item.config.option.tbstyle\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/nodes.py\", line 284, in _repr_failure_py\r\nINTERNALERROR>     truncate_locals=truncate_locals,\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/_code/code.py\", line 556, in getrepr\r\nINTERNALERROR>     return fmt.repr_excinfo(self)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/_code/code.py\", line 806, in repr_excinfo\r\nINTERNALERROR>     reprtraceback = self.repr_traceback(excinfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/_code/code.py\", line 751, in repr_traceback\r\nINTERNALERROR>     reprentry = self.repr_traceback_entry(entry, einfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/_code/code.py\", line 710, in repr_traceback_entry\r\nINTERNALERROR>     reprargs = self.repr_args(entry) if not short else None\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/_code/code.py\", line 628, in repr_args\r\nINTERNALERROR>     args.append((argname, self._saferepr(argvalue)))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/_code/code.py\", line 622, in _saferepr\r\nINTERNALERROR>     return saferepr(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/_io/saferepr.py\", line 72, in saferepr\r\nINTERNALERROR>     return srepr.repr(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/_io/saferepr.py\", line 12, in repr\r\nINTERNALERROR>     return self._callhelper(reprlib.Repr.repr, self, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/_io/saferepr.py\", line 38, in _callhelper\r\nINTERNALERROR>     s = call(x, *args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/reprlib.py\", line 55, in repr\r\nINTERNALERROR>     return self.repr1(x, self.maxlevel)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/reprlib.py\", line 65, in repr1\r\nINTERNALERROR>     return self.repr_instance(x, level)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/_io/saferepr.py\", line 33, in repr_instance\r\nINTERNALERROR>     return self._callhelper(repr, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/_io/saferepr.py\", line 38, in _callhelper\r\nINTERNALERROR>     s = call(x, *args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/django/db/models/query.py\", line 244, in __repr__\r\nINTERNALERROR>     data = list(self[:REPR_OUTPUT_SIZE + 1])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/django/db/models/query.py\", line 268, in __iter__\r\nINTERNALERROR>     self._fetch_all()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/django/db/models/query.py\", line 1186, in _fetch_all\r\nINTERNALERROR>     self._result_cache = list(self._iterable_class(self))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/django/db/models/query.py\", line 54, in __iter__\r\nINTERNALERROR>     results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/django/db/models/sql/compiler.py\", line 1063, in execute_sql\r\nINTERNALERROR>     cursor = self.connection.cursor()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/django/db/backends/base/base.py\", line 255, in cursor\r\nINTERNALERROR>     return self._cursor()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/django/db/backends/base/base.py\", line 232, in _cursor\r\nINTERNALERROR>     self.ensure_connection()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/pytest_django/plugin.py\", line 749, in _blocking_wrapper\r\nINTERNALERROR>     \"Database access not allowed, \"\r\nINTERNALERROR>   File \"/usr/local/lib/python3.6/site-packages/_pytest/outcomes.py\", line 113, in fail\r\nINTERNALERROR>     raise Failed(msg=msg, pytrace=pytrace)\r\nINTERNALERROR> Failed: Database access not allowed, use the \"django_db\" mark, or the \"db\" or \"transactional_db\" fixtures to enable it.\r\n```\r\n\r\nIt happens when I have a FK in a model with a `default` value set via a function that looks like this:\r\n\r\n```\r\ndef default_value():\r\n    return ModelA.objects.get(name='foo').pk\r\n```\r\n\r\nIt happened when I used the `django_db` mark, even if it was on an empty test and even if this was the *only* test:\r\n\r\n```\r\n@pytest.mark.django_db\r\ndef test_this():\r\n    pass\r\n```\r\n\r\nIf I comment the decorator, it wouldn't happen.\r\n\r\nI feel the error has to do with the migrations.\r\n\r\n\r\nThank you!\r\n\r\nPS: Edited to remove information that became irrelevant (see my comment below)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/712", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/712/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/712/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/712/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/712", "id": 423330988, "node_id": "MDU6SXNzdWU0MjMzMzA5ODg=", "number": 712, "title": "sqlite tests failed in 3.4.8 under python 2.7", "user": {"login": "felixonmars", "id": 1006477, "node_id": "MDQ6VXNlcjEwMDY0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1006477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixonmars", "html_url": "https://github.com/felixonmars", "followers_url": "https://api.github.com/users/felixonmars/followers", "following_url": "https://api.github.com/users/felixonmars/following{/other_user}", "gists_url": "https://api.github.com/users/felixonmars/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixonmars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixonmars/subscriptions", "organizations_url": "https://api.github.com/users/felixonmars/orgs", "repos_url": "https://api.github.com/users/felixonmars/repos", "events_url": "https://api.github.com/users/felixonmars/events{/privacy}", "received_events_url": "https://api.github.com/users/felixonmars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-03-20T15:52:35Z", "updated_at": "2019-05-30T20:26:14Z", "closed_at": "2019-05-30T17:28:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "The failure is not present when running under python 3.7, or with pytest-django 3.4.7 and python 2.7.\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n________ TestSqliteWithMultipleDbsAndXdist.test_sqlite_database_renamed ________\r\n\r\nself = <test_db_setup.TestSqliteWithMultipleDbsAndXdist instance at 0x7f49a08c0518>\r\ndjango_testdir = <Testdir local('/tmp/pytest-of-builduser/pytest-1/test_sqlite_database_renamed0')>\r\n\r\n    def test_sqlite_database_renamed(self, django_testdir):\r\n        pytest.importorskip(\"xdist\")\r\n\r\n        django_testdir.create_test_module(\r\n            \"\"\"\r\n            import pytest\r\n            from django.db import connections\r\n\r\n            @pytest.mark.django_db\r\n            def test_a():\r\n                (conn_db2, conn_default) = sorted(\r\n                    connections.all(),\r\n                    key=lambda conn: conn.alias,\r\n                )\r\n\r\n                assert conn_default.vendor == 'sqlite'\r\n                db_name = conn_default.creation._get_test_db_name()\r\n                assert 'file:memorydb' in db_name\r\n\r\n                assert conn_db2.vendor == 'sqlite'\r\n                db_name = conn_db2.creation._get_test_db_name()\r\n                assert 'test_custom_db_name_gw' in db_name\r\n        \"\"\"\r\n        )\r\n\r\n        result = django_testdir.runpytest_subprocess(\"--tb=short\", \"-vv\", \"-n1\")\r\n>       assert result.ret == 0\r\nE       assert 1 == 0\r\nE        +  where 1 = <RunResult ret=1 len(stdout.lines)=60 len(stderr.lines)=0 duration=2.17s>.ret\r\n\r\n/build/python-pytest-django/src/pytest-django-3.4.8-py2/tests/test_db_setup.py:258: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\nrunning: /usr/bin/python2 -mpytest --basetemp=/tmp/pytest-of-builduser/pytest-1/test_sqlite_database_renamed0/runpytest-0 --tb=short -vv -n1\r\n     in: /tmp/pytest-of-builduser/pytest-1/test_sqlite_database_renamed0\r\n============================= test session starts ==============================\r\nplatform linux2 -- Python 2.7.16, pytest-4.3.1, py-1.8.0, pluggy-0.9.0 -- /usr/bin/python2\r\ncachedir: .pytest_cache\r\nDjango settings: tpkg.the_settings (from environment variable)\r\nrootdir: /tmp/pytest-of-builduser/pytest-1/test_sqlite_database_renamed0, inifile: tox.ini\r\nplugins: django-3.4.8, xdist-1.26.1, forked-1.0.2\r\ngw0 I\r\n\r\n[gw0] linux2 Python 2.7.16 cwd: /tmp/pytest-of-builduser/pytest-1/test_sqlite_database_renamed0\r\n\r\n[gw0] Python 2.7.16 (default, Mar 11 2019, 18:59:25)  -- [GCC 8.2.1 20181127]\r\ngw0 [1]\r\n\r\nscheduling tests via LoadScheduling\r\n\r\ntpkg/test_the_test.py::test_a\r\n[gw0] FAILED tpkg/test_the_test.py::test_a\r\n\r\n=================================== FAILURES ===================================\r\n____________________________________ test_a ____________________________________\r\n[gw0] linux2 -- Python 2.7.16 /usr/bin/python2\r\ntpkg/test_the_test.py:14: in test_a\r\n    assert 'file:memorydb' in db_name\r\nE   AssertionError: assert 'file:memorydb' in ':memory:'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/704", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/704/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/704/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/704/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/704", "id": 414220035, "node_id": "MDU6SXNzdWU0MTQyMjAwMzU=", "number": 704, "title": "Difference between pytest --reuse-db and manage.py --keepdb", "user": {"login": "danizen", "id": 4966193, "node_id": "MDQ6VXNlcjQ5NjYxOTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/4966193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danizen", "html_url": "https://github.com/danizen", "followers_url": "https://api.github.com/users/danizen/followers", "following_url": "https://api.github.com/users/danizen/following{/other_user}", "gists_url": "https://api.github.com/users/danizen/gists{/gist_id}", "starred_url": "https://api.github.com/users/danizen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danizen/subscriptions", "organizations_url": "https://api.github.com/users/danizen/orgs", "repos_url": "https://api.github.com/users/danizen/repos", "events_url": "https://api.github.com/users/danizen/events{/privacy}", "received_events_url": "https://api.github.com/users/danizen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-25T17:30:22Z", "updated_at": "2019-03-13T23:01:14Z", "closed_at": "2019-03-13T23:01:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "**The Problem**\r\n\r\nSo, Django's own test runner, and the django-nose test runner, both include an argument `--keepdb`.  However, this works differently than the `--reuse-db` argument to pytest.   Tangentially, the `REUSE_DB=1` environment variable for django-nose works more like pytest's `--reuse-db`.   pytest's behavior would make sense if `--reuse-db` were just for performance, rather than also being used in enterprise environments where CREATE DATABASE is not allowed.\r\n\r\n**Desired Behavior**\r\n\r\nThe authors thought carefully about the naming of `reuse-db`, so I hesitate to argue that it should stub `_create_test_db` rather than `create_test_db`.   However, either `reuse-db` should stub `_create_test_db` or there should optionally be a new argument `keepdb` that matches the behavior of Django's test runner.\r\n\r\n**Workaround**\r\n\r\nI think I could achieve the same logic in a plugin, or in some fixture which takes the django_db fixture as a decorator, and then runs the migrations.  Please advise on a suggestion for this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/703", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/703/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/703/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/703/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/703", "id": 414190862, "node_id": "MDU6SXNzdWU0MTQxOTA4NjI=", "number": 703, "title": "AttributeError: 'modify_settings' object has no attribute 'wrapped'", "user": {"login": "coler-j", "id": 7839615, "node_id": "MDQ6VXNlcjc4Mzk2MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7839615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coler-j", "html_url": "https://github.com/coler-j", "followers_url": "https://api.github.com/users/coler-j/followers", "following_url": "https://api.github.com/users/coler-j/following{/other_user}", "gists_url": "https://api.github.com/users/coler-j/gists{/gist_id}", "starred_url": "https://api.github.com/users/coler-j/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coler-j/subscriptions", "organizations_url": "https://api.github.com/users/coler-j/orgs", "repos_url": "https://api.github.com/users/coler-j/repos", "events_url": "https://api.github.com/users/coler-j/events{/privacy}", "received_events_url": "https://api.github.com/users/coler-j/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-25T16:27:14Z", "updated_at": "2019-03-14T13:05:42Z", "closed_at": "2019-03-14T13:05:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am getting the following error when doing a simple test.\r\n\r\nError `AttributeError: 'modify_settings' object has no attribute 'wrapped'`\r\n\r\nThis is my test:\r\n\r\n```\r\nclass FunctionalTest(LiveServerTestCase):\r\n\r\n    def setUp(self):\r\n        self.browser = webdriver.Firefox()\r\n\r\n    def tearDown(self):\r\n        self.browser.quit()\r\n\r\n    def test_sample_test(self):\r\n        print(f'{self.live_server_url}/login/')\r\n        self.browser.get(f'{self.live_server_url}/login/')\r\n        self.assertTrue(True)\r\n```\r\n\r\nI am not quite sure why this is happening, but I can see the following is happening:\r\n\r\n- `test_sample_test` seems to succeed, the browser opens and goes to the page and then closes.\r\n- `LiveServerTestCase.tearDownClass` seems to get called twice.\r\n- If I comment out the call to `_live_server_modified_settings.disable()` within `django.tests.testcases.LiveServerTestCase.tearDownClass` then the test \"passes\"\r\n- The pytest test runner shows 6 tests found, my first 5 unit test pass fine, then test in this file shows one 'green dot' to say test passed and then and 'E' for error. So in total it looks like there is somehow 7 tests.\r\n- I am using whitenoise for static file management, so I have tried to remove that in case it was interacting, but it did not change anything.\r\n- I ran through the TDD book from Django last week and did not encounter this issue (on another environment though)\r\n\r\nStack trace from error log:\r\n\r\n```\r\ntp = <class 'AttributeError'>, value = None, tb = None\r\n\r\n    def reraise(tp, value, tb=None):\r\n        try:\r\n            if value is None:\r\n                value = tp()\r\n            if value.__traceback__ is not tb:\r\n                raise value.with_traceback(tb)\r\n>           raise value\r\n\r\n..\\..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\six.py:693:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n..\\..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\six.py:693: in reraise\r\n    raise value\r\n..\\..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\six.py:693: in reraise\r\n    raise value\r\n..\\..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\pytest_django\\plugin.py:514: in teardown\r\n    cls.tearDownClass()\r\n..\\..\\..\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\django\\test\\testcases.py:1339: in tearDownClass\r\n    cls._live_server_modified_settings.disable()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <django.test.utils.modify_settings object at 0x0610E430>\r\n\r\n    def disable(self):\r\n        if 'INSTALLED_APPS' in self.options:\r\n            apps.unset_installed_apps()\r\n>       settings._wrapped = self.wrapped\r\nE       AttributeError: 'modify_settings' object has no attribute 'wrapped'\r\n```\r\n\r\n- Django version: 2.1.7\r\n- Geckodriver version: 0.24.0 \r\n- Selenium version: 3.141.0\r\n- Pytest version: 4.2.0\r\n- Pytest-django version: 3.4.5\r\n- Python version: 3.6.5\r\n\r\nI explored the following issues but wasn't able to debug root cause:\r\n\r\nhttps://github.com/pytest-dev/pytest-django/issues/557\r\nhttps://github.com/django-compressor/django-appconf/issues/30\r\nhttps://github.com/divio/aldryn-search/issues/86", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/699", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/699/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/699/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/699/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/699", "id": 405677806, "node_id": "MDU6SXNzdWU0MDU2Nzc4MDY=", "number": 699, "title": "Read the Docs: not updated anymore", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}, {"id": 240429390, "node_id": "MDU6TGFiZWwyNDA0MjkzOTA=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/documentation", "name": "documentation", "color": "fad8c7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "pelme", "id": 20529, "node_id": "MDQ6VXNlcjIwNTI5", "avatar_url": "https://avatars1.githubusercontent.com/u/20529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pelme", "html_url": "https://github.com/pelme", "followers_url": "https://api.github.com/users/pelme/followers", "following_url": "https://api.github.com/users/pelme/following{/other_user}", "gists_url": "https://api.github.com/users/pelme/gists{/gist_id}", "starred_url": "https://api.github.com/users/pelme/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pelme/subscriptions", "organizations_url": "https://api.github.com/users/pelme/orgs", "repos_url": "https://api.github.com/users/pelme/repos", "events_url": "https://api.github.com/users/pelme/events{/privacy}", "received_events_url": "https://api.github.com/users/pelme/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "pelme", "id": 20529, "node_id": "MDQ6VXNlcjIwNTI5", "avatar_url": "https://avatars1.githubusercontent.com/u/20529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pelme", "html_url": "https://github.com/pelme", "followers_url": "https://api.github.com/users/pelme/followers", "following_url": "https://api.github.com/users/pelme/following{/other_user}", "gists_url": "https://api.github.com/users/pelme/gists{/gist_id}", "starred_url": "https://api.github.com/users/pelme/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pelme/subscriptions", "organizations_url": "https://api.github.com/users/pelme/orgs", "repos_url": "https://api.github.com/users/pelme/repos", "events_url": "https://api.github.com/users/pelme/events{/privacy}", "received_events_url": "https://api.github.com/users/pelme/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2019-02-01T12:17:04Z", "updated_at": "2019-02-17T21:11:12Z", "closed_at": "2019-02-17T20:44:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://pytest-django.readthedocs.io/en/latest/changelog.html is at 3.4.4 currently.\r\n\r\nI do not have access to its admin.\r\n\r\n@pelme \r\nCan you please add me to the project, so that I could investigate?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/698", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/698/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/698/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/698/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/698", "id": 405675895, "node_id": "MDU6SXNzdWU0MDU2NzU4OTU=", "number": 698, "title": "Incompatible with pytest 4.2", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-01T12:11:22Z", "updated_at": "2019-02-03T18:54:39Z", "closed_at": "2019-02-03T18:54:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/pytest-dev/pytest/issues/4704#issuecomment-459693344\r\n\r\nhttps://github.com/pytest-dev/pytest-django/pull/697#issuecomment-459702597 disallows pytest 4.2.0 (hoped to have it fixed there with 4.2.1, but it is likely a bug/issue in pytest-django itself)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/688", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/688/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/688/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/688/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/688", "id": 398000020, "node_id": "MDU6SXNzdWUzOTgwMDAwMjA=", "number": 688, "title": "python3 setup.py test fails with either py3.6 or py3.7", "user": {"login": "kekePower", "id": 8249456, "node_id": "MDQ6VXNlcjgyNDk0NTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/8249456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kekePower", "html_url": "https://github.com/kekePower", "followers_url": "https://api.github.com/users/kekePower/followers", "following_url": "https://api.github.com/users/kekePower/following{/other_user}", "gists_url": "https://api.github.com/users/kekePower/gists{/gist_id}", "starred_url": "https://api.github.com/users/kekePower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kekePower/subscriptions", "organizations_url": "https://api.github.com/users/kekePower/orgs", "repos_url": "https://api.github.com/users/kekePower/repos", "events_url": "https://api.github.com/users/kekePower/events{/privacy}", "received_events_url": "https://api.github.com/users/kekePower/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-01-10T20:24:48Z", "updated_at": "2019-02-26T15:18:07Z", "closed_at": "2019-02-26T15:18:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\n\r\nI tried with both py3.6 and py3.7 and it fails on both.\r\n\r\nHere is a log from a build on Mageia 7 with py3.7.\r\nhttps://pkgsubmit.mageia.org/uploads/failure/cauldron/core/release/20190110200934.kekepower.duvel.2933/log/python-pytest-django-3.4.5-1.mga7/build.0.20190110201035.log\r\n\r\n```\r\nrunning build_ext\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 72, in <module>\r\n    entry_points={'pytest11': ['django = pytest_django.plugin']})\r\n  File \"/usr/lib/python3.7/site-packages/setuptools/__init__.py\", line 143, in setup\r\n    return distutils.core.setup(**attrs)\r\n  File \"/usr/lib/python3.7/distutils/core.py\", line 148, in setup\r\n    dist.run_commands()\r\n  File \"/usr/lib/python3.7/distutils/dist.py\", line 966, in run_commands\r\n    self.run_command(cmd)\r\n  File \"/usr/lib/python3.7/distutils/dist.py\", line 985, in run_command\r\n    cmd_obj.run()\r\n  File \"/usr/lib/python3.7/site-packages/setuptools/command/test.py\", line 228, in run\r\n    self.run_tests()\r\n  File \"/usr/lib/python3.7/site-packages/setuptools/command/test.py\", line 250, in run_tests\r\n    exit=False,\r\n  File \"/usr/lib/python3.7/unittest/main.py\", line 100, in __init__\r\n    self.parseArgs(argv)\r\n  File \"/usr/lib/python3.7/unittest/main.py\", line 124, in parseArgs\r\n    self._do_discovery(argv[2:])\r\n  File \"/usr/lib/python3.7/unittest/main.py\", line 244, in _do_discovery\r\n    self.createTests(from_discovery=True, Loader=Loader)\r\n  File \"/usr/lib/python3.7/unittest/main.py\", line 154, in createTests\r\n    self.test = loader.discover(self.start, self.pattern, self.top)\r\n  File \"/usr/lib/python3.7/unittest/loader.py\", line 347, in discover\r\n    tests = list(self._find_tests(start_dir, pattern))\r\n  File \"/usr/lib/python3.7/unittest/loader.py\", line 404, in _find_tests\r\n    full_path, pattern, namespace)\r\n  File \"/usr/lib/python3.7/unittest/loader.py\", line 481, in _find_test_path\r\n    tests = self.loadTestsFromModule(package, pattern=pattern)\r\n  File \"/usr/lib/python3.7/site-packages/setuptools/command/test.py\", line 54, in loadTestsFromModule\r\n    tests.append(self.loadTestsFromName(submodule))\r\n  File \"/usr/lib/python3.7/unittest/loader.py\", line 154, in loadTestsFromName\r\n    module = __import__(module_name)\r\n  File \"/home/iurt/rpmbuild/BUILD/pytest-django-3.4.5/pytest_django_test/db_helpers.py\", line 12, in <module>\r\n    _settings = settings.DATABASES['default']\r\n  File \"/usr/lib/python3.7/site-packages/django/conf/__init__.py\", line 56, in __getattr__\r\n    self._setup(name)\r\n  File \"/usr/lib/python3.7/site-packages/django/conf/__init__.py\", line 39, in _setup\r\n    % (desc, ENVIRONMENT_VARIABLE))\r\ndjango.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/685", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/685/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/685/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/685/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/685", "id": 397150051, "node_id": "MDU6SXNzdWUzOTcxNTAwNTE=", "number": 685, "title": "Can not use --fail-on-template-vars effectively ", "user": {"login": "wimglenn", "id": 6615374, "node_id": "MDQ6VXNlcjY2MTUzNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6615374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wimglenn", "html_url": "https://github.com/wimglenn", "followers_url": "https://api.github.com/users/wimglenn/followers", "following_url": "https://api.github.com/users/wimglenn/following{/other_user}", "gists_url": "https://api.github.com/users/wimglenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/wimglenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wimglenn/subscriptions", "organizations_url": "https://api.github.com/users/wimglenn/orgs", "repos_url": "https://api.github.com/users/wimglenn/repos", "events_url": "https://api.github.com/users/wimglenn/events{/privacy}", "received_events_url": "https://api.github.com/users/wimglenn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-09T00:14:46Z", "updated_at": "2019-02-04T22:22:06Z", "closed_at": "2019-02-04T22:22:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "    {{obj.something|default_if_none:\"Unknown\"}}\r\n\r\nI like the `--fail-on-template-vars` feature and want to use it, however when an absent context is being explicitly handled directly in the template the plugin does not recognize this (i.e. the plugin still fails those tests). See https://docs.djangoproject.com/en/2.1/ref/templates/builtins/#default-if-none \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/683", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/683/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/683/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/683/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/683", "id": 396187763, "node_id": "MDU6SXNzdWUzOTYxODc3NjM=", "number": 683, "title": "No option for running django.test.SimpleTestCase assertions in test functions", "user": {"login": "butla", "id": 1710591, "node_id": "MDQ6VXNlcjE3MTA1OTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1710591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/butla", "html_url": "https://github.com/butla", "followers_url": "https://api.github.com/users/butla/followers", "following_url": "https://api.github.com/users/butla/following{/other_user}", "gists_url": "https://api.github.com/users/butla/gists{/gist_id}", "starred_url": "https://api.github.com/users/butla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/butla/subscriptions", "organizations_url": "https://api.github.com/users/butla/orgs", "repos_url": "https://api.github.com/users/butla/repos", "events_url": "https://api.github.com/users/butla/events{/privacy}", "received_events_url": "https://api.github.com/users/butla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-05T18:15:35Z", "updated_at": "2019-01-08T21:43:35Z", "closed_at": "2019-01-08T21:43:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've noticed that unittest-style Django test case classes have methods such as `assertRedirects`, `assertContains`, etc. I see that I can't easily use them when doing standard pytest test functions.\r\n\r\nAm I missing something? Were they deemed not worthy of dragging over from Django's standard testing tools? Was there just not enough time?\r\n\r\nMy quick and dirty implementation for `assertRedirects` is this:\r\n```python\r\nfrom django.test import SimpleTestCase\r\n\r\n_TEST_CASE = SimpleTestCase()\r\n\r\n\r\n# based on django.test.SimpleTestCase:assertRedirects\r\ndef assert_redirects(response, expected_url, status_code=302,\r\n                     target_status_code=200, msg_prefix='',\r\n                     fetch_redirect_response=True):\r\n    \"\"\"\r\n    Assert that a response redirected to a specific URL and that the\r\n    redirect URL can be loaded.\r\n\r\n    Won't work for external links since it uses the test client to do a\r\n    request (use fetch_redirect_response=False to check such links without\r\n    fetching them).\r\n    \"\"\"\r\n    _TEST_CASE.assertRedirects(response, expected_url, status_code,\r\n                               target_status_code, msg_prefix,\r\n                               fetch_redirect_response)\r\n```\r\n\r\nDo you think something like this could make it to this library? As `pytest_django.assert_redirects` function, for example? Or is it too hacky?\r\n\r\nA nicer approach would be to factor out pure functions in `django.test` itself, but I don't know if that's possible with unittest. Maybe would require refactoring it as well :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/682", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/682/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/682/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/682/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/682", "id": 392226491, "node_id": "MDU6SXNzdWUzOTIyMjY0OTE=", "number": 682, "title": "pytest.ini directory is not set to rootdir in 3.4.4", "user": {"login": "danlittlejohn", "id": 379037, "node_id": "MDQ6VXNlcjM3OTAzNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/379037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danlittlejohn", "html_url": "https://github.com/danlittlejohn", "followers_url": "https://api.github.com/users/danlittlejohn/followers", "following_url": "https://api.github.com/users/danlittlejohn/following{/other_user}", "gists_url": "https://api.github.com/users/danlittlejohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/danlittlejohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danlittlejohn/subscriptions", "organizations_url": "https://api.github.com/users/danlittlejohn/orgs", "repos_url": "https://api.github.com/users/danlittlejohn/repos", "events_url": "https://api.github.com/users/danlittlejohn/events{/privacy}", "received_events_url": "https://api.github.com/users/danlittlejohn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-18T16:09:08Z", "updated_at": "2019-02-26T15:18:44Z", "closed_at": "2019-02-26T15:18:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "if I set a pytest.ini file and then run pytest in a subfolder it looks like the rootdir is not longer set to the directory that pytest.ini is in.  This causes the path to DJANGO_SETTINGS_MODULE to no longer be found\r\n\r\nso if I have a directory structure like this\r\n\r\nroot\r\n--apps\r\n--test\r\n--project\r\n----settings\r\n------test\r\npytest.ini\r\n\r\nset the pytest.ini file to this\r\n\r\n[pytest]\r\nDJANGO_SETTINGS_MODULE=project.settings.test\r\n\r\nand then run pytest from the test folder it will find the pytest.ini file, but will then throw a \"project\" module not found.\r\nHowever, it is found if I set PYTHONPATH so maybe something that sets the rootdir broke?\r\n\r\nPYTHONPATH=.. pytest\r\n\r\nThis happens in 3.4.4, but not 3.4.3 and earlier versions", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/678", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/678/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/678/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/678/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/678", "id": 391777459, "node_id": "MDU6SXNzdWUzOTE3Nzc0NTk=", "number": 678, "title": "Correctly support DB access in parallel Tox testing", "user": {"login": "adamantike", "id": 3867850, "node_id": "MDQ6VXNlcjM4Njc4NTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/3867850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamantike", "html_url": "https://github.com/adamantike", "followers_url": "https://api.github.com/users/adamantike/followers", "following_url": "https://api.github.com/users/adamantike/following{/other_user}", "gists_url": "https://api.github.com/users/adamantike/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamantike/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamantike/subscriptions", "organizations_url": "https://api.github.com/users/adamantike/orgs", "repos_url": "https://api.github.com/users/adamantike/repos", "events_url": "https://api.github.com/users/adamantike/events{/privacy}", "received_events_url": "https://api.github.com/users/adamantike/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117145048, "node_id": "MDU6TGFiZWwxMTcxNDUwNDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/db-configuration", "name": "db-configuration", "color": "fbca04", "default": false, "description": null}, {"id": 117314970, "node_id": "MDU6TGFiZWwxMTczMTQ5NzA=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/enhancement", "name": "enhancement", "color": "207de5", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-17T15:59:27Z", "updated_at": "2019-08-26T08:45:40Z", "closed_at": "2019-08-26T08:45:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nRecently, I have migrated some Django projects to run their tests using [Tox](https://tox.readthedocs.io/en/latest/index.html). Because of the number of tests and Tox environments, it was configured to run tests in parallel. This required a similar approach as what's currently handled by `pytest-django` when running tests with `pytest-xdist`: **Database renaming to avoid collisions**.\r\n\r\nA simple fixture like `django_db_modify_db_settings_xdist_suffix`, to add a suffix to database names, was enough to fix database collisions, so I wonder if `pytest-django` should also handle Tox testing in these scenarios. And, now more than ever, with Tox implementing real support for [parallel execution](https://github.com/tox-dev/tox/pull/1102).\r\n\r\nI have the time to work on this, and provide what I've implemented so far, if this request is accepted!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/672", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/672/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/672/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/672/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/672", "id": 384122560, "node_id": "MDU6SXNzdWUzODQxMjI1NjA=", "number": 672, "title": "import error when specifying individual tests", "user": {"login": "bmeyer71", "id": 324862, "node_id": "MDQ6VXNlcjMyNDg2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/324862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmeyer71", "html_url": "https://github.com/bmeyer71", "followers_url": "https://api.github.com/users/bmeyer71/followers", "following_url": "https://api.github.com/users/bmeyer71/following{/other_user}", "gists_url": "https://api.github.com/users/bmeyer71/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmeyer71/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmeyer71/subscriptions", "organizations_url": "https://api.github.com/users/bmeyer71/orgs", "repos_url": "https://api.github.com/users/bmeyer71/repos", "events_url": "https://api.github.com/users/bmeyer71/events{/privacy}", "received_events_url": "https://api.github.com/users/bmeyer71/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}, {"id": 877391872, "node_id": "MDU6TGFiZWw4NzczOTE4NzI=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/needs-info", "name": "needs-info", "color": "66f4d6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-25T21:48:39Z", "updated_at": "2019-02-03T23:27:03Z", "closed_at": "2019-02-03T23:27:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting \r\n\r\n> ImportError: No module named 'my_project.tests'\r\n\r\nwhen trying to run either an individual test within a module or even specifying the module file itself.\r\nThis is happening with pytest-django 3.4.4 but not with 3.4.3\r\nI am using tox to run the tests.\r\neg: tox -- -s path/to/my/tests/my-test-file.py\r\n\r\nIs there something that needs to be added to my test config now?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/671", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/671/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/671/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/671/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/671", "id": 377743759, "node_id": "MDU6SXNzdWUzNzc3NDM3NTk=", "number": 671, "title": "Keep db between tests", "user": {"login": "davitovmasyan", "id": 8676426, "node_id": "MDQ6VXNlcjg2NzY0MjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/8676426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davitovmasyan", "html_url": "https://github.com/davitovmasyan", "followers_url": "https://api.github.com/users/davitovmasyan/followers", "following_url": "https://api.github.com/users/davitovmasyan/following{/other_user}", "gists_url": "https://api.github.com/users/davitovmasyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/davitovmasyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davitovmasyan/subscriptions", "organizations_url": "https://api.github.com/users/davitovmasyan/orgs", "repos_url": "https://api.github.com/users/davitovmasyan/repos", "events_url": "https://api.github.com/users/davitovmasyan/events{/privacy}", "received_events_url": "https://api.github.com/users/davitovmasyan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-06T08:45:22Z", "updated_at": "2018-11-06T09:01:16Z", "closed_at": "2018-11-06T09:01:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Am I able to keep database between tests ?\r\n\r\nLet's say I have ordered tests and first test is inserting a row into a table. I need to get that row in the second test. Here is what I found from documentation.\r\n\r\n> However pytest-django also caters for transaction test cases and allows you to keep the test databases configured across different test runs.\r\n\r\nBut it's not clear. Any ideas how can I do that ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/662", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/662/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/662/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/662/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/662", "id": 368708248, "node_id": "MDU6SXNzdWUzNjg3MDgyNDg=", "number": 662, "title": "OSError on long command-line args", "user": {"login": "mjk4", "id": 28105574, "node_id": "MDQ6VXNlcjI4MTA1NTc0", "avatar_url": "https://avatars3.githubusercontent.com/u/28105574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjk4", "html_url": "https://github.com/mjk4", "followers_url": "https://api.github.com/users/mjk4/followers", "following_url": "https://api.github.com/users/mjk4/following{/other_user}", "gists_url": "https://api.github.com/users/mjk4/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjk4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjk4/subscriptions", "organizations_url": "https://api.github.com/users/mjk4/orgs", "repos_url": "https://api.github.com/users/mjk4/repos", "events_url": "https://api.github.com/users/mjk4/events{/privacy}", "received_events_url": "https://api.github.com/users/mjk4/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-10T14:57:06Z", "updated_at": "2018-10-19T13:58:24Z", "closed_at": "2018-10-16T20:43:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the logic of django_find_project there exist these lines:\r\n```\r\n    def find_django_path(args):\r\n        args = map(str, args)\r\n        args = [arg_to_path(x) for x in args if not x.startswith(\"-\")]\r\n        args = [p for p in args if p.is_dir()]\r\n...\r\n```\r\nUnfortunately, this means that if there are really long command-line args that this can get a `OSError: [Errno 36] File name too long: ...` which prevents me from, for example, using really long args to pytest's `-k` option.\r\nThanks for looking into this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/661", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/661/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/661/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/661/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/661", "id": 366684174, "node_id": "MDU6SXNzdWUzNjY2ODQxNzQ=", "number": 661, "title": "Assert Max Num of Queries is asserting min num of queries", "user": {"login": "danielMicallef", "id": 6313677, "node_id": "MDQ6VXNlcjYzMTM2Nzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6313677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielMicallef", "html_url": "https://github.com/danielMicallef", "followers_url": "https://api.github.com/users/danielMicallef/followers", "following_url": "https://api.github.com/users/danielMicallef/following{/other_user}", "gists_url": "https://api.github.com/users/danielMicallef/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielMicallef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielMicallef/subscriptions", "organizations_url": "https://api.github.com/users/danielMicallef/orgs", "repos_url": "https://api.github.com/users/danielMicallef/repos", "events_url": "https://api.github.com/users/danielMicallef/events{/privacy}", "received_events_url": "https://api.github.com/users/danielMicallef/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-04T08:50:07Z", "updated_at": "2018-10-30T15:16:45Z", "closed_at": "2018-10-30T15:16:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "`fixtures.py::django_assert_max_num_queries` is supposed to raise an exception when num of queries exceeds given `num_queries`. However this implemented the other way round.\r\n\r\nThe following change solves the issue:\r\n```\r\n--- a/pytest_django/fixtures.py\r\n+++ b/pytest_django/fixtures.py\r\n@@ -395,7 +395,7 @@ def _assert_num_queries(config, num, exact=True, connection=None):\r\n     with CaptureQueriesContext(connection) as context:\r\n         yield context\r\n         num_queries = len(context)\r\n-        failed = num != num_queries if exact else num < num_queries\r\n+        failed = num != num_queries if exact else num > num_queries\r\n         if failed:\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/659", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/659/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/659/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/659/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/659", "id": 362456512, "node_id": "MDU6SXNzdWUzNjI0NTY1MTI=", "number": 659, "title": "django pytest doesn't show test db getting created", "user": {"login": "py2k5", "id": 24918100, "node_id": "MDQ6VXNlcjI0OTE4MTAw", "avatar_url": "https://avatars1.githubusercontent.com/u/24918100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/py2k5", "html_url": "https://github.com/py2k5", "followers_url": "https://api.github.com/users/py2k5/followers", "following_url": "https://api.github.com/users/py2k5/following{/other_user}", "gists_url": "https://api.github.com/users/py2k5/gists{/gist_id}", "starred_url": "https://api.github.com/users/py2k5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/py2k5/subscriptions", "organizations_url": "https://api.github.com/users/py2k5/orgs", "repos_url": "https://api.github.com/users/py2k5/repos", "events_url": "https://api.github.com/users/py2k5/events{/privacy}", "received_events_url": "https://api.github.com/users/py2k5/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1064393698, "node_id": "MDU6TGFiZWwxMDY0MzkzNjk4", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/question", "name": "question", "color": "69f487", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2018-09-21T05:01:57Z", "updated_at": "2018-09-25T01:17:21Z", "closed_at": "2018-09-21T06:50:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run manage.py test it shows all migrations but if I run pytest it doesn't show any migrations. And also it looks like pytest is directly querying my database instead of test database as I run User.objects.get() and it gives me all users. My understanding that the test DBs are empty unless you feed data.\r\n\r\n**pytest -v output:**\r\nplatform linux -- Python 3.6.3, pytest-3.7.0, py-1.5.2, pluggy-0.7.1 -- /opt2/python3/bin/python3.6\r\ncachedir: .pytest_cache\r\nrootdir: /opt2/home/pkro/nwsbase/nmsapi, inifile: pytest.ini\r\nplugins: cov-2.5.1, celery-4.2.1\r\ncollected 2 items                                                                                                                                                                                                                          \r\n\r\ntests/portal/test_views.py::TestLocations::test_can_get_locations FAILED                                                                                                                                                             [ 50%]\r\ntests/portal/test_views.py::TestLocations::test_whoami PASSED        \r\n\r\n\r\n\r\n**manage.py test output:**\r\npython3 manage.py test\r\nCreating test database for alias 'default'...\r\nCreating test database for alias 'applications'...\r\nSystem check identified no issues (0 silenced).\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/644", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/644/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/644/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/644/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/644", "id": 357123585, "node_id": "MDU6SXNzdWUzNTcxMjM1ODU=", "number": 644, "title": "[BUG] pytest-django fails to recognize '-p no:django' when run in parallel ('-n X')", "user": {"login": "dybi", "id": 36961162, "node_id": "MDQ6VXNlcjM2OTYxMTYy", "avatar_url": "https://avatars0.githubusercontent.com/u/36961162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dybi", "html_url": "https://github.com/dybi", "followers_url": "https://api.github.com/users/dybi/followers", "following_url": "https://api.github.com/users/dybi/following{/other_user}", "gists_url": "https://api.github.com/users/dybi/gists{/gist_id}", "starred_url": "https://api.github.com/users/dybi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dybi/subscriptions", "organizations_url": "https://api.github.com/users/dybi/orgs", "repos_url": "https://api.github.com/users/dybi/repos", "events_url": "https://api.github.com/users/dybi/events{/privacy}", "received_events_url": "https://api.github.com/users/dybi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-09-05T08:39:24Z", "updated_at": "2018-09-07T14:28:52Z", "closed_at": "2018-09-07T14:28:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "When run in single process:\r\n```bash\r\npy.test -p no:django \r\n============================================================= test session starts ==============================================================\r\nplatform linux -- Python 3.6.6, pytest-3.6.2, py-1.5.4, pluggy-0.6.0\r\nrootdir: /home/dybowski/GOLEM/concent/signing_service, inifile: pytest.ini\r\nplugins: xdist-1.22.2, forked-0.2, cov-2.5.1, asyncio-0.8.0, celery-4.2.0\r\ncollected 37 items                                                                                                                             \r\n\r\ntest_handle_connection.py ......                                                                                                         [ 16%]\r\ntest_run.py ......                                                                                                                       [ 32%]\r\ntest_signing_service_methods.py ..................                                                                                       [ 81%]\r\ntest_utils.py .......                                                                                                                    [100%]\r\n\r\n========================================================== 37 passed in 3.28 seconds ===========================================================\r\n```\r\nit works fine, but when run in parallel:\r\n```bash\r\npy.test -p no:django -n 4\r\n============================================================= test session starts ==============================================================\r\nplatform linux -- Python 3.6.6, pytest-3.6.2, py-1.5.4, pluggy-0.6.0\r\nrootdir: /home/dybowski/GOLEM/concent/signing_service, inifile: pytest.ini\r\nplugins: xdist-1.22.2, forked-0.2, cov-2.5.1, asyncio-0.8.0, celery-4.2.0\r\ngw0 [37] / gw1 [37] / gw2 [37] / gw3 [37]\r\nscheduling tests via LoadScheduling\r\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE                                                                                                    [100%]\r\n==================================================================== ERRORS ====================================================================\r\n ERROR at setup of TestSigningServiceHandleConnection.test_that__handle_connection_should_send_golem_message_signed_transaction_if_frame_is_correct \r\n[gw0] linux -- Python 3.6.6 /home/dybowski/ENVs/concent/bin/python\r\n\r\nrequest = <SubRequest 'django_test_environment' for <Function 'test_that__handle_connection_should_send_golem_message_signed_transaction_if_frame_is_correct'>>\r\n\r\n    @pytest.fixture(autouse=True, scope='session')\r\n    def django_test_environment(request):\r\n        \"\"\"\r\n        Ensure that Django is loaded and has its testing environment setup.\r\n    \r\n        XXX It is a little dodgy that this is an autouse fixture.  Perhaps\r\n            an email fixture should be requested in order to be able to\r\n            use the Django email machinery just like you need to request a\r\n            db fixture for access to the Django database, etc.  But\r\n            without duplicating a lot more of Django's test support code\r\n            we need to follow this model.\r\n        \"\"\"\r\n        if django_settings_is_configured():\r\n            _setup_django()\r\n            from django.conf import settings as dj_settings\r\n            from django.test.utils import (setup_test_environment,\r\n                                           teardown_test_environment)\r\n>           dj_settings.DEBUG = False\r\n\r\n/home/dybowski/ENVs/concent/lib/python3.6/site-packages/pytest_django/plugin.py:353: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/home/dybowski/ENVs/concent/lib/python3.6/site-packages/django/conf/__init__.py:70: in __setattr__\r\n    super(LazySettings, self).__setattr__(name, value)\r\n/home/dybowski/ENVs/concent/lib/python3.6/site-packages/django/utils/functional.py:268: in __setattr__\r\n    self._setup()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <LazySettings [Unevaluated]>, name = None\r\n\r\n    def _setup(self, name=None):\r\n        \"\"\"\r\n            Load the settings module pointed to by the environment variable. This\r\n            is used the first time we need any settings at all, if the user has not\r\n            previously configured the settings manually.\r\n            \"\"\"\r\n        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)\r\n        if not settings_module:\r\n            desc = (\"setting %s\" % name) if name else \"settings\"\r\n            raise ImproperlyConfigured(\r\n                \"Requested %s, but settings are not configured. \"\r\n                \"You must either define the environment variable %s \"\r\n                \"or call settings.configure() before accessing settings.\"\r\n>               % (desc, ENVIRONMENT_VARIABLE))\r\nE           django.core.exceptions.ImproperlyConfigured: Requested settings, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.\r\n\r\n/home/dybowski/ENVs/concent/lib/python3.6/site-packages/django/conf/__init__.py:39: ImproperlyConfigured\r\n```\r\nso it seems that `-p no:django` is not recognized correctly/taken into account when `py.test` runs in parallel mode.\r\n\r\nPackages versions:\r\n```bash\r\npip freeze| grep pytest\r\n\r\npytest==3.6.2\r\npytest-asyncio==0.8.0\r\npytest-cov==2.5.1\r\npytest-django==3.3.2\r\npytest-forked==0.2\r\npytest-xdist==1.22.2\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/641", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/641/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/641/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/641/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/641", "id": 355140119, "node_id": "MDU6SXNzdWUzNTUxNDAxMTk=", "number": 641, "title": "Windows: OSError: [WinError 123] due to pathlib changes", "user": {"login": "toolness", "id": 124687, "node_id": "MDQ6VXNlcjEyNDY4Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/124687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toolness", "html_url": "https://github.com/toolness", "followers_url": "https://api.github.com/users/toolness/followers", "following_url": "https://api.github.com/users/toolness/following{/other_user}", "gists_url": "https://api.github.com/users/toolness/gists{/gist_id}", "starred_url": "https://api.github.com/users/toolness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toolness/subscriptions", "organizations_url": "https://api.github.com/users/toolness/orgs", "repos_url": "https://api.github.com/users/toolness/repos", "events_url": "https://api.github.com/users/toolness/events{/privacy}", "received_events_url": "https://api.github.com/users/toolness/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-08-29T12:37:09Z", "updated_at": "2020-06-22T05:39:57Z", "closed_at": "2018-09-16T06:06:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "My `pytest.ini` has the following content:\r\n\r\n```ini\r\n[pytest]\r\nDJANGO_SETTINGS_MODULE = project.settings_pytest\r\naddopts = --doctest-modules --cov=. --cov-report html:./coverage/python/html\r\nnorecursedirs = .git .venv .vscode node_modules\r\n```\r\n\r\nI believe the Unix-like path passed to `--cov-report` is causing the latest version of pytest-django to crash on Windows. (Because it's in an `.ini` file, I don't know of any platform-independent way to specify it).\r\n\r\nHere's the traceback that displays when running `pytest`:\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"C:\\Program Files\\Python37\\Lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"C:\\Program Files\\Python37\\Lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Users\\Atul\\.virtualenvs\\tenants2-Gxdtcl1v\\Scripts\\pytest.exe\\__main__.py\", line 9, in <module>\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\_pytest\\config\\__init__.py\", line 55, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\_pytest\\config\\__init__.py\", line 180, in _prepareconfig\r\n    pluginmanager=pluginmanager, args=args\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pluggy\\hooks.py\", line 258, in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pluggy\\manager.py\", line 67, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pluggy\\manager.py\", line 61, in <lambda>\r\n    firstresult=hook.spec_opts.get('firstresult'),\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pluggy\\callers.py\", line 196, in _multicall\r\n    gen.send(outcome)\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\_pytest\\helpconfig.py\", line 89, in pytest_cmdline_parse\r\n    config = outcome.get_result()\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pluggy\\callers.py\", line 76, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pluggy\\callers.py\", line 180, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\_pytest\\config\\__init__.py\", line 612, in pytest_cmdline_parse\r\n    self.parse(args)\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\_pytest\\config\\__init__.py\", line 777, in parse\r\n    self._preparse(args, addopts=addopts)\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\_pytest\\config\\__init__.py\", line 739, in _preparse\r\n    early_config=self, args=args, parser=self._parser\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pluggy\\hooks.py\", line 258, in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pluggy\\manager.py\", line 67, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pluggy\\manager.py\", line 61, in <lambda>\r\n    firstresult=hook.spec_opts.get('firstresult'),\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pluggy\\callers.py\", line 201, in _multicall\r\n    return outcome.get_result()\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pluggy\\callers.py\", line 76, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pluggy\\callers.py\", line 180, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pytest_django\\plugin.py\", line 209, in pytest_load_initial_conftests\r\n    _django_project_scan_outcome = _add_django_project_to_path(args)\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pytest_django\\plugin.py\", line 140, in _add_django_project_to_path\r\n    project_dir = find_django_path(args)\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pytest_django\\plugin.py\", line 127, in find_django_path\r\n    args = [p for p in args if p.is_dir()]\r\n  File \"c:\\users\\atul\\.virtualenvs\\tenants2-gxdtcl1v\\lib\\site-packages\\pytest_django\\plugin.py\", line 127, in <listcomp>\r\n    args = [p for p in args if p.is_dir()]\r\n  File \"C:\\Program Files\\Python37\\Lib\\pathlib.py\", line 1330, in is_dir\r\n    return S_ISDIR(self.stat().st_mode)\r\n  File \"C:\\Program Files\\Python37\\Lib\\pathlib.py\", line 1140, in stat\r\n    return self._accessor.stat(self)\r\nOSError: [WinError 123] The filename, directory name, or volume label syntax is incorrect: 'html:.\\\\coverage\\\\python\\\\html'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/640", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/640/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/640/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/640/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/640", "id": 354845672, "node_id": "MDU6SXNzdWUzNTQ4NDU2NzI=", "number": 640, "title": "pytest-django: No such database error", "user": {"login": "donalg007", "id": 8779877, "node_id": "MDQ6VXNlcjg3Nzk4Nzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/8779877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/donalg007", "html_url": "https://github.com/donalg007", "followers_url": "https://api.github.com/users/donalg007/followers", "following_url": "https://api.github.com/users/donalg007/following{/other_user}", "gists_url": "https://api.github.com/users/donalg007/gists{/gist_id}", "starred_url": "https://api.github.com/users/donalg007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/donalg007/subscriptions", "organizations_url": "https://api.github.com/users/donalg007/orgs", "repos_url": "https://api.github.com/users/donalg007/repos", "events_url": "https://api.github.com/users/donalg007/events{/privacy}", "received_events_url": "https://api.github.com/users/donalg007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 702740800, "node_id": "MDU6TGFiZWw3MDI3NDA4MDA=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/support", "name": "support", "color": "c5def5", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-28T18:15:37Z", "updated_at": "2018-08-30T18:39:12Z", "closed_at": "2018-08-28T18:52:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need to understand how pytest-django creates the test database. \r\n\r\nI understood that the default behaviour for pytest-django is to create the test database by applying migrations and remove the database after the test run.\r\n\r\nI have NO conftest.py file just a pytest.ini as follows:\r\n\r\n```\r\nDJANGO_SETTINGS_MODULE = myproject.test_settings\r\npython_files = tests.py test_*.py *_tests.py\r\n```\r\nI get an error saying:\r\n\r\n`E       OperationalError: ERROR:  No such database: test_database\r\n`\r\n\r\nIf I create a conftest.py to point to my existing database, my tests all run fine.\r\n\r\nMy question is - how can I avail of pytest-django default behaviour? What do I need apart from my pytest.ini shown above?\r\n\r\nI want pytest-django to:\r\n\r\n- Look at settings in pytest.ini\r\n- Create a test database\r\n- Run migrations\r\n- Run tests\r\n- Drop the database\r\n\r\nVersion Info:\r\n\r\n```\r\nPython 2.7 \r\nDjango 1.11.12\r\ndjangorestframework\r\nVersion: 3.8.2\r\n```\r\n\r\ntest_settings.py in my project\r\n\r\n```\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.postgresql',\r\n        'NAME': 'test_digitex',\r\n        'USER': 'digitex',\r\n        'PASSWORD': 's1dthesex1sttest',\r\n        'HOST': 'localhost',\r\n    }\r\n}\r\n```\r\n\r\n```\r\npsql --version\r\npsql (PostgreSQL) 10.3 (Ubuntu 10.3-1.pgdg16.04+1)\r\n```\r\nAny help greatly appreciated.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/639", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/639/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/639/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/639/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/639", "id": 353034283, "node_id": "MDU6SXNzdWUzNTMwMzQyODM=", "number": 639, "title": "pytest should not require manage.py", "user": {"login": "nitely", "id": 1697267, "node_id": "MDQ6VXNlcjE2OTcyNjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1697267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nitely", "html_url": "https://github.com/nitely", "followers_url": "https://api.github.com/users/nitely/followers", "following_url": "https://api.github.com/users/nitely/following{/other_user}", "gists_url": "https://api.github.com/users/nitely/gists{/gist_id}", "starred_url": "https://api.github.com/users/nitely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nitely/subscriptions", "organizations_url": "https://api.github.com/users/nitely/orgs", "repos_url": "https://api.github.com/users/nitely/repos", "events_url": "https://api.github.com/users/nitely/events{/privacy}", "received_events_url": "https://api.github.com/users/nitely/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-08-22T16:37:10Z", "updated_at": "2018-08-24T09:28:18Z", "closed_at": "2018-08-23T13:09:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is no reason for this. No test runner should require a real django project. Just set the settings and setup django. Otherwise we get:\r\n\r\n```\r\npytest-django could not find a Django project (no manage.py file could be found). You must explicitly add your Django project to the Python path to have it picked up.\r\n```\r\n\r\nwhen running standalone libraries on CI.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/637", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/637/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/637/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/637/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/637", "id": 352089654, "node_id": "MDU6SXNzdWUzNTIwODk2NTQ=", "number": 637, "title": "Tests fail since pytest-django 3.4 for django-extensions", "user": {"login": "michael-k", "id": 152008, "node_id": "MDQ6VXNlcjE1MjAwOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/152008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michael-k", "html_url": "https://github.com/michael-k", "followers_url": "https://api.github.com/users/michael-k/followers", "following_url": "https://api.github.com/users/michael-k/following{/other_user}", "gists_url": "https://api.github.com/users/michael-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/michael-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michael-k/subscriptions", "organizations_url": "https://api.github.com/users/michael-k/orgs", "repos_url": "https://api.github.com/users/michael-k/repos", "events_url": "https://api.github.com/users/michael-k/events{/privacy}", "received_events_url": "https://api.github.com/users/michael-k/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-08-20T11:11:41Z", "updated_at": "2018-08-21T08:13:52Z", "closed_at": "2018-08-20T16:28:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I noticed that the tests of [django-extensions@master](https://github.com/django-extensions/django-extensions/tree/master) fail since pytest-django 3.4 was released.  See eg. https://travis-ci.org/michael-k/django-extensions/builds/417328508\r\n\r\nWhen pinned to `pytest-django<3.4` in `tox.ini` the tests pass: https://travis-ci.org/michael-k/django-extensions/builds/417337453\r\n\r\nSo far I could not figure out why.  It says that `No fixture named 'group' found.`, but the changelog does not include anything helpful: [https://github.com/pytest-dev/pytest-django/releases/tag/3.4.0](pytest-django@3.4.0)  I also found no such fixture it the pytest-django 3.3.x codebase.\r\n\r\nIf anyone has a clue where this might be coming from, please let me know or open a PR against the appropriate project.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/628", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/628/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/628/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/628/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/628", "id": 339339877, "node_id": "MDU6SXNzdWUzMzkzMzk4Nzc=", "number": 628, "title": "Is there a way to run server using pytest-django", "user": {"login": "prakashsharmacs24", "id": 38946772, "node_id": "MDQ6VXNlcjM4OTQ2Nzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/38946772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prakashsharmacs24", "html_url": "https://github.com/prakashsharmacs24", "followers_url": "https://api.github.com/users/prakashsharmacs24/followers", "following_url": "https://api.github.com/users/prakashsharmacs24/following{/other_user}", "gists_url": "https://api.github.com/users/prakashsharmacs24/gists{/gist_id}", "starred_url": "https://api.github.com/users/prakashsharmacs24/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prakashsharmacs24/subscriptions", "organizations_url": "https://api.github.com/users/prakashsharmacs24/orgs", "repos_url": "https://api.github.com/users/prakashsharmacs24/repos", "events_url": "https://api.github.com/users/prakashsharmacs24/events{/privacy}", "received_events_url": "https://api.github.com/users/prakashsharmacs24/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 702740800, "node_id": "MDU6TGFiZWw3MDI3NDA4MDA=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/support", "name": "support", "color": "c5def5", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-09T07:47:45Z", "updated_at": "2018-09-16T04:01:31Z", "closed_at": "2018-09-16T04:01:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi @jakobdo \r\n@blueyed \r\nI want to confirm that \"Is there a way to run server using pytest-django\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/624", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/624/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/624/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/624/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/624", "id": 338284399, "node_id": "MDU6SXNzdWUzMzgyODQzOTk=", "number": 624, "title": "cls.setUpClass() -> TypeError: 'NoneType' object is not callable", "user": {"login": "jedie", "id": 71315, "node_id": "MDQ6VXNlcjcxMzE1", "avatar_url": "https://avatars1.githubusercontent.com/u/71315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedie", "html_url": "https://github.com/jedie", "followers_url": "https://api.github.com/users/jedie/followers", "following_url": "https://api.github.com/users/jedie/following{/other_user}", "gists_url": "https://api.github.com/users/jedie/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedie/subscriptions", "organizations_url": "https://api.github.com/users/jedie/orgs", "repos_url": "https://api.github.com/users/jedie/repos", "events_url": "https://api.github.com/users/jedie/events{/privacy}", "received_events_url": "https://api.github.com/users/jedie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-07-04T13:50:22Z", "updated_at": "2018-07-26T05:38:21Z", "closed_at": "2018-07-26T05:38:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n    @pytest.fixture(autouse=True, scope='class')\r\n    def _django_setup_unittest(request, django_db_blocker):\r\n        \"\"\"Setup a django unittest, internal to pytest-django.\"\"\"\r\n        if django_settings_is_configured() and is_django_unittest(request):\r\n            request.getfixturevalue('django_test_environment')\r\n            request.getfixturevalue('django_db_setup')\r\n    \r\n            django_db_blocker.unblock()\r\n    \r\n            cls = request.node.cls\r\n    \r\n            # implement missing (as of 1.10) debug() method for django's TestCase\r\n            # see pytest-dev/pytest-django#406\r\n            def _cleaning_debug(self):\r\n                testMethod = getattr(self, self._testMethodName)\r\n                skipped = (\r\n                    getattr(self.__class__, \"__unittest_skip__\", False) or\r\n                    getattr(testMethod, \"__unittest_skip__\", False))\r\n    \r\n                if not skipped:\r\n                    self._pre_setup()\r\n                super(cls, self).debug()\r\n                if not skipped:\r\n                    self._post_teardown()\r\n    \r\n            cls.debug = _cleaning_debug\r\n    \r\n            _restore_class_methods(cls)\r\n>           cls.setUpClass()\r\nE           TypeError: 'NoneType' object is not callable\r\n```\r\nMaybe related to: https://github.com/pytest-dev/pytest-django/pull/598 ?!?\r\n\r\nsetup:\r\n```\r\nplatform linux -- Python 3.6.5, pytest-3.6.2, py-1.5.4, pluggy-0.6.0 -- /usr/local/bin/python\r\nplugins: django-3.3.2, cov-2.5.1, celery-4.2.0\r\n```\r\n\r\nThink it's related to the upgrade:\r\n```\r\npytest-django==3.3.0 -> 3.3.2\r\npytest==3.6.1 -> 3.6.2\r\n```\r\n\r\nEDIT: I test the down grade to `pytest-django==3.3.0` and `pytest==3.6.1` and the test runs fine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/609", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/609/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/609/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/609/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/609", "id": 330081978, "node_id": "MDU6SXNzdWUzMzAwODE5Nzg=", "number": 609, "title": "'ignore_template_errors' not a registered marker", "user": {"login": "jamesbeith", "id": 456480, "node_id": "MDQ6VXNlcjQ1NjQ4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/456480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesbeith", "html_url": "https://github.com/jamesbeith", "followers_url": "https://api.github.com/users/jamesbeith/followers", "following_url": "https://api.github.com/users/jamesbeith/following{/other_user}", "gists_url": "https://api.github.com/users/jamesbeith/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesbeith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesbeith/subscriptions", "organizations_url": "https://api.github.com/users/jamesbeith/orgs", "repos_url": "https://api.github.com/users/jamesbeith/repos", "events_url": "https://api.github.com/users/jamesbeith/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesbeith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-07T01:02:17Z", "updated_at": "2018-06-26T09:13:01Z", "closed_at": "2018-06-26T09:13:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to use the `ignore_template_errors` marker...\r\n\r\n```\r\nimport pytest\r\n\r\n@pytest.mark.ignore_template_errors\r\ndef test_foo():\r\n    pass\r\n```\r\n\r\nbut running the tests resulted in the following error...\r\n\r\n```\r\nAttributeError: 'ignore_template_errors' not a registered marker\r\n```\r\n\r\nWhen I run `pytest --markers` to see which markers exist for the test suite `ignore_template_errors` is not listed, but the `django_db` and `urls` markers from `pytest-django` are.\r\n\r\n```\r\n$ pytest --markers\r\n@pytest.mark.webtest\r\n@pytest.mark.django_db(transaction=False)\r\n@pytest.mark.urls(modstr)\r\n@pytest.mark.skip(reason=None)\r\n@pytest.mark.skipif(condition)\r\n@pytest.mark.xfail(condition, reason=None, run=True, raises=None, strict=False)\r\n@pytest.mark.parametrize(argnames, argvalues)\r\n@pytest.mark.usefixtures(fixturename1, fixturename2, ...)\r\n@pytest.mark.tryfirst\r\n@pytest.mark.trylast\r\n```\r\n\r\nI do not have `markers` declared in my `setup.cfg` file but do include `--fail-on-template-vars` in `addopts`.\r\n\r\n```\r\npytest-django==3.2.1\r\npytest==3.6.1\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/608", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/608/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/608/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/608/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/608", "id": 329189708, "node_id": "MDU6SXNzdWUzMjkxODk3MDg=", "number": 608, "title": "Test fails due to DB fixture data not available outside of test", "user": {"login": "szicari-farmobile", "id": 32775099, "node_id": "MDQ6VXNlcjMyNzc1MDk5", "avatar_url": "https://avatars0.githubusercontent.com/u/32775099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/szicari-farmobile", "html_url": "https://github.com/szicari-farmobile", "followers_url": "https://api.github.com/users/szicari-farmobile/followers", "following_url": "https://api.github.com/users/szicari-farmobile/following{/other_user}", "gists_url": "https://api.github.com/users/szicari-farmobile/gists{/gist_id}", "starred_url": "https://api.github.com/users/szicari-farmobile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/szicari-farmobile/subscriptions", "organizations_url": "https://api.github.com/users/szicari-farmobile/orgs", "repos_url": "https://api.github.com/users/szicari-farmobile/repos", "events_url": "https://api.github.com/users/szicari-farmobile/events{/privacy}", "received_events_url": "https://api.github.com/users/szicari-farmobile/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-04T19:41:18Z", "updated_at": "2018-06-04T20:33:40Z", "closed_at": "2018-06-04T20:33:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I recently upgraded to pytest 3.6.0, at which point I had some test failures. The problem is my fixtures are available in the test but the view code is not finding the data when doing a separate query.\r\n\r\nSome debug info:\r\n\r\n```\r\n=========================================================================================== test session starts ============================================================================================\r\nplatform darwin -- Python 3.6.5, pytest-3.6.0, py-1.5.3, pluggy-0.6.0 -- /Users/me/src/mycompany/env-rest-api/.env/bin/python3.6\r\nusing: pytest-3.6.0 pylib-1.5.3\r\nsetuptools registered plugins:\r\n  pytest-xdist-1.22.1 at /Users/me/src/mycompany/env-rest-api/.env/lib/python3.6/site-packages/xdist/plugin.py\r\n  pytest-xdist-1.22.1 at /Users/me/src/mycompany/env-rest-api/.env/lib/python3.6/site-packages/xdist/looponfail.py\r\n  pytest-pudb-0.6 at /Users/me/src/mycompany/env-rest-api/.env/lib/python3.6/site-packages/pytest_pudb.py\r\n  pytest-mock-1.6.3 at /Users/me/src/mycompany/env-rest-api/.env/lib/python3.6/site-packages/pytest_mock.py\r\n  pytest-forked-0.2 at /Users/me/src/mycompany/env-rest-api/.env/lib/python3.6/site-packages/pytest_forked/__init__.py\r\n  pytest-django-3.2.1 at /Users/me/src/mycompany/env-rest-api/.env/lib/python3.6/site-packages/pytest_django/plugin.py\r\n  pytest-cov-2.5.1 at /Users/me/src/mycompany/env-rest-api/.env/lib/python3.6/site-packages/pytest_cov/plugin.py\r\n  hypothesis-3.40.1 at /Users/me/src/mycompany/env-rest-api/.env/lib/python3.6/site-packages/hypothesis/extra/pytestplugin.py\r\ncachedir: .pytest_cache\r\nDjango settings: app_api.settings (from ini file)\r\nrootdir: /Users/me/src/mycompany/app-api, inifile: pytest.ini\r\nplugins: xdist-1.22.1, pudb-0.6, mock-1.6.3, forked-0.2, django-3.2.1, cov-2.5.1, hypothesis-3.40.1\r\n```\r\n\r\nI have a test:\r\n\r\n```python\r\n@pytest.mark.parametrize('field, machine, machinesummary', itertools.product((True, False), repeat=3))\r\ndef test_report_recipients_permissions(user_test_client, fake_report_emails, mocker, field, machine, machinesummary):\r\n    fetch_abac_permissions = mocker.patch('reports.views.fetch_permissions')\r\n    perms = [{'resource': 'api/dashboard/reports/field', 'allow': field},\r\n             {'resource': 'api/dashboard/reports/machine', 'allow': machine},\r\n             {'resource': 'api/dashboard/reports/machinesummary', 'allow': machinesummary}]\r\n    fetch_permissions.return_value = perms\r\n    allowed_report_types = [perm['resource'].split('/')[-1] for perm in perms if perm['allow']]\r\n    recipients = [recipient for recipient in fake_report_emails if recipient.report.type in allowed_report_types]\r\n    data = {\r\n        recipient.report.id: recipient.to\r\n        for recipient in recipients\r\n        if recipient.to\r\n    }\r\n\r\n    request = APIRequestFactory().get(\r\n        f\"/reports/recipients?company_fmid={fake_report_emails[0].company.fmid}\"\r\n    )\r\n    request.query_params = request.GET\r\n    request.user = User.objects.get(username=\"private_api\")\r\n    response = ReportRecipientsView().get(request)\r\n    assert response.status_code == status.HTTP_200_OK\r\n    assert response.data['data'] == data\r\n```\r\n\r\n...which uses data from this fixture:\r\n\r\n```python\r\n@pytest.fixture\r\ndef fake_report_emails():\r\n    company = Company.objects.create(\r\n        type=CompanyType.objects.get(pk=14),\r\n        source_user_id=1,\r\n        name=\"Test\",\r\n        fmid=\"abcdef01\",\r\n        timezone=timezone(\"US/Central\"),\r\n    )\r\n\r\n    return [\r\n        ReportEmailAddress.objects.create(\r\n            company=company, report=report, to=[\"me@example.com\"], active=True\r\n        )\r\n        for report in Report.objects.all()\r\n    ]\r\n```\r\n\r\nWhen the test hits this line:\r\n\r\n```python\r\nresponse = ReportRecipientsView().get(request)\r\n```\r\n\r\nThe response comes back as HTTP 400 due to the company not being found via a query. Here is a simplified version of the view:\r\n\r\n```python\r\nclass MyView(BaseView):\r\n    def get(self, request):\r\n        validator = ReportRecipientsValidator(data=request.query_params)\r\n        if not validator.is_valid():\r\n            return Response(\r\n                {\"errors\": validator.errors}, status=status.HTTP_400_BAD_REQUEST\r\n            )\r\n```\r\n\r\nThe validator is a serializer with a `validate()` method:\r\n\r\n```python\r\nclass ReportRecipientsValidator(serializers.Serializer):\r\n\r\n    company_fmid = serializers.CharField()\r\n\r\n    def validate_company_fmid(self, company_fmid):\r\n        if not Company.objects.filter(fmid=company_fmid).exists():\r\n            raise serializers.ValidationError(f'Company with fmid {company_fmid} not found.')\r\n        return company_fmid\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/607", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/607/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/607/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/607/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/607", "id": 328777442, "node_id": "MDU6SXNzdWUzMjg3Nzc0NDI=", "number": 607, "title": "Unknown hook with latest pytest", "user": {"login": "koxu1996", "id": 6506780, "node_id": "MDQ6VXNlcjY1MDY3ODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/6506780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koxu1996", "html_url": "https://github.com/koxu1996", "followers_url": "https://api.github.com/users/koxu1996/followers", "following_url": "https://api.github.com/users/koxu1996/following{/other_user}", "gists_url": "https://api.github.com/users/koxu1996/gists{/gist_id}", "starred_url": "https://api.github.com/users/koxu1996/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koxu1996/subscriptions", "organizations_url": "https://api.github.com/users/koxu1996/orgs", "repos_url": "https://api.github.com/users/koxu1996/repos", "events_url": "https://api.github.com/users/koxu1996/events{/privacy}", "received_events_url": "https://api.github.com/users/koxu1996/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-02T21:10:52Z", "updated_at": "2019-10-17T05:19:10Z", "closed_at": "2019-02-03T23:17:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "After upgrading _pytest_ to 3.6.0 I am getting `Unknown hook` error:\r\n```\r\n[http@e6efef5e7fb9 app]$ pytest\r\n===================================================================================== test session starts =====================================================================================\r\nplatform linux -- Python 3.6.5, pytest-3.6.0, py-1.5.3, pluggy-0.6.0\r\nDjango settings: app.test_settings (from ini file)\r\nrootdir: /var/www/html/app, inifile: pytest.ini\r\nplugins: django-3.2.1, cov-2.5.1\r\ncollecting 95 items                                                                                                                                                                           INTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/usr/lib/python3.6/site-packages/_pytest/main.py\", line 107, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"/usr/lib/python3.6/site-packages/_pytest/main.py\", line 144, in _main\r\nINTERNALERROR>     config.hook.pytest_collection(session=session)\r\nINTERNALERROR>   File \"/usr/lib/python3.6/site-packages/pluggy/__init__.py\", line 617, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\nINTERNALERROR>   File \"/usr/lib/python3.6/site-packages/pluggy/__init__.py\", line 222, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/lib/python3.6/site-packages/pluggy/__init__.py\", line 216, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec_opts.get('firstresult'),\r\nINTERNALERROR>   File \"/usr/lib/python3.6/site-packages/pluggy/callers.py\", line 201, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/lib/python3.6/site-packages/pluggy/callers.py\", line 76, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/lib/python3.6/site-packages/pluggy/callers.py\", line 180, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/lib/python3.6/site-packages/_pytest/main.py\", line 154, in pytest_collection\r\nINTERNALERROR>     return session.perform_collect()\r\nINTERNALERROR>   File \"/usr/lib/python3.6/site-packages/_pytest/main.py\", line 352, in perform_collect\r\nINTERNALERROR>     self.config.pluginmanager.check_pending()\r\nINTERNALERROR>   File \"/usr/lib/python3.6/site-packages/pluggy/__init__.py\", line 385, in check_pending\r\nINTERNALERROR>     (name, hookimpl.plugin))\r\nINTERNALERROR> pluggy.PluginValidationError: unknown hook 'pytest_django' in plugin <module 'functional_tests.conftest' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f43563f8668>)>\r\n\r\n================================================================================ no tests ran in 1.55 seconds =================================================================================\r\n```\r\nThis is content of _conftest.py_:\r\n```\r\nimport pytest\r\nimport pytest_django.fixtures\r\n\r\n\r\n@pytest.fixture(scope='module')\r\ndef django_db_setup(\r\n    request,\r\n    django_test_environment,\r\n    django_db_blocker,\r\n    django_db_use_migrations,\r\n    django_db_keepdb,\r\n    django_db_createdb,\r\n    django_db_modify_db_settings,\r\n):\r\n    # temporarily no code here\r\n    return pytest_django.fixtures.django_db_setup(\r\n        request,\r\n        django_test_environment,\r\n        django_db_blocker,\r\n        django_db_use_migrations,\r\n        django_db_keepdb,\r\n        django_db_createdb,\r\n        django_db_modify_db_settings,\r\n    )\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/602", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/602/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/602/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/602/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/602", "id": 327169104, "node_id": "MDU6SXNzdWUzMjcxNjkxMDQ=", "number": 602, "title": "Question on database in case of xdist and TestCase based django tests", "user": {"login": "valignatev", "id": 7038954, "node_id": "MDQ6VXNlcjcwMzg5NTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7038954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/valignatev", "html_url": "https://github.com/valignatev", "followers_url": "https://api.github.com/users/valignatev/followers", "following_url": "https://api.github.com/users/valignatev/following{/other_user}", "gists_url": "https://api.github.com/users/valignatev/gists{/gist_id}", "starred_url": "https://api.github.com/users/valignatev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/valignatev/subscriptions", "organizations_url": "https://api.github.com/users/valignatev/orgs", "repos_url": "https://api.github.com/users/valignatev/repos", "events_url": "https://api.github.com/users/valignatev/events{/privacy}", "received_events_url": "https://api.github.com/users/valignatev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-29T04:50:54Z", "updated_at": "2018-08-24T11:35:22Z", "closed_at": "2018-08-24T11:35:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! It's not really a bug report, it's more of a question.\r\n\r\nDocs say that `pytest-django` works with `pytest-xdist` correctly, but only if we use its db marks and fixtures. I wasn't able to find out explicit information on whether `pytest-xdist` will work correctly if I run it with django `TestCase`-based tests. Brief experiments and looking through the code show me that it won't.\r\nI also found #545 which asks for native Django parallel run support.\r\n\r\nSo my question is: Do `TestCase`-based tests share the same database, if being run with xdist?\r\n\r\nUPDATE: also, I probably should mention that I'm using in-memory SQLite database for testing. Comments in django database creation tell me that \"Forking automatically makes a copy of an in-memory database\", but database name is the same for all tests: `file:memorydb_default?mode=memory&cache=shared`, so I'm not sure.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/599", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/599/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/599/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/599/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/599", "id": 326710656, "node_id": "MDU6SXNzdWUzMjY3MTA2NTY=", "number": 599, "title": "pytest-django fails pytest (django.core.exceptions.ImproperlyConfigured)", "user": {"login": "harry-7", "id": 12495975, "node_id": "MDQ6VXNlcjEyNDk1OTc1", "avatar_url": "https://avatars0.githubusercontent.com/u/12495975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harry-7", "html_url": "https://github.com/harry-7", "followers_url": "https://api.github.com/users/harry-7/followers", "following_url": "https://api.github.com/users/harry-7/following{/other_user}", "gists_url": "https://api.github.com/users/harry-7/gists{/gist_id}", "starred_url": "https://api.github.com/users/harry-7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harry-7/subscriptions", "organizations_url": "https://api.github.com/users/harry-7/orgs", "repos_url": "https://api.github.com/users/harry-7/repos", "events_url": "https://api.github.com/users/harry-7/events{/privacy}", "received_events_url": "https://api.github.com/users/harry-7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-05-26T05:02:32Z", "updated_at": "2018-10-30T15:17:15Z", "closed_at": "2018-10-30T15:17:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "- I installed both pytest and pytest-django libraries in my laptop. Then I wanted to run pytest in a folder in which tests have no dependency of django.\r\n  * Expected: I expected everything to run smoothing\r\n  * What actually happeened? pytest failed with the error \r\n```\r\ndjango.core.exceptions.ImproperlyConfigured:` Requested settings, but settings are not configured.\r\nYou must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.\r\n```\r\n\r\n- Pytest version:  3.5.1, Operating System :  Ubuntu Linux 18.04 LTS, python version - 3.6.5\r\n\r\nI don't know whether this is an intended feature or a bug.\r\n\r\nI reported it in pytest repo. They asked me to report it here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/597", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/597/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/597/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/597/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/597", "id": 326208710, "node_id": "MDU6SXNzdWUzMjYyMDg3MTA=", "number": 597, "title": "Getting error \"setUpClass should be a classmethod\"", "user": {"login": "kleptog", "id": 850393, "node_id": "MDQ6VXNlcjg1MDM5Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/850393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kleptog", "html_url": "https://github.com/kleptog", "followers_url": "https://api.github.com/users/kleptog/followers", "following_url": "https://api.github.com/users/kleptog/following{/other_user}", "gists_url": "https://api.github.com/users/kleptog/gists{/gist_id}", "starred_url": "https://api.github.com/users/kleptog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kleptog/subscriptions", "organizations_url": "https://api.github.com/users/kleptog/orgs", "repos_url": "https://api.github.com/users/kleptog/repos", "events_url": "https://api.github.com/users/kleptog/events{/privacy}", "received_events_url": "https://api.github.com/users/kleptog/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-24T16:57:33Z", "updated_at": "2018-05-30T15:00:44Z", "closed_at": "2018-05-30T15:00:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recently some magic was added that tries wrap the setUpClass methods for some reason. Not sure why. In any case, it breaks our testsuite. I've attached a test file to reproduce.\r\n\r\nThe basic issue is that the the setUpClass raises a skip exception sometimes to cause the methods defined in that class to be skipped. This causes the wrapping code to skip restoring the classmethod, leading to errors later on.\r\n\r\nThe error is in this code:\r\n\r\nhttps://github.com/pytest-dev/pytest-django/blob/a67ab3bd0eda8a2b76b4c5954b04482b4f27e20a/pytest_django/plugin.py#L417-L419\r\n\r\nIf the setUpClass() throws an exception (in this case Skip), the restore is skipped and chaos ensues.\r\n\r\nThis is a test file that reproduces it:\r\n\r\n```\r\nimport pytest\r\nfrom django.test import SimpleTestCase\r\n\r\n\r\nclass foo(SimpleTestCase):\r\n    @classmethod\r\n    def setUpClass(cls):\r\n        if cls is foo:\r\n            raise pytest.skip(\"Skip base class\")\r\n        super(foo, cls).setUpClass()\r\n\r\n    def test_shared_foo(self):\r\n        pass\r\n\r\n\r\nclass bar(foo):\r\n    def test_bar1(self):\r\n        pass\r\n\r\n\r\nclass bar2(foo):\r\n    def test_bar21(self):\r\n        pass\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/596", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/596/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/596/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/596/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/596", "id": 325676608, "node_id": "MDU6SXNzdWUzMjU2NzY2MDg=", "number": 596, "title": "Pytest 3.6.0 deprecation: RemovedInPytest4Warning: MarkInfo objects are deprecated", "user": {"login": "PiDelport", "id": 630271, "node_id": "MDQ6VXNlcjYzMDI3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/630271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PiDelport", "html_url": "https://github.com/PiDelport", "followers_url": "https://api.github.com/users/PiDelport/followers", "following_url": "https://api.github.com/users/PiDelport/following{/other_user}", "gists_url": "https://api.github.com/users/PiDelport/gists{/gist_id}", "starred_url": "https://api.github.com/users/PiDelport/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PiDelport/subscriptions", "organizations_url": "https://api.github.com/users/PiDelport/orgs", "repos_url": "https://api.github.com/users/PiDelport/repos", "events_url": "https://api.github.com/users/PiDelport/events{/privacy}", "received_events_url": "https://api.github.com/users/PiDelport/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-23T12:10:21Z", "updated_at": "2018-05-30T20:01:23Z", "closed_at": "2018-05-30T18:24:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pytest 3.6.0 (released 2018-05-23) raises the following deprecation warning with pytest-django (3.2.1):\r\n\r\n> RemovedInPytest4Warning: MarkInfo objects are deprecated as they contain merged marks which are hard to deal with correctly.\r\n> Please use node.get_closest_marker(name) or node.iter_markers(name).\r\n\r\n* Release notes: https://docs.pytest.org/en/latest/changelog.html#pytest-3-6-0-2018-05-23\r\n* Code update information: https://docs.pytest.org/en/latest/mark.html#marker-revamp-and-iteration\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/593", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/593/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/593/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/593/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/593", "id": 321186783, "node_id": "MDU6SXNzdWUzMjExODY3ODM=", "number": 593, "title": "Support testing migrations in tests", "user": {"login": "asfaltboy", "id": 321520, "node_id": "MDQ6VXNlcjMyMTUyMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/321520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asfaltboy", "html_url": "https://github.com/asfaltboy", "followers_url": "https://api.github.com/users/asfaltboy/followers", "following_url": "https://api.github.com/users/asfaltboy/following{/other_user}", "gists_url": "https://api.github.com/users/asfaltboy/gists{/gist_id}", "starred_url": "https://api.github.com/users/asfaltboy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asfaltboy/subscriptions", "organizations_url": "https://api.github.com/users/asfaltboy/orgs", "repos_url": "https://api.github.com/users/asfaltboy/repos", "events_url": "https://api.github.com/users/asfaltboy/events{/privacy}", "received_events_url": "https://api.github.com/users/asfaltboy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-08T13:29:29Z", "updated_at": "2020-03-15T12:16:19Z", "closed_at": "2020-03-15T12:16:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As in this gist: https://gist.github.com/blueyed/4fb0a807104551f103e6 , it would be great to get this as part of pytest-django, or otherwise as a separate plugin.\r\n\r\n@TauPan 's fork of my fixture gist worked pretty good for me in latest Django: https://gist.github.com/TauPan/aec52e398d7288cb5a62895916182a9f\r\n\r\nSome things that are broken or unsupported that would be nice to have (or at least need to be documented if we include this \"as is\"):\r\n\r\n- No support for capturing exceptions during migration with `pytest.raises`\r\n- Detecting and updating `settings.MIGRATION_MODULES` for a migration test\r\n- No support for factoryboy (of course)\r\n\r\nThis ticket is mainly for discussing better ways of testing django data migrations in pytest.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/585", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/585/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/585/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/585/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/585", "id": 300946787, "node_id": "MDU6SXNzdWUzMDA5NDY3ODc=", "number": 585, "title": "New release compatible with Django 2.0.", "user": {"login": "felixxm", "id": 2865885, "node_id": "MDQ6VXNlcjI4NjU4ODU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2865885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixxm", "html_url": "https://github.com/felixxm", "followers_url": "https://api.github.com/users/felixxm/followers", "following_url": "https://api.github.com/users/felixxm/following{/other_user}", "gists_url": "https://api.github.com/users/felixxm/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixxm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixxm/subscriptions", "organizations_url": "https://api.github.com/users/felixxm/orgs", "repos_url": "https://api.github.com/users/felixxm/repos", "events_url": "https://api.github.com/users/felixxm/events{/privacy}", "received_events_url": "https://api.github.com/users/felixxm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-28T09:19:57Z", "updated_at": "2018-02-28T22:03:10Z", "closed_at": "2018-02-28T19:59:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I will be grateful for a new release that will support Django 2.0. If you need any help, I volunteer.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/584", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/584/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/584/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/584/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/584", "id": 300021819, "node_id": "MDU6SXNzdWUzMDAwMjE4MTk=", "number": 584, "title": "Example to test views.py classes?", "user": {"login": "koddr", "id": 11155743, "node_id": "MDQ6VXNlcjExMTU1NzQz", "avatar_url": "https://avatars2.githubusercontent.com/u/11155743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koddr", "html_url": "https://github.com/koddr", "followers_url": "https://api.github.com/users/koddr/followers", "following_url": "https://api.github.com/users/koddr/following{/other_user}", "gists_url": "https://api.github.com/users/koddr/gists{/gist_id}", "starred_url": "https://api.github.com/users/koddr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koddr/subscriptions", "organizations_url": "https://api.github.com/users/koddr/orgs", "repos_url": "https://api.github.com/users/koddr/repos", "events_url": "https://api.github.com/users/koddr/events{/privacy}", "received_events_url": "https://api.github.com/users/koddr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-25T12:21:50Z", "updated_at": "2020-07-29T05:30:57Z", "closed_at": "2020-07-29T05:30:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! \ud83d\udc4b \r\n\r\nI'm newbie in `py.test`, could you please share some example, how to build tests for `views.py` classes? POST/GET methods? It will be great to understand.\r\n\r\nThanks for awesome package, btw \ud83d\udc4d ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/583", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/583/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/583/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/583/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/583", "id": 296781053, "node_id": "MDU6SXNzdWUyOTY3ODEwNTM=", "number": 583, "title": "Settings module cannot use environment variables set in pytest.ini", "user": {"login": "anlutro", "id": 163093, "node_id": "MDQ6VXNlcjE2MzA5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/163093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anlutro", "html_url": "https://github.com/anlutro", "followers_url": "https://api.github.com/users/anlutro/followers", "following_url": "https://api.github.com/users/anlutro/following{/other_user}", "gists_url": "https://api.github.com/users/anlutro/gists{/gist_id}", "starred_url": "https://api.github.com/users/anlutro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anlutro/subscriptions", "organizations_url": "https://api.github.com/users/anlutro/orgs", "repos_url": "https://api.github.com/users/anlutro/repos", "events_url": "https://api.github.com/users/anlutro/events{/privacy}", "received_events_url": "https://api.github.com/users/anlutro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 877391872, "node_id": "MDU6TGFiZWw4NzczOTE4NzI=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/needs-info", "name": "needs-info", "color": "66f4d6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-13T15:36:57Z", "updated_at": "2018-06-08T23:02:18Z", "closed_at": "2018-06-08T23:02:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the following `pytest.ini`:\r\n\r\n```\r\n[pytest]\r\nDJANGO_SETTINGS_MODULE = example.settings.dev\r\nenv = DJANGO_SECRET_KEY=InsecureTestKey\r\n```\r\n\r\nand a settings module file which contains this:\r\n\r\n```python\r\nSECRET_KEY = os.environ['DJANGO_SECRET_KEY']\r\n```\r\n\r\nrunning pytest fails because the environment variable is not set at the time pytest (indirectly?) imports the settings module.\r\n\r\nOne obvious solution is to just require developers to set the environment variables themselves before running the tests, but that's something I'd like to avoid.\r\n\r\nWe could also rewrite our settings module to never *require* environment variables to be set, but I do prefer the code to fail early if required environment variables aren't set.\r\n\r\nI'm not sure if this is even possible to solve with the pytest plugin system.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/582", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/582/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/582/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/582/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/582", "id": 296728722, "node_id": "MDU6SXNzdWUyOTY3Mjg3MjI=", "number": 582, "title": "'FixtureRequest' object has no attribute 'get_host'", "user": {"login": "stuaxo", "id": 179677, "node_id": "MDQ6VXNlcjE3OTY3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/179677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stuaxo", "html_url": "https://github.com/stuaxo", "followers_url": "https://api.github.com/users/stuaxo/followers", "following_url": "https://api.github.com/users/stuaxo/following{/other_user}", "gists_url": "https://api.github.com/users/stuaxo/gists{/gist_id}", "starred_url": "https://api.github.com/users/stuaxo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stuaxo/subscriptions", "organizations_url": "https://api.github.com/users/stuaxo/orgs", "repos_url": "https://api.github.com/users/stuaxo/repos", "events_url": "https://api.github.com/users/stuaxo/events{/privacy}", "received_events_url": "https://api.github.com/users/stuaxo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1033570160, "node_id": "MDU6TGFiZWwxMDMzNTcwMTYw", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/invalid", "name": "invalid", "color": "cccccc", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-13T13:01:09Z", "updated_at": "2018-08-24T12:25:14Z", "closed_at": "2018-08-23T20:05:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was trying to do some testing in Wagtail, using the middleware there, which calls get_host on request, this failed because get_host doesn't seem to be implemented on pytest-djangos flavour.\r\n\r\nThis is the function I'm trying to call using pytests request:\r\n\r\nhttps://github.com/wagtail/wagtail/blob/d483c8d46543cd75caac8d8b4067173646072c81/wagtail/core/models.py#L95", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/581", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/581/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/581/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/581/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/581", "id": 296154011, "node_id": "MDU6SXNzdWUyOTYxNTQwMTE=", "number": 581, "title": "Add pytest to requirements.txt...", "user": {"login": "ptressel", "id": 618916, "node_id": "MDQ6VXNlcjYxODkxNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/618916?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptressel", "html_url": "https://github.com/ptressel", "followers_url": "https://api.github.com/users/ptressel/followers", "following_url": "https://api.github.com/users/ptressel/following{/other_user}", "gists_url": "https://api.github.com/users/ptressel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptressel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptressel/subscriptions", "organizations_url": "https://api.github.com/users/ptressel/orgs", "repos_url": "https://api.github.com/users/ptressel/repos", "events_url": "https://api.github.com/users/ptressel/events{/privacy}", "received_events_url": "https://api.github.com/users/ptressel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-11T02:38:55Z", "updated_at": "2018-04-14T13:45:25Z", "closed_at": "2018-04-14T13:45:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be a kindness to projects using pyteste-django if pytest (which is a direct dependency for pytest-django) could be added to requirements.txt.  Otherwise, pip / pipenv can't infer the dependency graph, and projects using pytest-django must themselves add pytest *before* pytest-django in their own dependencies.  Thanks!  Details in this PR: pytest-dev/pytest-django#579", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/574", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/574/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/574/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/574/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/574", "id": 293241389, "node_id": "MDU6SXNzdWUyOTMyNDEzODk=", "number": 574, "title": "pytest unable to import db fixture, yet lists it as available option", "user": {"login": "hancush", "id": 12176173, "node_id": "MDQ6VXNlcjEyMTc2MTcz", "avatar_url": "https://avatars2.githubusercontent.com/u/12176173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hancush", "html_url": "https://github.com/hancush", "followers_url": "https://api.github.com/users/hancush/followers", "following_url": "https://api.github.com/users/hancush/following{/other_user}", "gists_url": "https://api.github.com/users/hancush/gists{/gist_id}", "starred_url": "https://api.github.com/users/hancush/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hancush/subscriptions", "organizations_url": "https://api.github.com/users/hancush/orgs", "repos_url": "https://api.github.com/users/hancush/repos", "events_url": "https://api.github.com/users/hancush/events{/privacy}", "received_events_url": "https://api.github.com/users/hancush/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 240429390, "node_id": "MDU6TGFiZWwyNDA0MjkzOTA=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/documentation", "name": "documentation", "color": "fad8c7", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-01-31T17:16:02Z", "updated_at": "2018-06-16T21:29:23Z", "closed_at": "2018-06-16T21:29:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running Python 3.5.2, pytest 3.4.0, pytest-django 3.1.2, and Django 1.10.\r\n\r\nI have a test directory structured like this:\r\n\r\n```\r\ntests\r\n\u251c\u2500\u2500 __init__.py\r\n\u251c\u2500\u2500 conftest.py (global fixtures)\r\n\u251c\u2500\u2500 submodule\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conftest.py (module-specific fixtures)\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tests\r\n\u251c\u2500\u2500 submodule\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conftest.py (module-specific fixtures)\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tests\r\n\u2514\u2500\u2500 test_config.py\r\n```\r\n\r\nI am able to include the `transactional_db` fixture for transactional database access in a fixture without issue. But separately, when I include the `db` fixture for non-transactional database access in a fixture, and run the tests with `pytest`, I get this error:\r\n\r\n```\r\nfile /Users/Hannah/hackz/datamade/large-lots/tests/lots_client/test_eds.py, line 6\r\n  @pytest.mark.django_db\r\n  def test_eds_submission(application, client):\r\nfile /Users/Hannah/.virtualenvs/large-lots/lib/python3.5/site-packages/pytest_django/plugin.py, line 363\r\n  @pytest.fixture(autouse=True)\r\n  def _django_db_marker(request):\r\nfile /Users/Hannah/.virtualenvs/large-lots/lib/python3.5/site-packages/pytest_django/fixtures.py, line 141\r\n  @pytest.fixture(scope='function')\r\n  def db(request, django_db_setup, django_db_blocker):\r\nfile /Users/Hannah/hackz/datamade/large-lots/tests/lots_client/conftest.py, line 14\r\n  @pytest.fixture\r\n  @pytest.mark.django_db\r\n  def django_db_setup(django_db_setup, db):\r\nE       fixture 'db' not found\r\n>       available fixtures: _dj_autoclear_mailbox, _django_clear_site_cache, _django_db_marker, _django_set_urlconf, _django_setup_unittest, _fail_for_invalid_template_variable, _live_server_helper, _template_string_if_invalid_marker, admin_client, admin_user, application, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, client, db, django_db_blocker, django_db_keepdb, django_db_modify_db_settings, django_db_modify_db_settings_xdist_suffix, django_db_setup, django_db_use_migrations, django_test_environment, django_user_model, django_username_field, doctest_namespace, live_server, mailoutbox, monkeypatch, pytestconfig, record_xml_property, recwarn, rf, settings, tmpdir, tmpdir_factory, transactional_db\r\n>       use 'pytest --fixtures [testpath]' for help on them.\r\n```\r\n\r\nNotice that `db` is among the available fixtures. It's also included when I run `pytest --fixtures [testpath]`. \r\n\r\nI've patched the problem by importing the `db` fixture directly from `pytest_django`, but I'm curious why this issue is occurring, and whether it's a bug or I've set something up incorrectly.\r\n\r\nThanks for your help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/567", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/567/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/567/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/567/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/567", "id": 284588414, "node_id": "MDU6SXNzdWUyODQ1ODg0MTQ=", "number": 567, "title": "Error running tox from inside a virtualenv", "user": {"login": "tony", "id": 26336, "node_id": "MDQ6VXNlcjI2MzM2", "avatar_url": "https://avatars0.githubusercontent.com/u/26336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tony", "html_url": "https://github.com/tony", "followers_url": "https://api.github.com/users/tony/followers", "following_url": "https://api.github.com/users/tony/following{/other_user}", "gists_url": "https://api.github.com/users/tony/gists{/gist_id}", "starred_url": "https://api.github.com/users/tony/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tony/subscriptions", "organizations_url": "https://api.github.com/users/tony/orgs", "repos_url": "https://api.github.com/users/tony/repos", "events_url": "https://api.github.com/users/tony/events{/privacy}", "received_events_url": "https://api.github.com/users/tony/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-26T17:45:26Z", "updated_at": "2018-09-16T04:43:07Z", "closed_at": "2018-09-16T04:43:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "0fde43b\r\n\r\npython 3.6.3\r\n\r\nhigh sierra\r\n\r\ntox 2.9.1\r\n\r\nvirtualenv 15.1.0\r\n\r\n```\r\npypy27-checkqa: Error creating virtualenv. Note that some special characters (e.g. ':' and unicode symbols) in paths are not supported by virtualenv. Error details: InvocationError('/Users/me/work/python/pytest-django/.env/bin/python -m virtualenv --python /Users/me/work/python/pytest-django/.env/bin/python - pypy27-checkqa (see /Users/me/work/python/pytest-django/.tox/- pypy27-checkqa/log/- pypy27-checkqa-0.log)', 2)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/561", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/561/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/561/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/561/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/561", "id": 283516829, "node_id": "MDU6SXNzdWUyODM1MTY4Mjk=", "number": 561, "title": "Request feature", "user": {"login": "elcolie", "id": 18206728, "node_id": "MDQ6VXNlcjE4MjA2NzI4", "avatar_url": "https://avatars0.githubusercontent.com/u/18206728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elcolie", "html_url": "https://github.com/elcolie", "followers_url": "https://api.github.com/users/elcolie/followers", "following_url": "https://api.github.com/users/elcolie/following{/other_user}", "gists_url": "https://api.github.com/users/elcolie/gists{/gist_id}", "starred_url": "https://api.github.com/users/elcolie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elcolie/subscriptions", "organizations_url": "https://api.github.com/users/elcolie/orgs", "repos_url": "https://api.github.com/users/elcolie/repos", "events_url": "https://api.github.com/users/elcolie/events{/privacy}", "received_events_url": "https://api.github.com/users/elcolie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-20T10:30:03Z", "updated_at": "2018-03-16T08:58:50Z", "closed_at": "2018-03-16T08:58:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the Django official docs. It has `reset_sequence` feature \r\nBut I do not found it in `pytest-django` docs\r\n\r\nHow can I achieve same thing in `unittest`?\r\n\r\n**Reference:**\r\nhttps://docs.djangoproject.com/en/2.0/topics/testing/advanced/#django.test.TransactionTestCase.reset_sequences", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/557", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/557/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/557/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/557/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/557", "id": 279944596, "node_id": "MDU6SXNzdWUyNzk5NDQ1OTY=", "number": 557, "title": "Regression: `settings` fixture breaks with django-appconfig", "user": {"login": "julen", "id": 16768, "node_id": "MDQ6VXNlcjE2NzY4", "avatar_url": "https://avatars0.githubusercontent.com/u/16768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/julen", "html_url": "https://github.com/julen", "followers_url": "https://api.github.com/users/julen/followers", "following_url": "https://api.github.com/users/julen/following{/other_user}", "gists_url": "https://api.github.com/users/julen/gists{/gist_id}", "starred_url": "https://api.github.com/users/julen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/julen/subscriptions", "organizations_url": "https://api.github.com/users/julen/orgs", "repos_url": "https://api.github.com/users/julen/repos", "events_url": "https://api.github.com/users/julen/events{/privacy}", "received_events_url": "https://api.github.com/users/julen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-06T23:27:15Z", "updated_at": "2018-02-28T11:43:58Z", "closed_at": "2017-12-07T15:08:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I had the need to use the _new_ `settings` fixture (from #324, thanks for that btw!) in order to write some timezone-related tests, so I upgraded from 3.0.0 to 3.1.2, wrote the tests and all looked fine when run in isolation.\r\n\r\nHowever, when running the entire test suite, some view tests that render templates and use [django-statici18n](https://github.com/zyegfryed/django-statici18n) (which in turn uses [django-appconf](https://github.com/django-compressor/django-appconf/)) are now breaking. The reason for the breakage is that default settings from statici18n cannot be found, i.e. those settings which I don't explicitly set but should be handled automatically by django-appconf, e.g.\r\n\r\n```py\r\n...\r\n  File \".../lib/python2.7/site-packages/django/template/library.py\", line 203, in render\r\n    output = self.func(*resolved_args, **resolved_kwargs)\r\n  File \".../lib/python2.7/site-packages/statici18n/templatetags/statici18n.py\", line 33, in statici18n\r\n    return static(get_path(locale))\r\n  File \".../lib/python2.7/site-packages/statici18n/templatetags/statici18n.py\", line 21, in get_path\r\n    get_filename(locale, settings.STATICI18N_DOMAIN))\r\n  File \".../lib/python2.7/site-packages/statici18n/utils.py\", line 27, in get_filename\r\n    (settings.STATICI18N_FILENAME_FUNCTION, e))\r\n  File \".../lib/python2.7/site-packages/django/conf/__init__.py\", line 54, in __getattr__\r\n    return getattr(self._wrapped, name)\r\nAttributeError: 'Settings' object has no attribute 'STATICI18N_FILENAME_FUNCTION'\r\n```\r\n\r\nMy current workaround is manually setting the defaults that are missing, although my expectation would be for it to work transparently as it did in pytest-django 3.0.0 and below.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/553", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/553/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/553/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/553/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/553", "id": 279662308, "node_id": "MDU6SXNzdWUyNzk2NjIzMDg=", "number": 553, "title": "Document use of authenticated `client` and `django_user_model`", "user": {"login": "shacker", "id": 102694, "node_id": "MDQ6VXNlcjEwMjY5NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/102694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shacker", "html_url": "https://github.com/shacker", "followers_url": "https://api.github.com/users/shacker/followers", "following_url": "https://api.github.com/users/shacker/following{/other_user}", "gists_url": "https://api.github.com/users/shacker/gists{/gist_id}", "starred_url": "https://api.github.com/users/shacker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shacker/subscriptions", "organizations_url": "https://api.github.com/users/shacker/orgs", "repos_url": "https://api.github.com/users/shacker/repos", "events_url": "https://api.github.com/users/shacker/events{/privacy}", "received_events_url": "https://api.github.com/users/shacker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-06T08:11:27Z", "updated_at": "2017-12-25T16:40:28Z", "closed_at": "2017-12-25T16:40:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "From my first reading of the docs, it appeared that pytest-django provided an authenticatable admin user (`admin_client`) or an anonymous standard user (`client`) but no way to authenticate a normal user. Only after reading the source code did I discover that `client.login()` was possible (which makes sense now that I grok that it wraps Django's test client, but wasn't clear at first). \r\n\r\nSo I started to document that, then realized the docs could use additional general cleanup in places, so am making a PR for a general helpers doc tweak.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/550", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/550/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/550/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/550/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/550", "id": 278825042, "node_id": "MDU6SXNzdWUyNzg4MjUwNDI=", "number": 550, "title": "Fix tests for pytest 3.3", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-03T22:03:28Z", "updated_at": "2017-12-03T22:39:49Z", "closed_at": "2017-12-03T22:39:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Some tests are failing because output matching does not take into account the new `console_output_style` from pytest 3.3.\r\n\r\nShould we add `['-o', 'console_output_style', 'cassic']` to affected django_testdir.runpytest_subprocess, or rather match it using `*` at then end?\r\nThe latter might not be reliable though.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/543", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/543/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/543/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/543/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/543", "id": 276444685, "node_id": "MDU6SXNzdWUyNzY0NDQ2ODU=", "number": 543, "title": "Proposal: add a --recreate-db-if-migrations/--try-reuse-db option", "user": {"login": "MRigal", "id": 2190327, "node_id": "MDQ6VXNlcjIxOTAzMjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2190327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MRigal", "html_url": "https://github.com/MRigal", "followers_url": "https://api.github.com/users/MRigal/followers", "following_url": "https://api.github.com/users/MRigal/following{/other_user}", "gists_url": "https://api.github.com/users/MRigal/gists{/gist_id}", "starred_url": "https://api.github.com/users/MRigal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MRigal/subscriptions", "organizations_url": "https://api.github.com/users/MRigal/orgs", "repos_url": "https://api.github.com/users/MRigal/repos", "events_url": "https://api.github.com/users/MRigal/events{/privacy}", "received_events_url": "https://api.github.com/users/MRigal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-23T17:39:35Z", "updated_at": "2017-12-04T13:22:31Z", "closed_at": "2017-12-04T13:22:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "In more recent versions of Django (1.11, but maybe also 1.10), we might have some new options that would make our testing life more easy :-)\r\n\r\nWhat about adding a new _--recreate-db-if-migrations_ or _--try-reuse-db_ option that would just do the best of both worlds?\r\n\r\nIn principle, it would check:\r\n\r\nAre there any new/unapplied migrations, with the equivalent of `python manage.py showmigrations -l | grep -v '[X]'`?\r\n-> YES: use --create-db logic\r\n-> NO: use --reuse-db logic\r\n\r\nIt would also obviously not drop the DB.\r\n\r\nWhat do you think about it? Does it sound reasonable to you also?\r\nI could start to work on a PR, even more if you help me to figure out where/how to do a clean test for new migrations.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/542", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/542/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/542/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/542/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/542", "id": 275776448, "node_id": "MDU6SXNzdWUyNzU3NzY0NDg=", "number": 542, "title": "Catching Django-specific warnings in pytest", "user": {"login": "MRigal", "id": 2190327, "node_id": "MDQ6VXNlcjIxOTAzMjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2190327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MRigal", "html_url": "https://github.com/MRigal", "followers_url": "https://api.github.com/users/MRigal/followers", "following_url": "https://api.github.com/users/MRigal/following{/other_user}", "gists_url": "https://api.github.com/users/MRigal/gists{/gist_id}", "starred_url": "https://api.github.com/users/MRigal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MRigal/subscriptions", "organizations_url": "https://api.github.com/users/MRigal/orgs", "repos_url": "https://api.github.com/users/MRigal/repos", "events_url": "https://api.github.com/users/MRigal/events{/privacy}", "received_events_url": "https://api.github.com/users/MRigal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117315041, "node_id": "MDU6TGFiZWwxMTczMTUwNDE=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bitesize", "name": "bitesize", "color": "5319e7", "default": false, "description": null}, {"id": 240429390, "node_id": "MDU6TGFiZWwyNDA0MjkzOTA=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/documentation", "name": "documentation", "color": "fad8c7", "default": true, "description": null}, {"id": 1064393698, "node_id": "MDU6TGFiZWwxMDY0MzkzNjk4", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/question", "name": "question", "color": "69f487", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-21T16:28:45Z", "updated_at": "2019-02-03T23:21:00Z", "closed_at": "2019-02-03T23:20:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to turn the `RemovedInNextVersionWarning` warnings to errors, as described in https://docs.pytest.org/en/latest/warnings.html \r\n\r\nUnfortunately, when I add to pytest.ini the following lines:\r\n\r\n```\r\nfilterwarnings =\r\n    error::RemovedInDjango20Warning\r\n```\r\n\r\nI end up with (it is looking strictly for Python internal warnings):\r\n```\r\nINTERNALERROR>   File \"/myfolder/python3.6/warnings.py\", line 236, in _getcategory\r\nINTERNALERROR>     raise _OptionError(\"unknown warning category: %r\" % (category,))\r\nINTERNALERROR> warnings._OptionError: unknown warning category: 'RemovedInDjango20Warning'\r\n```\r\n\r\nShould/could pytest-django as a plugin make pytest aware of more possible warnings to handle?\r\n\r\nBonus question (slightly out of the scope): Even better would be a possibility to filter out the DjangoWarnings coming from the written code to the warnings coming from other libraries :-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/539", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/539/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/539/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/539/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/539", "id": 273421538, "node_id": "MDU6SXNzdWUyNzM0MjE1Mzg=", "number": 539, "title": "Parameterizing django settings across all tests", "user": {"login": "mo-mughrabi", "id": 772251, "node_id": "MDQ6VXNlcjc3MjI1MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/772251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mo-mughrabi", "html_url": "https://github.com/mo-mughrabi", "followers_url": "https://api.github.com/users/mo-mughrabi/followers", "following_url": "https://api.github.com/users/mo-mughrabi/following{/other_user}", "gists_url": "https://api.github.com/users/mo-mughrabi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mo-mughrabi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mo-mughrabi/subscriptions", "organizations_url": "https://api.github.com/users/mo-mughrabi/orgs", "repos_url": "https://api.github.com/users/mo-mughrabi/repos", "events_url": "https://api.github.com/users/mo-mughrabi/events{/privacy}", "received_events_url": "https://api.github.com/users/mo-mughrabi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-13T13:01:43Z", "updated_at": "2017-11-13T13:24:10Z", "closed_at": "2017-11-13T13:24:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello everyone, \r\n\r\nThis is more of a question than an issue, am working on building reusable applications that would allow us to use in different projects. For that, we are using pytest and pytest-django to run all tests in django, at the moment most tests uses parameterized tests so we can pass different django settings and validate the tests accordingly. \r\n\r\nAs described this means that we had to explicitly define the parameteized testing for each test case. Hence, am looking for a way to cause pytest to run the entire tests using different settings as parameterized values for each test. \r\n\r\n```\r\ndef pytest_generate_tests(metafunc):\r\n    # if 'stringinput' in metafunc.fixturenames:\r\n    if 'settings' in metafunc.fixturenames:\r\n        metafunc.parametrize(\r\n            'settings',\r\n            list_of_settings,\r\n            scope='session'\r\n        )\r\n```\r\n\r\nI used something similar to the above to pass different settings to tests, but this also means we should define a `settings` in each test case. \r\n\r\nIs there any recommended way we can do that without having to go through all tests and make sure `settings` fixture is present? \r\n\r\nThanks, \r\n\r\nFYI @mou55", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/531", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/531/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/531/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/531/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/531", "id": 269138964, "node_id": "MDU6SXNzdWUyNjkxMzg5NjQ=", "number": 531, "title": "Multiple django.setup() calls break other plugins", "user": {"login": "pakal", "id": 330629, "node_id": "MDQ6VXNlcjMzMDYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/330629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pakal", "html_url": "https://github.com/pakal", "followers_url": "https://api.github.com/users/pakal/followers", "following_url": "https://api.github.com/users/pakal/following{/other_user}", "gists_url": "https://api.github.com/users/pakal/gists{/gist_id}", "starred_url": "https://api.github.com/users/pakal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pakal/subscriptions", "organizations_url": "https://api.github.com/users/pakal/orgs", "repos_url": "https://api.github.com/users/pakal/repos", "events_url": "https://api.github.com/users/pakal/events{/privacy}", "received_events_url": "https://api.github.com/users/pakal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-10-27T15:06:35Z", "updated_at": "2018-08-05T16:19:36Z", "closed_at": "2018-08-05T16:19:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "In pytest-django hooks, _setup_django() is called multiple times, in conftest setup and as a a trylast, and it leads to multiple resets of logging config (driven by django LOGGING setting).\r\n\r\nInbetween these calls, other plugins like pytest-capturelog try to setup their own logging handlers, but these get reset. I've monkey patched like below, but I guess _setup_django() could use a flag to prevent its multiple execution.\r\n\r\n```\r\ndef pytest_configure():\r\n    # we have to prevent bug where pytest calls django.setup() multiple\r\n    # times, breaking the logging conf (and pytest-capturelog plugin)\r\n    import django.apps\r\n    if django.apps.apps.ready:\r\n        django.setup = lambda: None\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/528", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/528/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/528/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/528/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/528", "id": 266318756, "node_id": "MDU6SXNzdWUyNjYzMTg3NTY=", "number": 528, "title": "adding a user to a group", "user": {"login": "highpost", "id": 5192798, "node_id": "MDQ6VXNlcjUxOTI3OTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5192798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/highpost", "html_url": "https://github.com/highpost", "followers_url": "https://api.github.com/users/highpost/followers", "following_url": "https://api.github.com/users/highpost/following{/other_user}", "gists_url": "https://api.github.com/users/highpost/gists{/gist_id}", "starred_url": "https://api.github.com/users/highpost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/highpost/subscriptions", "organizations_url": "https://api.github.com/users/highpost/orgs", "repos_url": "https://api.github.com/users/highpost/repos", "events_url": "https://api.github.com/users/highpost/events{/privacy}", "received_events_url": "https://api.github.com/users/highpost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-18T00:06:35Z", "updated_at": "2017-10-20T04:55:18Z", "closed_at": "2017-10-20T04:55:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm testing a basic class-based view with a permission system based on the Django Group model. But before I can begin to test these permissions, I need to first create a user object (easy), then create a Group object, add the User object to the new Group object and save the results.\r\n```\r\nimport pytest\r\nfrom django.contrib.auth.models import User, Group\r\nfrom django.test import RequestFactory\r\nfrom ..views import TeacherView\r\n\r\n@pytest.mark.django_db\r\ndef test_authenticated_user(self, rf):\r\n    request = rf.get('/myproj/myapp/teacher/')\r\n    user = User.objects.create_user('person', 'person@example.com', 'password')\r\n    parents = Group.objects.create(name='parents')\r\n    user.groups.add(parents)\r\n    user.save()\r\n    parents.save()\r\n    request.user = user\r\n    response = TeacherView.as_view()(request)\r\n\r\n    assert response.status_code != 200\r\n```\r\nIt seems that creating the group works and after adding a member I can look at the group's members with parents.user_set.all(). But then the user object shows an empty list of group memberships:\r\n- parents.user_set.all()    # works\r\n- user.groups                   # auth.Group.None\r\n- parents.user_set.add(user)                  # auth.Group.None\r\n\r\nI've done this sort of thing before with custom manage.py commands. Am I doing anything wrong here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/519", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/519/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/519/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/519/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/519", "id": 260289271, "node_id": "MDU6SXNzdWUyNjAyODkyNzE=", "number": 519, "title": "No module named TestCommon", "user": {"login": "dan-klasson", "id": 1314838, "node_id": "MDQ6VXNlcjEzMTQ4Mzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1314838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dan-klasson", "html_url": "https://github.com/dan-klasson", "followers_url": "https://api.github.com/users/dan-klasson/followers", "following_url": "https://api.github.com/users/dan-klasson/following{/other_user}", "gists_url": "https://api.github.com/users/dan-klasson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dan-klasson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dan-klasson/subscriptions", "organizations_url": "https://api.github.com/users/dan-klasson/orgs", "repos_url": "https://api.github.com/users/dan-klasson/repos", "events_url": "https://api.github.com/users/dan-klasson/events{/privacy}", "received_events_url": "https://api.github.com/users/dan-klasson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-25T14:05:56Z", "updated_at": "2017-09-25T17:28:09Z", "closed_at": "2017-09-25T14:29:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting below when running `pytest`. I'm using `pytest-django-3.1.2`\r\n\r\n    (foo) dan@dan-laptop:~/foo/django$ pytest\r\n    ============================= test session starts ==============================\r\n    platform linux2 -- Python 2.7.12, pytest-3.2.2, py-1.4.34, pluggy-0.4.0\r\n    Django settings: unreal.settings.dev (from ini file)\r\n    rootdir: /home/dan/foo/django, inifile: pytest.ini\r\n    plugins: django-3.1.2\r\n    collected 455 items / 1 errors                                                  \r\n\r\n    ==================================== ERRORS ====================================\r\n    _ ERROR collecting node_modules/node-gyp/gyp/pylib/gyp/generator/ninja_test.py _\r\n    ImportError while importing test module '/home/dan/foo/django/node_modules/node-gyp/gyp/pylib/gyp/generator/ninja_test.py'.\r\n    Hint: make sure your test modules/packages have valid Python names.\r\n    Traceback:\r\n    node_modules/node-gyp/gyp/pylib/gyp/generator/ninja_test.py:13: in <module>\r\n        import TestCommon\r\n    E   ImportError: No module named TestCommon\r\n    !!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!\r\n    =========================== 1 error in 8.35 seconds ============================\r\n    (foo) dan@dan-laptop:~/foo/django$ \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/512", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/512/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/512/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/512/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/512", "id": 255912460, "node_id": "MDU6SXNzdWUyNTU5MTI0NjA=", "number": 512, "title": "no warning/error if exception occurs in your settings.py", "user": {"login": "cjw296", "id": 632049, "node_id": "MDQ6VXNlcjYzMjA0OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/632049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjw296", "html_url": "https://github.com/cjw296", "followers_url": "https://api.github.com/users/cjw296/followers", "following_url": "https://api.github.com/users/cjw296/following{/other_user}", "gists_url": "https://api.github.com/users/cjw296/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjw296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjw296/subscriptions", "organizations_url": "https://api.github.com/users/cjw296/orgs", "repos_url": "https://api.github.com/users/cjw296/repos", "events_url": "https://api.github.com/users/cjw296/events{/privacy}", "received_events_url": "https://api.github.com/users/cjw296/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-07T11:59:05Z", "updated_at": "2017-09-07T20:11:08Z", "closed_at": "2017-09-07T20:11:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears that the exception is just swallowed, which creates very weird behaviour if you settings are mostly loaded, but partly not because execution of your test settings.py fails half way though.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/510", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/510/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/510/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/510/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/510", "id": 254431901, "node_id": "MDU6SXNzdWUyNTQ0MzE5MDE=", "number": 510, "title": "How can I use Django's built-in TestCase methods", "user": {"login": "guyjacks", "id": 6286429, "node_id": "MDQ6VXNlcjYyODY0Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6286429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guyjacks", "html_url": "https://github.com/guyjacks", "followers_url": "https://api.github.com/users/guyjacks/followers", "following_url": "https://api.github.com/users/guyjacks/following{/other_user}", "gists_url": "https://api.github.com/users/guyjacks/gists{/gist_id}", "starred_url": "https://api.github.com/users/guyjacks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guyjacks/subscriptions", "organizations_url": "https://api.github.com/users/guyjacks/orgs", "repos_url": "https://api.github.com/users/guyjacks/repos", "events_url": "https://api.github.com/users/guyjacks/events{/privacy}", "received_events_url": "https://api.github.com/users/guyjacks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-08-31T18:46:35Z", "updated_at": "2017-08-31T19:18:44Z", "closed_at": "2017-08-31T19:18:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example, how would I call assertQuerysetEqual?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/499", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/499/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/499/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/499/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/499", "id": 246475417, "node_id": "MDU6SXNzdWUyNDY0NzU0MTc=", "number": 499, "title": "Making django_db_blocker un-opt-outable is zealous and lame", "user": {"login": "jamesob", "id": 73197, "node_id": "MDQ6VXNlcjczMTk3", "avatar_url": "https://avatars0.githubusercontent.com/u/73197?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesob", "html_url": "https://github.com/jamesob", "followers_url": "https://api.github.com/users/jamesob/followers", "following_url": "https://api.github.com/users/jamesob/following{/other_user}", "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions", "organizations_url": "https://api.github.com/users/jamesob/orgs", "repos_url": "https://api.github.com/users/jamesob/repos", "events_url": "https://api.github.com/users/jamesob/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-07-28T22:42:23Z", "updated_at": "2018-03-09T09:46:13Z", "closed_at": "2017-08-13T17:49:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Use of `django_db_blocker` to cripple use of the database outside of specially tagged tests and fixtures interferes with Django model `get_or_create` calls at import time, which is how some systems ensure the presence of fundamental data across environments.\r\n\r\nMaking this behavior not configurable is disruptive and annoying. It results in the need to patch the patcher, a la \r\n```\r\n# settings/test.py\r\nfrom pytest_django import plugin\r\nplugin._blocking_manager = mock.MagicMock()\r\n```\r\n\r\nPlease consider a means to disable this behavior through settings.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/495", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/495/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/495/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/495/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/495", "id": 238126049, "node_id": "MDU6SXNzdWUyMzgxMjYwNDk=", "number": 495, "title": "ImportWarning with PYTHONWARNINGS=all", "user": {"login": "jleclanche", "id": 235410, "node_id": "MDQ6VXNlcjIzNTQxMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/235410?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jleclanche", "html_url": "https://github.com/jleclanche", "followers_url": "https://api.github.com/users/jleclanche/followers", "following_url": "https://api.github.com/users/jleclanche/following{/other_user}", "gists_url": "https://api.github.com/users/jleclanche/gists{/gist_id}", "starred_url": "https://api.github.com/users/jleclanche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jleclanche/subscriptions", "organizations_url": "https://api.github.com/users/jleclanche/orgs", "repos_url": "https://api.github.com/users/jleclanche/repos", "events_url": "https://api.github.com/users/jleclanche/events{/privacy}", "received_events_url": "https://api.github.com/users/jleclanche/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-23T12:18:13Z", "updated_at": "2017-07-04T21:17:47Z", "closed_at": "2017-07-04T21:17:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I like to use PYTHONWARNINGS=all for my test runs. Unfortunately, anything that uses pytest-django includes a ton of warnings from pytest_django/plugin.py:\r\n\r\n```pytb\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/_pytest/assertion/rewrite.py:7: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n  import imp\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:17: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .django_compat import is_django_unittest  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:18: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import django_db_setup  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/fixtures.py:9: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from . import live_server_helper\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/fixtures.py:11: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .django_compat import is_django_unittest\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/fixtures.py:12: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .pytest_compat import getfixturevalue\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/fixtures.py:14: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .lazy_django import get_django_version, skip_if_no_django\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:19: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import django_db_use_migrations  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:20: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import django_db_keepdb  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:21: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import django_db_modify_db_settings  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:22: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import django_db_modify_db_settings_xdist_suffix  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:23: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import _live_server_helper  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:24: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import admin_client  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:25: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import admin_user  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:26: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import client  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:27: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import db  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:28: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import django_user_model  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:29: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import django_username_field  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:30: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import live_server  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:31: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import rf  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:32: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import settings  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:33: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .fixtures import transactional_db  # noqa\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:34: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .pytest_compat import getfixturevalue\r\n/home/adys/src/django/django-intenumfield/.tox/py36-django111/lib/python3.6/site-packages/pytest_django/plugin.py:36: ImportWarning: can't resolve package from __spec__ or __package__, falling back on __name__ and __path__\r\n  from .lazy_django import (django_settings_is_configured,\r\n```\r\n\r\nAny idea why?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/494", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/494/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/494/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/494/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/494", "id": 236955805, "node_id": "MDU6SXNzdWUyMzY5NTU4MDU=", "number": 494, "title": "Does pytest-django know about [tool:pytest]?", "user": {"login": "decentral1se", "id": 1991377, "node_id": "MDQ6VXNlcjE5OTEzNzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1991377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decentral1se", "html_url": "https://github.com/decentral1se", "followers_url": "https://api.github.com/users/decentral1se/followers", "following_url": "https://api.github.com/users/decentral1se/following{/other_user}", "gists_url": "https://api.github.com/users/decentral1se/gists{/gist_id}", "starred_url": "https://api.github.com/users/decentral1se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decentral1se/subscriptions", "organizations_url": "https://api.github.com/users/decentral1se/orgs", "repos_url": "https://api.github.com/users/decentral1se/repos", "events_url": "https://api.github.com/users/decentral1se/events{/privacy}", "received_events_url": "https://api.github.com/users/decentral1se/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-06-19T16:56:59Z", "updated_at": "2017-06-20T23:47:17Z", "closed_at": "2017-06-20T12:15:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to https://docs.pytest.org/en/latest/customize.html:\r\n\r\n> Note that an existing pytest.ini file will always be considered a match, whereas tox.ini and setup.cfg will only match if they contain a [pytest] or [tool:pytest] section, respectively.\r\n\r\nI was having trouble getting my options picked up with `[tool:pytest]` and not just `[pytest]`. Does pytest-django know what to do with `[tool:pytest]`? Will submit a PR if this needs work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/493", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/493/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/493/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/493/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/493", "id": 236731508, "node_id": "MDU6SXNzdWUyMzY3MzE1MDg=", "number": 493, "title": "admin_user doesn't like django_username_field being set to email", "user": {"login": "tolomea", "id": 805072, "node_id": "MDQ6VXNlcjgwNTA3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/805072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tolomea", "html_url": "https://github.com/tolomea", "followers_url": "https://api.github.com/users/tolomea/followers", "following_url": "https://api.github.com/users/tolomea/following{/other_user}", "gists_url": "https://api.github.com/users/tolomea/gists{/gist_id}", "starred_url": "https://api.github.com/users/tolomea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tolomea/subscriptions", "organizations_url": "https://api.github.com/users/tolomea/orgs", "repos_url": "https://api.github.com/users/tolomea/repos", "events_url": "https://api.github.com/users/tolomea/events{/privacy}", "received_events_url": "https://api.github.com/users/tolomea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-06-18T16:36:29Z", "updated_at": "2019-04-23T16:07:00Z", "closed_at": "2019-04-23T15:45:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using https://github.com/tmm/django-username-email which uses the email in place of having a separate user name, this generally works well but it breaks the admin_user fixture because this:\r\n\r\n    if username_field != 'username':\r\n        extra_fields[username_field] = 'admin'\r\n\r\nleads to this \r\n\r\n    user = UserModel._default_manager.create_superuser(\r\n        'admin', 'admin@example.com', 'password', **extra_fields)\r\n\r\nraising this\r\n\r\n    TypeError: create_superuser() got multiple values for argument 'email'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/489", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/489/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/489/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/489/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/489", "id": 235394907, "node_id": "MDU6SXNzdWUyMzUzOTQ5MDc=", "number": 489, "title": "live_server fixture does not see database updates", "user": {"login": "mpasternak", "id": 598469, "node_id": "MDQ6VXNlcjU5ODQ2OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/598469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpasternak", "html_url": "https://github.com/mpasternak", "followers_url": "https://api.github.com/users/mpasternak/followers", "following_url": "https://api.github.com/users/mpasternak/following{/other_user}", "gists_url": "https://api.github.com/users/mpasternak/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpasternak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpasternak/subscriptions", "organizations_url": "https://api.github.com/users/mpasternak/orgs", "repos_url": "https://api.github.com/users/mpasternak/repos", "events_url": "https://api.github.com/users/mpasternak/events{/privacy}", "received_events_url": "https://api.github.com/users/mpasternak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-06-12T23:32:56Z", "updated_at": "2017-06-14T22:15:14Z", "closed_at": "2017-06-13T07:02:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nit looks like live_server process does not see my database updates. \r\n\r\nI'm using either PostgreSQL or an in-memory SQLite 3, does not matter. \r\n\r\nI want to be able to change the database from inside my test function and to make live_server see the change. \r\n\r\nIs there anything special I should do? \r\n\r\nI've tried adding transaction_db fixture to my test functions, does not mater. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/483", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/483/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/483/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/483", "id": 231856805, "node_id": "MDU6SXNzdWUyMzE4NTY4MDU=", "number": 483, "title": "Not all tests pass after cloning and running make test", "user": {"login": "gradam", "id": 10790872, "node_id": "MDQ6VXNlcjEwNzkwODcy", "avatar_url": "https://avatars2.githubusercontent.com/u/10790872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gradam", "html_url": "https://github.com/gradam", "followers_url": "https://api.github.com/users/gradam/followers", "following_url": "https://api.github.com/users/gradam/following{/other_user}", "gists_url": "https://api.github.com/users/gradam/gists{/gist_id}", "starred_url": "https://api.github.com/users/gradam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gradam/subscriptions", "organizations_url": "https://api.github.com/users/gradam/orgs", "repos_url": "https://api.github.com/users/gradam/repos", "events_url": "https://api.github.com/users/gradam/events{/privacy}", "received_events_url": "https://api.github.com/users/gradam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314948, "node_id": "MDU6TGFiZWwxMTczMTQ5NDg=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/bug", "name": "bug", "color": "eb6420", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-28T09:13:36Z", "updated_at": "2017-05-29T19:11:40Z", "closed_at": "2017-05-29T19:11:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I clone the repo and run `make test` 3 of them fails.\r\n\r\nOutput:\r\n```\r\n$ make test\r\nvirtualenv .\r\nUsing base prefix '/usr'\r\nNew python executable in /home/kuba/temp/t2/pytest-django/bin/python3\r\nAlso creating executable in /home/kuba/temp/t2/pytest-django/bin/python\r\nInstalling setuptools, pip, wheel...done.\r\nbin/pip install -Ur requirements.txt\r\nObtaining file:///home/kuba/temp/t2/pytest-django (from -r requirements.txt (line 1))\r\nRequirement already up-to-date: setuptools in ./lib/python3.5/site-packages (from -r requirements.txt (line 2))\r\nCollecting django (from -r requirements.txt (line 3))\r\n  Using cached Django-1.11.1-py2.py3-none-any.whl\r\nCollecting django-configurations (from -r requirements.txt (line 4))\r\n  Using cached django_configurations-2.0-py2.py3-none-any.whl\r\nCollecting pytest-xdist (from -r requirements.txt (line 5))\r\nCollecting tox (from -r requirements.txt (line 6))\r\n  Using cached tox-2.7.0-py2.py3-none-any.whl\r\nRequirement already up-to-date: wheel in ./lib/python3.5/site-packages (from -r requirements.txt (line 7))\r\nCollecting twine (from -r requirements.txt (line 8))\r\n  Using cached twine-1.9.1-py2.py3-none-any.whl\r\nCollecting flake8 (from -r requirements.txt (line 9))\r\n  Using cached flake8-3.3.0-py2.py3-none-any.whl\r\nCollecting Flask-Sphinx-Themes (from -r requirements.txt (line 10))\r\n  Using cached Flask_Sphinx_Themes-1.0.1-py2.py3-none-any.whl\r\nCollecting pytest>=2.9 (from pytest-django==3.1.3.dev25+gaf04673->-r requirements.txt (line 1))\r\n  Using cached pytest-3.1.0-py2.py3-none-any.whl\r\nRequirement already up-to-date: packaging>=16.8 in ./lib/python3.5/site-packages (from setuptools->-r requirements.txt (line 2))\r\nRequirement already up-to-date: six>=1.6.0 in ./lib/python3.5/site-packages (from setuptools->-r requirements.txt (line 2))\r\nRequirement already up-to-date: appdirs>=1.4.0 in ./lib/python3.5/site-packages (from setuptools->-r requirements.txt (line 2))\r\nCollecting pytz (from django->-r requirements.txt (line 3))\r\n  Using cached pytz-2017.2-py2.py3-none-any.whl\r\nCollecting execnet>=1.1 (from pytest-xdist->-r requirements.txt (line 5))\r\n  Using cached execnet-1.4.1-py2.py3-none-any.whl\r\nCollecting py>=1.4.22 (from pytest-xdist->-r requirements.txt (line 5))\r\n  Using cached py-1.4.33-py2.py3-none-any.whl\r\nCollecting pluggy<1.0,>=0.3.0 (from tox->-r requirements.txt (line 6))\r\n  Using cached pluggy-0.4.0-py2.py3-none-any.whl\r\nCollecting virtualenv>=1.11.2; python_version != \"3.2\" (from tox->-r requirements.txt (line 6))\r\n  Using cached virtualenv-15.1.0-py2.py3-none-any.whl\r\nCollecting pkginfo>=1.0 (from twine->-r requirements.txt (line 8))\r\n  Using cached pkginfo-1.4.1-py2.py3-none-any.whl\r\nCollecting requests-toolbelt>=0.8.0 (from twine->-r requirements.txt (line 8))\r\n  Using cached requests_toolbelt-0.8.0-py2.py3-none-any.whl\r\nCollecting requests!=2.15,!=2.16,>=2.5.0 (from twine->-r requirements.txt (line 8))\r\n  Using cached requests-2.16.5-py2.py3-none-any.whl\r\nCollecting tqdm>=4.11 (from twine->-r requirements.txt (line 8))\r\n  Using cached tqdm-4.11.2-py2.py3-none-any.whl\r\nCollecting pyflakes<1.6.0,>=1.5.0 (from flake8->-r requirements.txt (line 9))\r\n  Using cached pyflakes-1.5.0-py2.py3-none-any.whl\r\nCollecting pycodestyle<2.4.0,>=2.0.0 (from flake8->-r requirements.txt (line 9))\r\n  Using cached pycodestyle-2.3.1-py2.py3-none-any.whl\r\nCollecting mccabe<0.7.0,>=0.6.0 (from flake8->-r requirements.txt (line 9))\r\n  Using cached mccabe-0.6.1-py2.py3-none-any.whl\r\nCollecting Sphinx (from Flask-Sphinx-Themes->-r requirements.txt (line 10))\r\n  Using cached Sphinx-1.6.1-py2.py3-none-any.whl\r\nRequirement already up-to-date: pyparsing in ./lib/python3.5/site-packages (from packaging>=16.8->setuptools->-r requirements.txt (line 2))\r\nCollecting apipkg>=1.4 (from execnet>=1.1->pytest-xdist->-r requirements.txt (line 5))\r\n  Using cached apipkg-1.4-py2.py3-none-any.whl\r\nCollecting chardet<3.1.0,>=3.0.2 (from requests!=2.15,!=2.16,>=2.5.0->twine->-r requirements.txt (line 8))\r\n  Using cached chardet-3.0.3-py2.py3-none-any.whl\r\nCollecting certifi>=2017.4.17 (from requests!=2.15,!=2.16,>=2.5.0->twine->-r requirements.txt (line 8))\r\n  Using cached certifi-2017.4.17-py2.py3-none-any.whl\r\nCollecting urllib3<1.22,>=1.21.1 (from requests!=2.15,!=2.16,>=2.5.0->twine->-r requirements.txt (line 8))\r\n  Using cached urllib3-1.21.1-py2.py3-none-any.whl\r\nCollecting idna<2.6,>=2.5 (from requests!=2.15,!=2.16,>=2.5.0->twine->-r requirements.txt (line 8))\r\n  Using cached idna-2.5-py2.py3-none-any.whl\r\nCollecting sphinxcontrib-websupport (from Sphinx->Flask-Sphinx-Themes->-r requirements.txt (line 10))\r\n  Using cached sphinxcontrib_websupport-1.0.1-py2.py3-none-any.whl\r\nCollecting Pygments>=2.0 (from Sphinx->Flask-Sphinx-Themes->-r requirements.txt (line 10))\r\n  Using cached Pygments-2.2.0-py2.py3-none-any.whl\r\nCollecting babel!=2.0,>=1.3 (from Sphinx->Flask-Sphinx-Themes->-r requirements.txt (line 10))\r\n  Using cached Babel-2.4.0-py2.py3-none-any.whl\r\nCollecting alabaster<0.8,>=0.7 (from Sphinx->Flask-Sphinx-Themes->-r requirements.txt (line 10))\r\n  Using cached alabaster-0.7.10-py2.py3-none-any.whl\r\nCollecting imagesize (from Sphinx->Flask-Sphinx-Themes->-r requirements.txt (line 10))\r\n  Using cached imagesize-0.7.1-py2.py3-none-any.whl\r\nCollecting Jinja2>=2.3 (from Sphinx->Flask-Sphinx-Themes->-r requirements.txt (line 10))\r\n  Using cached Jinja2-2.9.6-py2.py3-none-any.whl\r\nCollecting snowballstemmer>=1.1 (from Sphinx->Flask-Sphinx-Themes->-r requirements.txt (line 10))\r\n  Using cached snowballstemmer-1.2.1-py2.py3-none-any.whl\r\nCollecting typing (from Sphinx->Flask-Sphinx-Themes->-r requirements.txt (line 10))\r\nCollecting docutils>=0.11 (from Sphinx->Flask-Sphinx-Themes->-r requirements.txt (line 10))\r\n  Using cached docutils-0.13.1-py3-none-any.whl\r\nCollecting MarkupSafe>=0.23 (from Jinja2>=2.3->Sphinx->Flask-Sphinx-Themes->-r requirements.txt (line 10))\r\nInstalling collected packages: pytz, django, django-configurations, apipkg, execnet, py, pytest, pytest-xdist, pluggy, virtualenv, tox, pkginfo, chardet, certifi, urllib3, idna, requests, requests-toolbelt, tqdm, twine, pyflakes, pycodestyle, mccabe, flake8, sphinxcontrib-websupport, Pygments, babel, alabaster, imagesize, MarkupSafe, Jinja2, snowballstemmer, typing, docutils, Sphinx, Flask-Sphinx-Themes, pytest-django\r\n  Running setup.py develop for pytest-django\r\nSuccessfully installed Flask-Sphinx-Themes-1.0.1 Jinja2-2.9.6 MarkupSafe-1.0 Pygments-2.2.0 Sphinx-1.6.1 alabaster-0.7.10 apipkg-1.4 babel-2.4.0 certifi-2017.4.17 chardet-3.0.3 django-1.11.1 django-configurations-2.0 docutils-0.13.1 execnet-1.4.1 flake8-3.3.0 idna-2.5 imagesize-0.7.1 mccabe-0.6.1 pkginfo-1.4.1 pluggy-0.4.0 py-1.4.33 pycodestyle-2.3.1 pyflakes-1.5.0 pytest-3.1.0 pytest-django pytest-xdist-1.16.0 pytz-2017.2 requests-2.16.5 requests-toolbelt-0.8.0 snowballstemmer-1.2.1 sphinxcontrib-websupport-1.0.1 tox-2.7.0 tqdm-4.11.2 twine-1.9.1 typing-3.6.1 urllib3-1.21.1 virtualenv-15.1.0\r\ntouch bin/py.test\r\nbin/pip install -e .\r\nObtaining file:///home/kuba/temp/t2/pytest-django\r\nRequirement already satisfied: pytest>=2.9 in ./lib/python3.5/site-packages (from pytest-django==3.1.3.dev25+gaf04673)\r\nRequirement already satisfied: py>=1.4.29 in ./lib/python3.5/site-packages (from pytest>=2.9->pytest-django==3.1.3.dev25+gaf04673)\r\nRequirement already satisfied: setuptools in ./lib/python3.5/site-packages (from pytest>=2.9->pytest-django==3.1.3.dev25+gaf04673)\r\nRequirement already satisfied: appdirs>=1.4.0 in ./lib/python3.5/site-packages (from setuptools->pytest>=2.9->pytest-django==3.1.3.dev25+gaf04673)\r\nRequirement already satisfied: six>=1.6.0 in ./lib/python3.5/site-packages (from setuptools->pytest>=2.9->pytest-django==3.1.3.dev25+gaf04673)\r\nRequirement already satisfied: packaging>=16.8 in ./lib/python3.5/site-packages (from setuptools->pytest>=2.9->pytest-django==3.1.3.dev25+gaf04673)\r\nRequirement already satisfied: pyparsing in ./lib/python3.5/site-packages (from packaging>=16.8->setuptools->pytest>=2.9->pytest-django==3.1.3.dev25+gaf04673)\r\nInstalling collected packages: pytest-django\r\n  Found existing installation: pytest-django 3.1.3.dev25+gaf04673\r\n    Uninstalling pytest-django-3.1.3.dev25+gaf04673:\r\n      Successfully uninstalled pytest-django-3.1.3.dev25+gaf04673\r\n  Running setup.py develop for pytest-django\r\nSuccessfully installed pytest-django\r\nbin/py.test\r\n=============================================================================================== test session starts ===============================================================================================\r\nplatform linux -- Python 3.5.2+, pytest-3.1.0, py-1.4.33, pluggy-0.4.0\r\nDjango settings: pytest_django_test.settings_sqlite_file (from environment variable)\r\nrootdir: /home/kuba/temp/t2/pytest-django, inifile: setup.cfg\r\nplugins: xdist-1.16.0, django-3.1.3.dev25+gaf04673\r\ncollected 134 items \r\n\r\ntests/test_database.py ..........................\r\ntests/test_db_setup.py .....s..\r\ntests/test_django_configurations.py FFF\r\ntests/test_django_settings_module.py ..............\r\ntests/test_doctest.txt .\r\ntests/test_environment.py ...................\r\ntests/test_fixtures.py ....................................\r\ntests/test_manage_py_scan.py ....\r\ntests/test_unittest.py .............\r\ntests/test_urls.py ...\r\ntests/test_without_django_loaded.py .......\r\n============================================================================================= short test summary info =============================================================================================\r\nFAIL tests/test_django_configurations.py::test_dc_env\r\nFAIL tests/test_django_configurations.py::test_dc_ini\r\nFAIL tests/test_django_configurations.py::test_dc_option\r\nSKIP [1] tests/test_db_setup.py:203: Django 1.9 requires migration and has no concept of initial data fixtures\r\n\r\n==================================================================================================== FAILURES =====================================================================================================\r\n___________________________________________________________________________________________________ test_dc_env ___________________________________________________________________________________________________\r\n\r\ntestdir = <Testdir local('/tmp/pytest-of-kuba/pytest-1/testdir/test_dc_env0')>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f8338940978>\r\n\r\n    def test_dc_env(testdir, monkeypatch):\r\n        monkeypatch.setenv('DJANGO_SETTINGS_MODULE', 'tpkg.settings_env')\r\n        monkeypatch.setenv('DJANGO_CONFIGURATION', 'MySettings')\r\n    \r\n        pkg = testdir.mkpydir('tpkg')\r\n        settings = pkg.join('settings_env.py')\r\n        settings.write(BARE_SETTINGS)\r\n        testdir.makepyfile(\"\"\"\r\n            import os\r\n    \r\n            def test_settings():\r\n                assert os.environ['DJANGO_SETTINGS_MODULE'] == 'tpkg.settings_env'\r\n                assert os.environ['DJANGO_CONFIGURATION'] == 'MySettings'\r\n        \"\"\")\r\n        result = testdir.runpytest_subprocess()\r\n>       result.stdout.fnmatch_lines(['*1 passed*'])\r\nE       Failed: remains unmatched: '*1 passed*'\r\n\r\n/home/kuba/temp/t2/pytest-django/tests/test_django_configurations.py:48: Failed\r\n---------------------------------------------------------------------------------------------- Captured stdout call -----------------------------------------------------------------------------------------------\r\nrunning: /home/kuba/temp/t2/pytest-django/bin/python3 /home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/pytest.py --basetemp=/tmp/pytest-of-kuba/pytest-1/testdir/test_dc_env0/runpytest-0\r\n     in: /tmp/pytest-of-kuba/pytest-1/testdir/test_dc_env0\r\n---------------------------------------------------------------------------------------------- Captured stderr call -----------------------------------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/kuba/temp/t2/pytest-django/pytest_django/plugin.py\", line 114, in _handle_import_error\r\n    yield\r\n  File \"/home/kuba/temp/t2/pytest-django/pytest_django/plugin.py\", line 245, in pytest_load_initial_conftests\r\n    dj_settings.DATABASES\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/django/conf/__init__.py\", line 56, in __getattr__\r\n    self._setup(name)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/django/conf/__init__.py\", line 41, in _setup\r\n    self._wrapped = Settings(settings_module)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/django/conf/__init__.py\", line 110, in __init__\r\n    mod = importlib.import_module(self.SETTINGS_MODULE)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 634, in _load_backward_compatible\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/configurations/importer.py\", line 146, in load_module\r\n    mod = imp.load_module(fullname, *self.location)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/imp.py\", line 234, in load_module\r\n    return load_source(name, filename, file)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/imp.py\", line 172, in load_source\r\n    module = _load(spec)\r\n  File \"<frozen importlib._bootstrap>\", line 693, in _load\r\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 673, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 222, in _call_with_frames_removed\r\n  File \"/tmp/pytest-of-kuba/pytest-1/testdir/test_dc_env0/tpkg/settings_env.py\", line 2, in <module>\r\n    from configurations import Settings\r\nImportError: cannot import name 'Settings'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/pytest.py\", line 73, in <module>\r\n    raise SystemExit(pytest.main())\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 49, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 158, in _prepareconfig\r\n    pluginmanager=pluginmanager, args=args)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 745, in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 339, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 334, in <lambda>\r\n    _MultiCall(methods, kwargs, hook.spec_opts).execute()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 613, in execute\r\n    return _wrapped_call(hook_impl.function(*args), self.execute)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 250, in _wrapped_call\r\n    wrap_controller.send(call_outcome)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/helpconfig.py\", line 34, in pytest_cmdline_parse\r\n    config = outcome.get_result()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 279, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 265, in __init__\r\n    self.result = func()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 614, in execute\r\n    res = hook_impl.function(*args)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 928, in pytest_cmdline_parse\r\n    self.parse(args)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 1086, in parse\r\n    self._preparse(args, addopts=addopts)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 1057, in _preparse\r\n    args=args, parser=self._parser)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 745, in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 339, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 334, in <lambda>\r\n    _MultiCall(methods, kwargs, hook.spec_opts).execute()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 613, in execute\r\n    return _wrapped_call(hook_impl.function(*args), self.execute)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 254, in _wrapped_call\r\n    return call_outcome.get_result()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 279, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 265, in __init__\r\n    self.result = func()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 614, in execute\r\n    res = hook_impl.function(*args)\r\n  File \"/home/kuba/temp/t2/pytest-django/pytest_django/plugin.py\", line 245, in pytest_load_initial_conftests\r\n    dj_settings.DATABASES\r\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/home/kuba/temp/t2/pytest-django/pytest_django/plugin.py\", line 118, in _handle_import_error\r\n    raise ImportError(msg)\r\nImportError: cannot import name 'Settings'\r\n\r\npytest-django could not find a Django project (no manage.py file could be found). You must explicitly add your Django project to the Python path to have it picked up.\r\n___________________________________________________________________________________________________ test_dc_ini ___________________________________________________________________________________________________\r\n\r\ntestdir = <Testdir local('/tmp/pytest-of-kuba/pytest-1/testdir/test_dc_ini0')>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f8338854358>\r\n\r\n    def test_dc_ini(testdir, monkeypatch):\r\n        monkeypatch.setenv('DJANGO_SETTINGS_MODULE', 'tpkg.settings_env')\r\n        monkeypatch.setenv('DJANGO_CONFIGURATION', 'MySettings')\r\n    \r\n        testdir.makeini(\"\"\"\r\n           [pytest]\r\n           DJANGO_SETTINGS_MODULE = DO_NOT_USE_ini\r\n           DJANGO_CONFIGURATION = DO_NOT_USE_ini\r\n        \"\"\")\r\n        pkg = testdir.mkpydir('tpkg')\r\n        settings = pkg.join('settings_env.py')\r\n        settings.write(BARE_SETTINGS)\r\n        testdir.makepyfile(\"\"\"\r\n            import os\r\n    \r\n            def test_ds():\r\n                assert os.environ['DJANGO_SETTINGS_MODULE'] == 'tpkg.settings_env'\r\n                assert os.environ['DJANGO_CONFIGURATION'] == 'MySettings'\r\n        \"\"\")\r\n        result = testdir.runpytest_subprocess()\r\n>       result.stdout.fnmatch_lines(['*1 passed*'])\r\nE       Failed: remains unmatched: '*1 passed*'\r\n\r\n/home/kuba/temp/t2/pytest-django/tests/test_django_configurations.py:72: Failed\r\n---------------------------------------------------------------------------------------------- Captured stdout call -----------------------------------------------------------------------------------------------\r\nrunning: /home/kuba/temp/t2/pytest-django/bin/python3 /home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/pytest.py --basetemp=/tmp/pytest-of-kuba/pytest-1/testdir/test_dc_ini0/runpytest-0\r\n     in: /tmp/pytest-of-kuba/pytest-1/testdir/test_dc_ini0\r\n---------------------------------------------------------------------------------------------- Captured stderr call -----------------------------------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/kuba/temp/t2/pytest-django/pytest_django/plugin.py\", line 114, in _handle_import_error\r\n    yield\r\n  File \"/home/kuba/temp/t2/pytest-django/pytest_django/plugin.py\", line 245, in pytest_load_initial_conftests\r\n    dj_settings.DATABASES\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/django/conf/__init__.py\", line 56, in __getattr__\r\n    self._setup(name)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/django/conf/__init__.py\", line 41, in _setup\r\n    self._wrapped = Settings(settings_module)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/django/conf/__init__.py\", line 110, in __init__\r\n    mod = importlib.import_module(self.SETTINGS_MODULE)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 634, in _load_backward_compatible\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/configurations/importer.py\", line 146, in load_module\r\n    mod = imp.load_module(fullname, *self.location)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/imp.py\", line 234, in load_module\r\n    return load_source(name, filename, file)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/imp.py\", line 172, in load_source\r\n    module = _load(spec)\r\n  File \"<frozen importlib._bootstrap>\", line 693, in _load\r\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 673, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 222, in _call_with_frames_removed\r\n  File \"/tmp/pytest-of-kuba/pytest-1/testdir/test_dc_ini0/tpkg/settings_env.py\", line 2, in <module>\r\n    from configurations import Settings\r\nImportError: cannot import name 'Settings'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/pytest.py\", line 73, in <module>\r\n    raise SystemExit(pytest.main())\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 49, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 158, in _prepareconfig\r\n    pluginmanager=pluginmanager, args=args)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 745, in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 339, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 334, in <lambda>\r\n    _MultiCall(methods, kwargs, hook.spec_opts).execute()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 613, in execute\r\n    return _wrapped_call(hook_impl.function(*args), self.execute)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 250, in _wrapped_call\r\n    wrap_controller.send(call_outcome)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/helpconfig.py\", line 34, in pytest_cmdline_parse\r\n    config = outcome.get_result()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 279, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 265, in __init__\r\n    self.result = func()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 614, in execute\r\n    res = hook_impl.function(*args)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 928, in pytest_cmdline_parse\r\n    self.parse(args)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 1086, in parse\r\n    self._preparse(args, addopts=addopts)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 1057, in _preparse\r\n    args=args, parser=self._parser)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 745, in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 339, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 334, in <lambda>\r\n    _MultiCall(methods, kwargs, hook.spec_opts).execute()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 613, in execute\r\n    return _wrapped_call(hook_impl.function(*args), self.execute)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 254, in _wrapped_call\r\n    return call_outcome.get_result()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 279, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 265, in __init__\r\n    self.result = func()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 614, in execute\r\n    res = hook_impl.function(*args)\r\n  File \"/home/kuba/temp/t2/pytest-django/pytest_django/plugin.py\", line 245, in pytest_load_initial_conftests\r\n    dj_settings.DATABASES\r\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/home/kuba/temp/t2/pytest-django/pytest_django/plugin.py\", line 118, in _handle_import_error\r\n    raise ImportError(msg)\r\nImportError: cannot import name 'Settings'\r\n\r\npytest-django could not find a Django project (no manage.py file could be found). You must explicitly add your Django project to the Python path to have it picked up.\r\n_________________________________________________________________________________________________ test_dc_option __________________________________________________________________________________________________\r\n\r\ntestdir = <Testdir local('/tmp/pytest-of-kuba/pytest-1/testdir/test_dc_option0')>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f8338854940>\r\n\r\n    def test_dc_option(testdir, monkeypatch):\r\n        monkeypatch.setenv('DJANGO_SETTINGS_MODULE', 'DO_NOT_USE_env')\r\n        monkeypatch.setenv('DJANGO_CONFIGURATION', 'DO_NOT_USE_env')\r\n    \r\n        testdir.makeini(\"\"\"\r\n           [pytest]\r\n           DJANGO_SETTINGS_MODULE = DO_NOT_USE_ini\r\n           DJANGO_CONFIGURATION = DO_NOT_USE_ini\r\n        \"\"\")\r\n        pkg = testdir.mkpydir('tpkg')\r\n        settings = pkg.join('settings_opt.py')\r\n        settings.write(BARE_SETTINGS)\r\n        testdir.makepyfile(\"\"\"\r\n            import os\r\n    \r\n            def test_ds():\r\n                assert os.environ['DJANGO_SETTINGS_MODULE'] == 'tpkg.settings_opt'\r\n                assert os.environ['DJANGO_CONFIGURATION'] == 'MySettings'\r\n        \"\"\")\r\n        result = testdir.runpytest_subprocess('--ds=tpkg.settings_opt', '--dc=MySettings')\r\n>       result.stdout.fnmatch_lines(['*1 passed*'])\r\nE       Failed: remains unmatched: '*1 passed*'\r\n\r\n/home/kuba/temp/t2/pytest-django/tests/test_django_configurations.py:96: Failed\r\n---------------------------------------------------------------------------------------------- Captured stdout call -----------------------------------------------------------------------------------------------\r\nrunning: /home/kuba/temp/t2/pytest-django/bin/python3 /home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/pytest.py --basetemp=/tmp/pytest-of-kuba/pytest-1/testdir/test_dc_option0/runpytest-0 --ds=tpkg.settings_opt --dc=MySettings\r\n     in: /tmp/pytest-of-kuba/pytest-1/testdir/test_dc_option0\r\n---------------------------------------------------------------------------------------------- Captured stderr call -----------------------------------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/kuba/temp/t2/pytest-django/pytest_django/plugin.py\", line 114, in _handle_import_error\r\n    yield\r\n  File \"/home/kuba/temp/t2/pytest-django/pytest_django/plugin.py\", line 245, in pytest_load_initial_conftests\r\n    dj_settings.DATABASES\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/django/conf/__init__.py\", line 56, in __getattr__\r\n    self._setup(name)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/django/conf/__init__.py\", line 41, in _setup\r\n    self._wrapped = Settings(settings_module)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/django/conf/__init__.py\", line 110, in __init__\r\n    mod = importlib.import_module(self.SETTINGS_MODULE)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 634, in _load_backward_compatible\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/configurations/importer.py\", line 146, in load_module\r\n    mod = imp.load_module(fullname, *self.location)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/imp.py\", line 234, in load_module\r\n    return load_source(name, filename, file)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/imp.py\", line 172, in load_source\r\n    module = _load(spec)\r\n  File \"<frozen importlib._bootstrap>\", line 693, in _load\r\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 673, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 222, in _call_with_frames_removed\r\n  File \"/tmp/pytest-of-kuba/pytest-1/testdir/test_dc_option0/tpkg/settings_opt.py\", line 2, in <module>\r\n    from configurations import Settings\r\nImportError: cannot import name 'Settings'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/pytest.py\", line 73, in <module>\r\n    raise SystemExit(pytest.main())\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 49, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 158, in _prepareconfig\r\n    pluginmanager=pluginmanager, args=args)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 745, in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 339, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 334, in <lambda>\r\n    _MultiCall(methods, kwargs, hook.spec_opts).execute()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 613, in execute\r\n    return _wrapped_call(hook_impl.function(*args), self.execute)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 250, in _wrapped_call\r\n    wrap_controller.send(call_outcome)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/helpconfig.py\", line 34, in pytest_cmdline_parse\r\n    config = outcome.get_result()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 279, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 265, in __init__\r\n    self.result = func()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 614, in execute\r\n    res = hook_impl.function(*args)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 928, in pytest_cmdline_parse\r\n    self.parse(args)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 1086, in parse\r\n    self._preparse(args, addopts=addopts)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/config.py\", line 1057, in _preparse\r\n    args=args, parser=self._parser)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 745, in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 339, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 334, in <lambda>\r\n    _MultiCall(methods, kwargs, hook.spec_opts).execute()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 613, in execute\r\n    return _wrapped_call(hook_impl.function(*args), self.execute)\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 254, in _wrapped_call\r\n    return call_outcome.get_result()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 279, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 265, in __init__\r\n    self.result = func()\r\n  File \"/home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 614, in execute\r\n    res = hook_impl.function(*args)\r\n  File \"/home/kuba/temp/t2/pytest-django/pytest_django/plugin.py\", line 245, in pytest_load_initial_conftests\r\n    dj_settings.DATABASES\r\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/home/kuba/temp/t2/pytest-django/pytest_django/plugin.py\", line 118, in _handle_import_error\r\n    raise ImportError(msg)\r\nImportError: cannot import name 'Settings'\r\n\r\npytest-django could not find a Django project (no manage.py file could be found). You must explicitly add your Django project to the Python path to have it picked up.\r\n================================================================================================ warnings summary =================================================================================================\r\ntests/test_fixtures.py::test_admin_client\r\n  /home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/django/core/handlers/base.py:52: RemovedInDjango20Warning: Old-style middleware using settings.MIDDLEWARE_CLASSES is deprecated. Update your middleware and use settings.MIDDLEWARE instead.\r\n    \"instead.\", RemovedInDjango20Warning\r\n\r\ntests/test_fixtures.py::test_admin_client_no_db_marker\r\n  /home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/django/core/handlers/base.py:52: RemovedInDjango20Warning: Old-style middleware using settings.MIDDLEWARE_CLASSES is deprecated. Update your middleware and use settings.MIDDLEWARE instead.\r\n    \"instead.\", RemovedInDjango20Warning\r\n\r\ntests/test_fixtures.py::TestLiveServer::()::test_url\r\n  /home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/django/core/handlers/base.py:52: RemovedInDjango20Warning: Old-style middleware using settings.MIDDLEWARE_CLASSES is deprecated. Update your middleware and use settings.MIDDLEWARE instead.\r\n    \"instead.\", RemovedInDjango20Warning\r\n\r\ntests/test_urls.py::test_urls_client\r\n  /home/kuba/temp/t2/pytest-django/lib/python3.5/site-packages/django/core/handlers/base.py:52: RemovedInDjango20Warning: Old-style middleware using settings.MIDDLEWARE_CLASSES is deprecated. Update your middleware and use settings.MIDDLEWARE instead.\r\n    \"instead.\", RemovedInDjango20Warning\r\n\r\n-- Docs: http://doc.pytest.org/en/latest/warnings.html\r\n========================================================================== 3 failed, 130 passed, 1 skipped, 4 warnings in 58.16 seconds ===========================================================================\r\nMakefile:8: recipe for target 'test' failed\r\nmake: *** [test] Error 1\r\n```\r\n\r\nI am on Ubuntu 16.10", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/474", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/474/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/474/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/474/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/474", "id": 220163179, "node_id": "MDU6SXNzdWUyMjAxNjMxNzk=", "number": 474, "title": "Latest PyPI package does not include django_assert_num_queries", "user": {"login": "unsip", "id": 14371140, "node_id": "MDQ6VXNlcjE0MzcxMTQw", "avatar_url": "https://avatars3.githubusercontent.com/u/14371140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unsip", "html_url": "https://github.com/unsip", "followers_url": "https://api.github.com/users/unsip/followers", "following_url": "https://api.github.com/users/unsip/following{/other_user}", "gists_url": "https://api.github.com/users/unsip/gists{/gist_id}", "starred_url": "https://api.github.com/users/unsip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unsip/subscriptions", "organizations_url": "https://api.github.com/users/unsip/orgs", "repos_url": "https://api.github.com/users/unsip/repos", "events_url": "https://api.github.com/users/unsip/events{/privacy}", "received_events_url": "https://api.github.com/users/unsip/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-07T09:42:23Z", "updated_at": "2017-04-07T10:10:14Z", "closed_at": "2017-04-07T10:10:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Installation through `pip install pytest-django` does not include `django_assert_num_queries` fixture.\r\n\r\n`pytest_django/fixtures.py`:\r\n~~~{.py}\r\n__all__ = ['django_db_setup', 'db', 'transactional_db', 'admin_user',\r\n           'django_user_model', 'django_username_field',\r\n           'client', 'admin_client', 'rf', 'settings', 'live_server',\r\n           '_live_server_helper']\r\n~~~", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/473", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/473/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/473/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/473", "id": 219897873, "node_id": "MDU6SXNzdWUyMTk4OTc4NzM=", "number": 473, "title": "New release?", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2017-04-06T13:24:59Z", "updated_at": "2018-04-14T13:40:57Z", "closed_at": "2018-04-14T09:31:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Do the maintainers have plans to cut the next release? A few projects at my job depend on some of the new features such as `django_assert_num_queries`.\r\n\r\nIf there are any blockers to release, I'd be glad to help out.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/466", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/466/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/466/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/466/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/466", "id": 209443926, "node_id": "MDU6SXNzdWUyMDk0NDM5MjY=", "number": 466, "title": "Seeing migrations running during tests", "user": {"login": "AndreaCrotti", "id": 53640, "node_id": "MDQ6VXNlcjUzNjQw", "avatar_url": "https://avatars2.githubusercontent.com/u/53640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCrotti", "html_url": "https://github.com/AndreaCrotti", "followers_url": "https://api.github.com/users/AndreaCrotti/followers", "following_url": "https://api.github.com/users/AndreaCrotti/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCrotti/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCrotti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCrotti/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCrotti/orgs", "repos_url": "https://api.github.com/users/AndreaCrotti/repos", "events_url": "https://api.github.com/users/AndreaCrotti/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCrotti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-02-22T12:45:40Z", "updated_at": "2017-02-22T16:39:08Z", "closed_at": "2017-02-22T16:39:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you run \"./manage.py test -v 2\" you can normally see all the migrations that get applied before running the tests.\r\n\r\nWith pytest-django no matter how much -v I add it never shows anything about migrations.\r\nIs there a magic flag I could not see to make it do that?\r\nThanks for the great plugin by the way", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/465", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/465/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/465/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/465", "id": 209410317, "node_id": "MDU6SXNzdWUyMDk0MTAzMTc=", "number": 465, "title": "Update setuptools_scm-1.11.1 requirement or unpin", "user": {"login": "stephanema", "id": 24315939, "node_id": "MDQ6VXNlcjI0MzE1OTM5", "avatar_url": "https://avatars1.githubusercontent.com/u/24315939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stephanema", "html_url": "https://github.com/stephanema", "followers_url": "https://api.github.com/users/stephanema/followers", "following_url": "https://api.github.com/users/stephanema/following{/other_user}", "gists_url": "https://api.github.com/users/stephanema/gists{/gist_id}", "starred_url": "https://api.github.com/users/stephanema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stephanema/subscriptions", "organizations_url": "https://api.github.com/users/stephanema/orgs", "repos_url": "https://api.github.com/users/stephanema/repos", "events_url": "https://api.github.com/users/stephanema/events{/privacy}", "received_events_url": "https://api.github.com/users/stephanema/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-22T10:22:55Z", "updated_at": "2017-02-22T19:32:23Z", "closed_at": "2017-02-22T19:32:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a little question:\r\nDo you really need a hard dependency to setuptools_scm-1.11.1.tar.gz?\r\n  \r\nI have some packages which needs setuptools_scm-1.15.0.tar.gz and collide with this.\r\n  \r\nActually I do the following:\r\n\r\n1. install setuptools_scm-1.11.1.tar.gz\r\n2. install pytest-django-3.1.2.tar.gz\r\n3. install setuptools_scm-1.15.0.tar.gz\r\n  \r\nI am on a win7 64bit pc with python 3.5.3 64bit *without* internet connection.\r\n  \r\nActually all my pytest\u2019s with django works well.\r\n  \r\nIf it\u2019s not a problem for you, could you put the dependency to \r\nsetuptools_scm-1.15.0 Or setuptools_scm only?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/462", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/462/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/462/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/462/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/462", "id": 207733747, "node_id": "MDU6SXNzdWUyMDc3MzM3NDc=", "number": 462, "title": "Testing user permissions fail", "user": {"login": "alorence", "id": 1702273, "node_id": "MDQ6VXNlcjE3MDIyNzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1702273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alorence", "html_url": "https://github.com/alorence", "followers_url": "https://api.github.com/users/alorence/followers", "following_url": "https://api.github.com/users/alorence/following{/other_user}", "gists_url": "https://api.github.com/users/alorence/gists{/gist_id}", "starred_url": "https://api.github.com/users/alorence/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alorence/subscriptions", "organizations_url": "https://api.github.com/users/alorence/orgs", "repos_url": "https://api.github.com/users/alorence/repos", "events_url": "https://api.github.com/users/alorence/events{/privacy}", "received_events_url": "https://api.github.com/users/alorence/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-02-15T08:08:44Z", "updated_at": "2017-02-17T12:40:09Z", "closed_at": "2017-02-17T09:31:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIn a test, I want to ensure a user can't access a particular object by default, then after setting right permissions on this user, verify he can now access the resource. This test fail, but I can't find why.\r\n\r\nI reproduced this issue with the most minimal example:\r\n\r\n```python\r\n@pytest.mark.django_db()\r\ndef test_user_has_perm(django_user_model):\r\n    # Create a new user\r\n    john_doe = django_user_model.objects.create_user(username='johndoe', email='jd@example.com', password='123456')\r\n\r\n    # Get or create the permission to set on user\r\n    user_ct = ContentType.objects.get(app_label='auth', model='user')\r\n    p, created = Permission.objects.get_or_create(content_type=user_ct, codename='delete_user', name=\"Can delete user\")\r\n\r\n    assert created is False\r\n    # User don't have the permission\r\n    assert john_doe.has_perm(p) is False\r\n\r\n    # Set permission to user\r\n    john_doe.user_permissions.add(p)\r\n    assert john_doe.has_perm(p) is True  # ---> FAIL, why ?\r\n```\r\n\r\nTo help finding the reason, I created an example repository, with almost nothing else than pytest and django environment: see https://github.com/alorence/pytest_issue and the corresponding travis: https://travis-ci.org/alorence/pytest_issue\r\n\r\nI don't know if I misused the django_db mark. I also tried to pass db as a fixture, or use transaction=True in django_db mark, with no luck.\r\n\r\nCan you help me to find what is wrong in this example ?\r\n\r\nNote: I also posted the question on [SO](http://stackoverflow.com/q/42220272/1887976), if you want to earn some points ;)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/461", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/461/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/461/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/461", "id": 207290616, "node_id": "MDU6SXNzdWUyMDcyOTA2MTY=", "number": 461, "title": "pytest.mark.django_db does not isolate tests", "user": {"login": "qwiglydee", "id": 285128, "node_id": "MDQ6VXNlcjI4NTEyOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/285128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qwiglydee", "html_url": "https://github.com/qwiglydee", "followers_url": "https://api.github.com/users/qwiglydee/followers", "following_url": "https://api.github.com/users/qwiglydee/following{/other_user}", "gists_url": "https://api.github.com/users/qwiglydee/gists{/gist_id}", "starred_url": "https://api.github.com/users/qwiglydee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qwiglydee/subscriptions", "organizations_url": "https://api.github.com/users/qwiglydee/orgs", "repos_url": "https://api.github.com/users/qwiglydee/repos", "events_url": "https://api.github.com/users/qwiglydee/events{/privacy}", "received_events_url": "https://api.github.com/users/qwiglydee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-13T17:48:16Z", "updated_at": "2017-07-04T20:48:22Z", "closed_at": "2017-07-04T20:48:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "pytest version 3.0.6\r\npytest-django-3.1.2\r\ndjango-1.10\r\n\r\nsettings:\r\n```python\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': BASE_DIR + '/var/db.sqlite'\r\n    },\r\n    'world': {\r\n        'ENGINE': 'django.contrib.gis.db.backends.postgis',\r\n        'NAME': 'test',\r\n        'HOST': '',\r\n        'USER': 'postgres',  # need superuser to create db\r\n        'TEST': {\r\n            'NAME': 'test'\r\n        }\r\n    }\r\n}\r\n```\r\n\r\ntests:\r\n\r\n```py\r\n@pytest.mark.django_db\r\ndef test_1():\r\n    models.Feature.objects.create(id=99999999, **dumb_attrs)\r\n\r\n\r\n@pytest.mark.django_db\r\ndef test_2():\r\n    models.Feature.objects.create(id=99999999, **dumb_attrs)\r\n\r\n```\r\n\r\nRunning tests fails with IntegrityError. \r\nAfter running created objects remain in database.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/449", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/449/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/449/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/449", "id": 201954927, "node_id": "MDU6SXNzdWUyMDE5NTQ5Mjc=", "number": 449, "title": "Fix building the docs on RTD", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-01-19T19:38:03Z", "updated_at": "2017-01-28T23:16:56Z", "closed_at": "2017-01-24T12:10:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The building of the docs is currently broken: https://github.com/pytest-dev/pytest-django/pull/447#issuecomment-273681521", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/448", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/448/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/448/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/448/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/448", "id": 201701603, "node_id": "MDU6SXNzdWUyMDE3MDE2MDM=", "number": 448, "title": "Move pypy3 to allowed failures for now", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-01-18T21:47:44Z", "updated_at": "2017-01-20T17:49:33Z", "closed_at": "2017-01-20T17:49:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It should not make PRs red.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/444", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/444/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/444/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/444/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/444", "id": 198666801, "node_id": "MDU6SXNzdWUxOTg2NjY4MDE=", "number": 444, "title": "/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/db/models/fields/related_descriptors.py:160: AttributeError", "user": {"login": "darshit7", "id": 9577827, "node_id": "MDQ6VXNlcjk1Nzc4Mjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/9577827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darshit7", "html_url": "https://github.com/darshit7", "followers_url": "https://api.github.com/users/darshit7/followers", "following_url": "https://api.github.com/users/darshit7/following{/other_user}", "gists_url": "https://api.github.com/users/darshit7/gists{/gist_id}", "starred_url": "https://api.github.com/users/darshit7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darshit7/subscriptions", "organizations_url": "https://api.github.com/users/darshit7/orgs", "repos_url": "https://api.github.com/users/darshit7/repos", "events_url": "https://api.github.com/users/darshit7/events{/privacy}", "received_events_url": "https://api.github.com/users/darshit7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-04T09:45:20Z", "updated_at": "2017-01-07T09:02:48Z", "closed_at": "2017-01-07T09:02:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I try to test models and got AttributeError at 160 related_descriptors.py I think it is because of loading data from json.\r\nHere is my conftest.py\r\n```\r\nimport pytest\r\nfrom django.core.management import call_command\r\n\r\n@pytest.yield_fixture(scope='session')\r\ndef django_db_setup(django_db_setup, django_db_blocker):\r\n    with django_db_blocker.unblock():\r\n        call_command('loaddata', 'test_initial.json')\r\n```\r\n\r\nhere is test cases for model test_models.py\r\n\r\n```\r\n\"\"\"\r\nTest module to test common application models\r\n\"\"\"\r\nimport pytest\r\n\r\nfrom complykaro.apps.common.models import Form\r\n\r\n@pytest.mark.django_db\r\nclass TestFormModel:\r\n    \"\"\"\r\n    TestForm model class to test Form model\r\n    \"\"\"\r\n    @pytest.mark.django_db\r\n    def test_model(self):\r\n        \"\"\"\r\n        This function will test model.\r\n        \"\"\"\r\n        obj = Form.objects.get(code='trigger')\r\n        assert obj is not None, \"Trigger object not found.\"\r\n```\r\n\r\nHere is Error traceback\r\n```\r\n\r\n============================================================= test session starts =============================================================\r\nplatform linux -- Python 3.5.2, pytest-3.0.5, py-1.4.32, pluggy-0.4.0\r\nDjango settings: complykaro.test_settings (from command line option)\r\nrootdir: /home/darshitp/Projects/Complykaro/Complykaro/complykaro, inifile: pytest.ini\r\nplugins: django-3.1.2, cov-2.4.0, ipdb-0.1.dev2\r\ncollected 1 items \r\n\r\ncomplykaro/apps/common/tests/test_models.py E\r\n\r\n=================================================================== ERRORS ====================================================================\r\n_____________________________________________________ ERROR at setup of TestFD.test_model _____________________________________________________\r\n\r\nself = <django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor object at 0x7fe7dd5c6898>\r\ninstance = <[Failed(\"Database access not allowed, use the \"django_db\" mark, or the \"db\" or \"transactional_db\" fixtures to enable it.\") raised in repr()] CompanyLocation object at 0x7fe7dc651b70>\r\ninstance_type = <class 'complykaro.apps.user_management.models.company_loaction.CompanyLocation'>\r\n\r\n    def __get__(self, instance, instance_type=None):\r\n        \"\"\"\r\n            Get the related instance through the forward relation.\r\n    \r\n            With the example above, when getting ``child.parent``:\r\n    \r\n            - ``self`` is the descriptor managing the ``parent`` attribute\r\n            - ``instance`` is the ``child`` instance\r\n            - ``instance_type`` in the ``Child`` class (we don't need it)\r\n            \"\"\"\r\n        if instance is None:\r\n            return self\r\n    \r\n        # The related instance is loaded from the database and then cached in\r\n        # the attribute defined in self.cache_name. It can also be pre-cached\r\n        # by the reverse accessor (ReverseOneToOneDescriptor).\r\n        try:\r\n>           rel_obj = getattr(instance, self.cache_name)\r\nE           AttributeError: 'CompanyLocation' object has no attribute '_company_cache'\r\n\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/db/models/fields/related_descriptors.py:160: AttributeError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nrequest = <SubRequest '_django_db_marker' for <Function 'test_model'>>\r\n\r\n    @pytest.fixture(autouse=True)\r\n    def _django_db_marker(request):\r\n        \"\"\"Implement the django_db marker, internal to pytest-django.\r\n    \r\n        This will dynamically request the ``db`` or ``transactional_db``\r\n        fixtures as required by the django_db marker.\r\n        \"\"\"\r\n        marker = request.keywords.get('django_db', None)\r\n        if marker:\r\n            validate_django_db(marker)\r\n            if marker.transaction:\r\n                getfixturevalue(request, 'transactional_db')\r\n            else:\r\n>               getfixturevalue(request, 'db')\r\n\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/pytest_django/plugin.py:376: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/pytest_django/pytest_compat.py:3: in getfixturevalue\r\n    return request.getfixturevalue(value)\r\ncomplykaro/apps/common/tests/conftest.py:7: in django_db_setup\r\n    call_command('loaddata', 'test_initial.json')\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/core/management/__init__.py:119: in call_command\r\n    return command.execute(*args, **defaults)\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/core/management/base.py:399: in execute\r\n    output = self.handle(*args, **options)\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/core/management/commands/loaddata.py:60: in handle\r\n    self.loaddata(fixture_labels)\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/core/management/commands/loaddata.py:90: in loaddata\r\n    self.load_label(fixture_label)\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/core/management/commands/loaddata.py:148: in load_label\r\n    obj.save(using=self.using)\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/core/serializers/base.py:201: in save\r\n    models.Model.save_base(self.object, using=using, raw=True, **kwargs)\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/db/models/base.py:737: in save_base\r\n    update_fields=update_fields, raw=raw, using=using)\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/dispatch/dispatcher.py:192: in send\r\n    response = receiver(signal=self, sender=sender, **named)\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/auditlog/receivers.py:21: in log_create\r\n    changes=json.dumps(changes),\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/auditlog/models.py:39: in log_create\r\n    kwargs.setdefault('object_repr', smart_text(instance))\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/utils/encoding.py:42: in smart_text\r\n    return force_text(s, encoding, strings_only, errors)\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/utils/encoding.py:76: in force_text\r\n    s = six.text_type(s)\r\ncomplykaro/apps/user_management/models/company_loaction.py:57: in __str__\r\n    return self.company.__str__() + \" | \" + self.name\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/db/models/fields/related_descriptors.py:169: in __get__\r\n    rel_obj = qs.get()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <[Failed(\"Database access not allowed, use the \"django_db\" mark, or the \"db\" or \"transactional_db\" fixtures to enable it.\") raised in repr()] QuerySet object at 0x7fe7dc02b160>\r\nargs = (), kwargs = {}, clone = [], num = 0\r\n\r\n    def get(self, *args, **kwargs):\r\n        \"\"\"\r\n            Performs the query and returns a single object matching the given\r\n            keyword arguments.\r\n            \"\"\"\r\n        clone = self.filter(*args, **kwargs)\r\n        if self.query.can_filter() and not self.query.distinct_fields:\r\n            clone = clone.order_by()\r\n        num = len(clone)\r\n        if num == 1:\r\n            return clone._result_cache[0]\r\n        if not num:\r\n            raise self.model.DoesNotExist(\r\n                \"%s matching query does not exist.\" %\r\n>               self.model._meta.object_name\r\n            )\r\nE           complykaro.apps.user_management.models.company.DoesNotExist: Problem installing fixture '/home/darshitp/Projects/Complykaro/Complykaro/complykaro/test_initial.json': Company matching query does not exist.\r\n\r\n/opt/myvirtual/ckenv/lib/python3.5/site-packages/django/db/models/query.py:387: DoesNotExist\r\n========================================================== 1 error in 16.51 seconds ==========================================================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/443", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/443/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/443/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/443/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/443", "id": 197154043, "node_id": "MDU6SXNzdWUxOTcxNTQwNDM=", "number": 443, "title": "django-rest-framework api_client fixture?", "user": {"login": "nirizr", "id": 3631703, "node_id": "MDQ6VXNlcjM2MzE3MDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3631703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nirizr", "html_url": "https://github.com/nirizr", "followers_url": "https://api.github.com/users/nirizr/followers", "following_url": "https://api.github.com/users/nirizr/following{/other_user}", "gists_url": "https://api.github.com/users/nirizr/gists{/gist_id}", "starred_url": "https://api.github.com/users/nirizr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nirizr/subscriptions", "organizations_url": "https://api.github.com/users/nirizr/orgs", "repos_url": "https://api.github.com/users/nirizr/repos", "events_url": "https://api.github.com/users/nirizr/events{/privacy}", "received_events_url": "https://api.github.com/users/nirizr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-22T11:26:05Z", "updated_at": "2016-12-22T18:25:44Z", "closed_at": "2016-12-22T15:18:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "DRF adds an APIClient class extending django's Client class. Since I'm using DRF and pytest to test it an `api_client` fixture seems appropriate. Is this something you're willing to consider?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/438", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/438/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/438/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/438/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/438", "id": 193748065, "node_id": "MDU6SXNzdWUxOTM3NDgwNjU=", "number": 438, "title": "Loading of Django signals", "user": {"login": "jamescooke", "id": 781059, "node_id": "MDQ6VXNlcjc4MTA1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/781059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamescooke", "html_url": "https://github.com/jamescooke", "followers_url": "https://api.github.com/users/jamescooke/followers", "following_url": "https://api.github.com/users/jamescooke/following{/other_user}", "gists_url": "https://api.github.com/users/jamescooke/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamescooke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamescooke/subscriptions", "organizations_url": "https://api.github.com/users/jamescooke/orgs", "repos_url": "https://api.github.com/users/jamescooke/repos", "events_url": "https://api.github.com/users/jamescooke/events{/privacy}", "received_events_url": "https://api.github.com/users/jamescooke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-06T11:26:39Z", "updated_at": "2016-12-15T09:39:48Z", "closed_at": "2016-12-15T07:10:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "In a test suite I'm working with, there are a couple of models that have immutable UUID fields - this protection is provided by a `pre_save` signal in the Django app. It looks like this:\r\n\r\n```py\r\n@receiver(pre_save, sender=PullRequest)\r\ndef check_change_uuid(sender, instance, **kwargs):\r\n    \"\"\"\r\n    Before model that entends UUIDModel is saved, ensure that its UUID has not\r\n    changed.\r\n\r\n    Raises:\r\n        ValidationError: If uuid of the model has been found to change.\r\n    \"\"\"\r\n    ...\r\n```\r\n\r\nTo ensure that this is wired in correctly I have a test that attempts to change the UUID field in the `PullRequest` instance which expects a `ValidationError` to be raised:\r\n\r\n```py\r\n@pytest.mark.django_db\r\ndef test_uuid_permanent():\r\n    \"\"\"\r\n    PullRequest instances have immutable UUIDs\r\n\r\n    Trusts:\r\n        test_signals: A helpful message is raised.\r\n    \"\"\"\r\n    repo = PullRequest.objects.create(\r\n        repository=RepositoryFactory(),\r\n    )\r\n    repo.uuid = uuid.uuid4()\r\n\r\n    with pytest.raises(ValidationError):\r\n        repo.save()\r\n```\r\n\r\nThis test fails when run in isolation - but passes when the whole suite is run.\r\n\r\nIn order to fix the test to work in isolation, I've explicitly imported the signals at the top of the test file:\r\n\r\n```py\r\nfrom ...signals import check_change_uuid\r\n```\r\n\r\n... and the test passes again.\r\n\r\n**What is the correct way with `pytest-django` to turn on Django signals for a test?**\r\n\r\nI've searched the docs and the Issues, but can't find the official way to ensure that Signals are active - is there a fixture for that which I'm missing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/436", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-django", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/436/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-django/issues/436/events", "html_url": "https://github.com/pytest-dev/pytest-django/issues/436", "id": 192414605, "node_id": "MDU6SXNzdWUxOTI0MTQ2MDU=", "number": 436, "title": "Test finder inconsistency between django.test and pytest-django", "user": {"login": "lynncyrin", "id": 5768468, "node_id": "MDQ6VXNlcjU3Njg0Njg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5768468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lynncyrin", "html_url": "https://github.com/lynncyrin", "followers_url": "https://api.github.com/users/lynncyrin/followers", "following_url": "https://api.github.com/users/lynncyrin/following{/other_user}", "gists_url": "https://api.github.com/users/lynncyrin/gists{/gist_id}", "starred_url": "https://api.github.com/users/lynncyrin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lynncyrin/subscriptions", "organizations_url": "https://api.github.com/users/lynncyrin/orgs", "repos_url": "https://api.github.com/users/lynncyrin/repos", "events_url": "https://api.github.com/users/lynncyrin/events{/privacy}", "received_events_url": "https://api.github.com/users/lynncyrin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 117314970, "node_id": "MDU6TGFiZWwxMTczMTQ5NzA=", "url": "https://api.github.com/repos/pytest-dev/pytest-django/labels/enhancement", "name": "enhancement", "color": "207de5", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-29T22:02:03Z", "updated_at": "2019-06-22T23:01:15Z", "closed_at": "2019-06-22T23:01:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "First off, what I'm about to describe is \"solved\" by adding `python_files=test*.py` to `pytest.ini`. \r\n\r\nSo [django.test's](https://docs.djangoproject.com/en/1.10/topics/testing/overview/#running-tests) documentation finds tests with `test*.py`, and [pytest-django](https://pytest-django.readthedocs.io/en/latest/faq.html#faq-tests-not-being-picked-up) is finding tests with `test_*.py`.\r\n\r\nI am 100% sure this has been pointed out before -- but as a user I expect pytest django to follow Django's style of test finding, not to have to add a line to pytest ini. I feel that making pytest-django find tests with `test*.py` would be incredibly helpful for the new user experience.", "performed_via_github_app": null, "score": 1.0}]}