{"total_count": 308, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/710", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/710/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/710/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/710/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/710", "id": 683710687, "node_id": "MDU6SXNzdWU2ODM3MTA2ODc=", "number": 710, "title": "Need to explain please.", "user": {"login": "dpineiden", "id": 225633, "node_id": "MDQ6VXNlcjIyNTYzMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/225633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpineiden", "html_url": "https://github.com/dpineiden", "followers_url": "https://api.github.com/users/dpineiden/followers", "following_url": "https://api.github.com/users/dpineiden/following{/other_user}", "gists_url": "https://api.github.com/users/dpineiden/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpineiden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpineiden/subscriptions", "organizations_url": "https://api.github.com/users/dpineiden/orgs", "repos_url": "https://api.github.com/users/dpineiden/repos", "events_url": "https://api.github.com/users/dpineiden/events{/privacy}", "received_events_url": "https://api.github.com/users/dpineiden/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-21T17:35:40Z", "updated_at": "2020-08-22T21:21:04Z", "closed_at": "2020-08-22T21:21:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "On the homepage, shows a Task model and a 'assign_task' permissions.\r\n\r\nWell, it says also that Django came with 'add', 'change', 'view', 'delete' permissions.\r\n\r\nSo I can't find where the new 'assign_task' permission is implemented, there are a new function? Or there are a new set of actions with django-guardian? What means the 'assign-task' permission? How can i bring to reality?\r\n\r\nWIth that, i can create any type of actions under this permission managment? On the documentation is not very clear how to pass from the word 'action_model' to a function or whathever 'action'. allowed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/709", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/709/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/709/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/709/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/709", "id": 682395006, "node_id": "MDU6SXNzdWU2ODIzOTUwMDY=", "number": 709, "title": "How can I optimize my query when using `assign_perm`?", "user": {"login": "Aguezz", "id": 46087365, "node_id": "MDQ6VXNlcjQ2MDg3MzY1", "avatar_url": "https://avatars1.githubusercontent.com/u/46087365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aguezz", "html_url": "https://github.com/Aguezz", "followers_url": "https://api.github.com/users/Aguezz/followers", "following_url": "https://api.github.com/users/Aguezz/following{/other_user}", "gists_url": "https://api.github.com/users/Aguezz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aguezz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aguezz/subscriptions", "organizations_url": "https://api.github.com/users/Aguezz/orgs", "repos_url": "https://api.github.com/users/Aguezz/repos", "events_url": "https://api.github.com/users/Aguezz/events{/privacy}", "received_events_url": "https://api.github.com/users/Aguezz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-20T04:06:13Z", "updated_at": "2020-08-21T07:05:14Z", "closed_at": "2020-08-21T07:05:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently working on a project where one room has its own group permissions.\r\n\r\nWhen someone creates a new room, the system will do the following:\r\n\r\n1. Creating a room\r\n2. Create owner and staff groups with unique names, such as `Room Owner#room#{pk}`\r\n3. Get list of owner and staff permissions from Room class\r\n4. Make an assignment to each group\r\n5. Assign owner group permissions to the user\r\n\r\nHere is my Room model :\r\n\r\n```python\r\nclass Room(models.Model):\r\n\t# ...fields\r\n\r\n\tPERMISSION_GROUPS = [\r\n\t\t'owner': [\r\n\t\t\t('view_room', _('...')),\r\n\t\t\t('change_room', _('...')),\r\n\t\t\t('delete_room', _('...')),\r\n\r\n\t\t\t('open_room', _('...')),\r\n\t\t\t('close_room', _('...'))\r\n\t\t],\r\n\t\t'staff': [\r\n\t\t\t('view_room', _('...')),\r\n\t\t\t('open_room', _('...')),\r\n\t\t\t('close_room', _('...'))\t\r\n\t\t]\r\n\t]\r\n```\r\n\r\nThis is my code for create room and generate group permissions:\r\n\r\n```python\r\nfrom guardian.shortcuts import assign_perm\r\n\r\nclass CreateRoomView(generics.CreateAPIView):\r\n    def _get_permission_string(self, perm):\r\n        \"\"\"\r\n        Get string permission, the return is like 'room.add_room'\r\n        \"\"\"\r\n        return f'room.{perm.codename}'\r\n\r\n    def post(self):\r\n        # Create a room\r\n        body = {}\r\n        room = Room.objects.create(**body)\r\n        \r\n        # Get content type\r\n        ctype = ContentType.objects.get_for_model(Room)\r\n        \r\n        # Define name of owner and staff group for this room permission\r\n        owner_group_name = _('Room Owner#room#{pk}')\r\n        staff_group_name = _('Room Staff#room#{pk}')\r\n        \r\n        # Create group\r\n        owner_group = Group.objects.create(\r\n        \tname=owner_group_name.format(pk=room.pk))\r\n        staff_group = Group.objects.create(\r\n        \tname=staff_group_name.format(pk=room.pk))\r\n        \r\n        # Get permissions by group permissions\r\n        owner_perms = Permission.objects.filter(\r\n            codename__in=Room.PERMISSION_GROUPS.get('owner'), content_type=ctype)\r\n        staff_perms = Permission.objects.filter(\r\n            codename__in=Room.PERMISSION_GROUPS.get('staff'), content_type=ctype)\r\n        \r\n        # Assign owner permissions to the group\r\n        for owner_perm in owner_perms:\r\n            perm = self._get_permission_string(owner_perm)\r\n            assign_perm(perm, owner_group, obj=room)\r\n        \r\n        # Assign staff permissions to the group\r\n        for staff_perm in staff_perms:\r\n            perm = self._get_permission_string(staff_perm)\r\n            assign_perm(perm, staff_group, obj=room)\r\n        \r\n        # Assign owner group permission to the user\r\n        request.user.groups.add(owner_group)\r\n```\r\n\r\nWhen I look at the query logs, there are a lot of queries being performed in this process.\r\n\r\nActually there are still a few groups and the assignment process as above, but I only included a few examples, so there are not too many.If calculated, there may be ***more than 50 query executions*** that run in this process.\r\n\r\nSo, **how can I optimize the query for this problem?** Can anyone share how to do it better.\r\n\r\nThank you,\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/703", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/703/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/703/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/703/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/703", "id": 626101985, "node_id": "MDU6SXNzdWU2MjYxMDE5ODU=", "number": 703, "title": "audiofield throws arror", "user": {"login": "Smartybrainy", "id": 64055430, "node_id": "MDQ6VXNlcjY0MDU1NDMw", "avatar_url": "https://avatars0.githubusercontent.com/u/64055430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Smartybrainy", "html_url": "https://github.com/Smartybrainy", "followers_url": "https://api.github.com/users/Smartybrainy/followers", "following_url": "https://api.github.com/users/Smartybrainy/following{/other_user}", "gists_url": "https://api.github.com/users/Smartybrainy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Smartybrainy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Smartybrainy/subscriptions", "organizations_url": "https://api.github.com/users/Smartybrainy/orgs", "repos_url": "https://api.github.com/users/Smartybrainy/repos", "events_url": "https://api.github.com/users/Smartybrainy/events{/privacy}", "received_events_url": "https://api.github.com/users/Smartybrainy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-27T23:23:11Z", "updated_at": "2020-05-28T12:27:58Z", "closed_at": "2020-05-28T12:00:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am new in django and want to add audio file to my new blog app and the documentation instructs me to install and add audiofield to the list of my INSTALLED_APP in settings.py, but after adding the 'audiofield', all I see is error. showing the below.\r\n\r\nERRORS:\r\naudiofield.AudioFile: (auth.E005) The permission codenamed 'view_audiofile' clashes with a builtin permission for model 'audiofield.AudioFile'.\r\n\r\nI have search all over the internet and there is no solution that could fix this issue.\r\nPlease I will appreciate if anyone have and idea of what codename if and how to fix this problem\r\n\r\nPlease", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/702", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/702/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/702/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/702/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/702", "id": 624431716, "node_id": "MDU6SXNzdWU2MjQ0MzE3MTY=", "number": 702, "title": "user_can_access_owned_objects_only = True, without using a Foreign Key. ", "user": {"login": "alih552", "id": 20465950, "node_id": "MDQ6VXNlcjIwNDY1OTUw", "avatar_url": "https://avatars3.githubusercontent.com/u/20465950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alih552", "html_url": "https://github.com/alih552", "followers_url": "https://api.github.com/users/alih552/followers", "following_url": "https://api.github.com/users/alih552/following{/other_user}", "gists_url": "https://api.github.com/users/alih552/gists{/gist_id}", "starred_url": "https://api.github.com/users/alih552/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alih552/subscriptions", "organizations_url": "https://api.github.com/users/alih552/orgs", "repos_url": "https://api.github.com/users/alih552/repos", "events_url": "https://api.github.com/users/alih552/events{/privacy}", "received_events_url": "https://api.github.com/users/alih552/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-25T18:19:33Z", "updated_at": "2020-05-28T16:51:36Z", "closed_at": "2020-05-28T16:51:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I described my issue here : \r\nhttps://stackoverflow.com/questions/62008228/django-guardian-displaying-objects-based-on-object-level-permssions-without-havi\r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/699", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/699/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/699/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/699/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/699", "id": 611241898, "node_id": "MDU6SXNzdWU2MTEyNDE4OTg=", "number": 699, "title": "get_objects_for_user() breaks on PostgreSQL with inherited models", "user": {"login": "Maxr1998", "id": 5903699, "node_id": "MDQ6VXNlcjU5MDM2OTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5903699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maxr1998", "html_url": "https://github.com/Maxr1998", "followers_url": "https://api.github.com/users/Maxr1998/followers", "following_url": "https://api.github.com/users/Maxr1998/following{/other_user}", "gists_url": "https://api.github.com/users/Maxr1998/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maxr1998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maxr1998/subscriptions", "organizations_url": "https://api.github.com/users/Maxr1998/orgs", "repos_url": "https://api.github.com/users/Maxr1998/repos", "events_url": "https://api.github.com/users/Maxr1998/events{/privacy}", "received_events_url": "https://api.github.com/users/Maxr1998/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-02T17:57:18Z", "updated_at": "2020-05-04T18:46:37Z", "closed_at": "2020-05-04T18:46:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Bug description\r\n\r\nConsider the following model structure:\r\n\r\n```py\r\nclass Parent(django.db.models.Model):\r\n    \"\"\"\r\n    Parent class, primary key is an AutoField\r\n    \"\"\"\r\n    name = models.CharField(max_length=100)\r\n\r\n\r\nclass Child(Parent):\r\n    \"\"\"\r\n    Subclass, inherits primary key from Parent, keeps a reference to the parent in an OneToOneField\r\n    \"\"\"\r\n    data = models.CharField(max_length=100)\r\n```\r\n\r\nNow, calling `guardian.shortcuts.get_objects_for_user(user, 'permission', Child)` will crash the application due to a database exception, namely:\r\n```\r\ndjango.db.utils.ProgrammingError: operator does not exist: integer = character varying\r\n<SQL>\r\n```\r\n\r\nThe reason for this is a missing cast on the `object_pk` field from guardian (compare #366 for reference).\r\nThrough some debugging I found out that the issue lies in `guardian.shortcuts._is_cast_integer_pk`, which completely ignores the possibility of primary keys referenced through OneToOneFields (or other foreign key types).\r\n\r\n## Proposal\r\nForeignKey fields like OneToOneFields should be explicitly handled in `_is_cast_integer_pk`. One solution I've come up with would be this:\r\n\r\n```py\r\ndef _is_cast_integer_pk(queryset):\r\n    return _is_cast_integer_pk_field(queryset.model._meta.pk)\r\n\r\n\r\ndef _is_cast_integer_pk_field(field):\r\n    if isinstance(field, RelatedField):\r\n        return _is_cast_integer_pk_field(field.related_model._meta.pk)\r\n\r\n    return isinstance(field, (\r\n        IntegerField, AutoField, BigIntegerField,\r\n        PositiveIntegerField, PositiveSmallIntegerField,\r\n        SmallIntegerField))\r\n```\r\n\r\nAlternatively, one could use the `cast_db_type` something like this:\r\n```py\r\ndef _is_cast_integer_pk(queryset):\r\n   return queryset.model._meta.pk.cast_db_type(transaction.get_connection(queryset.db)) == 'integer'\r\n```\r\n\r\nIf you want, I can make a PR ready tomorrow.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/698", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/698/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/698/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/698/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/698", "id": 610886861, "node_id": "MDU6SXNzdWU2MTA4ODY4NjE=", "number": 698, "title": "Error in `create_anonymous_user` when running migrations despite success", "user": {"login": "kurtwheeler", "id": 4026833, "node_id": "MDQ6VXNlcjQwMjY4MzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4026833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtwheeler", "html_url": "https://github.com/kurtwheeler", "followers_url": "https://api.github.com/users/kurtwheeler/followers", "following_url": "https://api.github.com/users/kurtwheeler/following{/other_user}", "gists_url": "https://api.github.com/users/kurtwheeler/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtwheeler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtwheeler/subscriptions", "organizations_url": "https://api.github.com/users/kurtwheeler/orgs", "repos_url": "https://api.github.com/users/kurtwheeler/repos", "events_url": "https://api.github.com/users/kurtwheeler/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtwheeler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-01T18:06:03Z", "updated_at": "2020-05-01T18:20:16Z", "closed_at": "2020-05-01T18:20:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run my migrations against a fresh database I get an `django.db.utils.ProgrammingError: relation \"authtoken_token\" does not exist` error originating from `create_anonymous_user`. This happens even when starting with a completely fresh database and no migrations.\r\n\r\nHowever, this doesn't actually seem to cause any issues. The migrations still applied successfully, and subsequent runs of the `migrate` command happily report there's nothing more to do.\r\n\r\n```\r\nkurt:~/Development/resources-portal$ docker-compose run --rm api ./manage.py makemigrations resources_portal\r\nCreating resourcesportal_postgres_1 ... \r\nCreating resourcesportal_postgres_1 ... done\r\nCreating elasticsearch ... \r\nCreating elasticsearch ... done\r\nMigrations for 'resources_portal':\r\n  resources_portal/migrations/0001_initial.py\r\n    - Create model User\r\n    - Create model Attachment\r\n    - Create model Material\r\n    - Create model Organization\r\n    - Create model ShippingInformation\r\n    - Create model OrganizationUserSetting\r\n    - Create model OrganizationUserAssociation\r\n    - Create model OrganizationInvitation\r\n    - Add field members to organization\r\n    - Add field owner to organization\r\n    - Create model MaterialShareEvent\r\n    - Create model MaterialRequest\r\n    - Add field organization to material\r\n    - Add field shipping_information to material\r\n    - Create model Grant\r\n    - Add field sequence_map_for to attachment\r\n    - Add field organizations to user\r\n    - Add field user_permissions to user\r\n\r\nkurt:~/Development/resources-portal$ docker-compose run --rm api ./manage.py makemigrations resources_portal\r\nStarting resourcesportal_postgres_1 ... done\r\nStarting elasticsearch ... done\r\nNo changes detected in app 'resources_portal'\r\n\r\nkurt:~/Development/resources-portal$ docker-compose run --rm api ./manage.py migrate resources_portal\r\nStarting resourcesportal_postgres_1 ... done\r\nStarting elasticsearch ... done\r\nOperations to perform:\r\n  Apply all migrations: resources_portal\r\nRunning migrations:\r\n  Applying contenttypes.0001_initial... OK\r\n  Applying contenttypes.0002_remove_content_type_name... OK\r\n  Applying auth.0001_initial... OK\r\n  Applying auth.0002_alter_permission_name_max_length... OK\r\n  Applying auth.0003_alter_user_email_max_length... OK\r\n  Applying auth.0004_alter_user_username_opts... OK\r\n  Applying auth.0005_alter_user_last_login_null... OK\r\n  Applying auth.0006_require_contenttypes_0002... OK\r\n  Applying auth.0007_alter_validators_add_error_messages... OK\r\n  Applying auth.0008_alter_user_username_max_length... OK\r\n  Applying auth.0009_alter_user_last_name_max_length... OK\r\n  Applying auth.0010_alter_group_name_max_length... OK\r\n  Applying auth.0011_update_proxy_permissions... OK\r\n  Applying resources_portal.0001_initial... OK\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/site-packages/guardian/management/__init__.py\", line 32, in create_anonymous_user\r\n    User.objects.using(kwargs['using']).get(**lookup)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/models/query.py\", line 406, in get\r\n    raise self.model.DoesNotExist(\r\nresources_portal.models.user.DoesNotExist: User matching query does not exist.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/backends/utils.py\", line 84, in _execute\r\n    return self.cursor.execute(sql, params)\r\npsycopg2.errors.UndefinedTable: relation \"authtoken_token\" does not exist\r\nLINE 1: INSERT INTO \"authtoken_token\" (\"key\", \"user_id\", \"created\") ...\r\n                    ^\r\n\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"./manage.py\", line 30, in <module>\r\n    main()\r\n  File \"./manage.py\", line 26, in main\r\n    execute_from_command_line(sys.argv)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/core/management/__init__.py\", line 381, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/usr/local/lib/python3.8/site-packages/django/core/management/__init__.py\", line 375, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/core/management/base.py\", line 323, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/core/management/base.py\", line 364, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/core/management/base.py\", line 83, in wrapped\r\n    res = handle_func(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/core/management/commands/migrate.py\", line 256, in handle\r\n    emit_post_migrate_signal(\r\n  File \"/usr/local/lib/python3.8/site-packages/django/core/management/sql.py\", line 45, in emit_post_migrate_signal\r\n    models.signals.post_migrate.send(\r\n  File \"/usr/local/lib/python3.8/site-packages/django/dispatch/dispatcher.py\", line 173, in send\r\n    return [\r\n  File \"/usr/local/lib/python3.8/site-packages/django/dispatch/dispatcher.py\", line 174, in <listcomp>\r\n    (receiver, receiver(signal=self, sender=sender, **named))\r\n  File \"/usr/local/lib/python3.8/site-packages/guardian/management/__init__.py\", line 37, in create_anonymous_user\r\n    user.save(using=kwargs['using'])\r\n  File \"/usr/local/lib/python3.8/site-packages/django/contrib/auth/base_user.py\", line 66, in save\r\n    super().save(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/models/base.py\", line 740, in save\r\n    self.save_base(using=using, force_insert=force_insert,\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/models/base.py\", line 788, in save_base\r\n    post_save.send(\r\n  File \"/usr/local/lib/python3.8/site-packages/django/dispatch/dispatcher.py\", line 173, in send\r\n    return [\r\n  File \"/usr/local/lib/python3.8/site-packages/django/dispatch/dispatcher.py\", line 174, in <listcomp>\r\n    (receiver, receiver(signal=self, sender=sender, **named))\r\n  File \"/home/user/code/resources_portal/models/user.py\", line 26, in create_auth_token\r\n    Token.objects.create(user=instance)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/models/manager.py\", line 82, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/models/query.py\", line 422, in create\r\n    obj.save(force_insert=True, using=self.db)\r\n  File \"/usr/local/lib/python3.8/site-packages/rest_framework/authtoken/models.py\", line 35, in save\r\n    return super(Token, self).save(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/models/base.py\", line 740, in save\r\n    self.save_base(using=using, force_insert=force_insert,\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/models/base.py\", line 777, in save_base\r\n    updated = self._save_table(\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/models/base.py\", line 870, in _save_table\r\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/models/base.py\", line 907, in _do_insert\r\n    return manager._insert([self], fields=fields, return_id=update_pk,\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/models/manager.py\", line 82, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/models/query.py\", line 1186, in _insert\r\n    return query.get_compiler(using=using).execute_sql(return_id)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/models/sql/compiler.py\", line 1375, in execute_sql\r\n    cursor.execute(sql, params)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/backends/utils.py\", line 99, in execute\r\n    return super().execute(sql, params)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/backends/utils.py\", line 67, in execute\r\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/backends/utils.py\", line 76, in _execute_with_wrappers\r\n    return executor(sql, params, many, context)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/backends/utils.py\", line 84, in _execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/utils.py\", line 89, in __exit__\r\n    raise dj_exc_value.with_traceback(traceback) from exc_value\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/backends/utils.py\", line 84, in _execute\r\n    return self.cursor.execute(sql, params)\r\ndjango.db.utils.ProgrammingError: relation \"authtoken_token\" does not exist\r\nLINE 1: INSERT INTO \"authtoken_token\" (\"key\", \"user_id\", \"created\") ...\r\n                    ^\r\nkurt:~/Development/resources-portal$ docker-compose run --rm api ./manage.py migrate resources_portal\r\nStarting resourcesportal_postgres_1 ... done\r\nStarting elasticsearch ... done\r\nOperations to perform:\r\n  Apply all migrations: resources_portal\r\nRunning migrations:\r\n  No migrations to apply.\r\n```\r\n\r\nAny ideas why this error is being raised and what I can do about it? If it'd be helpful to see the source code my project is open source and can be found in the `api` directory of https://github.com/AlexsLemonade/resources-portal.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/688", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/688/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/688/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/688/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/688", "id": 583352776, "node_id": "MDU6SXNzdWU1ODMzNTI3NzY=", "number": 688, "title": "get_objects_for_user broke on 2.2.0 from 2.1.0 for non int and non character varying primary keys", "user": {"login": "jmacul2", "id": 599790, "node_id": "MDQ6VXNlcjU5OTc5MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/599790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmacul2", "html_url": "https://github.com/jmacul2", "followers_url": "https://api.github.com/users/jmacul2/followers", "following_url": "https://api.github.com/users/jmacul2/following{/other_user}", "gists_url": "https://api.github.com/users/jmacul2/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmacul2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmacul2/subscriptions", "organizations_url": "https://api.github.com/users/jmacul2/orgs", "repos_url": "https://api.github.com/users/jmacul2/repos", "events_url": "https://api.github.com/users/jmacul2/events{/privacy}", "received_events_url": "https://api.github.com/users/jmacul2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-17T23:07:55Z", "updated_at": "2020-04-14T17:43:33Z", "closed_at": "2020-04-14T17:43:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I user macaddr as a primary key for a big django project.  Non int primary keys worked fine with this shortcut function until release 2.2.0.  Now it is throwing:\r\n\r\n`\r\nException Type: ProgrammingError at /api/hosts/\r\nException Value: operator does not exist: macaddr = character varying\r\nLINE 1: ...\".\"search_index\" FROM \"hosts\" WHERE \"hosts\".\"mac\" IN (SELECT...\r\n                                                             ^\r\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\r\n`\r\n\r\nI might try working up a pull request in a few days.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/683", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/683/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/683/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/683/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/683", "id": 567908536, "node_id": "MDU6SXNzdWU1Njc5MDg1MzY=", "number": 683, "title": "Field level security support?", "user": {"login": "iSteal", "id": 45405755, "node_id": "MDQ6VXNlcjQ1NDA1NzU1", "avatar_url": "https://avatars2.githubusercontent.com/u/45405755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iSteal", "html_url": "https://github.com/iSteal", "followers_url": "https://api.github.com/users/iSteal/followers", "following_url": "https://api.github.com/users/iSteal/following{/other_user}", "gists_url": "https://api.github.com/users/iSteal/gists{/gist_id}", "starred_url": "https://api.github.com/users/iSteal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iSteal/subscriptions", "organizations_url": "https://api.github.com/users/iSteal/orgs", "repos_url": "https://api.github.com/users/iSteal/repos", "events_url": "https://api.github.com/users/iSteal/events{/privacy}", "received_events_url": "https://api.github.com/users/iSteal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-19T23:02:49Z", "updated_at": "2020-03-11T02:20:44Z", "closed_at": "2020-03-11T02:20:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is field level security (as opposed to object level) supported? If not, what would it take to make it work? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/681", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/681/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/681/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/681/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/681", "id": 565817701, "node_id": "MDU6SXNzdWU1NjU4MTc3MDE=", "number": 681, "title": "user should see only filtered list of object in admin listview", "user": {"login": "zbynekdrlik", "id": 26905282, "node_id": "MDQ6VXNlcjI2OTA1Mjgy", "avatar_url": "https://avatars2.githubusercontent.com/u/26905282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zbynekdrlik", "html_url": "https://github.com/zbynekdrlik", "followers_url": "https://api.github.com/users/zbynekdrlik/followers", "following_url": "https://api.github.com/users/zbynekdrlik/following{/other_user}", "gists_url": "https://api.github.com/users/zbynekdrlik/gists{/gist_id}", "starred_url": "https://api.github.com/users/zbynekdrlik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zbynekdrlik/subscriptions", "organizations_url": "https://api.github.com/users/zbynekdrlik/orgs", "repos_url": "https://api.github.com/users/zbynekdrlik/repos", "events_url": "https://api.github.com/users/zbynekdrlik/events{/privacy}", "received_events_url": "https://api.github.com/users/zbynekdrlik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-15T22:22:55Z", "updated_at": "2020-02-16T15:26:16Z", "closed_at": "2020-02-16T15:26:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have list of devices(objects), which need be accessible for users in some group. In admin I am not be able setup permissions to logged user see only devices which are accessible to same group.\r\nThe objects are not owned by one group or one user. There can be many groups which should have access to one object.\r\nIs it possible in guardian by default or there is necessary to override same functions?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/680", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/680/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/680/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/680/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/680", "id": 564703928, "node_id": "MDU6SXNzdWU1NjQ3MDM5Mjg=", "number": 680, "title": "click to object permission redirect to main admin page", "user": {"login": "zbynekdrlik", "id": 26905282, "node_id": "MDQ6VXNlcjI2OTA1Mjgy", "avatar_url": "https://avatars2.githubusercontent.com/u/26905282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zbynekdrlik", "html_url": "https://github.com/zbynekdrlik", "followers_url": "https://api.github.com/users/zbynekdrlik/followers", "following_url": "https://api.github.com/users/zbynekdrlik/following{/other_user}", "gists_url": "https://api.github.com/users/zbynekdrlik/gists{/gist_id}", "starred_url": "https://api.github.com/users/zbynekdrlik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zbynekdrlik/subscriptions", "organizations_url": "https://api.github.com/users/zbynekdrlik/orgs", "repos_url": "https://api.github.com/users/zbynekdrlik/repos", "events_url": "https://api.github.com/users/zbynekdrlik/events{/privacy}", "received_events_url": "https://api.github.com/users/zbynekdrlik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-13T14:03:16Z", "updated_at": "2020-02-13T22:06:05Z", "closed_at": "2020-02-13T22:06:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "[13/Feb/2020 15:02:08] \"GET /admin/adm/devices/2668/change/ HTTP/1.1\" 200 90385\r\n[13/Feb/2020 15:02:29] \"GET /admin/adm/devices/2668/permissions/ HTTP/1.1\" 302 0\r\n[13/Feb/2020 15:02:29] \"GET /admin/ HTTP/1.1\" 200 6590\r\n\r\nWhat is the reason", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/678", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/678/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/678/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/678/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/678", "id": 562091320, "node_id": "MDU6SXNzdWU1NjIwOTEzMjA=", "number": 678, "title": "Is guardian creating a N*M table for N users and M objects?", "user": {"login": "BoPeng", "id": 9889312, "node_id": "MDQ6VXNlcjk4ODkzMTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9889312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoPeng", "html_url": "https://github.com/BoPeng", "followers_url": "https://api.github.com/users/BoPeng/followers", "following_url": "https://api.github.com/users/BoPeng/following{/other_user}", "gists_url": "https://api.github.com/users/BoPeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoPeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoPeng/subscriptions", "organizations_url": "https://api.github.com/users/BoPeng/orgs", "repos_url": "https://api.github.com/users/BoPeng/repos", "events_url": "https://api.github.com/users/BoPeng/events{/privacy}", "received_events_url": "https://api.github.com/users/BoPeng/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 775673369, "node_id": "MDU6TGFiZWw3NzU2NzMzNjk=", "url": "https://api.github.com/repos/django-guardian/django-guardian/labels/support", "name": "support", "color": "f4804e", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-08T23:04:57Z", "updated_at": "2020-02-12T16:56:49Z", "closed_at": "2020-02-09T23:54:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am creating a project that currently uses a bunch of `obj.can_xxx(user)` functions to test if `xxx` can be performed by user for certain object, using logics such as if `user` is authenticated and `user` belong to group `A` with permission `X` and `obj` is viewable by any user or group with permission `X`. The problem for this approach is that, for example, if I want to get a list of objects that user can `xxx`, I will have to get all objects and filter by `can_xxx` (or re-implement the same logic at the global level).\r\n\r\nI came across `django-guardian` which seems to be a perfect solution for my problem, but I cannot seem to get a big picture of how guardian works. As far as I can tell, guardian creates a table (many to many relationship) with permission for each user and object, so the size of the table could be `N*M` if there are `N` users and `M` objects even if we do not consider complications such as groups and multiple permissions. Will this be a problem for large number of users and/or objects? Also, how would permission be updated with the change of objects? For example, if the status of an object is changed from `PUBLISHED` to `ARCHIVED`, do I have to change permission for all users? Basically I am thinking where I should define my complex logics of if `user` can do something to `obj` according to both `user` and `obj` properties.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/676", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/676/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/676/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/676/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/676", "id": 560396861, "node_id": "MDU6SXNzdWU1NjAzOTY4NjE=", "number": 676, "title": "v2.2: Model Inheritance on PostgreSQL breaks get_objects_for_user", "user": {"login": "jonnyarnold", "id": 3803030, "node_id": "MDQ6VXNlcjM4MDMwMzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3803030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonnyarnold", "html_url": "https://github.com/jonnyarnold", "followers_url": "https://api.github.com/users/jonnyarnold/followers", "following_url": "https://api.github.com/users/jonnyarnold/following{/other_user}", "gists_url": "https://api.github.com/users/jonnyarnold/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonnyarnold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonnyarnold/subscriptions", "organizations_url": "https://api.github.com/users/jonnyarnold/orgs", "repos_url": "https://api.github.com/users/jonnyarnold/repos", "events_url": "https://api.github.com/users/jonnyarnold/events{/privacy}", "received_events_url": "https://api.github.com/users/jonnyarnold/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-05T14:10:37Z", "updated_at": "2020-03-05T11:01:22Z", "closed_at": "2020-03-05T11:01:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi there!\r\n\r\nI've recently hit an exception using `guardian.shortcuts.get_objects_for_user` when upgrading from v2.1 to v2.2.\r\n\r\nOur Django application uses a PostgreSQL backend and [model inheritance](https://docs.djangoproject.com/en/2.2/topics/db/models/#model-inheritance), similar to the following:\r\n\r\n```py\r\n# models.py\r\nfrom django.db import models\r\n\r\nclass ParentTestModel(models.Model):\r\n    created_on = models.DateTimeField(auto_now_add=True)\r\n\r\nclass ChildTestModel(ParentTestModel):\r\n    parent_id = models.OneToOneField(\r\n        ParentTestModel,\r\n        on_delete=models.CASCADE,\r\n        parent_link=True\r\n    )\r\n    name = models.CharField(max_length=31)\r\n```\r\n\r\nWith this setup, the following code...\r\n\r\n```py\r\nget_objects_for_user(user, 'testapp.change_childtestmodel', ChildTestModel)\r\n```\r\n\r\n...causes an error. In our application, here's the exception:\r\n\r\n```\r\nError\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/site-packages/django/db/backends/utils.py\", line 86, in _execute\r\n    return self.cursor.execute(sql, params)\r\npsycopg2.errors.UndefinedFunction: operator does not exist: integer = character varying\r\nLINE 1: ...test-org' AND (\"core_storeddocument\".\"element_id\" IN (SELECT...\r\n                                                             ^\r\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\r\n```\r\n\r\nDiving into the code, I have noticed [recent changes to get_objects_for_user](https://github.com/django-guardian/django-guardian/commit/7803d0c3afdf09232960b70310759ac131e29824#diff-00305e2706413da2ce53d91a9f9c3655R801-R805) by @woakas that includes the following function:\r\n\r\n```py\r\ndef _is_cast_integer_pk(queryset):\r\n    return isinstance(queryset.model._meta.pk, (\r\n        IntegerField, AutoField, BigIntegerField,\r\n        PositiveIntegerField, PositiveSmallIntegerField,\r\n        SmallIntegerField))\r\n```\r\n\r\nI have a theory that this is the problem: because `ChildTestModel._meta.pk` will be of type `OneToOneField`, `_is_case_integer_pk` will be `False` and the conversions will not be put in place. If this is true, I think `_is_cast_integer_pk` will need extending to follow `ForeignKey` fields to determine if they are integer fields; something like:\r\n\r\n```py\r\ndef _is_cast_integer_pk(queryset):\r\n+   pk = queryset.model._meta.pk\r\n+\r\n+   if isinstance(pk, ForeignKey):\r\n+       return _is_cast_integer_pk(pk.target_field)\r\n+\r\n    return isinstance(pk, (\r\n        IntegerField, AutoField, BigIntegerField,\r\n        PositiveIntegerField, PositiveSmallIntegerField,\r\n        SmallIntegerField))\r\n```\r\n\r\nI [added a test](https://github.com/jonnyarnold/django-guardian/commit/6cda43b5ad77a7e7420d7e30d5117c6c19c5ad56) to verify that this is the issue, but the test passes \ud83e\udd14 I believe this is because django-guardian's test application uses SQLite and SQLite doesn't mind doing the conversion. Unfortunately I don't know of a good way to switch DB backends in testing, or whether that's overkill for just one test.\r\n\r\n---\r\n\r\nIn summary, I'd love it if:\r\n\r\n- Someone could [pull my branch](https://github.com/jonnyarnold/django-guardian/tree/model-inheritance) and run the tests with a PostgreSQL backend to verify that the issue is what I have described.\r\n- Someone could confirm that the problem is `_is_cast_integer_pk`, and refactor it to deal with `OneToOneField`s as primary keys.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/673", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/673/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/673/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/673/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/673", "id": 555211579, "node_id": "MDU6SXNzdWU1NTUyMTE1Nzk=", "number": 673, "title": "Fix simple typo: relase -> release", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-26T10:53:57Z", "updated_at": "2020-01-26T20:58:20Z", "closed_at": "2020-01-26T20:58:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in docs/develop/overview.rst.\nShould read `release` rather than `relase`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/660", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/660/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/660/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/660/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/660", "id": 534867892, "node_id": "MDU6SXNzdWU1MzQ4Njc4OTI=", "number": 660, "title": "No `url` in module, but it's listed in `__all__`", "user": {"login": "davitovmasyan", "id": 8676426, "node_id": "MDQ6VXNlcjg2NzY0MjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/8676426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davitovmasyan", "html_url": "https://github.com/davitovmasyan", "followers_url": "https://api.github.com/users/davitovmasyan/followers", "following_url": "https://api.github.com/users/davitovmasyan/following{/other_user}", "gists_url": "https://api.github.com/users/davitovmasyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/davitovmasyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davitovmasyan/subscriptions", "organizations_url": "https://api.github.com/users/davitovmasyan/orgs", "repos_url": "https://api.github.com/users/davitovmasyan/repos", "events_url": "https://api.github.com/users/davitovmasyan/events{/privacy}", "received_events_url": "https://api.github.com/users/davitovmasyan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-09T11:29:32Z", "updated_at": "2019-12-10T20:41:26Z", "closed_at": "2019-12-10T20:41:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/django-guardian/django-guardian/blob/be53add5d074eeaba4bd70edd6631642a52465c5/guardian/compat.py#L12", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/658", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/658/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/658/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/658/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/658", "id": 523129622, "node_id": "MDU6SXNzdWU1MjMxMjk2MjI=", "number": 658, "title": "Way to exclude guardian from apps.", "user": {"login": "SzateX", "id": 10698770, "node_id": "MDQ6VXNlcjEwNjk4Nzcw", "avatar_url": "https://avatars0.githubusercontent.com/u/10698770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SzateX", "html_url": "https://github.com/SzateX", "followers_url": "https://api.github.com/users/SzateX/followers", "following_url": "https://api.github.com/users/SzateX/following{/other_user}", "gists_url": "https://api.github.com/users/SzateX/gists{/gist_id}", "starred_url": "https://api.github.com/users/SzateX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SzateX/subscriptions", "organizations_url": "https://api.github.com/users/SzateX/orgs", "repos_url": "https://api.github.com/users/SzateX/repos", "events_url": "https://api.github.com/users/SzateX/events{/privacy}", "received_events_url": "https://api.github.com/users/SzateX/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-11-14T22:02:08Z", "updated_at": "2019-11-27T20:50:46Z", "closed_at": "2019-11-27T20:50:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I'm looking for way to exclude guardian to being used in some apps. \r\n\r\nMy Django project has two apps (+ some of builtin or extern). One of them is needed to be on other database, and for them I don't want use guardian (because they don't need to keep permissions). But in migration i got some of errors (https://gist.github.com/SzateX/2c5a6c65c4c3d9bd1e748ee2ba35debc - traceback). \r\nIs any way to exclude guardian from app?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/650", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/650/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/650/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/650/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/650", "id": 513929208, "node_id": "MDU6SXNzdWU1MTM5MjkyMDg=", "number": 650, "title": "Missing user relation with separate DB for sessions", "user": {"login": "browniebroke", "id": 861044, "node_id": "MDQ6VXNlcjg2MTA0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/861044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/browniebroke", "html_url": "https://github.com/browniebroke", "followers_url": "https://api.github.com/users/browniebroke/followers", "following_url": "https://api.github.com/users/browniebroke/following{/other_user}", "gists_url": "https://api.github.com/users/browniebroke/gists{/gist_id}", "starred_url": "https://api.github.com/users/browniebroke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/browniebroke/subscriptions", "organizations_url": "https://api.github.com/users/browniebroke/orgs", "repos_url": "https://api.github.com/users/browniebroke/repos", "events_url": "https://api.github.com/users/browniebroke/events{/privacy}", "received_events_url": "https://api.github.com/users/browniebroke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-29T13:46:48Z", "updated_at": "2019-11-27T20:41:53Z", "closed_at": "2019-11-27T20:41:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In #630, the post-migrate signal has been updated to run on the DB being migrated rather than just on the default one and it seems to have caused an issue when using [a Database router](https://docs.djangoproject.com/en/2.2/topics/db/multi-db/#database-routers). \r\n\r\nIn our case, we have a separate DB for the sessions, our DB router looks like this to ensure session requests & migrations are executed on the right place:\r\n\r\n```\r\nclass SessionRouter:\r\n    def db_for_write(self, model, **hints):\r\n        if model == Session:\r\n            return 'session'\r\n        else:\r\n            return None\r\n\r\n    def allow_migrate(self, db, app_label, model_name=None, **hints):\r\n        if db == 'session':\r\n            return app_label == 'sessions'\r\n        else:\r\n            return None\r\n```\r\n\r\nHowever, that means that when the post-migrate signal fires on this DB, when try to fetch or create the anonymous user, but the DB table for the user model doesn't exist there, causing a `ProgrammingError` with the message `relation \"auth_user\" does not exist`.\r\n\r\nWorks fine with django-guardian 2.0.0 and breaks when updating to 2.1.0. I'll see if I can find some time to send a pull request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/647", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/647/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/647/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/647/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/647", "id": 501256940, "node_id": "MDU6SXNzdWU1MDEyNTY5NDA=", "number": 647, "title": "Remove imort from django six for django 3.0 compat", "user": {"login": "auvipy", "id": 6212603, "node_id": "MDQ6VXNlcjYyMTI2MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6212603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/auvipy", "html_url": "https://github.com/auvipy", "followers_url": "https://api.github.com/users/auvipy/followers", "following_url": "https://api.github.com/users/auvipy/following{/other_user}", "gists_url": "https://api.github.com/users/auvipy/gists{/gist_id}", "starred_url": "https://api.github.com/users/auvipy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/auvipy/subscriptions", "organizations_url": "https://api.github.com/users/auvipy/orgs", "repos_url": "https://api.github.com/users/auvipy/repos", "events_url": "https://api.github.com/users/auvipy/events{/privacy}", "received_events_url": "https://api.github.com/users/auvipy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-02T03:41:04Z", "updated_at": "2020-01-15T14:37:15Z", "closed_at": "2020-01-15T14:37:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/643", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/643/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/643/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/643/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/643", "id": 497985611, "node_id": "MDU6SXNzdWU0OTc5ODU2MTE=", "number": 643, "title": "User should not be able to change a model it only has access to in Django Admin", "user": {"login": "InteractiveEntertainmentTechnology", "id": 55771006, "node_id": "MDQ6VXNlcjU1NzcxMDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/55771006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/InteractiveEntertainmentTechnology", "html_url": "https://github.com/InteractiveEntertainmentTechnology", "followers_url": "https://api.github.com/users/InteractiveEntertainmentTechnology/followers", "following_url": "https://api.github.com/users/InteractiveEntertainmentTechnology/following{/other_user}", "gists_url": "https://api.github.com/users/InteractiveEntertainmentTechnology/gists{/gist_id}", "starred_url": "https://api.github.com/users/InteractiveEntertainmentTechnology/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/InteractiveEntertainmentTechnology/subscriptions", "organizations_url": "https://api.github.com/users/InteractiveEntertainmentTechnology/orgs", "repos_url": "https://api.github.com/users/InteractiveEntertainmentTechnology/repos", "events_url": "https://api.github.com/users/InteractiveEntertainmentTechnology/events{/privacy}", "received_events_url": "https://api.github.com/users/InteractiveEntertainmentTechnology/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-25T00:27:53Z", "updated_at": "2019-09-27T00:31:35Z", "closed_at": "2019-09-27T00:31:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am facing the following issue. I want to be able to allow Users to view and/or change specific objects of my Team model in the Admin interface. So I allow user George to view and change Team 1. I then grant user George permission to VIEW team 2. Now, if I grant George global view access but not global change access, then George can view both teams, but can't edit either of them. If I also grant George global change access, he can now change BOTH teams, even though he should only be able to change Team 1. \r\n\r\nHow can I resolve this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/640", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/640/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/640/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/640/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/640", "id": 494161796, "node_id": "MDU6SXNzdWU0OTQxNjE3OTY=", "number": 640, "title": "Are permission names with a dot (\".\") supported?", "user": {"login": "jonnyarnold", "id": 3803030, "node_id": "MDQ6VXNlcjM4MDMwMzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3803030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonnyarnold", "html_url": "https://github.com/jonnyarnold", "followers_url": "https://api.github.com/users/jonnyarnold/followers", "following_url": "https://api.github.com/users/jonnyarnold/following{/other_user}", "gists_url": "https://api.github.com/users/jonnyarnold/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonnyarnold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonnyarnold/subscriptions", "organizations_url": "https://api.github.com/users/jonnyarnold/orgs", "repos_url": "https://api.github.com/users/jonnyarnold/repos", "events_url": "https://api.github.com/users/jonnyarnold/events{/privacy}", "received_events_url": "https://api.github.com/users/jonnyarnold/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-16T16:46:05Z", "updated_at": "2019-11-27T20:46:51Z", "closed_at": "2019-11-27T20:46:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi there! Thanks for Django Guardian, it's helped us a lot!\r\n\r\nI had a quick question that I couldn't find any documentation for: I've been designing my permissions system with dots in the permission name, like:\r\n\r\n```\r\nmy_app.model.view\r\n```\r\n\r\nThis allows me to separate the object-level permissions (`my_app.model.view`) from the Django-standard all-object permissions (`my_app.import_models`). \r\n\r\nI've run into an error (specifically in `get_objects_for_user`) where the app name is split by `.` with no maximum (`perm.split(\".\")`). In other parts of the Guardian codebase, the app name is split with a maximum (`perm.split(\".\", maxsplit=1)`).\r\n\r\nI couldn't find anywhere where `.` was banned from a permission name, so I thought I'd ask here: **can `.` be used in permission names?**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/639", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/639/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/639/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/639/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/639", "id": 492412553, "node_id": "MDU6SXNzdWU0OTI0MTI1NTM=", "number": 639, "title": "Guardian system check for AUTHENTICATION_BACKENDS is unnecessary if using a custom auth backend", "user": {"login": "viseshrp", "id": 11642379, "node_id": "MDQ6VXNlcjExNjQyMzc5", "avatar_url": "https://avatars1.githubusercontent.com/u/11642379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viseshrp", "html_url": "https://github.com/viseshrp", "followers_url": "https://api.github.com/users/viseshrp/followers", "following_url": "https://api.github.com/users/viseshrp/following{/other_user}", "gists_url": "https://api.github.com/users/viseshrp/gists{/gist_id}", "starred_url": "https://api.github.com/users/viseshrp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viseshrp/subscriptions", "organizations_url": "https://api.github.com/users/viseshrp/orgs", "repos_url": "https://api.github.com/users/viseshrp/repos", "events_url": "https://api.github.com/users/viseshrp/events{/privacy}", "received_events_url": "https://api.github.com/users/viseshrp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-11T19:01:57Z", "updated_at": "2019-09-12T00:01:28Z", "closed_at": "2019-09-11T23:34:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nSo while using guardian in a project, due to specific requirements, I had to create my own auth backend for object permissions(I used guardian's `ObjectPermissionChecker` inside it). So I had no use for `guardian.backends.ObjectPermissionBackend`. \r\nWhen system checks looks at this, it does not see the exact string and throws a warning, which also shows up in the logs for no reason. Ref: https://github.com/django-guardian/django-guardian/blob/devel/guardian/checks.py#L14\r\n\r\nThere's a workaround: https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-SILENCED_SYSTEM_CHECKS\r\n\r\nAs an alternative, I propose to add an option in settings like `GUARDIAN_CUSTOM_BACKEND = True` and perform the check based on this setting. Not sure if its overkill, but I could do a PR if that's acceptable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/630", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/630/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/630/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/630/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/630", "id": 482452890, "node_id": "MDU6SXNzdWU0ODI0NTI4OTA=", "number": 630, "title": "post_migrate signal always uses the default database", "user": {"login": "AdamZ", "id": 109343, "node_id": "MDQ6VXNlcjEwOTM0Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/109343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdamZ", "html_url": "https://github.com/AdamZ", "followers_url": "https://api.github.com/users/AdamZ/followers", "following_url": "https://api.github.com/users/AdamZ/following{/other_user}", "gists_url": "https://api.github.com/users/AdamZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdamZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdamZ/subscriptions", "organizations_url": "https://api.github.com/users/AdamZ/orgs", "repos_url": "https://api.github.com/users/AdamZ/repos", "events_url": "https://api.github.com/users/AdamZ/events{/privacy}", "received_events_url": "https://api.github.com/users/AdamZ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-19T18:08:51Z", "updated_at": "2019-08-21T00:40:12Z", "closed_at": "2019-08-19T22:50:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the `create_anonymous_user` function, the user lookup and save calls don't specify the `using` parameter/method call. This causes the operations to always apply to the default database, even if the migration is occurring on a different database.\r\n\r\nIt [looks like](https://docs.djangoproject.com/en/2.2/ref/signals/#post-migrate) the post_migrate signal sends a `using` parameter to the callback to tell it which DB is used, so it should be simple to add it to the `get()` and `save()` calls in the signal handler.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/629", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/629/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/629/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/629/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/629", "id": 479851475, "node_id": "MDU6SXNzdWU0Nzk4NTE0NzU=", "number": 629, "title": "Point of GroupObjectPermission and UserObjectPermission tables if using direct foreign keys", "user": {"login": "viseshrp", "id": 11642379, "node_id": "MDQ6VXNlcjExNjQyMzc5", "avatar_url": "https://avatars1.githubusercontent.com/u/11642379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viseshrp", "html_url": "https://github.com/viseshrp", "followers_url": "https://api.github.com/users/viseshrp/followers", "following_url": "https://api.github.com/users/viseshrp/following{/other_user}", "gists_url": "https://api.github.com/users/viseshrp/gists{/gist_id}", "starred_url": "https://api.github.com/users/viseshrp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viseshrp/subscriptions", "organizations_url": "https://api.github.com/users/viseshrp/orgs", "repos_url": "https://api.github.com/users/viseshrp/repos", "events_url": "https://api.github.com/users/viseshrp/events{/privacy}", "received_events_url": "https://api.github.com/users/viseshrp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-12T21:09:09Z", "updated_at": "2019-08-22T18:20:01Z", "closed_at": "2019-08-22T18:20:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently looking at this project to build a per-item permission feature for an app. It mentions the option to use Direct foreign keys as a performance improvement suggestion. As the initial migrations that come with the app have similar models but with a Generic foreign key, I'm wondering if I can just remove the models/migrations from the package as they would just be two unnecessary tables, if I choose to go with the Direct FK approach. This must also be documented and I'd be happy to do a PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/618", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/618/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/618/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/618/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/618", "id": 462330988, "node_id": "MDU6SXNzdWU0NjIzMzA5ODg=", "number": 618, "title": "ReadTheDocs missing 1.5.0, 1.5.1 and 2.0.0 releases", "user": {"login": "johnthagen", "id": 10340167, "node_id": "MDQ6VXNlcjEwMzQwMTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/10340167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnthagen", "html_url": "https://github.com/johnthagen", "followers_url": "https://api.github.com/users/johnthagen/followers", "following_url": "https://api.github.com/users/johnthagen/following{/other_user}", "gists_url": "https://api.github.com/users/johnthagen/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnthagen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnthagen/subscriptions", "organizations_url": "https://api.github.com/users/johnthagen/orgs", "repos_url": "https://api.github.com/users/johnthagen/repos", "events_url": "https://api.github.com/users/johnthagen/events{/privacy}", "received_events_url": "https://api.github.com/users/johnthagen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-06-29T18:57:48Z", "updated_at": "2019-07-20T17:02:53Z", "closed_at": "2019-07-15T20:13:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The current latest published docs are several years out of date: https://django-guardian.readthedocs.io/\r\n\r\nThe last release is 1.4.9 from 2017. It was quite confusing as a new user to be reading the old docs and not realize how out of date they were until much later.\r\n\r\nCould 1.5.0, 1.5.1, and 2.0.0 be added to that site?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/615", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/615/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/615/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/615/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/615", "id": 462328192, "node_id": "MDU6SXNzdWU0NjIzMjgxOTI=", "number": 615, "title": "Docs say by default 3 permissions are registered per model but Django says 4", "user": {"login": "johnthagen", "id": 10340167, "node_id": "MDQ6VXNlcjEwMzQwMTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/10340167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnthagen", "html_url": "https://github.com/johnthagen", "followers_url": "https://api.github.com/users/johnthagen/followers", "following_url": "https://api.github.com/users/johnthagen/following{/other_user}", "gists_url": "https://api.github.com/users/johnthagen/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnthagen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnthagen/subscriptions", "organizations_url": "https://api.github.com/users/johnthagen/orgs", "repos_url": "https://api.github.com/users/johnthagen/repos", "events_url": "https://api.github.com/users/johnthagen/events{/privacy}", "received_events_url": "https://api.github.com/users/johnthagen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-29T18:32:04Z", "updated_at": "2019-06-29T18:35:19Z", "closed_at": "2019-06-29T18:35:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://django-guardian.readthedocs.io/en/stable/userguide/assign.html#prepare-permissions\r\n\r\n> By default, Django adds 3 permissions for each registered model:\r\nadd_modelname\r\nchange_modelname\r\ndelete_modelname\r\n\r\nBut the [Django docs say](https://docs.djangoproject.com/en/2.2/topics/auth/default/#default-permissions):\r\n\r\n>add: user.has_perm('foo.add_bar')\r\nchange: user.has_perm('foo.change_bar')\r\ndelete: user.has_perm('foo.delete_bar')\r\nview: user.has_perm('foo.view_bar')\r\n\r\nShould the guardian docs be updated to include `view`?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/610", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/610/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/610/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/610/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/610", "id": 437487636, "node_id": "MDU6SXNzdWU0Mzc0ODc2MzY=", "number": 610, "title": "`assign_perm` should treat lists as querysets", "user": {"login": "duoi", "id": 10301400, "node_id": "MDQ6VXNlcjEwMzAxNDAw", "avatar_url": "https://avatars1.githubusercontent.com/u/10301400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/duoi", "html_url": "https://github.com/duoi", "followers_url": "https://api.github.com/users/duoi/followers", "following_url": "https://api.github.com/users/duoi/following{/other_user}", "gists_url": "https://api.github.com/users/duoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/duoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/duoi/subscriptions", "organizations_url": "https://api.github.com/users/duoi/orgs", "repos_url": "https://api.github.com/users/duoi/repos", "events_url": "https://api.github.com/users/duoi/events{/privacy}", "received_events_url": "https://api.github.com/users/duoi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-26T03:51:12Z", "updated_at": "2020-04-14T11:56:53Z", "closed_at": "2020-04-14T11:56:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the `assign_perm` shortcut looks to see if `obj` is `None`, an instance of `Permission`, or an instance of `QuerySet` before treating it as an individual object.\r\n\r\nThe `QuerySet` check should contain an `or` to check if it's also a `list` since usage is the same.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/609", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/609/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/609/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/609/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/609", "id": 430664764, "node_id": "MDU6SXNzdWU0MzA2NjQ3NjQ=", "number": 609, "title": "Documentation not up to date with migrations", "user": {"login": "beruic", "id": 724716, "node_id": "MDQ6VXNlcjcyNDcxNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/724716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beruic", "html_url": "https://github.com/beruic", "followers_url": "https://api.github.com/users/beruic/followers", "following_url": "https://api.github.com/users/beruic/following{/other_user}", "gists_url": "https://api.github.com/users/beruic/gists{/gist_id}", "starred_url": "https://api.github.com/users/beruic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beruic/subscriptions", "organizations_url": "https://api.github.com/users/beruic/orgs", "repos_url": "https://api.github.com/users/beruic/repos", "events_url": "https://api.github.com/users/beruic/events{/privacy}", "received_events_url": "https://api.github.com/users/beruic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 54617741, "node_id": "MDU6TGFiZWw1NDYxNzc0MQ==", "url": "https://api.github.com/repos/django-guardian/django-guardian/labels/Documentation", "name": "Documentation", "color": "c7def8", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-08T21:22:08Z", "updated_at": "2019-07-15T20:14:51Z", "closed_at": "2019-07-15T20:14:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see a lot of mentioning of `syncdb` and south in the documentation. This does not make sense with todays migrations in Django.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/602", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/602/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/602/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/602/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/602", "id": 405274864, "node_id": "MDU6SXNzdWU0MDUyNzQ4NjQ=", "number": 602, "title": "Python 2.7 incompatibility. ", "user": {"login": "carltongibson", "id": 64686, "node_id": "MDQ6VXNlcjY0Njg2", "avatar_url": "https://avatars1.githubusercontent.com/u/64686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carltongibson", "html_url": "https://github.com/carltongibson", "followers_url": "https://api.github.com/users/carltongibson/followers", "following_url": "https://api.github.com/users/carltongibson/following{/other_user}", "gists_url": "https://api.github.com/users/carltongibson/gists{/gist_id}", "starred_url": "https://api.github.com/users/carltongibson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carltongibson/subscriptions", "organizations_url": "https://api.github.com/users/carltongibson/orgs", "repos_url": "https://api.github.com/users/carltongibson/repos", "events_url": "https://api.github.com/users/carltongibson/events{/privacy}", "received_events_url": "https://api.github.com/users/carltongibson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-31T14:37:11Z", "updated_at": "2019-05-02T09:50:02Z", "closed_at": "2019-05-02T09:50:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It may just be time to drop Python 2.7 (and Django 1.11 with it) but 367149a6d28f84c3b6662329b8fc3bfcc66f30cd introduced an error there. \r\n\r\nAs per https://github.com/django-guardian/django-guardian/commit/367149a6d28f84c3b6662329b8fc3bfcc66f30cd#r32133680: \r\n\r\n```\r\n>>> s = \"string.string\"\r\n>>> s.split('.')\r\n['string', 'string']\r\n>>> s.split('.', 1)\r\n['string', 'string']\r\n>>> s.split('.', maxsplit=1)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: split() takes no keyword arguments\r\n```\r\n\r\n(I'd just tell people on Python 2.7 to stick to 1.4.9.) ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/600", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/600/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/600/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/600/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/600", "id": 403455439, "node_id": "MDU6SXNzdWU0MDM0NTU0Mzk=", "number": 600, "title": "Version 1.5.0 release roadmap", "user": {"login": "ceelian", "id": 116299, "node_id": "MDQ6VXNlcjExNjI5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/116299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ceelian", "html_url": "https://github.com/ceelian", "followers_url": "https://api.github.com/users/ceelian/followers", "following_url": "https://api.github.com/users/ceelian/following{/other_user}", "gists_url": "https://api.github.com/users/ceelian/gists{/gist_id}", "starred_url": "https://api.github.com/users/ceelian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ceelian/subscriptions", "organizations_url": "https://api.github.com/users/ceelian/orgs", "repos_url": "https://api.github.com/users/ceelian/repos", "events_url": "https://api.github.com/users/ceelian/events{/privacy}", "received_events_url": "https://api.github.com/users/ceelian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-26T16:09:50Z", "updated_at": "2019-01-31T13:53:25Z", "closed_at": "2019-01-31T13:52:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are there any plans when django-guardian version 1.5.0 with python 3.7 and django 2.2 support will be released?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/596", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/596/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/596/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/596/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/596", "id": 402309959, "node_id": "MDU6SXNzdWU0MDIzMDk5NTk=", "number": 596, "title": "get_groups_with_perms returns more perms than it should", "user": {"login": "mirekys", "id": 646743, "node_id": "MDQ6VXNlcjY0Njc0Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/646743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mirekys", "html_url": "https://github.com/mirekys", "followers_url": "https://api.github.com/users/mirekys/followers", "following_url": "https://api.github.com/users/mirekys/following{/other_user}", "gists_url": "https://api.github.com/users/mirekys/gists{/gist_id}", "starred_url": "https://api.github.com/users/mirekys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mirekys/subscriptions", "organizations_url": "https://api.github.com/users/mirekys/orgs", "repos_url": "https://api.github.com/users/mirekys/repos", "events_url": "https://api.github.com/users/mirekys/events{/privacy}", "received_events_url": "https://api.github.com/users/mirekys/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-23T16:01:42Z", "updated_at": "2019-06-17T15:47:47Z", "closed_at": "2019-06-17T15:47:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected behavior\r\nAccording to docs, the ```get_groups_with_perms``` function: \r\n\r\n> Returns queryset of all Group objects with any object permissions for the given obj.\r\n\r\n### Actual behavior\r\nIt returns not only the given obj permissions, but also all permissions of any unrelated object/Model (of different ```content_type_id```) that has the same PK as the given obj.\r\n\r\n### How to reproduce\r\n``` python\r\n# models.py\r\nfrom django.db.models import Model, IntegerField, TextField\r\n\r\nclass ModelA(Model):\r\n    num = IntegerField()\r\n\r\nclass ModelB(Model):\r\n    text = TextField()\r\n```\r\n``` python\r\n# requirements.txt\r\ndjango-guardian==1.4.9\r\n```\r\n``` python\r\nPython 3.7.2 (default, Jan 10 2019, 23:51:51) \r\nDjango 2.1.5\r\n>>> from .models import ModelA, ModelB\r\n>>> a = ModelA.objects.create(num=1)\r\n>>> b = ModelB.objects.create(text='b')\r\n\r\n>>> from django.contrib.auth.models import Group\r\n>>> admins = Group.objects.create(name='admins')\r\n\r\n>>> assign_perm('change_modela', admins, obj=a)\r\n<GroupObjectPermission: GroupObjectPermission object (1)>\r\n>>> assign_perm('delete_modelb', admins, obj=b)\r\n<GroupObjectPermission: GroupObjectPermission object (2)>\r\n\r\n>>> from guardian.shortcuts import get_groups_with_perms\r\n>>> get_groups_with_perms(b, attach_perms=True)\r\n{<Group: admins>: ['change_modela', 'delete_modelb']}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/588", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/588/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/588/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/588/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/588", "id": 370087786, "node_id": "MDU6SXNzdWUzNzAwODc3ODY=", "number": 588, "title": "django 2.0 support", "user": {"login": "tluanga", "id": 1406978, "node_id": "MDQ6VXNlcjE0MDY5Nzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1406978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tluanga", "html_url": "https://github.com/tluanga", "followers_url": "https://api.github.com/users/tluanga/followers", "following_url": "https://api.github.com/users/tluanga/following{/other_user}", "gists_url": "https://api.github.com/users/tluanga/gists{/gist_id}", "starred_url": "https://api.github.com/users/tluanga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tluanga/subscriptions", "organizations_url": "https://api.github.com/users/tluanga/orgs", "repos_url": "https://api.github.com/users/tluanga/repos", "events_url": "https://api.github.com/users/tluanga/events{/privacy}", "received_events_url": "https://api.github.com/users/tluanga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-15T10:01:39Z", "updated_at": "2018-10-16T16:45:51Z", "closed_at": "2018-10-16T16:45:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "is django guardian support django 2.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/582", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/582/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/582/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/582/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/582", "id": 358951776, "node_id": "MDU6SXNzdWUzNTg5NTE3NzY=", "number": 582, "title": "Python 3.7 and Django 2.1 compat", "user": {"login": "michael-k", "id": 152008, "node_id": "MDQ6VXNlcjE1MjAwOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/152008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michael-k", "html_url": "https://github.com/michael-k", "followers_url": "https://api.github.com/users/michael-k/followers", "following_url": "https://api.github.com/users/michael-k/following{/other_user}", "gists_url": "https://api.github.com/users/michael-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/michael-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michael-k/subscriptions", "organizations_url": "https://api.github.com/users/michael-k/orgs", "repos_url": "https://api.github.com/users/michael-k/repos", "events_url": "https://api.github.com/users/michael-k/events{/privacy}", "received_events_url": "https://api.github.com/users/michael-k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-11T09:01:18Z", "updated_at": "2019-01-23T09:10:55Z", "closed_at": "2018-10-16T16:42:39Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I'm working on this.  If anyone else want to help, please comment on this issue for coordination and to avoid duplicate work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/581", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/581/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/581/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/581/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/581", "id": 358951257, "node_id": "MDU6SXNzdWUzNTg5NTEyNTc=", "number": 581, "title": "Tests are silently failing", "user": {"login": "michael-k", "id": 152008, "node_id": "MDQ6VXNlcjE1MjAwOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/152008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michael-k", "html_url": "https://github.com/michael-k", "followers_url": "https://api.github.com/users/michael-k/followers", "following_url": "https://api.github.com/users/michael-k/following{/other_user}", "gists_url": "https://api.github.com/users/michael-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/michael-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michael-k/subscriptions", "organizations_url": "https://api.github.com/users/michael-k/orgs", "repos_url": "https://api.github.com/users/michael-k/repos", "events_url": "https://api.github.com/users/michael-k/events{/privacy}", "received_events_url": "https://api.github.com/users/michael-k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-11T08:59:55Z", "updated_at": "2018-09-16T19:29:09Z", "closed_at": "2018-09-16T19:29:09Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I've noticed that the tests in branch `devel` are green despite the fact that they are not really passing.\r\n\r\nCompare eg. travis' log from my PR django-guardian/django-guardian#564 for Python 3.6, Django 2.0, and Postgres ([log](https://travis-ci.org/django-guardian/django-guardian/jobs/365496910)) with the one on `devel` for the same config ([log](https://travis-ci.org/django-guardian/django-guardian/jobs/426849556)).\r\n\r\nThe reason is a version conflict regarding pytest.  I'll look into it and try to fix it within the next few days.  (Not only the version conflict itself, but also the test result not reflecting this.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/580", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/580/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/580/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/580/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/580", "id": 352295670, "node_id": "MDU6SXNzdWUzNTIyOTU2NzA=", "number": 580, "title": "Django 2.1 adds view_[modelname] permission", "user": {"login": "isparks", "id": 1135502, "node_id": "MDQ6VXNlcjExMzU1MDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1135502?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isparks", "html_url": "https://github.com/isparks", "followers_url": "https://api.github.com/users/isparks/followers", "following_url": "https://api.github.com/users/isparks/following{/other_user}", "gists_url": "https://api.github.com/users/isparks/gists{/gist_id}", "starred_url": "https://api.github.com/users/isparks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isparks/subscriptions", "organizations_url": "https://api.github.com/users/isparks/orgs", "repos_url": "https://api.github.com/users/isparks/repos", "events_url": "https://api.github.com/users/isparks/events{/privacy}", "received_events_url": "https://api.github.com/users/isparks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-20T21:03:37Z", "updated_at": "2019-02-05T08:05:43Z", "closed_at": "2019-02-05T08:05:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "This permission name is auto-added and will clash with any django-guardian view_[modelname] permissions that have been defined. In my project I get:\r\n\r\n```\r\n$ python manage.py check\r\nSystemCheckError: System check identified some issues:\r\n\r\nERRORS:\r\nmyapp.Project: (auth.E005) The permission codenamed 'view_project' clashes with a builtin permission for model 'myapp.Project'.\r\n```\r\n\r\nThe readthedocs example even suggest defining a view_task permission, I think that is now broken:\r\n\r\nhttps://django-guardian.readthedocs.io/en/stable/userguide/assign.html\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/577", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/577/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/577/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/577/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/577", "id": 345064871, "node_id": "MDU6SXNzdWUzNDUwNjQ4NzE=", "number": 577, "title": "Add translations for simplified Chinese", "user": {"login": "Jay54520", "id": 13315364, "node_id": "MDQ6VXNlcjEzMzE1MzY0", "avatar_url": "https://avatars2.githubusercontent.com/u/13315364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jay54520", "html_url": "https://github.com/Jay54520", "followers_url": "https://api.github.com/users/Jay54520/followers", "following_url": "https://api.github.com/users/Jay54520/following{/other_user}", "gists_url": "https://api.github.com/users/Jay54520/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jay54520/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jay54520/subscriptions", "organizations_url": "https://api.github.com/users/Jay54520/orgs", "repos_url": "https://api.github.com/users/Jay54520/repos", "events_url": "https://api.github.com/users/Jay54520/events{/privacy}", "received_events_url": "https://api.github.com/users/Jay54520/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-27T02:06:27Z", "updated_at": "2018-11-01T14:30:52Z", "closed_at": "2018-11-01T14:30:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I will create a pull request soon.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/575", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/575/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/575/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/575/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/575", "id": 342579241, "node_id": "MDU6SXNzdWUzNDI1NzkyNDE=", "number": 575, "title": "ImportError: cannot import name 'patterns'  in django 2.0.5", "user": {"login": "Ardaq", "id": 7413989, "node_id": "MDQ6VXNlcjc0MTM5ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7413989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ardaq", "html_url": "https://github.com/Ardaq", "followers_url": "https://api.github.com/users/Ardaq/followers", "following_url": "https://api.github.com/users/Ardaq/following{/other_user}", "gists_url": "https://api.github.com/users/Ardaq/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ardaq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ardaq/subscriptions", "organizations_url": "https://api.github.com/users/Ardaq/orgs", "repos_url": "https://api.github.com/users/Ardaq/repos", "events_url": "https://api.github.com/users/Ardaq/events{/privacy}", "received_events_url": "https://api.github.com/users/Ardaq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-19T04:58:18Z", "updated_at": "2019-02-17T06:45:14Z", "closed_at": "2019-02-17T06:45:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Traceback (most recent call last):\r\n  File \"manage.py\", line 15, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"C:\\Users\\Ardaq\\Anaconda3\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 371, in execute_from_command_line\r\n    utility.execute()\r\n  File \"C:\\Users\\Ardaq\\Anaconda3\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 347, in execute\r\n    django.setup()\r\n  File \"C:\\Users\\Ardaq\\Anaconda3\\lib\\site-packages\\django\\__init__.py\", line 24, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"C:\\Users\\Ardaq\\Anaconda3\\lib\\site-packages\\django\\apps\\registry.py\", line 112, in populate\r\n    app_config.import_models()\r\n  File \"C:\\Users\\Ardaq\\Anaconda3\\lib\\site-packages\\django\\apps\\config.py\", line 198, in import_models\r\n    self.models_module = import_module(models_module_name)\r\n  File \"C:\\Users\\Ardaq\\Anaconda3\\lib\\importlib\\__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 994, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 678, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"C:\\Users\\Ardaq\\Anaconda3\\lib\\site-packages\\guardian\\models.py\", line 16, in <module>\r\n    from guardian.compat import user_model_label\r\n  File \"C:\\Users\\Ardaq\\Anaconda3\\lib\\site-packages\\guardian\\compat.py\", line 13, in <module>\r\n    from django.conf.urls import url, patterns, include, handler404, handler500\r\nImportError: cannot import name 'patterns'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/568", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/568/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/568/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/568/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/568", "id": 321575312, "node_id": "MDU6SXNzdWUzMjE1NzUzMTI=", "number": 568, "title": "Integration with django-entity", "user": {"login": "thclark", "id": 7223170, "node_id": "MDQ6VXNlcjcyMjMxNzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7223170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thclark", "html_url": "https://github.com/thclark", "followers_url": "https://api.github.com/users/thclark/followers", "following_url": "https://api.github.com/users/thclark/following{/other_user}", "gists_url": "https://api.github.com/users/thclark/gists{/gist_id}", "starred_url": "https://api.github.com/users/thclark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thclark/subscriptions", "organizations_url": "https://api.github.com/users/thclark/orgs", "repos_url": "https://api.github.com/users/thclark/repos", "events_url": "https://api.github.com/users/thclark/events{/privacy}", "received_events_url": "https://api.github.com/users/thclark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-09T13:41:32Z", "updated_at": "2018-05-11T08:28:56Z", "closed_at": "2018-05-11T08:28:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm thinking about binding django-guardian to [django-entity](https://github.com/ambitioninc/django-entity).\r\n\r\nThis will support the use case of granting permissions to other things than simply users. For example, an entity might represent:\r\n- a user (vanilla, achievable with just django-guardian) \r\n- an agent acting on behalf of a user\r\n- a machine instance or container\r\n- a third party webservice\r\n\r\nIt will also support more complex relationship management than just users in groups. For example, datafiles in a dataset might be deemed to be accessible by entities which have access rights over the dataset (or equal and opposite, an entity might be refused access to a dataset if it doesn't also have access to the datafiles in the set).\r\n\r\nBefore disappearing to create a separate package ('django-entity-guardian', probably) to bind these two, I wanted to check:\r\n - Would there be any appetite for a pull request straight into django-guardian for this (I assume not)?\r\n - Anyone out there need the same thing and interested in collaborating?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/559", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/559/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/559/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/559/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/559", "id": 308891092, "node_id": "MDU6SXNzdWUzMDg4OTEwOTI=", "number": 559, "title": "Is possible remove the delete buttons?", "user": {"login": "Allan-Nava", "id": 22498435, "node_id": "MDQ6VXNlcjIyNDk4NDM1", "avatar_url": "https://avatars3.githubusercontent.com/u/22498435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Allan-Nava", "html_url": "https://github.com/Allan-Nava", "followers_url": "https://api.github.com/users/Allan-Nava/followers", "following_url": "https://api.github.com/users/Allan-Nava/following{/other_user}", "gists_url": "https://api.github.com/users/Allan-Nava/gists{/gist_id}", "starred_url": "https://api.github.com/users/Allan-Nava/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Allan-Nava/subscriptions", "organizations_url": "https://api.github.com/users/Allan-Nava/orgs", "repos_url": "https://api.github.com/users/Allan-Nava/repos", "events_url": "https://api.github.com/users/Allan-Nava/events{/privacy}", "received_events_url": "https://api.github.com/users/Allan-Nava/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-03-27T09:30:56Z", "updated_at": "2018-04-10T00:28:56Z", "closed_at": "2018-04-10T00:28:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, is possible remove delete function?\r\n\r\n```\r\nclass AppSettingAdmin(admin.ModelAdmin):\r\n   #\r\n    def get_actions(self, request): #\u00a0\r\n        actions = super(MemberAdmin, self).get_actions(request)\r\n        #\r\n        if 'delete_selected' in actions:\r\n            del actions['delete_selected']\r\n        return actions\r\n    #\r\n    def has_delete_permission(self, request, obj=None): #\u00a0\r\n        return False\r\n```\r\n\r\nIt Works, but if I use -> **GuardedModelAdmin** not working\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/558", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/558/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/558/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/558/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/558", "id": 308890538, "node_id": "MDU6SXNzdWUzMDg4OTA1Mzg=", "number": 558, "title": "Is possible remove the delete buttons?", "user": {"login": "Allan-Nava", "id": 22498435, "node_id": "MDQ6VXNlcjIyNDk4NDM1", "avatar_url": "https://avatars3.githubusercontent.com/u/22498435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Allan-Nava", "html_url": "https://github.com/Allan-Nava", "followers_url": "https://api.github.com/users/Allan-Nava/followers", "following_url": "https://api.github.com/users/Allan-Nava/following{/other_user}", "gists_url": "https://api.github.com/users/Allan-Nava/gists{/gist_id}", "starred_url": "https://api.github.com/users/Allan-Nava/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Allan-Nava/subscriptions", "organizations_url": "https://api.github.com/users/Allan-Nava/orgs", "repos_url": "https://api.github.com/users/Allan-Nava/repos", "events_url": "https://api.github.com/users/Allan-Nava/events{/privacy}", "received_events_url": "https://api.github.com/users/Allan-Nava/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-27T09:29:23Z", "updated_at": "2018-03-29T00:45:56Z", "closed_at": "2018-03-29T00:45:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/557", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/557/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/557/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/557/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/557", "id": 308291497, "node_id": "MDU6SXNzdWUzMDgyOTE0OTc=", "number": 557, "title": "cannot run tests", "user": {"login": "OmbraDiFenice", "id": 2358361, "node_id": "MDQ6VXNlcjIzNTgzNjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2358361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OmbraDiFenice", "html_url": "https://github.com/OmbraDiFenice", "followers_url": "https://api.github.com/users/OmbraDiFenice/followers", "following_url": "https://api.github.com/users/OmbraDiFenice/following{/other_user}", "gists_url": "https://api.github.com/users/OmbraDiFenice/gists{/gist_id}", "starred_url": "https://api.github.com/users/OmbraDiFenice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OmbraDiFenice/subscriptions", "organizations_url": "https://api.github.com/users/OmbraDiFenice/orgs", "repos_url": "https://api.github.com/users/OmbraDiFenice/repos", "events_url": "https://api.github.com/users/OmbraDiFenice/events{/privacy}", "received_events_url": "https://api.github.com/users/OmbraDiFenice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-03-24T19:23:49Z", "updated_at": "2018-03-25T21:02:22Z", "closed_at": "2018-03-24T19:49:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm trying to run the tests for guardian, but I keep getting an error saying that I'm missing the table 'guardian_post', even with a fresh installation and project.\r\n\r\n## Environment\r\n\r\n- tried with both django 1.10.4 and 2.0.3\r\n- django-guardian 1.4.9 installed form pip\r\n- python 3.6.4\r\n\r\n## Steps to reproduce\r\n\r\n1. run django-admin startproject a_project && cd a_project\r\n2. add 'guardian' to INSTALLED_APPS\r\n3. run ./manage.py test guardian -v3\r\n\r\n### output:\r\n\r\nCreating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nOperations to perform:\r\n  Synchronize unmigrated apps: messages, staticfiles\r\n  Apply all migrations: admin, auth, contenttypes, guardian, sessions\r\nRunning pre-migrate handlers for application admin\r\nRunning pre-migrate handlers for application auth\r\nRunning pre-migrate handlers for application contenttypes\r\nRunning pre-migrate handlers for application sessions\r\nRunning pre-migrate handlers for application guardian\r\nSynchronizing apps without migrations:\r\n  Creating tables...\r\n    Running deferred SQL...\r\nRunning migrations:\r\n  Applying contenttypes.0001_initial... OK (0.016s)\r\n  Applying auth.0001_initial... OK (0.042s)\r\n  Applying admin.0001_initial... OK (0.039s)\r\n  Applying admin.0002_logentry_remove_auto_add... OK (0.041s)\r\n  Applying contenttypes.0002_remove_content_type_name... OK (0.099s)\r\n  Applying auth.0002_alter_permission_name_max_length... OK (0.039s)\r\n  Applying auth.0003_alter_user_email_max_length... OK (0.039s)\r\n  Applying auth.0004_alter_user_username_opts... OK (0.041s)\r\n  Applying auth.0005_alter_user_last_login_null... OK (0.033s)\r\n  Applying auth.0006_require_contenttypes_0002... OK (0.006s)\r\n  Applying auth.0007_alter_validators_add_error_messages... OK (0.033s)\r\n  Applying auth.0008_alter_user_username_max_length... OK (0.043s)\r\n  Applying auth.0009_alter_user_last_name_max_length... OK (0.035s)\r\n  Applying guardian.0001_initial... OK (0.149s)\r\n  Applying sessions.0001_initial... OK (0.010s)\r\nRunning post-migrate handlers for application admin\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nRunning post-migrate handlers for application auth\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nRunning post-migrate handlers for application contenttypes\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nRunning post-migrate handlers for application sessions\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nRunning post-migrate handlers for application guardian\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nAdding permission 'Permission object (None)'\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py\", line 85, in _execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/backends/sqlite3/base.py\", line 303, in execute\r\n    return Database.Cursor.execute(self, query, params)\r\nsqlite3.OperationalError: no such table: guardian_post\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"./manage.py\", line 15, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/core/management/__init__.py\", line 371, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/usr/local/lib/python3.6/site-packages/django/core/management/__init__.py\", line 365, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/core/management/commands/test.py\", line 26, in run_from_argv\r\n    super().run_from_argv(argv)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/core/management/base.py\", line 288, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/core/management/base.py\", line 335, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/core/management/commands/test.py\", line 59, in handle\r\n    failures = test_runner.run_tests(test_labels)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/test/runner.py\", line 601, in run_tests\r\n    old_config = self.setup_databases()\r\n  File \"/usr/local/lib/python3.6/site-packages/django/test/runner.py\", line 548, in setup_databases\r\n    self.parallel, **kwargs\r\n  File \"/usr/local/lib/python3.6/site-packages/django/test/utils.py\", line 176, in setup_databases\r\n    serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/backends/base/creation.py\", line 76, in create_test_db\r\n    self.connection._test_serialized_contents = self.serialize_db_to_string()\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/backends/base/creation.py\", line 119, in serialize_db_to_string\r\n    serializers.serialize(\"json\", get_objects(), indent=None, stream=out)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/core/serializers/__init__.py\", line 128, in serialize\r\n    s.serialize(queryset, **options)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/core/serializers/base.py\", line 80, in serialize\r\n    for count, obj in enumerate(queryset, start=1):\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/backends/base/creation.py\", line 116, in get_objects\r\n    yield from queryset.iterator()\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/models/query.py\", line 336, in _iterator\r\n    yield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/models/query.py\", line 53, in __iter__\r\n    results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/models/sql/compiler.py\", line 1066, in execute_sql\r\n    cursor.execute(sql, params)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py\", line 68, in execute\r\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py\", line 77, in _execute_with_wrappers\r\n    return executor(sql, params, many, context)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py\", line 85, in _execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/utils.py\", line 89, in __exit__\r\n    raise dj_exc_value.with_traceback(traceback) from exc_value\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py\", line 85, in _execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/usr/local/lib/python3.6/site-packages/django/db/backends/sqlite3/base.py\", line 303, in execute\r\n    return Database.Cursor.execute(self, query, params)\r\ndjango.db.utils.OperationalError: no such table: guardian_post\r\n\r\nAny help?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/556", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/556/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/556/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/556/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/556", "id": 302332088, "node_id": "MDU6SXNzdWUzMDIzMzIwODg=", "number": 556, "title": "Migrating to guardian permissions", "user": {"login": "dratchkov", "id": 12432089, "node_id": "MDQ6VXNlcjEyNDMyMDg5", "avatar_url": "https://avatars0.githubusercontent.com/u/12432089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dratchkov", "html_url": "https://github.com/dratchkov", "followers_url": "https://api.github.com/users/dratchkov/followers", "following_url": "https://api.github.com/users/dratchkov/following{/other_user}", "gists_url": "https://api.github.com/users/dratchkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dratchkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dratchkov/subscriptions", "organizations_url": "https://api.github.com/users/dratchkov/orgs", "repos_url": "https://api.github.com/users/dratchkov/repos", "events_url": "https://api.github.com/users/dratchkov/events{/privacy}", "received_events_url": "https://api.github.com/users/dratchkov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-05T14:59:34Z", "updated_at": "2018-03-25T16:25:43Z", "closed_at": "2018-03-25T16:25:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to migrate my models to use Guardian permissions. At this point I have:\r\n```\r\nclass Data(models.Model):\r\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\r\n    class Meta:\r\n        permissions = (\r\n            ('view', 'View'),\r\n            ('edit', 'Edit'),\r\n            ('owner', 'Owner'),\r\n        )\r\n```\r\nI created one migration that added the new permissions, and in a custom migration I am trying to assign the permissions like this:\r\n```\r\ndef assignDataPermissions(apps, schema_editor):\r\n    Data = apps.get_model('api', 'Data')\r\n    for data in Data.objects.all():\r\n        assign_perm('api.owner', data.user, data)\r\n\r\n\r\nclass Migration(migrations.Migration):\r\n    dependencies = [\r\n        ('api', '0169_auto_20180304_1619'),\r\n    ]\r\n\r\n    operations = [\r\n        migrations.RunPython(assignDataPermissions)\r\n    ]\r\n```\r\nThis fails with ```guardian.exceptions.NotUserNorGroup: User/AnonymousUser or Group instance is required (got EmailUser object)```.\r\n\r\nAFAICT this is because the type of ```data.user``` is ```<class '__fake__.EmailUser'>``` while ```get_user_model()``` returns ```<class 'custom_user.models.EmailUser'>```\r\n \r\nIs there a better/proper way of migrating to Guardian?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/553", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/553/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/553/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/553/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/553", "id": 292298040, "node_id": "MDU6SXNzdWUyOTIyOTgwNDA=", "number": 553, "title": "Tests fail with: ModuleNotFoundError: No module named 'mock'", "user": {"login": "satyanash", "id": 1559596, "node_id": "MDQ6VXNlcjE1NTk1OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1559596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/satyanash", "html_url": "https://github.com/satyanash", "followers_url": "https://api.github.com/users/satyanash/followers", "following_url": "https://api.github.com/users/satyanash/following{/other_user}", "gists_url": "https://api.github.com/users/satyanash/gists{/gist_id}", "starred_url": "https://api.github.com/users/satyanash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/satyanash/subscriptions", "organizations_url": "https://api.github.com/users/satyanash/orgs", "repos_url": "https://api.github.com/users/satyanash/repos", "events_url": "https://api.github.com/users/satyanash/events{/privacy}", "received_events_url": "https://api.github.com/users/satyanash/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-01-29T06:34:03Z", "updated_at": "2018-02-02T00:43:53Z", "closed_at": "2018-02-02T00:43:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Some six tests fail with \r\n```\r\nModuleNotFoundError: No module named 'mock'\r\n```\r\nFailing tests are:\r\n* `guardian.testapp.tests.test_other`\r\n* `guardian.testapp.tests.test_mixins`\r\n* `guardian.testapp.tests.test_managers`\r\n* `guardian.testapp.tests.test_management`\r\n* `guardian.testapp.tests.test_decorators`\r\n* `guardian.testapp.tests.test_conf`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/547", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/547/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/547/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/547/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/547", "id": 287941036, "node_id": "MDU6SXNzdWUyODc5NDEwMzY=", "number": 547, "title": "Question: Is there some reason we can't just add db_index=True to generic 'object_pk' field?", "user": {"login": "aaronmader", "id": 375298, "node_id": "MDQ6VXNlcjM3NTI5OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/375298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaronmader", "html_url": "https://github.com/aaronmader", "followers_url": "https://api.github.com/users/aaronmader/followers", "following_url": "https://api.github.com/users/aaronmader/following{/other_user}", "gists_url": "https://api.github.com/users/aaronmader/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaronmader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaronmader/subscriptions", "organizations_url": "https://api.github.com/users/aaronmader/orgs", "repos_url": "https://api.github.com/users/aaronmader/repos", "events_url": "https://api.github.com/users/aaronmader/events{/privacy}", "received_events_url": "https://api.github.com/users/aaronmader/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-11T22:08:00Z", "updated_at": "2018-01-12T17:37:14Z", "closed_at": "2018-01-12T17:37:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "The docs suggest using [Direct Foreign Keys](https://django-guardian.readthedocs.io/en/stable/userguide/performance.html#direct-foreign-keys) as a performance improvement, but in my experience; all we really need is to tell django to index the object_pk field on the model BaseGenericObjectPermission. \r\n\r\n`object_pk = models.CharField(_('object ID'), max_length=255, db_index=True)`\r\n\r\nIs there a flaw in this approach that I'm missing? Some reason why it's unsafe, or doesn't scale as well?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/545", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/545/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/545/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/545/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/545", "id": 287272473, "node_id": "MDU6SXNzdWUyODcyNzI0NzM=", "number": 545, "title": "import version does not work in __init__", "user": {"login": "doganmeh", "id": 8139662, "node_id": "MDQ6VXNlcjgxMzk2NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/8139662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doganmeh", "html_url": "https://github.com/doganmeh", "followers_url": "https://api.github.com/users/doganmeh/followers", "following_url": "https://api.github.com/users/doganmeh/following{/other_user}", "gists_url": "https://api.github.com/users/doganmeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/doganmeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doganmeh/subscriptions", "organizations_url": "https://api.github.com/users/doganmeh/orgs", "repos_url": "https://api.github.com/users/doganmeh/repos", "events_url": "https://api.github.com/users/doganmeh/events{/privacy}", "received_events_url": "https://api.github.com/users/doganmeh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-10T00:03:26Z", "updated_at": "2018-01-10T00:31:12Z", "closed_at": "2018-01-10T00:31:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "from guardian/__init__.py:\r\n\r\n```\r\ntry:\r\n    from .version import version as __version__\r\n    __version__split__ = __version__.split(\".\")\r\n    VERSION = tuple([int(each) for each in __version__split__[:3]] + __version__split__[3:])\r\n\r\n    def get_version():\r\n        \"\"\"\r\n        Returns shorter version (digit parts only) as string.\r\n        \"\"\"\r\n        return '.'.join((str(each) for each in VERSION[:3]))\r\nexcept ImportError:\r\n    pass\r\n```\r\nfrom where is that import supposed to be made? it worked if I imported guardian into my project's shell, but did not in another. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/542", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/542/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/542/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/542/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/542", "id": 283435010, "node_id": "MDU6SXNzdWUyODM0MzUwMTA=", "number": 542, "title": "Error on migrate auth", "user": {"login": "pkerpedjiev", "id": 2143629, "node_id": "MDQ6VXNlcjIxNDM2Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2143629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pkerpedjiev", "html_url": "https://github.com/pkerpedjiev", "followers_url": "https://api.github.com/users/pkerpedjiev/followers", "following_url": "https://api.github.com/users/pkerpedjiev/following{/other_user}", "gists_url": "https://api.github.com/users/pkerpedjiev/gists{/gist_id}", "starred_url": "https://api.github.com/users/pkerpedjiev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pkerpedjiev/subscriptions", "organizations_url": "https://api.github.com/users/pkerpedjiev/orgs", "repos_url": "https://api.github.com/users/pkerpedjiev/repos", "events_url": "https://api.github.com/users/pkerpedjiev/events{/privacy}", "received_events_url": "https://api.github.com/users/pkerpedjiev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-20T03:02:15Z", "updated_at": "2017-12-20T03:36:12Z", "closed_at": "2017-12-20T03:36:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "This error isn't expected, is it?\r\n\r\n```\r\n(cenv3) pete@twok:~/projects/blah [master|!?P]$ dropdb test; createdb test; python manage.py migrate auth;\r\n\r\nOperations to perform:\r\n  Apply all migrations: auth\r\nRunning migrations:\r\n  Applying contenttypes.0001_initial... OK\r\n  Applying auth.0001_initial... OK\r\n  Applying contenttypes.0002_remove_content_type_name... OK\r\n  Applying auth.0002_alter_permission_name_max_length... OK\r\n  Applying auth.0003_alter_user_email_max_length... OK\r\n  Applying auth.0004_alter_user_username_opts... OK\r\n  Applying auth.0005_alter_user_last_login_null... OK\r\n  Applying auth.0006_require_contenttypes_0002... OK\r\n  Applying auth.0007_alter_validators_add_error_messages... OK\r\n  Applying auth.0008_alter_user_username_max_length... OK\r\n  Applying auth.0009_alter_user_last_name_max_length... OK\r\nTraceback (most recent call last):\r\n  File \"/Users/pete/miniconda3/envs/cenv3/lib/python3.6/site-packages/guardian/management/__init__.py\", line 33, in create_anonymous_user\r\n    User.objects.get(**lookup)\r\n  File \"/Users/pete/miniconda3/envs/cenv3/lib/python3.6/site-packages/django/db/models/manager.py\", line 82, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/Users/pete/miniconda3/envs/cenv3/lib/python3.6/site-packages/django/db/models/query.py\", line 403, in get\r\n    self.model._meta.object_name\r\ndjango.contrib.auth.models.DoesNotExist: User matching query does not exist.\r\n```\r\n\r\nRunning into this in Django 2.0.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/540", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/540/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/540/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/540/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/540", "id": 282460822, "node_id": "MDU6SXNzdWUyODI0NjA4MjI=", "number": 540, "title": "django.contrib.auth.models.DoesNotExist: Permission matching query does not exist.trib.auth.models.DoesNotExist: Permission matching query does not exist.", "user": {"login": "Allan-Nava", "id": 22498435, "node_id": "MDQ6VXNlcjIyNDk4NDM1", "avatar_url": "https://avatars3.githubusercontent.com/u/22498435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Allan-Nava", "html_url": "https://github.com/Allan-Nava", "followers_url": "https://api.github.com/users/Allan-Nava/followers", "following_url": "https://api.github.com/users/Allan-Nava/following{/other_user}", "gists_url": "https://api.github.com/users/Allan-Nava/gists{/gist_id}", "starred_url": "https://api.github.com/users/Allan-Nava/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Allan-Nava/subscriptions", "organizations_url": "https://api.github.com/users/Allan-Nava/orgs", "repos_url": "https://api.github.com/users/Allan-Nava/repos", "events_url": "https://api.github.com/users/Allan-Nava/events{/privacy}", "received_events_url": "https://api.github.com/users/Allan-Nava/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-15T15:24:59Z", "updated_at": "2017-12-15T15:40:14Z", "closed_at": "2017-12-15T15:40:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\ni use this custom **perms.py** of [django-groups-manager](https://github.com/vittoriozamboni/django-groups-manager) and the error is:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.5/code.py\", line 91, in runcode\r\n    exec(code, self.locals)\r\n  File \"<console>\", line 1, in <module>\r\n  File \"/home/ies/bootcamp/bootcamp/groups_manager/models.py\", line 145, in assign_object\r\n    return assign_object_to_member(group_member, obj, **kwargs)\r\n  File \"/home/ies/bootcamp/bootcamp/groups_manager/perms.py\", line 49, in assign_object_to_member\r\n    assign_perm(perm_name, group_member.member.django_user, obj)\r\n  File \"/usr/local/lib/python3.5/dist-packages/guardian/shortcuts.py\", line 105, in assign_perm\r\n    return model.objects.assign_perm(perm, user, obj)\r\n  File \"/usr/local/lib/python3.5/dist-packages/guardian/managers.py\", line 39, in assign_perm\r\n    permission = Permission.objects.get(content_type=ctype, codename=perm)\r\n  File \"/usr/local/lib/python3.5/dist-packages/django/db/models/manager.py\", line 85, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/django/db/models/query.py\", line 380, in get\r\n    self.model._meta.object_name\r\ndjango.contrib.auth.models.DoesNotExist: Permission matching query does not exist.\r\n```\r\n\r\n![screen shot 2017-12-15 at 16 25 24](https://user-images.githubusercontent.com/22498435/34048604-a0909244-e1b4-11e7-82ba-9af98d369ed7.png)\r\n\r\n**assign_object** -> https://github.com/vittoriozamboni/django-groups-manager/blob/master/groups_manager/models.py#L108\r\n\r\n\r\nThis is my perms.py\r\n```\r\nimport copy\r\n\r\ntry:\r\n    from guardian.shortcuts import assign_perm\r\nexcept ImportError:\r\n    def assign_perm(perm_name, group_or_user, obj):\r\n        pass\r\n\r\nfrom bootcamp.groups_manager.utils import get_permission_name\r\n\r\n\r\ndef assign_object_to_member(group_member, obj, **kwargs):\r\n    \"\"\"Assign an object to a GroupMember instance object.\r\n\r\n    :Parameters:\r\n      - `group_member`: groups_manager.model.GroupMember instance\r\n      - `obj`: object to set permissions\r\n\r\n    :Kwargs:\r\n      - `custom_permissions`: updates settings.GROUPS_MANAGER['PERMISSIONS']\r\n    \"\"\"\r\n    print(\"assign_object_to_member();\")\r\n    #SISTEMATO IL FOLDER DEI SETTAGGI\r\n    from bootcamp.groups_manager.settings import GROUPS_MANAGER\r\n    if GROUPS_MANAGER['AUTH_MODELS_SYNC'] and \\\r\n            group_member.group.django_group and group_member.member.django_user:\r\n        roles_attr = kwargs.get('roles_attr', 'roles')\r\n        print(\"roles_attr: \"+str(roles_attr))\r\n        permissions = copy.deepcopy(GROUPS_MANAGER['PERMISSIONS'])\r\n        permissions.update(kwargs.get('custom_permissions', {}))\r\n        # owner\r\n        print(\"owner perms\")\r\n        if isinstance(permissions['owner'], dict):\r\n            roles = getattr(group_member, roles_attr).values_list('codename', flat=True)\r\n            print(\"roles: \"+str(roles))\r\n            owner_perms = []\r\n            for role in list(set(roles).intersection(set(permissions['owner'].keys()))) + ['default']:\r\n                owner_perms += permissions['owner'].get(role, [])\r\n                print(\"owner_perms(role): \"+str(owner_perms))\r\n        else:\r\n            owner_perms = permissions['owner']\r\n\r\n        for permission in list(set(owner_perms)):\r\n            perm_name = get_permission_name(permission, obj)\r\n            print(\"permission for: \"+str(owner_perms))\r\n            print(\"perm_name: \"+str(perm_name))\r\n            print(\"obj: \"+str(obj))\r\n            assign_perm(perm_name, group_member.member.django_user, obj)\r\n\r\n        print(\"group_perms\")\r\n        # group\r\n        group_perms = permissions.get('group', [])\r\n        for permission in list(set(group_perms)):\r\n            perm_name = get_permission_name(permission, obj)\r\n            assign_perm(perm_name, group_member.group.django_group, obj)\r\n        \r\n        print(\"groups_upstream\")\r\n        # groups_upstream\r\n        upstream_groups = [group.django_group for group in group_member.group.get_ancestors()]\r\n        upstream_perms = permissions.get('groups_upstream', [])\r\n        for django_group in upstream_groups:\r\n            for permission in list(set(upstream_perms)):\r\n                perm_name = get_permission_name(permission, obj)\r\n                print(\"upstream_groups: \"+str(upstream_groups))\r\n                print(\"perm_name: \"+str(perm_name))\r\n                print(\"obj: \"+str(obj))\r\n                assign_perm(perm_name, django_group, obj)\r\n        \r\n        print(\"downstream_groups\")\r\n        # groups_downstream\r\n        downstream_groups = \\\r\n            [group.django_group for group in group_member.group.get_descendants()]\r\n        downstream_perms = permissions.get('groups_downstream', [])\r\n        for django_group in downstream_groups:\r\n            for permission in list(set(downstream_perms)):\r\n                perm_name = get_permission_name(permission, obj)\r\n                print(\"downstream_perms: \"+str(downstream_perms))\r\n                print(\"perm_name: \"+str(perm_name))\r\n                print(\"obj: \"+str(obj))\r\n                assign_perm(perm_name, django_group, obj)\r\n\r\n        print(\"downstream_groups\")\r\n        # groups_siblings\r\n        siblings_groups = [group.django_group for group in group_member.group.get_siblings()]\r\n        siblings_perms = permissions.get('groups_siblings', [])\r\n        for django_group in siblings_groups:\r\n            for permission in list(set(siblings_perms)):\r\n                perm_name = get_permission_name(permission, obj)\r\n                print(\"siblings_groups: \"+str(siblings_groups))\r\n                print(\"perm_name: \"+str(perm_name))\r\n                print(\"obj: \"+str(obj))\r\n                assign_perm(perm_name, django_group, obj)\r\n\r\n\r\ndef assign_object_to_group(group, obj, **kwargs):\r\n \r\n    \"\"\"Assign an object to a Group instance object.\r\n\r\n    :Parameters:\r\n      - `group`: groups_manager.model.Group instance\r\n      - `obj`: object to set permissions\r\n\r\n    :Kwargs:\r\n      - `custom_permissions`: updates settings.GROUPS_MANAGER['PERMISSIONS']\r\n    \"\"\"\r\n    print(\"assign_object_to_group\")\r\n    #SISTEMATO IL FOLDER DEI SETTAGGI\r\n    from bootcamp.groups_manager.settings import GROUPS_MANAGER\r\n    if GROUPS_MANAGER['AUTH_MODELS_SYNC'] and group.django_group:\r\n        permissions = copy.deepcopy(GROUPS_MANAGER['PERMISSIONS'])\r\n        permissions.update(kwargs.get('custom_permissions', {}))\r\n        # owner is ignored from permissions\r\n        print(\"permisions\")\r\n        print(permissions)\r\n        # group\r\n        group_perms = permissions.get('group', [])\r\n        for permission in list(set(group_perms)):\r\n            perm_name = get_permission_name(permission, obj)\r\n            assign_perm(perm_name, group.django_group, obj)\r\n        # groups_upstream\r\n        upstream_groups = [ancestor_group.django_group for ancestor_group in group.get_ancestors()]\r\n        upstream_perms = permissions.get('groups_upstream', [])\r\n        for django_group in upstream_groups:\r\n            for permission in list(set(upstream_perms)):\r\n                perm_name = get_permission_name(permission, obj)\r\n                assign_perm(perm_name, django_group, obj)\r\n        # groups_downstream\r\n        downstream_groups = \\\r\n            [downstream_group.django_group for downstream_group in group.get_descendants()]\r\n        downstream_perms = permissions.get('groups_downstream', [])\r\n        for django_group in downstream_groups:\r\n            for permission in list(set(downstream_perms)):\r\n                perm_name = get_permission_name(permission, obj)\r\n                assign_perm(perm_name, django_group, obj)\r\n        # groups_siblings\r\n        siblings_groups = [sibling_group.django_group for sibling_group in group.get_siblings()]\r\n        siblings_perms = permissions.get('groups_siblings', [])\r\n        for django_group in siblings_groups:\r\n            for permission in list(set(siblings_perms)):\r\n                perm_name = get_permission_name(permission, obj)\r\n                assign_perm(perm_name, django_group, obj)\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/536", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/536/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/536/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/536/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/536", "id": 277108317, "node_id": "MDU6SXNzdWUyNzcxMDgzMTc=", "number": 536, "title": "Permission for specific object in AdminPanel", "user": {"login": "Allan-Nava", "id": 22498435, "node_id": "MDQ6VXNlcjIyNDk4NDM1", "avatar_url": "https://avatars3.githubusercontent.com/u/22498435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Allan-Nava", "html_url": "https://github.com/Allan-Nava", "followers_url": "https://api.github.com/users/Allan-Nava/followers", "following_url": "https://api.github.com/users/Allan-Nava/following{/other_user}", "gists_url": "https://api.github.com/users/Allan-Nava/gists{/gist_id}", "starred_url": "https://api.github.com/users/Allan-Nava/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Allan-Nava/subscriptions", "organizations_url": "https://api.github.com/users/Allan-Nava/orgs", "repos_url": "https://api.github.com/users/Allan-Nava/repos", "events_url": "https://api.github.com/users/Allan-Nava/events{/privacy}", "received_events_url": "https://api.github.com/users/Allan-Nava/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2017-11-27T17:45:39Z", "updated_at": "2018-05-31T07:22:38Z", "closed_at": "2017-11-28T16:22:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, is possibile have the same feature of this example:\r\n\r\n```\r\n>>> from django.contrib.auth.models import User, Group\r\n>>> jack = User.objects.create_user('jack', 'jack@example.com', 'topsecretagentjack')\r\n>>> admins = Group.objects.create(name='admins')\r\n>>> jack.has_perm('change_group', admins)\r\nFalse\r\n>>> from guardian.models import UserObjectPermission\r\n>>> UserObjectPermission.objects.assign_perm('change_group', jack, obj=admins)\r\n<UserObjectPermission: admins | jack | change_group>\r\n>>> jack.has_perm('change_group', admins)\r\nTrue\r\n\r\n```\r\nInside the Panel admin?\r\n\r\nThanks for support.\r\nBest Regards, Allan", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/534", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/534/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/534/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/534/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/534", "id": 276015664, "node_id": "MDU6SXNzdWUyNzYwMTU2NjQ=", "number": 534, "title": "Permission for user with specific object ", "user": {"login": "Allan-Nava", "id": 22498435, "node_id": "MDQ6VXNlcjIyNDk4NDM1", "avatar_url": "https://avatars3.githubusercontent.com/u/22498435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Allan-Nava", "html_url": "https://github.com/Allan-Nava", "followers_url": "https://api.github.com/users/Allan-Nava/followers", "following_url": "https://api.github.com/users/Allan-Nava/following{/other_user}", "gists_url": "https://api.github.com/users/Allan-Nava/gists{/gist_id}", "starred_url": "https://api.github.com/users/Allan-Nava/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Allan-Nava/subscriptions", "organizations_url": "https://api.github.com/users/Allan-Nava/orgs", "repos_url": "https://api.github.com/users/Allan-Nava/repos", "events_url": "https://api.github.com/users/Allan-Nava/events{/privacy}", "received_events_url": "https://api.github.com/users/Allan-Nava/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-22T10:26:28Z", "updated_at": "2017-11-28T20:43:57Z", "closed_at": "2017-11-28T20:43:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nin template view doesn't work the **get_obj_perms**.\r\n\r\n\r\n```\r\n{% load guardian_tags %}\r\n{% get_obj_perms request.user for groups_manager as \"context_var\" %}\r\n{{context_var}}\r\n\r\n{{perms.groups_manager}}\r\n          {{perms.groups}}\r\n          \r\n          <!--PERMISSIONS_HERE-->\r\n          {% if perms.groups_manager.can_add_member_custom %}\r\n            <p>\r\n              <a href=\"{% url 'groups_manager:group_member_add_member' group.id %}\">\r\n                <i class=\"fa fa-plus\"></i>\r\n                Add member to group\r\n              </a>\r\n            </p>\r\n          {% endif %}\r\n```\r\n\r\n![screen shot 2017-11-22 at 09 35 06](https://user-images.githubusercontent.com/22498435/33117383-8bf2536c-cf68-11e7-84d5-6d539fb68d89.png)\r\n\r\nBut with **django shell** it works:\r\n![screen shot 2017-11-21 at 16 42 17](https://user-images.githubusercontent.com/22498435/33081618-0eae931c-cedb-11e7-9944-be91d9788ec1.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/533", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/533/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/533/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/533/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/533", "id": 275317976, "node_id": "MDU6SXNzdWUyNzUzMTc5NzY=", "number": 533, "title": "Add/Remove member only for a specific group", "user": {"login": "Allan-Nava", "id": 22498435, "node_id": "MDQ6VXNlcjIyNDk4NDM1", "avatar_url": "https://avatars3.githubusercontent.com/u/22498435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Allan-Nava", "html_url": "https://github.com/Allan-Nava", "followers_url": "https://api.github.com/users/Allan-Nava/followers", "following_url": "https://api.github.com/users/Allan-Nava/following{/other_user}", "gists_url": "https://api.github.com/users/Allan-Nava/gists{/gist_id}", "starred_url": "https://api.github.com/users/Allan-Nava/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Allan-Nava/subscriptions", "organizations_url": "https://api.github.com/users/Allan-Nava/orgs", "repos_url": "https://api.github.com/users/Allan-Nava/repos", "events_url": "https://api.github.com/users/Allan-Nava/events{/privacy}", "received_events_url": "https://api.github.com/users/Allan-Nava/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 35, "created_at": "2017-11-20T11:10:00Z", "updated_at": "2017-11-21T15:43:17Z", "closed_at": "2017-11-21T11:54:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nHi,I need to have a permission, that let the users of a specific group to add, delete or remove only for the belonging group.\r\n--\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/530", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/530/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/530/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/530/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/530", "id": 267597932, "node_id": "MDU6SXNzdWUyNjc1OTc5MzI=", "number": 530, "title": "Notify build completion", "user": {"login": "lykata", "id": 12255548, "node_id": "MDQ6VXNlcjEyMjU1NTQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/12255548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lykata", "html_url": "https://github.com/lykata", "followers_url": "https://api.github.com/users/lykata/followers", "following_url": "https://api.github.com/users/lykata/following{/other_user}", "gists_url": "https://api.github.com/users/lykata/gists{/gist_id}", "starred_url": "https://api.github.com/users/lykata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lykata/subscriptions", "organizations_url": "https://api.github.com/users/lykata/orgs", "repos_url": "https://api.github.com/users/lykata/repos", "events_url": "https://api.github.com/users/lykata/events{/privacy}", "received_events_url": "https://api.github.com/users/lykata/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-23T09:23:44Z", "updated_at": "2017-10-23T09:25:42Z", "closed_at": "2017-10-23T09:25:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Notify on slack whenever a build is complete. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/520", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/520/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/520/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/520/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/520", "id": 252163315, "node_id": "MDU6SXNzdWUyNTIxNjMzMTU=", "number": 520, "title": "django-guardian don't support multiple databases?", "user": {"login": "suparek", "id": 9245996, "node_id": "MDQ6VXNlcjkyNDU5OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/9245996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suparek", "html_url": "https://github.com/suparek", "followers_url": "https://api.github.com/users/suparek/followers", "following_url": "https://api.github.com/users/suparek/following{/other_user}", "gists_url": "https://api.github.com/users/suparek/gists{/gist_id}", "starred_url": "https://api.github.com/users/suparek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suparek/subscriptions", "organizations_url": "https://api.github.com/users/suparek/orgs", "repos_url": "https://api.github.com/users/suparek/repos", "events_url": "https://api.github.com/users/suparek/events{/privacy}", "received_events_url": "https://api.github.com/users/suparek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-23T05:28:11Z", "updated_at": "2017-11-07T12:50:14Z", "closed_at": "2017-11-07T12:50:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I write it to my settings.py\r\n`\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\r\n    },\r\n    'hivetest': {\r\n        'ENGINE': 'django.db.backends.mysql',\r\n        'NAME': 'hivetest',\r\n        'USER': 'root',\r\n        'PASSWORD': 'ladyroot',\r\n        'HOST': 'localhost',\r\n        'PORT': '3306',\r\n    },\r\n}\r\n\r\n`\r\n\r\nbut when I change the object permission,it said to me \r\n`\r\n\r\nRequest Method: | POST\r\n-- | --\r\nhttp://127.0.0.1:8000/admin/test/testdata/7/permissions/user-manage/2/\r\n1.11.3\r\nOperationalError\r\nno such table: testdata\r\n/home/yangtz/anaconda3/envs/xinfang/lib/python3.6/site-packages/django/db/backends/sqlite3/base.py in execute, line 328\r\n/home/yangtz/anaconda3/envs/xinfang/bin/python\r\n3.6.0\r\n\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/518", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/518/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/518/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/518/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/518", "id": 246026079, "node_id": "MDU6SXNzdWUyNDYwMjYwNzk=", "number": 518, "title": "Groups by objects", "user": {"login": "imaia", "id": 14771411, "node_id": "MDQ6VXNlcjE0NzcxNDEx", "avatar_url": "https://avatars1.githubusercontent.com/u/14771411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imaia", "html_url": "https://github.com/imaia", "followers_url": "https://api.github.com/users/imaia/followers", "following_url": "https://api.github.com/users/imaia/following{/other_user}", "gists_url": "https://api.github.com/users/imaia/gists{/gist_id}", "starred_url": "https://api.github.com/users/imaia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imaia/subscriptions", "organizations_url": "https://api.github.com/users/imaia/orgs", "repos_url": "https://api.github.com/users/imaia/repos", "events_url": "https://api.github.com/users/imaia/events{/privacy}", "received_events_url": "https://api.github.com/users/imaia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-27T12:39:01Z", "updated_at": "2017-11-07T12:51:17Z", "closed_at": "2017-11-07T12:51:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "How could I consult all groups by a queryset of objects? Like: list me these objects and fetch them with groups that have a certain right over them. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/510", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/510/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/510/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/510/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/510", "id": 234301130, "node_id": "MDU6SXNzdWUyMzQzMDExMzA=", "number": 510, "title": "`obj_perms_manage_group_view` and `obj_perms_manage_user_view` not initially rendering existing perms", "user": {"login": "TakenCraig", "id": 1312324, "node_id": "MDQ6VXNlcjEzMTIzMjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1312324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TakenCraig", "html_url": "https://github.com/TakenCraig", "followers_url": "https://api.github.com/users/TakenCraig/followers", "following_url": "https://api.github.com/users/TakenCraig/following{/other_user}", "gists_url": "https://api.github.com/users/TakenCraig/gists{/gist_id}", "starred_url": "https://api.github.com/users/TakenCraig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TakenCraig/subscriptions", "organizations_url": "https://api.github.com/users/TakenCraig/orgs", "repos_url": "https://api.github.com/users/TakenCraig/repos", "events_url": "https://api.github.com/users/TakenCraig/events{/privacy}", "received_events_url": "https://api.github.com/users/TakenCraig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-07T18:27:34Z", "updated_at": "2017-06-29T15:57:59Z", "closed_at": "2017-06-29T15:57:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "* Django versions: 1.11.1, 1.11.2\r\n* django-guardian versions: 1.4.8,  ed2d46754045b55ca16b40f9e7d527fddec8db2c\r\n\r\n#### Issue\r\nWhen opening the \"edit\" for an existing user or group with object permissions, or after saving a change to a user or group's object permissions, the selected permissions render empty to the user. \r\n\r\n#### Extra info\r\nI tried to create a PR with a failing test, but the response object looks like it should be rendering correctly. In both cases above, there is a queryset returning the correct list in `response.context['form'].fields['permissions'].initial`, but that list isn't rendered correctly by the `FilteredSelectMultiple` widget.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/505", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/505/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/505/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/505/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/505", "id": 228468175, "node_id": "MDU6SXNzdWUyMjg0NjgxNzU=", "number": 505, "title": "django-guardian refuses to acknowledge permissions when form is used", "user": {"login": "SHxKM", "id": 6573474, "node_id": "MDQ6VXNlcjY1NzM0NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6573474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SHxKM", "html_url": "https://github.com/SHxKM", "followers_url": "https://api.github.com/users/SHxKM/followers", "following_url": "https://api.github.com/users/SHxKM/following{/other_user}", "gists_url": "https://api.github.com/users/SHxKM/gists{/gist_id}", "starred_url": "https://api.github.com/users/SHxKM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SHxKM/subscriptions", "organizations_url": "https://api.github.com/users/SHxKM/orgs", "repos_url": "https://api.github.com/users/SHxKM/repos", "events_url": "https://api.github.com/users/SHxKM/events{/privacy}", "received_events_url": "https://api.github.com/users/SHxKM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-05-13T11:45:21Z", "updated_at": "2019-05-24T11:37:15Z", "closed_at": "2017-05-13T21:11:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using [`django-guardian`][1] to assign per-object permissions between `register.GeneralUser` and `butler.Business` models.\r\n\r\nIf I create a business and a user in shell, and then use `assign_perm` to assign a permission, django correctly reports that `user.has_perm(\"permission\", business)` is `True`. This is also the behavior when a user and a business are create via django's admin-system.\r\n\r\nHowever, for user's and their corresponding businesses created through a [`django-registration`][1] form, guardian will always report permissions as `False`, even though they do exist in the db table! Meaning: guardian *is* assigning the permissions, but is always reporting them as `False`. \r\n\r\nI've tried countless of ways to solve this, but to no avail. This is leading me to think that my fairly standard form is somehow flawed, and it's confusing guardian for some reason. \r\n\r\nHere's my `register/forms.py`:\r\n\r\n    from registration.forms import UserCreationForm\r\n    from butler.models import Business\r\n    from register.models import GeneralUser\r\n    from django import forms\r\n    \r\n    class GeneralUserForm(UserCreationForm):\r\n        business_name = forms.CharField(required=True)\r\n    \r\n        class Meta:\r\n            model = GeneralUser\r\n            fields = ['username', 'email', 'password1',\r\n                      'password2', 'business_name']\r\n    \r\n        def save(self, commit=True):\r\n            user = super(GeneralUserForm, self).save(commit=True)\r\n            print(user)\r\n            user.set_password(self.cleaned_data[\"password1\"])\r\n            business = Business(name=self.cleaned_data['business_name'], owner=user)\r\n            print(business)\r\n    \r\n            user.save()\r\n            business.save()\r\n            return user\r\n\r\nHere's a link to my [GeneralUser model][2].\r\n\r\nIf I now query the user and business created through this form, assign a permission (say `delete_business`) between them, guardian *will* create it, but doing the check `user.has_perm(\"delete_business\", biz)` will incorrectly report `False`. This holds for permissions that are supplied by Django by default (add, change, delete), or custom permissions defined in the model.\r\n\r\nMy search for the culprit has been going on for a few days now, so any hint is much appreciated!\r\n\r\nWhy does guardian behave normally for users created in shell and admin panel, but not those created by my registration form???  \r\n\r\n\r\n  [1]: https://github.com/django-guardian/django-guardian\r\n  [2]: https://pastebin.com/B4UM5bM0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/503", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/503/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/503/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/503/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/503", "id": 227699776, "node_id": "MDU6SXNzdWUyMjc2OTk3NzY=", "number": 503, "title": "django-guardian not reporting correctly with has_perm in shell", "user": {"login": "SHxKM", "id": 6573474, "node_id": "MDQ6VXNlcjY1NzM0NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6573474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SHxKM", "html_url": "https://github.com/SHxKM", "followers_url": "https://api.github.com/users/SHxKM/followers", "following_url": "https://api.github.com/users/SHxKM/following{/other_user}", "gists_url": "https://api.github.com/users/SHxKM/gists{/gist_id}", "starred_url": "https://api.github.com/users/SHxKM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SHxKM/subscriptions", "organizations_url": "https://api.github.com/users/SHxKM/orgs", "repos_url": "https://api.github.com/users/SHxKM/repos", "events_url": "https://api.github.com/users/SHxKM/events{/privacy}", "received_events_url": "https://api.github.com/users/SHxKM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-05-10T14:29:42Z", "updated_at": "2017-05-13T11:46:06Z", "closed_at": "2017-05-13T11:45:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I'm using django-guardian with a custom User model, but it's acting up. I did implement all changes as advised in the docs.\r\n\r\nAssume the following shell session:\r\n\r\n\r\n    >>> our_user = GeneralUser.objects.get(id=25)\r\n    >>> our_biz = Business.objects.get(id=5)\r\n    >>> assign_perm('delete_business', our_user, our_biz)\r\n    <UserObjectPermission: UserObjectPermission object>\r\n    >>> our_user.has_perm('delete_business', our_biz)\r\n    False\r\n\r\nThis has led me me to believe that maybe trying to edit one of django's built-in permissions (`add|change|delete`) isn't possible through guardian, so I tried to the permission label to `del_business`, but got the *same result as above*.\r\n\r\nBut upon inspecting the table `guardian_userobjectpermission` I can see that the above session, and in fact all of my attempts were successful:\r\n\r\n[![enter image description here][1]][1]\r\n\r\nSo why does `.has_perm` always report `False` when I check?\r\n\r\nThe only case where `has_perm` returns True is when both objects (User & Business) are **created** within the shell session. Otherwise it always returns `False`, even though its SQL-table clearly says it should be `True`.\r\n\r\n  [1]: https://i.stack.imgur.com/Yjvyg.png", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/502", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/502/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/502/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/502/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/502", "id": 227649380, "node_id": "MDU6SXNzdWUyMjc2NDkzODA=", "number": 502, "title": "django-guardian not affecting permissions", "user": {"login": "SHxKM", "id": 6573474, "node_id": "MDQ6VXNlcjY1NzM0NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6573474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SHxKM", "html_url": "https://github.com/SHxKM", "followers_url": "https://api.github.com/users/SHxKM/followers", "following_url": "https://api.github.com/users/SHxKM/following{/other_user}", "gists_url": "https://api.github.com/users/SHxKM/gists{/gist_id}", "starred_url": "https://api.github.com/users/SHxKM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SHxKM/subscriptions", "organizations_url": "https://api.github.com/users/SHxKM/orgs", "repos_url": "https://api.github.com/users/SHxKM/repos", "events_url": "https://api.github.com/users/SHxKM/events{/privacy}", "received_events_url": "https://api.github.com/users/SHxKM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-05-10T11:31:26Z", "updated_at": "2017-05-10T14:31:39Z", "closed_at": "2017-05-10T14:31:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "**UPDATE**\r\nit turns out permissions **were** being loaded, but the `has_perm` isn't reporting them reliably. I believe this is a separate issue but edit the title so I'm closing this one, and here's the [new thread](https://github.com/django-guardian/django-guardian/issues/503).\r\n\r\n------\r\n\r\nI'm trying to change one of the default `action_modelname` which django creates automatically.\r\n\r\nSpecifically, I'm trying to set the `delete_business` permission of a `GeneralUser` (custom User model) to True.\r\n\r\nBelow is shell session:\r\n\r\n    >>> our_user = GeneralUser.objects.get(id=25)\r\n    >>> our_biz = Business.objects.get(id=5)\r\n    >>> assign_perm('delete_business', our_user, our_biz)\r\n    >>> # also tried assign_perm('butler.delete_business', our_user, our_biz)\r\n    <UserObjectPermission: UserObjectPermission object>\r\n    >>> our_user.has_perm('delete_business', our_biz)\r\n    False\r\n\r\nI also tried:\r\n\r\n    >>> assign_perm('delete_business', our_user, our_biz).save()\r\n\r\n\r\nbut `.has_perm` returns `False` no matter what. What gives?\r\n\r\nI've tried the following:\r\n\r\n> By default django-guardian monkey patches the user model to add some\r\n> needed functionality. This can result in errors if guardian is\r\n> imported into the models.py of the same app where the custom user\r\n> model lives.\r\n> \r\n> To fix this, it is recommended to add the setting\r\n> **GUARDIAN_MONKEY_PATCH = False** in your settings.py and subclass\r\n> **guardian.mixins.GuardianUserMixin** in your custom user model.\r\n\r\nStill no dice.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/497", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/497/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/497/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/497/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/497", "id": 219149668, "node_id": "MDU6SXNzdWUyMTkxNDk2Njg=", "number": 497, "title": "Django 1.11 compatibility", "user": {"login": "michael-k", "id": 152008, "node_id": "MDQ6VXNlcjE1MjAwOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/152008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michael-k", "html_url": "https://github.com/michael-k", "followers_url": "https://api.github.com/users/michael-k/followers", "following_url": "https://api.github.com/users/michael-k/following{/other_user}", "gists_url": "https://api.github.com/users/michael-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/michael-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michael-k/subscriptions", "organizations_url": "https://api.github.com/users/michael-k/orgs", "repos_url": "https://api.github.com/users/michael-k/repos", "events_url": "https://api.github.com/users/michael-k/events{/privacy}", "received_events_url": "https://api.github.com/users/michael-k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-04-04T06:11:40Z", "updated_at": "2017-04-04T22:32:26Z", "closed_at": "2017-04-04T22:32:26Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I tried to add Django 1.11 to the test matrix. When adding it, `py.test --cov=guardian` fails with the following stack trace:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/home/travis/virtualenv/python3.6.0/bin/py.test\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/config.py\", line 47, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/config.py\", line 156, in _prepareconfig\r\n    pluginmanager=pluginmanager, args=args)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 745, in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 339, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 334, in <lambda>\r\n    _MultiCall(methods, kwargs, hook.spec_opts).execute()\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 613, in execute\r\n    return _wrapped_call(hook_impl.function(*args), self.execute)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 250, in _wrapped_call\r\n    wrap_controller.send(call_outcome)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/helpconfig.py\", line 32, in pytest_cmdline_parse\r\n    config = outcome.get_result()\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 279, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 265, in __init__\r\n    self.result = func()\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 614, in execute\r\n    res = hook_impl.function(*args)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/config.py\", line 924, in pytest_cmdline_parse\r\n    self.parse(args)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/config.py\", line 1082, in parse\r\n    self._preparse(args, addopts=addopts)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/config.py\", line 1053, in _preparse\r\n    args=args, parser=self._parser)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 745, in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 339, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 334, in <lambda>\r\n    _MultiCall(methods, kwargs, hook.spec_opts).execute()\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 613, in execute\r\n    return _wrapped_call(hook_impl.function(*args), self.execute)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 254, in _wrapped_call\r\n    return call_outcome.get_result()\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 279, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 265, in __init__\r\n    self.result = func()\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/_pytest/vendored_packages/pluggy.py\", line 614, in execute\r\n    res = hook_impl.function(*args)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/pytest_django/plugin.py\", line 246, in pytest_load_initial_conftests\r\n    _setup_django()\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/pytest_django/plugin.py\", line 149, in _setup_django\r\n    django.setup()\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/django/__init__.py\", line 24, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/django/apps/registry.py\", line 112, in populate\r\n    app_config.import_models()\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/django/apps/config.py\", line 198, in import_models\r\n    self.models_module = import_module(models_module_name)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 978, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 961, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 950, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 655, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 678, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 205, in _call_with_frames_removed\r\n  File \"/home/travis/build/michael-k/django-guardian/guardian/models.py\", line 9, in <module>\r\n    from guardian.managers import GroupObjectPermissionManager, UserObjectPermissionManager\r\n  File \"/home/travis/build/michael-k/django-guardian/guardian/managers.py\", line 4, in <module>\r\n    from guardian.core import ObjectPermissionChecker\r\n  File \"/home/travis/build/michael-k/django-guardian/guardian/core.py\", line 7, in <module>\r\n    from guardian.utils import get_group_obj_perms_model, get_identity, get_user_obj_perms_model\r\n  File \"/home/travis/build/michael-k/django-guardian/guardian/utils.py\", line 12, in <module>\r\n    from django.contrib.auth.views import redirect_to_login\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/django/contrib/auth/views.py\", line 11, in <module>\r\n    from django.contrib.auth.forms import (\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/django/contrib/auth/forms.py\", line 20, in <module>\r\n    UserModel = get_user_model()\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/django/contrib/auth/__init__.py\", line 189, in get_user_model\r\n    return django_apps.get_model(settings.AUTH_USER_MODEL, require_ready=False)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/django/apps/registry.py\", line 200, in get_model\r\n    app_config.import_models()\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/site-packages/django/apps/config.py\", line 198, in import_models\r\n    self.models_module = import_module(models_module_name)\r\n  File \"/home/travis/virtualenv/python3.6.0/lib/python3.6/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"/home/travis/build/michael-k/django-guardian/guardian/testapp/models.py\", line 9, in <module>\r\n    from guardian.mixins import GuardianUserMixin\r\n  File \"/home/travis/build/michael-k/django-guardian/guardian/mixins.py\", line 7, in <module>\r\n    from guardian.models import UserObjectPermission\r\nImportError: cannot import name 'UserObjectPermission'\r\n```\r\n\r\n- complete test run on travis: https://travis-ci.org/michael-k/django-guardian/builds/217637266\r\n- tested code: https://github.com/michael-k/django-guardian/tree/django-1.11\r\n\r\nI reproduced this locally and with the help of git-bisect, it came down to Django's commit https://github.com/django/django/commit/cb7bbf97a74fa7800865e3615f196ad65dc4f281 from PR django/django#7550:\r\n```\r\nFixed #25966 -- Made get_user_model() work at import time.\r\nThis makes it equivalent to: `from django.contrib.auth.models import User`.\r\n```\r\n\r\nAny idea on how to fix that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/490", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/490/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/490/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/490/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/490", "id": 209770866, "node_id": "MDU6SXNzdWUyMDk3NzA4NjY=", "number": 490, "title": "assign_perm() on QuerySet has unpredicted behaviour", "user": {"login": "primoz-k", "id": 4609507, "node_id": "MDQ6VXNlcjQ2MDk1MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4609507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/primoz-k", "html_url": "https://github.com/primoz-k", "followers_url": "https://api.github.com/users/primoz-k/followers", "following_url": "https://api.github.com/users/primoz-k/following{/other_user}", "gists_url": "https://api.github.com/users/primoz-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/primoz-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/primoz-k/subscriptions", "organizations_url": "https://api.github.com/users/primoz-k/orgs", "repos_url": "https://api.github.com/users/primoz-k/repos", "events_url": "https://api.github.com/users/primoz-k/events{/privacy}", "received_events_url": "https://api.github.com/users/primoz-k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-23T14:09:45Z", "updated_at": "2017-02-24T09:26:17Z", "closed_at": "2017-02-24T08:26:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I execute `assing_perm` on a QuerySet like this:\r\n\r\n```python\r\nassign_perm('view_person', user, persons_queryset)\r\n```\r\n\r\nAfter this line is executed, User, for who I'm setting permission, might not have  `view_person` permission to all of the objects in `persons_queryset`.\r\n\r\nDoes anybody have the same problem?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/487", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/487/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/487/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/487/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/487", "id": 206201621, "node_id": "MDU6SXNzdWUyMDYyMDE2MjE=", "number": 487, "title": "Incorrect documentation for guardian.shortcuts.get_objects_for_user", "user": {"login": "mikeengland", "id": 8333737, "node_id": "MDQ6VXNlcjgzMzM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8333737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeengland", "html_url": "https://github.com/mikeengland", "followers_url": "https://api.github.com/users/mikeengland/followers", "following_url": "https://api.github.com/users/mikeengland/following{/other_user}", "gists_url": "https://api.github.com/users/mikeengland/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeengland/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeengland/subscriptions", "organizations_url": "https://api.github.com/users/mikeengland/orgs", "repos_url": "https://api.github.com/users/mikeengland/repos", "events_url": "https://api.github.com/users/mikeengland/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeengland/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-02-08T13:43:31Z", "updated_at": "2017-02-20T00:26:24Z", "closed_at": "2017-02-20T00:26:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The documentation at https://django-guardian.readthedocs.io/en/stable/api/guardian.shortcuts.html#get-objects-for-user mentions:\r\n\r\n`If perms is an empty list, then it returns objects for which a given user has any object permission.`\r\n\r\nUnfortunately, providing an empty lists results in a WrongAppError:\r\n`raise WrongAppError(\"Cannot determine content type\")`\r\n\r\nIt would be very useful to be able to get all objects managed by guardian where a user has permissions. Is this just a bug or has this feature been removed?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/485", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/485/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/485/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/485/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/485", "id": 203899566, "node_id": "MDU6SXNzdWUyMDM4OTk1NjY=", "number": 485, "title": "Broken django db dump", "user": {"login": "ZuSe", "id": 522403, "node_id": "MDQ6VXNlcjUyMjQwMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/522403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZuSe", "html_url": "https://github.com/ZuSe", "followers_url": "https://api.github.com/users/ZuSe/followers", "following_url": "https://api.github.com/users/ZuSe/following{/other_user}", "gists_url": "https://api.github.com/users/ZuSe/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZuSe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZuSe/subscriptions", "organizations_url": "https://api.github.com/users/ZuSe/orgs", "repos_url": "https://api.github.com/users/ZuSe/repos", "events_url": "https://api.github.com/users/ZuSe/events{/privacy}", "received_events_url": "https://api.github.com/users/ZuSe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 286067604, "node_id": "MDU6TGFiZWwyODYwNjc2MDQ=", "url": "https://api.github.com/repos/django-guardian/django-guardian/labels/moreinfo", "name": "moreinfo", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-01-29T21:55:19Z", "updated_at": "2019-11-28T09:16:22Z", "closed_at": "2019-11-28T09:16:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi folks,\r\n\r\ni am using django dump command to snapshot my db one note and  load the data into a newly created on another node. Since I installed django-guardian it seems not possible anymore. It breaks on:\r\n \r\nTraceback (most recent call last):\r\n  File \"/home/django/my_project/venv/lib/python3.5/site-packages/django/db/models/fields/related.py\", line 600, in __get__\r\n    rel_obj = getattr(instance, self.cache_name)\r\nAttributeError: 'Account' object has no attribute '_othermodel_cache'\r\n\r\nDo you have idea what could cause him expecting the _cache attribute?\r\n\r\nBest,\r\nPatrick\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/483", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/483/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/483/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/483", "id": 201977335, "node_id": "MDU6SXNzdWUyMDE5NzczMzU=", "number": 483, "title": "read the docs failing to build", "user": {"login": "brianmay", "id": 112729, "node_id": "MDQ6VXNlcjExMjcyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/112729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianmay", "html_url": "https://github.com/brianmay", "followers_url": "https://api.github.com/users/brianmay/followers", "following_url": "https://api.github.com/users/brianmay/following{/other_user}", "gists_url": "https://api.github.com/users/brianmay/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianmay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianmay/subscriptions", "organizations_url": "https://api.github.com/users/brianmay/orgs", "repos_url": "https://api.github.com/users/brianmay/repos", "events_url": "https://api.github.com/users/brianmay/events{/privacy}", "received_events_url": "https://api.github.com/users/brianmay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-19T21:14:38Z", "updated_at": "2017-01-19T21:32:05Z", "closed_at": "2017-01-19T21:31:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://readthedocs.org/projects/django-guardian/builds/4913799/\r\n\r\nI imagine this would be easy to fix. Don't have time right now myself.\r\n\r\nLooks like an import on setuptools_scm needs to be removed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/482", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/482/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/482/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/482/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/482", "id": 197138539, "node_id": "MDU6SXNzdWUxOTcxMzg1Mzk=", "number": 482, "title": "Troubles querying the object permissions in view", "user": {"login": "hetsch", "id": 439359, "node_id": "MDQ6VXNlcjQzOTM1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/439359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hetsch", "html_url": "https://github.com/hetsch", "followers_url": "https://api.github.com/users/hetsch/followers", "following_url": "https://api.github.com/users/hetsch/following{/other_user}", "gists_url": "https://api.github.com/users/hetsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/hetsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hetsch/subscriptions", "organizations_url": "https://api.github.com/users/hetsch/orgs", "repos_url": "https://api.github.com/users/hetsch/repos", "events_url": "https://api.github.com/users/hetsch/events{/privacy}", "received_events_url": "https://api.github.com/users/hetsch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-12-22T10:08:57Z", "updated_at": "2016-12-22T13:28:56Z", "closed_at": "2016-12-22T13:24:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm currently having troubles to understand how object level permissions can be queried inside a django view instance. \r\n\r\nWhat I want to achieve is that `UserA` should be able to access his own user object (model instance), but is not allowed to access the user object instances of other users `UserB, UserC ...`. Therefore, I've assigned permissions via `assign_perm('view_dashboard', user, user)`. \r\n\r\nAs far as I understood this, only `UserA` is allowed to view his own user model instance. What I was expecting is that if I query the current access permissions via `self.request.user.has_perm('view_dashboard', obj)` and `obj` is not the user model instance of the currently logged-in user, it would return `False` (not allowed), because only the currently logged-in user is permitted to access his/her own user object instance. \r\n\r\nBut `self.request.user.has_perm('view_dashboard', obj)` returns `True` for every permission check on `obj`. Somehow it seems like there is something mixed with global permissions.\r\n\r\nMy current code is:\r\n\r\nsettings.py\r\n\r\n    AUTHENTICATION_BACKENDS = (\r\n        'django.contrib.auth.backends.ModelBackend',\r\n        'allauth.account.auth_backends.AuthenticationBackend',\r\n        'guardian.backends.ObjectPermissionBackend',\r\n    )\r\n    ANONYMOUS_USER_NAME = 'AnonymousUser'\r\n\r\nusers.models.py\r\n\r\n    from django.contrib.auth.models import AbstractUser\r\n\r\n    class User(AbstractUser):\r\n\r\n        class Meta:\r\n            # http://stackoverflow.com/a/28467698/1230358\r\n            # default_permissions = ()\r\n            permissions = (\r\n                ('view_dashboard', _('Can view user dashboard')),\r\n            )\r\n\r\nusers.apps.py\r\n\r\n    from django.apps import AppConfig\r\n    from django.db.models.signals import post_save\r\n    from django.conf import settings\r\n\r\n    class UsersConfig(AppConfig):\r\n        name = 'core.users'\r\n        verbose_name = \"Users\"\r\n\r\n        def ready(self):\r\n            from core.users.models import User\r\n            post_save.connect(setup_user_permissions, sender=User)\r\n\r\n\r\n    def setup_user_permissions(sender, **kwargs):\r\n        from guardian.shortcuts import assign_perm\r\n\r\n        user, created = kwargs[\"instance\"], kwargs[\"created\"]\r\n        if created and user.username != settings.ANONYMOUS_USER_NAME:\r\n            assign_perm('view_dashboard', user, user)\r\n\r\n\r\nusers.views.py\r\n\r\n    class UserDetailView(LoginRequiredMixin, UserPassesTestMixin, DetailView):\r\n\r\n        model = User\r\n\r\n        raise_exception = True\r\n\r\n        def test_func(self):\r\n            # get the user object model\r\n            obj = self.get_object()\r\n\r\n            # print(self.request.user.has_perm('view_dashboard', obj))\r\n            # print(get_perms(self.request.user, obj))\r\n\r\n            # Both return True also in the case if the currently logged in user \r\n            # (self.request.user) wants to view the dashboard of another user (obj).\r\n            # This should not be the case because only the owner should have access\r\n            # to the dashboard. Assigned via assign_perm('view_dashboard', user, user)\r\n\r\n            # Returns True if UserA == obj of UserA (as expected)\r\n            # Returns also True if UserA == obj of UserB (not expected)\r\n\r\n            # return self.request.user.has_perm('view_dashboard', obj)\r\n            return 'view_dashboard' in get_perms(self.request.user, obj)\r\n\r\nThe same happens if I use the `PermissionRequiredMixin` of guardian.\r\n\r\n    class UserDetailView(LoginRequiredMixin, PermissionRequiredMixin, DetailView):\r\n\r\n        model = User\r\n\r\n        permission_required = 'users.view_dashboard'\r\n        # accept_global_perms = True\r\n        # accept_global_perms = False\r\n\r\n        # raise exception instead of endlessly redirecting to login url\r\n        raise_exception = True\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/481", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/481/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/481/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/481/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/481", "id": 196866671, "node_id": "MDU6SXNzdWUxOTY4NjY2NzE=", "number": 481, "title": "the AnonymousUser.is_authenticated() return True which make the django-rest-framework permission check pass unexpected.", "user": {"login": "hackrole", "id": 2100811, "node_id": "MDQ6VXNlcjIxMDA4MTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/2100811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackrole", "html_url": "https://github.com/hackrole", "followers_url": "https://api.github.com/users/hackrole/followers", "following_url": "https://api.github.com/users/hackrole/following{/other_user}", "gists_url": "https://api.github.com/users/hackrole/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackrole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackrole/subscriptions", "organizations_url": "https://api.github.com/users/hackrole/orgs", "repos_url": "https://api.github.com/users/hackrole/repos", "events_url": "https://api.github.com/users/hackrole/events{/privacy}", "received_events_url": "https://api.github.com/users/hackrole/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-21T07:43:31Z", "updated_at": "2016-12-22T07:32:46Z", "closed_at": "2016-12-22T07:32:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "the django-rest-framework IsAuthenticated class check if user was logged in by check is request.user is None and request.user.is_authenticated().\r\n\r\nbut the guardian make all this passed. I really can understand why the anonymousUser.is_authenticated() return True and anonymousUser.is_anonymous() return False.\r\n\r\nIs not this a bug??", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/480", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/480/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/480/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/480/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/480", "id": 196782640, "node_id": "MDU6SXNzdWUxOTY3ODI2NDA=", "number": 480, "title": "Misleading ANONYMOUS_USER_NAME documentation", "user": {"login": "scottx611x", "id": 5629547, "node_id": "MDQ6VXNlcjU2Mjk1NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5629547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottx611x", "html_url": "https://github.com/scottx611x", "followers_url": "https://api.github.com/users/scottx611x/followers", "following_url": "https://api.github.com/users/scottx611x/following{/other_user}", "gists_url": "https://api.github.com/users/scottx611x/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottx611x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottx611x/subscriptions", "organizations_url": "https://api.github.com/users/scottx611x/orgs", "repos_url": "https://api.github.com/users/scottx611x/repos", "events_url": "https://api.github.com/users/scottx611x/events{/privacy}", "received_events_url": "https://api.github.com/users/scottx611x/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-20T21:13:09Z", "updated_at": "2017-01-03T14:19:27Z", "closed_at": "2017-01-03T14:19:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all\r\n\r\nI recently ran into an issue where the following line [here](https://django-guardian.readthedocs.io/en/stable/configuration.html#anonymous-user-name): \r\n\r\n`Defaults to \"AnonymousUser\".` \r\n\r\nled me to believe that the `ANONYMOUS_USER_NAME` didn't need to be set, but the AnonymousUser does not seem to be created without it.\r\n\r\nRunning \r\n`Django 1.7.11`\r\n`django-guardian 1.4.6`\r\n\r\nI think a tiny update to the docs could help others out.\r\nOn the other hand, if this sounds super weird and you believe I'm experiencing some one-off behavior please let me know! \r\n\r\nThanks :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/478", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/478/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/478/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/478/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/478", "id": 196249568, "node_id": "MDU6SXNzdWUxOTYyNDk1Njg=", "number": 478, "title": "Sample Project", "user": {"login": "hvilela", "id": 435669, "node_id": "MDQ6VXNlcjQzNTY2OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/435669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hvilela", "html_url": "https://github.com/hvilela", "followers_url": "https://api.github.com/users/hvilela/followers", "following_url": "https://api.github.com/users/hvilela/following{/other_user}", "gists_url": "https://api.github.com/users/hvilela/gists{/gist_id}", "starred_url": "https://api.github.com/users/hvilela/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hvilela/subscriptions", "organizations_url": "https://api.github.com/users/hvilela/orgs", "repos_url": "https://api.github.com/users/hvilela/repos", "events_url": "https://api.github.com/users/hvilela/events{/privacy}", "received_events_url": "https://api.github.com/users/hvilela/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 342312775, "node_id": "MDU6TGFiZWwzNDIzMTI3NzU=", "url": "https://api.github.com/repos/django-guardian/django-guardian/labels/work%20in%20progress", "name": "work in progress", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-12-17T23:52:31Z", "updated_at": "2016-12-22T13:26:16Z", "closed_at": "2016-12-22T13:26:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just download the project and tried to run the sample project following these steps:\r\nhttps://django-guardian.readthedocs.io/en/stable/userguide/example_project.html\r\n\r\nGot these erros:\r\n\r\n```\r\nMacBook-Pro-de-Henrique-2:example_project hvilela$ ./manage.py runserver\r\nPerforming system checks...\r\n\r\nSystem check identified some issues:\r\n\r\nWARNINGS:\r\n?: (1_8.W001) The standalone TEMPLATE_* settings were deprecated in Django 1.8 and the TEMPLATES dictionary takes precedence. You must put the values of the following settings into your default TEMPLATES dict: TEMPLATE_DIRS, TEMPLATE_CONTEXT_PROCESSORS, TEMPLATE_DEBUG, TEMPLATE_LOADERS.\r\n\r\nSystem check identified 1 issue (0 silenced).\r\nDecember 17, 2016 - 17:48:14\r\nDjango version 1.9.4, using settings 'settings'\r\nStarting development server at http://127.0.0.1:8000/\r\nQuit the server with CONTROL-C.\r\nInternal Server Error: /\r\nTraceback (most recent call last):\r\n  File \"/Library/Python/2.7/site-packages/django/core/handlers/base.py\", line 174, in get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/Library/Python/2.7/site-packages/django/core/handlers/base.py\", line 172, in get_response\r\n    response = response.render()\r\n  File \"/Library/Python/2.7/site-packages/django/template/response.py\", line 160, in render\r\n    self.content = self.rendered_content\r\n  File \"/Library/Python/2.7/site-packages/django/template/response.py\", line 137, in rendered_content\r\n    content = template.render(context, self._request)\r\n  File \"/Library/Python/2.7/site-packages/django/template/backends/django.py\", line 95, in render\r\n    return self.template.render(context)\r\n  File \"/Library/Python/2.7/site-packages/django/template/base.py\", line 204, in render\r\n    with context.bind_template(self):\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/contextlib.py\", line 17, in __enter__\r\n    return self.gen.next()\r\n  File \"/Library/Python/2.7/site-packages/django/template/context.py\", line 260, in bind_template\r\n    updates.update(processor(self.request))\r\n  File \"/Users/hvilela/Downloads/django-guardian-devel/example_project/core/context_processors.py\", line 5, in version\r\n    return {'version': guardian.get_version()}\r\nAttributeError: 'module' object has no attribute 'get_version'\r\n[17/Dec/2016 17:48:23] \"GET / HTTP/1.1\" 500 83849\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/476", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/476/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/476/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/476/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/476", "id": 195672059, "node_id": "MDU6SXNzdWUxOTU2NzIwNTk=", "number": 476, "title": "`guardian.mixins.PermissionRequiredMixin` fails with `django.views.generic.View`:", "user": {"login": "NAThompson", "id": 5459618, "node_id": "MDQ6VXNlcjU0NTk2MTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5459618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NAThompson", "html_url": "https://github.com/NAThompson", "followers_url": "https://api.github.com/users/NAThompson/followers", "following_url": "https://api.github.com/users/NAThompson/following{/other_user}", "gists_url": "https://api.github.com/users/NAThompson/gists{/gist_id}", "starred_url": "https://api.github.com/users/NAThompson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NAThompson/subscriptions", "organizations_url": "https://api.github.com/users/NAThompson/orgs", "repos_url": "https://api.github.com/users/NAThompson/repos", "events_url": "https://api.github.com/users/NAThompson/events{/privacy}", "received_events_url": "https://api.github.com/users/NAThompson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-14T23:08:59Z", "updated_at": "2016-12-15T01:40:48Z", "closed_at": "2016-12-14T23:21:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using `guardian.mixins.PermissionRequiredMixin`, the permission check fails when the view inherits from `View`, `ListView`, and `TemplateView`, but not when it inherits from `UpdateView`, `DeleteView`, or `CreateView`.\r\n\r\nExample:\r\n\r\n```python\r\nfrom guardian.mixins import PermissionRequiredMixin\r\nfrom django.views.generic import View\r\nfrom django.views.generic import CreateView\r\n\r\n# Will fail:\r\nclass FooView1(PermissionRequiredMixin, View):\r\n    template_name = 'foo.html'\r\n    model = Foo\r\n    permission_required = 'app.delete_foo'\r\n    return_403 = True\r\n\r\n# Will succeed:\r\nclass FooView2(PermissionRequiredMixin, CreateView):\r\n    template_name = 'foo.html'\r\n    model = Foo\r\n    permission_required = 'app.delete_foo'\r\n    return_403 = True\r\n```\r\n\r\nEnvironment: Django 1.10.3, Python 3.5.1, using a custom user model.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/473", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/473/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/473/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/473", "id": 191602425, "node_id": "MDU6SXNzdWUxOTE2MDI0MjU=", "number": 473, "title": "GUARDIAN_GET_INIT_ANONYMOUS_USER should be commented out after first migration", "user": {"login": "hnykda", "id": 2741256, "node_id": "MDQ6VXNlcjI3NDEyNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2741256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hnykda", "html_url": "https://github.com/hnykda", "followers_url": "https://api.github.com/users/hnykda/followers", "following_url": "https://api.github.com/users/hnykda/following{/other_user}", "gists_url": "https://api.github.com/users/hnykda/gists{/gist_id}", "starred_url": "https://api.github.com/users/hnykda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hnykda/subscriptions", "organizations_url": "https://api.github.com/users/hnykda/orgs", "repos_url": "https://api.github.com/users/hnykda/repos", "events_url": "https://api.github.com/users/hnykda/events{/privacy}", "received_events_url": "https://api.github.com/users/hnykda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-24T23:36:49Z", "updated_at": "2016-12-21T09:34:41Z", "closed_at": "2016-12-21T09:34:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. When using [custom user model](http://django-guardian.readthedocs.io/en/v1.2/userguide/custom-user-model.html), you need to specify `GUARDIAN_GET_INIT_ANONYMOUS_USER`. But it should be noted that you need to comment this out after running first migration! Otherwise, it will somehow try to create that user every migration and hence failing on UNIQUE constraint. By removing this, it creates an AnonymousUser (improperly with different fields), but at least doesn't fail...\r\n\r\n```\r\n$ ./manage.py migrate account\r\nOperations to perform:\r\n  Apply all migrations: account\r\nRunning migrations:\r\n  No migrations to apply.\r\nTraceback (most recent call last):\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/guardian/management/__init__.py\", line 33, in create_anonymous_user\r\n    User.objects.get(**lookup)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/models/manager.py\", line 85, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/models/query.py\", line 385, in get\r\n    self.model._meta.object_name\r\nextendedUser.models.DoesNotExist: User matching query does not exist.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/backends/utils.py\", line 64, in execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/backends/sqlite3/base.py\", line 337, in execute\r\n    return Database.Cursor.execute(self, query, params)\r\nsqlite3.IntegrityError: UNIQUE constraint failed: extendedUser_user.email\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"./manage.py\", line 22, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/core/management/__init__.py\", line 367, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/core/management/__init__.py\", line 359, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/core/management/base.py\", line 294, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/core/management/base.py\", line 345, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/core/management/commands/migrate.py\", line 224, in handle\r\n    self.verbosity, self.interactive, connection.alias, apps=post_migrate_apps, plan=plan,\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/core/management/sql.py\", line 53, in emit_post_migrate_signal\r\n    **kwargs\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/dispatch/dispatcher.py\", line 191, in send\r\n    response = receiver(signal=self, sender=sender, **named)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/guardian/management/__init__.py\", line 38, in create_anonymous_user\r\n    user.save()\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/contrib/auth/base_user.py\", line 80, in save\r\n    super(AbstractBaseUser, self).save(*args, **kwargs)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/models/base.py\", line 796, in save\r\n    force_update=force_update, update_fields=update_fields)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/models/base.py\", line 824, in save_base\r\n    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/models/base.py\", line 908, in _save_table\r\n    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/models/base.py\", line 947, in _do_insert\r\n    using=using, raw=raw)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/models/manager.py\", line 85, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/models/query.py\", line 1045, in _insert\r\n    return query.get_compiler(using=using).execute_sql(return_id)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/models/sql/compiler.py\", line 1054, in execute_sql\r\n    cursor.execute(sql, params)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/backends/utils.py\", line 79, in execute\r\n    return super(CursorDebugWrapper, self).execute(sql, params)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/backends/utils.py\", line 64, in execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/utils.py\", line 94, in __exit__\r\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/utils/six.py\", line 685, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/backends/utils.py\", line 64, in execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/home/dan/.local/opt/miniconda3/envs/djangobase/lib/python3.5/site-packages/django/db/backends/sqlite3/base.py\", line 337, in execute\r\n    return Database.Cursor.execute(self, query, params)\r\ndjango.db.utils.IntegrityError: UNIQUE constraint failed: extendedUser_user.email\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/471", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/471/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/471/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/471", "id": 190480969, "node_id": "MDU6SXNzdWUxOTA0ODA5Njk=", "number": 471, "title": "How to import PermissionsMixin", "user": {"login": "mowujilun", "id": 17876968, "node_id": "MDQ6VXNlcjE3ODc2OTY4", "avatar_url": "https://avatars1.githubusercontent.com/u/17876968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mowujilun", "html_url": "https://github.com/mowujilun", "followers_url": "https://api.github.com/users/mowujilun/followers", "following_url": "https://api.github.com/users/mowujilun/following{/other_user}", "gists_url": "https://api.github.com/users/mowujilun/gists{/gist_id}", "starred_url": "https://api.github.com/users/mowujilun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mowujilun/subscriptions", "organizations_url": "https://api.github.com/users/mowujilun/orgs", "repos_url": "https://api.github.com/users/mowujilun/repos", "events_url": "https://api.github.com/users/mowujilun/events{/privacy}", "received_events_url": "https://api.github.com/users/mowujilun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-19T06:52:24Z", "updated_at": "2016-11-21T05:28:25Z", "closed_at": "2016-11-21T05:28:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I followed the document to customise django user class\r\n\r\n\"To fix this, it is recommended to add the setting GUARDIAN_MONKEY_PATCH = False in your settings.py and add the GuardianUserMixin to your custom user model.\"\r\n\r\nmy customised user class extent AbstractBaseUser and PermissionsMixin\r\nclass MyUser(AbstractBaseUser, PermissionsMixin):\r\n        pass.....\r\n\r\nbut i cant find the namespace of \"PermissionsMixin\", how to import this class in the model.py", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/469", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/469/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/469/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/469/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/469", "id": 188516241, "node_id": "MDU6SXNzdWUxODg1MTYyNDE=", "number": 469, "title": "Bug in ObjectPermissionChecker class", "user": {"login": "Imperat", "id": 7069867, "node_id": "MDQ6VXNlcjcwNjk4Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/7069867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Imperat", "html_url": "https://github.com/Imperat", "followers_url": "https://api.github.com/users/Imperat/followers", "following_url": "https://api.github.com/users/Imperat/following{/other_user}", "gists_url": "https://api.github.com/users/Imperat/gists{/gist_id}", "starred_url": "https://api.github.com/users/Imperat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Imperat/subscriptions", "organizations_url": "https://api.github.com/users/Imperat/orgs", "repos_url": "https://api.github.com/users/Imperat/repos", "events_url": "https://api.github.com/users/Imperat/events{/privacy}", "received_events_url": "https://api.github.com/users/Imperat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-10T14:03:50Z", "updated_at": "2017-06-04T16:28:44Z", "closed_at": "2017-05-23T13:38:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "For show this bug I purpose to run the following commands:\r\n```\r\n>>>from guardian.core import ObjectPermissionChecker\r\n>>>from django.contrib.auth.models import Group, User\r\n>>>from teamlogic.models import Stadium\r\n>>>user = User.objects.create(username=...)\r\n>>>group = Group.objects.create(name=...)\r\n>>>checker = ObjectPermisionChecker(user)\r\n>>>stadiums = Stadium.objects.all()\r\n>>>checker.has_perm('change_stadium, stadiums[0])\r\nFalse\r\n>>>assign_perm('teamlogic.change_stadium', user)\r\n>>>checker = ObjectPermisionChecker(user)\r\n>>>checker.has_perm('change_stadium', stadiums[0])\r\nFalse # Expected True\r\n```\r\n\r\nIn my snippet Stadium is my custome django model)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/467", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/467/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/467/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/467/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/467", "id": 187549396, "node_id": "MDU6SXNzdWUxODc1NDkzOTY=", "number": 467, "title": "Invalid tutorian for configuration", "user": {"login": "Imperat", "id": 7069867, "node_id": "MDQ6VXNlcjcwNjk4Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/7069867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Imperat", "html_url": "https://github.com/Imperat", "followers_url": "https://api.github.com/users/Imperat/followers", "following_url": "https://api.github.com/users/Imperat/following{/other_user}", "gists_url": "https://api.github.com/users/Imperat/gists{/gist_id}", "starred_url": "https://api.github.com/users/Imperat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Imperat/subscriptions", "organizations_url": "https://api.github.com/users/Imperat/orgs", "repos_url": "https://api.github.com/users/Imperat/repos", "events_url": "https://api.github.com/users/Imperat/events{/privacy}", "received_events_url": "https://api.github.com/users/Imperat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-06T09:50:28Z", "updated_at": "2016-11-10T16:10:56Z", "closed_at": "2016-11-10T16:10:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, guys! I follow this instruction (http://django-guardian.readthedocs.io/en/stable/configuration.html) for implement django-guardian in my project.  \r\n1. I add guardian in my `INSTALLED_APPS`.\r\n2. I add this lines: \r\n```\r\nAUTHENTICATION_BACKENDS = (\r\n    'django.contrib.auth.backends.ModelBackend', # this is default\r\n    'guardian.backends.ObjectPermissionBackend',\r\n)\r\n```\r\n3. And anonimus user configuration: `ANONYMOUS_USER_ID = None`\r\n4. In admin file I was importing with this line:\r\n` from guardian.admin import GuardedModelAdmin`\r\n5. And I was make this inheritance:\r\n`class LeagueAdmin(GuardedModelAdmin):`\r\n6. I run `python manage.py migrate`\r\n7. I run server and I'm going to admin panel in list of Leagues. I see the button `objects permissions`. It's linked to http://127.0.0.1:8080/admin/teamlogic/tournament/2/change/permissions/. This is wrong link. Good link is: http://127.0.0.1:8080/admin/teamlogic/tournament/2/permissions/. I think this is a bug of django-guardian package. I check it in other project and I register a similar bug.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/466", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/466/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/466/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/466/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/466", "id": 187306184, "node_id": "MDU6SXNzdWUxODczMDYxODQ=", "number": 466, "title": "Support wheel packaging", "user": {"login": "tdruez", "id": 489057, "node_id": "MDQ6VXNlcjQ4OTA1Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/489057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tdruez", "html_url": "https://github.com/tdruez", "followers_url": "https://api.github.com/users/tdruez/followers", "following_url": "https://api.github.com/users/tdruez/following{/other_user}", "gists_url": "https://api.github.com/users/tdruez/gists{/gist_id}", "starred_url": "https://api.github.com/users/tdruez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tdruez/subscriptions", "organizations_url": "https://api.github.com/users/tdruez/orgs", "repos_url": "https://api.github.com/users/tdruez/repos", "events_url": "https://api.github.com/users/tdruez/events{/privacy}", "received_events_url": "https://api.github.com/users/tdruez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "brianmay", "id": 112729, "node_id": "MDQ6VXNlcjExMjcyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/112729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianmay", "html_url": "https://github.com/brianmay", "followers_url": "https://api.github.com/users/brianmay/followers", "following_url": "https://api.github.com/users/brianmay/following{/other_user}", "gists_url": "https://api.github.com/users/brianmay/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianmay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianmay/subscriptions", "organizations_url": "https://api.github.com/users/brianmay/orgs", "repos_url": "https://api.github.com/users/brianmay/repos", "events_url": "https://api.github.com/users/brianmay/events{/privacy}", "received_events_url": "https://api.github.com/users/brianmay/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "brianmay", "id": 112729, "node_id": "MDQ6VXNlcjExMjcyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/112729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianmay", "html_url": "https://github.com/brianmay", "followers_url": "https://api.github.com/users/brianmay/followers", "following_url": "https://api.github.com/users/brianmay/following{/other_user}", "gists_url": "https://api.github.com/users/brianmay/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianmay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianmay/subscriptions", "organizations_url": "https://api.github.com/users/brianmay/orgs", "repos_url": "https://api.github.com/users/brianmay/repos", "events_url": "https://api.github.com/users/brianmay/events{/privacy}", "received_events_url": "https://api.github.com/users/brianmay/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2016-11-04T11:04:16Z", "updated_at": "2016-11-22T12:26:22Z", "closed_at": "2016-11-21T21:52:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be nice to offer a wheel package for django-guardian releases.\r\nSee http://pythonwheels.com/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/462", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/462/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/462/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/462/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/462", "id": 178092251, "node_id": "MDU6SXNzdWUxNzgwOTIyNTE=", "number": 462, "title": "django-polymorphic questions", "user": {"login": "BenDevelopment", "id": 6674194, "node_id": "MDQ6VXNlcjY2NzQxOTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/6674194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenDevelopment", "html_url": "https://github.com/BenDevelopment", "followers_url": "https://api.github.com/users/BenDevelopment/followers", "following_url": "https://api.github.com/users/BenDevelopment/following{/other_user}", "gists_url": "https://api.github.com/users/BenDevelopment/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenDevelopment/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenDevelopment/subscriptions", "organizations_url": "https://api.github.com/users/BenDevelopment/orgs", "repos_url": "https://api.github.com/users/BenDevelopment/repos", "events_url": "https://api.github.com/users/BenDevelopment/events{/privacy}", "received_events_url": "https://api.github.com/users/BenDevelopment/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-09-20T15:23:23Z", "updated_at": "2016-09-20T19:35:56Z", "closed_at": "2016-09-20T19:35:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've seen many discussions about django-guardian use with django-polymorphic, but it's verry confusing for me.\nImagine this case:\n\n```\nclass FeedPost(PolymorphicModel):  \n    class Meta: \n        default_permissions = ('add', 'change', 'delete', 'view')  \n\n\nclass ArticleFeedPost(FeedPost):\n    class Meta: \n        default_permissions = ('add', 'change', 'delete', 'view')\n```\n\nWith django-guardian 1.4.6, when you set permisssions to ArticleFeedPost, these permissions doesn't apply to FeedPost.\nIn the doc, there is this about polymorphic objects:\nhttp://django-guardian.readthedocs.io/en/stable/configuration.html?highlight=polymorph#guardian-get-content-type\nBut there is no example describing how to use get_default_content_type.\nMy questions are (by the way, I'm sorry to ask these questions here, but I have a better chance to have a reply here than elsewhere):\n- How can we propagate permissions to \"parent\" polymorph object?\n- How can we get the guardian 1.5 version (I'm not realy familiar with django package versionning. Is the 1.5 version allready released ? When I run \"pip install --upgrade django-guardian\", pip say that 1.4.6 is the last version. Is it a good idea to upgrade manually by downloading this repo?)? \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/461", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/461/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/461/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/461", "id": 177365383, "node_id": "MDU6SXNzdWUxNzczNjUzODM=", "number": 461, "title": "Link to docs on PyPI is outdated", "user": {"login": "michael-k", "id": 152008, "node_id": "MDQ6VXNlcjE1MjAwOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/152008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michael-k", "html_url": "https://github.com/michael-k", "followers_url": "https://api.github.com/users/michael-k/followers", "following_url": "https://api.github.com/users/michael-k/following{/other_user}", "gists_url": "https://api.github.com/users/michael-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/michael-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michael-k/subscriptions", "organizations_url": "https://api.github.com/users/michael-k/orgs", "repos_url": "https://api.github.com/users/michael-k/repos", "events_url": "https://api.github.com/users/michael-k/events{/privacy}", "received_events_url": "https://api.github.com/users/michael-k/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-09-16T07:55:46Z", "updated_at": "2016-12-21T00:18:23Z", "closed_at": "2016-12-21T00:18:23Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "It points to http://pythonhosted.org/django-guardian/ twice, which has documentation for django-guardian 1.1.0 instead of https://django-guardian.readthedocs.io/en/stable/.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/456", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/456/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/456/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/456", "id": 174928313, "node_id": "MDU6SXNzdWUxNzQ5MjgzMTM=", "number": 456, "title": "PermissionListMixin need a docs", "user": {"login": "ad-m", "id": 3618479, "node_id": "MDQ6VXNlcjM2MTg0Nzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3618479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ad-m", "html_url": "https://github.com/ad-m", "followers_url": "https://api.github.com/users/ad-m/followers", "following_url": "https://api.github.com/users/ad-m/following{/other_user}", "gists_url": "https://api.github.com/users/ad-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/ad-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ad-m/subscriptions", "organizations_url": "https://api.github.com/users/ad-m/orgs", "repos_url": "https://api.github.com/users/ad-m/repos", "events_url": "https://api.github.com/users/ad-m/events{/privacy}", "received_events_url": "https://api.github.com/users/ad-m/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 54617741, "node_id": "MDU6TGFiZWw1NDYxNzc0MQ==", "url": "https://api.github.com/repos/django-guardian/django-guardian/labels/Documentation", "name": "Documentation", "color": "c7def8", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-04T02:50:10Z", "updated_at": "2016-09-04T02:53:57Z", "closed_at": "2016-09-04T02:53:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hello,\n\nIn django-guardian 1.4.5 / 1.4.6 `guardian.mixins.PermissionListMixin` was introduced. It need docs. I am unable to write a good docs to them alone.\n\n`guardian.mixins.PermissionListMixin` was filtering object which user has permission to object in the list. It's per object level. If there is no permission to object the object not occurs in the list. If no permission to any object the list is empty.\n\nGreetings,\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/455", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/455/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/455/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/455/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/455", "id": 174911021, "node_id": "MDU6SXNzdWUxNzQ5MTEwMjE=", "number": 455, "title": "user.has_perm('add_myobject') allways returns false if permission only in group", "user": {"login": "BenDevelopment", "id": 6674194, "node_id": "MDQ6VXNlcjY2NzQxOTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/6674194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenDevelopment", "html_url": "https://github.com/BenDevelopment", "followers_url": "https://api.github.com/users/BenDevelopment/followers", "following_url": "https://api.github.com/users/BenDevelopment/following{/other_user}", "gists_url": "https://api.github.com/users/BenDevelopment/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenDevelopment/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenDevelopment/subscriptions", "organizations_url": "https://api.github.com/users/BenDevelopment/orgs", "repos_url": "https://api.github.com/users/BenDevelopment/repos", "events_url": "https://api.github.com/users/BenDevelopment/events{/privacy}", "received_events_url": "https://api.github.com/users/BenDevelopment/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-09-03T18:35:31Z", "updated_at": "2016-09-03T23:26:36Z", "closed_at": "2016-09-03T20:51:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a user, my user has a group, this group has 'add_myobject' permission.\nWhy user.has_perm('add_myobject') returns allways false ? (I've double checked in my database if all the relations are correctly set and all is ok: the group have the permission and the user have the group in his groups list)\nIs there a workarround or another way to check user permissions with group \"inheritance\" ?\nI'm not using the last release version, I'm using the la version of this repository.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/454", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/454/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/454/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/454/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/454", "id": 173773752, "node_id": "MDU6SXNzdWUxNzM3NzM3NTI=", "number": 454, "title": "PermissionListMixin doesn't return 403", "user": {"login": "BenDevelopment", "id": 6674194, "node_id": "MDQ6VXNlcjY2NzQxOTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/6674194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenDevelopment", "html_url": "https://github.com/BenDevelopment", "followers_url": "https://api.github.com/users/BenDevelopment/followers", "following_url": "https://api.github.com/users/BenDevelopment/following{/other_user}", "gists_url": "https://api.github.com/users/BenDevelopment/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenDevelopment/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenDevelopment/subscriptions", "organizations_url": "https://api.github.com/users/BenDevelopment/orgs", "repos_url": "https://api.github.com/users/BenDevelopment/repos", "events_url": "https://api.github.com/users/BenDevelopment/events{/privacy}", "received_events_url": "https://api.github.com/users/BenDevelopment/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-29T13:25:29Z", "updated_at": "2016-08-29T13:59:39Z", "closed_at": "2016-08-29T13:59:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "This code allows user with no permission to consult the list :\n\nviews.py\n\n```\nclass BoxListView(PermissionListMixin, ListView):\n    model = Box\n    permission_required = ['app_name.view_box', ]\n    return_403=True\n    template_name = 'app_name/box_list.html\n```\n\nurls.py\n`url(r'^box/$', views.BoxListView.as_view(),name=\"box_list\"),`\n\nAnd this code :\n`self.request.user.has_perm('view_box')`\nreturns false.\n\nShouldn't the view returns a 403 error ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/453", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/453/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/453/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/453", "id": 173155827, "node_id": "MDU6SXNzdWUxNzMxNTU4Mjc=", "number": 453, "title": "import PermissionListMixin Fails on new installs", "user": {"login": "aswincsekar", "id": 4198397, "node_id": "MDQ6VXNlcjQxOTgzOTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4198397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aswincsekar", "html_url": "https://github.com/aswincsekar", "followers_url": "https://api.github.com/users/aswincsekar/followers", "following_url": "https://api.github.com/users/aswincsekar/following{/other_user}", "gists_url": "https://api.github.com/users/aswincsekar/gists{/gist_id}", "starred_url": "https://api.github.com/users/aswincsekar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aswincsekar/subscriptions", "organizations_url": "https://api.github.com/users/aswincsekar/orgs", "repos_url": "https://api.github.com/users/aswincsekar/repos", "events_url": "https://api.github.com/users/aswincsekar/events{/privacy}", "received_events_url": "https://api.github.com/users/aswincsekar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-08-25T09:31:20Z", "updated_at": "2016-12-21T01:30:40Z", "closed_at": "2016-12-21T01:30:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "way to reproduce the error\n\n`virtualenv env`\n`source env/bin/activate`\n`pip install django`\n`pip install django-guardian`\n`django-admin.py startproject testing .`\n\nAdd 'guardian' to INSTALLED_APPS in testing/settings.py\n\n`python manage.py shell`\n\n`import guardian`\n\nThe above code works\n\n`from guardian.mixins import PermissionRequiredMixin, PermissionListMixin`\n\nThe above code returns error `ImportError: cannot import name PermissionListMixin`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/450", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/450/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/450/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/450/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/450", "id": 171013315, "node_id": "MDU6SXNzdWUxNzEwMTMzMTU=", "number": 450, "title": "Supported version for example-project", "user": {"login": "ad-m", "id": 3618479, "node_id": "MDQ6VXNlcjM2MTg0Nzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3618479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ad-m", "html_url": "https://github.com/ad-m", "followers_url": "https://api.github.com/users/ad-m/followers", "following_url": "https://api.github.com/users/ad-m/following{/other_user}", "gists_url": "https://api.github.com/users/ad-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/ad-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ad-m/subscriptions", "organizations_url": "https://api.github.com/users/ad-m/orgs", "repos_url": "https://api.github.com/users/ad-m/repos", "events_url": "https://api.github.com/users/ad-m/events{/privacy}", "received_events_url": "https://api.github.com/users/ad-m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-13T15:20:36Z", "updated_at": "2016-08-16T23:33:24Z", "closed_at": "2016-08-16T23:33:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hello,\n\nI bit confused which version we want support in ``example_project`.\n\nexample_project fail to run on django <= 1.8 (tested on django 1.7). \nStack trace:\n\n```\nTraceback (most recent call last):\n  File \"/tmp/django-guardian/example_project/articles/tests.py\", line 27, in test_list_permitted  # My own code, doesn't matter\n    response.render()\n  File \"/tmp/django-guardian/.tox/example-py27-django17/local/lib/python2.7/site-packages/django/template/response.py\", line 103, in render\n    self.content = self.rendered_content\n  File \"/tmp/django-guardian/.tox/example-py27-django17/local/lib/python2.7/site-packages/django/template/response.py\", line 79, in rendered_content\n    context = self.resolve_context(self.context_data)\n  File \"/tmp/django-guardian/.tox/example-py27-django17/local/lib/python2.7/site-packages/django/template/response.py\", line 156, in resolve_context\n    return RequestContext(self._request, context, current_app=self._current_app)\n  File \"/tmp/django-guardian/.tox/example-py27-django17/local/lib/python2.7/site-packages/django/template/context.py\", line 208, in __init__\n    for processor in get_standard_processors() + processors:\n  File \"/tmp/django-guardian/.tox/example-py27-django17/local/lib/python2.7/site-packages/django/template/context.py\", line 186, in get_standard_processors\n    func = import_string(path)\n  File \"/tmp/django-guardian/.tox/example-py27-django17/local/lib/python2.7/site-packages/django/utils/module_loading.py\", line 26, in import_string\n    module = import_module(module_path)\n  File \"/usr/lib/python2.7/importlib/__init__.py\", line 37, in import_module\n    __import__(name)\nImportError: No module named context_processors\n```\n\n`example_project/manage.py` mention even django 1.5 as supported version\n\nI suggest support only two latest released version of django (django 1.9 and 1.10 now). `example_project` is only proof-of-concept, non-production application, so even django LTS-version support is not worth the effort.\n\nGreetings,\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/446", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/446/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/446/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/446/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/446", "id": 170813485, "node_id": "MDU6SXNzdWUxNzA4MTM0ODU=", "number": 446, "title": "Make the fact that \"django-guardian\" is actively maintained more clear", "user": {"login": "cdman", "id": 838250, "node_id": "MDQ6VXNlcjgzODI1MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/838250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdman", "html_url": "https://github.com/cdman", "followers_url": "https://api.github.com/users/cdman/followers", "following_url": "https://api.github.com/users/cdman/following{/other_user}", "gists_url": "https://api.github.com/users/cdman/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdman/subscriptions", "organizations_url": "https://api.github.com/users/cdman/orgs", "repos_url": "https://api.github.com/users/cdman/repos", "events_url": "https://api.github.com/users/cdman/events{/privacy}", "received_events_url": "https://api.github.com/users/cdman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-08-12T07:24:31Z", "updated_at": "2016-09-04T02:44:15Z", "closed_at": "2016-09-04T02:44:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nI was looking around for a row-level (object level) permission framework for Django and found django guardian through google searches and this presentations from PyCon 2016: https://www.youtube.com/watch?v=C0wuTkS93B0\n\nHowever at first I was under the impression that it isn't maintained for any longer due to:\n- the [documentation](http://django-guardian.readthedocs.io/en/latest/) saying \"Copyright 2010-2013\"\n- the [overview page](http://django-guardian.readthedocs.io/en/latest/overview.html) talking about Django 1.2\n\nFortunately I saw on DjangoPackages.org that a lot of people use it and took a second look and realized that it is in fact actively maintained and a version was released just earlier this month. A couple of small documentation changes could such misunderstandings in the future.\n\nPS. In the end I ended up going with the \"rules\" package since my use case is better suited to that (I don't need to create arbitrary links \"this-user-can-access-that-object\" but rather have clear rules like \"every user can access the objects they own\").\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/444", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/444/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/444/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/444/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/444", "id": 169822307, "node_id": "MDU6SXNzdWUxNjk4MjIzMDc=", "number": 444, "title": "admin breaks on CSRF verification in Django 1.10", "user": {"login": "rooterkyberian", "id": 637466, "node_id": "MDQ6VXNlcjYzNzQ2Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/637466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rooterkyberian", "html_url": "https://github.com/rooterkyberian", "followers_url": "https://api.github.com/users/rooterkyberian/followers", "following_url": "https://api.github.com/users/rooterkyberian/following{/other_user}", "gists_url": "https://api.github.com/users/rooterkyberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/rooterkyberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rooterkyberian/subscriptions", "organizations_url": "https://api.github.com/users/rooterkyberian/orgs", "repos_url": "https://api.github.com/users/rooterkyberian/repos", "events_url": "https://api.github.com/users/rooterkyberian/events{/privacy}", "received_events_url": "https://api.github.com/users/rooterkyberian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-07T23:28:14Z", "updated_at": "2016-08-12T10:29:14Z", "closed_at": "2016-08-12T10:29:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Due Django 1.10 changing CSRF every request one has to use `render` instead `render_to_response`\nin `guardian/admin.py`.\n\nHere is example how error showed up for me under `runserver` when I tried to edit user object permissions:\n\n```\n[07/Aug/2016 23:07:06] \"POST /admin/boards/board/114/permissions/user-manage/4/ HTTP/1.1\" 403 2502\nCENSORED/eggs/Django-1.10-py3.5.egg/django/template/defaulttags.py:65: UserWarning: A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext.\n  \"A {% csrf_token %} was used in a template, but the context \"\n[07/Aug/2016 23:07:16] \"GET /admin/boards/board/114/permissions/user-manage/4/ HTTP/1.1\" 200 3571\nForbidden (CSRF token missing or incorrect.): /admin/boards/board/114/permissions/user-manage/4/\n[07/Aug/2016 23:07:22] \"POST /admin/boards/board/114/permissions/user-manage/4/ HTTP/1.1\" 403 2502\n```\n\nPlease also note while there is no official indication `render_to_response` depreciation, such note exists in documentation of https://docs.djangoproject.com/en/1.10/topics/http/shortcuts/#render-to-response .\n\nNot sure how much other users rely on django guardian admin panel, but for me it effectively blocks Django 1.10 adaptation.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/442", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/442/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/442/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/442", "id": 169577445, "node_id": "MDU6SXNzdWUxNjk1Nzc0NDU=", "number": 442, "title": "Django 1.10 compatibility for GuardedModelAdminMixin", "user": {"login": "tdruez", "id": 489057, "node_id": "MDQ6VXNlcjQ4OTA1Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/489057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tdruez", "html_url": "https://github.com/tdruez", "followers_url": "https://api.github.com/users/tdruez/followers", "following_url": "https://api.github.com/users/tdruez/following{/other_user}", "gists_url": "https://api.github.com/users/tdruez/gists{/gist_id}", "starred_url": "https://api.github.com/users/tdruez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tdruez/subscriptions", "organizations_url": "https://api.github.com/users/tdruez/orgs", "repos_url": "https://api.github.com/users/tdruez/repos", "events_url": "https://api.github.com/users/tdruez/events{/privacy}", "received_events_url": "https://api.github.com/users/tdruez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-05T10:23:00Z", "updated_at": "2016-08-06T08:42:52Z", "closed_at": "2016-08-06T08:42:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "From https://docs.djangoproject.com/en/1.10/releases/1.10/#features-removed-in-1-10\n\n> The dictionary and context_instance parameters for the following functions are removed:\n> django.shortcuts.render()\n> django.shortcuts.render_to_response()\n> django.template.loader.render_to_string()\n\nSee also related https://github.com/django-guardian/django-guardian/issues/370\n\n`render_to_response` in\n- 1.10: https://github.com/django/django/blob/stable/1.10.x/django/shortcuts.py#L16\n- 1.9: https://github.com/django/django/blob/stable/1.9.x/django/shortcuts.py#L27\n\nThe following lines needs to be fixed in django-guardian:\n- https://github.com/django-guardian/django-guardian/blob/devel/guardian/admin.py#L217\n- https://github.com/django-guardian/django-guardian/blob/devel/guardian/admin.py#L268\n- https://github.com/django-guardian/django-guardian/blob/devel/guardian/admin.py#L341\n\nThe `RequestContext(request)` vars are provided as the `content_type` argument of the new `render_to_response` function. This breaks the rendering of the view.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/441", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/441/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/441/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/441", "id": 168517022, "node_id": "MDU6SXNzdWUxNjg1MTcwMjI=", "number": 441, "title": "Need to override UserManage class ", "user": {"login": "pk026", "id": 10496690, "node_id": "MDQ6VXNlcjEwNDk2Njkw", "avatar_url": "https://avatars3.githubusercontent.com/u/10496690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pk026", "html_url": "https://github.com/pk026", "followers_url": "https://api.github.com/users/pk026/followers", "following_url": "https://api.github.com/users/pk026/following{/other_user}", "gists_url": "https://api.github.com/users/pk026/gists{/gist_id}", "starred_url": "https://api.github.com/users/pk026/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pk026/subscriptions", "organizations_url": "https://api.github.com/users/pk026/orgs", "repos_url": "https://api.github.com/users/pk026/repos", "events_url": "https://api.github.com/users/pk026/events{/privacy}", "received_events_url": "https://api.github.com/users/pk026/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-31T13:06:48Z", "updated_at": "2016-12-21T01:23:43Z", "closed_at": "2016-12-21T01:23:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need to make user selection as drop down from User present in database in integration with django admin. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/428", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/428/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/428/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/428/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/428", "id": 154419121, "node_id": "MDU6SXNzdWUxNTQ0MTkxMjE=", "number": 428, "title": "How to represent a permission that is not tied to an object like create / new CRUD actions?", "user": {"login": "cirosantilli", "id": 1429315, "node_id": "MDQ6VXNlcjE0MjkzMTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1429315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cirosantilli", "html_url": "https://github.com/cirosantilli", "followers_url": "https://api.github.com/users/cirosantilli/followers", "following_url": "https://api.github.com/users/cirosantilli/following{/other_user}", "gists_url": "https://api.github.com/users/cirosantilli/gists{/gist_id}", "starred_url": "https://api.github.com/users/cirosantilli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cirosantilli/subscriptions", "organizations_url": "https://api.github.com/users/cirosantilli/orgs", "repos_url": "https://api.github.com/users/cirosantilli/repos", "events_url": "https://api.github.com/users/cirosantilli/events{/privacy}", "received_events_url": "https://api.github.com/users/cirosantilli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-05-12T07:53:37Z", "updated_at": "2016-05-12T08:04:19Z", "closed_at": "2016-05-12T08:04:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "E.g., for a \"create\" CRUD action, you don't have the object yet.\n\nCan Guardian represent this? How? Can I write something like:\n\n```\nrequest.user.has_perm('new_article')\n```\n\nwithout the obejct?\n\nI think the Django permissions can deal with this... but I'd rather have a Guardian method for uniformity.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/426", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/426/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/426/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/426", "id": 153767914, "node_id": "MDU6SXNzdWUxNTM3Njc5MTQ=", "number": 426, "title": "prefetch_perms caching incorrect for object without perms", "user": {"login": "pgeez", "id": 1369475, "node_id": "MDQ6VXNlcjEzNjk0NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1369475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pgeez", "html_url": "https://github.com/pgeez", "followers_url": "https://api.github.com/users/pgeez/followers", "following_url": "https://api.github.com/users/pgeez/following{/other_user}", "gists_url": "https://api.github.com/users/pgeez/gists{/gist_id}", "starred_url": "https://api.github.com/users/pgeez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pgeez/subscriptions", "organizations_url": "https://api.github.com/users/pgeez/orgs", "repos_url": "https://api.github.com/users/pgeez/repos", "events_url": "https://api.github.com/users/pgeez/events{/privacy}", "received_events_url": "https://api.github.com/users/pgeez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-09T12:45:05Z", "updated_at": "2016-05-14T08:50:09Z", "closed_at": "2016-05-14T08:50:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`prefetch_perms` will only cache objects in the ObjectPermissionChecker's `_obj_perms_cache` if a Permission exists for that object.\n\nsee: https://github.com/django-guardian/django-guardian/blob/devel/guardian/core.py#L252-L261\n\nTherefore, if I call `prefetch_perms` on an object `foo` for which I _do not_ have any permissions, successive calls to `has_perm(\"some_perm\", foo)` will result in additional DB queries.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/425", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/425/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/425/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/425/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/425", "id": 153504809, "node_id": "MDU6SXNzdWUxNTM1MDQ4MDk=", "number": 425, "title": "Incompatible setup_requires setting in setup.py", "user": {"login": "jcmcken", "id": 1117819, "node_id": "MDQ6VXNlcjExMTc4MTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1117819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmcken", "html_url": "https://github.com/jcmcken", "followers_url": "https://api.github.com/users/jcmcken/followers", "following_url": "https://api.github.com/users/jcmcken/following{/other_user}", "gists_url": "https://api.github.com/users/jcmcken/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmcken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmcken/subscriptions", "organizations_url": "https://api.github.com/users/jcmcken/orgs", "repos_url": "https://api.github.com/users/jcmcken/repos", "events_url": "https://api.github.com/users/jcmcken/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmcken/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 286067604, "node_id": "MDU6TGFiZWwyODYwNjc2MDQ=", "url": "https://api.github.com/repos/django-guardian/django-guardian/labels/moreinfo", "name": "moreinfo", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-05-06T17:54:44Z", "updated_at": "2016-05-14T08:43:32Z", "closed_at": "2016-05-14T08:43:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "As it stands, the `setup_requires` setting in `setup` is largely incompatible with how `pip` handles dependency resolution when performing installations. See pypa/pip#1820, pypa/pip#769, pypa/pip#410. While there are some suggested workarounds and hacks to get it to work, they may or may not work depending on exactly how you're doing the installation.\n\nFrom what I can tell, these setup dependencies are just used to write out the version file, and so it would seem to be a pretty simple alternative to just do that explicitly without any setup dependencies. What do you think?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/423", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/423/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/423/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/423", "id": 150979358, "node_id": "MDU6SXNzdWUxNTA5NzkzNTg=", "number": 423, "title": "Django should not be in setup.py's install_requires", "user": {"login": "crccheck", "id": 189908, "node_id": "MDQ6VXNlcjE4OTkwOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/189908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crccheck", "html_url": "https://github.com/crccheck", "followers_url": "https://api.github.com/users/crccheck/followers", "following_url": "https://api.github.com/users/crccheck/following{/other_user}", "gists_url": "https://api.github.com/users/crccheck/gists{/gist_id}", "starred_url": "https://api.github.com/users/crccheck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crccheck/subscriptions", "organizations_url": "https://api.github.com/users/crccheck/orgs", "repos_url": "https://api.github.com/users/crccheck/repos", "events_url": "https://api.github.com/users/crccheck/events{/privacy}", "received_events_url": "https://api.github.com/users/crccheck/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 286067604, "node_id": "MDU6TGFiZWwyODYwNjc2MDQ=", "url": "https://api.github.com/repos/django-guardian/django-guardian/labels/moreinfo", "name": "moreinfo", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-04-25T21:00:08Z", "updated_at": "2016-09-07T08:42:38Z", "closed_at": "2016-05-14T08:44:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "If someone is installing django-guardian, it's safe to assume they have Django installed already. Putting Django in `install_requires` ends up causing more problem than it solves because of unexpected Django upgrades.\n\nSimilar discussion: https://github.com/caioariede/django-location-field/issues/47\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/422", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/422/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/422/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/422", "id": 149690526, "node_id": "MDU6SXNzdWUxNDk2OTA1MjY=", "number": 422, "title": "The removal of ANONYMOUS_USER_ID can brake code", "user": {"login": "frwickst", "id": 3242350, "node_id": "MDQ6VXNlcjMyNDIzNTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3242350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frwickst", "html_url": "https://github.com/frwickst", "followers_url": "https://api.github.com/users/frwickst/followers", "following_url": "https://api.github.com/users/frwickst/following{/other_user}", "gists_url": "https://api.github.com/users/frwickst/gists{/gist_id}", "starred_url": "https://api.github.com/users/frwickst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frwickst/subscriptions", "organizations_url": "https://api.github.com/users/frwickst/orgs", "repos_url": "https://api.github.com/users/frwickst/repos", "events_url": "https://api.github.com/users/frwickst/events{/privacy}", "received_events_url": "https://api.github.com/users/frwickst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-20T07:57:46Z", "updated_at": "2016-04-21T00:51:37Z", "closed_at": "2016-04-21T00:51:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I just upgraded from 1.4.1 to 1.4.4 and found myself with some errors when I ran my tests.\n\nSince I thought that this was a minor patch release (only bumping Y in x.x.Y) I upgraded first, ran the tests and then read the change notes. After reading the changes I noticed that you guys have removed `ANONYMOUS_USER_ID` in 1.4.2. Instead you use `ANONYMOUS_USER_NAME` (not `ANONYMOUS_DEFAULT_USERNAME` as stated in the change log) and then look up the `USERNAME_FIELD` of a model.\n\nMy test errors was that I was getting an anonymous user back in my results. The problem being that I no longer had a user with ID = -1, something that had been created for me since I had configured django-guardian with `ANONYMOUS_USER_ID = -1`. My query looked something like this get_user_model().objects.filter(id__gt=-1), something that no longer worked, since no user with and ID set to -1 was available any longer. The anonymous user will not get an ID of 1 (or whatever ID is set to be the first auto increment number).\n\nSo now I have a production server running where I have a user with ID = -1, but when running tests or running a new dev database there is no such user.\n\nOk, I can change my code to `.exclude(<USERNAME_FIELD>='AnonymousUser')` and that would solve my problem. But I will still be left with a user that has id -1 in production and one with (most likely) 1 in dev/tests. And what about migrations? It kinda sucks that I will now need to go back and change data migrations (where I use `.filter(id__gt=-1)`).\n\nThe idea behind the change:\n\n> ...the database is free to pick an appropriate id that doesn't clash.\n\nis probably a nice thought but by letting the database choose its own ids, you ended up breaking existing code.\n\nI think that this change was breaking and the version should have been 1.5.0 not 1.4.2. \n\nThe changes are made and I have a feeling they will stay that way and will just have to change my own code, but I just wanted to let you know that this was not just as simple as changing a line in the settings file.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/420", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/420/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/420/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/420/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/420", "id": 146052609, "node_id": "MDU6SXNzdWUxNDYwNTI2MDk=", "number": 420, "title": "Installation uninstalls existing Django version and installs 1.9.5", "user": {"login": "holyoaks", "id": 5797525, "node_id": "MDQ6VXNlcjU3OTc1MjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/5797525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/holyoaks", "html_url": "https://github.com/holyoaks", "followers_url": "https://api.github.com/users/holyoaks/followers", "following_url": "https://api.github.com/users/holyoaks/following{/other_user}", "gists_url": "https://api.github.com/users/holyoaks/gists{/gist_id}", "starred_url": "https://api.github.com/users/holyoaks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/holyoaks/subscriptions", "organizations_url": "https://api.github.com/users/holyoaks/orgs", "repos_url": "https://api.github.com/users/holyoaks/repos", "events_url": "https://api.github.com/users/holyoaks/events{/privacy}", "received_events_url": "https://api.github.com/users/holyoaks/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 286067604, "node_id": "MDU6TGFiZWwyODYwNjc2MDQ=", "url": "https://api.github.com/repos/django-guardian/django-guardian/labels/moreinfo", "name": "moreinfo", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-04-05T17:14:26Z", "updated_at": "2016-04-16T06:09:19Z", "closed_at": "2016-04-16T06:09:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "pip install django-guardian downloads the .whl file and that seems to be set to django == 1.9.5, instead of django >= \"minimum django version supported\". We have not migrated to Django 1.9 yet, and so we have to install django-guardian, then uninstall django 1.9.5, and then reinstall django 1.8.12. Minor issue, but annoying\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/417", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/417/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/417/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/417/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/417", "id": 144977442, "node_id": "MDU6SXNzdWUxNDQ5Nzc0NDI=", "number": 417, "title": "Update title regarding Django 1.2+", "user": {"login": "adamn", "id": 62154, "node_id": "MDQ6VXNlcjYyMTU0", "avatar_url": "https://avatars2.githubusercontent.com/u/62154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamn", "html_url": "https://github.com/adamn", "followers_url": "https://api.github.com/users/adamn/followers", "following_url": "https://api.github.com/users/adamn/following{/other_user}", "gists_url": "https://api.github.com/users/adamn/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamn/subscriptions", "organizations_url": "https://api.github.com/users/adamn/orgs", "repos_url": "https://api.github.com/users/adamn/repos", "events_url": "https://api.github.com/users/adamn/events{/privacy}", "received_events_url": "https://api.github.com/users/adamn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-31T18:14:07Z", "updated_at": "2016-04-01T02:35:49Z", "closed_at": "2016-04-01T02:35:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The current title, \"Implementation of per object permissions for Django 1.2+\" makes this project seem outdated.  Maybe change it to \"Implementation of per object permissions for Django\" or better \"Per-object permissions for Django\".\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/416", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/416/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/416/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/416/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/416", "id": 144611301, "node_id": "MDU6SXNzdWUxNDQ2MTEzMDE=", "number": 416, "title": "error using with django 1.9", "user": {"login": "auvipy", "id": 6212603, "node_id": "MDQ6VXNlcjYyMTI2MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6212603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/auvipy", "html_url": "https://github.com/auvipy", "followers_url": "https://api.github.com/users/auvipy/followers", "following_url": "https://api.github.com/users/auvipy/following{/other_user}", "gists_url": "https://api.github.com/users/auvipy/gists{/gist_id}", "starred_url": "https://api.github.com/users/auvipy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/auvipy/subscriptions", "organizations_url": "https://api.github.com/users/auvipy/orgs", "repos_url": "https://api.github.com/users/auvipy/repos", "events_url": "https://api.github.com/users/auvipy/events{/privacy}", "received_events_url": "https://api.github.com/users/auvipy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-03-30T14:33:35Z", "updated_at": "2016-03-31T05:10:57Z", "closed_at": "2016-03-31T05:10:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "File \"/home/travis/build/chibisov/drf-extensions/.tox/django.1.9/lib/python3.4/site-packages/guardian/management/**init**.py\", line 46, in <module>\n    signals.post_syncdb.connect(create_anonymous_user, sender=guardian_app,\nAttributeError: 'module' object has no attribute 'post_syncdb'\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/411", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/411/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/411/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/411/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/411", "id": 139958349, "node_id": "MDU6SXNzdWUxMzk5NTgzNDk=", "number": 411, "title": "guardian.VERSION returns a list instead of a tuple", "user": {"login": "MadWombat", "id": 242806, "node_id": "MDQ6VXNlcjI0MjgwNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/242806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MadWombat", "html_url": "https://github.com/MadWombat", "followers_url": "https://api.github.com/users/MadWombat/followers", "following_url": "https://api.github.com/users/MadWombat/following{/other_user}", "gists_url": "https://api.github.com/users/MadWombat/gists{/gist_id}", "starred_url": "https://api.github.com/users/MadWombat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MadWombat/subscriptions", "organizations_url": "https://api.github.com/users/MadWombat/orgs", "repos_url": "https://api.github.com/users/MadWombat/repos", "events_url": "https://api.github.com/users/MadWombat/events{/privacy}", "received_events_url": "https://api.github.com/users/MadWombat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-10T17:28:23Z", "updated_at": "2016-04-03T01:38:28Z", "closed_at": "2016-03-10T23:43:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "This seems to break version checking, at least in django rest framework, with\n\n```\n  File \"/usr/local/lib/python3.4/site-packages/rest_framework/filters.py\", line 309, in filter_queryset\n    if guardian.VERSION >= (1, 3):\nTypeError: unorderable types: list() >= tuple()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/409", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/409/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/409/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/409/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/409", "id": 139598450, "node_id": "MDU6SXNzdWUxMzk1OTg0NTA=", "number": 409, "title": "ANONYMOUS_USER_NAME None value", "user": {"login": "AGASS007", "id": 2004696, "node_id": "MDQ6VXNlcjIwMDQ2OTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2004696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AGASS007", "html_url": "https://github.com/AGASS007", "followers_url": "https://api.github.com/users/AGASS007/followers", "following_url": "https://api.github.com/users/AGASS007/following{/other_user}", "gists_url": "https://api.github.com/users/AGASS007/gists{/gist_id}", "starred_url": "https://api.github.com/users/AGASS007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AGASS007/subscriptions", "organizations_url": "https://api.github.com/users/AGASS007/orgs", "repos_url": "https://api.github.com/users/AGASS007/repos", "events_url": "https://api.github.com/users/AGASS007/events{/privacy}", "received_events_url": "https://api.github.com/users/AGASS007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 38756, "node_id": "MDU6TGFiZWwzODc1Ng==", "url": "https://api.github.com/repos/django-guardian/django-guardian/labels/Bug", "name": "Bug", "color": "cf0000", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-03-09T14:53:15Z", "updated_at": "2016-03-17T22:26:39Z", "closed_at": "2016-03-17T22:23:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Am I missing something or with this [line](https://github.com/django-guardian/django-guardian/blob/v1.4.2/guardian/conf/settings.py#L14) in `guardian.conf.settings`\n\n``` python\nif ANONYMOUS_USER_NAME is None:\n    ANONYMOUS_USER_NAME = 'AnonymousUser'\n```\n\nANONYMOUS_USER_NAME cannot ever be equal to None, thus voiding the fact that it is supposed to optional. Looks to me that this was not desired.\n\nCheers\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/405", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/405/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/405/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/405/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/405", "id": 136424683, "node_id": "MDU6SXNzdWUxMzY0MjQ2ODM=", "number": 405, "title": "remove_perm doesn't work", "user": {"login": "bodgerbarnett", "id": 1990439, "node_id": "MDQ6VXNlcjE5OTA0Mzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1990439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bodgerbarnett", "html_url": "https://github.com/bodgerbarnett", "followers_url": "https://api.github.com/users/bodgerbarnett/followers", "following_url": "https://api.github.com/users/bodgerbarnett/following{/other_user}", "gists_url": "https://api.github.com/users/bodgerbarnett/gists{/gist_id}", "starred_url": "https://api.github.com/users/bodgerbarnett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bodgerbarnett/subscriptions", "organizations_url": "https://api.github.com/users/bodgerbarnett/orgs", "repos_url": "https://api.github.com/users/bodgerbarnett/repos", "events_url": "https://api.github.com/users/bodgerbarnett/events{/privacy}", "received_events_url": "https://api.github.com/users/bodgerbarnett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-02-25T15:42:12Z", "updated_at": "2016-02-25T16:03:49Z", "closed_at": "2016-02-25T16:03:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm sure remove_perm used to work but I now get the following, which seems to suggest that it's not working.\n\n> > > joe=User.objects.get(first_name='joe')\n> > > site = Site.objects.get_current()\n> > > joe.has_perm('change_site', site)\n> > > True\n> > > from guardian.shortcuts import remove_perm\n> > > remove_perm('change_site', joe, site)\n> > > joe.has_perm('change_site', site)\n> > > True\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/404", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/404/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/404/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/404/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/404", "id": 136292424, "node_id": "MDU6SXNzdWUxMzYyOTI0MjQ=", "number": 404, "title": "Documentation is missing styles", "user": {"login": "mitar", "id": 585279, "node_id": "MDQ6VXNlcjU4NTI3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitar", "html_url": "https://github.com/mitar", "followers_url": "https://api.github.com/users/mitar/followers", "following_url": "https://api.github.com/users/mitar/following{/other_user}", "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitar/subscriptions", "organizations_url": "https://api.github.com/users/mitar/orgs", "repos_url": "https://api.github.com/users/mitar/repos", "events_url": "https://api.github.com/users/mitar/events{/privacy}", "received_events_url": "https://api.github.com/users/mitar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 38756, "node_id": "MDU6TGFiZWwzODc1Ng==", "url": "https://api.github.com/repos/django-guardian/django-guardian/labels/Bug", "name": "Bug", "color": "cf0000", "default": false, "description": null}, {"id": 54617741, "node_id": "MDU6TGFiZWw1NDYxNzc0MQ==", "url": "https://api.github.com/repos/django-guardian/django-guardian/labels/Documentation", "name": "Documentation", "color": "c7def8", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-02-25T06:10:46Z", "updated_at": "2016-03-09T02:45:11Z", "closed_at": "2016-03-09T02:45:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://django-guardian.readthedocs.org/en/stable/\n\nIn Firefox and Chrome.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/399", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/399/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/399/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/399/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/399", "id": 135195490, "node_id": "MDU6SXNzdWUxMzUxOTU0OTA=", "number": 399, "title": "Cannot create Anonymous user when using a custom user model", "user": {"login": "rhblind", "id": 1574295, "node_id": "MDQ6VXNlcjE1NzQyOTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1574295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhblind", "html_url": "https://github.com/rhblind", "followers_url": "https://api.github.com/users/rhblind/followers", "following_url": "https://api.github.com/users/rhblind/following{/other_user}", "gists_url": "https://api.github.com/users/rhblind/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhblind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhblind/subscriptions", "organizations_url": "https://api.github.com/users/rhblind/orgs", "repos_url": "https://api.github.com/users/rhblind/repos", "events_url": "https://api.github.com/users/rhblind/events{/privacy}", "received_events_url": "https://api.github.com/users/rhblind/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-02-21T11:42:33Z", "updated_at": "2016-02-22T06:12:41Z", "closed_at": "2016-02-22T06:12:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If using a custom user model with no `username` attribute, creation of the `AnonymousUser` will fail.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/398", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/398/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/398/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/398/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/398", "id": 134518226, "node_id": "MDU6SXNzdWUxMzQ1MTgyMjY=", "number": 398, "title": "Trouble with django-guardian.readthedocs", "user": {"login": "dmitryTsatsarin", "id": 2017590, "node_id": "MDQ6VXNlcjIwMTc1OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/2017590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmitryTsatsarin", "html_url": "https://github.com/dmitryTsatsarin", "followers_url": "https://api.github.com/users/dmitryTsatsarin/followers", "following_url": "https://api.github.com/users/dmitryTsatsarin/following{/other_user}", "gists_url": "https://api.github.com/users/dmitryTsatsarin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmitryTsatsarin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmitryTsatsarin/subscriptions", "organizations_url": "https://api.github.com/users/dmitryTsatsarin/orgs", "repos_url": "https://api.github.com/users/dmitryTsatsarin/repos", "events_url": "https://api.github.com/users/dmitryTsatsarin/events{/privacy}", "received_events_url": "https://api.github.com/users/dmitryTsatsarin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-02-18T08:57:57Z", "updated_at": "2016-02-21T01:14:08Z", "closed_at": "2016-02-21T01:14:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trouble with readthedocs\nhttp://dl.dropbox.com/u/13258686/%D0%92%D1%8B%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_028.png\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/397", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/397/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/397/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/397/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/397", "id": 134412076, "node_id": "MDU6SXNzdWUxMzQ0MTIwNzY=", "number": 397, "title": "CSS doesn't load in the latest and stable docs", "user": {"login": "MadWombat", "id": 242806, "node_id": "MDQ6VXNlcjI0MjgwNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/242806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MadWombat", "html_url": "https://github.com/MadWombat", "followers_url": "https://api.github.com/users/MadWombat/followers", "following_url": "https://api.github.com/users/MadWombat/following{/other_user}", "gists_url": "https://api.github.com/users/MadWombat/gists{/gist_id}", "starred_url": "https://api.github.com/users/MadWombat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MadWombat/subscriptions", "organizations_url": "https://api.github.com/users/MadWombat/orgs", "repos_url": "https://api.github.com/users/MadWombat/repos", "events_url": "https://api.github.com/users/MadWombat/events{/privacy}", "received_events_url": "https://api.github.com/users/MadWombat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-02-17T21:56:09Z", "updated_at": "2016-02-25T01:54:48Z", "closed_at": "2016-02-21T01:14:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Doc pages load without styles even though CSS files load.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/394", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/394/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/394/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/394/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/394", "id": 132194477, "node_id": "MDU6SXNzdWUxMzIxOTQ0Nzc=", "number": 394, "title": "Type Error changing instance permission for object from admin in mysql", "user": {"login": "caupetit", "id": 7645584, "node_id": "MDQ6VXNlcjc2NDU1ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/7645584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caupetit", "html_url": "https://github.com/caupetit", "followers_url": "https://api.github.com/users/caupetit/followers", "following_url": "https://api.github.com/users/caupetit/following{/other_user}", "gists_url": "https://api.github.com/users/caupetit/gists{/gist_id}", "starred_url": "https://api.github.com/users/caupetit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caupetit/subscriptions", "organizations_url": "https://api.github.com/users/caupetit/orgs", "repos_url": "https://api.github.com/users/caupetit/repos", "events_url": "https://api.github.com/users/caupetit/events{/privacy}", "received_events_url": "https://api.github.com/users/caupetit/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 286067604, "node_id": "MDU6TGFiZWwyODYwNjc2MDQ=", "url": "https://api.github.com/repos/django-guardian/django-guardian/labels/moreinfo", "name": "moreinfo", "color": "f7c6c7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-02-08T16:46:45Z", "updated_at": "2016-02-11T00:14:13Z", "closed_at": "2016-02-11T00:14:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\n\nGot a bug with mariadb (django mysql) that i do not got under postgresql\n\ni'm using django 1.9, guardian 1.4.1\n\ni got a model:\n\n```\n\nclass Document(TranslatableModel):\n    category = models.ForeignKey(DocumentCategory)\n\n    translations = TranslatedFields(\n            name=models.CharField(max_length=100, null=True),\n            description=models.CharField(max_length=255, null=True, blank=True),\n            file=models.FileField(null=True, blank=True)\n    )\n\n    class Meta:\n        permissions = (\n            ('view_document', 'Can view document'),\n        )\n\n    def get_best_traduction(self):\n        traduction = self.lazy_translation_getter('name', str(self.pk))\n        if not traduction:\n            return None\n        return self\n\n    def __str__(self):\n        return self.lazy_translation_getter('name', str(self.pk)) or self.__class__.__name__ + str(self.pk)\n\n    def __unicode__(self):\n        return self.__str__()\n```\n\nI'm trying to set 'view_permission' and no other one (add etc) for a group to an instance of Document from admin panel.\n\nunder postgres all ok but swithing to mariadb i got this:\n\n```\nTypeError at /fr/admin/dispenser/document/2/permissions/group-manage/2/\nunsupported operand type(s) for +=: 'int' and 'NoneType'\nRequest Method: POST\nRequest URL:    http://127.0.0.1:8082/fr/admin/dispenser/document/2/permissions/group-manage/2/\nDjango Version: 1.9\nException Type: TypeError\nException Value:    \nunsupported operand type(s) for +=: 'int' and 'NoneType'\nException Location: /home/online-dev/shared/app/env/lib/python2.7/site-packages/django/db/models/deletion.py in delete, line 293\nPython Executable:  /home/online-dev/shared/app/env/bin/python\nPython Version: 2.7.10\nPython Path:    \n['/home/online-dev/shared/app/src',\n '/home/online-dev/shared/app/env/lib/python27.zip',\n '/home/online-dev/shared/app/env/lib/python2.7',\n '/home/online-dev/shared/app/env/lib/python2.7/plat-linux2',\n '/home/online-dev/shared/app/env/lib/python2.7/lib-tk',\n '/home/online-dev/shared/app/env/lib/python2.7/lib-old',\n '/home/online-dev/shared/app/env/lib/python2.7/lib-dynload',\n '/usr/local/lib/python2.7',\n '/usr/local/lib/python2.7/plat-linux2',\n '/usr/local/lib/python2.7/lib-tk',\n '/home/online-dev/shared/app/env/lib/python2.7/site-packages']\nServer time:    lun, 8 F\u00e9v 2016 15:49:48 +0000\nTraceback Switch to copy-and-paste view\n\n/home/online-dev/shared/app/env/lib/python2.7/site-packages/django/core/handlers/base.py in get_response\n                    response = self.process_exception_by_middleware(e, request) ...\n/home/online-dev/shared/app/env/lib/python2.7/site-packages/django/core/handlers/base.py in get_response\n                    response = wrapped_callback(request, *callback_args, **callback_kwargs) ...\n\n/home/online-dev/shared/app/env/lib/python2.7/site-packages/django/utils/decorators.py in _wrapped_view\n                    response = view_func(request, *args, **kwargs) ...\n\n/home/online-dev/shared/app/env/lib/python2.7/site-packages/django/views/decorators/cache.py in _wrapped_view_func\n        response = view_func(request, *args, **kwargs) ...\n\n/home/online-dev/shared/app/env/lib/python2.7/site-packages/django/contrib/admin/sites.py in inner\n            return view(request, *args, **kwargs) ...\n\n/home/online-dev/shared/app/env/lib/python2.7/site-packages/guardian/admin.py in obj_perms_manage_group_view\n            form.save_obj_perms() ...\n\n/home/online-dev/shared/app/env/lib/python2.7/site-packages/guardian/forms.py in save_obj_perms\n            remove_perm(perm, self.group, self.obj) ...\n\n/home/online-dev/shared/app/env/lib/python2.7/site-packages/guardian/shortcuts.py in remove_perm\n        model.objects.remove_perm(perm, group, obj) ...\n\n/home/online-dev/shared/app/env/lib/python2.7/site-packages/guardian/managers.py in remove_perm\n        self.filter(**filters).delete() ...\n\n/home/online-dev/shared/app/env/lib/python2.7/site-packages/django/db/models/query.py in delete\n        deleted, _rows_count = collector.delete() ...\n\n/home/online-dev/shared/app/env/lib/python2.7/site-packages/django/db/models/deletion.py in delete\n                deleted_counter[qs.model._meta.label] += count ...\n```\n\nI could fix it by changing:\n\n```\nguardian/forms.py \n\nline 186:\nmodel_perms = [c[0] for c in self.get_obj_perms_field_choices()]\nto :\nmodel_perms = [c[0] for c in self.get_obj_perms_field_initial()]\n```\n\ni think it come from trying to delete global object permissions for group instead of current instance permissions, but can't figure out why all works with postgres.\n\nIf this is an issue and not a mistake from me, same thing happens for user permission (line 139)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/393", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/393/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/393/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/393/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/393", "id": 131416507, "node_id": "MDU6SXNzdWUxMzE0MTY1MDc=", "number": 393, "title": "Runtime warning shouldn't display for anonymous_user_id setting when set to None", "user": {"login": "bzmw", "id": 645758, "node_id": "MDQ6VXNlcjY0NTc1OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/645758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzmw", "html_url": "https://github.com/bzmw", "followers_url": "https://api.github.com/users/bzmw/followers", "following_url": "https://api.github.com/users/bzmw/following{/other_user}", "gists_url": "https://api.github.com/users/bzmw/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzmw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzmw/subscriptions", "organizations_url": "https://api.github.com/users/bzmw/orgs", "repos_url": "https://api.github.com/users/bzmw/repos", "events_url": "https://api.github.com/users/bzmw/events{/privacy}", "received_events_url": "https://api.github.com/users/bzmw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-02-04T17:21:38Z", "updated_at": "2016-02-09T06:14:26Z", "closed_at": "2016-02-09T06:14:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n?: (guardian.W002) No anonymous user ID is defined. Guardian supports anonymous user object permissions, therefore this needs to be specified in settings: `ANONYMOUS_USER_ID = -1`.\n```\n\nThis error shows up if `ANONYMOUS_USER_ID = None`\nBut in the documentation if it's set to `None` then I am disabling the anonymous user object permissions.\n\nThis warning shouldn't show if its set to None.\n\nLooks like this was introduced here: https://github.com/django-guardian/django-guardian/commit/0991c488d7f22fe72ad8bb53ca9c13431858cb67\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/392", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/392/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/392/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/392/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/392", "id": 127620679, "node_id": "MDU6SXNzdWUxMjc2MjA2Nzk=", "number": 392, "title": "ImportError guardian: cannot import name register", "user": {"login": "maikkma", "id": 16793128, "node_id": "MDQ6VXNlcjE2NzkzMTI4", "avatar_url": "https://avatars3.githubusercontent.com/u/16793128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maikkma", "html_url": "https://github.com/maikkma", "followers_url": "https://api.github.com/users/maikkma/followers", "following_url": "https://api.github.com/users/maikkma/following{/other_user}", "gists_url": "https://api.github.com/users/maikkma/gists{/gist_id}", "starred_url": "https://api.github.com/users/maikkma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maikkma/subscriptions", "organizations_url": "https://api.github.com/users/maikkma/orgs", "repos_url": "https://api.github.com/users/maikkma/repos", "events_url": "https://api.github.com/users/maikkma/events{/privacy}", "received_events_url": "https://api.github.com/users/maikkma/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-01-20T07:15:45Z", "updated_at": "2016-01-20T09:19:35Z", "closed_at": "2016-01-20T09:19:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get this error when django loads all applications. \nRequested: /srv/www/maikkma/targetor/env/bin/python /srv/www/maikkma/targetor/manage.py migrate --all --no-initial-data --settings=settings.local_settings\n\nenv/local/lib/python2.7/site-packages/django/template/loaders/app_directories.py\", line 25\nCODE:\nfrom django.conf import settings\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.template.base import TemplateDoesNotExist\nfrom django.template.loader import BaseLoader\nfrom django.utils._os import safe_join\nfrom django.utils.importlib import import_module\nfrom django.utils import six\n\nif six.PY2:\n    fs_encoding = sys.getfilesystemencoding() or sys.getdefaultencoding()\napp_template_dirs = []\nfor app in settings.INSTALLED_APPS:\n    try:\n        mod = import_module(app)\n    except ImportError as e:\n        raise ImproperlyConfigured('ImportError %s: %s' % (app, e.args[0]))\n\nSo, I think this register is django admin module? Somehow this import_module(app) will fail? What might be wrong? This issue come out with 19.12.2015 update.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django-guardian/django-guardian/issues/390", "repository_url": "https://api.github.com/repos/django-guardian/django-guardian", "labels_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/390/labels{/name}", "comments_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/390/comments", "events_url": "https://api.github.com/repos/django-guardian/django-guardian/issues/390/events", "html_url": "https://github.com/django-guardian/django-guardian/issues/390", "id": 125815108, "node_id": "MDU6SXNzdWUxMjU4MTUxMDg=", "number": 390, "title": "Maximum line length", "user": {"login": "ad-m", "id": 3618479, "node_id": "MDQ6VXNlcjM2MTg0Nzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3618479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ad-m", "html_url": "https://github.com/ad-m", "followers_url": "https://api.github.com/users/ad-m/followers", "following_url": "https://api.github.com/users/ad-m/following{/other_user}", "gists_url": "https://api.github.com/users/ad-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/ad-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ad-m/subscriptions", "organizations_url": "https://api.github.com/users/ad-m/orgs", "repos_url": "https://api.github.com/users/ad-m/repos", "events_url": "https://api.github.com/users/ad-m/events{/privacy}", "received_events_url": "https://api.github.com/users/ad-m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-10T11:45:51Z", "updated_at": "2016-01-12T01:59:54Z", "closed_at": "2016-01-12T01:59:54Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hello,\n\nI would like ask about preferred max line height for this project? Is is very controversial question sometime, but it is important to choose, because I am going to prepare some PEP8 fixes. I do not see consistent rules in the project. \n\nI propose to adopt a decision package maintainer without repeating the discussion.\n\nGreetings,\n", "performed_via_github_app": null, "score": 1.0}]}