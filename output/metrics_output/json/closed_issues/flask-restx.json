{"total_count": 58, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/python-restx/flask-restx/issues/203", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/203/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/203/events", "html_url": "https://github.com/python-restx/flask-restx/issues/203", "id": 678720487, "node_id": "MDU6SXNzdWU2Nzg3MjA0ODc=", "number": 203, "title": "Get list of all Swagger UI Endpoints?", "user": {"login": "CalebM1987", "id": 6826046, "node_id": "MDQ6VXNlcjY4MjYwNDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6826046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CalebM1987", "html_url": "https://github.com/CalebM1987", "followers_url": "https://api.github.com/users/CalebM1987/followers", "following_url": "https://api.github.com/users/CalebM1987/following{/other_user}", "gists_url": "https://api.github.com/users/CalebM1987/gists{/gist_id}", "starred_url": "https://api.github.com/users/CalebM1987/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CalebM1987/subscriptions", "organizations_url": "https://api.github.com/users/CalebM1987/orgs", "repos_url": "https://api.github.com/users/CalebM1987/repos", "events_url": "https://api.github.com/users/CalebM1987/events{/privacy}", "received_events_url": "https://api.github.com/users/CalebM1987/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-13T20:39:37Z", "updated_at": "2020-08-14T18:38:31Z", "closed_at": "2020-08-14T18:38:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "For our Flask Apps, we usually are creating several different blueprints.  Recently, we have integrated `flask_restx` so we can add documentation.  As part of the REST API's we are creating, it would be nice to dynamically get all the Swagger UI endpoints (registered namespaces) so I can make a directory to point to the help for each blueprint.  I know I can manually register a list of these and use that, but is there any way to do this programmatically so we can dynamically load all the locations of Swagger help at runtime?\r\n\r\nWe are hoping to be able to glean this from the `app.config` or some other way that is easily accessible if `flask_restx` maintains a registry of these internally.  Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/190", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/190/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/190/events", "html_url": "https://github.com/python-restx/flask-restx/issues/190", "id": 671902850, "node_id": "MDU6SXNzdWU2NzE5MDI4NTA=", "number": 190, "title": "When using namespaces for scaling a project, how to deal with singleton namespaces?", "user": {"login": "CMCDragonkai", "id": 640797, "node_id": "MDQ6VXNlcjY0MDc5Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/640797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CMCDragonkai", "html_url": "https://github.com/CMCDragonkai", "followers_url": "https://api.github.com/users/CMCDragonkai/followers", "following_url": "https://api.github.com/users/CMCDragonkai/following{/other_user}", "gists_url": "https://api.github.com/users/CMCDragonkai/gists{/gist_id}", "starred_url": "https://api.github.com/users/CMCDragonkai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CMCDragonkai/subscriptions", "organizations_url": "https://api.github.com/users/CMCDragonkai/orgs", "repos_url": "https://api.github.com/users/CMCDragonkai/repos", "events_url": "https://api.github.com/users/CMCDragonkai/events{/privacy}", "received_events_url": "https://api.github.com/users/CMCDragonkai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-03T08:34:36Z", "updated_at": "2020-08-05T03:17:09Z", "closed_at": "2020-08-05T03:16:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a resource that is not meant to be part of any collection. It's just a resource by itself.\r\n\r\nIn the https://flask-restx.readthedocs.io/en/latest/scaling.html it mentions the usage of namespaces.\r\n\r\nDo singleton namespaces make sense?\r\n\r\nRight now I'm noticing that my singleton namespaces results in a redirect for `/resource` to `/resource/`.\r\n\r\nIf I change to just exporting the resource. Then I have to know whether something is a resource or not when I use `api.add_namespace` or `api.add_resource`. This seems rather clunky.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/176", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/176/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/176/events", "html_url": "https://github.com/python-restx/flask-restx/issues/176", "id": 661781189, "node_id": "MDU6SXNzdWU2NjE3ODExODk=", "number": 176, "title": "flask_restx is not compatible with gunicorn", "user": {"login": "Serena-Xu", "id": 38081399, "node_id": "MDQ6VXNlcjM4MDgxMzk5", "avatar_url": "https://avatars3.githubusercontent.com/u/38081399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serena-Xu", "html_url": "https://github.com/Serena-Xu", "followers_url": "https://api.github.com/users/Serena-Xu/followers", "following_url": "https://api.github.com/users/Serena-Xu/following{/other_user}", "gists_url": "https://api.github.com/users/Serena-Xu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serena-Xu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serena-Xu/subscriptions", "organizations_url": "https://api.github.com/users/Serena-Xu/orgs", "repos_url": "https://api.github.com/users/Serena-Xu/repos", "events_url": "https://api.github.com/users/Serena-Xu/events{/privacy}", "received_events_url": "https://api.github.com/users/Serena-Xu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-20T12:46:09Z", "updated_at": "2020-07-21T18:26:04Z", "closed_at": "2020-07-21T18:26:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use gunicorn to run the flask API that I just developed. It worked well when I use flask_restplus, but it had No module named 'flask_restx' when using flask_restx even I have flask_restx installed in my virtual environment. I think it might because gunicorn does not support flask_restx. Anyone had this issue before or has any idea about this?\r\n\r\n### Below is my run.sh script\r\n\r\n```\r\nTIMEOUT=10000\r\n\r\necho \"Starting gunicorn\"\r\ngunicorn \\\r\n    -b 0.0.0.0:80 \\\r\n    -t $TIMEOUT \\\r\n    -k gevent --worker-connections 10 \\\r\n    --keep-alive 3600 \\\r\n    --log-level info \\\r\n    bai.wsgi:app\r\n```\r\n\r\nWhen I try to run this script, it complains about ModuleNotFoundError: No module named 'flask_restx'.\r\n\r\nHere is the trackback:\r\n\r\n```\r\nStarting gunicorn\r\n[2020-07-19 11:43:11 -0400] [44134] [INFO] Starting gunicorn 19.9.0\r\n[2020-07-19 11:43:11 -0400] [44134] [INFO] Listening at: http://0.0.0.0:80 (44134)\r\n[2020-07-19 11:43:11 -0400] [44134] [INFO] Using worker: gevent\r\n[2020-07-19 11:43:11 -0400] [44137] [INFO] Booting worker with pid: 44137\r\n/Users/serenaxu/flask-template/BAI/bai/db/config.py:11: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.\r\n  __baseconfig__ = yaml.load(open(CONFIG_PATH))\r\n[2020-07-19 11:43:12 -0400] [44137] [ERROR] Exception in worker process\r\nTraceback (most recent call last):\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/gunicorn/arbiter.py\", line 583, in spawn_worker\r\n    worker.init_process()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/gunicorn/workers/ggevent.py\", line 203, in init_process\r\n    super(GeventWorker, self).init_process()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/gunicorn/workers/base.py\", line 129, in init_process\r\n    self.load_wsgi()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/gunicorn/workers/base.py\", line 138, in load_wsgi\r\n    self.wsgi = self.app.wsgi()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/gunicorn/app/base.py\", line 67, in wsgi\r\n    self.callable = self.load()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/gunicorn/app/wsgiapp.py\", line 52, in load\r\n    return self.load_wsgiapp()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/gunicorn/app/wsgiapp.py\", line 41, in load_wsgiapp\r\n    return util.import_app(self.app_uri)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/gunicorn/util.py\", line 350, in import_app\r\n    __import__(module)\r\n  File \"/Users/serenaxu/flask-template/BAI/bai/wsgi.py\", line 2, in <module>\r\n    from bai.app import create_app, create_api\r\n  File \"/Users/serenaxu/flask-template/BAI/bai/app.py\", line 7, in <module>\r\n    from bai import apis\r\n  File \"/Users/serenaxu/flask-template/BAI/bai/apis/__init__.py\", line 2, in <module>\r\n    from .namespace1 import main\r\n  File \"/Users/serenaxu/flask-template/BAI/bai/apis/namespace1.py\", line 4, in <module>\r\n    from flask_restx import Api, Resource, Namespace\r\nModuleNotFoundError: No module named 'flask_restx'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/171", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/171/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/171/events", "html_url": "https://github.com/python-restx/flask-restx/issues/171", "id": 653144953, "node_id": "MDU6SXNzdWU2NTMxNDQ5NTM=", "number": 171, "title": "Configuring the base url for an app?", "user": {"login": "safe", "id": 576673, "node_id": "MDQ6VXNlcjU3NjY3Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/576673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/safe", "html_url": "https://github.com/safe", "followers_url": "https://api.github.com/users/safe/followers", "following_url": "https://api.github.com/users/safe/following{/other_user}", "gists_url": "https://api.github.com/users/safe/gists{/gist_id}", "starred_url": "https://api.github.com/users/safe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/safe/subscriptions", "organizations_url": "https://api.github.com/users/safe/orgs", "repos_url": "https://api.github.com/users/safe/repos", "events_url": "https://api.github.com/users/safe/events{/privacy}", "received_events_url": "https://api.github.com/users/safe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-08T09:35:59Z", "updated_at": "2020-08-14T13:39:58Z", "closed_at": "2020-07-08T11:06:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to set my API to have a prefix of /api against everything (i.e. docs will be located in api/docs), what is the best method to complish this?  I tried using base_url however this does not work for doc or any routes I create:\r\n\r\n```\r\napp = Flask(__name__)\r\napi = Api(app, version='1.0', title='API',\r\n    description='A simple API',\r\n    doc='/docs',\r\n    base_url='/api'\r\n) \r\n```\r\nDo I need to do /api/* across all namespaces I create?  Can I not set this at an app level?\r\n```\r\napp = Flask(__name__)\r\napi = Api(app, version='1.0', title='API',\r\n    description='A simple API',\r\n    doc='/api/docs'\r\n)\r\nfw = api.namespace('api/firmware', description='Firmware Updates API Docs')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/167", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/167/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/167/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/167/events", "html_url": "https://github.com/python-restx/flask-restx/issues/167", "id": 648936919, "node_id": "MDU6SXNzdWU2NDg5MzY5MTk=", "number": 167, "title": "Not so small application/json response body makes browser hung up?", "user": {"login": "ykpark79", "id": 29969691, "node_id": "MDQ6VXNlcjI5OTY5Njkx", "avatar_url": "https://avatars3.githubusercontent.com/u/29969691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ykpark79", "html_url": "https://github.com/ykpark79", "followers_url": "https://api.github.com/users/ykpark79/followers", "following_url": "https://api.github.com/users/ykpark79/following{/other_user}", "gists_url": "https://api.github.com/users/ykpark79/gists{/gist_id}", "starred_url": "https://api.github.com/users/ykpark79/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ykpark79/subscriptions", "organizations_url": "https://api.github.com/users/ykpark79/orgs", "repos_url": "https://api.github.com/users/ykpark79/repos", "events_url": "https://api.github.com/users/ykpark79/events{/privacy}", "received_events_url": "https://api.github.com/users/ykpark79/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-01T12:19:08Z", "updated_at": "2020-07-01T23:49:38Z", "closed_at": "2020-07-01T23:48:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am currently implementing GET REST API with query parameters which gives large amount of JSON response body.\r\n(it is not significantly large but not so small)\r\nIt return like below after I run \"try it out. \r\n![image](https://user-images.githubusercontent.com/29969691/86242452-b6f78f80-bbdf-11ea-923a-53d9ff350a04.png)\r\nWhich works okay.\r\nResponse from server doesn't take so much time to send back the response. (below 200ms)\r\n\r\nWhen scrolling down on \"response payload\" section on the document page, then if I want to move other area of the document,\r\nbrowser is hung up for around 4 seconds.\r\n\r\nWithout clicking or scrolling in the \"response payload\", clicking other namespace or API works okay.\r\nBut **this only happens when my mouse focused into the \"response payload\" section in the document page**.\r\n\r\nAny idea or help?\r\nIs there any limit in RestX to display in response payload section?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/164", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/164/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/164/events", "html_url": "https://github.com/python-restx/flask-restx/issues/164", "id": 646279459, "node_id": "MDU6SXNzdWU2NDYyNzk0NTk=", "number": 164, "title": "Using 'choices' in add_argument leads to invalid swagger schema", "user": {"login": "leopold-p", "id": 44367440, "node_id": "MDQ6VXNlcjQ0MzY3NDQw", "avatar_url": "https://avatars0.githubusercontent.com/u/44367440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leopold-p", "html_url": "https://github.com/leopold-p", "followers_url": "https://api.github.com/users/leopold-p/followers", "following_url": "https://api.github.com/users/leopold-p/following{/other_user}", "gists_url": "https://api.github.com/users/leopold-p/gists{/gist_id}", "starred_url": "https://api.github.com/users/leopold-p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leopold-p/subscriptions", "organizations_url": "https://api.github.com/users/leopold-p/orgs", "repos_url": "https://api.github.com/users/leopold-p/repos", "events_url": "https://api.github.com/users/leopold-p/events{/privacy}", "received_events_url": "https://api.github.com/users/leopold-p/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-26T13:53:28Z", "updated_at": "2020-07-16T09:44:34Z", "closed_at": "2020-07-16T09:44:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I seems the issue is inherited from flask-restplus\r\nhttps://github.com/noirbizarre/flask-restplus/issues/488\r\n\r\n### **Code**\r\nIn Argument from regparse.py:\r\n```python\r\n    @property\r\n    def __schema__(self):\r\n        if self.location == 'cookie':\r\n            return\r\n        param = {\r\n            'name': self.name,\r\n            'in': LOCATIONS.get(self.location, 'query')\r\n        }\r\n        _handle_arg_type(self, param)\r\n        if self.required:\r\n            param['required'] = True\r\n        if self.help:\r\n            param['description'] = self.help\r\n        if self.default is not None:\r\n            param['default'] = self.default() if callable(self.default) else self.default\r\n        if self.action == 'append':\r\n            param['items'] = {'type': param['type']}\r\n            param['type'] = 'array'\r\n            param['collectionFormat'] = 'multi'\r\n        if self.action == 'split':\r\n            param['items'] = {'type': param['type']}\r\n            param['type'] = 'array'\r\n            param['collectionFormat'] = 'csv'\r\n        if self.choices:\r\n            param['enum'] = self.choices\r\n            param['collectionFormat'] = 'multi'\r\n        return param\r\n```\r\n\r\nAn argument with `choices` must not generate a `collectionFormat` field", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/162", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/162/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/162/events", "html_url": "https://github.com/python-restx/flask-restx/issues/162", "id": 644679092, "node_id": "MDU6SXNzdWU2NDQ2NzkwOTI=", "number": 162, "title": "How do I share a model between Namespaces ?", "user": {"login": "fnalonso", "id": 7150029, "node_id": "MDQ6VXNlcjcxNTAwMjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7150029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fnalonso", "html_url": "https://github.com/fnalonso", "followers_url": "https://api.github.com/users/fnalonso/followers", "following_url": "https://api.github.com/users/fnalonso/following{/other_user}", "gists_url": "https://api.github.com/users/fnalonso/gists{/gist_id}", "starred_url": "https://api.github.com/users/fnalonso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fnalonso/subscriptions", "organizations_url": "https://api.github.com/users/fnalonso/orgs", "repos_url": "https://api.github.com/users/fnalonso/repos", "events_url": "https://api.github.com/users/fnalonso/events{/privacy}", "received_events_url": "https://api.github.com/users/fnalonso/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-24T14:50:09Z", "updated_at": "2020-06-24T15:10:03Z", "closed_at": "2020-06-24T15:10:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Ask a question**\r\nHi,\r\n\r\nI am implementing a simple API with two login URL `admin/login` and `user/login` and both returns the same object containing a access_token and a refresh_token. The best way from my point of view is that I was able to declare the model only one time and use in the resources described, but when I try to import the model from a external file the `ValueError: Model id not registered` occurs.\r\n\r\nTo illustrate the scenario the structure I am using is something like:\r\n\r\n```python\r\n# models.py\r\nfrom flask_restx import Namespace, fields\r\n\r\nmodels_namespace = Namespace(\"Models\")\r\n\r\nauth_model = models_namespace.model('Auth model', {\r\n  'access_token': fields.String(description=\"JWT access token\",\r\n  'refresh_token': fields.String(description=\"JWT refresh token\"\r\n})\r\n\r\n# admin_resource.py\r\nfrom models import auth_model\r\n\r\nadmin_namespace = Namespace(\"administration\")\r\n\r\nadmin_namespace.route(\"/login\")\r\nclass AdminLogin(Resource):\r\n  @ns.doc(\"Administration Login\", body=login_model)\r\n  @ns.response(200, \"\", auth_model)\r\n  def post:\r\n    # do login stuff\r\n\r\n\r\n# __init__.py\r\n\r\nfrom models import models_namespace\r\nfrom admin_resource import admin_namespace\r\n\r\napi.add_namespace(models_namespace)\r\napi.add_namespace(admin_namespace)\r\n\r\n```\r\nIs there any way to share models between namespaces ?\r\n\r\nThank you!\r\n\r\n\r\n\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/158", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/158/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/158/events", "html_url": "https://github.com/python-restx/flask-restx/issues/158", "id": 641498163, "node_id": "MDU6SXNzdWU2NDE0OTgxNjM=", "number": 158, "title": "A method like request.args.get in flask-restx", "user": {"login": "BravenxX", "id": 43297929, "node_id": "MDQ6VXNlcjQzMjk3OTI5", "avatar_url": "https://avatars0.githubusercontent.com/u/43297929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BravenxX", "html_url": "https://github.com/BravenxX", "followers_url": "https://api.github.com/users/BravenxX/followers", "following_url": "https://api.github.com/users/BravenxX/following{/other_user}", "gists_url": "https://api.github.com/users/BravenxX/gists{/gist_id}", "starred_url": "https://api.github.com/users/BravenxX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BravenxX/subscriptions", "organizations_url": "https://api.github.com/users/BravenxX/orgs", "repos_url": "https://api.github.com/users/BravenxX/repos", "events_url": "https://api.github.com/users/BravenxX/events{/privacy}", "received_events_url": "https://api.github.com/users/BravenxX/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-18T19:31:08Z", "updated_at": "2020-08-09T02:46:50Z", "closed_at": "2020-08-09T02:46:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I get all arguments like in Flask native API with request: \"request.args.get()\" ?? My url arguments are relative so I need to get those as an array.\r\n\r\nCODE: \r\n```\r\nfrom flask_restx import Namespace, Resource, fields\r\nimport numpy as np\r\nimport json\r\nimport config\r\n\r\nfrom utils.functions.model.get_model_values import get_model_values\r\n\r\napi = Namespace('machine_state',\r\n                description=\"Predicciones de estado de equipos industriales\"\r\n                )\r\n\r\nmachine_state = api.model('Machine-State', {\r\n    \"prediction\": fields.Float(required=True, description='Predicci\u00f3n del modelo'),\r\n})\r\n\r\n@api.route('/<model_id>')\r\n@api.param('model_id', 'Id del modelo')\r\n@api.response(404, 'Modelo no encontrado')\r\nclass MachineState(Resource):\r\n\r\n    @api.doc(\"get_model_response\")\r\n    @api.marshal_list_with(machine_state)\r\n    def get(self, model_id):\r\n        ...\r\n        sample_to_evalue = []\r\n\r\n        for i in request.args:                                             # => Request\r\n            sample_to_evalue.append(request.args.get(i)) # => I need to find a way to do this.\r\n\r\n      ...\r\n\r\n        return {\"description\": json.dumps(prediction.astype(float))}\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/146", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/146/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/146/events", "html_url": "https://github.com/python-restx/flask-restx/issues/146", "id": 626881820, "node_id": "MDU6SXNzdWU2MjY4ODE4MjA=", "number": 146, "title": "Orderable and Searchable endpoint", "user": {"login": "Aletz-Arce", "id": 5661038, "node_id": "MDQ6VXNlcjU2NjEwMzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5661038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aletz-Arce", "html_url": "https://github.com/Aletz-Arce", "followers_url": "https://api.github.com/users/Aletz-Arce/followers", "following_url": "https://api.github.com/users/Aletz-Arce/following{/other_user}", "gists_url": "https://api.github.com/users/Aletz-Arce/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aletz-Arce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aletz-Arce/subscriptions", "organizations_url": "https://api.github.com/users/Aletz-Arce/orgs", "repos_url": "https://api.github.com/users/Aletz-Arce/repos", "events_url": "https://api.github.com/users/Aletz-Arce/events{/privacy}", "received_events_url": "https://api.github.com/users/Aletz-Arce/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-28T23:21:45Z", "updated_at": "2020-06-02T20:49:29Z", "closed_at": "2020-06-02T20:48:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Orderable and Searchable endpoint**\r\nHello, how to implement an endpoint with search and sorting capabilities by specific fields\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/145", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/145/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/145/events", "html_url": "https://github.com/python-restx/flask-restx/issues/145", "id": 626879955, "node_id": "MDU6SXNzdWU2MjY4Nzk5NTU=", "number": 145, "title": "Rate Limit Implementation", "user": {"login": "Aletz-Arce", "id": 5661038, "node_id": "MDQ6VXNlcjU2NjEwMzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5661038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aletz-Arce", "html_url": "https://github.com/Aletz-Arce", "followers_url": "https://api.github.com/users/Aletz-Arce/followers", "following_url": "https://api.github.com/users/Aletz-Arce/following{/other_user}", "gists_url": "https://api.github.com/users/Aletz-Arce/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aletz-Arce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aletz-Arce/subscriptions", "organizations_url": "https://api.github.com/users/Aletz-Arce/orgs", "repos_url": "https://api.github.com/users/Aletz-Arce/repos", "events_url": "https://api.github.com/users/Aletz-Arce/events{/privacy}", "received_events_url": "https://api.github.com/users/Aletz-Arce/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-28T23:18:41Z", "updated_at": "2020-06-02T19:25:44Z", "closed_at": "2020-06-02T19:25:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**AHow to implement API rate limit?**\r\nHi, anyone already implement rate limit feature, you can me advise ?\r\nFlask-Limiter its the best way?\r\nThanks\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/144", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/144/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/144/events", "html_url": "https://github.com/python-restx/flask-restx/issues/144", "id": 626624959, "node_id": "MDU6SXNzdWU2MjY2MjQ5NTk=", "number": 144, "title": "Future of Restx", "user": {"login": "min2bro", "id": 4449948, "node_id": "MDQ6VXNlcjQ0NDk5NDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4449948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/min2bro", "html_url": "https://github.com/min2bro", "followers_url": "https://api.github.com/users/min2bro/followers", "following_url": "https://api.github.com/users/min2bro/following{/other_user}", "gists_url": "https://api.github.com/users/min2bro/gists{/gist_id}", "starred_url": "https://api.github.com/users/min2bro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/min2bro/subscriptions", "organizations_url": "https://api.github.com/users/min2bro/orgs", "repos_url": "https://api.github.com/users/min2bro/repos", "events_url": "https://api.github.com/users/min2bro/events{/privacy}", "received_events_url": "https://api.github.com/users/min2bro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-28T15:58:43Z", "updated_at": "2020-05-29T13:02:08Z", "closed_at": "2020-05-29T13:02:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Ask a question**\r\nI'm coming from the background of Flask Restplus and we have developed web apps and rest api's which were fully functional and working in production but the things gone really awry when we updated Werkzeug==1.0.0 and thereafter we learnt that flask restplus is dead ([Issue#770](https://github.com/noirbizarre/flask-restplus/issues/770))\r\n\r\nWe are planning to upgrade the flask restplus to restx but wanted to check with the Maintainer and Core-developers how reliable it will be to go with the Restx from a future perspective. Since we don't want to get into the same situation as Flask restplus So wanted to confirm if Restx can be trusted for production update and if there will be a support in a long run and will not met the fate of restplus.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/138", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/138/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/138/events", "html_url": "https://github.com/python-restx/flask-restx/issues/138", "id": 618737359, "node_id": "MDU6SXNzdWU2MTg3MzczNTk=", "number": 138, "title": "Question about Pagination", "user": {"login": "cedricbonhomme", "id": 465400, "node_id": "MDQ6VXNlcjQ2NTQwMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/465400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cedricbonhomme", "html_url": "https://github.com/cedricbonhomme", "followers_url": "https://api.github.com/users/cedricbonhomme/followers", "following_url": "https://api.github.com/users/cedricbonhomme/following{/other_user}", "gists_url": "https://api.github.com/users/cedricbonhomme/gists{/gist_id}", "starred_url": "https://api.github.com/users/cedricbonhomme/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cedricbonhomme/subscriptions", "organizations_url": "https://api.github.com/users/cedricbonhomme/orgs", "repos_url": "https://api.github.com/users/cedricbonhomme/repos", "events_url": "https://api.github.com/users/cedricbonhomme/events{/privacy}", "received_events_url": "https://api.github.com/users/cedricbonhomme/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-15T06:42:07Z", "updated_at": "2020-05-19T12:30:14Z", "closed_at": "2020-05-19T12:30:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Ask a question**\r\nHello,\r\n\r\nCould someone please advise me on how to do pagination, let say the _proper way_?\r\n\r\nNothing is mentioned in the documentation and https://github.com/mtShaikh/flask-rest-paginate seems not very used (has been designed for Flask-restful).\r\n\r\nIs the better solution to do everything by hand?\r\n\r\n\r\nthank you very much!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/133", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/133/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/133/events", "html_url": "https://github.com/python-restx/flask-restx/issues/133", "id": 615384213, "node_id": "MDU6SXNzdWU2MTUzODQyMTM=", "number": 133, "title": "Can't access swagger.json through https + docker proxyfied", "user": {"login": "jaesivsm", "id": 1969240, "node_id": "MDQ6VXNlcjE5NjkyNDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1969240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaesivsm", "html_url": "https://github.com/jaesivsm", "followers_url": "https://api.github.com/users/jaesivsm/followers", "following_url": "https://api.github.com/users/jaesivsm/following{/other_user}", "gists_url": "https://api.github.com/users/jaesivsm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaesivsm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaesivsm/subscriptions", "organizations_url": "https://api.github.com/users/jaesivsm/orgs", "repos_url": "https://api.github.com/users/jaesivsm/repos", "events_url": "https://api.github.com/users/jaesivsm/events{/privacy}", "received_events_url": "https://api.github.com/users/jaesivsm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-10T12:43:29Z", "updated_at": "2020-05-26T08:36:06Z", "closed_at": "2020-05-12T17:57:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure this is a bug or the way to fix it but here is how things happen :\r\n\r\n### **Repro Steps** \r\nI'm serving a `flask-restx` app on a docker behind a reverse proxy. \r\nThe proxy serves HTTPS and proxies the requests to the docker in HTTP.\r\n\r\n### **Expected Behavior**\r\nI'd want the UI, accessed through HTTPS => HTTP to be able to reach the `swagger.json`.\r\n\r\n### **Actual Behavior**\r\nIf I try to access to swagger documentation, it fails to load the `swagger.json`. The UI notes that it tries to access the Json file via HTTP. \r\nAfter some digging I understood that's because the `swagger.json` URL is constructed through `url_for` which, in the context of a request, uses the scheme of said request. The request being the one between the proxy and the docker, the scheme is HTTP.\r\nEven if I configure flask with `PREFERED_URL_SCHEME` the fact that the `url_for` is executed in the context of a request will override the configured preference.\r\nIt is to be noted that the HTTP URL of the `swagger.json` does redirect to a valid HTTPS one. But the swagger bundle doesn't seem to try to follow redirection.\r\n\r\n### Bugfixes idea : \r\nI'm not sure if it's really a bug but here's what I could implement : \r\n * building the URL at load time, outside any context. I think it would fix my bug but I'm not sure it is wanted or wouldn't have undesired side effects (I am not very familiar with the depths of `flask-restx`)\r\n * I didn't find how to make swagger js bundle follow redirection to the HTTPS resource but there must be something to dig there.\r\n\r\n### **Environment**\r\n- Python version 3.7\r\n- Flask version 1.0.2\r\n- Flask-RESTX version 0.1.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/132", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/132/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/132/events", "html_url": "https://github.com/python-restx/flask-restx/issues/132", "id": 615106634, "node_id": "MDU6SXNzdWU2MTUxMDY2MzQ=", "number": 132, "title": "Support Open Api 3", "user": {"login": "Aletz-Arce", "id": 5661038, "node_id": "MDQ6VXNlcjU2NjEwMzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5661038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aletz-Arce", "html_url": "https://github.com/Aletz-Arce", "followers_url": "https://api.github.com/users/Aletz-Arce/followers", "following_url": "https://api.github.com/users/Aletz-Arce/following{/other_user}", "gists_url": "https://api.github.com/users/Aletz-Arce/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aletz-Arce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aletz-Arce/subscriptions", "organizations_url": "https://api.github.com/users/Aletz-Arce/orgs", "repos_url": "https://api.github.com/users/Aletz-Arce/repos", "events_url": "https://api.github.com/users/Aletz-Arce/events{/privacy}", "received_events_url": "https://api.github.com/users/Aletz-Arce/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547091, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDkx", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-09T06:35:13Z", "updated_at": "2020-05-11T16:37:39Z", "closed_at": "2020-05-11T16:37:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, is there any plan to support OAS 3?\r\nBest regards", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/124", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/124/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/124/events", "html_url": "https://github.com/python-restx/flask-restx/issues/124", "id": 604298976, "node_id": "MDU6SXNzdWU2MDQyOTg5NzY=", "number": 124, "title": "Contributing getting started questions", "user": {"login": "ramarivera", "id": 7547875, "node_id": "MDQ6VXNlcjc1NDc4NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7547875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramarivera", "html_url": "https://github.com/ramarivera", "followers_url": "https://api.github.com/users/ramarivera/followers", "following_url": "https://api.github.com/users/ramarivera/following{/other_user}", "gists_url": "https://api.github.com/users/ramarivera/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramarivera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramarivera/subscriptions", "organizations_url": "https://api.github.com/users/ramarivera/orgs", "repos_url": "https://api.github.com/users/ramarivera/repos", "events_url": "https://api.github.com/users/ramarivera/events{/privacy}", "received_events_url": "https://api.github.com/users/ramarivera/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-21T21:30:02Z", "updated_at": "2020-04-22T21:49:01Z", "closed_at": "2020-04-22T21:49:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi everyone!\r\n\r\nI've been following this project back when it was still flask-restplus, and I've always wanted to contribute back to it since I've used it and liked it quite a bit. \r\n\r\nSo I wanted to know two things since now I find myself with some time for contributing:\r\n\r\n1. Do you have an specific messaging channel, like discord, slack, gitter, etc? \r\n2. Do you already have in mind a list of issues that are a good \"first contribution\" candidate?\r\n\r\nThanks in advanced!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/123", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/123/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/123/events", "html_url": "https://github.com/python-restx/flask-restx/issues/123", "id": 604211949, "node_id": "MDU6SXNzdWU2MDQyMTE5NDk=", "number": 123, "title": "Improve configuration docs", "user": {"login": "SteadBytes", "id": 14834132, "node_id": "MDQ6VXNlcjE0ODM0MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/14834132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SteadBytes", "html_url": "https://github.com/SteadBytes", "followers_url": "https://api.github.com/users/SteadBytes/followers", "following_url": "https://api.github.com/users/SteadBytes/following{/other_user}", "gists_url": "https://api.github.com/users/SteadBytes/gists{/gist_id}", "starred_url": "https://api.github.com/users/SteadBytes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SteadBytes/subscriptions", "organizations_url": "https://api.github.com/users/SteadBytes/orgs", "repos_url": "https://api.github.com/users/SteadBytes/repos", "events_url": "https://api.github.com/users/SteadBytes/events{/privacy}", "received_events_url": "https://api.github.com/users/SteadBytes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547087, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg3", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/documentation", "name": "documentation", "color": "0075ca", "default": true, "description": "Improvements or additions to documentation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-04-21T19:00:19Z", "updated_at": "2020-05-08T09:06:17Z", "closed_at": "2020-05-08T09:06:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In response to a recent issue, I've started a dedicated documentation page for the configuration options supported by Flask-RESTX https://github.com/python-restx/flask-restx/commit/990bd355e17d6c7111e745df8763da80265cd50d . Most of these are documented *somewhere*, however it would be beneficial for users if these were detailed in this single page\r\n- The page currently *lists* all of them without further details.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/121", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/121/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/121/events", "html_url": "https://github.com/python-restx/flask-restx/issues/121", "id": 603392924, "node_id": "MDU6SXNzdWU2MDMzOTI5MjQ=", "number": 121, "title": "Typo in Marshalling docs", "user": {"login": "ramarivera", "id": 7547875, "node_id": "MDQ6VXNlcjc1NDc4NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7547875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramarivera", "html_url": "https://github.com/ramarivera", "followers_url": "https://api.github.com/users/ramarivera/followers", "following_url": "https://api.github.com/users/ramarivera/following{/other_user}", "gists_url": "https://api.github.com/users/ramarivera/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramarivera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramarivera/subscriptions", "organizations_url": "https://api.github.com/users/ramarivera/orgs", "repos_url": "https://api.github.com/users/ramarivera/repos", "events_url": "https://api.github.com/users/ramarivera/events{/privacy}", "received_events_url": "https://api.github.com/users/ramarivera/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-20T17:05:24Z", "updated_at": "2020-04-21T19:01:30Z", "closed_at": "2020-04-21T19:01:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I think I found a typo on the docs for Marshalling, in the last section.\r\n\r\nhttps://github.com/python-restx/flask-restx/blob/4193577066a490434d27a3e398d0b31d450b7369/doc/marshalling.rst#define-model-using-json-schema\r\n\r\n```\r\nperson = address = api.schema_model('Person', {\r\n    person = api.schema_model('Person', {\r\n        'required': ['address'],\r\n        'properties': {\r\n            'name': {\r\n                'type': 'string'\r\n            },\r\n            'age': {\r\n                'type': 'integer'\r\n            },\r\n            'birthdate': {\r\n                'type': 'string',\r\n                'format': 'date-time'\r\n            },\r\n            'address': {\r\n                '$ref': '#/definitions/Address',\r\n            }\r\n        },\r\n        'type': 'object'\r\n    })\r\n```\r\n\r\nI think the return value of the last `api.schema_model` call should only be assigned to the `person` variable?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/117", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/117/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/117/events", "html_url": "https://github.com/python-restx/flask-restx/issues/117", "id": 600627695, "node_id": "MDU6SXNzdWU2MDA2Mjc2OTU=", "number": 117, "title": "Broken code in configuration", "user": {"login": "ybizeul", "id": 182035, "node_id": "MDQ6VXNlcjE4MjAzNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/182035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ybizeul", "html_url": "https://github.com/ybizeul", "followers_url": "https://api.github.com/users/ybizeul/followers", "following_url": "https://api.github.com/users/ybizeul/following{/other_user}", "gists_url": "https://api.github.com/users/ybizeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/ybizeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ybizeul/subscriptions", "organizations_url": "https://api.github.com/users/ybizeul/orgs", "repos_url": "https://api.github.com/users/ybizeul/repos", "events_url": "https://api.github.com/users/ybizeul/events{/privacy}", "received_events_url": "https://api.github.com/users/ybizeul/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-15T22:34:00Z", "updated_at": "2020-05-15T14:50:13Z", "closed_at": "2020-05-15T14:50:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm seriously going through a lot of frustration trying to figure out the documentation, let alone figure out the whole thing...\r\n\r\nThis is from the documentation :\r\n```python\r\nfields = api.model('MyModel', {\r\n    'name': fields.String(description='The name', required=True),\r\n    'type': fields.String(description='The object type', enum=['A', 'B']),\r\n    'age': fields.Integer(min=0),\r\n})\r\n\r\n@api.model(fields={'name': fields.String, 'age': fields.Integer})\r\nclass Person(fields.Raw):\r\n    def format(self, value):\r\n        return {'name': value.name, 'age': value.age}\r\n\r\n```\r\n\r\nFirst we declare `fields` which end up being a `Model`\r\n\r\nThen on the next block, we happily use `fields.String`, `fields.Integer`, etc which I think are imported from `flask_restx`\r\n\r\nSo I went ahead and delete the `fields` declaration, thinking it's yet another place in the doc when they list *alternatives* but they wouldn't say so...\r\n\r\nIt ended up worse :\r\n```python\r\n@api.model(fields={'name': fields.String, 'age': fields.Integer})\r\nclass Person(fields.Raw):\r\n    def format(self, value):\r\n        return {'name': value.name, 'age': value.age}\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/flask\", line 8, in <module>\r\n    sys.exit(main())\r\n  File \"/usr/local/lib/python3.8/site-packages/flask/cli.py\", line 967, in main\r\n    cli.main(args=sys.argv[1:], prog_name=\"python -m flask\" if as_module else None)\r\n  File \"/usr/local/lib/python3.8/site-packages/flask/cli.py\", line 586, in main\r\n    return super(FlaskGroup, self).main(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/click/core.py\", line 782, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/usr/local/lib/python3.8/site-packages/click/core.py\", line 1259, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n  File \"/usr/local/lib/python3.8/site-packages/click/core.py\", line 1066, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/usr/local/lib/python3.8/site-packages/click/core.py\", line 610, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/click/decorators.py\", line 73, in new_func\r\n    return ctx.invoke(f, obj, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/click/core.py\", line 610, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/flask/cli.py\", line 848, in run_command\r\n    app = DispatchingApp(info.load_app, use_eager_loading=eager_loading)\r\n  File \"/usr/local/lib/python3.8/site-packages/flask/cli.py\", line 305, in __init__\r\n    self._load_unlocked()\r\n  File \"/usr/local/lib/python3.8/site-packages/flask/cli.py\", line 330, in _load_unlocked\r\n    self._app = rv = self.loader()\r\n  File \"/usr/local/lib/python3.8/site-packages/flask/cli.py\", line 388, in load_app\r\n    app = locate_app(self, import_name, name)\r\n  File \"/usr/local/lib/python3.8/site-packages/flask/cli.py\", line 240, in locate_app\r\n    __import__(module_name)\r\n  File \"/app/api.py\", line 50, in <module>\r\n    @api.model(fields={'name': fields.String, 'age': fields.Integer})\r\n  File \"/usr/local/lib/python3.8/site-packages/flask_restx/namespace.py\", line 172, in model\r\n    model = cls(name, model, mask=mask)\r\n  File \"/usr/local/lib/python3.8/site-packages/flask_restx/model.py\", line 143, in __init__\r\n    super(RawModel, self).__init__(name, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/flask_restx/model.py\", line 46, in __init__\r\n    super(ModelBase, self).__init__(*args, **kwargs)\r\nTypeError: 'NoneType' object is not iterable\r\n```\r\nWhat am I doing wrong ?\r\n\r\nI've seen other mistakes in the doc coming from copy and paste from RestPlus, that's when I figured I will have to fight that thing.\r\n\r\nI'm happy to help if I can, but honestly I can't even figure out the documentation, let alone fix it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/111", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/111/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/111/events", "html_url": "https://github.com/python-restx/flask-restx/issues/111", "id": 598475725, "node_id": "MDU6SXNzdWU1OTg0NzU3MjU=", "number": 111, "title": "errorhandler doesnt work", "user": {"login": "AdriBloober", "id": 45321107, "node_id": "MDQ6VXNlcjQ1MzIxMTA3", "avatar_url": "https://avatars2.githubusercontent.com/u/45321107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdriBloober", "html_url": "https://github.com/AdriBloober", "followers_url": "https://api.github.com/users/AdriBloober/followers", "following_url": "https://api.github.com/users/AdriBloober/following{/other_user}", "gists_url": "https://api.github.com/users/AdriBloober/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdriBloober/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdriBloober/subscriptions", "organizations_url": "https://api.github.com/users/AdriBloober/orgs", "repos_url": "https://api.github.com/users/AdriBloober/repos", "events_url": "https://api.github.com/users/AdriBloober/events{/privacy}", "received_events_url": "https://api.github.com/users/AdriBloober/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-12T12:38:23Z", "updated_at": "2020-07-20T17:20:08Z", "closed_at": "2020-07-20T17:20:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "### ***** **BEFORE LOGGING AN ISSUE** *****\r\n\r\n### **Code**\r\n\r\n```python\r\n@api.errorhandler(NarviRobotError)\r\ndef error_handler(error):\r\n    return {\"status\": \"error\", \"error\": error.to_json()}, 409```\r\n```\r\n\r\n```python\r\nclass NarviRobotError(Exception):\r\n    id = 0\r\n    name = \"narvi_robot_error\"\r\n    description = \"This is the default exception of narvirobot\"\r\n\r\n    def to_json(self):\r\n        return {\"id\": self.id, \"name\": self.name, \"description\": self.description}\r\n\r\n\r\nclass UnknowSupportingError(NarviRobotError):\r\n    id = 10001\r\n    name = \"unknown_supporting_error\"\r\n    description = \"Please contact the support: An unknown error has been occurred\"\r\n```\r\n\r\n```python\r\n@namespace.route(\"/user\")\r\nclass UserResource(Resource):\r\n    @api.marshal_with(session)\r\n    @api.expect(register_user_parser)\r\n    def post(self):\r\n        raise UnknowSupportingError()\r\n```\r\n\r\nThe problem is, that I get an error 500 and in the python log, I get the UnknowSupportingError. But why take the error handler the error not? The function was not executed.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/110", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/110/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/110/events", "html_url": "https://github.com/python-restx/flask-restx/issues/110", "id": 596427928, "node_id": "MDU6SXNzdWU1OTY0Mjc5Mjg=", "number": 110, "title": "Add support for recursive nested models", "user": {"login": "louise-davies", "id": 22525471, "node_id": "MDQ6VXNlcjIyNTI1NDcx", "avatar_url": "https://avatars3.githubusercontent.com/u/22525471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/louise-davies", "html_url": "https://github.com/louise-davies", "followers_url": "https://api.github.com/users/louise-davies/followers", "following_url": "https://api.github.com/users/louise-davies/following{/other_user}", "gists_url": "https://api.github.com/users/louise-davies/gists{/gist_id}", "starred_url": "https://api.github.com/users/louise-davies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/louise-davies/subscriptions", "organizations_url": "https://api.github.com/users/louise-davies/orgs", "repos_url": "https://api.github.com/users/louise-davies/repos", "events_url": "https://api.github.com/users/louise-davies/events{/privacy}", "received_events_url": "https://api.github.com/users/louise-davies/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547091, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDkx", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-08T09:11:09Z", "updated_at": "2020-07-28T14:14:58Z", "closed_at": "2020-07-28T14:14:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nCurrently, `flask-restx` swagger.json generation breaks when one defines some models with recursive/circular references to one another. See noirbizarre/flask-restplus#190\r\n\r\n**Describe the solution you'd like**\r\nA PR was made in the `flask-resplus` repo that fixes the issue: noirbizarre/flask-restplus#656\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/106", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/106/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/106/events", "html_url": "https://github.com/python-restx/flask-restx/issues/106", "id": 592710105, "node_id": "MDU6SXNzdWU1OTI3MTAxMDU=", "number": 106, "title": "Getting TypeError: Object of type Nested is not JSON serializable when working with Nested fields. How do I fix it?", "user": {"login": "aaronjolson", "id": 3924848, "node_id": "MDQ6VXNlcjM5MjQ4NDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3924848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaronjolson", "html_url": "https://github.com/aaronjolson", "followers_url": "https://api.github.com/users/aaronjolson/followers", "following_url": "https://api.github.com/users/aaronjolson/following{/other_user}", "gists_url": "https://api.github.com/users/aaronjolson/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaronjolson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaronjolson/subscriptions", "organizations_url": "https://api.github.com/users/aaronjolson/orgs", "repos_url": "https://api.github.com/users/aaronjolson/repos", "events_url": "https://api.github.com/users/aaronjolson/events{/privacy}", "received_events_url": "https://api.github.com/users/aaronjolson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-02T15:14:14Z", "updated_at": "2020-04-04T14:55:07Z", "closed_at": "2020-04-04T14:55:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using flask-restx / flask-restplus, trying utilize the swagger documentation generation feature. I have this setup for my models.\r\n\r\n    A = api.model(\r\n        'A', {\r\n            \"a1\": fields.String(description=''),\r\n            \"a2\": fields.String(description='')\r\n        }\r\n    )\r\n    \r\n    B = api.model(\r\n        'B', {\r\n            \"b1\": fields.String(description=''),\r\n            \"b2\": fields.String(description='')\r\n        },\r\n    )\r\n    \r\n    response_with_nested_data = api.model(\r\n        \"TLD\", {\r\n            \"A\": fields.Nested(\r\n                A, description=''\r\n                ),\r\n            \"B\": fields.Nested(\r\n                B, description=''\r\n            )\r\n        }\r\n    )\r\n\r\nAnd I have a handler that looks like\r\n\r\n    @myapi.route('/aa', methods=['POST'])\r\n    class AA(Resource):\r\n        @myapi.expect(simple_expected_model)\r\n        @myapi.response(200, response_with_nested_data)\r\n        @do_auth(require_token=True, render_errors=True)\r\n        def post(self):\r\n            return handle_request(request)\r\n\r\n\r\nI am trying to get output from this api endpoint, in the swagger docs, that looks like\r\n\r\n    {\r\n        \"A\": {\r\n            \"a1\": \"a\",\r\n            \"a2\": \"aa\"\r\n        }\r\n        \"B\": {\r\n            \"b1\": \"b\",\r\n            \"b2\": \"bb\"\r\n        }\r\n    }\r\n\r\nbut when spin up my server and hit my swagger docs generation page I get an error\r\n\r\n    TypeError: Object of type Nested is not JSON serializable\r\n\r\nSo I know I am doing something wrong here. Any ideas where I am going wrong and what I should be doing instead?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/98", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/98/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/98/events", "html_url": "https://github.com/python-restx/flask-restx/issues/98", "id": 586654758, "node_id": "MDU6SXNzdWU1ODY2NTQ3NTg=", "number": 98, "title": "New to flask-restx - Mind helping me achieve a custom standard", "user": {"login": "jahirfiquitiva", "id": 10360816, "node_id": "MDQ6VXNlcjEwMzYwODE2", "avatar_url": "https://avatars0.githubusercontent.com/u/10360816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jahirfiquitiva", "html_url": "https://github.com/jahirfiquitiva", "followers_url": "https://api.github.com/users/jahirfiquitiva/followers", "following_url": "https://api.github.com/users/jahirfiquitiva/following{/other_user}", "gists_url": "https://api.github.com/users/jahirfiquitiva/gists{/gist_id}", "starred_url": "https://api.github.com/users/jahirfiquitiva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jahirfiquitiva/subscriptions", "organizations_url": "https://api.github.com/users/jahirfiquitiva/orgs", "repos_url": "https://api.github.com/users/jahirfiquitiva/repos", "events_url": "https://api.github.com/users/jahirfiquitiva/events{/privacy}", "received_events_url": "https://api.github.com/users/jahirfiquitiva/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-24T02:57:27Z", "updated_at": "2020-03-25T01:25:04Z", "closed_at": "2020-03-25T01:25:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey... I'm just starting to use `flask-restx` and I want a very specific response body... Would you mind helping me achieve it?\r\n\r\nLet's say I have a person dao, so the object would be something like:\r\n```json\r\n{ \"id\": 1, \"name\": \"Jahir\", \"age\": 23, \"email\": \"mail@mail.com\" }\r\n```\r\n\r\nThe responses bodies I want to achieve are:\r\n\r\n`GET /api/person`\r\n```json\r\n{ \r\n  \"success\": true/false,\r\n  \"message\": \"Some error message if an error occurred\",\r\n  \"data\": [{ \"id\": 1, \"name\": \"Jahir\", \"age\": 23, \"email\": \"mail@mail.com\" }]\r\n}\r\n```\r\n\r\n`GET /api/person/<int:id>`\r\n```json\r\n{ \r\n  \"success\": true/false,\r\n  \"message\": \"Some error message if an error occurred\",\r\n  \"data\": { \"id\": 1, \"name\": \"Jahir\", \"age\": 23, \"email\": \"mail@mail.com\" }\r\n}\r\n```\r\n\r\nNotice `data` is an array for the default endpoint and an object if an id is given. I want this structure for any dao, so if I then add one for an todo, for example, I expect data to have objects of that type but `success` and `message` will stay\r\n\r\nI'd really appreciate any guidance on how to achieve this.\r\n\r\nThanks in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/90", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/90/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/90/events", "html_url": "https://github.com/python-restx/flask-restx/issues/90", "id": 583002754, "node_id": "MDU6SXNzdWU1ODMwMDI3NTQ=", "number": 90, "title": "Make it possible to include \"unused\" models in the generated swagger documentation", "user": {"login": "volfpeter", "id": 30116125, "node_id": "MDQ6VXNlcjMwMTE2MTI1", "avatar_url": "https://avatars1.githubusercontent.com/u/30116125?v=4", "gravatar_id": "", "url": "https://api.github.com/users/volfpeter", "html_url": "https://github.com/volfpeter", "followers_url": "https://api.github.com/users/volfpeter/followers", "following_url": "https://api.github.com/users/volfpeter/following{/other_user}", "gists_url": "https://api.github.com/users/volfpeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/volfpeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/volfpeter/subscriptions", "organizations_url": "https://api.github.com/users/volfpeter/orgs", "repos_url": "https://api.github.com/users/volfpeter/repos", "events_url": "https://api.github.com/users/volfpeter/events{/privacy}", "received_events_url": "https://api.github.com/users/volfpeter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547091, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDkx", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-17T13:12:36Z", "updated_at": "2020-04-12T14:54:26Z", "closed_at": "2020-04-12T14:54:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nWe use `flask-accepts` (`marshmallow`+`flask-restx`) to document and marshal our API. We would like to use the same tools to validate our custom JSON headers, but currently these extra models can't appear in the generated documentation because they are not a payload on any of our API endpoints.\r\n\r\nPossible solution:\r\n\r\nAdd this bit of code to `Swagger.as_dict()` in `flask_restx/swagger.py`:\r\n```Python\r\n# should_add_unused_models could come from a RESTX_INCLUDE_ALL_MODELS env var, default is False\r\nif should_add_unused_models:\r\n    for m in self.api.models:\r\n        self.register_model(m)\r\n```\r\n\r\nIf you feel this request is reasonable, I would be happy to contribute a PR.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/89", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/89/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/89/events", "html_url": "https://github.com/python-restx/flask-restx/issues/89", "id": 582681999, "node_id": "MDU6SXNzdWU1ODI2ODE5OTk=", "number": 89, "title": "Convert API to serverless function", "user": {"login": "harshthakur9030", "id": 38140305, "node_id": "MDQ6VXNlcjM4MTQwMzA1", "avatar_url": "https://avatars2.githubusercontent.com/u/38140305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshthakur9030", "html_url": "https://github.com/harshthakur9030", "followers_url": "https://api.github.com/users/harshthakur9030/followers", "following_url": "https://api.github.com/users/harshthakur9030/following{/other_user}", "gists_url": "https://api.github.com/users/harshthakur9030/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshthakur9030/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshthakur9030/subscriptions", "organizations_url": "https://api.github.com/users/harshthakur9030/orgs", "repos_url": "https://api.github.com/users/harshthakur9030/repos", "events_url": "https://api.github.com/users/harshthakur9030/events{/privacy}", "received_events_url": "https://api.github.com/users/harshthakur9030/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-17T00:54:32Z", "updated_at": "2020-03-22T06:14:44Z", "closed_at": "2020-03-22T06:14:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way I can convert my existing flask-restplus API to a serverless function? I've tried using Zappa framework to serve it but that didn't work. I know it's possible to use plain Flask but is there a way to use Flask-restplus ? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/88", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/88/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/88/events", "html_url": "https://github.com/python-restx/flask-restx/issues/88", "id": 582680668, "node_id": "MDU6SXNzdWU1ODI2ODA2Njg=", "number": 88, "title": "Timeout manually", "user": {"login": "harshthakur9030", "id": 38140305, "node_id": "MDQ6VXNlcjM4MTQwMzA1", "avatar_url": "https://avatars2.githubusercontent.com/u/38140305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshthakur9030", "html_url": "https://github.com/harshthakur9030", "followers_url": "https://api.github.com/users/harshthakur9030/followers", "following_url": "https://api.github.com/users/harshthakur9030/following{/other_user}", "gists_url": "https://api.github.com/users/harshthakur9030/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshthakur9030/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshthakur9030/subscriptions", "organizations_url": "https://api.github.com/users/harshthakur9030/orgs", "repos_url": "https://api.github.com/users/harshthakur9030/repos", "events_url": "https://api.github.com/users/harshthakur9030/events{/privacy}", "received_events_url": "https://api.github.com/users/harshthakur9030/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-17T00:49:21Z", "updated_at": "2020-03-18T08:28:21Z", "closed_at": "2020-03-17T21:31:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working with video processing of a live stream and I want to return a response after , say 30 seconds of processing if I dont find a particular result. I tried using Signal module but that doesn't work on a web server and I don't want to use the subprocess module(not sure that would either). What do I do to break out of the method?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/85", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/85/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/85/events", "html_url": "https://github.com/python-restx/flask-restx/issues/85", "id": 581679078, "node_id": "MDU6SXNzdWU1ODE2NzkwNzg=", "number": 85, "title": "ERROR: flask-restx 0.1.1 has requirement werkzeug<=0.16.1, but you'll have werkzeug 1.0.0 which is incompatible.", "user": {"login": "MeLight", "id": 704484, "node_id": "MDQ6VXNlcjcwNDQ4NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/704484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MeLight", "html_url": "https://github.com/MeLight", "followers_url": "https://api.github.com/users/MeLight/followers", "following_url": "https://api.github.com/users/MeLight/following{/other_user}", "gists_url": "https://api.github.com/users/MeLight/gists{/gist_id}", "starred_url": "https://api.github.com/users/MeLight/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MeLight/subscriptions", "organizations_url": "https://api.github.com/users/MeLight/orgs", "repos_url": "https://api.github.com/users/MeLight/repos", "events_url": "https://api.github.com/users/MeLight/events{/privacy}", "received_events_url": "https://api.github.com/users/MeLight/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-15T13:40:27Z", "updated_at": "2020-03-16T12:55:32Z", "closed_at": "2020-03-16T12:55:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, google has released an update to chrome which breaks how cookies work in 0.16.X werkzeug. werkzeug in turn released a fix, but in 1.0.0. When installing Flask-RESTX it threw this error:\r\nERROR: flask-restx 0.1.1 has requirement werkzeug<=0.16.1, but you'll have werkzeug 1.0.0 which is incompatible.\r\n\r\nHow would I address this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/83", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/83/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/83/events", "html_url": "https://github.com/python-restx/flask-restx/issues/83", "id": 580285769, "node_id": "MDU6SXNzdWU1ODAyODU3Njk=", "number": 83, "title": "Upgrade packages in light of deprecation warnings", "user": {"login": "andreixk", "id": 17452117, "node_id": "MDQ6VXNlcjE3NDUyMTE3", "avatar_url": "https://avatars1.githubusercontent.com/u/17452117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreixk", "html_url": "https://github.com/andreixk", "followers_url": "https://api.github.com/users/andreixk/followers", "following_url": "https://api.github.com/users/andreixk/following{/other_user}", "gists_url": "https://api.github.com/users/andreixk/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreixk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreixk/subscriptions", "organizations_url": "https://api.github.com/users/andreixk/orgs", "repos_url": "https://api.github.com/users/andreixk/repos", "events_url": "https://api.github.com/users/andreixk/events{/privacy}", "received_events_url": "https://api.github.com/users/andreixk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547091, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDkx", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-12T23:48:35Z", "updated_at": "2020-03-22T23:35:16Z", "closed_at": "2020-03-22T23:35:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the unit tests are always throwing the following DeprecationWarnings:\r\n\r\n> app/lib/python3.8/site-packages/flask_restx/model.py:12\r\n>   /private/var/www/html/api/app/lib/python3.8/site-packages/flask_restx/model.py:12: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working\r\n>     from collections import OrderedDict, MutableMapping\r\n> \r\n> app/lib/python3.8/site-packages/flask_restx/api.py:28\r\n>   /private/var/www/html/api/app/lib/python3.8/site-packages/flask_restx/api.py:28: DeprecationWarning: The import 'werkzeug.cached_property' is deprecated and will be removed in Werkzeug 1.0. Use 'from werkzeug.utils import cached_property' instead.\r\n>     from werkzeug import cached_property\r\n> \r\n> app/lib/python3.8/site-packages/flask_restx/swagger.py:12\r\n>   /private/var/www/html/api/app/lib/python3.8/site-packages/flask_restx/swagger.py:12: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working\r\n>     from collections import OrderedDict, Hashable\r\n\r\nIt would be a good idea to upgrade them to avoid broken releases in the near future", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/75", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/75/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/75/events", "html_url": "https://github.com/python-restx/flask-restx/issues/75", "id": 577743461, "node_id": "MDU6SXNzdWU1Nzc3NDM0NjE=", "number": 75, "title": "Error in marshalling can cause a TypeError", "user": {"login": "robyoung", "id": 14287, "node_id": "MDQ6VXNlcjE0Mjg3", "avatar_url": "https://avatars3.githubusercontent.com/u/14287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robyoung", "html_url": "https://github.com/robyoung", "followers_url": "https://api.github.com/users/robyoung/followers", "following_url": "https://api.github.com/users/robyoung/following{/other_user}", "gists_url": "https://api.github.com/users/robyoung/gists{/gist_id}", "starred_url": "https://api.github.com/users/robyoung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robyoung/subscriptions", "organizations_url": "https://api.github.com/users/robyoung/orgs", "repos_url": "https://api.github.com/users/robyoung/repos", "events_url": "https://api.github.com/users/robyoung/events{/privacy}", "received_events_url": "https://api.github.com/users/robyoung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-09T08:44:51Z", "updated_at": "2020-05-30T21:34:01Z", "closed_at": "2020-05-30T21:34:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### **Code**\r\n\r\n```python\r\nfrom flask_restx import Model, marshal, fields\r\n\r\nmodel = Model('Test', {'field': fields.Float()})\r\n\r\nmarshal({'field': {'min': '12.1', 'max': '12.2'}}, model)\r\n```\r\n\r\n### **Expected Behavior**\r\nGiven the example code I would expect to receive a `MarshallingError` with a useful error message directing me to where the problem is.\r\n\r\n### **Actual Behavior**\r\nI receive a `TypeError` only telling me the underlying error with no context.\r\n\r\n### **Environment**\r\n- Python version: 3.8\r\n- Flask version: 1.1.1\r\n- Flask-RESTX version: 0.1.1\r\n\r\n### **Additional Context**\r\nI have a PR incoming for this. I am opening this issue as that is what the CONTRIBUTING guidelines suggest.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/73", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/73/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/73/events", "html_url": "https://github.com/python-restx/flask-restx/issues/73", "id": 576370759, "node_id": "MDU6SXNzdWU1NzYzNzA3NTk=", "number": 73, "title": "Swagger set host field?", "user": {"login": "nlarusstone", "id": 7347808, "node_id": "MDQ6VXNlcjczNDc4MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7347808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nlarusstone", "html_url": "https://github.com/nlarusstone", "followers_url": "https://api.github.com/users/nlarusstone/followers", "following_url": "https://api.github.com/users/nlarusstone/following{/other_user}", "gists_url": "https://api.github.com/users/nlarusstone/gists{/gist_id}", "starred_url": "https://api.github.com/users/nlarusstone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nlarusstone/subscriptions", "organizations_url": "https://api.github.com/users/nlarusstone/orgs", "repos_url": "https://api.github.com/users/nlarusstone/repos", "events_url": "https://api.github.com/users/nlarusstone/events{/privacy}", "received_events_url": "https://api.github.com/users/nlarusstone/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-05T16:17:18Z", "updated_at": "2020-03-05T21:28:40Z", "closed_at": "2020-03-05T16:22:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Ask a question**\r\nI'm using flask-restx to set up an API, and then I'm trying to generate a python client using swagger codegen. Here's the swagger that gets generated.\r\n\r\n```json\r\n\r\n  \"swagger\": \"2.0\",\r\n  \"basePath\": \"/\",\r\n  \"paths\": {\r\n  ...\r\n  },\r\n  \"info\": {\r\n  ...\r\n  },\r\n  \"produces\": [\r\n    \"application/json\"\r\n  ],\r\n  \"consumes\": [\r\n    \"application/json\"\r\n  ],\r\n  \"tags\": [\r\n  ...\r\n  ],\r\n  \"definitions\": {\r\n  ...\r\n  },\r\n  \"responses\": {\r\n   ...\r\n  }\r\n}\r\n```\r\n\r\nHowever, I'd like to add the `host` field (which seems to be allowed by https://swagger.io/docs/specification/2-0/api-host-and-base-path/). I can't find anywhere in the flask-restx where I can set it. Does anyone know? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/72", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/72/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/72/events", "html_url": "https://github.com/python-restx/flask-restx/issues/72", "id": 576233614, "node_id": "MDU6SXNzdWU1NzYyMzM2MTQ=", "number": 72, "title": "Possible to rewrite BadRequest response contents?", "user": {"login": "agjendem", "id": 1482827, "node_id": "MDQ6VXNlcjE0ODI4Mjc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1482827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agjendem", "html_url": "https://github.com/agjendem", "followers_url": "https://api.github.com/users/agjendem/followers", "following_url": "https://api.github.com/users/agjendem/following{/other_user}", "gists_url": "https://api.github.com/users/agjendem/gists{/gist_id}", "starred_url": "https://api.github.com/users/agjendem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agjendem/subscriptions", "organizations_url": "https://api.github.com/users/agjendem/orgs", "repos_url": "https://api.github.com/users/agjendem/repos", "events_url": "https://api.github.com/users/agjendem/events{/privacy}", "received_events_url": "https://api.github.com/users/agjendem/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-05T12:55:42Z", "updated_at": "2020-03-06T08:53:41Z", "closed_at": "2020-03-06T08:50:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Ask a question**\r\nHi! \r\n\r\nThis might very well be by design or my incorrect usage of the framework, but I expected to be able to use an error handler to rewrite the response generated when a request fails input validation as defined by my @api.expect()-model.\r\n\r\nI'm replacing a system, and I'm trying to keep the responses as close to the old systems format as possible.\r\n\r\nI can see while debugging that my custom error handler is triggered, but it seems as there is a \"data\"-field on the BadRequest exception, that my response in the end is disregarded and the original message is returned to the client? (https://github.com/python-restx/flask-restx/blob/master/flask_restx/api.py#L700)\r\n\r\n**Additional context**\r\nCode to reproduce the issue:\r\n```python\r\nfrom flask import Flask, request\r\nfrom flask_restx import Resource, Api, fields\r\n\r\n\r\napp = Flask(__name__)\r\napp.config['PROPAGATE_EXCEPTIONS'] = False\r\napi = Api(app)\r\n\r\n\r\n# Actual validation error: werkzeug.exceptions.BadRequest\r\n@api.errorhandler(Exception)\r\ndef handle_validation_error(error):\r\n    return {'my custom': 'error message'}, 400\r\n\r\n\r\nresource_fields = api.model('Resource', {\r\n    'name': fields.String,\r\n})\r\n\r\n\r\n@api.route('/hello')\r\nclass HelloResource(Resource):\r\n    @api.expect(resource_fields, validate=True)\r\n    def post(self):\r\n        json_data = request.get_json()\r\n        return f'Hello {json_data[\"name\"]}', 200\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n```\r\n\r\n* Invalid request that I hoped should return my custom error message as json:\r\n```bash\r\ncurl --data '{\"name\": 42}' -H 'Content-Type: application/json' http://127.0.0.1:5000/hello\r\n```\r\n\r\nActual response:\r\n```JSON\r\n{\r\n    \"errors\": {\r\n        \"name\": \"42 is not of type 'string'\"\r\n    },\r\n    \"message\": \"Input payload validation failed\"\r\n}\r\n```\r\nExpected response:\r\n```JSON\r\n{\"my custom\": \"error message\"}\r\n```\r\n\r\n\r\n* Valid request (for reference):\r\n```bash\r\ncurl --data '{\"name\": \"Anders\"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/hello\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/65", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/65/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/65/events", "html_url": "https://github.com/python-restx/flask-restx/issues/65", "id": 566878904, "node_id": "MDU6SXNzdWU1NjY4Nzg5MDQ=", "number": 65, "title": "List Response Model", "user": {"login": "Domhnall-Liopa", "id": 57906089, "node_id": "MDQ6VXNlcjU3OTA2MDg5", "avatar_url": "https://avatars2.githubusercontent.com/u/57906089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Domhnall-Liopa", "html_url": "https://github.com/Domhnall-Liopa", "followers_url": "https://api.github.com/users/Domhnall-Liopa/followers", "following_url": "https://api.github.com/users/Domhnall-Liopa/following{/other_user}", "gists_url": "https://api.github.com/users/Domhnall-Liopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/Domhnall-Liopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Domhnall-Liopa/subscriptions", "organizations_url": "https://api.github.com/users/Domhnall-Liopa/orgs", "repos_url": "https://api.github.com/users/Domhnall-Liopa/repos", "events_url": "https://api.github.com/users/Domhnall-Liopa/events{/privacy}", "received_events_url": "https://api.github.com/users/Domhnall-Liopa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-18T13:03:35Z", "updated_at": "2020-02-18T19:27:01Z", "closed_at": "2020-02-18T19:27:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to document my response model as a list of strings like: \r\n```\r\n[\r\n    \"value1\", \r\n    \"value2\"\r\n]\r\n\r\n```\r\nwhich is valid JSON.\r\nSo I want to be able to do something like: \r\n```\r\nresponse_model = ns.model('Response', [\r\n    fields.String()\r\n])\r\n```\r\n\r\nIs there a way of doing this currently without having to use a dict object in ns.model?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/64", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/64/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/64/events", "html_url": "https://github.com/python-restx/flask-restx/issues/64", "id": 566860170, "node_id": "MDU6SXNzdWU1NjY4NjAxNzA=", "number": 64, "title": "Add pre-flight requests", "user": {"login": "jonatasoli", "id": 26334101, "node_id": "MDQ6VXNlcjI2MzM0MTAx", "avatar_url": "https://avatars0.githubusercontent.com/u/26334101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonatasoli", "html_url": "https://github.com/jonatasoli", "followers_url": "https://api.github.com/users/jonatasoli/followers", "following_url": "https://api.github.com/users/jonatasoli/following{/other_user}", "gists_url": "https://api.github.com/users/jonatasoli/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonatasoli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonatasoli/subscriptions", "organizations_url": "https://api.github.com/users/jonatasoli/orgs", "repos_url": "https://api.github.com/users/jonatasoli/repos", "events_url": "https://api.github.com/users/jonatasoli/events{/privacy}", "received_events_url": "https://api.github.com/users/jonatasoli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547091, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDkx", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-18T12:28:52Z", "updated_at": "2020-02-26T15:59:08Z", "closed_at": "2020-02-26T15:59:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nWhenever I'm making a request using the axes of the vue I have problems due to the pre-flight call, as it sends an Option before doing the GET / POST / ETC\r\n\r\nI think it would be interesting to have an annotation that allows me to enable a pre-flight check on my endpoints.\r\n\r\nif you had something like this it would be great:\r\n\r\n```\r\nclass SignIn (Resource):\r\n\u00a0\u00a0\u00a0\u00a0\"\" \"Sign in User and return jwt token\" \"\"\r\n\u00a0\u00a0\u00a0\u00a0@ api.expect (sign_in)\r\n\u00a0\u00a0\u00a0\u00a0@ api.marshal_with (auth_user, code = 200)\r\n\u00a0\u00a0\u00a0\u00a0@ pre-flight.enabled()\r\n\u00a0\u00a0\u00a0\u00a0def post (self):\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\" \"Return Login User\" \"\"\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0api_payload = api.payload\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return signin (api_payload)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/61", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/61/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/61/events", "html_url": "https://github.com/python-restx/flask-restx/issues/61", "id": 565812596, "node_id": "MDU6SXNzdWU1NjU4MTI1OTY=", "number": 61, "title": "Werkzeug ImportError", "user": {"login": "abdounasser202", "id": 11424142, "node_id": "MDQ6VXNlcjExNDI0MTQy", "avatar_url": "https://avatars3.githubusercontent.com/u/11424142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abdounasser202", "html_url": "https://github.com/abdounasser202", "followers_url": "https://api.github.com/users/abdounasser202/followers", "following_url": "https://api.github.com/users/abdounasser202/following{/other_user}", "gists_url": "https://api.github.com/users/abdounasser202/gists{/gist_id}", "starred_url": "https://api.github.com/users/abdounasser202/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abdounasser202/subscriptions", "organizations_url": "https://api.github.com/users/abdounasser202/orgs", "repos_url": "https://api.github.com/users/abdounasser202/repos", "events_url": "https://api.github.com/users/abdounasser202/events{/privacy}", "received_events_url": "https://api.github.com/users/abdounasser202/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1777547088, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg4", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-15T21:34:34Z", "updated_at": "2020-02-15T23:49:29Z", "closed_at": "2020-02-15T23:49:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Got an ImportError on ../flask_restx/api.py\r\n\r\n### **Code**\r\n\r\n```python\r\nfrom werkzeug import cached_property\r\n```\r\n\r\n### **Expected Behavior**\r\n*cached_property* is not longer located in *werkzeug* for werkzeug 1.0.0\r\n\r\n### **Actual Behavior**\r\n*cached_property* is located in *werkzeug.utils* for werkzeug 1.0.0\r\n\r\n### **Error Messages/Stack Trace**\r\n```\r\nError: While importing \"run\", an ImportError was raised:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/nasser/.local/lib/python3.6/site-packages/flask/cli.py\", line 240, in locate_app\r\n    __import__(module_name)\r\n  File \"/home/nasser/me/cs/IslamApp/run.py\", line 3, in <module>\r\n    from application import app\r\n  File \"/home/nasser/me/cs/IslamApp/application/__init__.py\", line 51, in <module>\r\n    module = importlib.import_module(plugin['path'], package='application')\r\n  File \"/usr/lib/python3.6/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"/home/nasser/me/cs/IslamApp/application/api/__init__.py\", line 4, in <module>\r\n    from flask_restx import Api\r\n  File \"/home/nasser/.local/lib/python3.6/site-packages/flask_restx/__init__.py\", line 5, in <module>\r\n    from .api import Api  # noqa\r\n  File \"/home/nasser/.local/lib/python3.6/site-packages/flask_restx/api.py\", line 28, in <module>\r\n    from werkzeug import cached_property\r\nImportError: cannot import name 'cached_property'\r\n```\r\n\r\n### **Environment**\r\n- Python 3.6.9\r\n- Flask 1.1.1\r\n- Flask-RESTX 0.1.1\r\n- flask-sqlalchemy 2.4.1\r\n- flask-debugtoolbar 0.10.1\r\n- flask-login 0.5.0\r\n- flask-migrate 2.5.2\r\n- flask-wtf 0.14.3\r\n\r\n### **Additional Context**\r\n\r\nI think it's good to release a version for werkzeug 1.0.0 since it has been release 2020-02-06\r\nThis is the blogpost about https://www.palletsprojects.com/blog/werkzeug-1-0-0-released/\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/58", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/58/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/58/events", "html_url": "https://github.com/python-restx/flask-restx/issues/58", "id": 565253981, "node_id": "MDU6SXNzdWU1NjUyNTM5ODE=", "number": 58, "title": "Swagger documentation behind a reverse proxy with subpaths", "user": {"login": "alexlopezc", "id": 15103930, "node_id": "MDQ6VXNlcjE1MTAzOTMw", "avatar_url": "https://avatars1.githubusercontent.com/u/15103930?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexlopezc", "html_url": "https://github.com/alexlopezc", "followers_url": "https://api.github.com/users/alexlopezc/followers", "following_url": "https://api.github.com/users/alexlopezc/following{/other_user}", "gists_url": "https://api.github.com/users/alexlopezc/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexlopezc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexlopezc/subscriptions", "organizations_url": "https://api.github.com/users/alexlopezc/orgs", "repos_url": "https://api.github.com/users/alexlopezc/repos", "events_url": "https://api.github.com/users/alexlopezc/events{/privacy}", "received_events_url": "https://api.github.com/users/alexlopezc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547091, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDkx", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-02-14T10:59:39Z", "updated_at": "2020-07-18T01:30:01Z", "closed_at": "2020-03-22T21:39:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "When deploying a service behind a proxy reverse (Traefik) and under a subpath domain (https://api.example.com/service1) swagger.json and swagger-ui sources are not available since flask-restx is looking for them in the root url (https://api-example.com/swagger.json).\r\n\r\nMy current solution is to set an environment variable for the subpath domain and redefining where the files are located:\r\n\r\n```python\r\n    if Config.URL_SUBDOMAIN:\r\n        @apidoc.apidoc.add_app_template_global\r\n        def swagger_static(filename):\r\n            return \"{0}/swaggerui/{1}\".format(Config.URL_SUBDOMAIN, filename)\r\n\r\n    api = Api(app=app, doc='/doc', version=version(), title=\"API documentation\")\r\n\r\n    if Config.URL_SUBDOMAIN:\r\n        @api.documentation\r\n        def custom_ui():\r\n            return render_template(\"swagger-ui.html\", title=api.title, specs_url=\"{}/swagger.json\".format(Config.URL_SUBDOMAIN))\r\n```\r\n\r\nWith this solution the access to the documentation is available but we can not execute the queries from swagger-ui since it does not now anything about the subpath domain.\r\n\r\nFlask-restx and swagger-ui should respect the full url where the api is being served.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/55", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/55/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/55/events", "html_url": "https://github.com/python-restx/flask-restx/issues/55", "id": 564757382, "node_id": "MDU6SXNzdWU1NjQ3NTczODI=", "number": 55, "title": "use black to enforce codestyle", "user": {"login": "ziirish", "id": 449711, "node_id": "MDQ6VXNlcjQ0OTcxMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/449711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ziirish", "html_url": "https://github.com/ziirish", "followers_url": "https://api.github.com/users/ziirish/followers", "following_url": "https://api.github.com/users/ziirish/following{/other_user}", "gists_url": "https://api.github.com/users/ziirish/gists{/gist_id}", "starred_url": "https://api.github.com/users/ziirish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ziirish/subscriptions", "organizations_url": "https://api.github.com/users/ziirish/orgs", "repos_url": "https://api.github.com/users/ziirish/repos", "events_url": "https://api.github.com/users/ziirish/events{/privacy}", "received_events_url": "https://api.github.com/users/ziirish/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1837165002, "node_id": "MDU6TGFiZWwxODM3MTY1MDAy", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/ci/cd", "name": "ci/cd", "color": "6104db", "default": false, "description": "Continuous Integration and Continuous Delivery tasks"}, {"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": {"login": "SVilgelm", "id": 523825, "node_id": "MDQ6VXNlcjUyMzgyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/523825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SVilgelm", "html_url": "https://github.com/SVilgelm", "followers_url": "https://api.github.com/users/SVilgelm/followers", "following_url": "https://api.github.com/users/SVilgelm/following{/other_user}", "gists_url": "https://api.github.com/users/SVilgelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/SVilgelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SVilgelm/subscriptions", "organizations_url": "https://api.github.com/users/SVilgelm/orgs", "repos_url": "https://api.github.com/users/SVilgelm/repos", "events_url": "https://api.github.com/users/SVilgelm/events{/privacy}", "received_events_url": "https://api.github.com/users/SVilgelm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SVilgelm", "id": 523825, "node_id": "MDQ6VXNlcjUyMzgyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/523825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SVilgelm", "html_url": "https://github.com/SVilgelm", "followers_url": "https://api.github.com/users/SVilgelm/followers", "following_url": "https://api.github.com/users/SVilgelm/following{/other_user}", "gists_url": "https://api.github.com/users/SVilgelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/SVilgelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SVilgelm/subscriptions", "organizations_url": "https://api.github.com/users/SVilgelm/orgs", "repos_url": "https://api.github.com/users/SVilgelm/repos", "events_url": "https://api.github.com/users/SVilgelm/events{/privacy}", "received_events_url": "https://api.github.com/users/SVilgelm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 16, "created_at": "2020-02-13T15:23:19Z", "updated_at": "2020-02-26T16:51:57Z", "closed_at": "2020-02-26T16:51:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Any thoughts on using [black](https://github.com/psf/black) in order to enforce a coding style?\r\n\r\nThis way we don't have to bother our contributors with a codestyle, they just have to run black prior submitting a PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/53", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/53/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/53/events", "html_url": "https://github.com/python-restx/flask-restx/issues/53", "id": 563276215, "node_id": "MDU6SXNzdWU1NjMyNzYyMTU=", "number": 53, "title": "Using tokenless Codecov action", "user": {"login": "SVilgelm", "id": 523825, "node_id": "MDQ6VXNlcjUyMzgyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/523825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SVilgelm", "html_url": "https://github.com/SVilgelm", "followers_url": "https://api.github.com/users/SVilgelm/followers", "following_url": "https://api.github.com/users/SVilgelm/following{/other_user}", "gists_url": "https://api.github.com/users/SVilgelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/SVilgelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SVilgelm/subscriptions", "organizations_url": "https://api.github.com/users/SVilgelm/orgs", "repos_url": "https://api.github.com/users/SVilgelm/repos", "events_url": "https://api.github.com/users/SVilgelm/events{/privacy}", "received_events_url": "https://api.github.com/users/SVilgelm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1837165002, "node_id": "MDU6TGFiZWwxODM3MTY1MDAy", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/ci/cd", "name": "ci/cd", "color": "6104db", "default": false, "description": "Continuous Integration and Continuous Delivery tasks"}], "state": "closed", "locked": false, "assignee": {"login": "SVilgelm", "id": 523825, "node_id": "MDQ6VXNlcjUyMzgyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/523825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SVilgelm", "html_url": "https://github.com/SVilgelm", "followers_url": "https://api.github.com/users/SVilgelm/followers", "following_url": "https://api.github.com/users/SVilgelm/following{/other_user}", "gists_url": "https://api.github.com/users/SVilgelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/SVilgelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SVilgelm/subscriptions", "organizations_url": "https://api.github.com/users/SVilgelm/orgs", "repos_url": "https://api.github.com/users/SVilgelm/repos", "events_url": "https://api.github.com/users/SVilgelm/events{/privacy}", "received_events_url": "https://api.github.com/users/SVilgelm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SVilgelm", "id": 523825, "node_id": "MDQ6VXNlcjUyMzgyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/523825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SVilgelm", "html_url": "https://github.com/SVilgelm", "followers_url": "https://api.github.com/users/SVilgelm/followers", "following_url": "https://api.github.com/users/SVilgelm/following{/other_user}", "gists_url": "https://api.github.com/users/SVilgelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/SVilgelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SVilgelm/subscriptions", "organizations_url": "https://api.github.com/users/SVilgelm/orgs", "repos_url": "https://api.github.com/users/SVilgelm/repos", "events_url": "https://api.github.com/users/SVilgelm/events{/privacy}", "received_events_url": "https://api.github.com/users/SVilgelm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2020-02-11T15:16:49Z", "updated_at": "2020-03-18T15:43:39Z", "closed_at": "2020-03-18T15:43:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Replace the Coveralls Travis CI and GitHub Actions Yes step with Codecov action when they implemented the tokenless upload: https://github.com/codecov/codecov-action/issues/29\n\n<!-- probot = {\"6728144\":{\"who\":\"SVilgelm\",\"what\":\"\",\"when\":\"2020-02-24T09:00:00.000Z\"}} -->", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/52", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/52/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/52/events", "html_url": "https://github.com/python-restx/flask-restx/issues/52", "id": 562831134, "node_id": "MDU6SXNzdWU1NjI4MzExMzQ=", "number": 52, "title": "CI is broken for Coveralls", "user": {"login": "plowman", "id": 148066, "node_id": "MDQ6VXNlcjE0ODA2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/148066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plowman", "html_url": "https://github.com/plowman", "followers_url": "https://api.github.com/users/plowman/followers", "following_url": "https://api.github.com/users/plowman/following{/other_user}", "gists_url": "https://api.github.com/users/plowman/gists{/gist_id}", "starred_url": "https://api.github.com/users/plowman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plowman/subscriptions", "organizations_url": "https://api.github.com/users/plowman/orgs", "repos_url": "https://api.github.com/users/plowman/repos", "events_url": "https://api.github.com/users/plowman/events{/privacy}", "received_events_url": "https://api.github.com/users/plowman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1837165002, "node_id": "MDU6TGFiZWwxODM3MTY1MDAy", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/ci/cd", "name": "ci/cd", "color": "6104db", "default": false, "description": "Continuous Integration and Continuous Delivery tasks"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-10T21:13:59Z", "updated_at": "2020-02-11T15:09:45Z", "closed_at": "2020-02-11T15:09:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### **Repro Steps**\r\n1. Create a PR\r\n2. The tests run nicely in each environment\r\n3. But suddenly, something goes wrong...\r\n\r\n### **Expected Behavior**\r\nThe tests, coveralls, etc. should all pass.\r\n\r\n### **Actual Behavior**\r\nCoveralls does not pass\r\n\r\n### **Error Messages/Stack Trace**\r\nYou can see an example failure [here](https://github.com/python-restx/flask-restx/pull/35/checks?check_run_id=437142210).\r\n```\r\nNot on TravisCI. You have to provide either repo_token in .coveralls.yml or set the COVERALLS_REPO_TOKEN env var.\r\nTraceback (most recent call last):\r\n  File \"/opt/hostedtoolcache/Python/3.6.10/x64/lib/python3.6/site-packages/coveralls/cli.py\", line 61, in main\r\n    service_name=options['--service'])\r\n  File \"/opt/hostedtoolcache/Python/3.6.10/x64/lib/python3.6/site-packages/coveralls/api.py\", line 58, in __init__\r\n    self.ensure_token()\r\n  File \"/opt/hostedtoolcache/Python/3.6.10/x64/lib/python3.6/site-packages/coveralls/api.py\", line 67, in ensure_token\r\n    self.config_filename))\r\ncoveralls.exception.CoverallsException: Not on TravisCI. You have to provide either repo_token in .coveralls.yml or set the COVERALLS_REPO_TOKEN env var.\r\n##[error]Process completed with exit code 1.\r\n```\r\n\r\n### **Additional Context**\r\n* The probably fix here is to create a Github encrypted secret to match the `COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}` line in test.yml\r\n* This is blocking the tests from passing on #35.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/51", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/51/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/51/events", "html_url": "https://github.com/python-restx/flask-restx/issues/51", "id": 562730593, "node_id": "MDU6SXNzdWU1NjI3MzA1OTM=", "number": 51, "title": "Feature request: Models based on dataclasses", "user": {"login": "dillondaudert", "id": 8727185, "node_id": "MDQ6VXNlcjg3MjcxODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/8727185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dillondaudert", "html_url": "https://github.com/dillondaudert", "followers_url": "https://api.github.com/users/dillondaudert/followers", "following_url": "https://api.github.com/users/dillondaudert/following{/other_user}", "gists_url": "https://api.github.com/users/dillondaudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/dillondaudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dillondaudert/subscriptions", "organizations_url": "https://api.github.com/users/dillondaudert/orgs", "repos_url": "https://api.github.com/users/dillondaudert/repos", "events_url": "https://api.github.com/users/dillondaudert/events{/privacy}", "received_events_url": "https://api.github.com/users/dillondaudert/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547091, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDkx", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}, {"id": 1777547106, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTA2", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": "This will not be worked on"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-02-10T18:01:27Z", "updated_at": "2020-02-13T15:32:08Z", "closed_at": "2020-02-13T15:26:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm interested in this feature, so I'm re-opening this [issue](https://github.com/noirbizarre/flask-restplus/issues/709) for flask-restx (@casparjespersen): \r\n\r\n> Since Python 3.7 `dataclasses` was introduced. This is an easy way to define data models:\r\n> \r\n> ```python\r\n> from dataclasses import dataclass\r\n> \r\n> @dataclass\r\n> class Foo:\r\n>    name: str\r\n>    age: int\r\n> \r\n> @dataclass\r\n> class Bar:\r\n>    foo: Foo\r\n> \r\n> bar = Bar(Foo(\"Jane Doe\", 42))\r\n> ```\r\n> \r\n> There is a growing eco-system around this, e.g. [the `jsons` module](https://github.com/ramonhagenaars/jsons) that allows (de)serialization of such objects:\r\n> \r\n> ```python\r\n> import jsons\r\n> \r\n> bar_dict = jsons.dump(bar)\r\n> assert isinstance(bar_dict, dict)\r\n> \r\n> bar_again = jsons.load(bar_dict, cls=Bar)\r\n> assert isinstance(bar_again, Bar)\r\n> ```\r\n> \r\n> It would be interesting to have a discussion on supporting dataclasses as valid model types in flask-restplus, since it is a Python-native data structure (compared to e.g. marshmallow), but it appears (to my knowledge?) to lack validation metadata, etc.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/50", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/50/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/50/events", "html_url": "https://github.com/python-restx/flask-restx/issues/50", "id": 562701649, "node_id": "MDU6SXNzdWU1NjI3MDE2NDk=", "number": 50, "title": "Flask-RestPlus drop in replacement milestone", "user": {"login": "CrazyBonze", "id": 7456150, "node_id": "MDQ6VXNlcjc0NTYxNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7456150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CrazyBonze", "html_url": "https://github.com/CrazyBonze", "followers_url": "https://api.github.com/users/CrazyBonze/followers", "following_url": "https://api.github.com/users/CrazyBonze/following{/other_user}", "gists_url": "https://api.github.com/users/CrazyBonze/gists{/gist_id}", "starred_url": "https://api.github.com/users/CrazyBonze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CrazyBonze/subscriptions", "organizations_url": "https://api.github.com/users/CrazyBonze/orgs", "repos_url": "https://api.github.com/users/CrazyBonze/repos", "events_url": "https://api.github.com/users/CrazyBonze/events{/privacy}", "received_events_url": "https://api.github.com/users/CrazyBonze/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-10T17:07:18Z", "updated_at": "2020-02-12T14:06:14Z", "closed_at": "2020-02-12T14:06:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "After the werkzeug issue #35 that also hit Flask-RestPlus I thought about jumping over to Flask-RestX but i am not sure how stable or close this fork is to the original. I am assuming release 1.0 is the goal for a drop in replacement with only bug fixes and no API breaking changes right? I is safe to move over now?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/37", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/37/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/37/events", "html_url": "https://github.com/python-restx/flask-restx/issues/37", "id": 561656455, "node_id": "MDU6SXNzdWU1NjE2NTY0NTU=", "number": 37, "title": "Address Werkzeug, Flask, and Python Versions for flask-restx 0.2.0", "user": {"login": "j5awry", "id": 8875872, "node_id": "MDQ6VXNlcjg4NzU4NzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8875872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/j5awry", "html_url": "https://github.com/j5awry", "followers_url": "https://api.github.com/users/j5awry/followers", "following_url": "https://api.github.com/users/j5awry/following{/other_user}", "gists_url": "https://api.github.com/users/j5awry/gists{/gist_id}", "starred_url": "https://api.github.com/users/j5awry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/j5awry/subscriptions", "organizations_url": "https://api.github.com/users/j5awry/orgs", "repos_url": "https://api.github.com/users/j5awry/repos", "events_url": "https://api.github.com/users/j5awry/events{/privacy}", "received_events_url": "https://api.github.com/users/j5awry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547091, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDkx", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}, {"id": 1777547094, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDk0", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-07T14:04:21Z", "updated_at": "2020-04-05T19:43:57Z", "closed_at": "2020-04-05T19:43:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Werkzeug 1.0 was released Feb 6th and removes py3.4 support.\r\nFlask requires Werkzeug >= 0.15.0, so a default install from scratch will pull WZ 1.0\r\nFlask has moved onto the 1.X series as of mid-2018 but we \"allow\" 0.8+\r\n\r\nAddress the large variance and forward motion of flask and werkzeug.\r\n\r\nFlask >= 1.0.2 (1.0 and 1.0.1 had bugs. 1.0.2 stayed stable for ayear)\r\nWerkzeug >= 1.0 (yes, forcing forward compatibility with 1.0 series)\r\n\r\nremove py34 \r\n\r\nRelated to #34 and #35 \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/36", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/36/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/36/events", "html_url": "https://github.com/python-restx/flask-restx/issues/36", "id": 561443698, "node_id": "MDU6SXNzdWU1NjE0NDM2OTg=", "number": 36, "title": "Setting the api representation through the namespace", "user": {"login": "olinger", "id": 5412354, "node_id": "MDQ6VXNlcjU0MTIzNTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5412354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olinger", "html_url": "https://github.com/olinger", "followers_url": "https://api.github.com/users/olinger/followers", "following_url": "https://api.github.com/users/olinger/following{/other_user}", "gists_url": "https://api.github.com/users/olinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/olinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olinger/subscriptions", "organizations_url": "https://api.github.com/users/olinger/orgs", "repos_url": "https://api.github.com/users/olinger/repos", "events_url": "https://api.github.com/users/olinger/events{/privacy}", "received_events_url": "https://api.github.com/users/olinger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-07T06:17:21Z", "updated_at": "2020-02-07T15:53:05Z", "closed_at": "2020-02-07T15:53:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "### **Code**\r\n\r\n```python\r\nfrom flask_restx import Resource, Namespace\r\nfrom flask_accepts import accepts, responds\r\n\r\nfrom app.main.service.kick_event_service import get_all_kick_events, save_new_kick_event\r\nfrom app.main.model.kick_event import KickEventSchema\r\n\r\napi = Namespace('kick_event', description='kick event related operations')\r\n\r\n@api.route('/')\r\nclass KickEventResource(Resource):\r\n    @responds(schema=KickEventSchema, many=True)\r\n    @api.produces([\"application/vnd.api+json\"])\r\n    #@api.representation('application/vnd.api+json') <- no bueno\r\n    def get(self):\r\n        \"\"\"List all Kick Events\"\"\"\r\n        return get_all_kick_events()\r\n```\r\n\r\n### **Expected Behavior**\r\nI am trying to set the content-type of my response header. I am converting my api to JSON-API standard and so I need to use header \"content-type:application/vnd.api+json\".\r\n\r\n### **Actual Behavior**\r\nI saw in the documentation (https://flask-restx.readthedocs.io/en/latest/api.html#flask_restx.Api.representation) that there is the \"representation\" method which seemed to be what I needed, but adding `@api.representation('application/vnd.api+json')`\r\nto my code gives me error: \"Instance of 'Namespace' has no 'representation' member\".\r\n\r\n### **Error Messages**\r\n\"Instance of 'Namespace' has no 'representation' member\".\r\n\r\n### **Environment**\r\n- Python version : 3.8\r\n- Flask version: 1.1.1\r\n- Flask-RESTX version: 0.1.0\r\n- Other installed Flask extensions: flask-accepts\r\n\r\n### **Additional Context**\r\n\r\nDigging through the source code I can see that the namespace class and the api class are not the same, and that the \"representation\" method doesn't exist in the namespace class, so that error makes sense... But I would like to know how (if it's possible) to declare my api using a Namespace, and also be able to call the representation function.\r\n\r\nI managed to get what I wanted by changing `DEFAULT_REPRESENTATIONS = [('application/json', output_json)]` to this: `DEFAULT_REPRESENTATIONS = [('application/vnd.api+json', output_json)]` within the api.py file in the source code for the extension, so now ALL my endpoints have the correct header.. But I'd rather be able to pass it the correct way instead of just overriding the default, if possible.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/34", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/34/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/34/events", "html_url": "https://github.com/python-restx/flask-restx/issues/34", "id": 561303807, "node_id": "MDU6SXNzdWU1NjEzMDM4MDc=", "number": 34, "title": "Werkzeug V1.x breaks restx import", "user": {"login": "PaulWaldo", "id": 12105941, "node_id": "MDQ6VXNlcjEyMTA1OTQx", "avatar_url": "https://avatars1.githubusercontent.com/u/12105941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PaulWaldo", "html_url": "https://github.com/PaulWaldo", "followers_url": "https://api.github.com/users/PaulWaldo/followers", "following_url": "https://api.github.com/users/PaulWaldo/following{/other_user}", "gists_url": "https://api.github.com/users/PaulWaldo/gists{/gist_id}", "starred_url": "https://api.github.com/users/PaulWaldo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PaulWaldo/subscriptions", "organizations_url": "https://api.github.com/users/PaulWaldo/orgs", "repos_url": "https://api.github.com/users/PaulWaldo/repos", "events_url": "https://api.github.com/users/PaulWaldo/events{/privacy}", "received_events_url": "https://api.github.com/users/PaulWaldo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-02-06T22:19:16Z", "updated_at": "2020-02-13T15:30:46Z", "closed_at": "2020-02-13T15:30:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "### ***** **BEFORE LOGGING AN ISSUE** *****\r\n\r\n- Is this something you can **debug and fix**? Send a pull request! Bug fixes and documentation fixes are welcome.\r\n- Please check if a similar issue already exists or has been closed before. Seriously, nobody here is getting paid. Help us out and take five minutes to make sure you aren't submitting a duplicate.\r\n- Please review the [guidelines for contributing](https://github.com/python-restx/flask-restx/blob/master/CONTRIBUTING.rst)\r\n\r\n### **Code**\r\n\r\n```python\r\nfrom flask_restx import Api\r\n```\r\n\r\n### **Repro Steps** (if applicable)\r\n1. Use this Pipfile\r\n```\r\n[[source]]\r\nname = \"pypi\"\r\nurl = \"https://pypi.org/simple\"\r\nverify_ssl = true\r\n\r\n[dev-packages]\r\n\r\n[packages]\r\n#flask-restplus = \"*\"\r\nflask-restx = \"*\"\r\nflask = \"*\"\r\n\r\n[requires]\r\npython_version = \"3.7\"\r\n```\r\n2. `Pipenv install`\r\n3. Attempt to import Api from restx\r\n```\r\npaul-> python \r\nPython 3.7.6 (default, Dec 30 2019, 19:38:28) \r\n[Clang 11.0.0 (clang-1100.0.33.16)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from flask_restx import Api\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/paul/.local/share/virtualenvs/restplus-test-_yVwyWWD/lib/python3.7/site-packages/flask_restx/__init__.py\", line 5, in <module>\r\n    from .api import Api  # noqa\r\n  File \"/Users/paul/.local/share/virtualenvs/restplus-test-_yVwyWWD/lib/python3.7/site-packages/flask_restx/api.py\", line 28, in <module>\r\n    from werkzeug import cached_property\r\nImportError: cannot import name 'cached_property' from 'werkzeug' (/Users/paul/.local/share/virtualenvs/restplus-test-_yVwyWWD/lib/python3.7/site-packages/werkzeug/__init__.py)\r\n>>> \r\n```\r\n3. Broken!\r\n\r\n### **Expected Behavior**\r\nApi should be silently imported\r\n\r\n### **Actual Behavior**\r\nImport fails with error below\r\n\r\n### **Error Messages/Stack Trace**\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/paul/.local/share/virtualenvs/restplus-test-_yVwyWWD/lib/python3.7/site-packages/flask_restx/__init__.py\", line 5, in <module>\r\n    from .api import Api  # noqa\r\n  File \"/Users/paul/.local/share/virtualenvs/restplus-test-_yVwyWWD/lib/python3.7/site-packages/flask_restx/api.py\", line 28, in <module>\r\n    from werkzeug import cached_property\r\nImportError: cannot import name 'cached_property' from 'werkzeug' (/Users/paul/.local/share/virtualenvs/restplus-test-_yVwyWWD/lib/python3.7/site-packages/werkzeug/__init__.py)\r\n\r\n### **Environment**\r\n- Python version 3.7.6\r\n```\r\npaul-> pipenv graph\r\nflask-restx==0.1.0\r\n  - aniso8601 [required: >=0.82, installed: 8.0.0]\r\n  - Flask [required: >=0.8, installed: 1.1.1]\r\n    - click [required: >=5.1, installed: 7.0]\r\n    - itsdangerous [required: >=0.24, installed: 1.1.0]\r\n    - Jinja2 [required: >=2.10.1, installed: 2.11.1]\r\n      - MarkupSafe [required: >=0.23, installed: 1.1.1]\r\n    - Werkzeug [required: >=0.15, installed: 1.0.0]\r\n  - jsonschema [required: Any, installed: 3.2.0]\r\n    - attrs [required: >=17.4.0, installed: 19.3.0]\r\n    - importlib-metadata [required: Any, installed: 1.5.0]\r\n      - zipp [required: >=0.5, installed: 2.1.0]\r\n    - pyrsistent [required: >=0.14.0, installed: 0.15.7]\r\n      - six [required: Any, installed: 1.14.0]\r\n    - setuptools [required: Any, installed: 45.1.0]\r\n    - six [required: >=1.11.0, installed: 1.14.0]\r\n  - pytz [required: Any, installed: 2019.3]\r\n  - six [required: >=1.3.0, installed: 1.14.0]\r\n```\r\n- Flask version\r\n- Flask-RESTX version\r\n- Other installed Flask extensions\r\n\r\n### **Additional Context**\r\nThis also occurs using `flask-restplus`.  My guess is that the latest Flask breaks both.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/32", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/32/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/32/events", "html_url": "https://github.com/python-restx/flask-restx/issues/32", "id": 560450092, "node_id": "MDU6SXNzdWU1NjA0NTAwOTI=", "number": 32, "title": "Change author in package.json", "user": {"login": "RemiDesgrange", "id": 13271765, "node_id": "MDQ6VXNlcjEzMjcxNzY1", "avatar_url": "https://avatars3.githubusercontent.com/u/13271765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RemiDesgrange", "html_url": "https://github.com/RemiDesgrange", "followers_url": "https://api.github.com/users/RemiDesgrange/followers", "following_url": "https://api.github.com/users/RemiDesgrange/following{/other_user}", "gists_url": "https://api.github.com/users/RemiDesgrange/gists{/gist_id}", "starred_url": "https://api.github.com/users/RemiDesgrange/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RemiDesgrange/subscriptions", "organizations_url": "https://api.github.com/users/RemiDesgrange/orgs", "repos_url": "https://api.github.com/users/RemiDesgrange/repos", "events_url": "https://api.github.com/users/RemiDesgrange/events{/privacy}", "received_events_url": "https://api.github.com/users/RemiDesgrange/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547087, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg3", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/documentation", "name": "documentation", "color": "0075ca", "default": true, "description": "Improvements or additions to documentation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-05T15:33:15Z", "updated_at": "2020-02-10T15:53:48Z", "closed_at": "2020-02-07T14:46:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/python-restx/flask-restx/blob/master/package.json file state that @noirbizarre is the author. Maybe you want to switch to python-restx team ;-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/30", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/30/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/30/events", "html_url": "https://github.com/python-restx/flask-restx/issues/30", "id": 558807728, "node_id": "MDU6SXNzdWU1NTg4MDc3Mjg=", "number": 30, "title": "Using semver", "user": {"login": "SVilgelm", "id": 523825, "node_id": "MDQ6VXNlcjUyMzgyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/523825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SVilgelm", "html_url": "https://github.com/SVilgelm", "followers_url": "https://api.github.com/users/SVilgelm/followers", "following_url": "https://api.github.com/users/SVilgelm/following{/other_user}", "gists_url": "https://api.github.com/users/SVilgelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/SVilgelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SVilgelm/subscriptions", "organizations_url": "https://api.github.com/users/SVilgelm/orgs", "repos_url": "https://api.github.com/users/SVilgelm/repos", "events_url": "https://api.github.com/users/SVilgelm/events{/privacy}", "received_events_url": "https://api.github.com/users/SVilgelm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-03T02:37:45Z", "updated_at": "2020-02-09T21:38:51Z", "closed_at": "2020-02-09T21:38:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "the latest release of restx is 0.1, the pypi package has 0.1.0, the conda-forge (#28) 0.1.0 (it cannot download the package from pypi using 0.1 version).\r\nSo I would recommend to use [semver](https://semver.org) for the releases and always three digest, include tags and releases.\r\n\r\nThe main problem people have with semver, that if there is a backward incompatible changed, they afraid to increase the major number.\r\n\r\nHere is a short summary:\r\nGiven a version number MAJOR.MINOR.PATCH, increment the:\r\n* MAJOR version when you make incompatible API changes,\r\n* MINOR version when you add functionality in a backwards compatible manner, and\r\n* PATCH version when you make backwards compatible bug fixes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/28", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/28/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/28/events", "html_url": "https://github.com/python-restx/flask-restx/issues/28", "id": 558082058, "node_id": "MDU6SXNzdWU1NTgwODIwNTg=", "number": 28, "title": "conda packages", "user": {"login": "mcguipat", "id": 29676113, "node_id": "MDQ6VXNlcjI5Njc2MTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/29676113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcguipat", "html_url": "https://github.com/mcguipat", "followers_url": "https://api.github.com/users/mcguipat/followers", "following_url": "https://api.github.com/users/mcguipat/following{/other_user}", "gists_url": "https://api.github.com/users/mcguipat/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcguipat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcguipat/subscriptions", "organizations_url": "https://api.github.com/users/mcguipat/orgs", "repos_url": "https://api.github.com/users/mcguipat/repos", "events_url": "https://api.github.com/users/mcguipat/events{/privacy}", "received_events_url": "https://api.github.com/users/mcguipat/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1837165002, "node_id": "MDU6TGFiZWwxODM3MTY1MDAy", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/ci/cd", "name": "ci/cd", "color": "6104db", "default": false, "description": "Continuous Integration and Continuous Delivery tasks"}], "state": "closed", "locked": false, "assignee": {"login": "SVilgelm", "id": 523825, "node_id": "MDQ6VXNlcjUyMzgyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/523825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SVilgelm", "html_url": "https://github.com/SVilgelm", "followers_url": "https://api.github.com/users/SVilgelm/followers", "following_url": "https://api.github.com/users/SVilgelm/following{/other_user}", "gists_url": "https://api.github.com/users/SVilgelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/SVilgelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SVilgelm/subscriptions", "organizations_url": "https://api.github.com/users/SVilgelm/orgs", "repos_url": "https://api.github.com/users/SVilgelm/repos", "events_url": "https://api.github.com/users/SVilgelm/events{/privacy}", "received_events_url": "https://api.github.com/users/SVilgelm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SVilgelm", "id": 523825, "node_id": "MDQ6VXNlcjUyMzgyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/523825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SVilgelm", "html_url": "https://github.com/SVilgelm", "followers_url": "https://api.github.com/users/SVilgelm/followers", "following_url": "https://api.github.com/users/SVilgelm/following{/other_user}", "gists_url": "https://api.github.com/users/SVilgelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/SVilgelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SVilgelm/subscriptions", "organizations_url": "https://api.github.com/users/SVilgelm/orgs", "repos_url": "https://api.github.com/users/SVilgelm/repos", "events_url": "https://api.github.com/users/SVilgelm/events{/privacy}", "received_events_url": "https://api.github.com/users/SVilgelm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 12, "created_at": "2020-01-31T11:40:59Z", "updated_at": "2020-03-18T16:26:57Z", "closed_at": "2020-03-18T16:26:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could we get conda packages published?  flask-restplus previous had these publised to conda forge:\r\nhttps://anaconda.org/conda-forge/flask-restplus \r\n\r\nThe feedstock is here:\r\nhttps://github.com/conda-forge/flask-restplus-feedstock", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/23", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/23/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/23/events", "html_url": "https://github.com/python-restx/flask-restx/issues/23", "id": 557124545, "node_id": "MDU6SXNzdWU1NTcxMjQ1NDU=", "number": 23, "title": "Using GetHub Actions instead of Travis CI", "user": {"login": "SVilgelm", "id": 523825, "node_id": "MDQ6VXNlcjUyMzgyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/523825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SVilgelm", "html_url": "https://github.com/SVilgelm", "followers_url": "https://api.github.com/users/SVilgelm/followers", "following_url": "https://api.github.com/users/SVilgelm/following{/other_user}", "gists_url": "https://api.github.com/users/SVilgelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/SVilgelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SVilgelm/subscriptions", "organizations_url": "https://api.github.com/users/SVilgelm/orgs", "repos_url": "https://api.github.com/users/SVilgelm/repos", "events_url": "https://api.github.com/users/SVilgelm/events{/privacy}", "received_events_url": "https://api.github.com/users/SVilgelm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-29T21:24:55Z", "updated_at": "2020-01-31T16:23:11Z", "closed_at": "2020-01-31T16:23:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I would like to make a proposal to use GitHub Actions instead of Travis CI.\r\nIn my opinion and from my experience, the GitHub Actions works better and a bit faster than Travis CI.\r\nThe most important enhancement is that everything is stored on the GitHub.\r\nGitHub workflows allows to test on Linux, Mac and Windows VMs for free for the open source projects.\r\nAll developers can test their code in their forks just pushing a code into a brach, open the actions (in there fork, not here) and see the results.\r\n\r\nExamples of the Push and Pull Request checks are here: https://github.com/SVilgelm/flask-restx/pull/3/checks\r\nit's a PR to master branch in my fork.\r\n\r\nExample of the release workflow: https://github.com/SVilgelm/flask-restx/runs/410117918?check_suite_focus=true\r\nand the pypi: https://pypi.org/project/flask-restx-svilgelm-test/99.99.99/\r\n\r\nSo, let's discuss.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/21", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/21/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/21/events", "html_url": "https://github.com/python-restx/flask-restx/issues/21", "id": 555445689, "node_id": "MDU6SXNzdWU1NTU0NDU2ODk=", "number": 21, "title": "Improvement: Optional compression for responses", "user": {"login": "cal97g", "id": 1664656, "node_id": "MDQ6VXNlcjE2NjQ2NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1664656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cal97g", "html_url": "https://github.com/cal97g", "followers_url": "https://api.github.com/users/cal97g/followers", "following_url": "https://api.github.com/users/cal97g/following{/other_user}", "gists_url": "https://api.github.com/users/cal97g/gists{/gist_id}", "starred_url": "https://api.github.com/users/cal97g/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cal97g/subscriptions", "organizations_url": "https://api.github.com/users/cal97g/orgs", "repos_url": "https://api.github.com/users/cal97g/repos", "events_url": "https://api.github.com/users/cal97g/events{/privacy}", "received_events_url": "https://api.github.com/users/cal97g/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-27T09:17:19Z", "updated_at": "2020-02-11T02:02:24Z", "closed_at": "2020-02-11T02:02:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a nice value add; potentially could be done with a decorator so it could be configured per resource response method, or alternatively, as a blanket option.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/19", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/19/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/19/events", "html_url": "https://github.com/python-restx/flask-restx/issues/19", "id": 555392315, "node_id": "MDU6SXNzdWU1NTUzOTIzMTU=", "number": 19, "title": "Marshal not renaming fields with attribute", "user": {"login": "voice1", "id": 21131693, "node_id": "MDQ6VXNlcjIxMTMxNjkz", "avatar_url": "https://avatars0.githubusercontent.com/u/21131693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voice1", "html_url": "https://github.com/voice1", "followers_url": "https://api.github.com/users/voice1/followers", "following_url": "https://api.github.com/users/voice1/following{/other_user}", "gists_url": "https://api.github.com/users/voice1/gists{/gist_id}", "starred_url": "https://api.github.com/users/voice1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voice1/subscriptions", "organizations_url": "https://api.github.com/users/voice1/orgs", "repos_url": "https://api.github.com/users/voice1/repos", "events_url": "https://api.github.com/users/voice1/events{/privacy}", "received_events_url": "https://api.github.com/users/voice1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-27T07:07:03Z", "updated_at": "2020-02-15T07:26:33Z", "closed_at": "2020-02-15T07:26:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Either I am misunderstanding how to use the marshal feature, and the documentation or the following is a bug.\r\n\r\n### **Code**\r\n\r\n```\r\nm = api.model('mymodel', {'name': fields.String(attribute='MyName')})\r\n@api.route('/test')\r\nclass Test(Resource):\r\n    @api.expect(m)\r\n    def post(self, **kwargs):\r\n        logger.debug(api.payload)\r\n        logger.debug(request.get_json())\r\n        logger.debug(marshal(api.payload, m))\r\n        return api.payload\r\n\r\n```\r\nOutput\r\n```\r\n127.0.0.1 - - [26/Jan/2020 22:57:36] \"GET / HTTP/1.1\" 200 -\r\n127.0.0.1 - - [26/Jan/2020 22:57:37] \"GET /swaggerui/swagger-ui-bundle.js HTTP/1.1\" 304 -\r\n127.0.0.1 - - [26/Jan/2020 22:57:37] \"GET /swaggerui/swagger-ui.css HTTP/1.1\" 304 -\r\n127.0.0.1 - - [26/Jan/2020 22:57:37] \"GET /swaggerui/droid-sans.css HTTP/1.1\" 304 -\r\n127.0.0.1 - - [26/Jan/2020 22:57:37] \"GET /swaggerui/swagger-ui-standalone-preset.js HTTP/1.1\" 304 -\r\n127.0.0.1 - - [26/Jan/2020 22:57:37] \"GET /swaggerui/favicon-16x16.png HTTP/1.1\" 200 -\r\n127.0.0.1 - - [26/Jan/2020 22:57:37] \"GET /swagger.json HTTP/1.1\" 200 -\r\n[2020-01-26 22:58:09,111] DEBUG in switchvox: {'name': '987'}\r\n[2020-01-26 22:58:09,111] DEBUG in switchvox: {'name': '987'}\r\n[2020-01-26 22:58:09,111] DEBUG in switchvox: {'name': None}\r\n```\r\n\r\n\r\n### **Expected Behavior**\r\nI expected that using the fields.String(attribute=\"...\") would cause the rewrite of the data being entered so that instead of receiving {'name': '987'} I would  have received {'MyName': '987'}\r\nEither when calling api.payload or request.get_json()\r\n\r\n### **Actual Behavior**\r\nNo change in field names.\r\n\r\n### **Error Messages/Stack Trace**\r\nDoes not error, just does not return expected results.\r\n\r\n### **Environment**\r\n- Python 3.7\r\n- Flask version current\r\n- Flask-RESTX version current\r\n- Other installed Flask flask_restplus\r\n\r\n\r\nMaybe I am calling it wrong, even using marshal() did not return any data. Unfortunately the documentation is not really clear to me around this part.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/17", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/17/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/17/events", "html_url": "https://github.com/python-restx/flask-restx/issues/17", "id": 555336653, "node_id": "MDU6SXNzdWU1NTUzMzY2NTM=", "number": 17, "title": "Email field type?", "user": {"login": "gbeane", "id": 356266, "node_id": "MDQ6VXNlcjM1NjI2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/356266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gbeane", "html_url": "https://github.com/gbeane", "followers_url": "https://api.github.com/users/gbeane/followers", "following_url": "https://api.github.com/users/gbeane/following{/other_user}", "gists_url": "https://api.github.com/users/gbeane/gists{/gist_id}", "starred_url": "https://api.github.com/users/gbeane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gbeane/subscriptions", "organizations_url": "https://api.github.com/users/gbeane/orgs", "repos_url": "https://api.github.com/users/gbeane/repos", "events_url": "https://api.github.com/users/gbeane/events{/privacy}", "received_events_url": "https://api.github.com/users/gbeane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-01-27T03:13:48Z", "updated_at": "2020-01-30T17:36:56Z", "closed_at": "2020-01-30T17:35:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think it would be useful to have a email field type, which would be similar to fields.String, but would have a Swagger example value similar to \"user@example.com\" instead of \"string: and would validate that the field contains a properly formatted email address", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/15", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/15/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/15/events", "html_url": "https://github.com/python-restx/flask-restx/issues/15", "id": 551019949, "node_id": "MDU6SXNzdWU1NTEwMTk5NDk=", "number": 15, "title": "pip install flask-restx erratic behaviour", "user": {"login": "upeguiborja", "id": 25436081, "node_id": "MDQ6VXNlcjI1NDM2MDgx", "avatar_url": "https://avatars0.githubusercontent.com/u/25436081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/upeguiborja", "html_url": "https://github.com/upeguiborja", "followers_url": "https://api.github.com/users/upeguiborja/followers", "following_url": "https://api.github.com/users/upeguiborja/following{/other_user}", "gists_url": "https://api.github.com/users/upeguiborja/gists{/gist_id}", "starred_url": "https://api.github.com/users/upeguiborja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/upeguiborja/subscriptions", "organizations_url": "https://api.github.com/users/upeguiborja/orgs", "repos_url": "https://api.github.com/users/upeguiborja/repos", "events_url": "https://api.github.com/users/upeguiborja/events{/privacy}", "received_events_url": "https://api.github.com/users/upeguiborja/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-16T19:54:01Z", "updated_at": "2020-01-22T09:23:01Z", "closed_at": "2020-01-22T09:23:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "On a previous project i was developing less than a week ago flask-restx was available through pip, today it seems that the package is no longer on pypi.\r\n\r\n### **Code**\r\n\r\n```python\r\npip install flask-restx\r\n```\r\n### **Expected Behavior**\r\nflask-restx package should be installed in my python directory or venv\r\n\r\n### **Actual Behavior**\r\nflask-restx package installation fails\r\n\r\n### **Error Messages/Stack Trace**\r\n```\r\nERROR: Could not find a version that satisfies the requirement flask-restx (from versions: none)\r\nERROR: No matching distribution found for flask-restx\r\n```\r\n\r\n### **Environment**\r\n- Python 3.0.1\r\n- Flask 1.1.1\r\n- Flask-RESTX latest\r\n- flask-pymongo\r\n- Win 10 Pro build 1909\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/13", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/13/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/13/events", "html_url": "https://github.com/python-restx/flask-restx/issues/13", "id": 550806374, "node_id": "MDU6SXNzdWU1NTA4MDYzNzQ=", "number": 13, "title": "Add support to config swagger-ui using app.config", "user": {"login": "tjysdsg", "id": 21212505, "node_id": "MDQ6VXNlcjIxMjEyNTA1", "avatar_url": "https://avatars3.githubusercontent.com/u/21212505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjysdsg", "html_url": "https://github.com/tjysdsg", "followers_url": "https://api.github.com/users/tjysdsg/followers", "following_url": "https://api.github.com/users/tjysdsg/following{/other_user}", "gists_url": "https://api.github.com/users/tjysdsg/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjysdsg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjysdsg/subscriptions", "organizations_url": "https://api.github.com/users/tjysdsg/orgs", "repos_url": "https://api.github.com/users/tjysdsg/repos", "events_url": "https://api.github.com/users/tjysdsg/events{/privacy}", "received_events_url": "https://api.github.com/users/tjysdsg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547091, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDkx", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-16T13:26:34Z", "updated_at": "2020-01-17T10:37:20Z", "closed_at": "2020-01-17T10:37:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I came across a problem that probably can only be solved by asking you maintainers of this package. \r\n\r\nMy need: Show `model` tab by default, instead of `example value`, in the `parameters` section in API method documentation.\r\n\r\n![image](https://user-images.githubusercontent.com/21212505/72528996-5087ea80-38a7-11ea-80d6-5ebabee89b62.png)\r\n\r\nThe method that I tried: According [docs for `Swagger-UI` configuration](https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md#configuration), I can set `DEFAULT_MODEL_RENDERING` to `\"model\"` to make this happen.\r\n\r\nWhy didn't work: Since `flask-restplus` doesn't seems to do anything when I set `app.config.SWAGGER_UI_DEFAULT_MODEL_RENDERING` to `\"model\"`, I suppose allowing users to set custom configurations of `Swagger-UI` could be a feature added to `flask-restx`. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/11", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/11/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/11/events", "html_url": "https://github.com/python-restx/flask-restx/issues/11", "id": 549730233, "node_id": "MDU6SXNzdWU1NDk3MzAyMzM=", "number": 11, "title": "Integrate marshmallow", "user": {"login": "mcclurem", "id": 236281, "node_id": "MDQ6VXNlcjIzNjI4MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/236281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcclurem", "html_url": "https://github.com/mcclurem", "followers_url": "https://api.github.com/users/mcclurem/followers", "following_url": "https://api.github.com/users/mcclurem/following{/other_user}", "gists_url": "https://api.github.com/users/mcclurem/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcclurem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcclurem/subscriptions", "organizations_url": "https://api.github.com/users/mcclurem/orgs", "repos_url": "https://api.github.com/users/mcclurem/repos", "events_url": "https://api.github.com/users/mcclurem/events{/privacy}", "received_events_url": "https://api.github.com/users/mcclurem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-14T18:04:45Z", "updated_at": "2020-01-16T18:13:52Z", "closed_at": "2020-01-16T18:13:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "There exists a huge pile of forks etc of the flask_restful family and the one thing that seems to be missing consistently is native support for marshmallow. It would be really great if restx finally integrated that.\r\nThe flask-restplus-patched project exists but its based off ancient apispec and so it's not quite there", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/10", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/10/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/10/events", "html_url": "https://github.com/python-restx/flask-restx/issues/10", "id": 549495485, "node_id": "MDU6SXNzdWU1NDk0OTU0ODU=", "number": 10, "title": "is it a drop-in replacement for flask-restplus?", "user": {"login": "andreixk", "id": 17452117, "node_id": "MDQ6VXNlcjE3NDUyMTE3", "avatar_url": "https://avatars1.githubusercontent.com/u/17452117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreixk", "html_url": "https://github.com/andreixk", "followers_url": "https://api.github.com/users/andreixk/followers", "following_url": "https://api.github.com/users/andreixk/following{/other_user}", "gists_url": "https://api.github.com/users/andreixk/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreixk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreixk/subscriptions", "organizations_url": "https://api.github.com/users/andreixk/orgs", "repos_url": "https://api.github.com/users/andreixk/repos", "events_url": "https://api.github.com/users/andreixk/events{/privacy}", "received_events_url": "https://api.github.com/users/andreixk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547103, "node_id": "MDU6TGFiZWwxNzc3NTQ3MTAz", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-14T11:09:58Z", "updated_at": "2020-02-01T13:51:53Z", "closed_at": "2020-02-01T13:51:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been using flask-restplus for a while now, just wondering if i simply rename imports, will everything else work with current syntax?\r\n\r\nedit: not sure how to remove the BUG label", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/8", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/8/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/8/events", "html_url": "https://github.com/python-restx/flask-restx/issues/8", "id": 548649055, "node_id": "MDU6SXNzdWU1NDg2NDkwNTU=", "number": 8, "title": "Configurations still using the prefix RESTPLUS", "user": {"login": "kelvins", "id": 1009397, "node_id": "MDQ6VXNlcjEwMDkzOTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1009397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kelvins", "html_url": "https://github.com/kelvins", "followers_url": "https://api.github.com/users/kelvins/followers", "following_url": "https://api.github.com/users/kelvins/following{/other_user}", "gists_url": "https://api.github.com/users/kelvins/gists{/gist_id}", "starred_url": "https://api.github.com/users/kelvins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kelvins/subscriptions", "organizations_url": "https://api.github.com/users/kelvins/orgs", "repos_url": "https://api.github.com/users/kelvins/repos", "events_url": "https://api.github.com/users/kelvins/events{/privacy}", "received_events_url": "https://api.github.com/users/kelvins/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1777547085, "node_id": "MDU6TGFiZWwxNzc3NTQ3MDg1", "url": "https://api.github.com/repos/python-restx/flask-restx/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-13T00:03:16Z", "updated_at": "2020-01-13T17:59:35Z", "closed_at": "2020-01-13T17:59:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some configurations are still using the prefix `RESTPLUS_`, for example:\r\n\r\nhttps://github.com/python-restx/flask-restx/blob/3da9017d203d3bcfbbd1ce125689dc94994496e2/flask_restx/api.py#L219-L220\r\n\r\nDoes it make sense to change the prefix to `RESTX_` (e.g. `RESTX_MASK_HEADER`)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/7", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/7/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/7/events", "html_url": "https://github.com/python-restx/flask-restx/issues/7", "id": 548617303, "node_id": "MDU6SXNzdWU1NDg2MTczMDM=", "number": 7, "title": "How to configure package namespaces?", "user": {"login": "Quidge", "id": 6530629, "node_id": "MDQ6VXNlcjY1MzA2Mjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6530629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Quidge", "html_url": "https://github.com/Quidge", "followers_url": "https://api.github.com/users/Quidge/followers", "following_url": "https://api.github.com/users/Quidge/following{/other_user}", "gists_url": "https://api.github.com/users/Quidge/gists{/gist_id}", "starred_url": "https://api.github.com/users/Quidge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Quidge/subscriptions", "organizations_url": "https://api.github.com/users/Quidge/orgs", "repos_url": "https://api.github.com/users/Quidge/repos", "events_url": "https://api.github.com/users/Quidge/events{/privacy}", "received_events_url": "https://api.github.com/users/Quidge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-12T19:44:53Z", "updated_at": "2020-01-16T18:11:46Z", "closed_at": "2020-01-16T18:11:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [documentation only shows](https://flask-restx.readthedocs.io/en/latest/scaling.html) an example where all related `Dog` functionality is inside a `dog.py` module with the `api = Namespace('dogs', description='Dogs related operations')` declaration at the top.\r\n\r\nBut what if I wish to have multiple an entire pacakge devoted to a namespace? I was expecting to be able to do it like this:\r\n\r\n```\r\nproject\r\n\u251c-- app.py\r\n\u251c-- dog_api\r\n    \u251c-- __init__.py  <---- `api = Namespace('dogs', path='/dogs')`\r\n    \u251c-- sounds.py <------ `from . import api; @api.route('/sounds/<int:soundid>`\r\n    \u251c-- foods.py <------ `from . import api; @api.route('/foods/<int:foodid>``\r\n    \u251c-- breeds.py <------ `from . import api; @api.route('/breeds/<int:breedid>``\r\n```\r\n\r\nThe code for app.py would have this:\r\n\r\n```python\r\nfrom .dog_api import api as dog_api\r\n\r\n\r\napi = Api(app)\r\napi.add_namespace(dog_api, path='/dogs')\r\n```\r\n\r\nObviously this is example code, but I have a real project set up very similarly to this and it's running into route errors. When running tests it's apparent that the routes aren't being registered in time/properly and trying to access `/dogs/sounds/something` will cause a 404. I believe it has to do with the order that I'm importing/`add_namespace`ing.\r\n\r\nWhat should the proper import order/order to use `add_namespace` be when a namespace represents an entire pacakge?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/6", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/6/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/6/events", "html_url": "https://github.com/python-restx/flask-restx/issues/6", "id": 548604872, "node_id": "MDU6SXNzdWU1NDg2MDQ4NzI=", "number": 6, "title": "Push Releases from CI", "user": {"login": "SteadBytes", "id": 14834132, "node_id": "MDQ6VXNlcjE0ODM0MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/14834132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SteadBytes", "html_url": "https://github.com/SteadBytes", "followers_url": "https://api.github.com/users/SteadBytes/followers", "following_url": "https://api.github.com/users/SteadBytes/following{/other_user}", "gists_url": "https://api.github.com/users/SteadBytes/gists{/gist_id}", "starred_url": "https://api.github.com/users/SteadBytes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SteadBytes/subscriptions", "organizations_url": "https://api.github.com/users/SteadBytes/orgs", "repos_url": "https://api.github.com/users/SteadBytes/repos", "events_url": "https://api.github.com/users/SteadBytes/events{/privacy}", "received_events_url": "https://api.github.com/users/SteadBytes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-12T18:01:55Z", "updated_at": "2020-01-22T09:27:37Z", "closed_at": "2020-01-22T09:27:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "To help avoid the [problems with releasing](https://github.com/noirbizarre/flask-restplus/issues/743#issuecomment-562824068) experienced in the Flask-RESTPlus project. We should be able to make new releases to PyPi from CI - i.e. not relying on a core team member to release 'manually' from his/her own machine. \r\n\r\nMy *initial* proposal is that CI will push a release to PyPi when a release is tagged on GitHub. I haven't put a whole lot of thought into this as of yet so suggestions are more than welcome :smile: ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/4", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/4/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/4/events", "html_url": "https://github.com/python-restx/flask-restx/issues/4", "id": 548124820, "node_id": "MDU6SXNzdWU1NDgxMjQ4MjA=", "number": 4, "title": "Setup CI", "user": {"login": "SteadBytes", "id": 14834132, "node_id": "MDQ6VXNlcjE0ODM0MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/14834132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SteadBytes", "html_url": "https://github.com/SteadBytes", "followers_url": "https://api.github.com/users/SteadBytes/followers", "following_url": "https://api.github.com/users/SteadBytes/following{/other_user}", "gists_url": "https://api.github.com/users/SteadBytes/gists{/gist_id}", "starred_url": "https://api.github.com/users/SteadBytes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SteadBytes/subscriptions", "organizations_url": "https://api.github.com/users/SteadBytes/orgs", "repos_url": "https://api.github.com/users/SteadBytes/repos", "events_url": "https://api.github.com/users/SteadBytes/events{/privacy}", "received_events_url": "https://api.github.com/users/SteadBytes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-10T14:56:48Z", "updated_at": "2020-01-11T12:15:39Z", "closed_at": "2020-01-11T12:15:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "TODO", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/python-restx/flask-restx/issues/1", "repository_url": "https://api.github.com/repos/python-restx/flask-restx", "labels_url": "https://api.github.com/repos/python-restx/flask-restx/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/python-restx/flask-restx/issues/1/comments", "events_url": "https://api.github.com/repos/python-restx/flask-restx/issues/1/events", "html_url": "https://github.com/python-restx/flask-restx/issues/1", "id": 547488242, "node_id": "MDU6SXNzdWU1NDc0ODgyNDI=", "number": 1, "title": "Rename flask-restplus -> flask-restx", "user": {"login": "SteadBytes", "id": 14834132, "node_id": "MDQ6VXNlcjE0ODM0MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/14834132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SteadBytes", "html_url": "https://github.com/SteadBytes", "followers_url": "https://api.github.com/users/SteadBytes/followers", "following_url": "https://api.github.com/users/SteadBytes/following{/other_user}", "gists_url": "https://api.github.com/users/SteadBytes/gists{/gist_id}", "starred_url": "https://api.github.com/users/SteadBytes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SteadBytes/subscriptions", "organizations_url": "https://api.github.com/users/SteadBytes/orgs", "repos_url": "https://api.github.com/users/SteadBytes/repos", "events_url": "https://api.github.com/users/SteadBytes/events{/privacy}", "received_events_url": "https://api.github.com/users/SteadBytes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "SteadBytes", "id": 14834132, "node_id": "MDQ6VXNlcjE0ODM0MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/14834132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SteadBytes", "html_url": "https://github.com/SteadBytes", "followers_url": "https://api.github.com/users/SteadBytes/followers", "following_url": "https://api.github.com/users/SteadBytes/following{/other_user}", "gists_url": "https://api.github.com/users/SteadBytes/gists{/gist_id}", "starred_url": "https://api.github.com/users/SteadBytes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SteadBytes/subscriptions", "organizations_url": "https://api.github.com/users/SteadBytes/orgs", "repos_url": "https://api.github.com/users/SteadBytes/repos", "events_url": "https://api.github.com/users/SteadBytes/events{/privacy}", "received_events_url": "https://api.github.com/users/SteadBytes/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SteadBytes", "id": 14834132, "node_id": "MDQ6VXNlcjE0ODM0MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/14834132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SteadBytes", "html_url": "https://github.com/SteadBytes", "followers_url": "https://api.github.com/users/SteadBytes/followers", "following_url": "https://api.github.com/users/SteadBytes/following{/other_user}", "gists_url": "https://api.github.com/users/SteadBytes/gists{/gist_id}", "starred_url": "https://api.github.com/users/SteadBytes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SteadBytes/subscriptions", "organizations_url": "https://api.github.com/users/SteadBytes/orgs", "repos_url": "https://api.github.com/users/SteadBytes/repos", "events_url": "https://api.github.com/users/SteadBytes/events{/privacy}", "received_events_url": "https://api.github.com/users/SteadBytes/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-01-09T13:47:02Z", "updated_at": "2020-01-15T19:09:12Z", "closed_at": "2020-01-15T19:08:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "All occurrences of Flask-RESTPlus, flask-restplus e.t.c. should be replaced with Flaks-RESTX, flask-restx e.t.c. In addition, the Flask-RESTPlus logo should also be removed until a Flask-RESTX logo is created.", "performed_via_github_app": null, "score": 1.0}]}