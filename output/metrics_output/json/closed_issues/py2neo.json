{"total_count": 654, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/technige/py2neo/issues/810", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/810/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/810/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/810/events", "html_url": "https://github.com/technige/py2neo/issues/810", "id": 642115105, "node_id": "MDU6SXNzdWU2NDIxMTUxMDU=", "number": 810, "title": "py2neo v5.0b1: performance loss - CPU 100%", "user": {"login": "Wenzel", "id": 964610, "node_id": "MDQ6VXNlcjk2NDYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/964610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wenzel", "html_url": "https://github.com/Wenzel", "followers_url": "https://api.github.com/users/Wenzel/followers", "following_url": "https://api.github.com/users/Wenzel/following{/other_user}", "gists_url": "https://api.github.com/users/Wenzel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wenzel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wenzel/subscriptions", "organizations_url": "https://api.github.com/users/Wenzel/orgs", "repos_url": "https://api.github.com/users/Wenzel/repos", "events_url": "https://api.github.com/users/Wenzel/events{/privacy}", "received_events_url": "https://api.github.com/users/Wenzel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-19T17:09:03Z", "updated_at": "2020-06-21T15:36:24Z", "closed_at": "2020-06-21T15:36:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Nigel,\r\n\r\nFollowing my previous issue https://github.com/technige/py2neo/issues/804, I'm testing the latest py2neo `v5.0b1` release with Neo4j `4.0`.\r\n\r\nMy application insert a filesystem in Neo4j, and by upgrade to v5, I noticed a huge performance loss:\r\n\r\n`py2neo v4.3.0` - `Neo4j 3.4`\r\n~~~\r\n2020-06-19 18:52:16,481 INFO:hooks.filesystem.FilesystemHook:Capturing filesystem\r\n2020-06-19 18:52:26,482 INFO:hooks.filesystem.FilesystemHook:[10.4 %] /dev/rd/c1d26p2\r\n2020-06-19 18:52:36,483 INFO:hooks.filesystem.FilesystemHook:[18.9 %] /dev/fd0h410\r\n2020-06-19 18:52:46,484 INFO:hooks.filesystem.FilesystemHook:[28.8 %] /etc/modprobe.d/blacklist-watchdog\r\n2020-06-19 18:52:56,488 INFO:hooks.filesystem.FilesystemHook:[43.9 %] /usr/bin/pygettext2.4\r\n2020-06-19 18:53:06,489 INFO:hooks.filesystem.FilesystemHook:[61.1 %] /usr/share/doc/libkrb53/README.Debian.gz\r\n2020-06-19 18:53:16,489 INFO:hooks.filesystem.FilesystemHook:[74.9 %] /usr/share/man/man1/sg.1.gz\r\n2020-06-19 18:53:26,493 INFO:hooks.filesystem.FilesystemHook:[85.7 %] /usr/share/vim/vim64/ftoff.vim\r\n2020-06-19 18:53:33,884 INFO:root:Capture duration: 0:01:22\r\n2020-06-19 18:53:34,090 INFO:root:Commit Neo4j transaction\r\n~~~\r\nVS\r\n\r\n`py2neo v5.0b1` - `Neo4j 4.0`\r\n~~~\r\n2020-06-19 18:54:56,437 INFO:hooks.filesystem.FilesystemHook:Capturing filesystem\r\n2020-06-19 18:55:06,440 INFO:hooks.filesystem.FilesystemHook:[9.6 %] /dev/rd/c0d6p3\r\n2020-06-19 18:55:16,697 INFO:hooks.filesystem.FilesystemHook:[18.2 %] /dev/shm\r\n2020-06-19 18:55:26,701 INFO:hooks.filesystem.FilesystemHook:[28.1 %] /etc/calendar\r\n2020-06-19 18:55:36,739 INFO:hooks.filesystem.FilesystemHook:[36.2 %] /lib/modules/2.6.15-51-amd64-server/kernel/drivers/scsi/3w-9xxx.ko\r\n2020-06-19 18:55:46,745 INFO:hooks.filesystem.FilesystemHook:[40.2 %] /lib/modules/2.6.15-51-amd64-server/kernel/sound/pci/snd-ad1889.ko\r\n2020-06-19 18:55:56,794 INFO:hooks.filesystem.FilesystemHook:[46.4 %] /usr/lib/perl5/auto/Text/Iconv\r\n2020-06-19 18:56:06,844 INFO:hooks.filesystem.FilesystemHook:[55.4 %] /usr/share/calendar\r\n2020-06-19 18:56:16,859 INFO:hooks.filesystem.FilesystemHook:[59.5 %] /usr/share/doc/gzip\r\n2020-06-19 18:56:26,862 INFO:hooks.filesystem.FilesystemHook:[61.9 %] /usr/share/doc/libtasn1-2\r\n2020-06-19 18:56:36,875 INFO:hooks.filesystem.FilesystemHook:[64.2 %] /usr/share/doc/readline-common\r\n2020-06-19 18:56:46,877 INFO:hooks.filesystem.FilesystemHook:[67.4 %] /usr/share/i18n/locales/ar_SD\r\n2020-06-19 18:56:57,115 INFO:hooks.filesystem.FilesystemHook:[70.4 %] /usr/share/locale/de\r\n2020-06-19 18:57:07,125 INFO:hooks.filesystem.FilesystemHook:[71.4 %] /usr/share/locale/sk\r\n2020-06-19 18:57:17,127 INFO:hooks.filesystem.FilesystemHook:[73.0 %] /usr/share/man/ja/man1/apropos.1.gz\r\n2020-06-19 18:57:27,228 INFO:hooks.filesystem.FilesystemHook:[79.1 %] /usr/share/perl/5.8.7/Getopt\r\n2020-06-19 18:57:37,234 INFO:hooks.filesystem.FilesystemHook:[80.6 %] /usr/share/vim/vim64/colors/darkblue.vim\r\n2020-06-19 18:57:47,256 INFO:hooks.filesystem.FilesystemHook:[82.5 %] /usr/share/vim/vim64/lang/zh_TW.UTF-8\r\n2020-06-19 18:57:57,299 INFO:hooks.filesystem.FilesystemHook:[87.5 %] /usr/share/zoneinfo/Chile\r\n2020-06-19 18:58:07,307 INFO:hooks.filesystem.FilesystemHook:[93.3 %] /usr/share/zoneinfo/right/Mexico\r\n2020-06-19 18:58:17,454 INFO:hooks.filesystem.FilesystemHook:[99.6 %] /var/lib/dpkg/parts\r\n2020-06-19 18:58:22,904 INFO:root:Capture duration: 0:03:30\r\n2020-06-19 18:58:23,284 INFO:root:Commit Neo4j transaction\r\n~~~\r\n\r\nFor the same filesystem.\r\n\r\nI wanted to investigate, so I did some profiling with `cProfile`, and visualized the data with `SnakeViz`:\r\n\r\n![Capture d\u2019\u00e9cran de 2020-06-19 19-04-24](https://user-images.githubusercontent.com/964610/85161270-d1388180-b25f-11ea-91a7-7bf6bfc30316.png)\r\n\r\nIf I sort by the total time taken, `bolt.py(<genexpr>)` is the first with almost 1 minute of cumulated time.\r\n\r\nTo compare this is the SnakeViz with `py2neo 4.3.0`:\r\n![Capture d\u2019\u00e9cran de 2020-06-19 19-07-06](https://user-images.githubusercontent.com/964610/85161493-1d83c180-b260-11ea-8843-546702e2c38e.png)\r\n\r\nHere, only my code takes the first position, with the `magic_file` function computing the MIME type for a given file.\r\n\r\nSo maybe there is something to investigate here ?\r\nI can provide you more data if you need it.\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/807", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/807/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/807/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/807/events", "html_url": "https://github.com/technige/py2neo/issues/807", "id": 638421096, "node_id": "MDU6SXNzdWU2Mzg0MjEwOTY=", "number": 807, "title": "Cypher unescape function", "user": {"login": "Wenzel", "id": 964610, "node_id": "MDQ6VXNlcjk2NDYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/964610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wenzel", "html_url": "https://github.com/Wenzel", "followers_url": "https://api.github.com/users/Wenzel/followers", "following_url": "https://api.github.com/users/Wenzel/following{/other_user}", "gists_url": "https://api.github.com/users/Wenzel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wenzel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wenzel/subscriptions", "organizations_url": "https://api.github.com/users/Wenzel/orgs", "repos_url": "https://api.github.com/users/Wenzel/repos", "events_url": "https://api.github.com/users/Wenzel/events{/privacy}", "received_events_url": "https://api.github.com/users/Wenzel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2147949683, "node_id": "MDU6TGFiZWwyMTQ3OTQ5Njgz", "url": "https://api.github.com/repos/technige/py2neo/labels/question", "name": "question", "color": "ffdd33", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-14T20:07:31Z", "updated_at": "2020-06-21T15:41:15Z", "closed_at": "2020-06-21T15:41:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm using a function of your library, [`cypher_escape`](https://github.com/technige/py2neo/blob/py2neo-4.3.0/py2neo/cypher/__init__.py#L29), in `py2neo.cypher` to properly escape a Python string for Neo4j.\r\n\r\nIs there an equivalent function to do the reverse operation, `cypher_unescape` ?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/806", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/806/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/806/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/806/events", "html_url": "https://github.com/technige/py2neo/issues/806", "id": 633825396, "node_id": "MDU6SXNzdWU2MzM4MjUzOTY=", "number": 806, "title": "OGM: how to represent the same relationship type pointing to different RelatedClass", "user": {"login": "Wenzel", "id": 964610, "node_id": "MDQ6VXNlcjk2NDYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/964610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wenzel", "html_url": "https://github.com/Wenzel", "followers_url": "https://api.github.com/users/Wenzel/followers", "following_url": "https://api.github.com/users/Wenzel/following{/other_user}", "gists_url": "https://api.github.com/users/Wenzel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wenzel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wenzel/subscriptions", "organizations_url": "https://api.github.com/users/Wenzel/orgs", "repos_url": "https://api.github.com/users/Wenzel/repos", "events_url": "https://api.github.com/users/Wenzel/events{/privacy}", "received_events_url": "https://api.github.com/users/Wenzel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2147949683, "node_id": "MDU6TGFiZWwyMTQ3OTQ5Njgz", "url": "https://api.github.com/repos/technige/py2neo/labels/question", "name": "question", "color": "ffdd33", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-07T22:30:58Z", "updated_at": "2020-06-19T23:17:05Z", "closed_at": "2020-06-19T23:17:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm facing a issue with the OGM, trying to represent a relationship type (`:HAS_CHILD`) to point to 2 different GraphObjects: `Person` and `LittlePerson`.\r\n\r\nCurrently, only the last `RelatedTo` definition in the class will become valid:\r\n\r\n~~~Python\r\nfrom py2neo import Graph\r\nfrom py2neo.ogm import GraphObject, RelatedTo, Property\r\n\r\nclass LittlePerson(GraphObject):\r\n    __primarykey__ = \"name\"\r\n    name = Property()\r\n    born = Property()\r\n\r\nclass Person(GraphObject):\r\n    __primarykey__ = \"name\"\r\n    name = Property()\r\n    born = Property()\r\n\r\n    person_children = RelatedTo('Person', 'HAS_CHILD')\r\n    littleperson_children = RelatedTo('LittlePerson', 'HAS_CHILD')\r\n\r\n\r\nIn [13]: graph = Graph(password='admin')                                                                                                                                                                           \r\n\r\nIn [14]: p = Person.match(graph).where(f\"_.name = 'Keanu Reeves'\").first()                                                                                                                                         \r\n\r\nIn [15]: p                                                                                                                                                                                                         \r\nOut[15]: <Person name='Keanu Reeves'>\r\n\r\nIn [16]: list(p.person_children)                                                                                                                                                                                   \r\nOut[16]: \r\n[<LittlePerson name='Carrie-Anne Moss'>,\r\n <LittlePerson name='Joel Silver'>,\r\n <LittlePerson name='Hugo Weaving'>,\r\n <LittlePerson name='Lilly Wachowski'>]\r\n\r\nIn [17]: list(p.littleperson_children)                                                                                                                                                                             \r\nOut[17]: \r\n[<LittlePerson name='Carrie-Anne Moss'>,\r\n <LittlePerson name='Joel Silver'>,\r\n <LittlePerson name='Hugo Weaving'>,\r\n <LittlePerson name='Lilly Wachowski'>]\r\n~~~\r\n\r\nWhile the graph says:\r\n\r\n![Capture d\u2019\u00e9cran de 2020-06-08 00-28-21](https://user-images.githubusercontent.com/964610/83981528-015a5900-a91f-11ea-9f7d-f8512c28e43e.png)\r\n\r\nSo it retrieves all the nodes, but marks them as being `LittlePerson` even though it's not true.\r\n\r\nAny ideas to represent this @technige  ? :thinking: \r\n\r\nHere is the test data if you want to repro:\r\n~~~Cypher\r\nCREATE (Keanu:Person {name:'Keanu Reeves', born:1964})\r\nCREATE (Carrie:Person {name:'Carrie-Anne Moss', born:1967})\r\nCREATE (Hugo:LittlePerson {name:'Hugo Weaving', born:1960})\r\nCREATE (LillyW:LittlePerson {name:'Lilly Wachowski', born:1967})\r\nCREATE (LanaW:LittlePerson {name:'Lana Wachowski', born:1965})\r\nCREATE (JoelS:Person {name:'Joel Silver', born:1952})\r\nCREATE \r\n(Keanu)-[:HAS_CHILD]->(Carrie),\r\n(Keanu)-[:HAS_CHILD]->(JoelS),\r\n(Keanu)-[:HAS_CHILD]->(Hugo),\r\n(Keanu)-[:HAS_CHILD]->(LillyW)\r\n~~~\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/805", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/805/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/805/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/805/events", "html_url": "https://github.com/technige/py2neo/issues/805", "id": 627911750, "node_id": "MDU6SXNzdWU2Mjc5MTE3NTA=", "number": 805, "title": "OGM: TypeError: Cannot cast Person to Node", "user": {"login": "Wenzel", "id": 964610, "node_id": "MDQ6VXNlcjk2NDYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/964610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wenzel", "html_url": "https://github.com/Wenzel", "followers_url": "https://api.github.com/users/Wenzel/followers", "following_url": "https://api.github.com/users/Wenzel/following{/other_user}", "gists_url": "https://api.github.com/users/Wenzel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wenzel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wenzel/subscriptions", "organizations_url": "https://api.github.com/users/Wenzel/orgs", "repos_url": "https://api.github.com/users/Wenzel/repos", "events_url": "https://api.github.com/users/Wenzel/events{/privacy}", "received_events_url": "https://api.github.com/users/Wenzel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "technige", "id": 275311, "node_id": "MDQ6VXNlcjI3NTMxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/275311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/technige", "html_url": "https://github.com/technige", "followers_url": "https://api.github.com/users/technige/followers", "following_url": "https://api.github.com/users/technige/following{/other_user}", "gists_url": "https://api.github.com/users/technige/gists{/gist_id}", "starred_url": "https://api.github.com/users/technige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/technige/subscriptions", "organizations_url": "https://api.github.com/users/technige/orgs", "repos_url": "https://api.github.com/users/technige/repos", "events_url": "https://api.github.com/users/technige/events{/privacy}", "received_events_url": "https://api.github.com/users/technige/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "technige", "id": 275311, "node_id": "MDQ6VXNlcjI3NTMxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/275311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/technige", "html_url": "https://github.com/technige", "followers_url": "https://api.github.com/users/technige/followers", "following_url": "https://api.github.com/users/technige/following{/other_user}", "gists_url": "https://api.github.com/users/technige/gists{/gist_id}", "starred_url": "https://api.github.com/users/technige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/technige/subscriptions", "organizations_url": "https://api.github.com/users/technige/orgs", "repos_url": "https://api.github.com/users/technige/repos", "events_url": "https://api.github.com/users/technige/events{/privacy}", "received_events_url": "https://api.github.com/users/technige/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-05-31T07:38:09Z", "updated_at": "2020-06-21T15:37:18Z", "closed_at": "2020-06-21T15:37:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm having an issue with the `py2neo` OGM.\r\nI'm playing with the `movies` database from neo4j:\r\n![Capture d\u2019\u00e9cran de 2020-05-31 09-32-31](https://user-images.githubusercontent.com/964610/83346990-bdb18f00-a321-11ea-897b-aebc158456a7.png)\r\n\r\n\r\nAnd the following lines are triggering a `TypeError` in `py2neo`\r\n~~~Python\r\nfrom py2neo.ogm import GraphObject, RelatedTo, Property\r\n\r\n# define Person Node\r\nclass Person(GraphObject):\r\n    name = Property()\r\n    born = Property()\r\n    acted_in = RelatedTo('Person', 'ACTED_IN')\r\n\r\n    def __init__(self, name, born):\r\n        self.name = name\r\n        self.born = born\r\n\r\n# find Tom Hanks\r\ntom_hanks_node = Person.match(graph).where(f\"_.name = 'Tom Hanks'\").first()\r\n# find all Movies where Tom Hanks ACTED_IN\r\ngraph.match((tom_hanks_node, None), 'ACTED_IN').first()\r\n~~~\r\n\r\n~~~Python\r\nIn [117]: graph.match((tom_hanks_node, None), 'ACTED_IN').first()\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-117-955f34abc553> in <module>\r\n----> 1 graph.match((tom_hanks_node, None), 'ACTED_IN').first()\r\n\r\n~/Projets/oswatcher/venv/lib/python3.8/site-packages/py2neo/matching.py in first(self)\r\n    277         :return: a single matching :class:`.Relationship` or :const:`None`\r\n    278         \"\"\"\r\n--> 279         return self.graph.evaluate(*self._query_and_parameters())\r\n    280 \r\n    281     def _query_and_parameters(self, count=False):\r\n\r\n~/Projets/oswatcher/venv/lib/python3.8/site-packages/py2neo/matching.py in _query_and_parameters(self, count)\r\n    310         elif isinstance(self._nodes, Sequence):\r\n    311             if len(self._nodes) >= 1 and self._nodes[0] is not None:\r\n--> 312                 start_node = Node.cast(self._nodes[0])\r\n    313                 verify_node(start_node)\r\n    314                 clauses.append(\"MATCH (a) WHERE id(a) = {x}\")\r\n\r\n~/Projets/oswatcher/venv/lib/python3.8/site-packages/py2neo/data.py in cast(cls, obj)\r\n    823 \r\n    824         inst = Node()\r\n--> 825         apply(obj)\r\n    826         return inst\r\n    827 \r\n\r\n~/Projets/oswatcher/venv/lib/python3.8/site-packages/py2neo/data.py in apply(x)\r\n    820                 inst.add_label(ustr(x))\r\n    821             else:\r\n--> 822                 raise TypeError(\"Cannot cast %s to Node\" % obj.__class__.__name__)\r\n    823 \r\n    824         inst = Node()\r\n\r\nTypeError: Cannot cast Person to Node\r\n~~~\r\n\r\n\r\nHowever, using the `NodeMatcher` instead of the OGM works:\r\n~~~Python\r\nmatcher = NodeMatcher(graph)\r\ntom_hanks_node = matcher.match('Person', name='Tom hanks').first()\r\ngraph.match((tom_hanks_node, None), 'ACTED_IN').first()\r\n-> (Rita Wilson)-[:ACTED_IN {roles: ['Suzy']}]->(_1)\r\n~~~\r\n\r\nI think this is a bug in the OGM @technige \r\n\r\nUsing:\r\n- **py2neo==4.3.0**\r\n- **Neo4j 3.4**\r\n\r\nThanks !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/804", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/804/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/804/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/804/events", "html_url": "https://github.com/technige/py2neo/issues/804", "id": 626086651, "node_id": "MDU6SXNzdWU2MjYwODY2NTE=", "number": 804, "title": "Neo4j Compatibility: py2neo Invalid transaction", "user": {"login": "Wenzel", "id": 964610, "node_id": "MDQ6VXNlcjk2NDYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/964610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wenzel", "html_url": "https://github.com/Wenzel", "followers_url": "https://api.github.com/users/Wenzel/followers", "following_url": "https://api.github.com/users/Wenzel/following{/other_user}", "gists_url": "https://api.github.com/users/Wenzel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wenzel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wenzel/subscriptions", "organizations_url": "https://api.github.com/users/Wenzel/orgs", "repos_url": "https://api.github.com/users/Wenzel/repos", "events_url": "https://api.github.com/users/Wenzel/events{/privacy}", "received_events_url": "https://api.github.com/users/Wenzel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-27T22:49:19Z", "updated_at": "2020-06-21T15:38:21Z", "closed_at": "2020-06-21T15:38:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have been using your library since a long time with Neo4j **3.4**, (py2neo **v4.3.0**, the latest).\r\n\r\nBut when I try to upgrade my Neo4j DB to **4.0.1**, my application immediately throws invalid transaction erros from `py2neo`:\r\n\r\n~~~Python\r\n  File \"/home/xxx/hooks/xxx.py\", line 476, in process_obj\r\n    self.tx.create(obj)\r\n  File \"/home/xxx/venv/lib/python3.8/site-packages/py2neo/database.py\", line 906, in create\r\n    create(self)\r\n  File \"/home/xxx/venv/lib/python3.8/site-packages/py2neo/ogm.py\", line 419, in __db_create__\r\n    self.__db_merge__(tx)\r\n  File \"/home/xxx/venv/lib/python3.8/site-packages/py2neo/ogm.py\", line 440, in __db_merge__\r\n    tx.create(node)\r\n  File \"/home/xxx/venv/lib/python3.8/site-packages/py2neo/database.py\", line 906, in create\r\n    create(self)\r\n  File \"/home/xxx/venv/lib/python3.8/site-packages/py2neo/data.py\", line 609, in __db_create__\r\n    create_subgraph(tx, self)\r\n  File \"/home/xxx/venv/lib/python3.8/site-packages/py2neo/internal/operations.py\", line 136, in create_subgraph\r\n    for i, identity in enumerate(identities):\r\n  File \"/home/xxx/venv/lib/python3.8/site-packages/py2neo/internal/operations.py\", line 87, in _create_nodes\r\n    for record in tx.run(cypher, x=data):\r\n  File \"/home/xxx/venv/lib/python3.8/site-packages/py2neo/database.py\", line 823, in run\r\n    return Cursor(self.connector.run(statement=cypher,\r\n  File \"/home/xxx/venv/lib/python3.8/site-packages/py2neo/internal/connectors.py\", line 294, in run\r\n    return self._run_in_tx(statement, parameters, tx, graph, keys, entities)\r\n  File \"/home/xxx/venv/lib/python3.8/site-packages/py2neo/internal/connectors.py\", line 259, in _run_in_tx\r\n    self._assert_valid_tx(tx)\r\n  File \"/home/xxx/venv/lib/python3.8/site-packages/py2neo/internal/connectors.py\", line 196, in _assert_valid_tx\r\n    raise TransactionError(\"Invalid transaction\")\r\npy2neo.database.TransactionError: Invalid transaction\r\n~~~\r\n\r\n:arrow_right:  Is there a breaking change in transactions between Neo4j `3.4` and `4.0.1` ?\r\n\r\nIf that true, since py2neo is **compatible** from Neo4j 3.2 to 4.0, it should handle this (possible) corner case internally.\r\n\r\n@technige what do you think ?\r\nCurrently I can't upgrade my Neo4j database because of this py2neo issue.\r\n\r\nThank you !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/802", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/802/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/802/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/802/events", "html_url": "https://github.com/technige/py2neo/issues/802", "id": 608950128, "node_id": "MDU6SXNzdWU2MDg5NTAxMjg=", "number": 802, "title": "Is there an efficient way to bulk import data?", "user": {"login": "hscspring", "id": 7485553, "node_id": "MDQ6VXNlcjc0ODU1NTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7485553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hscspring", "html_url": "https://github.com/hscspring", "followers_url": "https://api.github.com/users/hscspring/followers", "following_url": "https://api.github.com/users/hscspring/following{/other_user}", "gists_url": "https://api.github.com/users/hscspring/gists{/gist_id}", "starred_url": "https://api.github.com/users/hscspring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hscspring/subscriptions", "organizations_url": "https://api.github.com/users/hscspring/orgs", "repos_url": "https://api.github.com/users/hscspring/repos", "events_url": "https://api.github.com/users/hscspring/events{/privacy}", "received_events_url": "https://api.github.com/users/hscspring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-29T10:36:50Z", "updated_at": "2020-08-12T14:54:46Z", "closed_at": "2020-06-07T01:35:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am now using this way to import data:\r\n\r\n```python\r\n# (Keanu, Act, Neo)\r\nfor start, relation, end in item:\r\n    start = nmatcher.match(\"Person\", name=start).first() or Node(\"Person\", name=start)\r\n    end = nmatcher.match(\"Person\", name=end).first() or Node(\"Person\", name=end)\r\n    relation = Relationship(start, relation, end)\r\n    tx = graph.begin()\r\n    tx.create(relation)\r\n    tx.commit()\r\n```\r\n\r\nthe speed is 60 items/sec, seems a little slower.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/801", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/801/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/801/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/801/events", "html_url": "https://github.com/technige/py2neo/issues/801", "id": 604337431, "node_id": "MDU6SXNzdWU2MDQzMzc0MzE=", "number": 801, "title": "RelatedObjects graph.push() Failure - SyntaxError: {param} vs $param supported", "user": {"login": "rconrad", "id": 1256041, "node_id": "MDQ6VXNlcjEyNTYwNDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1256041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rconrad", "html_url": "https://github.com/rconrad", "followers_url": "https://api.github.com/users/rconrad/followers", "following_url": "https://api.github.com/users/rconrad/following{/other_user}", "gists_url": "https://api.github.com/users/rconrad/gists{/gist_id}", "starred_url": "https://api.github.com/users/rconrad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rconrad/subscriptions", "organizations_url": "https://api.github.com/users/rconrad/orgs", "repos_url": "https://api.github.com/users/rconrad/repos", "events_url": "https://api.github.com/users/rconrad/events{/privacy}", "received_events_url": "https://api.github.com/users/rconrad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-21T23:01:28Z", "updated_at": "2020-04-22T15:48:53Z", "closed_at": "2020-04-22T15:48:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I make a simple class like this:\r\n\r\n```\r\nfrom py2neo.ogm import GraphObject, Property, RelatedFrom\r\nfrom datetime import datetime\r\nimport uuid\r\n\r\n\r\nclass TestObject(GraphObject):\r\n\r\n    # The additional constructor\r\n    # @param self The object pointer.\r\n    def __init__(self):\r\n        self.__primaryKey__ = \"uuid\"\r\n        self.createDate = datetime.now()\r\n        self.lastUpdated = datetime.now()\r\n        tempuuid = str(uuid.uuid4())\r\n        while \"0\" <= tempuuid[-7] <= \"9\":\r\n            tempuuid = str(uuid.uuid4())\r\n        self.uuid = tempuuid\r\n\r\n    #\r\n    # Begin All section of Properties\r\n    #\r\n\r\n    # uuid (string) - The unique identifier supplied for this underlying Object, unqiue to the OGM instantiation. TBD more descriptions\r\n    uuid = Property()\r\n\r\n    # createDate (datetime) - Timestamp that the underlying Object was created\r\n    createDate = Property()\r\n    # lastUpdated (datetime) - Timestamp that the underlying Object was last changed\r\n    lastUpdated = Property()\r\n    rel = RelatedFrom(\"TestObject\", \"LIKES\")\r\n```\r\n\r\nThen write a script like this:\r\n\r\n```\r\nfrom py2neo import Graph\r\nfrom myclass import TestObject\r\n\r\ngph=Graph(user=\"user\",password=\"password\",host=\"localhost\")\r\nt1=TestObject()\r\nt2=TestObject()\r\nt1.rel.add(t2)\r\ngph.push(t1)\r\n```\r\n\r\nI get an error:\r\n```\r\npy2neo.database.ClientError: SyntaxError: The old parameter syntax `{param}` is no longer supported. Please use `$param` instead (line 1, column 40 (offset: 39))\r\n\"MATCH (a)<-[_:LIKES]-(b) WHERE id(a) = {x} AND NOT id(b) IN {y} DELETE _\"\r\n```\r\n\r\nI am using py2neo v4.3.0 and Neo4j v4.0.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/797", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/797/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/797/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/797/events", "html_url": "https://github.com/technige/py2neo/issues/797", "id": 601397477, "node_id": "MDU6SXNzdWU2MDEzOTc0Nzc=", "number": 797, "title": "Implement best practices for graph deletion", "user": {"login": "mcsoini", "id": 33124051, "node_id": "MDQ6VXNlcjMzMTI0MDUx", "avatar_url": "https://avatars0.githubusercontent.com/u/33124051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcsoini", "html_url": "https://github.com/mcsoini", "followers_url": "https://api.github.com/users/mcsoini/followers", "following_url": "https://api.github.com/users/mcsoini/following{/other_user}", "gists_url": "https://api.github.com/users/mcsoini/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcsoini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcsoini/subscriptions", "organizations_url": "https://api.github.com/users/mcsoini/orgs", "repos_url": "https://api.github.com/users/mcsoini/repos", "events_url": "https://api.github.com/users/mcsoini/events{/privacy}", "received_events_url": "https://api.github.com/users/mcsoini/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1147099805, "node_id": "MDU6TGFiZWwxMTQ3MDk5ODA1", "url": "https://api.github.com/repos/technige/py2neo/labels/wontfix", "name": "wontfix", "color": "000000", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-16T19:50:32Z", "updated_at": "2020-06-19T23:05:18Z", "closed_at": "2020-06-19T23:05:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "`Graph.delete_all` just runs `MATCH (a) DETACH DELETE a`, which is likely to cause issues even for moderate sized graphs (x*10**5 nodes). Would it make sense to implement the best practices as listed under the following link? https://neo4j.com/developer/kb/large-delete-transaction-best-practices-in-neo4j/\r\n\r\nWould it be an option to try running `apoc.periodic.iterate(\"MATCH` and fall back to something non-apoc in case it fails due to apoc not being installed?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/796", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/796/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/796/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/796/events", "html_url": "https://github.com/technige/py2neo/issues/796", "id": 600682947, "node_id": "MDU6SXNzdWU2MDA2ODI5NDc=", "number": 796, "title": "Silent non-action on cypher database.run()", "user": {"login": "cdeadlock", "id": 7480688, "node_id": "MDQ6VXNlcjc0ODA2ODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7480688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdeadlock", "html_url": "https://github.com/cdeadlock", "followers_url": "https://api.github.com/users/cdeadlock/followers", "following_url": "https://api.github.com/users/cdeadlock/following{/other_user}", "gists_url": "https://api.github.com/users/cdeadlock/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdeadlock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdeadlock/subscriptions", "organizations_url": "https://api.github.com/users/cdeadlock/orgs", "repos_url": "https://api.github.com/users/cdeadlock/repos", "events_url": "https://api.github.com/users/cdeadlock/events{/privacy}", "received_events_url": "https://api.github.com/users/cdeadlock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-16T01:26:47Z", "updated_at": "2020-04-16T01:36:10Z", "closed_at": "2020-04-16T01:36:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "py2neo 4.4.0\r\nneo4j server 4.0.2 community\r\nneo4j browser 4.0.5\r\n\r\n```\r\nCypher\r\n\r\nmatch(from:Release) with from where from.imdb is not null\r\n         match(to:imdb_title_basics {tconst:'tt'+from.imdb})\r\n         merge (from)-[i:imdb]->(to)\r\n```\r\n\r\nRunning this in the neo4j browser creates 97 relationships\r\n\r\nRunning this with database.run(cypher) results in no errors, no exceptions, i am not even sure where to look to debug what is going on (inspecting the object shows some bolt.SUCCESS and complete : TRUE but not sure where else to look inside to troubleshoot\r\nRunning database.evaluate(cypher) returns None and even less information\r\n\r\n(it is not a connection or multiple database issue, the nodes were created with the code not from the browser)\r\n\r\nMy best quess is that perhaps the string manipulation inside py2neo is not the same as what the neo4j browser does? 'tt'+from.imdb causing some trouble somewhere in py2neo? (or is that complete nonsense and the entire cypher should be executed in the neo4j server?)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/795", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/795/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/795/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/795/events", "html_url": "https://github.com/technige/py2neo/issues/795", "id": 590248005, "node_id": "MDU6SXNzdWU1OTAyNDgwMDU=", "number": 795, "title": "Can't use NEO4J_AUTH env for authentication", "user": {"login": "Pistacchione", "id": 11761177, "node_id": "MDQ6VXNlcjExNzYxMTc3", "avatar_url": "https://avatars2.githubusercontent.com/u/11761177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pistacchione", "html_url": "https://github.com/Pistacchione", "followers_url": "https://api.github.com/users/Pistacchione/followers", "following_url": "https://api.github.com/users/Pistacchione/following{/other_user}", "gists_url": "https://api.github.com/users/Pistacchione/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pistacchione/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pistacchione/subscriptions", "organizations_url": "https://api.github.com/users/Pistacchione/orgs", "repos_url": "https://api.github.com/users/Pistacchione/repos", "events_url": "https://api.github.com/users/Pistacchione/events{/privacy}", "received_events_url": "https://api.github.com/users/Pistacchione/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-30T12:23:12Z", "updated_at": "2020-04-09T08:16:17Z", "closed_at": "2020-04-08T22:06:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI see in the library it's possible to use `NEO4J_AUTH` env for user and password autentication.\r\n\r\nBut the partition separator used into `connectors.py` file is `:` instead of `/` as described in neo4j documentation [here](https://neo4j.com/docs/operations-manual/current/docker/introduction/#docker-auth) so the library authentication fail.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/794", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/794/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/794/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/794/events", "html_url": "https://github.com/technige/py2neo/issues/794", "id": 576225174, "node_id": "MDU6SXNzdWU1NzYyMjUxNzQ=", "number": 794, "title": "Use of triple-double quotes in queries to enable the use of double-quote as property?", "user": {"login": "welworx", "id": 3889195, "node_id": "MDQ6VXNlcjM4ODkxOTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3889195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/welworx", "html_url": "https://github.com/welworx", "followers_url": "https://api.github.com/users/welworx/followers", "following_url": "https://api.github.com/users/welworx/following{/other_user}", "gists_url": "https://api.github.com/users/welworx/gists{/gist_id}", "starred_url": "https://api.github.com/users/welworx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/welworx/subscriptions", "organizations_url": "https://api.github.com/users/welworx/orgs", "repos_url": "https://api.github.com/users/welworx/repos", "events_url": "https://api.github.com/users/welworx/events{/privacy}", "received_events_url": "https://api.github.com/users/welworx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-05T12:40:57Z", "updated_at": "2020-04-08T22:10:59Z", "closed_at": "2020-04-08T22:10:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Problem\r\nTying to add a property with a double-quote leads to the following error:\r\n\r\n```\r\nClientError: SyntaxError: Invalid input '\"': expected whitespace, '.', node labels, '[', \"=~\", IN, STARTS, ENDS, CONTAINS, IS, '^', '*', '/', '%', '+', '-', '=', '~', \"<>\", \"!=\", '<', '>', \"<=\", \">=\", AND, XOR, OR, FROM GRAPH, CONSTRUCT, LOAD CSV, START, MATCH, UNWIND, MERGE, CREATE UNIQUE, CREATE, SET, DELETE, REMOVE, FOREACH, WITH, CALL, RETURN, UNION, ';' or end of input (line 1, column 34 (offset: 33))\r\n\"MATCH (_:Token) WHERE _.text = \"\"\"  RETURN _\"\r\n```\r\n# With cypher_escape \r\nWith the use of cypher_escape the following error is returned:\r\n```\r\nClientError: SyntaxError: Invalid input '`': expected whitespace, '.', node labels, '[', \"=~\", IN, STARTS, ENDS, CONTAINS, IS, '^', '*', '/', '%', '+', '-', '=', '~', \"<>\", \"!=\", '<', '>', \"<=\", \">=\", AND, XOR, OR, FROM GRAPH, CONSTRUCT, LOAD CSV, START, MATCH, UNWIND, MERGE, CREATE UNIQUE, CREATE, SET, DELETE, REMOVE, FOREACH, WITH, CALL, RETURN, UNION, ';' or end of input (line 1, column 35 (offset: 34))\r\n\"MATCH (_:Token) WHERE _.text = \"`\"`\"  RETURN _\"\r\n```\r\n\r\n# Possible solution:\r\nCan the use of triple-double quotes solve this problem?\r\n`\"\"\" MATCH (_:Token) WHERE _.text = \"\"\"  RETURN _ \"\"\"`\r\n\r\n# Info\r\npy2neo version: 4.2.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/792", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/792/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/792/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/792/events", "html_url": "https://github.com/technige/py2neo/issues/792", "id": 570636413, "node_id": "MDU6SXNzdWU1NzA2MzY0MTM=", "number": 792, "title": "SyntaxError: allShortestPaths(...) contains properties Parameter(pathDepthMax,Any). This is currently not supported.", "user": {"login": "Eriz11", "id": 33129094, "node_id": "MDQ6VXNlcjMzMTI5MDk0", "avatar_url": "https://avatars2.githubusercontent.com/u/33129094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eriz11", "html_url": "https://github.com/Eriz11", "followers_url": "https://api.github.com/users/Eriz11/followers", "following_url": "https://api.github.com/users/Eriz11/following{/other_user}", "gists_url": "https://api.github.com/users/Eriz11/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eriz11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eriz11/subscriptions", "organizations_url": "https://api.github.com/users/Eriz11/orgs", "repos_url": "https://api.github.com/users/Eriz11/repos", "events_url": "https://api.github.com/users/Eriz11/events{/privacy}", "received_events_url": "https://api.github.com/users/Eriz11/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-25T15:06:59Z", "updated_at": "2020-04-08T22:37:10Z", "closed_at": "2020-04-08T22:37:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nPy2neo version == 4.3.0\r\n\r\nI'm running a cypher query, with no success in adding a final parameter (the pathDepthMax) to shorten the relationship depth.\r\n\r\nI have tried with the usual {} syntax and with the new one, but I'm still unable to add a three (3) to that variable (also putting the three as integer and string). \r\n\r\nThe problematic query is this:\r\n\r\n```\r\nPATH_RESULT = self.graph.run(\"\"\"MATCH (startN:CryptoCurr { name: $startNode }),(endN:CryptoCurr { name: $endNode }), \r\n                                        path = allShortestPaths((startN)-[:CHANGES_TO *..$pathDepthMax]-(endN)) \r\n                                        RETURN path,\r\n                                        REDUCE (s = 0, r IN RELATIONSHIPS(path) | s + r.rateValue) AS final \r\n                                        ORDER BY final DESC \r\n                                        LIMIT 1\"\"\", \r\n                                        parameters = {'startNode':'BTC',\r\n                                                      'endNode': 'BTC2',\r\n                                                      'pathDepthMax': 3})\r\n```\r\n\r\nAlthough if I do the following one it works without problems:\r\n\r\n```\r\nPATH_RESULT = self.graph.run(\"\"\"MATCH (startN:CryptoCurr { name: $startNode }),(endN:CryptoCurr { name: $endNode }), \r\n                                        path = allShortestPaths((startN)-[:CHANGES_TO *..3]-(endN)) \r\n                                        RETURN path,\r\n                                        REDUCE (s = 0, r IN RELATIONSHIPS(path) | s + r.rateValue) AS final \r\n                                        ORDER BY final DESC \r\n                                        LIMIT 1\"\"\", \r\n                                        parameters = {'startNode':'BTC',\r\n                                                      'endNode': 'BTC2')\r\n```\r\nAny idea of why this doesn't work or how it can be accomplished?\r\n\r\nThe full error says it is not supported, but I doubt if I'm doing something wrong:\r\n\r\n```\r\npy2neo.database.ClientError: SyntaxError: allShortestPaths(...) contains properties Parameter(pathDepthMax,Any). This is currently not supported. (line 2, column 48 (offset: 133))\r\n\"                                        path = allShortestPaths((startN)-[:CHANGES_TO *..$pathDepthMax]-(endN)) \"\r\n```\r\n\r\nThanks in advance, ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/791", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/791/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/791/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/791/events", "html_url": "https://github.com/technige/py2neo/issues/791", "id": 566381852, "node_id": "MDU6SXNzdWU1NjYzODE4NTI=", "number": 791, "title": "SyntaxError: The old parameter syntax `{param}` is no longer supported", "user": {"login": "msramalho", "id": 19508417, "node_id": "MDQ6VXNlcjE5NTA4NDE3", "avatar_url": "https://avatars1.githubusercontent.com/u/19508417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msramalho", "html_url": "https://github.com/msramalho", "followers_url": "https://api.github.com/users/msramalho/followers", "following_url": "https://api.github.com/users/msramalho/following{/other_user}", "gists_url": "https://api.github.com/users/msramalho/gists{/gist_id}", "starred_url": "https://api.github.com/users/msramalho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msramalho/subscriptions", "organizations_url": "https://api.github.com/users/msramalho/orgs", "repos_url": "https://api.github.com/users/msramalho/repos", "events_url": "https://api.github.com/users/msramalho/events{/privacy}", "received_events_url": "https://api.github.com/users/msramalho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2020-02-17T15:45:50Z", "updated_at": "2020-08-05T03:41:13Z", "closed_at": "2020-04-10T13:28:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using neo4j 4.0.0\r\n\r\nUsing py2neo v4\r\n\r\n`g.nodes.match(U, _id=3125349375).first()`\r\n\r\nyields:\r\n```\r\nClientError: SyntaxError: The old parameter syntax `{param}` is no longer supported. \r\nPlease use `$param` instead (line 1, column 30 (offset: 29))\r\n\"MATCH (_:USER) WHERE _._id = {1} RETURN _\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/790", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/790/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/790/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/790/events", "html_url": "https://github.com/technige/py2neo/issues/790", "id": 561102223, "node_id": "MDU6SXNzdWU1NjExMDIyMjM=", "number": 790, "title": "python multiprocessing can result in \"neobolt.exceptions.ServiceUnavailable: Failed to read from defunct connection\"", "user": {"login": "motey", "id": 1006417, "node_id": "MDQ6VXNlcjEwMDY0MTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1006417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/motey", "html_url": "https://github.com/motey", "followers_url": "https://api.github.com/users/motey/followers", "following_url": "https://api.github.com/users/motey/following{/other_user}", "gists_url": "https://api.github.com/users/motey/gists{/gist_id}", "starred_url": "https://api.github.com/users/motey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/motey/subscriptions", "organizations_url": "https://api.github.com/users/motey/orgs", "repos_url": "https://api.github.com/users/motey/repos", "events_url": "https://api.github.com/users/motey/events{/privacy}", "received_events_url": "https://api.github.com/users/motey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-06T15:51:56Z", "updated_at": "2020-04-26T21:14:55Z", "closed_at": "2020-04-26T21:14:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am not sure if this a py2neo or neobolt issue...\r\nI am trying to insert some stuff from some subprocess workers (`multiprocessing.Process`-module), which works fine.\r\nBut as soon as iam trying to access the DB from the parent process before starting my workers, some of them will have issues connecting to the neo4j DB.\r\nIt feels like there is something going wrong in the connection pool management (?)\r\nHere is a boiled down example to recreate the error:\r\n```python\r\nimport multiprocessing\r\nfrom py2neo import Graph, Node\r\nimport time\r\n\r\nneo4j_url = \"bolt://localhost:7687\"\r\n\r\n\r\nclass Worker(multiprocessing.Process):\r\n    node_count = 20\r\n\r\n    def run(self):\r\n        print(\"'{}' starts\".format(self.name))\r\n        g = Graph(neo4j_url)\r\n        for i in range(0, self.node_count):\r\n            tx = g.begin()\r\n            tx.run(\"CREATE (n:Thing) SET n.name = {}\".format(i))\r\n        print(\"'{}' commits\".format(self.name))\r\n        tx.commit()\r\n        print(\"'{}' done\".format(self.name))\r\n\r\n\r\ng = Graph(neo4j_url)\r\n# If this line is disabled, the error wont happen\r\nthing_count = g.run(\"MATCH (n:Thing) RETURN count(n) as cnt\").data()[0][\"cnt\"]\r\nprint(thing_count)\r\n\r\nworker_1 = Worker()\r\nworker_1.name = \"Worker 1\"\r\nworker_2 = Worker()\r\nworker_2.name = \"Worker 2\"\r\n\r\nworker_1.start()\r\nworker_2.start()\r\n\r\nworker_2.join()\r\nworker_1.join()\r\n``` \r\nThis result in the error for worker_1. Worker_2 runs without exception.\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\r\n    self.run()\r\n  File \"/home/myuser/Repos/git/dzdgitlab/python-sketches-and-tests/perfomance-tests/py2neo/multiprocess-insert.py\", line 16, in run\r\n    tx.run(\"CREATE (n:Thing) SET n.name = {}\".format(i))\r\n  File \"/home/myuser/.local/lib/python3.7/site-packages/py2neo/database.py\", line 859, in run\r\n    entities=entities))\r\n  File \"/home/myuser/.local/lib/python3.7/site-packages/py2neo/internal/connectors.py\", line 297, in run\r\n    return self._run_in_tx(statement, parameters, tx, graph, keys, entities)\r\n  File \"/home/myuser/.local/lib/python3.7/site-packages/py2neo/internal/connectors.py\", line 285, in _run_in_tx\r\n    result.keys()   # force receipt of RUN summary, to detect any errors\r\n  File \"/home/myuser/.local/lib/python3.7/site-packages/py2neo/internal/hydration/__init__.py\", line 77, in keys\r\n    self._on_more()\r\n  File \"/home/myuser/.local/lib/python3.7/site-packages/py2neo/internal/connectors.py\", line 265, in fetch\r\n    tx.fetch()\r\n  File \"/home/myuser/.local/lib/python3.7/site-packages/neobolt/direct.py\", line 422, in fetch\r\n    return self._fetch()\r\n  File \"/home/myuser/.local/lib/python3.7/site-packages/neobolt/direct.py\", line 464, in _fetch\r\n    response.on_failure(summary_metadata or {})\r\n  File \"/home/myuser/.local/lib/python3.7/site-packages/neobolt/direct.py\", line 752, in on_failure\r\n    self.connection.reset()\r\n  File \"/home/myuser/.local/lib/python3.7/site-packages/neobolt/direct.py\", line 384, in reset\r\n    self.sync()\r\n  File \"/home/myuser/.local/lib/python3.7/site-packages/neobolt/direct.py\", line 531, in sync\r\n    detail_delta, summary_delta = self.fetch()\r\n  File \"/home/myuser/.local/lib/python3.7/site-packages/neobolt/direct.py\", line 422, in fetch\r\n    return self._fetch()\r\n  File \"/home/myuser/.local/lib/python3.7/site-packages/neobolt/direct.py\", line 443, in _fetch\r\n    self._receive()\r\n  File \"/home/myuser/.local/lib/python3.7/site-packages/neobolt/direct.py\", line 491, in _receive\r\n    raise self.Error(message)\r\nneobolt.exceptions.ServiceUnavailable: Failed to read from defunct connection ('localhost', 7687) (Address(host='127.0.0.1', port=7687))\r\n``` \r\nBefore deep diving in the py2neo/neobolt driver and possibly losing my mind, i wanted to ask if somebody had a similar issue? Is this some expected behavior? If yes, what i am doing wrong?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/782", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/782/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/782/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/782/events", "html_url": "https://github.com/technige/py2neo/issues/782", "id": 551716709, "node_id": "MDU6SXNzdWU1NTE3MTY3MDk=", "number": 782, "title": "Node dict disappears unless referenced before acted upon", "user": {"login": "darkshade9", "id": 1392336, "node_id": "MDQ6VXNlcjEzOTIzMzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1392336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darkshade9", "html_url": "https://github.com/darkshade9", "followers_url": "https://api.github.com/users/darkshade9/followers", "following_url": "https://api.github.com/users/darkshade9/following{/other_user}", "gists_url": "https://api.github.com/users/darkshade9/gists{/gist_id}", "starred_url": "https://api.github.com/users/darkshade9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darkshade9/subscriptions", "organizations_url": "https://api.github.com/users/darkshade9/orgs", "repos_url": "https://api.github.com/users/darkshade9/repos", "events_url": "https://api.github.com/users/darkshade9/events{/privacy}", "received_events_url": "https://api.github.com/users/darkshade9/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11586704, "node_id": "MDU6TGFiZWwxMTU4NjcwNA==", "url": "https://api.github.com/repos/technige/py2neo/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-18T03:53:25Z", "updated_at": "2020-01-22T23:26:12Z", "closed_at": "2020-01-22T23:26:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry for the terse title, I couldn't think of a shorter way of explaining it.\r\n\r\nIssue here is that the dict of the Nodes from a RelationshipMatch (user.start_node) doesn't append to my list unless I call something like str(), print() or repr().  Example:\r\n\r\n### load_user_in_account has two records of <class 'py2neo.matching.RelationshipMatch'>\r\n## See https://py2neo.org/v4/matching.html#py2neo.matching.RelationshipMatch\r\nWorks as expected:\r\n```\r\nuser_list = []\r\nfor user in load_user_in_account:\r\n    print(user)\r\n    user_list.append(dict(user.start_node))\r\n \r\nprint(user_list)\r\n[{age: 31, first_name: 'Charlie',  last_name: 'Kelly'}, {age: 33, first_name: 'Dee', last_name: 'Reynolds'}]\r\n```\r\n\r\nEmpty dicts in list:\r\n```\r\nuser_list = []\r\nfor user in load_user_in_account:\r\n    user_list.append(dict(user.start_node))\r\n \r\nprint(user_list)\r\n\r\n[{}, {}]\r\n```\r\n\r\nReturns only the first index, second index returns {}:\r\n```\r\nuser_list = []\r\nfor i, user in enumerate(load_user_in_account):\r\n    if i == 0:\r\n        str(user)\r\n    user_list.append(dict(user.start_node))\r\n \r\nprint(user_list)\r\n\r\n[{age: 31, first_name: 'Charlie',  last_name: 'Kelly'}, {}]\r\n```\r\n\r\nMay be related to #770 ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/781", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/781/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/781/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/781/events", "html_url": "https://github.com/technige/py2neo/issues/781", "id": 548437839, "node_id": "MDU6SXNzdWU1NDg0Mzc4Mzk=", "number": 781, "title": "Look into adding a `Repository` object for OGM", "user": {"login": "technige", "id": 275311, "node_id": "MDQ6VXNlcjI3NTMxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/275311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/technige", "html_url": "https://github.com/technige", "followers_url": "https://api.github.com/users/technige/followers", "following_url": "https://api.github.com/users/technige/following{/other_user}", "gists_url": "https://api.github.com/users/technige/gists{/gist_id}", "starred_url": "https://api.github.com/users/technige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/technige/subscriptions", "organizations_url": "https://api.github.com/users/technige/orgs", "repos_url": "https://api.github.com/users/technige/repos", "events_url": "https://api.github.com/users/technige/events{/privacy}", "received_events_url": "https://api.github.com/users/technige/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-11T14:43:54Z", "updated_at": "2020-06-19T13:32:51Z", "closed_at": "2020-06-19T13:32:51Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/780", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/780/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/780/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/780/events", "html_url": "https://github.com/technige/py2neo/issues/780", "id": 548437758, "node_id": "MDU6SXNzdWU1NDg0Mzc3NTg=", "number": 780, "title": "Enhance the property match operations for the matchers", "user": {"login": "technige", "id": 275311, "node_id": "MDQ6VXNlcjI3NTMxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/275311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/technige", "html_url": "https://github.com/technige", "followers_url": "https://api.github.com/users/technige/followers", "following_url": "https://api.github.com/users/technige/following{/other_user}", "gists_url": "https://api.github.com/users/technige/gists{/gist_id}", "starred_url": "https://api.github.com/users/technige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/technige/subscriptions", "organizations_url": "https://api.github.com/users/technige/orgs", "repos_url": "https://api.github.com/users/technige/repos", "events_url": "https://api.github.com/users/technige/events{/privacy}", "received_events_url": "https://api.github.com/users/technige/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-11T14:43:03Z", "updated_at": "2020-04-08T22:49:44Z", "closed_at": "2020-04-08T22:49:44Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Thoughts...\r\n```\r\nmatch.where(since=1999)\r\nmatch.where(since=None)\r\n```\r\n```\r\nmatch.where(__id__=1234)\r\nmatch.where(since=EQ(1999))\r\nmatch.where(since=NE(1999))\r\nmatch.where(since=LT(1999))\r\nmatch.where(since=LE(1999))\r\nmatch.where(since=GT(1999))\r\nmatch.where(since=GE(1999))\r\nmatch.where(since=IS_NULL)\r\nmatch.where(since=IS_NOT_NULL)\r\nmatch.where(since=BETWEEN(1999, 2001))\r\nmatch.where(since=IN(1999, 2000, 2001))\r\nmatch.where(name=RE(\"Ke.*n\"))\r\nmatch.where(name=STARTS_WITH(\"Ke\"))\r\nmatch.where(name=ENDS_WITH(\"in\"))\r\nmatch.where(name=CONTAINS(\"v\"))\r\nmatch.where(year=ALL(GE(1999), LE(2001))\r\nmatch.where(year=ANY(1992, 1996, 2000)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/779", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/779/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/779/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/779/events", "html_url": "https://github.com/technige/py2neo/issues/779", "id": 548437562, "node_id": "MDU6SXNzdWU1NDg0Mzc1NjI=", "number": 779, "title": "[Feature] Cypher files", "user": {"login": "technige", "id": 275311, "node_id": "MDQ6VXNlcjI3NTMxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/275311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/technige", "html_url": "https://github.com/technige", "followers_url": "https://api.github.com/users/technige/followers", "following_url": "https://api.github.com/users/technige/following{/other_user}", "gists_url": "https://api.github.com/users/technige/gists{/gist_id}", "starred_url": "https://api.github.com/users/technige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/technige/subscriptions", "organizations_url": "https://api.github.com/users/technige/orgs", "repos_url": "https://api.github.com/users/technige/repos", "events_url": "https://api.github.com/users/technige/events{/privacy}", "received_events_url": "https://api.github.com/users/technige/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-11T14:41:07Z", "updated_at": "2020-06-29T22:59:30Z", "closed_at": "2020-06-29T22:59:30Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Introduce a `Graph.run_file` method to run Cypher from an external file, rather than a string. Also add some \"built-in\" data sets (e.g. movies) than can be used for tutorials, experimentation, etc.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/778", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/778/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/778/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/778/events", "html_url": "https://github.com/technige/py2neo/issues/778", "id": 542847394, "node_id": "MDU6SXNzdWU1NDI4NDczOTQ=", "number": 778, "title": "[Feature request] Support to load json data ", "user": {"login": "dukebarman", "id": 1186777, "node_id": "MDQ6VXNlcjExODY3Nzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1186777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dukebarman", "html_url": "https://github.com/dukebarman", "followers_url": "https://api.github.com/users/dukebarman/followers", "following_url": "https://api.github.com/users/dukebarman/following{/other_user}", "gists_url": "https://api.github.com/users/dukebarman/gists{/gist_id}", "starred_url": "https://api.github.com/users/dukebarman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dukebarman/subscriptions", "organizations_url": "https://api.github.com/users/dukebarman/orgs", "repos_url": "https://api.github.com/users/dukebarman/repos", "events_url": "https://api.github.com/users/dukebarman/events{/privacy}", "received_events_url": "https://api.github.com/users/dukebarman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-27T11:40:51Z", "updated_at": "2020-01-10T08:00:09Z", "closed_at": "2020-01-10T08:00:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be great if we can load json data to neo4j from any python values that is, not only from url / file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/777", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/777/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/777/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/777/events", "html_url": "https://github.com/technige/py2neo/issues/777", "id": 541299331, "node_id": "MDU6SXNzdWU1NDEyOTkzMzE=", "number": 777, "title": "how to create relationship between existing nodes", "user": {"login": "statfs", "id": 9411067, "node_id": "MDQ6VXNlcjk0MTEwNjc=", "avatar_url": "https://avatars0.githubusercontent.com/u/9411067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/statfs", "html_url": "https://github.com/statfs", "followers_url": "https://api.github.com/users/statfs/followers", "following_url": "https://api.github.com/users/statfs/following{/other_user}", "gists_url": "https://api.github.com/users/statfs/gists{/gist_id}", "starred_url": "https://api.github.com/users/statfs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/statfs/subscriptions", "organizations_url": "https://api.github.com/users/statfs/orgs", "repos_url": "https://api.github.com/users/statfs/repos", "events_url": "https://api.github.com/users/statfs/events{/privacy}", "received_events_url": "https://api.github.com/users/statfs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-21T08:08:09Z", "updated_at": "2020-06-02T10:05:12Z", "closed_at": "2020-01-09T15:09:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a simple code, 2 node and 1 relation. \r\nIt should be 2 node, but 4 node finally created, which means another two nodes created wrongly. \r\nJust see the picture below.\r\n![image](https://user-images.githubusercontent.com/9411067/71305226-6242b300-240b-11ea-9b6b-a8381900b827.png)\r\n\r\n\r\nPlease figure out the wrong step and tell me the right way to create relationship between this two existing nodes. Thank you very much.\r\n\r\n```\r\nfrom py2neo import Graph, Node, Relationship, NodeMatcher\r\ngraph = Graph('http://localhost:7474',username='neo4j',password='neo4j')\r\ngraph.delete_all()\r\ndata = {\"id1\":\"name1\", \"id2\":\"name2\"}\r\nfor id, name in data.items():\r\n  node = Node(\"People\", id = id, name = name)\r\n  graph.create(node)\r\n\r\nmapping = {\"id1\":\"id2\"}\r\nfor id1, id2 in mapping.items():\r\n    cql1 = \"match(n:People {id: \\\"\" + id1 + \"\\\"}) return n limit 1\"\r\n    cql2 = \"match(n:People {id: \\\"\" + id2 + \"\\\"}) return n limit 1\"\r\n    leftNode = graph.run(cql1)\r\n    for left in leftNode:\r\n        rightNode = graph.run(cql2)\r\n        for right in rightNode:\r\n            relation = Relationship(left, \"to\", right)\r\n            graph.create(relation)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/776", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/776/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/776/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/776/events", "html_url": "https://github.com/technige/py2neo/issues/776", "id": 538031049, "node_id": "MDU6SXNzdWU1MzgwMzEwNDk=", "number": 776, "title": "cache bug with gunicorn", "user": {"login": "xubiaosunny", "id": 16413465, "node_id": "MDQ6VXNlcjE2NDEzNDY1", "avatar_url": "https://avatars0.githubusercontent.com/u/16413465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xubiaosunny", "html_url": "https://github.com/xubiaosunny", "followers_url": "https://api.github.com/users/xubiaosunny/followers", "following_url": "https://api.github.com/users/xubiaosunny/following{/other_user}", "gists_url": "https://api.github.com/users/xubiaosunny/gists{/gist_id}", "starred_url": "https://api.github.com/users/xubiaosunny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xubiaosunny/subscriptions", "organizations_url": "https://api.github.com/users/xubiaosunny/orgs", "repos_url": "https://api.github.com/users/xubiaosunny/repos", "events_url": "https://api.github.com/users/xubiaosunny/events{/privacy}", "received_events_url": "https://api.github.com/users/xubiaosunny/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-15T10:26:25Z", "updated_at": "2020-01-10T15:59:04Z", "closed_at": "2020-01-10T15:59:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "My English is not very good, so I use code to express it\r\n\r\n## Environment:\r\n\r\n* python3.7\r\n* py2neo4.3.0\r\n\r\nmy flask demo\r\n\r\n```python\r\n# test.py\r\nfrom flask import Flask, request, jsonify\r\nimport requests\r\nfrom py2neo import Graph\r\n\r\napp = Flask(__name__)\r\n\r\ngraph = Graph('bolt://localhost:7687', auth=('neo4j', '123456'))\r\n\r\n\r\n@app.route('/py2neo/test', methods=['GET', 'POST'])\r\ndef test():\r\n    if request.method == 'POST':\r\n        data = request.json\r\n        name = data.pop('name')\r\n        cypher = f\"\"\"\r\n        MERGE (n:Test{{name: '{name}'}})-[r:TestR]->(m:Test2)\r\n        ON CREATE SET r = $x\r\n        ON MATCH SET r += $x\r\n        \"\"\"\r\n        graph.run(cypher, x=data)\r\n        return jsonify(data)\r\n    name = request.args.get('name')\r\n    cypher = f\"\"\"\r\n    MATCH (n:Test{{name: '{name}'}})-[r:TestR]->(m:Test2)\r\n    RETURN r\r\n    \"\"\"\r\n    results = graph.run(cypher).data()\r\n    return jsonify(results[0]['r'])\r\n```\r\n\r\nrun flask with gunicorn\r\n```bash\r\ngunicorn -w 4 -b 0.0.0.0:5000 --timeout 300 --access-logfile - --error-logfile - test:app\r\n```\r\nrequest to my server\r\n\r\n```python\r\nimport request\r\n\r\n\r\nrequests.post('http://127.0.0.1:5000/py2neo/test', json={'name': 'test', 'age': 1}, headers={ \"Content-Type\": \"application/json\"})\r\nprint('update to 1')\r\nfor _ in range(5):\r\n    print(requests.get('http://127.0.0.1:5000/py2neo/test?name=test').content)\r\nrequests.post('http://127.0.0.1:5000/py2neo/test', json={'name': 'test', 'age': 2}, headers={ \"Content-Type\": \"application/json\"})\r\nprint('update to 2')\r\n\r\nfor _ in range(5):\r\n    print(requests.get('http://127.0.0.1:5000/py2neo/test?name=test').content)\r\nrequests.post('http://127.0.0.1:5000/py2neo/test', json={'name': 'test', 'age': 3}, headers={ \"Content-Type\": \"application/json\"})\r\nprint('update to 3')\r\n\r\nfor _ in range(5):\r\n    print(requests.get('http://127.0.0.1:5000/py2neo/test?name=test').content)\r\n```\r\n\r\nconsole output result\r\n\r\n```\r\nupdate to 1\r\nb'{\"age\":1}\\n'\r\nb'{\"age\":1}\\n'\r\nb'{\"age\":1}\\n'\r\nb'{\"age\":1}\\n'\r\nb'{\"age\":1}\\n'\r\nupdate to 2\r\nb'{\"age\":1}\\n'\r\nb'{\"age\":1}\\n'\r\nb'{\"age\":1}\\n'\r\nb'{\"age\":1}\\n'\r\nb'{\"age\":1}\\n'\r\nupdate to 3\r\nb'{\"age\":1}\\n'\r\nb'{\"age\":1}\\n'\r\nb'{\"age\":1}\\n'\r\nb'{\"age\":3}\\n'\r\nb'{\"age\":1}\\n'\r\n```\r\n\r\nthe graph already update \u2019age\u2018 to 2 and 3\uff0cbut flask server still return 1\u3002\r\n\r\nThis is a bug caused by caching, `ThreadLocalEntityCache` is not working well with gunicorn\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/775", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/775/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/775/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/775/events", "html_url": "https://github.com/technige/py2neo/issues/775", "id": 522980651, "node_id": "MDU6SXNzdWU1MjI5ODA2NTE=", "number": 775, "title": "Empty property dict for a node with properties", "user": {"login": "bzurkowski", "id": 6787563, "node_id": "MDQ6VXNlcjY3ODc1NjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6787563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzurkowski", "html_url": "https://github.com/bzurkowski", "followers_url": "https://api.github.com/users/bzurkowski/followers", "following_url": "https://api.github.com/users/bzurkowski/following{/other_user}", "gists_url": "https://api.github.com/users/bzurkowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzurkowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzurkowski/subscriptions", "organizations_url": "https://api.github.com/users/bzurkowski/orgs", "repos_url": "https://api.github.com/users/bzurkowski/repos", "events_url": "https://api.github.com/users/bzurkowski/events{/privacy}", "received_events_url": "https://api.github.com/users/bzurkowski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-14T16:49:05Z", "updated_at": "2020-01-10T07:56:42Z", "closed_at": "2020-01-10T07:56:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given a node of the following representation:\r\n```\r\n(_260 {id: '2a78ad26-57b3-430c-8e5d-a9d1c17b2e5e', name: \"test\" type: 'test'})\r\n```\r\nExecuting `dict` method on such object returns an empty dictionary:\r\n```python\r\ndict(node) => {}\r\n```\r\n... even though the node has properties (`id` and `name`).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/774", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/774/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/774/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/774/events", "html_url": "https://github.com/technige/py2neo/issues/774", "id": 522299528, "node_id": "MDU6SXNzdWU1MjIyOTk1Mjg=", "number": 774, "title": "py2neo.database.TransactionError", "user": {"login": "lyriccoder", "id": 20803206, "node_id": "MDQ6VXNlcjIwODAzMjA2", "avatar_url": "https://avatars1.githubusercontent.com/u/20803206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lyriccoder", "html_url": "https://github.com/lyriccoder", "followers_url": "https://api.github.com/users/lyriccoder/followers", "following_url": "https://api.github.com/users/lyriccoder/following{/other_user}", "gists_url": "https://api.github.com/users/lyriccoder/gists{/gist_id}", "starred_url": "https://api.github.com/users/lyriccoder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lyriccoder/subscriptions", "organizations_url": "https://api.github.com/users/lyriccoder/orgs", "repos_url": "https://api.github.com/users/lyriccoder/repos", "events_url": "https://api.github.com/users/lyriccoder/events{/privacy}", "received_events_url": "https://api.github.com/users/lyriccoder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-13T15:35:10Z", "updated_at": "2019-12-11T09:25:37Z", "closed_at": "2019-12-11T09:25:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I insert many data, I get py2neo.database.TransactionError.\r\n\r\n```\r\nfrom py2neo.data import Node, Relationship\r\nfrom py2neo import Graph\r\nimport pandas as pd\r\n\r\nmod = pd.read_csv('modulenames.csv')\r\npaths = pd.read_csv('paths.csv')\r\nmod_grouped = pd.DataFrame(mod.groupby('path_id')['modulename'].apply(list).reset_index())\r\ngraph = Graph(\"http://localhost:7474/db/data/\", user=\"qweasd\", password=\"1\", bolt=False)\r\n\r\ntx = graph.begin()\r\ngraph.delete_all()\r\na = Node(str(0), name='root', id=0)\r\ngraph.create(a)\r\ntx.commit()\r\n\r\niter = 0\r\nprev_node = None\r\nfor x in paths.iterrows():\r\n    try:\r\n        id = x[1]['id']\r\n        temp_mod = mod_grouped[mod_grouped['path_id'] == id]['modulename'].tolist()[0]\r\n        name_node = ':'.join([str(id)] + temp_mod)\r\n        tx = graph.begin()\r\n        a = Node(name_node, name=x[1]['name'], id=x[1]['id'])\r\n        parent = paths[paths['id'] == x[1]['parent_id']]\r\n        graph.create(a)\r\n        if not parent.empty:\r\n            new_id = [x for x in parent['id'].astype(str)][0]\r\n            name = [x for x in parent['name'].astype(str)][0]\r\n\r\n            temp_mod = mod_grouped[mod_grouped['path_id'] == id]['modulename'].tolist()[0]\r\n            name_node = ':'.join([str(id)] + temp_mod)\r\n            parent_node = Node(name_node, name=name, id=new_id)\r\n            # print(a, parent)\r\n            graph.create(parent_node)\r\n            graph.create(Relationship(a, parent))\r\n        tx.commit()\r\n    except cypher.TransactionError as e:\r\n        print(\"--------------------------------------------\")\r\n        print(e.message)\r\n```\r\n\r\nmodulenames.csv(7000 lines):\r\n\r\n```\r\n\"id\",\"path_id\",\"modulename\"\r\n\"43\",\"23\",\"ASD\"\r\n\"44\",\"23\",\"NP_EE\"\r\n\"45\",\"26\",\"NP_EE\"\r\n```\r\npaths.csv (6928 lines):\r\n\r\n\"id\",\"parent_id\",\"name\"\r\n\"23\",\"0\",\"a\"\r\n\"26\",\"23\",\"b\"\r\n\r\n$ pip freeze\r\ncertifi==2019.9.11\r\nClick==7.0\r\ncolorama==0.4.1\r\nneobolt==1.7.15\r\nneotime==1.7.4\r\nnumpy==1.17.4\r\npandas==0.25.3\r\nprompt-toolkit==2.0.10\r\npy2neo==4.3.0\r\nPygments==2.3.1\r\npython-dateutil==2.8.1\r\npytz==2019.3\r\nsix==1.13.0\r\nurllib3==1.24.3\r\nwcwidth==0.1.7\r\n\r\nneo4j-community-3.5.12-windows\r\n\r\nWhen I insert a couple of examples, it works. But When I run it for 7000 lines, it fails.\r\nCould you please help? I used bolt=False, bolt=True, it didn't help me.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/773", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/773/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/773/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/773/events", "html_url": "https://github.com/technige/py2neo/issues/773", "id": 518634696, "node_id": "MDU6SXNzdWU1MTg2MzQ2OTY=", "number": 773, "title": "Merge crashes when __primarykey__ is not unique", "user": {"login": "motey", "id": 1006417, "node_id": "MDQ6VXNlcjEwMDY0MTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1006417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/motey", "html_url": "https://github.com/motey", "followers_url": "https://api.github.com/users/motey/followers", "following_url": "https://api.github.com/users/motey/following{/other_user}", "gists_url": "https://api.github.com/users/motey/gists{/gist_id}", "starred_url": "https://api.github.com/users/motey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/motey/subscriptions", "organizations_url": "https://api.github.com/users/motey/orgs", "repos_url": "https://api.github.com/users/motey/repos", "events_url": "https://api.github.com/users/motey/events{/privacy}", "received_events_url": "https://api.github.com/users/motey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11586704, "node_id": "MDU6TGFiZWwxMTU4NjcwNA==", "url": "https://api.github.com/repos/technige/py2neo/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-06T17:55:01Z", "updated_at": "2020-01-06T17:16:39Z", "closed_at": "2020-01-06T17:16:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had some issues pinning this case down :sweat_smile: \r\n\r\n```python\r\nfrom py2neo.ogm import GraphObject, Property\r\nfrom py2neo import Graph\r\n\r\ng = Graph(host=\"localhost\", user=\"neo4j\", password=\"neo4j\")\r\n\r\n\r\nclass Thing(GraphObject):\r\n    __primarylabel__ = \"Thing\"\r\n    __primarykey__ = \"val\"\r\n    val = Property()\r\n\r\n    def __init__(self, val):\r\n        self.val = val\r\n\r\n\r\ntx = g.begin()\r\nth = Thing(\"2\")\r\ntx.create(th.__node__)\r\ntx.commit()\r\n\r\ntx = g.begin()\r\nth = Thing(\"2\")\r\ntx.create(th.__node__)\r\ntx.commit()\r\n\r\ntx = g.begin()\r\nth = Thing(\"2\")\r\ntx.merge(th.__node__)\r\ntx.commit()\r\n``` \r\nResulting in \r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/USERNAME/Repos/git/dzdgitlab/python-sketches-and-tests/py2neo-orm/tmp.py\", line 28, in <module>\r\n    tx.merge(th.__node__)\r\n  File \"/home/USERNAME/.local/lib/python3.7/site-packages/py2neo/database.py\", line 975, in merge\r\n    merge(self, primary_label, primary_key)\r\n  File \"/home/USERNAME/.local/lib/python3.7/site-packages/py2neo/data.py\", line 618, in __db_merge__\r\n    merge_subgraph(tx, self, primary_label, primary_key)\r\n  File \"/home/USERNAME/.local/lib/python3.7/site-packages/py2neo/internal/operations.py\", line 168, in merge_subgraph\r\n    node = nodes[i]\r\nIndexError: list index out of range\r\n``` \r\nIt make sense that merge dont know what to do, if multiple nodes with the same __primarykey__ exists.\r\nI am not sure which behavior would make sense, but the current is not satisfying.\r\n\r\n## Current behavior \r\n\r\nMerge throws an \"IndexError: list index out of range\", as the query for one __primarykey__ returns more than one node and merge is not expecting that\r\n\r\n## Better behavior (?)\r\n\r\n**Option 1:** Merge just wont do a \"create\" as there is already a(or more in this case) node(s) existing\r\n**Option 2:** Merge throws an error, but more explicit like \"Can not merge as there are multiple nodes with __primarykey__  '<value>'\".\r\n\r\n\r\nWhats your opinion on that?\r\n\r\n## Testcase parameters:\r\n**Neo4j version** 3.5.12\r\n```\r\ndocker run --rm\\\r\n    --publish=7474:7474 --publish=7687:7687 \\\r\n    -e NEO4J_AUTH=none \\\r\n    --name neo4jtests \\\r\n    neo4j\r\n```\r\n**py2neo version:** 4.3.0\r\n**Python version:** 3.7.5rc1\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/772", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/772/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/772/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/772/events", "html_url": "https://github.com/technige/py2neo/issues/772", "id": 516997511, "node_id": "MDU6SXNzdWU1MTY5OTc1MTE=", "number": 772, "title": "UTF16 or UTF32", "user": {"login": "wtiscm", "id": 42766372, "node_id": "MDQ6VXNlcjQyNzY2Mzcy", "avatar_url": "https://avatars3.githubusercontent.com/u/42766372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wtiscm", "html_url": "https://github.com/wtiscm", "followers_url": "https://api.github.com/users/wtiscm/followers", "following_url": "https://api.github.com/users/wtiscm/following{/other_user}", "gists_url": "https://api.github.com/users/wtiscm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wtiscm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wtiscm/subscriptions", "organizations_url": "https://api.github.com/users/wtiscm/orgs", "repos_url": "https://api.github.com/users/wtiscm/repos", "events_url": "https://api.github.com/users/wtiscm/events{/privacy}", "received_events_url": "https://api.github.com/users/wtiscm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-04T07:48:55Z", "updated_at": "2019-11-04T07:51:10Z", "closed_at": "2019-11-04T07:51:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/771", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/771/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/771/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/771/events", "html_url": "https://github.com/technige/py2neo/issues/771", "id": 516997434, "node_id": "MDU6SXNzdWU1MTY5OTc0MzQ=", "number": 771, "title": "UTF16 or UTF32", "user": {"login": "wtiscm", "id": 42766372, "node_id": "MDQ6VXNlcjQyNzY2Mzcy", "avatar_url": "https://avatars3.githubusercontent.com/u/42766372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wtiscm", "html_url": "https://github.com/wtiscm", "followers_url": "https://api.github.com/users/wtiscm/followers", "following_url": "https://api.github.com/users/wtiscm/following{/other_user}", "gists_url": "https://api.github.com/users/wtiscm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wtiscm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wtiscm/subscriptions", "organizations_url": "https://api.github.com/users/wtiscm/orgs", "repos_url": "https://api.github.com/users/wtiscm/repos", "events_url": "https://api.github.com/users/wtiscm/events{/privacy}", "received_events_url": "https://api.github.com/users/wtiscm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-04T07:48:41Z", "updated_at": "2019-11-04T07:50:06Z", "closed_at": "2019-11-04T07:50:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/770", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/770/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/770/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/770/events", "html_url": "https://github.com/technige/py2neo/issues/770", "id": 512514863, "node_id": "MDU6SXNzdWU1MTI1MTQ4NjM=", "number": 770, "title": "The first node generated by walk() cannot be transformed into a dictionary", "user": {"login": "AlucardNosferatu", "id": 10172485, "node_id": "MDQ6VXNlcjEwMTcyNDg1", "avatar_url": "https://avatars3.githubusercontent.com/u/10172485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlucardNosferatu", "html_url": "https://github.com/AlucardNosferatu", "followers_url": "https://api.github.com/users/AlucardNosferatu/followers", "following_url": "https://api.github.com/users/AlucardNosferatu/following{/other_user}", "gists_url": "https://api.github.com/users/AlucardNosferatu/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlucardNosferatu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlucardNosferatu/subscriptions", "organizations_url": "https://api.github.com/users/AlucardNosferatu/orgs", "repos_url": "https://api.github.com/users/AlucardNosferatu/repos", "events_url": "https://api.github.com/users/AlucardNosferatu/events{/privacy}", "received_events_url": "https://api.github.com/users/AlucardNosferatu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11586704, "node_id": "MDU6TGFiZWwxMTU4NjcwNA==", "url": "https://api.github.com/repos/technige/py2neo/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-25T13:24:18Z", "updated_at": "2020-01-22T23:26:12Z", "closed_at": "2020-01-22T23:26:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I've encountered a strange thing, that is, while I try to run script directly with follow codes:\r\n`for each in walk(relationship_inst):`\r\n&nbsp;&nbsp;&nbsp;`each_dict = dict(each)`\r\n&nbsp;&nbsp;&nbsp;`print(each_dict)`\r\nthe result always show empty dict with first \"each\" of walk(), I tried to use single action procedure to rearrange the orders of every \"each\":\r\n`temp=[]`\r\n`for each in walk(relationship_inst):`\r\n&nbsp;&nbsp;&nbsp;`temp.append(each)`\r\n`print(dict(temp[2])`\r\n`#skip temp[1] which is not a Node`\r\n`print(dict(temp[0])`\r\nthe result shows that temp[2] is ok but temp[0] output empty dict regardless the running orders of 2 dict(temp[x]):\r\n![image](https://user-images.githubusercontent.com/10172485/67572908-bf065200-f769-11e9-889e-6f95c40bcd30.png)\r\nAND, the most strange part of this issue is that, while toggled debug mode on and switch the breakpoint before dict(temp[0]), the output is OK:\r\n![image](https://user-images.githubusercontent.com/10172485/67573082-173d5400-f76a-11e9-8d0f-80143b1b10dc.png)\r\nthis issue has been confirmed non-recurrent without using walk() on a relationship matched from graph (which means you cannot just create 2 nodes and 1 REL to reproduce this phenomenon) ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/769", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/769/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/769/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/769/events", "html_url": "https://github.com/technige/py2neo/issues/769", "id": 509959143, "node_id": "MDU6SXNzdWU1MDk5NTkxNDM=", "number": 769, "title": "Wrong definition of open() for SecureHTTPConnector", "user": {"login": "mbayrak78", "id": 33459119, "node_id": "MDQ6VXNlcjMzNDU5MTE5", "avatar_url": "https://avatars3.githubusercontent.com/u/33459119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbayrak78", "html_url": "https://github.com/mbayrak78", "followers_url": "https://api.github.com/users/mbayrak78/followers", "following_url": "https://api.github.com/users/mbayrak78/following{/other_user}", "gists_url": "https://api.github.com/users/mbayrak78/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbayrak78/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbayrak78/subscriptions", "organizations_url": "https://api.github.com/users/mbayrak78/orgs", "repos_url": "https://api.github.com/users/mbayrak78/repos", "events_url": "https://api.github.com/users/mbayrak78/events{/privacy}", "received_events_url": "https://api.github.com/users/mbayrak78/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-21T13:22:22Z", "updated_at": "2020-01-10T15:16:47Z", "closed_at": "2020-01-10T15:16:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "In py2neo 4.30 and in internal module **connectors.py** within the class **SecureHTTPConnector** definition of **open()** function has wrong number of args.\r\nFolowing line (418)\r\n\r\n`def open(self, cx_data):`\r\n\r\nmust be converted to\r\n\r\n`def open(self, cx_data, **_):`\r\n\r\nas in the other Connectors (HTTP, Bolt) done.\r\n\r\nAlso it would be nice to control via settings \r\n\r\n`cert_reqs=\"CERT_NONE | CERT_REQUIRED\"`\r\n\r\nin case of CERT_NONE urllib3 prints warning of insecure HTTPS conncetion.\r\n\r\nBR\r\nMustafa", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/768", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/768/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/768/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/768/events", "html_url": "https://github.com/technige/py2neo/issues/768", "id": 485050107, "node_id": "MDU6SXNzdWU0ODUwNTAxMDc=", "number": 768, "title": "How to create spatial geographic coordinate with OGM", "user": {"login": "zphingphong", "id": 558198, "node_id": "MDQ6VXNlcjU1ODE5OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/558198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zphingphong", "html_url": "https://github.com/zphingphong", "followers_url": "https://api.github.com/users/zphingphong/followers", "following_url": "https://api.github.com/users/zphingphong/following{/other_user}", "gists_url": "https://api.github.com/users/zphingphong/gists{/gist_id}", "starred_url": "https://api.github.com/users/zphingphong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zphingphong/subscriptions", "organizations_url": "https://api.github.com/users/zphingphong/orgs", "repos_url": "https://api.github.com/users/zphingphong/repos", "events_url": "https://api.github.com/users/zphingphong/events{/privacy}", "received_events_url": "https://api.github.com/users/zphingphong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-26T05:28:47Z", "updated_at": "2020-01-10T15:48:09Z", "closed_at": "2020-01-10T15:48:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nclass ExternalLocation(GraphObject):\r\n    __primarylabel__ = 'ExternalLocation'\r\n    __primarykey__ = 'coordinate'\r\n    street = Property()\r\n    city = Property()\r\n    province = Property()\r\n    country = Property()\r\n    coordinate = Property()\r\n```\r\n\r\nIn what format should latitude and longitude be saved into the `coordinate` property? Tuple? An array of 2?\r\n\r\npy2neo 4.3.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/765", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/765/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/765/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/765/events", "html_url": "https://github.com/technige/py2neo/issues/765", "id": 479514769, "node_id": "MDU6SXNzdWU0Nzk1MTQ3Njk=", "number": 765, "title": "Py2Neo graph.run() assertionerror", "user": {"login": "qianShang-Tj", "id": 15867723, "node_id": "MDQ6VXNlcjE1ODY3NzIz", "avatar_url": "https://avatars3.githubusercontent.com/u/15867723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qianShang-Tj", "html_url": "https://github.com/qianShang-Tj", "followers_url": "https://api.github.com/users/qianShang-Tj/followers", "following_url": "https://api.github.com/users/qianShang-Tj/following{/other_user}", "gists_url": "https://api.github.com/users/qianShang-Tj/gists{/gist_id}", "starred_url": "https://api.github.com/users/qianShang-Tj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qianShang-Tj/subscriptions", "organizations_url": "https://api.github.com/users/qianShang-Tj/orgs", "repos_url": "https://api.github.com/users/qianShang-Tj/repos", "events_url": "https://api.github.com/users/qianShang-Tj/events{/privacy}", "received_events_url": "https://api.github.com/users/qianShang-Tj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-12T08:05:06Z", "updated_at": "2020-04-04T07:35:56Z", "closed_at": "2019-08-15T06:18:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is the error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"generate.py\", line 19, in <module>\r\n    utility.run_cypher('MATCH (r) WHERE id(r) = 18756723 DETACH DELETE r')\r\n  File \"E:\\utility.py\", line 141, in run_cypher\r\n    graph.run(cypher)\r\n  File \"C:\\Program Files\\python3.6\\lib\\site-packages\\py2neo\\database.py\", line 533, in run\r\n    return self.begin(autocommit=True).run(cypher, parameters, **kwparameters)\r\n  File \"C:\\Program Files\\python3.6\\lib\\site-packages\\py2neo\\database.py\", line 828, in run\r\n    entities=entities))\r\n  File \"C:\\Program Files\\python3.6\\lib\\site-packages\\py2neo\\internal\\connectors.py\", line 370, in run\r\n    assert r.status == 200  # TODO: other codes\r\nAssertionError\r\n```\r\nAnd there is the python code:\r\n```\r\nfrom py2neo import Graph, Node\r\ngraph = Graph('http://192.168.xxx.xx', author=('neo4j','xxxxxx'))\r\ngraph.run('MATCH (r) WHERE id(r) = 18756723 DETACH DELETE r')\r\n```\r\nCan anyone please tell me how to make py2neo run Cypher correctly?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/763", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/763/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/763/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/763/events", "html_url": "https://github.com/technige/py2neo/issues/763", "id": 474542715, "node_id": "MDU6SXNzdWU0NzQ1NDI3MTU=", "number": 763, "title": "\"Node\" datastructure  in previous query changed by following query ", "user": {"login": "phyank", "id": 19620811, "node_id": "MDQ6VXNlcjE5NjIwODEx", "avatar_url": "https://avatars1.githubusercontent.com/u/19620811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phyank", "html_url": "https://github.com/phyank", "followers_url": "https://api.github.com/users/phyank/followers", "following_url": "https://api.github.com/users/phyank/following{/other_user}", "gists_url": "https://api.github.com/users/phyank/gists{/gist_id}", "starred_url": "https://api.github.com/users/phyank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phyank/subscriptions", "organizations_url": "https://api.github.com/users/phyank/orgs", "repos_url": "https://api.github.com/users/phyank/repos", "events_url": "https://api.github.com/users/phyank/events{/privacy}", "received_events_url": "https://api.github.com/users/phyank/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-30T11:59:26Z", "updated_at": "2020-01-23T22:46:24Z", "closed_at": "2020-01-23T22:46:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found a confusing issue which I think might be a problem for programmers. \"Node\" object returned  in previous query could be changed by the following query. I think it's because of the reuse of data structure. The following code shows this problem:\r\n```\r\nfrom py2neo import Graph\r\nfrom copy import copy\r\n\r\ngraph = Graph(uri=\"http://some.host\", auth=(\"user\", \"pass\"))\r\n\r\nnode=graph.run(\"MATCH (n:Person{name:'Vincent van Gogh'}) RETURN n;\").data()[0]['n']\r\n\r\nassert node is not None\r\n\r\n# node=copy(node) # uncomment this line to solve this problem\r\n\r\nprint(\"id:\",id(node))\r\nprint(\"node before change:\",node)\r\n\r\nnode['ghost_property']=\"will disappear\"\r\nprint(\"Adding new property:\",node)\r\n\r\nassert 'ghost_property' in node\r\n\r\ngraph.run(\"MATCH (n:Person{name:'Vincent van Gogh'}) RETURN n;\")\r\n\r\nprint(\"Ghost property disappeared:\")\r\nprint(\"id:\",id(node))\r\nprint(\"node:\",node)\r\n\r\n```\r\nIs it an expected behavior?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/762", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/762/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/762/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/762/events", "html_url": "https://github.com/technige/py2neo/issues/762", "id": 465810814, "node_id": "MDU6SXNzdWU0NjU4MTA4MTQ=", "number": 762, "title": "Fail to create remote node and relationship", "user": {"login": "boristchague", "id": 45273505, "node_id": "MDQ6VXNlcjQ1MjczNTA1", "avatar_url": "https://avatars1.githubusercontent.com/u/45273505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boristchague", "html_url": "https://github.com/boristchague", "followers_url": "https://api.github.com/users/boristchague/followers", "following_url": "https://api.github.com/users/boristchague/following{/other_user}", "gists_url": "https://api.github.com/users/boristchague/gists{/gist_id}", "starred_url": "https://api.github.com/users/boristchague/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boristchague/subscriptions", "organizations_url": "https://api.github.com/users/boristchague/orgs", "repos_url": "https://api.github.com/users/boristchague/repos", "events_url": "https://api.github.com/users/boristchague/events{/privacy}", "received_events_url": "https://api.github.com/users/boristchague/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-09T14:22:12Z", "updated_at": "2020-01-10T15:52:47Z", "closed_at": "2020-01-10T15:52:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please i need help because i don't understand what is happening. The code below is an exemple from Py2neo's doc but it doesn't work for me\r\n\r\n\r\n--------------------------------------------------------------------------------------------------------- \r\nfrom py2neo import Graph, Node, Relationship\r\ng = Graph()\r\ng = Graph(uri=\"http://localhost:7474\", user =\"neo4j\" ,password=\"xxxx\")\r\ntx = g.begin()\r\n\r\na = Node(\"Employee\", name=\"Alice\")\r\ntx.create(a)\r\n\r\nb = Node(\"Employee\", name=\"Bob\")\r\n\r\nab = Relationship(a, \"WORKS_WITH\", b)\r\n\r\ngraph.create(ab)\r\n\r\ngraph.commit()\r\n\r\ngraph.\r\n----------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\nError message \r\n\r\nHydrationError                            Traceback (most recent call last)\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\py2neo\\internal\\connectors.py in run(self, statement, parameters, tx, graph, keys, entities)\r\n    371         try:\r\n--> 372             raw_result = hydrator.hydrate_result(r.data.decode(\"utf-8\"))\r\n    373         except HydrationError as e:\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\py2neo\\internal\\hydration\\__init__.py in hydrate_result(self, data, index)\r\n    432         if data.get(\"errors\"):\r\n--> 433             raise HydrationError(*data[\"errors\"])\r\n    434         return data[\"results\"][index]\r\n\r\nHydrationError: {'code': 'Neo.ClientError.Statement.InvalidSyntax', 'message': '$x not defined (line 1, column 8 (offset: 7))\\n\"UNWIND $x AS data CREATE (_:Employe) SET _ = data RETURN id(_)\"\\n        ^'}\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nClientError                               Traceback (most recent call last)\r\n<ipython-input-95-370c4dcece46> in <module>()\r\n      5 \r\n      6 a = Node(\"Employe\", name=\"Alice\")\r\n----> 7 tx.create(a)\r\n      8 b = Node(\"Employe\", name=\"Bob\")\r\n      9 \r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\py2neo\\database.py in create(self, subgraph)\r\n    904             raise TypeError(\"No method defined to create object %r\" % subgraph)\r\n    905         else:\r\n--> 906             create(self)\r\n    907 \r\n    908     def delete(self, subgraph):\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\py2neo\\data.py in __db_create__(self, tx)\r\n    607 \r\n    608     def __db_create__(self, tx):\r\n--> 609         create_subgraph(tx, self)\r\n    610 \r\n    611     def __db_delete__(self, tx):\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\py2neo\\internal\\operations.py in create_subgraph(tx, subgraph)\r\n    134     for labels, nodes in _node_create_dict(n for n in subgraph.nodes if n.graph is None).items():\r\n    135         identities = _create_nodes(tx, labels, list(map(dict, nodes)))\r\n--> 136         for i, identity in enumerate(identities):\r\n    137             node = nodes[i]\r\n    138             node.graph = graph\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\py2neo\\internal\\operations.py in _create_nodes(tx, labels, data)\r\n     85     label_string = \"\".join(\":\" + cypher_escape(label) for label in sorted(labels))\r\n     86     cypher = \"UNWIND $x AS data CREATE (_%s) SET _ = data RETURN id(_)\" % label_string\r\n---> 87     for record in tx.run(cypher, x=data):\r\n     88         yield record[0]\r\n     89 \r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\py2neo\\database.py in run(self, cypher, parameters, **kwparameters)\r\n    826                                              graph=self.graph,\r\n    827                                              keys=[],\r\n--> 828                                              entities=entities))\r\n    829         except CypherError as error:\r\n    830             raise GraphError.hydrate({\"code\": error.code, \"message\": error.message})\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\py2neo\\internal\\connectors.py in run(self, statement, parameters, tx, graph, keys, entities)\r\n    375             if tx is not None:\r\n    376                 self.transactions.remove(tx)\r\n--> 377             raise GraphError.hydrate(e.args[0])\r\n    378         else:\r\n    379             result = CypherResult({\r\n\r\nClientError: InvalidSyntax: $x not defined (line 1, column 8 (offset: 7))\r\n\"UNWIND $x AS data CREATE (_:Employe) SET _ = data RETURN id(_)\"\r\n        ^\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/761", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/761/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/761/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/761/events", "html_url": "https://github.com/technige/py2neo/issues/761", "id": 460358566, "node_id": "MDU6SXNzdWU0NjAzNTg1NjY=", "number": 761, "title": "delete a node failed", "user": {"login": "comprel", "id": 20492360, "node_id": "MDQ6VXNlcjIwNDkyMzYw", "avatar_url": "https://avatars3.githubusercontent.com/u/20492360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/comprel", "html_url": "https://github.com/comprel", "followers_url": "https://api.github.com/users/comprel/followers", "following_url": "https://api.github.com/users/comprel/following{/other_user}", "gists_url": "https://api.github.com/users/comprel/gists{/gist_id}", "starred_url": "https://api.github.com/users/comprel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/comprel/subscriptions", "organizations_url": "https://api.github.com/users/comprel/orgs", "repos_url": "https://api.github.com/users/comprel/repos", "events_url": "https://api.github.com/users/comprel/events{/privacy}", "received_events_url": "https://api.github.com/users/comprel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-25T11:06:50Z", "updated_at": "2020-01-23T23:04:28Z", "closed_at": "2020-01-23T23:04:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "create a node like this:\r\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\nfrom py2neo.data import Node\r\nnode = Node(name='v')\r\ngraph.create(c)\r\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\ncreate success , but then I want to delete it like this, it failed , no error and give me, I can find it on web\r\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\nfrom py2neo.data import Node\r\nnode = Node(name='v')\r\ngraph.delete(node)\r\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\n\r\nbut if use delete_all  , it can delete all,  can you help me?\r\n\r\n\r\nand for match_one:\r\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\nfrom py2neo.data import Node\r\nnode = Node(name='v')\r\nnode = graph.match_one([node])\r\nprint node\r\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\nthe result is None,  but I'm sure this node exists. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/760", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/760/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/760/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/760/events", "html_url": "https://github.com/technige/py2neo/issues/760", "id": 458663244, "node_id": "MDU6SXNzdWU0NTg2NjMyNDQ=", "number": 760, "title": "HTTP to HTTPS : Cannot to connect to Bolt service", "user": {"login": "WernerWildenboer", "id": 38904590, "node_id": "MDQ6VXNlcjM4OTA0NTkw", "avatar_url": "https://avatars2.githubusercontent.com/u/38904590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WernerWildenboer", "html_url": "https://github.com/WernerWildenboer", "followers_url": "https://api.github.com/users/WernerWildenboer/followers", "following_url": "https://api.github.com/users/WernerWildenboer/following{/other_user}", "gists_url": "https://api.github.com/users/WernerWildenboer/gists{/gist_id}", "starred_url": "https://api.github.com/users/WernerWildenboer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WernerWildenboer/subscriptions", "organizations_url": "https://api.github.com/users/WernerWildenboer/orgs", "repos_url": "https://api.github.com/users/WernerWildenboer/repos", "events_url": "https://api.github.com/users/WernerWildenboer/events{/privacy}", "received_events_url": "https://api.github.com/users/WernerWildenboer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-20T13:36:38Z", "updated_at": "2020-01-10T16:17:37Z", "closed_at": "2020-01-10T16:17:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "`graph = Graph(host=\"bolt://link:443\", auth=('neo4j', 'pass'),bolt_port=443,secure=True)`\r\n\r\nAnd I get the error \r\n\r\n`ServiceUnavailable: Cannot to connect to Bolt service on ('fuji-bolt.ambrite.ch', 443) (looks like HTTP)`\r\n\r\nWas working fine before hosting as HTTPS", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/759", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/759/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/759/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/759/events", "html_url": "https://github.com/technige/py2neo/issues/759", "id": 457448103, "node_id": "MDU6SXNzdWU0NTc0NDgxMDM=", "number": 759, "title": "Py2neo v4 outputs do not match documentation, error: Cypher literal values of type py2neo.data.Walkable are not supported?", "user": {"login": "RyanHuangNLP", "id": 49582480, "node_id": "MDQ6VXNlcjQ5NTgyNDgw", "avatar_url": "https://avatars1.githubusercontent.com/u/49582480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RyanHuangNLP", "html_url": "https://github.com/RyanHuangNLP", "followers_url": "https://api.github.com/users/RyanHuangNLP/followers", "following_url": "https://api.github.com/users/RyanHuangNLP/following{/other_user}", "gists_url": "https://api.github.com/users/RyanHuangNLP/gists{/gist_id}", "starred_url": "https://api.github.com/users/RyanHuangNLP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RyanHuangNLP/subscriptions", "organizations_url": "https://api.github.com/users/RyanHuangNLP/orgs", "repos_url": "https://api.github.com/users/RyanHuangNLP/repos", "events_url": "https://api.github.com/users/RyanHuangNLP/events{/privacy}", "received_events_url": "https://api.github.com/users/RyanHuangNLP/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-18T12:21:22Z", "updated_at": "2020-02-06T15:45:36Z", "closed_at": "2020-01-09T12:46:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "follow the document \r\n```\r\na = Node(\"Person\", name=\"Alice\")\r\nb = Node(\"Person\", name=\"Bob\")\r\nc = Node(\"Person\", name=\"Mike\")\r\nab = Relationship(a, \"KNOWS\", b)\r\nac = Relationship(a, \"KNOWS\", c)\r\nw = ab + Relationship(b, \"LIKES\", c) + ac\r\nprint(w)\r\n```\r\n\r\nbut raise error\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/ramseyhuang/PycharmProjects/neo4j/test.py\", line 16, in <module>\r\n    print(w)\r\n  File \"/Users/ramseyhuang/anaconda3/envs/neo4j/lib/python3.7/site-packages/py2neo/data.py\", line 673, in __repr__\r\n    return xstr(cypher_repr(self))\r\n  File \"/Users/ramseyhuang/anaconda3/envs/neo4j/lib/python3.7/site-packages/py2neo/cypher/__init__.py\", line 71, in cypher_repr\r\n    return encoder.encode_value(value)\r\n  File \"/Users/ramseyhuang/anaconda3/envs/neo4j/lib/python3.7/site-packages/py2neo/cypher/encoding.py\", line 196, in encode_value\r\n    (type(value).__module__, type(value).__name__))\r\nTypeError: Cypher literal values of type py2neo.data.Walkable are not supported\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/757", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/757/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/757/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/757/events", "html_url": "https://github.com/technige/py2neo/issues/757", "id": 452747402, "node_id": "MDU6SXNzdWU0NTI3NDc0MDI=", "number": 757, "title": "Nested transactions not rolling back on outer exception", "user": {"login": "EdLeafe", "id": 177550, "node_id": "MDQ6VXNlcjE3NzU1MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/177550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdLeafe", "html_url": "https://github.com/EdLeafe", "followers_url": "https://api.github.com/users/EdLeafe/followers", "following_url": "https://api.github.com/users/EdLeafe/following{/other_user}", "gists_url": "https://api.github.com/users/EdLeafe/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdLeafe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdLeafe/subscriptions", "organizations_url": "https://api.github.com/users/EdLeafe/orgs", "repos_url": "https://api.github.com/users/EdLeafe/repos", "events_url": "https://api.github.com/users/EdLeafe/events{/privacy}", "received_events_url": "https://api.github.com/users/EdLeafe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-05T22:35:00Z", "updated_at": "2020-01-10T16:15:29Z", "closed_at": "2020-01-10T16:15:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm creating an app where any code that touches the database is decorated with a function that creates a transaction. It's working fine, except in the case where these transactions end up getting nested. The decorator code looks like this:\r\n\r\n```\r\ndef wrap_tx(self, fn):\r\n  @functools.wraps(fn)\r\n  def wrapper(context, *args, **kwargs):\r\n      # The app gets and maintains a connection to the database\r\n      cxn = get_connection()\r\n      with cxn.begin() as tx:\r\n          # Pushes transactions on a LIFO queue if they are active\r\n          if self._context_tx_active(context):\r\n              self.tx_queue.put(context.tx)\r\n          context.tx = tx\r\n          try:\r\n              ret = fn(context, *args, **kwargs)\r\n          except Exception as e:\r\n              # Utility to allow catching and re-raising exceptions\r\n              with excutils.save_and_reraise_exception():\r\n                  pass\r\n          finally:\r\n              if self.tx_queue.qsize():\r\n                  # Pop the queued transaction from the queue\r\n                  context.tx = self.tx_queue.get()\r\n          return ret\r\n  return wrapper\r\n```\r\nSo in some cases the code can call multiple functions that have that decorator. Example:\r\n\r\n```\r\n@wrap_tx\r\ndef delete_all_the_things(context):\r\n    delete_thing_one(context)\r\n    delete_thing_two(context)\r\n    # Now do some local queries\r\n    context.tx.run(\"MATCH (foo:THING) RETURN foo\")\r\n    # Finally, call a method that raises an exception\r\n    bad_juju(context)\r\n\r\n@wrap_tx\r\ndef delete_thing_one(context):\r\n    context.tx.run(\"MATCH (t1:THING {name: \"thing1\"}) DELETE t1\")\r\n\r\n@wrap_tx\r\ndef delete_thing_two(context):\r\n    context.tx.run(\"MATCH (t2:THING {name: \"thing2\"}) DELETE t2\")\r\n\r\n@wrap_tx\r\ndef bad_juju(context):\r\n    context.tx.run(\"SOME BAD CYPHER QUERY\")\r\n```\r\nWhat I'm seeing is that in some cases, the two deletes succeed and their transactions commit, then the third raises an exception, which rolls back its transaction, and causes the outer transaction for `delete_all_the_things()` to also roll back. However, it doesn't roll back the two deletes that were committed, and they stay deleted.\r\n\r\nI'm fairly new to Neo4j and py2neo, but have been working in relational DBs for decades, and nested transactions such as these \"just work\". I'm wondering if I'm misunderstanding how to use nested transactions, and specifically if doing the nesting through the transaction's context manager is the right way to do it. Any and all advice would be appreciated.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/756", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/756/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/756/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/756/events", "html_url": "https://github.com/technige/py2neo/issues/756", "id": 452697641, "node_id": "MDU6SXNzdWU0NTI2OTc2NDE=", "number": 756, "title": "Eagerly fetching related objects", "user": {"login": "ghostroad", "id": 8324643, "node_id": "MDQ6VXNlcjgzMjQ2NDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/8324643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghostroad", "html_url": "https://github.com/ghostroad", "followers_url": "https://api.github.com/users/ghostroad/followers", "following_url": "https://api.github.com/users/ghostroad/following{/other_user}", "gists_url": "https://api.github.com/users/ghostroad/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghostroad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghostroad/subscriptions", "organizations_url": "https://api.github.com/users/ghostroad/orgs", "repos_url": "https://api.github.com/users/ghostroad/repos", "events_url": "https://api.github.com/users/ghostroad/events{/privacy}", "received_events_url": "https://api.github.com/users/ghostroad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-05T20:20:43Z", "updated_at": "2020-01-10T15:54:47Z", "closed_at": "2020-01-10T15:54:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using `v4.3.0` and have a setup similar to the following:\r\n\r\n```\r\nclass Person(GraphObject):\r\n    name = Property()\r\n    nationality = RelatedTo(Country)\r\n```\r\n\r\nNow I'd like to do something like:\r\n```\r\nPerson.match(graph).order_by('_.name').skip(offset).limit(limit)\r\n```\r\n\r\nThe problem I'm having is that this leads to something like the n+1 query problem: The `Person` objects are loaded initially with one query, but a new query is issued for each person when `nationality` is accessed. Is there any way to specify that nationalities should be eagerly loaded without having to resort to raw Cypher?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/755", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/755/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/755/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/755/events", "html_url": "https://github.com/technige/py2neo/issues/755", "id": 451535583, "node_id": "MDU6SXNzdWU0NTE1MzU1ODM=", "number": 755, "title": "py2neo command line documentation", "user": {"login": "zeneofa", "id": 5684085, "node_id": "MDQ6VXNlcjU2ODQwODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/5684085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zeneofa", "html_url": "https://github.com/zeneofa", "followers_url": "https://api.github.com/users/zeneofa/followers", "following_url": "https://api.github.com/users/zeneofa/following{/other_user}", "gists_url": "https://api.github.com/users/zeneofa/gists{/gist_id}", "starred_url": "https://api.github.com/users/zeneofa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zeneofa/subscriptions", "organizations_url": "https://api.github.com/users/zeneofa/orgs", "repos_url": "https://api.github.com/users/zeneofa/repos", "events_url": "https://api.github.com/users/zeneofa/events{/privacy}", "received_events_url": "https://api.github.com/users/zeneofa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-03T15:05:12Z", "updated_at": "2020-01-10T12:02:36Z", "closed_at": "2020-01-10T12:02:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nNew to py2neo, I am trying to use the command line option. Unfortunately the documentation is quite vague on how to actually use it. The online documentation simply says use 'py2neo --help'. However this doesn't actually tell me how to actually use it, eg: I am trying to run a .cypher file, so I am using:\r\n\r\n` cat myfile.cypher | py2neo run -`\r\n\r\nwhich fails, because of authentication issues. There is the \"-a\" option, but no documentation on the format I should use to pass the username/password. From delving into the source code it seems that the option value is passed directly to `Graph` eventually, so I have tried `-a \"(usrname,pswd)\" , '-a (\"usrname\",\"pswd\")', '-a usrname -a pswd' `. Is there some example out there or explicit documentation that I am not aware of?\r\n\r\nI am using py2neo 4.1.3, neo4j 3.5.6 \r\n\r\nAny help would be greatly appreciated. \r\n\r\nP", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/754", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/754/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/754/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/754/events", "html_url": "https://github.com/technige/py2neo/issues/754", "id": 450554924, "node_id": "MDU6SXNzdWU0NTA1NTQ5MjQ=", "number": 754, "title": "IPython 5.8 conflict (Python 2.7)", "user": {"login": "cadryden", "id": 1258866, "node_id": "MDQ6VXNlcjEyNTg4NjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1258866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cadryden", "html_url": "https://github.com/cadryden", "followers_url": "https://api.github.com/users/cadryden/followers", "following_url": "https://api.github.com/users/cadryden/following{/other_user}", "gists_url": "https://api.github.com/users/cadryden/gists{/gist_id}", "starred_url": "https://api.github.com/users/cadryden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cadryden/subscriptions", "organizations_url": "https://api.github.com/users/cadryden/orgs", "repos_url": "https://api.github.com/users/cadryden/repos", "events_url": "https://api.github.com/users/cadryden/events{/privacy}", "received_events_url": "https://api.github.com/users/cadryden/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1147099805, "node_id": "MDU6TGFiZWwxMTQ3MDk5ODA1", "url": "https://api.github.com/repos/technige/py2neo/labels/wontfix", "name": "wontfix", "color": "000000", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-30T23:51:56Z", "updated_at": "2020-01-10T11:46:11Z", "closed_at": "2020-01-10T11:46:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to pip install py2neo 4.3 in Python 2.7 I get the following error:\r\n\r\n`ERROR: ipython 5.8.0 has requirement prompt-toolkit<2.0.0,>=1.0.4, but you'll have prompt-toolkit 2.0.9 which is incompatible.`\r\n\r\nIt looks like f4ddc190f719acb43eda6cab4f1feeac1452678f bumped the prompt_toolkit requirement beyond what IPython 5.8 requires.  Would it be possible to loosen this so py2neo could work with  the latest IPython for Python 2.7?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/752", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/752/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/752/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/752/events", "html_url": "https://github.com/technige/py2neo/issues/752", "id": 436658688, "node_id": "MDU6SXNzdWU0MzY2NTg2ODg=", "number": 752, "title": "OGM feature: Property with default_value", "user": {"login": "mfrlin", "id": 1454607, "node_id": "MDQ6VXNlcjE0NTQ2MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1454607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfrlin", "html_url": "https://github.com/mfrlin", "followers_url": "https://api.github.com/users/mfrlin/followers", "following_url": "https://api.github.com/users/mfrlin/following{/other_user}", "gists_url": "https://api.github.com/users/mfrlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfrlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfrlin/subscriptions", "organizations_url": "https://api.github.com/users/mfrlin/orgs", "repos_url": "https://api.github.com/users/mfrlin/repos", "events_url": "https://api.github.com/users/mfrlin/events{/privacy}", "received_events_url": "https://api.github.com/users/mfrlin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-24T12:06:25Z", "updated_at": "2019-05-09T09:14:12Z", "closed_at": "2019-05-09T09:14:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think it would be useful to have a default value for when you don't get a value from a database.\r\n\r\nFor example code for getting the value could look like this:\r\n\r\n```python\r\nclass Property(object):\r\n    def __init__(self, key=None, default_value=None):\r\n        self.key = key\r\n        self._default_value = default_value\r\n\r\n    def __get__(self, instance, owner):\r\n        ret_val = instance.__node__[self.key]\r\n        if ret_val is None:\r\n            return self._default_value\r\n        return ret_val\r\n```\r\n\r\nIf default_values look like a good idea I can look into how to set default value when creating and saving the object. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/751", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/751/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/751/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/751/events", "html_url": "https://github.com/technige/py2neo/issues/751", "id": 435709258, "node_id": "MDU6SXNzdWU0MzU3MDkyNTg=", "number": 751, "title": "using create_uniqueness_constraint with multiple property keys creates wrong cypher", "user": {"login": "MrGreenTea", "id": 9407731, "node_id": "MDQ6VXNlcjk0MDc3MzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/9407731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrGreenTea", "html_url": "https://github.com/MrGreenTea", "followers_url": "https://api.github.com/users/MrGreenTea/followers", "following_url": "https://api.github.com/users/MrGreenTea/following{/other_user}", "gists_url": "https://api.github.com/users/MrGreenTea/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrGreenTea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrGreenTea/subscriptions", "organizations_url": "https://api.github.com/users/MrGreenTea/orgs", "repos_url": "https://api.github.com/users/MrGreenTea/repos", "events_url": "https://api.github.com/users/MrGreenTea/events{/privacy}", "received_events_url": "https://api.github.com/users/MrGreenTea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-22T12:25:59Z", "updated_at": "2019-05-09T12:47:00Z", "closed_at": "2019-05-09T12:47:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "When running \r\n```python\r\ngraph.schema.create_uniqueness_constraint(\"Label\", \"prop1\", \"prop2\")\r\n```\r\nI get the following error\r\n```\r\npy2neo.database.ClientError: SyntaxError: Invalid input ',': expected an identifier character, '.', whitespace, '(' or IS (line 1, column 45 (offset: 44))\r\n```\r\n\r\nThat is because the cypher being created in that function\r\n```python\r\n\"CREATE CONSTRAINT ON (a:%s) \"\r\n                       \"ASSERT a.%s IS UNIQUE\" %\r\n                       (cypher_escape(label), \",\".join(map(cypher_escape, property_keys)))\r\n```\r\n\r\nWill look like this\r\n```cypher\r\nCREATE CONSTRAINT ON (a:Label) a.prop1,prop2 IS UNIQUE\r\n```\r\nbut that doesn not seem to be valid cypher. I haven't found a way to create a constraint using multiple property keys in one go.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/750", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/750/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/750/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/750/events", "html_url": "https://github.com/technige/py2neo/issues/750", "id": 434699672, "node_id": "MDU6SXNzdWU0MzQ2OTk2NzI=", "number": 750, "title": "how to create manunal index using py2neo", "user": {"login": "wangqingbin", "id": 18464066, "node_id": "MDQ6VXNlcjE4NDY0MDY2", "avatar_url": "https://avatars1.githubusercontent.com/u/18464066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wangqingbin", "html_url": "https://github.com/wangqingbin", "followers_url": "https://api.github.com/users/wangqingbin/followers", "following_url": "https://api.github.com/users/wangqingbin/following{/other_user}", "gists_url": "https://api.github.com/users/wangqingbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/wangqingbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wangqingbin/subscriptions", "organizations_url": "https://api.github.com/users/wangqingbin/orgs", "repos_url": "https://api.github.com/users/wangqingbin/repos", "events_url": "https://api.github.com/users/wangqingbin/events{/privacy}", "received_events_url": "https://api.github.com/users/wangqingbin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-18T10:28:38Z", "updated_at": "2019-05-09T12:47:54Z", "closed_at": "2019-05-09T12:47:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/748", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/748/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/748/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/748/events", "html_url": "https://github.com/technige/py2neo/issues/748", "id": 421882362, "node_id": "MDU6SXNzdWU0MjE4ODIzNjI=", "number": 748, "title": "reason[Errno 111]", "user": {"login": "Zoher15", "id": 29090730, "node_id": "MDQ6VXNlcjI5MDkwNzMw", "avatar_url": "https://avatars1.githubusercontent.com/u/29090730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoher15", "html_url": "https://github.com/Zoher15", "followers_url": "https://api.github.com/users/Zoher15/followers", "following_url": "https://api.github.com/users/Zoher15/following{/other_user}", "gists_url": "https://api.github.com/users/Zoher15/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoher15/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoher15/subscriptions", "organizations_url": "https://api.github.com/users/Zoher15/orgs", "repos_url": "https://api.github.com/users/Zoher15/repos", "events_url": "https://api.github.com/users/Zoher15/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoher15/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-17T04:58:27Z", "updated_at": "2019-05-09T12:51:41Z", "closed_at": "2019-05-09T12:51:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Hey there,** \r\n\r\n**Just started using py2neo. Was running a simple command:**\r\n\r\n```\r\nfrom py2neo import Graph\r\ngraph = Graph(password=\"xxxx\")\r\nprint(graph.run(\"MATCH (n) WHERE EXISTS(n.sssp) RETURN n\").to_table())\r\n```\r\nPython Version 3.7.1. \r\nMiniconda3 Environment. Py2neo was the first package installed.\r\nDo note that I am able to connect to localhost:7474 using firefox.\r\n\r\n**Error:**\r\n```Traceback (most recent call last):\r\n  File \"/N/u/zkachwal/Carbonate/miniconda3/lib/python3.7/site-packages/neobolt/direct.py\", line 809, in _connect\r\n    s.connect(resolved_address)\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"neo4script.py\", line 5, in <module>\r\n    print(graph.run(\"MATCH (n) WHERE EXISTS(n.sssp) RETURN n\").to_table())\r\n  File \"/N/u/zkachwal/Carbonate/miniconda3/lib/python3.7/site-packages/py2neo/database.py\", line 526, in run\r\n    return self.begin(autocommit=True).run(cypher, parameters, **kwparameters)\r\n  File \"/N/u/zkachwal/Carbonate/miniconda3/lib/python3.7/site-packages/py2neo/database.py\", line 805, in run\r\n    entities=entities))\r\n  File \"/N/u/zkachwal/Carbonate/miniconda3/lib/python3.7/site-packages/py2neo/internal/connectors.py\", line 285, in run\r\n    return self._run_1(statement, parameters, graph, keys, entities)\r\n  File \"/N/u/zkachwal/Carbonate/miniconda3/lib/python3.7/site-packages/py2neo/internal/connectors.py\", line 234, in _run_1\r\n    cx = self.pool.acquire()\r\n  File \"/N/u/zkachwal/Carbonate/miniconda3/lib/python3.7/site-packages/neobolt/direct.py\", line 698, in acquire\r\n    return self.acquire_direct(self.address)\r\n  File \"/N/u/zkachwal/Carbonate/miniconda3/lib/python3.7/site-packages/neobolt/direct.py\", line 591, in acquire_direct\r\n    connection = self.connector(address, error_handler=self.connection_error_handler)\r\n  File \"/N/u/zkachwal/Carbonate/miniconda3/lib/python3.7/site-packages/py2neo/internal/connectors.py\", line 225, in connector\r\n    return connect(address_, auth=cx_data[\"auth\"], **kwargs)\r\n  File \"/N/u/zkachwal/Carbonate/miniconda3/lib/python3.7/site-packages/neobolt/direct.py\", line 949, in connect\r\n    raise last_error\r\n  File \"/N/u/zkachwal/Carbonate/miniconda3/lib/python3.7/site-packages/neobolt/direct.py\", line 939, in connect\r\n    s = _connect(resolved_address, **config)\r\n  File \"/N/u/zkachwal/Carbonate/miniconda3/lib/python3.7/site-packages/neobolt/direct.py\", line 821, in _connect\r\n    raise ServiceUnavailable(\"Failed to establish connection to {!r} (reason {})\".format(resolved_address, error))\r\nneobolt.exceptions.ServiceUnavailable: Failed to establish connection to ('127.0.0.1', 7687) (reason [Errno 111] Connection refused)\r\n```\r\n\r\n\r\n**OS if it helps:**\r\n\r\n\r\n```(base) [zkachwal@h2 FactCheckGraph-Neo4j]$ cat /etc/os-release\r\nNAME=\"Red Hat Enterprise Linux Server\"\r\nVERSION=\"7.5 (Maipo)\"\r\nID=\"rhel\"\r\nID_LIKE=\"fedora\"\r\nVARIANT=\"Server\"\r\nVARIANT_ID=\"server\"\r\nVERSION_ID=\"7.5\"\r\nPRETTY_NAME=\"Red Hat Enterprise Linux Server 7.5 (Maipo)\"\r\nANSI_COLOR=\"0;31\"\r\nCPE_NAME=\"cpe:/o:redhat:enterprise_linux:7.5:GA:server\"\r\nHOME_URL=\"https://www.redhat.com/\"\r\nBUG_REPORT_URL=\"https://bugzilla.redhat.com/\"\r\n\r\nREDHAT_BUGZILLA_PRODUCT=\"Red Hat Enterprise Linux 7\"\r\nREDHAT_BUGZILLA_PRODUCT_VERSION=7.5\r\nREDHAT_SUPPORT_PRODUCT=\"Red Hat Enterprise Linux\"\r\nREDHAT_SUPPORT_PRODUCT_VERSION=\"7.5\"\r\n```\r\n@technige any ideas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/747", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/747/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/747/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/747/events", "html_url": "https://github.com/technige/py2neo/issues/747", "id": 420999940, "node_id": "MDU6SXNzdWU0MjA5OTk5NDA=", "number": 747, "title": "how to print the result of run cypher as it run in neo4j web terminal", "user": {"login": "loveJasmine", "id": 18051187, "node_id": "MDQ6VXNlcjE4MDUxMTg3", "avatar_url": "https://avatars2.githubusercontent.com/u/18051187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/loveJasmine", "html_url": "https://github.com/loveJasmine", "followers_url": "https://api.github.com/users/loveJasmine/followers", "following_url": "https://api.github.com/users/loveJasmine/following{/other_user}", "gists_url": "https://api.github.com/users/loveJasmine/gists{/gist_id}", "starred_url": "https://api.github.com/users/loveJasmine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/loveJasmine/subscriptions", "organizations_url": "https://api.github.com/users/loveJasmine/orgs", "repos_url": "https://api.github.com/users/loveJasmine/repos", "events_url": "https://api.github.com/users/loveJasmine/events{/privacy}", "received_events_url": "https://api.github.com/users/loveJasmine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-14T12:49:52Z", "updated_at": "2019-05-09T13:12:32Z", "closed_at": "2019-05-09T13:12:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "if I run\r\n_LOAD CSV WITH HEADERS  FROM \"file:///hudong_pedia.csv\" AS line\r\nCREATE (p:HudongItem{title:line.title,image:line.image,detail:line.detail,url:line.url,openTypeList:line.openTypeList,baseInfoKeyList:line.baseInfoKeyList,baseInfoValueList:line.baseInfoValueList})_\r\n\r\nin http://localhost:7474/browser/:\r\nI can see:\r\n**Added 113037 labels, created 113037 nodes, set 791259 properties, completed after 2816 ms.**\r\n\r\nso, i I use py2neo like:\r\n\r\nstr1 = '''\r\nLOAD CSV WITH HEADERS  FROM \"file:///hudong_pedia.csv\" AS line\r\nCREATE (p:HudongItem{title:line.title,image:line.image,detail:line.detail,url:line.url,openTypeList:line.openTypeList,baseInfoKeyList:line.baseInfoKeyList,baseInfoValueList:line.baseInfoValueList})\r\n'''\r\nret = test_graph.run(str1)#.data()\r\nprint(\"str1 ret is \", ret)\r\n\r\nthe ret is []\r\n\r\nhow can I got the message \r\n**Added 113037 labels, created 113037 nodes, set 791259 properties, completed after 2816 ms.**\r\nfrom py2neo\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/746", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/746/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/746/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/746/events", "html_url": "https://github.com/technige/py2neo/issues/746", "id": 408727256, "node_id": "MDU6SXNzdWU0MDg3MjcyNTY=", "number": 746, "title": "installing a library containing py2neo", "user": {"login": "raldam", "id": 19265951, "node_id": "MDQ6VXNlcjE5MjY1OTUx", "avatar_url": "https://avatars1.githubusercontent.com/u/19265951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raldam", "html_url": "https://github.com/raldam", "followers_url": "https://api.github.com/users/raldam/followers", "following_url": "https://api.github.com/users/raldam/following{/other_user}", "gists_url": "https://api.github.com/users/raldam/gists{/gist_id}", "starred_url": "https://api.github.com/users/raldam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raldam/subscriptions", "organizations_url": "https://api.github.com/users/raldam/orgs", "repos_url": "https://api.github.com/users/raldam/repos", "events_url": "https://api.github.com/users/raldam/events{/privacy}", "received_events_url": "https://api.github.com/users/raldam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-11T10:58:33Z", "updated_at": "2019-05-08T18:16:49Z", "closed_at": "2019-05-08T18:16:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI recently made a package for my own usage. I put py2neo in the requirements of the setup.py file \r\n`      install_requires=[\r\n          'elasticsearch',\r\n          \"py2neo\",\r\n          \"psycopg2\",\r\n      ],`\r\n\r\nThen, when I install this package for another project, I get a weird import error\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/raldam/projects/learn/neo/test.py\", line 4, in <module>\r\n    graph = Graph(host=host, password=password, user=user)\r\n  File \"/home/raldam/envs/neo/lib/python3.6/site-packages/py2neo/database.py\", line 309, in __new__\r\n    database = Database(uri, **settings)\r\n  File \"/home/raldam/envs/neo/lib/python3.6/site-packages/py2neo/database.py\", line 89, in __new__\r\n    from py2neo.internal.connectors import get_connection_data\r\n  File \"/home/raldam/envs/neo/lib/python3.6/site-packages/py2neo/internal/connectors.py\", line 25, in <module>\r\n    from certifi import where\r\nModuleNotFoundError: No module named 'certifi'\r\n\r\nIt works when I install the library \"certifi\" manually. Could you please tell me if I am doing something wrong ? I have used this scheme before for another package and I did not encounter this type of error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/745", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/745/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/745/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/745/events", "html_url": "https://github.com/technige/py2neo/issues/745", "id": 408257487, "node_id": "MDU6SXNzdWU0MDgyNTc0ODc=", "number": 745, "title": "BoltConnector doesn't respect `secure=True` setting", "user": {"login": "twall", "id": 756909, "node_id": "MDQ6VXNlcjc1NjkwOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/756909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twall", "html_url": "https://github.com/twall", "followers_url": "https://api.github.com/users/twall/followers", "following_url": "https://api.github.com/users/twall/following{/other_user}", "gists_url": "https://api.github.com/users/twall/gists{/gist_id}", "starred_url": "https://api.github.com/users/twall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twall/subscriptions", "organizations_url": "https://api.github.com/users/twall/orgs", "repos_url": "https://api.github.com/users/twall/repos", "events_url": "https://api.github.com/users/twall/events{/privacy}", "received_events_url": "https://api.github.com/users/twall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-08T17:47:54Z", "updated_at": "2019-05-08T17:14:46Z", "closed_at": "2019-05-08T17:14:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "In `BoltConnector.open`, `encrypted` should be set in the kwargs to `connect` if `cx_data` has `secure=True` in it:\r\n\r\n```\r\n    def open(self, cx_data):\r\n\r\n        def connector(address_, **kwargs):\r\n            return connect(address_, auth=cx_data[\"auth\"], **kwargs)\r\n\r\n        address = (cx_data[\"host\"], cx_data[\"port\"])\r\n        self.pool = ConnectionPool(connector, address)\r\n```\r\n\r\nThe result is that connections are always dropped if TLS is required.\r\n\r\n```\r\n>>> tx = graph.begin()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/twall/.conda/envs/plex-search/lib/python3.6/site-packages/py2neo/database.py\", line 346, in begin\r\n    return Transaction(self, autocommit)\r\n  File \"/Users/twall/.conda/envs/plex-search/lib/python3.6/site-packages/py2neo/database.py\", line 758, in __init__\r\n    self.transaction = self.connector.begin()\r\n  File \"/Users/twall/.conda/envs/plex-search/lib/python3.6/site-packages/py2neo/internal/connectors.py\", line 290, in begin\r\n    tx = self.pool.acquire()\r\n  File \"/Users/twall/.conda/envs/plex-search/lib/python3.6/site-packages/neobolt/direct.py\", line 694, in acquire\r\n    return self.acquire_direct(self.address)\r\n  File \"/Users/twall/.conda/envs/plex-search/lib/python3.6/site-packages/neobolt/direct.py\", line 587, in acquire_direct\r\n    connection = self.connector(address, error_handler=self.connection_error_handler)\r\n  File \"/Users/twall/.conda/envs/plex-search/lib/python3.6/site-packages/py2neo/internal/connectors.py\", line 225, in connector\r\n    return connect(address_, auth=cx_data[\"auth\"], **kwargs)\r\n  File \"/Users/twall/.conda/envs/plex-search/lib/python3.6/site-packages/neobolt/direct.py\", line 945, in connect\r\n    raise last_error\r\n  File \"/Users/twall/.conda/envs/plex-search/lib/python3.6/site-packages/neobolt/direct.py\", line 937, in connect\r\n    connection = _handshake(s, resolved_address, der_encoded_server_certificate, **config)\r\n  File \"/Users/twall/.conda/envs/plex-search/lib/python3.6/site-packages/neobolt/direct.py\", line 883, in _handshake\r\n    raise ServiceUnavailable(\"Connection to %r closed without handshake response\" % (resolved_address,))\r\nneobolt.exceptions.ServiceUnavailable: Connection to ('127.0.0.1', 7687) closed without handshake response\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/744", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/744/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/744/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/744/events", "html_url": "https://github.com/technige/py2neo/issues/744", "id": 407933305, "node_id": "MDU6SXNzdWU0MDc5MzMzMDU=", "number": 744, "title": "Querying related nodes return more results than expected when re-using relationship name", "user": {"login": "ajutras", "id": 3429155, "node_id": "MDQ6VXNlcjM0MjkxNTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3429155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajutras", "html_url": "https://github.com/ajutras", "followers_url": "https://api.github.com/users/ajutras/followers", "following_url": "https://api.github.com/users/ajutras/following{/other_user}", "gists_url": "https://api.github.com/users/ajutras/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajutras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajutras/subscriptions", "organizations_url": "https://api.github.com/users/ajutras/orgs", "repos_url": "https://api.github.com/users/ajutras/repos", "events_url": "https://api.github.com/users/ajutras/events{/privacy}", "received_events_url": "https://api.github.com/users/ajutras/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-07T22:50:55Z", "updated_at": "2019-05-09T13:37:22Z", "closed_at": "2019-05-09T13:37:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm building a backend that use the OGM to automate a few things. My Neo4J contains a few different node types and sometime re-use relationship names. When defining a relationship between A and B and querying which specific instances of B are related to a specific instance of A, I will get C, D, E as part of the resultset too if they have the same relationship name as the one defined between A and B. To illustrate the issue here is a short example:\r\n\r\n**In neo4j**\r\n\r\n```\r\n(Employee)-[HAS]->(Title)\r\n(Employee)-[HAS]->(Gender)\r\n(Employee)-[HAS]->(PersonalInterest)\r\n(Employee)-[HAS]->(Role)\r\n```\r\n\r\n**In python**\r\n\r\n```\r\nfrom py2neo.ogm import GraphObject, Property, RelatedTo\r\n\r\nfrom server.db.graph.utils import get_py2neo_connection\r\n\r\n\r\nclass Title(GraphObject):\r\n    __primarykey__ = \"name\"\r\n    __primarylabel__ = \"Title\"\r\n\r\n    name = Property()\r\n\r\n\r\nclass Employee(GraphObject):\r\n    __primarykey__ = \"uuid\"\r\n    __primarylabel__ = \"Employee\"\r\n\r\n    uuid = Property()\r\n    titles = RelatedTo(Title, \"HAS\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    node_property = \"uuid\"\r\n    node_value = \"3cb2e64c-3ccb-448f-9611-a07320ed73e2\"\r\n    employee = Employee.match(get_py2neo_connection()).where(\r\n        f\"_.{node_property} =~ '(?i){node_value}'\").first()\r\n\r\n    for title in employee.titles:\r\n        print(title)\r\n```\r\n\r\n**This example will output:**\r\n\r\n```\r\n<Title name='AI Developer'>\r\n<Title name='Male'>\r\n<Title name=None>\r\n<Title name=None>\r\n<Title name=None>\r\n<Title name='Developer'>\r\n```\r\n\r\nThe thing is, only the first one is right. The second one is Gender, then I have 3 PersonalInterest and the last one is a Role. All of this despite specifying that the relationship is specific to Employee and Title.\r\n\r\nI tested a manual fix in `py2neo.ogm.RelatedObjects.__db_pull__` that don't add nodes that don't have the label defined in the relationship (via the RelatedObjects.related_class attribute) and it works. But I'm wondering if my usage of the OGM is wrong, or if it's an intended behaviour.\r\n\r\nThank you for your time.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/743", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/743/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/743/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/743/events", "html_url": "https://github.com/technige/py2neo/issues/743", "id": 406258010, "node_id": "MDU6SXNzdWU0MDYyNTgwMTA=", "number": 743, "title": "Saving datetime objects returns Neotime objects - OGM", "user": {"login": "Askir", "id": 10251955, "node_id": "MDQ6VXNlcjEwMjUxOTU1", "avatar_url": "https://avatars3.githubusercontent.com/u/10251955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Askir", "html_url": "https://github.com/Askir", "followers_url": "https://api.github.com/users/Askir/followers", "following_url": "https://api.github.com/users/Askir/following{/other_user}", "gists_url": "https://api.github.com/users/Askir/gists{/gist_id}", "starred_url": "https://api.github.com/users/Askir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Askir/subscriptions", "organizations_url": "https://api.github.com/users/Askir/orgs", "repos_url": "https://api.github.com/users/Askir/repos", "events_url": "https://api.github.com/users/Askir/events{/privacy}", "received_events_url": "https://api.github.com/users/Askir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-04T10:11:52Z", "updated_at": "2019-04-26T13:47:25Z", "closed_at": "2019-04-26T13:47:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Saving a normal `datetime.datetime` Object in an OGM Object. Makes py2neo cast that object to a Neotime object to save it to the database.\r\nWhen retrieving though the object is not casted back so for example:\r\n```python\r\n    created_at = Property()\r\n    updated_at = Property()\r\n   ######\r\n   ogm_object.updated_at = datetime.datetime.now()\r\n   graph.push(ogm_object)\r\n   ogm_object = graph.match(...).first()\r\n   ogm_object.updated_at.__class__ # will equal Neotime not datetime.datetime :(\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/742", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/742/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/742/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/742/events", "html_url": "https://github.com/technige/py2neo/issues/742", "id": 405601571, "node_id": "MDU6SXNzdWU0MDU2MDE1NzE=", "number": 742, "title": "Setting up a test environment for neo4j", "user": {"login": "vonum", "id": 10870130, "node_id": "MDQ6VXNlcjEwODcwMTMw", "avatar_url": "https://avatars0.githubusercontent.com/u/10870130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vonum", "html_url": "https://github.com/vonum", "followers_url": "https://api.github.com/users/vonum/followers", "following_url": "https://api.github.com/users/vonum/following{/other_user}", "gists_url": "https://api.github.com/users/vonum/gists{/gist_id}", "starred_url": "https://api.github.com/users/vonum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vonum/subscriptions", "organizations_url": "https://api.github.com/users/vonum/orgs", "repos_url": "https://api.github.com/users/vonum/repos", "events_url": "https://api.github.com/users/vonum/events{/privacy}", "received_events_url": "https://api.github.com/users/vonum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-01T08:35:46Z", "updated_at": "2019-05-09T13:37:51Z", "closed_at": "2019-05-09T13:37:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to set up a testing environment for neo4j.\r\nWhat are the usual approaches here?\r\nI would imagine a separate database for testing.\r\nIs the appropriate way just connecting to that separate database for testing or are there some other ways in which py2neo does it out of the box.\r\n\r\nI couldn't find anything in the handbook regarding tests.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/741", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/741/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/741/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/741/events", "html_url": "https://github.com/technige/py2neo/issues/741", "id": 404968441, "node_id": "MDU6SXNzdWU0MDQ5Njg0NDE=", "number": 741, "title": "Unable to connect remotely using TLS - 401 Unauthorized", "user": {"login": "LiBa001", "id": 30984789, "node_id": "MDQ6VXNlcjMwOTg0Nzg5", "avatar_url": "https://avatars2.githubusercontent.com/u/30984789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LiBa001", "html_url": "https://github.com/LiBa001", "followers_url": "https://api.github.com/users/LiBa001/followers", "following_url": "https://api.github.com/users/LiBa001/following{/other_user}", "gists_url": "https://api.github.com/users/LiBa001/gists{/gist_id}", "starred_url": "https://api.github.com/users/LiBa001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LiBa001/subscriptions", "organizations_url": "https://api.github.com/users/LiBa001/orgs", "repos_url": "https://api.github.com/users/LiBa001/repos", "events_url": "https://api.github.com/users/LiBa001/events{/privacy}", "received_events_url": "https://api.github.com/users/LiBa001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-30T21:17:29Z", "updated_at": "2019-02-07T17:33:21Z", "closed_at": "2019-02-07T17:33:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Getting \"py2neo.database.status.Unauthorized\" when trying to connect to a remote server (bug?)\r\n\r\n> First of all: **username and password are correct!**\r\n\r\n## What I'm doing\r\nI'm running `Neo4j 3.5.0` on a server and try to connect via `https` using `py2neo v3`.\r\n\r\n**Btw: I also tried to connect on localhost and that worked just fine.**\r\n\r\nBut I need to connect from another system so I tried this:\r\n`graph = Graph('my.host.de', user='myuser', password='mypassword', secure=True)`\r\n(I tried a few different ways/combinations of defining that graph and none of 'em worked.)\r\n\r\n## Error\r\nIt raises `401 Unauthorized` which is weird because I'm 100% sure that my credentials are correct.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/linus/.local/lib/python3.6/site-packages/py2neo/database/__init__.py\", line 318, in __new__\r\n    inst = cls.__instances[key]\r\nKeyError: (<class 'py2neo.database.Graph'>, <ServerAddress settings={'host': 'my.host.de', 'secure': True}>, 'data')\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/linus/.local/lib/python3.6/site-packages/py2neo/database/http.py\", line 155, in get\r\n    response = self.__base.get(headers=headers, redirect_limit=redirect_limit, **kwargs)\r\n  File \"/home/linus/.local/lib/python3.6/site-packages/py2neo/packages/httpstream/http.py\", line 969, in get\r\n    return self.__get_or_head(\"GET\", if_modified_since, headers, redirect_limit, **kwargs)\r\n  File \"/home/linus/.local/lib/python3.6/site-packages/py2neo/packages/httpstream/http.py\", line 944, in __get_or_head\r\n    result = rq.submit(redirect_limit=redirect_limit, **kwargs)\r\n  File \"/home/linus/.local/lib/python3.6/site-packages/py2neo/packages/httpstream/http.py\", line 452, in submit\r\n    return Response.wrap(http, uri, self, rs, **response_kwargs)\r\n  File \"/home/linus/.local/lib/python3.6/site-packages/py2neo/packages/httpstream/http.py\", line 489, in wrap\r\n    raise inst\r\npy2neo.packages.httpstream.http.ClientError: 401 Unauthorized\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/linus/.local/lib/python3.6/site-packages/py2neo/database/__init__.py\", line 327, in __new__\r\n    use_bolt = version_tuple(inst.__remote__.get().content[\"neo4j_version\"]) >= (3,)\r\n  File \"/home/linus/.local/lib/python3.6/site-packages/py2neo/database/http.py\", line 163, in get\r\n    raise Unauthorized(self.uri.string)\r\npy2neo.database.status.Unauthorized: https://my.host.de:7473/db/data/\r\n```\r\nSince an `401` status code is usually only returned by the API when either the credentials are incorrect or no authorization is provided at all, I guess that it's the second one.  \r\nBut why would neo4j not receive an authorization when I specify it in the `Graph`?\r\n\r\nWell, I tested a few things.\r\n\r\n### My approach\r\n\r\nFirst I used `watch('httpstream')` to get an idea of what's happening, but that didn't really helped me further. It just showed something like this:\r\n`GET https://my.host.de:7473/db/data`\r\n\r\nI used \"Postman\" to manually call the API and specify an auth header. It worked perfectly fine and was like the last prove to me that the credentials are valid.  \r\nSo I started searching the error inside of py2neo placing some print statements in the actual get method returning the headers and some other stuff:\r\n```\r\n{'User-Agent': 'py2neo/3.1.2 HTTPStream/1.5.0 Python/3.6.7-final-0 (linux)', 'X-Stream': 'true'} {'cache': True}\r\n{'User-Agent': 'py2neo/3.1.2 HTTPStream/1.5.0 Python/3.6.7-final-0 (linux)', 'X-Stream': 'true'} https://my.host.de:7473/db/data/ GET https://my.host.de:7473/db/data/\r\n```\r\n\r\nAnd oh, what is this? There is no `Authorization` header at all!  \r\n(At this point I'm just assuming that authorization is usually done using an auth header.)\r\n\r\n#### Trying to solve things\r\nAfter that I had a look at the actual instantiation of `Graph` and noticed a few things:\r\n```Python\r\ndef __new__(cls, *uris, **settings):\r\n        database = settings.pop(\"database\", \"data\")\r\n        address = register_server(*uris, **settings)  # <-- auth info passed into this\r\n        key = (cls, address, database)\r\n        try:\r\n            inst = cls.__instances[key]\r\n        except KeyError:\r\n            inst = super(Graph, cls).__new__(cls)\r\n            inst.address = address\r\n            inst.__remote__ = Resource(address.http_uri(\"/db/%s/\" % database))  # <-- no auth info going into this\r\n            inst.transaction_uri = Resource(address.http_uri(\"/db/%s/transaction\" % database)).uri.string\r\n            inst.transaction_class = HTTPTransaction\r\n            use_bolt = address.bolt\r\n            if use_bolt is None:\r\n                use_bolt = version_tuple(inst.__remote__.get().content[\"neo4j_version\"]) >= (3,)  # <-- this is where the error appears; and again no auth info provided\r\n            if use_bolt:\r\n                auth = get_auth(address)  # <-- auth first accessed at this point (which is not reached)\r\n                inst.driver = GraphDatabase.driver(address.bolt_uri(\"/\"),\r\n                                                   auth=None if auth is None else auth.bolt_auth_token,\r\n                                                   encypted=address.secure,\r\n                                                   user_agent=\"/\".join(PRODUCT))\r\n                inst.transaction_class = BoltTransaction\r\n            inst.node_selector = NodeSelector(inst)\r\n            cls.__instances[key] = inst\r\n        return inst\r\n```\r\nThe line where the error appears is basically calling `Resource.get()` but there was no credentials provided to the `Resource` object that is used.   \r\nBeing logically: **Authorization must fail.**\r\n\r\nSo I changed it a bit:\r\n```Python\r\ndef __new__(cls, *uris, **settings):\r\n        database = settings.pop(\"database\", \"data\")\r\n        address = register_server(*uris, **settings)\r\n        key = (cls, address, database)\r\n        try:\r\n            inst = cls.__instances[key]\r\n        except KeyError:\r\n            auth = get_auth(address)  # <-- accessing auth\r\n\r\n            inst = super(Graph, cls).__new__(cls)\r\n            inst.address = address\r\n            inst.__remote__ = Resource(address.http_uri(\"/db/%s/\" % database), headers=None if auth is None else {'Authorization': auth.http_authorization})  # <-- providing http auth header\r\n            inst.transaction_uri = Resource(address.http_uri(\"/db/%s/transaction\" % database)).uri.string\r\n            inst.transaction_class = HTTPTransaction\r\n            use_bolt = address.bolt\r\n            if use_bolt is None:\r\n                use_bolt = version_tuple(inst.__remote__.get().content[\"neo4j_version\"]) >= (3,)  # <-- now this has access to the auth header\r\n            if use_bolt:\r\n                inst.driver = GraphDatabase.driver(address.bolt_uri(\"/\"),\r\n                                                   auth=None if auth is None else auth.bolt_auth_token,\r\n                                                   encrypted=address.secure,\r\n                                                   user_agent=\"/\".join(PRODUCT))\r\n                inst.transaction_class = BoltTransaction\r\n            inst.node_selector = NodeSelector(inst)\r\n            cls.__instances[key] = inst\r\n        return inst\r\n```\r\n\r\nThen I tried creating a `Graph` again and \u2026 SURPRISE: **it works!**\r\n\r\n## Conclusion\r\nTo me everything looks like this is a bug but I'm still not 100% confident about it, because this is such a common thing to do that I really don't know how something like that would not have been recognized yet \u2026  \r\nMaybe I'm just missing something obvious?\r\n\r\nPlease tell me I'm not stupid. :/  (or just tell me what I'm doing wrong. Either way is strongly appreciated.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/740", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/740/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/740/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/740/events", "html_url": "https://github.com/technige/py2neo/issues/740", "id": 404471184, "node_id": "MDU6SXNzdWU0MDQ0NzExODQ=", "number": 740, "title": "Py2neo RelatedTo/From cause circular import errors", "user": {"login": "digerati9", "id": 19416174, "node_id": "MDQ6VXNlcjE5NDE2MTc0", "avatar_url": "https://avatars0.githubusercontent.com/u/19416174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/digerati9", "html_url": "https://github.com/digerati9", "followers_url": "https://api.github.com/users/digerati9/followers", "following_url": "https://api.github.com/users/digerati9/following{/other_user}", "gists_url": "https://api.github.com/users/digerati9/gists{/gist_id}", "starred_url": "https://api.github.com/users/digerati9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/digerati9/subscriptions", "organizations_url": "https://api.github.com/users/digerati9/orgs", "repos_url": "https://api.github.com/users/digerati9/repos", "events_url": "https://api.github.com/users/digerati9/events{/privacy}", "received_events_url": "https://api.github.com/users/digerati9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-29T20:24:24Z", "updated_at": "2019-01-31T23:03:57Z", "closed_at": "2019-01-31T23:03:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a graph with\r\n(a)-[:LINKS_TO]->(b)\r\n\r\nclass a(GraphObject):\r\n   \u2026\r\n   links_to = RelatedTo(b, \u201cLINKS_TO\u201d)\r\n\r\nclass b(GraphObject):\r\n \u2026\r\n links_from = RelatedFrom(a, \u201cLINKS_TO\u201d)\r\n\r\nNote: using the objects a and b here not \u2018a\u2019 and \u2018b\u2019.\r\n\r\nThis works perfectly in class b; I can jump through the relationship and work with the a object perfectly.\r\n\r\nWith class b, it tells me a cannot be found because the class is not yet defined.\r\n\r\nPython is unable to handle these circular references.  \r\n\r\nWe are experimenting with using \u2018a\u2019 in the RelatedTo definition, however, at first try, it doesn\u2019t return the GraphObject the same way (we get an empty return).\r\n\r\nThe py2neo documentation example is here: https://py2neo.org/v4/ogm.html\r\n\r\nIt uses quotes in the first class and objects in the 2nd.  Experimenting with this setup today, but out relationships are more complex so examples of successful implementation would be helpful.\r\n\r\nThis MUST come up in nearly all Py2neo OGM implementations since you would want to reference the related objects from nearly every class.\r\n\r\nWhat is a good solution to this?  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/739", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/739/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/739/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/739/events", "html_url": "https://github.com/technige/py2neo/issues/739", "id": 401588397, "node_id": "MDU6SXNzdWU0MDE1ODgzOTc=", "number": 739, "title": "Unable to connect - Keyerror", "user": {"login": "GeoWonk", "id": 25493004, "node_id": "MDQ6VXNlcjI1NDkzMDA0", "avatar_url": "https://avatars3.githubusercontent.com/u/25493004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GeoWonk", "html_url": "https://github.com/GeoWonk", "followers_url": "https://api.github.com/users/GeoWonk/followers", "following_url": "https://api.github.com/users/GeoWonk/following{/other_user}", "gists_url": "https://api.github.com/users/GeoWonk/gists{/gist_id}", "starred_url": "https://api.github.com/users/GeoWonk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GeoWonk/subscriptions", "organizations_url": "https://api.github.com/users/GeoWonk/orgs", "repos_url": "https://api.github.com/users/GeoWonk/repos", "events_url": "https://api.github.com/users/GeoWonk/events{/privacy}", "received_events_url": "https://api.github.com/users/GeoWonk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-22T03:48:36Z", "updated_at": "2019-05-08T18:17:26Z", "closed_at": "2019-05-08T18:17:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I tried to connect to the database I receive errors as such (Python 3.5, Neo4j 3.5.1). The errors are identical regardless of whether I attempt to pass the bolt or http addresses directly. They are still the default addresses. I am able to connect using the officially supported neo4j bolt driver (1.7.1), but not py2neo (4.1.3) which I would prefer to use as an interface.\r\n\r\n```\r\n`from py2neo import Graph\r\ng = Graph(password = 'password')\r\n````\r\n```Traceback (most recent call last):\r\n  File \"/usr/local/lib/python3.5/dist-packages/py2neo/database.py\", line 88, in __new__\r\n    inst = cls._instances[key]\r\nKeyError: '1dd14af494824058e61abe2bb95cadc4'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.5/dist-packages/py2neo/database.py\", line 305, in __new__\r\n    database = Database(uri, **settings)\r\n  File \"/usr/local/lib/python3.5/dist-packages/py2neo/database.py\", line 92, in __new__\r\n    from py2neo.internal.http import HTTPDriver, HTTPSDriver\r\n  File \"/usr/local/lib/python3.5/dist-packages/py2neo/internal/http.py\", line 26, in <module>\r\n    from neo4j.addressing import SocketAddress\r\n  File \"/usr/local/lib/python3.5/dist-packages/neo4j/addressing.py\", line 26, in <module>\r\n    from neo4j.exceptions import AddressError\r\nImportError: cannot import name 'AddressError'\r\n```\r\n\r\nLikewise\r\n```\r\nfrom py2neo import Database\r\ndb = Database()\r\n```\r\nyields\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.5/dist-packages/py2neo/database.py\", line 88, in __new__\r\n    inst = cls._instances[key]\r\nKeyError: '6a27b93fae4fd6ece8144af722dc8768'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.5/dist-packages/py2neo/database.py\", line 92, in __new__\r\n    from py2neo.internal.http import HTTPDriver, HTTPSDriver\r\n  File \"/usr/local/lib/python3.5/dist-packages/py2neo/internal/http.py\", line 26, in <module>\r\n    from neo4j.addressing import SocketAddress\r\n  File \"/usr/local/lib/python3.5/dist-packages/neo4j/addressing.py\", line 26, in <module>\r\n    from neo4j.exceptions import AddressError\r\nImportError: cannot import name 'AddressError'\r\n```\r\nWith the hash as key differing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/738", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/738/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/738/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/738/events", "html_url": "https://github.com/technige/py2neo/issues/738", "id": 401459146, "node_id": "MDU6SXNzdWU0MDE0NTkxNDY=", "number": 738, "title": "Preloading relationships in OGM?", "user": {"login": "danielrs", "id": 1887507, "node_id": "MDQ6VXNlcjE4ODc1MDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1887507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielrs", "html_url": "https://github.com/danielrs", "followers_url": "https://api.github.com/users/danielrs/followers", "following_url": "https://api.github.com/users/danielrs/following{/other_user}", "gists_url": "https://api.github.com/users/danielrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielrs/subscriptions", "organizations_url": "https://api.github.com/users/danielrs/orgs", "repos_url": "https://api.github.com/users/danielrs/repos", "events_url": "https://api.github.com/users/danielrs/events{/privacy}", "received_events_url": "https://api.github.com/users/danielrs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-21T17:58:32Z", "updated_at": "2019-05-09T13:38:55Z", "closed_at": "2019-05-09T13:38:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "We should be able to preload relationships, something like:\r\n\r\n```\r\nclass Person(GraphObject):\r\n    likes = RelatedTo('Person', 'LIKES')\r\n\r\nPerson.match(graph).preload('likes')\r\n```\r\n\r\nSo the following code:\r\n\r\n```\r\nfor person in Person.match(graph).preload('likes'):\r\n    for other_person in person.likes:\r\n        print(other_person)\r\n```\r\n\r\nWould be a lot faster (instead of lazily loading `person.likes`). Any thoughts on this? I tried searching the documentation, but the solution since to execute raw cypher queries.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/737", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/737/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/737/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/737/events", "html_url": "https://github.com/technige/py2neo/issues/737", "id": 399688481, "node_id": "MDU6SXNzdWUzOTk2ODg0ODE=", "number": 737, "title": "another issue with merge and special characters", "user": {"login": "ss433s", "id": 13692701, "node_id": "MDQ6VXNlcjEzNjkyNzAx", "avatar_url": "https://avatars1.githubusercontent.com/u/13692701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ss433s", "html_url": "https://github.com/ss433s", "followers_url": "https://api.github.com/users/ss433s/followers", "following_url": "https://api.github.com/users/ss433s/following{/other_user}", "gists_url": "https://api.github.com/users/ss433s/gists{/gist_id}", "starred_url": "https://api.github.com/users/ss433s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ss433s/subscriptions", "organizations_url": "https://api.github.com/users/ss433s/orgs", "repos_url": "https://api.github.com/users/ss433s/repos", "events_url": "https://api.github.com/users/ss433s/events{/privacy}", "received_events_url": "https://api.github.com/users/ss433s/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-16T07:59:32Z", "updated_at": "2019-05-09T13:39:31Z", "closed_at": "2019-05-09T13:39:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "the code is\r\n\r\n`graph.merge(label,'LABEL','value')`\r\n\r\nthe error is \r\n\r\n`Traceback (most recent call last):\r\n  File \"load_data.py\", line 16, in <module>\r\n    graph.merge(label,'LABEL','value')\r\n  File \"/data/apps/anaconda3/envs/python36/lib/python3.6/site-packages/py2neo/database.py\", line 434, in merge\r\n    tx.merge(subgraph, label, *property_keys)\r\n  File \"/data/apps/anaconda3/envs/python36/lib/python3.6/site-packages/py2neo/database.py\", line 1000, in merge\r\n    merge(self, primary_label, primary_key)\r\n  File \"/data/apps/anaconda3/envs/python36/lib/python3.6/site-packages/py2neo/data.py\", line 624, in __db_merge__\r\n    merge_subgraph(tx, self, primary_label, primary_key)\r\n  File \"/data/apps/anaconda3/envs/python36/lib/python3.6/site-packages/py2neo/internal/operations.py\", line 168, in merge_subgraph\r\n    node = nodes[i]\r\nIndexError: list index out of range`\r\n\r\nalmost exactly as https://github.com/technige/py2neo/issues/701\r\n\r\nchange the primary label to another word would work.\r\n\r\nsorry I just used such a 'label'\r\n\r\nanyway, it will be better if this could be fixed....", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/736", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/736/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/736/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/736/events", "html_url": "https://github.com/technige/py2neo/issues/736", "id": 398895796, "node_id": "MDU6SXNzdWUzOTg4OTU3OTY=", "number": 736, "title": "Documentation @py2neo.org is outdated.", "user": {"login": "abbasidaniyal", "id": 36009198, "node_id": "MDQ6VXNlcjM2MDA5MTk4", "avatar_url": "https://avatars1.githubusercontent.com/u/36009198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abbasidaniyal", "html_url": "https://github.com/abbasidaniyal", "followers_url": "https://api.github.com/users/abbasidaniyal/followers", "following_url": "https://api.github.com/users/abbasidaniyal/following{/other_user}", "gists_url": "https://api.github.com/users/abbasidaniyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/abbasidaniyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abbasidaniyal/subscriptions", "organizations_url": "https://api.github.com/users/abbasidaniyal/orgs", "repos_url": "https://api.github.com/users/abbasidaniyal/repos", "events_url": "https://api.github.com/users/abbasidaniyal/events{/privacy}", "received_events_url": "https://api.github.com/users/abbasidaniyal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-14T13:48:22Z", "updated_at": "2019-05-09T13:40:21Z", "closed_at": "2019-05-09T13:40:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Several commands given in the documentation are outdated. Is there a way to get the latest updated documentation?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/734", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/734/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/734/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/734/events", "html_url": "https://github.com/technige/py2neo/issues/734", "id": 398336131, "node_id": "MDU6SXNzdWUzOTgzMzYxMzE=", "number": 734, "title": "Py2neo uses urllib3 version that is flagged as a security risk!", "user": {"login": "Askir", "id": 10251955, "node_id": "MDQ6VXNlcjEwMjUxOTU1", "avatar_url": "https://avatars3.githubusercontent.com/u/10251955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Askir", "html_url": "https://github.com/Askir", "followers_url": "https://api.github.com/users/Askir/followers", "following_url": "https://api.github.com/users/Askir/following{/other_user}", "gists_url": "https://api.github.com/users/Askir/gists{/gist_id}", "starred_url": "https://api.github.com/users/Askir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Askir/subscriptions", "organizations_url": "https://api.github.com/users/Askir/orgs", "repos_url": "https://api.github.com/users/Askir/repos", "events_url": "https://api.github.com/users/Askir/events{/privacy}", "received_events_url": "https://api.github.com/users/Askir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-11T15:29:54Z", "updated_at": "2019-01-31T23:07:03Z", "closed_at": "2019-01-31T23:07:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "urllib3 is apparently a security risk before version 1.23  \r\nhttps://nvd.nist.gov/vuln/detail/CVE-2018-20060\r\n\r\nThe dependency for py2neo lists >1.21 and <1.23 though!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/733", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/733/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/733/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/733/events", "html_url": "https://github.com/technige/py2neo/issues/733", "id": 396203382, "node_id": "MDU6SXNzdWUzOTYyMDMzODI=", "number": 733, "title": "ImportError: cannot import name 'import_best'", "user": {"login": "dchang56", "id": 24575558, "node_id": "MDQ6VXNlcjI0NTc1NTU4", "avatar_url": "https://avatars1.githubusercontent.com/u/24575558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dchang56", "html_url": "https://github.com/dchang56", "followers_url": "https://api.github.com/users/dchang56/followers", "following_url": "https://api.github.com/users/dchang56/following{/other_user}", "gists_url": "https://api.github.com/users/dchang56/gists{/gist_id}", "starred_url": "https://api.github.com/users/dchang56/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dchang56/subscriptions", "organizations_url": "https://api.github.com/users/dchang56/orgs", "repos_url": "https://api.github.com/users/dchang56/repos", "events_url": "https://api.github.com/users/dchang56/events{/privacy}", "received_events_url": "https://api.github.com/users/dchang56/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-05T21:55:16Z", "updated_at": "2019-01-05T23:08:19Z", "closed_at": "2019-01-05T23:08:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThe code throwing the error looks like this:\r\n\r\nfrom py2neo import Graph\r\ngraph = Graph()\r\n###same if I do \"graph = Graph(\"bolt://localhost:7687\", auth=(\"neo4j\", \"0000\"))\"\r\nAnd I get this:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/dchang/anaconda3/envs/dec2018/lib/python3.6/site-packages/py2neo/database.py\", line 88, in __new__\r\n    inst = cls._instances[key]\r\nKeyError: '0398321414780170895a995e32ce7977'\r\nDuring handling of the above exception, another exception occurred:\r\nTraceback (most recent call last):\r\n  File \"/Users/dchang/anaconda3/envs/dec2018/lib/python3.6/site-packages/IPython/core/interactiveshell.py\", line 3267, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-5-56fc161e0a64>\", line 1, in <module>\r\n    graph = Graph()\r\n  File \"/Users/dchang/anaconda3/envs/dec2018/lib/python3.6/site-packages/py2neo/database.py\", line 305, in __new__\r\n    database = Database(uri, **settings)\r\n  File \"/Users/dchang/anaconda3/envs/dec2018/lib/python3.6/site-packages/py2neo/database.py\", line 92, in __new__\r\n    from py2neo.internal.http import HTTPDriver, HTTPSDriver\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/_pydev_bundle/pydev_import_hook.py\", line 21, in do_import\r\n    module = self._system_import(name, *args, **kwargs)\r\n  File \"/Users/dchang/anaconda3/envs/dec2018/lib/python3.6/site-packages/py2neo/internal/http.py\", line 29, in <module>\r\n    from neo4j.v1 import Driver, Session, StatementResult, TransactionError, SessionError\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/_pydev_bundle/pydev_import_hook.py\", line 21, in do_import\r\n    module = self._system_import(name, *args, **kwargs)\r\n  File \"/Users/dchang/anaconda3/envs/dec2018/lib/python3.6/site-packages/neo4j/v1/__init__.py\", line 22, in <module>\r\n    from .bolt import *\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/_pydev_bundle/pydev_import_hook.py\", line 21, in do_import\r\n    module = self._system_import(name, *args, **kwargs)\r\n  File \"/Users/dchang/anaconda3/envs/dec2018/lib/python3.6/site-packages/neo4j/v1/bolt.py\", line 32, in <module>\r\n    from .types import Record\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/_pydev_bundle/pydev_import_hook.py\", line 21, in do_import\r\n    module = self._system_import(name, *args, **kwargs)\r\n  File \"/Users/dchang/anaconda3/envs/dec2018/lib/python3.6/site-packages/neo4j/v1/types/__init__.py\", line 33, in <module>\r\n    from neo4j.packstream import Structure\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/_pydev_bundle/pydev_import_hook.py\", line 21, in do_import\r\n    module = self._system_import(name, *args, **kwargs)\r\n  File \"/Users/dchang/anaconda3/envs/dec2018/lib/python3.6/site-packages/neo4j/packstream/__init__.py\", line 22, in <module>\r\n    from neo4j.util import import_best as _import_best\r\nImportError: cannot import name `'import_best'`\r\n\r\n\r\n\r\nIt was working perfectly fine just a couple of days ago, and something must have changed, but I have no idea why this is happening.\r\n\r\nIt happens with both neo4j 3.4 and 3.5, and I'm using py2neo 4.1.3\r\n\r\nI would appreciate any help!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/731", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/731/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/731/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/731/events", "html_url": "https://github.com/technige/py2neo/issues/731", "id": 394591912, "node_id": "MDU6SXNzdWUzOTQ1OTE5MTI=", "number": 731, "title": "is it possible to support call with apoc?", "user": {"login": "FFengIll", "id": 7359555, "node_id": "MDQ6VXNlcjczNTk1NTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/7359555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FFengIll", "html_url": "https://github.com/FFengIll", "followers_url": "https://api.github.com/users/FFengIll/followers", "following_url": "https://api.github.com/users/FFengIll/following{/other_user}", "gists_url": "https://api.github.com/users/FFengIll/gists{/gist_id}", "starred_url": "https://api.github.com/users/FFengIll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FFengIll/subscriptions", "organizations_url": "https://api.github.com/users/FFengIll/orgs", "repos_url": "https://api.github.com/users/FFengIll/repos", "events_url": "https://api.github.com/users/FFengIll/events{/privacy}", "received_events_url": "https://api.github.com/users/FFengIll/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-28T09:31:34Z", "updated_at": "2019-02-07T16:22:32Z", "closed_at": "2019-02-07T16:22:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "apoc is useful, so is it possible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/730", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/730/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/730/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/730/events", "html_url": "https://github.com/technige/py2neo/issues/730", "id": 393827124, "node_id": "MDU6SXNzdWUzOTM4MjcxMjQ=", "number": 730, "title": "subgraph problem", "user": {"login": "lyllou", "id": 28970572, "node_id": "MDQ6VXNlcjI4OTcwNTcy", "avatar_url": "https://avatars2.githubusercontent.com/u/28970572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lyllou", "html_url": "https://github.com/lyllou", "followers_url": "https://api.github.com/users/lyllou/followers", "following_url": "https://api.github.com/users/lyllou/following{/other_user}", "gists_url": "https://api.github.com/users/lyllou/gists{/gist_id}", "starred_url": "https://api.github.com/users/lyllou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lyllou/subscriptions", "organizations_url": "https://api.github.com/users/lyllou/orgs", "repos_url": "https://api.github.com/users/lyllou/repos", "events_url": "https://api.github.com/users/lyllou/events{/privacy}", "received_events_url": "https://api.github.com/users/lyllou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-24T07:30:53Z", "updated_at": "2019-02-07T16:22:59Z", "closed_at": "2019-02-07T16:22:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "from py2neo import Node, Relationship\r\n\r\na = Node('Person', name='Alice')\r\nb = Node('Person', name='Bob')\r\nr = Relationship(a, 'KNOWS', b)\r\ngraph.create(r)\r\ns = a | b |r\r\nprint(s)\r\n \r\nwhen I run my program\r\nj got \r\n<py2neo.data.Subgraph object at 0x7fe736ed2080>\r\n\r\nwhat's wrong?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/729", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/729/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/729/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/729/events", "html_url": "https://github.com/technige/py2neo/issues/729", "id": 393750653, "node_id": "MDU6SXNzdWUzOTM3NTA2NTM=", "number": 729, "title": "OGM contains too much related relationships and nodes", "user": {"login": "pyfreyr", "id": 44150955, "node_id": "MDQ6VXNlcjQ0MTUwOTU1", "avatar_url": "https://avatars0.githubusercontent.com/u/44150955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyfreyr", "html_url": "https://github.com/pyfreyr", "followers_url": "https://api.github.com/users/pyfreyr/followers", "following_url": "https://api.github.com/users/pyfreyr/following{/other_user}", "gists_url": "https://api.github.com/users/pyfreyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyfreyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyfreyr/subscriptions", "organizations_url": "https://api.github.com/users/pyfreyr/orgs", "repos_url": "https://api.github.com/users/pyfreyr/repos", "events_url": "https://api.github.com/users/pyfreyr/events{/privacy}", "received_events_url": "https://api.github.com/users/pyfreyr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-23T13:38:51Z", "updated_at": "2019-05-09T13:43:41Z", "closed_at": "2019-05-09T13:43:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I like to use py2neo's OGM. But I found a problem, my graph likes(has large number of Element nodes ):\r\n\r\n    (c:Cause)-[r:has_element]->(e:Element)<-[r:has_element]-(d:DocumentType)\r\n\r\nIf relationships [r] are defined in ( c ) and ( d ) by `RelatedTo`, then every time I pull node ( c ) from neo4j, I will get many many nodes also because of related objects `c.has_element`.\r\n\r\nSo I define [r:has_element] in (e) by `RelatedFrom`, but now I cannot distinguish nodes when handle related nodes of `e.has_element`, both nodes (original Cause and DocumentType) now all become Cause or DocumentType.\r\n\r\nIs there any methods to avoid pull all related objects all the time? Is it avaiable to pull related objects just when I need?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/728", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/728/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/728/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/728/events", "html_url": "https://github.com/technige/py2neo/issues/728", "id": 389254957, "node_id": "MDU6SXNzdWUzODkyNTQ5NTc=", "number": 728, "title": "Connection pool is full, discarding connection ", "user": {"login": "funnylogan", "id": 37924793, "node_id": "MDQ6VXNlcjM3OTI0Nzkz", "avatar_url": "https://avatars3.githubusercontent.com/u/37924793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funnylogan", "html_url": "https://github.com/funnylogan", "followers_url": "https://api.github.com/users/funnylogan/followers", "following_url": "https://api.github.com/users/funnylogan/following{/other_user}", "gists_url": "https://api.github.com/users/funnylogan/gists{/gist_id}", "starred_url": "https://api.github.com/users/funnylogan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funnylogan/subscriptions", "organizations_url": "https://api.github.com/users/funnylogan/orgs", "repos_url": "https://api.github.com/users/funnylogan/repos", "events_url": "https://api.github.com/users/funnylogan/events{/privacy}", "received_events_url": "https://api.github.com/users/funnylogan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-10T11:19:15Z", "updated_at": "2019-05-09T15:15:10Z", "closed_at": "2019-05-09T15:14:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I use HTTP to connect to the database by multi-process, will get a warning, like:\r\n\r\n```\r\nWARNING:urllib3.connectionpool:Connection pool is full, discarding connection\r\n```\r\n\r\nThe code like\uff1a\r\n\r\n```\r\nneo4j_client = Graph(\r\n     \"http://%s:7474\" % os.environ.get('NEO4J_HOST'),\r\n     username='neo4j',\r\n     password='xxx'\r\n)\r\n```\r\n\r\nIs there a way to modify the maxsize of the HTTP connection pool size?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/727", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/727/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/727/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/727/events", "html_url": "https://github.com/technige/py2neo/issues/727", "id": 388625508, "node_id": "MDU6SXNzdWUzODg2MjU1MDg=", "number": 727, "title": "graph.schema.create_index('merchant','name')  TypeError: super(type, obj):", "user": {"login": "yueyub", "id": 7710498, "node_id": "MDQ6VXNlcjc3MTA0OTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7710498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yueyub", "html_url": "https://github.com/yueyub", "followers_url": "https://api.github.com/users/yueyub/followers", "following_url": "https://api.github.com/users/yueyub/following{/other_user}", "gists_url": "https://api.github.com/users/yueyub/gists{/gist_id}", "starred_url": "https://api.github.com/users/yueyub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yueyub/subscriptions", "organizations_url": "https://api.github.com/users/yueyub/orgs", "repos_url": "https://api.github.com/users/yueyub/repos", "events_url": "https://api.github.com/users/yueyub/events{/privacy}", "received_events_url": "https://api.github.com/users/yueyub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-07T11:58:32Z", "updated_at": "2019-05-09T15:18:56Z", "closed_at": "2019-05-09T15:18:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "run  graph.schema.create_index('merchant','name') \r\ngot error \r\n\r\nTypeError: super(type, obj): obj must be an instance or subtype of type\r\n\r\nerror chain:\r\n\r\ngraph.schema.create_index('whiteUser')\r\n\r\n(cypher_escape(label), \",\".join(map(cypher_escape, property_keys)))).close()\r\n\r\nencoder = CypherEncoder(**kwargs)\r\n\r\n cls.__default_instance = super(CypherEncoder, cls).__new__(cls)\r\n\r\nTypeError: super(type, obj): obj must be an instance or subtype of type", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/726", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/726/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/726/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/726/events", "html_url": "https://github.com/technige/py2neo/issues/726", "id": 388460190, "node_id": "MDU6SXNzdWUzODg0NjAxOTA=", "number": 726, "title": "merge_one", "user": {"login": "sojoudian", "id": 4368907, "node_id": "MDQ6VXNlcjQzNjg5MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4368907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sojoudian", "html_url": "https://github.com/sojoudian", "followers_url": "https://api.github.com/users/sojoudian/followers", "following_url": "https://api.github.com/users/sojoudian/following{/other_user}", "gists_url": "https://api.github.com/users/sojoudian/gists{/gist_id}", "starred_url": "https://api.github.com/users/sojoudian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sojoudian/subscriptions", "organizations_url": "https://api.github.com/users/sojoudian/orgs", "repos_url": "https://api.github.com/users/sojoudian/repos", "events_url": "https://api.github.com/users/sojoudian/events{/privacy}", "received_events_url": "https://api.github.com/users/sojoudian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-07T00:50:53Z", "updated_at": "2019-05-09T15:25:32Z", "closed_at": "2019-05-09T15:25:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "merge_one was a use full command in v2, but as I see it has been deprecated, so what do you suggest to do for merging in this example :\r\n\r\n```\r\nfrom py2neo import *\r\ngraph = Graph()\r\nnicole = Node(\"Person\", name=\"Nicole\", age=24)\r\ngraph.create(nicole)\r\nnicole = graph.merge_one(\"Person\", \"name\", \"Nicole\")\r\ngraph.create(nicole)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/724", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/724/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/724/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/724/events", "html_url": "https://github.com/technige/py2neo/issues/724", "id": 387856547, "node_id": "MDU6SXNzdWUzODc4NTY1NDc=", "number": 724, "title": "TypeError while trying to access node labels - LabelSetView object is not callable", "user": {"login": "benjaminh", "id": 1315419, "node_id": "MDQ6VXNlcjEzMTU0MTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1315419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benjaminh", "html_url": "https://github.com/benjaminh", "followers_url": "https://api.github.com/users/benjaminh/followers", "following_url": "https://api.github.com/users/benjaminh/following{/other_user}", "gists_url": "https://api.github.com/users/benjaminh/gists{/gist_id}", "starred_url": "https://api.github.com/users/benjaminh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benjaminh/subscriptions", "organizations_url": "https://api.github.com/users/benjaminh/orgs", "repos_url": "https://api.github.com/users/benjaminh/repos", "events_url": "https://api.github.com/users/benjaminh/events{/privacy}", "received_events_url": "https://api.github.com/users/benjaminh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11586704, "node_id": "MDU6TGFiZWwxMTU4NjcwNA==", "url": "https://api.github.com/repos/technige/py2neo/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}, {"id": 28627747, "node_id": "MDU6TGFiZWwyODYyNzc0Nw==", "url": "https://api.github.com/repos/technige/py2neo/labels/documentation", "name": "documentation", "color": "02d7e1", "default": true, "description": null}, {"id": 1147057959, "node_id": "MDU6TGFiZWwxMTQ3MDU3OTU5", "url": "https://api.github.com/repos/technige/py2neo/labels/v4", "name": "v4", "color": "aa0000", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "technige", "id": 275311, "node_id": "MDQ6VXNlcjI3NTMxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/275311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/technige", "html_url": "https://github.com/technige", "followers_url": "https://api.github.com/users/technige/followers", "following_url": "https://api.github.com/users/technige/following{/other_user}", "gists_url": "https://api.github.com/users/technige/gists{/gist_id}", "starred_url": "https://api.github.com/users/technige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/technige/subscriptions", "organizations_url": "https://api.github.com/users/technige/orgs", "repos_url": "https://api.github.com/users/technige/repos", "events_url": "https://api.github.com/users/technige/events{/privacy}", "received_events_url": "https://api.github.com/users/technige/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "technige", "id": 275311, "node_id": "MDQ6VXNlcjI3NTMxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/275311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/technige", "html_url": "https://github.com/technige", "followers_url": "https://api.github.com/users/technige/followers", "following_url": "https://api.github.com/users/technige/following{/other_user}", "gists_url": "https://api.github.com/users/technige/gists{/gist_id}", "starred_url": "https://api.github.com/users/technige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/technige/subscriptions", "organizations_url": "https://api.github.com/users/technige/orgs", "repos_url": "https://api.github.com/users/technige/repos", "events_url": "https://api.github.com/users/technige/events{/privacy}", "received_events_url": "https://api.github.com/users/technige/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-12-05T17:07:13Z", "updated_at": "2019-05-09T15:35:53Z", "closed_at": "2019-05-09T15:35:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there,\r\nI'm using py2neo 4.1.3 along with neo4j 3.4.10 and python 3.6.5.\r\n\r\nFollowing the documentation here [https://py2neo.org/v4/data.html?highlight=node#py2neo.data.Node](https://py2neo.org/v4/data.html?highlight=node#py2neo.data.Node), I try to add a label to a node object after casting it from a dict:\r\n```\r\nnode = Node.cast(mydict)\r\nnode.labels.add(mylabel)\r\n```\r\nThis throws me the following error : `TypeError: 'LabelSetView' object is not callable`\r\nIs the documentation out of date, is this an issue or am I missing something ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/723", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/723/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/723/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/723/events", "html_url": "https://github.com/technige/py2neo/issues/723", "id": 387720427, "node_id": "MDU6SXNzdWUzODc3MjA0Mjc=", "number": 723, "title": "py2neo.database.Graph.create/merge fails with GraphObject", "user": {"login": "mudsill", "id": 30048115, "node_id": "MDQ6VXNlcjMwMDQ4MTE1", "avatar_url": "https://avatars0.githubusercontent.com/u/30048115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mudsill", "html_url": "https://github.com/mudsill", "followers_url": "https://api.github.com/users/mudsill/followers", "following_url": "https://api.github.com/users/mudsill/following{/other_user}", "gists_url": "https://api.github.com/users/mudsill/gists{/gist_id}", "starred_url": "https://api.github.com/users/mudsill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mudsill/subscriptions", "organizations_url": "https://api.github.com/users/mudsill/orgs", "repos_url": "https://api.github.com/users/mudsill/repos", "events_url": "https://api.github.com/users/mudsill/events{/privacy}", "received_events_url": "https://api.github.com/users/mudsill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-05T11:48:12Z", "updated_at": "2019-05-09T15:37:30Z", "closed_at": "2019-05-09T15:37:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "With `py2neo 4.1.3`:\r\n\r\nI'm using `multiprocessing` to distribute node creation tasks. My OGM model is defined as:\r\n\r\n```\r\nclass Country(GraphObject):\r\n    __primarykey__ = 'name'\r\n\r\n    countryID = Property()\r\n    name = Property()\r\n    abbrev = Property()\r\n\r\n    has_country = RelatedFrom(State)\r\n```\r\n\r\nWhen I instantiate this model, set the `name` property (and `__primaryvalue__`), and try to add to the graph using `py2neo.database.Graph.merge`, I get the following error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/multiprocess/pool.py\", line 121, in worker\r\n    result = (True, func(*args, **kwds))\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/multiprocess/pool.py\", line 44, in mapstar\r\n    return list(map(*args))\r\n  File \"/Users/lion/Projects/graph-generator/ggen/operations.py\", line 10, in expand\r\n    to_node = db.merge_node(generators.get(to_node_gen), to_node_props)\r\n  File \"/Users/lion/Projects/graph-generator/ggen/drivers.py\", line 75, in merge_node\r\n    self.graph.merge(model)\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/py2neo/database.py\", line 434, in merge\r\n    tx.merge(subgraph, label, *property_keys)\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/py2neo/database.py\", line 1000, in merge\r\n    merge(self, primary_label, primary_key)\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/py2neo/ogm.py\", line 411, in __db_merge__\r\n    tx.merge(node, primary_label, primary_key)\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/py2neo/database.py\", line 1000, in merge\r\n    merge(self, primary_label, primary_key)\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/py2neo/data.py\", line 624, in __db_merge__\r\n    merge_subgraph(tx, self, primary_label, primary_key)\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/py2neo/internal/operations.py\", line 167, in merge_subgraph\r\n    for i, identity in enumerate(identities):\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/py2neo/internal/operations.py\", line 105, in _merge_nodes\r\n    for record in tx.run(cypher, x=data):\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/py2neo/database.py\", line 863, in run\r\n    r = Result(self.graph, entities, result)\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/py2neo/database.py\", line 626, in __init__\r\n    self.result._hydrant = PackStreamHydrator(graph, result.keys(), entities)\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/neo4j/v1/api.py\", line 720, in keys\r\n    self._session.fetch()\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/neo4j/v1/api.py\", line 347, in fetch\r\n    detail_count, _ = self._connection.fetch()\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/neo4j/bolt/connection.py\", line 287, in fetch\r\n    return self._fetch()\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/neo4j/bolt/connection.py\", line 327, in _fetch\r\n    response.on_failure(summary_metadata or {})\r\n  File \"/Users/lion/Projects/graph-generator/venv/lib/python3.7/site-packages/neo4j/v1/result.py\", line 70, in on_failure\r\n    raise CypherError.hydrate(**metadata)\r\nneo4j.exceptions.ClientError: Cannot merge node using null property value for name\r\n```\r\n\r\n`name` isn't null for any of the nodes being created, and neither is `__primaryvalue__`. Any idea of what might be happening here? Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/722", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/722/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/722/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/722/events", "html_url": "https://github.com/technige/py2neo/issues/722", "id": 387006226, "node_id": "MDU6SXNzdWUzODcwMDYyMjY=", "number": 722, "title": "Pygment version is too old", "user": {"login": "marcdexet-cnrs", "id": 4507672, "node_id": "MDQ6VXNlcjQ1MDc2NzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/4507672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcdexet-cnrs", "html_url": "https://github.com/marcdexet-cnrs", "followers_url": "https://api.github.com/users/marcdexet-cnrs/followers", "following_url": "https://api.github.com/users/marcdexet-cnrs/following{/other_user}", "gists_url": "https://api.github.com/users/marcdexet-cnrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcdexet-cnrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcdexet-cnrs/subscriptions", "organizations_url": "https://api.github.com/users/marcdexet-cnrs/orgs", "repos_url": "https://api.github.com/users/marcdexet-cnrs/repos", "events_url": "https://api.github.com/users/marcdexet-cnrs/events{/privacy}", "received_events_url": "https://api.github.com/users/marcdexet-cnrs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1147057959, "node_id": "MDU6TGFiZWwxMTQ3MDU3OTU5", "url": "https://api.github.com/repos/technige/py2neo/labels/v4", "name": "v4", "color": "aa0000", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-03T21:08:26Z", "updated_at": "2019-01-31T23:04:08Z", "closed_at": "2019-01-31T23:04:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWhen you use py2neo with jupyter (as any data scientist), you have a ugly incompatibility with two tools\r\n\r\n```\r\npy2neo 4.1.2 has requirement prompt-toolkit==1.0.15, but you'll have prompt-toolkit 2.0.7 which is incompatible.\r\njupyter-console 6.0.0 has requirement prompt-toolkit<2.1.0,>=2.0.0, but you'll have prompt-toolkit 1.0.15 which is incompatible.\r\nipython 7.1.1 has requirement prompt-toolkit<2.1.0,>=2.0.0, but you'll have prompt-toolkit 1.0.15 which is incompatible.\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/721", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/721/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/721/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/721/events", "html_url": "https://github.com/technige/py2neo/issues/721", "id": 386461693, "node_id": "MDU6SXNzdWUzODY0NjE2OTM=", "number": 721, "title": "Unexpected behavior: graph.match((node, ), r_type=None) does not return all relationships", "user": {"login": "danZib", "id": 18422059, "node_id": "MDQ6VXNlcjE4NDIyMDU5", "avatar_url": "https://avatars1.githubusercontent.com/u/18422059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danZib", "html_url": "https://github.com/danZib", "followers_url": "https://api.github.com/users/danZib/followers", "following_url": "https://api.github.com/users/danZib/following{/other_user}", "gists_url": "https://api.github.com/users/danZib/gists{/gist_id}", "starred_url": "https://api.github.com/users/danZib/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danZib/subscriptions", "organizations_url": "https://api.github.com/users/danZib/orgs", "repos_url": "https://api.github.com/users/danZib/repos", "events_url": "https://api.github.com/users/danZib/events{/privacy}", "received_events_url": "https://api.github.com/users/danZib/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 144580703, "node_id": "MDU6TGFiZWwxNDQ1ODA3MDM=", "url": "https://api.github.com/repos/technige/py2neo/labels/not%20enough%20info", "name": "not enough info", "color": "eb6420", "default": false, "description": null}, {"id": 1147057959, "node_id": "MDU6TGFiZWwxMTQ3MDU3OTU5", "url": "https://api.github.com/repos/technige/py2neo/labels/v4", "name": "v4", "color": "aa0000", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-01T14:10:10Z", "updated_at": "2018-12-03T18:45:33Z", "closed_at": "2018-12-03T18:45:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello everyone,\r\n\r\nOn my search if retrieving all immediate relationships of a chosen node, I found myself using the following setup:\r\n```\r\nrelations = []\r\nfor rel in self.graph.match((node, ), r_type=None):\r\n    relations.append(rel)\r\n  ```\r\nHowever, I noticed that the `match` method only returned 6 of the expected 14. I switched to using Cypher in the meantime, but just wonder if I miss-understood the function.\r\n\r\nThanks already and happy start into the Christmas time ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/720", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/720/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/720/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/720/events", "html_url": "https://github.com/technige/py2neo/issues/720", "id": 383561885, "node_id": "MDU6SXNzdWUzODM1NjE4ODU=", "number": 720, "title": "Unexpected response from procedure db.indexes ", "user": {"login": "marcdexet-cnrs", "id": 4507672, "node_id": "MDQ6VXNlcjQ1MDc2NzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/4507672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcdexet-cnrs", "html_url": "https://github.com/marcdexet-cnrs", "followers_url": "https://api.github.com/users/marcdexet-cnrs/followers", "following_url": "https://api.github.com/users/marcdexet-cnrs/following{/other_user}", "gists_url": "https://api.github.com/users/marcdexet-cnrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcdexet-cnrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcdexet-cnrs/subscriptions", "organizations_url": "https://api.github.com/users/marcdexet-cnrs/orgs", "repos_url": "https://api.github.com/users/marcdexet-cnrs/repos", "events_url": "https://api.github.com/users/marcdexet-cnrs/events{/privacy}", "received_events_url": "https://api.github.com/users/marcdexet-cnrs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1147057959, "node_id": "MDU6TGFiZWwxMTQ3MDU3OTU5", "url": "https://api.github.com/repos/technige/py2neo/labels/v4", "name": "v4", "color": "aa0000", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-22T14:36:48Z", "updated_at": "2018-12-03T18:35:02Z", "closed_at": "2018-12-03T18:35:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "py2neo: 4.1.0\r\nneo4j docker CE 3.4.10\r\n\r\nWhen I run the command \r\n```python\r\nschema.create_index(\"Structure\",'numero_national_de_structure')\r\n```\r\non an empty noe4j DB, **even if the index is created**, I get the following error : \r\n\r\n```\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-42-5acf7a4e44f3> in <module>\r\n----> 1 schema.create_index(\"Structure\",'numero_national_de_structure')\r\n\r\n~/Workdir/loops_neo4j_presentation/lib/python3.6/site-packages/py2neo/database.py in create_index(self, label, *property_keys)\r\n    533         self.graph.run(\"CREATE INDEX ON :%s(%s)\" %\r\n    534                        (cypher_escape(label), \",\".join(map(cypher_escape, property_keys)))).close()\r\n--> 535         while property_keys not in self.get_indexes(label):\r\n    536             sleep(0.1)\r\n    537 \r\n\r\n~/Workdir/loops_neo4j_presentation/lib/python3.6/site-packages/py2neo/database.py in get_indexes(self, label)\r\n    591         \"\"\" Fetch a list of indexed property keys for a label.\r\n    592         \"\"\"\r\n--> 593         return self._get_indexes(label)\r\n    594 \r\n    595     def get_uniqueness_constraints(self, label):\r\n\r\n~/Workdir/loops_neo4j_presentation/lib/python3.6/site-packages/py2neo/database.py in _get_indexes(self, label, t)\r\n    568                 description, state, typ = record\r\n    569             else:\r\n--> 570                 raise RuntimeError(\"Unexpected response from procedure db.indexes (%d fields)\" % len(record))\r\n    571             if state not in (u\"ONLINE\", u\"online\"):\r\n    572                 continue\r\n\r\nRuntimeError: Unexpected response from procedure db.indexes (7 fields)```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/719", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/719/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/719/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/719/events", "html_url": "https://github.com/technige/py2neo/issues/719", "id": 382551123, "node_id": "MDU6SXNzdWUzODI1NTExMjM=", "number": 719, "title": "Relationship names with spaces are no longer supported", "user": {"login": "lmwsky", "id": 10709391, "node_id": "MDQ6VXNlcjEwNzA5Mzkx", "avatar_url": "https://avatars0.githubusercontent.com/u/10709391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lmwsky", "html_url": "https://github.com/lmwsky", "followers_url": "https://api.github.com/users/lmwsky/followers", "following_url": "https://api.github.com/users/lmwsky/following{/other_user}", "gists_url": "https://api.github.com/users/lmwsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/lmwsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lmwsky/subscriptions", "organizations_url": "https://api.github.com/users/lmwsky/orgs", "repos_url": "https://api.github.com/users/lmwsky/repos", "events_url": "https://api.github.com/users/lmwsky/events{/privacy}", "received_events_url": "https://api.github.com/users/lmwsky/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11586704, "node_id": "MDU6TGFiZWwxMTU4NjcwNA==", "url": "https://api.github.com/repos/technige/py2neo/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}, {"id": 1147057959, "node_id": "MDU6TGFiZWwxMTQ3MDU3OTU5", "url": "https://api.github.com/repos/technige/py2neo/labels/v4", "name": "v4", "color": "aa0000", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-20T08:30:11Z", "updated_at": "2018-12-01T22:33:24Z", "closed_at": "2018-12-01T22:33:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "when I call graph.merge(relationship),I get this error.\r\nrelationship=Relationship(A,\"has method\",B);\r\n\r\n```\r\nInvalid input ''': expected whitespace or a rel type name (line 1, column 96 (offset: 95))\r\n\"UNWIND $x AS data MATCH (a) WHERE id(a) = data[0] MATCH (b) WHERE id(b) = data[1] MERGE (a)-[_:'has method']->(b) SET _ = data[2] RETURN id(_)\"\r\n```\r\n\r\nI think this caused by [_:'has method'];\r\n'has method' should be `has method`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/718", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/718/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/718/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/718/events", "html_url": "https://github.com/technige/py2neo/issues/718", "id": 380206210, "node_id": "MDU6SXNzdWUzODAyMDYyMTA=", "number": 718, "title": "Beta version in conda forge?", "user": {"login": "robarthur", "id": 9843262, "node_id": "MDQ6VXNlcjk4NDMyNjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9843262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robarthur", "html_url": "https://github.com/robarthur", "followers_url": "https://api.github.com/users/robarthur/followers", "following_url": "https://api.github.com/users/robarthur/following{/other_user}", "gists_url": "https://api.github.com/users/robarthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/robarthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robarthur/subscriptions", "organizations_url": "https://api.github.com/users/robarthur/orgs", "repos_url": "https://api.github.com/users/robarthur/repos", "events_url": "https://api.github.com/users/robarthur/events{/privacy}", "received_events_url": "https://api.github.com/users/robarthur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-13T12:38:32Z", "updated_at": "2018-12-01T21:43:49Z", "closed_at": "2018-12-01T20:44:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI've recently run into a few dependency problems when attempting to install py2neo in a jupyter stack.  I believe it's related to the issues referenced here:  https://github.com/technige/py2neo/issues/700 .\r\n\r\nI'm using conda as a package manager for my environment, and it prompted me to notice that the latest version in the channel I'm using, conda-forge is at v4.0.0.0b2 (https://anaconda.org/conda-forge/py2neo ).  It seems that v4.1.0 was released back in August.  Is this something that can be updated?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/717", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/717/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/717/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/717/events", "html_url": "https://github.com/technige/py2neo/issues/717", "id": 379710477, "node_id": "MDU6SXNzdWUzNzk3MTA0Nzc=", "number": 717, "title": "cypher.cypher_escape() Not working", "user": {"login": "raldam", "id": 19265951, "node_id": "MDQ6VXNlcjE5MjY1OTUx", "avatar_url": "https://avatars1.githubusercontent.com/u/19265951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raldam", "html_url": "https://github.com/raldam", "followers_url": "https://api.github.com/users/raldam/followers", "following_url": "https://api.github.com/users/raldam/following{/other_user}", "gists_url": "https://api.github.com/users/raldam/gists{/gist_id}", "starred_url": "https://api.github.com/users/raldam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raldam/subscriptions", "organizations_url": "https://api.github.com/users/raldam/orgs", "repos_url": "https://api.github.com/users/raldam/repos", "events_url": "https://api.github.com/users/raldam/events{/privacy}", "received_events_url": "https://api.github.com/users/raldam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11586704, "node_id": "MDU6TGFiZWwxMTU4NjcwNA==", "url": "https://api.github.com/repos/technige/py2neo/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}, {"id": 1147057959, "node_id": "MDU6TGFiZWwxMTQ3MDU3OTU5", "url": "https://api.github.com/repos/technige/py2neo/labels/v4", "name": "v4", "color": "aa0000", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-12T10:24:43Z", "updated_at": "2018-12-05T10:29:22Z", "closed_at": "2018-12-01T22:34:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "The function py2neo.cypher.cypher_escape does not return what it is supposed to.\r\n\r\nfrom py2neo.cypher import cypher_escape\r\ncypher_escape(\"identifier with spaces\")\r\n\"'identifier with spaces'\"\r\n\r\nAS you can see it does not use back ticks to escape but quotes.\r\n\r\n\r\nI am not sure but in the script py2neo.cypher.encoding.py\r\n\r\nThe lines :\r\n```\r\nDOUBLE_QUOTE = u''''\r\nSINGLE_QUOTE = u\"'\"\r\n\r\nESCAPED_DOUBLE_QUOTE = u'\\\\'''\r\nESCAPED_SINGLE_QUOTE = u\"\\\\'\"\r\n\r\nX_ESCAPE = re_compile(r\"(\\\\x([0-9a-f]{2}))\")\r\nDOUBLE_QUOTED_SAFE = re_compile(r\"([ -!#-\\[\\]-~]+)\")\r\nSINGLE_QUOTED_SAFE = re_compile(r\"([ -&(-\\[\\]-~]+)\")\r\n.\r\n.\r\n.\r\n        if quote is None: #line 202\r\n            num_single = value.count(u\"'\")\r\n            num_double = value.count(u'''')\r\n            quote = SINGLE_QUOTE if num_single <= num_double else DOUBLE_QUOTE\r\n```\r\n\r\nshould be \r\n\r\n```\r\nDOUBLE_QUOTE = u'``'\r\nSINGLE_QUOTE = u\"`\"\r\n\r\nESCAPED_DOUBLE_QUOTE = u'\\\\``'\r\nESCAPED_SINGLE_QUOTE = u\"\\\\`\"\r\n\r\nX_ESCAPE = re_compile(r\"(\\\\x([0-9a-f]{2}))\")\r\nDOUBLE_QUOTED_SAFE = re_compile(r\"([ -!#-\\[\\]-~]+)\")\r\nSINGLE_QUOTED_SAFE = re_compile(r\"([ -&(-\\[\\]-~]+)\")\r\n.\r\n.\r\n.\r\n        if quote is None: #line 202\r\n            num_single = value.count(u\"`\")\r\n            num_double = value.count(u'``')\r\n            quote = SINGLE_QUOTE if num_single <= num_double else DOUBLE_QUOTE\r\n```\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/715", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/715/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/715/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/715/events", "html_url": "https://github.com/technige/py2neo/issues/715", "id": 379570592, "node_id": "MDU6SXNzdWUzNzk1NzA1OTI=", "number": 715, "title": "Python2 no longer supported?", "user": {"login": "bwmetz", "id": 44794079, "node_id": "MDQ6VXNlcjQ0Nzk0MDc5", "avatar_url": "https://avatars0.githubusercontent.com/u/44794079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bwmetz", "html_url": "https://github.com/bwmetz", "followers_url": "https://api.github.com/users/bwmetz/followers", "following_url": "https://api.github.com/users/bwmetz/following{/other_user}", "gists_url": "https://api.github.com/users/bwmetz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bwmetz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bwmetz/subscriptions", "organizations_url": "https://api.github.com/users/bwmetz/orgs", "repos_url": "https://api.github.com/users/bwmetz/repos", "events_url": "https://api.github.com/users/bwmetz/events{/privacy}", "received_events_url": "https://api.github.com/users/bwmetz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-11T22:29:29Z", "updated_at": "2018-12-01T21:42:51Z", "closed_at": "2018-12-01T20:44:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python 2.7 is still listed as supported, but hitting multiple issues attempting to install py2neo-4.1 vs. py2neo-3.1.2\r\n\r\n1. IPython & Jupyter\r\n\r\n- Listed in requirements.txt & setup.py due to ipykernel reference.\r\n- IPython was not required in py2neo 3.1.2\r\n- IPython has not supported Python2 since version 5.8.0 (latest is 7.1.1)\r\n- Have not located any import references to ipykernel or either module in any .py file in the tree\r\n\r\n2. neo4j-driver dependency failure\r\n- Assuming neotime dependency mismatch in setup.py\r\n```\r\nAdding neo4j-driver 1.6.2 to easy-install.pth file\r\n\r\nInstalled c:\\python27\\lib\\site-packages\\neo4j_driver-1.6.2-py2.7-win-amd64.egg\r\nerror: neotime 1.7.1 is installed but neotime==1.0.0 is required by set(['neo4j-driver'])\r\n```\r\n\r\n3. Manual uninstall/install of neo4j-driver-1.6.2:\r\n- Removes neotime-1.7.1 in favor of required neotime-1.0.0\r\n- Then fails due to missing neotime-1.7.1 egg file\r\n- This is likely a pip issue due to workaround attempts vs. neo4j, but listed in case others attempt this\r\n\r\n`WindowsError: [Error 2] The system cannot find the file specified: 'c:\\\\python27\\\\lib\\\\site-packages\\\\neotime-1.7.1-py2.7.egg'`\r\n\r\n- Subsequent install neo4j-drive-1.6.2 succeeds\r\n```\r\n>pip install neo4j-driver==1.6.2\r\nRequirement already satisfied: neo4j-driver==1.6.2 in c:\\python27\\lib\\site-packages (1.6.2)\r\nRequirement already satisfied: neotime==1.0.0 in c:\\python27\\lib\\site-packages (from neo4j-driver==1.6.2) (1.0.0)\r\n...\r\n```\r\n\r\n4. After updates to requirements.txt/setup.py to deal with #1, plus manual neo4j-driver correction from #2/#3; removal & re-install as well as pip dependency checks both complete successfully.\r\n```\r\nUsing c:\\python27\\lib\\site-packages\r\nFinished processing dependencies for py2neo==4.1.0\r\n\r\n>pip check\r\nNo broken requirements found.\r\n```\r\n\r\nThis is being submitted in good faith as I am a newb with neo4j and py2neo; thus this is simply an install failure report.  I have not yet attempted a validation test.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/714", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/714/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/714/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/714/events", "html_url": "https://github.com/technige/py2neo/issues/714", "id": 379559775, "node_id": "MDU6SXNzdWUzNzk1NTk3NzU=", "number": 714, "title": "failed to install through pip on Win10", "user": {"login": "bwmetz", "id": 44794079, "node_id": "MDQ6VXNlcjQ0Nzk0MDc5", "avatar_url": "https://avatars0.githubusercontent.com/u/44794079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bwmetz", "html_url": "https://github.com/bwmetz", "followers_url": "https://api.github.com/users/bwmetz/followers", "following_url": "https://api.github.com/users/bwmetz/following{/other_user}", "gists_url": "https://api.github.com/users/bwmetz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bwmetz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bwmetz/subscriptions", "organizations_url": "https://api.github.com/users/bwmetz/orgs", "repos_url": "https://api.github.com/users/bwmetz/repos", "events_url": "https://api.github.com/users/bwmetz/events{/privacy}", "received_events_url": "https://api.github.com/users/bwmetz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11586704, "node_id": "MDU6TGFiZWwxMTU4NjcwNA==", "url": "https://api.github.com/repos/technige/py2neo/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}, {"id": 1147057959, "node_id": "MDU6TGFiZWwxMTQ3MDU3OTU5", "url": "https://api.github.com/repos/technige/py2neo/labels/v4", "name": "v4", "color": "aa0000", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-11T20:27:56Z", "updated_at": "2018-12-01T22:58:14Z", "closed_at": "2018-12-01T22:58:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Issue https://github.com/technige/py2neo/issues/687 was closed by submitter, apparently due to local fix.  The underlying general issue still exists.\r\n\r\n```\r\n>pip install py2neo\r\nCollecting py2neo\r\n  Using cached https://files.pythonhosted.org/packages/02/18/1880df5c6f4c0a6aa598286541c7c5a287dc5150d28e05595ec4197e8402/py2neo-4.1.0.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n...\r\n      File \"py2neo\\internal\\compat.py\", line 45, in <module>\r\n        DEVNULL = open(devnull, \"rw\")\r\n    ValueError: Invalid mode ('rw')\r\n\r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in \u2026\r\n```\r\n\r\nSubmitter of #687 reported this fix for Windows users:\r\n\r\n> fixed by changing DEVNULL = open(devnull, \"rw\") in line 45 of <temp_dir>\\pip-install-<some_rand_char>\\py2neo\\py2neo\\internal\\compat.py to DEVNULL = open(devnull, \"r+\")\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/712", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/712/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/712/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/712/events", "html_url": "https://github.com/technige/py2neo/issues/712", "id": 375742043, "node_id": "MDU6SXNzdWUzNzU3NDIwNDM=", "number": 712, "title": "AttributeError: 'Cursor' object has no attribute 'to_data_frame'", "user": {"login": "timholds", "id": 24782018, "node_id": "MDQ6VXNlcjI0NzgyMDE4", "avatar_url": "https://avatars1.githubusercontent.com/u/24782018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timholds", "html_url": "https://github.com/timholds", "followers_url": "https://api.github.com/users/timholds/followers", "following_url": "https://api.github.com/users/timholds/following{/other_user}", "gists_url": "https://api.github.com/users/timholds/gists{/gist_id}", "starred_url": "https://api.github.com/users/timholds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timholds/subscriptions", "organizations_url": "https://api.github.com/users/timholds/orgs", "repos_url": "https://api.github.com/users/timholds/repos", "events_url": "https://api.github.com/users/timholds/events{/privacy}", "received_events_url": "https://api.github.com/users/timholds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-30T23:51:19Z", "updated_at": "2019-04-19T22:15:23Z", "closed_at": "2019-04-19T22:15:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to run PageRank in Python using Py2neo for a series of different years, and I want to write the results to a Pandas DataFrame. I have Pandas Installed (version 0.23.4), and I am using Py2neo version 4.\r\n\r\nThe code I am using is as follows:\r\n\r\n`import pandas as pd\r\nfrom py2neo import Graph, Node, Relationship\r\nimport numpy as np\r\n\r\ngraph = Graph(\"bolt://localhost:7687\", auth=('neo4j', 'password'))\r\n\r\nstart_year, end_year, step = 1985, 2000, 5\r\ndfs = []\r\n\r\nfor year in range(start_year, end_year+1, step):\r\n    \r\n    query = \"\"\"\r\n    CALL algo.pageRank.stream(\r\n    'MATCH (p:Node) WHERE p.year < {} RETURN id(p) as id',\r\n    'MATCH (p1:Node)-[:CITES]->(p2:Node) RETURN id(p1) as source, id(p2) as target',\r\n    {{graph:'cypher', iterations:20, write:false, concurrency:20}})\r\n    YIELD node, score\r\n    WITH \r\n        *,\r\n        node.title AS title, \r\n        node.year AS year, \r\n        score AS page_rank\r\n    ORDER BY page_rank DESC\r\n    LIMIT 1000\r\n    RETURN \r\n        title,\r\n        year, \r\n        page_rank;    \r\n    \"\"\".format(year,year,year)\r\n\r\n    df = graph.run(query).to_data_frame()`\r\n\r\nThe query works fine when I run it directly in the Neo4j browser, but when I try to run it with Py2neo and put the results in a DataFrame, I get the error `AttributeError: 'Cursor' object has no attribute 'to_data_frame'`. \r\n\r\nDoes anyone have any idea what might be causing the error? Any help will be greatly appreciated. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/711", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/711/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/711/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/711/events", "html_url": "https://github.com/technige/py2neo/issues/711", "id": 374993838, "node_id": "MDU6SXNzdWUzNzQ5OTM4Mzg=", "number": 711, "title": "ModleNotFoundError: No module named 'neo4j.addressing'.", "user": {"login": "betterxys", "id": 16268373, "node_id": "MDQ6VXNlcjE2MjY4Mzcz", "avatar_url": "https://avatars3.githubusercontent.com/u/16268373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/betterxys", "html_url": "https://github.com/betterxys", "followers_url": "https://api.github.com/users/betterxys/followers", "following_url": "https://api.github.com/users/betterxys/following{/other_user}", "gists_url": "https://api.github.com/users/betterxys/gists{/gist_id}", "starred_url": "https://api.github.com/users/betterxys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/betterxys/subscriptions", "organizations_url": "https://api.github.com/users/betterxys/orgs", "repos_url": "https://api.github.com/users/betterxys/repos", "events_url": "https://api.github.com/users/betterxys/events{/privacy}", "received_events_url": "https://api.github.com/users/betterxys/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-29T12:33:26Z", "updated_at": "2018-12-01T22:48:19Z", "closed_at": "2018-12-01T22:48:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "- envirment\r\n\r\n> sys: Ubuntu 16.04.3 LTS\r\n> python:  Python 3.6.4 :: Anaconda, Inc.\r\n> neo4j-driver    1.7.0\r\n> neobolt         1.7.0\r\n> neotime         1.7.1\r\n> py2neo          4.1.0\r\n\r\n- ERROR\r\n\r\n```ipython\r\nIn [1]: from py2neo import Graph\r\nIn [2]: Graph()\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n~/neo4j/env/lib/python3.6/site-packages/py2neo/database.py in __new__(cls, uri, **settings)\r\n     87         try:\r\n---> 88             inst = cls._instances[key]\r\n     89         except KeyError:\r\n\r\nKeyError: 'ebafffac0864467d7ce923c195e7f293'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nModuleNotFoundError                       Traceback (most recent call last)\r\n<ipython-input-2-a0ee8bc3cd8c> in <module>()\r\n----> 1 Graph()\r\n\r\n~/neo4j/env/lib/python3.6/site-packages/py2neo/database.py in __new__(cls, uri, **settings)\r\n    303     def __new__(cls, uri=None, **settings):\r\n    304         name = settings.pop(\"name\", \"data\")\r\n--> 305         database = Database(uri, **settings)\r\n    306         if name in database:\r\n    307             inst = database[name]\r\n\r\n~/neo4j/env/lib/python3.6/site-packages/py2neo/database.py in __new__(cls, uri, **settings)\r\n     90             inst = super(Database, cls).__new__(cls)\r\n     91             inst._connection_data = connection_data\r\n---> 92             from py2neo.internal.http import HTTPDriver, HTTPSDriver\r\n     93             from neo4j.v1 import Driver\r\n     94             inst._driver = Driver(connection_data[\"uri\"],\r\n\r\n~/neo4j/env/lib/python3.6/site-packages/py2neo/internal/http.py in <module>()\r\n     24 from warnings import catch_warnings, simplefilter\r\n     25\r\n---> 26 from neo4j.addressing import SocketAddress\r\n     27 from neo4j.bolt import ServerInfo\r\n     28 from neo4j.exceptions import AuthError, Forbidden\r\n\r\nModuleNotFoundError: No module named 'neo4j.addressing'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/710", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/710/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/710/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/710/events", "html_url": "https://github.com/technige/py2neo/issues/710", "id": 374668366, "node_id": "MDU6SXNzdWUzNzQ2NjgzNjY=", "number": 710, "title": "How to operate the set of Nodes?I still cant understand", "user": {"login": "whbjzzwjxq", "id": 30146012, "node_id": "MDQ6VXNlcjMwMTQ2MDEy", "avatar_url": "https://avatars0.githubusercontent.com/u/30146012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whbjzzwjxq", "html_url": "https://github.com/whbjzzwjxq", "followers_url": "https://api.github.com/users/whbjzzwjxq/followers", "following_url": "https://api.github.com/users/whbjzzwjxq/following{/other_user}", "gists_url": "https://api.github.com/users/whbjzzwjxq/gists{/gist_id}", "starred_url": "https://api.github.com/users/whbjzzwjxq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whbjzzwjxq/subscriptions", "organizations_url": "https://api.github.com/users/whbjzzwjxq/orgs", "repos_url": "https://api.github.com/users/whbjzzwjxq/repos", "events_url": "https://api.github.com/users/whbjzzwjxq/events{/privacy}", "received_events_url": "https://api.github.com/users/whbjzzwjxq/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 144580703, "node_id": "MDU6TGFiZWwxNDQ1ODA3MDM=", "url": "https://api.github.com/repos/technige/py2neo/labels/not%20enough%20info", "name": "not enough info", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-27T17:25:32Z", "updated_at": "2020-01-10T15:55:18Z", "closed_at": "2020-01-10T15:55:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "def search_main(ans,label):\r\n    Nodes = []\r\n    for keyword_0 in ans:\r\n        Respon = Nmatcher.match(label, Name=keyword_0)\r\n        Nodes.extend(Respon)\r\n        for element in Respon:\r\n            element[\"Main\"]=True\r\n    Nodes = search_son(Nodes,0)\r\n    return Nodes,Relationships\r\n\r\n   Actually,I wanna know how could I operate 2 Nodematch object?\r\nI've tried operate them as list, but the variables lose their Nodematch class \r\n\r\nSorry for so basic question", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/708", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/708/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/708/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/708/events", "html_url": "https://github.com/technige/py2neo/issues/708", "id": 373375094, "node_id": "MDU6SXNzdWUzNzMzNzUwOTQ=", "number": 708, "title": "RuntimeError when index record includes failureMessage", "user": {"login": "bebound", "id": 2227874, "node_id": "MDQ6VXNlcjIyMjc4NzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2227874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bebound", "html_url": "https://github.com/bebound", "followers_url": "https://api.github.com/users/bebound/followers", "following_url": "https://api.github.com/users/bebound/following{/other_user}", "gists_url": "https://api.github.com/users/bebound/gists{/gist_id}", "starred_url": "https://api.github.com/users/bebound/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bebound/subscriptions", "organizations_url": "https://api.github.com/users/bebound/orgs", "repos_url": "https://api.github.com/users/bebound/repos", "events_url": "https://api.github.com/users/bebound/events{/privacy}", "received_events_url": "https://api.github.com/users/bebound/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-24T08:56:56Z", "updated_at": "2018-12-03T18:35:01Z", "closed_at": "2018-12-03T18:35:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try to use `graph.schema.create_uniqueness_constraint`, it raise this error\r\n```\r\nFile \"/data/home/user00/neo4j_convert/data.py\", line 137, in create_uniq_constraint\r\n    self.graph.schema.create_uniqueness_constraint(i['label'], i['primary_key'])\r\n  File \"/data/home/user00/neo4j_convert/venv/lib/python3.6/site-packages/py2neo/database.py\", line 544, in create_uniqueness_constraint\r\n    while property_keys not in self.get_uniqueness_constraints(label):\r\n  File \"/data/home/user00/neo4j_convert/venv/lib/python3.6/site-packages/py2neo/database.py\", line 601, in get_uniqueness_constraints\r\n    return self._get_indexes(label, \"node_unique_property\")\r\n  File \"/data/home/user00/neo4j_convert/venv/lib/python3.6/site-packages/py2neo/database.py\", line 573, in _get_indexes\r\n    raise RuntimeError(\"Unexpected response from procedure db.indexes (%d fields)\" % len(record))\r\nRuntimeError: Unexpected response from procedure db.indexes (7 fields)\r\n```\r\nThe problem is that the [code](https://github.com/technige/py2neo/blob/93653a2428693cf29ff65647b703c60d763e1808/py2neo/database.py#L565-L570) only deal with record with length 3 and 6. \r\n\r\nMy index record's length is 7, it has a new field `failureMessage`:\r\n```\r\n<Record description='INDEX ON :Apps(app_name)' label='Apps' properties=['app_name'] state='ONLINE' type='node_label_property' provider={'version': '2.0', 'key': 'lucene+native'} failureMessage=''>\r\n```\r\n\r\nShould we add two line of code to deal with this condition?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/707", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/707/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/707/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/707/events", "html_url": "https://github.com/technige/py2neo/issues/707", "id": 373316159, "node_id": "MDU6SXNzdWUzNzMzMTYxNTk=", "number": 707, "title": "Immediate relationship turns out to be None when fetching path between two nodes", "user": {"login": "bhushanpant", "id": 4330740, "node_id": "MDQ6VXNlcjQzMzA3NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4330740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bhushanpant", "html_url": "https://github.com/bhushanpant", "followers_url": "https://api.github.com/users/bhushanpant/followers", "following_url": "https://api.github.com/users/bhushanpant/following{/other_user}", "gists_url": "https://api.github.com/users/bhushanpant/gists{/gist_id}", "starred_url": "https://api.github.com/users/bhushanpant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bhushanpant/subscriptions", "organizations_url": "https://api.github.com/users/bhushanpant/orgs", "repos_url": "https://api.github.com/users/bhushanpant/repos", "events_url": "https://api.github.com/users/bhushanpant/events{/privacy}", "received_events_url": "https://api.github.com/users/bhushanpant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-24T05:54:02Z", "updated_at": "2019-05-09T15:39:52Z", "closed_at": "2019-05-09T15:39:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Query Used: \r\n\r\n`MATCH (c1),(c2), p = ((c1)-[r*..2]-(c2:Company)) WHERE c1.name='Wonderful Villa' and and NONE(rel in r where type(rel) in ['IN_CITY','IS_PART_OF']) return c1.name,r,c2.name\"`\r\n\r\nOutput: \r\n\r\n```\r\n[{'c1.name': 'Wonderful Villa',\r\n  'c2.name': 'Amazing Willa',\r\n  'r': [(AAMOD PANSE)-[:None {}]->(Wonderful Villa),\r\n   (AAMOD PANSE)-[:IS_OWNER]->(Amazing Willa)]},\r\n {'c1.name': 'Wonderful Villa',\r\n  'c2.name': 'Great Villa',\r\n  'r': [(RENU BHAT)-[:None {}]->(Wonderful Villa),\r\n   (RENU BHAT)-[:IS_CARE_TAKER]->(Great Villa)]}]\r\n```\r\n\r\nThis seems to work fine in version==3.1.2\r\n\r\nI am extracting path using this query:\r\n`path = graph.run(query).data()`\r\n\r\nThanks for the help!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/706", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/706/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/706/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/706/events", "html_url": "https://github.com/technige/py2neo/issues/706", "id": 373274795, "node_id": "MDU6SXNzdWUzNzMyNzQ3OTU=", "number": 706, "title": "neo4j.exceptions.ServiceUnavailable: Failed to establish connection to ('127.0.0.1', 7687) (reason 10061)", "user": {"login": "scofield7419", "id": 18722770, "node_id": "MDQ6VXNlcjE4NzIyNzcw", "avatar_url": "https://avatars2.githubusercontent.com/u/18722770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scofield7419", "html_url": "https://github.com/scofield7419", "followers_url": "https://api.github.com/users/scofield7419/followers", "following_url": "https://api.github.com/users/scofield7419/following{/other_user}", "gists_url": "https://api.github.com/users/scofield7419/gists{/gist_id}", "starred_url": "https://api.github.com/users/scofield7419/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scofield7419/subscriptions", "organizations_url": "https://api.github.com/users/scofield7419/orgs", "repos_url": "https://api.github.com/users/scofield7419/repos", "events_url": "https://api.github.com/users/scofield7419/events{/privacy}", "received_events_url": "https://api.github.com/users/scofield7419/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-24T02:10:30Z", "updated_at": "2018-12-01T23:03:20Z", "closed_at": "2018-12-01T23:03:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nTraceback (most recent call last):\r\n  File \"D:\\Python35\\lib\\site-packages\\py2neo\\database.py\", line 88, in __new__\r\n    inst = cls._instances[key]\r\n**KeyError: '4ddf1890350c0edfa6ddd479a0008624'**\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"F:/visualizing/test.py\", line 3, in <module>\r\n    test_graph = Graph()\r\n  File \"D:\\Python35\\lib\\site-packages\\py2neo\\database.py\", line 305, in __new__\r\n    database = Database(uri, **settings)\r\n  File \"D:\\Python35\\lib\\site-packages\\py2neo\\database.py\", line 97, in __new__\r\n    user_agent=connection_data[\"user_agent\"])\r\n  File \"D:\\Python35\\lib\\site-packages\\neo4j\\v1\\api.py\", line 133, in __new__\r\n    return subclass(uri, **config)\r\n  File \"D:\\Python35\\lib\\site-packages\\neo4j\\v1\\direct.py\", line 73, in __new__\r\n    pool.release(pool.acquire())\r\n  File \"D:\\Python35\\lib\\site-packages\\neo4j\\v1\\direct.py\", line 44, in acquire\r\n    return self.acquire_direct(self.address)\r\n  File \"D:\\Python35\\lib\\site-packages\\neo4j\\bolt\\connection.py\", line 450, in acquire_direct\r\n    connection = self.connector(address, self.connection_error_handler)\r\n  File \"D:\\Python35\\lib\\site-packages\\neo4j\\v1\\direct.py\", line 70, in connector\r\n    return connect(address, security_plan.ssl_context, error_handler, **config)\r\n  File \"D:\\Python35\\lib\\site-packages\\neo4j\\bolt\\connection.py\", line 704, in connect\r\n    raise last_error\r\n  File \"D:\\Python35\\lib\\site-packages\\neo4j\\bolt\\connection.py\", line 694, in connect\r\n    s = _connect(resolved_address, **config)\r\n  File \"D:\\Python35\\lib\\site-packages\\neo4j\\bolt\\connection.py\", line 584, in _connect\r\n    raise ServiceUnavailable(\"Failed to establish connection to {!r} (reason {})\".format(resolved_address, error.errno))\r\n**neo4j.exceptions.ServiceUnavailable: Failed to establish connection to ('127.0.0.1', 7687) (reason 10061)**\r\n\r\n\r\n**_I just can't figure out why this bug comes to me, while anybody else does not._**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/705", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/705/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/705/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/705/events", "html_url": "https://github.com/technige/py2neo/issues/705", "id": 373177427, "node_id": "MDU6SXNzdWUzNzMxNzc0Mjc=", "number": 705, "title": "Database _get_indexes raises RuntimeError", "user": {"login": "agodbehere", "id": 1786974, "node_id": "MDQ6VXNlcjE3ODY5NzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1786974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agodbehere", "html_url": "https://github.com/agodbehere", "followers_url": "https://api.github.com/users/agodbehere/followers", "following_url": "https://api.github.com/users/agodbehere/following{/other_user}", "gists_url": "https://api.github.com/users/agodbehere/gists{/gist_id}", "starred_url": "https://api.github.com/users/agodbehere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agodbehere/subscriptions", "organizations_url": "https://api.github.com/users/agodbehere/orgs", "repos_url": "https://api.github.com/users/agodbehere/repos", "events_url": "https://api.github.com/users/agodbehere/events{/privacy}", "received_events_url": "https://api.github.com/users/agodbehere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-23T20:04:49Z", "updated_at": "2018-12-03T18:50:17Z", "closed_at": "2018-12-03T18:50:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Overview\r\n======\r\n\r\nFor a graph `G`, calling `G.schema.get_uniqueness_constraints('Entity')` results in a RuntimeError:\r\n\r\n```\r\nRuntimeError: Unexpected response from procedure db.indexes (7 fields)\r\n```\r\n\r\nVersions\r\n======\r\n\r\nPython 3.7\r\npy2neo: 4.1.0\r\nneo4j: 3.4.9\r\n\r\nInvestigation\r\n=========\r\n\r\nThe traceback indicates the issue stems from calling `self._get_indexes` on a `Database` object (line 570 of database.py). This code interacts with a `Record` object, which is a `Mapping`. As such, it's `__len__` method will count the number of keys in the mapping. The `Record` object's keys are evaluated as: `['description', 'label', 'properties', 'state', 'type', 'provider', 'failureMessage']` which has 7 elements. Lines 565 and 567 of database.py explicitly check for lengths of 6 or 3 respectively, so this record object with 7 keys fails. \r\n\r\nProposed Fix\r\n=========\r\n\r\nMake the `_get_indexes` method more Pythonic by attempting to access specific keys of the Record object (`description`, `label`, `properties`, `state`, `type`, and `provider`). If the key isn't found or if there is no valid value, set corresponding variables to `None`. Remove any explicit checks for the length of the `Record` object.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/704", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/704/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/704/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/704/events", "html_url": "https://github.com/technige/py2neo/issues/704", "id": 371248075, "node_id": "MDU6SXNzdWUzNzEyNDgwNzU=", "number": 704, "title": "py2neo 4.1 issue with python 2.7, compat.py, DEVNULL fallback code doesnt work", "user": {"login": "jayped007", "id": 3084694, "node_id": "MDQ6VXNlcjMwODQ2OTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3084694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayped007", "html_url": "https://github.com/jayped007", "followers_url": "https://api.github.com/users/jayped007/followers", "following_url": "https://api.github.com/users/jayped007/following{/other_user}", "gists_url": "https://api.github.com/users/jayped007/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayped007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayped007/subscriptions", "organizations_url": "https://api.github.com/users/jayped007/orgs", "repos_url": "https://api.github.com/users/jayped007/repos", "events_url": "https://api.github.com/users/jayped007/events{/privacy}", "received_events_url": "https://api.github.com/users/jayped007/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-17T20:12:32Z", "updated_at": "2018-12-01T22:58:14Z", "closed_at": "2018-12-01T22:58:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the internal/compat.py module, the following code exists in version 4.1.0, starting on line 41:\r\n\r\n```\r\ntry:\r\n    from subprocess import DEVNULL\r\nexcept ImportError:\r\n    from os import devnull\r\n    DEVNULL = open(devnull, \"rw\")\r\n\r\n```\r\nThis fails when executed with a python 2.7 interpreter, because DEVNULL is a python 3.3 addition to subprocess, triggering the exception logic, and 'rw' is not a valid open mode in python 2.7.\r\n\r\n```\r\n    from py2neo.internal.compat import bytes_types, string_types\r\n  File \"D:\\sno\\build\\py27_snomedg_US20180901\\venv4\\lib\\site-packages\\py2neo\\internal\\compat.py\", line 45, in <module>\r\n    DEVNULL = open(devnull, \"rw\")\r\nValueError: Invalid mode ('rw')\r\n```\r\nI did not find any actual references to DEVNULL within the code of py2neo, other than this.  I am guessing that a change to simply 'w' from 'rw' would suffice.\r\n\r\nNOTE: I did try using 'r+' as the mode to try to support read+write, but this did not work for me.  I could get either 'w' or 'r' to work and allow either write or read, but I failed to get both to work.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/702", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/702/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/702/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/702/events", "html_url": "https://github.com/technige/py2neo/issues/702", "id": 366924407, "node_id": "MDU6SXNzdWUzNjY5MjQ0MDc=", "number": 702, "title": "SSL certificate of the documentation site has expired ", "user": {"login": "kristallizer", "id": 614398, "node_id": "MDQ6VXNlcjYxNDM5OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/614398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kristallizer", "html_url": "https://github.com/kristallizer", "followers_url": "https://api.github.com/users/kristallizer/followers", "following_url": "https://api.github.com/users/kristallizer/following{/other_user}", "gists_url": "https://api.github.com/users/kristallizer/gists{/gist_id}", "starred_url": "https://api.github.com/users/kristallizer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kristallizer/subscriptions", "organizations_url": "https://api.github.com/users/kristallizer/orgs", "repos_url": "https://api.github.com/users/kristallizer/repos", "events_url": "https://api.github.com/users/kristallizer/events{/privacy}", "received_events_url": "https://api.github.com/users/kristallizer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-04T18:54:54Z", "updated_at": "2018-10-05T14:44:57Z", "closed_at": "2018-10-05T14:44:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "The certificate for https://py2neo.org/ expired as of October 4, 2018, 4:56:40 AM GMT-4.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/701", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/701/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/701/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/701/events", "html_url": "https://github.com/technige/py2neo/issues/701", "id": 366877216, "node_id": "MDU6SXNzdWUzNjY4NzcyMTY=", "number": 701, "title": "issue with merge and special characters", "user": {"login": "stuartlaurie", "id": 17708602, "node_id": "MDQ6VXNlcjE3NzA4NjAy", "avatar_url": "https://avatars2.githubusercontent.com/u/17708602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stuartlaurie", "html_url": "https://github.com/stuartlaurie", "followers_url": "https://api.github.com/users/stuartlaurie/followers", "following_url": "https://api.github.com/users/stuartlaurie/following{/other_user}", "gists_url": "https://api.github.com/users/stuartlaurie/gists{/gist_id}", "starred_url": "https://api.github.com/users/stuartlaurie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stuartlaurie/subscriptions", "organizations_url": "https://api.github.com/users/stuartlaurie/orgs", "repos_url": "https://api.github.com/users/stuartlaurie/repos", "events_url": "https://api.github.com/users/stuartlaurie/events{/privacy}", "received_events_url": "https://api.github.com/users/stuartlaurie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1147057959, "node_id": "MDU6TGFiZWwxMTQ3MDU3OTU5", "url": "https://api.github.com/repos/technige/py2neo/labels/v4", "name": "v4", "color": "aa0000", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-04T16:42:46Z", "updated_at": "2019-11-11T16:30:45Z", "closed_at": "2018-12-04T18:11:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using py2neo v4\r\n\r\nThere seems to be an issue when using merge, if for example a node with the name:\r\n\r\n`accountID/paymentInstrument/-piID`\r\n\r\nI can successfully create that node using g.create but when i try to merge using the same id e.g.\r\n\r\n```\r\na = Node(\"API\", name = \"accountID/paymentInstrument/-piID\")\r\ng.merge(a,\"API\",\"name\")\r\n```\r\n\r\nI get the following error:\r\n\r\n```\r\n(:API {name: 'accountID/paymentInstrument/-piID'})\r\nTraceback (most recent call last):\r\n  File \"./py2neo_merge.py\", line 30, in <module>\r\n    g.merge(a,\"API\",\"name\")\r\n  File \"/anaconda2/lib/python2.7/site-packages/py2neo/database.py\", line 427, in merge\r\n    tx.merge(subgraph, label, *property_keys)\r\n  File \"/anaconda2/lib/python2.7/site-packages/py2neo/database.py\", line 1002, in merge\r\n    merge(self, primary_label, primary_key)\r\n  File \"/anaconda2/lib/python2.7/site-packages/py2neo/data.py\", line 620, in __db_merge__\r\n    merge_subgraph(tx, self, primary_label, primary_key)\r\n  File \"/anaconda2/lib/python2.7/site-packages/py2neo/internal/operations.py\", line 167, in merge_subgraph\r\n    node = nodes[i]\r\nIndexError: list index out of range\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/700", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/700/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/700/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/700/events", "html_url": "https://github.com/technige/py2neo/issues/700", "id": 364878383, "node_id": "MDU6SXNzdWUzNjQ4NzgzODM=", "number": 700, "title": "py2neo has a version conflict in the list of requirements", "user": {"login": "nikist97", "id": 13831284, "node_id": "MDQ6VXNlcjEzODMxMjg0", "avatar_url": "https://avatars1.githubusercontent.com/u/13831284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikist97", "html_url": "https://github.com/nikist97", "followers_url": "https://api.github.com/users/nikist97/followers", "following_url": "https://api.github.com/users/nikist97/following{/other_user}", "gists_url": "https://api.github.com/users/nikist97/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikist97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikist97/subscriptions", "organizations_url": "https://api.github.com/users/nikist97/orgs", "repos_url": "https://api.github.com/users/nikist97/repos", "events_url": "https://api.github.com/users/nikist97/events{/privacy}", "received_events_url": "https://api.github.com/users/nikist97/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-09-28T12:58:47Z", "updated_at": "2018-12-03T11:54:13Z", "closed_at": "2018-12-01T20:44:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had an issue while installing a package of mine (pyramid application), which depended on py2neo.\r\n\r\nIssue:\r\n\r\nin py2neo setup.py file we have:\r\n**prompt_toolkit==1.0.15**\r\n\r\nhowever, py2neo also depends on (found in setup.py):\r\n**jupyter_console**\r\n\r\nin jupyter_console setup.py file we have:\r\n\r\n**prompt_toolkit>=2.0.0,<2.1.0**\r\n\r\nThis can lead to potential conflict, which will not be explicitly shown when you install py2neo. However, when you use something like pyramid, which utilizes pkg_resources, it can lead to:\r\n**pkg_resources.ContextualVersionConflict**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/699", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/699/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/699/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/699/events", "html_url": "https://github.com/technige/py2neo/issues/699", "id": 362996705, "node_id": "MDU6SXNzdWUzNjI5OTY3MDU=", "number": 699, "title": "How to set property name an value dynamically in py2neo", "user": {"login": "pawarchinmay27", "id": 26086430, "node_id": "MDQ6VXNlcjI2MDg2NDMw", "avatar_url": "https://avatars2.githubusercontent.com/u/26086430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawarchinmay27", "html_url": "https://github.com/pawarchinmay27", "followers_url": "https://api.github.com/users/pawarchinmay27/followers", "following_url": "https://api.github.com/users/pawarchinmay27/following{/other_user}", "gists_url": "https://api.github.com/users/pawarchinmay27/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawarchinmay27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawarchinmay27/subscriptions", "organizations_url": "https://api.github.com/users/pawarchinmay27/orgs", "repos_url": "https://api.github.com/users/pawarchinmay27/repos", "events_url": "https://api.github.com/users/pawarchinmay27/events{/privacy}", "received_events_url": "https://api.github.com/users/pawarchinmay27/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-24T01:37:38Z", "updated_at": "2018-09-29T13:48:36Z", "closed_at": "2018-09-29T13:48:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "rule=\"some rule\"\r\nrule_value=\"some value\"    \r\nsetNodeQry=\"MATCH (node) SET node.{rule}={rule_value}\"\r\ngraph.cypher.execute(setNodeQry,rule=rule,rule_value=rule_value)\r\ngives me a syntax error when I run this code in python", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/697", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/697/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/697/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/697/events", "html_url": "https://github.com/technige/py2neo/issues/697", "id": 362371659, "node_id": "MDU6SXNzdWUzNjIzNzE2NTk=", "number": 697, "title": "Values of type neo4j.v1.types.spatial.CartesianPoint are not supported", "user": {"login": "tpanza", "id": 19810086, "node_id": "MDQ6VXNlcjE5ODEwMDg2", "avatar_url": "https://avatars0.githubusercontent.com/u/19810086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tpanza", "html_url": "https://github.com/tpanza", "followers_url": "https://api.github.com/users/tpanza/followers", "following_url": "https://api.github.com/users/tpanza/following{/other_user}", "gists_url": "https://api.github.com/users/tpanza/gists{/gist_id}", "starred_url": "https://api.github.com/users/tpanza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tpanza/subscriptions", "organizations_url": "https://api.github.com/users/tpanza/orgs", "repos_url": "https://api.github.com/users/tpanza/repos", "events_url": "https://api.github.com/users/tpanza/events{/privacy}", "received_events_url": "https://api.github.com/users/tpanza/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1147057959, "node_id": "MDU6TGFiZWwxMTQ3MDU3OTU5", "url": "https://api.github.com/repos/technige/py2neo/labels/v4", "name": "v4", "color": "aa0000", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-20T21:18:44Z", "updated_at": "2020-01-23T15:33:16Z", "closed_at": "2020-01-23T15:33:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to retrieve the `nodes` in a subgraph, where the nodes may contain a [spatial point property](https://neo4j.com/docs/developer-manual/current/cypher/syntax/spatial/), the following exception is raised:\r\n\r\n``` python\r\nquery = \"\"\"\r\nMATCH (n:NodeWithCartesian)\r\nWHERE n.id = '12345'\r\nRETURN n\r\n\"\"\"\r\ncur = graph.run(query)\r\nsg = cur.to_subgraph()\r\nfor n in sg.nodes:\r\n    print(n)\r\n```\r\n\r\nStack trace:\r\n``` python\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-21-6b30b97e564c> in <module>()\r\n      1 for n in sg.nodes:\r\n----> 2     print(n)\r\n\r\n/app/local/anaconda3/envs/py35_myenv/lib/python3.5/site-packages/py2neo/data.py in __repr__(self)\r\n    766 \r\n    767     def __repr__(self):\r\n--> 768         return Walkable.__repr__(self)\r\n    769 \r\n    770     def __bool__(self):\r\n\r\n/app/local/anaconda3/envs/py35_myenv/lib/python3.5/site-packages/py2neo/data.py in __repr__(self)\r\n    668 \r\n    669     def __repr__(self):\r\n--> 670         return xstr(cypher_repr(self))\r\n    671 \r\n    672     def __eq__(self, other):\r\n\r\n/app/local/anaconda3/envs/py35_myenv/lib/python3.5/site-packages/py2neo/cypher/__init__.py in cypher_repr(value, **kwargs)\r\n    315     \"\"\"\r\n    316     encoder = CypherEncoder(**kwargs)\r\n--> 317     return encoder.encode_value(value)\r\n    318 \r\n    319 \r\n\r\n/app/local/anaconda3/envs/py35_myenv/lib/python3.5/site-packages/py2neo/cypher/__init__.py in encode_value(self, value)\r\n    176             return self.encode_string(value)\r\n    177         if isinstance(value, Node):\r\n--> 178             return self.encode_node(value)\r\n    179         if isinstance(value, Relationship):\r\n    180             return self.encode_relationship(value)\r\n\r\n/app/local/anaconda3/envs/py35_myenv/lib/python3.5/site-packages/py2neo/cypher/__init__.py in encode_node(self, node)\r\n    222 \r\n    223     def encode_node(self, node):\r\n--> 224         return self._encode_node(node, self.node_template)\r\n    225 \r\n    226     def encode_relationship(self, relationship):\r\n\r\n/app/local/anaconda3/envs/py35_myenv/lib/python3.5/site-packages/py2neo/cypher/__init__.py in _encode_node(self, node, template)\r\n    261             property=PropertySelector(node, u\"\"),\r\n    262             name=node.__name__,\r\n--> 263         ).strip() + u\")\"\r\n    264 \r\n    265     def _encode_relationship_detail(self, relationship, template):\r\n\r\n/app/local/anaconda3/envs/py35_myenv/lib/python3.5/site-packages/py2neo/cypher/__init__.py in __repr__(self)\r\n     86         else:\r\n     87             properties = OrderedDict((key, self.__items[key]) for key in sorted(self.__items))\r\n---> 88         return cypher_repr(properties, **self.__kwargs)\r\n     89 \r\n     90     def __getattr__(self, key):\r\n\r\n/app/local/anaconda3/envs/py35_myenv/lib/python3.5/site-packages/py2neo/cypher/__init__.py in cypher_repr(value, **kwargs)\r\n    315     \"\"\"\r\n    316     encoder = CypherEncoder(**kwargs)\r\n--> 317     return encoder.encode_value(value)\r\n    318 \r\n    319 \r\n\r\n/app/local/anaconda3/envs/py35_myenv/lib/python3.5/site-packages/py2neo/cypher/__init__.py in encode_value(self, value)\r\n    184             return self.encode_list(value)\r\n    185         if isinstance(value, dict):\r\n--> 186             return self.encode_map(value)\r\n    187         raise TypeError(\"Values of type %s.%s are not supported\" % (type(value).__module__, type(value).__name__))\r\n    188 \r\n\r\n/app/local/anaconda3/envs/py35_myenv/lib/python3.5/site-packages/py2neo/cypher/__init__.py in encode_map(self, values)\r\n    219     def encode_map(self, values):\r\n    220         return u\"{\" + self.sequence_separator.join(self.encode_key(key) + self.key_value_separator + self.encode_value(value)\r\n--> 221                                                    for key, value in values.items()) + u\"}\"\r\n    222 \r\n    223     def encode_node(self, node):\r\n\r\n/app/local/anaconda3/envs/py35_myenv/lib/python3.5/site-packages/py2neo/cypher/__init__.py in <genexpr>(.0)\r\n    219     def encode_map(self, values):\r\n    220         return u\"{\" + self.sequence_separator.join(self.encode_key(key) + self.key_value_separator + self.encode_value(value)\r\n--> 221                                                    for key, value in values.items()) + u\"}\"\r\n    222 \r\n    223     def encode_node(self, node):\r\n\r\n/app/local/anaconda3/envs/py35_myenv/lib/python3.5/site-packages/py2neo/cypher/__init__.py in encode_value(self, value)\r\n    185         if isinstance(value, dict):\r\n    186             return self.encode_map(value)\r\n--> 187         raise TypeError(\"Values of type %s.%s are not supported\" % (type(value).__module__, type(value).__name__))\r\n    188 \r\n    189     def encode_string(self, value):\r\n\r\nTypeError: Values of type neo4j.v1.types.spatial.CartesianPoint are not supported\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/696", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/696/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/696/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/696/events", "html_url": "https://github.com/technige/py2neo/issues/696", "id": 362141190, "node_id": "MDU6SXNzdWUzNjIxNDExOTA=", "number": 696, "title": "Can't access dict keys in records returned by cursor", "user": {"login": "TomGroves", "id": 19835296, "node_id": "MDQ6VXNlcjE5ODM1Mjk2", "avatar_url": "https://avatars2.githubusercontent.com/u/19835296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomGroves", "html_url": "https://github.com/TomGroves", "followers_url": "https://api.github.com/users/TomGroves/followers", "following_url": "https://api.github.com/users/TomGroves/following{/other_user}", "gists_url": "https://api.github.com/users/TomGroves/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomGroves/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomGroves/subscriptions", "organizations_url": "https://api.github.com/users/TomGroves/orgs", "repos_url": "https://api.github.com/users/TomGroves/repos", "events_url": "https://api.github.com/users/TomGroves/events{/privacy}", "received_events_url": "https://api.github.com/users/TomGroves/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-20T11:20:08Z", "updated_at": "2019-05-09T15:45:50Z", "closed_at": "2019-05-09T15:45:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't access records from a cursor in the way described in the docs:\r\n```\r\n        cursor=self.graph.run(\"MATCH (file:File {sha256:{fileHash}})-[:sightedAt]->(fs:FileSighting) \"\r\n                              \"RETURN fs \"\r\n                              \"ORDER BY fs.datetime DESC \", fileHash=fileHash)\r\n        while cursor.forward():\r\n            print(cursor.current[\"datetime\"])\r\n```\r\ngives\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/nowan/.local/lib/python3.6/site-packages/py2neo/data.py\", line 149, in index\r\n    return self.__keys.index(key)\r\nValueError: tuple.index(x): x not in tuple\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/nowan/Coding/GUPS/GUPSgatekeeper.py\", line 66, in getFileSightings\r\n    print(cursor.current[\"datetime\"])\r\n  File \"/home/nowan/.local/lib/python3.6/site-packages/py2neo/data.py\", line 111, in __getitem__\r\n    index = self.index(key)\r\n  File \"/home/nowan/.local/lib/python3.6/site-packages/py2neo/data.py\", line 151, in index\r\n    raise KeyError(key)\r\nKeyError: 'datetime'\r\n```\r\nwhereas just printing the record itself:\r\n`print(cursor.current)`\r\ngives\r\n```\r\n<Record fs=(_26:FileSighting {datetime: '2018-09-20T11:38:33.004339', path: '/imaginary/path/filename.mkv'})>\r\n<Record fs=(_24:FileSighting {datetime: '2018-09-20T11:38:05.204867', path: '/imaginary/path/filename.mkv'})>\r\n<Record fs=(_23:FileSighting {datetime: '2018-09-20T11:35:31.272371', path: '/imaginary/path/filename.mkv'})>\r\n<Record fs=(_27:FileSighting {datetime: '2018-09-20T11:33:38.343776', path: '/imaginary/path/filename.mkv'})>\r\n<Record fs=(_22:FileSighting {datetime: '2018-09-20T11:32:50.151435', path: '/imaginary/path/filename.mkv'})>\r\n<Record fs=(_20:FileSighting {datetime: '2018-09-20T11:20:12.745197', path: '/imaginary/path/filename.mkv'})>\r\n<Record fs=(_17:FileSighting {datetime: '2018-09-19T22:02:22.928531', path: '/imaginary/path/filename.mkv'})>\r\n```\r\nshowing that the records returned are as expected, and have the 'datetime' property key.\r\n\r\nReading the source code eventually revealed to me that even if just one node is returned in a record (as above), it's still stored in a dict, keyed by the name of the variable it was returned in, so what is required is\r\n```\r\n        while cursor.forward():\r\n            print(cursor.current[\"fs\"][\"datetime\"])\r\n```\r\nAs such, I think this is a documentation issue rather than a bug, but I'm leaving it here in case it helps someone else!\r\nAlso, what's with the exception during handling of the exception? I wasn't catching that exception, so that feels like a bug...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/695", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/695/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/695/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/695/events", "html_url": "https://github.com/technige/py2neo/issues/695", "id": 361922651, "node_id": "MDU6SXNzdWUzNjE5MjI2NTE=", "number": 695, "title": "primary_key=None not allowed in merge?", "user": {"login": "TomGroves", "id": 19835296, "node_id": "MDQ6VXNlcjE5ODM1Mjk2", "avatar_url": "https://avatars2.githubusercontent.com/u/19835296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomGroves", "html_url": "https://github.com/TomGroves", "followers_url": "https://api.github.com/users/TomGroves/followers", "following_url": "https://api.github.com/users/TomGroves/following{/other_user}", "gists_url": "https://api.github.com/users/TomGroves/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomGroves/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomGroves/subscriptions", "organizations_url": "https://api.github.com/users/TomGroves/orgs", "repos_url": "https://api.github.com/users/TomGroves/repos", "events_url": "https://api.github.com/users/TomGroves/events{/privacy}", "received_events_url": "https://api.github.com/users/TomGroves/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1147099805, "node_id": "MDU6TGFiZWwxMTQ3MDk5ODA1", "url": "https://api.github.com/repos/technige/py2neo/labels/wontfix", "name": "wontfix", "color": "000000", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-19T20:51:36Z", "updated_at": "2018-12-04T18:10:34Z", "closed_at": "2018-12-04T18:10:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't perform a simple relationship MERGE, because tx.merge seems to require a primary_key, but my very simple relationship doesn't have any properties to match on.\r\n```\r\nrel=py2neo.Relationship(f,\"sightedAt\",sighting)\r\ntx.merge(rel,primary_label=\"sightedAt\",primary_key=None)\r\n```\r\nthrows \r\n> ValueError: Primary label and primary key are required for MERGE operation\r\n\r\nI think a lot more examples of the use of MERGE are needed in the docs - its behaviour seems very different from Cypher's MERGE. How can we merge an entire subgraph if we have to specify a single label and property to match on? Surely it should match on _every_ label and propertyon the subgraph, like Cypher's MERGE?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/692", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/692/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/692/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/692/events", "html_url": "https://github.com/technige/py2neo/issues/692", "id": 359221996, "node_id": "MDU6SXNzdWUzNTkyMjE5OTY=", "number": 692, "title": "Allow for duplicate relationships with the same start/end node and relationship type", "user": {"login": "beaglez", "id": 10747724, "node_id": "MDQ6VXNlcjEwNzQ3NzI0", "avatar_url": "https://avatars2.githubusercontent.com/u/10747724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beaglez", "html_url": "https://github.com/beaglez", "followers_url": "https://api.github.com/users/beaglez/followers", "following_url": "https://api.github.com/users/beaglez/following{/other_user}", "gists_url": "https://api.github.com/users/beaglez/gists{/gist_id}", "starred_url": "https://api.github.com/users/beaglez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beaglez/subscriptions", "organizations_url": "https://api.github.com/users/beaglez/orgs", "repos_url": "https://api.github.com/users/beaglez/repos", "events_url": "https://api.github.com/users/beaglez/events{/privacy}", "received_events_url": "https://api.github.com/users/beaglez/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1147099805, "node_id": "MDU6TGFiZWwxMTQ3MDk5ODA1", "url": "https://api.github.com/repos/technige/py2neo/labels/wontfix", "name": "wontfix", "color": "000000", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-11T21:00:31Z", "updated_at": "2018-12-01T23:07:59Z", "closed_at": "2018-12-01T23:07:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a request to change the behavior outlined below:\r\nhttps://github.com/technige/py2neo/blob/py2neo-4.1.0/py2neo/database.py#L975-L978\r\n\r\nNeo supports this, and we have a use case that requires it. Would be cool if we could go through py2neo instead of having to drop down to cypher for create/merge of relationships.\r\n\r\nOptions to implement could include:\r\n- a flag that would optionally allow duplicates\r\n- allow duplicates if a separate unique constraint is established in neo. This is actually our use case - we allow for \"duplicate\" relationships in that they can have the same endpoints and type, but we have a separate unique constraint defined based on one of the properties of the relationship.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/690", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/690/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/690/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/690/events", "html_url": "https://github.com/technige/py2neo/issues/690", "id": 354140460, "node_id": "MDU6SXNzdWUzNTQxNDA0NjA=", "number": 690, "title": "merge example", "user": {"login": "psytron", "id": 7834453, "node_id": "MDQ6VXNlcjc4MzQ0NTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/7834453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psytron", "html_url": "https://github.com/psytron", "followers_url": "https://api.github.com/users/psytron/followers", "following_url": "https://api.github.com/users/psytron/following{/other_user}", "gists_url": "https://api.github.com/users/psytron/gists{/gist_id}", "starred_url": "https://api.github.com/users/psytron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psytron/subscriptions", "organizations_url": "https://api.github.com/users/psytron/orgs", "repos_url": "https://api.github.com/users/psytron/repos", "events_url": "https://api.github.com/users/psytron/events{/privacy}", "received_events_url": "https://api.github.com/users/psytron/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1780052368, "node_id": "MDU6TGFiZWwxNzgwMDUyMzY4", "url": "https://api.github.com/repos/technige/py2neo/labels/closed%20due%20to%20age", "name": "closed due to age", "color": "bfabf2", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-26T23:55:46Z", "updated_at": "2020-01-10T16:14:05Z", "closed_at": "2020-01-10T16:14:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be fantastic to add some example code on merge method.  All the examples on stackoverflow are from v2 v3 they don't seem to work. The V4 handbook has 3 paragraphs about the merge method but somehow its hard to figure how to structure the code for it to work. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/689", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/689/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/689/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/689/events", "html_url": "https://github.com/technige/py2neo/issues/689", "id": 352772375, "node_id": "MDU6SXNzdWUzNTI3NzIzNzU=", "number": 689, "title": "Update Connection Pool information", "user": {"login": "impguard", "id": 1912284, "node_id": "MDQ6VXNlcjE5MTIyODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1912284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/impguard", "html_url": "https://github.com/impguard", "followers_url": "https://api.github.com/users/impguard/followers", "following_url": "https://api.github.com/users/impguard/following{/other_user}", "gists_url": "https://api.github.com/users/impguard/gists{/gist_id}", "starred_url": "https://api.github.com/users/impguard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/impguard/subscriptions", "organizations_url": "https://api.github.com/users/impguard/orgs", "repos_url": "https://api.github.com/users/impguard/repos", "events_url": "https://api.github.com/users/impguard/events{/privacy}", "received_events_url": "https://api.github.com/users/impguard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-22T01:57:27Z", "updated_at": "2019-05-09T15:50:35Z", "closed_at": "2019-05-09T15:50:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems like Py2Neo uses the underlying python driver by Neo4J, but doesn't expose any of the configuration parameters for tweaking things like connection timeouts lengths or connection pool sizes.\r\n\r\nIs there any chance this could be exposed?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/688", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/688/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/688/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/688/events", "html_url": "https://github.com/technige/py2neo/issues/688", "id": 350227602, "node_id": "MDU6SXNzdWUzNTAyMjc2MDI=", "number": 688, "title": "\"Parameters of type map are not supported\" on HTTP scheme", "user": {"login": "speters-cmri", "id": 39690401, "node_id": "MDQ6VXNlcjM5NjkwNDAx", "avatar_url": "https://avatars2.githubusercontent.com/u/39690401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/speters-cmri", "html_url": "https://github.com/speters-cmri", "followers_url": "https://api.github.com/users/speters-cmri/followers", "following_url": "https://api.github.com/users/speters-cmri/following{/other_user}", "gists_url": "https://api.github.com/users/speters-cmri/gists{/gist_id}", "starred_url": "https://api.github.com/users/speters-cmri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/speters-cmri/subscriptions", "organizations_url": "https://api.github.com/users/speters-cmri/orgs", "repos_url": "https://api.github.com/users/speters-cmri/repos", "events_url": "https://api.github.com/users/speters-cmri/events{/privacy}", "received_events_url": "https://api.github.com/users/speters-cmri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-13T23:20:42Z", "updated_at": "2018-08-21T09:30:30Z", "closed_at": "2018-08-21T09:30:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "On Python 3.6.5 and py2neo 4.0.0\r\n\r\n```\r\nfrom py2neo import Graph\r\nfrom py2neo.ogm import GraphObject, Property\r\n\r\ngraph = Graph(host='127.0.0.1', port=7474, scheme='http', user='neo4j', password='pass')\r\n# graph = Graph(host='127.0.0.1', port=7687, scheme='bolt', user='neo4j', password='pass')\r\n\r\nclass Person(GraphObject):\r\n    __primarykey__ = \"name\"\r\n    name = Property()\r\n\r\nalice = Person()\r\nalice.name = \"Alice Smith\"\r\ngraph.push(alice)\r\n```\r\n\r\nFails with\r\n\r\n```\r\n...\r\n.../lib/python3.6/site-packages/py2neo/internal/http.py\", line 74, in fix_parameters\r\n    raise TypeError(\"Parameters of type {} are not supported\".format(type(value).__name__))\r\nTypeError: Parameters of type map are not supported\r\n```\r\n\r\nThe two workarounds I explored included this diff https://github.com/technige/py2neo/compare/v4...CMRI-ProCan:v4\r\nAnd much more reasonably, just using the bolt scheme as is commented out in the example above.\r\n\r\nThis appears to be related to https://github.com/technige/py2neo/issues/678\r\n\r\nOtherwise really enjoying the OGM module. Thanks for all your hard work! :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/687", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/687/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/687/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/687/events", "html_url": "https://github.com/technige/py2neo/issues/687", "id": 348687654, "node_id": "MDU6SXNzdWUzNDg2ODc2NTQ=", "number": 687, "title": "failed to install through pip install py2neo command", "user": {"login": "AltheimIcarus", "id": 30554420, "node_id": "MDQ6VXNlcjMwNTU0NDIw", "avatar_url": "https://avatars1.githubusercontent.com/u/30554420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AltheimIcarus", "html_url": "https://github.com/AltheimIcarus", "followers_url": "https://api.github.com/users/AltheimIcarus/followers", "following_url": "https://api.github.com/users/AltheimIcarus/following{/other_user}", "gists_url": "https://api.github.com/users/AltheimIcarus/gists{/gist_id}", "starred_url": "https://api.github.com/users/AltheimIcarus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AltheimIcarus/subscriptions", "organizations_url": "https://api.github.com/users/AltheimIcarus/orgs", "repos_url": "https://api.github.com/users/AltheimIcarus/repos", "events_url": "https://api.github.com/users/AltheimIcarus/events{/privacy}", "received_events_url": "https://api.github.com/users/AltheimIcarus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11586704, "node_id": "MDU6TGFiZWwxMTU4NjcwNA==", "url": "https://api.github.com/repos/technige/py2neo/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}, {"id": 1147057959, "node_id": "MDU6TGFiZWwxMTQ3MDU3OTU5", "url": "https://api.github.com/repos/technige/py2neo/labels/v4", "name": "v4", "color": "aa0000", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-08T11:35:39Z", "updated_at": "2018-12-01T22:52:23Z", "closed_at": "2018-08-08T14:01:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "When entered `pip install py2neo` in cmd, below is the error i got:\r\n\r\nCollecting py2neo\r\n  Using cached https://files.pythonhosted.org/packages/cd/79/a77cc0ad86c021c25dac9f52a0cd33f6832c6af7fa5e58f4438d781ae9c3/py2neo-4.0.0.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"c:\\users\\user\\appdata\\local\\temp\\pip-install-2ptk9z\\py2neo\\setup.py\", line 25, in <module>\r\n        from py2neo.meta import __author__, __email__, __license__, __package__, __version__\r\n      File \"c:\\users\\user\\appdata\\local\\temp\\pip-install-2ptk9z\\py2neo\\py2neo\\__init__.py\", line 19, in <module>\r\n        from py2neo.data import *\r\n      File \"c:\\users\\user\\appdata\\local\\temp\\pip-install-2ptk9z\\py2neo\\py2neo\\data.py\", line 26, in <module>\r\n        from py2neo.cypher import LabelSetView, cypher_repr, cypher_str\r\n      File \"c:\\users\\user\\appdata\\local\\temp\\pip-install-2ptk9z\\py2neo\\py2neo\\cypher\\__init__.py\", line 36, in <module>\r\n        from py2neo.internal.collections import SetView\r\n      File \"c:\\users\\user\\appdata\\local\\temp\\pip-install-2ptk9z\\py2neo\\py2neo\\internal\\collections.py\", line 24, in <module>\r\n        from py2neo.internal.compat import bytes_types, string_types\r\n      File \"c:\\users\\user\\appdata\\local\\temp\\pip-install-2ptk9z\\py2neo\\py2neo\\internal\\compat.py\", line 45, in <module>\r\n        DEVNULL = open(devnull, \"rw\")\r\n    ValueError: Invalid mode ('rw')\r\n\r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in c:\\users\\user\\appdata\\local\\temp\\pip-install-2ptk9z\\py2neo\\\r\n\r\nusing pip v18.0, windows 10 basic, python 2.7", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/684", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/684/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/684/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/684/events", "html_url": "https://github.com/technige/py2neo/issues/684", "id": 346673656, "node_id": "MDU6SXNzdWUzNDY2NzM2NTY=", "number": 684, "title": "ValueError: Cannot append walkable ( exception in data.py)", "user": {"login": "ilanle", "id": 1414867, "node_id": "MDQ6VXNlcjE0MTQ4Njc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1414867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilanle", "html_url": "https://github.com/ilanle", "followers_url": "https://api.github.com/users/ilanle/followers", "following_url": "https://api.github.com/users/ilanle/following{/other_user}", "gists_url": "https://api.github.com/users/ilanle/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilanle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilanle/subscriptions", "organizations_url": "https://api.github.com/users/ilanle/orgs", "repos_url": "https://api.github.com/users/ilanle/repos", "events_url": "https://api.github.com/users/ilanle/events{/privacy}", "received_events_url": "https://api.github.com/users/ilanle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 144580703, "node_id": "MDU6TGFiZWwxNDQ1ODA3MDM=", "url": "https://api.github.com/repos/technige/py2neo/labels/not%20enough%20info", "name": "not enough info", "color": "eb6420", "default": false, "description": null}, {"id": 1147057959, "node_id": "MDU6TGFiZWwxMTQ3MDU3OTU5", "url": "https://api.github.com/repos/technige/py2neo/labels/v4", "name": "v4", "color": "aa0000", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-01T16:26:29Z", "updated_at": "2019-11-23T10:30:39Z", "closed_at": "2018-12-03T18:57:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nHi guys,\r\npy2neo 4.0.0\r\n\r\nI am running into the following problem in some queries.\r\nI don't know if this is because something was corrupted in the database or for any other reason.\r\nbasically I run\r\n`graph.run(query).data()\r\n`\r\nIn some queries, I get the following exception (or similar), however some queries do run correctly:\r\n\r\n```\r\n  File \"/app/utils/query_graph.py\", line 31, in get_general_query\r\n    results = graph.run(query).data()\r\n  File \"/usr/local/lib/python3.6/site-packages/py2neo/database.py\", line 491, in run\r\n    return self.begin(autocommit=True).run(cypher, parameters, **kwparameters)\r\n  File \"/usr/local/lib/python3.6/site-packages/py2neo/database.py\", line 851, in run\r\n    self.finish()\r\n  File \"/usr/local/lib/python3.6/site-packages/py2neo/database.py\", line 860, in finish\r\n    self.process()\r\n  File \"/usr/local/lib/python3.6/site-packages/py2neo/database.py\", line 857, in process\r\n    self.session.sync()\r\n  File \"/usr/local/lib/python3.6/site-packages/neo4j/v1/api.py\", line 357, in sync\r\n    detail_count, _ = self._connection.sync()\r\n  File \"/usr/local/lib/python3.6/site-packages/neo4j/bolt/connection.py\", line 383, in sync\r\n    detail_delta, summary_delta = self.fetch()\r\n  File \"/usr/local/lib/python3.6/site-packages/neo4j/bolt/connection.py\", line 290, in fetch\r\n    return self._fetch()\r\n  File \"/usr/local/lib/python3.6/site-packages/neo4j/bolt/connection.py\", line 313, in _fetch\r\n    self.responses[0].on_records(details)\r\n  File \"/usr/local/lib/python3.6/site-packages/neo4j/v1/result.py\", line 55, in on_records\r\n    self._records.extend(map(lambda record: self.zipper(self.keys(), self._hydrant.hydrate(record)), records))\r\n  File \"/usr/local/lib/python3.6/site-packages/neo4j/v1/result.py\", line 55, in <lambda>\r\n    self._records.extend(map(lambda record: self.zipper(self.keys(), self._hydrant.hydrate(record)), records))\r\n  File \"/usr/local/lib/python3.6/site-packages/py2neo/internal/packstream.py\", line 91, in hydrate\r\n    return tuple(hydrate_(value, entities.get(keys[i])) for i, value in enumerate(values))\r\n  File \"/usr/local/lib/python3.6/site-packages/py2neo/internal/packstream.py\", line 91, in <genexpr>\r\n    return tuple(hydrate_(value, entities.get(keys[i])) for i, value in enumerate(values))\r\n  File \"/usr/local/lib/python3.6/site-packages/py2neo/internal/packstream.py\", line 80, in hydrate_\r\n    return Path(*steps)\r\n  File \"/usr/local/lib/python3.6/site-packages/py2neo/data.py\", line 1077, in __init__\r\n    Walkable.__init__(self, walk(*entities))\r\n  File \"/usr/local/lib/python3.6/site-packages/py2neo/data.py\", line 666, in __init__\r\n    self.__sequence = tuple(iterable)\r\n  File \"/usr/local/lib/python3.6/site-packages/py2neo/data.py\", line 60, in walk\r\n    \"to node %r\" % (walkable, end_node))\r\nValueError: Cannot append walkable (_4258558)-[:TAGGED {}]->(_8451129) to node (_8183404:WIF {class_label: 'A1', idd: '60601f9e', sbar: '3d279e'})\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/683", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/683/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/683/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/683/events", "html_url": "https://github.com/technige/py2neo/issues/683", "id": 346496327, "node_id": "MDU6SXNzdWUzNDY0OTYzMjc=", "number": 683, "title": "Unexpected and unwanted caching", "user": {"login": "surabujin", "id": 2862761, "node_id": "MDQ6VXNlcjI4NjI3NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/2862761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/surabujin", "html_url": "https://github.com/surabujin", "followers_url": "https://api.github.com/users/surabujin/followers", "following_url": "https://api.github.com/users/surabujin/following{/other_user}", "gists_url": "https://api.github.com/users/surabujin/gists{/gist_id}", "starred_url": "https://api.github.com/users/surabujin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/surabujin/subscriptions", "organizations_url": "https://api.github.com/users/surabujin/orgs", "repos_url": "https://api.github.com/users/surabujin/repos", "events_url": "https://api.github.com/users/surabujin/events{/privacy}", "received_events_url": "https://api.github.com/users/surabujin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-01T08:21:17Z", "updated_at": "2018-08-16T08:33:46Z", "closed_at": "2018-08-13T11:04:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have faced \"caching\" data in py2neo or in neo4j(I don't have proves to blame only one side of conversation). I don't \"see\" any pattern in \"caching\" behavior. Just some random sequence of request lead to fetching stale data.\r\n\r\nI don't use ORM extension of py2neo - just \r\n```python\r\n  with neo_connect.bigin() as tx:\r\n    cursor = tx.tun('...')\r\n    for record in cursor:\r\n      \"do some stuff\"\r\n```\r\n\r\nI not first who faced this problem...\r\n\r\nhttps://stackoverflow.com/questions/49078348/py2neo-and-eventual-consistency\r\nhttps://stackoverflow.com/questions/34273072/is-py2neo-caching-burning-me\r\n\r\nSo how can I completely disable all possible node caching in neo4j?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/682", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/682/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/682/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/682/events", "html_url": "https://github.com/technige/py2neo/issues/682", "id": 344042325, "node_id": "MDU6SXNzdWUzNDQwNDIzMjU=", "number": 682, "title": "TypeError when using RelatedFrom relationship", "user": {"login": "Wenzel", "id": 964610, "node_id": "MDQ6VXNlcjk2NDYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/964610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wenzel", "html_url": "https://github.com/Wenzel", "followers_url": "https://api.github.com/users/Wenzel/followers", "following_url": "https://api.github.com/users/Wenzel/following{/other_user}", "gists_url": "https://api.github.com/users/Wenzel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wenzel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wenzel/subscriptions", "organizations_url": "https://api.github.com/users/Wenzel/orgs", "repos_url": "https://api.github.com/users/Wenzel/repos", "events_url": "https://api.github.com/users/Wenzel/events{/privacy}", "received_events_url": "https://api.github.com/users/Wenzel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11586704, "node_id": "MDU6TGFiZWwxMTU4NjcwNA==", "url": "https://api.github.com/repos/technige/py2neo/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "technige", "id": 275311, "node_id": "MDQ6VXNlcjI3NTMxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/275311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/technige", "html_url": "https://github.com/technige", "followers_url": "https://api.github.com/users/technige/followers", "following_url": "https://api.github.com/users/technige/following{/other_user}", "gists_url": "https://api.github.com/users/technige/gists{/gist_id}", "starred_url": "https://api.github.com/users/technige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/technige/subscriptions", "organizations_url": "https://api.github.com/users/technige/orgs", "repos_url": "https://api.github.com/users/technige/repos", "events_url": "https://api.github.com/users/technige/events{/privacy}", "received_events_url": "https://api.github.com/users/technige/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "technige", "id": 275311, "node_id": "MDQ6VXNlcjI3NTMxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/275311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/technige", "html_url": "https://github.com/technige", "followers_url": "https://api.github.com/users/technige/followers", "following_url": "https://api.github.com/users/technige/following{/other_user}", "gists_url": "https://api.github.com/users/technige/gists{/gist_id}", "starred_url": "https://api.github.com/users/technige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/technige/subscriptions", "organizations_url": "https://api.github.com/users/technige/orgs", "repos_url": "https://api.github.com/users/technige/repos", "events_url": "https://api.github.com/users/technige/events{/privacy}", "received_events_url": "https://api.github.com/users/technige/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-07-24T13:41:30Z", "updated_at": "2018-08-21T10:02:18Z", "closed_at": "2018-08-21T10:02:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi !\r\n`py2neo==4.0.0` \r\n\r\nI'm using the following `model.py`\r\n~~~Python\r\nfrom py2neo.ogm import GraphObject, Property, RelatedTo, RelatedFrom\r\n\r\nclass SyscallTable(GraphObject):\r\n\r\n    def __init__(self, index, name):\r\n        super().__init__()\r\n        self.index = index\r\n        self.name = name\r\n\r\n    # properties\r\n    index = Property()\r\n    name = Property()\r\n\r\n    syscalls = RelatedTo(\"Syscall\")\r\n\r\nclass Syscall(GraphObject):\r\n\r\n    def __init__(self, index, name, address):\r\n        super().__init__()\r\n        self.index = index\r\n        self.name = name\r\n        self.address = address\r\n\r\n    # properties\r\n    index = Property()\r\n    name = Property()\r\n    address = Property()\r\n\r\n    table = RelatedFrom(\"SyscallTable\")\r\n~~~\r\n\r\nIn my script, I'm trying to set the table of a `syscall`:\r\n~~~\r\nsyscall.table.add(systable)\r\n~~~\r\n\r\nAnd it results in the following error:\r\n~~~\r\n$ (venv) ./test.py\r\nINFO:root:connect to Neo4j DB\r\nINFO:root:delete previous graph\r\nINFO:root:Inserting syscall table into database\r\nTraceback (most recent call last):\r\n  File \"./test.py\", line 59, in <module>\r\n    main()\r\n  File \"./test.py\", line 50, in main\r\n    syscall.table.add(systable)\r\n  File \"/home/tarrma/tmp/bug_neo4j-graphql/venv/lib/python3.6/site-packages/py2neo/ogm.py\", line 88, in __get__\r\n    related[key] = RelatedObjects(ogm.node, self.direction, self.relationship_type, self.related_class)\r\n  File \"/home/tarrma/tmp/bug_neo4j-graphql/venv/lib/python3.6/site-packages/py2neo/ogm.py\", line 133, in __init__\r\n    self.__relationship_pattern = \"(a)<-[_:%s]-(b)\" % cypher_escape(relationship_type)\r\n  File \"/home/tarrma/tmp/bug_neo4j-graphql/venv/lib/python3.6/site-packages/py2neo/cypher/__init__.py\", line 304, in cypher_escape\r\n    raise TypeError(type(identifier).__name__)\r\nTypeError: NoneType\r\n~~~\r\n\r\nDid i forgot anything ? :thinking: \r\n\r\nI created a repo for you to reproduce the issue:\r\nhttps://github.com/Wenzel/bug_neo4j-graphql\r\nbranch: `relatedfrom`\r\n\r\nThank you for `py2neo` !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/681", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/681/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/681/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/681/events", "html_url": "https://github.com/technige/py2neo/issues/681", "id": 343735661, "node_id": "MDU6SXNzdWUzNDM3MzU2NjE=", "number": 681, "title": "I have been trying to connect to my local neo4j server using py2neo v3 and neo4j version 3.4.1.", "user": {"login": "pranshu777", "id": 31591229, "node_id": "MDQ6VXNlcjMxNTkxMjI5", "avatar_url": "https://avatars2.githubusercontent.com/u/31591229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pranshu777", "html_url": "https://github.com/pranshu777", "followers_url": "https://api.github.com/users/pranshu777/followers", "following_url": "https://api.github.com/users/pranshu777/following{/other_user}", "gists_url": "https://api.github.com/users/pranshu777/gists{/gist_id}", "starred_url": "https://api.github.com/users/pranshu777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pranshu777/subscriptions", "organizations_url": "https://api.github.com/users/pranshu777/orgs", "repos_url": "https://api.github.com/users/pranshu777/repos", "events_url": "https://api.github.com/users/pranshu777/events{/privacy}", "received_events_url": "https://api.github.com/users/pranshu777/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 144580703, "node_id": "MDU6TGFiZWwxNDQ1ODA3MDM=", "url": "https://api.github.com/repos/technige/py2neo/labels/not%20enough%20info", "name": "not enough info", "color": "eb6420", "default": false, "description": null}, {"id": 1149059245, "node_id": "MDU6TGFiZWwxMTQ5MDU5MjQ1", "url": "https://api.github.com/repos/technige/py2neo/labels/tumbleweed", "name": "tumbleweed", "color": "c2e0c6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-23T18:01:23Z", "updated_at": "2018-12-04T18:12:42Z", "closed_at": "2018-12-04T18:12:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "The commands I used are:-\r\n\r\n```\r\nfrom py2neo import Graph, Node, Relationship\r\n\r\ngraphURL='http://localhost:7474/db/data/'\r\ngraphUser = \"neo4j\"\r\ngraphPassphrase = \"XXXX\"\r\n\r\ngraph=Graph(graphURL, user=graphUser, password=graphPassphrase)\r\n```\r\nI receive the following errors on trying to use this code.\r\n\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nImportError                               Traceback (most recent call last)\r\n<ipython-input-20-ab3844caf22c> in <module>()\r\n      3 graphPassphrase = \"XXXX\"\r\n      4 \r\n----> 5 graph=Graph(graphURL, user=graphUser, password=graphPassphrase)\r\n\r\n~\\Anaconda3\\lib\\site-packages\\py2neo\\graph.py in __new__(cls, *uris, **settings)\r\n    333     def __new__(cls, *uris, **settings):\r\n    334         database = settings.pop(\"database\", \"data\")\r\n--> 335         graph_service = GraphService(*uris, **settings)\r\n    336         address = graph_service.address\r\n    337         if database in graph_service:\r\n\r\n~\\Anaconda3\\lib\\site-packages\\py2neo\\graph.py in __new__(cls, *uris, **settings)\r\n     77         from py2neo.addressing import register_graph_service, get_graph_service_auth\r\n     78         from py2neo.http import register_http_driver\r\n---> 79         from neo4j.v1 import GraphDatabase\r\n     80         register_http_driver()\r\n     81         address = register_graph_service(*uris, **settings)\r\n\r\n~\\Anaconda3\\lib\\site-packages\\neo4j\\v1\\__init__.py in <module>()\r\n     20 \r\n     21 from .api import *\r\n---> 22 from .bolt import *\r\n     23 from .security import *\r\n     24 from .types import *\r\n\r\n~\\Anaconda3\\lib\\site-packages\\neo4j\\v1\\bolt.py in <module>()\r\n     30 from .security import SecurityPlan, Unauthorized\r\n     31 from .summary import ResultSummary\r\n---> 32 from .types import Record\r\n     33 \r\n     34 \r\n\r\n~\\Anaconda3\\lib\\site-packages\\neo4j\\v1\\types\\__init__.py in <module>()\r\n     31 from operator import xor as xor_operator\r\n     32 \r\n---> 33 from neo4j.packstream import Structure\r\n     34 from neo4j.compat import map_type, string, integer, ustr\r\n     35 \r\n\r\n~\\Anaconda3\\lib\\site-packages\\neo4j\\packstream\\__init__.py in <module>()\r\n     20 \r\n     21 \r\n---> 22 from neo4j.util import import_best as _import_best\r\n     23 \r\n     24 from .structure import Structure\r\n\r\nImportError: cannot import name 'import_best'\r\n```\r\nI have tried using the handbook https://py2neo.org/v3/database.html?highlight=relation for v3 but it was of no use for my problem. Could you please help me with this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/680", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/680/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/680/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/680/events", "html_url": "https://github.com/technige/py2neo/issues/680", "id": 343500963, "node_id": "MDU6SXNzdWUzNDM1MDA5NjM=", "number": 680, "title": "How to completely delete nodes", "user": {"login": "wuhuanyan", "id": 39271126, "node_id": "MDQ6VXNlcjM5MjcxMTI2", "avatar_url": "https://avatars0.githubusercontent.com/u/39271126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wuhuanyan", "html_url": "https://github.com/wuhuanyan", "followers_url": "https://api.github.com/users/wuhuanyan/followers", "following_url": "https://api.github.com/users/wuhuanyan/following{/other_user}", "gists_url": "https://api.github.com/users/wuhuanyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/wuhuanyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wuhuanyan/subscriptions", "organizations_url": "https://api.github.com/users/wuhuanyan/orgs", "repos_url": "https://api.github.com/users/wuhuanyan/repos", "events_url": "https://api.github.com/users/wuhuanyan/events{/privacy}", "received_events_url": "https://api.github.com/users/wuhuanyan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-23T06:16:15Z", "updated_at": "2018-09-18T13:21:03Z", "closed_at": "2018-09-18T13:21:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n    tx = graph.begin()\r\n    nodes = graph.nodes\r\n    for node in nodes:\r\n        tx.delete(node)\r\n    tx.commit()\r\n```\r\nI want to empty my NEO4J database\r\nWhen I deleted nodes in the above method, there was an error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/admin/Downloads/python_projects/other/mysql_to_neo4j/main.py\", line 57, in <module>\r\n    test_neo4j()\r\n  File \"/Users/admin/Downloads/python_projects/other/mysql_to_neo4j/main.py\", line 50, in test_neo4j\r\n    for node in nodes:\r\n  File \"/anaconda3/envs/study/lib/python3.6/site-packages/py2neo/matching.py\", line 179, in __getitem__\r\n    raise KeyError(\"Node %d not found\" % identity)\r\nKeyError: 'Node 0 not found'\r\n```\r\nSo I wonder if the nodes are not completely deleted.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/679", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/679/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/679/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/679/events", "html_url": "https://github.com/technige/py2neo/issues/679", "id": 343016757, "node_id": "MDU6SXNzdWUzNDMwMTY3NTc=", "number": 679, "title": "py2neo 4.0 doc out of date", "user": {"login": "MiracleYoung", "id": 30042515, "node_id": "MDQ6VXNlcjMwMDQyNTE1", "avatar_url": "https://avatars3.githubusercontent.com/u/30042515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MiracleYoung", "html_url": "https://github.com/MiracleYoung", "followers_url": "https://api.github.com/users/MiracleYoung/followers", "following_url": "https://api.github.com/users/MiracleYoung/following{/other_user}", "gists_url": "https://api.github.com/users/MiracleYoung/gists{/gist_id}", "starred_url": "https://api.github.com/users/MiracleYoung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MiracleYoung/subscriptions", "organizations_url": "https://api.github.com/users/MiracleYoung/orgs", "repos_url": "https://api.github.com/users/MiracleYoung/repos", "events_url": "https://api.github.com/users/MiracleYoung/events{/privacy}", "received_events_url": "https://api.github.com/users/MiracleYoung/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 144580703, "node_id": "MDU6TGFiZWwxNDQ1ODA3MDM=", "url": "https://api.github.com/repos/technige/py2neo/labels/not%20enough%20info", "name": "not enough info", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-20T08:24:43Z", "updated_at": "2018-12-01T23:15:45Z", "closed_at": "2018-12-01T23:15:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi boss,\r\n\r\nI find that doc v3 and v4 is out of date, so that I can not successfully learn py2neo and hard to check what's wrong there.\r\n\r\nCould you please improve the Doc if you feel possible to do that...\r\n\r\nRegards.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/technige/py2neo/issues/678", "repository_url": "https://api.github.com/repos/technige/py2neo", "labels_url": "https://api.github.com/repos/technige/py2neo/issues/678/labels{/name}", "comments_url": "https://api.github.com/repos/technige/py2neo/issues/678/comments", "events_url": "https://api.github.com/repos/technige/py2neo/issues/678/events", "html_url": "https://github.com/technige/py2neo/issues/678", "id": 342239629, "node_id": "MDU6SXNzdWUzNDIyMzk2Mjk=", "number": 678, "title": "\u4e3a\u4f55\u901a\u8fc7py2neo \u521b\u5efa\u4e0d\u4e86\u8282\u70b9", "user": {"login": "dengqiqi123", "id": 36068163, "node_id": "MDQ6VXNlcjM2MDY4MTYz", "avatar_url": "https://avatars1.githubusercontent.com/u/36068163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dengqiqi123", "html_url": "https://github.com/dengqiqi123", "followers_url": "https://api.github.com/users/dengqiqi123/followers", "following_url": "https://api.github.com/users/dengqiqi123/following{/other_user}", "gists_url": "https://api.github.com/users/dengqiqi123/gists{/gist_id}", "starred_url": "https://api.github.com/users/dengqiqi123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dengqiqi123/subscriptions", "organizations_url": "https://api.github.com/users/dengqiqi123/orgs", "repos_url": "https://api.github.com/users/dengqiqi123/repos", "events_url": "https://api.github.com/users/dengqiqi123/events{/privacy}", "received_events_url": "https://api.github.com/users/dengqiqi123/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 11586704, "node_id": "MDU6TGFiZWwxMTU4NjcwNA==", "url": "https://api.github.com/repos/technige/py2neo/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "technige", "id": 275311, "node_id": "MDQ6VXNlcjI3NTMxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/275311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/technige", "html_url": "https://github.com/technige", "followers_url": "https://api.github.com/users/technige/followers", "following_url": "https://api.github.com/users/technige/following{/other_user}", "gists_url": "https://api.github.com/users/technige/gists{/gist_id}", "starred_url": "https://api.github.com/users/technige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/technige/subscriptions", "organizations_url": "https://api.github.com/users/technige/orgs", "repos_url": "https://api.github.com/users/technige/repos", "events_url": "https://api.github.com/users/technige/events{/privacy}", "received_events_url": "https://api.github.com/users/technige/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "technige", "id": 275311, "node_id": "MDQ6VXNlcjI3NTMxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/275311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/technige", "html_url": "https://github.com/technige", "followers_url": "https://api.github.com/users/technige/followers", "following_url": "https://api.github.com/users/technige/following{/other_user}", "gists_url": "https://api.github.com/users/technige/gists{/gist_id}", "starred_url": "https://api.github.com/users/technige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/technige/subscriptions", "organizations_url": "https://api.github.com/users/technige/orgs", "repos_url": "https://api.github.com/users/technige/repos", "events_url": "https://api.github.com/users/technige/events{/privacy}", "received_events_url": "https://api.github.com/users/technige/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-07-18T09:06:25Z", "updated_at": "2018-08-22T00:44:17Z", "closed_at": "2018-08-21T09:30:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "graph = Graph('http://localhost:7474/db/data',user='neo4j',password='test123')\r\ntx = graph.begin()\r\na = Node(label='hero',name='\u51ef')\r\ntx.create(a)\r\ntx.commit()\r\n\u62a5\u9519 builtins.TypeError: Parameters of type map are not supported  \u5728\u6267\u884ccreate()\u65b9\u6cd5\u7684\u65f6\u5019\r\n", "performed_via_github_app": null, "score": 1.0}]}