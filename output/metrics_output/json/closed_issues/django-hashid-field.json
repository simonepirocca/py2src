{"total_count": 30, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/47", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/47/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/47/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/47", "id": 657143682, "node_id": "MDU6SXNzdWU2NTcxNDM2ODI=", "number": 47, "title": "Salt based on foreign_key", "user": {"login": "epschroeder", "id": 30262242, "node_id": "MDQ6VXNlcjMwMjYyMjQy", "avatar_url": "https://avatars1.githubusercontent.com/u/30262242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epschroeder", "html_url": "https://github.com/epschroeder", "followers_url": "https://api.github.com/users/epschroeder/followers", "following_url": "https://api.github.com/users/epschroeder/following{/other_user}", "gists_url": "https://api.github.com/users/epschroeder/gists{/gist_id}", "starred_url": "https://api.github.com/users/epschroeder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epschroeder/subscriptions", "organizations_url": "https://api.github.com/users/epschroeder/orgs", "repos_url": "https://api.github.com/users/epschroeder/repos", "events_url": "https://api.github.com/users/epschroeder/events{/privacy}", "received_events_url": "https://api.github.com/users/epschroeder/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 452410289, "node_id": "MDU6TGFiZWw0NTI0MTAyODk=", "url": "https://api.github.com/repos/nshafer/django-hashid-field/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-07-15T07:54:57Z", "updated_at": "2020-07-15T15:41:59Z", "closed_at": "2020-07-15T15:41:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everyone,\r\n\r\nI would like to implement hashid's in my project but wonder if it's possible to use a foreign_key in a model as salt for the hashid? If this is not possible, is there any other way of using a different salt for each model?\r\n\r\nRegards,\r\nEgbert", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/46", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/46/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/46/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/46", "id": 635918801, "node_id": "MDU6SXNzdWU2MzU5MTg4MDE=", "number": 46, "title": "Using hashids with GenericRelations and allow_int_lookup=False", "user": {"login": "jskitz", "id": 181249, "node_id": "MDQ6VXNlcjE4MTI0OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/181249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jskitz", "html_url": "https://github.com/jskitz", "followers_url": "https://api.github.com/users/jskitz/followers", "following_url": "https://api.github.com/users/jskitz/following{/other_user}", "gists_url": "https://api.github.com/users/jskitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/jskitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jskitz/subscriptions", "organizations_url": "https://api.github.com/users/jskitz/orgs", "repos_url": "https://api.github.com/users/jskitz/repos", "events_url": "https://api.github.com/users/jskitz/events{/privacy}", "received_events_url": "https://api.github.com/users/jskitz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-10T04:31:02Z", "updated_at": "2020-06-10T18:24:54Z", "closed_at": "2020-06-10T18:24:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been incorporating hashids as primary keys into my project with `allow_int_lookup` set to `False`. Everything was going really smoothly until my tests failed out on the GenericRelations. I use GenericRelations in a few areas in my project. The one area that is quite expansive is for notifications. Having notifications be GenericRelations, I can have a list of notifications that link out to different targets on my site.\r\n\r\nHere are the three fields that are required for a generic relation (taken from my Notification model).\r\n\r\n```\r\n    target_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\r\n    target_object_id = models.PositiveIntegerField()\r\n    target_object = GenericForeignKey('target_content_type', 'target_object_id')\r\n```\r\n\r\nAfter moving over to hashids, generic relationships will no longer work unless I have `allow_int_lookup=True` on every model that could be used in a generic relationship. This obviously makes total sense since the ContentTypes framework is going to attempt to retrieve the object given `content_type` and `object_id`.\r\n\r\nMy first thought to making this work is to make `object_id` a `CharField` instead of a `PositiveIntegerField` and to always have it store the `hashid`. My fear with this approach is that I will need to do a data migration on existing objects in the system to convert the `object_id` over to the corresponding `hashid` for that object type (every model has its own salt, so I would have to be very careful here).\r\n\r\nIt seems like the easiest solution here is to just keep `allow_int_lookup=True`, but this will cover a large number or models that could end up in a notification. I kind of wanted to keep this set to `False` just so that people can't walk ids.\r\n\r\nIs there a recommended approach here? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/45", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/45/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/45/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/45", "id": 631836626, "node_id": "MDU6SXNzdWU2MzE4MzY2MjY=", "number": 45, "title": "The values_list and tight coupling to the database", "user": {"login": "jskitz", "id": 181249, "node_id": "MDQ6VXNlcjE4MTI0OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/181249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jskitz", "html_url": "https://github.com/jskitz", "followers_url": "https://api.github.com/users/jskitz/followers", "following_url": "https://api.github.com/users/jskitz/following{/other_user}", "gists_url": "https://api.github.com/users/jskitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/jskitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jskitz/subscriptions", "organizations_url": "https://api.github.com/users/jskitz/orgs", "repos_url": "https://api.github.com/users/jskitz/repos", "events_url": "https://api.github.com/users/jskitz/events{/privacy}", "received_events_url": "https://api.github.com/users/jskitz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-05T18:36:48Z", "updated_at": "2020-06-08T14:20:53Z", "closed_at": "2020-06-07T15:19:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been evaluating this project as a way to obfuscate my internal identifiers. I think the work here is really good, so thank you so much for this tool and your work on this. As I've been evaluating this in my own project, I noticed that low level functionality like `values_list` doesn't actually provide the values but instead provides the `Hashid` object. For example:\r\n\r\n```\r\nIn [1]: books = Book.objects.all()[:10]                                                                                                                                                                 \r\n\r\nIn [2]: books.values_list('id', flat=True)                                                                                                                                                              \r\nOut[2]: <QuerySet [Hashid(3): MzRKGR7, Hashid(6): WYjEbNm, Hashid(9): LVjZvj2, Hashid(12): P1a9rRX, Hashid(14): 0GRXVNL, Hashid(17): 1rNOMRY, Hashid(19): m6a6kRD, Hashid(21): JLN7QRv, Hashid(23): JoNYnaV, Hashid(25): KVNWLaP]>\r\n```\r\nIs there any way that you know of, to have this just flatly produce either the hash IDs or the IDs? Of course this could be built into a custom manager I'm sure, but it seems like this does modify the way the database ORM typically works in Django.\r\n\r\nThis makes me think that the tight binding to the database perhaps is _too_ tight an abstraction. If what I'm trying to do is obfuscate database identifiers so that people can't just march up my IDs or see how active my platform is, is there a way to just use Hashids as some sort of middleware to just translate between id and hashid without being tightly coupled to the database?\r\n\r\n[DRF Serializer Extensions](https://github.com/evenicoulddoit/django-rest-framework-serializer-extensions) takes this approach, but I thought that the execution of the idea was far too confusing and required a lot of additional buy in towards using their other structures, which I wasn't interested in.\r\n\r\nI really love the simplicity of what you have created here and the ease in which it can be implemented without messing with my database IDs. I was just wondering what other limitations beyond `values_list` may I encounter having this tied so closely to the database as a field.\r\n\r\nHave you considered this as an extension where you can just implement this at the serializer level without touching models or migrations (with full understand that it's an abstraction)? Thanks again.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/43", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/43/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/43/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/43", "id": 628022204, "node_id": "MDU6SXNzdWU2MjgwMjIyMDQ=", "number": 43, "title": "HashidAutoField auto-increments just like an AutoField", "user": {"login": "v10s", "id": 41371995, "node_id": "MDQ6VXNlcjQxMzcxOTk1", "avatar_url": "https://avatars0.githubusercontent.com/u/41371995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/v10s", "html_url": "https://github.com/v10s", "followers_url": "https://api.github.com/users/v10s/followers", "following_url": "https://api.github.com/users/v10s/following{/other_user}", "gists_url": "https://api.github.com/users/v10s/gists{/gist_id}", "starred_url": "https://api.github.com/users/v10s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/v10s/subscriptions", "organizations_url": "https://api.github.com/users/v10s/orgs", "repos_url": "https://api.github.com/users/v10s/repos", "events_url": "https://api.github.com/users/v10s/events{/privacy}", "received_events_url": "https://api.github.com/users/v10s/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-31T18:56:55Z", "updated_at": "2020-06-02T05:37:47Z", "closed_at": "2020-06-02T05:37:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/nshafer/django-hashid-field#hashid-auto-field\r\nIt's a little confusing u said that \"Along with HashidField there is also a HashidAutoField that works in the same way, but that auto-increments just like an AutoField\"\r\nSo due it means that successive hash values will have unit difference which will be the same in all cases.\r\nI am expecting it won't be like that but it read up the same.\r\nAnd if so will in not pose a security concern.\r\nM a little confused.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/39", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/39/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/39/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/39", "id": 615269973, "node_id": "MDU6SXNzdWU2MTUyNjk5NzM=", "number": 39, "title": "subquery has too many columns", "user": {"login": "wowkin2", "id": 1820114, "node_id": "MDQ6VXNlcjE4MjAxMTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1820114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wowkin2", "html_url": "https://github.com/wowkin2", "followers_url": "https://api.github.com/users/wowkin2/followers", "following_url": "https://api.github.com/users/wowkin2/following{/other_user}", "gists_url": "https://api.github.com/users/wowkin2/gists{/gist_id}", "starred_url": "https://api.github.com/users/wowkin2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wowkin2/subscriptions", "organizations_url": "https://api.github.com/users/wowkin2/orgs", "repos_url": "https://api.github.com/users/wowkin2/repos", "events_url": "https://api.github.com/users/wowkin2/events{/privacy}", "received_events_url": "https://api.github.com/users/wowkin2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-09T22:12:33Z", "updated_at": "2020-05-09T22:12:41Z", "closed_at": "2020-05-09T22:12:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Had issue described on DjangoProject issue tracker, but just after switching to use this battery (django-hashid-field). So decided to share and save time for others.\r\nhttps://code.djangoproject.com/ticket/30047?cversion=0&cnum_hist=9\r\n\r\nA Subquery filter on models.Obj, e.g., `filter(obj__in=Subquery(...))` ,requires that the subquery return exactly one column populated with Obj.pk.\r\n\r\n**Documentation suggests using `objects.values('pk')`**\r\n\r\nHowever, if the models.Obj.Meta.ordering is set, then those ordering fields are included with the subquery results, raising the exception:\r\n`django.db.utils.ProgrammingError: subquery has too many columns`\r\nThis is expected behavior, but confusing and not directly obvious in the code. Could be more clearly documented at:\r\n\u200bhttps://docs.djangoproject.com/en/dev/ref/models/expressions/#limiting-a-subquery-to-a-single-column\r\n\r\nCan be closed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/38", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/38/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/38/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/38", "id": 548015823, "node_id": "MDU6SXNzdWU1NDgwMTU4MjM=", "number": 38, "title": "Need to support gt operator to iterate by chunks", "user": {"login": "frossigneux", "id": 739143, "node_id": "MDQ6VXNlcjczOTE0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/739143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frossigneux", "html_url": "https://github.com/frossigneux", "followers_url": "https://api.github.com/users/frossigneux/followers", "following_url": "https://api.github.com/users/frossigneux/following{/other_user}", "gists_url": "https://api.github.com/users/frossigneux/gists{/gist_id}", "starred_url": "https://api.github.com/users/frossigneux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frossigneux/subscriptions", "organizations_url": "https://api.github.com/users/frossigneux/orgs", "repos_url": "https://api.github.com/users/frossigneux/repos", "events_url": "https://api.github.com/users/frossigneux/events{/privacy}", "received_events_url": "https://api.github.com/users/frossigneux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-10T11:04:42Z", "updated_at": "2020-01-15T15:56:56Z", "closed_at": "2020-01-14T22:14:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using django-chunkator to chunk big querysets and save RAM.\r\nIt find the next chunk by doing `filter(pk__gt=pk)` (see [here](https://github.com/peopledoc/django-chunkator/blob/master/chunkator/__init__.py#L37)).\r\nHowever _gt_ operator is not supported by django-hashid-field.\r\nIs there a particular reason to do not support it with integers?\r\nWe can get similar result by doing `Model.objets.all()[start:]` but I am not sure of the memory efficiency.\r\nI opened an issue here: https://github.com/peopledoc/django-chunkator/issues/36", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/36", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/36/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/36/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/36", "id": 531656505, "node_id": "MDU6SXNzdWU1MzE2NTY1MDU=", "number": 36, "title": "Django 3.0 support", "user": {"login": "hhamana", "id": 33051775, "node_id": "MDQ6VXNlcjMzMDUxNzc1", "avatar_url": "https://avatars2.githubusercontent.com/u/33051775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hhamana", "html_url": "https://github.com/hhamana", "followers_url": "https://api.github.com/users/hhamana/followers", "following_url": "https://api.github.com/users/hhamana/following{/other_user}", "gists_url": "https://api.github.com/users/hhamana/gists{/gist_id}", "starred_url": "https://api.github.com/users/hhamana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hhamana/subscriptions", "organizations_url": "https://api.github.com/users/hhamana/orgs", "repos_url": "https://api.github.com/users/hhamana/repos", "events_url": "https://api.github.com/users/hhamana/events{/privacy}", "received_events_url": "https://api.github.com/users/hhamana/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-12-03T01:51:06Z", "updated_at": "2019-12-05T21:44:17Z", "closed_at": "2019-12-05T21:44:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Upon updating to Django 3.0, the following import error is raised on server startup:\r\n```\r\nFile \"C:\\dev\\myproject\\venv\\lib\\site-packages\\hashid_field\\hashid.py\", line 4, in <module>\r\n    from django.utils import six\r\nImportError: cannot import name 'six' from 'django.utils' (C:\\dev\\myproject\\venv\\lib\\site-packages\\django\\utils\\__init__.py)\r\n```\r\nIt appears `django.utils` indeed does not include a `six` module anymore. Possibly since I am updating an existing project, it was already included in my dependencies as such: `six==1.12.0`.\r\nIt was then possible to directly change the import in both `hashid_field.hashid` and `hashid_field.rest`.\r\n```\r\nfrom django.util import six\r\n```\r\nto simply \r\n```\r\nimport six\r\n```\r\nThis fixed it, and I haven't noticed any other error related to django-hashid-field.\r\n\r\nDeclaring `six` as an independent dependency instead of relying on Django' reexport **may** fix it for everyone with no backwards compatibility issue for users not upgrading their Django yet.\r\n\r\nAt least that's the easy fix. Considering `six` itself is a Python 2/3 compatibility library, and Django's removal is due to dropping support for Python 2.7, as it reaches end of LTS in January 2020, it might be possible to consider dropping it here too, as suggested in #35.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/35", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/35/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/35/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/35", "id": 528091204, "node_id": "MDU6SXNzdWU1MjgwOTEyMDQ=", "number": 35, "title": "Remove Python 2.7 support", "user": {"login": "pauloxnet", "id": 521097, "node_id": "MDQ6VXNlcjUyMTA5Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/521097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pauloxnet", "html_url": "https://github.com/pauloxnet", "followers_url": "https://api.github.com/users/pauloxnet/followers", "following_url": "https://api.github.com/users/pauloxnet/following{/other_user}", "gists_url": "https://api.github.com/users/pauloxnet/gists{/gist_id}", "starred_url": "https://api.github.com/users/pauloxnet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pauloxnet/subscriptions", "organizations_url": "https://api.github.com/users/pauloxnet/orgs", "repos_url": "https://api.github.com/users/pauloxnet/repos", "events_url": "https://api.github.com/users/pauloxnet/events{/privacy}", "received_events_url": "https://api.github.com/users/pauloxnet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-11-25T13:34:37Z", "updated_at": "2019-12-05T21:43:58Z", "closed_at": "2019-12-05T21:43:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "[Official support for Python 2.7 ends in two months](https://pythonclock.org/), after which no bug fixes or security updates will be released. In preparation for that, I think it is time to remove code from Django Hashid field related to Python 2.7, as well as removing Python 2.7 from the CI test matrix.\r\n\r\nThe following checklist can tracks the progress of this endeavour:\r\n\r\n- [x] remove Python 2 support in `.travis.yml` and `tox.ini`\r\n- [x] remove Python 2 classifiers in `setup.py`\r\n- [x] remove `six` from the code\r\n- [x] remove `__future__` statements from the code\r\n- [x] update `README.rst` accordingly\r\n- [x] convert `super()` calls to python 3 style", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/34", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/34/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/34/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/34", "id": 514157298, "node_id": "MDU6SXNzdWU1MTQxNTcyOTg=", "number": 34, "title": "Is it possible to set some of the ids manually?", "user": {"login": "rootux", "id": 1032526, "node_id": "MDQ6VXNlcjEwMzI1MjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1032526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rootux", "html_url": "https://github.com/rootux", "followers_url": "https://api.github.com/users/rootux/followers", "following_url": "https://api.github.com/users/rootux/following{/other_user}", "gists_url": "https://api.github.com/users/rootux/gists{/gist_id}", "starred_url": "https://api.github.com/users/rootux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rootux/subscriptions", "organizations_url": "https://api.github.com/users/rootux/orgs", "repos_url": "https://api.github.com/users/rootux/repos", "events_url": "https://api.github.com/users/rootux/events{/privacy}", "received_events_url": "https://api.github.com/users/rootux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-29T19:10:52Z", "updated_at": "2019-10-29T22:27:34Z", "closed_at": "2019-10-29T22:27:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "We would like to do something like that - \r\n```\r\nnew = Image()\r\nnew.id = 1000\r\nnew.save()\r\n```\r\nDid someone was able to do so with that library?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/32", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/32/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/32/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/32", "id": 428237297, "node_id": "MDU6SXNzdWU0MjgyMzcyOTc=", "number": 32, "title": "Should not limit maximum version of Django", "user": {"login": "eseglem", "id": 5920492, "node_id": "MDQ6VXNlcjU5MjA0OTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5920492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eseglem", "html_url": "https://github.com/eseglem", "followers_url": "https://api.github.com/users/eseglem/followers", "following_url": "https://api.github.com/users/eseglem/following{/other_user}", "gists_url": "https://api.github.com/users/eseglem/gists{/gist_id}", "starred_url": "https://api.github.com/users/eseglem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eseglem/subscriptions", "organizations_url": "https://api.github.com/users/eseglem/orgs", "repos_url": "https://api.github.com/users/eseglem/repos", "events_url": "https://api.github.com/users/eseglem/events{/privacy}", "received_events_url": "https://api.github.com/users/eseglem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-02T13:46:20Z", "updated_at": "2019-04-02T18:58:20Z", "closed_at": "2019-04-02T16:20:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "This line here users from upgrading to Django 2.2:\r\n\r\nhttps://github.com/nshafer/django-hashid-field/blob/master/setup.py#L117 \r\n\r\nThis seems to be the only library I can find that limits the maximum version like this. Was there a specific reason as to not support more recent versions of Django?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/29", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/29/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/29/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/29", "id": 375106173, "node_id": "MDU6SXNzdWUzNzUxMDYxNzM=", "number": 29, "title": "Lookups fail for autofield when the base id is zero", "user": {"login": "fpghost", "id": 2691631, "node_id": "MDQ6VXNlcjI2OTE2MzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2691631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fpghost", "html_url": "https://github.com/fpghost", "followers_url": "https://api.github.com/users/fpghost/followers", "following_url": "https://api.github.com/users/fpghost/following{/other_user}", "gists_url": "https://api.github.com/users/fpghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/fpghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fpghost/subscriptions", "organizations_url": "https://api.github.com/users/fpghost/orgs", "repos_url": "https://api.github.com/users/fpghost/repos", "events_url": "https://api.github.com/users/fpghost/events{/privacy}", "received_events_url": "https://api.github.com/users/fpghost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-29T16:32:18Z", "updated_at": "2018-10-31T18:00:24Z", "closed_at": "2018-10-31T18:00:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "In hashid_field/hashid.py I think it should read like:\r\n\r\n```\r\n        value = self.decode(id)\r\n        # NB value could be zero\r\n        if value is not None:\r\n            self._id = value\r\n            self._hashid = id\r\n```\r\n\r\nelse if `value=0` like it would be for an AutoField starting from zero, then decode appears to fail and it leads to valueerror even though the decode actually returned a non-null value\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/27", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/27/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/27/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/27", "id": 367210223, "node_id": "MDU6SXNzdWUzNjcyMTAyMjM=", "number": 27, "title": "Fix RemovedInDjango30Warning from Django 2.0+", "user": {"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-05T13:24:51Z", "updated_at": "2018-10-05T16:28:18Z", "closed_at": "2018-10-05T15:21:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The latest pytest surfaces all deprecation warnings at the end of the test run, so I'm seeing this one hundreds of times on my app.\r\n\r\n```\r\n.../python3.6/site-packages/django/db/models/sql/compiler.py:997: RemovedInDjango30Warning: Remove the context parameter from HashidAutoField.from_db_value(). Support for it will be removed in Django 3.0.\r\n  RemovedInDjango30Warning,\r\n```\r\n\r\nShould be an easy fix with conditional versions of the function for django versions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/25", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/25/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/25/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/25", "id": 359091571, "node_id": "MDU6SXNzdWUzNTkwOTE1NzE=", "number": 25, "title": "Using hashid-field on third party models", "user": {"login": "ivanfr90", "id": 4324408, "node_id": "MDQ6VXNlcjQzMjQ0MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4324408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanfr90", "html_url": "https://github.com/ivanfr90", "followers_url": "https://api.github.com/users/ivanfr90/followers", "following_url": "https://api.github.com/users/ivanfr90/following{/other_user}", "gists_url": "https://api.github.com/users/ivanfr90/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanfr90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanfr90/subscriptions", "organizations_url": "https://api.github.com/users/ivanfr90/orgs", "repos_url": "https://api.github.com/users/ivanfr90/repos", "events_url": "https://api.github.com/users/ivanfr90/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanfr90/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-11T15:09:00Z", "updated_at": "2018-10-05T15:22:40Z", "closed_at": "2018-10-05T15:22:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI've have used some fields as HashidAutoField on my own models, and works very well. \r\nBecause of this I want to hash the id's of other models of third party apps. There's any functionality to accomplish this, or pattern that allows to use hashid-fields? I've searched every corner of Google, but options as subclassing of models or proxy are not valid, because id field exists on main Model, and can't be overridden. \r\nOn the other hand, downloading the source code of an application just to edit his model and include this feature does not seem appropriate. I'm sure that an easy solution can be applied.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/23", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/23/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/23/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/23", "id": 339436181, "node_id": "MDU6SXNzdWUzMzk0MzYxODE=", "number": 23, "title": "Clarify readme about searching in the admin", "user": {"login": "nwolff", "id": 40599, "node_id": "MDQ6VXNlcjQwNTk5", "avatar_url": "https://avatars0.githubusercontent.com/u/40599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwolff", "html_url": "https://github.com/nwolff", "followers_url": "https://api.github.com/users/nwolff/followers", "following_url": "https://api.github.com/users/nwolff/following{/other_user}", "gists_url": "https://api.github.com/users/nwolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwolff/subscriptions", "organizations_url": "https://api.github.com/users/nwolff/orgs", "repos_url": "https://api.github.com/users/nwolff/repos", "events_url": "https://api.github.com/users/nwolff/events{/privacy}", "received_events_url": "https://api.github.com/users/nwolff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-07-09T12:51:13Z", "updated_at": "2018-09-11T19:40:11Z", "closed_at": "2018-09-11T19:40:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "The readme says: \"Supports common filtering lookups, such as field__icontains so that Django Admin search_fields works out of the box.\"\r\n\r\nIn reality only exact matches work in the admin: the code in lookups.py tries to interpret the full string that was entered in the search box as a hashid, if it cannot then the search returns no items (or raises an exception depending on HASHID_FIELD_LOOKUP_EXCEPTION ). \r\n\r\nGiven that only an integer id is stored in the database (and not the hashid string), it makes sense that partial searches dont work (that would require generating all hashid values starting at one, and comparing to the search string). What I suggest is clarifying the docs.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/19", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/19/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/19/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/19", "id": 274129772, "node_id": "MDU6SXNzdWUyNzQxMjk3NzI=", "number": 19, "title": "IntegrityError for ForeignKey in DRF Request POST", "user": {"login": "dariuske", "id": 23254732, "node_id": "MDQ6VXNlcjIzMjU0NzMy", "avatar_url": "https://avatars2.githubusercontent.com/u/23254732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dariuske", "html_url": "https://github.com/dariuske", "followers_url": "https://api.github.com/users/dariuske/followers", "following_url": "https://api.github.com/users/dariuske/following{/other_user}", "gists_url": "https://api.github.com/users/dariuske/gists{/gist_id}", "starred_url": "https://api.github.com/users/dariuske/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dariuske/subscriptions", "organizations_url": "https://api.github.com/users/dariuske/orgs", "repos_url": "https://api.github.com/users/dariuske/repos", "events_url": "https://api.github.com/users/dariuske/events{/privacy}", "received_events_url": "https://api.github.com/users/dariuske/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2017-11-15T11:53:34Z", "updated_at": "2018-03-15T22:37:20Z", "closed_at": "2018-03-15T22:37:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI've just installed this package in my project and after following the guide, I'm getting an Integrity Error when performing POST requests.\r\nI'll use an example to demo:\r\n```\r\n#models.py\r\nclass Book(models.Model):\r\n\tid = HashidAutoField(primary_key=True)\r\n\ttitle = models.CharField(max_length=200)\r\n\tisbn = models.CharField(max_length=50)\r\n\tauthor = models.ForeignKey('Author', related_name='book')\r\n\r\nclass Author(models.Model):\r\n\tid = HashidAutoField(primary_key=True)\r\n\tname = models.CharField(max_length=100)\r\n\tbooks = models.ForeignKey(Book, related_name=\"author\")\r\n```\r\n\r\n```\r\n#serializers.py\r\nclass BookSerializer(serializers.ModelSerializer):\r\n\tid = HashidSerializerCharField(source_field='my_app.Book.id')\r\n\tauthor = serializers.PrimaryKeyRelatedField(pk_field=HashidSerializerCharField(source_field='my_app.Author.id'), read_only=True)\r\n    \r\n    class Meta:\r\n        model = Book\r\n        fields = (\"id\", \"title\", \"isbn\", \"author\")\r\n\r\n\r\nclass AuthorSerializer(serializers.ModelSerializer):\r\n    id = HashidSerializerCharField(source_field='my_app.Author.id')\r\n    \r\n    class Meta:\r\n        model = Author\r\n        fields = (\"id\", \"name\")\r\n```\r\n\r\n```\r\n#views.py\r\nclass BooksList(APIView):\r\n\tdef get(self, request, format=None):\r\n\t\ta_list = Book.objects.all()\r\n\t\tserializer = BookSerializer(a_list, many=True)\r\n\t\treturn Response(serializer.data)\r\n\r\n\tdef post(self, request, format=None):\r\n\t\tserializer = BookSerializer(data=request.data)\r\n\t\tif serializer.is_valid():\r\n\t\t\tserializer.save()\r\n\t\t\treturn Response(serializer.data, status=status.HTTP_201_CREATED)\r\n\t\treturn Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\tdef delete(self, request, pk, format=None):\r\n\t\titem = self.get_object(pk)\r\n\t\titem.delete()\r\n\t\treturn Response(status=status.HTTP_204_NO_CONTENT)\r\n\r\nclass BookDetail(APIView):\r\n\tdef get_object(self, pk):\r\n        try:\r\n            return Book.objects.get(pk=pk)\r\n        except Book.DoesNotExist:\r\n            raise Http404\r\n\r\n    def get(self, request, pk, format=None):\r\n        item_list = self.get_object(pk)\r\n        item_list = BookSerializer(item_list)\r\n        return Response(item_list.data)\r\n\r\n    def put(self, request, pk, format=None):\r\n        item = self.get_object(pk)\r\n        serializer = Book(item, data=request.data)\r\n        if serializer.is_valid():\r\n            serializer.save()\r\n            return Response(serializer.data)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n    def delete(self, request, pk, format=None):\r\n        item = self.get_object(pk)\r\n        item.delete()\r\n        return Response(status=status.HTTP_204_NO_CONTENT)\r\n```\r\n\r\n```\r\n#urls.py\r\nurl_patterns = [\r\n....\r\n    url(r'^api/books/$', views.BooksList.as_view()),\r\n    url(r'^api/books/(?P<pk>\\w+)/$', views.BookDetail.as_view()),\r\n....\r\n```\r\n\r\nI use token authentication for my APIs,\r\nNow when I do a POST\r\ncurl -X POST 'http:localhost:8000/my_app/books/' -H \"Authorizations: Token my_token_here\" -d \"title=TestBook&isbn=1234567890&author=7a5kPOq\"\r\n\r\nI get an error \r\nIntegrityError at /my_app/api/books/ NOT NULL constraint failed:my_app_book.author_id Request Method: POST Request URL: http://localhost:8000/my_app/api/books/\r\n(I have an author whose id = 7a5kPOq)\r\n\r\ndjango == 1.11.6\r\ndjango-hashid-fields == 2.0.1\r\n\r\nThe same worked before I introduced the HashidAutoField. Why can't it recognize the ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/17", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/17/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/17/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/17", "id": 262008975, "node_id": "MDU6SXNzdWUyNjIwMDg5NzU=", "number": 17, "title": "Shouldn't invalid hashid throw a DoesNotExist instead of a TypeError", "user": {"login": "Mactory", "id": 493594, "node_id": "MDQ6VXNlcjQ5MzU5NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/493594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mactory", "html_url": "https://github.com/Mactory", "followers_url": "https://api.github.com/users/Mactory/followers", "following_url": "https://api.github.com/users/Mactory/following{/other_user}", "gists_url": "https://api.github.com/users/Mactory/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mactory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mactory/subscriptions", "organizations_url": "https://api.github.com/users/Mactory/orgs", "repos_url": "https://api.github.com/users/Mactory/repos", "events_url": "https://api.github.com/users/Mactory/events{/privacy}", "received_events_url": "https://api.github.com/users/Mactory/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2017-10-02T08:08:25Z", "updated_at": "2017-10-04T17:52:15Z", "closed_at": "2017-10-04T17:52:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using a hash-id field for one of my models in a small private project. The Hash-ID is used in URLs to access the model instance. I recently had to change the `HASHID_FIELD_SALT` essentially invalidating all existing links, but as it is only a small project, I didn't worry about it too much.\r\n\r\nNow some of my users still had old links but as I use `get_object_or_404` to retrieve the model from the database, I thought I'd be save, as I thought the users with the old links would simply get a 404 error. This is, however, not the case. The Hash-ID Field throws a `TypeError: value must be a positive integer or a valid Hashids string` on a old Hash-ID. As the Hash-ID has the same length as the expected Hash-ID, I would expect the Model to throw a `DoesNotExist` Exception that would be caught by `get_object_or_404`.\r\n\r\nIs this behavior desired? Otherwise I would propose to change the behavior to throw a `DoesNotExist` if the hash-id is of the expected length but not valid.\r\n\r\nI can also provide a pull-request for this issue if you'd consent to my proposal.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/16", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/16/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/16/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/16", "id": 261605471, "node_id": "MDU6SXNzdWUyNjE2MDU0NzE=", "number": 16, "title": "Multiple search_fields in Django admin causes TypeError exception", "user": {"login": "berezovskyi-oleksandr", "id": 221562, "node_id": "MDQ6VXNlcjIyMTU2Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/221562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berezovskyi-oleksandr", "html_url": "https://github.com/berezovskyi-oleksandr", "followers_url": "https://api.github.com/users/berezovskyi-oleksandr/followers", "following_url": "https://api.github.com/users/berezovskyi-oleksandr/following{/other_user}", "gists_url": "https://api.github.com/users/berezovskyi-oleksandr/gists{/gist_id}", "starred_url": "https://api.github.com/users/berezovskyi-oleksandr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berezovskyi-oleksandr/subscriptions", "organizations_url": "https://api.github.com/users/berezovskyi-oleksandr/orgs", "repos_url": "https://api.github.com/users/berezovskyi-oleksandr/repos", "events_url": "https://api.github.com/users/berezovskyi-oleksandr/events{/privacy}", "received_events_url": "https://api.github.com/users/berezovskyi-oleksandr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 452410284, "node_id": "MDU6TGFiZWw0NTI0MTAyODQ=", "url": "https://api.github.com/repos/nshafer/django-hashid-field/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-09-29T10:56:58Z", "updated_at": "2017-10-04T17:51:35Z", "closed_at": "2017-10-04T17:51:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I want to search over some CharField and HashidAutoField in Django Admin, I get \r\n`TypeError: 'search' value must be a positive integer or a valid Hashids string.`\r\n\r\nThis fields are set via `search_fields` in admin configuration\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/15", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/15/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/15/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/15", "id": 258449779, "node_id": "MDU6SXNzdWUyNTg0NDk3Nzk=", "number": 15, "title": "What's the best way of handling these in forms.", "user": {"login": "tolomea", "id": 805072, "node_id": "MDQ6VXNlcjgwNTA3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/805072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tolomea", "html_url": "https://github.com/tolomea", "followers_url": "https://api.github.com/users/tolomea/followers", "following_url": "https://api.github.com/users/tolomea/following{/other_user}", "gists_url": "https://api.github.com/users/tolomea/gists{/gist_id}", "starred_url": "https://api.github.com/users/tolomea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tolomea/subscriptions", "organizations_url": "https://api.github.com/users/tolomea/orgs", "repos_url": "https://api.github.com/users/tolomea/repos", "events_url": "https://api.github.com/users/tolomea/events{/privacy}", "received_events_url": "https://api.github.com/users/tolomea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-18T11:39:02Z", "updated_at": "2018-02-23T18:18:24Z", "closed_at": "2018-02-23T18:18:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have various places where id's come in through forms, do you have any guidance on how to validate these at the form level so as to avoid TypeErrors when looking them up in the ORM\r\n\r\n    TypeError: 'bob' value must be a positive integer or a valid Hashids string.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/14", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/14/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/14/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/14", "id": 257693803, "node_id": "MDU6SXNzdWUyNTc2OTM4MDM=", "number": 14, "title": "Comparing to strings", "user": {"login": "tolomea", "id": 805072, "node_id": "MDQ6VXNlcjgwNTA3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/805072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tolomea", "html_url": "https://github.com/tolomea", "followers_url": "https://api.github.com/users/tolomea/followers", "following_url": "https://api.github.com/users/tolomea/following{/other_user}", "gists_url": "https://api.github.com/users/tolomea/gists{/gist_id}", "starred_url": "https://api.github.com/users/tolomea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tolomea/subscriptions", "organizations_url": "https://api.github.com/users/tolomea/orgs", "repos_url": "https://api.github.com/users/tolomea/repos", "events_url": "https://api.github.com/users/tolomea/events{/privacy}", "received_events_url": "https://api.github.com/users/tolomea/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 452410286, "node_id": "MDU6TGFiZWw0NTI0MTAyODY=", "url": "https://api.github.com/repos/nshafer/django-hashid-field/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2017-09-14T12:01:28Z", "updated_at": "2017-09-25T22:11:10Z", "closed_at": "2017-09-25T22:11:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "There are a bunch of situations where it would be convenient if str(hashid) == hashid was True.\r\nI was wondering if there was a particular reason why this is not supported currently?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/13", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/13/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/13/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/13", "id": 255582134, "node_id": "MDU6SXNzdWUyNTU1ODIxMzQ=", "number": 13, "title": "Searching for hashid's with the ModelAdmin's 'search_fields' feature?", "user": {"login": "Bartvds", "id": 685984, "node_id": "MDQ6VXNlcjY4NTk4NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/685984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bartvds", "html_url": "https://github.com/Bartvds", "followers_url": "https://api.github.com/users/Bartvds/followers", "following_url": "https://api.github.com/users/Bartvds/following{/other_user}", "gists_url": "https://api.github.com/users/Bartvds/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bartvds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bartvds/subscriptions", "organizations_url": "https://api.github.com/users/Bartvds/orgs", "repos_url": "https://api.github.com/users/Bartvds/repos", "events_url": "https://api.github.com/users/Bartvds/events{/privacy}", "received_events_url": "https://api.github.com/users/Bartvds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 13, "created_at": "2017-09-06T12:13:39Z", "updated_at": "2019-07-15T16:14:28Z", "closed_at": "2017-09-25T22:10:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be very useful for our daily operations if we could search the hashed value in the standard ModelAdmin search widget.\r\n\r\nI naively tried adding the field name to `search_fields` but it doesn't find the items I know are there. This was with an HashidAutoField with primary, salt and alphabet all set.\r\n\r\nI've spend some downtime looking into it, and found `ModelAdmin.get_search_results` in the docs, and I can make this search work by implementing it like this:\r\n\r\n````python\r\ndef get_search_results(self, request, queryset, search_term):\r\n    queryset, use_distinct = super().get_search_results(request, queryset, search_term)\r\n    queryset |= self.model.objects.filter(id=search_term)\r\n    return queryset, use_distinct\r\n````\r\n\r\nWhat is weird about it that my code doesn't do any decoding; the regular queryset lookup on the field does it already. \r\n\r\nSo now I wonder if we can make it so we don't need to cart this overridden method around but just use the field name in the `search_fields`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/12", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/12/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/12/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/12", "id": 245237843, "node_id": "MDU6SXNzdWUyNDUyMzc4NDM=", "number": 12, "title": "HashidAutoField and REST post requests", "user": {"login": "oliverbienert", "id": 6669621, "node_id": "MDQ6VXNlcjY2Njk2MjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6669621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oliverbienert", "html_url": "https://github.com/oliverbienert", "followers_url": "https://api.github.com/users/oliverbienert/followers", "following_url": "https://api.github.com/users/oliverbienert/following{/other_user}", "gists_url": "https://api.github.com/users/oliverbienert/gists{/gist_id}", "starred_url": "https://api.github.com/users/oliverbienert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oliverbienert/subscriptions", "organizations_url": "https://api.github.com/users/oliverbienert/orgs", "repos_url": "https://api.github.com/users/oliverbienert/repos", "events_url": "https://api.github.com/users/oliverbienert/events{/privacy}", "received_events_url": "https://api.github.com/users/oliverbienert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-24T23:11:29Z", "updated_at": "2017-07-25T08:27:53Z", "closed_at": "2017-07-25T08:27:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nin Django Rest Framework, I normally don't have to declare id fields explicitly. When I post data, a new instance is created. Sadly, this does not work if I make my model id a HashidAutoField:\r\n```\r\nid = HashidAutoField(primary_key=True) \r\n```\r\nIn the ModelSerializer, I have to declare id explicitly as well:\r\n```\r\nid = HashidSerializerCharField(source_field='api.project.id')\r\n```\r\nWhen I now send a post, the server responds with an ApiError:\r\n```\r\nid: This field is required.\r\n```\r\nNaturally I would not send an id, for it is a post message, intended to create a new object.\r\nAnd I need the id to automatically created by the database, as usual. How is this supposed to work?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/11", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/11/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/11/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/11", "id": 245081863, "node_id": "MDU6SXNzdWUyNDUwODE4NjM=", "number": 11, "title": "Object of type 'Hashid' is not JSON serializable", "user": {"login": "Bartvds", "id": 685984, "node_id": "MDQ6VXNlcjY4NTk4NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/685984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bartvds", "html_url": "https://github.com/Bartvds", "followers_url": "https://api.github.com/users/Bartvds/followers", "following_url": "https://api.github.com/users/Bartvds/following{/other_user}", "gists_url": "https://api.github.com/users/Bartvds/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bartvds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bartvds/subscriptions", "organizations_url": "https://api.github.com/users/Bartvds/orgs", "repos_url": "https://api.github.com/users/Bartvds/repos", "events_url": "https://api.github.com/users/Bartvds/events{/privacy}", "received_events_url": "https://api.github.com/users/Bartvds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-07-24T13:34:36Z", "updated_at": "2020-08-15T17:14:59Z", "closed_at": "2020-05-28T18:00:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "The regular JSON encoders can't handle the Hashid object, so we had to override the encoder to use the hashed value instead of the instance:\r\n\r\n````python\r\nclass HashidJSONEncoder(DjangoJSONEncoder):\r\n    def default(self, o):\r\n        if isinstance(o, Hashid):\r\n            return str(o)\r\n        return super().default(o)\r\n````\r\n\r\nThis is not that surprising or new, but I'd leave a note.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/10", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/10/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/10/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/10", "id": 244160365, "node_id": "MDU6SXNzdWUyNDQxNjAzNjU=", "number": 10, "title": "TypeError when primary key is an OneToOneField", "user": {"login": "OskarPersson", "id": 935414, "node_id": "MDQ6VXNlcjkzNTQxNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/935414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OskarPersson", "html_url": "https://github.com/OskarPersson", "followers_url": "https://api.github.com/users/OskarPersson/followers", "following_url": "https://api.github.com/users/OskarPersson/following{/other_user}", "gists_url": "https://api.github.com/users/OskarPersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/OskarPersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OskarPersson/subscriptions", "organizations_url": "https://api.github.com/users/OskarPersson/orgs", "repos_url": "https://api.github.com/users/OskarPersson/repos", "events_url": "https://api.github.com/users/OskarPersson/events{/privacy}", "received_events_url": "https://api.github.com/users/OskarPersson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-07-19T20:14:18Z", "updated_at": "2017-09-25T22:11:46Z", "closed_at": "2017-09-25T21:48:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "With the models and serializers below I get an exception when listing the books:\r\n\r\n```\r\nTypeError: '1' value must be a valid Hashids string.\r\n```\r\n\r\nRemoving the nested serialization of authors in the book serialization gets rid of the exception but displays an invalid id for the author of each book.\r\n\r\n# Models\r\n\r\n```\r\n# books/models.py\r\nfrom django.db import models\r\nfrom hashid_field import HashidAutoField\r\n\r\nclass Book(models.Model):\r\n    id = HashidAutoField(primary_key=True)\r\n    name = models.CharField(max_length=255)\r\n    author = models.ForeignKey('authors.Author', on_delete=models.SET_NULL, related_name='books', null=True)\r\n```\r\n\r\n```\r\n# customauth/models.py\r\nfrom django.contrib.auth.models import AbstractUser\r\nfrom django.db import models\r\nfrom hashid_field import HashidAutoField\r\n\r\nclass User(AbstractUser):\r\n    id = HashidAutoField(primary_key=True)\r\n    created_at = models.DateTimeField(auto_now_add=True)\r\n    updated_at = models.DateTimeField(auto_now=True)\r\n```\r\n\r\n```\r\n# authors/models.py\r\n\r\nfrom django.conf import settings\r\nfrom django.db import models\r\n\r\nclass Author(models.Model):\r\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, primary_key=True)\r\n    description = models.TextField(max_length=1000)\r\n```\r\n\r\n# Serializers\r\n\r\n```\r\n# authors/serializers.py\r\nfrom django.conf import settings\r\nfrom django.contrib.auth import get_user_model\r\nfrom hashid_field.rest import HashidSerializerCharField\r\nfrom rest_framework import serializers\r\nfrom .models import Author\r\n\r\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\r\n    id = HashidSerializerCharField(source_field='%s.id' % settings.AUTH_USER_MODEL)\r\n\r\n    class Meta:\r\n        model = get_user_model()\r\n        fields = ('url', 'id', 'username')\r\n\r\nclass AuthorSerializer(serializers.HyperlinkedModelSerializer):\r\n    user = UserSerializer()\r\n\r\n    class Meta:\r\n        model = Author\r\n        fields = ('url', 'user', 'description',)\r\n```\r\n\r\n```\r\n# books/serializers.py\r\nfrom hashid_field.rest import HashidSerializerCharField\r\nfrom rest_framework import serializers\r\nfrom authors.serializers import AuthorSerializer\r\nfrom .models import Book\r\n\r\nclass BookSerializer(serializers.HyperlinkedModelSerializer):\r\n    id = HashidSerializerCharField(source_field='books.Book.id')\r\n    author = AuthorSerializer()\r\n\r\n    class Meta:\r\n        model = Book\r\n        fields = ('url', 'id', 'name', 'author',)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/7", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/7/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/7/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/7", "id": 235075766, "node_id": "MDU6SXNzdWUyMzUwNzU3NjY=", "number": 7, "title": "HashidAutoField error when using get_or_create shortcut", "user": {"login": "bratomes", "id": 8885756, "node_id": "MDQ6VXNlcjg4ODU3NTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/8885756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bratomes", "html_url": "https://github.com/bratomes", "followers_url": "https://api.github.com/users/bratomes/followers", "following_url": "https://api.github.com/users/bratomes/following{/other_user}", "gists_url": "https://api.github.com/users/bratomes/gists{/gist_id}", "starred_url": "https://api.github.com/users/bratomes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bratomes/subscriptions", "organizations_url": "https://api.github.com/users/bratomes/orgs", "repos_url": "https://api.github.com/users/bratomes/repos", "events_url": "https://api.github.com/users/bratomes/events{/privacy}", "received_events_url": "https://api.github.com/users/bratomes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-06-11T16:15:56Z", "updated_at": "2017-06-13T20:00:57Z", "closed_at": "2017-06-13T20:00:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I use Django get_or_create shortcut with an HashidAutoField, I get the error below:\r\n\r\n`AttributeError: 'NoneType' object has no attribute '__dict__'`\r\n\r\nBut when I use Django AutoField, it works perfectly.\r\n\r\nExample of use to generate the error:\r\n\r\n```\r\n# models.py\r\nclass Channel(models.Model):\r\n    id = HashidAutoField(primary_key=True)\r\n    name = models.CharField(max_length=60)\r\n```\r\n\r\nand then execute:\r\n\r\n`Channel.objects.get_or_create(name='test')`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/6", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/6/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/6/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/6", "id": 230332894, "node_id": "MDU6SXNzdWUyMzAzMzI4OTQ=", "number": 6, "title": "Substitute a CharField with a HashidAutoField", "user": {"login": "bluesurfer", "id": 4722772, "node_id": "MDQ6VXNlcjQ3MjI3NzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4722772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluesurfer", "html_url": "https://github.com/bluesurfer", "followers_url": "https://api.github.com/users/bluesurfer/followers", "following_url": "https://api.github.com/users/bluesurfer/following{/other_user}", "gists_url": "https://api.github.com/users/bluesurfer/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluesurfer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluesurfer/subscriptions", "organizations_url": "https://api.github.com/users/bluesurfer/orgs", "repos_url": "https://api.github.com/users/bluesurfer/repos", "events_url": "https://api.github.com/users/bluesurfer/events{/privacy}", "received_events_url": "https://api.github.com/users/bluesurfer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-05-22T09:17:13Z", "updated_at": "2017-11-15T13:59:58Z", "closed_at": "2017-11-15T13:59:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am currently using the `hashids`library to generate a friendly ID from the object primary key. Something similar to the following example taken from [djangosnippets](https://djangosnippets.org/snippets/1249/)\r\n\r\n```\r\n def save(self, *args, **kwargs):\r\n    super(MyModel, self).save(*args, **kwargs)\r\n\r\n    # Populate the invoice_id if it is missing\r\n    if self.id and not self.invoice_id:\r\n        self.invoice_id = friendly_id.encode(self.id)\r\n        super(MyModel, self).save(*args, **kwargs)\r\n```\r\nThat is quite an ugly solution. Plus I made the same mistake described in #1. I would like to adopt this package but I have two requirements:\r\n\r\n1. Keep the old hashids stored in a `CharField`\r\n2. Instances of different models must have different hashids\r\n\r\nIs that possible? To avoid collision with old hashids I could set a different length for the new ones but I don't know how to properly integrate it.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/5", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/5/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/5/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/5", "id": 223338749, "node_id": "MDU6SXNzdWUyMjMzMzg3NDk=", "number": 5, "title": "Error in HashidAutoField example in readme?", "user": {"login": "Bartvds", "id": 685984, "node_id": "MDQ6VXNlcjY4NTk4NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/685984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bartvds", "html_url": "https://github.com/Bartvds", "followers_url": "https://api.github.com/users/Bartvds/followers", "following_url": "https://api.github.com/users/Bartvds/following{/other_user}", "gists_url": "https://api.github.com/users/Bartvds/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bartvds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bartvds/subscriptions", "organizations_url": "https://api.github.com/users/Bartvds/orgs", "repos_url": "https://api.github.com/users/Bartvds/repos", "events_url": "https://api.github.com/users/Bartvds/events{/privacy}", "received_events_url": "https://api.github.com/users/Bartvds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-21T10:06:45Z", "updated_at": "2017-04-21T17:02:01Z", "closed_at": "2017-04-21T16:59:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I follow this example from the readme:\r\n\r\n````\r\nfrom hashid_field import HashidAutoField\r\n\r\nclass Book(models.Model):\r\n    serial_id = HashidAutoField()\r\n````\r\n\r\nI get an error \"A model can't have more than one AutoField.\" (likely because django created an 'id' autofield itself). This is on Django 1.11 and django-hashid-field 1.2.1\r\n\r\nIt need primary_key=True at least.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/4", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/4/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/4/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/4", "id": 209218866, "node_id": "MDU6SXNzdWUyMDkyMTg4NjY=", "number": 4, "title": "Not clear on how to serialize a ForeignKey to a model using HashidAutoField", "user": {"login": "pembo13", "id": 5777117, "node_id": "MDQ6VXNlcjU3NzcxMTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5777117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pembo13", "html_url": "https://github.com/pembo13", "followers_url": "https://api.github.com/users/pembo13/followers", "following_url": "https://api.github.com/users/pembo13/following{/other_user}", "gists_url": "https://api.github.com/users/pembo13/gists{/gist_id}", "starred_url": "https://api.github.com/users/pembo13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pembo13/subscriptions", "organizations_url": "https://api.github.com/users/pembo13/orgs", "repos_url": "https://api.github.com/users/pembo13/repos", "events_url": "https://api.github.com/users/pembo13/events{/privacy}", "received_events_url": "https://api.github.com/users/pembo13/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2017-02-21T17:37:28Z", "updated_at": "2017-03-27T03:32:45Z", "closed_at": "2017-03-27T03:32:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was getting serialization errors as the serialize didn't know how to serialize the foreign models PK.\r\n\r\nAs a temporary workaround, I did this, but I suspect it's not the best way:\r\n\r\n```python\r\nclass HashidSerializerRelatedField(serializers.RelatedField):\r\n\r\n\tdef to_representation(self, value):\r\n\t\treturn str(value.id)\r\n\t\r\n\tpass\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/3", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/3/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/3/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/3", "id": 203446423, "node_id": "MDU6SXNzdWUyMDM0NDY0MjM=", "number": 3, "title": "Usage with generic views", "user": {"login": "guillaumervls", "id": 3765057, "node_id": "MDQ6VXNlcjM3NjUwNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3765057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guillaumervls", "html_url": "https://github.com/guillaumervls", "followers_url": "https://api.github.com/users/guillaumervls/followers", "following_url": "https://api.github.com/users/guillaumervls/following{/other_user}", "gists_url": "https://api.github.com/users/guillaumervls/gists{/gist_id}", "starred_url": "https://api.github.com/users/guillaumervls/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guillaumervls/subscriptions", "organizations_url": "https://api.github.com/users/guillaumervls/orgs", "repos_url": "https://api.github.com/users/guillaumervls/repos", "events_url": "https://api.github.com/users/guillaumervls/events{/privacy}", "received_events_url": "https://api.github.com/users/guillaumervls/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 452410286, "node_id": "MDU6TGFiZWw0NTI0MTAyODY=", "url": "https://api.github.com/repos/nshafer/django-hashid-field/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-01-26T18:11:15Z", "updated_at": "2017-04-21T17:02:58Z", "closed_at": "2017-04-21T17:02:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThanks for the package! When I use `id = HashidAutoField(primary_key=True)` on a model, it works fine, except that if I use a Django generic `DetailView` with this model, accessible from a url `url(r'^models/(?P<pk>[0-9a-zA-Z]+)/$', views.MyView.as_view())` it works with both hashes and *real IDs*. Which is a problem if I understand well the purpose of hashids - prevent sequential scraping.\r\n\r\nAm I missing something ?\r\n\r\nCheers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/2", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/2/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/2/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/2", "id": 200672722, "node_id": "MDU6SXNzdWUyMDA2NzI3MjI=", "number": 2, "title": "Fixtures error", "user": {"login": "Jastrzebowski", "id": 598806, "node_id": "MDQ6VXNlcjU5ODgwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/598806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jastrzebowski", "html_url": "https://github.com/Jastrzebowski", "followers_url": "https://api.github.com/users/Jastrzebowski/followers", "following_url": "https://api.github.com/users/Jastrzebowski/following{/other_user}", "gists_url": "https://api.github.com/users/Jastrzebowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jastrzebowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jastrzebowski/subscriptions", "organizations_url": "https://api.github.com/users/Jastrzebowski/orgs", "repos_url": "https://api.github.com/users/Jastrzebowski/repos", "events_url": "https://api.github.com/users/Jastrzebowski/events{/privacy}", "received_events_url": "https://api.github.com/users/Jastrzebowski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 452410284, "node_id": "MDU6TGFiZWw0NTI0MTAyODQ=", "url": "https://api.github.com/repos/nshafer/django-hashid-field/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "nshafer", "id": 3673047, "node_id": "MDQ6VXNlcjM2NzMwNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3673047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nshafer", "html_url": "https://github.com/nshafer", "followers_url": "https://api.github.com/users/nshafer/followers", "following_url": "https://api.github.com/users/nshafer/following{/other_user}", "gists_url": "https://api.github.com/users/nshafer/gists{/gist_id}", "starred_url": "https://api.github.com/users/nshafer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nshafer/subscriptions", "organizations_url": "https://api.github.com/users/nshafer/orgs", "repos_url": "https://api.github.com/users/nshafer/repos", "events_url": "https://api.github.com/users/nshafer/events{/privacy}", "received_events_url": "https://api.github.com/users/nshafer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-01-13T16:47:22Z", "updated_at": "2019-09-04T07:56:05Z", "closed_at": "2017-04-21T17:03:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting an error while trying to load fixtures after initial migration (migration for existing data works fine)\r\n\r\nError as result of `python manage.py loaddata initial_data`:\r\n```\r\nTypeError: Problem installing fixture '/project/app/fixtures/initial_data.json': Hashid(1): HASH is not JSON serializable\r\n```\r\n\r\nmodel.py:\r\n```\r\nclass Object(models.Model):\r\n    id = HashidAutoField(\r\n        primary_key=True,\r\n        min_length=6\r\n    )\r\n```\r\n\r\nfixture:\r\n```\r\n[\r\n  {\r\n    \"model\": \"app.object\",\r\n    \"pk\": 1,\r\n    \"fields\": {\r\n     \u2026\r\n    }\r\n  }\r\n]", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/1", "repository_url": "https://api.github.com/repos/nshafer/django-hashid-field", "labels_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/1/comments", "events_url": "https://api.github.com/repos/nshafer/django-hashid-field/issues/1/events", "html_url": "https://github.com/nshafer/django-hashid-field/issues/1", "id": 197740783, "node_id": "MDU6SXNzdWUxOTc3NDA3ODM=", "number": 1, "title": "Is it safe to use SECRET_KEY as the salt?", "user": {"login": "fjsj", "id": 397989, "node_id": "MDQ6VXNlcjM5Nzk4OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/397989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fjsj", "html_url": "https://github.com/fjsj", "followers_url": "https://api.github.com/users/fjsj/followers", "following_url": "https://api.github.com/users/fjsj/following{/other_user}", "gists_url": "https://api.github.com/users/fjsj/gists{/gist_id}", "starred_url": "https://api.github.com/users/fjsj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fjsj/subscriptions", "organizations_url": "https://api.github.com/users/fjsj/orgs", "repos_url": "https://api.github.com/users/fjsj/repos", "events_url": "https://api.github.com/users/fjsj/events{/privacy}", "received_events_url": "https://api.github.com/users/fjsj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-27T18:29:00Z", "updated_at": "2016-12-27T20:12:16Z", "closed_at": "2016-12-27T20:09:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looks like it's possible to discover the salt by looking at hashids: http://carnage.github.io/2015/08/cryptanalysis-of-hashids\r\nThis blog post is linked at hashids.org website: http://hashids.org/#decoding\r\n\r\nTherefore, maybe this lib shouldn't use `SECRET_KEY` by default as the salt.\r\nIMO there should be a custom Django setting for the global hashid salt.", "performed_via_github_app": null, "score": 1.0}]}