{"total_count": 30, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/zopefoundation/transaction/issues/89", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/89/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/89/events", "html_url": "https://github.com/zopefoundation/transaction/issues/89", "id": 535177088, "node_id": "MDU6SXNzdWU1MzUxNzcwODg=", "number": 89, "title": "Remove legacy functionality from ITransactionDeprecated", "user": {"login": "jamadden", "id": 1256082, "node_id": "MDQ6VXNlcjEyNTYwODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamadden", "html_url": "https://github.com/jamadden", "followers_url": "https://api.github.com/users/jamadden/followers", "following_url": "https://api.github.com/users/jamadden/following{/other_user}", "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions", "organizations_url": "https://api.github.com/users/jamadden/orgs", "repos_url": "https://api.github.com/users/jamadden/repos", "events_url": "https://api.github.com/users/jamadden/events{/privacy}", "received_events_url": "https://api.github.com/users/jamadden/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-09T19:16:28Z", "updated_at": "2019-12-11T14:32:13Z", "closed_at": "2019-12-11T14:32:13Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "There's a bunch of compatibility code supporting the old `Transaction.register` and `DataManager.prepare` APIs. That code is either documented as deprecated, commented as deprecated, or not documented at all. It hasn't been the supported protocol since transaction became its own distribution.\r\n\r\nRemoving it doesn't break any ZODB tests (except tests that are explicitly using testing the legacy functions).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/87", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/87/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/87/events", "html_url": "https://github.com/zopefoundation/transaction/issues/87", "id": 534098461, "node_id": "MDU6SXNzdWU1MzQwOTg0NjE=", "number": 87, "title": "RTD integration broken", "user": {"login": "jamadden", "id": 1256082, "node_id": "MDQ6VXNlcjEyNTYwODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamadden", "html_url": "https://github.com/jamadden", "followers_url": "https://api.github.com/users/jamadden/followers", "following_url": "https://api.github.com/users/jamadden/following{/other_user}", "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions", "organizations_url": "https://api.github.com/users/jamadden/orgs", "repos_url": "https://api.github.com/users/jamadden/repos", "events_url": "https://api.github.com/users/jamadden/events{/privacy}", "received_events_url": "https://api.github.com/users/jamadden/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1361180641, "node_id": "MDU6TGFiZWwxMzYxMTgwNjQx", "url": "https://api.github.com/repos/zopefoundation/transaction/labels/docs", "name": "docs", "color": "0052cc", "default": false, "description": "Pertaining to documentation"}], "state": "closed", "locked": false, "assignee": {"login": "tseaver", "id": 242750, "node_id": "MDQ6VXNlcjI0Mjc1MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/242750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tseaver", "html_url": "https://github.com/tseaver", "followers_url": "https://api.github.com/users/tseaver/followers", "following_url": "https://api.github.com/users/tseaver/following{/other_user}", "gists_url": "https://api.github.com/users/tseaver/gists{/gist_id}", "starred_url": "https://api.github.com/users/tseaver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tseaver/subscriptions", "organizations_url": "https://api.github.com/users/tseaver/orgs", "repos_url": "https://api.github.com/users/tseaver/repos", "events_url": "https://api.github.com/users/tseaver/events{/privacy}", "received_events_url": "https://api.github.com/users/tseaver/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tseaver", "id": 242750, "node_id": "MDQ6VXNlcjI0Mjc1MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/242750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tseaver", "html_url": "https://github.com/tseaver", "followers_url": "https://api.github.com/users/tseaver/followers", "following_url": "https://api.github.com/users/tseaver/following{/other_user}", "gists_url": "https://api.github.com/users/tseaver/gists{/gist_id}", "starred_url": "https://api.github.com/users/tseaver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tseaver/subscriptions", "organizations_url": "https://api.github.com/users/tseaver/orgs", "repos_url": "https://api.github.com/users/tseaver/repos", "events_url": "https://api.github.com/users/tseaver/events{/privacy}", "received_events_url": "https://api.github.com/users/tseaver/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-12-06T15:57:44Z", "updated_at": "2019-12-09T11:37:44Z", "closed_at": "2019-12-09T11:35:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Github services have been deprecated, and the existing service for RTD cannot be re-activated. Hence, docs aren't getting built. It needs migrated to [a webhook](https://docs.readthedocs.io/en/stable/webhooks.html). To do that, we need the project's ID, which is only available to the RTD admin. Could @tseaver please take a look?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/83", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/83/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/83/events", "html_url": "https://github.com/zopefoundation/transaction/issues/83", "id": 443935295, "node_id": "MDU6SXNzdWU0NDM5MzUyOTU=", "number": 83, "title": "Docs: Confusion between resource and data managers", "user": {"login": "jamadden", "id": 1256082, "node_id": "MDQ6VXNlcjEyNTYwODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamadden", "html_url": "https://github.com/jamadden", "followers_url": "https://api.github.com/users/jamadden/followers", "following_url": "https://api.github.com/users/jamadden/following{/other_user}", "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions", "organizations_url": "https://api.github.com/users/jamadden/orgs", "repos_url": "https://api.github.com/users/jamadden/repos", "events_url": "https://api.github.com/users/jamadden/events{/privacy}", "received_events_url": "https://api.github.com/users/jamadden/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 23850174, "node_id": "MDU6TGFiZWwyMzg1MDE3NA==", "url": "https://api.github.com/repos/zopefoundation/transaction/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 1361180641, "node_id": "MDU6TGFiZWwxMzYxMTgwNjQx", "url": "https://api.github.com/repos/zopefoundation/transaction/labels/docs", "name": "docs", "color": "0052cc", "default": false, "description": "Pertaining to documentation"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-14T14:04:58Z", "updated_at": "2019-12-11T14:32:15Z", "closed_at": "2019-12-11T14:32:15Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The [chapter called 'Writing a Resource Manager'](https://transaction.readthedocs.io/en/latest/resourcemanager.html) actually gives an example of implementing an `IDataManager`.\r\n\r\nThe [chapter called \"Transaction integrations / Data Manager Implementations\"](https://transaction.readthedocs.io/en/latest/integrations.html) describes implementations of `IDataManager` (that the previous chapter had called a resource manager).\r\n\r\nThe [chapter called \"Writing a Data Manager\"](https://transaction.readthedocs.io/en/latest/datamanager.html) I *think* is talking about `ITransactionManager` (except it discusses a `prepare()` method that should probably be `begin()`).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/82", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/82/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/82/events", "html_url": "https://github.com/zopefoundation/transaction/issues/82", "id": 443913794, "node_id": "MDU6SXNzdWU0NDM5MTM3OTQ=", "number": 82, "title": "It's very easy to create reference cycles that require the GC to clean up", "user": {"login": "jamadden", "id": 1256082, "node_id": "MDQ6VXNlcjEyNTYwODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamadden", "html_url": "https://github.com/jamadden", "followers_url": "https://api.github.com/users/jamadden/followers", "following_url": "https://api.github.com/users/jamadden/following{/other_user}", "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions", "organizations_url": "https://api.github.com/users/jamadden/orgs", "repos_url": "https://api.github.com/users/jamadden/repos", "events_url": "https://api.github.com/users/jamadden/events{/privacy}", "received_events_url": "https://api.github.com/users/jamadden/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jamadden", "id": 1256082, "node_id": "MDQ6VXNlcjEyNTYwODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamadden", "html_url": "https://github.com/jamadden", "followers_url": "https://api.github.com/users/jamadden/followers", "following_url": "https://api.github.com/users/jamadden/following{/other_user}", "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions", "organizations_url": "https://api.github.com/users/jamadden/orgs", "repos_url": "https://api.github.com/users/jamadden/repos", "events_url": "https://api.github.com/users/jamadden/events{/privacy}", "received_events_url": "https://api.github.com/users/jamadden/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jamadden", "id": 1256082, "node_id": "MDQ6VXNlcjEyNTYwODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamadden", "html_url": "https://github.com/jamadden", "followers_url": "https://api.github.com/users/jamadden/followers", "following_url": "https://api.github.com/users/jamadden/following{/other_user}", "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions", "organizations_url": "https://api.github.com/users/jamadden/orgs", "repos_url": "https://api.github.com/users/jamadden/repos", "events_url": "https://api.github.com/users/jamadden/events{/privacy}", "received_events_url": "https://api.github.com/users/jamadden/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2019-05-14T13:24:39Z", "updated_at": "2019-09-05T12:44:36Z", "closed_at": "2019-09-05T12:44:36Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As discussed in https://github.com/zopefoundation/ZODB/issues/268#issuecomment-492218339, if, through any arbitrarily long chain of imports, a data manager implementation ultimately winds up importing the `transaction` module, then when it joins the default transaction there will be a reference cycle (the data manager will reference the `transaction` module through `__globals__`, which references the transaction manager, which references the transaction which references the data manager).\r\n\r\nI'm not sure what, if anything, can be done about this, but if anybody has an idea, that'd be great.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/77", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/77/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/77/events", "html_url": "https://github.com/zopefoundation/transaction/issues/77", "id": 438653083, "node_id": "MDU6SXNzdWU0Mzg2NTMwODM=", "number": 77, "title": "Support abort hooks (symmetrically to commit hooks)", "user": {"login": "d-maurer", "id": 10956900, "node_id": "MDQ6VXNlcjEwOTU2OTAw", "avatar_url": "https://avatars2.githubusercontent.com/u/10956900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-maurer", "html_url": "https://github.com/d-maurer", "followers_url": "https://api.github.com/users/d-maurer/followers", "following_url": "https://api.github.com/users/d-maurer/following{/other_user}", "gists_url": "https://api.github.com/users/d-maurer/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-maurer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-maurer/subscriptions", "organizations_url": "https://api.github.com/users/d-maurer/orgs", "repos_url": "https://api.github.com/users/d-maurer/repos", "events_url": "https://api.github.com/users/d-maurer/events{/privacy}", "received_events_url": "https://api.github.com/users/d-maurer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 23850176, "node_id": "MDU6TGFiZWwyMzg1MDE3Ng==", "url": "https://api.github.com/repos/zopefoundation/transaction/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-30T08:14:58Z", "updated_at": "2019-06-19T16:10:52Z", "closed_at": "2019-06-19T16:10:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`transaction` currently supports (before and after) commit hooks. It should symmetrically support abort hooks as well.\r\n\r\nI need this feature in `dm.zodb.asynchronous`, more precisely in its `TransactionalScheduler`. This scheduler allows to schedule a function call at transaction commit; it uses a commit hook for this. If the transaction is aborted (instead of committed), a cleanup becomes necessary. This requires a (transaction) abort hook.\r\n\r\nI implement this feature currently in `dm.transaction.aborthook` via monkey patching. If there is interest, I could implement it instead in `transaction`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/70", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/70/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/70/events", "html_url": "https://github.com/zopefoundation/transaction/issues/70", "id": 373460722, "node_id": "MDU6SXNzdWUzNzM0NjA3MjI=", "number": 70, "title": "'ThreadTransactionManager' object has no attribute '_retryable'", "user": {"login": "julienmeyer", "id": 1002299, "node_id": "MDQ6VXNlcjEwMDIyOTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1002299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/julienmeyer", "html_url": "https://github.com/julienmeyer", "followers_url": "https://api.github.com/users/julienmeyer/followers", "following_url": "https://api.github.com/users/julienmeyer/following{/other_user}", "gists_url": "https://api.github.com/users/julienmeyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/julienmeyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/julienmeyer/subscriptions", "organizations_url": "https://api.github.com/users/julienmeyer/orgs", "repos_url": "https://api.github.com/users/julienmeyer/repos", "events_url": "https://api.github.com/users/julienmeyer/events{/privacy}", "received_events_url": "https://api.github.com/users/julienmeyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-24T12:38:04Z", "updated_at": "2018-10-24T13:12:28Z", "closed_at": "2018-10-24T13:12:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nSince upgrade to version 2.4, i have the following error \"'ThreadTransactionManager' object has no attribute '_retryable'\". I'm using pyramid, sqlalchemy and pyramid_tm. The problem occurs in my functional tests where I use ThreadTransactionManager instead of Zope transaction manager.\r\nI think that the function \"_retryable\" has been removed in this pull request https://github.com/zopefoundation/transaction/pull/68\r\nIs it a bug or a mistake in the transaction lib or should I modify some thing in my sqlalchemy configuration ?\r\nThanks,\r\nJulien", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/69", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/69/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/69/events", "html_url": "https://github.com/zopefoundation/transaction/issues/69", "id": 371893786, "node_id": "MDU6SXNzdWUzNzE4OTM3ODY=", "number": 69, "title": "DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working", "user": {"login": "mgedmin", "id": 159967, "node_id": "MDQ6VXNlcjE1OTk2Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/159967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgedmin", "html_url": "https://github.com/mgedmin", "followers_url": "https://api.github.com/users/mgedmin/followers", "following_url": "https://api.github.com/users/mgedmin/following{/other_user}", "gists_url": "https://api.github.com/users/mgedmin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgedmin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgedmin/subscriptions", "organizations_url": "https://api.github.com/users/mgedmin/orgs", "repos_url": "https://api.github.com/users/mgedmin/repos", "events_url": "https://api.github.com/users/mgedmin/events{/privacy}", "received_events_url": "https://api.github.com/users/mgedmin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-19T10:13:34Z", "updated_at": "2018-10-19T11:09:31Z", "closed_at": "2018-10-19T11:09:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I've noticed this in passing\r\n\r\n```\r\n.../.tox/py37/lib/python3.7/site-packages/transaction/_compat.py:48: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  from collections import MutableMapping\r\n```\r\n\r\nWe should probably fix it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/66", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/66/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/66/events", "html_url": "https://github.com/zopefoundation/transaction/issues/66", "id": 369091054, "node_id": "MDU6SXNzdWUzNjkwOTEwNTQ=", "number": 66, "title": "Reach 100% coverage", "user": {"login": "jamadden", "id": 1256082, "node_id": "MDQ6VXNlcjEyNTYwODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1256082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamadden", "html_url": "https://github.com/jamadden", "followers_url": "https://api.github.com/users/jamadden/followers", "following_url": "https://api.github.com/users/jamadden/following{/other_user}", "gists_url": "https://api.github.com/users/jamadden/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamadden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamadden/subscriptions", "organizations_url": "https://api.github.com/users/jamadden/orgs", "repos_url": "https://api.github.com/users/jamadden/repos", "events_url": "https://api.github.com/users/jamadden/events{/privacy}", "received_events_url": "https://api.github.com/users/jamadden/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-11T12:11:25Z", "updated_at": "2018-10-19T11:07:48Z", "closed_at": "2018-10-19T11:07:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/62", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/62/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/62/events", "html_url": "https://github.com/zopefoundation/transaction/issues/62", "id": 356191879, "node_id": "MDU6SXNzdWUzNTYxOTE4Nzk=", "number": 62, "title": "Question: How to find a transaction\u2019s data manager, if any?", "user": {"login": "jenstroeger", "id": 12053937, "node_id": "MDQ6VXNlcjEyMDUzOTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/12053937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jenstroeger", "html_url": "https://github.com/jenstroeger", "followers_url": "https://api.github.com/users/jenstroeger/followers", "following_url": "https://api.github.com/users/jenstroeger/following{/other_user}", "gists_url": "https://api.github.com/users/jenstroeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/jenstroeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jenstroeger/subscriptions", "organizations_url": "https://api.github.com/users/jenstroeger/orgs", "repos_url": "https://api.github.com/users/jenstroeger/repos", "events_url": "https://api.github.com/users/jenstroeger/events{/privacy}", "received_events_url": "https://api.github.com/users/jenstroeger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 23850178, "node_id": "MDU6TGFiZWwyMzg1MDE3OA==", "url": "https://api.github.com/repos/zopefoundation/transaction/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-01T10:29:52Z", "updated_at": "2019-04-30T08:42:11Z", "closed_at": "2019-04-30T08:42:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the recommended way to check whether a custom data manager has [joined](https://transaction.readthedocs.io/en/latest/api.html#transaction.interfaces.ITransaction.join) a transaction\u2019s set of registered data managers?\r\n\r\nCurrently I am using a transaction\u2019s [extensions](https://transaction.readthedocs.io/en/latest/api.html#transaction.interfaces.ITransaction.extension) dictionary, but that feels somewhat flimsy:\r\n```python\r\ntm = transaction.manager  # Get the thread-local transaction manager.\r\ntry:\r\n    tx = tm.get()\r\nexcept Exception:  # transaction.interfaces.NoTransaction\r\n    \u2026  # No transaction available, do something.\r\nelse:\r\n    if \"SuperDataManager\" not in tx.extension:\r\n        # See also https://github.com/zopefoundation/transaction/issues/47\r\n        dm = SuperDataManager(tm)\r\n        tx.join(dm)\r\n        tx.setExtendedInfo(\"SuperDataManager\", dm)\r\n    else:\r\n        dm = tx.extension[\"SuperDataManager\"] \r\n    dm.queue_my_data(some_data)\r\nfinally:\r\n    pass\r\n```\r\nIt seems to me that data managers are stored in a private list:\r\nhttps://github.com/zopefoundation/transaction/blob/501a2934a1031f4def92701a44ebca8a317dd8a6/transaction/_transaction.py#L89\r\nand checking whether a given data manager exists might be as simple as\r\n```python\r\ndef get_joined(data_manager_type):\r\n    \"\"\"\r\n    Return the data manager of type `data_manager_type` if it has joined this transaction, \r\n    or None if it hasn\u2019t.\r\n    \"\"\"\r\n    return next((_ for _ in self._resources if isinstance(_, data_manager_type)), None)\r\n```\r\nwhich would simplify the above code:\r\n```python\r\ndm = tx.get_joined(SuperDataManager)\r\nif not dm:\r\n    # See also https://github.com/zopefoundation/transaction/issues/47\r\n    dm = SuperDataManager(tm)\r\n    tx.join(dm)\r\ndm.queue_my_data(some_data)\r\n```\r\nIf I was to make the `SuperDataManager` [thread-local](https://docs.python.org/3/library/threading.html#thread-local-data) like the [default transaction manager](https://github.com/zopefoundation/transaction/blob/501a2934a1031f4def92701a44ebca8a317dd8a6/transaction/_manager.py#L212-L216), then I could also compare by the dm\u2019s [object `id()`](https://docs.python.org/3/library/functions.html#id) directly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/61", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/61/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/61/events", "html_url": "https://github.com/zopefoundation/transaction/issues/61", "id": 313207236, "node_id": "MDU6SXNzdWUzMTMyMDcyMzY=", "number": 61, "title": "Transactions with multiprocessing", "user": {"login": "BlueManCZ", "id": 17854950, "node_id": "MDQ6VXNlcjE3ODU0OTUw", "avatar_url": "https://avatars1.githubusercontent.com/u/17854950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BlueManCZ", "html_url": "https://github.com/BlueManCZ", "followers_url": "https://api.github.com/users/BlueManCZ/followers", "following_url": "https://api.github.com/users/BlueManCZ/following{/other_user}", "gists_url": "https://api.github.com/users/BlueManCZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/BlueManCZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BlueManCZ/subscriptions", "organizations_url": "https://api.github.com/users/BlueManCZ/orgs", "repos_url": "https://api.github.com/users/BlueManCZ/repos", "events_url": "https://api.github.com/users/BlueManCZ/events{/privacy}", "received_events_url": "https://api.github.com/users/BlueManCZ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-11T07:39:35Z", "updated_at": "2018-10-11T12:12:59Z", "closed_at": "2018-10-11T12:12:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, can I somehow use transactions with shared `transaction.manager` from multiple processes?\r\n\r\nFor example, I have two processes incrementing counter in for loop:\r\n```\r\ndef worker():\r\n    for i in range(0, 10000):\r\n        counter.value += 1\r\n```\r\nAnd I want commit result of incrementation by transaction like this:\r\n```\r\ndef worker():\r\n    with transaction.manager:\r\n        for i in range(0,10000):\r\n            counter.value += 1\r\n        transaction.commit()\r\n```\r\nBut I think this code creates local `transaction.manager` for each process. Can I somehow share it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/58", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/58/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/58/events", "html_url": "https://github.com/zopefoundation/transaction/issues/58", "id": 303874342, "node_id": "MDU6SXNzdWUzMDM4NzQzNDI=", "number": 58, "title": "Transaction manager run problems", "user": {"login": "jimfulton", "id": 772727, "node_id": "MDQ6VXNlcjc3MjcyNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/772727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimfulton", "html_url": "https://github.com/jimfulton", "followers_url": "https://api.github.com/users/jimfulton/followers", "following_url": "https://api.github.com/users/jimfulton/following{/other_user}", "gists_url": "https://api.github.com/users/jimfulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimfulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimfulton/subscriptions", "organizations_url": "https://api.github.com/users/jimfulton/orgs", "repos_url": "https://api.github.com/users/jimfulton/repos", "events_url": "https://api.github.com/users/jimfulton/events{/privacy}", "received_events_url": "https://api.github.com/users/jimfulton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 23850176, "node_id": "MDU6TGFiZWwyMzg1MDE3Ng==", "url": "https://api.github.com/repos/zopefoundation/transaction/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-09T15:15:40Z", "updated_at": "2019-05-07T04:53:30Z", "closed_at": "2019-05-07T04:53:30Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "1. When the number of retries has been exceeded, we don't abort the transaction.  We should always abort and then raise.\r\n\r\n2. The `run` implementation doesn't account for application code creating new transactions.  This is an important use case. Consider an application that catches errors, and needs to record information about the errors transactionally. In this case, the application aborts the current transaction, uses a new transaction to record some information, or otherwise recover.  The `run` implementation should use the transaction manager methods to do it's work, rather than assuming it can interact with the initial transaction. Currently, an error is raised if the transaction changes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/55", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/55/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/55/events", "html_url": "https://github.com/zopefoundation/transaction/issues/55", "id": 300074807, "node_id": "MDU6SXNzdWUzMDAwNzQ4MDc=", "number": 55, "title": "explicit transactions do not work well with the context manager", "user": {"login": "mmerickel", "id": 487237, "node_id": "MDQ6VXNlcjQ4NzIzNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/487237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmerickel", "html_url": "https://github.com/mmerickel", "followers_url": "https://api.github.com/users/mmerickel/followers", "following_url": "https://api.github.com/users/mmerickel/following{/other_user}", "gists_url": "https://api.github.com/users/mmerickel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmerickel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmerickel/subscriptions", "organizations_url": "https://api.github.com/users/mmerickel/orgs", "repos_url": "https://api.github.com/users/mmerickel/repos", "events_url": "https://api.github.com/users/mmerickel/events{/privacy}", "received_events_url": "https://api.github.com/users/mmerickel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-02-25T23:57:49Z", "updated_at": "2018-07-13T15:37:52Z", "closed_at": "2018-02-26T00:20:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I submitted this to the python-transaction mailing list but it didn't get picked up by anyone so I'm posting it here.\r\n\r\n```\r\ntm = transaction.TransactionManager(explicit=True)\r\nwith tm:\r\n    tm.commit()\r\n```\r\n\r\nThe `tm.__exit__` raises a `NoTransaction` exception.\r\n\r\nI think this use case should be considered valid and should not raise a `NoTransaction` exception. Specifically the` __exit__` should be implemented to squash a `NoTransaction` exception or properly check if there is a transaction before calling `commit()` or `abort()`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/53", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/53/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/53/events", "html_url": "https://github.com/zopefoundation/transaction/issues/53", "id": 295424356, "node_id": "MDU6SXNzdWUyOTU0MjQzNTY=", "number": 53, "title": "Documentation is unhelpful for complete newcomers", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-02-08T08:32:30Z", "updated_at": "2018-03-10T22:53:06Z", "closed_at": "2018-03-10T19:36:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I\u2019ve tried to figure out whether transaction could help me in one of my projects, and the documentation left me completely baffled. It seems to be mostly a bunch of maintainer notes?\r\n\r\nThings I noticed as a first-time reader:\r\n\r\n- The first sentence is \u201cTransaction objects manage resources for an individual activity.\u201d \u2013 that doesn\u2019t tell me any more than the package name.\r\n- The first section is a ZOPE  compatibility notice. I guess at this point you lose 90% of readers because it makes the lib look like a ZOPE implementation detail.\r\n- Next some low-level concepts are outlined without any explanation how they fit together.\r\n- And with that you\u2019re thrown into the meat of the documentation that doesn\u2019t make any sense whatsoever without understanding what the lib is about and how things fit together.\r\n- Especially egregious are the chapters on how to write DataManagers and ResourceManagers without explaining what they are (I still have no clue) or why I\u2019d want to implement them.\r\n    - Bonus points for saying `This transaction.tests.examples.DataManager class provides a trivial data-manager implementation and docstrings to illustrate the the protocol and to provide a tool for writing tests.` while there isn\u2019t a single docstring beyond `Used by the 'datamanager' chapter in the Sphinx docs.`. :)\r\n    - it would also be nice to [link](https://github.com/zopefoundation/transaction/blob/master/transaction/tests/examples.py) to it\r\n\r\n\r\nAll that to say is that I care because I know that most of the zope libraries a best of breed and it would be a pity if people re-implemented their functionality (poorly), just because they couldn\u2019t figure out how to use them.\r\n\r\nI understand this issue is not just one issue, so feel free to handle however you want it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/52", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/52/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/52/events", "html_url": "https://github.com/zopefoundation/transaction/issues/52", "id": 293329096, "node_id": "MDU6SXNzdWUyOTMzMjkwOTY=", "number": 52, "title": "Joining a committing transaction", "user": {"login": "elliot-jsq", "id": 29712716, "node_id": "MDQ6VXNlcjI5NzEyNzE2", "avatar_url": "https://avatars2.githubusercontent.com/u/29712716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elliot-jsq", "html_url": "https://github.com/elliot-jsq", "followers_url": "https://api.github.com/users/elliot-jsq/followers", "following_url": "https://api.github.com/users/elliot-jsq/following{/other_user}", "gists_url": "https://api.github.com/users/elliot-jsq/gists{/gist_id}", "starred_url": "https://api.github.com/users/elliot-jsq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elliot-jsq/subscriptions", "organizations_url": "https://api.github.com/users/elliot-jsq/orgs", "repos_url": "https://api.github.com/users/elliot-jsq/repos", "events_url": "https://api.github.com/users/elliot-jsq/events{/privacy}", "received_events_url": "https://api.github.com/users/elliot-jsq/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 23850176, "node_id": "MDU6TGFiZWwyMzg1MDE3Ng==", "url": "https://api.github.com/repos/zopefoundation/transaction/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-31T22:06:23Z", "updated_at": "2019-05-02T17:41:07Z", "closed_at": "2019-05-02T17:41:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I stumbled upon the following comment when digging around as to why I was getting an exception:\r\n```python\r\n            # TODO: Should it be possible to join a committing transaction?\r\n            # I think some users want it.\r\n```\r\nI don't know if this is the appropriate forum for this, but I am a user who wants this. I can elaborate on my use case if it matters.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/49", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/49/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/49/events", "html_url": "https://github.com/zopefoundation/transaction/issues/49", "id": 236008641, "node_id": "MDU6SXNzdWUyMzYwMDg2NDE=", "number": 49, "title": "Document exception semantics for hooks", "user": {"login": "tseaver", "id": 242750, "node_id": "MDQ6VXNlcjI0Mjc1MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/242750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tseaver", "html_url": "https://github.com/tseaver", "followers_url": "https://api.github.com/users/tseaver/followers", "following_url": "https://api.github.com/users/tseaver/following{/other_user}", "gists_url": "https://api.github.com/users/tseaver/gists{/gist_id}", "starred_url": "https://api.github.com/users/tseaver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tseaver/subscriptions", "organizations_url": "https://api.github.com/users/tseaver/orgs", "repos_url": "https://api.github.com/users/tseaver/repos", "events_url": "https://api.github.com/users/tseaver/events{/privacy}", "received_events_url": "https://api.github.com/users/tseaver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-14T21:01:27Z", "updated_at": "2017-06-19T20:26:44Z", "closed_at": "2017-06-19T20:26:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In particular, the `_before_commit` hooks are not expected to raise exceptions, and if they do so, leave the transaction in an ambiguous state (`commit` not called, hooks not cleared, but one or more hooks may have completed).\r\n\r\nSee: https://github.com/Pylons/pyramid_tm/issues/63", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/48", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/48/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/48/events", "html_url": "https://github.com/zopefoundation/transaction/issues/48", "id": 219528465, "node_id": "MDU6SXNzdWUyMTk1Mjg0NjU=", "number": 48, "title": "API to access the status of a transaction", "user": {"login": "icemac", "id": 386619, "node_id": "MDQ6VXNlcjM4NjYxOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/386619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/icemac", "html_url": "https://github.com/icemac", "followers_url": "https://api.github.com/users/icemac/followers", "following_url": "https://api.github.com/users/icemac/following{/other_user}", "gists_url": "https://api.github.com/users/icemac/gists{/gist_id}", "starred_url": "https://api.github.com/users/icemac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/icemac/subscriptions", "organizations_url": "https://api.github.com/users/icemac/orgs", "repos_url": "https://api.github.com/users/icemac/repos", "events_url": "https://api.github.com/users/icemac/events{/privacy}", "received_events_url": "https://api.github.com/users/icemac/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 23850176, "node_id": "MDU6TGFiZWwyMzg1MDE3Ng==", "url": "https://api.github.com/repos/zopefoundation/transaction/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-04-05T09:54:17Z", "updated_at": "2017-05-13T15:17:09Z", "closed_at": "2017-05-13T15:17:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently there is `isDoomed()` to check whether a transaction is doomed.\r\nBut there are no methods to check the other status (like `Active` or `Commit failed`).\r\nTo check for these status it is currently necessary to do something like this:\r\n\r\n```\r\nfrom transaction._transaction import Status\r\nif transaction.get().status == Status.ACTIVE:\r\n    pass\r\n```\r\n\r\nIt would be nice to \r\n* either have methods on the transaction for the status checks\r\n* or a way to access the Status constants without importing from `_transaction` (which feels like using internals instead of the API).\r\n\r\nWhat do you think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/37", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/37/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/37/events", "html_url": "https://github.com/zopefoundation/transaction/issues/37", "id": 191371183, "node_id": "MDU6SXNzdWUxOTEzNzExODM=", "number": 37, "title": "add a public api for manager._retryable", "user": {"login": "mmerickel", "id": 487237, "node_id": "MDQ6VXNlcjQ4NzIzNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/487237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmerickel", "html_url": "https://github.com/mmerickel", "followers_url": "https://api.github.com/users/mmerickel/followers", "following_url": "https://api.github.com/users/mmerickel/following{/other_user}", "gists_url": "https://api.github.com/users/mmerickel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmerickel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmerickel/subscriptions", "organizations_url": "https://api.github.com/users/mmerickel/orgs", "repos_url": "https://api.github.com/users/mmerickel/repos", "events_url": "https://api.github.com/users/mmerickel/events{/privacy}", "received_events_url": "https://api.github.com/users/mmerickel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-23T20:19:46Z", "updated_at": "2018-02-26T18:17:35Z", "closed_at": "2018-02-26T18:17:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In a web context we want to wrap as much of the request as possible, but we also want to render errors. This causes a circular dependency between the transaction manager and the system that renders errors.\r\n\r\nIn pyramid_tm the goal is to expose to the underlying code whether it is processing a retryable error and allow it to handle such errors differently if it wants. If we choose to handle the retryable error then we are effectively squashing the exception and thus the `transaction.run()` will see it as valid. I'd like to allow pyramid_tm to detect the retryable errors itself and raise exceptions if necessary. This depends on `manager._retryable` right now, but I'd be happier about it if the API itself were public.\r\n\r\nA public api would make sense as well as it's intended to be an abstraction around retryable errors... without it each error handler in an app needs to check for arbitrary exceptions on a case-by-case basis instead of just checking that they are retryable.\r\n\r\nWould `manager.is_retryable(error)` work? The `error_type` seems redundant to me. I'm happy to make the PR myself.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/36", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/36/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/36/events", "html_url": "https://github.com/zopefoundation/transaction/issues/36", "id": 191369954, "node_id": "MDU6SXNzdWUxOTEzNjk5NTQ=", "number": 36, "title": "add a public api for tracking attempts", "user": {"login": "mmerickel", "id": 487237, "node_id": "MDQ6VXNlcjQ4NzIzNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/487237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmerickel", "html_url": "https://github.com/mmerickel", "followers_url": "https://api.github.com/users/mmerickel/followers", "following_url": "https://api.github.com/users/mmerickel/following{/other_user}", "gists_url": "https://api.github.com/users/mmerickel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmerickel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmerickel/subscriptions", "organizations_url": "https://api.github.com/users/mmerickel/orgs", "repos_url": "https://api.github.com/users/mmerickel/repos", "events_url": "https://api.github.com/users/mmerickel/events{/privacy}", "received_events_url": "https://api.github.com/users/mmerickel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-23T20:13:02Z", "updated_at": "2016-12-12T01:59:34Z", "closed_at": "2016-12-12T01:59:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `manager.run(attempts)` api is awesome.  I'd like to use it in pyramid_tm which currently re-implements most of the logic itself. There's one feature that would be really useful which is a public api on the transaction (or the manager) to expose what's happening to underlying code.\r\n\r\nSpecifically we have some cases where we'd like to do things differently on the last attempt than on earlier attempts that raise retryable exceptions and there's no way to know that we're on the last attempt using the current `run` api.\r\n\r\nI'd propose something like `txn.is_last_attempt` or `txn.attempt_index` combined with `txn.max_attempts` or `txn.attempts_remaining`. This would allow underlying code to make decisions on what it does with retryable exceptions.\r\n\r\nI'm happy to work on a PR for this but wanted to get some input on the API first. Personally I prefer `txn.is_last_attempt` as I don't have an explicit need to expose the exact number of attempts to underlying code.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/35", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/35/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/35/events", "html_url": "https://github.com/zopefoundation/transaction/issues/35", "id": 190209546, "node_id": "MDU6SXNzdWUxOTAyMDk1NDY=", "number": 35, "title": "need a simple api to detect an active transaction", "user": {"login": "mmerickel", "id": 487237, "node_id": "MDQ6VXNlcjQ4NzIzNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/487237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmerickel", "html_url": "https://github.com/mmerickel", "followers_url": "https://api.github.com/users/mmerickel/followers", "following_url": "https://api.github.com/users/mmerickel/following{/other_user}", "gists_url": "https://api.github.com/users/mmerickel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmerickel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmerickel/subscriptions", "organizations_url": "https://api.github.com/users/mmerickel/orgs", "repos_url": "https://api.github.com/users/mmerickel/repos", "events_url": "https://api.github.com/users/mmerickel/events{/privacy}", "received_events_url": "https://api.github.com/users/mmerickel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-11-18T01:01:39Z", "updated_at": "2017-02-08T19:44:29Z", "closed_at": "2017-02-08T19:44:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`manager.begin()` will automatically abort an active transaction. The only way to determine if one is active is via `manager._txn is None`. This private api is the only way right now to write a function that starts a new transaction only if one does not already exist. Similarly `manager.get()` will create a transaction if one does not exist.\r\n\r\n`manager.is_active()` maybe?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/34", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/34/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/34/events", "html_url": "https://github.com/zopefoundation/transaction/issues/34", "id": 190175652, "node_id": "MDU6SXNzdWUxOTAxNzU2NTI=", "number": 34, "title": "Unicode change in 2.0.3 breaking waitress", "user": {"login": "niothiel", "id": 283245, "node_id": "MDQ6VXNlcjI4MzI0NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/283245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niothiel", "html_url": "https://github.com/niothiel", "followers_url": "https://api.github.com/users/niothiel/followers", "following_url": "https://api.github.com/users/niothiel/following{/other_user}", "gists_url": "https://api.github.com/users/niothiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/niothiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niothiel/subscriptions", "organizations_url": "https://api.github.com/users/niothiel/orgs", "repos_url": "https://api.github.com/users/niothiel/repos", "events_url": "https://api.github.com/users/niothiel/events{/privacy}", "received_events_url": "https://api.github.com/users/niothiel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-11-17T21:55:36Z", "updated_at": "2016-11-21T23:01:35Z", "closed_at": "2016-11-21T23:01:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just discovered this in the past hour. I'm running an instance of [PyPiCloud](http://pypicloud.readthedocs.io/en/latest/) via waitress on python 2.7. Any time a request is received, this is the stack trace:\r\n\r\n```\r\nERROR 2016-11-17 21:45:52,515 [waitress] Exception when serving /\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/waitress/channel.py\", line 338, in service\r\n    task.service()\r\n  File \"/usr/local/lib/python2.7/dist-packages/waitress/task.py\", line 169, in service\r\n    self.execute()\r\n  File \"/usr/local/lib/python2.7/dist-packages/waitress/task.py\", line 399, in execute\r\n    app_iter = self.channel.server.application(env, start_response)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pyramid/router.py\", line 236, in __call__\r\n    response = self.invoke_subrequest(request, use_tweens=True)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pyramid/router.py\", line 211, in invoke_subrequest\r\n    response = handle_request(request)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pyramid/tweens.py\", line 62, in excview_tween\r\n    reraise(*attrs['exc_info'])\r\n  File \"/usr/local/lib/python2.7/dist-packages/pyramid/tweens.py\", line 22, in excview_tween\r\n    response = handler(request)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pyramid_tm/__init__.py\", line 109, in tm_tween\r\n    reraise(*exc_info)\r\n  File \"/usr/local/lib/python2.7/dist-packages/pyramid_tm/__init__.py\", line 85, in tm_tween\r\n    t.note(native_(request.path_info, 'utf-8'))\r\n  File \"/usr/local/lib/python2.7/dist-packages/transaction/_transaction.py\", line 539, in note\r\n    raise TypeError(\"Note must be text (unicode)\")\r\nTypeError: Note must be text (unicode)\r\n```\r\n\r\nUsing version 2.0.2 works. I managed to track it down to a change made as part of the 2.0.3 release:\r\n\r\nhttps://github.com/zopefoundation/transaction/compare/2.0.2...2.0.3#diff-b65460bed0b38b3a42d05ce9c3b22f1eR537\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/29", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/29/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/29/events", "html_url": "https://github.com/zopefoundation/transaction/issues/29", "id": 188841121, "node_id": "MDU6SXNzdWUxODg4NDExMjE=", "number": 29, "title": "Jenkins failures on master", "user": {"login": "tseaver", "id": 242750, "node_id": "MDQ6VXNlcjI0Mjc1MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/242750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tseaver", "html_url": "https://github.com/tseaver", "followers_url": "https://api.github.com/users/tseaver/followers", "following_url": "https://api.github.com/users/tseaver/following{/other_user}", "gists_url": "https://api.github.com/users/tseaver/gists{/gist_id}", "starred_url": "https://api.github.com/users/tseaver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tseaver/subscriptions", "organizations_url": "https://api.github.com/users/tseaver/orgs", "repos_url": "https://api.github.com/users/tseaver/repos", "events_url": "https://api.github.com/users/tseaver/events{/privacy}", "received_events_url": "https://api.github.com/users/tseaver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-11-11T20:13:42Z", "updated_at": "2017-05-13T15:16:08Z", "closed_at": "2017-05-13T15:16:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "From: http://jenkins.pylonsproject.org/job/transaction/58/console\r\n\r\nCoverage gap:\r\n\r\n```\r\ncoverage inst-nodeps: /home/agendaless/jenkins/pylonsproject/jobs/transaction/workspace/.tox/dist/transaction-1.7.0.zip\r\ncoverage installed: coverage==4.2,funcsigs==1.0.2,mock==2.0.0,nose==1.3.7,nosexcover==1.0.10,pbr==1.10.0,six==1.10.0,transaction==1.7.0,zope.interface==4.3.2\r\ncoverage runtests: PYTHONHASHSEED='1290084312'\r\ncoverage runtests: commands[0] | nosetests --with-xunit --with-xcoverage\r\n...................................................................................................................................................................................\r\nName                          Stmts   Miss Branch BrPart  Cover   Missing\r\n-------------------------------------------------------------------------\r\ntransaction.py                   14      0      0      0   100%\r\ntransaction/_compat.py           14      0      0      0   100%\r\ntransaction/_manager.py         124      0     56      1    99%   181->exit\r\ntransaction/_transaction.py     393      0    116      0   100%\r\ntransaction/interfaces.py         7      0      0      0   100%\r\ntransaction/weakset.py           22      0      4      0   100%\r\n-------------------------------------------------------------------------\r\nTOTAL                           574      0    176      1    99%\r\nnose.plugins.cover: ERROR: TOTAL Coverage did not reach minimum required: 100%\r\n```\r\n\r\nDoctest repr:\r\n\r\n```python\r\nDocument: convenience\r\n---------------------\r\n**********************************************************************\r\nFile \"convenience.rst\", line 30, in default\r\nFailed example:\r\n    dm.last_note\r\nExpected:\r\n    'test 3'\r\nGot:\r\n    u'test 3'\r\n**********************************************************************\r\n1 items had failures:\r\n   1 of   8 in default\r\n8 tests in 1 items.\r\n7 passed and 1 failed.\r\n***Test Failed*** 1 failures.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/27", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/27/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/27/events", "html_url": "https://github.com/zopefoundation/transaction/issues/27", "id": 188793144, "node_id": "MDU6SXNzdWUxODg3OTMxNDQ=", "number": 27, "title": "Define an api for transactions to get extended info.", "user": {"login": "jimfulton", "id": 772727, "node_id": "MDQ6VXNlcjc3MjcyNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/772727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimfulton", "html_url": "https://github.com/jimfulton", "followers_url": "https://api.github.com/users/jimfulton/followers", "following_url": "https://api.github.com/users/jimfulton/following{/other_user}", "gists_url": "https://api.github.com/users/jimfulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimfulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimfulton/subscriptions", "organizations_url": "https://api.github.com/users/jimfulton/orgs", "repos_url": "https://api.github.com/users/jimfulton/repos", "events_url": "https://api.github.com/users/jimfulton/events{/privacy}", "received_events_url": "https://api.github.com/users/jimfulton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-11-11T16:09:03Z", "updated_at": "2016-11-11T19:59:23Z", "closed_at": "2016-11-11T19:59:23Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "See: https://groups.google.com/forum/#!topic/python-transaction/Yn326XwCZ5E", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/26", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/26/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/26/events", "html_url": "https://github.com/zopefoundation/transaction/issues/26", "id": 188793024, "node_id": "MDU6SXNzdWUxODg3OTMwMjQ=", "number": 26, "title": "Define transaction description and user to be unicode", "user": {"login": "jimfulton", "id": 772727, "node_id": "MDQ6VXNlcjc3MjcyNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/772727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimfulton", "html_url": "https://github.com/jimfulton", "followers_url": "https://api.github.com/users/jimfulton/followers", "following_url": "https://api.github.com/users/jimfulton/following{/other_user}", "gists_url": "https://api.github.com/users/jimfulton/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimfulton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimfulton/subscriptions", "organizations_url": "https://api.github.com/users/jimfulton/orgs", "repos_url": "https://api.github.com/users/jimfulton/repos", "events_url": "https://api.github.com/users/jimfulton/events{/privacy}", "received_events_url": "https://api.github.com/users/jimfulton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-11-11T16:08:26Z", "updated_at": "2016-11-11T19:58:57Z", "closed_at": "2016-11-11T19:58:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "See:\r\n\r\nhttps://groups.google.com/forum/#!topic/python-transaction/Yn326XwCZ5E", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/21", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/21/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/21/events", "html_url": "https://github.com/zopefoundation/transaction/issues/21", "id": 169697856, "node_id": "MDU6SXNzdWUxNjk2OTc4NTY=", "number": 21, "title": "gevent.local.local breaks transaction.manager", "user": {"login": "miohtama", "id": 49922, "node_id": "MDQ6VXNlcjQ5OTIy", "avatar_url": "https://avatars1.githubusercontent.com/u/49922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miohtama", "html_url": "https://github.com/miohtama", "followers_url": "https://api.github.com/users/miohtama/followers", "following_url": "https://api.github.com/users/miohtama/following{/other_user}", "gists_url": "https://api.github.com/users/miohtama/gists{/gist_id}", "starred_url": "https://api.github.com/users/miohtama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miohtama/subscriptions", "organizations_url": "https://api.github.com/users/miohtama/orgs", "repos_url": "https://api.github.com/users/miohtama/repos", "events_url": "https://api.github.com/users/miohtama/events{/privacy}", "received_events_url": "https://api.github.com/users/miohtama/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-05T21:14:36Z", "updated_at": "2016-08-05T21:49:06Z", "closed_at": "2016-08-05T21:49:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is not an issue with `transaction` per se, but an evil gotcha that might happen when one is using `transaction` with other libraries.\n\ngevent is a coroutine based Python networking library. gevent offers functionality to make stdlib more co-routine friendly by monkey patching stdlib:\n\n```\n>>> import threading\n>>> threading.local\n<class '_thread._local'>\n\n>>> from gevent import monkey\n>>> gevent.monkey.patch_all()\n>>> threading.local\n<class 'gevent.local.local'>\n```\n\nTransaction has `ThreadTransactionManager` class that inherits from `threading.local`. If used in an environment where something has run `gevent.monkey.patch_all()` `ThreadTransactionManager` ceases to function properly and shares transactions across thread boundaries. This may be subtle breakage; one might not run issues until some race condition timing occurs.\n\nI am currently figuring out if `gevent` can be made play nicely with `transaction` if they co-exist within the same process.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/19", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/19/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/19/events", "html_url": "https://github.com/zopefoundation/transaction/issues/19", "id": 167884620, "node_id": "MDU6SXNzdWUxNjc4ODQ2MjA=", "number": 19, "title": "Attemps are retried on successful run", "user": {"login": "pieterproigia", "id": 5426140, "node_id": "MDQ6VXNlcjU0MjYxNDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5426140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pieterproigia", "html_url": "https://github.com/pieterproigia", "followers_url": "https://api.github.com/users/pieterproigia/followers", "following_url": "https://api.github.com/users/pieterproigia/following{/other_user}", "gists_url": "https://api.github.com/users/pieterproigia/gists{/gist_id}", "starred_url": "https://api.github.com/users/pieterproigia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pieterproigia/subscriptions", "organizations_url": "https://api.github.com/users/pieterproigia/orgs", "repos_url": "https://api.github.com/users/pieterproigia/repos", "events_url": "https://api.github.com/users/pieterproigia/events{/privacy}", "received_events_url": "https://api.github.com/users/pieterproigia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-27T15:33:25Z", "updated_at": "2016-11-08T18:00:20Z", "closed_at": "2016-11-08T13:58:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this is a bug or intended behavior. But the attempts function does work as described in the example code in the [documents](http://transaction.readthedocs.io/en/latest/convenience.html#retries):\n\n```\nfor i in range(3):\n    try:\n       with transaction.manager:\n           ... some something ...\n    except SomeTransientException:\n       contine\n    else:\n       break\n```\n\nInstead it works as:\n\n```\nfor i in range(3):\n    try:\n       with transaction.manager:\n           ... some something ...\n    except SomeTransientException:\n       contine\n```\n\nA successful attempt will just try again, as shown in the following:\n\n```\nimport transaction.tests.savepointsample\nimport transaction\n\ndm = transaction.tests.savepointsample.SampleSavepointDataManager()\nwith transaction.manager:\n    dm['ntry'] = 0\nntry = 0\n\nimport transaction.interfaces\nclass Retry(transaction.interfaces.TransientError):\n    pass\n\nfor attempt in transaction.manager.attempts(6):\n    with attempt as t:\n        t.note('test')\n        print(\"%s %s\" % (dm['ntry'], ntry))\n        ntry += 1\n        dm['ntry'] = ntry\n        if ntry % 3:\n            raise Retry(ntry)\nprint('current ntry: %s' % dm['ntry'])\n```\n\nThe result:\n\n```\n0 0\n0 1\n0 2\n3 3\n3 4\n3 5\ncurrent ntry 6\n```\n\nWhile if the documentation is to be believed I'd expect a result as follows:\n\n```\n0 0\n0 1\n0 2\ncurrent ntry 3\n```\n\nThus my question is really what is correct, the documentation or the implementation?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/10", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/10/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/10/events", "html_url": "https://github.com/zopefoundation/transaction/issues/10", "id": 126019960, "node_id": "MDU6SXNzdWUxMjYwMTk5NjA=", "number": 10, "title": "TypeError in traceback print on connection loss to server", "user": {"login": "ml31415", "id": 2386612, "node_id": "MDQ6VXNlcjIzODY2MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2386612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ml31415", "html_url": "https://github.com/ml31415", "followers_url": "https://api.github.com/users/ml31415/followers", "following_url": "https://api.github.com/users/ml31415/following{/other_user}", "gists_url": "https://api.github.com/users/ml31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/ml31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ml31415/subscriptions", "organizations_url": "https://api.github.com/users/ml31415/orgs", "repos_url": "https://api.github.com/users/ml31415/repos", "events_url": "https://api.github.com/users/ml31415/events{/privacy}", "received_events_url": "https://api.github.com/users/ml31415/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-11T19:36:47Z", "updated_at": "2016-01-11T20:18:29Z", "closed_at": "2016-01-11T20:18:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I know this problem is not within the transaction module, but rather the in the stdlib, but it still may make sense to mitigate this, as this stdlib behavior is probably not going to change too soon. The setup to reproduce this is: Open a zodb server, connect a client, start a transaction, modify something, shutdown the server, try to commit the transaction.\n\n```\n/.../utils/database/database.py in close(self)\n    366             return\n    367         try:\n--> 368             self.tm.commit()\n    369         except transaction.interfaces.TransactionFailedError:\n    370             pass\n\n/usr/local/lib/python2.7/dist-packages/transaction/_manager.pyc in commit(self)\n    109         \"\"\" See ITransactionManager.\n    110         \"\"\"\n--> 111         return self.get().commit()\n    112 \n    113     def abort(self):\n\n/usr/local/lib/python2.7/dist-packages/transaction/_transaction.pyc in commit(self)\n    276             tb = None\n    277             try:\n--> 278                 t, v, tb = self._saveAndGetCommitishError()\n    279                 self._callAfterCommitHooks(status=False)\n    280                 reraise(t, v, tb)\n\n/usr/local/lib/python2.7/dist-packages/transaction/_transaction.pyc in _saveAndGetCommitishError(self)\n    298             t, v, tb = sys.exc_info()\n    299             # Record how we got into commit().\n--> 300             traceback.print_stack(sys._getframe(1), None, ft)\n    301             # Append the stack entries from here down to the exception.\n    302             traceback.print_tb(tb, None, ft)\n\n/usr/lib/python2.7/traceback.pyc in print_stack(f, limit, file)\n    268         except ZeroDivisionError:\n    269             f = sys.exc_info()[2].tb_frame.f_back\n--> 270     print_list(extract_stack(f, limit), file)\n    271 \n    272 def format_stack(f=None, limit=None):\n\n/usr/lib/python2.7/traceback.pyc in print_list(extracted_list, file)\n     23                '  File \"%s\", line %d, in %s' % (filename,lineno,name))\n     24         if line:\n---> 25             _print(file, '    %s' % line.strip())\n     26 \n     27 def format_list(extracted_list):\n\n/usr/lib/python2.7/traceback.pyc in _print(file, str, terminator)\n     11 \n     12 def _print(file, str='', terminator='\\n'):\n---> 13     file.write(str+terminator)\n     14 \n     15 \n\nTypeError: 'unicode' does not have the buffer interface\n```\n\nHere str is a unicode line from the stack trace. Though I'm not totally sure why it is unicode at all.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/6", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/6/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/6/events", "html_url": "https://github.com/zopefoundation/transaction/issues/6", "id": 58198008, "node_id": "MDU6SXNzdWU1ODE5ODAwOA==", "number": 6, "title": "\"Transaction.abort\" should abort the resources in the inverse order then \"commit\" commits the resources", "user": {"login": "d-maurer", "id": 10956900, "node_id": "MDQ6VXNlcjEwOTU2OTAw", "avatar_url": "https://avatars2.githubusercontent.com/u/10956900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-maurer", "html_url": "https://github.com/d-maurer", "followers_url": "https://api.github.com/users/d-maurer/followers", "following_url": "https://api.github.com/users/d-maurer/following{/other_user}", "gists_url": "https://api.github.com/users/d-maurer/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-maurer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-maurer/subscriptions", "organizations_url": "https://api.github.com/users/d-maurer/orgs", "repos_url": "https://api.github.com/users/d-maurer/repos", "events_url": "https://api.github.com/users/d-maurer/events{/privacy}", "received_events_url": "https://api.github.com/users/d-maurer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 23850179, "node_id": "MDU6TGFiZWwyMzg1MDE3OQ==", "url": "https://api.github.com/repos/zopefoundation/transaction/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-02-19T11:44:41Z", "updated_at": "2015-02-21T20:01:43Z", "closed_at": "2015-02-21T13:50:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The order in which resources are committed during a commit can be important. For this reason, this order can be influenced by defining a method `sortKey` on the resources. For `abort`, the resources are aborted in registration order - independent of `sortKey`.\n\nHowever, the order in which resources are aborted can be important as well. In my case, a Plone portal should be created. During the operation, a ZODB connection and various `collective.indexing.transactions.QueueTM` objects register with the transaction (in this order). An error during the portal creation causes a `transaction.abort()` which fails, because the connection abort ghostifies the portal's component registry and the `collective.indexing.transactions.QueueTM` abort depends on it.\n\nIt would be good to have control not only over the `commit` order but also over the `abort` order of resources. I assume that aborting resources in the inverse order of committing them would most likely give acceptable results.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/5", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/5/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/5/events", "html_url": "https://github.com/zopefoundation/transaction/issues/5", "id": 30868522, "node_id": "MDU6SXNzdWUzMDg2ODUyMg==", "number": 5, "title": "Buffer instance error while commiting (python2.7)", "user": {"login": "marplatense", "id": 282722, "node_id": "MDQ6VXNlcjI4MjcyMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/282722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marplatense", "html_url": "https://github.com/marplatense", "followers_url": "https://api.github.com/users/marplatense/followers", "following_url": "https://api.github.com/users/marplatense/following{/other_user}", "gists_url": "https://api.github.com/users/marplatense/gists{/gist_id}", "starred_url": "https://api.github.com/users/marplatense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marplatense/subscriptions", "organizations_url": "https://api.github.com/users/marplatense/orgs", "repos_url": "https://api.github.com/users/marplatense/repos", "events_url": "https://api.github.com/users/marplatense/events{/privacy}", "received_events_url": "https://api.github.com/users/marplatense/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2014-04-04T15:11:34Z", "updated_at": "2018-03-25T18:22:41Z", "closed_at": "2018-03-25T18:22:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "While trying to use transaction.manager as context manager, I hit a buffer instance error with traceback (this is reproducible just by issuing a transaction.commit, too):\n\n Here is a complete example (requires sqlalchemy -reproducible at least with 0.9.4 and 0.7.8), zope-sqlalchemy and transaction:\n\n``` python\nfrom sqlalchemy import MetaData, Column, Integer, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import scoped_session, sessionmaker\nimport transaction\nfrom zope.sqlalchemy import ZopeTransactionExtension\nS = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))\nM = MetaData()\nB = declarative_base(metadata=M)\nengine = create_engine('sqlite:///:memory:', echo=True)\nS.configure(bind=engine)\nM.bind = engine\nclass Example(B):\n    __tablename__ = \"example\"\n    id = Column(Integer, primary_key=True)\n    calc = Column(Integer)\nM.create_all(engine)\nwith transaction.manager:\n    S.add_all([Example(id=1, calc=10), Example(id=1, calc=11)])\n```\n\nAs you can see, we are trying to insert the same id in a primary key column, something that has to raise an error and it does:\n\n``` python\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-14-de8e5b3d6d89> in <module>()\n      1 with transaction.manager:\n----> 2         S.add_all([Example(id=1, calc=10), Example(id=1, calc=11)])\n      3 \n\n/home/mariano/Code/SmD/env/local/lib/python2.7/site-packages/transaction-1.4.3-py2.7.egg/transaction/_manager.pyc in __exit__(self, t, v, tb)\n    118     def __exit__(self, t, v, tb):\n    119         if v is None:\n--> 120             self.commit()\n    121         else:\n    122             self.abort()\n\n/home/mariano/Code/SmD/env/local/lib/python2.7/site-packages/transaction-1.4.3-py2.7.egg/transaction/_manager.pyc in commit(self)\n    109         \"\"\" See ITransactionManager.\n    110         \"\"\"\n--> 111         return self.get().commit()\n    112 \n    113     def abort(self):\n\n/home/mariano/Code/SmD/env/local/lib/python2.7/site-packages/transaction-1.4.3-py2.7.egg/transaction/_transaction.pyc in commit(self)\n    276             tb = None\n    277             try:\n--> 278                 t, v, tb = self._saveAndGetCommitishError()\n    279                 self._callAfterCommitHooks(status=False)\n    280                 reraise(t, v, tb)\n\n/home/mariano/Code/SmD/env/local/lib/python2.7/site-packages/transaction-1.4.3-py2.7.egg/transaction/_transaction.pyc in _saveAndGetCommitishError(self)\n    298             t, v, tb = sys.exc_info()\n    299             # Record how we got into commit().\n--> 300             traceback.print_stack(sys._getframe(1), None, ft)\n    301             # Append the stack entries from here down to the exception.\n    302             traceback.print_tb(tb, None, ft)\n\n/usr/lib/python2.7/traceback.pyc in print_stack(f, limit, file)\n    267         except ZeroDivisionError:\n    268             f = sys.exc_info()[2].tb_frame.f_back\n--> 269     print_list(extract_stack(f, limit), file)\n    270 \n    271 def format_stack(f=None, limit=None):\n\n/usr/lib/python2.7/traceback.pyc in print_list(extracted_list, file)\n     23                '  File \"%s\", line %d, in %s' % (filename,lineno,name))\n     24         if line:\n---> 25             _print(file, '    %s' % line.strip())\n     26 \n     27 def format_list(extracted_list):\n\n/usr/lib/python2.7/traceback.pyc in _print(file, str, terminator)\n     11 \n     12 def _print(file, str='', terminator='\\n'):\n---> 13     file.write(str+terminator)\n     14 \n     15 \n\nTypeError: 'unicode' does not have the buffer interface\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/4", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/4/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/4/events", "html_url": "https://github.com/zopefoundation/transaction/issues/4", "id": 30861557, "node_id": "MDU6SXNzdWUzMDg2MTU1Nw==", "number": 4, "title": "1.4.3 is in PyPI", "user": {"login": "kilink", "id": 835139, "node_id": "MDQ6VXNlcjgzNTEzOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/835139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kilink", "html_url": "https://github.com/kilink", "followers_url": "https://api.github.com/users/kilink/followers", "following_url": "https://api.github.com/users/kilink/following{/other_user}", "gists_url": "https://api.github.com/users/kilink/gists{/gist_id}", "starred_url": "https://api.github.com/users/kilink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kilink/subscriptions", "organizations_url": "https://api.github.com/users/kilink/orgs", "repos_url": "https://api.github.com/users/kilink/repos", "events_url": "https://api.github.com/users/kilink/events{/privacy}", "received_events_url": "https://api.github.com/users/kilink/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-04-04T13:44:22Z", "updated_at": "2014-04-04T14:16:57Z", "closed_at": "2014-04-04T14:11:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Transaction 1.4.3 is currently the latest release in PyPI, but the changelog doesn't mention that it has been released, nor what changes it contains.\n\nPerhaps it was released mistakenly?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zopefoundation/transaction/issues/2", "repository_url": "https://api.github.com/repos/zopefoundation/transaction", "labels_url": "https://api.github.com/repos/zopefoundation/transaction/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/zopefoundation/transaction/issues/2/comments", "events_url": "https://api.github.com/repos/zopefoundation/transaction/issues/2/events", "html_url": "https://github.com/zopefoundation/transaction/issues/2", "id": 16984436, "node_id": "MDU6SXNzdWUxNjk4NDQzNg==", "number": 2, "title": "an object can join a transaction multiple times", "user": {"login": "jvanasco", "id": 204779, "node_id": "MDQ6VXNlcjIwNDc3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/204779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvanasco", "html_url": "https://github.com/jvanasco", "followers_url": "https://api.github.com/users/jvanasco/followers", "following_url": "https://api.github.com/users/jvanasco/following{/other_user}", "gists_url": "https://api.github.com/users/jvanasco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvanasco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvanasco/subscriptions", "organizations_url": "https://api.github.com/users/jvanasco/orgs", "repos_url": "https://api.github.com/users/jvanasco/repos", "events_url": "https://api.github.com/users/jvanasco/events{/privacy}", "received_events_url": "https://api.github.com/users/jvanasco/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 23850176, "node_id": "MDU6TGFiZWwyMzg1MDE3Ng==", "url": "https://api.github.com/repos/zopefoundation/transaction/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 23850178, "node_id": "MDU6TGFiZWwyMzg1MDE3OA==", "url": "https://api.github.com/repos/zopefoundation/transaction/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-07-19T18:09:14Z", "updated_at": "2019-09-05T11:06:39Z", "closed_at": "2019-09-05T11:06:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "While working on the mail package, I noticed that a resource could join a transaction multiple times.\n\nI'm not sure this if this is a bug or intended behavior.  I couldn't think of any situation where a resource should join a transaction multiple times, so I wanted to report it.  If this happens, seemingly random errors appear in the two-phase commit, as the object will have `tpc_begin` called for each join.  \n\nif there's no reason for multiple joins, it might make sense to raise an exception if something is joined a multiple time -- though this would also require tracking of the raw and wrapped resources ( line 162 ).\n\nhttps://github.com/zopefoundation/transaction/blob/master/transaction/_transaction.py#L145-L179\n", "performed_via_github_app": null, "score": 1.0}]}