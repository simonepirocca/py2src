{"total_count": 459, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/tensorflow/probability/issues/1057", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1057/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1057/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1057/events", "html_url": "https://github.com/tensorflow/probability/issues/1057", "id": 679985893, "node_id": "MDU6SXNzdWU2Nzk5ODU4OTM=", "number": 1057, "title": "Feeding kwargs to `state_time_derivative_fn` of `ffjord`", "user": {"login": "gitlabspy", "id": 61307585, "node_id": "MDQ6VXNlcjYxMzA3NTg1", "avatar_url": "https://avatars0.githubusercontent.com/u/61307585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gitlabspy", "html_url": "https://github.com/gitlabspy", "followers_url": "https://api.github.com/users/gitlabspy/followers", "following_url": "https://api.github.com/users/gitlabspy/following{/other_user}", "gists_url": "https://api.github.com/users/gitlabspy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gitlabspy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gitlabspy/subscriptions", "organizations_url": "https://api.github.com/users/gitlabspy/orgs", "repos_url": "https://api.github.com/users/gitlabspy/repos", "events_url": "https://api.github.com/users/gitlabspy/events{/privacy}", "received_events_url": "https://api.github.com/users/gitlabspy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-17T06:41:24Z", "updated_at": "2020-08-19T13:24:44Z", "closed_at": "2020-08-19T13:24:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I wonder if there a way to feed kwargs to `state_time_derivative_fn` of `ffjord` in `tfb.ffjord`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1054", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1054/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1054/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1054/events", "html_url": "https://github.com/tensorflow/probability/issues/1054", "id": 678758741, "node_id": "MDU6SXNzdWU2Nzg3NTg3NDE=", "number": 1054, "title": "`tfp.mcmc.potential_scale_reduction` incorrectly implements Gelman and Rubin (1992)'s r-hat algorithm", "user": {"login": "rupei", "id": 46805532, "node_id": "MDQ6VXNlcjQ2ODA1NTMy", "avatar_url": "https://avatars1.githubusercontent.com/u/46805532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rupei", "html_url": "https://github.com/rupei", "followers_url": "https://api.github.com/users/rupei/followers", "following_url": "https://api.github.com/users/rupei/following{/other_user}", "gists_url": "https://api.github.com/users/rupei/gists{/gist_id}", "starred_url": "https://api.github.com/users/rupei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rupei/subscriptions", "organizations_url": "https://api.github.com/users/rupei/orgs", "repos_url": "https://api.github.com/users/rupei/repos", "events_url": "https://api.github.com/users/rupei/events{/privacy}", "received_events_url": "https://api.github.com/users/rupei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-13T21:59:45Z", "updated_at": "2020-08-21T18:38:14Z", "closed_at": "2020-08-21T18:38:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In implementing the streaming version of r-hat, I discovered that our non-streaming diagnostic incorrectly implements the referenced r-hat algorithm as outlined in Gelman and Rubin (1992) and in the earlier parts of Brooks and Gelman (1998). Both papers are referenced in the Docstring.\r\n\r\nMore precisely, in the `_potential_scale_reduction_single_state` helper function, the formula is missing a `(n-1) / n` factor in front of `w` in the final r-hat calculation. It's also worth noting that this has slipped under the radar as tests for potential scale reduction check to see if the statistic is close to 1 (chain has converged) or greater than 1.2 (chain has not converged). There are no checks to ensure the actual statistic is calculated correctly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1037", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1037/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1037/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1037/events", "html_url": "https://github.com/tensorflow/probability/issues/1037", "id": 670929957, "node_id": "MDU6SXNzdWU2NzA5Mjk5NTc=", "number": 1037, "title": "are the default parameters give best performance with pixel cnn for cifar 10 dataset", "user": {"login": "kumarvrsec", "id": 39803284, "node_id": "MDQ6VXNlcjM5ODAzMjg0", "avatar_url": "https://avatars2.githubusercontent.com/u/39803284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kumarvrsec", "html_url": "https://github.com/kumarvrsec", "followers_url": "https://api.github.com/users/kumarvrsec/followers", "following_url": "https://api.github.com/users/kumarvrsec/following{/other_user}", "gists_url": "https://api.github.com/users/kumarvrsec/gists{/gist_id}", "starred_url": "https://api.github.com/users/kumarvrsec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kumarvrsec/subscriptions", "organizations_url": "https://api.github.com/users/kumarvrsec/orgs", "repos_url": "https://api.github.com/users/kumarvrsec/repos", "events_url": "https://api.github.com/users/kumarvrsec/events{/privacy}", "received_events_url": "https://api.github.com/users/kumarvrsec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-01T14:45:24Z", "updated_at": "2020-08-04T23:12:55Z", "closed_at": "2020-08-04T23:12:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "are the default parameters give best performance with pixel cnn for cifar 10 dataset", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1034", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1034/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1034/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1034/events", "html_url": "https://github.com/tensorflow/probability/issues/1034", "id": 669781440, "node_id": "MDU6SXNzdWU2Njk3ODE0NDA=", "number": 1034, "title": "BFGS behaviour change between 0.9 & 0.11?", "user": {"login": "davidia", "id": 695500, "node_id": "MDQ6VXNlcjY5NTUwMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/695500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidia", "html_url": "https://github.com/davidia", "followers_url": "https://api.github.com/users/davidia/followers", "following_url": "https://api.github.com/users/davidia/following{/other_user}", "gists_url": "https://api.github.com/users/davidia/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidia/subscriptions", "organizations_url": "https://api.github.com/users/davidia/orgs", "repos_url": "https://api.github.com/users/davidia/repos", "events_url": "https://api.github.com/users/davidia/events{/privacy}", "received_events_url": "https://api.github.com/users/davidia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-31T12:47:16Z", "updated_at": "2020-08-05T18:57:12Z", "closed_at": "2020-08-05T18:57:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I was using the bfgs optimizer successfully with version 0.9. I upgraded to 0.11 and now it gives up after 1 or 2 iterations where as is used to solved the problem with a few hundred previously. I have been through the changes and the only thing I could find was some differences in the hager_zhang algorithm. I have all settings as default apart from providing an inverse hessian estimate. Unfortunately it's not easy for me to share my problem but any suggestions would be gratefully received. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1033", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1033/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1033/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1033/events", "html_url": "https://github.com/tensorflow/probability/issues/1033", "id": 669257793, "node_id": "MDU6SXNzdWU2NjkyNTc3OTM=", "number": 1033, "title": "`smart_for_loop` is using a Python for loop for large statically known `loop_num_iter`", "user": {"login": "rupei", "id": 46805532, "node_id": "MDQ6VXNlcjQ2ODA1NTMy", "avatar_url": "https://avatars1.githubusercontent.com/u/46805532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rupei", "html_url": "https://github.com/rupei", "followers_url": "https://api.github.com/users/rupei/followers", "following_url": "https://api.github.com/users/rupei/following{/other_user}", "gists_url": "https://api.github.com/users/rupei/gists{/gist_id}", "starred_url": "https://api.github.com/users/rupei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rupei/subscriptions", "organizations_url": "https://api.github.com/users/rupei/orgs", "repos_url": "https://api.github.com/users/rupei/repos", "events_url": "https://api.github.com/users/rupei/events{/privacy}", "received_events_url": "https://api.github.com/users/rupei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-30T22:46:01Z", "updated_at": "2020-08-05T19:25:34Z", "closed_at": "2020-08-05T19:25:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`smart_for_loop` is a utility function in tensorflow_probability/python/mcmc/internal/util.py that first checks if the number of loop iterations is statically known. If so, it executes that many iterations using a Python for loop; if not, it opts for a `tf.while_loop`. The issue arises when `smart_for_loop` is called on some large statically known value in graph mode. With many iterations, compilation becomes very expensive and takes ridiculously long; opting for a `tf.while_loop` would be much more optimal.\r\n\r\nThis issue has flown under the radar since `sample_chain` is just about the only place where this utility is used. In the status quo, `sample_chain` uses a Tensor schedule that dictates the number of steps to be taken before returning a sample. This means the number of iterations passed in `smart_for_loop` is never static. Hence, the Python loop is never executed.\r\n\r\nThe fix would be to only use the Python for loop if the number of iterations is statically known to be 0 or 1 (thus benefiting from loop unrolling). I'll go ahead and make this fix, but am still submitting this issue for reference.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1027", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1027/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1027/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1027/events", "html_url": "https://github.com/tensorflow/probability/issues/1027", "id": 667695209, "node_id": "MDU6SXNzdWU2Njc2OTUyMDk=", "number": 1027, "title": "LinearGaussianStateSpaceModel doc error", "user": {"login": "wzy816", "id": 10983261, "node_id": "MDQ6VXNlcjEwOTgzMjYx", "avatar_url": "https://avatars2.githubusercontent.com/u/10983261?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wzy816", "html_url": "https://github.com/wzy816", "followers_url": "https://api.github.com/users/wzy816/followers", "following_url": "https://api.github.com/users/wzy816/following{/other_user}", "gists_url": "https://api.github.com/users/wzy816/gists{/gist_id}", "starred_url": "https://api.github.com/users/wzy816/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wzy816/subscriptions", "organizations_url": "https://api.github.com/users/wzy816/orgs", "repos_url": "https://api.github.com/users/wzy816/repos", "events_url": "https://api.github.com/users/wzy816/events{/privacy}", "received_events_url": "https://api.github.com/users/wzy816/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-29T09:30:54Z", "updated_at": "2020-08-07T01:34:48Z", "closed_at": "2020-08-07T01:34:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/tensorflow/probability/blob/054a720ff9f221dd9660acd7ce7fb38a1dbb1290/tensorflow_probability/python/distributions/linear_gaussian_ssm.py#L980\r\n\r\nShould we use the intermediate results, instead of x, as args for function `backward_smoothing_pass`?\r\nLike\r\n```\r\nsmoothed_means, smoothed_covs = model.backward_smoothing_pass(filtered_means, filtered_covs, predicted_means, predicted_covs)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1018", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1018/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1018/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1018/events", "html_url": "https://github.com/tensorflow/probability/issues/1018", "id": 665015371, "node_id": "MDU6SXNzdWU2NjUwMTUzNzE=", "number": 1018, "title": "Calculating log_prob fails using `tf.vectorized_map`", "user": {"login": "Sayam753", "id": 43073325, "node_id": "MDQ6VXNlcjQzMDczMzI1", "avatar_url": "https://avatars2.githubusercontent.com/u/43073325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sayam753", "html_url": "https://github.com/Sayam753", "followers_url": "https://api.github.com/users/Sayam753/followers", "following_url": "https://api.github.com/users/Sayam753/following{/other_user}", "gists_url": "https://api.github.com/users/Sayam753/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sayam753/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sayam753/subscriptions", "organizations_url": "https://api.github.com/users/Sayam753/orgs", "repos_url": "https://api.github.com/users/Sayam753/repos", "events_url": "https://api.github.com/users/Sayam753/events{/privacy}", "received_events_url": "https://api.github.com/users/Sayam753/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-24T08:42:49Z", "updated_at": "2020-07-28T04:09:41Z", "closed_at": "2020-07-27T21:36:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have been trying to fit Auto Regressive model by Mean Field ADVI. But using `tf.vectorized_map` while calculating log_prob results in XLA and Dtype issues. \r\n<details><summary>Code Snippet</summary>\r\n\r\n```python\r\n\r\nimport numpy as np\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\nfrom tensorflow_probability.python.mcmc.transformed_kernel import (\r\n    make_transformed_log_prob,\r\n)\r\n\r\ndtype = tf.float32\r\ntfb = tfp.bijectors\r\ntfd = tfp.distributions\r\n\r\n# Generating data\r\nnp.random.seed(seed=42)\r\nT = 100\r\ny = np.zeros((T,))\r\nfor i in range(1,T):\r\n    y[i] = 0.95 * y[i-1] + np.random.normal()\r\ndata = y.reshape(-1, 1)\r\n\r\nmodel = tfd.JointDistributionSequential([\r\n    tfd.Normal(loc=0, scale=1.),\r\n    lambda e: tfp.sts.AutoregressiveStateSpaceModel(\r\n        num_timesteps=100,\r\n        coefficients=[e],\r\n        level_scale=0.1,\r\n        initial_state_prior=tfd.MultivariateNormalDiag(scale_diag=[1e-6]),\r\n    )\r\n])\r\n\r\ndef vectorize_function(function):\r\n    def vectorizedfn(*q_samples):\r\n        return tf.vectorized_map(lambda samples: function(*samples), q_samples)\r\n\r\n    return vectorizedfn\r\n\r\njoint_log_prob = vectorize_function(lambda *x: model.log_prob(x+(data, )))\r\n# joint_log_prob = lambda *x: model.log_prob(x+(data, ))\r\n\r\n# Transformations to bounded space\r\nunconstraining_bijectors = [tfb.Identity()]\r\n\r\ntarget_log_prob = make_transformed_log_prob(\r\n    joint_log_prob,\r\n    unconstraining_bijectors,\r\n    direction=\"forward\",\r\n    enable_bijector_caching=False,\r\n)\r\n\r\ndef build_mf_advi():\r\n    parameters = model.sample()[:-1]\r\n    dists = []\r\n    for i, parameter in enumerate(parameters):\r\n        shape = parameter.shape\r\n        loc = tf.Variable(\r\n            tf.random.normal(shape, dtype=dtype),\r\n            name=f\"meanfield_{i}_loc\",\r\n            dtype=dtype,\r\n        )\r\n        scale = tfp.util.TransformedVariable(\r\n            tf.fill(shape, value=tf.constant(1, dtype=dtype)),\r\n            tfb.Softplus(),  # For positive values of scale\r\n            name=f\"meanfield_{i}_scale\",\r\n        )\r\n\r\n        approx_parameter = tfd.Normal(loc=loc, scale=scale)\r\n        dists.append(approx_parameter)\r\n    return tfd.JointDistributionSequential(dists)\r\n\r\nposterior = build_mf_advi()\r\n\r\nnum_steps = 5_000\r\n\r\ndef trace_fn(trace):\r\n    tf.cond(\r\n        tf.math.mod(trace.step, 100) == 0,\r\n        lambda: tf.print(trace.step, \"/\", num_steps, \r\n                         \"Loss:\", trace.loss, end=\"\\r\"),\r\n        lambda: tf.print(\"\", end=\"\")\r\n    )\r\n    return trace.loss\r\n\r\nopt = tf.optimizers.Adam(learning_rate=0.1)\r\n\r\n@tf.function(autograph=False)\r\ndef run_approximation():\r\n    elbo_loss = tfp.vi.fit_surrogate_posterior(\r\n        target_log_prob,\r\n        surrogate_posterior=posterior,\r\n        optimizer=opt,\r\n        num_steps=num_steps,\r\n        trace_fn=trace_fn\r\n    )\r\n    return elbo_loss\r\n\r\nelbo_loss = run_approximation()\r\n```\r\n</details>\r\n\r\n<details><summary>Traceback</summary>\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in get_attr(self, name)\r\n   2511       with c_api_util.tf_buffer() as buf:\r\n-> 2512         pywrap_tf_session.TF_OperationGetAttrValueProto(self._c_op, name, buf)\r\n   2513         data = pywrap_tf_session.TF_GetBuffer(buf)\r\n\r\nInvalidArgumentError: Operation 'while' has no attr named '_XlaCompile'.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in _MaybeCompile(scope, op, func, grad_fn)\r\n    330     try:\r\n--> 331       xla_compile = op.get_attr(\"_XlaCompile\")\r\n    332       xla_separate_compiled_gradients = op.get_attr(\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in get_attr(self, name)\r\n   2515       # Convert to ValueError for backwards compatibility.\r\n-> 2516       raise ValueError(str(e))\r\n   2517     x = attr_value_pb2.AttrValue()\r\n\r\nValueError: Operation 'while' has no attr named '_XlaCompile'.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in get_attr(self, name)\r\n   2511       with c_api_util.tf_buffer() as buf:\r\n-> 2512         pywrap_tf_session.TF_OperationGetAttrValueProto(self._c_op, name, buf)\r\n   2513         data = pywrap_tf_session.TF_GetBuffer(buf)\r\n\r\nInvalidArgumentError: Operation 'while/while_body/cond' has no attr named '_XlaCompile'.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in _MaybeCompile(scope, op, func, grad_fn)\r\n    330     try:\r\n--> 331       xla_compile = op.get_attr(\"_XlaCompile\")\r\n    332       xla_separate_compiled_gradients = op.get_attr(\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in get_attr(self, name)\r\n   2515       # Convert to ValueError for backwards compatibility.\r\n-> 2516       raise ValueError(str(e))\r\n   2517     x = attr_value_pb2.AttrValue()\r\n\r\nValueError: Operation 'while/while_body/cond' has no attr named '_XlaCompile'.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in get_attr(self, name)\r\n   2511       with c_api_util.tf_buffer() as buf:\r\n-> 2512         pywrap_tf_session.TF_OperationGetAttrValueProto(self._c_op, name, buf)\r\n   2513         data = pywrap_tf_session.TF_GetBuffer(buf)\r\n\r\nInvalidArgumentError: Operation 'while/while_body/cond/PartitionedCall' has no attr named '_XlaCompile'.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in _MaybeCompile(scope, op, func, grad_fn)\r\n    330     try:\r\n--> 331       xla_compile = op.get_attr(\"_XlaCompile\")\r\n    332       xla_separate_compiled_gradients = op.get_attr(\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in get_attr(self, name)\r\n   2515       # Convert to ValueError for backwards compatibility.\r\n-> 2516       raise ValueError(str(e))\r\n   2517     x = attr_value_pb2.AttrValue()\r\n\r\nValueError: Operation 'while/while_body/cond/PartitionedCall' has no attr named '_XlaCompile'.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in get_attr(self, name)\r\n   2511       with c_api_util.tf_buffer() as buf:\r\n-> 2512         pywrap_tf_session.TF_OperationGetAttrValueProto(self._c_op, name, buf)\r\n   2513         data = pywrap_tf_session.TF_GetBuffer(buf)\r\n\r\nInvalidArgumentError: Operation 'monte_carlo_variational_loss/expectation/loop_body/JointDistributionSequential/log_prob/monte_carlo_variational_loss_expectation_loop_body_JointDistributionSequential_log_prob_AutoregressiveStateSpaceModel/log_prob/scan/while/TensorArrayV2Write/TensorListSetItem/pfor/Tile' has no attr named '_XlaCompile'.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in _MaybeCompile(scope, op, func, grad_fn)\r\n    330     try:\r\n--> 331       xla_compile = op.get_attr(\"_XlaCompile\")\r\n    332       xla_separate_compiled_gradients = op.get_attr(\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in get_attr(self, name)\r\n   2515       # Convert to ValueError for backwards compatibility.\r\n-> 2516       raise ValueError(str(e))\r\n   2517     x = attr_value_pb2.AttrValue()\r\n\r\nValueError: Operation 'monte_carlo_variational_loss/expectation/loop_body/JointDistributionSequential/log_prob/monte_carlo_variational_loss_expectation_loop_body_JointDistributionSequential_log_prob_AutoregressiveStateSpaceModel/log_prob/scan/while/TensorArrayV2Write/TensorListSetItem/pfor/Tile' has no attr named '_XlaCompile'.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-22-ca8546015bcf> in <module>\r\n     24 \r\n     25 \r\n---> 26 elbo_loss = run_approximation()\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py in __call__(self, *args, **kwds)\r\n    794       else:\r\n    795         compiler = \"nonXla\"\r\n--> 796         result = self._call(*args, **kwds)\r\n    797 \r\n    798       new_tracing_count = self._get_tracing_count()\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py in _call(self, *args, **kwds)\r\n    837       # This is the first call of __call__, so we have to initialize.\r\n    838       initializers = []\r\n--> 839       self._initialize(args, kwds, add_initializers_to=initializers)\r\n    840     finally:\r\n    841       # At this point we know that the initialization is complete (or less\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py in _initialize(self, args, kwds, add_initializers_to)\r\n    710     self._concrete_stateful_fn = (\r\n    711         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access\r\n--> 712             *args, **kwds))\r\n    713 \r\n    714     def invalid_creator_scope(*unused_args, **unused_kwds):\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)\r\n   2946       args, kwargs = None, None\r\n   2947     with self._lock:\r\n-> 2948       graph_function, _, _ = self._maybe_define_function(args, kwargs)\r\n   2949     return graph_function\r\n   2950 \r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in _maybe_define_function(self, args, kwargs)\r\n   3317 \r\n   3318       self._function_cache.missed.add(call_context_key)\r\n-> 3319       graph_function = self._create_graph_function(args, kwargs)\r\n   3320       self._function_cache.primary[cache_key] = graph_function\r\n   3321 \r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)\r\n   3179             arg_names=arg_names,\r\n   3180             override_flat_arg_shapes=override_flat_arg_shapes,\r\n-> 3181             capture_by_value=self._capture_by_value),\r\n   3182         self._function_attributes,\r\n   3183         function_spec=self.function_spec,\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)\r\n    984         _, original_func = tf_decorator.unwrap(python_func)\r\n    985 \r\n--> 986       func_outputs = python_func(*func_args, **func_kwargs)\r\n    987 \r\n    988       # invariant: `func_outputs` contains only Tensors, CompositeTensors,\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py in wrapped_fn(*args, **kwds)\r\n    612         # __wrapped__ allows AutoGraph to swap in a converted function. We give\r\n    613         # the function a weak reference to itself to avoid a reference cycle.\r\n--> 614         return weak_wrapped_fn().__wrapped__(*args, **kwds)\r\n    615     weak_wrapped_fn = weakref.ref(wrapped_fn)\r\n    616 \r\n\r\n<ipython-input-22-ca8546015bcf> in run_approximation()\r\n     19         optimizer=opt,\r\n     20         num_steps=num_steps,\r\n---> 21         trace_fn=trace_fn\r\n     22     )\r\n     23     return elbo_loss\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow_probability/python/vi/optimization.py in fit_surrogate_posterior(target_log_prob_fn, surrogate_posterior, optimizer, num_steps, convergence_criterion, trace_fn, variational_loss_fn, sample_size, trainable_variables, seed, name)\r\n    299                            trace_fn=trace_fn,\r\n    300                            trainable_variables=trainable_variables,\r\n--> 301                            name=name)\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow_probability/python/math/minimize.py in minimize(loss_fn, num_steps, optimizer, convergence_criterion, batch_convergence_reduce_fn, trainable_variables, trace_fn, return_full_length_trace, name)\r\n    335         loss_fn=loss_fn, optimizer=optimizer,\r\n    336         trainable_variables=trainable_variables)\r\n--> 337     initial_loss, initial_grads, initial_parameters = optimizer_step_fn()\r\n    338     has_converged = None\r\n    339     initial_convergence_criterion_state = None\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py in __call__(self, *args, **kwds)\r\n    794       else:\r\n    795         compiler = \"nonXla\"\r\n--> 796         result = self._call(*args, **kwds)\r\n    797 \r\n    798       new_tracing_count = self._get_tracing_count()\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py in _call(self, *args, **kwds)\r\n    837       # This is the first call of __call__, so we have to initialize.\r\n    838       initializers = []\r\n--> 839       self._initialize(args, kwds, add_initializers_to=initializers)\r\n    840     finally:\r\n    841       # At this point we know that the initialization is complete (or less\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py in _initialize(self, args, kwds, add_initializers_to)\r\n    710     self._concrete_stateful_fn = (\r\n    711         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access\r\n--> 712             *args, **kwds))\r\n    713 \r\n    714     def invalid_creator_scope(*unused_args, **unused_kwds):\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)\r\n   2946       args, kwargs = None, None\r\n   2947     with self._lock:\r\n-> 2948       graph_function, _, _ = self._maybe_define_function(args, kwargs)\r\n   2949     return graph_function\r\n   2950 \r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in _maybe_define_function(self, args, kwargs)\r\n   3317 \r\n   3318       self._function_cache.missed.add(call_context_key)\r\n-> 3319       graph_function = self._create_graph_function(args, kwargs)\r\n   3320       self._function_cache.primary[cache_key] = graph_function\r\n   3321 \r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)\r\n   3179             arg_names=arg_names,\r\n   3180             override_flat_arg_shapes=override_flat_arg_shapes,\r\n-> 3181             capture_by_value=self._capture_by_value),\r\n   3182         self._function_attributes,\r\n   3183         function_spec=self.function_spec,\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)\r\n    984         _, original_func = tf_decorator.unwrap(python_func)\r\n    985 \r\n--> 986       func_outputs = python_func(*func_args, **func_kwargs)\r\n    987 \r\n    988       # invariant: `func_outputs` contains only Tensors, CompositeTensors,\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/def_function.py in wrapped_fn(*args, **kwds)\r\n    612         # __wrapped__ allows AutoGraph to swap in a converted function. We give\r\n    613         # the function a weak reference to itself to avoid a reference cycle.\r\n--> 614         return weak_wrapped_fn().__wrapped__(*args, **kwds)\r\n    615     weak_wrapped_fn = weakref.ref(wrapped_fn)\r\n    616 \r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow_probability/python/math/minimize.py in optimizer_step()\r\n    102       loss = loss_fn()\r\n    103     watched_variables = tape.watched_variables()\r\n--> 104     grads = tape.gradient(loss, watched_variables)\r\n    105     train_op = optimizer.apply_gradients(zip(grads, watched_variables))\r\n    106     with tf.control_dependencies([train_op]):\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/backprop.py in gradient(self, target, sources, output_gradients, unconnected_gradients)\r\n   1081         output_gradients=output_gradients,\r\n   1082         sources_raw=flat_sources_raw,\r\n-> 1083         unconnected_gradients=unconnected_gradients)\r\n   1084 \r\n   1085     if not self._persistent:\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/imperative_grad.py in imperative_grad(tape, target, sources, output_gradients, sources_raw, unconnected_gradients)\r\n     75       output_gradients,\r\n     76       sources_raw,\r\n---> 77       compat.as_str(unconnected_gradients.value))\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in _backward_function(*args)\r\n    802     def _backward_function(*args):\r\n    803       call_op = outputs[0].op\r\n--> 804       return self._rewrite_forward_and_call_backward(call_op, *args)\r\n    805     return _backward_function, outputs\r\n    806 \r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in _rewrite_forward_and_call_backward(self, op, *doutputs)\r\n    717   def _rewrite_forward_and_call_backward(self, op, *doutputs):\r\n    718     \"\"\"Add outputs to the forward call and feed them to the grad function.\"\"\"\r\n--> 719     forward_function, backwards_function = self.forward_backward(len(doutputs))\r\n    720     if not backwards_function.outputs:\r\n    721       return backwards_function.structured_outputs\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in forward_backward(self, num_doutputs)\r\n    626     if forward_backward is not None:\r\n    627       return forward_backward\r\n--> 628     forward, backward = self._construct_forward_backward(num_doutputs)\r\n    629     self._cached_function_pairs[num_doutputs] = (forward, backward)\r\n    630     return forward, backward\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in _construct_forward_backward(self, num_doutputs)\r\n    674           args=[], kwargs={},\r\n    675           signature=signature,\r\n--> 676           func_graph=backwards_graph)\r\n    677       backwards_graph_captures = backwards_graph.external_captures\r\n    678       captures_from_forward = [\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)\r\n    984         _, original_func = tf_decorator.unwrap(python_func)\r\n    985 \r\n--> 986       func_outputs = python_func(*func_args, **func_kwargs)\r\n    987 \r\n    988       # invariant: `func_outputs` contains only Tensors, CompositeTensors,\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in _backprop_function(*grad_ys)\r\n    664             self._func_graph.inputs,\r\n    665             grad_ys=grad_ys,\r\n--> 666             src_graph=self._func_graph)\r\n    667 \r\n    668     with self._func_graph.as_default():\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in _GradientsHelper(ys, xs, grad_ys, name, colocate_gradients_with_ops, gate_gradients, aggregation_method, stop_gradients, unconnected_gradients, src_graph)\r\n    681                 # functions.\r\n    682                 in_grads = _MaybeCompile(grad_scope, op, func_call,\r\n--> 683                                          lambda: grad_fn(op, *out_grads))\r\n    684               else:\r\n    685                 # For function call ops, we add a 'SymbolicGradient'\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in _MaybeCompile(scope, op, func, grad_fn)\r\n    334       xla_scope = op.get_attr(\"_XlaScope\").decode()\r\n    335     except ValueError:\r\n--> 336       return grad_fn()  # Exit early\r\n    337 \r\n    338   if not xla_compile:\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in <lambda>()\r\n    681                 # functions.\r\n    682                 in_grads = _MaybeCompile(grad_scope, op, func_call,\r\n--> 683                                          lambda: grad_fn(op, *out_grads))\r\n    684               else:\r\n    685                 # For function call ops, we add a 'SymbolicGradient'\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/while_v2.py in _WhileGrad(op, *grads)\r\n    352   body_grad_graph, args = _create_grad_func(\r\n    353       ys, xs, non_none_grads, cond_graph, body_graph,\r\n--> 354       util.unique_grad_fn_name(body_graph.name), op, maximum_iterations)\r\n    355 \r\n    356   if body_grad_graph.while_op_needs_rewrite:\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/while_v2.py in _create_grad_func(ys, xs, grads, cond_graph, body_graph, name, while_op, maximum_iterations)\r\n    624       func_graph=_WhileBodyGradFuncGraph(name, cond_graph, body_graph,\r\n    625                                          maximum_iterations, while_op,\r\n--> 626                                          body_graph_inputs, body_graph_outputs))\r\n    627 \r\n    628   # Update the list of outputs with tensors corresponding to the captured\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)\r\n    984         _, original_func = tf_decorator.unwrap(python_func)\r\n    985 \r\n--> 986       func_outputs = python_func(*func_args, **func_kwargs)\r\n    987 \r\n    988       # invariant: `func_outputs` contains only Tensors, CompositeTensors,\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/while_v2.py in <lambda>(*args)\r\n    620   grad_func_graph = func_graph_module.func_graph_from_py_func(\r\n    621       name,\r\n--> 622       lambda *args: _grad_fn(ys, xs, args, body_graph),\r\n    623       args, {},\r\n    624       func_graph=_WhileBodyGradFuncGraph(name, cond_graph, body_graph,\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/while_v2.py in _grad_fn(ys, xs, args, func_graph)\r\n    680   grad_outs = gradients_util._GradientsHelper(\r\n    681       ys, xs, grad_ys=grad_ys, src_graph=func_graph,\r\n--> 682       unconnected_gradients=\"zero\")\r\n    683 \r\n    684   # TODO(b/118712257): Handle the case when grad_outs has None's e.g. when there\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in _GradientsHelper(ys, xs, grad_ys, name, colocate_gradients_with_ops, gate_gradients, aggregation_method, stop_gradients, unconnected_gradients, src_graph)\r\n    681                 # functions.\r\n    682                 in_grads = _MaybeCompile(grad_scope, op, func_call,\r\n--> 683                                          lambda: grad_fn(op, *out_grads))\r\n    684               else:\r\n    685                 # For function call ops, we add a 'SymbolicGradient'\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in _MaybeCompile(scope, op, func, grad_fn)\r\n    334       xla_scope = op.get_attr(\"_XlaScope\").decode()\r\n    335     except ValueError:\r\n--> 336       return grad_fn()  # Exit early\r\n    337 \r\n    338   if not xla_compile:\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in <lambda>()\r\n    681                 # functions.\r\n    682                 in_grads = _MaybeCompile(grad_scope, op, func_call,\r\n--> 683                                          lambda: grad_fn(op, *out_grads))\r\n    684               else:\r\n    685                 # For function call ops, we add a 'SymbolicGradient'\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/cond_v2.py in _IfGrad(op, *grads)\r\n    119   # functions.\r\n    120   true_grad_graph = _create_grad_func(\r\n--> 121       true_graph, grads, util.unique_grad_fn_name(true_graph.name))\r\n    122   false_grad_graph = _create_grad_func(\r\n    123       false_graph, grads, util.unique_grad_fn_name(false_graph.name))\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/cond_v2.py in _create_grad_func(func_graph, grads, name)\r\n    382       name,\r\n    383       lambda: _grad_fn(func_graph, grads), [], {},\r\n--> 384       func_graph=_CondGradFuncGraph(name, func_graph))\r\n    385 \r\n    386 \r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)\r\n    984         _, original_func = tf_decorator.unwrap(python_func)\r\n    985 \r\n--> 986       func_outputs = python_func(*func_args, **func_kwargs)\r\n    987 \r\n    988       # invariant: `func_outputs` contains only Tensors, CompositeTensors,\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/cond_v2.py in <lambda>()\r\n    381   return func_graph_module.func_graph_from_py_func(\r\n    382       name,\r\n--> 383       lambda: _grad_fn(func_graph, grads), [], {},\r\n    384       func_graph=_CondGradFuncGraph(name, func_graph))\r\n    385 \r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/cond_v2.py in _grad_fn(func_graph, grads)\r\n    372   result = gradients_util._GradientsHelper(\r\n    373       ys, func_graph.inputs, grad_ys=grad_ys,\r\n--> 374       src_graph=func_graph)\r\n    375 \r\n    376   return result\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in _GradientsHelper(ys, xs, grad_ys, name, colocate_gradients_with_ops, gate_gradients, aggregation_method, stop_gradients, unconnected_gradients, src_graph)\r\n    681                 # functions.\r\n    682                 in_grads = _MaybeCompile(grad_scope, op, func_call,\r\n--> 683                                          lambda: grad_fn(op, *out_grads))\r\n    684               else:\r\n    685                 # For function call ops, we add a 'SymbolicGradient'\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in _MaybeCompile(scope, op, func, grad_fn)\r\n    334       xla_scope = op.get_attr(\"_XlaScope\").decode()\r\n    335     except ValueError:\r\n--> 336       return grad_fn()  # Exit early\r\n    337 \r\n    338   if not xla_compile:\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in <lambda>()\r\n    681                 # functions.\r\n    682                 in_grads = _MaybeCompile(grad_scope, op, func_call,\r\n--> 683                                          lambda: grad_fn(op, *out_grads))\r\n    684               else:\r\n    685                 # For function call ops, we add a 'SymbolicGradient'\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in _rewrite_forward_and_call_backward(self, op, *doutputs)\r\n    717   def _rewrite_forward_and_call_backward(self, op, *doutputs):\r\n    718     \"\"\"Add outputs to the forward call and feed them to the grad function.\"\"\"\r\n--> 719     forward_function, backwards_function = self.forward_backward(len(doutputs))\r\n    720     if not backwards_function.outputs:\r\n    721       return backwards_function.structured_outputs\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in forward_backward(self, num_doutputs)\r\n    626     if forward_backward is not None:\r\n    627       return forward_backward\r\n--> 628     forward, backward = self._construct_forward_backward(num_doutputs)\r\n    629     self._cached_function_pairs[num_doutputs] = (forward, backward)\r\n    630     return forward, backward\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in _construct_forward_backward(self, num_doutputs)\r\n    674           args=[], kwargs={},\r\n    675           signature=signature,\r\n--> 676           func_graph=backwards_graph)\r\n    677       backwards_graph_captures = backwards_graph.external_captures\r\n    678       captures_from_forward = [\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)\r\n    984         _, original_func = tf_decorator.unwrap(python_func)\r\n    985 \r\n--> 986       func_outputs = python_func(*func_args, **func_kwargs)\r\n    987 \r\n    988       # invariant: `func_outputs` contains only Tensors, CompositeTensors,\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/eager/function.py in _backprop_function(*grad_ys)\r\n    664             self._func_graph.inputs,\r\n    665             grad_ys=grad_ys,\r\n--> 666             src_graph=self._func_graph)\r\n    667 \r\n    668     with self._func_graph.as_default():\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in _GradientsHelper(ys, xs, grad_ys, name, colocate_gradients_with_ops, gate_gradients, aggregation_method, stop_gradients, unconnected_gradients, src_graph)\r\n    681                 # functions.\r\n    682                 in_grads = _MaybeCompile(grad_scope, op, func_call,\r\n--> 683                                          lambda: grad_fn(op, *out_grads))\r\n    684               else:\r\n    685                 # For function call ops, we add a 'SymbolicGradient'\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in _MaybeCompile(scope, op, func, grad_fn)\r\n    334       xla_scope = op.get_attr(\"_XlaScope\").decode()\r\n    335     except ValueError:\r\n--> 336       return grad_fn()  # Exit early\r\n    337 \r\n    338   if not xla_compile:\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gradients_util.py in <lambda>()\r\n    681                 # functions.\r\n    682                 in_grads = _MaybeCompile(grad_scope, op, func_call,\r\n--> 683                                          lambda: grad_fn(op, *out_grads))\r\n    684               else:\r\n    685                 # For function call ops, we add a 'SymbolicGradient'\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/array_grad.py in _TileGrad(op, grad)\r\n    827         grad.values, math_ops.mod(grad.indices, input_shape_0), input_shape_0)\r\n    828     split_shape = array_ops.concat([[1], split_shape[1:]], axis=0)\r\n--> 829   input_grad = math_ops.reduce_sum(array_ops.reshape(grad, split_shape), axes)\r\n    830   # Fix shape inference\r\n    831   if not context.executing_eagerly():\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/util/dispatch.py in wrapper(*args, **kwargs)\r\n    199     \"\"\"Call target, and fall back on dispatchers if there is a TypeError.\"\"\"\r\n    200     try:\r\n--> 201       return target(*args, **kwargs)\r\n    202     except (TypeError, ValueError):\r\n    203       # Note: convert_to_eager_tensor currently raises a ValueError, not a\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/math_ops.py in reduce_sum(input_tensor, axis, keepdims, name)\r\n   1978 \r\n   1979   return reduce_sum_with_dims(input_tensor, axis, keepdims, name,\r\n-> 1980                               _ReductionDims(input_tensor, axis))\r\n   1981 \r\n   1982 \r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/math_ops.py in reduce_sum_with_dims(input_tensor, axis, keepdims, name, dims)\r\n   1989   return _may_reduce_to_scalar(\r\n   1990       keepdims, axis,\r\n-> 1991       gen_math_ops._sum(input_tensor, dims, keepdims, name=name))\r\n   1992 \r\n   1993 \r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/ops/gen_math_ops.py in _sum(input, axis, keep_dims, name)\r\n  10537   _, _, _op, _outputs = _op_def_library._apply_op_helper(\r\n  10538         \"Sum\", input=input, reduction_indices=axis, keep_dims=keep_dims,\r\n> 10539                name=name)\r\n  10540   _result = _outputs[:]\r\n  10541   if _execute.must_record_gradient():\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py in _apply_op_helper(op_type_name, name, **keywords)\r\n    607             _SatisfiesTypeConstraint(base_type,\r\n    608                                      _Attr(op_def, input_arg.type_attr),\r\n--> 609                                      param_name=input_name)\r\n    610           attrs[input_arg.type_attr] = attr_value\r\n    611           inferred_from[input_arg.type_attr] = input_name\r\n\r\n/usr/local/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py in _SatisfiesTypeConstraint(dtype, attr_def, param_name)\r\n     59           \"allowed values: %s\" %\r\n     60           (param_name, dtypes.as_dtype(dtype).name,\r\n---> 61            \", \".join(dtypes.as_dtype(x).name for x in allowed_list)))\r\n     62 \r\n     63 \r\n\r\nTypeError: Value passed to parameter 'input' has DataType variant not in list of allowed values: float32, float64, int32, uint8, int16, int8, complex64, int64, qint8, quint8, qint32, bfloat16, uint16, complex128, float16, uint32, uint64\r\n```\r\n</details>\r\n\r\n<details><summary>System Details</summary>\r\n\r\n```bash\r\nnumpy - 1.18.5\r\ntensorflow_probability - 0.12.0-dev20200723\r\ntensorflow - 2.4.0-dev20200723\r\npip - 20.1.1\r\nCPython - 3.7.7\r\nIPython - 7.16.1\r\nSystem - Darwin Mac 19.6.0 Darwin Kernel Version 19.6.0: Sun Jul  5 00:43:10 PDT 2020; root:xnu-6153.141.1~9/RELEASE_X86_64 x86_64\r\n```\r\n</details>\r\n\r\nIf I do not use `tf.vectorized_map`, everything works good. \r\nI am not sure if this issue has to be opened on tensorflow side. Any help in this regard?\r\nThanks\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1017", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1017/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1017/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1017/events", "html_url": "https://github.com/tensorflow/probability/issues/1017", "id": 662972317, "node_id": "MDU6SXNzdWU2NjI5NzIzMTc=", "number": 1017, "title": "Is there a way to initialize the log-det-jacobian with a certain value?", "user": {"login": "gitlabspy", "id": 61307585, "node_id": "MDQ6VXNlcjYxMzA3NTg1", "avatar_url": "https://avatars0.githubusercontent.com/u/61307585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gitlabspy", "html_url": "https://github.com/gitlabspy", "followers_url": "https://api.github.com/users/gitlabspy/followers", "following_url": "https://api.github.com/users/gitlabspy/following{/other_user}", "gists_url": "https://api.github.com/users/gitlabspy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gitlabspy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gitlabspy/subscriptions", "organizations_url": "https://api.github.com/users/gitlabspy/orgs", "repos_url": "https://api.github.com/users/gitlabspy/repos", "events_url": "https://api.github.com/users/gitlabspy/events{/privacy}", "received_events_url": "https://api.github.com/users/gitlabspy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-21T12:38:00Z", "updated_at": "2020-07-24T02:47:13Z", "closed_at": "2020-07-24T02:47:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I want to build a learnable dequantization in a flow model like [flow++](http://arxiv.org/abs/1902.00275?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+arxiv%2FQSXk+%28ExcitingAds%21+cs+updates+on+arXiv.org%29) does, then I have to use a random sampled value to run through a chain of bijectors first to get a noise which is then added to the train data. It looks like this:\r\n```\r\nxu, ldj = dequantization.forward(u) # there's no inverse for this\r\nx += xu\r\ndist = tfd.TransformedDistribution(...)\r\ndist.log_prob(x)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1016", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1016/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1016/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1016/events", "html_url": "https://github.com/tensorflow/probability/issues/1016", "id": 662452530, "node_id": "MDU6SXNzdWU2NjI0NTI1MzA=", "number": 1016, "title": "Strange Interaction of tfp.sts.Autoregressive   with bidict module", "user": {"login": "amol447", "id": 4054978, "node_id": "MDQ6VXNlcjQwNTQ5Nzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4054978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amol447", "html_url": "https://github.com/amol447", "followers_url": "https://api.github.com/users/amol447/followers", "following_url": "https://api.github.com/users/amol447/following{/other_user}", "gists_url": "https://api.github.com/users/amol447/gists{/gist_id}", "starred_url": "https://api.github.com/users/amol447/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amol447/subscriptions", "organizations_url": "https://api.github.com/users/amol447/orgs", "repos_url": "https://api.github.com/users/amol447/repos", "events_url": "https://api.github.com/users/amol447/events{/privacy}", "received_events_url": "https://api.github.com/users/amol447/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-21T01:29:24Z", "updated_at": "2020-07-21T04:40:34Z", "closed_at": "2020-07-21T04:40:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Importing bidict causes the tfp.sts.Autoregressive class to not work at all. Simplest code to reproduce the problem is as follows\r\nNot sure if the issue is with tfp or bidict. \r\n```\r\n    import bidict  \r\n    import tensorflow_probability as tfp  \r\n    a=tfp.sts.Autoregressive(order=2)  \r\n```\r\n\r\nAttributeError: 'LinearOperatorDiag' object has not attribute 'keys'\r\n\r\nbidict :0.19.0\r\ntf : 2.2.0\r\ntfp:0.10.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1013", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1013/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1013/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1013/events", "html_url": "https://github.com/tensorflow/probability/issues/1013", "id": 661149723, "node_id": "MDU6SXNzdWU2NjExNDk3MjM=", "number": 1013, "title": "Tensorflow probability incompatible shapes error on log prob of JointDistributionSequential samples", "user": {"login": "milesaturpin", "id": 22601203, "node_id": "MDQ6VXNlcjIyNjAxMjAz", "avatar_url": "https://avatars2.githubusercontent.com/u/22601203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milesaturpin", "html_url": "https://github.com/milesaturpin", "followers_url": "https://api.github.com/users/milesaturpin/followers", "following_url": "https://api.github.com/users/milesaturpin/following{/other_user}", "gists_url": "https://api.github.com/users/milesaturpin/gists{/gist_id}", "starred_url": "https://api.github.com/users/milesaturpin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milesaturpin/subscriptions", "organizations_url": "https://api.github.com/users/milesaturpin/orgs", "repos_url": "https://api.github.com/users/milesaturpin/repos", "events_url": "https://api.github.com/users/milesaturpin/events{/privacy}", "received_events_url": "https://api.github.com/users/milesaturpin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-19T23:16:41Z", "updated_at": "2020-07-20T16:31:56Z", "closed_at": "2020-07-20T16:31:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I'm trying to figure out whether I made a mistake with TFP shapes or if this is a TFP bug. I can sample from this simple joint distribution which uses a Normal prior on the mean of a 3-dim multivariate normal and 3 draws from a Half Cauchy as a prior on the diagonal of the MVN covariance.\r\n\r\nI'm using tensorflow 2.2.0, and this bug occurs on both tensorflow-probability 0.10.1 and the nighly built tensorflow-probability 0.12.0-dev20200719.\r\n\r\nThis code should work standalone:\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\ntfd = tfp.distributions \r\n\r\njoint_model = tfd.JointDistributionSequential([\r\n    tfd.Normal(loc=0., scale=1., name='z_0'),       \r\n    tfd.HalfCauchy(loc=tf.zeros([3]), scale=2., name='lambda_k'),\r\n    lambda lambda_k, z_0: tfd.MultivariateNormalDiag( # z_k ~ MVN(z_0, lambda_k)\r\n        loc=z_0[...,tf.newaxis],\r\n        scale_diag=lambda_k,\r\n        name='z_k'),\r\n])\r\n\r\n# These work\r\njoint_model.sample()\r\njoint_model.sample(4)\r\njoint_model.log_prob(joint_model.sample())\r\n\r\n# This breaks \r\njoint_model.log_prob(joint_model.sample(4))\r\n```\r\n\r\nHere's the error message:\r\n```\r\n---------------------------------------------------------------------------\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n<ipython-input-41-61bae7ab690a> in <module>\r\n      1 joint_model.log_prob(joint_model.sample())\r\n      2 # ERROR\r\n----> 3 joint_model.log_prob(joint_model.sample(4))\r\n\r\n~/miniconda3/envs/latent2/lib/python3.7/site-packages/tensorflow_probability/python/distributions/joint_distribution.py in log_prob(self, *args, **kwargs)\r\n    479         model_flatten_fn=self._model_flatten,\r\n    480         model_unflatten_fn=self._model_unflatten)\r\n--> 481     return self._call_log_prob(value, **unmatched_kwargs)\r\n    482 \r\n    483   # Override the base method to capture *args and **kwargs, so we can\r\n\r\n~/miniconda3/envs/latent2/lib/python3.7/site-packages/tensorflow_probability/python/distributions/distribution.py in _call_log_prob(self, value, name, **kwargs)\r\n    944     with self._name_and_control_scope(name, value, kwargs):\r\n    945       if hasattr(self, '_log_prob'):\r\n--> 946         return self._log_prob(value, **kwargs)\r\n    947       if hasattr(self, '_prob'):\r\n    948         return tf.math.log(self._prob(value, **kwargs))\r\n\r\n~/miniconda3/envs/latent2/lib/python3.7/site-packages/tensorflow_probability/python/distributions/joint_distribution.py in _log_prob(self, value)\r\n    391   def _log_prob(self, value):\r\n    392     xs = self._map_measure_over_dists('log_prob', value)\r\n--> 393     return sum(maybe_check_wont_broadcast(xs, self.validate_args))\r\n    394 \r\n    395   @distribution_util.AppendDocstring(kwargs_dict={\r\n\r\n~/miniconda3/envs/latent2/lib/python3.7/site-packages/tensorflow/python/ops/math_ops.py in binary_op_wrapper(x, y)\r\n    982     with ops.name_scope(None, op_name, [x, y]) as name:\r\n    983       if isinstance(x, ops.Tensor) and isinstance(y, ops.Tensor):\r\n--> 984         return func(x, y, name=name)\r\n    985       elif not isinstance(y, sparse_tensor.SparseTensor):\r\n    986         try:\r\n\r\n~/miniconda3/envs/latent2/lib/python3.7/site-packages/tensorflow/python/ops/math_ops.py in _add_dispatch(x, y, name)\r\n   1274     return gen_math_ops.add(x, y, name=name)\r\n   1275   else:\r\n-> 1276     return gen_math_ops.add_v2(x, y, name=name)\r\n   1277 \r\n   1278 \r\n\r\n~/miniconda3/envs/latent2/lib/python3.7/site-packages/tensorflow/python/ops/gen_math_ops.py in add_v2(x, y, name)\r\n    478         pass  # Add nodes to the TensorFlow graph.\r\n    479     except _core._NotOkStatusException as e:\r\n--> 480       _ops.raise_from_not_ok_status(e, name)\r\n    481   # Add nodes to the TensorFlow graph.\r\n    482   _, _, _op, _outputs = _op_def_library._apply_op_helper(\r\n\r\n~/miniconda3/envs/latent2/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in raise_from_not_ok_status(e, name)\r\n   6651   message = e.message + (\" name: \" + name if name is not None else \"\")\r\n   6652   # pylint: disable=protected-access\r\n-> 6653   six.raise_from(core._status_to_exception(e.code, message), None)\r\n   6654   # pylint: enable=protected-access\r\n   6655 \r\n\r\n~/miniconda3/envs/latent2/lib/python3.7/site-packages/six.py in raise_from(value, from_value)\r\n\r\n\r\nInvalidArgumentError: Incompatible shapes: [4] vs. [4,3] [Op:AddV2]\r\n```\r\nThis has been driving me absolutely insane so any help is appreciated", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1010", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1010/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1010/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1010/events", "html_url": "https://github.com/tensorflow/probability/issues/1010", "id": 658246928, "node_id": "MDU6SXNzdWU2NTgyNDY5Mjg=", "number": 1010, "title": "`tensorflow_probability.distributions.MixtureSameFamily` only works with `float32`", "user": {"login": "Demetrio92", "id": 22682408, "node_id": "MDQ6VXNlcjIyNjgyNDA4", "avatar_url": "https://avatars2.githubusercontent.com/u/22682408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Demetrio92", "html_url": "https://github.com/Demetrio92", "followers_url": "https://api.github.com/users/Demetrio92/followers", "following_url": "https://api.github.com/users/Demetrio92/following{/other_user}", "gists_url": "https://api.github.com/users/Demetrio92/gists{/gist_id}", "starred_url": "https://api.github.com/users/Demetrio92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Demetrio92/subscriptions", "organizations_url": "https://api.github.com/users/Demetrio92/orgs", "repos_url": "https://api.github.com/users/Demetrio92/repos", "events_url": "https://api.github.com/users/Demetrio92/events{/privacy}", "received_events_url": "https://api.github.com/users/Demetrio92/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-16T14:22:54Z", "updated_at": "2020-07-20T08:50:51Z", "closed_at": "2020-07-16T17:24:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "`tensorflow_probability.distributions.MixtureSameFamily` requires all passed parameters to be cast into `float32`. \r\nOtherwise its methods `.cdf` and `.prob` return a cryptic error:\r\n\r\n```\r\nInvalidArgumentError: cannot compute AddV2 as input #1(zero-based) was expected to be a double/half tensor but is a float tensor [Op:AddV2]\r\n```\r\n\r\n----\r\n\r\n### REPRODUCE\r\n```python\r\nfrom tensorflow_probability import distributions as tfd\r\nimport numpy as np\r\n\r\n\r\ndef get_random_mixture_pdf(float_type):\r\n    N_predictions = int(1e2)\r\n    N_components = 5\r\n    N_grid_points = int(1e2)\r\n    pi_sim = np.random.uniform(size=(N_predictions, N_components)).astype(float_type)\r\n    pi_sim = pi_sim/np.transpose(np.tile(pi_sim.sum(axis=1), (N_components, 1)))\r\n    mean_sim = np.random.uniform(low=5, high=10, size=(N_predictions, N_components)).astype(float_type)\r\n    sd_sim = np.random.uniform(low=0.1, high=1, size=(N_predictions, N_components)).astype(float_type)\r\n    mixture_distribution = tfd.MixtureSameFamily(\r\n        mixture_distribution=tfd.Categorical(probs=pi_sim),\r\n        components_distribution=tfd.Normal(\r\n            loc=mean_sim,\r\n            scale=sd_sim,\r\n            validate_args=True,\r\n            allow_nan_stats=False,\r\n        )\r\n    )\r\n\r\n    grid = np.linspace(-10, 10, num=N_grid_points).astype(float_type)\r\n    pdf = mixture_distribution.prob(grid)\r\n    return pdf\r\n\r\npdf = get_random_mixture_pdf(float_type='float32')  # works\r\npdf = get_random_mixture_pdf(float_type='float64')  #InvalidArgumentError\r\npdf = get_random_mixture_pdf(float_type='float16')  #InvalidArgumentError\r\n```\r\n[colab using latest tf and tfp](https://colab.research.google.com/drive/1g37RztAguZHIPQqWOqvhe16XJDH0mPvz?usp=sharing)\r\n\r\n----\r\nThe issue is clearly somewhere deep in the framework, it seems to be affecting its various parts. e.g. https://github.com/tensorflow/probability/issues/904", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1007", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1007/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1007/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1007/events", "html_url": "https://github.com/tensorflow/probability/issues/1007", "id": 656591475, "node_id": "MDU6SXNzdWU2NTY1OTE0NzU=", "number": 1007, "title": "why sample_chain sending nan values", "user": {"login": "yaowang1111", "id": 13508195, "node_id": "MDQ6VXNlcjEzNTA4MTk1", "avatar_url": "https://avatars3.githubusercontent.com/u/13508195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaowang1111", "html_url": "https://github.com/yaowang1111", "followers_url": "https://api.github.com/users/yaowang1111/followers", "following_url": "https://api.github.com/users/yaowang1111/following{/other_user}", "gists_url": "https://api.github.com/users/yaowang1111/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaowang1111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaowang1111/subscriptions", "organizations_url": "https://api.github.com/users/yaowang1111/orgs", "repos_url": "https://api.github.com/users/yaowang1111/repos", "events_url": "https://api.github.com/users/yaowang1111/events{/privacy}", "received_events_url": "https://api.github.com/users/yaowang1111/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-14T12:56:56Z", "updated_at": "2020-07-21T08:00:13Z", "closed_at": "2020-07-21T08:00:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running a mcmc inference on a probablistic model, and i use single step to debug my model.\r\nI found that for the first two times, sample_chain are sending initial values to my model to get the log_prob, and the model successfully calculated and returned the log_prob. \r\nHowever, for the third time, a variable in my model sended by sample_chain are all nan values, and the returned log_prob are thus all nan values.\r\n\r\nCan someone give me some hint on the problem?\r\nThanks for help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1006", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1006/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1006/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1006/events", "html_url": "https://github.com/tensorflow/probability/issues/1006", "id": 655789631, "node_id": "MDU6SXNzdWU2NTU3ODk2MzE=", "number": 1006, "title": "Any way to pass conditions to bijectors in blockwise?", "user": {"login": "gitlabspy", "id": 61307585, "node_id": "MDQ6VXNlcjYxMzA3NTg1", "avatar_url": "https://avatars0.githubusercontent.com/u/61307585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gitlabspy", "html_url": "https://github.com/gitlabspy", "followers_url": "https://api.github.com/users/gitlabspy/followers", "following_url": "https://api.github.com/users/gitlabspy/following{/other_user}", "gists_url": "https://api.github.com/users/gitlabspy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gitlabspy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gitlabspy/subscriptions", "organizations_url": "https://api.github.com/users/gitlabspy/orgs", "repos_url": "https://api.github.com/users/gitlabspy/repos", "events_url": "https://api.github.com/users/gitlabspy/events{/privacy}", "received_events_url": "https://api.github.com/users/gitlabspy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-13T11:52:30Z", "updated_at": "2020-07-23T23:32:00Z", "closed_at": "2020-07-23T23:32:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n\r\nclass Bij(tfb.Bijector):\r\n    def __init__(self,validate_args=False,name='bij'):\r\n        super(Bij, self).__init__(...)\r\n    def _forward(self, x, cond):\r\n        return x + cond\r\n     ....\r\n\r\n\r\nblockwise = blockwise(\r\n    bijectors=[tfb.Identity(), Bij()] \r\n)\r\n\r\nflows = tfd.TransformedDistribution(\r\n        distribution = tfd.Normal(0., 1.),\r\n        bijector = blockwise,\r\n        event_shape = (32,)\r\n    )\r\ncond = ...\r\nargss = {'bijector_kwargs':{'cond':cond }}\r\nprint(flows.log_prob(tf.random.normal((3, 32)), **argss))\r\n```\r\nIt throws `TypeError: _inverse() got an unexpected keyword argument 'cond'` error.\r\nShould I write a kwargs getter in blockwise-like bijectors my self?? Or there's some decent way to achieve this ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1004", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1004/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1004/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1004/events", "html_url": "https://github.com/tensorflow/probability/issues/1004", "id": 654972234, "node_id": "MDU6SXNzdWU2NTQ5NzIyMzQ=", "number": 1004, "title": "Saving VAE and Loading Only the Encoder", "user": {"login": "jjasonbell", "id": 3034848, "node_id": "MDQ6VXNlcjMwMzQ4NDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3034848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjasonbell", "html_url": "https://github.com/jjasonbell", "followers_url": "https://api.github.com/users/jjasonbell/followers", "following_url": "https://api.github.com/users/jjasonbell/following{/other_user}", "gists_url": "https://api.github.com/users/jjasonbell/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjasonbell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjasonbell/subscriptions", "organizations_url": "https://api.github.com/users/jjasonbell/orgs", "repos_url": "https://api.github.com/users/jjasonbell/repos", "events_url": "https://api.github.com/users/jjasonbell/events{/privacy}", "received_events_url": "https://api.github.com/users/jjasonbell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-10T18:49:36Z", "updated_at": "2020-07-15T17:49:43Z", "closed_at": "2020-07-15T17:48:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I trained on my data using this as a template: https://colab.research.google.com/github/tensorflow/probability/blob/master/tensorflow_probability/examples/jupyter_notebooks/Probabilistic_Layers_VAE.ipynb\r\n\r\nI'd like to save the model, then load and reuse only the encoder.  Using `vae.save(model_path)` doesn't work, but I can use `vae.save_wieghts(checkpoint_path).`  Then how do I load the encoder (or initialize a new encoder with the appropriate weights)?  Is there an easier way to do this?   ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/1002", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/1002/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/1002/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/1002/events", "html_url": "https://github.com/tensorflow/probability/issues/1002", "id": 652825908, "node_id": "MDU6SXNzdWU2NTI4MjU5MDg=", "number": 1002, "title": "macOS build fails, distutils.errors.DistutilsFileError: could not create 'build': File exists", "user": {"login": "essandess", "id": 3449314, "node_id": "MDQ6VXNlcjM0NDkzMTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3449314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/essandess", "html_url": "https://github.com/essandess", "followers_url": "https://api.github.com/users/essandess/followers", "following_url": "https://api.github.com/users/essandess/following{/other_user}", "gists_url": "https://api.github.com/users/essandess/gists{/gist_id}", "starred_url": "https://api.github.com/users/essandess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/essandess/subscriptions", "organizations_url": "https://api.github.com/users/essandess/orgs", "repos_url": "https://api.github.com/users/essandess/repos", "events_url": "https://api.github.com/users/essandess/events{/privacy}", "received_events_url": "https://api.github.com/users/essandess/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-08T01:52:15Z", "updated_at": "2020-07-08T02:48:48Z", "closed_at": "2020-07-08T02:48:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using python version 3.7.7, from the top of a freshly cloned repo:\r\n\r\n```bash\r\nDISTUTILS_DEBUG=1 sudo -E python3 setup.py build\r\n\u2026\r\ndistutils.errors.DistutilsFileError: could not create 'build': File exists\r\n```\r\n\r\nThere is no file or directory `build` In the repo, and I\u2019m not aware of the underlying cause.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/998", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/998/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/998/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/998/events", "html_url": "https://github.com/tensorflow/probability/issues/998", "id": 651071345, "node_id": "MDU6SXNzdWU2NTEwNzEzNDU=", "number": 998, "title": "how to feed extra data to specific bijector of TransformedDistribution's bijectors?", "user": {"login": "gitlabspy", "id": 61307585, "node_id": "MDQ6VXNlcjYxMzA3NTg1", "avatar_url": "https://avatars0.githubusercontent.com/u/61307585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gitlabspy", "html_url": "https://github.com/gitlabspy", "followers_url": "https://api.github.com/users/gitlabspy/followers", "following_url": "https://api.github.com/users/gitlabspy/following{/other_user}", "gists_url": "https://api.github.com/users/gitlabspy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gitlabspy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gitlabspy/subscriptions", "organizations_url": "https://api.github.com/users/gitlabspy/orgs", "repos_url": "https://api.github.com/users/gitlabspy/repos", "events_url": "https://api.github.com/users/gitlabspy/events{/privacy}", "received_events_url": "https://api.github.com/users/gitlabspy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-05T13:34:46Z", "updated_at": "2020-07-06T14:06:25Z", "closed_at": "2020-07-06T14:06:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "`x2` is some label informations for `x1`, but how can I pass `x2` (as a constant) into `bi` in `tfb.Chain([bi1, bi2, bi3])`?\r\n```\r\nx1 = tf.random.normal((batch, 32, 32, 3))\r\nx2 = tf.random.normal((batch, 32,32, 3))\r\ntrans_dit = tfd.TransformedDistribution(bijectors=tfb.Chain([bi1, bi2, bi3]),...)\r\nloss = trans_dit.log_prob(x1)\r\nwith tf.gradientTape() as tape:\r\n     # update...\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/992", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/992/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/992/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/992/events", "html_url": "https://github.com/tensorflow/probability/issues/992", "id": 649538382, "node_id": "MDU6SXNzdWU2NDk1MzgzODI=", "number": 992, "title": "Cannot import name 'CloudPickler' from 'cloudpickle.cloudpickle' in tensorflow_probability\\python\\layers\\distribution_layer.py", "user": {"login": "stevenmailca", "id": 45957393, "node_id": "MDQ6VXNlcjQ1OTU3Mzkz", "avatar_url": "https://avatars0.githubusercontent.com/u/45957393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevenmailca", "html_url": "https://github.com/stevenmailca", "followers_url": "https://api.github.com/users/stevenmailca/followers", "following_url": "https://api.github.com/users/stevenmailca/following{/other_user}", "gists_url": "https://api.github.com/users/stevenmailca/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevenmailca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevenmailca/subscriptions", "organizations_url": "https://api.github.com/users/stevenmailca/orgs", "repos_url": "https://api.github.com/users/stevenmailca/repos", "events_url": "https://api.github.com/users/stevenmailca/events{/privacy}", "received_events_url": "https://api.github.com/users/stevenmailca/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-02T02:18:01Z", "updated_at": "2020-07-02T12:21:31Z", "closed_at": "2020-07-02T12:21:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I got the error message from Julia Shell \"The Python package tensorflow_probability could not be found by pyimport.\" due to \"<class 'ImportError'>\r\nImportError(\"cannot import name 'CloudPickler' from 'cloudpickle.cloudpickle' (D:\\\\Users\\\\WinUser\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python38\\\\lib\\\\site-packages\\\\cloudpickle\\\\cloudpickle.py)\")\" \r\nFile \"D:\\Users\\WinUser\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\tensorflow_probability\\python\\layers\\distribution_layer.py\", line 28, in <module>\r\n    from cloudpickle.cloudpickle import CloudPickler\r\n----------------------\r\nI checked the local folders and confirmed cloudpickle.py is right with the following path\r\nD:\\Users\\WinUser\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\cloudpickle\\cloudpickle.py ,\r\nbut why still import error caused by \"from cloudpickle.cloudpickle import CloudPickler\" in file distribution_layer.py  which locates D:\\Users\\WinUser\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\\tensorflow_probability\\python\\layers\\distribution_layer.py ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/991", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/991/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/991/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/991/events", "html_url": "https://github.com/tensorflow/probability/issues/991", "id": 649329361, "node_id": "MDU6SXNzdWU2NDkzMjkzNjE=", "number": 991, "title": "Incompatibility with cloudpickle==1.5.0", "user": {"login": "ltetrel", "id": 37963074, "node_id": "MDQ6VXNlcjM3OTYzMDc0", "avatar_url": "https://avatars0.githubusercontent.com/u/37963074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltetrel", "html_url": "https://github.com/ltetrel", "followers_url": "https://api.github.com/users/ltetrel/followers", "following_url": "https://api.github.com/users/ltetrel/following{/other_user}", "gists_url": "https://api.github.com/users/ltetrel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltetrel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltetrel/subscriptions", "organizations_url": "https://api.github.com/users/ltetrel/orgs", "repos_url": "https://api.github.com/users/ltetrel/repos", "events_url": "https://api.github.com/users/ltetrel/events{/privacy}", "received_events_url": "https://api.github.com/users/ltetrel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-07-01T21:22:05Z", "updated_at": "2020-07-29T19:28:01Z", "closed_at": "2020-07-29T18:49:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nDue to a new update, it is not possible to `import tensorflow_probability` anymore.\r\nUsing `cloudpickle <= 1.4.1` fixed the issue\r\n\r\n```\r\n>>> import tensorflow_probability as tfp\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow_probability/__init__.py\", line 76, in <module>\r\n    from tensorflow_probability.python import *  # pylint: disable=wildcard-import\r\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow_probability/python/__init__.py\", line 23, in <module>\r\n    from tensorflow_probability.python import distributions\r\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow_probability/python/distributions/__init__.py\", line 88, in <module>\r\n    from tensorflow_probability.python.distributions.pixel_cnn import PixelCNN\r\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow_probability/python/distributions/pixel_cnn.py\", line 37, in <module>\r\n    from tensorflow_probability.python.layers import weight_norm\r\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow_probability/python/layers/__init__.py\", line 31, in <module>\r\n    from tensorflow_probability.python.layers.distribution_layer import CategoricalMixtureOfOneHotCategorical\r\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow_probability/python/layers/distribution_layer.py\", line 28, in <module>\r\n    from cloudpickle.cloudpickle import CloudPickler\r\nImportError: cannot import name 'CloudPickler'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/989", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/989/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/989/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/989/events", "html_url": "https://github.com/tensorflow/probability/issues/989", "id": 648843957, "node_id": "MDU6SXNzdWU2NDg4NDM5NTc=", "number": 989, "title": "Mixture shapes do not fit", "user": {"login": "dirmeier", "id": 16086606, "node_id": "MDQ6VXNlcjE2MDg2NjA2", "avatar_url": "https://avatars1.githubusercontent.com/u/16086606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dirmeier", "html_url": "https://github.com/dirmeier", "followers_url": "https://api.github.com/users/dirmeier/followers", "following_url": "https://api.github.com/users/dirmeier/following{/other_user}", "gists_url": "https://api.github.com/users/dirmeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/dirmeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dirmeier/subscriptions", "organizations_url": "https://api.github.com/users/dirmeier/orgs", "repos_url": "https://api.github.com/users/dirmeier/repos", "events_url": "https://api.github.com/users/dirmeier/events{/privacy}", "received_events_url": "https://api.github.com/users/dirmeier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-01T09:53:41Z", "updated_at": "2020-07-04T17:32:04Z", "closed_at": "2020-07-04T17:32:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I have a problem getting the following model to work:\r\n\r\n```python\r\nmodel = tfd.JointDistributionNamed(dict(\r\n    m1=tfd.Normal(loc=0.0, scale=1.0),    \r\n    m2=tfd.Normal(loc=0.0, scale=1.0),    \r\n    x= lambda m1, m2: tfd.Mixture(\r\n        cat=tfd.Categorical(probs=tf.constant([0.5, 0.5])),\r\n        components=[tfd.Normal(loc=m1, scale=1.0),\r\n                    tfd.Normal(loc=m2, scale=1.0)]\r\n    )\r\n))\r\n\r\nsamples = model.sample(10)\r\n```\r\n\r\nsince it throws:\r\n\r\n```python\r\nValueError: components[0] batch shape must be compatible with cat shape and other component batch shapes\r\n```\r\n\r\nIf i dont use constant categorical probs, but a Dirichlet prior it works though:\r\n\r\n```python\r\nmodel = tfd.JointDistributionNamed(dict(\r\n    m1=tfd.Normal(loc=0.0, scale=1.0),    \r\n    m2=tfd.Normal(loc=0.0, scale=1.0),    \r\n    d=tfd.Dirichlet([1.0, 1.0]),\r\n    x= lambda m1, m2, d: tfd.Mixture(\r\n        cat=tfd.Categorical(probs=d),\r\n        components=[tfd.Normal(loc=m1, scale=1.0),\r\n                    tfd.Normal(loc=m2, scale=1.0)]\r\n    )\r\n))\r\n```\r\n\r\nAm I doing anything wrong here or is this a bug? Help would be appreciated. A colab is [here](https://colab.research.google.com/drive/1jBrd5o8rie_p4pchy5Q63gwndLlqfzYQ?usp=sharing).\r\n\r\nCheers,\r\nS\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/987", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/987/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/987/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/987/events", "html_url": "https://github.com/tensorflow/probability/issues/987", "id": 646842953, "node_id": "MDU6SXNzdWU2NDY4NDI5NTM=", "number": 987, "title": "ImportError: cannot import name 'naming' from 'tensorflow.python.autograph.core'", "user": {"login": "yaowang1111", "id": 13508195, "node_id": "MDQ6VXNlcjEzNTA4MTk1", "avatar_url": "https://avatars3.githubusercontent.com/u/13508195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaowang1111", "html_url": "https://github.com/yaowang1111", "followers_url": "https://api.github.com/users/yaowang1111/followers", "following_url": "https://api.github.com/users/yaowang1111/following{/other_user}", "gists_url": "https://api.github.com/users/yaowang1111/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaowang1111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaowang1111/subscriptions", "organizations_url": "https://api.github.com/users/yaowang1111/orgs", "repos_url": "https://api.github.com/users/yaowang1111/repos", "events_url": "https://api.github.com/users/yaowang1111/events{/privacy}", "received_events_url": "https://api.github.com/users/yaowang1111/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-28T05:12:24Z", "updated_at": "2020-07-15T06:22:35Z", "closed_at": "2020-07-15T06:22:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an ImportError when trying to import tfp.\r\n_ImportError: cannot import name 'naming' from 'tensorflow.python.autograph.core'_\r\nIt might be a problem with tensorflow2.2 or tfp0.10.\r\n\r\nSee\r\nhttps://github.com/tensorflow/tensorflow/issues/40584\r\n\r\nTFP0.7 doesn't have this problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/980", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/980/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/980/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/980/events", "html_url": "https://github.com/tensorflow/probability/issues/980", "id": 644268134, "node_id": "MDU6SXNzdWU2NDQyNjgxMzQ=", "number": 980, "title": "Development suggestion: add model criticism", "user": {"login": "yaowang1111", "id": 13508195, "node_id": "MDQ6VXNlcjEzNTA4MTk1", "avatar_url": "https://avatars3.githubusercontent.com/u/13508195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaowang1111", "html_url": "https://github.com/yaowang1111", "followers_url": "https://api.github.com/users/yaowang1111/followers", "following_url": "https://api.github.com/users/yaowang1111/following{/other_user}", "gists_url": "https://api.github.com/users/yaowang1111/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaowang1111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaowang1111/subscriptions", "organizations_url": "https://api.github.com/users/yaowang1111/orgs", "repos_url": "https://api.github.com/users/yaowang1111/repos", "events_url": "https://api.github.com/users/yaowang1111/events{/privacy}", "received_events_url": "https://api.github.com/users/yaowang1111/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-24T02:25:53Z", "updated_at": "2020-06-28T06:23:43Z", "closed_at": "2020-06-28T06:23:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm wondering why there are no model criticism(such us posterior predictive check) and model comparison related modules in tfp? Many other PPLs, such as stan and pymc, have these abilities.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/977", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/977/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/977/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/977/events", "html_url": "https://github.com/tensorflow/probability/issues/977", "id": 642654026, "node_id": "MDU6SXNzdWU2NDI2NTQwMjY=", "number": 977, "title": "MultivariateStudentTLinearOperator log_prob does not match StatsModels", "user": {"login": "n2cholas", "id": 12474257, "node_id": "MDQ6VXNlcjEyNDc0MjU3", "avatar_url": "https://avatars1.githubusercontent.com/u/12474257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n2cholas", "html_url": "https://github.com/n2cholas", "followers_url": "https://api.github.com/users/n2cholas/followers", "following_url": "https://api.github.com/users/n2cholas/following{/other_user}", "gists_url": "https://api.github.com/users/n2cholas/gists{/gist_id}", "starred_url": "https://api.github.com/users/n2cholas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n2cholas/subscriptions", "organizations_url": "https://api.github.com/users/n2cholas/orgs", "repos_url": "https://api.github.com/users/n2cholas/repos", "events_url": "https://api.github.com/users/n2cholas/events{/privacy}", "received_events_url": "https://api.github.com/users/n2cholas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-21T22:40:56Z", "updated_at": "2020-06-25T17:57:04Z", "closed_at": "2020-06-25T17:57:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I checked the `tfp.distributions.MultivariateStudentTLinearOperator.log_prob` against StatsModel and my own implementation, and the results do not match. Here is a [gist](https://colab.research.google.com/gist/n2cholas/293b1f23e2957ce4440dbe4eb88099ea/multivariate-t-issue.ipynb).\r\n\r\nI've tried a few different degrees of freedom, scales, and locations. Is this a bug or am I using `tfp.distributions.MultivariateStudentTLinearOperator` incorrectly? Thanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/976", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/976/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/976/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/976/events", "html_url": "https://github.com/tensorflow/probability/issues/976", "id": 641995857, "node_id": "MDU6SXNzdWU2NDE5OTU4NTc=", "number": 976, "title": "Manually updating probs attribute", "user": {"login": "sumanthratna", "id": 31281983, "node_id": "MDQ6VXNlcjMxMjgxOTgz", "avatar_url": "https://avatars1.githubusercontent.com/u/31281983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sumanthratna", "html_url": "https://github.com/sumanthratna", "followers_url": "https://api.github.com/users/sumanthratna/followers", "following_url": "https://api.github.com/users/sumanthratna/following{/other_user}", "gists_url": "https://api.github.com/users/sumanthratna/gists{/gist_id}", "starred_url": "https://api.github.com/users/sumanthratna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sumanthratna/subscriptions", "organizations_url": "https://api.github.com/users/sumanthratna/orgs", "repos_url": "https://api.github.com/users/sumanthratna/repos", "events_url": "https://api.github.com/users/sumanthratna/events{/privacy}", "received_events_url": "https://api.github.com/users/sumanthratna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-19T14:07:06Z", "updated_at": "2020-06-20T03:06:21Z", "closed_at": "2020-06-19T15:10:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not using tfp with Keras\u2014I'm using `tfp.distributions.Multinomial` to represent a discrete probability density function. The following script fails:\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\n\r\nmydist = tfp.distributions.Multinomial(\r\n    1.,\r\n    probs=[0.2, 0.2, 0.6],\r\n)\r\ntf.print(mydist)\r\nmydist.probs = [0.4, 0.4, 0.2]\r\ntf.print(mydist)\r\n```\r\noutput:\r\n```\r\n2020-06-19 10:04:20.135858: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\r\n2020-06-19 10:04:20.152909: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7fe9cb6a8850 initialized for platform Host (this does not guarantee that XLA will be used). Devices:\r\n2020-06-19 10:04:20.152942: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version\r\n<tfp.distributions.Multinomial 'Multinomial' batch_shape=[] event_shape=[3] dtype=float32>\r\nTraceback (most recent call last):\r\n  File \"myprob.py\", line 10, in <module>\r\n    mydist.probs = [0.4, 0.4, 0.2]\r\n  File \"/private/tmp/venv/lib/python3.8/site-packages/tensorflow/python/training/tracking/tracking.py\", line 89, in __setattr__\r\n    super(AutoTrackable, self).__setattr__(name, value)\r\nAttributeError: can't set attribute\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/970", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/970/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/970/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/970/events", "html_url": "https://github.com/tensorflow/probability/issues/970", "id": 638447053, "node_id": "MDU6SXNzdWU2Mzg0NDcwNTM=", "number": 970, "title": "TypeError Python 3.8.1", "user": {"login": "MattyJP200", "id": 66815904, "node_id": "MDQ6VXNlcjY2ODE1OTA0", "avatar_url": "https://avatars3.githubusercontent.com/u/66815904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MattyJP200", "html_url": "https://github.com/MattyJP200", "followers_url": "https://api.github.com/users/MattyJP200/followers", "following_url": "https://api.github.com/users/MattyJP200/following{/other_user}", "gists_url": "https://api.github.com/users/MattyJP200/gists{/gist_id}", "starred_url": "https://api.github.com/users/MattyJP200/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MattyJP200/subscriptions", "organizations_url": "https://api.github.com/users/MattyJP200/orgs", "repos_url": "https://api.github.com/users/MattyJP200/repos", "events_url": "https://api.github.com/users/MattyJP200/events{/privacy}", "received_events_url": "https://api.github.com/users/MattyJP200/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-14T22:54:39Z", "updated_at": "2020-06-16T05:07:26Z", "closed_at": "2020-06-16T05:07:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everyone, I am experiencing an issue when i run my code, in which this error comes up: TypeError: __init__() got an unexpected keyword argument 'parent'. Does any one have any suggestions?\r\nThis is the full program:\r\n\r\n# Tell Python to use the tkinter library\r\nimport tkinter as tk\r\nimport arcade\r\nfrom tkinter import *\r\n\r\n# Constants\r\nSCREEN_WIDTH = 1000\r\nSCREEN_HEIGHT = 650\r\nSCREEN_TITLE = \"The Tale of the Rogue Knight\"\r\n\r\n# Constants used to scale our sprites from their original size\r\nCHARACTER_SCALING = 1\r\nTILE_SCALING = 0.5\r\nCOIN_SCALING = 0.5\r\n\r\n# Movement speed of player, in pixels per frame\r\nPLAYER_MOVEMENT_SPEED = 5\r\nGRAVITY = 1\r\nPLAYER_JUMP_SPEED = 20\r\n\r\n# How many pixels to keep as a minimum margin between the character\r\n# and the edge of the screen.\r\nLEFT_VIEWPORT_MARGIN = 250\r\nRIGHT_VIEWPORT_MARGIN = 250\r\nBOTTOM_VIEWPORT_MARGIN = 200\r\nTOP_VIEWPORT_MARGIN = 85\r\n\r\n# Create a Python class to serve as a blueprint\r\nclass SampleApp(tk.Tk):\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        tk.Tk.__init__(self, *args, **kwargs)\r\n\r\n        # The container is where we'll stack a bunch of frames\r\n        # on top of each other, then the one we want visible\r\n        # will be raised above the others\r\n        container = tk.Frame(self)\r\n        container.pack(side=\"top\", fill=\"both\", expand=True)\r\n        container.grid_rowconfigure(0, weight=1)\r\n        container.grid_columnconfigure(0, weight=1)\r\n\r\n        # Set the window size and the X and Y offset\r\n        self.geometry(\"1200x800\")\r\n\r\n        # Set the title that will dispaly in the top caption bar of the window\r\n        self.title(\"The Tale of The Rogue Knight\")\r\n\r\n        # Display a specific icon to display on the window\r\n        self.iconbitmap('racecar.png')\r\n       \r\n        self.frames = {}\r\n        for F in (StartPage, MyGame, Page2):\r\n            page_name = F.__name__\r\n            frame = F(parent=container, controller=self)\r\n            self.frames[page_name] = frame\r\n\r\n            # Put all of the pages in the same loction;\r\n            # The one on the top of the stacking order\r\n            # will be the one that is visible\r\n\r\n            frame.grid(row=0, column=0, sticky=\"nsew\")\r\n\r\n        self.show_frame(\"StartPage\")\r\n\r\n    def show_frame(self, page_name):\r\n        '''Show a frame for the given page name'''\r\n        frame = self.frames[page_name]\r\n        frame.tkraise()\r\n\r\n# Create the StartPage class\r\nclass StartPage(tk.Frame):\r\n   \r\n    def __init__(self, parents, controller):\r\n        tk.Frame.__init__(self, parents)\r\n\r\n        # Change background colour to black\r\n        self.configure(background=\"Black\")\r\n\r\n        # Upload a background\r\n        Main_pic = PhotoImage (file=\"background_01.png\")\r\n        img=tk.Label (self, image=Main_pic)\r\n        img.image = Main_pic\r\n        img.place (x=0,y=0)\r\n\r\n        # Create a button labelled button1, the command=lambda is what to do\r\n        button1 = tk.Button(self, text=\"Single player\",\r\n                            command=lambda: controller.show_frame(\"MyGame\"))\r\n       \r\n        button2 = tk.Button(self, text=\"How to play\",\r\n                            command=lambda: controller.show_frame(\"Page2\"))\r\n\r\n        # Create an exit button to quit the program\r\n        exit_button = tk.Button(self, text=\"Quit\",\r\n                                command=lambda: controller.destroy())\r\n\r\n        # Place the exit button at 100 pixels across from left and 600 pixels from the top\r\n        # Place button1 at 100 pixels across from left and 200 pixels from the top\r\n        # Place button2 at 100 pixels across fron the left and 400 pixels from the top\r\n        # Also adjust the size of each button\r\n        button1.place(x=100, y=200, height=100, width=150)\r\n        button2.place(x=100, y=400, height=100, width=150)\r\n        exit_button.place(x=100, y=600, height=100, width=150)\r\n\r\n# Create the Page 1 class that runs when from a button on the StartPage class\r\n\r\nclass MyGame(arcade.Window):\r\n\r\n    def __init__(self):\r\n\r\n        # Call the parent class and set up the window\r\n        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)\r\n\r\n        # These are 'lists' that keep track of our sprites. Each sprite should\r\n        # go into a list.\r\n        self.coin_list = None\r\n        self.wall_list = None\r\n        self.player_list = None\r\n\r\n        # Separate variable that holds the player sprite\r\n        self.player_sprite = None\r\n\r\n        #our Physics Engine\r\n        self.physics_engine = None\r\n        \r\n        #USED TO KEEP TRACK OF OUR SCROLING\r\n        self.view_bottom = 0\r\n        self.view_left = 0\r\n\r\n        #keep track of the score\r\n        self.score = 0\r\n\r\n        #load sounds\r\n        self.collect_coin_sound = arcade.load_sound(\":resources:sounds/coin3.wav\")\r\n        self.jump_sound = arcade.load_sound(\":resources:sounds/jump3.wav\")\r\n        \r\n        arcade.set_background_color(arcade.csscolor.CORNFLOWER_BLUE)\r\n\r\n    def setup(self):\r\n        \"\"\" Set up the game here. Call this function to restart the game. \"\"\"\r\n        # Create the Sprite lists\r\n        self.player_list = arcade.SpriteList()\r\n        self.wall_list = arcade.SpriteList(use_spatial_hash=True)\r\n        self.coin_list = arcade.SpriteList(use_spatial_hash=True)\r\n\r\n        #keep track of the score\r\n        self.score = 0\r\n\r\n       # Set up the player, specifically placing it at these coordinates.\r\n        image_source = \":resources:images/animated_characters/robot/robot_idle.png\"\r\n        self.player_sprite = arcade.Sprite(image_source, CHARACTER_SCALING)\r\n        self.player_sprite.center_x = 64\r\n        self.player_sprite.center_y = 128\r\n        self.player_list.append(self.player_sprite)\r\n\r\n        #create the ground\r\n        #This shows using a loop to place multiple sprites horizontally\r\n        for x in range(0, 4800, 64):\r\n            wall = arcade.Sprite(\":resources:images/tiles/grassMid.png\", TILE_SCALING)\r\n            wall.center_x = x\r\n            wall.center_y = 32\r\n            self.wall_list.append(wall)\r\n\r\n        #put some crates on the ground\r\n        #this shows using a coordinate list to place sprites\r\n        coordinate_list = [[512,96],\r\n                           [256,96],\r\n                           [768,96],\r\n                           [320,260],\r\n                           [400,360],\r\n                           [464,360],\r\n                           [528,360],\r\n                           [592,442],\r\n                           [656,442]]\r\n\r\n        for coordinate in coordinate_list:\r\n            # Add a crate on the ground\r\n            wall = arcade.Sprite(\":resources:images/tiles/boxCrate_double.png\", TILE_SCALING)\r\n            wall.position = coordinate\r\n            self.wall_list.append(wall)\r\n\r\n            #use a loop to place some coins for our character to pick up\r\n            for x in range (128, 1250, 256):\r\n                coin = arcade.Sprite(\":resources:images/items/coinGold.png\", COIN_SCALING)\r\n                coin.center_x = x\r\n                coin.center_y = 96\r\n                self.coin_list.append(coin)\r\n\r\n        # Create the 'physics engine'\r\n        self.physics_engine = arcade.PhysicsEnginePlatformer(self.player_sprite,\r\n                                                             self.wall_list,\r\n                                                             GRAVITY)\r\n\r\n    def on_draw(self):\r\n        \"\"\" Render the screen. \"\"\"\r\n\r\n        # Clear the screen to the background color\r\n        arcade.start_render()\r\n\r\n        # Draw our sprites\r\n        self.wall_list.draw()\r\n        self.coin_list.draw()\r\n        self.player_list.draw()\r\n\r\n        #draw our score on the screen, scrolling it with the viewport\r\n        score_text = f\"score: {self.score}\"\r\n        arcade.draw_text(score_text, 900 + self.view_left, 620 + self.view_bottom,\r\n                         arcade.csscolor.WHITE, 18)\r\n\r\n    def on_key_press(self, key, modifiers):\r\n        \"\"\"Called whenever a key is pressed. \"\"\"\r\n        #What happens to the character when a key is pressed\r\n        if key == arcade.key.UP or key == arcade.key.W or key == arcade.key.SPACE or key == arcade.key.BACKSPACE:\r\n            if self.physics_engine.can_jump():\r\n                self.player_sprite.change_y = PLAYER_JUMP_SPEED\r\n                arcade.play_sound(self.jump_sound)\r\n        elif key == arcade.key.LEFT or key == arcade.key.A:\r\n            self.player_sprite.change_x = -PLAYER_MOVEMENT_SPEED\r\n        elif key == arcade.key.RIGHT or key == arcade.key.D:\r\n            self.player_sprite.change_x = PLAYER_MOVEMENT_SPEED\r\n\r\n    def on_key_release(self, key, modifiers):\r\n        \"\"\"Called when the user releases a key. \"\"\"\r\n        #What happens when a key is released\r\n        if key == arcade.key.LEFT or key == arcade.key.A:\r\n            self.player_sprite.change_x = 0\r\n        elif key == arcade.key.RIGHT or key == arcade.key.D:\r\n            self.player_sprite.change_x = 0\r\n\r\n    def on_update(self, delta_time):\r\n        \"\"\" Movement and game logic \"\"\"\r\n\r\n        # Move the player with the physics engine\r\n        self.physics_engine.update()\r\n\r\n        #see if we hit any coins\r\n        coin_hit_list = arcade.check_for_collision_with_list(self.player_sprite,\r\n                                                             self.coin_list)\r\n\r\n        #loop through each coin we hit (if any) and remove it\r\n        for coin in coin_hit_list:\r\n            #remove the coin\r\n            coin.remove_from_sprite_lists()\r\n            #play a sound\r\n            arcade.play_sound(self.collect_coin_sound)\r\n            #add one to the score\r\n            self.score += 1\r\n\r\n        # --- Manage Scrolling ---\r\n\r\n        # Track if we need to change the viewport\r\n\r\n        changed = False\r\n\r\n        # Scroll left\r\n        left_boundary = self.view_left + LEFT_VIEWPORT_MARGIN\r\n        if self.player_sprite.left < left_boundary:\r\n            self.view_left -= left_boundary - self.player_sprite.left\r\n            changed = True\r\n\r\n        # Scroll right\r\n        right_boundary = self.view_left + SCREEN_WIDTH - RIGHT_VIEWPORT_MARGIN\r\n        if self.player_sprite.right > right_boundary:\r\n            self.view_left += self.player_sprite.right - right_boundary\r\n            changed = True\r\n\r\n        # Scroll up\r\n        top_boundary = self.view_bottom + SCREEN_HEIGHT - TOP_VIEWPORT_MARGIN\r\n        if self.player_sprite.top > top_boundary:\r\n            self.view_bottom += self.player_sprite.top - top_boundary\r\n            changed = True\r\n\r\n        # Scroll down\r\n        bottom_boundary = self.view_bottom + BOTTOM_VIEWPORT_MARGIN\r\n        if self.player_sprite.bottom < bottom_boundary:\r\n            self.view_bottom -= bottom_boundary - self.player_sprite.bottom\r\n            changed = True\r\n\r\n        if changed:\r\n            # Only scroll to integers. Otherwise we end up with pixels that\r\n            # don't line up on the screen\r\n            self.view_bottom = int(self.view_bottom)\r\n            self.view_left = int(self.view_left)\r\n\r\n            # Do the scrolling\r\n            arcade.set_viewport(self.view_left,\r\n                                SCREEN_WIDTH + self.view_left,\r\n                                self.view_bottom,\r\n                                SCREEN_HEIGHT + self.view_bottom)\r\n\r\n# Create Pg 2\r\nclass Page2(tk.Frame):\r\n\r\n    def __init__(self, parents2, controller):\r\n        tk.Frame.__init__(self, parents2)\r\n\r\n        # Change background colour to black\r\n        self.configure(background=\"Black\")\r\n\r\n        self.controller = controller\r\n\r\n        # Change the background colour of the frame\r\n        self.configure(background=\"Light Blue\")\r\n\r\n        # Add a heading for the frame and set its foreground\r\n        # and background colour scheme\r\n        label = tk.Label(self, text=\"Controls\",\r\n                         bg = \"Light Blue\",\r\n                         fg = \"Black\")  \r\n        label.pack(side=\"top\", fill=\"x\", pady=10)\r\n\r\n        # Add the main body text for the page\r\n        explanation = \"\"\"Basic movement keys\"\"\"\r\n        main_text = tk.Label(self,\r\n                             text = explanation,\r\n                             fg = \"Black\",\r\n                             bg = \"Light Blue\",\r\n                             font = \"Trebuchet 30 bold\").place(x=575, y=75)\r\n        # Basic Movement description\r\n        explanation = \"\"\"\r\nUp arrow/space bar is to jump\r\nLeft arrow is to move to the left\r\nRight arrow is to move to the right\"\"\"\r\n        main_text = tk.Label(self,\r\n                             text = explanation,\r\n                             fg = \"Black\",\r\n                             bg = \"Light Blue\",\r\n                             font = \"Trebuchet 18 italic\").place(x=585, y=115)\r\n       \r\n                # Action keys\r\n        explanation = \"\"\"Action keys\"\"\"\r\n        main_text = tk.Label(self,\r\n                             text = explanation,\r\n                             fg = \"Black\",\r\n                             bg = \"Light Blue\",\r\n                             font = \"Trebuchet 30 bold\").place(x=575, y=75)\r\n        # Action keys description\r\n        explanation = \"\"\"\r\nTab is to\r\n\"\"\"\r\n        main_text = tk.Label(self,\r\n                             text = explanation,\r\n                             fg = \"Black\",\r\n                             bg = \"Light Blue\",\r\n                             font = \"Trebuchet 18 italic\").place(x=585, y=115)\r\n\r\n        button = tk.Button(self, text=\"Back to main\",\r\n                           command=lambda: controller.show_frame(\"StartPage\"))\r\n        button.pack()\r\n\r\nif __name__ == \"__main__\":\r\n    app = SampleApp()\r\n    app.mainloop()\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/962", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/962/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/962/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/962/events", "html_url": "https://github.com/tensorflow/probability/issues/962", "id": 629919578, "node_id": "MDU6SXNzdWU2Mjk5MTk1Nzg=", "number": 962, "title": "count_integers may fail when minlength is not given", "user": {"login": "javidcf", "id": 1098280, "node_id": "MDQ6VXNlcjEwOTgyODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1098280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/javidcf", "html_url": "https://github.com/javidcf", "followers_url": "https://api.github.com/users/javidcf/followers", "following_url": "https://api.github.com/users/javidcf/following{/other_user}", "gists_url": "https://api.github.com/users/javidcf/gists{/gist_id}", "starred_url": "https://api.github.com/users/javidcf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/javidcf/subscriptions", "organizations_url": "https://api.github.com/users/javidcf/orgs", "repos_url": "https://api.github.com/users/javidcf/repos", "events_url": "https://api.github.com/users/javidcf/events{/privacy}", "received_events_url": "https://api.github.com/users/javidcf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ursk", "id": 1203292, "node_id": "MDQ6VXNlcjEyMDMyOTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1203292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ursk", "html_url": "https://github.com/ursk", "followers_url": "https://api.github.com/users/ursk/followers", "following_url": "https://api.github.com/users/ursk/following{/other_user}", "gists_url": "https://api.github.com/users/ursk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ursk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ursk/subscriptions", "organizations_url": "https://api.github.com/users/ursk/orgs", "repos_url": "https://api.github.com/users/ursk/repos", "events_url": "https://api.github.com/users/ursk/events{/privacy}", "received_events_url": "https://api.github.com/users/ursk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ursk", "id": 1203292, "node_id": "MDQ6VXNlcjEyMDMyOTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1203292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ursk", "html_url": "https://github.com/ursk", "followers_url": "https://api.github.com/users/ursk/followers", "following_url": "https://api.github.com/users/ursk/following{/other_user}", "gists_url": "https://api.github.com/users/ursk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ursk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ursk/subscriptions", "organizations_url": "https://api.github.com/users/ursk/orgs", "repos_url": "https://api.github.com/users/ursk/repos", "events_url": "https://api.github.com/users/ursk/events{/privacy}", "received_events_url": "https://api.github.com/users/ursk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-06-03T11:31:19Z", "updated_at": "2020-06-04T15:55:37Z", "closed_at": "2020-06-04T15:55:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to the documentation of [`tfp.stats.count_integers`](https://www.tensorflow.org/probability/api_docs/python/tfp/stats/count_integers), when `minlength` or `maxlength` are not given, they are assumed to be `tf.reduce_max(arr) + 1`. However, in some cases that is not the case, and the function fails:\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\nx = tf.constant([[1, 3, 0, 0, 3],\r\n                 [1, 3, 1, 0, 2],\r\n                 [1, 3, 1, 2, 2]])\r\n\r\n# This works as expected\r\ntf.print(tfp.stats.count_integers(x, axis=1))\r\n# [[2 1 0]\r\n#  [1 2 2]\r\n#  [0 1 2]\r\n#  [2 1 1]]\r\n\r\n# This fails unexpectedly\r\ntf.print(tfp.stats.count_integers(x, axis=0))\r\n# ValueError: Incompatible shape for value ((4,)), expected ((2,))\r\n\r\n# When a minlength equivalent to what should be the default value is given it works\r\ntf.print(tfp.stats.count_integers(x, axis=0, minlength=tf.math.reduce_max(x) + 1))\r\n# [[0 0 1 2 0]\r\n#  [3 0 2 0 0]\r\n#  [0 0 0 1 2]\r\n#  [0 3 0 0 1]]\r\n```\r\n\r\nEnvironment:\r\nPython 3.7.6, TensorFlow 2.2.0, TensorFlow Probability 0.10.0, Win 10 x64, no CUDA/GPU.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/961", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/961/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/961/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/961/events", "html_url": "https://github.com/tensorflow/probability/issues/961", "id": 629356621, "node_id": "MDU6SXNzdWU2MjkzNTY2MjE=", "number": 961, "title": "Minor error in fit_sparse and _fit_sparse_exact_hessian with maximum_iterations default value", "user": {"login": "arkhanna", "id": 59672982, "node_id": "MDQ6VXNlcjU5NjcyOTgy", "avatar_url": "https://avatars0.githubusercontent.com/u/59672982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arkhanna", "html_url": "https://github.com/arkhanna", "followers_url": "https://api.github.com/users/arkhanna/followers", "following_url": "https://api.github.com/users/arkhanna/following{/other_user}", "gists_url": "https://api.github.com/users/arkhanna/gists{/gist_id}", "starred_url": "https://api.github.com/users/arkhanna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arkhanna/subscriptions", "organizations_url": "https://api.github.com/users/arkhanna/orgs", "repos_url": "https://api.github.com/users/arkhanna/repos", "events_url": "https://api.github.com/users/arkhanna/events{/privacy}", "received_events_url": "https://api.github.com/users/arkhanna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ursk", "id": 1203292, "node_id": "MDQ6VXNlcjEyMDMyOTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1203292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ursk", "html_url": "https://github.com/ursk", "followers_url": "https://api.github.com/users/ursk/followers", "following_url": "https://api.github.com/users/ursk/following{/other_user}", "gists_url": "https://api.github.com/users/ursk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ursk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ursk/subscriptions", "organizations_url": "https://api.github.com/users/ursk/orgs", "repos_url": "https://api.github.com/users/ursk/repos", "events_url": "https://api.github.com/users/ursk/events{/privacy}", "received_events_url": "https://api.github.com/users/ursk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ursk", "id": 1203292, "node_id": "MDQ6VXNlcjEyMDMyOTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1203292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ursk", "html_url": "https://github.com/ursk", "followers_url": "https://api.github.com/users/ursk/followers", "following_url": "https://api.github.com/users/ursk/following{/other_user}", "gists_url": "https://api.github.com/users/ursk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ursk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ursk/subscriptions", "organizations_url": "https://api.github.com/users/ursk/orgs", "repos_url": "https://api.github.com/users/ursk/repos", "events_url": "https://api.github.com/users/ursk/events{/privacy}", "received_events_url": "https://api.github.com/users/ursk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-06-02T16:49:36Z", "updated_at": "2020-06-03T20:42:44Z", "closed_at": "2020-06-03T20:42:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think there is a minor error in `fit_sparse()` and `_fit_sparse_exact_hessian()`. Default value for `maximum_iterations` is `None`, but this throws:\r\n\r\n```\r\n_FallbackException: This function does not handle the case of the path where all inputs are not already EagerTensors.\r\n...\r\nValueError: Attempt to convert a value (None) with an unsupported type (<class 'NoneType'>) to a Tensor.\r\n```\r\n\r\nThis is fixed by changing default value for `maximum_iterations` to `1`, which is the intended default behavior.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/956", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/956/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/956/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/956/events", "html_url": "https://github.com/tensorflow/probability/issues/956", "id": 627831933, "node_id": "MDU6SXNzdWU2Mjc4MzE5MzM=", "number": 956, "title": "tfd.python.glm.fisher_scoring example in docstring not working", "user": {"login": "erdembanak", "id": 36370836, "node_id": "MDQ6VXNlcjM2MzcwODM2", "avatar_url": "https://avatars0.githubusercontent.com/u/36370836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erdembanak", "html_url": "https://github.com/erdembanak", "followers_url": "https://api.github.com/users/erdembanak/followers", "following_url": "https://api.github.com/users/erdembanak/following{/other_user}", "gists_url": "https://api.github.com/users/erdembanak/gists{/gist_id}", "starred_url": "https://api.github.com/users/erdembanak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erdembanak/subscriptions", "organizations_url": "https://api.github.com/users/erdembanak/orgs", "repos_url": "https://api.github.com/users/erdembanak/repos", "events_url": "https://api.github.com/users/erdembanak/events{/privacy}", "received_events_url": "https://api.github.com/users/erdembanak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-30T21:59:52Z", "updated_at": "2020-06-10T16:03:27Z", "closed_at": "2020-06-10T16:03:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The example is written for tensorflow 1.x as:\r\n\r\n  with tf.Session() as sess:\r\n    [w_, linear_response_, is_converged_, num_iter_, Y_, w_true_,\r\n     log_likelihood_] = sess.run([\r\n        w, linear_response, is_converged, num_iter, Y, w_true,\r\n        log_likelihood])\r\n\r\nSince tf 2 has eager execution, tf.session() is not needed. I will update the code in the documentation to make it easier to use the code.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/943", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/943/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/943/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/943/events", "html_url": "https://github.com/tensorflow/probability/issues/943", "id": 622348792, "node_id": "MDU6SXNzdWU2MjIzNDg3OTI=", "number": 943, "title": "differentiable (log)likelihood of probabilistic model", "user": {"login": "dionman", "id": 17343914, "node_id": "MDQ6VXNlcjE3MzQzOTE0", "avatar_url": "https://avatars2.githubusercontent.com/u/17343914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dionman", "html_url": "https://github.com/dionman", "followers_url": "https://api.github.com/users/dionman/followers", "following_url": "https://api.github.com/users/dionman/following{/other_user}", "gists_url": "https://api.github.com/users/dionman/gists{/gist_id}", "starred_url": "https://api.github.com/users/dionman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dionman/subscriptions", "organizations_url": "https://api.github.com/users/dionman/orgs", "repos_url": "https://api.github.com/users/dionman/repos", "events_url": "https://api.github.com/users/dionman/events{/privacy}", "received_events_url": "https://api.github.com/users/dionman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-21T08:45:36Z", "updated_at": "2020-05-29T22:50:37Z", "closed_at": "2020-05-29T22:50:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any function allowing direct access to the likelihood expression of a defined model (given a dataset), or should this be hardcoded in any case?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/941", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/941/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/941/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/941/events", "html_url": "https://github.com/tensorflow/probability/issues/941", "id": 621374484, "node_id": "MDU6SXNzdWU2MjEzNzQ0ODQ=", "number": 941, "title": "rational quadratic spline does not work with batchsize>1", "user": {"login": "VMBoehm", "id": 22053912, "node_id": "MDQ6VXNlcjIyMDUzOTEy", "avatar_url": "https://avatars0.githubusercontent.com/u/22053912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VMBoehm", "html_url": "https://github.com/VMBoehm", "followers_url": "https://api.github.com/users/VMBoehm/followers", "following_url": "https://api.github.com/users/VMBoehm/following{/other_user}", "gists_url": "https://api.github.com/users/VMBoehm/gists{/gist_id}", "starred_url": "https://api.github.com/users/VMBoehm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VMBoehm/subscriptions", "organizations_url": "https://api.github.com/users/VMBoehm/orgs", "repos_url": "https://api.github.com/users/VMBoehm/repos", "events_url": "https://api.github.com/users/VMBoehm/events{/privacy}", "received_events_url": "https://api.github.com/users/VMBoehm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-20T00:36:00Z", "updated_at": "2020-05-27T16:50:31Z", "closed_at": "2020-05-27T16:50:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/tensorflow/probability/blob/f051e03dd3cc847d31061803c2b31c564562a993/tensorflow_probability/python/bijectors/rational_quadratic_spline.py#L59-L409\r\n\r\nThe given example in the documentation as well as my own code run fine with batchsize=1. \r\nIncreasing the batchsize raises following error (batchsize is 2 in this example and data dim 64, out of which half gets masked):\r\n\r\nInvalidArgumentError: 2 root error(s) found.\r\n  (0) Invalid argument: Incompatible shapes: [2,32] vs. [64]\r\n\t [[{{node mynvp_1/log_prob/chain_of_MatvecLU_of_real_nvp_of_MatvecLU/inverse/real_nvp/inverse/mynvp_1_log_prob_chain_of_MatvecLU_of_real_nvp_of_MatvecLU_inverse_real_nvp_inverse_RationalQuadraticSpline/inverse/GreaterEqual}}]]\r\n\t [[Neg/_385]]\r\n  (1) Invalid argument: Incompatible shapes: [2,32] vs. [64]\r\n\t [[{{node mynvp_1/log_prob/chain_of_MatvecLU_of_real_nvp_of_MatvecLU/inverse/real_nvp/inverse/mynvp_1_log_prob_chain_of_MatvecLU_of_real_nvp_of_MatvecLU_inverse_real_nvp_inverse_RationalQuadraticSpline/inverse/GreaterEqual}}]]\r\n0 successful operations.\r\n0 derived errors ignored.\r\n\r\nTraceback:\r\n    x1 = self._bijector_fn(y0, self._bijector_input_units(),\r\n  File \"/global/homes/v/vboehm/.conda/envs/tf22/lib/python3.8/site-packages/tensorflow_probability/python/bijectors/bijector.py\", line 1086, in inverse\r\n    return self._call_inverse(y, name, **kwargs)\r\n  File \"/global/homes/v/vboehm/.conda/envs/tf22/lib/python3.8/site-packages/tensorflow_probability/python/bijectors/bijector.py\", line 1058, in _call_inverse\r\n    mapping = mapping.merge(x=self._inverse(y, **kwargs))\r\n  File \"/global/homes/v/vboehm/.conda/envs/tf22/lib/python3.8/site-packages/tensorflow_probability/python/bijectors/rational_quadratic_spline.py\", line 307, in _inverse\r\n    d = self._compute_shared(y=y)\r\n  File \"/global/homes/v/vboehm/.conda/envs/tf22/lib/python3.8/site-packages/tensorflow_probability/python/bijectors/rational_quadratic_spline.py\", line 245, in _compute_shared\r\n    out_of_bounds = (x_or_y <= kx_or_ky_min) | (x_or_y >= kx_or_ky_max)\r\n  File \"/global/homes/v/vboehm/.conda/envs/tf22/lib/python3.8/site-packages/tensorflow/python/ops/gen_math_ops.py\", line 4049, in greater_equal\r\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\r\n  File \"/global/homes/v/vboehm/.conda/envs/tf22/lib/python3.8/site-packages/tensorflow/python/framework/op_def_library.py\", line 742, in _apply_op_helper\r\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\r\n  File \"/global/homes/v/vboehm/.conda/envs/tf22/lib/python3.8/site-packages/tensorflow/python/framework/ops.py\", line 3319, in _create_op_internal\r\n    ret = Operation(\r\n  File \"/global/homes/v/vboehm/.conda/envs/tf22/lib/python3.8/site-packages/tensorflow/python/framework/ops.py\", line 1791, in __init__\r\n    self._traceback = tf_stack.extract_stack()\r\n\r\nTried fixing it at by changing the shapes, which resolves the tf.where error at this point but triggers further shape errors down the road. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/940", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/940/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/940/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/940/events", "html_url": "https://github.com/tensorflow/probability/issues/940", "id": 621202701, "node_id": "MDU6SXNzdWU2MjEyMDI3MDE=", "number": 940, "title": "Unable to fit regression with positively constrained weights in tfp.sts", "user": {"login": "TimKreienkamp", "id": 9294136, "node_id": "MDQ6VXNlcjkyOTQxMzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/9294136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimKreienkamp", "html_url": "https://github.com/TimKreienkamp", "followers_url": "https://api.github.com/users/TimKreienkamp/followers", "following_url": "https://api.github.com/users/TimKreienkamp/following{/other_user}", "gists_url": "https://api.github.com/users/TimKreienkamp/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimKreienkamp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimKreienkamp/subscriptions", "organizations_url": "https://api.github.com/users/TimKreienkamp/orgs", "repos_url": "https://api.github.com/users/TimKreienkamp/repos", "events_url": "https://api.github.com/users/TimKreienkamp/events{/privacy}", "received_events_url": "https://api.github.com/users/TimKreienkamp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-19T18:43:34Z", "updated_at": "2020-05-20T09:45:41Z", "closed_at": "2020-05-20T09:45:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi All,\r\n\r\nI have a structural timeseries model, where, for business reasons, I would like to constrain the LinearRegression component to have positive coefficients. I tried to use the weights_prior argument in tfp.sts.LinearRegression to utilize prior distributions with only positive support, like tfd.Exponential() and tfd.HalfNormal():\r\n\r\n`tfp.sts.LinearRegression(design_matrix, name=name, weights_prior=tfd.Exponential(rate=1.0, validate_args=True))`\r\n\r\nbut this causes the following error:\r\n\r\n`tensorflow.python.framework.errors_impl.InvalidArgumentError:  assertion failed: [Sample must be non-negative.] [Condition x >= 0 did not hold element-wise:] [x (monte_carlo_variational_loss/build_factored_surrogate_posterior_JointDistributionNamed/sample/build_factored_surrogate_posterior_ctrl_static__weights_posterior/sample/Reshape:0) = ] [[0.930389822 -0.337865472]]\r\n         [[{{node monte_carlo_variational_loss/expectation/ctrl_static_ctrl_static_identityExponential/log_prob/Exponential_2/log_prob/assert_non_negative/assert_less_equal/Assert/AssertGuard/else/_1/Assert}}]] [Op:__inference_train_loop_body_19396]\r\n`\r\n\r\nso somehow, negative samples are generated, despite the positive prior. Am I doing something wrong here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/939", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/939/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/939/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/939/events", "html_url": "https://github.com/tensorflow/probability/issues/939", "id": 621185476, "node_id": "MDU6SXNzdWU2MjExODU0NzY=", "number": 939, "title": "Sampling tfd.Uniform with integer dtype fails", "user": {"login": "odel4y", "id": 10086888, "node_id": "MDQ6VXNlcjEwMDg2ODg4", "avatar_url": "https://avatars3.githubusercontent.com/u/10086888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/odel4y", "html_url": "https://github.com/odel4y", "followers_url": "https://api.github.com/users/odel4y/followers", "following_url": "https://api.github.com/users/odel4y/following{/other_user}", "gists_url": "https://api.github.com/users/odel4y/gists{/gist_id}", "starred_url": "https://api.github.com/users/odel4y/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/odel4y/subscriptions", "organizations_url": "https://api.github.com/users/odel4y/orgs", "repos_url": "https://api.github.com/users/odel4y/repos", "events_url": "https://api.github.com/users/odel4y/events{/privacy}", "received_events_url": "https://api.github.com/users/odel4y/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-19T18:14:54Z", "updated_at": "2020-05-20T14:59:21Z", "closed_at": "2020-05-20T14:59:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\nI am trying to sample a `tfd.Uniform` distribution with low and high defined as integers but it fails. The following code\r\n```python3\r\nfrom tensorflow_probability import distributions as tfd\r\nimport numpy as np\r\n\r\nhighs = np.random.randint(1, 4, size=(10, 4))\r\nuniform_int = tfd.Uniform(0, highs)\r\nprint(uniform_int.sample())\r\n```\r\nproduces an error:\r\n`ValueError: Must specify maxval for integer dtype tf.int64`\r\n\r\nIt will sample correctly if I convert `highs` to float but then the result is of course a float. Is that a bug or do you not intend to support uniform integer distributions? Thank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/936", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/936/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/936/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/936/events", "html_url": "https://github.com/tensorflow/probability/issues/936", "id": 619795558, "node_id": "MDU6SXNzdWU2MTk3OTU1NTg=", "number": 936, "title": "TF/TFP-nightly pip related problem", "user": {"login": "adamhaber", "id": 20320402, "node_id": "MDQ6VXNlcjIwMzIwNDAy", "avatar_url": "https://avatars1.githubusercontent.com/u/20320402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamhaber", "html_url": "https://github.com/adamhaber", "followers_url": "https://api.github.com/users/adamhaber/followers", "following_url": "https://api.github.com/users/adamhaber/following{/other_user}", "gists_url": "https://api.github.com/users/adamhaber/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamhaber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamhaber/subscriptions", "organizations_url": "https://api.github.com/users/adamhaber/orgs", "repos_url": "https://api.github.com/users/adamhaber/repos", "events_url": "https://api.github.com/users/adamhaber/events{/privacy}", "received_events_url": "https://api.github.com/users/adamhaber/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-17T20:58:15Z", "updated_at": "2020-05-19T06:21:41Z", "closed_at": "2020-05-19T06:21:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to finish a small project I've been working on - a small pythonic wrapper around the stan2tfp compiler - and ran into a TF/TFP-nightly pip related problem. This might be a \"pip only\" issue, and not a TF/TFP issue - I'm not sure; I just thought someone here might've encountered this already, or similar issues.\r\n\r\n[Here's](https://github.com/adamhaber/stan2tfp) the package; it has both tf-nightly and tfp-nightly as dependencies (in [setup.py](https://github.com/adamhaber/stan2tfp/blob/963c7435e54cecdeac4cf335e1616665bd140b46/setup.py#L11)). I set up [CI](https://github.com/adamhaber/stan2tfp/blob/master/.github/workflows/pythonpackage.yml) using GitHub Action, in which I use `pip install -e .` to install tf-nightly and tfp-nightly, and everything seems OK. \r\n\r\nI then uploaded it to TestPyPi, created a new local conda environment, and tried to install it using `pip install --index-url https://test.pypi.org/simple/ stan2tfp`; this gives:\r\n```\r\nLooking in indexes: https://test.pypi.org/simple/\r\nCollecting stan2tfp\r\n  Downloading https://test-files.pythonhosted.org/packages/ca/14/8b4cf32fc231fb7abb40d1139515999be0b3061609a51cbd9794d95d567c/stan2tfp-0.1.0-py3-none-any.whl (5.7 kB)\r\nRequirement already satisfied: pip in /Users/adamhaber/miniconda3/envs/tmp_stan2tfp/lib/python3.7/site-packages (from stan2tfp) (20.1)\r\nRequirement already satisfied: numpy in /Users/adamhaber/miniconda3/envs/tmp_stan2tfp/lib/python3.7/site-packages (from stan2tfp) (1.18.4)\r\nCollecting tfp-nightly\r\n  Downloading https://test-files.pythonhosted.org/packages/71/29/00f4aed8ce6848922fab7ae7b79440175a5d2a205885bda95c3012b86f14/tfp-nightly-0.0.1.dev20180309.tar.gz (60 kB)\r\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 60 kB 363 kB/s \r\nERROR: Could not find a version that satisfies the requirement tf-nightly (from stan2tfp) (from versions: none)\r\nERROR: No matching distribution found for tf-nightly (from stan2tfp)\r\n```\r\nFor some reason pip is downloading `tfp-nightly-0.0.1.dev20180309.`; indeed, when I do:\r\n```\r\npip install tf-nightly tfp-nightly\r\npip install --index-url https://test.pypi.org/simple/ stan2tfp\r\n```\r\neverything works. I tried changing the requirements in setup.py to `tf-nightly>=2.3.0,tfp-nightly>=0.11.0` but that didn't help, either. Is there a better way to make pip install the latest nightly versions? \r\n\r\nAny relevant feedback would be much appreciated!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/935", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/935/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/935/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/935/events", "html_url": "https://github.com/tensorflow/probability/issues/935", "id": 619573879, "node_id": "MDU6SXNzdWU2MTk1NzM4Nzk=", "number": 935, "title": "variational gaussian process layer", "user": {"login": "smazcw3", "id": 1272655, "node_id": "MDQ6VXNlcjEyNzI2NTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1272655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smazcw3", "html_url": "https://github.com/smazcw3", "followers_url": "https://api.github.com/users/smazcw3/followers", "following_url": "https://api.github.com/users/smazcw3/following{/other_user}", "gists_url": "https://api.github.com/users/smazcw3/gists{/gist_id}", "starred_url": "https://api.github.com/users/smazcw3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smazcw3/subscriptions", "organizations_url": "https://api.github.com/users/smazcw3/orgs", "repos_url": "https://api.github.com/users/smazcw3/repos", "events_url": "https://api.github.com/users/smazcw3/events{/privacy}", "received_events_url": "https://api.github.com/users/smazcw3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-16T23:22:46Z", "updated_at": "2020-05-16T23:23:06Z", "closed_at": "2020-05-16T23:23:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/927", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/927/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/927/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/927/events", "html_url": "https://github.com/tensorflow/probability/issues/927", "id": 617205604, "node_id": "MDU6SXNzdWU2MTcyMDU2MDQ=", "number": 927, "title": "WARNING:tensorflow:Gradients do not exist for variables ['rnn/my_gru/interim:0'] when minimizing the loss", "user": {"login": "ChenHaoHere", "id": 51502529, "node_id": "MDQ6VXNlcjUxNTAyNTI5", "avatar_url": "https://avatars0.githubusercontent.com/u/51502529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChenHaoHere", "html_url": "https://github.com/ChenHaoHere", "followers_url": "https://api.github.com/users/ChenHaoHere/followers", "following_url": "https://api.github.com/users/ChenHaoHere/following{/other_user}", "gists_url": "https://api.github.com/users/ChenHaoHere/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChenHaoHere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChenHaoHere/subscriptions", "organizations_url": "https://api.github.com/users/ChenHaoHere/orgs", "repos_url": "https://api.github.com/users/ChenHaoHere/repos", "events_url": "https://api.github.com/users/ChenHaoHere/events{/privacy}", "received_events_url": "https://api.github.com/users/ChenHaoHere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-13T07:18:05Z", "updated_at": "2020-05-13T21:02:18Z", "closed_at": "2020-05-13T19:25:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "> I rewrite the GRU by inheriting from tf.keras.layers.AbstractRNNCell and build a regressssion model by inheriting tf.keras.models.Model. \r\n>\r\n> Than I trained my model with model.fit and occurred the **fatal warning **: tensorflow:Gradients do not exist for variables ['rnn/my_gru/interim:0'] when minimizing the loss\r\n>\r\n> **To confirm this warning**, I print the **\"interim\" variables** after one epoch and ten epochs and unfortunately they remained same **while other trainable variables have changed**\r\n\r\n**Here's my code defining my GRU layer**\r\n\r\n```python\r\nclass myGRU(keras.layers.AbstractRNNCell):\r\n    def __init__(self, units, **kwargs):\r\n        self.units = units\r\n        super(myGRU, self).__init__(**kwargs)\r\n\r\n    @property\r\n    def state_size(self):\r\n        return self.units\r\n\r\n    def build(self, input_shape):\r\n        self.dim = input_shape[-1]\r\n\r\n        self.w_r = self.add_weight(shape=[self.dim+self.units, self.units], initializer='uniform', name='reset_gate', trainable=True)\r\n        self.b_r = self.add_weight(shape=[self.units], initializer='zeros', name='reset gate bias', trainable=True)\r\n\r\n        self.w_z = self.add_weight(shape=[self.dim+self.units, self.units], initializer='uniform', name='update_gate', trainable=True)\r\n        self.b_z = self.add_weight(shape=[self.units], initializer='zeros', name='update gate bias', trainable=True) \r\n\r\n        self.w_n = self.add_weight(shape=[self.dim+self.units, self.units], initializer='uniform', name='interim', trainable=True)\r\n        self.b_n = self.add_weight(shape=[self.units], initializer='zeros', name='interim gate bias', trainable=True)\r\n\r\n        self.built = True\r\n\r\n    def call(self, inputs, states):\r\n        prev_output = states[0]\r\n\r\n        r = tf.nn.sigmoid(inputs @ self.w_r[:self.dim] + prev_output @ self.w_r[self.dim:] + self.b_r)\r\n        z = tf.nn.sigmoid(inputs @ self.w_z[:self.dim] + prev_output @ self.w_z[self.dim:] + self.b_z)\r\n        n = tf.nn.tanh(inputs @ self.w_r[:self.dim] + prev_output @ (r * self.w_r[self.dim:]) + self.b_n)\r\n        \r\n        output = (1 - z) * prev_output + z * n\r\n\r\n        return output, output\r\n\r\nclass GRUReg(keras.models.Model):\r\n    def __init__(self, units, **kwargs):\r\n        super(GRUReg, self).__init__(**kwargs)\r\n        self.gru = keras.layers.RNN(myGRU(units))\r\n        self.dense = keras.layers.Dense(1)\r\n    \r\n    def call(self, inputs):\r\n        x = self.gru(inputs)\r\n        x = self.dense(x)\r\n        return x\r\n```\r\n\r\n**Here's the code about training**\r\n\r\n```python\r\ntf.keras.backend.clear_session()\r\nmodel = GRUReg(32)\r\nmodel.compile(optimizer=keras.optimizers.RMSprop(), loss='mae', metrics=['mae'])\r\nreduce_lr = keras.callbacks.ReduceLROnPlateau(monitor='loss', factor=0.2, patience=5, min_lr=0.001)\r\n# tf.config.experimental_run_functions_eagerly(True)\r\nhistory = model.fit(X_train, y_train, epochs=100, validation_split=0.2, callbacks=[reduce_lr])\r\n```\r\n\r\n**Here's the warning**\r\n\r\n![_4MD@__`Z3`MRXOO_~_2_@L.png](https://i.loli.net/2020/05/13/ig9kvQ3ltzpTVMm.png)\r\n\r\nPlatform: Colab", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/925", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/925/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/925/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/925/events", "html_url": "https://github.com/tensorflow/probability/issues/925", "id": 616862932, "node_id": "MDU6SXNzdWU2MTY4NjI5MzI=", "number": 925, "title": "weights_prior unexpected behavior", "user": {"login": "Houssem1995", "id": 24575436, "node_id": "MDQ6VXNlcjI0NTc1NDM2", "avatar_url": "https://avatars1.githubusercontent.com/u/24575436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Houssem1995", "html_url": "https://github.com/Houssem1995", "followers_url": "https://api.github.com/users/Houssem1995/followers", "following_url": "https://api.github.com/users/Houssem1995/following{/other_user}", "gists_url": "https://api.github.com/users/Houssem1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/Houssem1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Houssem1995/subscriptions", "organizations_url": "https://api.github.com/users/Houssem1995/orgs", "repos_url": "https://api.github.com/users/Houssem1995/repos", "events_url": "https://api.github.com/users/Houssem1995/events{/privacy}", "received_events_url": "https://api.github.com/users/Houssem1995/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-12T18:21:20Z", "updated_at": "2020-05-20T09:20:13Z", "closed_at": "2020-05-20T09:20:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to build a time series structural model and get the coefficients of the external factor. \r\nhere is the structure of the model \r\n\r\n```\r\n local_linear_trend = tfp.sts.LocalLinearTrend(observed_time_series=ts, \r\n    name='LLT')\r\nday_of_week = tfp.sts.Seasonal(\r\n    num_seasons=7, \r\n    num_steps_per_season=1,\r\n    observed_time_series=ts, \r\n    name='day_of_week',\r\n)\r\nmonth_of_year = tfp.sts.Seasonal(\r\n    num_seasons=12, \r\n    num_steps_per_season=30,\r\n    observed_time_series=ts, \r\n    name='month_of_year',\r\n)\r\nyearweek = tfp.sts.Seasonal(\r\n    num_seasons=52, \r\n    num_steps_per_season=7,\r\n    observed_time_series=ts, \r\n    name='yearweek',\r\n)\r\nx_var = tfp.sts.LinearRegression(\r\n    design_matrix=design_matrix_fb,\r\n    weights_prior=tfd.Exponential(rate=2),\r\n    name='external_factor')\r\nmodel_components_base = [\r\n    local_linear_trend, \r\n    day_of_week,\r\n    month_of_year,\r\n    x_var\r\n]\r\nmodel_base = tfp.sts.Sum(\r\n    components=model_components_base, \r\n    observed_time_series=ts\r\n)\r\n```\r\n\r\n then I  am sampling and plotting the prior distribution using this function \r\n\r\n\r\n```\r\nvariational_posteriors = tfp.sts.build_factored_surrogate_posterior(\r\n  model=direct_model_base, \r\n  seed=42\r\n)\r\nq_prior_samples = variational_posteriors.sample(200) \r\nnum_parameters = len(direct_model_base.parameters)\r\n\r\nfig, ax = plt.subplots(num_parameters, 1, figsize=(12, 21))\r\n\r\nfor i, param in enumerate(direct_model_base.parameters):\r\n    \r\n    param_mean = np.mean(q_prior_samples[param.name], axis=0)\r\n    param_median = np.median(q_prior_samples[param.name], axis=0)\r\n    param_std = np.std(q_prior_samples[param.name], axis=0)\r\n    \r\n    sns.distplot(a=q_prior_samples[param.name], rug=True, ax=ax[i])\r\n    ax[i].set(title=param.name)\r\n    ax[i].axvline(x= param_median, linestyle='--', label='median')\r\n    ax[i].axvline(x= param_mean, linestyle='--', label='mean')\r\n    ax[i].axvline(x= param_mean + param_std, linestyle='--', label=r'$\\mu \\pm 2\\sigma$')\r\n    ax[i].axvline(x= param_mean - param_std, linestyle='--')\r\n    ax[i].legend()\r\n    \r\nplt.tight_layout(pad=3.0)\r\nplt.suptitle('PRIOR DISTRIBUTIONS', y=0.99);\r\n```\r\n\r\n\r\nEven tho the weight_prior of the external factor is set to an exponential distribution i get this plot for the external factor's weight normal dist with negative values ! \r\nAm I missing something or understanding something wrongly here ? \r\n<img width=\"674\" alt=\"Screenshot 2020-05-12 at 20 15 04\" src=\"https://user-images.githubusercontent.com/24575436/81730149-5f655f00-948d-11ea-8aeb-6cb8c980268a.png\">\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/924", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/924/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/924/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/924/events", "html_url": "https://github.com/tensorflow/probability/issues/924", "id": 616839028, "node_id": "MDU6SXNzdWU2MTY4MzkwMjg=", "number": 924, "title": "tfp.optimizer.lbfgs_minimize calls function for converged models", "user": {"login": "cristicbz", "id": 801328, "node_id": "MDQ6VXNlcjgwMTMyOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/801328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cristicbz", "html_url": "https://github.com/cristicbz", "followers_url": "https://api.github.com/users/cristicbz/followers", "following_url": "https://api.github.com/users/cristicbz/following{/other_user}", "gists_url": "https://api.github.com/users/cristicbz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cristicbz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cristicbz/subscriptions", "organizations_url": "https://api.github.com/users/cristicbz/orgs", "repos_url": "https://api.github.com/users/cristicbz/repos", "events_url": "https://api.github.com/users/cristicbz/events{/privacy}", "received_events_url": "https://api.github.com/users/cristicbz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-12T17:41:28Z", "updated_at": "2020-06-02T13:38:35Z", "closed_at": "2020-06-02T13:38:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As far as I can tell, `lbfgs_minimize` continues to call the passed in `value_and_gradients`  function with the fullet set of parameters, even if some of the models in the batch have converged. When passing in a `tf.function` as `value_and_gradients`, I don't think this can be optimised away.\r\n\r\nWould it be possible to have `value_and_gradients` only be called with the subset of the models that haven't converged yet?\r\n\r\nWe've previously implemented a batch optimizer that worked on a `(num_models, num_parameters)` tensor and call the underlying function on a slice of that tensor which included only the unconverged models.\r\n\r\nSince unconverged models may not necessarily be contiguous, this worked by swapping out a newly converged model's parameters with the last one in the tensor and then decreased the slice by 1. As you do this, you can keep track of the permutation you've applied so far, and at the end unpermute the parameters.\r\n\r\nI can see a few issues with meshing this with the current implementation of LBFGS. First, the `lbfgs_minimize` function accepts any number of batching dimensions, while slicing the way I described only works for a single batching dimension. Secondly, it would require the `value_and_gradients` function to accept a dynamic shape tensor (for the first dimension).\r\n\r\nI don't know what the best way to implement this while keeping the curent API is. We could just have a boolean that controls this behaviour (and asserts the shape of the parameters is a matrix). \r\n\r\nIs this a good idea? Is there any desire for a PR implementing this?\r\n\r\n\r\n**Edit** I submitted a PR #928 that proposes a minimal change to the API of `lbfgs_minimize` allowing optimization to be resumed after a single model converges. In between calls to `lbfgs_minimize` the user can do the swapping out of model as appropriate.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/923", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/923/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/923/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/923/events", "html_url": "https://github.com/tensorflow/probability/issues/923", "id": 616265049, "node_id": "MDU6SXNzdWU2MTYyNjUwNDk=", "number": 923, "title": "Accessing step-size in TransitionKernel target_log_prob_fn", "user": {"login": "RobinKa", "id": 2614101, "node_id": "MDQ6VXNlcjI2MTQxMDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2614101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RobinKa", "html_url": "https://github.com/RobinKa", "followers_url": "https://api.github.com/users/RobinKa/followers", "following_url": "https://api.github.com/users/RobinKa/following{/other_user}", "gists_url": "https://api.github.com/users/RobinKa/gists{/gist_id}", "starred_url": "https://api.github.com/users/RobinKa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RobinKa/subscriptions", "organizations_url": "https://api.github.com/users/RobinKa/orgs", "repos_url": "https://api.github.com/users/RobinKa/repos", "events_url": "https://api.github.com/users/RobinKa/events{/privacy}", "received_events_url": "https://api.github.com/users/RobinKa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-12T00:05:59Z", "updated_at": "2020-05-12T00:19:34Z", "closed_at": "2020-05-12T00:19:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to simulate Quantum Field Theory using MCMC. An algorithm for doing this is described [here (pdf) on page 119](https://www.andrew.cmu.edu/user/cmorning/HUGS2006_lectures_trans.pdf). Basically it uses the Metropolis algorithm, however the acceptance probability also depends on the step size taken by Metropolis: \r\n![image](https://user-images.githubusercontent.com/2614101/81623817-7a33c700-93ec-11ea-86e5-9d24e2484439.png)\r\n(`Delta` is the step size chosen for the current step, `S` is the action which I can already calculate)\r\nIs there any way to currently do this with TFP?\r\n\r\nWhat I have now looks something like this:\r\n\r\n```python\r\ndef joint_log_prob(path):\r\n    action = get_action(path)\r\n\r\n    # Since this is the log probability, we return it without exponentiating\r\n    return action\r\n```\r\n\r\nWhere `get_action(path)` calculates the action of the path which is a number (not important to understand this to understand my issue I think). Later this `joint_log_prob` is used as the `target_log_prob_fn` for a sampler (called TransitionKernel in TFP?).\r\n\r\nSo here for Metropolis this works out to the acceptance probability\r\n\r\n`e^(ProposedAction) / e^(CurrentAction) = e^(ProposedAction - CurrentAction)`\r\n\r\nHowever the desired acceptance probability (from the slides) is\r\n`e^(-StepSize * (ProposedAction - CurrentAction))`\r\n\r\nSo an extra factor of `-StepSize` would be required. Is there any way of accessing the actual step size used for the step from within the joint log prob function? Or alternatively, is there any way to modify the acceptance probability so I can add the factor there?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/918", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/918/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/918/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/918/events", "html_url": "https://github.com/tensorflow/probability/issues/918", "id": 614601441, "node_id": "MDU6SXNzdWU2MTQ2MDE0NDE=", "number": 918, "title": "JointDistributionSequential throws AttributeError when used in DistributionLambda", "user": {"login": "MArpogaus", "id": 38564291, "node_id": "MDQ6VXNlcjM4NTY0Mjkx", "avatar_url": "https://avatars0.githubusercontent.com/u/38564291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MArpogaus", "html_url": "https://github.com/MArpogaus", "followers_url": "https://api.github.com/users/MArpogaus/followers", "following_url": "https://api.github.com/users/MArpogaus/following{/other_user}", "gists_url": "https://api.github.com/users/MArpogaus/gists{/gist_id}", "starred_url": "https://api.github.com/users/MArpogaus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MArpogaus/subscriptions", "organizations_url": "https://api.github.com/users/MArpogaus/orgs", "repos_url": "https://api.github.com/users/MArpogaus/repos", "events_url": "https://api.github.com/users/MArpogaus/events{/privacy}", "received_events_url": "https://api.github.com/users/MArpogaus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-08T08:43:08Z", "updated_at": "2020-05-08T17:50:24Z", "closed_at": "2020-05-08T17:44:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I am currently struggling with the following problem.\r\n\r\nIt seam like `JointDistributionSequential` is not playing well with `DistributionLambda`.\r\n\r\nA minimal example to reproduce the bug, taken from the test function in `distribution_layer_test.py::JointDistributionLayer`):\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\nfrom tensorflow_probability import distributions as tfd\r\n\r\nx = tf.keras.Input(shape=())\r\ny = tfp.layers.VariableLayer(shape=[2, 4, 3], dtype=tf.float32)(x)\r\ny = tf.keras.layers.Dense(5, use_bias=False)(y)\r\ny = tfp.layers.DistributionLambda(\r\n    lambda t: tfd.JointDistributionSequential([  # pylint: disable=g-long-lambda\r\n        tfd.Gamma(t[..., 0], t[..., 1]),\r\n        tfd.Normal(t[..., 2], 1),\r\n        lambda m, s: tfd.Normal(loc=m, scale=s),\r\n    ]),\r\n)(y)\r\nm = tf.keras.Model(x, y)\r\n```\r\nWhen executed with\r\n\r\n**TFP Version** 0.8.0-rc0\r\n**TF  Version** 2.1.0\r\n\r\ni get the following exception:\r\n\r\n```\r\nAttributeError: type object 'TypeSpec' has no attribute 'from_value'\r\n```\r\n\r\nFull traceback:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-17-c014c4fe9078> in <module>\r\n     49         logits_rshpd,\r\n     50         locs_rshpd,\r\n---> 51         scales_rshpd\r\n     52     )\r\n     53 )\r\n\r\n~/miniconda3/envs/tfgpu/lib/python3.7/site-packages/tensorflow_probability/python/layers/distribution_layer.py in __call__(self, inputs, *args, **kwargs)\r\n    205     self._enter_dunder_call = True\r\n    206     distribution, _ = super(DistributionLambda, self).__call__(\r\n--> 207         inputs, *args, **kwargs)\r\n    208     self._enter_dunder_call = False\r\n    209     return distribution\r\n\r\n~/miniconda3/envs/tfgpu/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs)\r\n    805                 inputs, outputs, args, kwargs)\r\n    806           self._handle_activity_regularization(inputs, outputs)\r\n--> 807           self._set_mask_metadata(inputs, outputs, input_masks)\r\n    808           if hasattr(self, '_set_inputs') and not self.inputs:\r\n    809             # Subclassed network: explicitly set metadata normally set by\r\n\r\n~/miniconda3/envs/tfgpu/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py in _set_mask_metadata(self, inputs, outputs, previous_mask)\r\n   1950         pass\r\n   1951 \r\n-> 1952     if tf_utils.are_all_symbolic_tensors(flat_outputs):\r\n   1953       for output in flat_outputs:\r\n   1954         if getattr(output, '_keras_mask', None) is not None:\r\n\r\n~/miniconda3/envs/tfgpu/lib/python3.7/site-packages/tensorflow_core/python/keras/utils/tf_utils.py in are_all_symbolic_tensors(tensors)\r\n    314 \r\n    315 def are_all_symbolic_tensors(tensors):\r\n--> 316   return all(is_symbolic_tensor(tensor) for tensor in tensors)\r\n    317 \r\n    318 \r\n\r\n~/miniconda3/envs/tfgpu/lib/python3.7/site-packages/tensorflow_core/python/keras/utils/tf_utils.py in <genexpr>(.0)\r\n    314 \r\n    315 def are_all_symbolic_tensors(tensors):\r\n--> 316   return all(is_symbolic_tensor(tensor) for tensor in tensors)\r\n    317 \r\n    318 \r\n\r\n~/miniconda3/envs/tfgpu/lib/python3.7/site-packages/tensorflow_core/python/keras/utils/tf_utils.py in is_symbolic_tensor(tensor)\r\n    343             not context.executing_eagerly())\r\n    344   if isinstance(tensor, composite_tensor.CompositeTensor):\r\n--> 345     component_tensors = nest.flatten(tensor, expand_composites=True)\r\n    346     return any(hasattr(t, 'graph') for t in component_tensors)\r\n    347   if isinstance(tensor, ops.Tensor):\r\n\r\n~/miniconda3/envs/tfgpu/lib/python3.7/site-packages/tensorflow_core/python/util/nest.py in flatten(structure, expand_composites)\r\n    272     TypeError: The nest is or contains a dict with non-sortable keys.\r\n    273   \"\"\"\r\n--> 274   return _pywrap_utils.Flatten(structure, expand_composites)\r\n    275 \r\n    276 \r\n\r\n~/miniconda3/envs/tfgpu/lib/python3.7/site-packages/tensorflow_probability/python/layers/internal/tensor_tuple.py in _type_spec(self)\r\n     41   @property\r\n     42   def _type_spec(self):\r\n---> 43     return TensorTupleSpec(map(type_spec.TypeSpec.from_value, self._sequence))\r\n     44 \r\n     45   def _to_components(self):\r\n\r\nAttributeError: type object 'TypeSpec' has no attribute 'from_value'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/916", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/916/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/916/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/916/events", "html_url": "https://github.com/tensorflow/probability/issues/916", "id": 613761290, "node_id": "MDU6SXNzdWU2MTM3NjEyOTA=", "number": 916, "title": "Error in Documentation", "user": {"login": "luke199629", "id": 8813788, "node_id": "MDQ6VXNlcjg4MTM3ODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/8813788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luke199629", "html_url": "https://github.com/luke199629", "followers_url": "https://api.github.com/users/luke199629/followers", "following_url": "https://api.github.com/users/luke199629/following{/other_user}", "gists_url": "https://api.github.com/users/luke199629/gists{/gist_id}", "starred_url": "https://api.github.com/users/luke199629/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luke199629/subscriptions", "organizations_url": "https://api.github.com/users/luke199629/orgs", "repos_url": "https://api.github.com/users/luke199629/repos", "events_url": "https://api.github.com/users/luke199629/events{/privacy}", "received_events_url": "https://api.github.com/users/luke199629/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-07T04:18:42Z", "updated_at": "2020-05-07T04:20:19Z", "closed_at": "2020-05-07T04:20:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Line 565 to 566 in file\r\nprobability/tensorflow_probability/python/math/interpolation.py\r\nshould be \r\n`x_ref_min = [0., 2 * np.pi]`\r\n`x_ref_max = [0., 2 * np.pi]`\r\nto produce the correct example output", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/910", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/910/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/910/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/910/events", "html_url": "https://github.com/tensorflow/probability/issues/910", "id": 611036095, "node_id": "MDU6SXNzdWU2MTEwMzYwOTU=", "number": 910, "title": "Mention that tf-nightly is recommended dependency to install tfp from source", "user": {"login": "matthewfeickert", "id": 5142394, "node_id": "MDQ6VXNlcjUxNDIzOTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5142394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewfeickert", "html_url": "https://github.com/matthewfeickert", "followers_url": "https://api.github.com/users/matthewfeickert/followers", "following_url": "https://api.github.com/users/matthewfeickert/following{/other_user}", "gists_url": "https://api.github.com/users/matthewfeickert/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewfeickert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewfeickert/subscriptions", "organizations_url": "https://api.github.com/users/matthewfeickert/orgs", "repos_url": "https://api.github.com/users/matthewfeickert/repos", "events_url": "https://api.github.com/users/matthewfeickert/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewfeickert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-01T23:20:49Z", "updated_at": "2020-05-14T23:16:14Z", "closed_at": "2020-05-14T23:16:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Description\r\n\r\nAt the moment (2020-05-01) the [instructions on installing from source](https://github.com/tensorflow/probability/blob/34703541f15160aaf5c003e6b718807374b57545/README.md#installing-from-source) don't mention what version of TensorFlow is required to build TensorFlow Probability. However, if I setup a clean virtual environment\r\n\r\n```\r\n$ python3 -m venv \"${HOME}/.venvs/tfp-dev\"\r\n$ . \"${HOME}/.venvs/tfp-dev/bin/activate\"\r\n(tfp-dev) $ python -m pip install --upgrade pip setuptools wheel\r\n```\r\n\r\nand then clone TFP and setup a `build.sh` script for myself\r\n\r\n```\r\n(tfp-dev) $ git clone https://github.com/tensorflow/probability.git\r\n(tfp-dev) $ cd probability\r\n(tfp-dev) $ cat build.sh\r\n#!/usr/bin/env bash\r\n\r\nbazel clean --expunge\r\nbazel build --copt=-O3 --copt=-march=native :pip_pkg\r\nPKGDIR=$(mktemp -d)\r\n./bazel-bin/pip_pkg $PKGDIR\r\npython -m pip install --upgrade $PKGDIR/*.whl\r\n```\r\nthen if I install just `tensorflow`\r\n\r\n```\r\n(tfp-dev) $ python -m pip install tensorflow\r\n```\r\n\r\nthe build (`(tfp-dev) $ bash build.sh`) will fail. However, if I install `tf-nightly` _instead_ (here I clean out the venv and start fresh)\r\n\r\n```\r\n(tfp-dev) $ python -m pip install --upgrade tf-nightly\r\n(tfp-dev) $ bash build.sh\r\n...\r\nBuild complete. Wheel files are in /tmp/tmp.VNEDwf88Vi\r\nProcessing /tmp/tmp.VNEDwf88Vi/tfp_nightly-0.11.0.dev20200501-py2.py3-none-any.whl\r\nRequirement already satisfied, skipping upgrade: numpy>=1.13.3 in /home/feickert/.venvs/tfp-dev/lib/python3.7/site-packages (from tfp-nightly==0.11.0.dev20200501) (1.18.3)\r\nCollecting decorator\r\n  Using cached decorator-4.4.2-py2.py3-none-any.whl (9.2 kB)\r\nRequirement already satisfied, skipping upgrade: six>=1.10.0 in /home/feickert/.venvs/tfp-dev/lib/python3.7/site-packages (from tfp-nightly==0.11.0.dev20200501) (1.14.0)\r\nRequirement already satisfied, skipping upgrade: gast>=0.3.2 in /home/feickert/.venvs/tfp-dev/lib/python3.7/site-packages (from tfp-nightly==0.11.0.dev20200501) (0.3.3)\r\nCollecting cloudpickle==1.3\r\n  Using cached cloudpickle-1.3.0-py2.py3-none-any.whl (26 kB)\r\nInstalling collected packages: decorator, cloudpickle, tfp-nightly\r\nSuccessfully installed cloudpickle-1.3.0 decorator-4.4.2 tfp-nightly-0.11.0.dev20200501\r\n```\r\n\r\nGiven this, it would be helpful if it was recommended that `tf-nightly` was installed in the docs.\r\n\r\n# Proposed Change\r\n\r\nIn the `README` note that while not a hard requirement it is highly recommended that `tf-nightly` be installed before trying to build `TensorFlow Probability` from source.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/909", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/909/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/909/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/909/events", "html_url": "https://github.com/tensorflow/probability/issues/909", "id": 610987653, "node_id": "MDU6SXNzdWU2MTA5ODc2NTM=", "number": 909, "title": "Add link to install from source instructions in CONTRIBUTING ", "user": {"login": "matthewfeickert", "id": 5142394, "node_id": "MDQ6VXNlcjUxNDIzOTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5142394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewfeickert", "html_url": "https://github.com/matthewfeickert", "followers_url": "https://api.github.com/users/matthewfeickert/followers", "following_url": "https://api.github.com/users/matthewfeickert/following{/other_user}", "gists_url": "https://api.github.com/users/matthewfeickert/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewfeickert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewfeickert/subscriptions", "organizations_url": "https://api.github.com/users/matthewfeickert/orgs", "repos_url": "https://api.github.com/users/matthewfeickert/repos", "events_url": "https://api.github.com/users/matthewfeickert/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewfeickert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-01T21:56:13Z", "updated_at": "2020-05-01T21:59:23Z", "closed_at": "2020-05-01T21:58:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Description\r\n\r\nOn a similar vein as Issue #715, it would be helpful for new contributors if in the `CONTRIBUTING.md` there was instructions on how to properly install TensorFlow Probability from source so that you can make a PR and run the tests. This is currently (as of 2020-05-01) covered in [`tensorflow_probability/g3doc/install.md`](https://github.com/tensorflow/probability/blob/16ec0e26503f3177a1b38b8508120163bef49752/tensorflow_probability/g3doc/install.md#install-from-source) but this seems to be a rather non-obvious place to look for it (to me at least).\r\n\r\n# Proposed Change\r\n\r\nEither directly include a section on how to install TensorFlow Probability from source in `CONTRIBUTING.md`, or link to the \"Install from source\" section in `tensorflow_probability/g3doc/install.md` from inside of `CONTRIBUTING.md`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/903", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/903/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/903/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/903/events", "html_url": "https://github.com/tensorflow/probability/issues/903", "id": 608332538, "node_id": "MDU6SXNzdWU2MDgzMzI1Mzg=", "number": 903, "title": "DeferredTensor and TransformedVariable when used as GradientTape source", "user": {"login": "hartikainen", "id": 2308543, "node_id": "MDQ6VXNlcjIzMDg1NDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2308543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hartikainen", "html_url": "https://github.com/hartikainen", "followers_url": "https://api.github.com/users/hartikainen/followers", "following_url": "https://api.github.com/users/hartikainen/following{/other_user}", "gists_url": "https://api.github.com/users/hartikainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/hartikainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hartikainen/subscriptions", "organizations_url": "https://api.github.com/users/hartikainen/orgs", "repos_url": "https://api.github.com/users/hartikainen/repos", "events_url": "https://api.github.com/users/hartikainen/events{/privacy}", "received_events_url": "https://api.github.com/users/hartikainen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-28T13:46:18Z", "updated_at": "2020-04-28T19:39:27Z", "closed_at": "2020-04-28T19:39:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Both of the examples below fail. Seems like these should work?\r\n\r\n## 1. `tfp.util.DeferredTensor`\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\n\r\nlog_x = tf.Variable(0.0)\r\nx = tfp.util.DeferredTensor(log_x, tf.exp)\r\nwith tf.GradientTape() as g:\r\n    y = x * x\r\n\r\ndy_dx = g.gradient(y, x)\r\n```\r\n\r\n```\r\n$ python ./tests/test_tfp_deferred_tensor_gradient.py\r\nTraceback (most recent call last):\r\n  File \"./tests/test_tfp_deferred_tensor_gradient.py\", line 10, in <module>\r\n    dy_dx = g.gradient(y, x)\r\n  File \"/Users/hartikainen/conda/envs/softlearning-2/lib/python3.7/site-packages/tensorflow/python/eager/backprop.py\", line 1048, in gradient\r\n    unconnected_gradients=unconnected_gradients)\r\n  File \"/Users/hartikainen/conda/envs/softlearning-2/lib/python3.7/site-packages/tensorflow/python/eager/imperative_grad.py\", line 77, in imperative_grad\r\n    compat.as_str(unconnected_gradients.value))\r\nAttributeError: 'DeferredTensor' object has no attribute '_id'\r\n```\r\n\r\n## 2. `tfp.util.TransformedVariable`\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\n\r\nx = tfp.util.TransformedVariable(tf.exp(0.0), tfp.bijectors.Exp())\r\nwith tf.GradientTape() as g:\r\n    y = x * x\r\n\r\ndy_dx = g.gradient(y, x)\r\n```\r\n\r\n```\r\n$ python ./tests/test_tfp_deferred_tensor_gradient.py\r\nTraceback (most recent call last):\r\n  File \"./tests/test_tfp_deferred_tensor_gradient.py\", line 17, in <module>\r\n    dy_dx = g.gradient(y, x)\r\n  File \"/Users/hartikainen/conda/envs/softlearning-2/lib/python3.7/site-packages/tensorflow/python/eager/backprop.py\", line 1048, in gradient\r\n    unconnected_gradients=unconnected_gradients)\r\n  File \"/Users/hartikainen/conda/envs/softlearning-2/lib/python3.7/site-packages/tensorflow/python/eager/imperative_grad.py\", line 77, in imperative_grad\r\n    compat.as_str(unconnected_gradients.value))\r\nAttributeError: 'TransformedVariable' object has no attribute '_id'\r\n```\r\n\r\n```\r\n$ pip freeze | grep \"tf\\|tensor\\|nightly\"\r\ntensorboard==2.2.0\r\ntensorboard-plugin-wit==1.6.0.post3\r\ntensorflow==2.2.0rc3\r\ntensorflow-addons==0.9.1\r\ntensorflow-estimator==2.2.0\r\ntensorflow-probability==0.10.0rc0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/902", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/902/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/902/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/902/events", "html_url": "https://github.com/tensorflow/probability/issues/902", "id": 606818708, "node_id": "MDU6SXNzdWU2MDY4MTg3MDg=", "number": 902, "title": "Cannot save tfd.PixelCNN with tf.train.Checkpoint", "user": {"login": "DrKwint", "id": 3675958, "node_id": "MDQ6VXNlcjM2NzU5NTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3675958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrKwint", "html_url": "https://github.com/DrKwint", "followers_url": "https://api.github.com/users/DrKwint/followers", "following_url": "https://api.github.com/users/DrKwint/following{/other_user}", "gists_url": "https://api.github.com/users/DrKwint/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrKwint/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrKwint/subscriptions", "organizations_url": "https://api.github.com/users/DrKwint/orgs", "repos_url": "https://api.github.com/users/DrKwint/repos", "events_url": "https://api.github.com/users/DrKwint/events{/privacy}", "received_events_url": "https://api.github.com/users/DrKwint/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-25T17:36:30Z", "updated_at": "2020-04-28T00:23:33Z", "closed_at": "2020-04-28T00:19:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a duplicate of https://github.com/tensorflow/tensorflow/issues/38893, but I'm also submitting here because I'm unsure which repo it should be on. Apologies if this is the wrong place for it.\r\n\r\nSystem information\r\n\r\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\r\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04\r\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\r\nTensorFlow installed from (source or binary): source\r\nTensorFlow version (use command below): v2.1.0-rc2-17-ge5bf8de 2.1.0\r\nPython version: 3.6.9\r\nBazel version (if compiling from source):\r\nGCC/Compiler version (if compiling from source):\r\nCUDA/cuDNN version: 10.1\r\nGPU model and memory: GTX 1070\r\nYou can collect some of this information using our environment capture\r\nscript\r\nYou can also obtain the TensorFlow version with:\r\n\r\nTF 1.0: python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\nTF 2.0: python -c \"import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)\"\r\nDescribe the current behavior\r\nTrying to save a model which includes a tfd.PixelCNN gives the traceback:\r\n\r\n  File \"test.py\", line 16, in <module>\r\n    checkpoint.save(file_prefix='fails_before_here')\r\n  File \"/home/equint/GitHub/pyroclast/env/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/util.py\", line 1902, in save\r\n    file_path = self.write(\"%s-%d\" % (file_prefix, checkpoint_number))\r\n  File \"/home/equint/GitHub/pyroclast/env/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/util.py\", line 1832, in write\r\n    output = self._saver.save(file_prefix=file_prefix)\r\n  File \"/home/equint/GitHub/pyroclast/env/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/util.py\", line 1168, in save\r\n    file_prefix=file_prefix_tensor, object_graph_tensor=object_graph_tensor)\r\n  File \"/home/equint/GitHub/pyroclast/env/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/util.py\", line 1108, in _save_cached_when_graph_building\r\n    object_graph_tensor=object_graph_tensor)\r\n  File \"/home/equint/GitHub/pyroclast/env/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/util.py\", line 1076, in _gather_saveables\r\n    feed_additions) = self._graph_view.serialize_object_graph()\r\n  File \"/home/equint/GitHub/pyroclast/env/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/graph_view.py\", line 379, in serialize_object_graph\r\n    trackable_objects, path_to_root = self._breadth_first_traversal()\r\n  File \"/home/equint/GitHub/pyroclast/env/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/graph_view.py\", line 199, in _breadth_first_traversal\r\n    for name, dependency in self.list_dependencies(current_trackable):\r\n  File \"/home/equint/GitHub/pyroclast/env/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/graph_view.py\", line 159, in list_dependencies\r\n    return obj._checkpoint_dependencies\r\n  File \"/home/equint/GitHub/pyroclast/env/lib/python3.6/site-packages/tensorflow_core/python/training/tracking/data_structures.py\", line 509, in _checkpoint_dependencies\r\n    \"automatically un-wrapped and subsequently ignored.\" % (self,)))\r\nValueError: Unable to save the object ListWrapper([0, 1, 2]) (a list wrapper constructed to track trackable TensorFlow objects). A list element was replaced (__setitem__, __setslice__), deleted (__delitem__, __delslice__), or moved (sort). In order to support restoration on object creation, tracking is exclusively for append-only data structures\r\nDescribe the expected behavior\r\nShouldn't have a problem saving a distribution using tf.train.Checkpoint.save\r\n\r\nStandalone code to reproduce the issue\r\nProvide a reproducible test case that is the bare minimum necessary to generate\r\nthe problem. If possible, please share a link to Colab/Jupyter/any notebook.\r\n\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\ntfd = tfp.distributions\r\n\r\nmodel = tfd.PixelCNN(\r\n    image_shape=(28, 28, 1),\r\n    conditional_shape=(28, 28, 1),\r\n    num_resnet=1,\r\n    num_hierarchies=2,\r\n    num_filters=32,\r\n    num_logistic_mix=4,\r\n    dropout_p=.3,\r\n)\r\ncheckpoint = tf.train.Checkpoint(model=model)\r\ncheckpoint.save(file_prefix='fails_before_here')\r\nOther info / logs Include any logs or source code that would be helpful to\r\ndiagnose the problem. If including tracebacks, please include the full\r\ntraceback. Large logs and files should be attached.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/899", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/899/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/899/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/899/events", "html_url": "https://github.com/tensorflow/probability/issues/899", "id": 606093862, "node_id": "MDU6SXNzdWU2MDYwOTM4NjI=", "number": 899, "title": "L-BFGS function calls per iteration", "user": {"login": "johannafrost", "id": 42173405, "node_id": "MDQ6VXNlcjQyMTczNDA1", "avatar_url": "https://avatars1.githubusercontent.com/u/42173405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johannafrost", "html_url": "https://github.com/johannafrost", "followers_url": "https://api.github.com/users/johannafrost/followers", "following_url": "https://api.github.com/users/johannafrost/following{/other_user}", "gists_url": "https://api.github.com/users/johannafrost/gists{/gist_id}", "starred_url": "https://api.github.com/users/johannafrost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johannafrost/subscriptions", "organizations_url": "https://api.github.com/users/johannafrost/orgs", "repos_url": "https://api.github.com/users/johannafrost/repos", "events_url": "https://api.github.com/users/johannafrost/events{/privacy}", "received_events_url": "https://api.github.com/users/johannafrost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-24T07:11:00Z", "updated_at": "2020-04-28T07:09:56Z", "closed_at": "2020-04-28T07:09:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to set the 'number of function calls per iteration' to 1? I am increasing the number of iterations in each function call, resulting in a lot more iterations than the max_iteration parameter. An old scipy issue describes this as well, and it was solved by setting the parameter that handles number of function calls per iteration to 1. \r\nhttps://github.com/scipy/scipy/issues/3334", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/898", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/898/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/898/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/898/events", "html_url": "https://github.com/tensorflow/probability/issues/898", "id": 605781920, "node_id": "MDU6SXNzdWU2MDU3ODE5MjA=", "number": 898, "title": "Multinomial sampling slower than numpy", "user": {"login": "yoavram", "id": 1288133, "node_id": "MDQ6VXNlcjEyODgxMzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1288133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoavram", "html_url": "https://github.com/yoavram", "followers_url": "https://api.github.com/users/yoavram/followers", "following_url": "https://api.github.com/users/yoavram/following{/other_user}", "gists_url": "https://api.github.com/users/yoavram/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoavram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoavram/subscriptions", "organizations_url": "https://api.github.com/users/yoavram/orgs", "repos_url": "https://api.github.com/users/yoavram/repos", "events_url": "https://api.github.com/users/yoavram/events{/privacy}", "received_events_url": "https://api.github.com/users/yoavram/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-23T18:58:27Z", "updated_at": "2020-04-28T06:27:58Z", "closed_at": "2020-04-28T06:22:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since tfp's multinomial can take a multidimensional probability array and sample from it, I thought it would be faster then looping over the probability array first dimension and using numpy, but that is NOT THE CASE:\r\n```\r\nN = 100000\r\nm = 20\r\nn = 100\r\n\r\np = np.random.exponential(size=(n, m))\r\np /= p.sum(axis=1, keepdims=True)\r\n\r\n%timeit np.array([np.random.multinomial(n, p_) for p_ in p]) // **1.88 ms** \u00b1 378 \u00b5s per loop\r\ndist = tfp.distributions.Multinomial(total_count=N, probs=p)\r\n%timeit dist.sample() // **786 ms** \u00b1 5.84 ms per loop\r\n```\r\n\r\nAm I missing something?\r\n\r\nI'm using a MacBook Pro 2016, no GPU, numpy 1.18.1, tfp 0.9.0, tf 2.1.0.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/897", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/897/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/897/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/897/events", "html_url": "https://github.com/tensorflow/probability/issues/897", "id": 605768001, "node_id": "MDU6SXNzdWU2MDU3NjgwMDE=", "number": 897, "title": "Binomial distribution nan gradient for exact integer `total_count`.", "user": {"login": "rwolst", "id": 3892689, "node_id": "MDQ6VXNlcjM4OTI2ODk=", "avatar_url": "https://avatars2.githubusercontent.com/u/3892689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rwolst", "html_url": "https://github.com/rwolst", "followers_url": "https://api.github.com/users/rwolst/followers", "following_url": "https://api.github.com/users/rwolst/following{/other_user}", "gists_url": "https://api.github.com/users/rwolst/gists{/gist_id}", "starred_url": "https://api.github.com/users/rwolst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rwolst/subscriptions", "organizations_url": "https://api.github.com/users/rwolst/orgs", "repos_url": "https://api.github.com/users/rwolst/repos", "events_url": "https://api.github.com/users/rwolst/events{/privacy}", "received_events_url": "https://api.github.com/users/rwolst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-23T18:40:02Z", "updated_at": "2020-04-24T21:50:07Z", "closed_at": "2020-04-24T21:50:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to perform an optimisation where the `total_count` parameter for a `Binomial` distribution is a function of one of the variables I am trying to optimise.\r\n\r\nFor coding purposes (happy to go into more detail) I am often finding the probability from the distribution for values outside its support. In most case this happily evaluates to 0 along with the gradient.\r\n\r\nHowever if my variable transformation to `total_count` happens to be an exact integer (its type is still `float32`), then my gradient now evaluates to `nan`.\r\n\r\nI've managed to pull a minimum example out of my code:\r\n\r\n    # The gradient in this case is nan.\r\n    x = tf.constant([120.])\r\n    # The gradient in this case is ok!\r\n    # x = tf.constant([120.1])\r\n\r\n    with tf.GradientTape() as t:\r\n        t.watch(x)\r\n    \r\n        N_dist = tfp.distributions.Binomial(\r\n            total_count = x,\r\n            probs = 0.5\r\n        )  \r\n        \r\n        # Set a value to evaluate the pmf at outside of the support.\r\n        N_range = 125.0\r\n\r\n        # Evaluate pmf.\r\n        z = N_dist.prob(N_range)\r\n    \r\n    dx = t.gradient(z, [x])\r\n    print(dx[0])", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/896", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/896/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/896/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/896/events", "html_url": "https://github.com/tensorflow/probability/issues/896", "id": 605651770, "node_id": "MDU6SXNzdWU2MDU2NTE3NzA=", "number": 896, "title": "L-BFGS performs more iterations than max_iterations parameter", "user": {"login": "johannafrost", "id": 42173405, "node_id": "MDQ6VXNlcjQyMTczNDA1", "avatar_url": "https://avatars1.githubusercontent.com/u/42173405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johannafrost", "html_url": "https://github.com/johannafrost", "followers_url": "https://api.github.com/users/johannafrost/followers", "following_url": "https://api.github.com/users/johannafrost/following{/other_user}", "gists_url": "https://api.github.com/users/johannafrost/gists{/gist_id}", "starred_url": "https://api.github.com/users/johannafrost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johannafrost/subscriptions", "organizations_url": "https://api.github.com/users/johannafrost/orgs", "repos_url": "https://api.github.com/users/johannafrost/repos", "events_url": "https://api.github.com/users/johannafrost/events{/privacy}", "received_events_url": "https://api.github.com/users/johannafrost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-23T15:54:03Z", "updated_at": "2020-04-24T07:07:29Z", "closed_at": "2020-04-24T07:07:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "No matter what value I set for the max_iterations value, it iterates a lot more. When setting it to 100, the avergage iterations made is 290. I found an old scipy issue that describes this as well, and it seems to be solved by setting a parameter that handles the 'number of function calls per iterations' to 1. Is it possible to do something similar here? Otherwise, how can I solve this? \r\n(I am using L-BFGS as an optimizer on a neural network for image recognition) ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/894", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/894/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/894/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/894/events", "html_url": "https://github.com/tensorflow/probability/issues/894", "id": 605086667, "node_id": "MDU6SXNzdWU2MDUwODY2Njc=", "number": 894, "title": "What is the purpose of _built_kernel_divergence and _built_bias_divergence?", "user": {"login": "nbro", "id": 9349000, "node_id": "MDQ6VXNlcjkzNDkwMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9349000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbro", "html_url": "https://github.com/nbro", "followers_url": "https://api.github.com/users/nbro/followers", "following_url": "https://api.github.com/users/nbro/following{/other_user}", "gists_url": "https://api.github.com/users/nbro/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbro/subscriptions", "organizations_url": "https://api.github.com/users/nbro/orgs", "repos_url": "https://api.github.com/users/nbro/repos", "events_url": "https://api.github.com/users/nbro/events{/privacy}", "received_events_url": "https://api.github.com/users/nbro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-22T21:27:51Z", "updated_at": "2020-04-27T03:11:25Z", "closed_at": "2020-04-27T03:11:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If you look at the source code of [`_ConvVariational`](https://github.com/tensorflow/probability/blob/v0.9.0/tensorflow_probability/python/layers/conv_variational.py#L81), you will see that there are two mysterious private fields [`self._built_kernel_divergence`](https://github.com/tensorflow/probability/blob/v0.9.0/tensorflow_probability/python/layers/conv_variational.py#L237) and [`self._built_bias_divergence`](https://github.com/tensorflow/probability/blob/v0.9.0/tensorflow_probability/python/layers/conv_variational.py#L244), whose goal and behaviour is completely obscure. \r\n\r\nWhy? \r\n\r\nLook at the following code:\r\n\r\n```\r\n    if not self._built_kernel_divergence:\r\n      self._apply_divergence(self.kernel_divergence_fn,\r\n                             self.kernel_posterior,\r\n                             self.kernel_prior,\r\n                             self.kernel_posterior_tensor,\r\n                             name='divergence_kernel')\r\n      self._built_kernel_divergence = True\r\n    if not self._built_bias_divergence:\r\n      self._apply_divergence(self.bias_divergence_fn,\r\n                             self.bias_posterior,\r\n                             self.bias_prior,\r\n                             self.bias_posterior_tensor,\r\n                             name='divergence_bias')\r\n      self._built_bias_divergence = True\r\n```\r\n\r\nIn theory, those `if` blocks are executed only if `self._built_kernel_divergence` and `self._built_bias_divergence` are `False`. However, if those `if` blocks are executed, both fields are turned into `True`. \r\n\r\nHowever, after having searched a little bit, `self._built_kernel_divergence` and `self._built_bias_divergence` are only used in the `call` method (like above: note that the code above is taken from the `call` method) or in the `build` method, where they are initialized to `False`. So, if you perform more than one forward pass after the model has been built (and I assume that `build` is called only once when the model is built), `self._apply_divergence` will not be called, but this is not possible, because the losses are added to `model.losses` and only `self._apply_divergence` adds the KL divergence to `self.losses` (which are added to `model.losses`). \r\n\r\nWhat's going on here, @jvdillon, @davmre, @csuter , @brianwa84, @jburnim? Can you please help? \r\n\r\nI really need to change the behaviour of a custom layer that inherits from `Convolution2DFlipout` dynamically in a callback. Currently, I was trying to do that by having a non-trainable variable inside this class `A` that inherits from  `Convolution2DFlipout`. Now, I can change that variable, but the problem is that I am getting weird results (i.e. the loss that the optimizer prints in the progress bar does not correspond to the loss I compute manually, see https://stackoverflow.com/q/61371627/3924118, https://stackoverflow.com/q/61372167/3924118, https://stackoverflow.com/q/61357111/3924118 and https://github.com/tensorflow/probability/issues/887)\r\n\r\nThis is so weird! It's like the code that I think I am executing I am not really executing.\r\n\r\nI am using TensorFlow 2.1 and  TFP 0.9.0 and I had to use `experimental_run_tf_function=False` when compiling the model in order not to have the error `NotImplementedError: Cannot convert a symbolic Tensor (truediv:0) to a numpy array.` (see e.g. https://github.com/tensorflow/probability/issues/519, https://github.com/tensorflow/tensorflow/issues/33729)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/891", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/891/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/891/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/891/events", "html_url": "https://github.com/tensorflow/probability/issues/891", "id": 604367388, "node_id": "MDU6SXNzdWU2MDQzNjczODg=", "number": 891, "title": "gradient descent and performance issues with Tf 2.1", "user": {"login": "lordfiftyfive", "id": 6826447, "node_id": "MDQ6VXNlcjY4MjY0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6826447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lordfiftyfive", "html_url": "https://github.com/lordfiftyfive", "followers_url": "https://api.github.com/users/lordfiftyfive/followers", "following_url": "https://api.github.com/users/lordfiftyfive/following{/other_user}", "gists_url": "https://api.github.com/users/lordfiftyfive/gists{/gist_id}", "starred_url": "https://api.github.com/users/lordfiftyfive/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lordfiftyfive/subscriptions", "organizations_url": "https://api.github.com/users/lordfiftyfive/orgs", "repos_url": "https://api.github.com/users/lordfiftyfive/repos", "events_url": "https://api.github.com/users/lordfiftyfive/events{/privacy}", "received_events_url": "https://api.github.com/users/lordfiftyfive/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2020-04-22T00:27:53Z", "updated_at": "2020-07-14T07:21:18Z", "closed_at": "2020-07-14T07:21:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running a tensorflow algorithm using a gaussian process layer which is based on the example provided in google colab. I recently upgraded the the google colab to tensorflow 2.0. Unfortunately the GPU accelerator no longer seems to work. \r\n\r\nThis may be some kind of bug because one of the warning I got said this\r\n\r\nPlease report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, export AUTOGRAPH_VERBOSITY=10) and attach the full output.\r\n\r\nEven worse I am getting the following warnings which seem to be impacting my performance further. Before the upgrade I could get near 0 loss with 270 epochs. Now it has stopped improving altogether after a few hundred epochs and gets permanently stuck at 34.  \r\nThese warning appear to suggest that the lack of a GPU accelerator may not be the only thing affecting the performance of my algorithm\r\n\r\n`WARNING:tensorflow:AutoGraph could not transform <function Model.make_train_function.<locals>.train_function at 0x7f5181e65c80> and will run it as-is.\r\nPlease report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\r\nCause: Bad argument number for Name: 4, expecting 3\r\nTo silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\r\n\r\nWARNING:tensorflow:AutoGraph could not transform <function Model.make_train_function.<locals>.train_function at 0x7f5181e65c80> and will run it as-is.\r\nPlease report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\r\nCause: Bad argument number for Name: 4, expecting 3\r\nTo silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\r\n\r\nWARNING: AutoGraph could not transform <function Model.make_train_function.<locals>.train_function at 0x7f5181e65c80> and will run it as-is.\r\nPlease report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\r\nCause: Bad argument number for Name: 4, expecting 3\r\nTo silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\r\nWARNING:tensorflow:Gradients do not exist for variables ['variational_gaussian_process_6/observation_noise_variance:0'] when minimizing the loss.\r\n\r\nWARNING:tensorflow:Gradients do not exist for variables ['variational_gaussian_process_6/observation_noise_variance:0'] when minimizing the loss.\r\n\r\nWARNING:tensorflow:Gradients do not exist for variables ['variational_gaussian_process_6/observation_noise_variance:0'] when minimizing the loss.\r\n\r\nWARNING:tensorflow:Gradients do not exist for variables ['variational_gaussian_process_6/observation_noise_variance:0'] when minimizing the loss.\r\n\r\nWARNING:tensorflow:Gradients do not exist for variables ['variational_gaussian_process_6/observation_noise_variance:0'] when minimizing the loss.\r\n\r\nWARNING:tensorflow:Gradients do not exist for variables ['variational_gaussian_process_6/observation_noise_variance:0'] when minimizing the loss.\r\n\r\nWARNING:tensorflow:Gradients do not exist for variables ['variational_gaussian_process_6/observation_noise_variance:0'] when minimizing the loss.\r\nI am using a gaussian process layer based on the example provided and upgraded all the code in the google colab I am running it on to tensorflow 2.0. Unfortunately my GPU accelerator no longer seems to work as it gives this error message ``\r\n\r\n\r\nWARNING:tensorflow:Gradients do not exist for variables ['variational_gaussian_process_6/observation_noise_variance:0'] when minimizing the loss.\r\n\r\nWARNING:tensorflow:AutoGraph could not transform <function Model.make_test_function.<locals>.test_function at 0x7f51826cd950> and will run it as-is.\r\nPlease report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\r\nCause: Bad argument number for Name: 4, expecting 3\r\nTo silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\r\n\r\nWARNING:tensorflow:AutoGraph could not transform <function Model.make_test_function.<locals>.test_function at 0x7f51826cd950> and will run it as-is.\r\nPlease report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\r\nCause: Bad argument number for Name: 4, expecting 3\r\nTo silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\r\n\r\nWARNING: AutoGraph could not transform <function Model.make_test_function.<locals>.test_function at 0x7f51826cd950> and will run it as-is.\r\nPlease report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\r\nCause: Bad argument number for Name: 4, expecting 3\r\nTo silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/887", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/887/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/887/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/887/events", "html_url": "https://github.com/tensorflow/probability/issues/887", "id": 603650517, "node_id": "MDU6SXNzdWU2MDM2NTA1MTc=", "number": 887, "title": "How can I change the kernel_divergence_fn property of a Bayesian layer during training?", "user": {"login": "nbro", "id": 9349000, "node_id": "MDQ6VXNlcjkzNDkwMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9349000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbro", "html_url": "https://github.com/nbro", "followers_url": "https://api.github.com/users/nbro/followers", "following_url": "https://api.github.com/users/nbro/following{/other_user}", "gists_url": "https://api.github.com/users/nbro/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbro/subscriptions", "organizations_url": "https://api.github.com/users/nbro/orgs", "repos_url": "https://api.github.com/users/nbro/repos", "events_url": "https://api.github.com/users/nbro/events{/privacy}", "received_events_url": "https://api.github.com/users/nbro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-21T02:06:07Z", "updated_at": "2020-07-24T09:00:40Z", "closed_at": "2020-04-28T20:22:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I need to change the `kernel_divergence_fn` property of each Bayesian layer of my model during training, so that it computes a slightly different thing depending on a certain input `k`. \r\n\r\nI am using Keras to fit the model, so I tried to implement a callback that gets the instance of the model, `k`, and I try to reassign to `kernel_divergence_fn` a new function that computes the KL divergence based on the value of `k`. This callback is called at the end of every batch.\r\n\r\nHowever, this approach doesn't seem to take any effect, but it should because, according to the source code of [`DenseFlipout`](https://github.com/tensorflow/probability/blob/v0.9.0/tensorflow_probability/python/layers/dense_variational.py#L560-L722), `self.kernel_divergence_fn` is called in [the `call` method](https://github.com/tensorflow/probability/blob/v0.9.0/tensorflow_probability/python/layers/dense_variational.py#L180) (i.e. forward pass), so, every time we perform a forward pass, if I reassign `self.kernel_divergence_fn` at every batch, then `self.kernel_divergence_fn` should be different.\r\n\r\nI am sure that my implementation of the function that computes the KL divergence based on `k` (i.e. `get_divergence_fn` below) is correct, because I can actually see its correct behaviour inside the callback \r\n\r\n```\r\ndef my_callback(model, k):\r\n    def on_batch_end(batch, logs):\r\n        for layer in model.layers:\r\n            divergence_fn = get_divergence_fn(k) \r\n            \r\n            # This prints the behaviour I am expecting, \r\n            # so get_divergence_fn and divergence_fn are correct.\r\n            tf.print(divergence_fn(layer.kernel_posterior, layer.kernel_prior, None))\r\n            \r\n            # IT DOES NOT SEEM TO TAKE EFFECT\r\n            layer.kernel_divergence_fn = divergence_fn\r\n    \r\n    return tf.keras.callbacks.LambdaCallback(on_batch_end=on_batch_end)\r\n```\r\n\r\nbut the assignment\r\n\r\n```\r\nlayer.kernel_divergence_fn = my_kernel_divergence_fn\r\n```\r\n\r\ndoes not seem to take effect, i.e. at the next epoch, `layer.kernel_divergence_fn` is still the one at the beginning of the epoch.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/884", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/884/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/884/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/884/events", "html_url": "https://github.com/tensorflow/probability/issues/884", "id": 602684449, "node_id": "MDU6SXNzdWU2MDI2ODQ0NDk=", "number": 884, "title": "Beta distribution non-nan gradient for undefined `log_prob` input.", "user": {"login": "rwolst", "id": 3892689, "node_id": "MDQ6VXNlcjM4OTI2ODk=", "avatar_url": "https://avatars2.githubusercontent.com/u/3892689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rwolst", "html_url": "https://github.com/rwolst", "followers_url": "https://api.github.com/users/rwolst/followers", "following_url": "https://api.github.com/users/rwolst/following{/other_user}", "gists_url": "https://api.github.com/users/rwolst/gists{/gist_id}", "starred_url": "https://api.github.com/users/rwolst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rwolst/subscriptions", "organizations_url": "https://api.github.com/users/rwolst/orgs", "repos_url": "https://api.github.com/users/rwolst/repos", "events_url": "https://api.github.com/users/rwolst/events{/privacy}", "received_events_url": "https://api.github.com/users/rwolst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-19T10:54:09Z", "updated_at": "2020-04-24T21:55:50Z", "closed_at": "2020-04-24T21:55:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "The Beta distribution is defined on the interval `x in [0, 1]`, hence I would expect the pdf, log pdf and their gradients to be `nan` for values outside this range.\r\n\r\nThis is the case in the standard pdf (`.prob`) case, however the gradient of the log pdf (`.log_prob`) isn't `nan` for values outside this range. For example\r\n\r\n    x = tf.Variable(-1.0)\r\n\r\n    print(tfp.distributions.Beta(10, 1000).log_prob(x))\r\n\r\n    with tf.GradientTape() as t:\r\n        z = tfp.distributions.Beta(10, 1000).log_prob(x)\r\n\r\n    dx = t.gradient(z, x)\r\n    print(dx)\r\n\r\n\r\nShouldn't these gradients also be `nan`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/882", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/882/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/882/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/882/events", "html_url": "https://github.com/tensorflow/probability/issues/882", "id": 602197529, "node_id": "MDU6SXNzdWU2MDIxOTc1Mjk=", "number": 882, "title": "Is it possible for the prior of a Bayesian layer to be trainable?", "user": {"login": "nbro", "id": 9349000, "node_id": "MDQ6VXNlcjkzNDkwMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9349000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbro", "html_url": "https://github.com/nbro", "followers_url": "https://api.github.com/users/nbro/followers", "following_url": "https://api.github.com/users/nbro/following{/other_user}", "gists_url": "https://api.github.com/users/nbro/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbro/subscriptions", "organizations_url": "https://api.github.com/users/nbro/orgs", "repos_url": "https://api.github.com/users/nbro/repos", "events_url": "https://api.github.com/users/nbro/events{/privacy}", "received_events_url": "https://api.github.com/users/nbro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-04-17T19:50:14Z", "updated_at": "2020-04-28T19:43:12Z", "closed_at": "2020-04-28T19:43:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "So far, I've only seen examples of Bayesian neural networks with fixed priors and variable posteriors. \r\n\r\nCan the priors of the Bayesian layers (such as `DenseFlipout`) be trainable (in some sense), in particular, e.g., if we use a Gaussian prior, can the variance be trainable? Is there something similar in TFP? \r\n\r\nIf I remember correctly, David MacKay proposed some model where the prior was trainable, although I don't remember exactly how that was done. However, this can be useful e.g. if you want to find the best variance for the prior.\r\n\r\nI know we can pass a custom function to `kernel_prior_fn` that creates the prior. My knowledge of Keras tells me that you can create trainable parameters e.g. if you inherit the `Layer` class, but I would like to avoid using this API and use either the sequential or functional APIs. Is this possible? If yes, can you provide a simple example of how this would be done?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/880", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/880/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/880/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/880/events", "html_url": "https://github.com/tensorflow/probability/issues/880", "id": 601126306, "node_id": "MDU6SXNzdWU2MDExMjYzMDY=", "number": 880, "title": "Nesting JointDistribution objects", "user": {"login": "ojcobb", "id": 55446819, "node_id": "MDQ6VXNlcjU1NDQ2ODE5", "avatar_url": "https://avatars0.githubusercontent.com/u/55446819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ojcobb", "html_url": "https://github.com/ojcobb", "followers_url": "https://api.github.com/users/ojcobb/followers", "following_url": "https://api.github.com/users/ojcobb/following{/other_user}", "gists_url": "https://api.github.com/users/ojcobb/gists{/gist_id}", "starred_url": "https://api.github.com/users/ojcobb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ojcobb/subscriptions", "organizations_url": "https://api.github.com/users/ojcobb/orgs", "repos_url": "https://api.github.com/users/ojcobb/repos", "events_url": "https://api.github.com/users/ojcobb/events{/privacy}", "received_events_url": "https://api.github.com/users/ojcobb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-16T14:50:22Z", "updated_at": "2020-04-16T17:59:39Z", "closed_at": "2020-04-16T17:59:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to create a model defined as a sequence of nested ```JointDistributionSequential``` objects. The \"Composition of Joint Distributions\" in the recent \"Joint Distributions for TensorFlow Probability\" whitepaper (arxiv.org/pdf/2001.11819.pdf) suggests this should be possible. However I believe there might be bug preventing such an implementation.\r\n\r\nSuppose I define low level models for variables ```y_1``` and ```y_2```:\r\n\r\n```python\r\nimport tensorflow_probability as tfp\r\ntfd = tfp.distributions\r\n\r\ny_1_model = tfd.JointDistributionSequential(\r\n    [\r\n        tfd.Normal(0, 1, name='x_1'),\r\n        lambda x_1: tfd.Normal(x_1, 1, name='y_1')\r\n    ]\r\n)\r\ny_2_model = tfd.JointDistributionSequential(\r\n    [\r\n        tfd.Normal(0, 1, name='x_2'),\r\n        lambda x_2: tfd.Normal(x_2, 1, name='y_2')\r\n    ], \r\n)\r\n```\r\n\r\nI then try to define a model for a new variable ```z``` which is probabilistically related to the model for ```y_1``` and ```y_2``` as:\r\n\r\n```python\r\n\r\nz_model = tfd.JointDistributionSequential(\r\n    [\r\n        y_1_model,\r\n        y_2_model,\r\n        lambda y_2, y_1: tfd.Normal(y_1[1]-y_2[1], 1, name='z')\r\n    ]\r\n)\r\n```\r\n\r\nThis works to some extent in that ```z_model.sample()``` returns a nested list of tensors of the expected structure. However there are problems with ```z_model```. For example ```print(z_model)``` returns the following error:\r\n```\r\n*** TypeError: 'generator' object does not support item assignment\r\n```\r\n\r\nHowever the real problem is that the variables within ```z_model``` can't seem to be referenced when defining further models. Whereas ```z_model.sample()[0][0]``` returns samples from ```x_1``` as expected, we can't reference ```x_1``` in the same way in the following:\r\n\r\n```python\r\nfurther_model = tfd.JointDistributionSequential(\r\n    [\r\n        z_model,\r\n        lambda z: z[0][0]\r\n    ]\r\n)\r\n```\r\nThe resultant ```further_model``` is not an object we can sample, or do anything with, as far as I can tell. If we try to sample it we get:\r\n\r\n```\r\n*** AttributeError: 'tensorflow.python.framework.ops.EagerTensor' object has no attribute 'sample'\r\n```\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/876", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/876/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/876/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/876/events", "html_url": "https://github.com/tensorflow/probability/issues/876", "id": 600248330, "node_id": "MDU6SXNzdWU2MDAyNDgzMzA=", "number": 876, "title": "Sample hidden states in HiddenMarkovModel", "user": {"login": "lucianopaz", "id": 5230109, "node_id": "MDQ6VXNlcjUyMzAxMDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5230109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucianopaz", "html_url": "https://github.com/lucianopaz", "followers_url": "https://api.github.com/users/lucianopaz/followers", "following_url": "https://api.github.com/users/lucianopaz/following{/other_user}", "gists_url": "https://api.github.com/users/lucianopaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucianopaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucianopaz/subscriptions", "organizations_url": "https://api.github.com/users/lucianopaz/orgs", "repos_url": "https://api.github.com/users/lucianopaz/repos", "events_url": "https://api.github.com/users/lucianopaz/events{/privacy}", "received_events_url": "https://api.github.com/users/lucianopaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-15T12:08:05Z", "updated_at": "2020-04-16T19:16:34Z", "closed_at": "2020-04-16T08:38:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is more a question than an issue so feel free to close this and tell me if there is a more appropriate place to ask tfp questions.\r\n\r\nI am interested in sampling the hidden states of a `HiddenMarkovModel` conditioned on some observed emissions. From what I've been reading, I need to use some kind of particle filter algorithm to get samples from the posterior probability distribution of hidden states given the observations. However, it looks like the `HiddenMarkovModel` is not the right entity to work with because there doesn't seem to be a way to tap into the hidden state values. Am I forced to write a new distribution class or use a `JointDistribution` with `tf.scan` and some `Categorical` distributions that represent the hidden and observed states explicitly?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/871", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/871/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/871/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/871/events", "html_url": "https://github.com/tensorflow/probability/issues/871", "id": 598288224, "node_id": "MDU6SXNzdWU1OTgyODgyMjQ=", "number": 871, "title": "TruncatedNormal mean() returns inf", "user": {"login": "hardianlawi", "id": 22806872, "node_id": "MDQ6VXNlcjIyODA2ODcy", "avatar_url": "https://avatars2.githubusercontent.com/u/22806872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hardianlawi", "html_url": "https://github.com/hardianlawi", "followers_url": "https://api.github.com/users/hardianlawi/followers", "following_url": "https://api.github.com/users/hardianlawi/following{/other_user}", "gists_url": "https://api.github.com/users/hardianlawi/gists{/gist_id}", "starred_url": "https://api.github.com/users/hardianlawi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hardianlawi/subscriptions", "organizations_url": "https://api.github.com/users/hardianlawi/orgs", "repos_url": "https://api.github.com/users/hardianlawi/repos", "events_url": "https://api.github.com/users/hardianlawi/events{/privacy}", "received_events_url": "https://api.github.com/users/hardianlawi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-11T15:26:32Z", "updated_at": "2020-04-14T00:52:37Z", "closed_at": "2020-04-14T00:52:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nFor some reason, running the code below gives me `inf`.\r\n\r\n```\r\nimport tensorflow_probability as tfp\r\ntfd = tfp.distributions\r\ntfd.TruncatedNormal(-2.8216267, 0.6991148, 1.0, 4.0).mean()\r\n```\r\n\r\nI would expect the answer to be close to 1.12 which I got by taking the average of `sample`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/867", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/867/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/867/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/867/events", "html_url": "https://github.com/tensorflow/probability/issues/867", "id": 596543519, "node_id": "MDU6SXNzdWU1OTY1NDM1MTk=", "number": 867, "title": "tfd.Multinomial.log_prob returns nan if an entry of probs is 0", "user": {"login": "chrism0dwk", "id": 625462, "node_id": "MDQ6VXNlcjYyNTQ2Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/625462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrism0dwk", "html_url": "https://github.com/chrism0dwk", "followers_url": "https://api.github.com/users/chrism0dwk/followers", "following_url": "https://api.github.com/users/chrism0dwk/following{/other_user}", "gists_url": "https://api.github.com/users/chrism0dwk/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrism0dwk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrism0dwk/subscriptions", "organizations_url": "https://api.github.com/users/chrism0dwk/orgs", "repos_url": "https://api.github.com/users/chrism0dwk/repos", "events_url": "https://api.github.com/users/chrism0dwk/events{/privacy}", "received_events_url": "https://api.github.com/users/chrism0dwk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "axch", "id": 233710, "node_id": "MDQ6VXNlcjIzMzcxMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/233710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axch", "html_url": "https://github.com/axch", "followers_url": "https://api.github.com/users/axch/followers", "following_url": "https://api.github.com/users/axch/following{/other_user}", "gists_url": "https://api.github.com/users/axch/gists{/gist_id}", "starred_url": "https://api.github.com/users/axch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axch/subscriptions", "organizations_url": "https://api.github.com/users/axch/orgs", "repos_url": "https://api.github.com/users/axch/repos", "events_url": "https://api.github.com/users/axch/events{/privacy}", "received_events_url": "https://api.github.com/users/axch/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "axch", "id": 233710, "node_id": "MDQ6VXNlcjIzMzcxMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/233710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axch", "html_url": "https://github.com/axch", "followers_url": "https://api.github.com/users/axch/followers", "following_url": "https://api.github.com/users/axch/following{/other_user}", "gists_url": "https://api.github.com/users/axch/gists{/gist_id}", "starred_url": "https://api.github.com/users/axch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axch/subscriptions", "organizations_url": "https://api.github.com/users/axch/orgs", "repos_url": "https://api.github.com/users/axch/repos", "events_url": "https://api.github.com/users/axch/events{/privacy}", "received_events_url": "https://api.github.com/users/axch/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-04-08T12:34:14Z", "updated_at": "2020-04-08T20:39:14Z", "closed_at": "2020-04-08T19:02:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Minimal working example (tfp-nightly 2020-03-29):\r\n```python\r\nimport tensorflow_probability as tfp\r\ntfd = tfp.distributions\r\n\r\nrv = tfd.Multinomial(1000, probs=[0.7, 0.0, 0.3])\r\nx = [489, 0, 511]\r\nlogp = rv.logp(x)\r\n```\r\n__Expected result__: `logp` is  `0.01980746`\r\n__Actual result__: `logp`  is `nan`\r\n\r\n## Suspected cause\r\nThe implementation of `tfp.Multinomial.log_prob` calculates \r\n$$\\log \\pi(x, p) \\propto x_1 \\log p_1 + ... + x_m \\log p_m$$\r\nIt needs to trap conditions where $x_i = 0$ and $p_i = 0$ such that $x_i \\log (p_i)$ returns 0 rather than `nan`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/866", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/866/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/866/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/866/events", "html_url": "https://github.com/tensorflow/probability/issues/866", "id": 596497133, "node_id": "MDU6SXNzdWU1OTY0OTcxMzM=", "number": 866, "title": "None gradient in ODE solve when combining initial state and ode_fn parameters", "user": {"login": "mrksr", "id": 5184063, "node_id": "MDQ6VXNlcjUxODQwNjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5184063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrksr", "html_url": "https://github.com/mrksr", "followers_url": "https://api.github.com/users/mrksr/followers", "following_url": "https://api.github.com/users/mrksr/following{/other_user}", "gists_url": "https://api.github.com/users/mrksr/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrksr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrksr/subscriptions", "organizations_url": "https://api.github.com/users/mrksr/orgs", "repos_url": "https://api.github.com/users/mrksr/repos", "events_url": "https://api.github.com/users/mrksr/events{/privacy}", "received_events_url": "https://api.github.com/users/mrksr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-08T11:10:25Z", "updated_at": "2020-04-08T11:58:00Z", "closed_at": "2020-04-08T11:57:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Combining gradients yields `None`\r\nUsually, `Solver.solve` yields gradients just fine, both for `DormandPrince` and `BDF` implementations. Gradients can be evaluated both for `initial_state` and `ode_fn`-parameters. However, when combining those gradients, `ode_fn` parameter gradients evaluate to `None`.\r\n\r\n# Example\r\nThis code has been run with `tensorflow==2.2.0-rc2` and `tfp-nightly==0.10.0.dev20200408`.\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\nscalar = tf.constant(2.)\r\ninitial_state = tf.constant(1.)\r\n\r\ndef ode_fn(time, state):\r\n    return scalar\r\n\r\n# Same for BDF\r\nsolver = tfp.math.ode.DormandPrince()\r\n\r\nwith tf.GradientTape() as tape:\r\n    tape.watch([scalar, initial_state])\r\n    result = solver.solve(\r\n        ode_fn=ode_fn,\r\n        initial_time=0.,\r\n        initial_state=initial_state,\r\n        solution_times=[1.],\r\n    )\r\n    \r\ntape.gradient(result.states, [scalar, initial_state])\r\n# [None, <tf.Tensor: shape=(), dtype=float32, numpy=1.0>]\r\n```\r\nThe gradient with respect to `scalar` should not be `None`.\r\n\r\n# Things that work\r\nWe can evaluate gradients separately.\r\n```python\r\nwith tf.GradientTape() as tape:\r\n    tape.watch(scalar)\r\n    result = solver.solve(\r\n        ode_fn=ode_fn,\r\n        initial_time=0.,\r\n        initial_state=initial_state,\r\n        solution_times=[1.],\r\n    )\r\n    \r\ntape.gradient(result.states, scalar)\r\n# <tf.Tensor: shape=(), dtype=float32, numpy=0.9999995>\r\n```\r\n```python\r\nwith tf.GradientTape() as tape:\r\n    tape.watch(initial_state)\r\n    result = solver.solve(\r\n        ode_fn=ode_fn,\r\n        initial_time=0.,\r\n        initial_state=initial_state,\r\n        solution_times=[1.],\r\n    )\r\n    \r\ntape.gradient(result.states, initial_state)\r\n# <tf.Tensor: shape=(), dtype=float32, numpy=1.0>\r\n```\r\nWe can also evaluate gradients \"separately jointly\" using two tapes.\r\n```python\r\nwith tf.GradientTape() as tape:\r\n    tape.watch(scalar)\r\n    with tf.GradientTape() as tape_2:\r\n        tape_2.watch(initial_state)\r\n        result = solver.solve(\r\n            ode_fn=ode_fn,\r\n            initial_time=0.,\r\n            initial_state=initial_state,\r\n            solution_times=[1.],\r\n        )\r\n    \r\n[\r\n    tape.gradient(result.states, scalar),\r\n    tape_2.gradient(result.states, initial_state)\r\n]\r\n# [<tf.Tensor: shape=(), dtype=float32, numpy=0.9999995>,\r\n#  <tf.Tensor: shape=(), dtype=float32, numpy=1.0>]\r\n```\r\n\r\n# Reason\r\nMy best guess is that the `tf.custom_gradient` implementation of the ODE solver gives rise to this behaviour: \r\nhttps://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/math/ode/base.py#L218\r\n\r\nThis code has been touched recently and the docs read like this should work: `\"\"\"Restricts gradient to initial state components and constants.\"\"\"`. Am I doing something wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/864", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/864/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/864/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/864/events", "html_url": "https://github.com/tensorflow/probability/issues/864", "id": 594168287, "node_id": "MDU6SXNzdWU1OTQxNjgyODc=", "number": 864, "title": "tfp.stats.percentile sort order differs from docstring (and differs in behavior from NumPy)", "user": {"login": "matthewfeickert", "id": 5142394, "node_id": "MDQ6VXNlcjUxNDIzOTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5142394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewfeickert", "html_url": "https://github.com/matthewfeickert", "followers_url": "https://api.github.com/users/matthewfeickert/followers", "following_url": "https://api.github.com/users/matthewfeickert/following{/other_user}", "gists_url": "https://api.github.com/users/matthewfeickert/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewfeickert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewfeickert/subscriptions", "organizations_url": "https://api.github.com/users/matthewfeickert/orgs", "repos_url": "https://api.github.com/users/matthewfeickert/repos", "events_url": "https://api.github.com/users/matthewfeickert/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewfeickert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-04-04T23:55:37Z", "updated_at": "2020-05-16T02:57:22Z", "closed_at": "2020-05-16T02:57:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Description\r\n\r\nThe docstring for `v0.9.0` of `tfp.stats.percentile` states that\r\n\r\nhttps://github.com/tensorflow/probability/blob/356cfddef026b3339b8f2a81e600acd2ff8e22b4/tensorflow_probability/python/stats/quantiles.py#L415-L416\r\n\r\nFrom this description (specifically the \"**from the minimum to the maximum**\" part) I would assume that this means that for\r\n\r\n```python\r\n>>> import tensorflow as tf\r\n>>> a = tf.constant([[10.0, 7.0, 4.0], [3.0, 2.0, 1.0]])\r\n>>> a\r\n<tf.Tensor: shape=(2, 3), dtype=float32, numpy=\r\narray([[10.,  7.,  4.],\r\n       [ 3.,  2.,  1.]], dtype=float32)>\r\n```\r\nthe sorted version of it that `percentile` evaluates on would be in _ascending_ order\r\n\r\n```python\r\n>>> y = tf.reshape(a, [-1])\r\n>>> tf.sort(y)\r\n<tf.Tensor: shape=(6,), dtype=float32, numpy=array([ 1.,  2.,  3.,  4.,  7., 10.], dtype=float32)>\r\n```\r\n\r\nHowever, as I learned in this Stack Overflow question ([Different results with NumPy percentile and TensorFlow percentile for \u201cnearest\u201d interpolation method](https://stackoverflow.com/questions/61024629/different-results-with-numpy-percentile-and-tensorflow-percentile-for-nearest))\r\n\r\nthe sort order used is actually _descending_\r\n\r\nhttps://github.com/tensorflow/probability/blob/356cfddef026b3339b8f2a81e600acd2ff8e22b4/tensorflow_probability/python/stats/quantiles.py#L884\r\n\r\nwhich gives\r\n\r\n```python\r\n>>> sorted_y, _ = tf.math.top_k(y, k=tf.shape(y)[-1])\r\n>>> sorted_y\r\n<tf.Tensor: shape=(6,), dtype=float32, numpy=array([10.,  7.,  4.,  3.,  2.,  1.], dtype=float32)>\r\n```\r\n\r\n# Problem\r\n\r\nThe above means that when the \"nearest\" interpolation method is used for [`tfp.stats.percentile`](https://www.tensorflow.org/probability/api_docs/python/tfp/stats/percentile) this example gives\r\n\r\n```python\r\n>>> import tensorflow as tf\r\n>>> import tensorflow_probability as tfp\r\n>>> a = tf.constant([[10.0, 7.0, 4.0], [3.0, 2.0, 1.0]])\r\n>>> q = 50\r\n>>> tfp.stats.percentile(a, q, interpolation=\"nearest\")\r\n<tf.Tensor: shape=(), dtype=float32, numpy=4.0>\r\n```\r\n\r\nwhere the docstring would make one think that the result would be\r\n\r\n```python\r\n<tf.Tensor: shape=(), dtype=float32, numpy=3.0>\r\n```\r\n\r\nAdditionally, as is outlined in [my Stack Overflow question](https://stackoverflow.com/questions/61024629/different-results-with-numpy-percentile-and-tensorflow-percentile-for-nearest), this behavior gives different results than NumPy's [`numpy.percentile`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.percentile.html), which is confusing given that `tfp.stats.percentile`'s docstring directly compares itself to `numpy.percentile`\r\n\r\nhttps://github.com/tensorflow/probability/blob/356cfddef026b3339b8f2a81e600acd2ff8e22b4/tensorflow_probability/python/stats/quantiles.py#L428\r\n\r\n\r\n# Proposed Change\r\n\r\nGiven that the it seems that `tfp.stats.percentile` intentionally gives congruent behavior to `numpy.percentile`, it would be good to [change the sort order used from _descending_ to _ascending_](https://stackoverflow.com/a/61035376/8931942).\r\n\r\nSo maybe something like changing\r\n\r\nhttps://github.com/tensorflow/probability/blob/356cfddef026b3339b8f2a81e600acd2ff8e22b4/tensorflow_probability/python/stats/quantiles.py#L884\r\n\r\nto\r\n\r\n```python\r\nsorted_, _ = tf.math.top_k(tensor, k=tf.shape(tensor)[-1])\r\nsorted_ = tf.reverse(sorted_, [-1])\r\n```\r\n\r\nThis would also make the code base more readable, as @langmore [notes in the comments of `_get_indices`](https://github.com/tensorflow/probability/blame/356cfddef026b3339b8f2a81e600acd2ff8e22b4/tensorflow_probability/python/stats/quantiles.py#L550-L552)\r\n\r\nhttps://github.com/tensorflow/probability/blob/356cfddef026b3339b8f2a81e600acd2ff8e22b4/tensorflow_probability/python/stats/quantiles.py#L550-L552\r\n\r\n# Additional Notes\r\n\r\nThis affects [`pyhf` Issue 815](https://github.com/scikit-hep/pyhf/issues/815) (I'm on the dev team).\r\n\r\ncc @lukasheinrich @kratsg", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/860", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/860/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/860/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/860/events", "html_url": "https://github.com/tensorflow/probability/issues/860", "id": 592366294, "node_id": "MDU6SXNzdWU1OTIzNjYyOTQ=", "number": 860, "title": "Cannot import TensorFlow Probability", "user": {"login": "AarshOza", "id": 32034407, "node_id": "MDQ6VXNlcjMyMDM0NDA3", "avatar_url": "https://avatars1.githubusercontent.com/u/32034407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AarshOza", "html_url": "https://github.com/AarshOza", "followers_url": "https://api.github.com/users/AarshOza/followers", "following_url": "https://api.github.com/users/AarshOza/following{/other_user}", "gists_url": "https://api.github.com/users/AarshOza/gists{/gist_id}", "starred_url": "https://api.github.com/users/AarshOza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AarshOza/subscriptions", "organizations_url": "https://api.github.com/users/AarshOza/orgs", "repos_url": "https://api.github.com/users/AarshOza/repos", "events_url": "https://api.github.com/users/AarshOza/events{/privacy}", "received_events_url": "https://api.github.com/users/AarshOza/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-02T05:23:20Z", "updated_at": "2020-04-05T21:49:29Z", "closed_at": "2020-04-05T21:49:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am a beginner with using Tensorflow and tried to use the TensorFlow probability for Hidden Markov Model. I was getting some incompatibility error after googling it and implementing all possible solutions from StackOverflow. It seemed to work. But now I have a new error\r\n\r\n`ImportError: cannot import name 'naming' from 'tensorflow.python.autograph.core' (/opt/anaconda3/lib/python3.7/site-packages/tensorflow/python/autograph/core/__init__.py)\r\n`\r\n\r\nCan anyone please help me \r\n\r\nTensorflow versions:\r\n\r\ntb-nightly: 2.3.0a20200401     \r\ntblib: 1.4.0              \r\ntensorboard: 2.1.1              \r\ntensorboard-plugin-wit: 1.6.0.post2        \r\ntensorflow: 2.1.0              \r\ntensorflow-estimator: 2.1.0              \r\ntensorflow-probability: 0.9.0              \r\ntf-estimator-nightly: 2.3.0.dev2020040101\r\ntf-nightly: 2.2.0.dev20200401  \r\ntfp-nightly: 0.10.0.dev20200401 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/854", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/854/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/854/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/854/events", "html_url": "https://github.com/tensorflow/probability/issues/854", "id": 587454266, "node_id": "MDU6SXNzdWU1ODc0NTQyNjY=", "number": 854, "title": "HiddenMarkovModel of multiple sequences", "user": {"login": "Char-Aznable", "id": 32589713, "node_id": "MDQ6VXNlcjMyNTg5NzEz", "avatar_url": "https://avatars1.githubusercontent.com/u/32589713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Char-Aznable", "html_url": "https://github.com/Char-Aznable", "followers_url": "https://api.github.com/users/Char-Aznable/followers", "following_url": "https://api.github.com/users/Char-Aznable/following{/other_user}", "gists_url": "https://api.github.com/users/Char-Aznable/gists{/gist_id}", "starred_url": "https://api.github.com/users/Char-Aznable/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Char-Aznable/subscriptions", "organizations_url": "https://api.github.com/users/Char-Aznable/orgs", "repos_url": "https://api.github.com/users/Char-Aznable/repos", "events_url": "https://api.github.com/users/Char-Aznable/events{/privacy}", "received_events_url": "https://api.github.com/users/Char-Aznable/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "brianwa84", "id": 22173987, "node_id": "MDQ6VXNlcjIyMTczOTg3", "avatar_url": "https://avatars0.githubusercontent.com/u/22173987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianwa84", "html_url": "https://github.com/brianwa84", "followers_url": "https://api.github.com/users/brianwa84/followers", "following_url": "https://api.github.com/users/brianwa84/following{/other_user}", "gists_url": "https://api.github.com/users/brianwa84/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianwa84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianwa84/subscriptions", "organizations_url": "https://api.github.com/users/brianwa84/orgs", "repos_url": "https://api.github.com/users/brianwa84/repos", "events_url": "https://api.github.com/users/brianwa84/events{/privacy}", "received_events_url": "https://api.github.com/users/brianwa84/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "brianwa84", "id": 22173987, "node_id": "MDQ6VXNlcjIyMTczOTg3", "avatar_url": "https://avatars0.githubusercontent.com/u/22173987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianwa84", "html_url": "https://github.com/brianwa84", "followers_url": "https://api.github.com/users/brianwa84/followers", "following_url": "https://api.github.com/users/brianwa84/following{/other_user}", "gists_url": "https://api.github.com/users/brianwa84/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianwa84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianwa84/subscriptions", "organizations_url": "https://api.github.com/users/brianwa84/orgs", "repos_url": "https://api.github.com/users/brianwa84/repos", "events_url": "https://api.github.com/users/brianwa84/events{/privacy}", "received_events_url": "https://api.github.com/users/brianwa84/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-03-25T05:34:13Z", "updated_at": "2020-04-07T18:27:29Z", "closed_at": "2020-04-07T18:27:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say my observed `data` is (100, 2) with 100 steps and a vector-of-two observation each step. What is the best way to represent the vector-of-two observation? I am currently trying to represent it as event dimension in `tfp.distributions.HiddenMarkovModel` but that doesn't seem to work. Here is my code:\r\n```python\r\n# HMM parameters\r\nnStates = 4\r\npInit = tfd.Categorical(probs=np.ones(nStates)/nStates)\r\npSwitch = 0.05\r\npt = pSwitch / (nStates-1) * np.ones(\r\n    [nStates, nStates], dtype=np.float32)\r\nnp.fill_diagonal(pt, 1-pSwitch)\r\npTrans = tfd.Categorical(probs=pt)\r\n# piror on the NB probability\r\npriorPNB = tfd.Beta(2, 5)\r\npNB = tf.Variable(priorPNB.sample((nStates, data.shape[1])).numpy(), name='pNB')\r\npEmission = tfd.Independent(tfd.NegativeBinomial(1, probs=pNB), reinterpreted_batch_ndims=1)\r\nhmm = tfd.HiddenMarkovModel(\r\n    initial_distribution=pInit,\r\n    transition_distribution=pTrans,\r\n    observation_distribution=pEmission,\r\n    num_steps=data.shape[0])\r\n\r\n```\r\nRunning `hmm.log_prob(data)` gives the error:\r\n```\r\nInvalidArgumentError: Incompatible shapes: [100,2,1] vs. [4,2] [Op:Mul] name: HiddenMarkovModel/log_prob/IndependentNegativeBinomial/log_prob/NegativeBinomial/log_prob/mul/\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/850", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/850/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/850/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/850/events", "html_url": "https://github.com/tensorflow/probability/issues/850", "id": 585665614, "node_id": "MDU6SXNzdWU1ODU2NjU2MTQ=", "number": 850, "title": "version 0.7.0 needs tf 2.1", "user": {"login": "GoingMyWay", "id": 9346460, "node_id": "MDQ6VXNlcjkzNDY0NjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/9346460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GoingMyWay", "html_url": "https://github.com/GoingMyWay", "followers_url": "https://api.github.com/users/GoingMyWay/followers", "following_url": "https://api.github.com/users/GoingMyWay/following{/other_user}", "gists_url": "https://api.github.com/users/GoingMyWay/gists{/gist_id}", "starred_url": "https://api.github.com/users/GoingMyWay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GoingMyWay/subscriptions", "organizations_url": "https://api.github.com/users/GoingMyWay/orgs", "repos_url": "https://api.github.com/users/GoingMyWay/repos", "events_url": "https://api.github.com/users/GoingMyWay/events{/privacy}", "received_events_url": "https://api.github.com/users/GoingMyWay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-22T08:01:01Z", "updated_at": "2020-04-15T03:23:42Z", "closed_at": "2020-04-15T01:40:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am sure I installed the v0.7.0 one with TF 1.15.0 one macOS, \r\n\r\n```\r\npip3.6 install --user tensorflow_probability==0.7.0\r\n```\r\n\r\nbut when importing \r\n\r\n```\r\n~/Library/Python/3.6/lib/python/site-packages/tensorflow_probability/__init__.py in _ensure_tf_install()\r\n     64         \"Please upgrade TensorFlow to proceed.\".format(\r\n     65             required=required_tensorflow_version,\r\n---> 66             present=tf.__version__))\r\n     67 \r\n     68 \r\n\r\nImportError: This version of TensorFlow Probability requires TensorFlow version >= 2.1; Detected an installation of version 1.15.0. Please upgrade TensorFlow to proceed.\r\n```\r\n\r\n\r\nand in the file of `tensorflow_probability/__init__.py`, it seems that the later versions automatically disable the 1.x version.\r\n\r\n```\r\n  required_tensorflow_version = \"2.1\"\r\n#   required_tensorflow_version = \"1.15\"  # Needed internally -- DisableOnExport\r\n\r\n  if (distutils.version.LooseVersion(tf.__version__) <\r\n      distutils.version.LooseVersion(required_tensorflow_version)):\r\n    raise ImportError(\r\n        \"This version of TensorFlow Probability requires TensorFlow \"\r\n        \"version >= {required}; Detected an installation of version {present}. \"\r\n        \"Please upgrade TensorFlow to proceed.\".format(\r\n            required=required_tensorflow_version,\r\n            present=tf.__version__))\r\n```\r\n\r\nHow can I fix this issue? I do not want to install TF 2.x now.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/847", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/847/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/847/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/847/events", "html_url": "https://github.com/tensorflow/probability/issues/847", "id": 583863986, "node_id": "MDU6SXNzdWU1ODM4NjM5ODY=", "number": 847, "title": "PixelCNN training produces: TypeError: update_with_patch() got an unexpected keyword argument 'finalize'", "user": {"login": "skeydan", "id": 469371, "node_id": "MDQ6VXNlcjQ2OTM3MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/469371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skeydan", "html_url": "https://github.com/skeydan", "followers_url": "https://api.github.com/users/skeydan/followers", "following_url": "https://api.github.com/users/skeydan/following{/other_user}", "gists_url": "https://api.github.com/users/skeydan/gists{/gist_id}", "starred_url": "https://api.github.com/users/skeydan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skeydan/subscriptions", "organizations_url": "https://api.github.com/users/skeydan/orgs", "repos_url": "https://api.github.com/users/skeydan/repos", "events_url": "https://api.github.com/users/skeydan/events{/privacy}", "received_events_url": "https://api.github.com/users/skeydan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-18T16:45:57Z", "updated_at": "2020-05-15T18:44:19Z", "closed_at": "2020-05-15T18:44:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, \r\n\r\nafter a long time I just came back to my idea of experimenting with PixelCNN :-)\r\n\r\nWith tf-nightly and tfp-nightly (the bugfix I need - https://github.com/tensorflow/probability/commit/d3a7abd7bc258d4cc0543475bff94249d508b4c6 - is not in TFP 0.9 so I have to use the nightlies) I get:\r\n\r\n```\r\nTypeError: update_with_patch() got an unexpected keyword argument 'finalize'\r\n```\r\n\r\nThe stack trace shows it occurs inside `tf.keras`, but googling didn't show up other occurrences, so I'd assume it's probably related to the way the model is defined and am posting it here...\r\nIt would be awesome if someone could have a look! Many thanks!\r\n\r\nStack trace:\r\n\r\n```\r\n\r\n7. _batch_update_progbar at callbacks.py#926\r\n6. on_train_batch_end at callbacks.py#882\r\n5. _call_batch_hook at callbacks.py#296\r\n4. on_train_batch_end at callbacks.py#388\r\n3. fit at training.py#817\r\n2. _method_wrapper at training.py#69\r\n\r\n```\r\n\r\nCode executed:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\nimport tensorflow_datasets as tfds\r\n\r\ndata = tfds.load('mnist')\r\ntrain_data, test_data = data['train'], data['test']\r\ndef image_preprocess(x):\r\n  x['image'] = tf.cast(x['image'], tf.float32)\r\n  # return model (inputs, outputs): inputs are (image, label) and there are no\r\n  # outputs\r\n  return ((x['image'], x['label']),)\r\n\r\nbatch_size = 16\r\ntrain_ds = train_data.map(image_preprocess).batch(batch_size).shuffle(1000)\r\noptimizer = tf.keras.optimizers.Adam()\r\nimage_shape = (28, 28, 1)\r\nlabel_shape = ()\r\ndist = tfp.distributions.PixelCNN(\r\n    image_shape=image_shape,\r\n    conditional_shape=label_shape,\r\n    num_resnet=1,\r\n    num_hierarchies=2,\r\n    num_filters=32,\r\n    num_logistic_mix=5,\r\n    dropout_p=.3,\r\n)\r\nimage_input = tf.keras.layers.Input(shape=image_shape)\r\nlabel_input = tf.keras.layers.Input(shape=label_shape)\r\nlog_prob = dist.log_prob(image_input, conditional_input=label_input)\r\nclass_cond_model = tf.keras.Model(\r\n    inputs=[image_input, label_input], outputs=log_prob)\r\nclass_cond_model.add_loss(-tf.reduce_mean(log_prob))\r\nclass_cond_model.compile(\r\n    optimizer=tf.keras.optimizers.Adam(),\r\n    metrics=[])\r\nclass_cond_model.fit(train_ds, epochs=10)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/845", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/845/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/845/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/845/events", "html_url": "https://github.com/tensorflow/probability/issues/845", "id": 583490806, "node_id": "MDU6SXNzdWU1ODM0OTA4MDY=", "number": 845, "title": "Error while building tensorflow_probability from source", "user": {"login": "tirthasheshpatel", "id": 43181252, "node_id": "MDQ6VXNlcjQzMTgxMjUy", "avatar_url": "https://avatars0.githubusercontent.com/u/43181252?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirthasheshpatel", "html_url": "https://github.com/tirthasheshpatel", "followers_url": "https://api.github.com/users/tirthasheshpatel/followers", "following_url": "https://api.github.com/users/tirthasheshpatel/following{/other_user}", "gists_url": "https://api.github.com/users/tirthasheshpatel/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirthasheshpatel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirthasheshpatel/subscriptions", "organizations_url": "https://api.github.com/users/tirthasheshpatel/orgs", "repos_url": "https://api.github.com/users/tirthasheshpatel/repos", "events_url": "https://api.github.com/users/tirthasheshpatel/events{/privacy}", "received_events_url": "https://api.github.com/users/tirthasheshpatel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-18T06:08:13Z", "updated_at": "2020-03-18T19:40:32Z", "closed_at": "2020-03-18T06:50:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to build the library from source on my local computer following [this page](https://www.tensorflow.org/probability/install). I also tried installing all the dependencies individually but I am facing the same issue each time when I try to import tensorflow_probability.\r\n\r\n```python\r\nImportError: cannot import name 'adjoint_registrations' from 'tensorflow_probability.python.internal.backend.numpy' (/mnt/c/users/tirth/desktop/interests/tfp/tensorflow_probability/python/internal/backend/numpy/__init__.py)\r\n```\r\n\r\n<details>\r\n<summary>Full Traceback</summary>\r\n\r\n```python\r\n>>> import tensorflow_probability as tfp\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/mnt/c/users/tirth/desktop/interests/tfp/tensorflow_probability/__init__.py\", line 77, in <module>\r\n    from tensorflow_probability.python import *  # pylint: disable=wildcard-import\r\n  File \"/mnt/c/users/tirth/desktop/interests/tfp/tensorflow_probability/python/__init__.py\", line 21, in <module>\r\n    from tensorflow_probability.python import bijectors\r\n  File \"/mnt/c/users/tirth/desktop/interests/tfp/tensorflow_probability/python/bijectors/__init__.py\", line 23, in <module>\r\n    from tensorflow_probability.python.bijectors.absolute_value import AbsoluteValue\r\n  File \"/mnt/c/users/tirth/desktop/interests/tfp/tensorflow_probability/python/bijectors/absolute_value.py\", line 23, in <module>\r\n    from tensorflow_probability.python.bijectors import bijector\r\n  File \"/mnt/c/users/tirth/desktop/interests/tfp/tensorflow_probability/python/bijectors/bijector.py\", line 33, in <module>\r\n    from tensorflow_probability.python.internal import distribution_util\r\n  File \"/mnt/c/users/tirth/desktop/interests/tfp/tensorflow_probability/python/internal/distribution_util.py\", line 28, in <module>\r\n    from tensorflow_probability.python.internal import prefer_static\r\n  File \"/mnt/c/users/tirth/desktop/interests/tfp/tensorflow_probability/python/internal/prefer_static.py\", line 30, in <module>\r\n    from tensorflow_probability.python.internal.backend import numpy as nptf\r\n  File \"/mnt/c/users/tirth/desktop/interests/tfp/tensorflow_probability/python/internal/backend/numpy/__init__.py\", line 22, in <module>\r\n    from tensorflow_probability.python.internal.backend.numpy import compat\r\n  File \"/mnt/c/users/tirth/desktop/interests/tfp/tensorflow_probability/python/internal/backend/numpy/compat.py\", line 22, in <module>\r\n    from tensorflow_probability.python.internal.backend.numpy import v2\r\n  File \"/mnt/c/users/tirth/desktop/interests/tfp/tensorflow_probability/python/internal/backend/numpy/v2.py\", line 29, in <module>\r\n    from tensorflow_probability.python.internal.backend.numpy import linalg\r\n  File \"/mnt/c/users/tirth/desktop/interests/tfp/tensorflow_probability/python/internal/backend/numpy/linalg.py\", line 30, in <module>\r\n    from tensorflow_probability.python.internal.backend.numpy import adjoint_registrations as _adjoint_registrations\r\nImportError: cannot import name 'adjoint_registrations' from 'tensorflow_probability.python.internal.backend.numpy' (/mnt/c/users/tirth/desktop/interests/tfp/tensorflow_probability/python/internal/backend/numpy/__init__.py)\r\n>>>\r\n```\r\n\r\n</details>\r\n\r\n### Platform\r\n\r\nOS: Linux (WSL)\r\nPython version: 3.7.5\r\nPip version: 20.0.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/836", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/836/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/836/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/836/events", "html_url": "https://github.com/tensorflow/probability/issues/836", "id": 578571482, "node_id": "MDU6SXNzdWU1Nzg1NzE0ODI=", "number": 836, "title": "Latex formatting for mathematics in documentation", "user": {"login": "tirthasheshpatel", "id": 43181252, "node_id": "MDQ6VXNlcjQzMTgxMjUy", "avatar_url": "https://avatars0.githubusercontent.com/u/43181252?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirthasheshpatel", "html_url": "https://github.com/tirthasheshpatel", "followers_url": "https://api.github.com/users/tirthasheshpatel/followers", "following_url": "https://api.github.com/users/tirthasheshpatel/following{/other_user}", "gists_url": "https://api.github.com/users/tirthasheshpatel/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirthasheshpatel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirthasheshpatel/subscriptions", "organizations_url": "https://api.github.com/users/tirthasheshpatel/orgs", "repos_url": "https://api.github.com/users/tirthasheshpatel/repos", "events_url": "https://api.github.com/users/tirthasheshpatel/events{/privacy}", "received_events_url": "https://api.github.com/users/tirthasheshpatel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-10T13:16:52Z", "updated_at": "2020-04-26T05:43:02Z", "closed_at": "2020-04-26T05:43:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "The current \"pure text\" mathematical equations are quite inconvenient to analyze and understand. It would be really nice to have latex formatted mathematical equations in the documentation. Would it be feasible to change all the equations across the module to latex format?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/834", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/834/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/834/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/834/events", "html_url": "https://github.com/tensorflow/probability/issues/834", "id": 577378973, "node_id": "MDU6SXNzdWU1NzczNzg5NzM=", "number": 834, "title": "doc string error in weibull_cdf.py", "user": {"login": "bourov", "id": 13532666, "node_id": "MDQ6VXNlcjEzNTMyNjY2", "avatar_url": "https://avatars1.githubusercontent.com/u/13532666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bourov", "html_url": "https://github.com/bourov", "followers_url": "https://api.github.com/users/bourov/followers", "following_url": "https://api.github.com/users/bourov/following{/other_user}", "gists_url": "https://api.github.com/users/bourov/gists{/gist_id}", "starred_url": "https://api.github.com/users/bourov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bourov/subscriptions", "organizations_url": "https://api.github.com/users/bourov/orgs", "repos_url": "https://api.github.com/users/bourov/repos", "events_url": "https://api.github.com/users/bourov/events{/privacy}", "received_events_url": "https://api.github.com/users/bourov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-07T18:14:12Z", "updated_at": "2020-03-10T01:43:23Z", "closed_at": "2020-03-10T01:43:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "in class [tensorflow_probability/python/bijectors/weibull_cdf.py](https://github.com/tensorflow/probability/blob/425395da0472b91400655ba3aec8f69cf0249673/tensorflow_probability/python/bijectors/weibull_cdf.py)\r\n\r\ndoc text is\r\n```python \r\n\"\"\"Compute `Y = g(X) = 1 - exp((-X / scale) ** concentration), X >= 0`.\r\n```\r\n\r\nwhile actual calculation is (note `(-x)**power` vs `-(x**power)`)\r\n```python\r\n  def _forward(self, x):\r\n    with tf.control_dependencies(self._maybe_assert_valid_x(x)):\r\n      return -tf.math.expm1(-((x / self.scale) ** self.concentration))\r\n```\r\n\r\nif no-one objects, I can try to fix the doc string in several places in `weibull_cdf.py `", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/828", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/828/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/828/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/828/events", "html_url": "https://github.com/tensorflow/probability/issues/828", "id": 575260396, "node_id": "MDU6SXNzdWU1NzUyNjAzOTY=", "number": 828, "title": "Possible to Mix Joint Distributions?", "user": {"login": "zslastman", "id": 5485110, "node_id": "MDQ6VXNlcjU0ODUxMTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5485110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zslastman", "html_url": "https://github.com/zslastman", "followers_url": "https://api.github.com/users/zslastman/followers", "following_url": "https://api.github.com/users/zslastman/following{/other_user}", "gists_url": "https://api.github.com/users/zslastman/gists{/gist_id}", "starred_url": "https://api.github.com/users/zslastman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zslastman/subscriptions", "organizations_url": "https://api.github.com/users/zslastman/orgs", "repos_url": "https://api.github.com/users/zslastman/repos", "events_url": "https://api.github.com/users/zslastman/events{/privacy}", "received_events_url": "https://api.github.com/users/zslastman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-04T09:39:30Z", "updated_at": "2020-03-05T07:54:58Z", "closed_at": "2020-03-05T07:54:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to implement a Tree-Augmented Naive Bayes model in tfp - basically it would be very similiar to:\r\n\r\nhttps://github.com/tensorflow/probability/blob/master/tensorflow_probability/examples/jupyter_notebooks/Bayesian_Gaussian_Mixture_Model.ipynb\r\n\r\nexcept that I'd be replacing the multivariate gaussian components of the mixture with JointDistributions, where each Joint distribution would consist of a chain of MultivariateNormals, each of whose mean is a linear function of the previous (so like Naive bayes, only with a single  edge connecting each of the non cluster to a previous one dimensions, and whose edge value value is conditional on the discrete cluster variable).\r\n\r\nI'd like this to be fuzzy clustering if possible, so marginalizing over the probability for each cluster.\r\n\r\nThe canonical tfp way to do that marginalizing is MixtureDistribution, but it seems that MixtureDistribution won't accept JointDistributions as components even if they are identical:\r\n\r\n\r\n```\r\nlocs = tf.constant([.1,.1],shape=[1,2])\r\nscales = tf.constant([.1,.1],shape=[1,2])\r\n\r\ncomps = [\r\n    tfd.MultivariateNormalDiag(loc=locs,scale_diag=scales),\r\n    tfd.MultivariateNormalDiag(loc=locs,scale_diag=scales)\r\n]\r\n\r\njdist = tfd.JointDistributionSequential([\r\n    tfd.MultivariateNormalDiag(loc=locs,scale_diag=scales)\r\n#    lambda fcs : tfd.MultivariateNormalDiag(loc=locs+fcs,scale_diag=scales)\r\n])\r\njdists=[jdist,jdist]\r\n\r\n#output similiar, except jdists gives a list of TensorShapes\r\nassert comps[0].sample(1).shape  == jdists[0].sample(1)[0].shape\r\n\r\n#works\r\ntfp.distributions.Mixture(tfd.Categorical(logits=tf.constant([.1,.1],shape=[1,2]) ),comps)\r\n#fails\r\ntfp.distributions.Mixture(tfd.Categorical(logits=tf.constant([.1,.1],shape=[1,2]) ),jdists)\r\n\r\n```\r\n\r\n\r\n```TypeError: Dimension value must be integer or None or have an __index__ method, got TensorShape([1])\r\n```\r\n\r\nPresumably because Joint Distributions have a list of TensorShape objects as their batch shape rather than a single TensorShape object.\r\n\r\nI can think of a few ways to work around this - I could probably just make a subclass of JointDistribution that combines the output and has batch_shape and output as a single tensor, or I could write my own Mixture Distribution function that uses logSumExp to get the marginalized probability - but I wanted to make sure there isn't something obvious I'm missing that would make this easy?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/822", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/822/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/822/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/822/events", "html_url": "https://github.com/tensorflow/probability/issues/822", "id": 574812321, "node_id": "MDU6SXNzdWU1NzQ4MTIzMjE=", "number": 822, "title": "Do we need special loss/optimizer when tfp layers involved? Can you use hybrid with non-probabilistic layers?", "user": {"login": "ben-arnao", "id": 8053809, "node_id": "MDQ6VXNlcjgwNTM4MDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/8053809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben-arnao", "html_url": "https://github.com/ben-arnao", "followers_url": "https://api.github.com/users/ben-arnao/followers", "following_url": "https://api.github.com/users/ben-arnao/following{/other_user}", "gists_url": "https://api.github.com/users/ben-arnao/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben-arnao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben-arnao/subscriptions", "organizations_url": "https://api.github.com/users/ben-arnao/orgs", "repos_url": "https://api.github.com/users/ben-arnao/repos", "events_url": "https://api.github.com/users/ben-arnao/events{/privacy}", "received_events_url": "https://api.github.com/users/ben-arnao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-03T17:05:37Z", "updated_at": "2020-03-03T20:23:41Z", "closed_at": "2020-03-03T20:23:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "tfp layers seem interesting from the standpoint of generalizing possibly better than regular NN with dropout, batch norm, regularization, etc. I'm not as interested in getting a confidence values for my output.\r\n\r\nGiven that's the case do we need special loss/optimizer for the network if the last layer is not probabilistic?\r\n\r\nAlso can we combine regular layers with tfp layers?\r\n\r\nie.\r\n\r\n```\r\ntfp.DenseVariational\r\ntf.Dropout\r\n# i don't care about my biases being probabilistic\r\ntf.Activation('relu')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/815", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/815/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/815/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/815/events", "html_url": "https://github.com/tensorflow/probability/issues/815", "id": 571596288, "node_id": "MDU6SXNzdWU1NzE1OTYyODg=", "number": 815, "title": "Making nonlinear predictions with Probabilistic Layers (DenseVariational)", "user": {"login": "pierremtb", "id": 10795683, "node_id": "MDQ6VXNlcjEwNzk1Njgz", "avatar_url": "https://avatars2.githubusercontent.com/u/10795683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierremtb", "html_url": "https://github.com/pierremtb", "followers_url": "https://api.github.com/users/pierremtb/followers", "following_url": "https://api.github.com/users/pierremtb/following{/other_user}", "gists_url": "https://api.github.com/users/pierremtb/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierremtb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierremtb/subscriptions", "organizations_url": "https://api.github.com/users/pierremtb/orgs", "repos_url": "https://api.github.com/users/pierremtb/repos", "events_url": "https://api.github.com/users/pierremtb/events{/privacy}", "received_events_url": "https://api.github.com/users/pierremtb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-26T19:11:02Z", "updated_at": "2020-03-05T10:17:33Z", "closed_at": "2020-03-05T10:17:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been playing the code of the [blog post](https://blog.tensorflow.org/2019/03/regression-with-probabilistic-layers-in.html) on Probabilistic Layers regression, trying to make it fit nonlinear stuff. I've stacked up two DenseVariational layers on top of the (mean, variance) one, as shown in this sample code. But no matter how much I play with the hyperparameters like the kl_weights, the learning rate of the coefficient in the softplus'ed variance, I can't get any good result. Would anyone care to tell me if I'm in the right direction? Thanks in advance!\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\nimport matplotlib.pyplot as plt\r\n\r\ntfk = tf.keras\r\ntfd = tfp.distributions\r\n\r\n#%% HPs\r\nN_tst = 100\r\nN = 32\r\n\r\nsoft_0 = .01\r\nlr = 0.01\r\nklw = 1/N\r\nepochs = 5000\r\n\r\ndtype = \"float64\"\r\ntfk.backend.set_floatx(dtype)\r\n\r\n#%% Datagen\r\nx_tst = np.linspace(-6, 6, N_tst).reshape(-1, 1)\r\ny_tst = x_tst**3\r\nlb = int(2/(2*6) * N_tst)\r\nub = int((2+2*4)/(2*6) * N_tst)\r\nidx = np.random.choice(x_tst[lb:ub].shape[0], N, replace=False)\r\nx = x_tst[lb + idx]\r\ny = y_tst[lb + idx]\r\nnoise_std = 5\r\ny = y + noise_std*np.random.randn(y.shape[0], y.shape[1])\r\n\r\n#%% Prior and posterior\r\ndef prior_trainable(kernel_size, bias_size=0, dtype=None):\r\n  n = kernel_size + bias_size\r\n  return tf.keras.Sequential([\r\n      tfp.layers.VariableLayer(n, dtype=dtype),\r\n      tfp.layers.DistributionLambda(lambda t: tfd.Independent(\r\n          tfd.Normal(loc=t, scale=1),\r\n          reinterpreted_batch_ndims=1)),\r\n  ])\r\n\r\ndef posterior_mean_field(kernel_size, bias_size=0, dtype=None):\r\n  n = kernel_size + bias_size\r\n  c = np.log(np.expm1(1.))\r\n  return tf.keras.Sequential([\r\n      tfp.layers.VariableLayer(2 * n, dtype=dtype),\r\n      tfp.layers.DistributionLambda(lambda t: tfd.Independent(\r\n          tfd.Normal(loc=t[..., :n],\r\n                     scale=1e-5 + tf.nn.softplus(c + t[..., n:])),\r\n          reinterpreted_batch_ndims=1)),\r\n  ])\r\n\r\n#%% Model definition\r\nmodel = tfk.models.Sequential([\r\n    tfp.layers.DenseVariational(20, activation=\"relu\", input_shape=[1],\r\n        make_posterior_fn=posterior_mean_field,\r\n        make_prior_fn=prior_trainable,\r\n        kl_weight=klw,\r\n        dtype=dtype,\r\n    ),\r\n    tfp.layers.DenseVariational(20, activation=\"relu\",\r\n        make_posterior_fn=posterior_mean_field,\r\n        make_prior_fn=prior_trainable,\r\n        kl_weight=klw,\r\n        dtype=dtype,\r\n    ),\r\n    tfp.layers.DenseVariational(1 + 1, activation=\"linear\",\r\n        make_posterior_fn=posterior_mean_field,\r\n        make_prior_fn=prior_trainable,\r\n        kl_weight=klw, dtype=dtype,\r\n    ),\r\n    tfp.layers.DistributionLambda(\r\n        lambda t: tfd.Normal(loc=t[..., :1],\r\n                            scale=1e-5 + tf.math.softplus(soft_0 * t[..., 1:]))),\r\n])\r\nmodel.compile(loss=lambda y, yhat: -yhat.log_prob(y),\r\n              optimizer=tfk.optimizers.Adam(lr))\r\nmodel.summary()\r\n\r\n#%% Model training\r\nmodel.fit(x, y, epochs=epochs)\r\n\r\n#%% Predictions and plotting\r\ny_pred_list = []\r\n\r\nfor i in range(100):\r\n    y_dist = model(x_tst)\r\n    y_pred_list.append(y_dist.mean().numpy())\r\n\r\ny_preds = np.concatenate(y_pred_list, axis=1)\r\n\r\ny_pred = np.mean(y_preds, axis=1)\r\ny_pred_sig = np.std(y_preds, axis=1)\r\nlower = y_pred - 2 * y_pred_sig\r\nupper = y_pred + 2 * y_pred_sig\r\n\r\nplt.fill_between(x_tst.ravel(), upper, lower,\r\n                 facecolor='C0', alpha=0.3)\r\nplt.plot(x_tst, y_pred)\r\nplt.scatter(x, y, c=\"r\")\r\nplt.plot(x_tst, y_tst, \"r--\")\r\nplt.show()\r\n```\r\n```console\r\nModel: \"sequential_15\"\r\n_________________________________________________________________\r\nLayer (type)                 Output Shape              Param #   \r\n=================================================================\r\ndense_variational_45 (DenseV (None, 20)                120       \r\n_________________________________________________________________\r\ndense_variational_46 (DenseV (None, 20)                1260      \r\n_________________________________________________________________\r\ndense_variational_47 (DenseV (None, 2)                 126       \r\n_________________________________________________________________\r\ndistribution_lambda_15 (Dist ((None, 1), (None, 1))    0         \r\n=================================================================\r\nTotal params: 1,506\r\nTrainable params: 1,506\r\nNon-trainable params: 0\r\n```\r\n\r\n![Figure_1](https://user-images.githubusercontent.com/10795683/75378349-830f0500-58a1-11ea-8dce-163bc0fd38b1.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/811", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/811/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/811/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/811/events", "html_url": "https://github.com/tensorflow/probability/issues/811", "id": 569538981, "node_id": "MDU6SXNzdWU1Njk1Mzg5ODE=", "number": 811, "title": "MaskedAutoregressiveFlow fails with Keras functional API", "user": {"login": "giovp", "id": 25887487, "node_id": "MDQ6VXNlcjI1ODg3NDg3", "avatar_url": "https://avatars2.githubusercontent.com/u/25887487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giovp", "html_url": "https://github.com/giovp", "followers_url": "https://api.github.com/users/giovp/followers", "following_url": "https://api.github.com/users/giovp/following{/other_user}", "gists_url": "https://api.github.com/users/giovp/gists{/gist_id}", "starred_url": "https://api.github.com/users/giovp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giovp/subscriptions", "organizations_url": "https://api.github.com/users/giovp/orgs", "repos_url": "https://api.github.com/users/giovp/repos", "events_url": "https://api.github.com/users/giovp/events{/privacy}", "received_events_url": "https://api.github.com/users/giovp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1666530949, "node_id": "MDU6TGFiZWwxNjY2NTMwOTQ5", "url": "https://api.github.com/repos/tensorflow/probability/labels/keras", "name": "keras", "color": "f2be15", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-23T18:43:01Z", "updated_at": "2020-03-13T14:43:15Z", "closed_at": "2020-03-13T14:43:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "with `tensorflow:  2.1.0 tensorflow-probability:  0.9.0`, tfp.bijectors.MaskedAutoregressiveFlow fails if used as a layer in functional API.\r\nMinimal reproducible example:\r\n```\r\ninput_layer = tf.keras.layers.Input(shape=(10,), name=\"input\")\r\nIAF = tfb.Invert(tfb.MaskedAutoregressiveFlow(\r\n    shift_and_log_scale_fn=tfb.masked_autoregressive_default_template(\r\n        hidden_layers=[256, 256])))\r\nz = IAF(input_layer)\r\n\r\nmodel = tf.keras.Model(\r\n    inputs = input_layer, \r\n    outputs = z, \r\n    name = \"iaf\")\r\n```\r\n\r\nError:\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-13-ba31ab9c7899> in <module>\r\n      8     inputs = input_layer,\r\n      9     outputs = z,\r\n---> 10     name = \"iaf\")\r\n\r\n/tungstenfs/groups/gliberal/Users/pallgiov/prg/miniconda3/envs/tfp_jupyter/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py in __init__(self, *args, **kwargs)\r\n    144 \r\n    145   def __init__(self, *args, **kwargs):\r\n--> 146     super(Model, self).__init__(*args, **kwargs)\r\n    147     _keras_api_gauge.get_cell('model').set(True)\r\n    148     # initializing _distribution_strategy here since it is possible to call\r\n\r\n/tungstenfs/groups/gliberal/Users/pallgiov/prg/miniconda3/envs/tfp_jupyter/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/network.py in __init__(self, *args, **kwargs)\r\n    172       self._init_subclassed_network(**kwargs)\r\n    173 \r\n--> 174     tf_utils.assert_no_legacy_layers(self.layers)\r\n    175 \r\n    176   # Several Network methods have \"no_automatic_dependency_tracking\"\r\n\r\n/tungstenfs/groups/gliberal/Users/pallgiov/prg/miniconda3/envs/tfp_jupyter/lib/python3.7/site-packages/tensorflow_core/python/keras/utils/tf_utils.py in assert_no_legacy_layers(layers)\r\n    409         'classes), please use the tf.keras.layers implementation instead. '\r\n    410         '(Or, if writing custom layers, subclass from tf.keras.layers rather '\r\n--> 411         'than tf.layers)'.format(layer_str))\r\n    412 \r\n    413 \r\n\r\nTypeError: The following are legacy tf.layers.Layers:\r\n  <tensorflow.python.layers.core.Dense object at 0x7fadfc54f750>\r\n  <tensorflow.python.layers.core.Dense object at 0x7fadfc54f7d0>\r\n  <tensorflow.python.layers.core.Dense object at 0x7fadfc54fd50>\r\nTo use keras as a framework (for instance using the Network, Model, or Sequential classes), please use the tf.keras.layers implementation instead. (Or, if writing custom layers, subclass from tf.keras.layers rather than tf.layers)\r\n```\r\nThis is I believe a known error, and exactly the same as #355 .\r\nWould be great to make use of bijectors with keras functional API.\r\n\r\nThanks a lot,\r\nGiovanni", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/803", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/803/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/803/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/803/events", "html_url": "https://github.com/tensorflow/probability/issues/803", "id": 568352664, "node_id": "MDU6SXNzdWU1NjgzNTI2NjQ=", "number": 803, "title": "TypeError: Value passed to parameter 'x' has DataType int32 not in list of allowed values: float16, float32, float64, complex64, complex128", "user": {"login": "nbro", "id": 9349000, "node_id": "MDQ6VXNlcjkzNDkwMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9349000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbro", "html_url": "https://github.com/nbro", "followers_url": "https://api.github.com/users/nbro/followers", "following_url": "https://api.github.com/users/nbro/following{/other_user}", "gists_url": "https://api.github.com/users/nbro/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbro/subscriptions", "organizations_url": "https://api.github.com/users/nbro/orgs", "repos_url": "https://api.github.com/users/nbro/repos", "events_url": "https://api.github.com/users/nbro/events{/privacy}", "received_events_url": "https://api.github.com/users/nbro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-20T14:49:33Z", "updated_at": "2020-08-07T11:04:06Z", "closed_at": "2020-02-20T23:51:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following program \r\n\r\n```\r\ndef example():\r\n    import tensorflow as tf\r\n    import tensorflow_probability as tfp\r\n    from tensorflow_probability import distributions as tfd\r\n\r\n    def get_model(input_shape=(1,)):\r\n        inp = tf.keras.layers.Input(shape=input_shape)\r\n        x = tfp.layers.DenseFlipout(8, activation=\"relu\")(inp)\r\n        x = tfp.layers.DenseFlipout(16, activation=\"relu\")(x)\r\n        logits = tfp.layers.DenseFlipout(1)(x)\r\n        bernoulli = tfp.layers.DistributionLambda(lambda t: tfd.Bernoulli(logits=t))(logits)\r\n        model = tf.keras.models.Model(inputs=inp, outputs=bernoulli)\r\n        return model\r\n\r\n    model = get_model()\r\n\r\n    # Error is produced here, probably because of \"mse\", but the error message is quite mysterious.\r\n    # If you comment this, you won't get an error.\r\n    model.compile(loss=\"mse\")\r\n\r\n    # This does NOT produce any error.\r\n    import numpy as np\r\n    x = np.array([[1.0]])\r\n    print(model(x))\r\n\r\n\r\nif __name__ == '__main__':\r\n    example()\r\n```\r\n\r\nproduces a strange error message\r\n\r\n> TypeError: Value passed to parameter 'x' has DataType int32 not in list of allowed values: float16, float32, float64, complex64, complex128\r\n\r\nThe problem is probably due to the usage of \"mse\" as the loss function. In any case, this error message is very cryptic, so I think this is an issue (i.e. the error message should at least be more descriptive of the actual problem).\r\n\r\nI am using TF 2.1 and TFP 0.9.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/797", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/797/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/797/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/797/events", "html_url": "https://github.com/tensorflow/probability/issues/797", "id": 566520311, "node_id": "MDU6SXNzdWU1NjY1MjAzMTE=", "number": 797, "title": "`one_step` function does not run a full step of the NuTS!", "user": {"login": "MedAbdelkaderAbba", "id": 30242546, "node_id": "MDQ6VXNlcjMwMjQyNTQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/30242546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MedAbdelkaderAbba", "html_url": "https://github.com/MedAbdelkaderAbba", "followers_url": "https://api.github.com/users/MedAbdelkaderAbba/followers", "following_url": "https://api.github.com/users/MedAbdelkaderAbba/following{/other_user}", "gists_url": "https://api.github.com/users/MedAbdelkaderAbba/gists{/gist_id}", "starred_url": "https://api.github.com/users/MedAbdelkaderAbba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MedAbdelkaderAbba/subscriptions", "organizations_url": "https://api.github.com/users/MedAbdelkaderAbba/orgs", "repos_url": "https://api.github.com/users/MedAbdelkaderAbba/repos", "events_url": "https://api.github.com/users/MedAbdelkaderAbba/events{/privacy}", "received_events_url": "https://api.github.com/users/MedAbdelkaderAbba/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-17T21:15:07Z", "updated_at": "2020-02-18T22:16:27Z", "closed_at": "2020-02-18T22:16:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was experimenting with the NuTS method in tfp, and realised that the one_step function only runs one leapfrog step instead of a full iteration of NuTS. \r\nIs there a way to actually run a full iteration of the algorithm without calling mcmc.sample_shain ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/789", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/789/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/789/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/789/events", "html_url": "https://github.com/tensorflow/probability/issues/789", "id": 564042026, "node_id": "MDU6SXNzdWU1NjQwNDIwMjY=", "number": 789, "title": " tfp.util.TransformedVariable should allow access to the value of the tensor through .numpy()", "user": {"login": "ottofabian", "id": 14278609, "node_id": "MDQ6VXNlcjE0Mjc4NjA5", "avatar_url": "https://avatars3.githubusercontent.com/u/14278609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ottofabian", "html_url": "https://github.com/ottofabian", "followers_url": "https://api.github.com/users/ottofabian/followers", "following_url": "https://api.github.com/users/ottofabian/following{/other_user}", "gists_url": "https://api.github.com/users/ottofabian/gists{/gist_id}", "starred_url": "https://api.github.com/users/ottofabian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ottofabian/subscriptions", "organizations_url": "https://api.github.com/users/ottofabian/orgs", "repos_url": "https://api.github.com/users/ottofabian/repos", "events_url": "https://api.github.com/users/ottofabian/events{/privacy}", "received_events_url": "https://api.github.com/users/ottofabian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-12T14:36:12Z", "updated_at": "2020-03-09T16:32:15Z", "closed_at": "2020-02-12T16:00:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\ncurrently the tfp.util.TransformedVariable does not allow to access the variable values by calling `numpy()`. \r\nExample: \r\n\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\ndef main():\u00b4\r\n    init_cov = tf.eye(3)\r\n    scale_tril = tfp.util.TransformedVariable(init_cov, bijector=tfp.bijectors.FillScaleTriL())\r\n    print(scale_tril.numpy())\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\nThis is highly related to #731. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/785", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/785/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/785/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/785/events", "html_url": "https://github.com/tensorflow/probability/issues/785", "id": 563337147, "node_id": "MDU6SXNzdWU1NjMzMzcxNDc=", "number": 785, "title": "example missing variable declaration", "user": {"login": "bourov", "id": 13532666, "node_id": "MDQ6VXNlcjEzNTMyNjY2", "avatar_url": "https://avatars1.githubusercontent.com/u/13532666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bourov", "html_url": "https://github.com/bourov", "followers_url": "https://api.github.com/users/bourov/followers", "following_url": "https://api.github.com/users/bourov/following{/other_user}", "gists_url": "https://api.github.com/users/bourov/gists{/gist_id}", "starred_url": "https://api.github.com/users/bourov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bourov/subscriptions", "organizations_url": "https://api.github.com/users/bourov/orgs", "repos_url": "https://api.github.com/users/bourov/repos", "events_url": "https://api.github.com/users/bourov/events{/privacy}", "received_events_url": "https://api.github.com/users/bourov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-11T16:47:35Z", "updated_at": "2020-03-07T07:40:47Z", "closed_at": "2020-03-07T07:40:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Tried to run [Bayesian_Gaussian_Mixture_Model.ipynb](https://github.com/tensorflow/probability/blob/master/tensorflow_probability/examples/jupyter_notebooks/Bayesian_Gaussian_Mixture_Model.ipynb)\r\n\r\nget error in cell below, \r\n`NameError: name 'step_sizes' is not defined\r\n`\r\n\r\ncell in question:\r\n```@tf.function(autograph=False)\r\ndef sample():\r\n  return tfp.mcmc.sample_chain(\r\n    num_results=2000,\r\n    num_burnin_steps=500,\r\n    current_state=initial_state,\r\n    kernel=tfp.mcmc.SimpleStepSizeAdaptation(\r\n        tfp.mcmc.TransformedTransitionKernel(\r\n            inner_kernel=tfp.mcmc.HamiltonianMonteCarlo(\r\n                target_log_prob_fn=unnormalized_posterior_log_prob,\r\n                 step_size=step_sizes,\r\n                 num_leapfrog_steps=5),\r\n            bijector=unconstraining_bijectors),\r\n         num_adaptation_steps=400),\r\n    trace_fn=lambda _, pkr: pkr.inner_results.inner_results.is_accepted)\r\n\r\n[mix_probs, loc, chol_precision], is_accepted = sample()```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/770", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/770/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/770/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/770/events", "html_url": "https://github.com/tensorflow/probability/issues/770", "id": 560355521, "node_id": "MDU6SXNzdWU1NjAzNTU1MjE=", "number": 770, "title": "Generate different forecast result at different run", "user": {"login": "yug95", "id": 13421129, "node_id": "MDQ6VXNlcjEzNDIxMTI5", "avatar_url": "https://avatars2.githubusercontent.com/u/13421129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yug95", "html_url": "https://github.com/yug95", "followers_url": "https://api.github.com/users/yug95/followers", "following_url": "https://api.github.com/users/yug95/following{/other_user}", "gists_url": "https://api.github.com/users/yug95/gists{/gist_id}", "starred_url": "https://api.github.com/users/yug95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yug95/subscriptions", "organizations_url": "https://api.github.com/users/yug95/orgs", "repos_url": "https://api.github.com/users/yug95/repos", "events_url": "https://api.github.com/users/yug95/events{/privacy}", "received_events_url": "https://api.github.com/users/yug95/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-05T12:58:07Z", "updated_at": "2020-02-18T21:49:40Z", "closed_at": "2020-02-18T21:49:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "While running tfp sts model, i noticed each time i ran model it generated different forecast which is kind off problematic for inference.\r\n\r\n```\r\nimport tensorflow_probability as tfp\r\ntrend = tfp.sts.LocalLinearTrend(observed_time_series=co2_by_month)\r\nseasonal = tfp.sts.Seasonal(\r\n    num_seasons=12, observed_time_series=co2_by_month)\r\nmodel = tfp.sts.Sum([trend, seasonal], observed_time_series=co2_by_month)\r\n\r\n\r\nco2_model = build_model(co2_by_month_training_data)\r\nvariational_posteriors = tfp.sts.build_factored_surrogate_posterior(\r\n    model=co2_model)\r\n\r\nnum_variational_steps = 200 \r\nnum_variational_steps = int(num_variational_steps)\r\n\r\noptimizer = tf.optimizers.Adam(learning_rate=.1)\r\n\r\nq_samples_co2_ = variational_posteriors.sample(50)\r\n\r\n\r\nco2_forecast_dist = tfp.sts.forecast(\r\n    co2_model,\r\n    observed_time_series=co2_by_month_training_data,\r\n    parameter_samples=q_samples_co2_,\r\n    num_steps_forecast=num_forecast_steps)\r\n\r\n\r\n```\r\n\r\nHere i have taken `mean` value. How to give `Seed` like we give in Random Forest algorithm or is there any other way to fix ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/769", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/769/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/769/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/769/events", "html_url": "https://github.com/tensorflow/probability/issues/769", "id": 560289142, "node_id": "MDU6SXNzdWU1NjAyODkxNDI=", "number": 769, "title": "layers.VariationalGaussianProcess skips layer's 'name' property", "user": {"login": "alexander-e1off", "id": 12794378, "node_id": "MDQ6VXNlcjEyNzk0Mzc4", "avatar_url": "https://avatars2.githubusercontent.com/u/12794378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexander-e1off", "html_url": "https://github.com/alexander-e1off", "followers_url": "https://api.github.com/users/alexander-e1off/followers", "following_url": "https://api.github.com/users/alexander-e1off/following{/other_user}", "gists_url": "https://api.github.com/users/alexander-e1off/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexander-e1off/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexander-e1off/subscriptions", "organizations_url": "https://api.github.com/users/alexander-e1off/orgs", "repos_url": "https://api.github.com/users/alexander-e1off/repos", "events_url": "https://api.github.com/users/alexander-e1off/events{/privacy}", "received_events_url": "https://api.github.com/users/alexander-e1off/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-05T10:49:10Z", "updated_at": "2020-02-12T12:05:50Z", "closed_at": "2020-02-12T12:05:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nit seems `layers.VariationalGaussianProcess` does not pass `name` property to the base class initializer.\r\nIt is accepted [here](https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/layers/distribution_layer.py#L1814) but not passed to the base class initializer [here](https://github.com/tensorflow/probability/blob/master/tensorflow_probability/python/layers/distribution_layer.py#L1854)\r\n\r\nAs a result layer's name remains default.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/768", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/768/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/768/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/768/events", "html_url": "https://github.com/tensorflow/probability/issues/768", "id": 559942216, "node_id": "MDU6SXNzdWU1NTk5NDIyMTY=", "number": 768, "title": "Missing bijectors?", "user": {"login": "fleischd", "id": 13879973, "node_id": "MDQ6VXNlcjEzODc5OTcz", "avatar_url": "https://avatars3.githubusercontent.com/u/13879973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fleischd", "html_url": "https://github.com/fleischd", "followers_url": "https://api.github.com/users/fleischd/followers", "following_url": "https://api.github.com/users/fleischd/following{/other_user}", "gists_url": "https://api.github.com/users/fleischd/gists{/gist_id}", "starred_url": "https://api.github.com/users/fleischd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fleischd/subscriptions", "organizations_url": "https://api.github.com/users/fleischd/orgs", "repos_url": "https://api.github.com/users/fleischd/repos", "events_url": "https://api.github.com/users/fleischd/events{/privacy}", "received_events_url": "https://api.github.com/users/fleischd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-04T19:51:52Z", "updated_at": "2020-02-04T20:11:25Z", "closed_at": "2020-02-04T20:11:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not seeing a bunch of bisectors; am I missing something?\r\n\r\nimport tensorflow_probability as tfp  \r\ntfd = tfp.distributions  \r\ntfb = tfp.bijectors  \r\ndir(tfb)\r\n\r\nyields:\r\n\r\n['AbsoluteValue',\r\n 'Affine',\r\n 'AffineLinearOperator',\r\n 'AffineScalar',\r\n 'AutoregressiveLayer',\r\n 'AutoregressiveNetwork',\r\n 'BatchNormalization',\r\n 'Bijector',\r\n 'Blockwise',\r\n 'Chain',\r\n 'CholeskyOuterProduct',\r\n 'CholeskyToInvCholesky',\r\n 'CorrelationCholesky',\r\n 'Cumsum',\r\n 'DiscreteCosineTransform',\r\n 'Exp',\r\n 'Expm1',\r\n 'FillTriangular',\r\n 'Gumbel',\r\n 'Identity',\r\n 'Inline',\r\n 'Invert',\r\n 'IteratedSigmoidCentered',\r\n 'Kumaraswamy',\r\n 'MaskedAutoregressiveFlow',\r\n 'MatrixInverseTriL',\r\n 'MatvecLU',\r\n 'NormalCDF',\r\n 'Ordered',\r\n 'Permute',\r\n 'PowerTransform',\r\n 'RationalQuadraticSpline',\r\n 'RealNVP',\r\n 'Reciprocal',\r\n 'Reshape',\r\n 'ScaleTriL',\r\n 'Sigmoid',\r\n 'SinhArcsinh',\r\n 'Softfloor',\r\n 'SoftmaxCentered',\r\n 'Softplus',\r\n 'Softsign',\r\n 'Square',\r\n 'Tanh',\r\n 'TransformDiagonal',\r\n 'Transpose',\r\n 'Weibull',\r\n '__all__',\r\n '__builtins__',\r\n '__cached__',\r\n '__doc__',\r\n '__file__',\r\n '__loader__',\r\n '__name__',\r\n '__package__',\r\n '__path__',\r\n '__spec__',\r\n 'absolute_import',\r\n 'absolute_value',\r\n 'affine',\r\n 'affine_linear_operator',\r\n 'affine_scalar',\r\n 'batch_normalization',\r\n 'bijector',\r\n 'blockwise',\r\n 'chain',\r\n 'cholesky_outer_product',\r\n 'cholesky_to_inv_cholesky',\r\n 'correlation_cholesky',\r\n 'cumsum',\r\n 'discrete_cosine_transform',\r\n 'division',\r\n 'exp',\r\n 'expm1',\r\n 'fill_triangular',\r\n 'gumbel',\r\n 'identity',\r\n 'inline',\r\n 'invert',\r\n 'iterated_sigmoid_centered',\r\n 'kumaraswamy',\r\n 'masked_autoregressive',\r\n 'masked_autoregressive_default_template',\r\n 'masked_dense',\r\n 'matrix_inverse_tril',\r\n 'matveclu',\r\n 'normal_cdf',\r\n 'ordered',\r\n 'permute',\r\n 'power_transform',\r\n 'print_function',\r\n 'rational_quadratic_spline',\r\n 'real_nvp',\r\n 'real_nvp_default_template',\r\n 'reciprocal',\r\n 'reshape',\r\n 'scale_tril',\r\n 'sigmoid',\r\n 'sinh_arcsinh',\r\n 'softfloor',\r\n 'softmax_centered',\r\n 'softplus',\r\n 'softsign',\r\n 'square',\r\n 'tanh',\r\n 'transform_diagonal',\r\n 'transpose',\r\n 'weibull']\r\n\r\nSeems I'm missing \"Scale()\", among others. Or are these deprecated now?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/766", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/766/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/766/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/766/events", "html_url": "https://github.com/tensorflow/probability/issues/766", "id": 559290248, "node_id": "MDU6SXNzdWU1NTkyOTAyNDg=", "number": 766, "title": "MixtureSameFamily of MultivariateNormalDiag has probability > 1", "user": {"login": "jmamath", "id": 16581022, "node_id": "MDQ6VXNlcjE2NTgxMDIy", "avatar_url": "https://avatars1.githubusercontent.com/u/16581022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmamath", "html_url": "https://github.com/jmamath", "followers_url": "https://api.github.com/users/jmamath/followers", "following_url": "https://api.github.com/users/jmamath/following{/other_user}", "gists_url": "https://api.github.com/users/jmamath/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmamath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmamath/subscriptions", "organizations_url": "https://api.github.com/users/jmamath/orgs", "repos_url": "https://api.github.com/users/jmamath/repos", "events_url": "https://api.github.com/users/jmamath/events{/privacy}", "received_events_url": "https://api.github.com/users/jmamath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-03T19:38:54Z", "updated_at": "2020-02-03T19:46:16Z", "closed_at": "2020-02-03T19:46:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following example\r\n\r\n```\r\nalpha = tf.Tensor(\r\n[0.00727816 0.02976815 0.00167341 0.00214406 0.3332777  0.18980083\r\n 0.08801899 0.0031409  0.00928677 0.0032858  0.03497721 0.01073589\r\n 0.012935   0.19728002 0.01741255 0.00215498 0.00389384 0.00599009\r\n 0.02581833 0.02112722], shape=(20,), dtype=float32)\r\n```\r\n\r\n```\r\nmu = tf.Tensor(\r\n[[-0.50442755 -0.01870317]\r\n [-0.5674103   0.02794275]\r\n [ 0.7960233  -0.5971223 ]\r\n [-1.6937377  -1.0169436 ]\r\n [-0.79959804 -0.06011778]\r\n [ 0.1160823  -0.05552337]\r\n [-0.33520716  0.00629089]\r\n [-0.08431039  0.8110395 ]\r\n [-0.18529372  0.54175633]\r\n [ 0.31321818 -0.35423484]\r\n [ 0.18501453  0.14447145]\r\n [-0.48975462  0.6243821 ]\r\n [-0.58386815  0.8118528 ]\r\n [-1.5071421  -0.1397309 ]\r\n [ 1.4758422   0.8208299 ]\r\n [ 0.6887258   0.49201745]\r\n [-0.02922961  0.16469216]\r\n [ 0.7128658  -0.52333134]\r\n [ 2.278748    0.36529884]\r\n [-2.0153687   0.4455365 ]], shape=(20, 2), dtype=float32)\r\n```\r\n\r\n```\r\nsigma = tf.Tensor(\r\n[[0.5918447  0.18853009]\r\n [1.1549302  0.17114827]\r\n [1.1260444  0.2492983 ]\r\n [0.38341668 0.9474937 ]\r\n [0.40622365 0.08592743]\r\n [0.14400737 0.07129052]\r\n [0.48704767 0.08485419]\r\n [1.8514798  0.22243685]\r\n [1.5222443  0.17227992]\r\n [0.23345467 0.26538938]\r\n [0.18408516 0.05973829]\r\n [0.8205373  0.24695908]\r\n [0.24542125 0.1612206 ]\r\n [0.60322654 0.17402951]\r\n [1.6223727  0.37661815]\r\n [0.87738395 4.214276  ]\r\n [0.42374584 0.10941723]\r\n [0.9792931  0.8002101 ]\r\n [1.0148332  0.6370292 ]\r\n [0.8905781  0.24602519]], shape=(20, 2), dtype=float32)\r\n```\r\n\r\nThen, I can create a mixture of Gaussian as follow:\r\n```\r\nalpha_prob = tfd.Categorical(probs=alpha_)\r\ngaussians = tfd.MultivariateNormalDiag(loc=mu_,scale_diag=sigma_)  \r\ngm = tfd.MixtureSameFamily(\r\n                    mixture_distribution=alpha_prob,\r\n                            components_distribution=gaussians) \r\n```\r\n\r\nThe problem is that I have probabililty of element (0.,0.) > 1\r\nIndeed I have `gm.prob((0.,0.)) = 2.0700898`\r\n\r\nIs this the normal behavior ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/764", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/764/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/764/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/764/events", "html_url": "https://github.com/tensorflow/probability/issues/764", "id": 559046273, "node_id": "MDU6SXNzdWU1NTkwNDYyNzM=", "number": 764, "title": "`bfgs_minimize` errors with `@tf.function(experimental_compile=True)`", "user": {"login": "jeffpollock9", "id": 5081168, "node_id": "MDQ6VXNlcjUwODExNjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5081168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeffpollock9", "html_url": "https://github.com/jeffpollock9", "followers_url": "https://api.github.com/users/jeffpollock9/followers", "following_url": "https://api.github.com/users/jeffpollock9/following{/other_user}", "gists_url": "https://api.github.com/users/jeffpollock9/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeffpollock9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeffpollock9/subscriptions", "organizations_url": "https://api.github.com/users/jeffpollock9/orgs", "repos_url": "https://api.github.com/users/jeffpollock9/repos", "events_url": "https://api.github.com/users/jeffpollock9/events{/privacy}", "received_events_url": "https://api.github.com/users/jeffpollock9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-03T12:16:34Z", "updated_at": "2020-02-07T18:44:14Z", "closed_at": "2020-02-07T18:44:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nIf an `initial_inverse_hessian_estimate` is supplied to `tfp.optimizer.bfgs_minimize` then some assert [operations are added](https://github.com/tensorflow/probability/blob/6fdaa6e60aa7a93a67055248ed5b81ce10b497d6/tensorflow_probability/python/optimizer/bfgs.py#L288). AFAIK this means that the function cannot work with `@tf.function(experimental_compile=True)` (see example below) and additionally the checks could be quite expensive for large problems as they involve a [cholesky decomposition](https://github.com/tensorflow/probability/blob/6fdaa6e60aa7a93a67055248ed5b81ce10b497d6/tensorflow_probability/python/optimizer/bfgs.py#L304).\r\n\r\nI was wondering if there could be some way to skip these checks? Perhaps a new parameter like `tfp.optimizer.bfgs_minimize(..., validate_args=True)` in a similar fashion to the distributions? Happy to contribute this if it would be useful for anyone (it certainly would be for me).\r\n\r\nThanks!\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\nprint(tfp.__version__)\r\n### => '0.9.0'\r\nprint(tf.__version__)\r\n### ==> '2.1.0'\r\n\r\n\r\ndef objective(x):\r\n    return tf.reduce_sum(tf.math.squared_difference(x, [1.0, 10.0]))\r\n\r\n\r\ndef objective_value_and_grad(x):\r\n    return tfp.math.value_and_gradient(objective, x)\r\n\r\n\r\n@tf.function(autograph=False, experimental_compile=True)\r\ndef fit_works():\r\n    return tfp.optimizer.bfgs_minimize(\r\n        objective_value_and_grad, initial_position=tf.zeros(2),\r\n    )\r\n\r\n\r\n@tf.function(autograph=False, experimental_compile=True)\r\ndef fit_doesnt_work():\r\n    return tfp.optimizer.bfgs_minimize(\r\n        objective_value_and_grad,\r\n        initial_position=tf.zeros(2),\r\n        initial_inverse_hessian_estimate=tf.eye(2),\r\n    )\r\n\r\n\r\noptim = fit_works()\r\n\r\nprint(f\"value: {optim.objective_value}, position: {optim.position}\")\r\n### => value: 0.0, position: [ 1. 10.]\r\n\r\nfit_doesnt_work()\r\n### =>\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jeff/workspace/misc/bfgs_compile.py\", line 33, in <module>\r\n    optim = fit_doesnt_work()\r\n  File \"/home/jeff/.virtualenvs/prematch-models/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py\", line 564, in __call__\r\n    result = self._call(*args, **kwds)\r\n  File \"/home/jeff/.virtualenvs/prematch-models/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py\", line 606, in _call\r\n    results = self._stateful_fn(*args, **kwds)\r\n  File \"/home/jeff/.virtualenvs/prematch-models/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\", line 2363, in __call__\r\n    return graph_function._filtered_call(args, kwargs)  # pylint: disable=protected-access\r\n  File \"/home/jeff/.virtualenvs/prematch-models/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\", line 1611, in _filtered_call\r\n    self.captured_inputs)\r\n  File \"/home/jeff/.virtualenvs/prematch-models/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\", line 1692, in _call_flat\r\n    ctx, args, cancellation_manager=cancellation_manager))\r\n  File \"/home/jeff/.virtualenvs/prematch-models/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py\", line 545, in call\r\n    ctx=ctx)\r\n  File \"/home/jeff/.virtualenvs/prematch-models/lib/python3.6/site-packages/tensorflow_core/python/eager/execute.py\", line 67, in quick_execute\r\n    six.raise_from(core._status_to_exception(e.code, message), None)\r\n  File \"<string>\", line 3, in raise_from\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Function invoked by the following node is not compilable: name: \"__inference_fit_doesnt_work_4833\" op: \"__inference_fit_doesnt_work_4833\" attr { key: \"_XlaCompile\" value { b: true } } attr { key: \"config_proto\" value { s: \"\\n\\007\\n\\003GPU\\020\\001\\n\\007\\n\\003CPU\\020\\0012\\005*\\0010J\\0008\\001\" } } attr { key: \"executor_type\" value { s: \"\" } }.\r\nUncompilable nodes:\r\n\tminimize/Assert/Const: unsupported op: Const op with type DT_STRING is not supported by XLA.\r\n\tStacktrace:\r\n\t\tNode: __inference_fit_doesnt_work_4833, function: \r\n\t\tNode: minimize/Assert/Const, function: __inference_fit_doesnt_work_4833\r\n\tminimize/Assert_1/Const: unsupported op: Const op with type DT_STRING is not supported by XLA.\r\n\tStacktrace:\r\n\t\tNode: __inference_fit_doesnt_work_4833, function: \r\n\t\tNode: minimize/Assert_1/Const, function: __inference_fit_doesnt_work_4833\r\n\tAssert/data_0: unsupported op: Const op with type DT_STRING is not supported by XLA.\r\n\tStacktrace:\r\n\t\tNode: __inference_fit_doesnt_work_4833, function: \r\n\t\tNode: minimize/Assert_1/AssertGuard, function: __inference_fit_doesnt_work_4833\r\n\t\tNode: Assert/data_0, function: minimize_Assert_1_AssertGuard_false_2450\r\n\tAssert/data_0: unsupported op: Const op with type DT_STRING is not supported by XLA.\r\n\tStacktrace:\r\n\t\tNode: __inference_fit_doesnt_work_4833, function: \r\n\t\tNode: minimize/Assert/AssertGuard, function: __inference_fit_doesnt_work_4833\r\n\t\tNode: Assert/data_0, function: minimize_Assert_AssertGuard_false_2434\r\n [Op:__inference_fit_doesnt_work_4833]\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/758", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/758/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/758/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/758/events", "html_url": "https://github.com/tensorflow/probability/issues/758", "id": 558504612, "node_id": "MDU6SXNzdWU1NTg1MDQ2MTI=", "number": 758, "title": "0.9 and 0.10 not support tf 2.0", "user": {"login": "moonman925", "id": 18347543, "node_id": "MDQ6VXNlcjE4MzQ3NTQz", "avatar_url": "https://avatars1.githubusercontent.com/u/18347543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moonman925", "html_url": "https://github.com/moonman925", "followers_url": "https://api.github.com/users/moonman925/followers", "following_url": "https://api.github.com/users/moonman925/following{/other_user}", "gists_url": "https://api.github.com/users/moonman925/gists{/gist_id}", "starred_url": "https://api.github.com/users/moonman925/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moonman925/subscriptions", "organizations_url": "https://api.github.com/users/moonman925/orgs", "repos_url": "https://api.github.com/users/moonman925/repos", "events_url": "https://api.github.com/users/moonman925/events{/privacy}", "received_events_url": "https://api.github.com/users/moonman925/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-02-01T08:07:55Z", "updated_at": "2020-02-03T15:53:47Z", "closed_at": "2020-02-03T15:37:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "so upcoming version of tfp will not support tf 2.0 no more ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/751", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/751/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/751/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/751/events", "html_url": "https://github.com/tensorflow/probability/issues/751", "id": 555232617, "node_id": "MDU6SXNzdWU1NTUyMzI2MTc=", "number": 751, "title": "Is there any particular reason why you use softplus to make sure the scale is non-negative?", "user": {"login": "nbro", "id": 9349000, "node_id": "MDQ6VXNlcjkzNDkwMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9349000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbro", "html_url": "https://github.com/nbro", "followers_url": "https://api.github.com/users/nbro/followers", "following_url": "https://api.github.com/users/nbro/following{/other_user}", "gists_url": "https://api.github.com/users/nbro/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbro/subscriptions", "organizations_url": "https://api.github.com/users/nbro/orgs", "repos_url": "https://api.github.com/users/nbro/repos", "events_url": "https://api.github.com/users/nbro/events{/privacy}", "received_events_url": "https://api.github.com/users/nbro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-26T14:01:36Z", "updated_at": "2020-02-08T02:15:42Z", "closed_at": "2020-02-08T02:15:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the article https://blog.tensorflow.org/2019/03/regression-with-probabilistic-layers-in.html, you use the softplus to make sure the scales are non-negative. However, if the inputs are e.g. -40.0, the softplus returns values which are extremely small\r\n\r\n```\r\nimport tensorflow as tf\r\ntf.math.softplus(-40.0)\r\nOut[9]: <tf.Tensor: id=11, shape=(), dtype=float32, numpy=4.248354e-18>\r\n```\r\n\r\nwhich would make the scale extremely small and quite unrealistic (and this can easily lead to NaNs or vanishing and exploding gradients).\r\n\r\nIs there any particular reason why you use softplus to make sure the scale is non-negative? Is there any formal study that states that the softplus is an appropriate option in this case? \r\n\r\nFor example, why not simply using the absolute value, the ReLU or any other function that doesn't behave badly in the case of negative numbers (like softplus) to convert the negative numbers to positive ones before feeding them into the scale parameter of a distribution?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/749", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/749/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/749/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/749/events", "html_url": "https://github.com/tensorflow/probability/issues/749", "id": 555125401, "node_id": "MDU6SXNzdWU1NTUxMjU0MDE=", "number": 749, "title": "vectorized log_prob for `Categorical`/`FiniteDiscrete` gives an error", "user": {"login": "rrkarim", "id": 11855380, "node_id": "MDQ6VXNlcjExODU1Mzgw", "avatar_url": "https://avatars0.githubusercontent.com/u/11855380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rrkarim", "html_url": "https://github.com/rrkarim", "followers_url": "https://api.github.com/users/rrkarim/followers", "following_url": "https://api.github.com/users/rrkarim/following{/other_user}", "gists_url": "https://api.github.com/users/rrkarim/gists{/gist_id}", "starred_url": "https://api.github.com/users/rrkarim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rrkarim/subscriptions", "organizations_url": "https://api.github.com/users/rrkarim/orgs", "repos_url": "https://api.github.com/users/rrkarim/repos", "events_url": "https://api.github.com/users/rrkarim/events{/privacy}", "received_events_url": "https://api.github.com/users/rrkarim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-25T19:13:29Z", "updated_at": "2020-02-20T17:15:54Z", "closed_at": "2020-02-20T17:15:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\nimport numpy as np\r\ntfd = tfp.distributions\r\nfrom tensorflow_probability.python.distributions import categorical\r\n\r\nout = tf.range(0, 10, dtype=tf.float32)\r\n_categorical = categorical.Categorical(\r\n    logits=None,\r\n    probs=out/(4 - 1),\r\n    dtype=tf.int32,\r\n    validate_args=False,\r\n    allow_nan_stats=True\r\n)\r\ninp = _categorical.sample([1])\r\ntf.vectorized_map(_categorical.log_prob, inp)\r\n```\r\nthrows:\r\n```\r\n...\r\nValueError: No converter defined for SparseSoftmaxCrossEntropyWithLogits\r\n    name: \"loop_body/Categorical/log_prob/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits\"\r\n    op: \"SparseSoftmaxCrossEntropyWithLogits\"\r\n...\r\n```\r\nI guess the problem is with the lack of the converter for `SparseSoftmaxCrossEntropyWithLogits` op in tf. Opening the issue to address in PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/746", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/746/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/746/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/746/events", "html_url": "https://github.com/tensorflow/probability/issues/746", "id": 554880240, "node_id": "MDU6SXNzdWU1NTQ4ODAyNDA=", "number": 746, "title": "conditional sampling from PixelCNN docstring code error", "user": {"login": "skeydan", "id": 469371, "node_id": "MDQ6VXNlcjQ2OTM3MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/469371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skeydan", "html_url": "https://github.com/skeydan", "followers_url": "https://api.github.com/users/skeydan/followers", "following_url": "https://api.github.com/users/skeydan/following{/other_user}", "gists_url": "https://api.github.com/users/skeydan/gists{/gist_id}", "starred_url": "https://api.github.com/users/skeydan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skeydan/subscriptions", "organizations_url": "https://api.github.com/users/skeydan/orgs", "repos_url": "https://api.github.com/users/skeydan/repos", "events_url": "https://api.github.com/users/skeydan/events{/privacy}", "received_events_url": "https://api.github.com/users/skeydan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "emilyfertig", "id": 26593137, "node_id": "MDQ6VXNlcjI2NTkzMTM3", "avatar_url": "https://avatars2.githubusercontent.com/u/26593137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilyfertig", "html_url": "https://github.com/emilyfertig", "followers_url": "https://api.github.com/users/emilyfertig/followers", "following_url": "https://api.github.com/users/emilyfertig/following{/other_user}", "gists_url": "https://api.github.com/users/emilyfertig/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilyfertig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilyfertig/subscriptions", "organizations_url": "https://api.github.com/users/emilyfertig/orgs", "repos_url": "https://api.github.com/users/emilyfertig/repos", "events_url": "https://api.github.com/users/emilyfertig/events{/privacy}", "received_events_url": "https://api.github.com/users/emilyfertig/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "emilyfertig", "id": 26593137, "node_id": "MDQ6VXNlcjI2NTkzMTM3", "avatar_url": "https://avatars2.githubusercontent.com/u/26593137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilyfertig", "html_url": "https://github.com/emilyfertig", "followers_url": "https://api.github.com/users/emilyfertig/followers", "following_url": "https://api.github.com/users/emilyfertig/following{/other_user}", "gists_url": "https://api.github.com/users/emilyfertig/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilyfertig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilyfertig/subscriptions", "organizations_url": "https://api.github.com/users/emilyfertig/orgs", "repos_url": "https://api.github.com/users/emilyfertig/repos", "events_url": "https://api.github.com/users/emilyfertig/events{/privacy}", "received_events_url": "https://api.github.com/users/emilyfertig/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-01-24T18:11:08Z", "updated_at": "2020-01-30T01:50:54Z", "closed_at": "2020-01-29T20:54:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nPixelCNN is awesome, thanks for that!\r\n\r\nHowever running the conditional sampling example \r\n\r\nhttps://github.com/tensorflow/probability/blob/7286a995fe682e0a2d94a169584e50f7fe655111/tensorflow_probability/python/distributions/pixel_cnn.py#L200\r\n\r\nfails with \r\n\r\n```\r\nInvalidArgumentError: cannot compute Equal as input #1(zero-based) was expected to be a float tensor but is a int32 tensor [Op:Equal]\r\n```\r\n\r\n(from assertion in \r\n\r\nhttps://github.com/tensorflow/probability/blob/495da0add37bd5f894653cf860b7db1de4666e28/tensorflow_probability/python/distributions/pixel_cnn.py#L494\r\n\r\n)\r\n\r\nIt would be great if the docstring could be updated :-) \r\nThanks!!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/744", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/744/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/744/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/744/events", "html_url": "https://github.com/tensorflow/probability/issues/744", "id": 554556086, "node_id": "MDU6SXNzdWU1NTQ1NTYwODY=", "number": 744, "title": "'DistributionLambda' object has no attribute '_dedup_weights'", "user": {"login": "jackshi0912", "id": 10685803, "node_id": "MDQ6VXNlcjEwNjg1ODAz", "avatar_url": "https://avatars3.githubusercontent.com/u/10685803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackshi0912", "html_url": "https://github.com/jackshi0912", "followers_url": "https://api.github.com/users/jackshi0912/followers", "following_url": "https://api.github.com/users/jackshi0912/following{/other_user}", "gists_url": "https://api.github.com/users/jackshi0912/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackshi0912/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackshi0912/subscriptions", "organizations_url": "https://api.github.com/users/jackshi0912/orgs", "repos_url": "https://api.github.com/users/jackshi0912/repos", "events_url": "https://api.github.com/users/jackshi0912/events{/privacy}", "received_events_url": "https://api.github.com/users/jackshi0912/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-24T05:45:25Z", "updated_at": "2020-01-24T05:48:03Z", "closed_at": "2020-01-24T05:48:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Useful line of log:\r\n\r\ntensorflow_probability/python/layers/distribution_layer.py:230 trainable_weights\r\n        return self._dedup_weights(from_keras + from_module)\r\n\r\nThe problem is that neither DistributionLambda nor it's super classes tf.keras.layers.Lambda, and tf.Module have the method _dedup_weights", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/741", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/741/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/741/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/741/events", "html_url": "https://github.com/tensorflow/probability/issues/741", "id": 554324977, "node_id": "MDU6SXNzdWU1NTQzMjQ5Nzc=", "number": 741, "title": "[Question] Using FeatureScaled kernel to perform ARD with GaussianProcess", "user": {"login": "fonnesbeck", "id": 81476, "node_id": "MDQ6VXNlcjgxNDc2", "avatar_url": "https://avatars3.githubusercontent.com/u/81476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fonnesbeck", "html_url": "https://github.com/fonnesbeck", "followers_url": "https://api.github.com/users/fonnesbeck/followers", "following_url": "https://api.github.com/users/fonnesbeck/following{/other_user}", "gists_url": "https://api.github.com/users/fonnesbeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/fonnesbeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fonnesbeck/subscriptions", "organizations_url": "https://api.github.com/users/fonnesbeck/orgs", "repos_url": "https://api.github.com/users/fonnesbeck/repos", "events_url": "https://api.github.com/users/fonnesbeck/events{/privacy}", "received_events_url": "https://api.github.com/users/fonnesbeck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-23T18:21:54Z", "updated_at": "2020-01-24T17:40:53Z", "closed_at": "2020-01-24T17:34:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I understand things correctly, one should now be able to perform automatic relevance determination for `GaussianProcess`es using the `FeatureScaled` kernel as follows:\r\n\r\n```python\r\n    amp = tf.Variable(dtype(1), name='amplitude')\r\n    obs_var = tf.Variable(dtype(1), name='observation_noise_variance')\r\n    ls = tf.Variable(dtype([1.]*X.shape[1]), name='length_scale')\r\n    m = tf.Variable(dtype(0), name='mean_const')\r\n\r\n    K = tfk.FeatureScaled(tfk.MaternThreeHalves(amplitude=amp), \r\n                        scale_diag=ls)\r\n    gp = tfd.GaussianProcess(mean_fn=lambda x: m,\r\n                            kernel=K,\r\n                            index_points=X,\r\n                            observation_noise_variance=tf.exp(obs_var))\r\n```\r\n\r\nHowever, when I optimize this model, the length scales do not appear to be working independently:\r\n\r\n```\r\n<tf.Variable 'length_scale:0' shape=(2,) dtype=float64, numpy=array([1.62942848, 1.62877862])>\r\n```\r\n\r\nThis does not appear to be merely bad luck, as it works with several different datasets. Am I using this approach improperly?\r\n\r\nRunning TFP 0.10.0-dev20200122 with TF nightly on Debian with Python 3.7.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/739", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/739/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/739/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/739/events", "html_url": "https://github.com/tensorflow/probability/issues/739", "id": 553503202, "node_id": "MDU6SXNzdWU1NTM1MDMyMDI=", "number": 739, "title": "Missing diagonal shift in VariationalKernel", "user": {"login": "mrksr", "id": 5184063, "node_id": "MDQ6VXNlcjUxODQwNjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5184063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrksr", "html_url": "https://github.com/mrksr", "followers_url": "https://api.github.com/users/mrksr/followers", "following_url": "https://api.github.com/users/mrksr/following{/other_user}", "gists_url": "https://api.github.com/users/mrksr/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrksr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrksr/subscriptions", "organizations_url": "https://api.github.com/users/mrksr/orgs", "repos_url": "https://api.github.com/users/mrksr/repos", "events_url": "https://api.github.com/users/mrksr/events{/privacy}", "received_events_url": "https://api.github.com/users/mrksr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-01-22T12:16:45Z", "updated_at": "2020-03-11T15:05:27Z", "closed_at": "2020-03-11T15:05:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all,\r\n\r\nThe `VariationalGaussianProcess` was reformulated using a `VariationalKernel` similar to the `SchurComplement`-Kernel. This kernel is defined with respect to the inducing points `Z` and contains a cholesky decomposition of the `kernel.matrix(Z, Z)` matrix. It is computed here:\r\nhttps://github.com/tensorflow/probability/blob/e0346910ecca45f6ee83a7deccb3fe7d690e296a/tensorflow_probability/python/distributions/variational_gaussian_process.py#L127\r\n\r\nThis decomposition does not add a diagonal jitter, which sometimes leads to the decomposition failing, for example for initializations which happen to be suboptimal.\r\nCould the jitter be added using `_add_diagonal_shift` or is there a specific reason not to?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/735", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/735/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/735/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/735/events", "html_url": "https://github.com/tensorflow/probability/issues/735", "id": 551632035, "node_id": "MDU6SXNzdWU1NTE2MzIwMzU=", "number": 735, "title": "Gaussian Process Regression Model Example Not Working", "user": {"login": "mawallace", "id": 10112099, "node_id": "MDQ6VXNlcjEwMTEyMDk5", "avatar_url": "https://avatars2.githubusercontent.com/u/10112099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mawallace", "html_url": "https://github.com/mawallace", "followers_url": "https://api.github.com/users/mawallace/followers", "following_url": "https://api.github.com/users/mawallace/following{/other_user}", "gists_url": "https://api.github.com/users/mawallace/gists{/gist_id}", "starred_url": "https://api.github.com/users/mawallace/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mawallace/subscriptions", "organizations_url": "https://api.github.com/users/mawallace/orgs", "repos_url": "https://api.github.com/users/mawallace/repos", "events_url": "https://api.github.com/users/mawallace/events{/privacy}", "received_events_url": "https://api.github.com/users/mawallace/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-17T21:07:28Z", "updated_at": "2020-02-07T04:54:43Z", "closed_at": "2020-02-07T04:54:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to get the second example in the [Gaussian Process Regression Model documentation](https://www.tensorflow.org/probability/api_docs/python/tfp/distributions/GaussianProcessRegressionModel) working, I'm running into issues that I think are related to v2 differences. The code in the example is shown below.\r\n\r\n```python3\r\nimport numpy as np\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\nimport matplotlib.pyplot as plt\r\n\r\ntfd = tfp.distributions\r\npsd_kernels = tfp.math.psd_kernels\r\n\r\n# Suppose we have some data from a known function. Note the index points in\r\n# general have shape `[b1, ..., bB, f1, ..., fF]` (here we assume `F == 1`),\r\n# so we need to explicitly consume the feature dimensions (just the last one\r\n# here).\r\nf = lambda x: np.sin(10*x[..., 0]) * np.exp(-x[..., 0]**2)\r\n\r\nobservation_index_points = np.random.uniform(-1., 1., 50)[..., np.newaxis]\r\nobservations = f(observation_index_points) + np.random.normal(0., .05, 50)\r\n\r\n# Define a kernel with trainable parameters. Note we transform the trainable\r\n# variables to apply a positivity constraint.\r\namplitude = tf.exp(tf.Variable(np.float64(0)), name='amplitude')\r\nlength_scale = tf.exp(tf.Variable(np.float64(0)), name='length_scale')\r\nkernel = psd_kernels.ExponentiatedQuadratic(amplitude, length_scale)\r\n\r\nobservation_noise_variance = tf.exp(\r\n    tf.Variable(np.float64(-5)), name='observation_noise_variance')\r\n\r\n# We'll use an unconditioned GP to train the kernel parameters.\r\ngp = tfd.GaussianProcess(\r\n    kernel=kernel,\r\n    index_points=observation_index_points,\r\n    observation_noise_variance=observation_noise_variance)\r\n\r\nneg_log_likelihood = -gp.log_prob(observations)\r\n\r\noptimizer = tf.train.AdamOptimizer(learning_rate=.05, beta1=.5, beta2=.99)\r\noptimize = optimizer.minimize(neg_log_likelihood)\r\n\r\n# We can construct the posterior at a new set of `index_points` using the same\r\n# kernel (with the same parameters, which we'll optimize below).\r\nindex_points = np.linspace(-1., 1., 100)[..., np.newaxis]\r\ngprm = tfd.GaussianProcessRegressionModel(\r\n    kernel=kernel,\r\n    index_points=index_points,\r\n    observation_index_points=observation_index_points,\r\n    observations=observations,\r\n    observation_noise_variance=observation_noise_variance)\r\n\r\nsamples = gprm.sample(10)\r\n# ==> 10 independently drawn, joint samples at `index_points`.\r\n\r\n# Now execute the above ops in a Session, first training the model\r\n# parameters, then drawing and plotting posterior samples.\r\nwith tf.Session() as sess:\r\n  sess.run(tf.global_variables_initializer())\r\n\r\n  for i in range(1000):\r\n    _, neg_log_likelihood_ = sess.run([optimize, neg_log_likelihood])\r\n    if i % 100 == 0:\r\n      print(\"Step {}: NLL = {}\".format(i, neg_log_likelihood_))\r\n\r\n  print(\"Final NLL = {}\".format(neg_log_likelihood_))\r\n  samples_ = sess.run(samples)\r\n\r\n  plt.scatter(np.squeeze(observation_index_points), observations)\r\n  plt.plot(np.stack([index_points[:, 0]]*10).T, samples_.T, c='r', alpha=.2)\r\n```\r\n\r\n\r\nI think I've figured out that I need to change the `AdamOptimizer` part to\r\n```python3\r\noptimizer = tf.optimizers.Adam(learning_rate=.05, beta_1=.5, beta_2=.99)\r\noptimize = optimizer.minimize(neg_log_likelihood, var_list=[amplitude, length_scale, observation_noise_variance])\r\n```\r\n\r\n\r\nHowever, even with this change, I'm still getting the following:\r\n```\r\n2020-01-17 15:57:21.736494: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\r\n2020-01-17 15:57:21.753115: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7fcfdeda1e60 executing computations on platform Host. Devices:\r\n2020-01-17 15:57:21.753154: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): Host, Default Version\r\nTraceback (most recent call last):\r\n  File \"tf-gprm.py\", line 37, in <module>\r\n    optimize = optimizer.minimize(neg_log_likelihood, var_list=[amplitude, length_scale, observation_noise_variance])\r\n  File \"/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/optimizer_v2/optimizer_v2.py\", line 319, in minimize\r\n    return self.apply_gradients(grads_and_vars, name=name)\r\n  File \"/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/optimizer_v2/optimizer_v2.py\", line 435, in apply_gradients\r\n    self._create_slots(var_list)\r\n  File \"/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/optimizer_v2/adam.py\", line 146, in _create_slots\r\n    self.add_slot(var, 'm')\r\n  File \"/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/optimizer_v2/optimizer_v2.py\", line 571, in add_slot\r\n    var_key = _var_key(var)\r\n  File \"/usr/local/lib/python3.7/site-packages/tensorflow_core/python/keras/optimizer_v2/optimizer_v2.py\", line 1051, in _var_key\r\n    if var._in_graph_mode:\r\nAttributeError: 'tensorflow.python.framework.ops.EagerTensor' object has no attribute '_in_graph_mode'\r\n```\r\n\r\nWould someone be able to help out with resolving this?\r\n\r\nVersions as follows:\r\n```\r\ntensorflow              2.0.0\r\ntensorflow_probability  0.8.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/734", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/734/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/734/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/734/events", "html_url": "https://github.com/tensorflow/probability/issues/734", "id": 550766450, "node_id": "MDU6SXNzdWU1NTA3NjY0NTA=", "number": 734, "title": "ordered logistic distribution", "user": {"login": "jeffpollock9", "id": 5081168, "node_id": "MDQ6VXNlcjUwODExNjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5081168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeffpollock9", "html_url": "https://github.com/jeffpollock9", "followers_url": "https://api.github.com/users/jeffpollock9/followers", "following_url": "https://api.github.com/users/jeffpollock9/following{/other_user}", "gists_url": "https://api.github.com/users/jeffpollock9/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeffpollock9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeffpollock9/subscriptions", "organizations_url": "https://api.github.com/users/jeffpollock9/orgs", "repos_url": "https://api.github.com/users/jeffpollock9/repos", "events_url": "https://api.github.com/users/jeffpollock9/events{/privacy}", "received_events_url": "https://api.github.com/users/jeffpollock9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-16T12:07:22Z", "updated_at": "2020-02-14T00:05:24Z", "closed_at": "2020-02-14T00:05:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI recently had to knock up some ordered logistic stuff (as per [pymc3](https://docs.pymc.io/api/distributions/discrete.html#pymc3.distributions.discrete.OrderedLogistic) and [stan](https://mc-stan.org/docs/2_21/functions-reference/ordered-logistic-distribution.html)) and was wondering if there is any interest in me contributing it?\r\n\r\nSo far I have this coded up:\r\n\r\n``` python\r\nimport tensorflow_probability as tfp\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\nfrom tensorflow_probability.python.internal import dtype_util\r\n\r\ntfd = tfp.distributions\r\ntfm = tfp.math\r\n\r\n\r\nclass OrderedLogistic(tfd.Distribution):\r\n    \"\"\"Ordered logistic distribution over integers\r\n    see: https://mc-stan.org/docs/2_21/functions-reference/ordered-logistic-distribution.html\r\n    \"\"\"\r\n\r\n    def __init__(\r\n        self,\r\n        cutpoints,\r\n        linear_predictor,\r\n        dtype=tf.int32,\r\n        validate_args=False,\r\n        allow_nan_stats=True,\r\n        name=\"OrderedLogistic\",\r\n    ):\r\n        \"\"\"Initialize Ordered Logistic distributions\"\"\"\r\n\r\n        parameters = dict(locals())\r\n\r\n        float_dtype = dtype_util.common_dtype(\r\n            [cutpoints, linear_predictor], dtype_hint=tf.float32\r\n        )\r\n\r\n        self._cutpoints = tf.convert_to_tensor(cutpoints, dtype=float_dtype)\r\n        self._linear_predictor = tf.convert_to_tensor(\r\n            linear_predictor, dtype=float_dtype\r\n        )\r\n\r\n        # TODO(jeff): support cutpoints batching\r\n        inf = tf.constant([np.inf], dtype=float_dtype)\r\n        self._augmented_cutpoints = tf.concat([-inf, cutpoints, inf], axis=-1)\r\n\r\n        self._num_categories = tf.shape(cutpoints, out_type=dtype)[-1] + 1\r\n\r\n        super(OrderedLogistic, self).__init__(\r\n            dtype=dtype,\r\n            reparameterization_type=tfd.NOT_REPARAMETERIZED,\r\n            validate_args=validate_args,\r\n            allow_nan_stats=allow_nan_stats,\r\n            parameters=parameters,\r\n            name=name,\r\n        )\r\n\r\n    @property\r\n    def cutpoints(self):\r\n        \"\"\"Input argument `cutpoints`\"\"\"\r\n        return self._cutpoints\r\n\r\n    @property\r\n    def linear_predictor(self):\r\n        \"\"\"Input argument `linear_predictor`\"\"\"\r\n        return self._linear_predictor\r\n\r\n    @property\r\n    def augmented_cutpoints(self):\r\n        \"\"\"`[-inf, cutpoints, inf]` for implementation purposes\"\"\"\r\n        return self._augmented_cutpoints\r\n\r\n    @property\r\n    def num_categories(self):\r\n        \"\"\"The number of possible outcomes\"\"\"\r\n        return self._num_categories\r\n\r\n    def categorical_log_probs(self):\r\n        \"\"\"Matrix of predicted log probabilities for each category\"\"\"\r\n        log_survival = tf.math.log_sigmoid(\r\n            self.linear_predictor[..., tf.newaxis]\r\n            - self.augmented_cutpoints[tf.newaxis, ...]\r\n        )\r\n        return tfm.log_sub_exp(log_survival[..., :-1], log_survival[..., 1:])\r\n\r\n    def categorical_probs(self):\r\n        \"\"\"Matrix of predicted log probabilities for each category\"\"\"\r\n        return tf.math.exp(self.categorical_log_probs())\r\n\r\n    def _sample_n(self, n, seed=None):\r\n        logits = tf.reshape(self.categorical_log_probs(), [-1, self.num_categories])\r\n        draws = tf.random.categorical(logits, n, dtype=self.dtype, seed=seed)\r\n        return tf.reshape(\r\n            tf.transpose(draws),\r\n            shape=tf.concat([[n], self._batch_shape_tensor()], axis=0),\r\n        )\r\n\r\n    def _batch_shape_tensor(self):\r\n        return tf.shape(self.linear_predictor)\r\n\r\n    def _batch_shape(self):\r\n        return self.linear_predictor.shape\r\n\r\n    def _event_shape_tensor(self):\r\n        return tf.constant([], dtype=tf.int32)\r\n\r\n    def _event_shape(self):\r\n        return tf.TensorShape([])\r\n\r\n    def _log_prob(self, x):\r\n        log_survival_xm1 = self._log_survival_function(x - 1)\r\n        log_survival_x = self._log_survival_function(x)\r\n        return tfm.log_sub_exp(log_survival_xm1, log_survival_x)\r\n\r\n    def _log_cdf(self, x):\r\n        return tfm.log1mexp(self._log_survival_function(x))\r\n\r\n    def _log_survival_function(self, x):\r\n        return tf.math.log_sigmoid(\r\n            self.linear_predictor - tf.gather(self.augmented_cutpoints, x + 1)\r\n        )\r\n```\r\nwith usage:\r\n``` python\r\ncutpoints = tf.constant([1.0, 2.0])\r\nlinear_predictor = tf.constant([0.0, 1.0])\r\n\r\ndist = OrderedLogistic(cutpoints, linear_predictor)\r\n\r\n>>> print(dist)\r\ntfp.distributions.OrderedLogistic(\"OrderedLogistic\", batch_shape=[2], event_shape=[], dtype=int32)\r\n>>> print(dist.sample(5))\r\ntf.Tensor(\r\n[[0 1]\r\n [0 1]\r\n [0 0]\r\n [0 0]\r\n [0 1]], shape=(5, 2), dtype=int32)\r\n>>> print(dist.categorical_probs())\r\ntf.Tensor(\r\n[[0.7310586  0.14973852 0.11920291]\r\n [0.5        0.23105857 0.26894143]], shape=(2, 3), dtype=float32)\r\n```\r\n\r\nbut it is missing a few bits and bobs that I can add if there is appetite in adding this. Any feedback at this early stage would also be amazing.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/731", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/731/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/731/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/731/events", "html_url": "https://github.com/tensorflow/probability/issues/731", "id": 549615885, "node_id": "MDU6SXNzdWU1NDk2MTU4ODU=", "number": 731, "title": "tfp.util.DeferredTensor should allow access to the value of the tensor through .numpy()", "user": {"login": "hartikainen", "id": 2308543, "node_id": "MDQ6VXNlcjIzMDg1NDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2308543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hartikainen", "html_url": "https://github.com/hartikainen", "followers_url": "https://api.github.com/users/hartikainen/followers", "following_url": "https://api.github.com/users/hartikainen/following{/other_user}", "gists_url": "https://api.github.com/users/hartikainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/hartikainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hartikainen/subscriptions", "organizations_url": "https://api.github.com/users/hartikainen/orgs", "repos_url": "https://api.github.com/users/hartikainen/repos", "events_url": "https://api.github.com/users/hartikainen/events{/privacy}", "received_events_url": "https://api.github.com/users/hartikainen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-14T14:48:18Z", "updated_at": "2020-02-08T01:45:18Z", "closed_at": "2020-02-08T01:45:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hey,\r\n\r\nI think it'd be useful if `tfp.util.DeferredTensor` values could be accessed in the same way as the non-deferred variable values. For example, it would be useful if the following was possible:\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\n\r\ndef main():\r\n    x = tf.Variable(0.5)\r\n    y = tfp.util.DeferredTensor(x, tf.exp)\r\n    print(y.numpy())  # y.transform_fn(y.variables).numpy() works.\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nHowever, the example currently fails with `AttributeError: 'DeferredTensor' object has no attribute 'numpy'`.\r\n\r\nIs this intentional and there's a fundamental reason for not allowing this for `DeferredTensor`s or is this a feature that could exist? I'd be happy to contribute a fix for this if needed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/729", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/729/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/729/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/729/events", "html_url": "https://github.com/tensorflow/probability/issues/729", "id": 549150954, "node_id": "MDU6SXNzdWU1NDkxNTA5NTQ=", "number": 729, "title": "Updating `TensorFlow_Probability_Case_Study_Covariance_Estimation` notebook for TF 2.0 -- Is it still critical?", "user": {"login": "00krishna", "id": 2063593, "node_id": "MDQ6VXNlcjIwNjM1OTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2063593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/00krishna", "html_url": "https://github.com/00krishna", "followers_url": "https://api.github.com/users/00krishna/followers", "following_url": "https://api.github.com/users/00krishna/following{/other_user}", "gists_url": "https://api.github.com/users/00krishna/gists{/gist_id}", "starred_url": "https://api.github.com/users/00krishna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/00krishna/subscriptions", "organizations_url": "https://api.github.com/users/00krishna/orgs", "repos_url": "https://api.github.com/users/00krishna/repos", "events_url": "https://api.github.com/users/00krishna/events{/privacy}", "received_events_url": "https://api.github.com/users/00krishna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-13T20:03:40Z", "updated_at": "2020-01-27T19:07:30Z", "closed_at": "2020-01-27T19:07:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello Tensorflow Probability. \r\n\r\nI just had a question. I know that you all have been updating the notebooks to reflect Tensorflow 2.0, and that some key notebooks have already been updated. I noticed that the `Tensorflow Case Study Covariance Estimation` notebook had not been updated yet, even though it is the third notebook in the\r\nTensorflow Probability Guide. So I was trying to understand how important this notebook was in terms of how TF Probability works under TF 2.0?\r\n\r\nIn other words, my assumption is that you have probably updated the minimal critical set of notebooks to help users understand how TF Probability works under TF 2.0. For example, you have updated the `Linear Mixed Effects` notebook, already, as well as others. However, since the Covariance Estimation notebook is the 3rd one in the Guide, it seems like it would have been a critical notebook to update--but then again it might not be. \r\n\r\nThe reason I was interested in the Covariance Estimation notebook is because it indicates some very specific numerical issues in how to handle say Cholesky decomposition of the precision matrix and how to best handle that in TF Probability. BUT, it might be that under the new Tensorflow Probability, these issues might be resolved; and if they are resolved, then this Covariance Estimation notebook is not so critical anymore. \r\n\r\nHaha, so a very complicated and convoluted issue, but hopefully you guys get what I am asking. Thanks.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/728", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/728/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/728/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/728/events", "html_url": "https://github.com/tensorflow/probability/issues/728", "id": 548894862, "node_id": "MDU6SXNzdWU1NDg4OTQ4NjI=", "number": 728, "title": "NUTS sampling performance vs. HMC", "user": {"login": "mwalmsley", "id": 7740526, "node_id": "MDQ6VXNlcjc3NDA1MjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/7740526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwalmsley", "html_url": "https://github.com/mwalmsley", "followers_url": "https://api.github.com/users/mwalmsley/followers", "following_url": "https://api.github.com/users/mwalmsley/following{/other_user}", "gists_url": "https://api.github.com/users/mwalmsley/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwalmsley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwalmsley/subscriptions", "organizations_url": "https://api.github.com/users/mwalmsley/orgs", "repos_url": "https://api.github.com/users/mwalmsley/repos", "events_url": "https://api.github.com/users/mwalmsley/events{/privacy}", "received_events_url": "https://api.github.com/users/mwalmsley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-13T12:19:54Z", "updated_at": "2020-01-13T18:14:24Z", "closed_at": "2020-01-13T15:00:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "NUTS is a brilliant addition to tfp and very helpful to my research - thank you for implementing this!\r\n\r\nI have noticed that, for the toy problem below and for my own research problems, NUTS is around 2-5x slower per sample than HMC. Is this expected?\r\n\r\nTo illustrate, below is a toy problem solved using either HMC or NUTS, and dual step size adaption (I could add this to the docs as an example if you like). \r\n\r\nThis is using TF 1.15 with eager execution enabled.\r\n\r\n#### Imports\r\n```\r\nimport numpy as np\r\nimport tensorflow_probability as tfp\r\ntfd = tfp.distributions\r\ntf.enable_eager_execution()\r\n```\r\n\r\n#### Define distribution to sample (two slightly overlapping 2D Gaussians)\r\n```\r\ndist = tfd.MixtureSameFamily(\r\n    mixture_distribution=tfd.Categorical(\r\n        probs=[0.5, 0.5]),\r\n    components_distribution=tfd.MultivariateNormalDiag(\r\n    loc=[[.8, .5], [.2, .5]],\r\n    scale_diag=[[.2, .4], [.2, .4]])\r\n)\r\nlog_prob = dist.log_prob\r\n```\r\n \r\n#### Choose sampling parameters\r\n```\r\nn_chains = 30\r\ninitial_state = tf.constant(np.random.rand(n_chains, 2), dtype=tf.float32)\r\nnum_results = 1000\r\nnum_burnin = 100\r\nstep_size = .01  # initial\r\n```\r\n\r\n\r\n#### Create kernels\r\n\r\n```\r\nnuts_kernel = tfp.mcmc.NoUTurnSampler(\r\n    target_log_prob_fn=log_prob,\r\n    step_size=step_size\r\n)\r\n\r\n# Same num. leapfrog steps as the docstring example. \r\n# With step size adaption, works perfectly for this problem.\r\nhmc_kernel = tfp.mcmc.HamiltonianMonteCarlo(\r\n    target_log_prob_fn=log_prob,\r\n    num_leapfrog_steps=3,\r\n    step_size=step_size\r\n)\r\n```\r\n\r\n#### Create (equivalent) step size adaption\r\n\r\n```\r\nhmc_adaptive_kernel = tfp.mcmc.DualAveragingStepSizeAdaptation(\r\n    inner_kernel=hmc_kernel,\r\n    num_adaptation_steps=int(num_burnin * 0.8)\r\n)\r\n\r\nnuts_adaptive_kernel = tfp.mcmc.DualAveragingStepSizeAdaptation(\r\n    nuts_kernel,\r\n    num_adaptation_steps=int(num_burnin * 0.8),\r\n    step_size_setter_fn=lambda pkr, new_step_size: pkr._replace(step_size=new_step_size),\r\n    step_size_getter_fn=lambda pkr: pkr.step_size,\r\n    log_accept_prob_getter_fn=lambda pkr: pkr.log_accept_ratio,\r\n)\r\n```\r\n(with thanks to #549)\r\n\r\n#### Sample using each kernel\r\n\r\n```\r\nchain_output = tfp.mcmc.sample_chain(\r\n    num_results=num_results,\r\n    num_burnin_steps=num_burnin,\r\n    current_state=initial_state,\r\n    kernel=hmc_adaptive_kernel,\r\n    trace_fn=None\r\n)\r\n```\r\nHMC completes in 50 seconds.\r\n\r\n```\r\nchain_output = tfp.mcmc.sample_chain(\r\n    num_results=num_results,\r\n    num_burnin_steps=num_burnin,\r\n    current_state=initial_state,\r\n    kernel=nuts_adaptive_kernel,\r\n    trace_fn=None\r\n)\r\n```\r\nNUTS completes in 252 seconds.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/724", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/724/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/724/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/724/events", "html_url": "https://github.com/tensorflow/probability/issues/724", "id": 548545838, "node_id": "MDU6SXNzdWU1NDg1NDU4Mzg=", "number": 724, "title": "error when import tensorflow_probability as tfp", "user": {"login": "amitca71", "id": 5821916, "node_id": "MDQ6VXNlcjU4MjE5MTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5821916?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amitca71", "html_url": "https://github.com/amitca71", "followers_url": "https://api.github.com/users/amitca71/followers", "following_url": "https://api.github.com/users/amitca71/following{/other_user}", "gists_url": "https://api.github.com/users/amitca71/gists{/gist_id}", "starred_url": "https://api.github.com/users/amitca71/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amitca71/subscriptions", "organizations_url": "https://api.github.com/users/amitca71/orgs", "repos_url": "https://api.github.com/users/amitca71/repos", "events_url": "https://api.github.com/users/amitca71/events{/privacy}", "received_events_url": "https://api.github.com/users/amitca71/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-12T09:43:54Z", "updated_at": "2020-02-08T08:32:21Z", "closed_at": "2020-02-08T08:32:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried all combinations on  Google Colab\r\nthe only combination I found working was: \r\npip install tensorflow==2.1.0\r\npip install tensorflow_probability==0.9.0\r\n\r\n(https://colab.research.google.com/github/tensorflow/probability/blob/master/tensorflow_probability/examples/jupyter_notebooks/Structural_Time_Series_Modeling_Case_Studies_Atmospheric_CO2_and_Electricity_Demand.ipynb#scrollTo=c5oL4Cc9lwHR)\r\n\r\nsame results on local environment (using CPU only)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/722", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/722/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/722/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/722/events", "html_url": "https://github.com/tensorflow/probability/issues/722", "id": 548309456, "node_id": "MDU6SXNzdWU1NDgzMDk0NTY=", "number": 722, "title": "Indexing a normal distribution with multi-dimensional batch_shape produces an EagerTensor object rather than a distribution object", "user": {"login": "nbro", "id": 9349000, "node_id": "MDQ6VXNlcjkzNDkwMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9349000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbro", "html_url": "https://github.com/nbro", "followers_url": "https://api.github.com/users/nbro/followers", "following_url": "https://api.github.com/users/nbro/following{/other_user}", "gists_url": "https://api.github.com/users/nbro/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbro/subscriptions", "organizations_url": "https://api.github.com/users/nbro/orgs", "repos_url": "https://api.github.com/users/nbro/repos", "events_url": "https://api.github.com/users/nbro/events{/privacy}", "received_events_url": "https://api.github.com/users/nbro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-01-10T21:54:29Z", "updated_at": "2020-01-29T15:59:53Z", "closed_at": "2020-01-29T15:42:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We can create a [`Normal`](https://www.tensorflow.org/probability/api_docs/python/tfp/distributions/Normal) object `d` with a multi-dimensional `batch_shape=(N, M)`, for `N, M > 1`, where [`d[i, j]` corresponds to a single scalar normal distribution](https://github.com/tensorflow/probability/issues/716#issuecomment-572333153). For example, consider the following code\r\n\r\n```\r\nimport tensorflow_probability as tfp\r\n\r\ntfd = tfp.distributions\r\n\r\nd = tfp.distributions.Normal(loc=[0, 1], scale=[[0, 4],\r\n                                                [2, 3]])\r\nprint(\"d.batch_shape =\", d.batch_shape)\r\nprint(\"type(d[0, 0]) =\", type(d[0, 0]))\r\n```\r\n\r\nwhose output is\r\n\r\n```\r\nd.batch_shape = (2, 2)\r\ntype(d[0, 0]) = <class 'tensorflow_probability.python.distributions.normal.Normal'>\r\n```\r\n\r\nNow, consider this program\r\n\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\ntfd = tfp.distributions\r\n\r\n\r\ndef get_model():\r\n    inp = tf.keras.layers.Input(shape=(1,))\r\n\r\n    x = tfp.layers.DenseFlipout(4)(inp)\r\n\r\n    locations = tfp.layers.DenseFlipout(2)(x)\r\n    rhos = tfp.layers.DenseFlipout(2)(x)\r\n\r\n    out = tfp.layers.DistributionLambda(lambda t: tfd.Normal(loc=t[0], scale=tf.math.softplus(t[1])))([locations, rhos])\r\n\r\n    model = tf.keras.Model(inp, out)\r\n    return model\r\n\r\n\r\ndef main():\r\n    model = get_model()\r\n    data = np.array([[1.], [3.]])\r\n\r\n    d = model(data)\r\n    print(\"d.batch_shape =\", d.batch_shape)\r\n    print(\"type(d[0, 0]) =\", type(d[0, 0]))\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\nwhose output is\r\n\r\n```\r\nd.batch_shape = (2, 2)\r\ntype(d[0, 0]) = <class 'tensorflow.python.framework.ops.EagerTensor'>\r\n```\r\n\r\nWhy isn't `d[0, 0]` a [`Normal`](https://www.tensorflow.org/probability/api_docs/python/tfp/distributions/Normal) object in this case? These different outputs are, _at least_, unintuitive.\r\n\r\nIn the second program,  I wanted to have an output layer with `M` univariate (normal) distributions, where each of these distributions should have a learnable mean and variance. In the example above, for simplicity, `N = M = 2`, where `N` is the batch size. If you have a better suggestion to achieve that, I'd be glad to hear it. \r\n\r\nIn both cases, I am using TF 2.0 and TFP 0.8.0.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/721", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/721/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/721/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/721/events", "html_url": "https://github.com/tensorflow/probability/issues/721", "id": 548245287, "node_id": "MDU6SXNzdWU1NDgyNDUyODc=", "number": 721, "title": "log_prob of Normal is nan when scale is negative", "user": {"login": "dwrtz", "id": 1555339, "node_id": "MDQ6VXNlcjE1NTUzMzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1555339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwrtz", "html_url": "https://github.com/dwrtz", "followers_url": "https://api.github.com/users/dwrtz/followers", "following_url": "https://api.github.com/users/dwrtz/following{/other_user}", "gists_url": "https://api.github.com/users/dwrtz/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwrtz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwrtz/subscriptions", "organizations_url": "https://api.github.com/users/dwrtz/orgs", "repos_url": "https://api.github.com/users/dwrtz/repos", "events_url": "https://api.github.com/users/dwrtz/events{/privacy}", "received_events_url": "https://api.github.com/users/dwrtz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-10T19:15:54Z", "updated_at": "2020-01-17T15:14:22Z", "closed_at": "2020-01-17T15:14:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "From the description of the pdf in the API docs it looks like a negative scale shouldn't cause problems since the pdf uses scale**2.\r\n\r\nThe MultivariateNormalTriL doesn't have this issue. This inconsistency caught me by surprise. Is this the expected behavior?\r\n\r\nCode below shows the issue:\r\n\r\n```\r\nimport os\r\nimport tensorflow_probability as tfp\r\n\r\nos.environ['CUDA_VISIBLE_DEVICES'] = '-1'\r\ntfd = tfp.distributions\r\n\r\n\r\np = tfd.MultivariateNormalTriL(loc=[0,0], scale_tril=[[-1,0],[0,-1]])\r\nq = tfd.Normal(loc=0, scale=-1)\r\n\r\nprint(p.log_prob([0,0]))\r\nprint(q.log_prob(0))\r\n```\r\n\r\nThis was with tensorflow probability version 0.9.0-dev20200107", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/720", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/720/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/720/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/720/events", "html_url": "https://github.com/tensorflow/probability/issues/720", "id": 548137213, "node_id": "MDU6SXNzdWU1NDgxMzcyMTM=", "number": 720, "title": "Is TFP's distribution's probability correct?", "user": {"login": "MokkeMeguru", "id": 30849444, "node_id": "MDQ6VXNlcjMwODQ5NDQ0", "avatar_url": "https://avatars2.githubusercontent.com/u/30849444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MokkeMeguru", "html_url": "https://github.com/MokkeMeguru", "followers_url": "https://api.github.com/users/MokkeMeguru/followers", "following_url": "https://api.github.com/users/MokkeMeguru/following{/other_user}", "gists_url": "https://api.github.com/users/MokkeMeguru/gists{/gist_id}", "starred_url": "https://api.github.com/users/MokkeMeguru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MokkeMeguru/subscriptions", "organizations_url": "https://api.github.com/users/MokkeMeguru/orgs", "repos_url": "https://api.github.com/users/MokkeMeguru/repos", "events_url": "https://api.github.com/users/MokkeMeguru/events{/privacy}", "received_events_url": "https://api.github.com/users/MokkeMeguru/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-10T15:20:24Z", "updated_at": "2020-01-10T16:18:50Z", "closed_at": "2020-01-10T16:18:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I'm learning a normal distribution and multi variate normal distribution with tfd.Normal and tfd.MultivariateNormalDiag.\r\n\r\nI write a code here. https://colab.research.google.com/gist/MokkeMeguru/91cfd83151738e8cdbc2d3f0ac8ba537/distribution_test.ipynb\r\n\r\n\r\n```python\r\ntarget_dist = tfd.MultivariateNormalDiag(\r\n    loc=tf.cast(tf.zeros([32 * 32 * 1]), tf.float32),\r\n    scale_diag=tf.cast(tf.ones([32 * 32 * 1]), tf.float32)\r\n)\r\ntarget_dist2 = tfd.Normal(loc=0., scale=1.)\r\n\r\nsamples = target_dist.sample(256)\r\nprint('td log_prob : {}'.format(tf.reduce_mean(target_dist.log_prob(samples))))\r\nprint('td2 log_prob : {}'.format(tf.reduce_mean(tf.reduce_sum(target_dist2.log_prob(samples), axis=[-1]))))\r\n\r\n# td log_prob : -1454.9139404296875\r\n# td2 log_prob : -1454.9139404296875\r\n\r\nprob = target_dist.prob(samples) # 0\r\nprob = target_dist2.prob(samples) # 0\r\n```\r\n\r\nAnd I found two unsure points.\r\n\r\n1. MultivariateNormal Distribution has a Covariance matrix. It is different from Normal Distribution. But log_probability of some sampled vectors are the same.\r\n\r\n2. the sampled vector form the MultivariateNormal Distribution has the 0 probability between its distribution. \r\n\r\nIs this the correct behavior?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/716", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/716/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/716/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/716/events", "html_url": "https://github.com/tensorflow/probability/issues/716", "id": 547147290, "node_id": "MDU6SXNzdWU1NDcxNDcyOTA=", "number": 716, "title": "Why do we need multi-dimensional batch_shape?", "user": {"login": "nbro", "id": 9349000, "node_id": "MDQ6VXNlcjkzNDkwMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9349000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbro", "html_url": "https://github.com/nbro", "followers_url": "https://api.github.com/users/nbro/followers", "following_url": "https://api.github.com/users/nbro/following{/other_user}", "gists_url": "https://api.github.com/users/nbro/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbro/subscriptions", "organizations_url": "https://api.github.com/users/nbro/orgs", "repos_url": "https://api.github.com/users/nbro/repos", "events_url": "https://api.github.com/users/nbro/events{/privacy}", "received_events_url": "https://api.github.com/users/nbro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-08T22:47:19Z", "updated_at": "2020-02-13T18:59:22Z", "closed_at": "2020-02-13T18:59:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In [this notebook](https://colab.research.google.com/github/tensorflow/probability/blob/master/tensorflow_probability/examples/jupyter_notebooks/Understanding_TensorFlow_Distributions_Shapes.ipynb#scrollTo=usTT7v0trG7H), it is written\r\n\r\n> **Batch shape** describes **independent, not identically distributed draws, aka a \"batch\" of distributions**.\r\n\r\n> Sample shape describes independent, identically distributed draws of batches from the distribution family.\r\n\r\nNow, consider the following program\r\n\r\n```\r\nimport tensorflow_probability as tfp\r\n\r\nd = tfp.distributions.Normal(loc=[0, 1], scale=[[0, 1], [2, 3]])\r\nprint(d)\r\n```\r\n\r\nthat outputs the following\r\n\r\n```\r\ntfp.distributions.Normal(\"Normal\", batch_shape=[2, 2], event_shape=[], dtype=float32)\r\n```\r\n\r\nWhat does `batch_shape=[2, 2]` actually mean? If I understood correctly, the `loc=[0, 1]` will be broadcast to the `scale=[[0, 1], [2, 3]]` parameter (or vice-versa), but how exactly? Does `d` represent 4 Gaussian distributions where the first two have mean 0 (one with standard deviation 0 and the other with standard deviation 1) and the second two have mean 1 (one with std 2 and the other with std 3)? \r\n\r\nThe \"not identically\" part in the quoted sentence of the notebook should emphasize that the distributions can possibly have different mean and variance, but this is not explicitly stated.\r\n\r\nIs there a way of debugging this broadcasting?\r\n\r\n```\r\nprint(d.loc)\r\nprint(d.scale)\r\n```\r\n\r\noutputs\r\n\r\n```\r\ntf.Tensor([0. 1.], shape=(2,), dtype=float32)\r\ntf.Tensor([[0. 1.] [2. 3.]], shape=(2, 2), dtype=float32)\r\n```\r\n\r\nwhich does not provide the information I am looking for.\r\n\r\nIn general, why do we need multi-dimensional `batch_shape`? Is it because we may, for example, have a neural network with an output layer of shape `NxM`, for `N, M > 1`, where we want an independent distribution for each of these outputs neurons? If that's the case `batch_shape` may not be the most appropriate name for this parameter, IMHO, even though that may still be considered a batch, it's just a little bit counter-intuitive, given the usage of the term \"batch\" in the context of neural networks, which usually only refers to one dimension of an array.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/714", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/714/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/714/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/714/events", "html_url": "https://github.com/tensorflow/probability/issues/714", "id": 547083336, "node_id": "MDU6SXNzdWU1NDcwODMzMzY=", "number": 714, "title": "Distribution base class `quantile` should assert `p \\in [0, 1]` when `validate_args=True`", "user": {"login": "csuter", "id": 159001, "node_id": "MDQ6VXNlcjE1OTAwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/159001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csuter", "html_url": "https://github.com/csuter", "followers_url": "https://api.github.com/users/csuter/followers", "following_url": "https://api.github.com/users/csuter/following{/other_user}", "gists_url": "https://api.github.com/users/csuter/gists{/gist_id}", "starred_url": "https://api.github.com/users/csuter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csuter/subscriptions", "organizations_url": "https://api.github.com/users/csuter/orgs", "repos_url": "https://api.github.com/users/csuter/repos", "events_url": "https://api.github.com/users/csuter/events{/privacy}", "received_events_url": "https://api.github.com/users/csuter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 728830584, "node_id": "MDU6TGFiZWw3Mjg4MzA1ODQ=", "url": "https://api.github.com/repos/tensorflow/probability/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}, {"id": 728830591, "node_id": "MDU6TGFiZWw3Mjg4MzA1OTE=", "url": "https://api.github.com/repos/tensorflow/probability/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": null}, {"id": 728830589, "node_id": "MDU6TGFiZWw3Mjg4MzA1ODk=", "url": "https://api.github.com/repos/tensorflow/probability/labels/help%20wanted", "name": "help wanted", "color": "33aa3f", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-08T20:24:39Z", "updated_at": "2020-01-28T18:01:41Z", "closed_at": "2020-01-28T18:01:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/712", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/712/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/712/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/712/events", "html_url": "https://github.com/tensorflow/probability/issues/712", "id": 546646459, "node_id": "MDU6SXNzdWU1NDY2NDY0NTk=", "number": 712, "title": "Laplace distirbution lacks quantile method.", "user": {"login": "Dpananos", "id": 20362941, "node_id": "MDQ6VXNlcjIwMzYyOTQx", "avatar_url": "https://avatars2.githubusercontent.com/u/20362941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dpananos", "html_url": "https://github.com/Dpananos", "followers_url": "https://api.github.com/users/Dpananos/followers", "following_url": "https://api.github.com/users/Dpananos/following{/other_user}", "gists_url": "https://api.github.com/users/Dpananos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dpananos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dpananos/subscriptions", "organizations_url": "https://api.github.com/users/Dpananos/orgs", "repos_url": "https://api.github.com/users/Dpananos/repos", "events_url": "https://api.github.com/users/Dpananos/events{/privacy}", "received_events_url": "https://api.github.com/users/Dpananos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-08T05:03:06Z", "updated_at": "2020-02-07T04:55:27Z", "closed_at": "2020-02-07T04:55:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Issue\r\n\r\nThe Laplace distribution currently lacks a quantile method.  It would be useful to have this method.\r\n\r\n## Example\r\nThe following code results in an error\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\ntfd = tfp.distributions\r\n\r\ntfd.Laplace(loc=0, scale=1).quantile([0.25, 0.5, 0.75])\r\n```\r\n```\r\n\r\n---------------------------------------------------------------------------\r\nNotImplementedError                       Traceback (most recent call last)\r\n<ipython-input-16-fe6e5b3aceb9> in <module>\r\n      6 tfd.Normal(loc=0, scale=1).quantile([0.25, 0.5, 0.75])\r\n      7 \r\n----> 8 tfd.Laplace(loc=0, scale=1).quantile([0.25, 0.5, 0.75])\r\n\r\n~/opt/miniconda3/envs/gymbo/lib/python3.7/site-packages/tensorflow_probability/python/distributions/distribution.py in quantile(self, value, name, **kwargs)\r\n   1097         values of type `self.dtype`.\r\n   1098     \"\"\"\r\n-> 1099     return self._call_quantile(value, name, **kwargs)\r\n   1100 \r\n   1101   def _variance(self, **kwargs):\r\n\r\n~/opt/miniconda3/envs/gymbo/lib/python3.7/site-packages/tensorflow_probability/python/distributions/distribution.py in _call_quantile(self, value, name, **kwargs)\r\n   1077       value = _convert_to_tensor(\r\n   1078           value, name='value', dtype_hint=self.dtype)\r\n-> 1079       return self._quantile(value, **kwargs)\r\n   1080 \r\n   1081   def quantile(self, value, name='quantile', **kwargs):\r\n\r\n~/opt/miniconda3/envs/gymbo/lib/python3.7/site-packages/tensorflow_probability/python/distributions/distribution.py in _quantile(self, value, **kwargs)\r\n   1071   def _quantile(self, value, **kwargs):\r\n   1072     raise NotImplementedError('quantile is not implemented: {}'.format(\r\n-> 1073         type(self).__name__))\r\n   1074 \r\n   1075   def _call_quantile(self, value, name, **kwargs):\r\n\r\nNotImplementedError: quantile is not implemented: Laplace\r\n```\r\n\r\nContrast this with `distributions.Normal`\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow_probability as tfp\r\n\r\ntfd = tfp.distributions\r\n\r\ntfd.Normal(loc=0, scale=1).quantile([0.25, 0.5, 0.75])\r\n```\r\n`<tf.Tensor: id=711, shape=(3,), dtype=float32, numpy=array([-0.6744898,  0.       ,  0.6744898], dtype=float32)>`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/711", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/711/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/711/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/711/events", "html_url": "https://github.com/tensorflow/probability/issues/711", "id": 545688555, "node_id": "MDU6SXNzdWU1NDU2ODg1NTU=", "number": 711, "title": "Accuracy calculation in Bayesian Neural Network example", "user": {"login": "malharjajoo", "id": 15148321, "node_id": "MDQ6VXNlcjE1MTQ4MzIx", "avatar_url": "https://avatars0.githubusercontent.com/u/15148321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/malharjajoo", "html_url": "https://github.com/malharjajoo", "followers_url": "https://api.github.com/users/malharjajoo/followers", "following_url": "https://api.github.com/users/malharjajoo/following{/other_user}", "gists_url": "https://api.github.com/users/malharjajoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/malharjajoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/malharjajoo/subscriptions", "organizations_url": "https://api.github.com/users/malharjajoo/orgs", "repos_url": "https://api.github.com/users/malharjajoo/repos", "events_url": "https://api.github.com/users/malharjajoo/events{/privacy}", "received_events_url": "https://api.github.com/users/malharjajoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-06T11:51:57Z", "updated_at": "2020-01-28T15:19:38Z", "closed_at": "2020-01-10T11:07:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the Bayesian Neural Network example code ([this line](https://github.com/tensorflow/probability/blob/563cdd7bb46e3ce0bd069c713c581e7409f26de1/tensorflow_probability/examples/bayesian_neural_network.py#L269)) provided by TFP,\r\n\r\nWhy are cheap predictions (cheap = output of **single** forward pass) used to calculate the accuracy of the network during training ? In a BNN, Isn't the mean of multiple forward passes supposed to be used for calculation of accuracy ? \r\n\r\nAs a side note, I can see multiple forward passes being used during visualization of outputs for validation set ([this line](https://github.com/tensorflow/probability/blob/563cdd7bb46e3ce0bd069c713c581e7409f26de1/tensorflow_probability/examples/bayesian_neural_network.py#L316))", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/707", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/707/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/707/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/707/events", "html_url": "https://github.com/tensorflow/probability/issues/707", "id": 544854529, "node_id": "MDU6SXNzdWU1NDQ4NTQ1Mjk=", "number": 707, "title": "TFP Covariance Estimation Example - Do we still use tf.Graphs and tf.Session with TF 2.0?", "user": {"login": "00krishna", "id": 2063593, "node_id": "MDQ6VXNlcjIwNjM1OTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2063593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/00krishna", "html_url": "https://github.com/00krishna", "followers_url": "https://api.github.com/users/00krishna/followers", "following_url": "https://api.github.com/users/00krishna/following{/other_user}", "gists_url": "https://api.github.com/users/00krishna/gists{/gist_id}", "starred_url": "https://api.github.com/users/00krishna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/00krishna/subscriptions", "organizations_url": "https://api.github.com/users/00krishna/orgs", "repos_url": "https://api.github.com/users/00krishna/repos", "events_url": "https://api.github.com/users/00krishna/events{/privacy}", "received_events_url": "https://api.github.com/users/00krishna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-03T05:19:52Z", "updated_at": "2020-01-29T14:44:43Z", "closed_at": "2020-01-06T00:05:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. I am reading over the TFP Guide in particular the [\"Covariance Estimation\"](https://github.com/tensorflow/probability/blob/master/tensorflow_probability/examples/jupyter_notebooks/TensorFlow_Probability_Case_Study_Covariance_Estimation.ipynb) example. At Step 3, I see the author creates the usual Tensorflow 1 `tf.Graph` and `tf.Session,` however, on the main TFP [website page](https://www.tensorflow.org/probability), the example does not use the Graph and Session code to run the model. Also in the \"Distributions\" and \"Shapes\" tutorials, there is no mention of Graphs and Sessions. \r\n\r\nHence I was a bit confused about whether we still need to use Graphs and Sessions, or whether there is a different idiom or API for TF 2.0 ? I thought perhaps the documentation might not be up to date, but otherwise it might be that we still need to define Graphs and Sessions like in TF 1. Can you let me know what the current standard is for this, or where I might find the right examples. \r\n\r\nI checked in the Pull Requests, but some updates to the [documentation](https://github.com/tensorflow/probability/pull/698) seem to be failing on CI. \r\n\r\nAny help would be appreciated. Thanks. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/tensorflow/probability/issues/705", "repository_url": "https://api.github.com/repos/tensorflow/probability", "labels_url": "https://api.github.com/repos/tensorflow/probability/issues/705/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/probability/issues/705/comments", "events_url": "https://api.github.com/repos/tensorflow/probability/issues/705/events", "html_url": "https://github.com/tensorflow/probability/issues/705", "id": 544571315, "node_id": "MDU6SXNzdWU1NDQ1NzEzMTU=", "number": 705, "title": "Independent RelaxedBernoulli log_prob gives nan", "user": {"login": "uri-datorama", "id": 45964889, "node_id": "MDQ6VXNlcjQ1OTY0ODg5", "avatar_url": "https://avatars0.githubusercontent.com/u/45964889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uri-datorama", "html_url": "https://github.com/uri-datorama", "followers_url": "https://api.github.com/users/uri-datorama/followers", "following_url": "https://api.github.com/users/uri-datorama/following{/other_user}", "gists_url": "https://api.github.com/users/uri-datorama/gists{/gist_id}", "starred_url": "https://api.github.com/users/uri-datorama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uri-datorama/subscriptions", "organizations_url": "https://api.github.com/users/uri-datorama/orgs", "repos_url": "https://api.github.com/users/uri-datorama/repos", "events_url": "https://api.github.com/users/uri-datorama/events{/privacy}", "received_events_url": "https://api.github.com/users/uri-datorama/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-02T13:06:13Z", "updated_at": "2020-02-29T23:50:09Z", "closed_at": "2020-02-29T23:50:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "RelaxedBernoulli with > 0 dimensions and sufficiently small temperature produces nan when log_prob is invoked on sampled values.\r\nReproduction below;\r\n\r\n```\r\nd = tfd.RelaxedBernoulli(0.01, probs=tf.ones(1)*.5)\r\niid = tfd.Independent(d, reinterpreted_batch_ndims=1)\r\n\r\niid.log_prob(iid.sample()) # <-- usually given nan\r\n\r\niid.log_prob(d.sample()) # always gives the right result\r\n```\r\n\r\nWhen inspecting d.sample() vs iid.sample() they appear to be similar by their __repr__().\r\nThe problem doesn't reproduce for scalar RelaxedBernoulli or if temperature is high enough.\r\n\r\nOn:\r\nmacOS High Sierra 10.13.6 \r\ntensorflow 2.0.0               \r\ntensorflow-probability 0.8.0\r\n", "performed_via_github_app": null, "score": 1.0}]}