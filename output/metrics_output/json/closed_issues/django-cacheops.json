{"total_count": 239, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/Suor/django-cacheops/issues/372", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/372/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/372/events", "html_url": "https://github.com/Suor/django-cacheops/issues/372", "id": 682174469, "node_id": "MDU6SXNzdWU2ODIxNzQ0Njk=", "number": 372, "title": "ssl_cert_reqs support", "user": {"login": "Awmusic12635", "id": 7191902, "node_id": "MDQ6VXNlcjcxOTE5MDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/7191902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Awmusic12635", "html_url": "https://github.com/Awmusic12635", "followers_url": "https://api.github.com/users/Awmusic12635/followers", "following_url": "https://api.github.com/users/Awmusic12635/following{/other_user}", "gists_url": "https://api.github.com/users/Awmusic12635/gists{/gist_id}", "starred_url": "https://api.github.com/users/Awmusic12635/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Awmusic12635/subscriptions", "organizations_url": "https://api.github.com/users/Awmusic12635/orgs", "repos_url": "https://api.github.com/users/Awmusic12635/repos", "events_url": "https://api.github.com/users/Awmusic12635/events{/privacy}", "received_events_url": "https://api.github.com/users/Awmusic12635/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-19T20:55:45Z", "updated_at": "2020-08-20T20:32:52Z", "closed_at": "2020-08-20T20:32:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Do you support Disabling SSL verification? I am looking to use this on heroku where certificate verification is an issue due to the certs provided. \r\n\r\nI tried appending it to the connection url with:\r\n\r\n```/?ssl_cert_reqs=none```\r\n\r\nThough it did not appear to work. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/369", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/369/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/369/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/369/events", "html_url": "https://github.com/Suor/django-cacheops/issues/369", "id": 674096963, "node_id": "MDU6SXNzdWU2NzQwOTY5NjM=", "number": 369, "title": "Occasional error: CacheopsRedis has no attribute 'unlink'", "user": {"login": "bharling", "id": 1139376, "node_id": "MDQ6VXNlcjExMzkzNzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1139376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bharling", "html_url": "https://github.com/bharling", "followers_url": "https://api.github.com/users/bharling/followers", "following_url": "https://api.github.com/users/bharling/following{/other_user}", "gists_url": "https://api.github.com/users/bharling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bharling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bharling/subscriptions", "organizations_url": "https://api.github.com/users/bharling/orgs", "repos_url": "https://api.github.com/users/bharling/repos", "events_url": "https://api.github.com/users/bharling/events{/privacy}", "received_events_url": "https://api.github.com/users/bharling/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-06T07:42:21Z", "updated_at": "2020-08-06T07:59:36Z", "closed_at": "2020-08-06T07:59:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm seeing this fairly often in our logs since updating to cacheops 5+ - the reason is that the version of redis-py that is pinned in the setup.py for cacheops is too old, it needs to be updated to redis-py 3\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/366", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/366/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/366/events", "html_url": "https://github.com/Suor/django-cacheops/issues/366", "id": 665183341, "node_id": "MDU6SXNzdWU2NjUxODMzNDE=", "number": 366, "title": "Django reset password emails not working with cacheops enabled", "user": {"login": "RidenShark", "id": 66911854, "node_id": "MDQ6VXNlcjY2OTExODU0", "avatar_url": "https://avatars0.githubusercontent.com/u/66911854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RidenShark", "html_url": "https://github.com/RidenShark", "followers_url": "https://api.github.com/users/RidenShark/followers", "following_url": "https://api.github.com/users/RidenShark/following{/other_user}", "gists_url": "https://api.github.com/users/RidenShark/gists{/gist_id}", "starred_url": "https://api.github.com/users/RidenShark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RidenShark/subscriptions", "organizations_url": "https://api.github.com/users/RidenShark/orgs", "repos_url": "https://api.github.com/users/RidenShark/repos", "events_url": "https://api.github.com/users/RidenShark/events{/privacy}", "received_events_url": "https://api.github.com/users/RidenShark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-24T13:51:34Z", "updated_at": "2020-07-24T14:24:42Z", "closed_at": "2020-07-24T14:24:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using the automatic settings and had setup emails to display on the console.\r\n\r\nWithout cachehops - Reset email works.\r\n\r\nWith cacheops - Reset email is not working.\r\n\r\nAny idea what's the issue here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/364", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/364/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/364/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/364/events", "html_url": "https://github.com/Suor/django-cacheops/issues/364", "id": 658111913, "node_id": "MDU6SXNzdWU2NTgxMTE5MTM=", "number": 364, "title": "Caching frontend HTML", "user": {"login": "RidenShark", "id": 66911854, "node_id": "MDQ6VXNlcjY2OTExODU0", "avatar_url": "https://avatars0.githubusercontent.com/u/66911854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RidenShark", "html_url": "https://github.com/RidenShark", "followers_url": "https://api.github.com/users/RidenShark/followers", "following_url": "https://api.github.com/users/RidenShark/following{/other_user}", "gists_url": "https://api.github.com/users/RidenShark/gists{/gist_id}", "starred_url": "https://api.github.com/users/RidenShark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RidenShark/subscriptions", "organizations_url": "https://api.github.com/users/RidenShark/orgs", "repos_url": "https://api.github.com/users/RidenShark/repos", "events_url": "https://api.github.com/users/RidenShark/events{/privacy}", "received_events_url": "https://api.github.com/users/RidenShark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-16T11:29:26Z", "updated_at": "2020-07-16T16:05:35Z", "closed_at": "2020-07-16T16:05:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I am working on a django project and trying to use cacheops. I have used the default settings in the readme. I can also see that the keys are being added in the Redis database. But I am unable to find any cache header keys in the browser response header. Does cacheops cache html?\r\n\r\nsettings\r\n\r\n```\r\nCACHEOPS = {\r\n    'auth.user': {'ops': 'get', 'timeout': 60*15},\r\n    'auth.*': {'ops': {'fetch', 'get'}, 'timeout': 60*60},\r\n    '*.*': {'timeout': 60*60},\r\n    'posts.*': {'ops': 'all', 'timeout': 60*60},\r\n    'accounts.*': {'ops': 'all', 'timeout': 60*60},\r\n    'categories.*': {'ops': 'all', 'timeout': 60*60},\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/361", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/361/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/361/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/361/events", "html_url": "https://github.com/Suor/django-cacheops/issues/361", "id": 645437741, "node_id": "MDU6SXNzdWU2NDU0Mzc3NDE=", "number": 361, "title": "Django-cacheops is not thread-safe when run in gunicorn multi-threading mode", "user": {"login": "haminhcong", "id": 16532870, "node_id": "MDQ6VXNlcjE2NTMyODcw", "avatar_url": "https://avatars3.githubusercontent.com/u/16532870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haminhcong", "html_url": "https://github.com/haminhcong", "followers_url": "https://api.github.com/users/haminhcong/followers", "following_url": "https://api.github.com/users/haminhcong/following{/other_user}", "gists_url": "https://api.github.com/users/haminhcong/gists{/gist_id}", "starred_url": "https://api.github.com/users/haminhcong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haminhcong/subscriptions", "organizations_url": "https://api.github.com/users/haminhcong/orgs", "repos_url": "https://api.github.com/users/haminhcong/repos", "events_url": "https://api.github.com/users/haminhcong/events{/privacy}", "received_events_url": "https://api.github.com/users/haminhcong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-25T10:09:46Z", "updated_at": "2020-07-11T06:43:43Z", "closed_at": "2020-07-11T06:43:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Context\r\n\r\n- python version: `python 3.7.4`\r\n- Django version: `Django>=2.2,<2.3`\r\n- Django-cacheops version: `django-cacheops==4.1`\r\n- Redis-py version: `redis==3.4.1`\r\n\r\n## Problem \r\n \r\nI'm using django-cacheops with my django project to build a website. When I deploy this project to gunicorn server running on multi-threading mode, sometime my guncorn server has 500 HTTP Error when serving high traffic:\r\n\r\n- Gunicorn python configuration:\r\n\r\n```python\r\nworkers =  3\r\nthreads =  3\r\ntimeout =  120\r\n```\r\n\r\n- Gunicorn error log\r\n\r\n```log\r\nInternal Server Error: /api/service/module/10501/\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/django/db/models/fields/related_descriptors.py\", line 164, in __get__\r\n    rel_obj = self.field.get_cached_value(instance)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/db/models/fields/mixins.py\", line 13, in get_cached_value\r\n    return instance._state.fields_cache[cache_name]\r\nKeyError: 'primary_ip4'\r\n\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py\", line 54, in wrapped_view\r\n    return view_func(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/viewsets.py\", line 116, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/opt/netbox/netbox/utilities/api.py\", line 282, in dispatch\r\n    return super().dispatch(request, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/views.py\", line 495, in dispatch\r\n    response = self.handle_exception(exc)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/views.py\", line 455, in handle_exception\r\n    self.raise_uncaught_exception(exc)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/views.py\", line 492, in dispatch\r\n    response = handler(request, *args, **kwargs)\r\n  File \"/opt/netbox/netbox/utilities/api.py\", line 303, in retrieve\r\n    return super().retrieve(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py\", line 58, in retrieve\r\n    return Response(serializer.data)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/serializers.py\", line 563, in data\r\n    ret = super(Serializer, self).data\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/serializers.py\", line 262, in data\r\n    self._data = self.to_representation(self.instance)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/serializers.py\", line 530, in to_representation\r\n    ret[field.field_name] = field.to_representation(attribute)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/serializers.py\", line 517, in to_representation\r\n    attribute = field.get_attribute(instance)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/fields.py\", line 453, in get_attribute\r\n    return get_attribute(instance, self.source_attrs)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/fields.py\", line 101, in get_attribute\r\n    instance = getattr(instance, attr)\r\n  File \"/opt/netbox/netbox/service/models.py\", line 376, in display_name\r\n    if self.instance.primary_ip:\r\n  File \"/opt/netbox/netbox/dcim/models.py\", line 3729, in primary_ip\r\n    elif self.primary_ip4:\r\n  File \"/usr/local/lib/python3.7/site-packages/django/db/models/fields/related_descriptors.py\", line 178, in __get__\r\n    rel_obj = self.get_object(instance)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/db/models/fields/related_descriptors.py\", line 298, in get_object\r\n    return super().get_object(instance)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/db/models/fields/related_descriptors.py\", line 145, in get_object\r\n    return qs.get(self.field.get_reverse_related_filter(instance))\r\n  File \"/usr/local/lib/python3.7/site-packages/cacheops/query.py\", line 356, in get\r\n    return qs._no_monkey.get(qs, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/db/models/query.py\", line 402, in get\r\n    num = len(clone)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/db/models/query.py\", line 256, in __len__\r\n    self._fetch_all()\r\n  File \"/usr/local/lib/python3.7/site-packages/cacheops/query.py\", line 282, in _fetch_all\r\n    with redis_client.getting(cache_key, lock=lock) as cache_data:\r\n  File \"/usr/local/lib/python3.7/contextlib.py\", line 112, in __enter__\r\n    return next(self.gen)\r\n  File \"/usr/local/lib/python3.7/site-packages/cacheops/redis.py\", line 37, in getting\r\n    yield self.get(key)\r\n  File \"/usr/local/lib/python3.7/site-packages/funcy/decorators.py\", line 39, in wrapper\r\n    return deco(call, *dargs, **dkwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/cacheops/redis.py\", line 19, in handle_connection_failure\r\n    return call()\r\n  File \"/usr/local/lib/python3.7/site-packages/funcy/decorators.py\", line 60, in __call__\r\n    return self._func(*self._args, **self._kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/client.py\", line 1579, in get\r\n    return self.execute_command('GET', name)\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/client.py\", line 878, in execute_command\r\n    return self.parse_response(conn, command_name, **options)\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/client.py\", line 892, in parse_response\r\n    response = connection.read_response()\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/sentinel.py\", line 55, in read_response\r\n    return super(SentinelManagedConnection, self).read_response()\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 734, in read_response\r\n    response = self._parser.read_response()\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 316, in read_response\r\n    response = self._buffer.readline()\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 248, in readline\r\n    self._read_from_socket()\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 194, in _read_from_socket\r\n    buf.write(data)\r\nValueError: I/O operation on closed file.\r\n```\r\n\r\n```log\r\nInternal Server Error: /api/service/module/8775/\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py\", line 54, in wrapped_view\r\n    return view_func(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/viewsets.py\", line 116, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/opt/netbox/netbox/utilities/api.py\", line 282, in dispatch\r\n    return super().dispatch(request, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/views.py\", line 495, in dispatch\r\n    response = self.handle_exception(exc)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/views.py\", line 455, in handle_exception\r\n    self.raise_uncaught_exception(exc)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/views.py\", line 492, in dispatch\r\n    response = handler(request, *args, **kwargs)\r\n  File \"/opt/netbox/netbox/utilities/api.py\", line 303, in retrieve\r\n    return super().retrieve(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py\", line 56, in retrieve\r\n    instance = self.get_object()\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/generics.py\", line 85, in get_object\r\n    queryset = self.filter_queryset(self.get_queryset())\r\n  File \"/usr/local/lib/python3.7/site-packages/rest_framework/generics.py\", line 152, in filter_queryset\r\n    queryset = backend().filter_queryset(self.request, queryset, self)\r\n  File \"/usr/local/lib/python3.7/site-packages/django_filters/rest_framework/backends.py\", line 96, in filter_queryset\r\n    return filterset.qs\r\n  File \"/usr/local/lib/python3.7/site-packages/django_filters/filterset.py\", line 237, in qs\r\n    qs = self.filter_queryset(qs)\r\n  File \"/usr/local/lib/python3.7/site-packages/django_filters/filterset.py\", line 224, in filter_queryset\r\n    queryset = self.filters[name].filter(queryset, value)\r\n  File \"/usr/local/lib/python3.7/site-packages/django_filters/filters.py\", line 232, in filter\r\n    if not value:\r\n  File \"/usr/local/lib/python3.7/site-packages/django/db/models/query.py\", line 278, in __bool__\r\n    self._fetch_all()\r\n  File \"/usr/local/lib/python3.7/site-packages/cacheops/query.py\", line 282, in _fetch_all\r\n    with redis_client.getting(cache_key, lock=lock) as cache_data:\r\n  File \"/usr/local/lib/python3.7/contextlib.py\", line 112, in __enter__\r\n    return next(self.gen)\r\n  File \"/usr/local/lib/python3.7/site-packages/cacheops/redis.py\", line 37, in getting\r\n    yield self.get(key)\r\n  File \"/usr/local/lib/python3.7/site-packages/funcy/decorators.py\", line 39, in wrapper\r\n    return deco(call, *dargs, **dkwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/cacheops/redis.py\", line 19, in handle_connection_failure\r\n    return call()\r\n  File \"/usr/local/lib/python3.7/site-packages/funcy/decorators.py\", line 60, in __call__\r\n    return self._func(*self._args, **self._kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/client.py\", line 1579, in get\r\n    return self.execute_command('GET', name)\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/client.py\", line 878, in execute_command\r\n    return self.parse_response(conn, command_name, **options)\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/client.py\", line 892, in parse_response\r\n    response = connection.read_response()\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/sentinel.py\", line 55, in read_response\r\n    return super(SentinelManagedConnection, self).read_response()\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 734, in read_response\r\n    response = self._parser.read_response()\r\n  File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 316, in read_response\r\n    response = self._buffer.readline()\r\nAttributeError: 'NoneType' object has no attribute 'readline'\r\n```\r\n\r\nWhen i switch to use only process mode on gunicorn by set thread=1:\r\n\r\n```python\r\nworkers =  9\r\nthreads =  1\r\ntimeout =  120\r\n```\r\n\r\nthese errors is not exist anymore.\r\n\r\nAre django-cacheops is not thread-safe, or this problem come from redis-py? Hope someone explain this problem for me. Thankyou.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/359", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/359/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/359/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/359/events", "html_url": "https://github.com/Suor/django-cacheops/issues/359", "id": 641920968, "node_id": "MDU6SXNzdWU2NDE5MjA5Njg=", "number": 359, "title": "Filter on Exists(...) subquery results in TypeError: object of type 'Exists' has no len()", "user": {"login": "awmath", "id": 11866912, "node_id": "MDQ6VXNlcjExODY2OTEy", "avatar_url": "https://avatars0.githubusercontent.com/u/11866912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awmath", "html_url": "https://github.com/awmath", "followers_url": "https://api.github.com/users/awmath/followers", "following_url": "https://api.github.com/users/awmath/following{/other_user}", "gists_url": "https://api.github.com/users/awmath/gists{/gist_id}", "starred_url": "https://api.github.com/users/awmath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awmath/subscriptions", "organizations_url": "https://api.github.com/users/awmath/orgs", "repos_url": "https://api.github.com/users/awmath/repos", "events_url": "https://api.github.com/users/awmath/events{/privacy}", "received_events_url": "https://api.github.com/users/awmath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-19T12:04:06Z", "updated_at": "2020-07-11T06:37:55Z", "closed_at": "2020-07-11T06:37:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When using the filter on Exists subquery which is new in Django 3.0 https://docs.djangoproject.com/en/3.0/ref/models/expressions/#filtering-on-a-subquery-or-exists-expressions\r\nI get an error\r\n```\r\nTypeError: object of type 'Exists' has no len()\r\n\r\n  File \"/usr/local/lib/python3.8/site-packages/cacheops/query.py\", line 290, in _fetch_all\r\n    self._cache_results(cache_key, self._result_cache)\r\n  File \"/usr/local/lib/python3.8/site-packages/cacheops/query.py\", line 209, in _cache_results\r\n    self._cond_dnfs, self._cacheprofile['timeout'], dbs=[self.db])\r\n  File \"/usr/local/lib/python3.8/site-packages/funcy/objects.py\", line 28, in __get__\r\n    res = instance.__dict__[self.fget.__name__] = self.fget(instance)\r\n  File \"/usr/local/lib/python3.8/site-packages/cacheops/query.py\", line 205, in _cond_dnfs\r\n    return dnfs(self)\r\n  File \"/usr/local/lib/python3.8/site-packages/cacheops/tree.py\", line 127, in dnfs\r\n    return query_dnf(qs.query)\r\n  File \"/usr/local/lib/python3.8/site-packages/cacheops/tree.py\", line 114, in query_dnf\r\n    dnf = _dnf(query.where)\r\n  File \"/usr/local/lib/python3.8/site-packages/cacheops/tree.py\", line 66, in _dnf\r\n    chilren_dnfs = lmap(_dnf, where.children)\r\n  File \"/usr/local/lib/python3.8/site-packages/funcy/seqs.py\", line 114, in lmap\r\n    return _lmap(make_func(f, builtin=PY2), *seqs)\r\n  File \"/usr/local/lib/python3.8/site-packages/funcy/compat.py\", line 8, in lmap\r\n    return list(map(f, *seqs))\r\n  File \"/usr/local/lib/python3.8/site-packages/cacheops/tree.py\", line 63, in _dnf\r\n    elif len(where) == 0:\r\n\r\n```\r\nUnless I explicitly disable the cache for this query.\r\n\r\n\r\nIt works using the \"first annotate then filter\" method.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/358", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/358/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/358/events", "html_url": "https://github.com/Suor/django-cacheops/issues/358", "id": 631619733, "node_id": "MDU6SXNzdWU2MzE2MTk3MzM=", "number": 358, "title": "obj_key unstable for model fields with validators", "user": {"login": "kirberich", "id": 941715, "node_id": "MDQ6VXNlcjk0MTcxNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/941715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirberich", "html_url": "https://github.com/kirberich", "followers_url": "https://api.github.com/users/kirberich/followers", "following_url": "https://api.github.com/users/kirberich/following{/other_user}", "gists_url": "https://api.github.com/users/kirberich/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirberich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirberich/subscriptions", "organizations_url": "https://api.github.com/users/kirberich/orgs", "repos_url": "https://api.github.com/users/kirberich/repos", "events_url": "https://api.github.com/users/kirberich/events{/privacy}", "received_events_url": "https://api.github.com/users/kirberich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-05T14:05:53Z", "updated_at": "2020-06-21T05:50:37Z", "closed_at": "2020-06-21T05:50:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "(tl;dr: using django's built-in field validators breaks cache keys between processes/restarts)\r\n\r\nHi! \r\n\r\nI just did a fun hunt for a subtle issue that's causing cache misses after server restarts / across server instances.\r\n\r\n`utils.obj_key` uses some custom logic to make the various field attributes returned by `deconstruct` serializable. One of the things it does is to specially serialize functions, I'm assuming to avoid any function's default behaviour of including its memory address in its string representation, which would cause cache misses.\r\n\r\nThe edge case that occurs is that `obj_key` uses `inspect.isfunction`, which doesn't catch callable class instances, which caused a problem for me because one of my models uses a validator - and django's built-in validators are callable classes, not functions. This causes the cache key to include the memory address of the validator.\r\n\r\nHere's a concrete example:\r\n```python\r\n    example_field = models.PositiveIntegerField(\r\n        default=5,\r\n        validators=[MinValueValidator(5)],\r\n    )\r\n```\r\n\r\n```python\r\n(Pdb) from cacheops.utils import obj_key\r\n(Pdb) for field in self.model._meta.fields: print(f'{field} {json.dumps(field.deconstruct(), sort_keys=True, default=obj_key)}')\r\n#...\r\ndb.ExampleModel.example_field [\"example_field\", \"django.db.models.PositiveIntegerField\", [], {\"default\": 5, \"validators\": [\"<django.core.validators.MinValueValidator object at 0x107109f10>\"]}]\r\n```\r\n\r\nI'm happy to make a PR for this, but I first wanted to check if this is a known issue, and what the preferred solution would be - my first impulse would be to check if something is executable by using `callable()`, and then creating a string representation in the existing way if it's a function and maybe using the object's class name if it's a callable object.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/357", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/357/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/357/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/357/events", "html_url": "https://github.com/Suor/django-cacheops/issues/357", "id": 631433200, "node_id": "MDU6SXNzdWU2MzE0MzMyMDA=", "number": 357, "title": "Is nameclash possible in cacheops?", "user": {"login": "krnr", "id": 8479133, "node_id": "MDQ6VXNlcjg0NzkxMzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/8479133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krnr", "html_url": "https://github.com/krnr", "followers_url": "https://api.github.com/users/krnr/followers", "following_url": "https://api.github.com/users/krnr/following{/other_user}", "gists_url": "https://api.github.com/users/krnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/krnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krnr/subscriptions", "organizations_url": "https://api.github.com/users/krnr/orgs", "repos_url": "https://api.github.com/users/krnr/repos", "events_url": "https://api.github.com/users/krnr/events{/privacy}", "received_events_url": "https://api.github.com/users/krnr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-06-05T09:01:09Z", "updated_at": "2020-06-21T06:04:25Z", "closed_at": "2020-06-21T06:04:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "once in a while we notice on our sentry such error:\r\n\r\nJun 2, 2020 3:28:33 PM UTC\r\nTypeError: argument of type 'IndexQuerySet' is not iterable\r\n\r\n(4 times in that minute, the once on Feb 18, once on Feb 7, again 4 times on Jan 14, 2 times on Oct 24, 2019)\r\n\r\nthe code under investigation is:\r\n\r\n```\r\n        qs = (\r\n            Model.objects.using(\"connect\")\r\n            .filter(ignore=True, relation1_id=instance_id)\r\n            .values_list(\"rel1_id\", \"rel2_id\")\r\n            .cache(ops=[\"get\", \"fetch\", \"count\"], timeout=settings.CACHE_TTL)\r\n        )\r\n\r\n        if (instance_id, rel2_id) in qs:\r\n            return False, True\r\n```\r\n\r\nfrom what I get the only reason of this error is when `._result_cache` is not iterable. then the occurences of this error allow to make the proposal that they only happen when some value is in the cache and after it's invalidated everything is back to normal.\r\n\r\nthe only reason of `._result_cache` being not iterable is when the [blob from the cache key](https://github.com/Suor/django-cacheops/blob/master/cacheops/query.py#L287) is not a list. yes, cache_key is built using [full sql](https://github.com/Suor/django-cacheops/blob/master/cacheops/query.py#L186) repr, so it must be unique for `.count()` and `.all()` queries. but could it be that the same cache key appear to have integer instead of the list?\r\n\r\nand could https://github.com/Suor/django-cacheops/issues/346 be relevant to this?\r\n\r\nor am I missing something and looking into the wrong direction?\r\n\r\nps: thank you for the very useful library.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/356", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/356/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/356/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/356/events", "html_url": "https://github.com/Suor/django-cacheops/issues/356", "id": 627048973, "node_id": "MDU6SXNzdWU2MjcwNDg5NzM=", "number": 356, "title": "Memory error when pickle.dumps large data set", "user": {"login": "babylonlin", "id": 11373729, "node_id": "MDQ6VXNlcjExMzczNzI5", "avatar_url": "https://avatars2.githubusercontent.com/u/11373729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/babylonlin", "html_url": "https://github.com/babylonlin", "followers_url": "https://api.github.com/users/babylonlin/followers", "following_url": "https://api.github.com/users/babylonlin/following{/other_user}", "gists_url": "https://api.github.com/users/babylonlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/babylonlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/babylonlin/subscriptions", "organizations_url": "https://api.github.com/users/babylonlin/orgs", "repos_url": "https://api.github.com/users/babylonlin/repos", "events_url": "https://api.github.com/users/babylonlin/events{/privacy}", "received_events_url": "https://api.github.com/users/babylonlin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-29T07:06:20Z", "updated_at": "2020-05-29T08:11:07Z", "closed_at": "2020-05-29T08:11:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try to modify large data set (more than 300 K objects), the current pickle.dumps throw Memory error. If I change the pickle in query.py to standard python pickle. It stops complain and runs much faster.\r\n\r\nThe lines I modified\r\n\r\nfrom .cross import md5\r\nimport pickle\r\n\r\ne.g. I run under python-3.7", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/355", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/355/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/355/events", "html_url": "https://github.com/Suor/django-cacheops/issues/355", "id": 620978805, "node_id": "MDU6SXNzdWU2MjA5Nzg4MDU=", "number": 355, "title": "Lua redis() command arguments must be strings or integers", "user": {"login": "omegion", "id": 29923723, "node_id": "MDQ6VXNlcjI5OTIzNzIz", "avatar_url": "https://avatars0.githubusercontent.com/u/29923723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omegion", "html_url": "https://github.com/omegion", "followers_url": "https://api.github.com/users/omegion/followers", "following_url": "https://api.github.com/users/omegion/following{/other_user}", "gists_url": "https://api.github.com/users/omegion/gists{/gist_id}", "starred_url": "https://api.github.com/users/omegion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omegion/subscriptions", "organizations_url": "https://api.github.com/users/omegion/orgs", "repos_url": "https://api.github.com/users/omegion/repos", "events_url": "https://api.github.com/users/omegion/events{/privacy}", "received_events_url": "https://api.github.com/users/omegion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-19T13:29:56Z", "updated_at": "2020-06-21T06:02:11Z", "closed_at": "2020-06-21T06:02:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nWhen I try to use caching on my application, I get the following error from running Redis server.\r\n\r\n```\r\nFile \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/django/utils/functional.py\", line 224, in inner\r\n    self._setup()\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/django/utils/functional.py\", line 360, in _setup\r\n    self._wrapped = self._setupfunc()\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/django/contrib/auth/middleware.py\", line 24, in <lambda>\r\n    request.user = SimpleLazyObject(lambda: get_user(request))\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/django/contrib/auth/middleware.py\", line 12, in get_user\r\n    request._cached_user = auth.get_user(request)\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/django/contrib/auth/__init__.py\", line 180, in get_user\r\n    user = backend.get_user(user_id)\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/django/contrib/auth/backends.py\", line 161, in get_user\r\n    user = UserModel._default_manager.get(pk=user_id)\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/django/db/models/manager.py\", line 82, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/cacheops/query.py\", line 390, in get\r\n    return qs._no_monkey.get(qs, *args, **kwargs)\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/django/db/models/query.py\", line 411, in get\r\n    num = len(clone)\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/django/db/models/query.py\", line 258, in __len__\r\n    self._fetch_all()\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/cacheops/query.py\", line 321, in _fetch_all\r\n    self._cache_results(cache_key, self._result_cache)\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/cacheops/query.py\", line 206, in _cache_results\r\n    cache_thing(self._prefix, cache_key, results,\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/cacheops/query.py\", line 46, in cache_thing\r\n    load_script('cache_thing', settings.CACHEOPS_LRU)(\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/redis/client.py\", line 4067, in __call__\r\n    return client.evalsha(self.sha, len(keys), *args)\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/redis/client.py\", line 3143, in evalsha\r\n    return self.execute_command('EVALSHA', sha, numkeys, *keys_and_args)\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/redis/client.py\", line 901, in execute_command\r\n    return self.parse_response(conn, command_name, **options)\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/redis/client.py\", line 915, in parse_response\r\n    response = connection.read_response()\r\n  File \"/Users/cheppers/opt/miniconda3/envs/crawly-app/lib/python3.8/site-packages/redis/connection.py\", line 747, in read_response\r\n    raise response\r\nredis.exceptions.ResponseError: Error running script (call to f_f6b93ec749d56aefa37c49bbc5e7a6eedd0d4ec3): @user_script:15: @user_script: 15: Lua redis() command arguments must be strings or integers \r\n```\r\nSystem:\r\n```\r\naiohttp==3.6.2\r\naioredis==1.3.1\r\namqp==2.5.2\r\naniso8601==7.0.0\r\nasgiref==3.2.7\r\nastroid==2.3.3\r\nasync-timeout==3.0.1\r\nattrs==19.3.0\r\nautobahn==20.4.3\r\nAutomat==20.2.0\r\nbilliard==3.6.3.0\r\nbraintree==4.1.0\r\ncelery==4.4.2\r\ncertifi==2020.4.5.1\r\ncffi==1.14.0\r\nchannels==2.4.0\r\nchannels-redis==2.4.2\r\nchardet==3.0.4\r\nclick==7.1.2\r\nconstantly==15.1.0\r\ncryptography==2.9.2\r\ncssselect==1.1.0\r\ndaphne==2.5.0\r\ndefusedxml==0.7.0rc1\r\nDjango==3.0.6\r\ndjango-admin-autocomplete-filter==0.5\r\ndjango-admin-sortable2==0.7.6\r\ndjango-cacheops==5.0\r\ndjango-celery-results==1.2.1\r\ndjango-ckeditor==5.9.0\r\ndjango-cleanup==4.0.0\r\ndjango-cors-headers==3.2.1\r\ndjango-currentuser==0.5.0\r\ndjango-filter==2.2.0\r\ndjango-graphql-jwt==0.3.1\r\ndjango-js-asset==1.2.2\r\ndjango-redis==4.11.0\r\ndodgy==0.2.1\r\nFaker==4.1.0\r\nfuncy==1.14\r\ngraphene==2.1.8\r\ngraphene-django==2.10.0\r\ngraphql-core==2.3.2\r\ngraphql-relay==2.0.1\r\ngunicorn==20.0.4\r\nh11==0.9.0\r\nhiredis==1.0.1\r\nhttptools==0.1.1\r\nhyperlink==19.0.0\r\nidna==2.9\r\nincremental==17.5.0\r\nisort==4.3.21\r\nkombu==4.6.8\r\nlazy-object-proxy==1.4.3\r\nlxml==4.5.0\r\nmccabe==0.6.1\r\nmore-itertools==8.3.0\r\nmsgpack==0.6.2\r\nmultidict==4.7.6\r\noauthlib==3.1.0\r\npackaging==20.3\r\nparsel==1.6.0\r\npep8-naming==0.4.1\r\npluggy==0.13.1\r\npromise==2.3\r\nprospector==1.2.0\r\nProtego==0.1.16\r\npsycopg2-binary==2.8.5\r\npy==1.8.1\r\npyasn1==0.4.8\r\npyasn1-modules==0.2.8\r\npycodestyle==2.4.0\r\npycparser==2.20\r\nPyDispatcher==2.0.5\r\npydocstyle==5.0.2\r\npyflakes==2.1.1\r\nPyHamcrest==2.0.2\r\nPyJWT==1.7.1\r\npylint==2.4.4\r\npylint-celery==0.3\r\npylint-django==2.0.12\r\npylint-flask==0.6\r\npylint-plugin-utils==0.6\r\npyOpenSSL==19.1.0\r\npyparsing==2.4.7\r\npytest==5.4.2\r\npytest-django==3.9.0\r\npython-dateutil==2.8.1\r\npython-decouple==3.3\r\npython3-openid==3.1.0\r\npytz==2020.1\r\nPyYAML==5.3.1\r\nqueuelib==1.5.0\r\nredis==3.5.2\r\nrequests==2.23.0\r\nrequests-oauthlib==1.3.0\r\nrequirements-detector==0.6\r\nRx==1.6.1\r\nScrapy==2.1.0\r\nscrapy-splash==0.7.2\r\nsentry-sdk==0.14.4\r\nservice-identity==18.1.0\r\nsetoptconf==0.2.0\r\nsingledispatch==3.4.0.3\r\nsix==1.14.0\r\nsnowballstemmer==2.0.0\r\nsocial-auth-app-django==3.1.0\r\nsocial-auth-core==3.3.3\r\nsqlparse==0.3.1\r\ntext-unidecode==1.3\r\nTwisted==20.3.0\r\ntxaio==20.4.1\r\nurllib3==1.25.9\r\nuvicorn==0.11.5\r\nuvloop==0.14.0\r\nvine==1.3.0\r\nw3lib==1.22.0\r\nwcwidth==0.1.9\r\nwebsockets==8.1\r\nwhitenoise==5.0.1\r\nwrapt==1.11.2\r\nyarl==1.4.2\r\nzope.interface==5.1.0\r\n```\r\nRedis Version:\r\n```\r\n6.0.3\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/353", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/353/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/353/events", "html_url": "https://github.com/Suor/django-cacheops/issues/353", "id": 618801079, "node_id": "MDU6SXNzdWU2MTg4MDEwNzk=", "number": 353, "title": "Invalidation for related FK isnull condition", "user": {"login": "lampwins", "id": 1297132, "node_id": "MDQ6VXNlcjEyOTcxMzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1297132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lampwins", "html_url": "https://github.com/lampwins", "followers_url": "https://api.github.com/users/lampwins/followers", "following_url": "https://api.github.com/users/lampwins/following{/other_user}", "gists_url": "https://api.github.com/users/lampwins/gists{/gist_id}", "starred_url": "https://api.github.com/users/lampwins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lampwins/subscriptions", "organizations_url": "https://api.github.com/users/lampwins/orgs", "repos_url": "https://api.github.com/users/lampwins/repos", "events_url": "https://api.github.com/users/lampwins/events{/privacy}", "received_events_url": "https://api.github.com/users/lampwins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-15T08:41:52Z", "updated_at": "2020-06-19T06:59:29Z", "closed_at": "2020-06-19T06:59:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am trying to figure out a case of invalidation not triggering. In this specific case, the queryset uses a FK's related name with an `isnull` check. When the `installed_device` field is populated with a device, I would expect the queryset to be invalidated as normal, but it doesn't seem to be happening. Am I missing something simple here?\r\n\r\n```python\r\nclass Rack(models.Model):\r\n    name = models.CharField(max_length=255)\r\n\r\nclass Device(models.Model):\r\n    name = models.CharField(max_length=255)\r\n    rack = models.ForeignKey('Rack')\r\n    position = models.IntegerField(null=True) \r\n\r\nclass DeviceBay(models.Model):\r\n    name = models.CharField(max_length=255)\r\n    installed_device = models.OneToOneField(\r\n        to='Device',\r\n        on_delete=models.SET_NULL,\r\n        related_name='parent_bay',\r\n        blank=True,\r\n        null=True\r\n    )\r\n\r\n\r\n\r\nnonracked_devices = Device.objects.filter(\r\n    rack=rack,\r\n    position__isnull=True,\r\n    parent_bay__isnull=True\r\n)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/351", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/351/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/351/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/351/events", "html_url": "https://github.com/Suor/django-cacheops/issues/351", "id": 602536318, "node_id": "MDU6SXNzdWU2MDI1MzYzMTg=", "number": 351, "title": "Multi tenant Django with multiple databases", "user": {"login": "guilhermej", "id": 8609457, "node_id": "MDQ6VXNlcjg2MDk0NTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/8609457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guilhermej", "html_url": "https://github.com/guilhermej", "followers_url": "https://api.github.com/users/guilhermej/followers", "following_url": "https://api.github.com/users/guilhermej/following{/other_user}", "gists_url": "https://api.github.com/users/guilhermej/gists{/gist_id}", "starred_url": "https://api.github.com/users/guilhermej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guilhermej/subscriptions", "organizations_url": "https://api.github.com/users/guilhermej/orgs", "repos_url": "https://api.github.com/users/guilhermej/repos", "events_url": "https://api.github.com/users/guilhermej/events{/privacy}", "received_events_url": "https://api.github.com/users/guilhermej/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-18T19:40:54Z", "updated_at": "2020-04-19T09:46:21Z", "closed_at": "2020-04-19T09:46:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a multi tenant Django app.\r\nI use the same code and same settings file for all my clients, but each tenant has his own database, I use a database router to route for the correct database based on the domain that access the application using some middleware tricks.\r\nWhen I use the django-cacheops for all clients the cache mix information of different tenants.\r\nI know that the correct is to use a redis db for each of my clients but how I do this? There are some way to select the redis db for cacheops based on the request domain?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/347", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/347/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/347/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/347/events", "html_url": "https://github.com/Suor/django-cacheops/issues/347", "id": 578327989, "node_id": "MDU6SXNzdWU1NzgzMjc5ODk=", "number": 347, "title": "@cached_as function invalidated when unrelated object saved", "user": {"login": "mrmachine", "id": 51939, "node_id": "MDQ6VXNlcjUxOTM5", "avatar_url": "https://avatars3.githubusercontent.com/u/51939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrmachine", "html_url": "https://github.com/mrmachine", "followers_url": "https://api.github.com/users/mrmachine/followers", "following_url": "https://api.github.com/users/mrmachine/following{/other_user}", "gists_url": "https://api.github.com/users/mrmachine/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrmachine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrmachine/subscriptions", "organizations_url": "https://api.github.com/users/mrmachine/orgs", "repos_url": "https://api.github.com/users/mrmachine/repos", "events_url": "https://api.github.com/users/mrmachine/events{/privacy}", "received_events_url": "https://api.github.com/users/mrmachine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-10T04:22:28Z", "updated_at": "2020-03-18T09:55:06Z", "closed_at": "2020-03-18T09:55:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to invalidate a function when objects in a queryset are updated, via `@cached_as`. So I have something like this:\r\n\r\n```python\r\n>>> pks = range(10)\r\n\r\n>>> LogEntry.objects.filter(pk__in=pks).count()\r\n>>> 7\r\n\r\n>>> @cached_as(LogEntry.objects.filter(pk__in=pks))\r\n   .....: def f():\r\n   .....:     print 'f'\r\n   .....: \r\n\r\n>>> f()\r\nf\r\n\r\n>>> f()\r\n\r\n```\r\n\r\nAll good so far. Now I go to save a `LogEntry` that is NOT related to the queryset I am using to cache:\r\n\r\n```python\r\n>>> LogEntry.objects.exclude(pk__in=pks)[0].save()\r\n\r\n>>> f()\r\nf\r\n\r\n>>> f()\r\n\r\n```\r\n\r\nFor some reason, the cache has been invalidated and the function executes again. It seems to be based on the number of PKs in the filter. This still works as expected:\r\n\r\n```python\r\n>>> pks = range(5)\r\n\r\n>>> LogEntry.objects.filter(pk__in=pks).count()\r\n>>> 4\r\n\r\n>>> @cached_as(LogEntry.objects.filter(pk__in=pks))\r\n   .....: def f():\r\n   .....:     print 'f'\r\n   .....: \r\n\r\n>>> f()\r\nf\r\n\r\n>>> f()\r\n\r\n>>> LogEntry.objects.exclude(pk__in=pks)[0].save()\r\n\r\n>>> f()\r\n\r\n```\r\n\r\nNothing invalidated.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/346", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/346/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/346/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/346/events", "html_url": "https://github.com/Suor/django-cacheops/issues/346", "id": 559642070, "node_id": "MDU6SXNzdWU1NTk2NDIwNzA=", "number": 346, "title": "Python 3.7 support PEP 479 StopIteration error", "user": {"login": "peteyb", "id": 647320, "node_id": "MDQ6VXNlcjY0NzMyMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/647320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peteyb", "html_url": "https://github.com/peteyb", "followers_url": "https://api.github.com/users/peteyb/followers", "following_url": "https://api.github.com/users/peteyb/following{/other_user}", "gists_url": "https://api.github.com/users/peteyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/peteyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peteyb/subscriptions", "organizations_url": "https://api.github.com/users/peteyb/orgs", "repos_url": "https://api.github.com/users/peteyb/repos", "events_url": "https://api.github.com/users/peteyb/events{/privacy}", "received_events_url": "https://api.github.com/users/peteyb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-04T10:59:33Z", "updated_at": "2020-02-19T15:57:44Z", "closed_at": "2020-02-19T15:57:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have recently upgraded our project to Python 3.7 which has led to some new exceptions being caught by Sentry in our production environment.\r\n\r\nIn looking at the stack trace it appears to be an issue with the way in which StopIteration are handled as detailed here: https://docs.python.org/3/whatsnew/3.7.html#changes-in-python-behavior\r\n\r\n> PEP 479 is enabled for all code in Python 3.7, meaning that StopIteration exceptions raised directly or indirectly in coroutines and generators are transformed into RuntimeError exceptions. (Contributed by Yury Selivanov in bpo-32670.)\r\n\r\nAre there plans for django-cacheops to catch these exceptions?\r\n\r\n```AttributeError: 'SessionStore' object has no attribute '_session_cache'\r\n  File \"django/contrib/sessions/backends/base.py\", line 189, in _get_session\r\n    return self._session_cache\r\n\r\nStopIteration: null\r\n  File \"django/db/models/query.py\", line 73, in __iter__\r\n    obj = model_cls.from_db(db, init_list, row[model_fields_start:model_fields_end])\r\n  File \"django/db/models/base.py\", line 511, in from_db\r\n    for f in cls._meta.concrete_fields\r\n  File \"django/db/models/base.py\", line 511, in <listcomp>\r\n    for f in cls._meta.concrete_fields\r\n\r\nRuntimeError: generator raised StopIteration\r\n  File \"django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"mykey/middleware.py\", line 19, in __call__\r\n    self.process_request(request)\r\n  File \"mykey/middleware.py\", line 28, in process_request\r\n    if request.session.session_key and not request.user.is_authenticated and request.COOKIES.get(settings.SERVICE_SITES_SESSION_COOKIE_NAME):\r\n  File \"django/utils/functional.py\", line 256, in inner\r\n    self._setup()\r\n  File \"django/utils/functional.py\", line 392, in _setup\r\n    self._wrapped = self._setupfunc()\r\n  File \"django/contrib/auth/middleware.py\", line 24, in <lambda>\r\n    request.user = SimpleLazyObject(lambda: get_user(request))\r\n  File \"django/contrib/auth/middleware.py\", line 12, in get_user\r\n    request._cached_user = auth.get_user(request)\r\n  File \"django/contrib/auth/__init__.py\", line 182, in get_user\r\n    user_id = _get_user_session_key(request)\r\n  File \"django/contrib/auth/__init__.py\", line 59, in _get_user_session_key\r\n    return get_user_model()._meta.pk.to_python(request.session[SESSION_KEY])\r\n  File \"django/contrib/sessions/backends/base.py\", line 54, in __getitem__\r\n    return self._session[key]\r\n  File \"django/contrib/sessions/backends/base.py\", line 194, in _get_session\r\n    self._session_cache = self.load()\r\n  File \"django/contrib/sessions/backends/db.py\", line 43, in load\r\n    s = self._get_session_from_db()\r\n  File \"django/contrib/sessions/backends/db.py\", line 34, in _get_session_from_db\r\n    expire_date__gt=timezone.now()\r\n  File \"django/db/models/manager.py\", line 82, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"cacheops/query.py\", line 390, in get\r\n    return qs._no_monkey.get(qs, *args, **kwargs)\r\n  File \"django/db/models/query.py\", line 402, in get\r\n    num = len(clone)\r\n  File \"django/db/models/query.py\", line 256, in __len__\r\n    self._fetch_all()\r\n  File \"cacheops/query.py\", line 318, in _fetch_all\r\n    self._result_cache = list(self._iterable_class(self))```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/345", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/345/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/345/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/345/events", "html_url": "https://github.com/Suor/django-cacheops/issues/345", "id": 550234085, "node_id": "MDU6SXNzdWU1NTAyMzQwODU=", "number": 345, "title": "Filtering against F() leads to incorrect conj", "user": {"login": "tumb1er", "id": 1587241, "node_id": "MDQ6VXNlcjE1ODcyNDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1587241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tumb1er", "html_url": "https://github.com/tumb1er", "followers_url": "https://api.github.com/users/tumb1er/followers", "following_url": "https://api.github.com/users/tumb1er/following{/other_user}", "gists_url": "https://api.github.com/users/tumb1er/gists{/gist_id}", "starred_url": "https://api.github.com/users/tumb1er/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tumb1er/subscriptions", "organizations_url": "https://api.github.com/users/tumb1er/orgs", "repos_url": "https://api.github.com/users/tumb1er/repos", "events_url": "https://api.github.com/users/tumb1er/events{/privacy}", "received_events_url": "https://api.github.com/users/tumb1er/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-15T14:52:18Z", "updated_at": "2020-07-11T06:37:55Z", "closed_at": "2020-07-11T06:37:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm having problems with similar queryset:\r\n\r\n```python\r\nqs.filter(some_fk=F('another_model__some_fk'))\r\n```\r\nredis monitor shows this command (models and field names are replaced manually):\r\n```\r\n\"sadd\" \"conj:model:fk_id=1123&some_id=Col(another_model, another.Model.some_fk)\"\r\n``` \r\n\r\nLooks like `cacheops.tree.dnfs` should cache this as `SOME_TREE`, since this conj is not invalidated with some_id=321 argument.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/344", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/344/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/344/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/344/events", "html_url": "https://github.com/Suor/django-cacheops/issues/344", "id": 538434067, "node_id": "MDU6SXNzdWU1Mzg0MzQwNjc=", "number": 344, "title": "Cache view for each user", "user": {"login": "milad-ghr", "id": 47255539, "node_id": "MDQ6VXNlcjQ3MjU1NTM5", "avatar_url": "https://avatars2.githubusercontent.com/u/47255539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milad-ghr", "html_url": "https://github.com/milad-ghr", "followers_url": "https://api.github.com/users/milad-ghr/followers", "following_url": "https://api.github.com/users/milad-ghr/following{/other_user}", "gists_url": "https://api.github.com/users/milad-ghr/gists{/gist_id}", "starred_url": "https://api.github.com/users/milad-ghr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milad-ghr/subscriptions", "organizations_url": "https://api.github.com/users/milad-ghr/orgs", "repos_url": "https://api.github.com/users/milad-ghr/repos", "events_url": "https://api.github.com/users/milad-ghr/events{/privacy}", "received_events_url": "https://api.github.com/users/milad-ghr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-16T14:07:19Z", "updated_at": "2019-12-16T16:27:41Z", "closed_at": "2019-12-16T16:27:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there \r\nI have a issue with 'cached_view_as' as I want to cache a response data for each user. \r\nThe data that is responding to user depends on permissions that user has, so queryset will be different.\r\nIs there any way to cache 'data' separately for each user and when user requests the view, returns specific data for that user.\r\nThanks ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/342", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/342/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/342/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/342/events", "html_url": "https://github.com/Suor/django-cacheops/issues/342", "id": 526194465, "node_id": "MDU6SXNzdWU1MjYxOTQ0NjU=", "number": 342, "title": "Small typo in cacheops/query.py", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-20T20:44:55Z", "updated_at": "2019-11-26T14:25:00Z", "closed_at": "2019-11-26T14:25:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Should read meaningful instead of meaningfull.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/339", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/339/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/339/events", "html_url": "https://github.com/Suor/django-cacheops/issues/339", "id": 520026670, "node_id": "MDU6SXNzdWU1MjAwMjY2NzA=", "number": 339, "title": "Different backend than redis (memcached)", "user": {"login": "pySilver", "id": 1113925, "node_id": "MDQ6VXNlcjExMTM5MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1113925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pySilver", "html_url": "https://github.com/pySilver", "followers_url": "https://api.github.com/users/pySilver/followers", "following_url": "https://api.github.com/users/pySilver/following{/other_user}", "gists_url": "https://api.github.com/users/pySilver/gists{/gist_id}", "starred_url": "https://api.github.com/users/pySilver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pySilver/subscriptions", "organizations_url": "https://api.github.com/users/pySilver/orgs", "repos_url": "https://api.github.com/users/pySilver/repos", "events_url": "https://api.github.com/users/pySilver/events{/privacy}", "received_events_url": "https://api.github.com/users/pySilver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-08T13:53:32Z", "updated_at": "2019-11-26T14:31:07Z", "closed_at": "2019-11-26T14:31:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi @Suor !\r\n\r\nThanks for you lib. It works well for many years for us! Quick question: what special features or data structures of redis are used by cacheops? I'm asking in order to determine if this would be possible to add memcached support which with latest facebook proxy looks very interesting:\r\n\r\nRefs:\r\nhttp://www.cs.utah.edu/~stutsman/cs6963/public/papers/memcached.pdf\r\nhttps://github.com/facebook/mcrouter\r\n\r\nBiggest benefits:\r\n* Distributed cache clusters\r\n* Speed (well redis isn't slow at all)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/333", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/333/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/333/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/333/events", "html_url": "https://github.com/Suor/django-cacheops/issues/333", "id": 501563916, "node_id": "MDU6SXNzdWU1MDE1NjM5MTY=", "number": 333, "title": "Unable to use custom managers or querysets", "user": {"login": "xuru", "id": 350975, "node_id": "MDQ6VXNlcjM1MDk3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/350975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuru", "html_url": "https://github.com/xuru", "followers_url": "https://api.github.com/users/xuru/followers", "following_url": "https://api.github.com/users/xuru/following{/other_user}", "gists_url": "https://api.github.com/users/xuru/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuru/subscriptions", "organizations_url": "https://api.github.com/users/xuru/orgs", "repos_url": "https://api.github.com/users/xuru/repos", "events_url": "https://api.github.com/users/xuru/events{/privacy}", "received_events_url": "https://api.github.com/users/xuru/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-02T15:29:26Z", "updated_at": "2019-10-10T12:59:54Z", "closed_at": "2019-10-10T12:59:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "A common practice is to create a manager to do \"soft\" deletes on data when that data needs to be tracked.  Unfortunately instead of deriving from `models.Manager`, the manager I have to deal with looks like:\r\n\r\n```\r\nclass SoftDeleteManager(manager.BaseManager.from_queryset(SoftDeleteQuerySet)):\r\n    use_for_related_fields = True\r\n\r\n    def get_queryset(self):\r\n        return super(SoftDeleteManager, self).get_queryset().filter(active=True)\r\n```\r\nSo it would be nice to be able to set the custom manager class that gets monkey patched.  Currently it has to derive from `models.Manager`, but it doesn't have too to be a valid manager.\r\n\r\nPull request is incoming", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/332", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/332/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/332/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/332/events", "html_url": "https://github.com/Suor/django-cacheops/issues/332", "id": 489191080, "node_id": "MDU6SXNzdWU0ODkxOTEwODA=", "number": 332, "title": "How do you cache a relationship?", "user": {"login": "Siecje", "id": 4069476, "node_id": "MDQ6VXNlcjQwNjk0NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4069476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Siecje", "html_url": "https://github.com/Siecje", "followers_url": "https://api.github.com/users/Siecje/followers", "following_url": "https://api.github.com/users/Siecje/following{/other_user}", "gists_url": "https://api.github.com/users/Siecje/gists{/gist_id}", "starred_url": "https://api.github.com/users/Siecje/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Siecje/subscriptions", "organizations_url": "https://api.github.com/users/Siecje/orgs", "repos_url": "https://api.github.com/users/Siecje/repos", "events_url": "https://api.github.com/users/Siecje/events{/privacy}", "received_events_url": "https://api.github.com/users/Siecje/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-04T14:20:33Z", "updated_at": "2019-11-11T17:18:12Z", "closed_at": "2019-11-11T17:18:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to cache this query.\r\n\r\n```SQL\r\nSELECT\r\n    Platform_platformuser . user_id,\r\n    Platform_platformuser . uuid,\r\nFROM Platform_platformuser\r\n    INNER JOIN MyApp_project_platform_users\r\n    ON ( Platform_platformuser . user_id = MyApp_project_platform_users . platformuser_id ) \r\nWHERE MyApp_project_platform_users . project_id = ?\r\n```\r\n\r\n```Python\r\n# MyApp/models.py\r\nclass Project(models.Model):\r\n    # ...\r\n    platform_users = models.ManyToManyField(\r\n        \"Platform.PlatformUser\", name='platform_users', related_name='projects'\r\n    )\r\n```\r\n\r\nHere is my config for `PlatformUser`.\r\n```Python\r\nCACHEOPS = {\r\n    'MyApp.Project': {'ops': 'get'},\r\n    'Platform.PlatformUser': {'ops': 'get'},\r\n    '*.*': {},\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/331", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/331/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/331/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/331/events", "html_url": "https://github.com/Suor/django-cacheops/issues/331", "id": 487806876, "node_id": "MDU6SXNzdWU0ODc4MDY4NzY=", "number": 331, "title": "Django-cacheops not honouring DISABLE_SERVER_SIDE_CURSORS=True", "user": {"login": "peteyb", "id": 647320, "node_id": "MDQ6VXNlcjY0NzMyMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/647320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peteyb", "html_url": "https://github.com/peteyb", "followers_url": "https://api.github.com/users/peteyb/followers", "following_url": "https://api.github.com/users/peteyb/following{/other_user}", "gists_url": "https://api.github.com/users/peteyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/peteyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peteyb/subscriptions", "organizations_url": "https://api.github.com/users/peteyb/orgs", "repos_url": "https://api.github.com/users/peteyb/repos", "events_url": "https://api.github.com/users/peteyb/events{/privacy}", "received_events_url": "https://api.github.com/users/peteyb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-08-31T20:07:07Z", "updated_at": "2020-02-19T15:58:39Z", "closed_at": "2020-02-19T15:58:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am experiencing the following error when using cacheops. \r\n\r\n`\r\n<class 'django.db.utils.OperationalError'> cursor \"_django_curs_140208684635136_1196\" does not exist\r\n`\r\n\r\nThe database connection is behind pgBouncer and so I set DISABLE_SERVER_SIDE_CURSORS to True for the database connection.\r\n\r\nHere is the cacheops config:\r\n\r\n`\r\nCACHEOPS_DEGRADE_ON_FAILURE = True\r\nCACHEOPS = {\r\n    'auth.*': {'ops': 'all', 'timeout': 60*15},\r\n    '*.*': {'ops': (), 'timeout': 60*60},\r\n}\r\n`\r\n\r\nTo provide more context I am running LocustIO to perform load testing of the django application, which only demonstrates this issue when under concurrent load.\r\n\r\nThere no outstanding migration to make or run on the database.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/330", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/330/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/330/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/330/events", "html_url": "https://github.com/Suor/django-cacheops/issues/330", "id": 487022221, "node_id": "MDU6SXNzdWU0ODcwMjIyMjE=", "number": 330, "title": "The existence of the cache", "user": {"login": "dgorobets", "id": 6160533, "node_id": "MDQ6VXNlcjYxNjA1MzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6160533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgorobets", "html_url": "https://github.com/dgorobets", "followers_url": "https://api.github.com/users/dgorobets/followers", "following_url": "https://api.github.com/users/dgorobets/following{/other_user}", "gists_url": "https://api.github.com/users/dgorobets/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgorobets/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgorobets/subscriptions", "organizations_url": "https://api.github.com/users/dgorobets/orgs", "repos_url": "https://api.github.com/users/dgorobets/repos", "events_url": "https://api.github.com/users/dgorobets/events{/privacy}", "received_events_url": "https://api.github.com/users/dgorobets/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-29T15:15:50Z", "updated_at": "2019-09-01T03:39:19Z", "closed_at": "2019-09-01T03:38:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to check if a cache exists for a specific queryset?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/329", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/329/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/329/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/329/events", "html_url": "https://github.com/Suor/django-cacheops/issues/329", "id": 486801006, "node_id": "MDU6SXNzdWU0ODY4MDEwMDY=", "number": 329, "title": "New release on PyPI", "user": {"login": "tovin07", "id": 1128186, "node_id": "MDQ6VXNlcjExMjgxODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1128186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tovin07", "html_url": "https://github.com/tovin07", "followers_url": "https://api.github.com/users/tovin07/followers", "following_url": "https://api.github.com/users/tovin07/following{/other_user}", "gists_url": "https://api.github.com/users/tovin07/gists{/gist_id}", "starred_url": "https://api.github.com/users/tovin07/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tovin07/subscriptions", "organizations_url": "https://api.github.com/users/tovin07/orgs", "repos_url": "https://api.github.com/users/tovin07/repos", "events_url": "https://api.github.com/users/tovin07/events{/privacy}", "received_events_url": "https://api.github.com/users/tovin07/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-29T08:00:17Z", "updated_at": "2019-09-01T08:02:47Z", "closed_at": "2019-09-01T08:02:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear team,\r\n\r\nI saw that the most recent release was a year ago.\r\nFrom the last version, I saw that we had a lot of improvements & features too.\r\nDo you guy have any plan to release new version on PyPI?\r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/328", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/328/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/328/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/328/events", "html_url": "https://github.com/Suor/django-cacheops/issues/328", "id": 482442941, "node_id": "MDU6SXNzdWU0ODI0NDI5NDE=", "number": 328, "title": "Add cache key to share cacheops cache with microservice", "user": {"login": "Siecje", "id": 4069476, "node_id": "MDQ6VXNlcjQwNjk0NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4069476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Siecje", "html_url": "https://github.com/Siecje", "followers_url": "https://api.github.com/users/Siecje/followers", "following_url": "https://api.github.com/users/Siecje/following{/other_user}", "gists_url": "https://api.github.com/users/Siecje/gists{/gist_id}", "starred_url": "https://api.github.com/users/Siecje/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Siecje/subscriptions", "organizations_url": "https://api.github.com/users/Siecje/orgs", "repos_url": "https://api.github.com/users/Siecje/repos", "events_url": "https://api.github.com/users/Siecje/events{/privacy}", "received_events_url": "https://api.github.com/users/Siecje/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-19T17:45:34Z", "updated_at": "2019-08-21T05:35:48Z", "closed_at": "2019-08-21T05:35:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a main Django application and a microservice that will share the same models. I want to use the same cacheops cache for both applications.\r\n\r\nCurrently the model needs to be in an app with the same name and have all fields and field classes the same.\r\n\r\nhttps://github.com/Suor/django-cacheops/blob/e26c114b82a133573471fec51a69724367995991/cacheops/utils.py#L79\r\n\r\nI'm wondering if each model can have a cache key that can override the default to be able to share the same cache with all models that have the same cache key?\r\n\r\nOtherwise I am thinking about monkey patching `stamp_fields()` to check for a meta property or falling back to the default.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/327", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/327/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/327/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/327/events", "html_url": "https://github.com/Suor/django-cacheops/issues/327", "id": 458920777, "node_id": "MDU6SXNzdWU0NTg5MjA3Nzc=", "number": 327, "title": "Cacheops hangs when CACHEOPS_DEGRADE_ON_FAILURE set to True and ConnectionError to redis", "user": {"login": "peteyb", "id": 647320, "node_id": "MDQ6VXNlcjY0NzMyMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/647320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peteyb", "html_url": "https://github.com/peteyb", "followers_url": "https://api.github.com/users/peteyb/followers", "following_url": "https://api.github.com/users/peteyb/following{/other_user}", "gists_url": "https://api.github.com/users/peteyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/peteyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peteyb/subscriptions", "organizations_url": "https://api.github.com/users/peteyb/orgs", "repos_url": "https://api.github.com/users/peteyb/repos", "events_url": "https://api.github.com/users/peteyb/events{/privacy}", "received_events_url": "https://api.github.com/users/peteyb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-06-20T22:48:04Z", "updated_at": "2019-08-21T10:25:03Z", "closed_at": "2019-08-21T09:09:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Whilst CACHEOPS_DEGRADE_ON_FAILURE does stop connection exceptions being thrown, on pages where multiple models are being referenced it takes upwards of 60 seconds before returning the response. The socket timeout makes little difference to this.\r\n\r\nMy django app is run inside a python 3.6 docker image. The redis instance is another container which I reference via a name lookup, not ip address; as this matches the production configuration on GCP.\r\n\r\nIs it possible to update the CACHEOPS_DEGRADE_ON_FAILURE so that if one call to redis fails then all subsequent calls made as part of the same request are ignored, instead of attempting to hit redis for every model.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/324", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/324/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/324/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/324/events", "html_url": "https://github.com/Suor/django-cacheops/issues/324", "id": 450630292, "node_id": "MDU6SXNzdWU0NTA2MzAyOTI=", "number": 324, "title": "Django 2.2 bulk_create ignore_conflicts support", "user": {"login": "stefan8", "id": 195785, "node_id": "MDQ6VXNlcjE5NTc4NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/195785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan8", "html_url": "https://github.com/stefan8", "followers_url": "https://api.github.com/users/stefan8/followers", "following_url": "https://api.github.com/users/stefan8/following{/other_user}", "gists_url": "https://api.github.com/users/stefan8/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan8/subscriptions", "organizations_url": "https://api.github.com/users/stefan8/orgs", "repos_url": "https://api.github.com/users/stefan8/repos", "events_url": "https://api.github.com/users/stefan8/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan8/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-31T06:06:51Z", "updated_at": "2019-08-21T05:48:21Z", "closed_at": "2019-08-21T05:48:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is new argument in django QuerySet `bulk_create` method called `ignore_conflicts` which breaks cacheops patched querysets / managers.\r\nAre you going to support django 2.2 or are you willing to merge PRs since I see there is no active development :(\r\n\r\nCheers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/321", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/321/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/321/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/321/events", "html_url": "https://github.com/Suor/django-cacheops/issues/321", "id": 431501099, "node_id": "MDU6SXNzdWU0MzE1MDEwOTk=", "number": 321, "title": "about settings", "user": {"login": "pyprism", "id": 1469242, "node_id": "MDQ6VXNlcjE0NjkyNDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1469242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyprism", "html_url": "https://github.com/pyprism", "followers_url": "https://api.github.com/users/pyprism/followers", "following_url": "https://api.github.com/users/pyprism/following{/other_user}", "gists_url": "https://api.github.com/users/pyprism/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyprism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyprism/subscriptions", "organizations_url": "https://api.github.com/users/pyprism/orgs", "repos_url": "https://api.github.com/users/pyprism/repos", "events_url": "https://api.github.com/users/pyprism/events{/privacy}", "received_events_url": "https://api.github.com/users/pyprism/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-10T13:23:03Z", "updated_at": "2019-04-10T13:52:16Z", "closed_at": "2019-04-10T13:52:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am just confused about settings after reading setup instruction. Suppose I have two models ; `ProductImage` in `shop` app and `Account` model in `base` app . Then which one is correct \r\n\r\n1.\r\n```\r\nCACHEOPS = {\r\n    'base.account.*': {'ops': 'all', 'timeout': 60*60},\r\n    'shop.productimage.*': {'ops': 'all', 'timeout': 60*60},\r\n}\r\n```\r\n\r\nor 2.\r\n```\r\nCACHEOPS = {\r\n    'base.Account.*': {'ops': 'all', 'timeout': 60*60},\r\n    'shop.ProductImage.*': {'ops': 'all', 'timeout': 60*60},\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/320", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/320/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/320/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/320/events", "html_url": "https://github.com/Suor/django-cacheops/issues/320", "id": 423311700, "node_id": "MDU6SXNzdWU0MjMzMTE3MDA=", "number": 320, "title": "Disable caching on specific models", "user": {"login": "jpmohan1111", "id": 17663138, "node_id": "MDQ6VXNlcjE3NjYzMTM4", "avatar_url": "https://avatars1.githubusercontent.com/u/17663138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpmohan1111", "html_url": "https://github.com/jpmohan1111", "followers_url": "https://api.github.com/users/jpmohan1111/followers", "following_url": "https://api.github.com/users/jpmohan1111/following{/other_user}", "gists_url": "https://api.github.com/users/jpmohan1111/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpmohan1111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpmohan1111/subscriptions", "organizations_url": "https://api.github.com/users/jpmohan1111/orgs", "repos_url": "https://api.github.com/users/jpmohan1111/repos", "events_url": "https://api.github.com/users/jpmohan1111/events{/privacy}", "received_events_url": "https://api.github.com/users/jpmohan1111/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-20T15:19:17Z", "updated_at": "2019-03-21T07:52:17Z", "closed_at": "2019-03-21T07:52:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to disable caching on specific models, and enable cache on the rest?\r\nI tried like below:\r\n```python\r\nCACHEOPS = {\r\n\t'APP.*': {'ops': {'fetch', 'get'}, 'timeout': 60*10},\r\n\t'APP.model1': None,\r\n}\r\n```\r\nBut it seems not to work as i see the redis data being populated for model1 as well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/319", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/319/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/319/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/319/events", "html_url": "https://github.com/Suor/django-cacheops/issues/319", "id": 415475123, "node_id": "MDU6SXNzdWU0MTU0NzUxMjM=", "number": 319, "title": "Using cacheops with password auth to redis causes big connection number", "user": {"login": "M1ha-Shvn", "id": 2315339, "node_id": "MDQ6VXNlcjIzMTUzMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2315339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/M1ha-Shvn", "html_url": "https://github.com/M1ha-Shvn", "followers_url": "https://api.github.com/users/M1ha-Shvn/followers", "following_url": "https://api.github.com/users/M1ha-Shvn/following{/other_user}", "gists_url": "https://api.github.com/users/M1ha-Shvn/gists{/gist_id}", "starred_url": "https://api.github.com/users/M1ha-Shvn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/M1ha-Shvn/subscriptions", "organizations_url": "https://api.github.com/users/M1ha-Shvn/orgs", "repos_url": "https://api.github.com/users/M1ha-Shvn/repos", "events_url": "https://api.github.com/users/M1ha-Shvn/events{/privacy}", "received_events_url": "https://api.github.com/users/M1ha-Shvn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-28T06:57:03Z", "updated_at": "2019-03-01T06:39:06Z", "closed_at": "2019-03-01T06:39:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi. \r\nIt may be related to https://github.com/Suor/django-cacheops/issues/315, but I'm not sure.\r\nAfter setting up password for CACHEOPS_REDIS, I began getting a lot of connections to redis, while number of operations hasn't changed:\r\nhttp://prntscr.com/mr6p53. \r\nThis causes a lot of authentication attempts => TimeoutError-s and performance degrading.\r\nCan you help me guess what's the reason, and how to resolve this?\r\nThanks.\r\n\r\n**UPD**: cacheops is working on separate redis instance. Another instance, using redis-py directly doesn't have this problems after adding password: http://prntscr.com/mr6qjs", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/318", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/318/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/318/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/318/events", "html_url": "https://github.com/Suor/django-cacheops/issues/318", "id": 412804720, "node_id": "MDU6SXNzdWU0MTI4MDQ3MjA=", "number": 318, "title": "Caching views protected with auth is vulnerability ", "user": {"login": "ApaDoctor", "id": 6985901, "node_id": "MDQ6VXNlcjY5ODU5MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6985901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ApaDoctor", "html_url": "https://github.com/ApaDoctor", "followers_url": "https://api.github.com/users/ApaDoctor/followers", "following_url": "https://api.github.com/users/ApaDoctor/following{/other_user}", "gists_url": "https://api.github.com/users/ApaDoctor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ApaDoctor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ApaDoctor/subscriptions", "organizations_url": "https://api.github.com/users/ApaDoctor/orgs", "repos_url": "https://api.github.com/users/ApaDoctor/repos", "events_url": "https://api.github.com/users/ApaDoctor/events{/privacy}", "received_events_url": "https://api.github.com/users/ApaDoctor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-21T08:33:02Z", "updated_at": "2019-02-27T08:12:26Z", "closed_at": "2019-02-26T17:11:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you cache whole view protected with authentication mechanism with `cached_view` and there was any response(successful or not). All other clients will receive this response. So it returns last cached response instead of checking if user really authenticated or not. \r\nI had this issue using `cahced_view` on `.as_view()` for DRF CBV.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/316", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/316/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/316/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/316/events", "html_url": "https://github.com/Suor/django-cacheops/issues/316", "id": 409138212, "node_id": "MDU6SXNzdWU0MDkxMzgyMTI=", "number": 316, "title": "Cannot compute Sum('field'): 'field' is an aggregate", "user": {"login": "emilt27", "id": 22050249, "node_id": "MDQ6VXNlcjIyMDUwMjQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/22050249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilt27", "html_url": "https://github.com/emilt27", "followers_url": "https://api.github.com/users/emilt27/followers", "following_url": "https://api.github.com/users/emilt27/following{/other_user}", "gists_url": "https://api.github.com/users/emilt27/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilt27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilt27/subscriptions", "organizations_url": "https://api.github.com/users/emilt27/orgs", "repos_url": "https://api.github.com/users/emilt27/repos", "events_url": "https://api.github.com/users/emilt27/events{/privacy}", "received_events_url": "https://api.github.com/users/emilt27/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-02-12T06:17:54Z", "updated_at": "2019-08-25T09:13:25Z", "closed_at": "2019-08-25T09:13:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following example does not work after installing `cacheops`:\r\n\r\n`AnimalGroup.objects.annotate(animals_num=Count('animals')).aggregate(total_animals=Sum('animals_num'))`\r\n\r\nI got error message: `Cannot compute Sum('animals_num'): 'animals_num' is an aggregate`. \r\n\r\nDjango docs: https://docs.djangoproject.com/en/2.1/topics/db/aggregation/#aggregating-annotations\r\n\r\nMy env:\r\n- python 3.6.6 & pip 18.0\r\n- django 2.1.1\r\n- django-cacheops 4.1\r\n- postgresql 9.6\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/315", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/315/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/315/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/315/events", "html_url": "https://github.com/Suor/django-cacheops/issues/315", "id": 405524244, "node_id": "MDU6SXNzdWU0MDU1MjQyNDQ=", "number": 315, "title": "redis.exceptions.TimeoutError: Timeout reading from socket", "user": {"login": "viseshrp", "id": 11642379, "node_id": "MDQ6VXNlcjExNjQyMzc5", "avatar_url": "https://avatars1.githubusercontent.com/u/11642379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viseshrp", "html_url": "https://github.com/viseshrp", "followers_url": "https://api.github.com/users/viseshrp/followers", "following_url": "https://api.github.com/users/viseshrp/following{/other_user}", "gists_url": "https://api.github.com/users/viseshrp/gists{/gist_id}", "starred_url": "https://api.github.com/users/viseshrp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viseshrp/subscriptions", "organizations_url": "https://api.github.com/users/viseshrp/orgs", "repos_url": "https://api.github.com/users/viseshrp/repos", "events_url": "https://api.github.com/users/viseshrp/events{/privacy}", "received_events_url": "https://api.github.com/users/viseshrp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-02-01T02:21:41Z", "updated_at": "2019-08-21T06:19:51Z", "closed_at": "2019-08-21T06:19:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Suor,\r\n\r\nFirstly thanks for this amazing library. Everyone at my company loves it. So, we have been using this paired with Django REST framework for a large datastore(Postgres db). This datastore gets new data written to it every 20-30 minutes using bulk_create. We noticed that there happens a socket timeout to redis. It doesn't happen often and maybe once in several hours and crashes our db writes. I understand that cacheops invalidates on bulk_creates and for some reason the socket connection times out. I tried increases the timeout using cacheops to 10 seconds (a lot, I know) from 4 seconds and still doesn't help.\r\n\r\nError:\r\n```\r\nTraceback (most recent call last):\r\n File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 181, in _read_from_socket\r\n   data = recv(self._sock, socket_read_size)\r\n File \"/usr/local/lib/python3.7/site-packages/redis/_compat.py\", line 71, in recv\r\n   return sock.recv(*args, **kwargs)\r\nsocket.timeout: timed out\r\nDuring handling of the above exception, another exception occurred:\r\nTraceback (most recent call last):\r\n File \"article.py\", line 125, in <module>\r\n   add_data(cursor)\r\n File \"article.py\", line 107, in add_data\r\n   entity = models.Entity.objects.filter(dow_jones_fcode = company.upper()).first()\r\n File \"/usr/local/lib/python3.7/site-packages/cacheops/query.py\", line 360, in first\r\n   return self._no_monkey.first(self._clone().cache())\r\n File \"/usr/local/lib/python3.7/site-packages/django/db/models/query.py\", line 605, in first\r\n   for obj in (self if self.ordered else self.order_by('pk'))[:1]:\r\n File \"/usr/local/lib/python3.7/site-packages/django/db/models/query.py\", line 268, in __iter__\r\n   self._fetch_all()\r\n File \"/usr/local/lib/python3.7/site-packages/cacheops/query.py\", line 295, in _fetch_all\r\n   self._cache_results(cache_key, self._result_cache)\r\n File \"/usr/local/lib/python3.7/site-packages/cacheops/query.py\", line 181, in _cache_results\r\n   self._cond_dnfs, self._cacheprofile['timeout'], dbs=[self.db])\r\n File \"/usr/local/lib/python3.7/site-packages/cacheops/query.py\", line 47, in cache_thing\r\n   timeout\r\n File \"/usr/local/lib/python3.7/site-packages/redis/client.py\", line 3575, in __call__\r\n   return client.evalsha(self.sha, len(keys), *args)\r\n File \"/usr/local/lib/python3.7/site-packages/redis/client.py\", line 2761, in evalsha\r\n   return self.execute_command('EVALSHA', sha, numkeys, *keys_and_args)\r\n File \"/usr/local/lib/python3.7/site-packages/redis/client.py\", line 775, in execute_command\r\n   return self.parse_response(connection, command_name, **options)\r\n File \"/usr/local/lib/python3.7/site-packages/redis/client.py\", line 789, in parse_response\r\n   response = connection.read_response()\r\n File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 636, in read_response\r\n   raise e\r\n File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 633, in read_response\r\n   response = self._parser.read_response()\r\n File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 291, in read_response\r\n   response = self._buffer.readline()\r\n File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 223, in readline\r\n   self._read_from_socket()\r\n File \"/usr/local/lib/python3.7/site-packages/redis/connection.py\", line 194, in _read_from_socket\r\n   raise TimeoutError(\"Timeout reading from socket\")\r\nredis.exceptions.TimeoutError: Timeout reading from socket\r\n```\r\n\r\nsettings.py\r\n```\r\n# caching\r\nCACHEOPS_REDIS = {\r\n    'host': os.environ['DJANGO_CACHE_HOST'],  # redis-server is on same machine\r\n    'port': os.environ['DJANGO_CACHE_PORT'],  # default redis port\r\n    'db': os.environ['DJANGO_CACHE_DB_NUMBER'],  # SELECT non-default redis database\r\n    'socket_timeout': int(os.environ['DJANGO_CACHE_SOCKET_TIMEOUT']),  # connection timeout in seconds\r\n    'password': os.environ['DJANGO_CACHE_PASSWORD'],\r\n}\r\n\r\nCACHEOPS_DEFAULTS = {\r\n    # 60 * 60 * 24 = 1 day\r\n    'timeout': 60 * 60 * 24 * int(os.environ['DJANGO_CACHE_DEFAULT_EXPIRY_DAYS']),\r\n    'ops': {'get', 'fetch', 'count', 'aggregate'},\r\n    'local_get': True,\r\n    'cache_on_save': True,\r\n}\r\n\r\n# uses defaults from above\r\nCACHEOPS = {\r\n    'auth.user': {'ops': 'get', 'timeout': 60 * 60 * 24},\r\n    'auth.permission': {'ops': 'all', 'timeout': 60 * 60 * 24},\r\n    'tang_app.DailyAdjClose': {},\r\n    'tang_app.Industry': {},\r\n    'tang_app.Country': {},\r\n    'tang_app.Entity': {},\r\n    'tang_app.Article': {},\r\n    'tang_app.Source': {},\r\n    'tang_app.Publisher': {},\r\n}\r\n```\r\nAny advice is appreciated. Thanks again for your work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/314", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/314/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/314/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/314/events", "html_url": "https://github.com/Suor/django-cacheops/issues/314", "id": 393300212, "node_id": "MDU6SXNzdWUzOTMzMDAyMTI=", "number": 314, "title": "Distinct queryset cast to list shows old representation", "user": {"login": "mvanlonden", "id": 1718791, "node_id": "MDQ6VXNlcjE3MTg3OTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1718791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvanlonden", "html_url": "https://github.com/mvanlonden", "followers_url": "https://api.github.com/users/mvanlonden/followers", "following_url": "https://api.github.com/users/mvanlonden/following{/other_user}", "gists_url": "https://api.github.com/users/mvanlonden/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvanlonden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvanlonden/subscriptions", "organizations_url": "https://api.github.com/users/mvanlonden/orgs", "repos_url": "https://api.github.com/users/mvanlonden/repos", "events_url": "https://api.github.com/users/mvanlonden/events{/privacy}", "received_events_url": "https://api.github.com/users/mvanlonden/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-12-21T03:37:17Z", "updated_at": "2018-12-24T22:07:09Z", "closed_at": "2018-12-24T22:07:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "```py\r\nIn [36]: langs = Language.objects.all()\r\n\r\nIn [37]: distinct_langs = Language.objects.filter(speakers__in=User.objects.all()).distinct()\r\n\r\nIn [38]: langs\r\nOut[38]: <QuerySet [<Language: en>, <Language: es>]>\r\n\r\nIn [39]: distinct_langs\r\nOut[39]: <QuerySet [<Language: en>, <Language: es>]>\r\n\r\nIn [40]: list(langs)\r\nOut[40]: [<Language: en>, <Language: es>]\r\n\r\nIn [41]: list(distinct_langs)\r\nOut[41]: [<Language: en>]\r\n```\r\nDistinct queryset is correct but when cast to list old representation is printed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/312", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/312/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/312/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/312/events", "html_url": "https://github.com/Suor/django-cacheops/issues/312", "id": 390939863, "node_id": "MDU6SXNzdWUzOTA5Mzk4NjM=", "number": 312, "title": "Unable to invalidate conj_key generated by read against UUID field", "user": {"login": "andytzeng", "id": 11328103, "node_id": "MDQ6VXNlcjExMzI4MTAz", "avatar_url": "https://avatars3.githubusercontent.com/u/11328103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andytzeng", "html_url": "https://github.com/andytzeng", "followers_url": "https://api.github.com/users/andytzeng/followers", "following_url": "https://api.github.com/users/andytzeng/following{/other_user}", "gists_url": "https://api.github.com/users/andytzeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/andytzeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andytzeng/subscriptions", "organizations_url": "https://api.github.com/users/andytzeng/orgs", "repos_url": "https://api.github.com/users/andytzeng/repos", "events_url": "https://api.github.com/users/andytzeng/events{/privacy}", "received_events_url": "https://api.github.com/users/andytzeng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-12-14T02:25:26Z", "updated_at": "2020-01-05T03:12:08Z", "closed_at": "2020-01-05T03:12:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "To Team,\r\n\r\nHere is my example model\r\n```\r\nclass Device(models.Model):\r\n    uid = models.UUIDField()\r\n    brand = models.CharField(max_length=64, null=True)\r\n    model = models.CharField(max_length=64, null=True)\r\n    created = models.DateTimeField(auto_now_add=True)\r\n```\r\n\r\nThe issue happen that if query item by UUID field as follow:\r\n```\r\nDevice.objects.get(uid='584d13481e6b4049b5b7b6c1075847c8')\r\n```\r\n\r\nWhen I observed generated keys in Redis, it generated the following conj key\r\n```\r\ncacheops_conj:user_device:uid=584d13481e6b4049b5b7b6c1075847c8\r\n```\r\n\r\nI have tried to purge Redis and query by dash format or UUID object\r\n```\r\nDevice.objects.get(uid='584d1348-1e6b-4049-b5b7-b6c1075847c8')\r\n# or\r\n# Device.objects.get(uid=uuid.UUID('584d13481e6b4049b5b7b6c1075847c8'))\r\n# Device.objects.get(uid=uuid.UUID('584d1348-1e6b-4049-b5b7-b6c1075847c8'))\r\n```\r\nThe conj key generated will have dash inside as below:\r\n```\r\ncacheops_conj:user_device:uid=584d1348-1e6b-4049-b5b7-b6c1075847c8\r\n```\r\nWhen I used invalidate command or API call to purge the cache, I found case 1 (no dash) cannot be purged and case 2 works.\r\nSimilarly, when save() is invoked and invalidate the cache, only dash-format will works.\r\n\r\nAfter diging the code, I found ```invalidate_dict``` generated keys by invoking **str** on UUID field, the format always contains dash.\r\n\r\nPlease consider normalizing the two generating keys.\r\nI expected that no matter how I query the object (32-byte characters or UUID format with dashes), the cached object should be able to be invalidated.\r\n\r\nI found the issue similar to #15 , but different data type.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/311", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/311/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/311/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/311/events", "html_url": "https://github.com/Suor/django-cacheops/issues/311", "id": 390043707, "node_id": "MDU6SXNzdWUzOTAwNDM3MDc=", "number": 311, "title": "key`s expiration time param `timeout` not work", "user": {"login": "mayouzi", "id": 18528873, "node_id": "MDQ6VXNlcjE4NTI4ODcz", "avatar_url": "https://avatars2.githubusercontent.com/u/18528873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mayouzi", "html_url": "https://github.com/mayouzi", "followers_url": "https://api.github.com/users/mayouzi/followers", "following_url": "https://api.github.com/users/mayouzi/following{/other_user}", "gists_url": "https://api.github.com/users/mayouzi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mayouzi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mayouzi/subscriptions", "organizations_url": "https://api.github.com/users/mayouzi/orgs", "repos_url": "https://api.github.com/users/mayouzi/repos", "events_url": "https://api.github.com/users/mayouzi/events{/privacy}", "received_events_url": "https://api.github.com/users/mayouzi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2018-12-12T02:55:19Z", "updated_at": "2018-12-16T03:35:21Z", "closed_at": "2018-12-16T03:35:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "set a value `CACHEOPS_DEFAULTS = {'timeout': 60 * 60}`, but the cache key\\`s expiration time is `-1` actually, and it\\`s data type is `set`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/310", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/310/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/310/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/310/events", "html_url": "https://github.com/Suor/django-cacheops/issues/310", "id": 388103309, "node_id": "MDU6SXNzdWUzODgxMDMzMDk=", "number": 310, "title": "Finer-grained caching?", "user": {"login": "Yriuns", "id": 13610387, "node_id": "MDQ6VXNlcjEzNjEwMzg3", "avatar_url": "https://avatars2.githubusercontent.com/u/13610387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yriuns", "html_url": "https://github.com/Yriuns", "followers_url": "https://api.github.com/users/Yriuns/followers", "following_url": "https://api.github.com/users/Yriuns/following{/other_user}", "gists_url": "https://api.github.com/users/Yriuns/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yriuns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yriuns/subscriptions", "organizations_url": "https://api.github.com/users/Yriuns/orgs", "repos_url": "https://api.github.com/users/Yriuns/repos", "events_url": "https://api.github.com/users/Yriuns/events{/privacy}", "received_events_url": "https://api.github.com/users/Yriuns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-12-06T08:22:25Z", "updated_at": "2018-12-08T03:41:13Z", "closed_at": "2018-12-08T03:41:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example, I have a `Article` model:\r\n```python\r\nclass Article(models.Article):\r\n    title = models.CharField(...)\r\n    content = models.TextField(...)\r\n    views_count = models.IntegerField(default=0)\r\n```\r\nAnd a `ArticleListView` list all the articles:\r\n```python\r\nqs = Article.objects.all().only('title', 'views_count')\r\n# serialize the articles...\r\nreturn data\r\n```\r\n\r\nIncrease `views_count` every time user accesses the the `ArticleDetailView(pk)` for a specific `Article`:\r\n```python\r\nArticle.objects.filter(pk=pk).update(views_count=F('views_count')+1)\r\narticle = Article.objects.get(pk=pk)\r\n# serialize the article...\r\nreturn data\r\n```\r\n\r\nTherefore, once the `ArticleDetailView(pk)` is accessed, the cache of `ArticleDetailView(pk)` and `ArticleListView` will be invalidated, because the `views_count` has changed.\r\n\r\n1. However, it's unnecessary to invalidate the data for other `articles` in `ArticleListView`, since only the `views_count` of `Article(pk)` has changed.\r\n2. Other fields of `Article(pk)` also doesn't change, can we reuse the cache?\r\n\r\n*Or*\r\n\r\nMaybe I should create a new table to store the value of some volatile fields like `view_count`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/309", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/309/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/309/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/309/events", "html_url": "https://github.com/Suor/django-cacheops/issues/309", "id": 387621351, "node_id": "MDU6SXNzdWUzODc2MjEzNTE=", "number": 309, "title": "Error with pypy-6.0.0, Django-1.8, django-cacheops-4.1", "user": {"login": "salyarka", "id": 20030729, "node_id": "MDQ6VXNlcjIwMDMwNzI5", "avatar_url": "https://avatars2.githubusercontent.com/u/20030729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/salyarka", "html_url": "https://github.com/salyarka", "followers_url": "https://api.github.com/users/salyarka/followers", "following_url": "https://api.github.com/users/salyarka/following{/other_user}", "gists_url": "https://api.github.com/users/salyarka/gists{/gist_id}", "starred_url": "https://api.github.com/users/salyarka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/salyarka/subscriptions", "organizations_url": "https://api.github.com/users/salyarka/orgs", "repos_url": "https://api.github.com/users/salyarka/repos", "events_url": "https://api.github.com/users/salyarka/events{/privacy}", "received_events_url": "https://api.github.com/users/salyarka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-12-05T07:08:44Z", "updated_at": "2019-01-14T10:01:46Z", "closed_at": "2019-01-14T10:01:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Traceback (most recent call last):\r\n  File \"manage.py\", line 10, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/django/core/management/__init__.py\", line 354, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/django/core/management/__init__.py\", line 346, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/django/core/management/commands/test.py\", line 30, in run_from_argv\r\n    super(Command, self).run_from_argv(argv)\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/django/core/management/base.py\", line 382, in run_from_argv\r\n    parser = self.create_parser(argv[0], argv[1])\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/django/core/management/base.py\", line 355, in create_parser\r\n    self.add_arguments(parser)\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/django/core/management/commands/test.py\", line 52, in add_arguments\r\n    test_runner_class = get_runner(settings, self.test_runner)\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/django/test/utils.py\", line 152, in get_runner\r\n    test_module = __import__(test_module_name, {}, {}, force_str(test_path[-1]))\r\n  File \"/home/salyarka/project/app/tests.py\", line 12, in <module>\r\n    mod = m.load_module(name)\r\n  File \"/opt/pypy2-v6.0.0-linux64/lib-python/2.7/pkgutil.py\", line 246, in load_module\r\n    mod = imp.load_module(fullname, self.file, self.filename, self.etc)\r\n  File \"/home/salyarka/project/app/tests.py\", line 5, in <module>\r\n    from .models import (\r\n  File \"/home/salyarka/project/app/models.py\", line 48, in <module>\r\n    class Order(models.Model):\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/django/db/models/base.py\", line 189, in __new__\r\n    new_class.add_to_class(obj_name, obj)\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/django/db/models/base.py\", line 324, in add_to_class\r\n    value.contribute_to_class(cls, name)\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/cacheops/query.py\", line 428, in contribute_to_class\r\n    if cls.__module__ != '__fake__' and family_has_profile(cls):\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/funcy/calc.py\", line 44, in wrapper\r\n    value = memory[key] = func(*args, **kwargs)\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/cacheops/utils.py\", line 43, in family_has_profile\r\n    return any(model_profile, model_family(cls))\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/cacheops/utils.py\", line 38, in model_family\r\n    return class_tree(model._meta.concrete_model or get_concrete_model(model))\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/cacheops/utils.py\", line 25, in get_concrete_model\r\n    return next(b for b in model.__mro__ if issubclass(b, models.Model) and not b._meta.abstract)\r\n  File \"/home/salyarka/.virtualenvs/pypy_venv/site-packages/cacheops/utils.py\", line 25, in <genexpr>\r\n    return next(b for b in model.__mro__ if issubclass(b, models.Model) and not b._meta.abstract)\r\nAttributeError: type object 'Model' has no attribute '_meta'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/308", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/308/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/308/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/308/events", "html_url": "https://github.com/Suor/django-cacheops/issues/308", "id": 380439741, "node_id": "MDU6SXNzdWUzODA0Mzk3NDE=", "number": 308, "title": "Is a not found Model.get() cached and if so, how can it be invalidated?", "user": {"login": "ferrants", "id": 882183, "node_id": "MDQ6VXNlcjg4MjE4Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/882183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ferrants", "html_url": "https://github.com/ferrants", "followers_url": "https://api.github.com/users/ferrants/followers", "following_url": "https://api.github.com/users/ferrants/following{/other_user}", "gists_url": "https://api.github.com/users/ferrants/gists{/gist_id}", "starred_url": "https://api.github.com/users/ferrants/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ferrants/subscriptions", "organizations_url": "https://api.github.com/users/ferrants/orgs", "repos_url": "https://api.github.com/users/ferrants/repos", "events_url": "https://api.github.com/users/ferrants/events{/privacy}", "received_events_url": "https://api.github.com/users/ferrants/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-13T21:50:18Z", "updated_at": "2018-11-21T06:59:28Z", "closed_at": "2018-11-21T06:59:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "With the Automatic configuration in the settings.py, if I do a search for an object and it's not found, I want the next time I query this to see if the object exists to hit the database, not the cache. Is there a way I can configure this?\r\n\r\nI'm using the Model.get(), if that makes any difference:\r\n```\r\n        try:\r\n            obj = MyModel.objects.get(id=model_id) # this gets cached\r\n        except MyModel.DoesNotExist:\r\n            # invalidate the above cache?\r\n```\r\nsettings.py:\r\n```\r\nCACHEOPS = {\r\n    'api_app.MyModel': {'ops': {'get', 'filter'}, 'timeout': 60 * 15},\r\n    '*.*': {}\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/305", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/305/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/305/events", "html_url": "https://github.com/Suor/django-cacheops/issues/305", "id": 376198240, "node_id": "MDU6SXNzdWUzNzYxOTgyNDA=", "number": 305, "title": "How can I use this namespaced with multiple databases?", "user": {"login": "dkvdm", "id": 456094, "node_id": "MDQ6VXNlcjQ1NjA5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/456094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkvdm", "html_url": "https://github.com/dkvdm", "followers_url": "https://api.github.com/users/dkvdm/followers", "following_url": "https://api.github.com/users/dkvdm/following{/other_user}", "gists_url": "https://api.github.com/users/dkvdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkvdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkvdm/subscriptions", "organizations_url": "https://api.github.com/users/dkvdm/orgs", "repos_url": "https://api.github.com/users/dkvdm/repos", "events_url": "https://api.github.com/users/dkvdm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkvdm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-31T23:29:29Z", "updated_at": "2018-11-12T02:46:58Z", "closed_at": "2018-11-09T07:32:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI have one codebase that's connecting to a multitude of django postgres databases.\r\nHowever, I only have one redis backend.\r\n\r\nIf I query something with `.using(\"database_b\")`, the str will still display the result of `database_a`.\r\n\r\nIs there a way to automatically namespace cacheops based on the database name used? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/300", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/300/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/300/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/300/events", "html_url": "https://github.com/Suor/django-cacheops/issues/300", "id": 356681691, "node_id": "MDU6SXNzdWUzNTY2ODE2OTE=", "number": 300, "title": "Using get_or_create inside transaction fails on concurent threads", "user": {"login": "M1ha-Shvn", "id": 2315339, "node_id": "MDQ6VXNlcjIzMTUzMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2315339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/M1ha-Shvn", "html_url": "https://github.com/M1ha-Shvn", "followers_url": "https://api.github.com/users/M1ha-Shvn/followers", "following_url": "https://api.github.com/users/M1ha-Shvn/following{/other_user}", "gists_url": "https://api.github.com/users/M1ha-Shvn/gists{/gist_id}", "starred_url": "https://api.github.com/users/M1ha-Shvn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/M1ha-Shvn/subscriptions", "organizations_url": "https://api.github.com/users/M1ha-Shvn/orgs", "repos_url": "https://api.github.com/users/M1ha-Shvn/repos", "events_url": "https://api.github.com/users/M1ha-Shvn/events{/privacy}", "received_events_url": "https://api.github.com/users/M1ha-Shvn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-09-04T07:18:41Z", "updated_at": "2018-09-19T09:48:39Z", "closed_at": "2018-09-19T09:48:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi.\r\nDjango 2.1, cacheops 4.0.7\r\nThe problem is generated with 2 or more concurrent threads, using get_or_create inside transaction. One thread raises `django.db.transaction.TransactionManagementError: An error occurred in the current transaction. You can't execute queries until the end of the 'atomic' block.`\r\n\r\n[Trace](http://prntscr.com/kqcjck)\r\n\r\nThe bug doesn't occure if:\r\n1. I remove transaction in which get_or_create works\r\n2. Add nocache() before get_or_create\r\n3. Reduce number of concurrent threads to 1\r\n\r\nExample test (fails not always but often)\r\n```python\r\nclass UserAppMergeTest(TestCase):\r\n    fixtures = ['apps_app']\r\n\r\n    def test_parallel(self):\r\n        app = App.from_parameter(100500)\r\n\r\n        def _test_func():\r\n            from django.db import transaction\r\n            with transaction.atomic(using=app.shard):\r\n                UserAppMerge.objects.get_or_create(app=app, key='test@example.com', type='email')\r\n\r\n        from utils.utils import exec_in_parallel\r\n        from queue import Queue\r\n        q = Queue()\r\n        q.put(((), {}))\r\n        q.put(((), {}))\r\n        exec_in_parallel(_test_func, q, threads_count=2)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/299", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/299/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/299/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/299/events", "html_url": "https://github.com/Suor/django-cacheops/issues/299", "id": 356254932, "node_id": "MDU6SXNzdWUzNTYyNTQ5MzI=", "number": 299, "title": "Cachops shouldn't break the system if the cache memory is full", "user": {"login": "babu-upcomer", "id": 19949828, "node_id": "MDQ6VXNlcjE5OTQ5ODI4", "avatar_url": "https://avatars2.githubusercontent.com/u/19949828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/babu-upcomer", "html_url": "https://github.com/babu-upcomer", "followers_url": "https://api.github.com/users/babu-upcomer/followers", "following_url": "https://api.github.com/users/babu-upcomer/following{/other_user}", "gists_url": "https://api.github.com/users/babu-upcomer/gists{/gist_id}", "starred_url": "https://api.github.com/users/babu-upcomer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/babu-upcomer/subscriptions", "organizations_url": "https://api.github.com/users/babu-upcomer/orgs", "repos_url": "https://api.github.com/users/babu-upcomer/repos", "events_url": "https://api.github.com/users/babu-upcomer/events{/privacy}", "received_events_url": "https://api.github.com/users/babu-upcomer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-09-02T05:41:39Z", "updated_at": "2020-04-10T21:58:38Z", "closed_at": "2018-09-06T04:56:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nError running script (call to f_450fb983ac023d2a5436c3c4e6b0622ebb9fccaa): @user_script:9:@user_script: 9: -OOM command not allowed when used memory > 'maxmemory'.\r\n```\r\n\r\nCan it fallback to DB by catching the exception?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/297", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/297/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/297/events", "html_url": "https://github.com/Suor/django-cacheops/issues/297", "id": 352374727, "node_id": "MDU6SXNzdWUzNTIzNzQ3Mjc=", "number": 297, "title": "Don't cache django_migrations, detect accidental sharing, and other footguns", "user": {"login": "yozlet", "id": 173848, "node_id": "MDQ6VXNlcjE3Mzg0OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/173848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yozlet", "html_url": "https://github.com/yozlet", "followers_url": "https://api.github.com/users/yozlet/followers", "following_url": "https://api.github.com/users/yozlet/following{/other_user}", "gists_url": "https://api.github.com/users/yozlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/yozlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yozlet/subscriptions", "organizations_url": "https://api.github.com/users/yozlet/orgs", "repos_url": "https://api.github.com/users/yozlet/repos", "events_url": "https://api.github.com/users/yozlet/events{/privacy}", "received_events_url": "https://api.github.com/users/yozlet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-21T03:43:43Z", "updated_at": "2018-09-02T05:47:08Z", "closed_at": "2018-09-02T05:47:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is related to #239, but that issue is closed and there are enough different topics here that this may be worth a new issue.\r\n\r\nI was also suffering the problem of `no such table: \"django_content_type\"`, and it took several days of investigation and debugging before I traced the problem to cacheops.\r\n\r\nIt happened because:\r\n\r\n1. I've joined a team that has started using cacheops, but neither they nor I realised that cacheops would cache the `django_migrations` table (or rather, the `django.db.migrations.MigrationRecorder.Migration` model)\r\n1. I have several instances of the app running locally, each with their own SQLite databases. However, they all share the single Redis instance running on my machine, and none of them differentiate through other methods (e.g. `CACHEOPS_PREFIX`) because we didn't realise it was needed.\r\n1. So, when switching between app instances in different states, and recreating databases, cacheops will provide stale cache information. The `django_content_type` errors are caused by Django's `auth` app having a post-migration hook which writes data to that table, and this fails if Django thinks the table exists but it doesn't.\r\n\r\nI fixed this in a couple of ways:\r\n\r\n1. Added this to my `CACHEOPS` setting, to make it not cache `django_migrations`: `'migrations.*': { 'ops': (), 'timeout': 0 }`\r\n2. Set a `CACHEOPS_PREFIX` that uses the `BASE_DIR` of my Django app, but not the whole thing (as it's very long sometimes): `CACHEOPS_PREFIX = lambda _: 'cacheops:' + '/'.join(map(str(pathlib.Path(BASE_DIR[-2:])))) + ':'`\r\n\r\nI suspect that this issue is a fairly common one when a developer adds cacheops to an app and doesn't realise all the implications, or when a developer joins a project that's already using cacheops, and the team doesn't have cacheops-specific instructions in the app README. Both of these are pretty common situations, especially because the cacheops documentation doesn't seem to talk about it at all. (There _is_ a section called \"[Sharing redis instance](https://github.com/Suor/django-cacheops#sharing-redis-instance)\" but it's far down in the docs, and aimed at the use case where there are multiple Django hosts, rather than apps on the same host.)\r\n\r\nTo be clear: `cacheops` is working as designed. Unfortunately, this design is both lacking some safety features that would prevent certain common problems, _and_ when those problems happen it's not clear that `cacheops` is the cause.\r\n\r\nSome ideas:\r\n\r\n1. **Exclude `migrations.*` from cacheops coverage unless explicitly configured.** I'm fascinated to know why anyone would want `django_migrations` to be cached; I can't think of a good reason myself.\r\n1. **Detect accidental Redis sharing.** Cache a set of app-specific attributes that don't change often (e.g. `BASE_DIR`, database URL, hostname, etc.) Check these on startup; if the set is cached _and_ any of the attributes are different, raise a warning.\r\n1. **Show footguns early in the docs.** It's great that you have a \"Caveats\" section, but it's pretty far into the docs and it doesn't mention these particular issues.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/295", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/295/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/295/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/295/events", "html_url": "https://github.com/Suor/django-cacheops/issues/295", "id": 347801170, "node_id": "MDU6SXNzdWUzNDc4MDExNzA=", "number": 295, "title": "select_related() is not invalidated correctly", "user": {"login": "M1ha-Shvn", "id": 2315339, "node_id": "MDQ6VXNlcjIzMTUzMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2315339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/M1ha-Shvn", "html_url": "https://github.com/M1ha-Shvn", "followers_url": "https://api.github.com/users/M1ha-Shvn/followers", "following_url": "https://api.github.com/users/M1ha-Shvn/following{/other_user}", "gists_url": "https://api.github.com/users/M1ha-Shvn/gists{/gist_id}", "starred_url": "https://api.github.com/users/M1ha-Shvn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/M1ha-Shvn/subscriptions", "organizations_url": "https://api.github.com/users/M1ha-Shvn/orgs", "repos_url": "https://api.github.com/users/M1ha-Shvn/repos", "events_url": "https://api.github.com/users/M1ha-Shvn/events{/privacy}", "received_events_url": "https://api.github.com/users/M1ha-Shvn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-06T06:57:13Z", "updated_at": "2018-08-06T07:05:58Z", "closed_at": "2018-08-06T07:05:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi.\r\nHere is a bug example:\r\n```python\r\n# StartUp value\r\nConversation.objects.filter(pk=p.conversation_id, app_id=4).invalidated_update(channel_id=None)\r\n\r\n# Get QuerySet with select_related. Results are cached by cacheops\r\nqs = ConversationPart.objects.filter(app_id=4).select_related('conversation')[:1]\r\np = list(qs)[0]\r\nprint(p.id, p.conversation.channel_id)\r\n# Result: (126822486837821774, None)\r\n\r\n# Consider there is another thread updating conversation\r\nConversation.objects.filter(pk=p.conversation_id, app_id=4).invalidated_update(channel_id=100504)\r\n# Result: 1\r\n\r\n# Now fetching qs still returns old data\r\np = list(qs)[0]\r\nprint(p.id, p.conversation.channel_id)\r\n# Result: (126822486837821774, None)\r\n\r\n# While fetching Conversation returns new data\r\nprint(Conversation.objects.get(pk=p.conversation_id, app_id=4).channel_id)\r\n# Result: 100504\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/294", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/294/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/294/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/294/events", "html_url": "https://github.com/Suor/django-cacheops/issues/294", "id": 345920674, "node_id": "MDU6SXNzdWUzNDU5MjA2NzQ=", "number": 294, "title": "Jinja support and Python 3", "user": {"login": "drcongo", "id": 39289, "node_id": "MDQ6VXNlcjM5Mjg5", "avatar_url": "https://avatars1.githubusercontent.com/u/39289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drcongo", "html_url": "https://github.com/drcongo", "followers_url": "https://api.github.com/users/drcongo/followers", "following_url": "https://api.github.com/users/drcongo/following{/other_user}", "gists_url": "https://api.github.com/users/drcongo/gists{/gist_id}", "starred_url": "https://api.github.com/users/drcongo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drcongo/subscriptions", "organizations_url": "https://api.github.com/users/drcongo/orgs", "repos_url": "https://api.github.com/users/drcongo/repos", "events_url": "https://api.github.com/users/drcongo/events{/privacy}", "received_events_url": "https://api.github.com/users/drcongo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-30T20:24:08Z", "updated_at": "2018-08-19T05:29:06Z", "closed_at": "2018-08-19T05:29:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Caching Jinja templates with cacheops under Python 3 throws the error `'TokenStream' object has no attribute 'next'`\r\n\r\n```\r\nFile \"/usr/lib/python3.6/site-packages/jinja2/environment.py\", line 497, in _parse\r\n    return Parser(self, source, name, encode_filename(filename)).parse()\r\n  File \"/usr/lib/python3.6/site-packages/jinja2/parser.py\", line 901, in parse\r\n    result = nodes.Template(self.subparse(), lineno=1)\r\n  File \"/usr/lib/python3.6/site-packages/jinja2/parser.py\", line 883, in subparse\r\n    rv = self.parse_statement()\r\n  File \"/usr/lib/python3.6/site-packages/jinja2/parser.py\", line 137, in parse_statement\r\n    return ext(self)\r\n  File \"/usr/lib/python3.6/site-packages/cacheops/jinja2.py\", line 22, in parse\r\n    parser.stream.next()\r\nAttributeError: 'TokenStream' object has no attribute 'next'\r\n```\r\n\r\nI _think_ the issue is that in Python 3 this should be using `next(parser.stream)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/292", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/292/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/292/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/292/events", "html_url": "https://github.com/Suor/django-cacheops/issues/292", "id": 343978369, "node_id": "MDU6SXNzdWUzNDM5NzgzNjk=", "number": 292, "title": "Invalidation and multiple database", "user": {"login": "Svan70", "id": 15873484, "node_id": "MDQ6VXNlcjE1ODczNDg0", "avatar_url": "https://avatars1.githubusercontent.com/u/15873484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Svan70", "html_url": "https://github.com/Svan70", "followers_url": "https://api.github.com/users/Svan70/followers", "following_url": "https://api.github.com/users/Svan70/following{/other_user}", "gists_url": "https://api.github.com/users/Svan70/gists{/gist_id}", "starred_url": "https://api.github.com/users/Svan70/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Svan70/subscriptions", "organizations_url": "https://api.github.com/users/Svan70/orgs", "repos_url": "https://api.github.com/users/Svan70/repos", "events_url": "https://api.github.com/users/Svan70/events{/privacy}", "received_events_url": "https://api.github.com/users/Svan70/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-07-24T10:31:45Z", "updated_at": "2018-08-11T10:20:27Z", "closed_at": "2018-07-30T06:18:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "The invalidate functions in invalidation.py are designed to receive a db connection name (using parameter) but never receive it. Instead, DEFAULT_DB_ALIAS is always used. \r\nExemple of such usages : \r\n- post_save, post_delete and m2m_changed receivers. \r\n- bulk_create and invalidated_updated", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/291", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/291/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/291/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/291/events", "html_url": "https://github.com/Suor/django-cacheops/issues/291", "id": 343837080, "node_id": "MDU6SXNzdWUzNDM4MzcwODA=", "number": 291, "title": "Ignore apostrophe in last names", "user": {"login": "caseydm", "id": 3642984, "node_id": "MDQ6VXNlcjM2NDI5ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3642984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caseydm", "html_url": "https://github.com/caseydm", "followers_url": "https://api.github.com/users/caseydm/followers", "following_url": "https://api.github.com/users/caseydm/following{/other_user}", "gists_url": "https://api.github.com/users/caseydm/gists{/gist_id}", "starred_url": "https://api.github.com/users/caseydm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caseydm/subscriptions", "organizations_url": "https://api.github.com/users/caseydm/orgs", "repos_url": "https://api.github.com/users/caseydm/repos", "events_url": "https://api.github.com/users/caseydm/events{/privacy}", "received_events_url": "https://api.github.com/users/caseydm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-24T00:02:42Z", "updated_at": "2018-07-24T00:16:44Z", "closed_at": "2018-07-24T00:16:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does anybody know of a way to keep the tokenizer from splitting last names with an apostrophe in the middle? So something like \"O'Leary\" will be split into O and Leary, and searches for oleary or o'leary will not return any results. I'm trying to figure out a way to solve this problem, hopefully without reindexing everything!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/290", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/290/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/290/events", "html_url": "https://github.com/Suor/django-cacheops/issues/290", "id": 342609506, "node_id": "MDU6SXNzdWUzNDI2MDk1MDY=", "number": 290, "title": "max() arg is an empty sequence", "user": {"login": "quertenmont", "id": 4639944, "node_id": "MDQ6VXNlcjQ2Mzk5NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/4639944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quertenmont", "html_url": "https://github.com/quertenmont", "followers_url": "https://api.github.com/users/quertenmont/followers", "following_url": "https://api.github.com/users/quertenmont/following{/other_user}", "gists_url": "https://api.github.com/users/quertenmont/gists{/gist_id}", "starred_url": "https://api.github.com/users/quertenmont/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quertenmont/subscriptions", "organizations_url": "https://api.github.com/users/quertenmont/orgs", "repos_url": "https://api.github.com/users/quertenmont/repos", "events_url": "https://api.github.com/users/quertenmont/events{/privacy}", "received_events_url": "https://api.github.com/users/quertenmont/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-19T07:26:38Z", "updated_at": "2018-07-19T07:28:46Z", "closed_at": "2018-07-19T07:28:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "ignore", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/288", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/288/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/288/events", "html_url": "https://github.com/Suor/django-cacheops/issues/288", "id": 340396380, "node_id": "MDU6SXNzdWUzNDAzOTYzODA=", "number": 288, "title": "Use `UNLINK` rather than `DEL` if Redis version >= 4", "user": {"login": "nicwolff", "id": 4787, "node_id": "MDQ6VXNlcjQ3ODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicwolff", "html_url": "https://github.com/nicwolff", "followers_url": "https://api.github.com/users/nicwolff/followers", "following_url": "https://api.github.com/users/nicwolff/following{/other_user}", "gists_url": "https://api.github.com/users/nicwolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicwolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicwolff/subscriptions", "organizations_url": "https://api.github.com/users/nicwolff/orgs", "repos_url": "https://api.github.com/users/nicwolff/repos", "events_url": "https://api.github.com/users/nicwolff/events{/privacy}", "received_events_url": "https://api.github.com/users/nicwolff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-07-11T20:38:36Z", "updated_at": "2018-08-19T05:49:25Z", "closed_at": "2018-08-19T05:49:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Redis version 4.0.0 added the `UNLINK` command, which passes deleted keys to another thread to be asynchronously removed from memory. Conj sets in particular would benefit from this \u2013\u00a0in our deployment, invalidation of large conj sets can block for seconds. Cacheops should use `UNLINK` rather then `DEL` if it's available.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/286", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/286/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/286/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/286/events", "html_url": "https://github.com/Suor/django-cacheops/issues/286", "id": 326763089, "node_id": "MDU6SXNzdWUzMjY3NjMwODk=", "number": 286, "title": "add ability to add more connection options to sentinel through CACHEOPS_SENTINEL", "user": {"login": "ramSeraph", "id": 1972103, "node_id": "MDQ6VXNlcjE5NzIxMDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1972103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramSeraph", "html_url": "https://github.com/ramSeraph", "followers_url": "https://api.github.com/users/ramSeraph/followers", "following_url": "https://api.github.com/users/ramSeraph/following{/other_user}", "gists_url": "https://api.github.com/users/ramSeraph/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramSeraph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramSeraph/subscriptions", "organizations_url": "https://api.github.com/users/ramSeraph/orgs", "repos_url": "https://api.github.com/users/ramSeraph/repos", "events_url": "https://api.github.com/users/ramSeraph/events{/privacy}", "received_events_url": "https://api.github.com/users/ramSeraph/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-26T19:49:21Z", "updated_at": "2018-09-18T08:06:51Z", "closed_at": "2018-09-18T08:06:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "any other options set in CACHEOPS_SENTINEL other than those documented should be passed along directly to sentinel either in the constructor or master_for() call..  \r\n\r\ncurrently there seems to be no way to ovverride the connection pool size or to override socket_connect_timeout for the actual redis client or even a way to socket_connect_timeout for the sentinel itself", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/285", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/285/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/285/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/285/events", "html_url": "https://github.com/Suor/django-cacheops/issues/285", "id": 326735583, "node_id": "MDU6SXNzdWUzMjY3MzU1ODM=", "number": 285, "title": "Error while using lock=True on queryset", "user": {"login": "chetandhembre", "id": 1058442, "node_id": "MDQ6VXNlcjEwNTg0NDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1058442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetandhembre", "html_url": "https://github.com/chetandhembre", "followers_url": "https://api.github.com/users/chetandhembre/followers", "following_url": "https://api.github.com/users/chetandhembre/following{/other_user}", "gists_url": "https://api.github.com/users/chetandhembre/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetandhembre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetandhembre/subscriptions", "organizations_url": "https://api.github.com/users/chetandhembre/orgs", "repos_url": "https://api.github.com/users/chetandhembre/repos", "events_url": "https://api.github.com/users/chetandhembre/events{/privacy}", "received_events_url": "https://api.github.com/users/chetandhembre/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-26T12:44:24Z", "updated_at": "2018-06-30T13:04:03Z", "closed_at": "2018-06-30T13:04:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nAs per document, I added qs.cache(lock=True) to making sure only single db query happens when qs is invalidated from cache.\r\nBut after running this query from django shell I am getting ```ERR invalid expire time in setex``` error.\r\n\r\nNotable thing here is qs was not cached before using `lock=True`.\r\n\r\nCan you help me with this error?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/283", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/283/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/283/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/283/events", "html_url": "https://github.com/Suor/django-cacheops/issues/283", "id": 326720362, "node_id": "MDU6SXNzdWUzMjY3MjAzNjI=", "number": 283, "title": "Enable cache locking for cached decorator like cached_as", "user": {"login": "chetandhembre", "id": 1058442, "node_id": "MDQ6VXNlcjEwNTg0NDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1058442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetandhembre", "html_url": "https://github.com/chetandhembre", "followers_url": "https://api.github.com/users/chetandhembre/followers", "following_url": "https://api.github.com/users/chetandhembre/following{/other_user}", "gists_url": "https://api.github.com/users/chetandhembre/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetandhembre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetandhembre/subscriptions", "organizations_url": "https://api.github.com/users/chetandhembre/orgs", "repos_url": "https://api.github.com/users/chetandhembre/repos", "events_url": "https://api.github.com/users/chetandhembre/events{/privacy}", "received_events_url": "https://api.github.com/users/chetandhembre/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-26T08:13:45Z", "updated_at": "2019-03-28T05:33:40Z", "closed_at": "2019-03-28T05:33:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/281", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/281/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/281/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/281/events", "html_url": "https://github.com/Suor/django-cacheops/issues/281", "id": 313252125, "node_id": "MDU6SXNzdWUzMTMyNTIxMjU=", "number": 281, "title": "How to add information about caching to a response header?", "user": {"login": "metachris", "id": 116939, "node_id": "MDQ6VXNlcjExNjkzOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/116939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/metachris", "html_url": "https://github.com/metachris", "followers_url": "https://api.github.com/users/metachris/followers", "following_url": "https://api.github.com/users/metachris/following{/other_user}", "gists_url": "https://api.github.com/users/metachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/metachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/metachris/subscriptions", "organizations_url": "https://api.github.com/users/metachris/orgs", "repos_url": "https://api.github.com/users/metachris/repos", "events_url": "https://api.github.com/users/metachris/events{/privacy}", "received_events_url": "https://api.github.com/users/metachris/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-11T09:53:06Z", "updated_at": "2018-05-11T11:41:38Z", "closed_at": "2018-05-11T11:41:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, really great project! Thanks for working on it.\r\n\r\nI'm wondering what's the best way to add a response header with information whether the cache was hit or missed, in particular for DRF API responses.\r\n\r\nShould we add a custom middleware with a cache-hit counter and a certain threshold for adding the header to the response, or do you think there would be a better way?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/276", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/276/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/276/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/276/events", "html_url": "https://github.com/Suor/django-cacheops/issues/276", "id": 310680468, "node_id": "MDU6SXNzdWUzMTA2ODA0Njg=", "number": 276, "title": "Disable cacheops not working during tests", "user": {"login": "caseydm", "id": 3642984, "node_id": "MDQ6VXNlcjM2NDI5ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3642984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caseydm", "html_url": "https://github.com/caseydm", "followers_url": "https://api.github.com/users/caseydm/followers", "following_url": "https://api.github.com/users/caseydm/following{/other_user}", "gists_url": "https://api.github.com/users/caseydm/gists{/gist_id}", "starred_url": "https://api.github.com/users/caseydm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caseydm/subscriptions", "organizations_url": "https://api.github.com/users/caseydm/orgs", "repos_url": "https://api.github.com/users/caseydm/repos", "events_url": "https://api.github.com/users/caseydm/events{/privacy}", "received_events_url": "https://api.github.com/users/caseydm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-03T03:20:58Z", "updated_at": "2018-04-13T11:26:42Z", "closed_at": "2018-04-13T11:26:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to use @override_settings(CACHEOPS_ENABLED=False) but it appears cacheops is still trying to hit the cache. Am I doing something wrong? My Django version is 1.8.\r\n\r\n```\r\nfrom django.test import TestCase, override_settings\r\n@override_settings(CACHEOPS_ENABLED=False)\r\nclass TestViews(TestCase):\r\n    def test_record_list(self):\r\n        # test stuff\r\n```\r\n\r\nResult:\r\n\r\n```\r\nRuntimeWarning: The cacheops cache is unreachable! Error: Error 61 connecting to localhost:6379. Connection refused.\r\n  warnings.warn(\"The cacheops cache is unreachable! Error: %s\" % e, RuntimeWarning)\r\n```\r\nWhen I put CACHEOPS_ENABLED = False in my main settings file and run the tests, the RuntimeWarning goes away.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/275", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/275/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/275/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/275/events", "html_url": "https://github.com/Suor/django-cacheops/issues/275", "id": 308596065, "node_id": "MDU6SXNzdWUzMDg1OTYwNjU=", "number": 275, "title": "Crashes when using RawSQL", "user": {"login": "thakryptex", "id": 12232787, "node_id": "MDQ6VXNlcjEyMjMyNzg3", "avatar_url": "https://avatars0.githubusercontent.com/u/12232787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thakryptex", "html_url": "https://github.com/thakryptex", "followers_url": "https://api.github.com/users/thakryptex/followers", "following_url": "https://api.github.com/users/thakryptex/following{/other_user}", "gists_url": "https://api.github.com/users/thakryptex/gists{/gist_id}", "starred_url": "https://api.github.com/users/thakryptex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thakryptex/subscriptions", "organizations_url": "https://api.github.com/users/thakryptex/orgs", "repos_url": "https://api.github.com/users/thakryptex/repos", "events_url": "https://api.github.com/users/thakryptex/events{/privacy}", "received_events_url": "https://api.github.com/users/thakryptex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-26T14:27:44Z", "updated_at": "2018-05-11T12:11:53Z", "closed_at": "2018-05-11T12:11:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "**This line of code works if cacheops is removed** (_I mean, really removed from INSTALLED_APPS, not just turned off using CACHEOPS_ENABLED = False_):\r\n```\r\nusers_queryset = users_queryset.filter(\r\n    uid__in=RawSQL('SELECT DISTINCT user_id FROM *mymodel* WHERE expires_at > %s', (timezone.now(),)))\r\n```\r\n\r\nBut if cacheops is in INSTALLED_APPS, then this error happens:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/django/core/handlers/exception.py\", line 35, in inner\r\n    response = get_response(request)\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/django/core/handlers/base.py\", line 119, in _get_response\r\n    response = middleware_method(request, callback, callback_args, callback_kwargs)\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/debug_toolbar/middleware.py\", line 90, in process_view\r\n    response = panel.process_view(request, view_func, view_args, view_kwargs)\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/debug_toolbar/panels/profiling.py\", line 151, in process_view\r\n    return self.profiler.runcall(view_func, *args, **view_kwargs)\r\n  File \"/usr/local/Cellar/python3/3.6.4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/cProfile.py\", line 109, in runcall\r\n    return func(*args, **kw)\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/django/views/decorators/csrf.py\", line 54, in wrapped_view\r\n    return view_func(*args, **kwargs)\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/django/views/generic/base.py\", line 69, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/rest_framework/views.py\", line 494, in dispatch\r\n    response = self.handle_exception(exc)\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/rest_framework/views.py\", line 451, in handle_exception\r\n    response = exception_handler(exc, context)\r\n  File \"/Users/***/backend/views/base.py\", line 178, in api_exception_handler\r\n    raise exc\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/rest_framework/views.py\", line 491, in dispatch\r\n    response = handler(request, *args, **kwargs)\r\n  File \"/Users/***/moderator/views/base.py\", line 52, in get\r\n    return self.do_command(request, *args, **kwargs)\r\n  File \"/Users/***/moderator/views/base.py\", line 40, in do_command\r\n    result = command(request, *args, **kwargs) or {}\r\n  File \"/Users/***/moderator/decorators.py\", line 40, in wrapper\r\n    return wrapped(request, *args, **kwargs)\r\n  File \"/Users/***/moderator/views/html/user_search.py\", line 89, in GET\r\n    total_users = users_queryset.count()\r\n\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/cacheops/query.py\", line 301, in count\r\n    return cached_as(self)(lambda: self._no_monkey.count(self))()\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/cacheops/query.py\", line 84, in cached_as\r\n    cond_dnfs = join_with(lcat, map(dnfs, querysets))\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/funcy/colls.py\", line 108, in join_with\r\n    dicts = list(dicts)\r\n\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/cacheops/tree.py\", line 139, in dnfs\r\n    return query_dnf(qs.query)\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/cacheops/tree.py\", line 126, in query_dnf\r\n    dnf = _dnf(query.where)\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/cacheops/tree.py\", line 78, in _dnf\r\n    chilren_dnfs = lmap(_dnf, where.children)\r\n\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/funcy/seqs.py\", line 115, in map\r\n    return _map(make_func(f, builtin=PY2), *seqs)\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/funcy/cross.py\", line 16, in map\r\n    return list(_map(f, *seqs))\r\n\r\n  File \"/Users/***/venv/lib/python3.6/site-packages/cacheops/tree.py\", line 65, in _dnf\r\n    elif isinstance(where, In) and len(where.rhs) < LONG_DISJUNCTION:\r\n\r\nTypeError: object of type 'RawSQL' has no len()\r\n```\r\n\r\n\r\n**And I get the same error when use Subquery** ([like here](https://github.com/Suor/django-cacheops/issues/29)):\r\n\r\n```\r\nusers_queryset = users_queryset.filter(\r\n    uid__in=Subquery(MyModel.objects.filter(expires_at__gt=timezone.now()).only('user_id')))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/274", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/274/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/274/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/274/events", "html_url": "https://github.com/Suor/django-cacheops/issues/274", "id": 305648204, "node_id": "MDU6SXNzdWUzMDU2NDgyMDQ=", "number": 274, "title": "What is \"Invalidation Data\"", "user": {"login": "chukkwagon", "id": 8526206, "node_id": "MDQ6VXNlcjg1MjYyMDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8526206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chukkwagon", "html_url": "https://github.com/chukkwagon", "followers_url": "https://api.github.com/users/chukkwagon/followers", "following_url": "https://api.github.com/users/chukkwagon/following{/other_user}", "gists_url": "https://api.github.com/users/chukkwagon/gists{/gist_id}", "starred_url": "https://api.github.com/users/chukkwagon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chukkwagon/subscriptions", "organizations_url": "https://api.github.com/users/chukkwagon/orgs", "repos_url": "https://api.github.com/users/chukkwagon/repos", "events_url": "https://api.github.com/users/chukkwagon/events{/privacy}", "received_events_url": "https://api.github.com/users/chukkwagon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-15T17:26:42Z", "updated_at": "2018-03-16T05:28:50Z", "closed_at": "2018-03-15T19:28:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "From the readme:\r\n\r\n> Cacheops stores cached data along with invalidation data, so you can't just set maxmemory and let redis evict at its will\r\n\r\nWhat is \"invalidation data\" and why would cache key invalidation depend on it? Shouldn't it just use a TTL so you don't have to worry about the redis eviction strategy at all?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/273", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/273/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/273/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/273/events", "html_url": "https://github.com/Suor/django-cacheops/issues/273", "id": 301061593, "node_id": "MDU6SXNzdWUzMDEwNjE1OTM=", "number": 273, "title": "ManyToMany relations are not invalidated?", "user": {"login": "brun0kb", "id": 4717146, "node_id": "MDQ6VXNlcjQ3MTcxNDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4717146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brun0kb", "html_url": "https://github.com/brun0kb", "followers_url": "https://api.github.com/users/brun0kb/followers", "following_url": "https://api.github.com/users/brun0kb/following{/other_user}", "gists_url": "https://api.github.com/users/brun0kb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brun0kb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brun0kb/subscriptions", "organizations_url": "https://api.github.com/users/brun0kb/orgs", "repos_url": "https://api.github.com/users/brun0kb/repos", "events_url": "https://api.github.com/users/brun0kb/events{/privacy}", "received_events_url": "https://api.github.com/users/brun0kb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-02-28T15:13:33Z", "updated_at": "2018-06-08T20:53:05Z", "closed_at": "2018-03-06T04:08:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've just upgraded to v4.05 (django 1.11.10) from an old version. Unfortunately, invalidation on m2m relations doesn't seem to work anymore. \r\n```\r\nclass Label(models.Model):\r\n    text = models.CharField(max_length=127, blank=True, default='')\r\n\r\nclass Brand(models.Model):\r\n    labels = models.ManyToManyField(Label)\r\n```\r\nAfter calling add() or remove() on the ManyToManyField, the cached query doesn't reflect the changes.\r\n```\r\nb = Brand()\r\nb.save()\r\nl = Label(text = \"l\")\r\nl.save()\r\n\r\nprint b.labels.all().cache() # returns <QuerySet []>\r\nprint Brand.objects.filter(labels__id = l.id).cache() # returns <QuerySet []>\r\n\r\nb.labels.add(l)\r\n\r\nprint b.labels.all().cache() # still returns <QuerySet []>\r\nprint Label.objects.filter(brand = b).cache() # still returns <QuerySet []>\r\nprint Brand.objects.filter(labels__id = l.id).cache() # returns <QuerySet []>\r\n\r\nprint b.labels.all().nocache() # returns <QuerySet [<Label: Label object>]>\r\nprint Label.objects.filter(brand = b).nocache() # returns <QuerySet [<Label: Label object>]>\r\nprint Brand.objects.filter(labels__id = l.id).nocache() # returns <QuerySet [<Brand: Brand object>]>\r\n```\r\n\r\nIt seems that, when 'b.labels.add(l)' is being called, invalidate_m2m() only invalidates the 'Brand_labels' model. But since my queries are made on the Label and Brand models, the Label and Brand objs involved should be invalidated as well.\r\n\r\nI've tried adding extra calls to invalidate_obj() at the end of invalidate_m2m(), like this:\r\n```\r\ndef invalidate_m2m(sender=None, instance=None, model=None, action=None, pk_set=None, reverse=None,  **kwargs):\r\n    ...\r\n    elif action in ('post_add', 'pre_remove'):\r\n        # NOTE: we don't need to query through objects here,\r\n        #       cause we already know all their meaningfull attributes.\r\n        for pk in pk_set:\r\n            invalidate_dict(sender, {\r\n                instance_column: instance.pk,\r\n                model_column: pk\r\n            })\r\n            # try to invalidate the related models\r\n            try:\r\n                obj = model.objects.get(pk= pk)\r\n                invalidate_obj(obj) # invalidates Label instance\r\n            except model.DoesNotExist:\r\n                pass\r\n        invalidate_obj(instance) # invalidates Brand instance\r\n```\r\nThat seems to do the trick.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/272", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/272/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/272/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/272/events", "html_url": "https://github.com/Suor/django-cacheops/issues/272", "id": 294859670, "node_id": "MDU6SXNzdWUyOTQ4NTk2NzA=", "number": 272, "title": "intermediate table caching of m2m relationship based on source Model timeout", "user": {"login": "Lepird", "id": 992058, "node_id": "MDQ6VXNlcjk5MjA1OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/992058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lepird", "html_url": "https://github.com/Lepird", "followers_url": "https://api.github.com/users/Lepird/followers", "following_url": "https://api.github.com/users/Lepird/following{/other_user}", "gists_url": "https://api.github.com/users/Lepird/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lepird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lepird/subscriptions", "organizations_url": "https://api.github.com/users/Lepird/orgs", "repos_url": "https://api.github.com/users/Lepird/repos", "events_url": "https://api.github.com/users/Lepird/events{/privacy}", "received_events_url": "https://api.github.com/users/Lepird/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-06T18:10:06Z", "updated_at": "2018-02-08T12:56:46Z", "closed_at": "2018-02-08T12:56:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "so I am just wondering how to cache m2m tables based on config of source model ? \r\nso far with my test it seems to always get the config of the target Model.\r\n\r\nfor more details our implementation is to cache setup/config models on a 30 day timeout while having user/session scoped models on a 2 hour time out \r\n\r\nso as an example let say we have the below models\r\n\r\n``` python\r\nclass Product(models.Model):\r\n  name = models.CharField()\r\n  price = models.PositiveIntegerField()\r\n\r\nclass User(models.Model):\r\n  username = models.CharField()\r\n  products = models.ManyToManyField('Product', related_name='user_products')\r\n```\r\n\r\nusing the below config\r\n\r\n``` python\r\nCACHEOPS = {\r\n    'app.product': {'ops': ('fetch', 'get'), 'timeout': 60*60*24*30},\r\n    'app.user': {'ops': ('get', 'fetch'), 'timeout': 60*60*2},\r\n}\r\n```\r\n\r\nhow to set the many to many field between user and product to cache on 2 hours rather than 30 days ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/271", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/271/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/271/events", "html_url": "https://github.com/Suor/django-cacheops/issues/271", "id": 293876503, "node_id": "MDU6SXNzdWUyOTM4NzY1MDM=", "number": 271, "title": "Handle Redis `BusyLoadingError`", "user": {"login": "mrmachine", "id": 51939, "node_id": "MDQ6VXNlcjUxOTM5", "avatar_url": "https://avatars3.githubusercontent.com/u/51939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrmachine", "html_url": "https://github.com/mrmachine", "followers_url": "https://api.github.com/users/mrmachine/followers", "following_url": "https://api.github.com/users/mrmachine/following{/other_user}", "gists_url": "https://api.github.com/users/mrmachine/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrmachine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrmachine/subscriptions", "organizations_url": "https://api.github.com/users/mrmachine/orgs", "repos_url": "https://api.github.com/users/mrmachine/repos", "events_url": "https://api.github.com/users/mrmachine/events{/privacy}", "received_events_url": "https://api.github.com/users/mrmachine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-02T12:44:06Z", "updated_at": "2018-02-03T04:10:44Z", "closed_at": "2018-02-03T04:10:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nBusyLoadingError: Redis is loading the dataset in memory\r\n  File \"django/core/handlers/base.py\", line 88, in get_response\r\n    response = middleware_method(request)\r\n  File \"newrelic/hooks/framework_django.py\", line 222, in wrapper\r\n    return wrapped(*args, **kwargs)\r\n  File \"djangosite/users/middleware.py\", line 11, in process_request\r\n    request.device = get_device(uuid, key)\r\n  File \"djangosite/users/authentication.py\", line 14, in get_device\r\n    devices\r\n  File \"django/db/models/query.py\", line 96, in __iter__\r\n    self._fetch_all()\r\n  File \"django/db/models/query.py\", line 857, in _fetch_all\r\n    self._result_cache = list(self.iterator())\r\n  File \"cacheops/query.py\", line 258, in iterator\r\n    cache_data = redis_client.get(cache_key)\r\n  File \"newrelic/api/datastore_trace.py\", line 43, in _nr_datastore_trace_wrapper_\r\n    return wrapped(*args, **kwargs)\r\n  File \"redis/client.py\", line 976, in get\r\n    return self.execute_command('GET', name)\r\n  File \"redis/client.py\", line 674, in execute_command\r\n    return self.parse_response(connection, command_name, **options)\r\n  File \"redis/client.py\", line 680, in parse_response\r\n    response = connection.read_response()\r\n  File \"redis/connection.py\", line 624, in read_response\r\n    response = self._parser.read_response()\r\n  File \"redis/connection.py\", line 301, in read_response\r\n    raise error\r\n```\r\n\r\nMy Redis server had some kind of issue (there's only one, not a cluster) and suddenly I got hundreds of errors like this showing up in my log.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/270", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/270/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/270/events", "html_url": "https://github.com/Suor/django-cacheops/issues/270", "id": 292615590, "node_id": "MDU6SXNzdWUyOTI2MTU1OTA=", "number": 270, "title": "Disable cached view if user logged in", "user": {"login": "caseydm", "id": 3642984, "node_id": "MDQ6VXNlcjM2NDI5ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3642984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caseydm", "html_url": "https://github.com/caseydm", "followers_url": "https://api.github.com/users/caseydm/followers", "following_url": "https://api.github.com/users/caseydm/following{/other_user}", "gists_url": "https://api.github.com/users/caseydm/gists{/gist_id}", "starred_url": "https://api.github.com/users/caseydm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caseydm/subscriptions", "organizations_url": "https://api.github.com/users/caseydm/orgs", "repos_url": "https://api.github.com/users/caseydm/repos", "events_url": "https://api.github.com/users/caseydm/events{/privacy}", "received_events_url": "https://api.github.com/users/caseydm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-30T00:53:56Z", "updated_at": "2018-01-30T05:30:19Z", "closed_at": "2018-01-30T05:30:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a view cached using `@cached_view(60 * 60 * 24)`. Is it possible to disable this when a user is logged in?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/267", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/267/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/267/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/267/events", "html_url": "https://github.com/Suor/django-cacheops/issues/267", "id": 291152854, "node_id": "MDU6SXNzdWUyOTExNTI4NTQ=", "number": 267, "title": "Use with django-rest-framework Viewset?", "user": {"login": "sfdye", "id": 1016390, "node_id": "MDQ6VXNlcjEwMTYzOTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1016390?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfdye", "html_url": "https://github.com/sfdye", "followers_url": "https://api.github.com/users/sfdye/followers", "following_url": "https://api.github.com/users/sfdye/following{/other_user}", "gists_url": "https://api.github.com/users/sfdye/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfdye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfdye/subscriptions", "organizations_url": "https://api.github.com/users/sfdye/orgs", "repos_url": "https://api.github.com/users/sfdye/repos", "events_url": "https://api.github.com/users/sfdye/events{/privacy}", "received_events_url": "https://api.github.com/users/sfdye/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-01-24T10:16:09Z", "updated_at": "2018-02-08T12:41:33Z", "closed_at": "2018-02-08T12:41:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I add caching to a drf's `ModelViewSet`? What is the best practice to do this?\r\n\r\nWhat I want is to have caching for list and retrieve API and automatic invalidate the cache whenever the model is updated. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/265", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/265/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/265/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/265/events", "html_url": "https://github.com/Suor/django-cacheops/issues/265", "id": 290430068, "node_id": "MDU6SXNzdWUyOTA0MzAwNjg=", "number": 265, "title": "Cacheops and multiple databases", "user": {"login": "M1ha-Shvn", "id": 2315339, "node_id": "MDQ6VXNlcjIzMTUzMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2315339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/M1ha-Shvn", "html_url": "https://github.com/M1ha-Shvn", "followers_url": "https://api.github.com/users/M1ha-Shvn/followers", "following_url": "https://api.github.com/users/M1ha-Shvn/following{/other_user}", "gists_url": "https://api.github.com/users/M1ha-Shvn/gists{/gist_id}", "starred_url": "https://api.github.com/users/M1ha-Shvn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/M1ha-Shvn/subscriptions", "organizations_url": "https://api.github.com/users/M1ha-Shvn/orgs", "repos_url": "https://api.github.com/users/M1ha-Shvn/repos", "events_url": "https://api.github.com/users/M1ha-Shvn/events{/privacy}", "received_events_url": "https://api.github.com/users/M1ha-Shvn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-01-22T11:18:12Z", "updated_at": "2018-01-24T13:23:25Z", "closed_at": "2018-01-24T03:22:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi.\r\nRecently we've started developing sharding of our database. We do it on the bases of [django-sharding library](https://github.com/JBKahn/django-sharding). And catched a bug (may be feature =)) of cacheops: it ignores `using` parameter and `self._db` in `_pre_save`, example:\r\n```Python\r\n# Works fine\r\nu = User.objects.using('shard_1').get(pk=100500)\r\n# Fails\r\nu.save()\r\n# Fails too\r\nu.save(using='shard_1')\r\n```\r\nBoth save queries fail with \"users_user\" doesn't exist error.\r\n\r\nAfter long research, we found the reason in `cacheops/query.py`:\r\n```Python\r\ndef _pre_save(self, sender, instance, **kwargs):\r\n    if not (instance.pk is None or instance._state.adding or no_invalidation.active):\r\n        try:\r\n            # This query fails, as there is no using('shard_1') here and it tries getting data from 'default' database\r\n            _old_objs.__dict__[sender, instance.pk] = sender.objects.get(pk=instance.pk)\r\n        except sender.DoesNotExist:\r\n            pass\r\n```\r\n\r\nSo, my solutions are:\r\n1) Replace code with `sender.objects.using(instance._state.db).get(pk=instance.pk)`\r\n2) Can I redeclare this manager in some way and use custom _pre_save?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/264", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/264/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/264/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/264/events", "html_url": "https://github.com/Suor/django-cacheops/issues/264", "id": 288623831, "node_id": "MDU6SXNzdWUyODg2MjM4MzE=", "number": 264, "title": "cacheops fails at runtime on 4th version", "user": {"login": "thakryptex", "id": 12232787, "node_id": "MDQ6VXNlcjEyMjMyNzg3", "avatar_url": "https://avatars0.githubusercontent.com/u/12232787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thakryptex", "html_url": "https://github.com/thakryptex", "followers_url": "https://api.github.com/users/thakryptex/followers", "following_url": "https://api.github.com/users/thakryptex/following{/other_user}", "gists_url": "https://api.github.com/users/thakryptex/gists{/gist_id}", "starred_url": "https://api.github.com/users/thakryptex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thakryptex/subscriptions", "organizations_url": "https://api.github.com/users/thakryptex/orgs", "repos_url": "https://api.github.com/users/thakryptex/repos", "events_url": "https://api.github.com/users/thakryptex/events{/privacy}", "received_events_url": "https://api.github.com/users/thakryptex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 28, "created_at": "2018-01-15T15:04:28Z", "updated_at": "2018-01-30T14:44:38Z", "closed_at": "2018-01-30T12:51:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\nOn cacheops 3.2.1 there is no runtime errors.\r\nBut after I upgrade to 4th version (I tried all four subversions), I get this error at runtime:\r\n\r\n```\r\nUnhandled exception in thread started by <_pydev_bundle.pydev_monkey._NewThreadStartupWithTrace object at 0x1114cb898>\r\nTraceback (most recent call last):\r\n  File \"/Users/***/lib/python3.6/site-packages/funcy/calc.py\", line 41, in wrapper\r\n    return memory[key]\r\nKeyError: (<class 'moderator.models.moderator.Moderator'>,)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n\r\nTraceback (most recent call last):\r\n  File \"/Applications/PyCharm.app/Contents/helpers/pydev/_pydev_bundle/pydev_monkey.py\", line 589, in __call__\r\n    return self.original_func(*self.args, **self.kwargs)\r\n  ........\r\n  File \"/Users/***/lib/python3.6/site-packages/django/core/checks/urls.py\", line 13, in check_url_config\r\n    return check_resolver(resolver)\r\n  File \"/Users/***/lib/python3.6/site-packages/django/core/checks/urls.py\", line 23, in check_resolver\r\n    return check_method()\r\n  ........\r\n  File \"/Users/***/lib/python3.6/site-packages/django/urls/resolvers.py\", line 529, in urlconf_module\r\n    return import_module(self.urlconf_name)\r\n  File \"/Users/***/lib/python3.6/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  ........\r\n  File \"/Users/***/moderator/models/moderator.py\", line 10, in <module>\r\n    class Moderator(auth_models.AbstractBaseUser, auth_models.PermissionsMixin):\r\n  File \"/Users/***/lib/python3.6/site-packages/django/db/models/base.py\", line 152, in __new__\r\n    new_class.add_to_class(obj_name, obj)\r\n  File \"/Users/***/lib/python3.6/site-packages/django/db/models/base.py\", line 315, in add_to_class\r\n    value.contribute_to_class(cls, name)\r\n  File \"/Users/***/lib/python3.6/site-packages/cacheops/query.py\", line 422, in contribute_to_class\r\n    if cls.__module__ != '__fake__' and family_has_profile(cls):\r\n  File \"/Users/***/lib/python3.6/site-packages/funcy/calc.py\", line 44, in wrapper\r\n    value = memory[key] = func(*args, **kwargs)\r\n  File \"/Users/***/lib/python3.6/site-packages/cacheops/utils.py\", line 38, in family_has_profile\r\n    return any(model_profile, model_family(cls))\r\n  File \"/Users/***/lib/python3.6/site-packages/cacheops/utils.py\", line 33, in model_family\r\n    return class_tree(model._meta.concrete_model)\r\n  File \"/Users/***/lib/python3.6/site-packages/cacheops/utils.py\", line 29, in class_tree\r\n    return [cls] + lmapcat(class_tree, cls.__subclasses__())\r\n\r\nAttributeError: 'NoneType' object has no attribute '__subclasses__'\r\n```\r\n\r\nSettings are very easy:\r\n```\r\nCACHEOPS_ENABLED = True\r\nCACHEOPS_DEGRADE_ON_FAILURE = True\r\nCACHEOPS_REDIS = CACHES['default']['LOCATION']\r\nCACHEOPS_DEFAULTS = {\r\n    'timeout': 60 * 60,\r\n    'db_agnostic': False\r\n}\r\nCACHEOPS = {\r\n    '*.*': {'ops': 'all'},  # only manual caching\r\n}\r\n```\r\n\r\nHave no idea what's wrong here.\r\nAnybody knows?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/263", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/263/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/263/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/263/events", "html_url": "https://github.com/Suor/django-cacheops/issues/263", "id": 284494177, "node_id": "MDU6SXNzdWUyODQ0OTQxNzc=", "number": 263, "title": "LookupError", "user": {"login": "M1ha-Shvn", "id": 2315339, "node_id": "MDQ6VXNlcjIzMTUzMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2315339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/M1ha-Shvn", "html_url": "https://github.com/M1ha-Shvn", "followers_url": "https://api.github.com/users/M1ha-Shvn/followers", "following_url": "https://api.github.com/users/M1ha-Shvn/following{/other_user}", "gists_url": "https://api.github.com/users/M1ha-Shvn/gists{/gist_id}", "starred_url": "https://api.github.com/users/M1ha-Shvn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/M1ha-Shvn/subscriptions", "organizations_url": "https://api.github.com/users/M1ha-Shvn/orgs", "repos_url": "https://api.github.com/users/M1ha-Shvn/repos", "events_url": "https://api.github.com/users/M1ha-Shvn/events{/privacy}", "received_events_url": "https://api.github.com/users/M1ha-Shvn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-12-26T05:05:20Z", "updated_at": "2018-01-19T03:59:58Z", "closed_at": "2018-01-19T03:59:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After updating cacheops to 4.0.3 it began raising `LookupError` (there was no one before).\r\nDjango 1.10.7, Python 3.5.2 on Ubuntu.\r\nTrace: \r\n![qdkwfw_utaqgz6kyqzkmba](https://user-images.githubusercontent.com/2315339/34347325-c92cada6-ea23-11e7-89ad-be8dc840c816.png)\r\n![screenshot 1](https://user-images.githubusercontent.com/2315339/34347350-fbf83318-ea23-11e7-82b4-6241b7a95a38.png)\r\nP. s. table users_user as well as users.models => class User, relating this table exist", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/262", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/262/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/262/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/262/events", "html_url": "https://github.com/Suor/django-cacheops/issues/262", "id": 283055315, "node_id": "MDU6SXNzdWUyODMwNTUzMTU=", "number": 262, "title": "Ability to exclude models from cacheops", "user": {"login": "GeoTob", "id": 8564280, "node_id": "MDQ6VXNlcjg1NjQyODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8564280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GeoTob", "html_url": "https://github.com/GeoTob", "followers_url": "https://api.github.com/users/GeoTob/followers", "following_url": "https://api.github.com/users/GeoTob/following{/other_user}", "gists_url": "https://api.github.com/users/GeoTob/gists{/gist_id}", "starred_url": "https://api.github.com/users/GeoTob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GeoTob/subscriptions", "organizations_url": "https://api.github.com/users/GeoTob/orgs", "repos_url": "https://api.github.com/users/GeoTob/repos", "events_url": "https://api.github.com/users/GeoTob/events{/privacy}", "received_events_url": "https://api.github.com/users/GeoTob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-18T23:27:38Z", "updated_at": "2017-12-19T20:28:02Z", "closed_at": "2017-12-19T20:28:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "We've used cacheops very successfully so far, but would love an option to blacklist certain models in the configuration. Something along the lines below, or maybe using a separate `CACHEOPS_EXCLUDE` setting:\r\n\r\n```\r\nCACHEOPS = {\r\n    'module.*': {'ops': 'all', 'timeout': 60},\r\n    'module.dontcache': {'exclude': True}\r\n}\r\n```\r\n\r\nThe reason is that in some of our larger modules we have django and non-django modules in the same `models.py`, which blows up when using the `module.*` notation. Before `django-cacheops 4.0` we could simply override the `_install_cacheops` method on the manager, but that option has disappeared now.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/261", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/261/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/261/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/261/events", "html_url": "https://github.com/Suor/django-cacheops/issues/261", "id": 281877504, "node_id": "MDU6SXNzdWUyODE4Nzc1MDQ=", "number": 261, "title": "install_requires forces to install Django 2.0", "user": {"login": "PaoloC68", "id": 1483774, "node_id": "MDQ6VXNlcjE0ODM3NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1483774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PaoloC68", "html_url": "https://github.com/PaoloC68", "followers_url": "https://api.github.com/users/PaoloC68/followers", "following_url": "https://api.github.com/users/PaoloC68/following{/other_user}", "gists_url": "https://api.github.com/users/PaoloC68/gists{/gist_id}", "starred_url": "https://api.github.com/users/PaoloC68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PaoloC68/subscriptions", "organizations_url": "https://api.github.com/users/PaoloC68/orgs", "repos_url": "https://api.github.com/users/PaoloC68/repos", "events_url": "https://api.github.com/users/PaoloC68/events{/privacy}", "received_events_url": "https://api.github.com/users/PaoloC68/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-13T20:01:36Z", "updated_at": "2017-12-14T00:22:22Z", "closed_at": "2017-12-14T00:22:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having this in the setup requirements forces pip to install Django 2.0\r\n \r\n       install_requires=[\r\n        'django>=1.8',\r\n        'redis>=2.9.1',\r\n        'funcy>=1.8,<2.0',\r\n        'six>=1.4.0',\r\n    ],\r\nFor this reason even bigger Django projects exclude `Django` from the `install_requires`, see Django REST framework for example [here](https://github.com/encode/django-rest-framework/blob/master/setup.py#L64)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/260", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/260/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/260/events", "html_url": "https://github.com/Suor/django-cacheops/issues/260", "id": 279699327, "node_id": "MDU6SXNzdWUyNzk2OTkzMjc=", "number": 260, "title": "Hashseed and cache miss for same queryset", "user": {"login": "ali-faizan", "id": 7340242, "node_id": "MDQ6VXNlcjczNDAyNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/7340242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ali-faizan", "html_url": "https://github.com/ali-faizan", "followers_url": "https://api.github.com/users/ali-faizan/followers", "following_url": "https://api.github.com/users/ali-faizan/following{/other_user}", "gists_url": "https://api.github.com/users/ali-faizan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ali-faizan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ali-faizan/subscriptions", "organizations_url": "https://api.github.com/users/ali-faizan/orgs", "repos_url": "https://api.github.com/users/ali-faizan/repos", "events_url": "https://api.github.com/users/ali-faizan/events{/privacy}", "received_events_url": "https://api.github.com/users/ali-faizan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-06T10:23:29Z", "updated_at": "2017-12-12T05:30:20Z", "closed_at": "2017-12-12T05:30:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am having lots of cache misses. After debugging i saw that sql queries generated by same queryset have different order in where clause. This issue has been reported on Django:\r\n[Same queryset result in two different queries on ORM](https://code.djangoproject.com/ticket/28297)\r\n\r\nSetting PYTHONHASHSEED=2 does seem to resolve issue as mentioned in the ticket but i can't figure out how these 2 are related. Neither I know when the Django issue will get fixed as its been open for 5 months. Is there anyway we can fix this for Cacheops? As of now only thing i can think of is move to python 3.6 where dictionary order remain preserved.\r\n\r\nStack:\r\nPython  3.5.4\r\nDjango 1.8.18\r\nCacheops 4.0.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/259", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/259/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/259/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/259/events", "html_url": "https://github.com/Suor/django-cacheops/issues/259", "id": 277313492, "node_id": "MDU6SXNzdWUyNzczMTM0OTI=", "number": 259, "title": "cacheops not working with django-querysetsequence", "user": {"login": "vkosh", "id": 28398, "node_id": "MDQ6VXNlcjI4Mzk4", "avatar_url": "https://avatars1.githubusercontent.com/u/28398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vkosh", "html_url": "https://github.com/vkosh", "followers_url": "https://api.github.com/users/vkosh/followers", "following_url": "https://api.github.com/users/vkosh/following{/other_user}", "gists_url": "https://api.github.com/users/vkosh/gists{/gist_id}", "starred_url": "https://api.github.com/users/vkosh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vkosh/subscriptions", "organizations_url": "https://api.github.com/users/vkosh/orgs", "repos_url": "https://api.github.com/users/vkosh/repos", "events_url": "https://api.github.com/users/vkosh/events{/privacy}", "received_events_url": "https://api.github.com/users/vkosh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-11-28T09:29:33Z", "updated_at": "2017-11-30T09:56:43Z", "closed_at": "2017-11-28T14:23:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "The problem described [here](https://github.com/percipient/django-querysetsequence/issues/34).\r\nIs there a way or workaround to disable caching for certain classes inherited from QuerySet, like QuerySetSequence? Could you suggest something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/257", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/257/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/257/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/257/events", "html_url": "https://github.com/Suor/django-cacheops/issues/257", "id": 272993585, "node_id": "MDU6SXNzdWUyNzI5OTM1ODU=", "number": 257, "title": "4.0.2 not on pypi", "user": {"login": "aarcro", "id": 279725, "node_id": "MDQ6VXNlcjI3OTcyNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/279725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aarcro", "html_url": "https://github.com/aarcro", "followers_url": "https://api.github.com/users/aarcro/followers", "following_url": "https://api.github.com/users/aarcro/following{/other_user}", "gists_url": "https://api.github.com/users/aarcro/gists{/gist_id}", "starred_url": "https://api.github.com/users/aarcro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aarcro/subscriptions", "organizations_url": "https://api.github.com/users/aarcro/orgs", "repos_url": "https://api.github.com/users/aarcro/repos", "events_url": "https://api.github.com/users/aarcro/events{/privacy}", "received_events_url": "https://api.github.com/users/aarcro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-10T16:47:30Z", "updated_at": "2017-11-14T04:09:23Z", "closed_at": "2017-11-14T04:09:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Looks like 4.0.2 was just completed, but I don't see it on pypi to pip install.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/256", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/256/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/256/events", "html_url": "https://github.com/Suor/django-cacheops/issues/256", "id": 270856896, "node_id": "MDU6SXNzdWUyNzA4NTY4OTY=", "number": 256, "title": "failed to lookup table_to_model(django_migrations)", "user": {"login": "PatDuJour", "id": 4603110, "node_id": "MDQ6VXNlcjQ2MDMxMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4603110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PatDuJour", "html_url": "https://github.com/PatDuJour", "followers_url": "https://api.github.com/users/PatDuJour/followers", "following_url": "https://api.github.com/users/PatDuJour/following{/other_user}", "gists_url": "https://api.github.com/users/PatDuJour/gists{/gist_id}", "starred_url": "https://api.github.com/users/PatDuJour/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PatDuJour/subscriptions", "organizations_url": "https://api.github.com/users/PatDuJour/orgs", "repos_url": "https://api.github.com/users/PatDuJour/repos", "events_url": "https://api.github.com/users/PatDuJour/events{/privacy}", "received_events_url": "https://api.github.com/users/PatDuJour/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-03T01:29:56Z", "updated_at": "2017-11-10T19:25:53Z", "closed_at": "2017-11-06T07:54:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've recently squashed all of my migration files and regenerate them to 0001s.\r\nAnd then cacheops stopped working. Here's a full trace of the error.\r\nI populated the django_migrations table with `./manage.py migrate --fake`, and\r\nflushed all my cache in my redis,\r\nand I still have the same error. \r\n```\r\nTraceback (most recent call last):\r\n  File \"/{path}/env/lib/python2.7/site-packages/django/utils/autoreload.py\", line 228, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/{path}/env/lib/python2.7/site-packages/django/core/management/commands/runserver.py\", line 128, in inner_run\r\n    self.check_migrations()\r\n  File \"/{path}/env/lib/python2.7/site-packages/django/core/management/base.py\", line 422, in check_migrations\r\n    executor = MigrationExecutor(connections[DEFAULT_DB_ALIAS])\r\n  File \"/{path}/env/lib/python2.7/site-packages/django/db/migrations/executor.py\", line 20, in __init__\r\n    self.loader = MigrationLoader(self.connection)\r\n  File \"/{path}/env/lib/python2.7/site-packages/django/db/migrations/loader.py\", line 52, in __init__\r\n    self.build_graph()\r\n  File \"/{path}/env/lib/python2.7/site-packages/django/db/migrations/loader.py\", line 209, in build_graph\r\n    self.applied_migrations = recorder.applied_migrations()\r\n  File \"/{path}/env/lib/python2.7/site-packages/django/db/migrations/recorder.py\", line 66, in applied_migrations\r\n    return set(tuple(x) for x in self.migration_qs.values_list(\"app\", \"name\"))\r\n  File \"/{path}/env/lib/python2.7/site-packages/django/db/models/query.py\", line 250, in __iter__\r\n    self._fetch_all()\r\n  File \"/{path}/env/lib/python2.7/site-packages/cacheops/query.py\", line 291, in _fetch_all\r\n    self._cache_results(cache_key, self._result_cache)\r\n  File \"/{path}/env/lib/python2.7/site-packages/cacheops/query.py\", line 180, in _cache_results\r\n    self._cond_dnfs, self._cacheprofile['timeout'], dbs=[self.db])\r\n  File \"/{path}/env/lib/python2.7/site-packages/funcy/objects.py\", line 28, in __get__\r\n    res = instance.__dict__[self.fget.__name__] = self.fget(instance)\r\n  File \"/{path}/env/lib/python2.7/site-packages/cacheops/query.py\", line 176, in _cond_dnfs\r\n    return dnfs(self)\r\n  File \"/{path}/env/lib/python2.7/site-packages/cacheops/tree.py\", line 141, in dnfs\r\n    return query_dnf(qs.query)\r\n  File \"/{path}/env/lib/python2.7/site-packages/cacheops/tree.py\", line 132, in query_dnf\r\n    aliases = {alias for alias, (join, cnt) in izip_dicts(query.alias_map, query.alias_refcount)\r\n  File \"/{path}/env/lib/python2.7/site-packages/cacheops/tree.py\", line 133, in <setcomp>\r\n    if cnt and family_has_profile(table_to_model(join.table_name))} \\\r\n  File \"/{path}/env/lib/python2.7/site-packages/funcy/calc.py\", line 90, in wrapper\r\n    raise LookupError(\"Failed to look up %s(%s)\" % (func.__name__, arg))\r\nLookupError: Failed to look up table_to_model(django_migrations)\r\n```\r\n\r\nIn further debugging, it fails to perform this function: `table_to_model(join.table_name)`, but I'm wondering if you should we looking up this table, since `django_migrations` table is created by django, not from the application.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/255", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/255/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/255/events", "html_url": "https://github.com/Suor/django-cacheops/issues/255", "id": 270374418, "node_id": "MDU6SXNzdWUyNzAzNzQ0MTg=", "number": 255, "title": "Attempts to cache huge querysets hits redis cap on string lengths", "user": {"login": "dchaplinsky", "id": 131186, "node_id": "MDQ6VXNlcjEzMTE4Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/131186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dchaplinsky", "html_url": "https://github.com/dchaplinsky", "followers_url": "https://api.github.com/users/dchaplinsky/followers", "following_url": "https://api.github.com/users/dchaplinsky/following{/other_user}", "gists_url": "https://api.github.com/users/dchaplinsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/dchaplinsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dchaplinsky/subscriptions", "organizations_url": "https://api.github.com/users/dchaplinsky/orgs", "repos_url": "https://api.github.com/users/dchaplinsky/repos", "events_url": "https://api.github.com/users/dchaplinsky/events{/privacy}", "received_events_url": "https://api.github.com/users/dchaplinsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-01T16:50:38Z", "updated_at": "2017-11-02T06:27:33Z", "closed_at": "2017-11-02T06:27:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've added `django_cacheops` to the project and set it to cache everything. It works just fine when django is serving content for website, but for management commands there is a problem.\r\n\r\nOver night I need to perform some housekeeping and get the big chunks of data from DB (Caching them is not the best idea, I agree).\r\n\r\nHere goes the problem: Redis has strict limit on the size of the value string, it's 512mb. You cannot raise it. If you accidentally hit it (just like I did) you will receive non-descriptive error like:\r\n`redis.exceptions.ConnectionError: Error 32 while writing to socket. Broken pipe.`\r\nor \r\n`redis.exceptions.ConnectionError: Error 104 while writing to socket. Connection reset by peer.`\r\n\r\nAnd that's it. Nothing in redis server logs (with default logging level).\r\n\r\nOf course that problem can be bypassed with `CACHEOPS_DEGRADE_ON_FAILURE=True` (bad idea, but quick fix), nocache for big operations or better setup of caching strategy. \r\n\r\nBut it would be good if django-cacheops can also throw a proper exception or degrade without hitting the redis, if the payload is bigger than 512mb.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/254", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/254/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/254/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/254/events", "html_url": "https://github.com/Suor/django-cacheops/issues/254", "id": 266017077, "node_id": "MDU6SXNzdWUyNjYwMTcwNzc=", "number": 254, "title": "Does this handle annotated queries?", "user": {"login": "shaumux", "id": 2377817, "node_id": "MDQ6VXNlcjIzNzc4MTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2377817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shaumux", "html_url": "https://github.com/shaumux", "followers_url": "https://api.github.com/users/shaumux/followers", "following_url": "https://api.github.com/users/shaumux/following{/other_user}", "gists_url": "https://api.github.com/users/shaumux/gists{/gist_id}", "starred_url": "https://api.github.com/users/shaumux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shaumux/subscriptions", "organizations_url": "https://api.github.com/users/shaumux/orgs", "repos_url": "https://api.github.com/users/shaumux/repos", "events_url": "https://api.github.com/users/shaumux/events{/privacy}", "received_events_url": "https://api.github.com/users/shaumux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-17T07:16:40Z", "updated_at": "2017-10-17T10:09:20Z", "closed_at": "2017-10-17T10:09:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using JSONField on Postgres using the field from django.contrib.postgres and querying on a lot of keys using annotations and KeyTransforms and KeyTextTransforms.\r\nDoes this cacheops handle caching these queries and invalidate caches on changes to the table?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/253", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/253/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/253/events", "html_url": "https://github.com/Suor/django-cacheops/issues/253", "id": 265062843, "node_id": "MDU6SXNzdWUyNjUwNjI4NDM=", "number": 253, "title": "easy-thumbnails ThumbnailerField doesn't survive caching", "user": {"login": "aarcro", "id": 279725, "node_id": "MDQ6VXNlcjI3OTcyNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/279725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aarcro", "html_url": "https://github.com/aarcro", "followers_url": "https://api.github.com/users/aarcro/followers", "following_url": "https://api.github.com/users/aarcro/following{/other_user}", "gists_url": "https://api.github.com/users/aarcro/gists{/gist_id}", "starred_url": "https://api.github.com/users/aarcro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aarcro/subscriptions", "organizations_url": "https://api.github.com/users/aarcro/orgs", "repos_url": "https://api.github.com/users/aarcro/repos", "events_url": "https://api.github.com/users/aarcro/events{/privacy}", "received_events_url": "https://api.github.com/users/aarcro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-12T19:46:18Z", "updated_at": "2017-10-21T03:09:38Z", "closed_at": "2017-10-13T04:39:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using ThumbnailerField from https://github.com/SmileyChris/easy-thumbnails on my models. If I use .cache() on a queryset of the model, then I can not use the `get_item` call on the value to lookup the thumbnailed URL.\r\n\r\nIt seems like the constructors are not getting called correctly, because all the values that should be added to the ThumbnailerFieldFile object are missing.\r\n\r\nI know this isn't much detail. I'll build up a simple POC if this doesn't spark some obvious solution.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/252", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/252/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/252/events", "html_url": "https://github.com/Suor/django-cacheops/issues/252", "id": 263101994, "node_id": "MDU6SXNzdWUyNjMxMDE5OTQ=", "number": 252, "title": "4.0.1 doesn't work with django-treebeard", "user": {"login": "laevilgenius", "id": 13280256, "node_id": "MDQ6VXNlcjEzMjgwMjU2", "avatar_url": "https://avatars1.githubusercontent.com/u/13280256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laevilgenius", "html_url": "https://github.com/laevilgenius", "followers_url": "https://api.github.com/users/laevilgenius/followers", "following_url": "https://api.github.com/users/laevilgenius/following{/other_user}", "gists_url": "https://api.github.com/users/laevilgenius/gists{/gist_id}", "starred_url": "https://api.github.com/users/laevilgenius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laevilgenius/subscriptions", "organizations_url": "https://api.github.com/users/laevilgenius/orgs", "repos_url": "https://api.github.com/users/laevilgenius/repos", "events_url": "https://api.github.com/users/laevilgenius/events{/privacy}", "received_events_url": "https://api.github.com/users/laevilgenius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-05T12:10:41Z", "updated_at": "2017-10-06T10:17:18Z", "closed_at": "2017-10-06T06:53:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since 833e8e008d4be66db585b4936344b6b1420fa0f9 _runserver_ fails with:\r\n```\r\nFile \"...\\site-packages\\treebeard\\admin.py\", line 20, in <module>\r\n  from treebeard.al_tree import AL_Node\r\nFile \"...\\site-packages\\treebeard\\al_tree.py\", line 45, in <module>\r\n  class AL_Node(Node):\r\nFile \"...\\site-packages\\django\\db\\models\\base.py\", line 152, in __new__\r\n  new_class.add_to_class(obj_name, obj)\r\nFile \"...\\site-packages\\django\\db\\models\\base.py\", line 315, in add_to_class\r\n  value.contribute_to_class(cls, name)\r\nFile \"...\\site-packages\\cacheops\\query.py\", line 422, in contribute_to_class\r\n  if cls.__module__ != '__fake__' and family_has_profile(cls):\r\nFile \"...\\site-packages\\funcy\\calc.py\", line 44, in wrapper\r\n  value = memory[key] = func(*args, **kwargs)\r\nFile \"...\\site-packages\\cacheops\\utils.py\", line 39, in family_has_profile\r\n  return any(model_profile, model_family(cls))\r\nFile \"...\\site-packages\\cacheops\\utils.py\", line 34, in model_family\r\n  return class_tree(model._meta.concrete_model)\r\nFile \"...\\site-packages\\cacheops\\utils.py\", line 30, in class_tree\r\n  return [cls] + mapcat(class_tree, cls.__subclasses__())\r\nAttributeError: 'NoneType' object has no attribute '__subclasses__'\r\n```\r\nIt seems that _AL_Node_ abstract model has _concrete_model_ set to None which causes the problem.\r\nOddly enough, if _AL_Node_ custom manager is removed then it seems to be working.\r\n\r\nPython 3.6 / Django 2.0a1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/251", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/251/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/251/events", "html_url": "https://github.com/Suor/django-cacheops/issues/251", "id": 262708387, "node_id": "MDU6SXNzdWUyNjI3MDgzODc=", "number": 251, "title": "Using select_for_update in multiple threads stucks", "user": {"login": "M1ha-Shvn", "id": 2315339, "node_id": "MDQ6VXNlcjIzMTUzMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2315339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/M1ha-Shvn", "html_url": "https://github.com/M1ha-Shvn", "followers_url": "https://api.github.com/users/M1ha-Shvn/followers", "following_url": "https://api.github.com/users/M1ha-Shvn/following{/other_user}", "gists_url": "https://api.github.com/users/M1ha-Shvn/gists{/gist_id}", "starred_url": "https://api.github.com/users/M1ha-Shvn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/M1ha-Shvn/subscriptions", "organizations_url": "https://api.github.com/users/M1ha-Shvn/orgs", "repos_url": "https://api.github.com/users/M1ha-Shvn/repos", "events_url": "https://api.github.com/users/M1ha-Shvn/events{/privacy}", "received_events_url": "https://api.github.com/users/M1ha-Shvn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-04T08:41:01Z", "updated_at": "2017-10-05T06:30:52Z", "closed_at": "2017-10-05T06:30:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I use django 1.10.7, PostgreSQL 9.4, psycopg 2.7.3.1, cacheops 4.0 and 3.2.1 on local and production relatively.\r\nThe situation:\r\n\r\nOne of celery tasks can be executed simmultiniously by multiple workers.\r\nIf tasks are executed one by one - everything goes fine.\r\nWhen 2 workers start on the same Conversation object, second thread is waiting on select_for_update (which is well), and the first is stuck in save() operation (in db i see [\"idle in transaction\" status](https://www.postgresql.org/docs/9.2/static/monitoring-stats.html), which means that query was executed, returned to backend, but transaction is not commited yet)\r\n\r\nHere is the code:\r\n```\r\n with transaction.atomic(using=settings.DB_SHARD):\r\n        # if I remove select_for_update here, everything works fine\r\n        # Second thread will wait here with \"SELECT ... FOR UPDATE\" query in database with \"active\" status\r\n        conv = Conversation.objects.select_for_update().get(pk=116774)\r\n\r\n        # Some code, changing conv object without sending\r\n        conv.user_unread_count = 0\r\n\r\n        # First thread is stuck here\r\n        # I see \"UPDATE ...\" query in database with \"idle in transaction\" status\r\n        conv.save(update_fields=['user_unread_count'])\r\n\r\n        # This doesn't work as well\r\n        # conv.save(update_fields=['user_unread_count'], force_update=True)\r\n```\r\n\r\nI've ran this code with django_debug toolbar and got stange select, done by save() method:\r\n```\r\nSELECT \u2022\u2022\u2022 FROM \"messages_conversation\" WHERE \"messages_conversation\".\"id\" = 116774 FOR UPDATE\r\n-- ??? What is this select here for\r\nSELECT \u2022\u2022\u2022 FROM \"messages_conversation\" WHERE \"messages_conversation\".\"id\" = 116774 \r\n\r\nUPDATE \"messages_conversation\" SET \"user_unread_count\" = 0 WHERE \"messages_conversation\".\"id\" = 116774\r\n```\r\n\r\nI solved an issue in my project by disabling cache:\r\n```\r\n    with transaction.atomic(using=settings.DB_SHARD):\r\n        # After I replaced save() with update() bug became floating, sometimes it was stuck in \"idle in transaction\" on this query. After adding nocache() the problem has been solved.\r\n        conv = Conversation.objects.select_for_update().nocache().get(pk=116774)\r\n\r\n        # Some code here\r\n  \r\n        Conversation.objects.filter(id=conv.id).update(user_unread_count=0)\r\n\r\n        # This doesn't work too!!!\r\n        # Conversation.objects.filter(id=conv.id).invalidated_update(user_unread_count=0)\r\n```\r\nHere is the screen, that shows save() stack trace:\r\n![screen](https://user-images.githubusercontent.com/2315339/31166866-9f9598a0-a909-11e7-9c6c-13adb4e3c36c.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/250", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/250/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/250/events", "html_url": "https://github.com/Suor/django-cacheops/issues/250", "id": 260390340, "node_id": "MDU6SXNzdWUyNjAzOTAzNDA=", "number": 250, "title": "Performance degregation on QuerySet.delete() with cacheops enabled", "user": {"login": "pembo13", "id": 5777117, "node_id": "MDQ6VXNlcjU3NzcxMTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5777117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pembo13", "html_url": "https://github.com/pembo13", "followers_url": "https://api.github.com/users/pembo13/followers", "following_url": "https://api.github.com/users/pembo13/following{/other_user}", "gists_url": "https://api.github.com/users/pembo13/gists{/gist_id}", "starred_url": "https://api.github.com/users/pembo13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pembo13/subscriptions", "organizations_url": "https://api.github.com/users/pembo13/orgs", "repos_url": "https://api.github.com/users/pembo13/repos", "events_url": "https://api.github.com/users/pembo13/events{/privacy}", "received_events_url": "https://api.github.com/users/pembo13/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-09-25T19:35:01Z", "updated_at": "2017-10-03T07:44:27Z", "closed_at": "2017-09-29T06:14:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having `cacheops` enabled causes Django to always return `False` on calls to internal method `can_fast_delete`, resulting in all deletes being slow (and memory intensive).\r\n\r\n1. `'*.*': {},` results in hooks to the `post_delete` signal on all models\r\n2. `install_cacheops()` results in system-wide hooks to `m2m_changed`\r\n\r\nIf either 1 or 2 is true, `can_fast_delete` returns `False`. In my case, the end result was a jump from 64MB of RES memory to over 200MB, and eventual killing of the process by the operating system (GNU Linux) in an management command. \r\n\r\nMy solution was to conditionally remove 'cacheops' from `INSTALLED_APPS` by way of an ENV variable and some `settings.py` logic. This allows a *fast-path* delete to occur.\r\n\r\nIf there is no way to avoid the performance degradation, this should at least be documented clearly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/249", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/249/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/249/events", "html_url": "https://github.com/Suor/django-cacheops/issues/249", "id": 247590826, "node_id": "MDU6SXNzdWUyNDc1OTA4MjY=", "number": 249, "title": "Trouble with caching working in tests", "user": {"login": "mattjmorrison", "id": 150277, "node_id": "MDQ6VXNlcjE1MDI3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/150277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjmorrison", "html_url": "https://github.com/mattjmorrison", "followers_url": "https://api.github.com/users/mattjmorrison/followers", "following_url": "https://api.github.com/users/mattjmorrison/following{/other_user}", "gists_url": "https://api.github.com/users/mattjmorrison/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjmorrison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjmorrison/subscriptions", "organizations_url": "https://api.github.com/users/mattjmorrison/orgs", "repos_url": "https://api.github.com/users/mattjmorrison/repos", "events_url": "https://api.github.com/users/mattjmorrison/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjmorrison/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-03T04:43:57Z", "updated_at": "2017-08-03T13:49:26Z", "closed_at": "2017-08-03T13:49:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there something that I'm missing or does caching not work for django tests for some reason? \r\n\r\nHere is an example: https://github.com/mattjmorrison/django_cacheops_example\r\n\r\nI have one simple test that does the following\r\n```\r\n        MyThing.objects.create(description='x')\r\n        with self.assertNumQueries(1):\r\n            list(MyThing.objects.all())\r\n        with self.assertNumQueries(0):\r\n            list(MyThing.objects.all())\r\n```\r\n\r\nRunning the tests in that repo gives\r\n```\r\n\u2514\u2500\u2500\u27a4 ./manage.py test\r\nCreating test database for alias 'default'...\r\nSystem check identified no issues (0 silenced).\r\nF\r\n======================================================================\r\nFAIL: test_x (demo.tests.MyTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/imtapps/Projects/django_cacheops_example/demo/tests.py\", line 12, in test_x\r\n    list(MyThing.objects.all())\r\n  File \"/Users/imtapps/.virtualenvs/django-cacheops-example/lib/python3.4/site-packages/django/test/testcases.py\", line 88, in __exit__\r\n    query['sql'] for query in self.captured_queries\r\nAssertionError: 1 != 0 : 1 queries executed, 0 expected\r\nCaptured queries were:\r\nSELECT \"demo_mything\".\"id\", \"demo_mything\".\"description\" FROM \"demo_mything\"\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.003s\r\n\r\nFAILED (failures=1)\r\nDestroying test database for alias 'default'...\r\n```\r\n\r\nHowever, doing the same thing in the repl seems to work\r\n```\r\n\u2514\u2500\u2500\u27a4 ./manage.py debugsqlshell\r\nPython 3.4.6 (default, Apr 17 2017, 21:41:30)\r\n[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.38)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n(InteractiveConsole)\r\n>>> from demo.models import MyThing\r\n>>> list(MyThing.objects.all())\r\nSELECT \"demo_mything\".\"id\",\r\n       \"demo_mything\".\"description\"\r\nFROM \"demo_mything\" [0.41ms]\r\n[<MyThing: MyThing object>]\r\n>>> list(MyThing.objects.all())\r\n[<MyThing: MyThing object>]\r\n>>>\r\n```\r\n\r\nI'm using django-debug-toolbar for the `debugsqlshell` command. I believe I'm using the latest versions of everything. My configuration in my django settings file is as follows:\r\n```\r\nCACHEOPS_REDIS = \"redis://localhost:6379/1\"\r\nCACHEOPS_DEGRADE_ON_FAILURE = False\r\nCACHEOPS = {\r\n    'demo.*': {'timeout': 60*60, 'ops': 'all'},\r\n}\r\n```\r\nI'm running on macOS (10.12) and I installed redis via homebrew.\r\n\r\nI *think* that is all of the pertinent information - let me know if I'm leaving anything out.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/248", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/248/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/248/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/248/events", "html_url": "https://github.com/Suor/django-cacheops/issues/248", "id": 246107408, "node_id": "MDU6SXNzdWUyNDYxMDc0MDg=", "number": 248, "title": "after Model.save() the get is getting the data back from DB", "user": {"login": "T2BDeepika", "id": 22429838, "node_id": "MDQ6VXNlcjIyNDI5ODM4", "avatar_url": "https://avatars1.githubusercontent.com/u/22429838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/T2BDeepika", "html_url": "https://github.com/T2BDeepika", "followers_url": "https://api.github.com/users/T2BDeepika/followers", "following_url": "https://api.github.com/users/T2BDeepika/following{/other_user}", "gists_url": "https://api.github.com/users/T2BDeepika/gists{/gist_id}", "starred_url": "https://api.github.com/users/T2BDeepika/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/T2BDeepika/subscriptions", "organizations_url": "https://api.github.com/users/T2BDeepika/orgs", "repos_url": "https://api.github.com/users/T2BDeepika/repos", "events_url": "https://api.github.com/users/T2BDeepika/events{/privacy}", "received_events_url": "https://api.github.com/users/T2BDeepika/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-07-27T17:05:42Z", "updated_at": "2017-07-29T05:49:59Z", "closed_at": "2017-07-27T18:38:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "after Model.save() the get() is getting the data back from cache and not DB. hence the changes are not being reflected. Any thoughts in this? Thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/247", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/247/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/247/events", "html_url": "https://github.com/Suor/django-cacheops/issues/247", "id": 238435166, "node_id": "MDU6SXNzdWUyMzg0MzUxNjY=", "number": 247, "title": "without redis?", "user": {"login": "hyusetiawan", "id": 1062920, "node_id": "MDQ6VXNlcjEwNjI5MjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1062920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hyusetiawan", "html_url": "https://github.com/hyusetiawan", "followers_url": "https://api.github.com/users/hyusetiawan/followers", "following_url": "https://api.github.com/users/hyusetiawan/following{/other_user}", "gists_url": "https://api.github.com/users/hyusetiawan/gists{/gist_id}", "starred_url": "https://api.github.com/users/hyusetiawan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hyusetiawan/subscriptions", "organizations_url": "https://api.github.com/users/hyusetiawan/orgs", "repos_url": "https://api.github.com/users/hyusetiawan/repos", "events_url": "https://api.github.com/users/hyusetiawan/events{/privacy}", "received_events_url": "https://api.github.com/users/hyusetiawan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-26T03:45:05Z", "updated_at": "2017-06-26T04:38:04Z", "closed_at": "2017-06-26T04:37:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to use this library, however, my setup does not have redis :( \r\n\r\nIs it possible to set django-cacheops to cache automatically (not the simple time invalidation) using local memory instead of redis? I can even work with file based as well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/246", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/246/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/246/events", "html_url": "https://github.com/Suor/django-cacheops/issues/246", "id": 237683488, "node_id": "MDU6SXNzdWUyMzc2ODM0ODg=", "number": 246, "title": "Skip setup step if `_install_cacheops` not present", "user": {"login": "GeoTob", "id": 8564280, "node_id": "MDQ6VXNlcjg1NjQyODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8564280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GeoTob", "html_url": "https://github.com/GeoTob", "followers_url": "https://api.github.com/users/GeoTob/followers", "following_url": "https://api.github.com/users/GeoTob/following{/other_user}", "gists_url": "https://api.github.com/users/GeoTob/gists{/gist_id}", "starred_url": "https://api.github.com/users/GeoTob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GeoTob/subscriptions", "organizations_url": "https://api.github.com/users/GeoTob/orgs", "repos_url": "https://api.github.com/users/GeoTob/repos", "events_url": "https://api.github.com/users/GeoTob/events{/privacy}", "received_events_url": "https://api.github.com/users/GeoTob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-21T22:33:26Z", "updated_at": "2017-06-22T04:46:01Z", "closed_at": "2017-06-22T04:46:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found that `django-cacheops` refuses to work with certain DB backends that aren't using Django's `QuerySet` or `Manager` classes.\r\n\r\nThe problem is that `cacheops` attempts setup for all models registered with Django (here: https://github.com/Suor/django-cacheops/blob/master/cacheops/query.py#L548) . If it can't install (because `_install_cacheops` isn't set), the whole processes crashes.\r\n\r\nI wonder if you could wrap that part in a `try..except` like so:\r\n\r\n```python\r\nfor model in apps.get_models(include_auto_created=True):\r\n    try:\r\n        model._default_manager._install_cacheops(model)\r\n    except AttributeError:\r\n        logger.warning('Could not install cacheops for {}'.format(model))\r\n        pass\r\n```\r\n\r\n\r\n\r\n\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/245", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/245/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/245/events", "html_url": "https://github.com/Suor/django-cacheops/issues/245", "id": 237426064, "node_id": "MDU6SXNzdWUyMzc0MjYwNjQ=", "number": 245, "title": "Query regarding atomic transaction.", "user": {"login": "sp1rs", "id": 2691397, "node_id": "MDQ6VXNlcjI2OTEzOTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2691397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sp1rs", "html_url": "https://github.com/sp1rs", "followers_url": "https://api.github.com/users/sp1rs/followers", "following_url": "https://api.github.com/users/sp1rs/following{/other_user}", "gists_url": "https://api.github.com/users/sp1rs/gists{/gist_id}", "starred_url": "https://api.github.com/users/sp1rs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sp1rs/subscriptions", "organizations_url": "https://api.github.com/users/sp1rs/orgs", "repos_url": "https://api.github.com/users/sp1rs/repos", "events_url": "https://api.github.com/users/sp1rs/events{/privacy}", "received_events_url": "https://api.github.com/users/sp1rs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-21T06:18:50Z", "updated_at": "2017-06-21T16:54:54Z", "closed_at": "2017-06-21T16:54:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Let say 2 things are running parallelly, first to get the object which is cached and second the object which is saving that object (That is invalidating the cache). So is it possible that before the get operation, the cache get invalidated and we get the wrong or nothing from the 1st operation?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/244", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/244/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/244/events", "html_url": "https://github.com/Suor/django-cacheops/issues/244", "id": 237282716, "node_id": "MDU6SXNzdWUyMzcyODI3MTY=", "number": 244, "title": "invalidated_update does not invalidate correctly", "user": {"login": "MisterNando", "id": 1670990, "node_id": "MDQ6VXNlcjE2NzA5OTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1670990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MisterNando", "html_url": "https://github.com/MisterNando", "followers_url": "https://api.github.com/users/MisterNando/followers", "following_url": "https://api.github.com/users/MisterNando/following{/other_user}", "gists_url": "https://api.github.com/users/MisterNando/gists{/gist_id}", "starred_url": "https://api.github.com/users/MisterNando/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MisterNando/subscriptions", "organizations_url": "https://api.github.com/users/MisterNando/orgs", "repos_url": "https://api.github.com/users/MisterNando/repos", "events_url": "https://api.github.com/users/MisterNando/events{/privacy}", "received_events_url": "https://api.github.com/users/MisterNando/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-20T17:11:48Z", "updated_at": "2017-06-21T16:25:55Z", "closed_at": "2017-06-21T02:32:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Assumption**: the intent of invalidated_update is to:\r\n\r\n1. Identify the set of objects to update.\r\n2. Perform the update.\r\n3. Call invalidate on each object in its original and post-updated state.\r\n\r\nThis is accomplished by maintaining a list of objects to update.  The list is populated initially with the contents of the query set (pre-update).  Then the update occurs.  Then the list is extended with the contents of the query set post-update.\r\n\r\nThe problem is that the contents of the query set post-update (i.e. the set of objects it returns) are not necessarily the same as the contents pre-update.  For example, the update operation might have altered the objects such that they no longer meet the criteria of the query set.  Thus, we have lost our handle on the original set of objects.  We still have them in the list we created before the update, but this is just the pre-update state - we're not invalidating the objects post-update.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/243", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/243/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/243/events", "html_url": "https://github.com/Suor/django-cacheops/issues/243", "id": 232556281, "node_id": "MDU6SXNzdWUyMzI1NTYyODE=", "number": 243, "title": "cached_as with kwargs?", "user": {"login": "littlehome-eugene", "id": 24217396, "node_id": "MDQ6VXNlcjI0MjE3Mzk2", "avatar_url": "https://avatars3.githubusercontent.com/u/24217396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/littlehome-eugene", "html_url": "https://github.com/littlehome-eugene", "followers_url": "https://api.github.com/users/littlehome-eugene/followers", "following_url": "https://api.github.com/users/littlehome-eugene/following{/other_user}", "gists_url": "https://api.github.com/users/littlehome-eugene/gists{/gist_id}", "starred_url": "https://api.github.com/users/littlehome-eugene/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/littlehome-eugene/subscriptions", "organizations_url": "https://api.github.com/users/littlehome-eugene/orgs", "repos_url": "https://api.github.com/users/littlehome-eugene/repos", "events_url": "https://api.github.com/users/littlehome-eugene/events{/privacy}", "received_events_url": "https://api.github.com/users/littlehome-eugene/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-31T12:57:36Z", "updated_at": "2017-06-04T02:14:18Z", "closed_at": "2017-06-04T02:14:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to cache function result per different kwargs.. \r\n\r\nI tried searching github issues since it seems to me very plausible use cases.\r\n\r\nHow can we cache function results per different kwargs?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/242", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/242/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/242/events", "html_url": "https://github.com/Suor/django-cacheops/issues/242", "id": 228461131, "node_id": "MDU6SXNzdWUyMjg0NjExMzE=", "number": 242, "title": "Command \"invalidate all\" fails after upgrading to 3.2", "user": {"login": "mjnaderi", "id": 2115303, "node_id": "MDQ6VXNlcjIxMTUzMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2115303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjnaderi", "html_url": "https://github.com/mjnaderi", "followers_url": "https://api.github.com/users/mjnaderi/followers", "following_url": "https://api.github.com/users/mjnaderi/following{/other_user}", "gists_url": "https://api.github.com/users/mjnaderi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjnaderi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjnaderi/subscriptions", "organizations_url": "https://api.github.com/users/mjnaderi/orgs", "repos_url": "https://api.github.com/users/mjnaderi/repos", "events_url": "https://api.github.com/users/mjnaderi/events{/privacy}", "received_events_url": "https://api.github.com/users/mjnaderi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-05-13T09:23:50Z", "updated_at": "2017-05-17T10:19:06Z", "closed_at": "2017-05-17T10:17:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After I upgraded django-cacheops to 3.2, when I run command `python manage.py invalidate all`, it fails with this exception:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/myuser/myproject/.venv/lib/python3.5/site-packages/funcy/decorators.py\", line 49, in __getattr__\r\n    res = self.__dict__[name] = arggetter(self._func)(name, self._args, self._kwargs)\r\n  File \"/home/myuser/myproject/.venv/lib/python3.5/site-packages/funcy/decorators.py\", line 81, in get_arg\r\n    return func.__defaults__[index - argcount]\r\nTypeError: 'NoneType' object is not subscriptable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./manage.py\", line 10, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"/home/myuser/myproject/.venv/lib/python3.5/site-packages/django/core/management/__init__.py\", line 363, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/home/myuser/myproject/.venv/lib/python3.5/site-packages/django/core/management/__init__.py\", line 355, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/home/myuser/myproject/.venv/lib/python3.5/site-packages/django/core/management/base.py\", line 283, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/home/myuser/myproject/.venv/lib/python3.5/site-packages/django/core/management/base.py\", line 330, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/home/myuser/myproject/.venv/lib/python3.5/site-packages/django/core/management/base.py\", line 512, in handle\r\n    label_output = self.handle_label(label, **options)\r\n  File \"/home/myuser/myproject/.venv/lib/python3.5/site-packages/cacheops/management/commands/invalidate.py\", line 15, in handle_label\r\n    self.handle_all()\r\n  File \"/home/myuser/myproject/.venv/lib/python3.5/site-packages/cacheops/management/commands/invalidate.py\", line 29, in handle_all\r\n    invalidate_all()\r\n  File \"/home/myuser/myproject/.venv/lib/python3.5/site-packages/funcy/decorators.py\", line 26, in wrapper\r\n    return deco(call, *dargs, **dkwargs)\r\n  File \"/home/myuser/myproject/.venv/lib/python3.5/site-packages/cacheops/transaction.py\", line 66, in queue_when_in_transaction\r\n    if transaction_states[call.using]:\r\n  File \"/home/myuser/myproject/.venv/lib/python3.5/site-packages/funcy/decorators.py\", line 52, in __getattr__\r\n    raise AttributeError(*e.args)\r\nAttributeError: 'NoneType' object is not subscriptable\r\n```\r\n\r\nI have installed following versions of python and django:\r\n\r\n```\r\nPython==3.5.2\r\nDjango==1.11.1\r\ndjango-cacheops==3.2\r\nfuncy==1.7.3\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/241", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/241/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/241/events", "html_url": "https://github.com/Suor/django-cacheops/issues/241", "id": 225909373, "node_id": "MDU6SXNzdWUyMjU5MDkzNzM=", "number": 241, "title": "Raising exception inside transaction is not rolling back transaction", "user": {"login": "M1ha-Shvn", "id": 2315339, "node_id": "MDQ6VXNlcjIzMTUzMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2315339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/M1ha-Shvn", "html_url": "https://github.com/M1ha-Shvn", "followers_url": "https://api.github.com/users/M1ha-Shvn/followers", "following_url": "https://api.github.com/users/M1ha-Shvn/following{/other_user}", "gists_url": "https://api.github.com/users/M1ha-Shvn/gists{/gist_id}", "starred_url": "https://api.github.com/users/M1ha-Shvn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/M1ha-Shvn/subscriptions", "organizations_url": "https://api.github.com/users/M1ha-Shvn/orgs", "repos_url": "https://api.github.com/users/M1ha-Shvn/repos", "events_url": "https://api.github.com/users/M1ha-Shvn/events{/privacy}", "received_events_url": "https://api.github.com/users/M1ha-Shvn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-03T08:02:42Z", "updated_at": "2017-05-03T12:04:46Z", "closed_at": "2017-05-03T12:04:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello.\r\nI'm using django-cacheops 3.1.3, django 1.11\r\nMy dango view raises exception inside transaction:\r\n```\r\n    with transaction.atomic(using=settings.DB_SHARD):\r\n        parts = MessagePart.objects.filter(Q(id=cleaned_data['selected_part']) | Q(type='control_group'),\r\n                                           test_group=test_group, closed__isnull=True).\\\r\n                values('name', 'proportion', 'type', 'reply_type', 'pure_html', 'subject', 'body', 'body_json')\r\n        parts = list(parts)\r\n        if len(parts) < 2:\r\n            raise BadRequest(field=\"selected_part\")\r\n```\r\nThis exception is caught and handled outside in view decorator. But when exception is raised, it provides another exception inside cacheops:\r\n```\r\nTraceback:\r\n\r\nFile \"/home/sergei/cqapi/messages/views.py\" in messagegroup_close\r\n  991.             raise BadRequest(field=\"selected_part\")\r\n\r\nDuring handling of the above exception (), another exception occurred:\r\n\r\nFile \"/home/sergei/venv/lib/python3.5/site-packages/django/core/handlers/exception.py\" in inner\r\n  41.             response = get_response(request)\r\n\r\nFile \"/home/sergei/venv/lib/python3.5/site-packages/django/core/handlers/base.py\" in _get_response\r\n  187.                 response = self.process_exception_by_middleware(e, request)\r\n\r\nFile \"/home/sergei/venv/lib/python3.5/site-packages/django/core/handlers/base.py\" in _get_response\r\n  185.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n\r\nFile \"/home/sergei/venv/lib/python3.5/site-packages/django/views/decorators/csrf.py\" in wrapped_view\r\n  58.         return view_func(*args, **kwargs)\r\n\r\nFile \"/home/sergei/venv/lib/python3.5/site-packages/django/views/generic/base.py\" in view\r\n  68.             return self.dispatch(request, *args, **kwargs)\r\n\r\nFile \"/home/sergei/venv/lib/python3.5/site-packages/rest_framework/views.py\" in dispatch\r\n  483.             response = self.handle_exception(exc)\r\n\r\nFile \"/home/sergei/venv/lib/python3.5/site-packages/rest_framework/views.py\" in handle_exception\r\n  443.             self.raise_uncaught_exception(exc)\r\n\r\nFile \"/home/sergei/venv/lib/python3.5/site-packages/rest_framework/views.py\" in dispatch\r\n  480.             response = handler(request, *args, **kwargs)\r\n\r\nFile \"/home/sergei/venv/lib/python3.5/site-packages/rest_framework/decorators.py\" in handler\r\n  52.             return func(*args, **kwargs)\r\n\r\nFile \"/home/sergei/cqapi/api/decorators.py\" in __view\r\n  145.                     response = f(request, *args, **kwargs)\r\n\r\nFile \"/home/sergei/cqapi/api/decorators.py\" in _view\r\n  213.                 res = func(request, *args, cleaned_data=cleaned_data, **kwargs)\r\n\r\nFile \"/home/sergei/cqapi/messages/views.py\" in messagegroup_close\r\n  1004.         test_group = MessagePart.create_message_parts(msg, [control_group, part])\r\n\r\nFile \"/home/sergei/venv/lib/python3.5/site-packages/cacheops/transaction.py\" in __exit__\r\n  83.             transaction_state.rollback()\r\n\r\nFile \"/home/sergei/venv/lib/python3.5/site-packages/cacheops/transaction.py\" in rollback\r\n  40.         self._stack.pop()\r\n\r\nException Type: IndexError at /v1/messagetestgroups/100504/close\r\nException Value: pop from empty list\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/240", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/240/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/240/events", "html_url": "https://github.com/Suor/django-cacheops/issues/240", "id": 225194083, "node_id": "MDU6SXNzdWUyMjUxOTQwODM=", "number": 240, "title": "Problems in transaction state with multiple databases", "user": {"login": "pembo13", "id": 5777117, "node_id": "MDQ6VXNlcjU3NzcxMTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5777117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pembo13", "html_url": "https://github.com/pembo13", "followers_url": "https://api.github.com/users/pembo13/followers", "following_url": "https://api.github.com/users/pembo13/following{/other_user}", "gists_url": "https://api.github.com/users/pembo13/gists{/gist_id}", "starred_url": "https://api.github.com/users/pembo13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pembo13/subscriptions", "organizations_url": "https://api.github.com/users/pembo13/orgs", "repos_url": "https://api.github.com/users/pembo13/repos", "events_url": "https://api.github.com/users/pembo13/events{/privacy}", "received_events_url": "https://api.github.com/users/pembo13/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-28T21:10:42Z", "updated_at": "2017-05-08T14:13:47Z", "closed_at": "2017-05-08T13:32:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I believe me having multiple databases in my Django project is triggering an issue with cacheops.\r\n\r\nI start a transaction on the secondary database, `with transaction.atomic(using='reporting_db'):` and during that block, if an exception an occurs, cacheops errors out with\r\n\r\n```\r\n...\r\n  File \"/home/pembo13/virt/project/lib/python2.7/site-packages/cacheops/transaction.py\", line 83, in __exit__\r\n    transaction_state.rollback()\r\n  File \"/home/pembo13/virt/project/lib/python2.7/site-packages/cacheops/transaction.py\", line 40, in rollback\r\n    self._stack.pop()\r\n```\r\n\r\nI've never seen this issue with my single database projects.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/239", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/239/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/239/events", "html_url": "https://github.com/Suor/django-cacheops/issues/239", "id": 223608139, "node_id": "MDU6SXNzdWUyMjM2MDgxMzk=", "number": 239, "title": "Migration failed when cacheops enabled", "user": {"login": "pyprism", "id": 1469242, "node_id": "MDQ6VXNlcjE0NjkyNDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1469242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyprism", "html_url": "https://github.com/pyprism", "followers_url": "https://api.github.com/users/pyprism/followers", "following_url": "https://api.github.com/users/pyprism/following{/other_user}", "gists_url": "https://api.github.com/users/pyprism/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyprism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyprism/subscriptions", "organizations_url": "https://api.github.com/users/pyprism/orgs", "repos_url": "https://api.github.com/users/pyprism/repos", "events_url": "https://api.github.com/users/pyprism/events{/privacy}", "received_events_url": "https://api.github.com/users/pyprism/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 27266922, "node_id": "MDU6TGFiZWwyNzI2NjkyMg==", "url": "https://api.github.com/repos/Suor/django-cacheops/labels/waiting%20for%20feedback", "name": "waiting for feedback", "color": "d7e102", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-04-23T02:48:58Z", "updated_at": "2018-08-21T03:45:14Z", "closed_at": "2017-10-08T16:19:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is the error message when I tried to migrate after adding cacheops in installed_apps\r\n\r\n```\r\n./manage.py migrate                                                                        \r\n/.env/lib/python3.5/distutils/__init__.py:4: PendingDeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n  import imp\r\n.env/lib/python3.5/site-packages/cacheops/templatetags/cacheops.py:31: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\r\n  params, varargs, varkw, defaults = inspect.getargspec(func)\r\n.env/lib/python3.5/site-packages/cacheops/templatetags/cacheops.py:31: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\r\n  params, varargs, varkw, defaults = inspect.getargspec(func)\r\nOperations to perform:\r\n  Apply all migrations: admin, auth, contenttypes, recipe, sessions\r\nRunning migrations:\r\n  No migrations to apply.\r\nTraceback (most recent call last):\r\n  File \"/.env/lib/python3.5/site-packages/django/db/backends/utils.py\", line 64, in execute\r\n    return self.cursor.execute(sql, params)\r\npsycopg2.ProgrammingError: relation \"django_content_type\" does not exist\r\nLINE 1: ...\".\"app_label\", \"django_content_type\".\"model\" FROM \"django_co...\r\n                                                             ^\r\n\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"./manage.py\", line 22, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"//.env/lib/python3.5/site-packages/django/core/management/__init__.py\", line 367, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/.env/lib/python3.5/site-packages/django/core/management/__init__.py\", line 359, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/.env/lib/python3.5/site-packages/django/core/management/base.py\", line 294, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/.env/lib/python3.5/site-packages/django/core/management/base.py\", line 345, in execute\r\n    output = self.handle(*args, **options)\r\n  File \".env/lib/python3.5/site-packages/django/core/management/commands/migrate.py\", line 224, in handle\r\n    self.verbosity, self.interactive, connection.alias, apps=post_migrate_apps, plan=plan,\r\n  File \"/.env/lib/python3.5/site-packages/django/core/management/sql.py\", line 53, in emit_post_migrate_signal\r\n    **kwargs\r\n  File \"/.env/lib/python3.5/site-packages/django/dispatch/dispatcher.py\", line 191, in send\r\n    response = receiver(signal=self, sender=sender, **named)\r\n  File \"/.env/lib/python3.5/site-packages/django/contrib/auth/management/__init__.py\", line 63, in create_permissions\r\n    ctype = ContentType.objects.db_manager(using).get_for_model(klass)\r\n  File \"/.env/lib/python3.5/site-packages/django/contrib/contenttypes/models.py\", line 52, in get_for_model\r\n    ct = self.get(app_label=opts.app_label, model=opts.model_name)\r\n  File \"/.env/lib/python3.5/site-packages/django/db/models/manager.py\", line 85, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/.env/lib/python3.5/site-packages/cacheops/query.py\", line 357, in get\r\n    return qs._no_monkey.get(qs, *args, **kwargs)\r\n  File \"/.env/lib/python3.5/site-packages/django/db/models/query.py\", line 379, in get\r\n    num = len(clone)\r\n  File \"/.env/lib/python3.5/site-packages/django/db/models/query.py\", line 238, in __len__\r\n    self._fetch_all()\r\n  File \"/.env/lib/python3.5/site-packages/cacheops/query.py\", line 293, in _fetch_all\r\n    return self._no_monkey._fetch_all(self)\r\n  File \"/.env/lib/python3.5/site-packages/django/db/models/query.py\", line 1087, in _fetch_all\r\n    self._result_cache = list(self.iterator())\r\n  File \"/.env/lib/python3.5/site-packages/django/db/models/query.py\", line 54, in __iter__\r\n    results = compiler.execute_sql()\r\n  File \"/.env/lib/python3.5/site-packages/django/db/models/sql/compiler.py\", line 835, in execute_sql\r\n    cursor.execute(sql, params)\r\n  File \"/.env/lib/python3.5/site-packages/django/db/backends/utils.py\", line 79, in execute\r\n    return super(CursorDebugWrapper, self).execute(sql, params)\r\n  File \"/.env/lib/python3.5/site-packages/cacheops/transaction.py\", line 93, in execute\r\n    result = self._no_monkey.execute(self, sql, params)\r\n  File \"/.env/lib/python3.5/site-packages/django/db/backends/utils.py\", line 64, in execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/.env/lib/python3.5/site-packages/django/db/utils.py\", line 94, in __exit__\r\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\r\n  File \"/.env/lib/python3.5/site-packages/django/utils/six.py\", line 685, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/.env/lib/python3.5/site-packages/django/db/backends/utils.py\", line 64, in execute\r\n    return self.cursor.execute(sql, params)\r\ndjango.db.utils.ProgrammingError: relation \"django_content_type\" does not exist\r\nLINE 1: ...\".\"app_label\", \"django_content_type\".\"model\" FROM \"django_co...\r\n```\r\n I am using Django 1.11 with postgres .", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/237", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/237/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/237/events", "html_url": "https://github.com/Suor/django-cacheops/issues/237", "id": 219254772, "node_id": "MDU6SXNzdWUyMTkyNTQ3NzI=", "number": 237, "title": "Cache is saving the object in presave without the model been in CACHEOPS configs", "user": {"login": "leonardoo", "id": 3915706, "node_id": "MDQ6VXNlcjM5MTU3MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3915706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonardoo", "html_url": "https://github.com/leonardoo", "followers_url": "https://api.github.com/users/leonardoo/followers", "following_url": "https://api.github.com/users/leonardoo/following{/other_user}", "gists_url": "https://api.github.com/users/leonardoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonardoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonardoo/subscriptions", "organizations_url": "https://api.github.com/users/leonardoo/orgs", "repos_url": "https://api.github.com/users/leonardoo/repos", "events_url": "https://api.github.com/users/leonardoo/events{/privacy}", "received_events_url": "https://api.github.com/users/leonardoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-04T13:42:33Z", "updated_at": "2017-05-04T14:29:25Z", "closed_at": "2017-05-04T14:29:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "i was looking with django debug toolbar, and a object that is not config in CACHEOPS was been searched and added, to the cachelist but this object was not in the cacheops list", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/234", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/234/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/234/events", "html_url": "https://github.com/Suor/django-cacheops/issues/234", "id": 215243738, "node_id": "MDU6SXNzdWUyMTUyNDM3Mzg=", "number": 234, "title": "is_sql_dirty matches on column name", "user": {"login": "icereval", "id": 3111541, "node_id": "MDQ6VXNlcjMxMTE1NDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3111541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/icereval", "html_url": "https://github.com/icereval", "followers_url": "https://api.github.com/users/icereval/followers", "following_url": "https://api.github.com/users/icereval/following{/other_user}", "gists_url": "https://api.github.com/users/icereval/gists{/gist_id}", "starred_url": "https://api.github.com/users/icereval/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/icereval/subscriptions", "organizations_url": "https://api.github.com/users/icereval/orgs", "repos_url": "https://api.github.com/users/icereval/repos", "events_url": "https://api.github.com/users/icereval/events{/privacy}", "received_events_url": "https://api.github.com/users/icereval/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-03-19T05:51:33Z", "updated_at": "2017-03-27T08:05:29Z", "closed_at": "2017-03-27T08:05:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Transaction method `is_sql_dirty` matches on strings `update`, `delete` or `insert`. Causing false positives when column names match.\r\n\r\ne.g.\r\n\r\n`is_deleted`\r\n`delete`\r\n`deleted`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/232", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/232/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/232/events", "html_url": "https://github.com/Suor/django-cacheops/issues/232", "id": 214970519, "node_id": "MDU6SXNzdWUyMTQ5NzA1MTk=", "number": 232, "title": "Issue when sorting conjunctions in DNF", "user": {"login": "michalochman", "id": 1628450, "node_id": "MDQ6VXNlcjE2Mjg0NTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1628450?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalochman", "html_url": "https://github.com/michalochman", "followers_url": "https://api.github.com/users/michalochman/followers", "following_url": "https://api.github.com/users/michalochman/following{/other_user}", "gists_url": "https://api.github.com/users/michalochman/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalochman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalochman/subscriptions", "organizations_url": "https://api.github.com/users/michalochman/orgs", "repos_url": "https://api.github.com/users/michalochman/repos", "events_url": "https://api.github.com/users/michalochman/events{/privacy}", "received_events_url": "https://api.github.com/users/michalochman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-17T10:57:55Z", "updated_at": "2017-03-21T13:22:42Z", "closed_at": "2017-03-21T13:22:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Turns out that there is an issue when querying the same field multiple times when one of the query is for `__isnull=True`.\r\n\r\nFor example, given we have following models:\r\n\r\n    class Site(models.Model):\r\n        domain = models.CharField(max_length=127)\r\n\r\n    class Article(models.Model):\r\n        site = models.ForeignKey(Site, null=True)\r\n\r\nThe following query:\r\n\r\n    Article.objects.cache().filter(Q(site__isnull=True) | Q(site__in=[site])).filter(site=site)\r\n\r\nfails with `TypeError: unorderable types: int() < NoneType()`. The error happens while sorting conjunctions in `clean_dnf` function:\r\n\r\n    map(sorted, cleaned)\r\n\r\nwhere `cleaned` in this case is:\r\n\r\n    [[('site_id', None), ('site_id', 1)]]\r\n\r\nOne way to fix this would be to cast values to strings before comparing them, like that:\r\n\r\n    map(lambda l: sorted(l, key=lambda x: str(x)), cleaned)\r\n\r\nI will submit PR with the above fix and relevant test case in a minute.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/227", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/227/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/227/events", "html_url": "https://github.com/Suor/django-cacheops/issues/227", "id": 207050573, "node_id": "MDU6SXNzdWUyMDcwNTA1NzM=", "number": 227, "title": "Please provide test case or examples where django cacheops doesn't work properly", "user": {"login": "anuragjain67", "id": 3097168, "node_id": "MDQ6VXNlcjMwOTcxNjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3097168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anuragjain67", "html_url": "https://github.com/anuragjain67", "followers_url": "https://api.github.com/users/anuragjain67/followers", "following_url": "https://api.github.com/users/anuragjain67/following{/other_user}", "gists_url": "https://api.github.com/users/anuragjain67/gists{/gist_id}", "starred_url": "https://api.github.com/users/anuragjain67/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anuragjain67/subscriptions", "organizations_url": "https://api.github.com/users/anuragjain67/orgs", "repos_url": "https://api.github.com/users/anuragjain67/repos", "events_url": "https://api.github.com/users/anuragjain67/events{/privacy}", "received_events_url": "https://api.github.com/users/anuragjain67/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-12T13:38:38Z", "updated_at": "2017-02-14T13:21:41Z", "closed_at": "2017-02-14T13:21:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\nCan you please provide examples/ test cases for caveats. (I am using 2.4.3)\r\n\r\n1. Conditions other than __exact, __in and __isnull=True don't make invalidation more granular\r\n2. Conditions on TextFields, FileFields and BinaryFields don't make it either. One should not test on their equality anyway.\r\n3. Update of \"selected_related\" object does not invalidate cache for queryset.\r\n4. ORDER BY and LIMIT/OFFSET don't affect invalidation.\r\n5. Conditions on subqueries don't affect invalidation.\r\n6. Aggregates are not implemented yet.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/226", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/226/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/226/events", "html_url": "https://github.com/Suor/django-cacheops/issues/226", "id": 207033572, "node_id": "MDU6SXNzdWUyMDcwMzM1NzI=", "number": 226, "title": "Forgot about INSTALLED_APPS", "user": {"login": "ycuk", "id": 10051691, "node_id": "MDQ6VXNlcjEwMDUxNjkx", "avatar_url": "https://avatars0.githubusercontent.com/u/10051691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ycuk", "html_url": "https://github.com/ycuk", "followers_url": "https://api.github.com/users/ycuk/followers", "following_url": "https://api.github.com/users/ycuk/following{/other_user}", "gists_url": "https://api.github.com/users/ycuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/ycuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ycuk/subscriptions", "organizations_url": "https://api.github.com/users/ycuk/orgs", "repos_url": "https://api.github.com/users/ycuk/repos", "events_url": "https://api.github.com/users/ycuk/events{/privacy}", "received_events_url": "https://api.github.com/users/ycuk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-12T06:57:37Z", "updated_at": "2017-02-12T06:58:31Z", "closed_at": "2017-02-12T06:58:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Forgot about add 'cacheops' to INSTALLED_APPS in manual.\r\n\r\nthanks for app!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/225", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/225/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/225/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/225/events", "html_url": "https://github.com/Suor/django-cacheops/issues/225", "id": 200251724, "node_id": "MDU6SXNzdWUyMDAyNTE3MjQ=", "number": 225, "title": "Multiple database support bug", "user": {"login": "JessiePBhalerao", "id": 10452124, "node_id": "MDQ6VXNlcjEwNDUyMTI0", "avatar_url": "https://avatars0.githubusercontent.com/u/10452124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JessiePBhalerao", "html_url": "https://github.com/JessiePBhalerao", "followers_url": "https://api.github.com/users/JessiePBhalerao/followers", "following_url": "https://api.github.com/users/JessiePBhalerao/following{/other_user}", "gists_url": "https://api.github.com/users/JessiePBhalerao/gists{/gist_id}", "starred_url": "https://api.github.com/users/JessiePBhalerao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JessiePBhalerao/subscriptions", "organizations_url": "https://api.github.com/users/JessiePBhalerao/orgs", "repos_url": "https://api.github.com/users/JessiePBhalerao/repos", "events_url": "https://api.github.com/users/JessiePBhalerao/events{/privacy}", "received_events_url": "https://api.github.com/users/JessiePBhalerao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-12T01:02:05Z", "updated_at": "2017-02-17T20:24:13Z", "closed_at": "2017-02-07T07:21:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I believe there is a bug in the support for multiple databases.  We had been using a database with the alias `replica` in our development django settings, and it has since been removed because it's not ready for use in Production.  In our development branch, with `replica` DB removed, and cacheops enabled, I am getting the error `The connection replica doesn't exist`  However, if I reinstate a `replica` database alias, as a mirror of the default DB, there is no error.  \r\n\r\nThe multiple db support docs say, \r\n\r\n> By default cacheops considers query result is same for same query, not depending on database queried.\r\n\r\nHowever, it appears that cacheops is querying the _replica_ database alias rather than reading the current default DB.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/224", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/224/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/224/events", "html_url": "https://github.com/Suor/django-cacheops/issues/224", "id": 194673626, "node_id": "MDU6SXNzdWUxOTQ2NzM2MjY=", "number": 224, "title": "PicklingError", "user": {"login": "nMustaki", "id": 1023825, "node_id": "MDQ6VXNlcjEwMjM4MjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1023825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nMustaki", "html_url": "https://github.com/nMustaki", "followers_url": "https://api.github.com/users/nMustaki/followers", "following_url": "https://api.github.com/users/nMustaki/following{/other_user}", "gists_url": "https://api.github.com/users/nMustaki/gists{/gist_id}", "starred_url": "https://api.github.com/users/nMustaki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nMustaki/subscriptions", "organizations_url": "https://api.github.com/users/nMustaki/orgs", "repos_url": "https://api.github.com/users/nMustaki/repos", "events_url": "https://api.github.com/users/nMustaki/events{/privacy}", "received_events_url": "https://api.github.com/users/nMustaki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-09T19:11:54Z", "updated_at": "2016-12-13T08:18:09Z", "closed_at": "2016-12-13T08:18:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nwe cannot pinpoint when, but we started getting this pickling error : Can't pickle <type 'function'>: attribute lookup __builtin__.function failed\r\nIt seems to happen when a save is followed by a get, but I'm not sure. The issue only happens with uwsgi, I cannot reproduce it with python manage,py shell or python manage.py runserver.\r\n\r\nWould be great if you had some idea !\r\n\r\nThanks,\r\nNathan", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/222", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/222/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/222/events", "html_url": "https://github.com/Suor/django-cacheops/issues/222", "id": 194314339, "node_id": "MDU6SXNzdWUxOTQzMTQzMzk=", "number": 222, "title": "django-cacheops breaks django-polymorphic", "user": {"login": "mjnaderi", "id": 2115303, "node_id": "MDQ6VXNlcjIxMTUzMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2115303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjnaderi", "html_url": "https://github.com/mjnaderi", "followers_url": "https://api.github.com/users/mjnaderi/followers", "following_url": "https://api.github.com/users/mjnaderi/following{/other_user}", "gists_url": "https://api.github.com/users/mjnaderi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjnaderi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjnaderi/subscriptions", "organizations_url": "https://api.github.com/users/mjnaderi/orgs", "repos_url": "https://api.github.com/users/mjnaderi/repos", "events_url": "https://api.github.com/users/mjnaderi/events{/privacy}", "received_events_url": "https://api.github.com/users/mjnaderi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-08T11:39:42Z", "updated_at": "2016-12-13T10:39:12Z", "closed_at": "2016-12-13T10:39:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi. I installed latest versions of django-cacheops and django-polymorphic:\r\n\r\n- python==3.5.2\r\n- django==1.10.3\r\n- django-cacheops==3.1.1\r\n- django-polymorphic==1.0.2\r\n\r\nWith these versions, django-polymorphic does not work correctly. When I downgrade django-cacheops to 3.1, the problem still exists, and when I downgrade django-cacheops to 3.0.1, the problem goes away. Something in CacheOps 3.1 has broken django-polymorphic.\r\n\r\nThis is the problem:\r\n\r\nSuppose we have following models.\r\n\r\n```python\r\nclass A(PolymorphicModel):\r\n    pass\r\n\r\n\r\nclass B(A):\r\n    pass\r\n\r\n\r\nclass Z(models.Model):\r\n    a = models.ForeignKey(A)\r\n```\r\n\r\nBoth A, and B are cached using cacheops, using these settings in settings.py:\r\n\r\n```python\r\nCACHEOPS = {\r\n    'myapp.a': {'ops': 'all', 'timeout': 60 * 15},\r\n    'myapp.b': {'ops': 'all', 'timeout': 60 * 15},\r\n}\r\n```\r\n\r\nI run following commands in django shell:\r\n\r\n```python\r\n>>> from myapp.models import A\r\n>>> from myapp.models import B\r\n>>> from myapp.models import Z\r\n>>> b=B.objects.create()\r\n>>> z = Z.objects.create(a=b)\r\n>>> z2 = Z.objects.get(id=z.id)\r\n>>> type(z.a)\r\n<class 'myapp.models.B'>\r\n>>> type(z2.a)\r\n<class 'myapp.models.A'>\r\n```\r\n\r\nAs you see, type of z2.a is \"A\", bit it should be \"B\". With cacheops 3.0.1, this is the result:\r\n\r\n```\r\n>>> type(z.a)\r\n<class 'myapp.models.B'>\r\n>>> type(z2.a)\r\n<class 'myapp.models.B'>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/221", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/221/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/221/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/221/events", "html_url": "https://github.com/Suor/django-cacheops/issues/221", "id": 192983106, "node_id": "MDU6SXNzdWUxOTI5ODMxMDY=", "number": 221, "title": "AttributeError: 'GeoQuerySet' object has no attribute 'cache'", "user": {"login": "ScottEAdams", "id": 624154, "node_id": "MDQ6VXNlcjYyNDE1NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/624154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ScottEAdams", "html_url": "https://github.com/ScottEAdams", "followers_url": "https://api.github.com/users/ScottEAdams/followers", "following_url": "https://api.github.com/users/ScottEAdams/following{/other_user}", "gists_url": "https://api.github.com/users/ScottEAdams/gists{/gist_id}", "starred_url": "https://api.github.com/users/ScottEAdams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ScottEAdams/subscriptions", "organizations_url": "https://api.github.com/users/ScottEAdams/orgs", "repos_url": "https://api.github.com/users/ScottEAdams/repos", "events_url": "https://api.github.com/users/ScottEAdams/events{/privacy}", "received_events_url": "https://api.github.com/users/ScottEAdams/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-01T22:41:25Z", "updated_at": "2016-12-01T23:44:32Z", "closed_at": "2016-12-01T23:44:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Any way to get cacheops working with geodjango?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/219", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/219/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/219/events", "html_url": "https://github.com/Suor/django-cacheops/issues/219", "id": 189299135, "node_id": "MDU6SXNzdWUxODkyOTkxMzU=", "number": 219, "title": "SafeRedis connection_pool error", "user": {"login": "khj1218", "id": 193648, "node_id": "MDQ6VXNlcjE5MzY0OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/193648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khj1218", "html_url": "https://github.com/khj1218", "followers_url": "https://api.github.com/users/khj1218/followers", "following_url": "https://api.github.com/users/khj1218/following{/other_user}", "gists_url": "https://api.github.com/users/khj1218/gists{/gist_id}", "starred_url": "https://api.github.com/users/khj1218/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khj1218/subscriptions", "organizations_url": "https://api.github.com/users/khj1218/orgs", "repos_url": "https://api.github.com/users/khj1218/repos", "events_url": "https://api.github.com/users/khj1218/events{/privacy}", "received_events_url": "https://api.github.com/users/khj1218/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-15T04:47:17Z", "updated_at": "2016-12-13T08:24:23Z", "closed_at": "2016-12-13T08:24:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "django: 1.9.9\r\ndjango-cacheops: 3.0\r\nredis (python binding): 2.10.1\r\n\r\nI happened to get this error with CACHEOPS_DEGRADE_ON_FAILURE = True. Looking at the source code, I don't really understand how this can happen.\r\n\r\nFile \"/usr/local/lib/python2.7/dist-packages/django/db/models/manager.py\", line 122, in manager_method \r\nreturn getattr(self.get_queryset(), name)(*args, **kwargs) \r\nFile \"/usr/local/lib/python2.7/dist-packages/django/db/models/query.py\", line 465, in get_or_create \r\nreturn self.get(**lookup), False \r\nFile \"/usr/local/lib/python2.7/dist-packages/cacheops/query.py\", line 318, in get \r\nreturn qs._no_monkey.get(qs, *args, **kwargs) \r\nFile \"/usr/local/lib/python2.7/dist-packages/django/db/models/query.py\", line 381, in get \r\nnum = len(clone) \r\nFile \"/usr/local/lib/python2.7/dist-packages/django/db/models/query.py\", line 240, in __len__ \r\nself._fetch_all() \r\nFile \"/usr/local/lib/python2.7/dist-packages/django/db/models/query.py\", line 1074, in _fetch_all \r\nself._result_cache = list(self.iterator()) \r\nFile \"/usr/local/lib/python2.7/dist-packages/cacheops/query.py\", line 272, in iterate \r\nself._cache_results(cache_key, self._result_cache) \r\nFile \"/usr/local/lib/python2.7/dist-packages/cacheops/query.py\", line 164, in _cache_results \r\ncache_thing(cache_key, results, cond_dnfs, self._cacheprofile['timeout']) \r\nFile \"/usr/local/lib/python2.7/dist-packages/funcy/decorators.py\", line 26, in wrapper \r\nreturn deco(call, *dargs, **dkwargs) \r\nFile \"/usr/local/lib/python2.7/dist-packages/cacheops/redis.py\", line 16, in handle_connection_failure \r\nreturn call() \r\nFile \"/usr/local/lib/python2.7/dist-packages/funcy/decorators.py\", line 43, in __call__ \r\nreturn self._func(*self._args, **self._kwargs) \r\nFile \"/usr/local/lib/python2.7/dist-packages/cacheops/query.py\", line 48, in cache_thing \r\ntimeout \r\nFile \"build/bdist.linux-x86_64/egg/redis/client.py\", line 2594, in __call__ \r\nreturn client.evalsha(self.sha, len(keys), *args) \r\nFile \"build/bdist.linux-x86_64/egg/redis/client.py\", line 1855, in evalsha \r\nreturn self.execute_command('EVALSHA', sha, numkeys, *keys_and_args) \r\nFile \"build/bdist.linux-x86_64/egg/redis/client.py\", line 524, in execute_command \r\npool = self.connection_pool \r\nAttributeError: 'SafeRedis' object has no attribute 'connection_pool' \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/217", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/217/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/217/events", "html_url": "https://github.com/Suor/django-cacheops/issues/217", "id": 189126415, "node_id": "MDU6SXNzdWUxODkxMjY0MTU=", "number": 217, "title": "django>=1.10.x", "user": {"login": "GuillaumeCisco", "id": 1155244, "node_id": "MDQ6VXNlcjExNTUyNDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1155244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeCisco", "html_url": "https://github.com/GuillaumeCisco", "followers_url": "https://api.github.com/users/GuillaumeCisco/followers", "following_url": "https://api.github.com/users/GuillaumeCisco/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeCisco/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeCisco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeCisco/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeCisco/orgs", "repos_url": "https://api.github.com/users/GuillaumeCisco/repos", "events_url": "https://api.github.com/users/GuillaumeCisco/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeCisco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-11-14T14:32:23Z", "updated_at": "2016-11-15T08:46:33Z", "closed_at": "2016-11-15T05:00:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nJust tested last version of django-cacheops and Django 1.10.3.\r\nSteps : \r\n./manage.py invalidate all\r\nreload server\r\n./manage.py invalidate all\r\n\r\nStill it does not work properly, list is not invalidated.\r\n\r\nIf I run again command `./manage.py invalidate all` list is obviously invalidated but if I want to remove an item, still, list is not invalidated.\r\nAnyone in this case, did I do something wrong?\r\n\r\nMy settings file is:\r\n```python\r\nCACHEOPS_REDIS = {\r\n    'host':  environ.get('REDIS_HOST', '127.0.0.1'),\r\n    'port': environ.get('REDIS_PORT', '6379'),\r\n    'db': 1,\r\n    'socket_timeout': 4,\r\n}\r\n\r\nCACHEOPS_DEFAULTS = {\r\n    'timeout': 60*10  # 10 minutes\r\n}\r\n\r\nCACHEOPS = {\r\n    'auth.user': {'ops': 'get'},\r\n    '*.*': {'ops': 'all'}  # caching for all models\r\n}\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/216", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/216/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/216/events", "html_url": "https://github.com/Suor/django-cacheops/issues/216", "id": 188960631, "node_id": "MDU6SXNzdWUxODg5NjA2MzE=", "number": 216, "title": "Make CACHEOPS keys case \"insensitive\"", "user": {"login": "mapher87", "id": 3336137, "node_id": "MDQ6VXNlcjMzMzYxMzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3336137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mapher87", "html_url": "https://github.com/mapher87", "followers_url": "https://api.github.com/users/mapher87/followers", "following_url": "https://api.github.com/users/mapher87/following{/other_user}", "gists_url": "https://api.github.com/users/mapher87/gists{/gist_id}", "starred_url": "https://api.github.com/users/mapher87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mapher87/subscriptions", "organizations_url": "https://api.github.com/users/mapher87/orgs", "repos_url": "https://api.github.com/users/mapher87/repos", "events_url": "https://api.github.com/users/mapher87/events{/privacy}", "received_events_url": "https://api.github.com/users/mapher87/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-13T09:20:53Z", "updated_at": "2016-11-15T07:50:40Z", "closed_at": "2016-11-15T07:50:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "conf:prepare_profiles made case insensitive, but conf:model_profile did not\r\n\r\nmay be \"lower()\" when getting \"app_lable\" and \"model_name\" to make it compatible", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/215", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/215/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/215/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/215/events", "html_url": "https://github.com/Suor/django-cacheops/issues/215", "id": 188764118, "node_id": "MDU6SXNzdWUxODg3NjQxMTg=", "number": 215, "title": "AssertError while check not transaction_state.is_dirty()", "user": {"login": "Godod", "id": 595229, "node_id": "MDQ6VXNlcjU5NTIyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/595229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Godod", "html_url": "https://github.com/Godod", "followers_url": "https://api.github.com/users/Godod/followers", "following_url": "https://api.github.com/users/Godod/following{/other_user}", "gists_url": "https://api.github.com/users/Godod/gists{/gist_id}", "starred_url": "https://api.github.com/users/Godod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Godod/subscriptions", "organizations_url": "https://api.github.com/users/Godod/orgs", "repos_url": "https://api.github.com/users/Godod/repos", "events_url": "https://api.github.com/users/Godod/events{/privacy}", "received_events_url": "https://api.github.com/users/Godod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2016-11-11T13:50:37Z", "updated_at": "2016-11-15T04:19:50Z", "closed_at": "2016-11-15T04:19:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. I was updated django-cacheops to version 3.1 and now, when I'm using django.db.transaction.atomic() to save model I have AssertError. Error arise on 42 line at query.py file:\r\n\r\n```python\r\nassert not transaction_state.is_dirty()\r\n```\r\n\r\nCan you explain why cacheops considers that transaction is dirty and how can I avoid this situation?\r\nThank you.\r\nUsing: Python 3.5.2, Django 1.9.11, PostgreSQL 9.5\r\n\r\nP.S. Sorry for my bad English\r\nP.P.S PostgreSQL don't support dirty transaction", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Suor/django-cacheops/issues/214", "repository_url": "https://api.github.com/repos/Suor/django-cacheops", "labels_url": "https://api.github.com/repos/Suor/django-cacheops/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/Suor/django-cacheops/issues/214/comments", "events_url": "https://api.github.com/repos/Suor/django-cacheops/issues/214/events", "html_url": "https://github.com/Suor/django-cacheops/issues/214", "id": 184543919, "node_id": "MDU6SXNzdWUxODQ1NDM5MTk=", "number": 214, "title": "warch cache", "user": {"login": "jankrnavek", "id": 13521021, "node_id": "MDQ6VXNlcjEzNTIxMDIx", "avatar_url": "https://avatars1.githubusercontent.com/u/13521021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jankrnavek", "html_url": "https://github.com/jankrnavek", "followers_url": "https://api.github.com/users/jankrnavek/followers", "following_url": "https://api.github.com/users/jankrnavek/following{/other_user}", "gists_url": "https://api.github.com/users/jankrnavek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jankrnavek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jankrnavek/subscriptions", "organizations_url": "https://api.github.com/users/jankrnavek/orgs", "repos_url": "https://api.github.com/users/jankrnavek/repos", "events_url": "https://api.github.com/users/jankrnavek/events{/privacy}", "received_events_url": "https://api.github.com/users/jankrnavek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-21T18:39:09Z", "updated_at": "2016-10-25T05:58:41Z", "closed_at": "2016-10-25T05:58:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\nis there way how to put all objects into cache?\nI have a big table with 9 milions records and  i try to do something like\nlen(Big.objects.all()) but  that doesnt work.\nThank you in advance.\nHanz \n", "performed_via_github_app": null, "score": 1.0}]}