{"total_count": 85, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/seb-m/pyinotify/issues/182", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/182/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/182/events", "html_url": "https://github.com/seb-m/pyinotify/issues/182", "id": 521492366, "node_id": "MDU6SXNzdWU1MjE0OTIzNjY=", "number": 182, "title": "x", "user": {"login": "johncthomas", "id": 19673284, "node_id": "MDQ6VXNlcjE5NjczMjg0", "avatar_url": "https://avatars3.githubusercontent.com/u/19673284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johncthomas", "html_url": "https://github.com/johncthomas", "followers_url": "https://api.github.com/users/johncthomas/followers", "following_url": "https://api.github.com/users/johncthomas/following{/other_user}", "gists_url": "https://api.github.com/users/johncthomas/gists{/gist_id}", "starred_url": "https://api.github.com/users/johncthomas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johncthomas/subscriptions", "organizations_url": "https://api.github.com/users/johncthomas/orgs", "repos_url": "https://api.github.com/users/johncthomas/repos", "events_url": "https://api.github.com/users/johncthomas/events{/privacy}", "received_events_url": "https://api.github.com/users/johncthomas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-12T11:26:12Z", "updated_at": "2019-11-12T11:26:34Z", "closed_at": "2019-11-12T11:26:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/156", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/156/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/156/events", "html_url": "https://github.com/seb-m/pyinotify/issues/156", "id": 357353206, "node_id": "MDU6SXNzdWUzNTczNTMyMDY=", "number": 156, "title": "Typo  pyinotify/python2/examples/daemon.py line  51", "user": {"login": "mithilhari", "id": 11787239, "node_id": "MDQ6VXNlcjExNzg3MjM5", "avatar_url": "https://avatars1.githubusercontent.com/u/11787239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mithilhari", "html_url": "https://github.com/mithilhari", "followers_url": "https://api.github.com/users/mithilhari/followers", "following_url": "https://api.github.com/users/mithilhari/following{/other_user}", "gists_url": "https://api.github.com/users/mithilhari/gists{/gist_id}", "starred_url": "https://api.github.com/users/mithilhari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mithilhari/subscriptions", "organizations_url": "https://api.github.com/users/mithilhari/orgs", "repos_url": "https://api.github.com/users/mithilhari/repos", "events_url": "https://api.github.com/users/mithilhari/events{/privacy}", "received_events_url": "https://api.github.com/users/mithilhari/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-05T18:37:15Z", "updated_at": "2018-09-05T18:39:52Z", "closed_at": "2018-09-05T18:39:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "try:\r\n    notifier.loop(daemonize=True, callback=on_loop_func,\r\n                  pid_file='/tmp/pyinotify.pid', stdout='/tmp/pyinotify.log')\r\nexcept pyinotify.NotifierError, err:\r\n    print >> sys.stderr, err\r\n\r\nShould be 'except pyinotify.Notifier as err'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/151", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/151/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/151/events", "html_url": "https://github.com/seb-m/pyinotify/issues/151", "id": 278393835, "node_id": "MDU6SXNzdWUyNzgzOTM4MzU=", "number": 151, "title": "the example \"pyinotify/python2/examples/tutorial_threadednotifier.py\" dose not work", "user": {"login": "mskylsjwg", "id": 10737791, "node_id": "MDQ6VXNlcjEwNzM3Nzkx", "avatar_url": "https://avatars0.githubusercontent.com/u/10737791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mskylsjwg", "html_url": "https://github.com/mskylsjwg", "followers_url": "https://api.github.com/users/mskylsjwg/followers", "following_url": "https://api.github.com/users/mskylsjwg/following{/other_user}", "gists_url": "https://api.github.com/users/mskylsjwg/gists{/gist_id}", "starred_url": "https://api.github.com/users/mskylsjwg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mskylsjwg/subscriptions", "organizations_url": "https://api.github.com/users/mskylsjwg/orgs", "repos_url": "https://api.github.com/users/mskylsjwg/repos", "events_url": "https://api.github.com/users/mskylsjwg/events{/privacy}", "received_events_url": "https://api.github.com/users/mskylsjwg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-01T08:37:08Z", "updated_at": "2017-12-01T08:55:10Z", "closed_at": "2017-12-01T08:55:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/148", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/148/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/148/events", "html_url": "https://github.com/seb-m/pyinotify/issues/148", "id": 267963556, "node_id": "MDU6SXNzdWUyNjc5NjM1NTY=", "number": 148, "title": "pyinotify got sgmentation fault in docker container", "user": {"login": "AndyHoang", "id": 7590604, "node_id": "MDQ6VXNlcjc1OTA2MDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/7590604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndyHoang", "html_url": "https://github.com/AndyHoang", "followers_url": "https://api.github.com/users/AndyHoang/followers", "following_url": "https://api.github.com/users/AndyHoang/following{/other_user}", "gists_url": "https://api.github.com/users/AndyHoang/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndyHoang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndyHoang/subscriptions", "organizations_url": "https://api.github.com/users/AndyHoang/orgs", "repos_url": "https://api.github.com/users/AndyHoang/repos", "events_url": "https://api.github.com/users/AndyHoang/events{/privacy}", "received_events_url": "https://api.github.com/users/AndyHoang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-24T09:40:14Z", "updated_at": "2017-10-24T11:11:09Z", "closed_at": "2017-10-24T11:10:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I try to use pyinotify inside a docker container (base image is alpine with python 2.7)\r\nI can start pyinotify normally, but when I do anything with the files, watched by pyinotify.\r\nIt got error \r\n```\r\n[2017-10-24 09:33:36,465 pyinotify DEBUG] New <Watch wd=1 path=/data mask=4095 proc_fun=None auto_add=None exclude_filter=<function <lambda> at 0x7fed65892c08> dir=True >\r\nSegmentation fault (core dumped)\r\n```\r\nTrying `https://github.com/rvoicilas/inotify-tools/` standalone is ok\r\nSo do we support to run it inside docker?\r\nI know pyinotify only support linux, but i dont know what kind of linux it is supporting\r\nThanks\r\n\r\n------\r\n\r\nupdated: I changed to use base image `ubuntu` and everything look fine.\r\nDo you have any suggestion on base image so that I can use a lightweight container?\r\n\r\n------\r\nRestarted, retry everything again, worked for apline...\r\nSorry for bothering", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/146", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/146/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/146/events", "html_url": "https://github.com/seb-m/pyinotify/issues/146", "id": 259286911, "node_id": "MDU6SXNzdWUyNTkyODY5MTE=", "number": 146, "title": "freebsd Unknown mask 0x00000030", "user": {"login": "davidgarvey", "id": 1266922, "node_id": "MDQ6VXNlcjEyNjY5MjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1266922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidgarvey", "html_url": "https://github.com/davidgarvey", "followers_url": "https://api.github.com/users/davidgarvey/followers", "following_url": "https://api.github.com/users/davidgarvey/following{/other_user}", "gists_url": "https://api.github.com/users/davidgarvey/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidgarvey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidgarvey/subscriptions", "organizations_url": "https://api.github.com/users/davidgarvey/orgs", "repos_url": "https://api.github.com/users/davidgarvey/repos", "events_url": "https://api.github.com/users/davidgarvey/events{/privacy}", "received_events_url": "https://api.github.com/users/davidgarvey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-20T20:11:26Z", "updated_at": "2017-09-20T21:17:42Z", "closed_at": "2017-09-20T21:17:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does pyinotify support freebsd?\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/runpy.py\", line 162, in _run_module_as_main\r\n    \"__main__\", fname, loader, pkg_name)\r\n  File \"/usr/local/lib/python2.7/runpy.py\", line 72, in _run_code\r\n    exec code in run_globals\r\n  File \"/root/fn_virt/lib/python2.7/site-packages/pyinotify.py\", line 2386, in <module>\r\n    command_line()\r\n  File \"/root/fn_virt/lib/python2.7/site-packages/pyinotify.py\", line 2382, in command_line\r\n    notifier.loop(callback=cb_fun)\r\n  File \"/root/fn_virt/lib/python2.7/site-packages/pyinotify.py\", line 1390, in loop\r\n    self.process_events()\r\n  File \"/root/fn_virt/lib/python2.7/site-packages/pyinotify.py\", line 1283, in process_events\r\n    revent = self._sys_proc_fun(raw_event)  # system processings\r\n  File \"/root/fn_virt/lib/python2.7/site-packages/pyinotify.py\", line 639, in __call__\r\n    raise ProcessEventError(\"Unknown mask 0x%08x\" % stripped_mask)\r\n__main__.ProcessEventError: Unknown mask 0x00000030\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/144", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/144/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/144/events", "html_url": "https://github.com/seb-m/pyinotify/issues/144", "id": 228615712, "node_id": "MDU6SXNzdWUyMjg2MTU3MTI=", "number": 144, "title": "Excuse me: is the use of the system event .Or polling scan", "user": {"login": "githublaohu", "id": 8677242, "node_id": "MDQ6VXNlcjg2NzcyNDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/8677242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/githublaohu", "html_url": "https://github.com/githublaohu", "followers_url": "https://api.github.com/users/githublaohu/followers", "following_url": "https://api.github.com/users/githublaohu/following{/other_user}", "gists_url": "https://api.github.com/users/githublaohu/gists{/gist_id}", "starred_url": "https://api.github.com/users/githublaohu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/githublaohu/subscriptions", "organizations_url": "https://api.github.com/users/githublaohu/orgs", "repos_url": "https://api.github.com/users/githublaohu/repos", "events_url": "https://api.github.com/users/githublaohu/events{/privacy}", "received_events_url": "https://api.github.com/users/githublaohu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-05-15T06:19:33Z", "updated_at": "2018-01-10T03:35:07Z", "closed_at": "2018-01-10T03:35:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "\u8bf7\u95ee\uff1a\u662f\u4f7f\u7528\u4e86\u7cfb\u7edf\u65f6\u95f4\u3002\u8fd8\u662f\u8f6e\u8be2\u626b\u63cf", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/127", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/127/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/127/events", "html_url": "https://github.com/seb-m/pyinotify/issues/127", "id": 159515296, "node_id": "MDU6SXNzdWUxNTk1MTUyOTY=", "number": 127, "title": "How to send single email for multiple events?", "user": {"login": "thefossgeek", "id": 8296757, "node_id": "MDQ6VXNlcjgyOTY3NTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/8296757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thefossgeek", "html_url": "https://github.com/thefossgeek", "followers_url": "https://api.github.com/users/thefossgeek/followers", "following_url": "https://api.github.com/users/thefossgeek/following{/other_user}", "gists_url": "https://api.github.com/users/thefossgeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/thefossgeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thefossgeek/subscriptions", "organizations_url": "https://api.github.com/users/thefossgeek/orgs", "repos_url": "https://api.github.com/users/thefossgeek/repos", "events_url": "https://api.github.com/users/thefossgeek/events{/privacy}", "received_events_url": "https://api.github.com/users/thefossgeek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-06-09T21:43:24Z", "updated_at": "2018-10-22T15:20:36Z", "closed_at": "2018-10-22T15:20:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need to send a consolidated single email. Can you through some light on?\n# notifier.loop()\n\nnotifier.loop(daemonize=True, pid_file=pid_file_name)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/123", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/123/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/123/events", "html_url": "https://github.com/seb-m/pyinotify/issues/123", "id": 147978341, "node_id": "MDU6SXNzdWUxNDc5NzgzNDE=", "number": 123, "title": "How to daemonize Notifier with multiple EventHandler", "user": {"login": "axot", "id": 611054, "node_id": "MDQ6VXNlcjYxMTA1NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/611054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axot", "html_url": "https://github.com/axot", "followers_url": "https://api.github.com/users/axot/followers", "following_url": "https://api.github.com/users/axot/following{/other_user}", "gists_url": "https://api.github.com/users/axot/gists{/gist_id}", "starred_url": "https://api.github.com/users/axot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axot/subscriptions", "organizations_url": "https://api.github.com/users/axot/orgs", "repos_url": "https://api.github.com/users/axot/repos", "events_url": "https://api.github.com/users/axot/events{/privacy}", "received_events_url": "https://api.github.com/users/axot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-04-13T07:56:43Z", "updated_at": "2016-04-13T08:04:12Z", "closed_at": "2016-04-13T08:03:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to create a daemonize Notifier to monitor multiple directory using different `EventHandler` respectively?\n\n`notifier.loop` will block codes, and `ThreadedNotifier` also not work because of forking process.\nIs any way to do this? Thank you.\n\n``` python\ndef main():\n    wmA = pyinotify.WatchManager()\n    notifierA = pyinotify.Notifier(wmA, EventHandlerA())\n    mask = pyinotify.IN_MODIFY | pyinotify.IN_CREATE | pyinotify.IN_MOVED_TO        \n    wmA.add_watch(whereA, rec=True, auto_add=True, mask=mask)\n    notifierB.loop(daemonize=True)\n\n    wmB = pyinotify.WatchManager()\n    notifierB = pyinotify.Notifier(wmB, EventHandlerB())\n    wmB.add_watch(whereB, mask=mask)\n    notifierB.loop(daemonize=True)\n```\n\n`proc_fun` from `WatchManager.add_watch` solve the issue.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/122", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/122/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/122/events", "html_url": "https://github.com/seb-m/pyinotify/issues/122", "id": 142694102, "node_id": "MDU6SXNzdWUxNDI2OTQxMDI=", "number": 122, "title": "There is no move_to equivalent event", "user": {"login": "ozette", "id": 1530783, "node_id": "MDQ6VXNlcjE1MzA3ODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1530783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozette", "html_url": "https://github.com/ozette", "followers_url": "https://api.github.com/users/ozette/followers", "following_url": "https://api.github.com/users/ozette/following{/other_user}", "gists_url": "https://api.github.com/users/ozette/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozette/subscriptions", "organizations_url": "https://api.github.com/users/ozette/orgs", "repos_url": "https://api.github.com/users/ozette/repos", "events_url": "https://api.github.com/users/ozette/events{/privacy}", "received_events_url": "https://api.github.com/users/ozette/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-22T15:54:51Z", "updated_at": "2016-03-22T16:04:09Z", "closed_at": "2016-03-22T16:03:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "The utiltiy **inotifywatch** has the option to watch for _moved_to_ events.\nI'd like to an event to fire when I drag and drop files in the watched directory, how else is this currently possible?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/121", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/121/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/121/events", "html_url": "https://github.com/seb-m/pyinotify/issues/121", "id": 135224637, "node_id": "MDU6SXNzdWUxMzUyMjQ2Mzc=", "number": 121, "title": "Continual event updates on every file in watched directories", "user": {"login": "jheld", "id": 828813, "node_id": "MDQ6VXNlcjgyODgxMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/828813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jheld", "html_url": "https://github.com/jheld", "followers_url": "https://api.github.com/users/jheld/followers", "following_url": "https://api.github.com/users/jheld/following{/other_user}", "gists_url": "https://api.github.com/users/jheld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jheld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jheld/subscriptions", "organizations_url": "https://api.github.com/users/jheld/orgs", "repos_url": "https://api.github.com/users/jheld/repos", "events_url": "https://api.github.com/users/jheld/events{/privacy}", "received_events_url": "https://api.github.com/users/jheld/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-02-21T16:26:45Z", "updated_at": "2016-03-06T16:30:46Z", "closed_at": "2016-03-06T16:30:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using the Threaded notifier (and also used the regular one), coalesced and not coalesced.\n\nI keep getting created and modified/closed (depending on which I use for that run) event updates. The files are not open or being touched, from my perspective. I'm doing cloud storage...so I download each file, add a watcher to the directory (not recursive), and continue that way walking the tree and adding a directory watch.\n\nBut I keep getting these updates. I had tried using this project a couple weeks ago on my first attempt and this issue was not occurring. Now it does (fresh code base)...so likely it's something I've done, but maybe you have ideas?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/118", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/118/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/118/events", "html_url": "https://github.com/seb-m/pyinotify/issues/118", "id": 127525911, "node_id": "MDU6SXNzdWUxMjc1MjU5MTE=", "number": 118, "title": "IOError: [Errno 9] Bad file descriptor when launching in daemon mode.", "user": {"login": "Wobak", "id": 536119, "node_id": "MDQ6VXNlcjUzNjExOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/536119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wobak", "html_url": "https://github.com/Wobak", "followers_url": "https://api.github.com/users/Wobak/followers", "following_url": "https://api.github.com/users/Wobak/following{/other_user}", "gists_url": "https://api.github.com/users/Wobak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wobak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wobak/subscriptions", "organizations_url": "https://api.github.com/users/Wobak/orgs", "repos_url": "https://api.github.com/users/Wobak/repos", "events_url": "https://api.github.com/users/Wobak/events{/privacy}", "received_events_url": "https://api.github.com/users/Wobak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-19T20:00:21Z", "updated_at": "2016-01-19T20:02:29Z", "closed_at": "2016-01-19T20:02:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI am migrating my server to a new one, and I've decided to go from scratch on the new server.\nUnfortunately, unable to get it running...\nFirst I created a dedicated user and used a simple git clone and chown. \nThen I just tried the pip install sickrage, which installed it in the /usr/lib/python2.7/site-packages/sickrage directory.\n\nIt all remains the same.\n\nProblem is as follow : \n\n```\n# sickrage\nDownloading pip ...\nDownloading: /usr/lib/python2.7/site-packages/requirements/get-pip.py Bytes: 1412744                                                                       Installing pip ...0%]\nException:\nTraceback (most recent call last):\n  File \"/tmp/tmpfMhPhG/pip.zip/pip/basecommand.py\", line 211, in main\n    status = self.run(options, args)\n  File \"/tmp/tmpfMhPhG/pip.zip/pip/commands/install.py\", line 282, in run\n    wheel_cache\n  File \"/tmp/tmpfMhPhG/pip.zip/pip/basecommand.py\", line 272, in populate_requirement_set\n    wheel_cache=wheel_cache\n  File \"/tmp/tmpfMhPhG/pip.zip/pip/req/req_install.py\", line 213, in from_line\n    wheel_cache=wheel_cache, constraint=constraint)\n  File \"/tmp/tmpfMhPhG/pip.zip/pip/req/req_install.py\", line 67, in __init__\n    req = pkg_resources.Requirement.parse(req)\n  File \"/tmp/tmpfMhPhG/pip.zip/pip/_vendor/pkg_resources/__init__.py\", line 2985, in parse\n    raise ValueError(\"No requirements found\", s)\nValueError: ('No requirements found', '')\nCleaning up downloaded pip files\nPatching SiCKRAGE SSL Context\nException:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/site-packages/pip/basecommand.py\", line 211, in main\n    status = self.run(options, args)\n  File \"/usr/lib/python2.7/site-packages/pip/commands/install.py\", line 282, in run\n    wheel_cache\n  File \"/usr/lib/python2.7/site-packages/pip/basecommand.py\", line 272, in populate_requirement_set\n    wheel_cache=wheel_cache\n  File \"/usr/lib/python2.7/site-packages/pip/req/req_install.py\", line 213, in from_line\n    wheel_cache=wheel_cache, constraint=constraint)\n  File \"/usr/lib/python2.7/site-packages/pip/req/req_install.py\", line 67, in __init__\n    req = pkg_resources.Requirement.parse(req)\n  File \"/usr/lib/python2.7/site-packages/pip/_vendor/pkg_resources/__init__.py\", line 2985, in parse\n    raise ValueError(\"No requirements found\", s)\nValueError: ('No requirements found', u'')\nChecking for required SiCKRAGE packages, please stand by ...\nChecking for upgradable SiCKRAGE packages, please stand by ...\n20:52:50 INFO::MAIN::SiCKRAGE VERSION:[6.0.28] CONFIG:[/usr/lib/python2.7/site-packages/config.ini]\n20:52:50 INFO::TORNADO::Starting SiCKRAGE web server on [http://x.x.x.x:8081/]\n20:52:50 INFO::TORNADO::Launching browser window \n```\n\nThis actually works despite the 2 exceptions : \n\n```\n# ss -natp | grep 8081\nLISTEN     0      128          *:8081                     *:*                   users:((\"sickrage\",pid=13546,fd=7))\n```\n\nBut if I add --daemon : \n\n```\n# sickrage --daemon\nDownloading pip ...\nDownloading: /usr/lib/python2.7/site-packages/requirements/get-pip.py Bytes: 1412744                                                                       Installing pip ...0%]\nException:\nTraceback (most recent call last):\n  File \"/tmp/tmpGzCoP5/pip.zip/pip/basecommand.py\", line 211, in main\n    status = self.run(options, args)\n  File \"/tmp/tmpGzCoP5/pip.zip/pip/commands/install.py\", line 282, in run\n    wheel_cache\n  File \"/tmp/tmpGzCoP5/pip.zip/pip/basecommand.py\", line 272, in populate_requirement_set\n    wheel_cache=wheel_cache\n  File \"/tmp/tmpGzCoP5/pip.zip/pip/req/req_install.py\", line 213, in from_line\n    wheel_cache=wheel_cache, constraint=constraint)\n  File \"/tmp/tmpGzCoP5/pip.zip/pip/req/req_install.py\", line 67, in __init__\n    req = pkg_resources.Requirement.parse(req)\n  File \"/tmp/tmpGzCoP5/pip.zip/pip/_vendor/pkg_resources/__init__.py\", line 2985, in parse\n    raise ValueError(\"No requirements found\", s)\nValueError: ('No requirements found', '')\nCleaning up downloaded pip files\nPatching SiCKRAGE SSL Context\nException:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/site-packages/pip/basecommand.py\", line 211, in main\n    status = self.run(options, args)\n  File \"/usr/lib/python2.7/site-packages/pip/commands/install.py\", line 282, in run\n    wheel_cache\n  File \"/usr/lib/python2.7/site-packages/pip/basecommand.py\", line 272, in populate_requirement_set\n    wheel_cache=wheel_cache\n  File \"/usr/lib/python2.7/site-packages/pip/req/req_install.py\", line 213, in from_line\n    wheel_cache=wheel_cache, constraint=constraint)\n  File \"/usr/lib/python2.7/site-packages/pip/req/req_install.py\", line 67, in __init__\n    req = pkg_resources.Requirement.parse(req)\n  File \"/usr/lib/python2.7/site-packages/pip/_vendor/pkg_resources/__init__.py\", line 2985, in parse\n    raise ValueError(\"No requirements found\", s)\nValueError: ('No requirements found', u'')\nChecking for required SiCKRAGE packages, please stand by ...\nChecking for upgradable SiCKRAGE packages, please stand by ...\n```\n\nI get back to my prompt, but : \n\n```\n# ss -natp | grep 8081\n```\n\nand most importantly : \n\n```\ntime:           Tue 19 Jan 2016 08:32:20 PM CET\ncmdline:        /usr/bin/python /usr/bin/sickrage --daemon\nuid:            0 (root)\nabrt_version:   2.1.11\ndso_list:       python-libs-2.7.5-34.el7.x86_64\nevent_log:\nexecutable:     /usr/bin/sickrage\nhostname:       -------------------- obfuscated\nkernel:         3.10.0-327.4.4.el7.x86_64\nlast_occurrence: 1453233305\npid:            12329\nrunlevel:       N 3\nusername:       root\n\nbacktrace:\n:i18n.py:80:write:IOError: [Errno 9] Bad file descriptor\n:\n:Traceback (most recent call last):\n:  File \"/usr/bin/sickrage\", line 11, in <module>\n:    sys.exit(main())\n:  File \"/usr/lib/python2.7/site-packages/sickrage/__init__.py\", line 759, in main\n:    traceback.print_tb(exc_traceback)\n:  File \"/usr/lib64/python2.7/traceback.py\", line 67, in print_tb\n:    '  File \"%s\", line %d, in %s' % (filename, lineno, name))\n:  File \"/usr/lib64/python2.7/traceback.py\", line 13, in _print\n:    file.write(str+terminator)\n:  File \"/usr/lib/python2.7/site-packages/hachoir_core/i18n.py\", line 80, in write\n:    self.device.write(text)\n:IOError: [Errno 9] Bad file descriptor\n:\n:Local variables in innermost frame:\n:text: '  File \"/usr/lib/python2.7/site-packages/sickrage/__init__.py\", line 755, in main\\n'\n:self: <hachoir_core.i18n.UnicodeStdout object at 0x29145d0>\n```\n\nEvery tutorial I've been reading sounds pretty straightforward but it seems I can't get it working. Did I miss something huge ? (I actually had to install some packages that were missing during gcc compile of some of the pip packages, such as openssl-devel or libffi-devel). \n\nThanks for your help,\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/110", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/110/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/110/events", "html_url": "https://github.com/seb-m/pyinotify/issues/110", "id": 112943486, "node_id": "MDU6SXNzdWUxMTI5NDM0ODY=", "number": 110, "title": "TypeError: unsupported operand type(s) for *: 'Mock' and 'int'", "user": {"login": "decarlof", "id": 5884150, "node_id": "MDQ6VXNlcjU4ODQxNTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5884150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decarlof", "html_url": "https://github.com/decarlof", "followers_url": "https://api.github.com/users/decarlof/followers", "following_url": "https://api.github.com/users/decarlof/following{/other_user}", "gists_url": "https://api.github.com/users/decarlof/gists{/gist_id}", "starred_url": "https://api.github.com/users/decarlof/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decarlof/subscriptions", "organizations_url": "https://api.github.com/users/decarlof/orgs", "repos_url": "https://api.github.com/users/decarlof/repos", "events_url": "https://api.github.com/users/decarlof/events{/privacy}", "received_events_url": "https://api.github.com/users/decarlof/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-23T03:44:13Z", "updated_at": "2015-10-23T04:01:16Z", "closed_at": "2015-10-23T04:01:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "all works fine but when running sphynx/autodocs on it I get an this error that prevents the docs to show any module importing pyinotify. Here is the full error:\n\n```\nfrom pyinotify import WatchManager, IN_DELETE, IN_CREATE, IN_CLOSE_WRITE, ProcessEvent, Notifier\n```\n\n  File \"build/bdist.linux-x86_64/egg/pyinotify.py\", line 353, in <module>\n  File \"build/bdist.linux-x86_64/egg/pyinotify.py\", line 304, in create\n  File \"build/bdist.linux-x86_64/egg/pyinotify.py\", line 290, in **init**\nTypeError: unsupported operand type(s) for *: 'Mock' and 'int'\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/109", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/109/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/109/events", "html_url": "https://github.com/seb-m/pyinotify/issues/109", "id": 109273247, "node_id": "MDU6SXNzdWUxMDkyNzMyNDc=", "number": 109, "title": "not functioning when watch a hard linked file's directory and modify that file from non-watched directory...", "user": {"login": "Lewis-Kang", "id": 8315903, "node_id": "MDQ6VXNlcjgzMTU5MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/8315903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lewis-Kang", "html_url": "https://github.com/Lewis-Kang", "followers_url": "https://api.github.com/users/Lewis-Kang/followers", "following_url": "https://api.github.com/users/Lewis-Kang/following{/other_user}", "gists_url": "https://api.github.com/users/Lewis-Kang/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lewis-Kang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lewis-Kang/subscriptions", "organizations_url": "https://api.github.com/users/Lewis-Kang/orgs", "repos_url": "https://api.github.com/users/Lewis-Kang/repos", "events_url": "https://api.github.com/users/Lewis-Kang/events{/privacy}", "received_events_url": "https://api.github.com/users/Lewis-Kang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-10-01T10:33:00Z", "updated_at": "2015-10-02T08:50:19Z", "closed_at": "2015-10-02T08:50:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/108", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/108/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/108/events", "html_url": "https://github.com/seb-m/pyinotify/issues/108", "id": 108432368, "node_id": "MDU6SXNzdWUxMDg0MzIzNjg=", "number": 108, "title": "ENOSPC in file.go", "user": {"login": "larsks", "id": 82622, "node_id": "MDQ6VXNlcjgyNjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/82622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larsks", "html_url": "https://github.com/larsks", "followers_url": "https://api.github.com/users/larsks/followers", "following_url": "https://api.github.com/users/larsks/following{/other_user}", "gists_url": "https://api.github.com/users/larsks/gists{/gist_id}", "starred_url": "https://api.github.com/users/larsks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larsks/subscriptions", "organizations_url": "https://api.github.com/users/larsks/orgs", "repos_url": "https://api.github.com/users/larsks/repos", "events_url": "https://api.github.com/users/larsks/events{/privacy}", "received_events_url": "https://api.github.com/users/larsks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-26T01:32:01Z", "updated_at": "2015-09-26T01:37:31Z", "closed_at": "2015-09-26T01:37:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "(Opened in error.  Move along. Nothing to see here.)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/107", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/107/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/107/events", "html_url": "https://github.com/seb-m/pyinotify/issues/107", "id": 108136382, "node_id": "MDU6SXNzdWUxMDgxMzYzODI=", "number": 107, "title": "pyinotify.AsyncioNotifier raises Exceptions when used", "user": {"login": "optimuspaul", "id": 1088506, "node_id": "MDQ6VXNlcjEwODg1MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1088506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/optimuspaul", "html_url": "https://github.com/optimuspaul", "followers_url": "https://api.github.com/users/optimuspaul/followers", "following_url": "https://api.github.com/users/optimuspaul/following{/other_user}", "gists_url": "https://api.github.com/users/optimuspaul/gists{/gist_id}", "starred_url": "https://api.github.com/users/optimuspaul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/optimuspaul/subscriptions", "organizations_url": "https://api.github.com/users/optimuspaul/orgs", "repos_url": "https://api.github.com/users/optimuspaul/repos", "events_url": "https://api.github.com/users/optimuspaul/events{/privacy}", "received_events_url": "https://api.github.com/users/optimuspaul/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-24T14:01:08Z", "updated_at": "2015-09-24T14:06:57Z", "closed_at": "2015-09-24T14:06:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using python3 and trying out the AsyncioNotifier, for every event that comes in I get this exception.\n\n```\nxception in callback <bound method AsyncioNotifier.handle_read of <pyinotify.AsyncioNotifier object at 0x7f1af339c2b0>>()\nhandle: Handle(<bound method AsyncioNotifier.handle_read of <pyinotify.AsyncioNotifier object at 0x7f1af339c2b0>>, ())\nTraceback (most recent call last):\n  File \"/usr/lib/python3.4/asyncio/events.py\", line 39, in _run\n    self._callback(*self._args)\n  File \"/usr/local/lib/python3.4/dist-packages/pyinotify.py\", line 1599, in handle_read\n    self.handle_read_callback(self)\n  File \"/usr/local/lib/python3.4/dist-packages/pyinotify.py\", line 910, in __call__\n    return _ProcessEvent.__call__(self, event)\n  File \"/usr/local/lib/python3.4/dist-packages/pyinotify.py\", line 622, in __call__\n    stripped_mask = event.mask - (event.mask & IN_ISDIR)\nAttributeError: 'AsyncioNotifier' object has no attribute 'mask'\n```\n\nLooks like event isn't what we think it is.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/105", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/105/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/105/events", "html_url": "https://github.com/seb-m/pyinotify/issues/105", "id": 94597761, "node_id": "MDU6SXNzdWU5NDU5Nzc2MQ==", "number": 105, "title": "pyinotify mailing list", "user": {"login": "leeclemens", "id": 1250267, "node_id": "MDQ6VXNlcjEyNTAyNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1250267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leeclemens", "html_url": "https://github.com/leeclemens", "followers_url": "https://api.github.com/users/leeclemens/followers", "following_url": "https://api.github.com/users/leeclemens/following{/other_user}", "gists_url": "https://api.github.com/users/leeclemens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leeclemens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leeclemens/subscriptions", "organizations_url": "https://api.github.com/users/leeclemens/orgs", "repos_url": "https://api.github.com/users/leeclemens/repos", "events_url": "https://api.github.com/users/leeclemens/events{/privacy}", "received_events_url": "https://api.github.com/users/leeclemens/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-07-12T20:41:57Z", "updated_at": "2015-07-16T22:38:16Z", "closed_at": "2015-07-16T22:38:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "[Please feel free to create and maintain a 'forum'](https://github.com/seb-m/pyinotify/issues/29#issuecomment-3604596), what if I offered to host a mailing list? What domain? Who is authoritative?  I'm opening the discussion of details required to implement.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/101", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/101/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/101/events", "html_url": "https://github.com/seb-m/pyinotify/issues/101", "id": 84421872, "node_id": "MDU6SXNzdWU4NDQyMTg3Mg==", "number": 101, "title": "read_freq and timeout units confused", "user": {"login": "MOON-CLJ", "id": 1129476, "node_id": "MDQ6VXNlcjExMjk0NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1129476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MOON-CLJ", "html_url": "https://github.com/MOON-CLJ", "followers_url": "https://api.github.com/users/MOON-CLJ/followers", "following_url": "https://api.github.com/users/MOON-CLJ/following{/other_user}", "gists_url": "https://api.github.com/users/MOON-CLJ/gists{/gist_id}", "starred_url": "https://api.github.com/users/MOON-CLJ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MOON-CLJ/subscriptions", "organizations_url": "https://api.github.com/users/MOON-CLJ/orgs", "repos_url": "https://api.github.com/users/MOON-CLJ/repos", "events_url": "https://api.github.com/users/MOON-CLJ/events{/privacy}", "received_events_url": "https://api.github.com/users/MOON-CLJ/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 220410894, "node_id": "MDU6TGFiZWwyMjA0MTA4OTQ=", "url": "https://api.github.com/repos/seb-m/pyinotify/labels/enhancement", "name": "enhancement", "color": "009800", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-06-03T07:57:58Z", "updated_at": "2015-06-04T13:42:46Z", "closed_at": "2015-06-04T13:42:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/seb-m/pyinotify/blob/master/python2/pyinotify.py#L1139\n\nclass Notifier **init** param, read_freq is seconds, and timeout is milliseconds(https://docs.python.org/2/library/select.html#select.poll.poll)\n\nit's very confused, and i think should comment it.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/99", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/99/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/99/events", "html_url": "https://github.com/seb-m/pyinotify/issues/99", "id": 84132767, "node_id": "MDU6SXNzdWU4NDEzMjc2Nw==", "number": 99, "title": "Crash in help() / repr", "user": {"login": "terjeros", "id": 262330, "node_id": "MDQ6VXNlcjI2MjMzMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/262330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terjeros", "html_url": "https://github.com/terjeros", "followers_url": "https://api.github.com/users/terjeros/followers", "following_url": "https://api.github.com/users/terjeros/following{/other_user}", "gists_url": "https://api.github.com/users/terjeros/gists{/gist_id}", "starred_url": "https://api.github.com/users/terjeros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terjeros/subscriptions", "organizations_url": "https://api.github.com/users/terjeros/orgs", "repos_url": "https://api.github.com/users/terjeros/repos", "events_url": "https://api.github.com/users/terjeros/events{/privacy}", "received_events_url": "https://api.github.com/users/terjeros/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 220411189, "node_id": "MDU6TGFiZWwyMjA0MTExODk=", "url": "https://api.github.com/repos/seb-m/pyinotify/labels/bug", "name": "bug", "color": "e11d21", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-06-02T18:07:26Z", "updated_at": "2015-06-04T13:13:53Z", "closed_at": "2015-06-04T13:13:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python 2 and 3 versions crashes:\n\n```\n>>> import pyinotify\n>>> help(pyinotify) \n```\n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib64/python3.3/site.py\", line 474, in __call__\n    return pydoc.help(*args, **kwds)\n  File \"/usr/lib64/python3.3/pydoc.py\", line 1789, in __call__\n    self.help(request)\n  File \"/usr/lib64/python3.3/pydoc.py\", line 1839, in help\n    else: doc(request, 'Help on %s:', output=self._output)\n  File \"/usr/lib64/python3.3/pydoc.py\", line 1575, in doc\n    pager(render_doc(thing, title, forceload))\n  File \"/usr/lib64/python3.3/pydoc.py\", line 1568, in render_doc\n    return title % desc + '\\n\\n' + renderer.document(object, name)\n  File \"/usr/lib64/python3.3/pydoc.py\", line 349, in document\n    if inspect.ismodule(object): return self.docmodule(*args)\n  File \"/usr/lib64/python3.3/pydoc.py\", line 1143, in docmodule\n    contents.append(self.docother(value, key, name, maxlen=70))\n  File \"/usr/lib64/python3.3/pydoc.py\", line 1361, in docother\n    repr = self.repr(object)\n  File \"/usr/lib64/python3.3/reprlib.py\", line 54, in repr\n    return self.repr1(x, self.maxlevel)\n  File \"/usr/lib64/python3.3/pydoc.py\", line 1002, in repr1\n    return cram(stripid(repr(x)), self.maxother)\n  File \"/usr/lib/python3.3/site-packages/pyinotify.py\", line 349, in __repr__\n    return '<%s=%d>' % (self._attrname, self.get_val())\n  File \"/usr/lib/python3.3/site-packages/pyinotify.py\", line 322, in get_val\n    self._inotify_wrapper.str_errno())\nOSError: [Errno 14] Errno=Bad address (EFAULT)\n```\n\n```\n>>> import pyinotify\n>>> help(pyinotify)\n```\n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib64/python2.7/site.py\", line 459, in __call__\n    return pydoc.help(*args, **kwds)\n  File \"/usr/lib64/python2.7/pydoc.py\", line 1745, in __call__\n    self.help(request)\n  File \"/usr/lib64/python2.7/pydoc.py\", line 1792, in help\n    else: doc(request, 'Help on %s:')\n  File \"/usr/lib64/python2.7/pydoc.py\", line 1529, in doc\n    pager(render_doc(thing, title, forceload))\n  File \"/usr/lib64/python2.7/pydoc.py\", line 1524, in render_doc\n    return title % desc + '\\n\\n' + text.document(object, name)\n  File \"/usr/lib64/python2.7/pydoc.py\", line 326, in document\n    if inspect.ismodule(object): return self.docmodule(*args)\n  File \"/usr/lib64/python2.7/pydoc.py\", line 1112, in docmodule\n    contents.append(self.docother(value, key, name, maxlen=70))\n  File \"/usr/lib64/python2.7/pydoc.py\", line 1318, in docother\n    repr = self.repr(object)\n  File \"/usr/lib64/python2.7/repr.py\", line 24, in repr\n    return self.repr1(x, self.maxlevel)\n  File \"/usr/lib64/python2.7/pydoc.py\", line 967, in repr1\n    return cram(stripid(repr(x)), self.maxother)\n  File \"/usr/lib/python2.7/site-packages/pyinotify.py\", line 361, in __repr__\n    return '<%s=%d>' % (self._attrname, self.get_val())\n  File \"/usr/lib/python2.7/site-packages/pyinotify.py\", line 334, in get_val\n    self._inotify_wrapper.str_errno())\nOSError: [Errno 38] Errno=Function not implemented (ENOSYS)\n\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/98", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/98/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/98/events", "html_url": "https://github.com/seb-m/pyinotify/issues/98", "id": 76332494, "node_id": "MDU6SXNzdWU3NjMzMjQ5NA==", "number": 98, "title": "Loop stops when tries to call cleanup method", "user": {"login": "alasarr", "id": 1161870, "node_id": "MDQ6VXNlcjExNjE4NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1161870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alasarr", "html_url": "https://github.com/alasarr", "followers_url": "https://api.github.com/users/alasarr/followers", "following_url": "https://api.github.com/users/alasarr/following{/other_user}", "gists_url": "https://api.github.com/users/alasarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/alasarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alasarr/subscriptions", "organizations_url": "https://api.github.com/users/alasarr/orgs", "repos_url": "https://api.github.com/users/alasarr/repos", "events_url": "https://api.github.com/users/alasarr/events{/privacy}", "received_events_url": "https://api.github.com/users/alasarr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-05-14T11:48:27Z", "updated_at": "2015-08-10T14:25:46Z", "closed_at": "2015-06-04T11:22:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nAfter several hours running pynotify watching a folder, It suddenly stops with the following stacktrace.\n\n```\nFile \"/app/meteo/filechangeswatcher.py\", line 46, in run\n    self.notifier.loop()\n  File \"/usr/local/lib/python2.7/dist-packages/pyinotify.py\", line 1424, in loop\n    self.process_events()\n  File \"/usr/local/lib/python2.7/dist-packages/pyinotify.py\", line 1322, in process_events\n    self._sys_proc_fun.cleanup()  # remove olds MOVED_* events records\nAttributeError: 'NoneType' object has no attribute 'cleanup'\n```\n\nI'm listening to the following events: _pyinotify.IN_CLOSE_WRITE|pyinotify.IN_CREATE|pyinotify.IN_MOVED_TO_. \n\nMy process handler looks like:\n\n```\n\nclass EventHandler(pyinotify.ProcessEvent):\n\n    def  __init__(self,conn,logger): \n        pyinotify.ProcessEvent.__init__(self)\n        // something here....\n\n    def process_IN_CLOSE_WRITE(self, event):\n        self.__process(event.pathname)\n\n    def process_IN_CREATE(self, event):\n        self.__process(event.pathname)\n\n    def process_IN_MOVED_TO(self, event):\n        self.__process(event.pathname)\n\n    def __process(self, f_abspath):\n          // something here\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/97", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/97/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/97/events", "html_url": "https://github.com/seb-m/pyinotify/issues/97", "id": 63735052, "node_id": "MDU6SXNzdWU2MzczNTA1Mg==", "number": 97, "title": "spawn ignoring provided env or cwd while searching for command path", "user": {"login": "phones24", "id": 1055297, "node_id": "MDQ6VXNlcjEwNTUyOTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1055297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phones24", "html_url": "https://github.com/phones24", "followers_url": "https://api.github.com/users/phones24/followers", "following_url": "https://api.github.com/users/phones24/following{/other_user}", "gists_url": "https://api.github.com/users/phones24/gists{/gist_id}", "starred_url": "https://api.github.com/users/phones24/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phones24/subscriptions", "organizations_url": "https://api.github.com/users/phones24/orgs", "repos_url": "https://api.github.com/users/phones24/repos", "events_url": "https://api.github.com/users/phones24/events{/privacy}", "received_events_url": "https://api.github.com/users/phones24/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-03-23T14:22:02Z", "updated_at": "2015-06-04T14:06:09Z", "closed_at": "2015-06-04T14:06:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems \"cwd\" and \"env\" kwargs completely ignored while \"spawn\" is searching for executable path.\nenv['PATH'] should be taken into account.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/93", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/93/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/93/events", "html_url": "https://github.com/seb-m/pyinotify/issues/93", "id": 59898696, "node_id": "MDU6SXNzdWU1OTg5ODY5Ng==", "number": 93, "title": " IOError: [Errno 9] Bad file descriptor", "user": {"login": "Fangfenghua", "id": 7466862, "node_id": "MDQ6VXNlcjc0NjY4NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/7466862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Fangfenghua", "html_url": "https://github.com/Fangfenghua", "followers_url": "https://api.github.com/users/Fangfenghua/followers", "following_url": "https://api.github.com/users/Fangfenghua/following{/other_user}", "gists_url": "https://api.github.com/users/Fangfenghua/gists{/gist_id}", "starred_url": "https://api.github.com/users/Fangfenghua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Fangfenghua/subscriptions", "organizations_url": "https://api.github.com/users/Fangfenghua/orgs", "repos_url": "https://api.github.com/users/Fangfenghua/repos", "events_url": "https://api.github.com/users/Fangfenghua/events{/privacy}", "received_events_url": "https://api.github.com/users/Fangfenghua/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-03-05T03:10:58Z", "updated_at": "2015-06-04T13:42:46Z", "closed_at": "2015-06-04T13:42:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "localhost tset.py ERROR [type:run] [pid:6822] [Thread-36] [test.py:56 run] file monitor process events got a exception, e=[Errno 9] Bad file descriptor, trace=Traceback (most recent call last):   File \"/test.py\", line 54, in run     notifier.read_events()   File \"test.py\", line 1239, in read_events     if fcntl.ioctl(self._fd, termios.FIONREAD, buf_, 1) == -1: IOError: [Errno 9] Bad file descriptor\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/91", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/91/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/91/events", "html_url": "https://github.com/seb-m/pyinotify/issues/91", "id": 56328363, "node_id": "MDU6SXNzdWU1NjMyODM2Mw==", "number": 91, "title": "lose IN_CLOSE_WRITE event", "user": {"login": "zhaochunqi", "id": 4682835, "node_id": "MDQ6VXNlcjQ2ODI4MzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/4682835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhaochunqi", "html_url": "https://github.com/zhaochunqi", "followers_url": "https://api.github.com/users/zhaochunqi/followers", "following_url": "https://api.github.com/users/zhaochunqi/following{/other_user}", "gists_url": "https://api.github.com/users/zhaochunqi/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhaochunqi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhaochunqi/subscriptions", "organizations_url": "https://api.github.com/users/zhaochunqi/orgs", "repos_url": "https://api.github.com/users/zhaochunqi/repos", "events_url": "https://api.github.com/users/zhaochunqi/events{/privacy}", "received_events_url": "https://api.github.com/users/zhaochunqi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-03T03:17:55Z", "updated_at": "2015-02-06T10:34:11Z", "closed_at": "2015-02-06T10:34:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\uff0c\nI've tried watch IN_CLOSE_WRITE event  for my new files .\nIt works pretty good when I watch IN_CLOSE_WRITE only, when I watch IN_CREATE and IN_CLOSE_WRITE , it will lose lot's of IN_CLOSE_WRITE event .\n\n![gif image](http://ww1.sinaimg.cn/large/6277837dgw1eovzznlwmfg21400mo1l1.gif)\n\nIt dosen't work when I import pyinotify either. I bugs me a lot.Hope you give me some advice.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/90", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/90/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/90/events", "html_url": "https://github.com/seb-m/pyinotify/issues/90", "id": 53914183, "node_id": "MDU6SXNzdWU1MzkxNDE4Mw==", "number": 90, "title": "0.9.5 release", "user": {"login": "szepeviktor", "id": 952007, "node_id": "MDQ6VXNlcjk1MjAwNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/952007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/szepeviktor", "html_url": "https://github.com/szepeviktor", "followers_url": "https://api.github.com/users/szepeviktor/followers", "following_url": "https://api.github.com/users/szepeviktor/following{/other_user}", "gists_url": "https://api.github.com/users/szepeviktor/gists{/gist_id}", "starred_url": "https://api.github.com/users/szepeviktor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/szepeviktor/subscriptions", "organizations_url": "https://api.github.com/users/szepeviktor/orgs", "repos_url": "https://api.github.com/users/szepeviktor/repos", "events_url": "https://api.github.com/users/szepeviktor/events{/privacy}", "received_events_url": "https://api.github.com/users/szepeviktor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-01-09T20:58:57Z", "updated_at": "2015-01-09T22:11:42Z", "closed_at": "2015-01-09T22:10:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Do you see the release date of 0.9.5?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/87", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/87/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/87/events", "html_url": "https://github.com/seb-m/pyinotify/issues/87", "id": 50070634, "node_id": "MDU6SXNzdWU1MDA3MDYzNA==", "number": 87, "title": "Do these 4 issues still exist regarding correctness, performance, and locking?", "user": {"login": "RobBednark", "id": 1076883, "node_id": "MDQ6VXNlcjEwNzY4ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1076883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RobBednark", "html_url": "https://github.com/RobBednark", "followers_url": "https://api.github.com/users/RobBednark/followers", "following_url": "https://api.github.com/users/RobBednark/following{/other_user}", "gists_url": "https://api.github.com/users/RobBednark/gists{/gist_id}", "starred_url": "https://api.github.com/users/RobBednark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RobBednark/subscriptions", "organizations_url": "https://api.github.com/users/RobBednark/orgs", "repos_url": "https://api.github.com/users/RobBednark/repos", "events_url": "https://api.github.com/users/RobBednark/events{/privacy}", "received_events_url": "https://api.github.com/users/RobBednark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-11-25T19:11:19Z", "updated_at": "2014-12-22T16:12:18Z", "closed_at": "2014-12-22T16:12:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was considering using the Python PyPI package `pyinotify`, but got concerned when I saw this post:\n  [\"Why you should not use pyinotify\"](http://www.serpentine.com/blog/2008/01/04/why-you-should-not-use-pyinotify/)\n\nThis post is from 01/2008, and there have been a lot of commits since then, and I'm wondering if these issues have been resolved?  The issues from the post are:\n1. \"A program using pyinotify can easily lose track of parts of its directory hierarchy. The library doesn\u2019t raise an OSError exception if the inotify_add_watch system call fails: instead, it propagates the -1 error result up to the caller as a value in a dict, but without the value of errno to tell the caller why the error occurred.  It\u2019s thus trivial to miss errors entirely, because the usual mechanism of raising exceptions isn\u2019t used.\"\n2.  \"Almost as bad, it\u2019s impossible to distinguish between recoverable (tried to add a watch on a directory that no longer exists) and fatal (hit the system max_user_watches limit) errors.\"\n3. \"Under the hood, though, the implementation is terrible. On every event, the library scans every event that the inotify interface could possibly report, and checks to see if your class implements one of several possible appropriately named methods. This means it\u2019s traversing a 20-element dict, and performing up to 60 attribute lookups (of which up to 40 are based on %-formatted names), for every reported event.  \n   This has disastrous performance implications. If you write a simple monitoring tool that uses pyinotify, use it to monitor activity in a Linux kernel source tree, and then start a build in that tree, try running top while your build runs. When I did this, I found that pyinotify was consuming an entire CPU trying to keep up with the flood of notification events.\"\n4. \"All that needless attribute lookup churn isn\u2019t the only problem: pyinotify uses a threading.RLock to protect every access to every attribute of its Watch class, by providing its own `__getattribute__` and `__setattr__` methods.  \n   I can\u2019t guess what the author thinks he\u2019s protecting himself from, but he\u2019s got a solid defence mounted against both correctness and performance there. (Blindly locking individual attributes isn\u2019t going to protect the consistency of an entire data structure, and delegating responsibility for locking out to callers, who are probably all single-threaded anyway, might help to recover a bit of the execrable performance. Watch isn\u2019t often on the fast path, thank goodness.)\"\n\nNotes:  \nBryan O'Sullivan, the author of that post, wrote python-inotify to resolve those issues ([original bitbucket repository by Bryan O'Sullivan](https://bitbucket.org/bos/python-inotify); [PyPI page](https://pypi.python.org/pypi/python-inotify); [new repo by Jan Kanis](https://bitbucket.org/JanKanis/python-inotify) ).\n\nI posted [this issue on stackoverflow](http://stackoverflow.com/questions/27115860/does-pyinotify-still-have-these-4-issues-around-correctness-performance-lockin), and somebody wisely suggested that I open an issue for it here.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/86", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/86/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/86/events", "html_url": "https://github.com/seb-m/pyinotify/issues/86", "id": 46422268, "node_id": "MDU6SXNzdWU0NjQyMjI2OA==", "number": 86, "title": "watching the IN_CLOSE_NOWRITE event of a file that is not a directory", "user": {"login": "dtenenba", "id": 2286826, "node_id": "MDQ6VXNlcjIyODY4MjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2286826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtenenba", "html_url": "https://github.com/dtenenba", "followers_url": "https://api.github.com/users/dtenenba/followers", "following_url": "https://api.github.com/users/dtenenba/following{/other_user}", "gists_url": "https://api.github.com/users/dtenenba/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtenenba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtenenba/subscriptions", "organizations_url": "https://api.github.com/users/dtenenba/orgs", "repos_url": "https://api.github.com/users/dtenenba/repos", "events_url": "https://api.github.com/users/dtenenba/events{/privacy}", "received_events_url": "https://api.github.com/users/dtenenba/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-10-21T17:40:42Z", "updated_at": "2014-10-21T18:25:56Z", "closed_at": "2014-10-21T18:25:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nEven though I explicitly set my flags to be IN_CLOSE_NOWRITE, they seem to be set to IN_CLOSE_NOWRITE|IN_ISDIR, which makes it impossible to watch for the IN_CLOSE_NOWRITE event on a file that is not a directory (which is exactly what I want to do).\n\nHere's my code:\n\n```\nimport pynotify\n\nwm = pyinotify.WatchManager()\n# Associate this WatchManager with a Notifier (will be used to report and\n# process events).\nnotifier = pyinotify.Notifier(wm)\nwm.add_watch('/mydir', pyinotify.IN_CLOSE_NOWRITE, rec=True)\n# Loop forever and handle events.\nnotifier.loop()\n```\n\nSome sample output:\n\n```\n<Event dir=True mask=0x40000010 maskname=IN_CLOSE_NOWRITE|IN_ISDIR name=2 path=/mydir pathname=/mydir/2 wd=1 >\n```\n\nWhen I copy a file to /mydir, I never see an event reflecting this. I see events when directories change.\n\nWhy, when I set my mask to IN_CLOSE_NOWRITE, does it appear in the output as IN_CLOSE_NOWRITE|IN_ISDIR?\n\nEven if I set my mask to ALL_EVENTS, I never see the IN_CLOSE_NOWRITE event on a non-directory file. The only way I have seen it is if I use the [plain loop\nexample](https://github.com/seb-m/pyinotify/blob/master/python2/examples/loop.py), but in that case I don't have a custom event handler in which to take action on the event.\n\nAm I doing something wrong or is this a bug?\nThanks.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/84", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/84/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/84/events", "html_url": "https://github.com/seb-m/pyinotify/issues/84", "id": 45463014, "node_id": "MDU6SXNzdWU0NTQ2MzAxNA==", "number": 84, "title": "sysctl setting fails on x86_64", "user": {"login": "grubberr", "id": 195743, "node_id": "MDQ6VXNlcjE5NTc0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/195743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grubberr", "html_url": "https://github.com/grubberr", "followers_url": "https://api.github.com/users/grubberr/followers", "following_url": "https://api.github.com/users/grubberr/following{/other_user}", "gists_url": "https://api.github.com/users/grubberr/gists{/gist_id}", "starred_url": "https://api.github.com/users/grubberr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grubberr/subscriptions", "organizations_url": "https://api.github.com/users/grubberr/orgs", "repos_url": "https://api.github.com/users/grubberr/repos", "events_url": "https://api.github.com/users/grubberr/events{/privacy}", "received_events_url": "https://api.github.com/users/grubberr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 220411189, "node_id": "MDU6TGFiZWwyMjA0MTExODk=", "url": "https://api.github.com/repos/seb-m/pyinotify/labels/bug", "name": "bug", "color": "e11d21", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-10-10T09:35:51Z", "updated_at": "2015-06-04T13:13:20Z", "closed_at": "2015-06-04T13:13:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have downloaded the latest version of pyinotify.py from github\nand run such script:\n\n```\n#!/usr/bin/python\n\nimport pyinotify\npyinotify.max_queued_events.value = 32768\n```\n\non 32bit centos 6.5 it works OK\non 64bit centos 6.5 it fails with\n\n```\nTraceback (most recent call last):\n  File \"./t.py\", line 5, in <module>\n    pyinotify.max_queued_events.value = 32768\n  File \"/root/pyinotify.py\", line 354, in set_val\n    self._inotify_wrapper.str_errno())\nOSError: [Errno 14] Errno=Bad address (EFAULT)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/82", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/82/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/82/events", "html_url": "https://github.com/seb-m/pyinotify/issues/82", "id": 41484440, "node_id": "MDU6SXNzdWU0MTQ4NDQ0MA==", "number": 82, "title": "Get the time of watching files or folder", "user": {"login": "skanel", "id": 8022270, "node_id": "MDQ6VXNlcjgwMjIyNzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8022270?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skanel", "html_url": "https://github.com/skanel", "followers_url": "https://api.github.com/users/skanel/followers", "following_url": "https://api.github.com/users/skanel/following{/other_user}", "gists_url": "https://api.github.com/users/skanel/gists{/gist_id}", "starred_url": "https://api.github.com/users/skanel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skanel/subscriptions", "organizations_url": "https://api.github.com/users/skanel/orgs", "repos_url": "https://api.github.com/users/skanel/repos", "events_url": "https://api.github.com/users/skanel/events{/privacy}", "received_events_url": "https://api.github.com/users/skanel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-08-29T09:29:09Z", "updated_at": "2014-08-31T15:04:17Z", "closed_at": "2014-08-29T12:24:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have used this code:\n\n```\n# Notifier example from tutorial\n#\n# See: http://github.com/seb-m/pyinotify/wiki/Tutorial\n#\nimport pyinotify\n\nwm = pyinotify.WatchManager()  # Watch Manager\nmask = pyinotify.IN_DELETE | pyinotify.IN_CREATE  # watched events\n\nclass EventHandler(pyinotify.ProcessEvent):\n    def process_IN_CREATE(self, event):\n        print \"Creating:\", event.pathname\n\n    def process_IN_DELETE(self, event):\n        print \"Removing:\", event.pathname\n\nhandler = EventHandler()\nnotifier = pyinotify.Notifier(wm, handler)\nwdd = wm.add_watch('/tmp', mask, rec=True)\n\nnotifier.loop()\n```\n\nI have a look in document , but did not see any information about get the time \n\nexample we can print:\n\n```\n   print \"Removing:\", event.pathname+\"on date time\" +event.datetime\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/81", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/81/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/81/events", "html_url": "https://github.com/seb-m/pyinotify/issues/81", "id": 39325033, "node_id": "MDU6SXNzdWUzOTMyNTAzMw==", "number": 81, "title": "ExcludeFilter examples are totally misleading", "user": {"login": "orymate", "id": 207816, "node_id": "MDQ6VXNlcjIwNzgxNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/207816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orymate", "html_url": "https://github.com/orymate", "followers_url": "https://api.github.com/users/orymate/followers", "following_url": "https://api.github.com/users/orymate/following{/other_user}", "gists_url": "https://api.github.com/users/orymate/gists{/gist_id}", "starred_url": "https://api.github.com/users/orymate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orymate/subscriptions", "organizations_url": "https://api.github.com/users/orymate/orgs", "repos_url": "https://api.github.com/users/orymate/repos", "events_url": "https://api.github.com/users/orymate/events{/privacy}", "received_events_url": "https://api.github.com/users/orymate/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-08-01T20:32:59Z", "updated_at": "2014-08-16T16:51:52Z", "closed_at": "2014-08-16T16:51:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "ExcludeFilter uses `re.match`, not `re.search`, while all the examples of the API docs use `^` suggesting you don't have to start the expressions with `.*` for partial matches (but you have to).\n\n``` python\nef1 = ExcludeFilter([\"^/etc/rc.*\", \"^/etc/hostname\"])\n```\n\nis equivalent to\n\n``` python\nef1 = ExcludeFilter([\"/etc/rc.*\", \"/etc/hostname\"])\n```\n\nbut the former is redundant and misleading.\n\nSo if you want to exclude hidden files, you have to use\n\n``` python\n\".*/[.]\"\n```\n\nand not what the examples suggest:\n\n``` python\n\"/[.]\"\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/79", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/79/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/79/events", "html_url": "https://github.com/seb-m/pyinotify/issues/79", "id": 37730867, "node_id": "MDU6SXNzdWUzNzczMDg2Nw==", "number": 79, "title": "Python 3 classifiers", "user": {"login": "hwkns", "id": 746123, "node_id": "MDQ6VXNlcjc0NjEyMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/746123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hwkns", "html_url": "https://github.com/hwkns", "followers_url": "https://api.github.com/users/hwkns/followers", "following_url": "https://api.github.com/users/hwkns/following{/other_user}", "gists_url": "https://api.github.com/users/hwkns/gists{/gist_id}", "starred_url": "https://api.github.com/users/hwkns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hwkns/subscriptions", "organizations_url": "https://api.github.com/users/hwkns/orgs", "repos_url": "https://api.github.com/users/hwkns/repos", "events_url": "https://api.github.com/users/hwkns/events{/privacy}", "received_events_url": "https://api.github.com/users/hwkns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-07-12T23:30:13Z", "updated_at": "2014-07-13T07:15:46Z", "closed_at": "2014-07-13T07:15:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed that Python 3.3 and 3.4 and PyPy are in `.travis.yml` but they are missing from the classifiers in `setup.py`.  Is there any reason not to add them?  I would be happy to submit a pull request, adding the following:\n\n```\nProgramming Language :: Python :: 3.3\nProgramming Language :: Python :: 3.4\nProgramming Language :: Python :: Implementation :: CPython\nProgramming Language :: Python :: Implementation :: PyPy\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/76", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/76/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/76/events", "html_url": "https://github.com/seb-m/pyinotify/issues/76", "id": 37204740, "node_id": "MDU6SXNzdWUzNzIwNDc0MA==", "number": 76, "title": "Notifier.loop method can fail by exception", "user": {"login": "grubberr", "id": 195743, "node_id": "MDQ6VXNlcjE5NTc0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/195743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grubberr", "html_url": "https://github.com/grubberr", "followers_url": "https://api.github.com/users/grubberr/followers", "following_url": "https://api.github.com/users/grubberr/following{/other_user}", "gists_url": "https://api.github.com/users/grubberr/gists{/gist_id}", "starred_url": "https://api.github.com/users/grubberr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grubberr/subscriptions", "organizations_url": "https://api.github.com/users/grubberr/orgs", "repos_url": "https://api.github.com/users/grubberr/repos", "events_url": "https://api.github.com/users/grubberr/events{/privacy}", "received_events_url": "https://api.github.com/users/grubberr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-07-05T19:23:49Z", "updated_at": "2016-10-14T06:51:49Z", "closed_at": "2014-07-05T20:33:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I monitor pretty big tree of files with pyinotify\nand time to time Notifier.loop method fails with such exception\n\n```\nTraceback (most recent call last):\n  File \"/opt/hosting/scripts/fsmon.py\", line 315, in <module>\n    notifier.loop(callback=on_loop)\n  File \"/opt/hosting/software/python/lib/python2.7/site-packages/pyinotify.py\", line 1400, in loop\n    self.process_events()\n  File \"/opt/hosting/software/python/lib/python2.7/site-packages/pyinotify.py\", line 1291, in process_events\n    revent = self._sys_proc_fun(raw_event)  # system processings\n  File \"/opt/hosting/software/python/lib/python2.7/site-packages/pyinotify.py\", line 662, in __call__\n    return meth(event)\n  File \"/opt/hosting/software/python/lib/python2.7/site-packages/pyinotify.py\", line 734, in process_IN_CREATE\n    for name in os.listdir(created_dir):\nOSError: [Errno 2] No such file or directory: '/home/mongo7/public_html/ognom/cache/db_cache/e11d28c667b05853606c9459b023f81d'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/75", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/75/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/75/events", "html_url": "https://github.com/seb-m/pyinotify/issues/75", "id": 37172533, "node_id": "MDU6SXNzdWUzNzE3MjUzMw==", "number": 75, "title": "IN_CLOSE_WRITE not working ", "user": {"login": "PureW", "id": 85910, "node_id": "MDQ6VXNlcjg1OTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/85910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PureW", "html_url": "https://github.com/PureW", "followers_url": "https://api.github.com/users/PureW/followers", "following_url": "https://api.github.com/users/PureW/following{/other_user}", "gists_url": "https://api.github.com/users/PureW/gists{/gist_id}", "starred_url": "https://api.github.com/users/PureW/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PureW/subscriptions", "organizations_url": "https://api.github.com/users/PureW/orgs", "repos_url": "https://api.github.com/users/PureW/repos", "events_url": "https://api.github.com/users/PureW/events{/privacy}", "received_events_url": "https://api.github.com/users/PureW/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-07-04T14:40:12Z", "updated_at": "2014-07-07T07:21:27Z", "closed_at": "2014-07-04T14:57:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using the following simple example code to generate events on CLOSE_WRITE:\n\n```\nimport sys\nimport pyinotify\nMASK = pyinotify.IN_CLOSE_WRITE\nclass handler(pyinotify.ProcessEvent):\n    def process_IN_CREATE(self, event):\n        print event.pathname\nwm = pyinotify.WatchManager()\nhandler = handler()\nnotifier = pyinotify.Notifier(wm, handler)\nwm.add_watch(sys.argv[1], MASK, rec=True)\nnotifier.loop()\n```\n\nI call this program with `python test_inotify.py /tmp/`. However, I get no printout when closing files opened for writing. \n\nUsing `inotifywait` to verify, it turns out the signals work just fine:\n\n```\ninotifywait -e close_write -rm /tmp/\n```\n\nThat command does react to closing files opened for writing.\n\nSo either there's a bug in pyinotify, or there's an error in the example-program I posted.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/73", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/73/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/73/events", "html_url": "https://github.com/seb-m/pyinotify/issues/73", "id": 36147294, "node_id": "MDU6SXNzdWUzNjE0NzI5NA==", "number": 73, "title": "improve error handling for sysctl settings", "user": {"login": "grubberr", "id": 195743, "node_id": "MDQ6VXNlcjE5NTc0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/195743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grubberr", "html_url": "https://github.com/grubberr", "followers_url": "https://api.github.com/users/grubberr/followers", "following_url": "https://api.github.com/users/grubberr/following{/other_user}", "gists_url": "https://api.github.com/users/grubberr/gists{/gist_id}", "starred_url": "https://api.github.com/users/grubberr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grubberr/subscriptions", "organizations_url": "https://api.github.com/users/grubberr/orgs", "repos_url": "https://api.github.com/users/grubberr/repos", "events_url": "https://api.github.com/users/grubberr/events{/privacy}", "received_events_url": "https://api.github.com/users/grubberr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-06-20T07:50:17Z", "updated_at": "2014-07-06T11:26:09Z", "closed_at": "2014-07-06T11:26:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "if I run this:\n\n```\nimport pyinotify\npyinotify.max_queued_events.value = 32768\n```\n\nunder NON-privileged user\nI just got nothing \nbut in reality I don't have permissions to set that value\n\n```\n_sysctl({{CTL_FS, 14, 3}, 3, 0xb76ddfc8, 4, 0xb76fd7e8, -1217406568}) = -1 EPERM (Operation not permitted)\n```\n\nmaybe it worth to throw some exceptions in such cases ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/72", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/72/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/72/events", "html_url": "https://github.com/seb-m/pyinotify/issues/72", "id": 34752919, "node_id": "MDU6SXNzdWUzNDc1MjkxOQ==", "number": 72, "title": "EventsCodes missing intrinsic attributes, aka EventsCodes.IN_FOO", "user": {"login": "FirefighterBlu3", "id": 3165044, "node_id": "MDQ6VXNlcjMxNjUwNDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3165044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FirefighterBlu3", "html_url": "https://github.com/FirefighterBlu3", "followers_url": "https://api.github.com/users/FirefighterBlu3/followers", "following_url": "https://api.github.com/users/FirefighterBlu3/following{/other_user}", "gists_url": "https://api.github.com/users/FirefighterBlu3/gists{/gist_id}", "starred_url": "https://api.github.com/users/FirefighterBlu3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FirefighterBlu3/subscriptions", "organizations_url": "https://api.github.com/users/FirefighterBlu3/orgs", "repos_url": "https://api.github.com/users/FirefighterBlu3/repos", "events_url": "https://api.github.com/users/FirefighterBlu3/events{/privacy}", "received_events_url": "https://api.github.com/users/FirefighterBlu3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-06-02T08:11:52Z", "updated_at": "2014-07-06T11:38:56Z", "closed_at": "2014-07-06T11:38:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "when imported as \"import pyinotify\", the event codes are added to the \"pyinotify\" global, aka pyinotify.IN_FOO now exists. however, the example documentation for pyinotify uses the following form:\n\n``` python\nfrom pyinotify import WatchManager, Notifier, EventsCodes\n\nmask = EventsCodes.IN_FOO\n```\n\nthis attribute doesn't exist but it can easily be fixed with:\n\n```\n--- /usr/lib/python3.4/site-packages/pyinotify.py.orig\n+++ /usr/lib/python3.4/site-packages/pyinotify.py\n@@ -477,6 +477,7 @@\n     # and masknames accessible by values.\n     for name, val in valc.items():\n         globals()[name] = val\n+        setattr(EventsCodes, name, val)\n         EventsCodes.ALL_VALUES[val] = name\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/71", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/71/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/71/events", "html_url": "https://github.com/seb-m/pyinotify/issues/71", "id": 34539471, "node_id": "MDU6SXNzdWUzNDUzOTQ3MQ==", "number": 71, "title": "using cp to copy dir to monitor dir,can not be monitored", "user": {"login": "hnuzhoulin", "id": 6347012, "node_id": "MDQ6VXNlcjYzNDcwMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6347012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hnuzhoulin", "html_url": "https://github.com/hnuzhoulin", "followers_url": "https://api.github.com/users/hnuzhoulin/followers", "following_url": "https://api.github.com/users/hnuzhoulin/following{/other_user}", "gists_url": "https://api.github.com/users/hnuzhoulin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hnuzhoulin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hnuzhoulin/subscriptions", "organizations_url": "https://api.github.com/users/hnuzhoulin/orgs", "repos_url": "https://api.github.com/users/hnuzhoulin/repos", "events_url": "https://api.github.com/users/hnuzhoulin/events{/privacy}", "received_events_url": "https://api.github.com/users/hnuzhoulin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-05-29T09:04:27Z", "updated_at": "2014-07-06T11:42:10Z", "closed_at": "2014-07-06T11:42:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,guys,I use pyinotify to monitor the dir /root/test\nwhen I cp a dir to it.nothing was monitored.\nmy code is below,\n\n``` python\nimport sys\nimport pyinotify\n\ndef mirror(command):\n    try:\n        retcode = subprocess.call(command, shell=True)\n        if retcode < 0:\n            logger.debug('Child was terminated by signal')\n            logger.debug( -retcode )\n    except OSError as ose:\n        logger.debug( 'Execution failed:')\n        logger.debug(  ose )\n\nclass PTmp(pyinotify.ProcessEvent):    \n    def process_IN_CREATE(self, event):\n        logger=logging.getLogger('PTmp')\n        if not EXCLUDE_PAT.match(event.pathname):\n            if os.path.isdir(event.pathname):\n                logger.debug('event name:'+event.maskname+',dir ' + event.pathname + ' is created.')\n            else:\n                logger.debug('event name:'+event.maskname+',file ' + event.pathname + ' is created.')\n        else:\n            logger.debug('event name:'+event.maskname+',file '+ event.pathname +' match exclude pattens.')\n\n    def process_IN_MOVED_FROM(self, event):\n        logger=logging.getLogger('PTmp')\n        if not EXCLUDE_PAT.match(event.pathname):\n            if os.path.isdir(event.pathname):\n                logger.debug('event name:'+event.maskname+',action of dir ' + event.pathname + ' is delete')\n                S3_COMMAND = S3_PATH + ' delete dir ' + event.pathname\n                mirror(S3_COMMAND)\n            else:\n                logger.debug('event name:'+event.maskname+',action of file ' + event.pathname + ' is delete')\n                S3_COMMAND = S3_PATH + ' delete file ' + event.pathname\n                mirror(S3_COMMAND)\n\n    def process_IN_MOVED_TO(self, event):\n        logger=logging.getLogger('PTmp')\n        if not EXCLUDE_PAT.match(event.pathname):\n            if os.path.isdir(event.pathname):\n                logger.debug('event name:'+event.maskname+',action of dir ' + event.pathname + ' is edit')\n                S3_COMMAND = S3_PATH + ' edit dir ' + event.pathname\n                mirror(S3_COMMAND)\n            else:\n                logger.debug('event name:'+event.maskname+',action of file ' + event.pathname + ' is edit')\n                S3_COMMAND = S3_PATH + ' edit file ' + event.pathname\n                mirror(S3_COMMAND)\n        else:\n            logger.debug('event name:'+event.maskname+',file '+ event.pathname +' match exclude pattens.')\n\n    def process_IN_DELETE(self, event):\n        logger=logging.getLogger('PTmp')\n        if not EXCLUDE_PAT.match(event.pathname):\n            if os.path.isdir(event.pathname):\n                logger.debug('event name:'+event.maskname+',action of dir ' + event.pathname + ' is delete')\n            else:\n                logger.debug('event name:'+event.maskname+',action of file ' + event.pathname + ' is delete')\n                S3_COMMAND = S3_PATH + ' delete file ' + event.pathname\n                mirror(S3_COMMAND)\n\n    def process_IN_DELETE_SELF(self, event):\n        logger=logging.getLogger('PTmp')\n        if not EXCLUDE_PAT.match(event.pathname):\n            if os.path.isdir(event.pathname):\n                logger.debug('event name:'+event.maskname+',action of dir ' + event.pathname + ' is delete')\n            else:\n                logger.debug('event name:'+event.maskname+',action of file ' + event.pathname + ' is delete')\n                S3_COMMAND = S3_PATH + ' delete file ' + event.pathname\n                mirror(S3_COMMAND)\n\n    def process_IN_CLOSE_WRITE(self, event):\n        logger=logging.getLogger('PTmp')\n        if not EXCLUDE_PAT.match(event.pathname):\n            logger.debug('event name:'+event.maskname+',action of ' + event.pathname + ' is edit')\n            S3_COMMAND = S3_PATH + ' edit file ' + event.pathname\n            mirror(S3_COMMAND)\n        else:\n            logger.debug('event name:'+event.maskname+',file '+ event.pathname +' match exclude pattens.')\n\ndef main():\n    global EXCLUDE_PAT\n    EXCLUDE_PAT=re.compile('.*\\/\\..*\\.sw|.*\\/.*~')\n    logger = logging.getLogger('s3sync')\n    log_level = logging.DEBUG\n    logging.basicConfig(level=log_level,)\n    PIDFILE='./pidfile'\n    FREQ=0\n    wmg = pyinotify.WatchManager()\n    mask = pyinotify.IN_CLOSE_WRITE | pyinotify.IN_DELETE | \\\n           pyinotify.IN_MOVED_TO | pyinotify.IN_MOVED_FROM | \\\n           pyinotify.IN_DELETE_SELF | pyinotify.IN_CREATE  |  \\\n           pyinotify.IN_MODIFY\n    ptm = PTmp()\n    notifier = pyinotify.Notifier(wmg, ptm, read_freq=FREQ)\n    try:\n        wmg.add_watch(sys.argv[1], mask, rec=True, auto_add=True)\n    except pyinotify.WatchManagerError as err:\n        logger.warn(err)\n        logger.warn(err.wmd)\n    print('daemon...')\n    notifier.loop(pid_file=PIDFILE)\n\nif __name__ == \"__main__\":\n    main()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/70", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/70/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/70/events", "html_url": "https://github.com/seb-m/pyinotify/issues/70", "id": 34413134, "node_id": "MDU6SXNzdWUzNDQxMzEzNA==", "number": 70, "title": "pyinotify.py: support for placeholder (filename) in command", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-05-27T21:06:30Z", "updated_at": "2014-07-06T13:21:20Z", "closed_at": "2014-07-06T13:21:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be very useful to have support for a placeholder (`%s`) inside of the command passed with `-c`.\n\nThis would allow for the following pattern/usage, where all test files are being monitored, but only the changed one being executed:\n\n```\npython -m pyinotify -e IN_MODIFY -c '(flock -n 9 || exit 1; \\\n        py.test %s; \\\n    ) 9>/tmp/test.flock' **/test_.py\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/69", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/69/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/69/events", "html_url": "https://github.com/seb-m/pyinotify/issues/69", "id": 34412708, "node_id": "MDU6SXNzdWUzNDQxMjcwOA==", "number": 69, "title": "pyinotify.py: provide option to run only a single instance of the command", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-05-27T21:01:30Z", "updated_at": "2014-07-06T11:45:13Z", "closed_at": "2014-07-06T11:45:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have tried using pyinotify to watch a tests file like this:\n\n```\npython -m pyinotify -v -e IN_MODIFY -c 'make test_functional' tests/test_functional.py\n```\n\nHowever, pyinotify seems to spawn multiple instances of \"make\", i.e. it does not wait for the first instance to finish.\n\nWhile you can use `flock` to wrap the command, it starts to become a bit messy for one-off use case.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/67", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/67/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/67/events", "html_url": "https://github.com/seb-m/pyinotify/issues/67", "id": 29441586, "node_id": "MDU6SXNzdWUyOTQ0MTU4Ng==", "number": 67, "title": "Why shouldn't I override __init__ in ProcessEvent subclasses?", "user": {"login": "njvack", "id": 169598, "node_id": "MDQ6VXNlcjE2OTU5OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/169598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njvack", "html_url": "https://github.com/njvack", "followers_url": "https://api.github.com/users/njvack/followers", "following_url": "https://api.github.com/users/njvack/following{/other_user}", "gists_url": "https://api.github.com/users/njvack/gists{/gist_id}", "starred_url": "https://api.github.com/users/njvack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njvack/subscriptions", "organizations_url": "https://api.github.com/users/njvack/orgs", "repos_url": "https://api.github.com/users/njvack/repos", "events_url": "https://api.github.com/users/njvack/events{/privacy}", "received_events_url": "https://api.github.com/users/njvack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-03-14T15:16:33Z", "updated_at": "2014-03-14T15:27:53Z", "closed_at": "2014-03-14T15:26:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm curious: it doesn't look like there is any fell magic in `ProcessEvent#__init__()`, so why is it better to implement `my_init()` rather than implementing `__int__()` and calling `super(MySubclass, self).__init__(pevent, **kargs)`?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/60", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/60/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/60/events", "html_url": "https://github.com/seb-m/pyinotify/issues/60", "id": 24300147, "node_id": "MDU6SXNzdWUyNDMwMDE0Nw==", "number": 60, "title": "Support for recursive globs \u00e0 la **/*.html", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-12-14T21:40:47Z", "updated_at": "2014-07-06T11:48:00Z", "closed_at": "2014-07-06T11:48:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be nice, if recursive globs (where `**` matches any number of dirs) would be supported/recognized.\n\nOne option would be to use Formic:\nhttps://pypi.python.org/pypi/formic\n\n(via http://stackoverflow.com/a/14823904/15690)\n\nOtherwise it would be helpful to issue a warning, if such a glob is used - since it appears to be a common use case when watching for file changes, and would avoid confusion.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/59", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/59/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/59/events", "html_url": "https://github.com/seb-m/pyinotify/issues/59", "id": 24258581, "node_id": "MDU6SXNzdWUyNDI1ODU4MQ==", "number": 59, "title": "When modified a file, emitting irrelevant events", "user": {"login": "ebruAkagunduz", "id": 1535791, "node_id": "MDQ6VXNlcjE1MzU3OTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1535791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebruAkagunduz", "html_url": "https://github.com/ebruAkagunduz", "followers_url": "https://api.github.com/users/ebruAkagunduz/followers", "following_url": "https://api.github.com/users/ebruAkagunduz/following{/other_user}", "gists_url": "https://api.github.com/users/ebruAkagunduz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebruAkagunduz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebruAkagunduz/subscriptions", "organizations_url": "https://api.github.com/users/ebruAkagunduz/orgs", "repos_url": "https://api.github.com/users/ebruAkagunduz/repos", "events_url": "https://api.github.com/users/ebruAkagunduz/events{/privacy}", "received_events_url": "https://api.github.com/users/ebruAkagunduz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-12-13T16:59:01Z", "updated_at": "2013-12-13T19:31:49Z", "closed_at": "2013-12-13T17:51:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "when an existing file modified, pyinotify emmits deleted, created, modified events. But it just should trigger modified event.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/57", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/57/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/57/events", "html_url": "https://github.com/seb-m/pyinotify/issues/57", "id": 21574522, "node_id": "MDU6SXNzdWUyMTU3NDUyMg==", "number": 57, "title": "inotify is not available on macosx-10.4-x86_64", "user": {"login": "hellok", "id": 1586035, "node_id": "MDQ6VXNlcjE1ODYwMzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1586035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellok", "html_url": "https://github.com/hellok", "followers_url": "https://api.github.com/users/hellok/followers", "following_url": "https://api.github.com/users/hellok/following{/other_user}", "gists_url": "https://api.github.com/users/hellok/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellok/subscriptions", "organizations_url": "https://api.github.com/users/hellok/orgs", "repos_url": "https://api.github.com/users/hellok/repos", "events_url": "https://api.github.com/users/hellok/events{/privacy}", "received_events_url": "https://api.github.com/users/hellok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-10-25T07:35:44Z", "updated_at": "2014-09-13T16:43:23Z", "closed_at": "2013-10-25T12:01:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "just as title showed\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/56", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/56/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/56/events", "html_url": "https://github.com/seb-m/pyinotify/issues/56", "id": 20981157, "node_id": "MDU6SXNzdWUyMDk4MTE1Nw==", "number": 56, "title": "Strange behavior with log files", "user": {"login": "Jorman", "id": 5203988, "node_id": "MDQ6VXNlcjUyMDM5ODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5203988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jorman", "html_url": "https://github.com/Jorman", "followers_url": "https://api.github.com/users/Jorman/followers", "following_url": "https://api.github.com/users/Jorman/following{/other_user}", "gists_url": "https://api.github.com/users/Jorman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jorman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jorman/subscriptions", "organizations_url": "https://api.github.com/users/Jorman/orgs", "repos_url": "https://api.github.com/users/Jorman/repos", "events_url": "https://api.github.com/users/Jorman/events{/privacy}", "received_events_url": "https://api.github.com/users/Jorman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-10-14T20:58:22Z", "updated_at": "2014-07-06T11:51:46Z", "closed_at": "2014-07-06T11:51:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, tnx for this piece of code, is really useful!\n\nI'm trying to watch a dir and launch an external sh script with the full path of the file. I've searched and adapted various piece of code, this is the result, the name for this file is monitor.py\nimport pyinotify\nimport sys\nimport os.path\nfrom subprocess import call\nimport signal\n\nlog_file = open(\"/var/log/monitor.log\", \"a\")\n\ndef log(text):\n    log_file.write(text + \"\\n\")\n    log_file.flush()\n\ndef signal_handler(signal, frame):\n    log(\"Fine Monitoraggio Cartella Vari\")\n    sys.exit(0)\n\nlog(\"Avvio Monitoraggio Cartella Vari\")\n\nsignal.signal(signal.SIGTERM, signal_handler)\n\nallowed_exts = [\"mp4\", \"flv\", \"avi\", \"divx\", \"mpg\", \"mpeg\", \"mkv\"]\n\nwm = pyinotify.WatchManager()  # Watch Manager\nmask = pyinotify.IN_CLOSE_WRITE | pyinotify.IN_MOVED_TO  # watched events\n\nclass EventHandler(pyinotify.ProcessEvent):\n    def **init**(self):\n        self.modified_files = set()\n\n```\ndef process_IN_MOVED_TO(self, event):\n    self.do_index_command(event)\n\ndef process_IN_CLOSE_WRITE(self, event):\n    self.do_index_command(event)\n\ndef do_index_command(self, event):\n    if self.is_allowed_path(event.pathname, event.dir):\n        log(\"Analizzo %s \" % (event.pathname))\n        call([\"/home/xbmc/scripts/filebot_script.sh\", event.pathname])\n\n        # Remove from list of modified files.\n        try:\n            self.modified_files.remove(event.pathname)\n        except KeyError, e:\n            # Don't care.\n            pass\n    else:\n        log(\"%s non e' da monitorizzare!\" % event.pathname)\n\ndef is_allowed_path(self, filename, is_dir):\n    # Don't check the extension for directories\n    if not is_dir:\n        ext = os.path.splitext(filename)[1][1:].lower()\n        if ext not in allowed_exts:\n            return False\n    if filename.find(\"@eaDir\") > 0:\n        return False\n    return True\n```\n\nhandler = EventHandler()\nnotifier = pyinotify.Notifier(wm, handler)\nwdd = wm.add_watch([\"/media/TwoTera/Download/vari\"], mask, rec=True, auto_add=True)\n\ntry:\n    notifier.loop(daemonize=True, pid_file='/var/run/monitor.pid')\n\nexcept pyinotify.NotifierError, err:\n    print >> sys.stderr, err\n\nthe filebot_script.sh take the full path of the file and use it to make his stuff :)\nfilebot also \"make\" his own log, so if I want to check the filebot activity I watch his log\n\nThe \"problem\", I think that is only my mistake, is that:\nIf I launch the script through the command line \"python monitor.py\" all works fine\n\nNow I also found a init.d script to run the script at boot, here the script:\n# !/bin/sh\n\ncase \"$1\" in\n  start|\"\")\n# start the monitoring daemon\n\npython /home/xbmc/scripts/monitoraggio_file.py\n   ;;\n  restart|reload|force-reload)\n   echo \"Error: argument '$1' not supported\" >&2\n   exit 3\n   ;;\n  stop)\n   kill `cat /var/run/monitor.pid`\n   ;;\n  *)\n   echo \"Usage: fileswatch.sh [start|stop]\" >&2\n   exit 3\n   ;;\nesac\n\nNow, If I run the script, monitor.py works, but filebot don't make any log!\n\nAny idea why?\n\nTnx, Jo\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/55", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/55/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/55/events", "html_url": "https://github.com/seb-m/pyinotify/issues/55", "id": 19436507, "node_id": "MDU6SXNzdWUxOTQzNjUwNw==", "number": 55, "title": "FAQ ambiguity for IN_CLOSE_WRITE", "user": {"login": "ralienpp", "id": 295338, "node_id": "MDQ6VXNlcjI5NTMzOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/295338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ralienpp", "html_url": "https://github.com/ralienpp", "followers_url": "https://api.github.com/users/ralienpp/followers", "following_url": "https://api.github.com/users/ralienpp/following{/other_user}", "gists_url": "https://api.github.com/users/ralienpp/gists{/gist_id}", "starred_url": "https://api.github.com/users/ralienpp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ralienpp/subscriptions", "organizations_url": "https://api.github.com/users/ralienpp/orgs", "repos_url": "https://api.github.com/users/ralienpp/repos", "events_url": "https://api.github.com/users/ralienpp/events{/privacy}", "received_events_url": "https://api.github.com/users/ralienpp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-09-13T08:37:41Z", "updated_at": "2013-09-13T12:35:19Z", "closed_at": "2013-09-13T12:35:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a tricky part in the FAQ that leaves room for interpretation:\n\n> use IN_CLOSE_WRITE because if emitted **the all** changes on the appropriate file are safely written inside the file\n\nDoes it mean\n1. if emitted, **all the** changes are safely inside the file\n2. emitted **before** all the changes are safely inside the file\n\nIt seems to be the former, but I am experiencing a situation in which IN_CLOSE_WRITE is triggered, but when I open the file - it doesn't contain any changes yet. So I thought I would first make sure that I understand the manual correctly.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/54", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/54/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/54/events", "html_url": "https://github.com/seb-m/pyinotify/issues/54", "id": 18685358, "node_id": "MDU6SXNzdWUxODY4NTM1OA==", "number": 54, "title": "TornadoAsyncNotifier", "user": {"login": "twekberg", "id": 1850934, "node_id": "MDQ6VXNlcjE4NTA5MzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1850934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twekberg", "html_url": "https://github.com/twekberg", "followers_url": "https://api.github.com/users/twekberg/followers", "following_url": "https://api.github.com/users/twekberg/following{/other_user}", "gists_url": "https://api.github.com/users/twekberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/twekberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twekberg/subscriptions", "organizations_url": "https://api.github.com/users/twekberg/orgs", "repos_url": "https://api.github.com/users/twekberg/repos", "events_url": "https://api.github.com/users/twekberg/events{/privacy}", "received_events_url": "https://api.github.com/users/twekberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-08-28T18:08:04Z", "updated_at": "2013-08-28T18:21:48Z", "closed_at": "2013-08-28T18:19:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see a new addition is the TornadoAsyncNotifier class. What is this? The wiki doesn't mention it and the example has one comment in the handle_read_callback function:\n\nJust stop receiving IO read events after the first\n    iteration (unrealistic example).\n\nThe 'Recent developments' page doesn't mention it either, but it stops at version 0.9.3. The current version is 0.9.4. Google wasn't much help either.\n\nI'm sure it is a nice feature, but have no idea what it is.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/53", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/53/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/53/events", "html_url": "https://github.com/seb-m/pyinotify/issues/53", "id": 18218293, "node_id": "MDU6SXNzdWUxODIxODI5Mw==", "number": 53, "title": "If I want to monitor the specified suffix files, is there any other ways except fnmatch in process?", "user": {"login": "tankywoo", "id": 1169499, "node_id": "MDQ6VXNlcjExNjk0OTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1169499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tankywoo", "html_url": "https://github.com/tankywoo", "followers_url": "https://api.github.com/users/tankywoo/followers", "following_url": "https://api.github.com/users/tankywoo/following{/other_user}", "gists_url": "https://api.github.com/users/tankywoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/tankywoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tankywoo/subscriptions", "organizations_url": "https://api.github.com/users/tankywoo/orgs", "repos_url": "https://api.github.com/users/tankywoo/repos", "events_url": "https://api.github.com/users/tankywoo/events{/privacy}", "received_events_url": "https://api.github.com/users/tankywoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-08-19T00:22:27Z", "updated_at": "2014-07-06T11:58:22Z", "closed_at": "2014-07-06T11:58:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, seb-m.\n\nRecently I am writing a script to monitor some files. I want to monitor a dir , and the dir has sub dir and in subdir there are somes files with `.md`. (maybe there are some other files, such as *.swp...)\n\nI only want to monitor the `.md` files, I have read the doc, and there is only a `ExcludeFilter`, and in the issue : https://github.com/seb-m/pyinotify/issues/31 says, only dir can be filter but not files.\n\nNow what I do is to filter in process_\\* function to check the event.name by fnmatch.\n\nSo if I only want to monitor the specified suffix files, is there a better way? Thanks.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/52", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/52/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/52/events", "html_url": "https://github.com/seb-m/pyinotify/issues/52", "id": 17530936, "node_id": "MDU6SXNzdWUxNzUzMDkzNg==", "number": 52, "title": "fails at first file of the month ", "user": {"login": "sergiomb2", "id": 1143630, "node_id": "MDQ6VXNlcjExNDM2MzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1143630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergiomb2", "html_url": "https://github.com/sergiomb2", "followers_url": "https://api.github.com/users/sergiomb2/followers", "following_url": "https://api.github.com/users/sergiomb2/following{/other_user}", "gists_url": "https://api.github.com/users/sergiomb2/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergiomb2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergiomb2/subscriptions", "organizations_url": "https://api.github.com/users/sergiomb2/orgs", "repos_url": "https://api.github.com/users/sergiomb2/repos", "events_url": "https://api.github.com/users/sergiomb2/events{/privacy}", "received_events_url": "https://api.github.com/users/sergiomb2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-08-01T21:00:15Z", "updated_at": "2014-03-27T02:44:57Z", "closed_at": "2013-08-08T20:24:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I monitor a creation of files over nfs , with\nwdd = wm.add_watch('/mounts/', mask, auto_add=True, rec=True, exclude_filter=excl)\n\nfiles are created in directories with year/month/day of the file , and one time per month fails , failed in 1 of july with first file and now in first of august \n\nat do you advice to avoid fails use : \nnotifier = pyinotify.Notifier(wm, handler)\nor \nnotifier = pyinotify.ThreadedNotifier(wm, handler)\nor \nnotifier = pyinotify.AsyncNotifier(wm, handler) ? \n\nThanks,\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/51", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/51/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/51/events", "html_url": "https://github.com/seb-m/pyinotify/issues/51", "id": 15192117, "node_id": "MDU6SXNzdWUxNTE5MjExNw==", "number": 51, "title": "read_events nonblocking logic is wrong", "user": {"login": "amluto", "id": 202764, "node_id": "MDQ6VXNlcjIwMjc2NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/202764?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amluto", "html_url": "https://github.com/amluto", "followers_url": "https://api.github.com/users/amluto/followers", "following_url": "https://api.github.com/users/amluto/following{/other_user}", "gists_url": "https://api.github.com/users/amluto/gists{/gist_id}", "starred_url": "https://api.github.com/users/amluto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amluto/subscriptions", "organizations_url": "https://api.github.com/users/amluto/orgs", "repos_url": "https://api.github.com/users/amluto/repos", "events_url": "https://api.github.com/users/amluto/events{/privacy}", "received_events_url": "https://api.github.com/users/amluto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-06-05T20:32:01Z", "updated_at": "2013-06-17T08:56:57Z", "closed_at": "2013-06-17T08:56:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "read_events does:\n\n```\n    # get event queue size\n    if fcntl.ioctl(self._fd, termios.FIONREAD, buf_, 1) == -1:\n        return\n```\n\nI'm not sure what this is trying to do, but you probably meant either:\n\n```\n    if fcntl.ioctl(self._fd, termios.FIONREAD, buf_, 1) == 0:\n        return\n```\n\nor to just use a real nonblocking inotify fd.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/50", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/50/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/50/events", "html_url": "https://github.com/seb-m/pyinotify/issues/50", "id": 14519318, "node_id": "MDU6SXNzdWUxNDUxOTMxOA==", "number": 50, "title": "How to turn off logging?", "user": {"login": "fariazz", "id": 1313597, "node_id": "MDQ6VXNlcjEzMTM1OTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1313597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fariazz", "html_url": "https://github.com/fariazz", "followers_url": "https://api.github.com/users/fariazz/followers", "following_url": "https://api.github.com/users/fariazz/following{/other_user}", "gists_url": "https://api.github.com/users/fariazz/gists{/gist_id}", "starred_url": "https://api.github.com/users/fariazz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fariazz/subscriptions", "organizations_url": "https://api.github.com/users/fariazz/orgs", "repos_url": "https://api.github.com/users/fariazz/repos", "events_url": "https://api.github.com/users/fariazz/events{/privacy}", "received_events_url": "https://api.github.com/users/fariazz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-05-20T13:19:02Z", "updated_at": "2013-05-20T15:54:07Z", "closed_at": "2013-05-20T13:25:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "When an event is triggered I get console logs like this:\n\n```\n<Event dir=False mask=0x2 maskname=IN_MODIFY name='' path=myfile.csv pathname=/home/me/myfile.csv wd=1 >\n```\n\nHow do I turn off this logging behavior?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/49", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/49/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/49/events", "html_url": "https://github.com/seb-m/pyinotify/issues/49", "id": 14233314, "node_id": "MDU6SXNzdWUxNDIzMzMxNA==", "number": 49, "title": "notifier stats clear on startup?", "user": {"login": "dxe4", "id": 4346513, "node_id": "MDQ6VXNlcjQzNDY1MTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4346513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dxe4", "html_url": "https://github.com/dxe4", "followers_url": "https://api.github.com/users/dxe4/followers", "following_url": "https://api.github.com/users/dxe4/following{/other_user}", "gists_url": "https://api.github.com/users/dxe4/gists{/gist_id}", "starred_url": "https://api.github.com/users/dxe4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dxe4/subscriptions", "organizations_url": "https://api.github.com/users/dxe4/orgs", "repos_url": "https://api.github.com/users/dxe4/repos", "events_url": "https://api.github.com/users/dxe4/events{/privacy}", "received_events_url": "https://api.github.com/users/dxe4/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-05-12T10:51:46Z", "updated_at": "2014-07-06T13:02:25Z", "closed_at": "2014-07-06T11:54:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello i love your library, i just wanted to recommend a feature. \n\nWhen you create a notifier with stats and start the notifier, the notifier.start() causes the stat object to populate _stats. \nSo you get something like this: {'IN_OPEN': 41, 'IN_CLOSE_NOWRITE': 41, 'IN_ISDIR': 82} but this events didn't actually occur they were caused by notifier.start().\nAt the moment i can do stat._stats = {} and its solved, but i think it should be added as the last task in notifier.start(). \nIt can be reproduced using the stats example on the wiki.\n\nI am not sure if you agree.\nThank You\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/48", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/48/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/48/events", "html_url": "https://github.com/seb-m/pyinotify/issues/48", "id": 14149209, "node_id": "MDU6SXNzdWUxNDE0OTIwOQ==", "number": 48, "title": "Only dir event had been printed?", "user": {"login": "sunzhaoyang", "id": 2182116, "node_id": "MDQ6VXNlcjIxODIxMTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2182116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunzhaoyang", "html_url": "https://github.com/sunzhaoyang", "followers_url": "https://api.github.com/users/sunzhaoyang/followers", "following_url": "https://api.github.com/users/sunzhaoyang/following{/other_user}", "gists_url": "https://api.github.com/users/sunzhaoyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunzhaoyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunzhaoyang/subscriptions", "organizations_url": "https://api.github.com/users/sunzhaoyang/orgs", "repos_url": "https://api.github.com/users/sunzhaoyang/repos", "events_url": "https://api.github.com/users/sunzhaoyang/events{/privacy}", "received_events_url": "https://api.github.com/users/sunzhaoyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-05-09T14:48:54Z", "updated_at": "2014-07-06T11:54:56Z", "closed_at": "2014-07-06T11:54:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "when I start the loop.py ,moniter all events on SEVER A which exports as a nfs server .\n\nSERVER B mounted A and create dir,some files .\n\nbut the loop.py only print the create dir event ,none of the files.\n\nwhat's the matter?\n\nThank you !\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/47", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/47/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/47/events", "html_url": "https://github.com/seb-m/pyinotify/issues/47", "id": 8421117, "node_id": "MDU6SXNzdWU4NDIxMTE3", "number": 47, "title": "Recursive watch on subdirs is \"disabled\" when they are deleted and recreated", "user": {"login": "larvanitis", "id": 1144686, "node_id": "MDQ6VXNlcjExNDQ2ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1144686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larvanitis", "html_url": "https://github.com/larvanitis", "followers_url": "https://api.github.com/users/larvanitis/followers", "following_url": "https://api.github.com/users/larvanitis/following{/other_user}", "gists_url": "https://api.github.com/users/larvanitis/gists{/gist_id}", "starred_url": "https://api.github.com/users/larvanitis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larvanitis/subscriptions", "organizations_url": "https://api.github.com/users/larvanitis/orgs", "repos_url": "https://api.github.com/users/larvanitis/repos", "events_url": "https://api.github.com/users/larvanitis/events{/privacy}", "received_events_url": "https://api.github.com/users/larvanitis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-11-16T14:38:17Z", "updated_at": "2012-11-16T18:11:47Z", "closed_at": "2012-11-16T18:00:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Lets say you start pynotify watching a dir with recursive and auto_add enabled.\nThen you create a new dir and it gets added to the watched list.\nThen you delete it and it gets removed.\nLastly you recreate it but this time it is **not** added to the watched list as expected.\n\nTest case shown bellow:\n\n```\n$ mkdir /tmp/watch/  #create base directory to be watched\n\n$ python -m pyinotify -r -a /tmp/watch/  #run in second terminal to monitor events\n\n$ cd /tmp/watch/\n$ mkdir dir  #create a new dir and it gets picked up\n<Event dir=True mask=0x40000100 maskname=IN_CREATE|IN_ISDIR name=dir path=/tmp/watch pathname=/tmp/watch/dir wd=1 >\n<Event dir=True mask=0x40000020 maskname=IN_OPEN|IN_ISDIR name=dir path=/tmp/watch pathname=/tmp/watch/dir wd=1 >\n<Event dir=True mask=0x40000020 maskname=IN_OPEN|IN_ISDIR name='' path=/tmp/watch/dir pathname=/tmp/watch/dir wd=2 >\n<Event dir=True mask=0x40000010 maskname=IN_CLOSE_NOWRITE|IN_ISDIR name=dir path=/tmp/watch pathname=/tmp/watch/dir wd=1 >\n<Event dir=True mask=0x40000010 maskname=IN_CLOSE_NOWRITE|IN_ISDIR name='' path=/tmp/watch/dir pathname=/tmp/watch/dir wd=2 >\n<Event dir=True mask=0x40000020 maskname=IN_OPEN|IN_ISDIR name=dir path=/tmp/watch pathname=/tmp/watch/dir wd=1 >\n<Event dir=True mask=0x40000020 maskname=IN_OPEN|IN_ISDIR name='' path=/tmp/watch/dir pathname=/tmp/watch/dir wd=2 >\n<Event dir=True mask=0x40000010 maskname=IN_CLOSE_NOWRITE|IN_ISDIR name=dir path=/tmp/watch pathname=/tmp/watch/dir wd=1 >\n<Event dir=True mask=0x40000010 maskname=IN_CLOSE_NOWRITE|IN_ISDIR name='' path=/tmp/watch/dir pathname=/tmp/watch/dir wd=2 >\n\n$ touch dir/file  #create a new file in the subdir and it gets picked up\n<Event dir=False mask=0x100 maskname=IN_CREATE name=file path=/tmp/watch/dir pathname=/tmp/watch/dir/file wd=2 >\n<Event dir=False mask=0x20 maskname=IN_OPEN name=file path=/tmp/watch/dir pathname=/tmp/watch/dir/file wd=2 >\n<Event dir=False mask=0x4 maskname=IN_ATTRIB name=file path=/tmp/watch/dir pathname=/tmp/watch/dir/file wd=2 >\n<Event dir=False mask=0x8 maskname=IN_CLOSE_WRITE name=file path=/tmp/watch/dir pathname=/tmp/watch/dir/file wd=2 >\n\n$ rm -rf dir  #remove the directory\n<Event dir=True mask=0x40000020 maskname=IN_OPEN|IN_ISDIR name=dir path=/tmp/watch pathname=/tmp/watch/dir wd=1 >\n<Event dir=True mask=0x40000020 maskname=IN_OPEN|IN_ISDIR name='' path=/tmp/watch/dir pathname=/tmp/watch/dir wd=2 >\n<Event dir=False mask=0x200 maskname=IN_DELETE name=file path=/tmp/watch/dir pathname=/tmp/watch/dir/file wd=2 >\n<Event dir=True mask=0x40000200 maskname=IN_DELETE|IN_ISDIR name=dir path=/tmp/watch pathname=/tmp/watch/dir wd=1 >\n<Event dir=True mask=0x40000010 maskname=IN_CLOSE_NOWRITE|IN_ISDIR name=dir path=/tmp/watch pathname=/tmp/watch/dir wd=1 >\n<Event dir=True mask=0x40000010 maskname=IN_CLOSE_NOWRITE|IN_ISDIR name='' path=/tmp/watch/dir pathname=/tmp/watch/dir wd=2 >\n\n$ mkdir dir  #recreate it and this time you can see that not every expected event is fired, like above\n<Event dir=True mask=0x40000100 maskname=IN_CREATE|IN_ISDIR name=dir path=/tmp/watch pathname=/tmp/watch/dir wd=1 >\n\n$ touch dir/file  #'dir' is no longer watched for events!\n// nothing happens //\n\n$ rm dir/file  #same...\n// nothing happens //\n\n$ rm -rf dir\n<Event dir=True mask=0x40000020 maskname=IN_OPEN|IN_ISDIR name=dir path=/tmp/watch pathname=/tmp/watch/dir wd=1 >\n<Event dir=True mask=0x40000200 maskname=IN_DELETE|IN_ISDIR name=dir path=/tmp/watch pathname=/tmp/watch/dir wd=1 >\n<Event dir=True mask=0x40000010 maskname=IN_CLOSE_NOWRITE|IN_ISDIR name=dir path=/tmp/watch pathname=/\n```\n\nThis is with:\n\n```\n$ python -V\nPython 2.7.3\n\n$ python -m pyinotify -V\n0.9.2\n\n$ uname -r\n3.2.0-32-generic-pae\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/45", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/45/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/45/events", "html_url": "https://github.com/seb-m/pyinotify/issues/45", "id": 7247256, "node_id": "MDU6SXNzdWU3MjQ3MjU2", "number": 45, "title": "IN_MODIFY launched 2 times for every file", "user": {"login": "endorama", "id": 526307, "node_id": "MDQ6VXNlcjUyNjMwNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/526307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/endorama", "html_url": "https://github.com/endorama", "followers_url": "https://api.github.com/users/endorama/followers", "following_url": "https://api.github.com/users/endorama/following{/other_user}", "gists_url": "https://api.github.com/users/endorama/gists{/gist_id}", "starred_url": "https://api.github.com/users/endorama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/endorama/subscriptions", "organizations_url": "https://api.github.com/users/endorama/orgs", "repos_url": "https://api.github.com/users/endorama/repos", "events_url": "https://api.github.com/users/endorama/events{/privacy}", "received_events_url": "https://api.github.com/users/endorama/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2012-09-30T17:36:20Z", "updated_at": "2012-10-01T16:50:15Z", "closed_at": "2012-09-30T19:05:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I've found a strange behaviour: IN_MODIFY event is launched two times when I edit a single file.\n\nI'm using the `tutorial_notifier.py` example, monitoring a folder inside `/tmp` and every time I edit a file inside it, 2 IN_MODIFY events shows up.\n\nI'm on a Ubuntu 12.04.1 box with the kernel `3.2.0-31-generic-pae`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/44", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/44/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/44/events", "html_url": "https://github.com/seb-m/pyinotify/issues/44", "id": 6850297, "node_id": "MDU6SXNzdWU2ODUwMjk3", "number": 44, "title": "Feature request: Nice to have a way to pause pyinotify listeners.", "user": {"login": "rgrinberg", "id": 139003, "node_id": "MDQ6VXNlcjEzOTAwMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/139003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rgrinberg", "html_url": "https://github.com/rgrinberg", "followers_url": "https://api.github.com/users/rgrinberg/followers", "following_url": "https://api.github.com/users/rgrinberg/following{/other_user}", "gists_url": "https://api.github.com/users/rgrinberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/rgrinberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rgrinberg/subscriptions", "organizations_url": "https://api.github.com/users/rgrinberg/orgs", "repos_url": "https://api.github.com/users/rgrinberg/repos", "events_url": "https://api.github.com/users/rgrinberg/events{/privacy}", "received_events_url": "https://api.github.com/users/rgrinberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2012-09-13T15:16:24Z", "updated_at": "2014-07-06T12:44:56Z", "closed_at": "2014-07-06T12:44:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sometimes you would like to do some IO to a directory you're watching but not handle the events. I would prefer not to rm_watch and then add it again or add special logic tagging every event. Would be nice to have a context manager or something similar to let you do any IO you want without triggering pyinotify events. I'm thinking of something like\n\nwith ignorePyinotify(wm):\n       do_stuff() # no pyinotify events are triggered\n\nis this possible?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/43", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/43/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/43/events", "html_url": "https://github.com/seb-m/pyinotify/issues/43", "id": 6614810, "node_id": "MDU6SXNzdWU2NjE0ODEw", "number": 43, "title": "Ressource leak issue", "user": {"login": "hjdr4", "id": 2270634, "node_id": "MDQ6VXNlcjIyNzA2MzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2270634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjdr4", "html_url": "https://github.com/hjdr4", "followers_url": "https://api.github.com/users/hjdr4/followers", "following_url": "https://api.github.com/users/hjdr4/following{/other_user}", "gists_url": "https://api.github.com/users/hjdr4/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjdr4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjdr4/subscriptions", "organizations_url": "https://api.github.com/users/hjdr4/orgs", "repos_url": "https://api.github.com/users/hjdr4/repos", "events_url": "https://api.github.com/users/hjdr4/events{/privacy}", "received_events_url": "https://api.github.com/users/hjdr4/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-09-03T12:19:27Z", "updated_at": "2012-09-12T08:01:48Z", "closed_at": "2012-09-12T07:37:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nFirst try with pyinotify and first fail (lastest stable version from today). I've launched the command line \"pyinotify -r -a -e IN_CLOSE_WRITE /xfs\".\nAfter a while, I got the message :\nTraceback (most recent call last):\n  File \"/usr/lib64/python2.6/runpy.py\", line 122, in _run_module_as_main\n    \"__main__\", fname, loader, pkg_name)\n  File \"/usr/lib64/python2.6/runpy.py\", line 34, in _run_code\n    exec code in run_globals\n  File \"/usr/lib/python2.6/site-packages/pyinotify-0.9.3-py2.6.egg/pyinotify.py\", line 2298, in <module>\n    command_line()\n  File \"/usr/lib/python2.6/site-packages/pyinotify-0.9.3-py2.6.egg/pyinotify.py\", line 2252, in command_line\n    wm = WatchManager()\n  File \"/usr/lib/python2.6/site-packages/pyinotify-0.9.3-py2.6.egg/pyinotify.py\", line 1708, in __init__\n    raise OSError(err % self._inotify_wrapper.str_errno())\nOSError: Cannot initialize new instance of inotify, Errno=Too many open files (EMFILE)\n\nMy /xfs is a little big (20TB enterprise storage, millions of files). I've found my kernel settings were too low. So I have ajusted to fs.inotify.max_user_watches=2000000000 (64bit kernel). First, it still does not work with the same message. Worst : if I launch the same command on an empty path, it still tells me \"Errno=Too many open files (EMFILE)\"!!!!\n\nHave I missed something or this soft is really broken?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/41", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/41/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/41/events", "html_url": "https://github.com/seb-m/pyinotify/issues/41", "id": 5985825, "node_id": "MDU6SXNzdWU1OTg1ODI1", "number": 41, "title": "Linux 3.4 - Bindings Error", "user": {"login": "niallfleming", "id": 2081905, "node_id": "MDQ6VXNlcjIwODE5MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2081905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niallfleming", "html_url": "https://github.com/niallfleming", "followers_url": "https://api.github.com/users/niallfleming/followers", "following_url": "https://api.github.com/users/niallfleming/following{/other_user}", "gists_url": "https://api.github.com/users/niallfleming/gists{/gist_id}", "starred_url": "https://api.github.com/users/niallfleming/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niallfleming/subscriptions", "organizations_url": "https://api.github.com/users/niallfleming/orgs", "repos_url": "https://api.github.com/users/niallfleming/repos", "events_url": "https://api.github.com/users/niallfleming/events{/privacy}", "received_events_url": "https://api.github.com/users/niallfleming/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2012-08-02T06:45:13Z", "updated_at": "2012-08-06T19:51:37Z", "closed_at": "2012-08-06T19:51:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "3.4.6 and 3.4.7 Kernel compiled with the same config as my 2.6.32 that works.\n\nCONFIG_FSNOTIFY=y\nCONFIG_DNOTIFY=y\nCONFIG_INOTIFY_USER=y\n\nBoth give the following error:\n\nInotifyBindingNotFoundError: Couldn't find any inotify binding\n\nAny clues?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/39", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/39/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/39/events", "html_url": "https://github.com/seb-m/pyinotify/issues/39", "id": 5250982, "node_id": "MDU6SXNzdWU1MjUwOTgy", "number": 39, "title": "Not Catching Events in Relation to NFS Mount ", "user": {"login": "ioneyed", "id": 1890116, "node_id": "MDQ6VXNlcjE4OTAxMTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1890116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ioneyed", "html_url": "https://github.com/ioneyed", "followers_url": "https://api.github.com/users/ioneyed/followers", "following_url": "https://api.github.com/users/ioneyed/following{/other_user}", "gists_url": "https://api.github.com/users/ioneyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/ioneyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ioneyed/subscriptions", "organizations_url": "https://api.github.com/users/ioneyed/orgs", "repos_url": "https://api.github.com/users/ioneyed/repos", "events_url": "https://api.github.com/users/ioneyed/events{/privacy}", "received_events_url": "https://api.github.com/users/ioneyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-06-25T15:11:04Z", "updated_at": "2012-07-07T02:52:25Z", "closed_at": "2012-07-07T02:52:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a NFS mount to a storage server on server A.  We have a web server on Server B that general users access to place updates/etc that is attached to the same NFS mount that Server A has access to.\n\nWhen I put files onto Server A in the watched directory via ssh/sftp my basic pyinotify fires off every event that is happening. However when I put files on Server B (same NFS mount ie, same folder) it doesn't fire any events. \n\nServer A path: /srv/sandbox\nServer B path: /www/docs/sandbox\n\nHere is my watcher code:\n\nwm.add_watch('/srv/sandbox/', pyinotify.ALL_EVENTS, rec=True, auto_add=True)\n\nI read through the issues on StackOverflow and read through the wiki/examples and couldn't find anything related - I could just be missing a param or is it because the mounts are mounted at different locations?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/36", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/36/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/36/events", "html_url": "https://github.com/seb-m/pyinotify/issues/36", "id": 4488843, "node_id": "MDU6SXNzdWU0NDg4ODQz", "number": 36, "title": "Setting up watches takes Exponential time", "user": {"login": "Shne", "id": 1230526, "node_id": "MDQ6VXNlcjEyMzA1MjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1230526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Shne", "html_url": "https://github.com/Shne", "followers_url": "https://api.github.com/users/Shne/followers", "following_url": "https://api.github.com/users/Shne/following{/other_user}", "gists_url": "https://api.github.com/users/Shne/gists{/gist_id}", "starred_url": "https://api.github.com/users/Shne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Shne/subscriptions", "organizations_url": "https://api.github.com/users/Shne/orgs", "repos_url": "https://api.github.com/users/Shne/repos", "events_url": "https://api.github.com/users/Shne/events{/privacy}", "received_events_url": "https://api.github.com/users/Shne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-05-09T09:00:05Z", "updated_at": "2012-06-06T22:23:36Z", "closed_at": "2012-06-06T22:23:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "The initial set up of watches takes exponential time in the number of directories to such a degree it would take approximately 30 hours to set up watches on 100,000 directories on my laptop.\n\nI can't test it right now, but I suspect the culprit is line 1855 in pyinotify.py (under python2) (1842 under python3):\n\n``` python\nif self.get_wd(rpath) is not None:\n    # We decide to ignore paths already inserted into\n    # the watch manager. Need to be removed with rm_watch()\n    # first. Or simply call update_watch() to update it.\n    continue\n```\n\nwhere it checks if a watch descriptor already exists for the directory.\n\nIt makes good sense to do when adding watches to dirs that could have been moved from elsewhere in a recursively watched dir, but in the initial set up of watches, if no moving/creating/deleting is being done, it just slows it down immensely. Should be doable in linear time.\n\nSo instead of removing this check altogether (if it is the culprit) I suggest a \"static\" flag or similar to disable the check on the initial watches setup when it is known that the hierarchy won't change during.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/34", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/34/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/34/events", "html_url": "https://github.com/seb-m/pyinotify/issues/34", "id": 4106831, "node_id": "MDU6SXNzdWU0MTA2ODMx", "number": 34, "title": "RuntimeWarnings when running under pypy", "user": {"login": "bdkearns", "id": 1072543, "node_id": "MDQ6VXNlcjEwNzI1NDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1072543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdkearns", "html_url": "https://github.com/bdkearns", "followers_url": "https://api.github.com/users/bdkearns/followers", "following_url": "https://api.github.com/users/bdkearns/following{/other_user}", "gists_url": "https://api.github.com/users/bdkearns/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdkearns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdkearns/subscriptions", "organizations_url": "https://api.github.com/users/bdkearns/orgs", "repos_url": "https://api.github.com/users/bdkearns/repos", "events_url": "https://api.github.com/users/bdkearns/events{/privacy}", "received_events_url": "https://api.github.com/users/bdkearns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2012-04-13T16:41:01Z", "updated_at": "2012-04-14T16:19:08Z", "closed_at": "2012-04-14T16:19:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "When creating/adding a watch using pyinotify under pypy, I get the following warnings:\n\nvirtualenv/site-packages/pyinotify.py:232: RuntimeWarning: C function without declared arguments called\n  return self._libc.inotify_init()\nvirtualenv/site-packages/pyinotify.py:237: RuntimeWarning: C function without declared arguments called\n  return self._libc.inotify_add_watch(fd, pathname, mask)\n\nIt seems pyinotify should set argtypes for these ctypes calls?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/33", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/33/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/33/events", "html_url": "https://github.com/seb-m/pyinotify/issues/33", "id": 4071951, "node_id": "MDU6SXNzdWU0MDcxOTUx", "number": 33, "title": "OSError: [Errno 9] Bad file descriptor on notifier.stop()", "user": {"login": "monofox", "id": 765309, "node_id": "MDQ6VXNlcjc2NTMwOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/765309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/monofox", "html_url": "https://github.com/monofox", "followers_url": "https://api.github.com/users/monofox/followers", "following_url": "https://api.github.com/users/monofox/following{/other_user}", "gists_url": "https://api.github.com/users/monofox/gists{/gist_id}", "starred_url": "https://api.github.com/users/monofox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/monofox/subscriptions", "organizations_url": "https://api.github.com/users/monofox/orgs", "repos_url": "https://api.github.com/users/monofox/repos", "events_url": "https://api.github.com/users/monofox/events{/privacy}", "received_events_url": "https://api.github.com/users/monofox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-04-11T19:46:17Z", "updated_at": "2012-04-12T19:49:51Z", "closed_at": "2012-04-12T17:36:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Yes, i like and use pyinotify. Thank you for the work.\nWhile i've used it today for an application of me, i stumble across the following things.\nFor your information, i'm using Python 3.2 - pyinotify in the latest version of pypi (0.9.3).\n\nWhen i stop the watcher with notifier.stop(), than i get the following:\n\n>    File \"/home/mono/.projects/sugarsync/SugarSyncNotifier.py\", line 86, in stopNotifier\n>         self.notifier.stop()\n>    File \"/usr/lib64/python3.2/site-packages/pyinotify-0.9.3-py3.2-linux-x86_64.egg/pyinotify.py\", line 1459, in stop\n>        os.write(self._pipe[1], b'stop')\n>    OSError: [Errno 9] Bad file descriptor\n\n\"notifier\" ist object of pyinotify.ThreadedNotifier.\n\nSecond thing:\n\n>  File \"/home/mono/.projects/sugarsync/SugarSyncNotifier.py\", line 84, in stopNotifier\n>    self.wm.rm_watch(f.getWatcher().values())\n>  File \"/usr/lib64/python3.2/site-packages/pyinotify-0.9.3-py3.2-linux-x86_64.egg/pyinotify.py\", line 2041, in rm_watch\n>    wd_ = self._inotify_wrapper.inotify_rm_watch(self._fd, awd)\n>  File \"/usr/lib64/python3.2/site-packages/pyinotify-0.9.3-py3.2-linux-x86_64.egg/pyinotify.py\", line 156, in inotify_rm_watch\n>    return self._inotify_rm_watch(fd, wd)\n>  File \"/usr/lib64/python3.2/site-packages/pyinotify-0.9.3-py3.2-linux-x86_64.egg/pyinotify.py\", line 189, in _inotify_rm_watch\n>    ret = inotify_syscalls.inotify_rm_watch(fd, wd)\n> TypeError: an integer is require\n\nThis happens, when i call the rm_watch-Method with a dict of integers instead of only one integer.\nThe help means that this is possible - so it is a bug or it the help not so up-to-date?\n\nThanks. Best Regards\n~ monofox\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/32", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/32/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/32/events", "html_url": "https://github.com/seb-m/pyinotify/issues/32", "id": 3709188, "node_id": "MDU6SXNzdWUzNzA5MTg4", "number": 32, "title": "Incorrect paths in moved folders", "user": {"login": "mtorniai", "id": 1552696, "node_id": "MDQ6VXNlcjE1NTI2OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1552696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mtorniai", "html_url": "https://github.com/mtorniai", "followers_url": "https://api.github.com/users/mtorniai/followers", "following_url": "https://api.github.com/users/mtorniai/following{/other_user}", "gists_url": "https://api.github.com/users/mtorniai/gists{/gist_id}", "starred_url": "https://api.github.com/users/mtorniai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mtorniai/subscriptions", "organizations_url": "https://api.github.com/users/mtorniai/orgs", "repos_url": "https://api.github.com/users/mtorniai/repos", "events_url": "https://api.github.com/users/mtorniai/events{/privacy}", "received_events_url": "https://api.github.com/users/mtorniai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-03-19T12:55:16Z", "updated_at": "2012-03-19T21:56:13Z", "closed_at": "2012-03-19T17:21:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nPyinotify version: 0.9.1\nKernel version: 2.6.18-274.7.1.el5\n\nI'm running pyinotify to monitor a directory for changes recursively with auto_add on:\npyinotify -r -a -f -e IN_CREATE,IN_CLOSE_WRITE,IN_DELETE,IN_MOVED_FROM,IN_MOVED_TO /basedir\n\nWhen I move directories around inside the watched directory, delete and create events will always show paths for the original directory instead of the current one.\n\nExample:\n1. pathname=/basedir/folderA/mypic.jpg, maskname=IN_CREATE ( create the file )\n2. pathname=/basedir/ffolderA, maskname=IN_MOVED_FROM|IN_ISDIR\n3. pathname=/basedir/ffolderB/folderA, maskname=IN_MOVED_TO|IN_ISDIR ( folderA moved to folderB)\n4. pathname=/basedir/folderA/mypic.jpg, maskname=IN_DELETE (delete the file)\n\nAs you can see the path on row 4. is incorrect since the folder has been moved. \n\nSo is this intended behavior, a bug,  or kernel bug?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/31", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/31/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/31/events", "html_url": "https://github.com/seb-m/pyinotify/issues/31", "id": 3699927, "node_id": "MDU6SXNzdWUzNjk5OTI3", "number": 31, "title": "Exclude patterns only work for directory", "user": {"login": "SeyZ", "id": 519129, "node_id": "MDQ6VXNlcjUxOTEyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/519129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SeyZ", "html_url": "https://github.com/SeyZ", "followers_url": "https://api.github.com/users/SeyZ/followers", "following_url": "https://api.github.com/users/SeyZ/following{/other_user}", "gists_url": "https://api.github.com/users/SeyZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/SeyZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SeyZ/subscriptions", "organizations_url": "https://api.github.com/users/SeyZ/orgs", "repos_url": "https://api.github.com/users/SeyZ/repos", "events_url": "https://api.github.com/users/SeyZ/events{/privacy}", "received_events_url": "https://api.github.com/users/SeyZ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-03-18T13:31:51Z", "updated_at": "2013-08-19T19:54:21Z", "closed_at": "2012-03-20T03:17:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a list of exclude patterns like this :\n    ['._.hg._', '._hg-check._']\n\nThis patterns aim to exclude mercurial files. The problem is the second pattern because it's a file and not a directory. Pyinotify does not ignore the file when it changed. I think that it's a bug ?\n\nSuppose I create a directory named something like `blablahg-checkblabla/` and if suppose Icreate a file into it named `aaa.txt`. If a modify the content of the `aaa.txt`, Pyinotify does not sent the IN_MODIFY event. It's good but it works because the pattern match the **directory** name.\n\nExample of code to test my issue :\n\n```\nimport pyinotify\n\n\nclass EventHandler(pyinotify.ProcessEvent):\n    def __init__(self):\n        pass\n\n    def process_IN_CREATE(self, event):\n        pass\n\n    def process_IN_MODIFY(self, event):\n        print 'modif !'\n        pass\n\n    def process_IN_DELETE(self, event):\n        pass\n\nvm = pyinotify.WatchManager()\nmask = pyinotify.IN_CREATE | pyinotify.IN_MODIFY | pyinotify.IN_DELETE\nhandler = EventHandler()\ne = ['^/etc/hosts']\n\nvm.add_watch('/etc/', mask,\n             exclude_filter=pyinotify.ExcludeFilter(e))\n\nmonitor = pyinotify.ThreadedNotifier(vm, handler)\nmonitor.coalesce_events()\nmonitor.start()\n```\n\nWhen I change the /etc/hosts file, the stdout print 'modif' !' :-(\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/30", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/30/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/30/events", "html_url": "https://github.com/seb-m/pyinotify/issues/30", "id": 3601279, "node_id": "MDU6SXNzdWUzNjAxMjc5", "number": 30, "title": "auto_add=True does not imply (mask & IN_CREATE)", "user": {"login": "maugier", "id": 44236, "node_id": "MDQ6VXNlcjQ0MjM2", "avatar_url": "https://avatars3.githubusercontent.com/u/44236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maugier", "html_url": "https://github.com/maugier", "followers_url": "https://api.github.com/users/maugier/followers", "following_url": "https://api.github.com/users/maugier/following{/other_user}", "gists_url": "https://api.github.com/users/maugier/gists{/gist_id}", "starred_url": "https://api.github.com/users/maugier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maugier/subscriptions", "organizations_url": "https://api.github.com/users/maugier/orgs", "repos_url": "https://api.github.com/users/maugier/repos", "events_url": "https://api.github.com/users/maugier/events{/privacy}", "received_events_url": "https://api.github.com/users/maugier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-03-11T14:41:04Z", "updated_at": "2012-03-11T20:52:12Z", "closed_at": "2012-03-11T20:52:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\n  auto_add will not work as intended when the mask of the watch does not include IN_CREATE.\n\n  It would be nice if setting auto_add=True automatically included IN_CREATE in the mask, or if it was explicitely stated in the doc that auto_add requires IN_CREATE.\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/29", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/29/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/29/events", "html_url": "https://github.com/seb-m/pyinotify/issues/29", "id": 2686467, "node_id": "MDU6SXNzdWUyNjg2NDY3", "number": 29, "title": "check_events interrupt", "user": {"login": "leeclemens", "id": 1250267, "node_id": "MDQ6VXNlcjEyNTAyNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1250267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leeclemens", "html_url": "https://github.com/leeclemens", "followers_url": "https://api.github.com/users/leeclemens/followers", "following_url": "https://api.github.com/users/leeclemens/following{/other_user}", "gists_url": "https://api.github.com/users/leeclemens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leeclemens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leeclemens/subscriptions", "organizations_url": "https://api.github.com/users/leeclemens/orgs", "repos_url": "https://api.github.com/users/leeclemens/repos", "events_url": "https://api.github.com/users/leeclemens/events{/privacy}", "received_events_url": "https://api.github.com/users/leeclemens/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2011-12-30T04:03:18Z", "updated_at": "2012-01-22T21:51:56Z", "closed_at": "2012-01-21T22:39:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to interrupt check_events() if no timeout is supplied?\n\nI have another thread, which calls watcher thread's method that calls notifier.stop() - but the watcher thread seems to hang on notifier.check_events().\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/28", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/28/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/28/events", "html_url": "https://github.com/seb-m/pyinotify/issues/28", "id": 2447558, "node_id": "MDU6SXNzdWUyNDQ3NTU4", "number": 28, "title": "Inotify stops Work after few hours", "user": {"login": "Gotterdammerung", "id": 1241334, "node_id": "MDQ6VXNlcjEyNDEzMzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1241334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gotterdammerung", "html_url": "https://github.com/Gotterdammerung", "followers_url": "https://api.github.com/users/Gotterdammerung/followers", "following_url": "https://api.github.com/users/Gotterdammerung/following{/other_user}", "gists_url": "https://api.github.com/users/Gotterdammerung/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gotterdammerung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gotterdammerung/subscriptions", "organizations_url": "https://api.github.com/users/Gotterdammerung/orgs", "repos_url": "https://api.github.com/users/Gotterdammerung/repos", "events_url": "https://api.github.com/users/Gotterdammerung/events{/privacy}", "received_events_url": "https://api.github.com/users/Gotterdammerung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2011-12-05T10:10:55Z", "updated_at": "2012-01-21T22:41:57Z", "closed_at": "2012-01-21T22:41:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\nmy script watch 5 directorys if  new file is create.\nEverythink works great for a few hours, but then inotify freez.\ni have no idea what is the problem, other parts of the script works.\n\nwm = pyinotify.WatchManager()  # Watch Manager\nmask = pyinotify.IN_CREATE  # watched events\n\nclass EventHandler(pyinotify.ProcessEvent):\n    def process_IN_CREATE(self, event):\n        print \"Find File:\", event.pathname\n\nhandler = EventHandler()\nnotifier = pyinotify.Notifier(wm, handler)\n\nhanse_inv = wm.add_watch('/home/123', mask, rec=True)\nhanse_umlagerung = wm.add_watch('/home/456', mask, rec=True)\nhanse_wa = wm.add_watch('/home/789', mask, rec=True)\nhanse_we = wm.add_watch('/home/012', mask, rec=True)\nintime = wm.add_watch('/home/345', mask, rec=True)\n\nnotifier.loop()\n\nWorks nice for a few hours but then it stop working.\ni tryed notifier.start & stop and daemonized mode, everyhing the same.\n\nIs there any reasone?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/27", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/27/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/27/events", "html_url": "https://github.com/seb-m/pyinotify/issues/27", "id": 2419037, "node_id": "MDU6SXNzdWUyNDE5MDM3", "number": 27, "title": "IN_Q_OVERFLOW events aren't processed at all", "user": {"login": "TomiBelan", "id": 1022278, "node_id": "MDQ6VXNlcjEwMjIyNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1022278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomiBelan", "html_url": "https://github.com/TomiBelan", "followers_url": "https://api.github.com/users/TomiBelan/followers", "following_url": "https://api.github.com/users/TomiBelan/following{/other_user}", "gists_url": "https://api.github.com/users/TomiBelan/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomiBelan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomiBelan/subscriptions", "organizations_url": "https://api.github.com/users/TomiBelan/orgs", "repos_url": "https://api.github.com/users/TomiBelan/repos", "events_url": "https://api.github.com/users/TomiBelan/events{/privacy}", "received_events_url": "https://api.github.com/users/TomiBelan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2011-12-01T20:01:09Z", "updated_at": "2011-12-02T07:59:16Z", "closed_at": "2011-12-02T07:59:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Because of this condition in process_events():\n\n```\n        watch_ = self._watch_manager.get_watch(raw_event.wd)\n        if watch_ is None:\n            # Not really sure how we ended up here, nor how we should\n            # handle these types of events and if it is appropriate to\n            # completly skip them (like we are doing here).\n            log.warning(\"Unable to retrieve Watch object associated to %s\",\n                        repr(raw_event))\n            continue\n```\n\nevents of type `IN_Q_OVEFLOW` (which always have wd==-1) are never processed, not even by `_SysProcessEvent`.\n\nThe commit that added the above code doesn't go into much detail as to why it was added. Perhaps a misguided optimization attempt? It might be the case that it can be removed entirely. (If not, the best option would probably be to make a special case for `raw_event.mask & IN_Q_OVERFLOW` or maybe `raw_event.wd == -1`.)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/26", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/26/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/26/events", "html_url": "https://github.com/seb-m/pyinotify/issues/26", "id": 2289963, "node_id": "MDU6SXNzdWUyMjg5OTYz", "number": 26, "title": "Don't mess with logging globally", "user": {"login": "agronholm", "id": 130003, "node_id": "MDQ6VXNlcjEzMDAwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agronholm", "html_url": "https://github.com/agronholm", "followers_url": "https://api.github.com/users/agronholm/followers", "following_url": "https://api.github.com/users/agronholm/following{/other_user}", "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}", "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions", "organizations_url": "https://api.github.com/users/agronholm/orgs", "repos_url": "https://api.github.com/users/agronholm/repos", "events_url": "https://api.github.com/users/agronholm/events{/privacy}", "received_events_url": "https://api.github.com/users/agronholm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2011-11-19T21:52:40Z", "updated_at": "2011-11-19T22:07:26Z", "closed_at": "2011-11-19T22:07:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's very annoying that pyinotify forces a specific Logger class on me globally. My application uses its own Logger class to inject extra information in log records, and importing pyinotify undoes all that. Is this really the only way to go about this? Couldn't pyinotify limit its modifications to its own loggers?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/23", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/23/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/23/events", "html_url": "https://github.com/seb-m/pyinotify/issues/23", "id": 1803247, "node_id": "MDU6SXNzdWUxODAzMjQ3", "number": 23, "title": "pip installable", "user": {"login": "dillongreen", "id": 649821, "node_id": "MDQ6VXNlcjY0OTgyMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/649821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dillongreen", "html_url": "https://github.com/dillongreen", "followers_url": "https://api.github.com/users/dillongreen/followers", "following_url": "https://api.github.com/users/dillongreen/following{/other_user}", "gists_url": "https://api.github.com/users/dillongreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/dillongreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dillongreen/subscriptions", "organizations_url": "https://api.github.com/users/dillongreen/orgs", "repos_url": "https://api.github.com/users/dillongreen/repos", "events_url": "https://api.github.com/users/dillongreen/events{/privacy}", "received_events_url": "https://api.github.com/users/dillongreen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2011-10-03T14:50:21Z", "updated_at": "2011-10-10T19:44:05Z", "closed_at": "2011-10-10T19:44:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "This should be on PyPI and installable via `pip install pyinotify`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/22", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/22/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/22/events", "html_url": "https://github.com/seb-m/pyinotify/issues/22", "id": 1796175, "node_id": "MDU6SXNzdWUxNzk2MTc1", "number": 22, "title": "Please provide a simplified interface", "user": {"login": "FedericoCeratto", "id": 91576, "node_id": "MDQ6VXNlcjkxNTc2", "avatar_url": "https://avatars0.githubusercontent.com/u/91576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FedericoCeratto", "html_url": "https://github.com/FedericoCeratto", "followers_url": "https://api.github.com/users/FedericoCeratto/followers", "following_url": "https://api.github.com/users/FedericoCeratto/following{/other_user}", "gists_url": "https://api.github.com/users/FedericoCeratto/gists{/gist_id}", "starred_url": "https://api.github.com/users/FedericoCeratto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FedericoCeratto/subscriptions", "organizations_url": "https://api.github.com/users/FedericoCeratto/orgs", "repos_url": "https://api.github.com/users/FedericoCeratto/repos", "events_url": "https://api.github.com/users/FedericoCeratto/events{/privacy}", "received_events_url": "https://api.github.com/users/FedericoCeratto/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 154236, "node_id": "MDU6TGFiZWwxNTQyMzY=", "url": "https://api.github.com/repos/seb-m/pyinotify/labels/feature-request", "name": "feature-request", "color": "0052cc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2011-10-02T15:50:45Z", "updated_at": "2014-07-06T12:05:22Z", "closed_at": "2014-07-06T12:05:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello Sebastien,\nthank you for pyinotify, I find it very useful.\n\nI believe many users could benefit from a simplified interface to configure pyinotify, e.g.\n\n```\nfrom pyinotify import monitor, threaded_monitor\n\n# blocking \nmonitor(('*.py', 'tests/*.py', 'docs/*.rst'), run=myfunction)\n\n# threaded\nthreaded_monitor(('*.py', 'tests/*.py', 'docs/*.rst'), run=myfunction)\n```\n\nAlso, various applications - especially editors like vim and emacs - do some clever write/rename/delete operations to save files safely that triggers the annoying error \"The pathname ... has probably changed and couldn't be updated, so it cannot be trusted anymore.\"\n\nIn some cases the user might not be interested in filtering for some specific events and simply wants to run some command when some in a directory have been modified.\nMaybe the only solution would be to monitor a directory rather than each file?\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/21", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/21/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/21/events", "html_url": "https://github.com/seb-m/pyinotify/issues/21", "id": 1779317, "node_id": "MDU6SXNzdWUxNzc5MzE3", "number": 21, "title": "Can't use either Notifier or ThreadedNotifier in multiprocessing environment", "user": {"login": "pnd10", "id": 432829, "node_id": "MDQ6VXNlcjQzMjgyOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/432829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnd10", "html_url": "https://github.com/pnd10", "followers_url": "https://api.github.com/users/pnd10/followers", "following_url": "https://api.github.com/users/pnd10/following{/other_user}", "gists_url": "https://api.github.com/users/pnd10/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnd10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnd10/subscriptions", "organizations_url": "https://api.github.com/users/pnd10/orgs", "repos_url": "https://api.github.com/users/pnd10/repos", "events_url": "https://api.github.com/users/pnd10/events{/privacy}", "received_events_url": "https://api.github.com/users/pnd10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2011-09-29T19:09:24Z", "updated_at": "2014-07-06T16:18:38Z", "closed_at": "2014-07-06T16:18:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've had to extend Notifier for use in a multiprocessing environment, specifically to handle the case where to do an orderly shutdown in a related group of processes, the notifier loop needs to be stopped from another process.\n\nIn this instance, even using a ThreadedNotifier, the _stop()_ method once it has called _self._stop_event.set()_ and written 'stop' to _self._pipe[1]_ in order to stop the loop, goes on to try to cleanup, which fails.\n\nThe cleanup code would be better done at the end of _loop()_, so that it is in the same process context as the _loop()_ method, rather than the process context of the _stop()_ method. Also the _._stop_event_ attribute needs to be a _multiprocessing.Event()_, not a _threading.Event()_.\n\nI propose either adding the following MultiprocessNotifier, or somehow detecting the presence of multiprocessing, and altering the behaviour of Notifier, but this may be a bit 'hidden'. (What I don't like about this code is that it's almost a carbon-copy of ThreadedNotifier with a few subtle changes - seems inefficient!)\n\n``` python\nimport os\nimport time\nimport select\nfrom multiprocessing import Event\n\nfrom pyinotify import Notifier\n\nclass MultiprocessNotifier(Notifier):\n    \"\"\"\n    This notifier inherits from Notifier, but can be used in a multiprocessing environment.\n\n    Note that every functionality provided by this class is also provided\n    through Notifier class. Moreover Notifier should be considered first because\n    it is not threaded and could be easily daemonized.\n\n    The crucial difference between this and the Notifier and ThreadedNotifier is that\n    .stop() can be called in a different process to the one running .loop() \n    \"\"\"\n    def __init__(self, watch_manager, default_proc_fun=None, read_freq=0,\n                 threshold=0, timeout=None):\n        \"\"\"\n        Initialization, initialize base classes. read_freq, threshold and\n        timeout parameters are used when looping.\n\n        @param watch_manager: Watch Manager.\n        @type watch_manager: WatchManager instance\n        @param default_proc_fun: Default processing method. See base class.\n        @type default_proc_fun: instance of ProcessEvent\n        @param read_freq: if read_freq == 0, events are read asap,\n                          if read_freq is > 0, this thread sleeps\n                          max(0, read_freq - timeout) seconds.\n        @type read_freq: int\n        @param threshold: File descriptor will be read only if the accumulated\n                          size to read becomes >= threshold. If != 0, you likely\n                          want to use it in combination with an appropriate\n                          value set for read_freq because without that you would\n                          keep looping without really reading anything and that\n                          until the amount of events to read is >= threshold. At\n                          least with read_freq you might sleep.\n        @type threshold: int\n        @param timeout:\n           see http://docs.python.org/lib/poll-objects.html#poll-objects\n        @type timeout: int\n        \"\"\"\n        # Stop condition\n        self._stop_event = Event()\n        # Init Notifier base class\n        Notifier.__init__(self, watch_manager, default_proc_fun, read_freq,\n                          threshold, timeout)\n        # Create a new pipe used for thread termination\n        self._pipe = os.pipe()\n        self._pollobj.register(self._pipe[0], select.POLLIN)\n\n    def stop(self):\n        \"\"\"\n        Stop notifier's loop. Stop notification.\n        Remainder of the cleanup is done at the end of loop (in the original\n        process)\n        \"\"\"\n        self._stop_event.set()\n        os.write(self._pipe[1], 'stop')\n\n    def loop(self):\n        \"\"\"\n        Notifier's main loop.\n\n        Events are read only once time every min(read_freq, timeout)\n        seconds at best and only if the size of events to read is >= threshold.\n        \"\"\"\n        # When the loop must be terminated .stop() is called, 'stop'\n        # is written to pipe fd so poll() returns and .check_events()\n        # returns False which triggers the while's stop condition\n        # ._stop_event.isSet() which stops the loop execution.\n        # Following the termination of the while loop, it is this process\n        # which must do the cleanup. \n        while not self._stop_event.is_set():\n            self.process_events()\n            ref_time = time.time()\n            if self.check_events():\n                self._sleep(ref_time)\n                self.read_events()\n        Notifier.stop(self)\n        self._pollobj.unregister(self._pipe[0])\n        os.close(self._pipe[0])\n        os.close(self._pipe[1])\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/20", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/20/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/20/events", "html_url": "https://github.com/seb-m/pyinotify/issues/20", "id": 1723184, "node_id": "MDU6SXNzdWUxNzIzMTg0", "number": 20, "title": "del_watch() error message not explicit", "user": {"login": "JordanP", "id": 221981, "node_id": "MDQ6VXNlcjIyMTk4MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/221981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JordanP", "html_url": "https://github.com/JordanP", "followers_url": "https://api.github.com/users/JordanP/followers", "following_url": "https://api.github.com/users/JordanP/following{/other_user}", "gists_url": "https://api.github.com/users/JordanP/gists{/gist_id}", "starred_url": "https://api.github.com/users/JordanP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JordanP/subscriptions", "organizations_url": "https://api.github.com/users/JordanP/orgs", "repos_url": "https://api.github.com/users/JordanP/repos", "events_url": "https://api.github.com/users/JordanP/events{/privacy}", "received_events_url": "https://api.github.com/users/JordanP/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2011-09-23T13:12:51Z", "updated_at": "2011-10-11T17:44:24Z", "closed_at": "2011-10-11T17:44:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nThe del_watch() method can raise an exception which is logged through the logging facility.  Here is the code :\n\n<code>try:\ndel self._wmd[wd]\nexcept KeyError, err:\nlog.error(str(err))\n</code>\n\nBut in that case \"err\" contains only the key that is missing from the dictionnary. For example, my logs contain several instance of\n<code>\n[2011-09-23 14:37:15,922 pyinotify ERROR] 16\n[2011-09-23 14:3X:XX,9XX pyinotify ERROR] 23\n[2011-09-23 14:3X:XX,9XX pyinotify ERROR] 39\n</code>\nIt's a bit cryptic and took me a while before tracing the origin of the issue.\n\nThanks !\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/17", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/17/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/17/events", "html_url": "https://github.com/seb-m/pyinotify/issues/17", "id": 1379015, "node_id": "MDU6SXNzdWUxMzc5MDE1", "number": 17, "title": "Error in add_watch when (rec=True) and (auto_add=True)", "user": {"login": "duayfabi", "id": 970788, "node_id": "MDQ6VXNlcjk3MDc4OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/970788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/duayfabi", "html_url": "https://github.com/duayfabi", "followers_url": "https://api.github.com/users/duayfabi/followers", "following_url": "https://api.github.com/users/duayfabi/following{/other_user}", "gists_url": "https://api.github.com/users/duayfabi/gists{/gist_id}", "starred_url": "https://api.github.com/users/duayfabi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/duayfabi/subscriptions", "organizations_url": "https://api.github.com/users/duayfabi/orgs", "repos_url": "https://api.github.com/users/duayfabi/repos", "events_url": "https://api.github.com/users/duayfabi/events{/privacy}", "received_events_url": "https://api.github.com/users/duayfabi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2011-08-10T11:36:22Z", "updated_at": "2011-08-10T12:11:51Z", "closed_at": "2011-08-10T12:11:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nAn exemple is better than a long explanation :\n1. Create a dir called  < /share/test > and add a watch on it - with the parameters <rec> and <auto_add> set to True\n2. Create a subdir in < /share/test > called < subdir1 >\n3. Move the subdir < subdir1 > to < /share > ( the subdir is always watched )\n4. Create a subdir to < subdir1 > called < subsubdir1 >\n\nAfter the point 4, this error appairs :\n[2011-08-10 11:34:15,034 pyinotify ERROR] add_watch: cannot watch **_FALSE PATHNAME HERE**_ WD=-1, Errno=No such file or directory (ENOENT)\n\nHere is the code I use :\n\n```\n    mask = pyinotify.IN_DELETE  | pyinotify.IN_CLOSE_WRITE | pyinotify.IN_MOVED_FROM | pyinotify.IN_MOVED_TO | pyinotify.IN_CREATE\n    wm = pyinotify.WatchManager()\n    wd = wm.add_watch( flick.IMAGE_DIR, mask, rec=True, auto_add=True )\n\n    class EventHandler(pyinotify.ProcessEvent):\n        def process_IN_DELETE(self, event):\n                            print event.pathname\n\n        def process_IN_CLOSE_WRITE(self, event):\n                            print event.pathname\n\n        def process_IN_MOVED_FROM(self, event):\n                            print event.pathname\n\n        def process_IN_MOVED_TO(self, event):\n                            print event.pathname\n\n        def process_IN_CREATE(self, event):\n                            print event.pathname\n\n    notifier = pyinotify.ThreadedNotifier(wm, EventHandler())\n    notifier.start()\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/16", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/16/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/16/events", "html_url": "https://github.com/seb-m/pyinotify/issues/16", "id": 1274960, "node_id": "MDU6SXNzdWUxMjc0OTYw", "number": 16, "title": "ThreadedNotifier generates Warnings: \"Unable to retrieve Watch object\"", "user": {"login": "89465127", "id": 662476, "node_id": "MDQ6VXNlcjY2MjQ3Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/662476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/89465127", "html_url": "https://github.com/89465127", "followers_url": "https://api.github.com/users/89465127/followers", "following_url": "https://api.github.com/users/89465127/following{/other_user}", "gists_url": "https://api.github.com/users/89465127/gists{/gist_id}", "starred_url": "https://api.github.com/users/89465127/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/89465127/subscriptions", "organizations_url": "https://api.github.com/users/89465127/orgs", "repos_url": "https://api.github.com/users/89465127/repos", "events_url": "https://api.github.com/users/89465127/events{/privacy}", "received_events_url": "https://api.github.com/users/89465127/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2011-07-23T15:20:13Z", "updated_at": "2014-01-23T20:45:31Z", "closed_at": "2011-10-11T17:51:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run the ThreadedNotifier example, I get warnings:\n\neric@ubuntu:~/seb-m-pyinotify-2c7e8f8/python2/examples$ python tutorial_threadednotifier.py \n[2011-07-23 11:16:18,423 pyinotify WARNING] Unable to retrieve Watch object associated to <_RawEvent cookie=0 mask=0x8000 name='' wd=9 >\n[2011-07-23 11:16:18,424 pyinotify WARNING] Unable to retrieve Watch object associated to <_RawEvent cookie=0 mask=0x8000 name='' wd=4 >\n[2011-07-23 11:16:18,424 pyinotify WARNING] Unable to retrieve Watch object associated to <_RawEvent cookie=0 mask=0x8000 name='' wd=5 >\n[2011-07-23 11:16:18,424 pyinotify WARNING] Unable to retrieve Watch object associated to <_RawEvent cookie=0 mask=0x8000 name='' wd=1 >\n\nNot sure if this is a real problem or not.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/14", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/14/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/14/events", "html_url": "https://github.com/seb-m/pyinotify/issues/14", "id": 851224, "node_id": "MDU6SXNzdWU4NTEyMjQ=", "number": 14, "title": "Directory completed copying event", "user": {"login": "josephArtefactual", "id": 711643, "node_id": "MDQ6VXNlcjcxMTY0Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/711643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephArtefactual", "html_url": "https://github.com/josephArtefactual", "followers_url": "https://api.github.com/users/josephArtefactual/followers", "following_url": "https://api.github.com/users/josephArtefactual/following{/other_user}", "gists_url": "https://api.github.com/users/josephArtefactual/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephArtefactual/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephArtefactual/subscriptions", "organizations_url": "https://api.github.com/users/josephArtefactual/orgs", "repos_url": "https://api.github.com/users/josephArtefactual/repos", "events_url": "https://api.github.com/users/josephArtefactual/events{/privacy}", "received_events_url": "https://api.github.com/users/josephArtefactual/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 154236, "node_id": "MDU6TGFiZWwxNTQyMzY=", "url": "https://api.github.com/repos/seb-m/pyinotify/labels/feature-request", "name": "feature-request", "color": "0052cc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2011-05-04T22:58:41Z", "updated_at": "2014-07-06T16:20:51Z", "closed_at": "2014-07-06T16:20:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I know this probably isn't part of the normal inotify functionality, but I had to implement a means of telling when a directory had finished copying.\n\nhttp://code.google.com/p/archivematica/issues/detail?id=482\n\nI created a second recursive watch directory, on the directory getting copied(being populated) to check for updates in the created directory, and timer class to act when modifications had stopped occurring.\n\nhttp://code.google.com/p/archivematica/source/diff?spec=svn1364&r=1364&format=side&path=/trunk/src/MCPServer/lib/archivematicaMCP.py\n\nI was curious if anyone else had faced this, and what solutions they came up with.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/13", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/13/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/13/events", "html_url": "https://github.com/seb-m/pyinotify/issues/13", "id": 765377, "node_id": "MDU6SXNzdWU3NjUzNzc=", "number": 13, "title": "rm_watch does not del watch object", "user": {"login": "satarsa", "id": 727578, "node_id": "MDQ6VXNlcjcyNzU3OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/727578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/satarsa", "html_url": "https://github.com/satarsa", "followers_url": "https://api.github.com/users/satarsa/followers", "following_url": "https://api.github.com/users/satarsa/following{/other_user}", "gists_url": "https://api.github.com/users/satarsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/satarsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/satarsa/subscriptions", "organizations_url": "https://api.github.com/users/satarsa/orgs", "repos_url": "https://api.github.com/users/satarsa/repos", "events_url": "https://api.github.com/users/satarsa/events{/privacy}", "received_events_url": "https://api.github.com/users/satarsa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2011-04-13T18:15:52Z", "updated_at": "2011-04-13T19:02:51Z", "closed_at": "2011-04-13T18:45:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "<p>\nThe included example:\n</p>\n\n<pre>\n<code>\nimport pyinotify\nwm = pyinotify.WatchManager()  # Watch Manager\nmask = pyinotify.IN_DELETE | pyinotify.IN_CREATE  # watched events\nclass EventHandler(pyinotify.ProcessEvent):\n    def process_IN_CREATE(self, event):\n        print \"Creating:\", event.pathname\n    def process_IN_DELETE(self, event):\n        print \"Removing:\", event.pathname\nnotifier = pyinotify.ThreadedNotifier(wm, EventHandler())\nnotifier.start()\nwdd = wm.add_watch('/tmp', mask, rec=True)\nprint wdd\nwm.rm_watch(wdd.values())\nprint wdd\nnotifier.stop()\n\n</code>\n\n</pre>\n\n\n<p>\ngives this output\n</p>\n\n\n<pre>\n\n<code>\nkato examples # python tutorial_threadednotifier.py \n {'/tmp/.wine-1000/server-804-2c05c2': 7, '/tmp': 1, '/tmp/kde-satarsa': 16, '/tmp/kde-root': 18, '/tmp/ksocket-root': 4, '/tmp/pulse-eS4A6sQMNHw5': 2, '/tmp/.X11-unix': 11, '/tmp/akonadi-satarsa.ufjcQc': 3, '/tmp/kde-satarsa/krArc2011-04-13T15_13_08': 17, '/tmp/ksocket-satarsa': 13, '/tmp/mc-satarsa': 12, '/tmp/mc-root': 10, '/tmp/.ICE-unix': 9, '/tmp/.esd': 5, '/tmp/pulse-Y91gmxOGS7dL': 8, '/tmp/hsperfdata_satarsa': 15, '/tmp/.org.chromium.1fkBv2': 14, '/tmp/.wine-1000': 6}\n[2011-04-13 22:06:14,885 pyinotify WARNING] Unable to retrieve Watch object associated to &lt;_RawEvent cookie=0 mask=0x8000 name='' wd=7 &gt;\n[2011-04-13 22:06:14,885 pyinotify WARNING] Unable to retrieve Watch object associated to &lt;_RawEvent cookie=0 mask=0x8000 name='' wd=1 &gt;\n[2011-04-13 22:06:14,885 pyinotify WARNING] Unable to retrieve Watch object associated to &lt;_RawEvent cookie=0 mask=0x8000 name='' wd=16 &gt;\n[2011-04-13 22:06:14,885 pyinotify WARNING] Unable to retrieve Watch object associated to &lt;_RawEvent cookie=0 mask=0x8000 name='' wd=18 &gt;\n[2011-04-13 22:06:14,886 pyinotify WARNING] Unable to retrieve Watch object associated to &lt;_RawEvent cookie=0 mask=0x8000 name='' wd=4 &gt;\n[2011-04-13 22:06:14,886 pyinotify WARNING] Unable to retrieve Watch object associated to &lt;_RawEvent cookie=0 mask=0x8000 name='' wd=2 &gt;\n[2011-04-13 22:06:14,886 pyinotify WARNING] Unable to retrieve Watch object associated to &lt;_RawEvent cookie=0 mask=0x8000 name='' wd=11 &gt;\n{'/tmp/.wine-1000/server-804-2c05c2': 7, '/tmp': 1, '/tmp/kde-satarsa': 16, '/tmp/kde-root': 18, '/tmp/ksocket-root': 4, '/tmp/pulse-eS4A6sQMNHw5': 2, '/tmp/.X11-unix': 11, '/tmp/akonadi-satarsa.ufjcQc': 3, '/tmp/kde-satarsa/krArc2011-04-13T15_13_08': 17, '/tmp/ksocket-satarsa': 13, '/tmp/mc-satarsa': 12, '/tmp/mc-root': 10, '/tmp/.ICE-unix': 9, '/tmp/.esd': 5, '/tmp/pulse-Y91gmxOGS7dL': 8, '/tmp/hsperfdata_satarsa': 15, '/tmp/.org.chromium.1fkBv2': 14, '/tmp/.wine-1000': 6}\n\n</code>\n\n</pre>\n\nThus, watch objects are not deleted from the dict.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/12", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/12/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/12/events", "html_url": "https://github.com/seb-m/pyinotify/issues/12", "id": 709179, "node_id": "MDU6SXNzdWU3MDkxNzk=", "number": 12, "title": "path is incorrect", "user": {"login": "tasermonkey", "id": 284844, "node_id": "MDQ6VXNlcjI4NDg0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/284844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tasermonkey", "html_url": "https://github.com/tasermonkey", "followers_url": "https://api.github.com/users/tasermonkey/followers", "following_url": "https://api.github.com/users/tasermonkey/following{/other_user}", "gists_url": "https://api.github.com/users/tasermonkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tasermonkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tasermonkey/subscriptions", "organizations_url": "https://api.github.com/users/tasermonkey/orgs", "repos_url": "https://api.github.com/users/tasermonkey/repos", "events_url": "https://api.github.com/users/tasermonkey/events{/privacy}", "received_events_url": "https://api.github.com/users/tasermonkey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2011-03-27T22:53:45Z", "updated_at": "2011-09-15T20:11:57Z", "closed_at": "2011-09-15T20:11:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running pyinotify on my readynas device.  When I do and watch a directory, where I rename a file from \"test1.txt\" to \"test.txt\"  it will show up as \"test.txto\" as the event.pathname.  It seems like in the c-code, the null terminator isn't getting reset and maybe just a string length is being passed with the pathname?\n\nThe readynas runs: \n    $ uname -r -v -m -s -p\n    Linux 2.6.17.14ReadyNAS #1 Wed Sep 22 04:42:09 PDT 2010 padre unknown\n\nThe output is:\n    [2011-03-27 15:30:02,628 pyinotify DEBUG] Event queue size: 64\n    [2011-03-27 15:30:02,637 pyinotify DEBUG] <_RawEvent cookie=4269 mask=0x40 name=test.txt wd=1 >\n    [2011-03-27 15:30:02,648 pyinotify DEBUG] <_RawEvent cookie=4269 mask=0x80 name=test1.txt wd=1 >\n    Been modified: testdir/test.txt:testdir/test1.txt\n    [2011-03-27 15:30:15,527 pyinotify DEBUG] Event queue size: 64\n    [2011-03-27 15:30:15,537 pyinotify DEBUG] <_RawEvent cookie=4270 mask=0x40 name=test1.txt wd=1 >\n    [2011-03-27 15:30:15,547 pyinotify DEBUG] <_RawEvent cookie=4270 mask=0x80 name=test.txto wd=1 >\n    Been modified: testdir/test1.txt:testdir/test.txto\n## \n\nthe event handler:\n\n```\nclass EventHandler(pyinotify.ProcessEvent):\nmovEvent = {}\ndef __init__(self, root):\n    pyinotify.ProcessEvent.__init__(self)\n    self.root = root\n    self.root_dir = os.path.dirname(root)\ndef process_IN_CREATE(self, event):\n    self.been_modified(event)\ndef process_IN_DELETE(self, event):\n    self.been_modified(event)\ndef process_IN_MOVED_TO(self, event):\n    self.been_modified(event)\ndef process_IN_CLOSE_WRITE(self, event):\n    self.been_modified(event)\ndef process_IN_MODIFY(self, event):\n    self.been_modified(event)\ndef been_modified(self, event):\n    pathname = os.path.relpath(event.pathname, self.root_dir)\n    src_pathname = os.path.relpath(event.src_pathname, self.root_dir) if hasattr(event, 'src_pathname') and event.src_pathname else None\n    if not src_pathname:\n      print \"Been modified:\", pathname\n    else:\n      print \"Been modified:\", src_pathname + \":\" + pathname\n```\n\n---\n\nWhen I run the module's own main:\n\n```\npython -m pyinotify -v testdir/\n\n[2011-03-27 15:46:10,026 pyinotify DEBUG] Event queue size: 64\n[2011-03-27 15:46:10,037 pyinotify DEBUG] <_RawEvent cookie=4280 mask=0x40 name=test1.txt wd=1 >\nTraceback (most recent call last):\n  File \"/usr/lib/python2.6/logging/__init__.py\", line 776, in emit\n    msg = self.format(record)\n  File \"/usr/lib/python2.6/logging/__init__.py\", line 654, in format\n    return fmt.format(record)\n  File \"/usr/lib/python2.6/logging/__init__.py\", line 436, in format\n    record.message = record.getMessage()\n  File \"/usr/local/lib/python2.6/dist-packages/pyinotify.py\", line 293, in getMessage\n    msg = unicode(msg, sys.getfilesystemencoding())\n  File \"/usr/lib/python2.6/encodings/utf_8.py\", line 16, in decode\n    return codecs.utf_8_decode(input, errors, True)\nUnicodeDecodeError: 'utf8' codec can't decode byte 0xe0 in position 148: invalid continuation byte\n<Event cookie=4280 dir=False mask=0x40 maskname=IN_MOVED_FROM name=test1.txt path=testdir pathname=/c/foobar/testdir/test1.txt wd=1 >\n<Event cookie=4280 dir=False mask=0x80 maskname=IN_MOVED_TO name=test.txt path=testdir pathname=/c/foobar/testdir/test.txt src_pathname=testdir/test1.txt wd=1 >\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/11", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/11/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/11/events", "html_url": "https://github.com/seb-m/pyinotify/issues/11", "id": 681349, "node_id": "MDU6SXNzdWU2ODEzNDk=", "number": 11, "title": "huge memory footprint enhancement with minor modification of class Watch", "user": {"login": "Karmak23", "id": 663404, "node_id": "MDQ6VXNlcjY2MzQwNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/663404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Karmak23", "html_url": "https://github.com/Karmak23", "followers_url": "https://api.github.com/users/Karmak23/followers", "following_url": "https://api.github.com/users/Karmak23/following{/other_user}", "gists_url": "https://api.github.com/users/Karmak23/gists{/gist_id}", "starred_url": "https://api.github.com/users/Karmak23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Karmak23/subscriptions", "organizations_url": "https://api.github.com/users/Karmak23/orgs", "repos_url": "https://api.github.com/users/Karmak23/repos", "events_url": "https://api.github.com/users/Karmak23/events{/privacy}", "received_events_url": "https://api.github.com/users/Karmak23/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2011-03-17T10:51:15Z", "updated_at": "2011-03-22T17:43:34Z", "closed_at": "2011-03-22T17:43:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nstill in my inotify things, I noticed that with 17220 watches, my daemon process takes 49Mb, which is much more than I may allow it to consume.\n\nI modified the Watch class to use **slots**, and now the process takes only 32Mb, which I find a huge enhancement, for a few-lines modification. I probably have more room for improvements in other parts of my code, but watches are by far the biggest number of instance of one class I have in the process.\n\nHere is the patch:\n\n```\n--- pyinotify2.py   2011-03-17 11:46:20.496813005 +0100\n+++ pyinotify.py    2011-03-17 11:46:03.536813000 +0100\n@@ -1390,6 +1390,7 @@\n     Represent a watch, i.e. a file or directory being watched.\n\n     \"\"\"\n+    __slots__ = ('wd', 'path', 'mask', 'proc_fun', 'auto_add', 'exclude_filter', 'dir')\n     def __init__(self, wd, path, mask, proc_fun, auto_add, exclude_filter):\n         \"\"\"\n         Initializations.\n@@ -1425,7 +1426,7 @@\n         s = ' '.join(['%s%s%s' % (Color.field_name(attr),\n                                   Color.punctuation('='),\n                                   Color.field_value(getattr(self, attr))) \\\n-                      for attr in self.__dict__ if not attr.startswith('_')])\n+                      for attr in self.__slots__ if not attr.startswith('_')])\n\n         s = '%s%s %s %s' % (Color.punctuation('<'),\n                             Color.class_name(self.__class__.__name__),\n```\n\nbest regards,\nOlivier\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/10", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/10/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/10/events", "html_url": "https://github.com/seb-m/pyinotify/issues/10", "id": 679910, "node_id": "MDU6SXNzdWU2Nzk5MTA=", "number": 10, "title": "Recursion doesn't follow new dirs", "user": {"login": "ppostma1", "id": 673885, "node_id": "MDQ6VXNlcjY3Mzg4NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/673885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppostma1", "html_url": "https://github.com/ppostma1", "followers_url": "https://api.github.com/users/ppostma1/followers", "following_url": "https://api.github.com/users/ppostma1/following{/other_user}", "gists_url": "https://api.github.com/users/ppostma1/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppostma1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppostma1/subscriptions", "organizations_url": "https://api.github.com/users/ppostma1/orgs", "repos_url": "https://api.github.com/users/ppostma1/repos", "events_url": "https://api.github.com/users/ppostma1/events{/privacy}", "received_events_url": "https://api.github.com/users/ppostma1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2011-03-16T21:24:36Z", "updated_at": "2011-03-16T21:54:26Z", "closed_at": "2011-03-16T21:54:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "with my python script running in the background: (wdd = wm.add_watch('/home/usr/public_html', mask, rec=True))\n\n&gt; touch public_html/file\n\nCreate: /home/usr/public_html/file\nCloseWrite: /home/usr/public_html/file\n&gt; mkdir public_html/adir\n\nCreate: /home/usr/public_html/adir\n&gt; touch public_html/adir/file\n\n&gt; touch public_html/adir/file2\n\n---\n## kill the script and restart:\n\n&gt; touch public_html/adir/file\n\nCloseWrite: /home/usr/public_html/adir/file\n&gt; touch public_html/adir/file2\n\nCloseWrite: /home/usr/public_html/adir/file2\n\n(of course the Create: is no longer triggered)\n\nI was hoping to find that\nif IS_DIR and IN_CREATE and (rec==True) :\n  add_watch(NewDir, mask, rec=True)\n\nimmediately in the pyinotify.\n\nBecause if I call add_watch it in the EventProcessor and call the command tar -xzf project.tar.gz in the watched directory, then the watch will not be add until the queue reaches the create directory. That allows the system to write files to the directory before it's watched, possibly all the files.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/9", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/9/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/9/events", "html_url": "https://github.com/seb-m/pyinotify/issues/9", "id": 670042, "node_id": "MDU6SXNzdWU2NzAwNDI=", "number": 9, "title": "Feature request: Unit tests/test suite", "user": {"login": "fredrick", "id": 309689, "node_id": "MDQ6VXNlcjMwOTY4OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/309689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fredrick", "html_url": "https://github.com/fredrick", "followers_url": "https://api.github.com/users/fredrick/followers", "following_url": "https://api.github.com/users/fredrick/following{/other_user}", "gists_url": "https://api.github.com/users/fredrick/gists{/gist_id}", "starred_url": "https://api.github.com/users/fredrick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fredrick/subscriptions", "organizations_url": "https://api.github.com/users/fredrick/orgs", "repos_url": "https://api.github.com/users/fredrick/repos", "events_url": "https://api.github.com/users/fredrick/events{/privacy}", "received_events_url": "https://api.github.com/users/fredrick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 154236, "node_id": "MDU6TGFiZWwxNTQyMzY=", "url": "https://api.github.com/repos/seb-m/pyinotify/labels/feature-request", "name": "feature-request", "color": "0052cc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2011-03-13T21:42:10Z", "updated_at": "2014-07-06T15:46:14Z", "closed_at": "2014-07-06T15:46:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would love to have some sort of tests that I could run against. Dependent applications using pyinotify would benefit from the extra peace of mind (but thanks for the great work so far).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/8", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/8/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/8/events", "html_url": "https://github.com/seb-m/pyinotify/issues/8", "id": 663984, "node_id": "MDU6SXNzdWU2NjM5ODQ=", "number": 8, "title": "pyinotify.UnicodeLogRecord will most likely fail whenever the minor version < 5", "user": {"login": "TomEubank", "id": 663037, "node_id": "MDQ6VXNlcjY2MzAzNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/663037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomEubank", "html_url": "https://github.com/TomEubank", "followers_url": "https://api.github.com/users/TomEubank/followers", "following_url": "https://api.github.com/users/TomEubank/following{/other_user}", "gists_url": "https://api.github.com/users/TomEubank/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomEubank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomEubank/subscriptions", "organizations_url": "https://api.github.com/users/TomEubank/orgs", "repos_url": "https://api.github.com/users/TomEubank/repos", "events_url": "https://api.github.com/users/TomEubank/events{/privacy}", "received_events_url": "https://api.github.com/users/TomEubank/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2011-03-10T23:17:01Z", "updated_at": "2011-03-23T02:00:30Z", "closed_at": "2011-03-23T02:00:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following code is from pyinotify, questionable line: 136\n    class UnicodeLogRecord(logging.LogRecord):\n        def **init**(self, name, level, pathname, lineno, \n                     msg, args, exc_info, func=None):\n            py_version = sys.version_info \n            # func argument was added in Python 2.5, just ignore it otherwise. \n            if py_version[0] >= 2 and py_version[1] >= 5:\n\nI believe that it should be changed to:\n            if py_version[0] > 2 or py_version[0] == 2 and py_version[1] >= 5:\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/7", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/7/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/7/events", "html_url": "https://github.com/seb-m/pyinotify/issues/7", "id": 544960, "node_id": "MDU6SXNzdWU1NDQ5NjA=", "number": 7, "title": "can't import pyinotify on debian lenny", "user": {"login": "checkp", "id": 579076, "node_id": "MDQ6VXNlcjU3OTA3Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/579076?v=4", "gravatar_id": "", "url": "https://api.github.com/users/checkp", "html_url": "https://github.com/checkp", "followers_url": "https://api.github.com/users/checkp/followers", "following_url": "https://api.github.com/users/checkp/following{/other_user}", "gists_url": "https://api.github.com/users/checkp/gists{/gist_id}", "starred_url": "https://api.github.com/users/checkp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/checkp/subscriptions", "organizations_url": "https://api.github.com/users/checkp/orgs", "repos_url": "https://api.github.com/users/checkp/repos", "events_url": "https://api.github.com/users/checkp/events{/privacy}", "received_events_url": "https://api.github.com/users/checkp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2011-01-23T11:18:57Z", "updated_at": "2014-11-28T23:28:46Z", "closed_at": "2011-01-23T20:23:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python 2.6.6 (r266:84292, Dec 26 2010, 22:31:48) \n[GCC 4.4.5] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n> > > import pyinotify\n> > > Traceback (most recent call last):\n> > >   File \"<stdin>\", line 1, in <module>\n> > >   File \"/usr/local/lib/python2.6/dist-packages/pyinotify.py\", line 134, in <module>\n> > >     load_libc()\n> > >   File \"/usr/local/lib/python2.6/dist-packages/pyinotify.py\", line 119, in load_libc\n> > >     LIBC = ctypes.CDLL(libc, use_errno=True)\n> > > TypeError: **init**() got an unexpected keyword argument 'use_errno'\n\ndpkg -l | grep libc6\nii  libc6                           2.11.2-9                   Embedded GNU C Library: Shared libraries\nii  libc6-dev                       2.11.2-9                   Embedded GNU C Library: Development Librarie\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/6", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/6/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/6/events", "html_url": "https://github.com/seb-m/pyinotify/issues/6", "id": 542913, "node_id": "MDU6SXNzdWU1NDI5MTM=", "number": 6, "title": "please don't remove old versions from pypi", "user": {"login": "rfk", "id": 34695, "node_id": "MDQ6VXNlcjM0Njk1", "avatar_url": "https://avatars3.githubusercontent.com/u/34695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfk", "html_url": "https://github.com/rfk", "followers_url": "https://api.github.com/users/rfk/followers", "following_url": "https://api.github.com/users/rfk/following{/other_user}", "gists_url": "https://api.github.com/users/rfk/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfk/subscriptions", "organizations_url": "https://api.github.com/users/rfk/orgs", "repos_url": "https://api.github.com/users/rfk/repos", "events_url": "https://api.github.com/users/rfk/events{/privacy}", "received_events_url": "https://api.github.com/users/rfk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2011-01-21T23:41:49Z", "updated_at": "2011-01-22T00:10:57Z", "closed_at": "2011-01-22T00:10:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Removing old versions from pypi can break automated deployment scripts that depend on a specific version using e.g. pip requirement files.  For example, the recent 0.9.1 release broke one of my deployment scripts - I had an explicit dependency on pyinotify==0.9.0, which pip can no longer find for installation.\n\nPlease consider leaving the old versions available on pypi for scenarios such as this.\n\nThanks,\n\n   Ryan\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/5", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/5/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/5/events", "html_url": "https://github.com/seb-m/pyinotify/issues/5", "id": 510432, "node_id": "MDU6SXNzdWU1MTA0MzI=", "number": 5, "title": "Bug in python 3", "user": {"login": "zjes", "id": 550431, "node_id": "MDQ6VXNlcjU1MDQzMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/550431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zjes", "html_url": "https://github.com/zjes", "followers_url": "https://api.github.com/users/zjes/followers", "following_url": "https://api.github.com/users/zjes/following{/other_user}", "gists_url": "https://api.github.com/users/zjes/gists{/gist_id}", "starred_url": "https://api.github.com/users/zjes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zjes/subscriptions", "organizations_url": "https://api.github.com/users/zjes/orgs", "repos_url": "https://api.github.com/users/zjes/repos", "events_url": "https://api.github.com/users/zjes/events{/privacy}", "received_events_url": "https://api.github.com/users/zjes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2011-01-06T15:03:15Z", "updated_at": "2011-01-06T15:25:30Z", "closed_at": "2011-01-06T15:25:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please, change if err.errno == errno.EINTR: at line 1083 to if err.args[0] == errno.EINTR:\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/4", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/4/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/4/events", "html_url": "https://github.com/seb-m/pyinotify/issues/4", "id": 344276, "node_id": "MDU6SXNzdWUzNDQyNzY=", "number": 4, "title": "Elaboration needed on \"do_glob\" arg to WatchManager", "user": {"login": "detly", "id": 311239, "node_id": "MDQ6VXNlcjMxMTIzOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/311239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detly", "html_url": "https://github.com/detly", "followers_url": "https://api.github.com/users/detly/followers", "following_url": "https://api.github.com/users/detly/following{/other_user}", "gists_url": "https://api.github.com/users/detly/gists{/gist_id}", "starred_url": "https://api.github.com/users/detly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detly/subscriptions", "organizations_url": "https://api.github.com/users/detly/orgs", "repos_url": "https://api.github.com/users/detly/repos", "events_url": "https://api.github.com/users/detly/events{/privacy}", "received_events_url": "https://api.github.com/users/detly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2010-10-03T02:56:32Z", "updated_at": "2010-10-16T06:31:26Z", "closed_at": "2010-10-16T06:31:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "The WatchManager.add_watch(...) method has a boolean argument \"do_glob\" \u2014 what exactly does this do? Is it for excluding certain paths? How is the glob set?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/3", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/3/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/3/events", "html_url": "https://github.com/seb-m/pyinotify/issues/3", "id": 343225, "node_id": "MDU6SXNzdWUzNDMyMjU=", "number": 3, "title": "rec=True does not work in example", "user": {"login": "crisgal", "id": 423973, "node_id": "MDQ6VXNlcjQyMzk3Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/423973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crisgal", "html_url": "https://github.com/crisgal", "followers_url": "https://api.github.com/users/crisgal/followers", "following_url": "https://api.github.com/users/crisgal/following{/other_user}", "gists_url": "https://api.github.com/users/crisgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/crisgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crisgal/subscriptions", "organizations_url": "https://api.github.com/users/crisgal/orgs", "repos_url": "https://api.github.com/users/crisgal/repos", "events_url": "https://api.github.com/users/crisgal/events{/privacy}", "received_events_url": "https://api.github.com/users/crisgal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2010-10-01T22:16:29Z", "updated_at": "2010-10-01T23:31:37Z", "closed_at": "2010-10-01T23:31:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys,\n\nI downloaded pynotify from the Git repo, and the recursiveness doesn't work for me.\nin one window:\n\ngit clone git://github.com/seb-m/pyinotify.git\ncd pyinotify/python2/\ncp examples/tutorial_notifier.py .\n\npython tutorial_notifier.py \n\nsecond window:\ncrisgal@ubuntu:~$ mkdir /tmp/dir1\noutput: Creating: /tmp/dir1\n\ncrisgal@ubuntu:~$ touch /tmp/file1\noutput: Creating: /tmp/file1\n\nbut these, don't generate any output:\ncrisgal@ubuntu:~$ mkdir /tmp/dir1/dir2\ncrisgal@ubuntu:~$ touch /tmp/dir1/file2\n\nI'm running an up to date Ubuntu Lucid Lynx:\nLinux ubuntu 2.6.32-24-generic #43-Ubuntu SMP Thu Sep 16 14:17:33 UTC 2010 i686 GNU/Linux\nPython 2.6.5\n\nany idea what am I doing wrong?\n\n$ grep rec tutorial_notifier.py \nwdd = wm.add_watch('/tmp', mask, rec=True)\n\nthanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/2", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/2/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/2/events", "html_url": "https://github.com/seb-m/pyinotify/issues/2", "id": 318016, "node_id": "MDU6SXNzdWUzMTgwMTY=", "number": 2, "title": "Missing IN_CREATE events", "user": {"login": "seb-m", "id": 328365, "node_id": "MDQ6VXNlcjMyODM2NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/328365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seb-m", "html_url": "https://github.com/seb-m", "followers_url": "https://api.github.com/users/seb-m/followers", "following_url": "https://api.github.com/users/seb-m/following{/other_user}", "gists_url": "https://api.github.com/users/seb-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/seb-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seb-m/subscriptions", "organizations_url": "https://api.github.com/users/seb-m/orgs", "repos_url": "https://api.github.com/users/seb-m/repos", "events_url": "https://api.github.com/users/seb-m/events{/privacy}", "received_events_url": "https://api.github.com/users/seb-m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 24, "created_at": "2010-09-15T20:34:27Z", "updated_at": "2011-11-02T03:05:20Z", "closed_at": "2011-09-15T20:40:48Z", "author_association": "OWNER", "active_lock_reason": null, "body": "_Duplicated from [Pyinotify Trac - Issue 8](http://trac.dbzteam.org/pyinotify/ticket/8)_\n\nConsider this case:\n- `/wdir`: is a watched directory, where each new created directory is automatically watched\n- `/sdir`: is a directory with several small files (file1, file2,..., file10)\n\nNow, `/sdir` and its content are copied to `/wdir`:\n\n```\n cp -a /sdir /wdir\n```\n\nUnder these circumstances if we had started pyinotify like this:\n\n```\n $ python pyinotify.py -a -e IN_CREATE /wdir\n```\n\nWe would have observed the following output (assuming files1-10 are copied in that order):\n\n```\n <Event dir=True mask=0x40000100 maskname=IN_CREATE|IN_ISDIR name=sdir path=/wdir pathname=/wdir/sdir wd=1 >\n # ... missed IN_CREATE events for file1 thru file3 ...\n <Event dir=True mask=0x40000000 maskname=IN_CREATE name=file4 path=/wdir/sdir pathname=/wdir/sdir/file4 wd=1 >\n <Event dir=True mask=0x40000000 maskname=IN_CREATE name=file5 path=/wdir/sdir pathname=/wdir/sdir/file5 wd=1 >\n <Event dir=True mask=0x40000000 maskname=IN_CREATE name=file6 path=/wdir/sdir pathname=/wdir/sdir/file6 wd=1 >\n```\n\nWhat happened is that there is a short laps of time between the moment `/sdir` is copied into `/wdir` and the moment where pyinotify effectively starts watching it. And during that time where `/wdir/sdir` is not yet watched the first files file1, file2, file3 are copied into this directory and mistakenly do not generate `IN_CREATE` events as expected.\n\n(Thanks to Peter Smith for his initial report)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/seb-m/pyinotify/issues/1", "repository_url": "https://api.github.com/repos/seb-m/pyinotify", "labels_url": "https://api.github.com/repos/seb-m/pyinotify/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/seb-m/pyinotify/issues/1/comments", "events_url": "https://api.github.com/repos/seb-m/pyinotify/issues/1/events", "html_url": "https://github.com/seb-m/pyinotify/issues/1", "id": 315871, "node_id": "MDU6SXNzdWUzMTU4NzE=", "number": 1, "title": "Insecure pid file creation", "user": {"login": "ThiefMaster", "id": 179599, "node_id": "MDQ6VXNlcjE3OTU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThiefMaster", "html_url": "https://github.com/ThiefMaster", "followers_url": "https://api.github.com/users/ThiefMaster/followers", "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}", "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions", "organizations_url": "https://api.github.com/users/ThiefMaster/orgs", "repos_url": "https://api.github.com/users/ThiefMaster/repos", "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}", "received_events_url": "https://api.github.com/users/ThiefMaster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2010-09-14T17:10:50Z", "updated_at": "2010-09-14T23:19:14Z", "closed_at": "2010-09-14T23:19:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "The pid file is not created with secure permissions (0600) which may result in a world-writable PID file.\nThis results in a security hole as calling loop() with daemonize arguments again will kill whatever pid is listed in that file.\nAnd depending on what you use your program for it might be even killed from a process running with root privileges which is certainly bad.\n", "performed_via_github_app": null, "score": 1.0}]}