{"total_count": 25, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/282", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/282/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/282/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/282/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/282", "id": 683535916, "node_id": "MDU6SXNzdWU2ODM1MzU5MTY=", "number": 282, "title": "Add conda release", "user": {"login": "dycw", "id": 10572122, "node_id": "MDQ6VXNlcjEwNTcyMTIy", "avatar_url": "https://avatars0.githubusercontent.com/u/10572122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dycw", "html_url": "https://github.com/dycw", "followers_url": "https://api.github.com/users/dycw/followers", "following_url": "https://api.github.com/users/dycw/following{/other_user}", "gists_url": "https://api.github.com/users/dycw/gists{/gist_id}", "starred_url": "https://api.github.com/users/dycw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dycw/subscriptions", "organizations_url": "https://api.github.com/users/dycw/orgs", "repos_url": "https://api.github.com/users/dycw/repos", "events_url": "https://api.github.com/users/dycw/events{/privacy}", "received_events_url": "https://api.github.com/users/dycw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-21T12:45:45Z", "updated_at": "2020-08-21T14:55:48Z", "closed_at": "2020-08-21T14:55:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all, I was wondering if there is capacity to release pytest-randomly on conda too?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/269", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/269/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/269/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/269/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/269", "id": 648960442, "node_id": "MDU6SXNzdWU2NDg5NjA0NDI=", "number": 269, "title": "crashes with numpy and --randomly-seed=7106521602475165645", "user": {"login": "graingert", "id": 413772, "node_id": "MDQ6VXNlcjQxMzc3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/413772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graingert", "html_url": "https://github.com/graingert", "followers_url": "https://api.github.com/users/graingert/followers", "following_url": "https://api.github.com/users/graingert/following{/other_user}", "gists_url": "https://api.github.com/users/graingert/gists{/gist_id}", "starred_url": "https://api.github.com/users/graingert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graingert/subscriptions", "organizations_url": "https://api.github.com/users/graingert/orgs", "repos_url": "https://api.github.com/users/graingert/repos", "events_url": "https://api.github.com/users/graingert/events{/privacy}", "received_events_url": "https://api.github.com/users/graingert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-01T12:56:59Z", "updated_at": "2020-07-10T13:26:58Z", "closed_at": "2020-07-10T13:26:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n INTERNALERROR>   File \"/home/runner/work/pytest-randomly/pytest-randomly/.tox/py36/lib/python3.6/site-packages/pytest_randomly.py\", line 144, in _reseed\r\nINTERNALERROR>     np_random.seed(seed)\r\nINTERNALERROR>   File \"mtrand.pyx\", line 243, in numpy.random.mtrand.RandomState.seed\r\nINTERNALERROR>   File \"_mt19937.pyx\", line 166, in numpy.random._mt19937.MT19937._legacy_seeding\r\nINTERNALERROR>   File \"_mt19937.pyx\", line 180, in numpy.random._mt19937.MT19937._legacy_seeding\r\nINTERNALERROR> ValueError: Seed must be between 0 and 2**32 - 1\r\n```\r\n\r\nlooks like some sort of seed truncation is needed:\r\n```python\r\ndef _numpy_seed(seed):\r\n    return seed if 0 <= seed <= 2**32-1 else random.Random(seed).getrandbits(32)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/267", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/267/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/267/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/267/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/267", "id": 648922865, "node_id": "MDU6SXNzdWU2NDg5MjI4NjU=", "number": 267, "title": "seed based on best avialable random source (os.urandom or time.time() + pid + time.monotonic())", "user": {"login": "graingert", "id": 413772, "node_id": "MDQ6VXNlcjQxMzc3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/413772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graingert", "html_url": "https://github.com/graingert", "followers_url": "https://api.github.com/users/graingert/followers", "following_url": "https://api.github.com/users/graingert/following{/other_user}", "gists_url": "https://api.github.com/users/graingert/gists{/gist_id}", "starred_url": "https://api.github.com/users/graingert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graingert/subscriptions", "organizations_url": "https://api.github.com/users/graingert/orgs", "repos_url": "https://api.github.com/users/graingert/repos", "events_url": "https://api.github.com/users/graingert/events{/privacy}", "received_events_url": "https://api.github.com/users/graingert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-01T11:55:34Z", "updated_at": "2020-07-06T16:04:33Z", "closed_at": "2020-07-06T16:04:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "cpython defaults to using (os.urandom or time.time() + pid + time.monotonic()) for a random.seed: https://github.com/python/cpython/blob/d0981e61a5869c48e0a70a512967558391272a93/Modules/_randommodule.c#L233-L262\r\n\r\nthese functions aren't actually available to python code, but `random.Random().getrandbits(64)` seems to be the next best thing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/255", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/255/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/255/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/255", "id": 620370545, "node_id": "MDU6SXNzdWU2MjAzNzA1NDU=", "number": 255, "title": "test_entrypoint_injection fail", "user": {"login": "Alessandro-Barbieri", "id": 10689739, "node_id": "MDQ6VXNlcjEwNjg5NzM5", "avatar_url": "https://avatars2.githubusercontent.com/u/10689739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alessandro-Barbieri", "html_url": "https://github.com/Alessandro-Barbieri", "followers_url": "https://api.github.com/users/Alessandro-Barbieri/followers", "following_url": "https://api.github.com/users/Alessandro-Barbieri/following{/other_user}", "gists_url": "https://api.github.com/users/Alessandro-Barbieri/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alessandro-Barbieri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alessandro-Barbieri/subscriptions", "organizations_url": "https://api.github.com/users/Alessandro-Barbieri/orgs", "repos_url": "https://api.github.com/users/Alessandro-Barbieri/repos", "events_url": "https://api.github.com/users/Alessandro-Barbieri/events{/privacy}", "received_events_url": "https://api.github.com/users/Alessandro-Barbieri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-18T17:10:32Z", "updated_at": "2020-05-19T08:40:49Z", "closed_at": "2020-05-19T08:40:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get this while packaging it for gentoo\r\n```\r\n================================================================================================================= FAILURES ==================================================================================================================\r\n_________________________________________________________________________________________________________ test_entrypoint_injection _________________________________________________________________________________________________________\r\n\r\ntestdir = <Testdir local('/var/tmp/portage/dev-python/pytest-randomly-3.3.1-r1/temp/pytest-of-portage/pytest-0/test_entrypoint_injection0')>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f655c41dba8>\r\n\r\n    def test_entrypoint_injection(testdir, monkeypatch):\r\n        \"\"\"Test that registered entry points are seeded\"\"\"\r\n\r\n        class _FakeEntryPoint:\r\n            \"\"\"Minimal surface of Entry point API to allow testing\"\"\"\r\n\r\n            def __init__(self, name, obj):\r\n                self.name = name\r\n                self._obj = obj\r\n\r\n            def load(self):\r\n                return self._obj\r\n\r\n        entry_points = []\r\n\r\n        def fake_entry_points():\r\n            return {\r\n                \"pytest_randomly.random_seeder\": entry_points,\r\n                \"ignore\": lambda x: 1 / 0,\r\n            }\r\n\r\n        monkeypatch.setattr(pytest_randomly, \"entry_points\", fake_entry_points)\r\n        reseed = Mock()\r\n        entry_points.append(_FakeEntryPoint(\"test_seeder\", reseed))\r\n\r\n        # Need to run in-process so that monkeypatching works\r\n        testdir.runpytest(\"--randomly-seed=1\")\r\n>       assert reseed.call_args == ((1,),)\r\nE       assert None == ((1,),)\r\nE         +None\r\nE         -((1,),)\r\n\r\n../../../../work/pytest-randomly-3.3.1/tests/test_pytest_randomly.py:654: AssertionError\r\n----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------\r\n============================================================================================================ test session starts ============================================================================================================\r\nplatform linux -- Python 3.6.10, pytest-5.4.2, py-1.8.0, pluggy-0.13.1\r\nUsing --randomly-seed=1\r\nrootdir: /var/tmp/portage/dev-python/pytest-randomly-3.3.1-r1/temp/pytest-of-portage/pytest-0/test_entrypoint_injection0\r\nplugins: randomly-3.3.1, aiohttp-0.3.0, mock-3.1.0, travis-fold-1.3.0, forked-1.1.3, xdist-1.32.0, instafail-0.4.1.post0\r\ncollected 0 items\r\n\r\n=========================================================================================================== no tests ran in 0.03s ===========================================================================================================\r\n============================================================================================================= warnings summary ==============================================================================================================\r\ntests/test_pytest_randomly.py: 36 tests with warnings\r\n  /usr/lib64/python3.6/site-packages/_pytest/compat.py:333: PytestDeprecationWarning: The TerminalReporter.writer attribute is deprecated, use TerminalReporter._tw instead at your own risk.\r\n  See https://docs.pytest.org/en/latest/deprecations.html#terminalreporter-writer for more information.\r\n    return getattr(object, name, default)\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n========================================================================================================== short test summary info ==========================================================================================================\r\nFAILED tests/test_pytest_randomly.py::test_entrypoint_injection - assert None == ((1,),)\r\n================================================================================================ 1 failed, 31 passed, 36 warnings in 28.68s =================================================================================================\r\n ```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/249", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/249/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/249/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/249", "id": 601459594, "node_id": "MDU6SXNzdWU2MDE0NTk1OTQ=", "number": 249, "title": "using PyTorch rng via entry point", "user": {"login": "janfb", "id": 11921527, "node_id": "MDQ6VXNlcjExOTIxNTI3", "avatar_url": "https://avatars1.githubusercontent.com/u/11921527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janfb", "html_url": "https://github.com/janfb", "followers_url": "https://api.github.com/users/janfb/followers", "following_url": "https://api.github.com/users/janfb/following{/other_user}", "gists_url": "https://api.github.com/users/janfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/janfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janfb/subscriptions", "organizations_url": "https://api.github.com/users/janfb/orgs", "repos_url": "https://api.github.com/users/janfb/repos", "events_url": "https://api.github.com/users/janfb/events{/privacy}", "received_events_url": "https://api.github.com/users/janfb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-16T20:51:42Z", "updated_at": "2020-04-17T10:08:06Z", "closed_at": "2020-04-17T09:44:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for providing this plugin, looks great! \r\n\r\nI am running tests in a project relying in `PyTorch` and I want to use the corresponding `rng`. I tried to follow your documentation and added \r\n```\r\n[options.entry_points]\r\npytest_randomly.random_seeder =\r\n    torch = torch.manual_seed\r\n```\r\nto my `setup.cfg`. \r\n\r\nHowever, `torch` is not in the name space when reseed function is called in https://github.com/pytest-dev/pytest-randomly/blob/f7e377b351456051ad1e10afb7665155419c239c/src/pytest_randomly.py#L152 \r\n\r\nWhat am I missing? \r\n\r\nThanks for your help! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/247", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/247/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/247/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/247", "id": 600398240, "node_id": "MDU6SXNzdWU2MDAzOTgyNDA=", "number": 247, "title": "3.3.0 fails with \"unknown hook 'pytest_configure_node' in plugin\"", "user": {"login": "lemon24", "id": 2707033, "node_id": "MDQ6VXNlcjI3MDcwMzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2707033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lemon24", "html_url": "https://github.com/lemon24", "followers_url": "https://api.github.com/users/lemon24/followers", "following_url": "https://api.github.com/users/lemon24/following{/other_user}", "gists_url": "https://api.github.com/users/lemon24/gists{/gist_id}", "starred_url": "https://api.github.com/users/lemon24/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lemon24/subscriptions", "organizations_url": "https://api.github.com/users/lemon24/orgs", "repos_url": "https://api.github.com/users/lemon24/repos", "events_url": "https://api.github.com/users/lemon24/events{/privacy}", "received_events_url": "https://api.github.com/users/lemon24/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-15T15:44:14Z", "updated_at": "2020-04-15T20:49:43Z", "closed_at": "2020-04-15T17:39:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using pytest-randomly 3.3.0 with a recent pytest fails with:\r\n\r\n```\r\nINTERNALERROR> pluggy.manager.PluginValidationError: unknown hook 'pytest_configure_node' in plugin <module 'pytest_randomly' from '/home/travis/virtualenv/python3.6.10/lib/python3.6/site-packages/pytest_randomly.py'>\r\n```\r\n\r\nVersions:\r\n\r\n```\r\nplatform linux -- Python 3.6.10, pytest-5.3.5, py-1.8.0, pluggy-0.13.1 -- /home/travis/virtualenv/python3.6.10/bin/python\r\nplugins: randomly-3.3.0, cov-2.8.1, requests-mock-1.7.0\r\n```\r\n\r\nFull log: https://travis-ci.org/github/lemon24/reader/jobs/675355855\r\n\r\nRunning it on my laptop with the latest pytest version gives the same result:\r\n\r\n```\r\n% pip install pytest-randomly==3.3.0\r\n...\r\n% pytest\r\n============================= test session starts ==============================\r\nplatform darwin -- Python 3.7.6, pytest-5.4.1, py-1.8.1, pluggy-0.13.1\r\nUsing --randomly-seed=1586965045\r\nrootdir: /Users/lemon/code/reader, inifile: setup.cfg\r\nplugins: requests-mock-1.7.0, randomly-3.3.0, cov-2.8.1\r\ncollected 534 items                                                            \r\n...\r\nINTERNALERROR> pluggy.manager.PluginValidationError: unknown hook 'pytest_configure_node' in plugin <module 'pytest_randomly' from '/Users/lemon/code/reader/_venv/lib/python3.7/site-packages/pytest_randomly.py'>\r\n\r\n============================ no tests ran in 0.66s =============================\r\n% pip install 'pytest-randomly<3.3.0'\r\n...\r\n% pytest                             \r\n============================= test session starts ==============================\r\nplatform darwin -- Python 3.7.6, pytest-5.4.1, py-1.8.1, pluggy-0.13.1\r\nUsing --randomly-seed=1586965126\r\nrootdir: /Users/lemon/code/reader, inifile: setup.cfg\r\nplugins: requests-mock-1.7.0, randomly-3.2.1, cov-2.8.1\r\ncollected 534 items                                                            \r\n...\r\n\r\n================== 460 passed, 72 skipped, 2 xfailed in 3.24s ==================\r\n```\r\n\r\nI will try adding a minimal repro later.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/246", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/246/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/246/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/246", "id": 600396195, "node_id": "MDU6SXNzdWU2MDAzOTYxOTU=", "number": 246, "title": "PluginValidationError: unknown hook 'pytest_configure_node'", "user": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-15T15:41:31Z", "updated_at": "2020-04-15T18:16:16Z", "closed_at": "2020-04-15T17:44:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've just updated to the latest version of `pytest-randomly` (`3.3`) and found that it doesn't work for me.\r\n\r\nSteps:\r\n1. Create a Python 3.6 or 3.7 virtualenv (other Python versions untested)\r\n2. `pip install pytest pytest-randomly==3.3`\r\n3. `pytest`\r\n\r\nThis yields the following error output:\r\n```\r\n$ pytest\r\n======================= test session starts =======================\r\nplatform linux -- Python 3.6.10, pytest-5.4.1, py-1.8.1, pluggy-0.13.1\r\nUsing --randomly-seed=1586964821\r\nrootdir: /tmp/temp\r\nplugins: randomly-3.3.0\r\ncollected 0 items                                                                                                                                                                                               \r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \".../.virtualenvs/temp/lib/python3.6/site-packages/_pytest/main.py\", line 191, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \".../.virtualenvs/temp/lib/python3.6/site-packages/_pytest/main.py\", line 246, in _main\r\nINTERNALERROR>     config.hook.pytest_collection(session=session)\r\nINTERNALERROR>   File \".../.virtualenvs/temp/lib/python3.6/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \".../.virtualenvs/temp/lib/python3.6/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \".../.virtualenvs/temp/lib/python3.6/site-packages/pluggy/manager.py\", line 87, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \".../.virtualenvs/temp/lib/python3.6/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \".../.virtualenvs/temp/lib/python3.6/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \".../.virtualenvs/temp/lib/python3.6/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \".../.virtualenvs/temp/lib/python3.6/site-packages/_pytest/main.py\", line 257, in pytest_collection\r\nINTERNALERROR>     return session.perform_collect()\r\nINTERNALERROR>   File \".../.virtualenvs/temp/lib/python3.6/site-packages/_pytest/main.py\", line 453, in perform_collect\r\nINTERNALERROR>     self.config.pluginmanager.check_pending()\r\nINTERNALERROR>   File \".../.virtualenvs/temp/lib/python3.6/site-packages/pluggy/manager.py\", line 277, in check_pending\r\nINTERNALERROR>     % (name, hookimpl.plugin),\r\nINTERNALERROR> pluggy.manager.PluginValidationError: unknown hook 'pytest_configure_node' in plugin <module 'pytest_randomly' from '.../.virtualenvs/temp/lib/python3.6/site-packages/pytest_randomly.py'>\r\n\r\n======================= no tests ran in 0.02s =======================\r\n```\r\n\r\nIf I downgrade to `pytest-randomly<3.3` then my tests are run as expected.\r\n\r\nI'm currently using `pytest` `5.4.1`, though this also reproduces with `pytest` `5.3.5`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/242", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/242/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/242/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/242", "id": 593522509, "node_id": "MDU6SXNzdWU1OTM1MjI1MDk=", "number": 242, "title": "Provide reverse order", "user": {"login": "thbde", "id": 4573481, "node_id": "MDQ6VXNlcjQ1NzM0ODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/4573481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thbde", "html_url": "https://github.com/thbde", "followers_url": "https://api.github.com/users/thbde/followers", "following_url": "https://api.github.com/users/thbde/following{/other_user}", "gists_url": "https://api.github.com/users/thbde/gists{/gist_id}", "starred_url": "https://api.github.com/users/thbde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thbde/subscriptions", "organizations_url": "https://api.github.com/users/thbde/orgs", "repos_url": "https://api.github.com/users/thbde/repos", "events_url": "https://api.github.com/users/thbde/events{/privacy}", "received_events_url": "https://api.github.com/users/thbde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-03T17:09:07Z", "updated_at": "2020-05-11T16:02:37Z", "closed_at": "2020-05-11T16:02:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As a developer, I want to execute the tests in reverse order to reveal test dependencies.\r\n\r\nGiven that the natural order of execution is O={t1, ..., tn}, maybe provide a command line switch that allows to run all tests on reverse order reverse(O)={tn, ..., t1}.\r\n\r\n\r\nMotivation: \r\nAn empirical study [0] on the test independence assumption (i.e., the result of a test execution does not depend on other test executions) shows, that the reverse strategy can already reveal quite a large amount of test dependencies. A reverse order can reveal more than 70% of all cases for manually created tests and more than 60% of all cases for generated tests, compared to the best detection strategy.\r\n\r\nThe authors of the study finally suggest to use the randomized strategy. However, the suggestions has limitations in practice. The authors evaluated 10 reruns for random order executions with different seeds. This may lead to a 10x increase in test costs (such as waiting times) and may not be practical. Alternatively to 10 reruns in a row, we could execute the tests in random order only once per commit and observe over time. For each 10 commits, we reach the same threshold of 10 random executions. However, in this case, the commit when a flawed test is introduced may be different to the commit for which the test fails. This leads to higher effort for the root cause detection.\r\n\r\nRunning the tests in reverse order is a simple and effective approach to detect simple order issues.\r\n\r\n(I am also unable to create a PR for this issue because I do not fully understand the logic of the conditionals in the [pytest_collection_modifyitems](https://github.com/pytest-dev/pytest-randomly/blob/f422719d3455be373381253d87654f9e1df4c3e9/src/pytest_randomly.py#L154) function. It would be helpful for a reader to have some comments on why the logic flow is organized in the current way.)\r\n\r\n[0] Sai Zhang, Darioush Jalali, Jochen Wuttke, K\u0131van\u00e7 Mu\u015flu, Wing Lam, Michael D. Ernst, and David Notkin. 2014. Empirically revisiting the test independence assumption. In Proceedings of the 2014 International Symposium on Software Testing and Analysis (ISSTA 2014). Association for Computing Machinery, New York, NY, USA, 385\u2013396. doi:https://doi.org/10.1145/2610384.2610404", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/228", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/228/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/228/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/228", "id": 564207889, "node_id": "MDU6SXNzdWU1NjQyMDc4ODk=", "number": 228, "title": "Allow to repeat tests.", "user": {"login": "tobiasraabe", "id": 22533006, "node_id": "MDQ6VXNlcjIyNTMzMDA2", "avatar_url": "https://avatars0.githubusercontent.com/u/22533006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobiasraabe", "html_url": "https://github.com/tobiasraabe", "followers_url": "https://api.github.com/users/tobiasraabe/followers", "following_url": "https://api.github.com/users/tobiasraabe/following{/other_user}", "gists_url": "https://api.github.com/users/tobiasraabe/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobiasraabe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobiasraabe/subscriptions", "organizations_url": "https://api.github.com/users/tobiasraabe/orgs", "repos_url": "https://api.github.com/users/tobiasraabe/repos", "events_url": "https://api.github.com/users/tobiasraabe/events{/privacy}", "received_events_url": "https://api.github.com/users/tobiasraabe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-12T19:11:40Z", "updated_at": "2020-02-12T23:09:10Z", "closed_at": "2020-02-12T23:09:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everybody,\r\n\r\nthanks for developing ``pytest-randomly``! I have a big test suite full of tests working with random data and with changing seeds I feel more confident that I will eventually discover all weird edge cases.\r\n\r\nWhat I would like to propose is to repeat tests with different random seeds derived from the base seed. E.g., I have a test I would like to repeat five times and ``-randomly-seed=5``. Then, the test should be run with seeds 5, 6, 7, 8, 9.\r\n\r\nI imagine a solution like\r\n\r\n```python\r\nimport numpy as np\r\n\r\n@pytest.mark.randomly(repetitions=5)\r\ndef test():\r\n    arr = np.random.randint(low=0, high=10, size=2)\r\n    assert arr[0] + arr[1] == np.sum(arr)\r\n```\r\n\r\nCurrently, I interfere in the test generation routine and every test with an argument named ``seed`` is parametrized with increments of ``--randomly-seed``.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/222", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/222/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/222/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/222", "id": 548415026, "node_id": "MDU6SXNzdWU1NDg0MTUwMjY=", "number": 222, "title": "Switch the default behavior of randomization", "user": {"login": "windelbouwman", "id": 1816500, "node_id": "MDQ6VXNlcjE4MTY1MDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1816500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/windelbouwman", "html_url": "https://github.com/windelbouwman", "followers_url": "https://api.github.com/users/windelbouwman/followers", "following_url": "https://api.github.com/users/windelbouwman/following{/other_user}", "gists_url": "https://api.github.com/users/windelbouwman/gists{/gist_id}", "starred_url": "https://api.github.com/users/windelbouwman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/windelbouwman/subscriptions", "organizations_url": "https://api.github.com/users/windelbouwman/orgs", "repos_url": "https://api.github.com/users/windelbouwman/repos", "events_url": "https://api.github.com/users/windelbouwman/events{/privacy}", "received_events_url": "https://api.github.com/users/windelbouwman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-11T10:54:11Z", "updated_at": "2020-01-12T10:40:58Z", "closed_at": "2020-01-12T10:40:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "As the plugin behaves now, tests are randomized when the plugin is installed. I would like to change this behavior, such that when the plugin is installed, an additional option flag (`--randomly-reorganize`) comes available to randomize tests.\r\n\r\nThe reason for me to want it like this, is that I do not always want to randomize tests, and I would like to explicitly pass an argument when I want to randomize tests.\r\n\r\nAnother minor reason why this might be better, is that an inverted option (e.g. `--disable-x` or `--no-y`) is arguably slightly more difficult to grasp then it's non-inverted option (e.g. `--enable-x` or `--y`)\r\n\r\nDid this topic come up already?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/218", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/218/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/218/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/218", "id": 531045881, "node_id": "MDU6SXNzdWU1MzEwNDU4ODE=", "number": 218, "title": "pytest-randomly own tests fail against Pytest 5.3+", "user": {"login": "stanislavlevin", "id": 31205609, "node_id": "MDQ6VXNlcjMxMjA1NjA5", "avatar_url": "https://avatars2.githubusercontent.com/u/31205609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stanislavlevin", "html_url": "https://github.com/stanislavlevin", "followers_url": "https://api.github.com/users/stanislavlevin/followers", "following_url": "https://api.github.com/users/stanislavlevin/following{/other_user}", "gists_url": "https://api.github.com/users/stanislavlevin/gists{/gist_id}", "starred_url": "https://api.github.com/users/stanislavlevin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stanislavlevin/subscriptions", "organizations_url": "https://api.github.com/users/stanislavlevin/orgs", "repos_url": "https://api.github.com/users/stanislavlevin/repos", "events_url": "https://api.github.com/users/stanislavlevin/events{/privacy}", "received_events_url": "https://api.github.com/users/stanislavlevin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-02T10:49:25Z", "updated_at": "2019-12-02T17:41:57Z", "closed_at": "2019-12-02T17:41:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I run `pytest-randomly`'s test suite during RPM build.\r\nWith recent Pytest (5.3+) there is an error:\r\n```\r\ntest_pytest_randomly.py .....F..............ss...                        [100%]\r\n\r\n=================================== FAILURES ===================================\r\n___________________ test_passing_nonsense_for_randomly_seed ____________________\r\n\r\nourtestdir = <Testdir local('/usr/src/tmp/pytest-of-builder/pytest-0/test_passing_nonsense_for_randomly_seed0')>\r\n\r\n    def test_passing_nonsense_for_randomly_seed(ourtestdir):\r\n        ourtestdir.makepyfile(\r\n            test_one=\"\"\"\r\n            def test_a():\r\n                pass\r\n            \"\"\"\r\n        )\r\n        out = ourtestdir.runpytest(\"--randomly-seed=invalidvalue\")\r\n        assert out.ret != 0\r\n        out.stderr.fnmatch_lines(\r\n            [\r\n                (\r\n>                   \"pytest.py: error: argument --randomly-seed: 'invalidvalue' \"\r\n                    + \"is not an integer or the string 'last'\"\r\n                )\r\n            ]\r\n        )\r\nE       Failed: nomatch: \"pytest.py: error: argument --randomly-seed: 'invalidvalue' is not an integer or the string 'last'\"\r\nE           and: 'ERROR: usage: pytest [options] [file_or_dir] [file_or_dir] [...]'\r\nE           and: \"pytest: error: argument --randomly-seed: 'invalidvalue' is not an integer or the string 'last'\"\r\nE           and: ''\r\nE       remains unmatched: \"pytest.py: error: argument --randomly-seed: 'invalidvalue' is not an integer or the string 'last'\"\r\n```\r\n\r\nSure, adjusting it like as follows helps:\r\n```diff\r\n             (\r\n-                \"pytest.py: error: argument --randomly-seed: 'invalidvalue' \"\r\n+                \"pytest: error: argument --randomly-seed: 'invalidvalue' \"\r\n                 + \"is not an integer or the string 'last'\"\r\n             )\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/201", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/201/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/201/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/201", "id": 501236642, "node_id": "MDU6SXNzdWU1MDEyMzY2NDI=", "number": 201, "title": "Compatability with pytest pytest-xdist==1.30.0", "user": {"login": "therefromhere", "id": 197540, "node_id": "MDQ6VXNlcjE5NzU0MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/197540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/therefromhere", "html_url": "https://github.com/therefromhere", "followers_url": "https://api.github.com/users/therefromhere/followers", "following_url": "https://api.github.com/users/therefromhere/following{/other_user}", "gists_url": "https://api.github.com/users/therefromhere/gists{/gist_id}", "starred_url": "https://api.github.com/users/therefromhere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/therefromhere/subscriptions", "organizations_url": "https://api.github.com/users/therefromhere/orgs", "repos_url": "https://api.github.com/users/therefromhere/repos", "events_url": "https://api.github.com/users/therefromhere/events{/privacy}", "received_events_url": "https://api.github.com/users/therefromhere/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-10-02T02:11:28Z", "updated_at": "2020-05-12T20:28:51Z", "closed_at": "2020-04-15T10:14:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "FYI I think there's a compatibility issue with pytest-xdist==1.30.0, see https://github.com/pytest-dev/pytest-xdist/issues/472", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/192", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/192/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/192/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/192/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/192", "id": 469703550, "node_id": "MDU6SXNzdWU0Njk3MDM1NTA=", "number": 192, "title": "Is it possible to get random seed value in test function?", "user": {"login": "zpan", "id": 1448543, "node_id": "MDQ6VXNlcjE0NDg1NDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1448543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zpan", "html_url": "https://github.com/zpan", "followers_url": "https://api.github.com/users/zpan/followers", "following_url": "https://api.github.com/users/zpan/following{/other_user}", "gists_url": "https://api.github.com/users/zpan/gists{/gist_id}", "starred_url": "https://api.github.com/users/zpan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zpan/subscriptions", "organizations_url": "https://api.github.com/users/zpan/orgs", "repos_url": "https://api.github.com/users/zpan/repos", "events_url": "https://api.github.com/users/zpan/events{/privacy}", "received_events_url": "https://api.github.com/users/zpan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-18T10:56:25Z", "updated_at": "2020-05-03T11:23:36Z", "closed_at": "2020-05-03T11:23:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Many thanks for the awesome plugin, really help a lot.\r\n\r\nI wonder is it possible to get random seed value during pytest running ?\r\n\r\ne.g. \r\n\r\n```\r\ndef test_get_ramdom_seed():\r\n    print(seed)\r\n```\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/172", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/172/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/172/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/172", "id": 425333957, "node_id": "MDU6SXNzdWU0MjUzMzM5NTc=", "number": 172, "title": "v2.1.0 dropped the test module from the sdist", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-26T10:22:47Z", "updated_at": "2019-03-26T17:03:14Z", "closed_at": "2019-03-26T15:19:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the recent re-organisation of the tests, the new module isnt being included into the sdist.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/151", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/151/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/151/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/151", "id": 369048314, "node_id": "MDU6SXNzdWUzNjkwNDgzMTQ=", "number": 151, "title": "Different test order on different machines but --randomly-seed is the same?", "user": {"login": "danieljacobs1", "id": 19263953, "node_id": "MDQ6VXNlcjE5MjYzOTUz", "avatar_url": "https://avatars2.githubusercontent.com/u/19263953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieljacobs1", "html_url": "https://github.com/danieljacobs1", "followers_url": "https://api.github.com/users/danieljacobs1/followers", "following_url": "https://api.github.com/users/danieljacobs1/following{/other_user}", "gists_url": "https://api.github.com/users/danieljacobs1/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieljacobs1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieljacobs1/subscriptions", "organizations_url": "https://api.github.com/users/danieljacobs1/orgs", "repos_url": "https://api.github.com/users/danieljacobs1/repos", "events_url": "https://api.github.com/users/danieljacobs1/events{/privacy}", "received_events_url": "https://api.github.com/users/danieljacobs1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-10-11T10:10:29Z", "updated_at": "2019-03-01T21:59:49Z", "closed_at": "2019-03-01T21:59:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a question about how the `--randomly-seed` option works.\r\n\r\nRecently we had a test failure on our CI system, and since we use `pytest-randomly` I grabbed the seed value from the output on the CI job and ran the test on my machine.\r\n\r\nWhat I noticed was that despite using the same `--randomly-seed` value, the tests ran in a different order on my machine. And in fact the tests all passed on my machine.\r\n\r\nMy question then is, is it expected that the test order be different on different machines for the same `--randomly-seed` value?\r\n\r\nThanks,\r\n\r\nDan", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/140", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/140/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/140/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/140", "id": 339216494, "node_id": "MDU6SXNzdWUzMzkyMTY0OTQ=", "number": 140, "title": "Support `@seed` decorator", "user": {"login": "sobolevn", "id": 4660275, "node_id": "MDQ6VXNlcjQ2NjAyNzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4660275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sobolevn", "html_url": "https://github.com/sobolevn", "followers_url": "https://api.github.com/users/sobolevn/followers", "following_url": "https://api.github.com/users/sobolevn/following{/other_user}", "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions", "organizations_url": "https://api.github.com/users/sobolevn/orgs", "repos_url": "https://api.github.com/users/sobolevn/repos", "events_url": "https://api.github.com/users/sobolevn/events{/privacy}", "received_events_url": "https://api.github.com/users/sobolevn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-08T10:57:48Z", "updated_at": "2018-07-09T14:04:38Z", "closed_at": "2018-07-09T07:46:27Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "## Problem\r\n\r\nSometimes I ran tests with some random values that pass.\r\nWhen the seed changes during the next test run I might run into some errors.\r\n\r\nConsider this imaginary example:\r\n\r\n```python\r\nimport random\r\n\r\ndef will_fail(x):\r\n    return x / random.randint(0, 10)\r\n\r\ndef test_will_fail():\r\n    assert isinstance(will_fail(5), float)\r\n```\r\n\r\nThe test will pass for some seeds, but later I will run into the situation when this test will fail.\r\nSo, I will fix the code, like this:\r\n\r\n```python\r\ndef will_fail(x):\r\n    return x / random.randint(1, 10)\r\n```\r\n\r\nAnd I want to be sure that this won't happen again.\r\n\r\n## Current solution\r\n\r\nI can manually run `random.seed` and set seed values from the previous failing tests.\r\n\r\n## Proposed solution\r\n\r\nI see this as a huge API feature, that will cover these cases.\r\nIt may look something like this:\r\n\r\n```python\r\n@pytest.mark.seed('your-seed')  # we had failures with this seed in the past!\r\n@pytest.mark.seed('your-other-seed')  # this seed is also breaking our code\r\ndef test_will_fail():\r\n    ... \r\n```\r\n\r\nBy doing this we can change the global random seed for a single test. We can do it multiple times. And then return back to normal tests execution.\r\n\r\nThis API is inspired by `hypothesis`: https://hypothesis.readthedocs.io/en/latest/reproducing.html?highlight=seed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/135", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/135/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/135/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/135", "id": 333055744, "node_id": "MDU6SXNzdWUzMzMwNTU3NDQ=", "number": 135, "title": "mimesis support", "user": {"login": "sobolevn", "id": 4660275, "node_id": "MDQ6VXNlcjQ2NjAyNzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4660275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sobolevn", "html_url": "https://github.com/sobolevn", "followers_url": "https://api.github.com/users/sobolevn/followers", "following_url": "https://api.github.com/users/sobolevn/following{/other_user}", "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions", "organizations_url": "https://api.github.com/users/sobolevn/orgs", "repos_url": "https://api.github.com/users/sobolevn/repos", "events_url": "https://api.github.com/users/sobolevn/events{/privacy}", "received_events_url": "https://api.github.com/users/sobolevn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-06-17T11:31:52Z", "updated_at": "2019-08-25T11:56:45Z", "closed_at": "2019-08-25T11:56:45Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hi, I am one of the developers of [`mimesis`](https://github.com/lk-geimfari/mimesis) and a huge fan of your library.\r\n\r\nI really want to provide a native integration of `mimesis` and `pytest-randomly` just like the one you have with `faker` and `factoryboy`. I really like that the reseed happens before each test, so the results are significantly better than the regular one time seed.\r\n\r\nWhat needs to be done? \r\n1. From our side we have changed how `random` is used internally to expose global `random` instance: https://github.com/lk-geimfari/mimesis/pull/471/files#diff-02fe14a63fc506efde39da2f898b5e0fR127 so it would be easy to seed it\r\n2. I can provide a PR with the same logic as you already use for `faker` and others, if that's fine\r\n\r\nRelated: https://github.com/lk-geimfari/mimesis/issues/469\r\nI would like to hear your opinion. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/94", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/94/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/94/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/94", "id": 279949732, "node_id": "MDU6SXNzdWUyNzk5NDk3MzI=", "number": 94, "title": "Consider moving to the pytest-dev organization", "user": {"login": "nicoddemus", "id": 1085180, "node_id": "MDQ6VXNlcjEwODUxODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1085180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicoddemus", "html_url": "https://github.com/nicoddemus", "followers_url": "https://api.github.com/users/nicoddemus/followers", "following_url": "https://api.github.com/users/nicoddemus/following{/other_user}", "gists_url": "https://api.github.com/users/nicoddemus/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicoddemus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicoddemus/subscriptions", "organizations_url": "https://api.github.com/users/nicoddemus/orgs", "repos_url": "https://api.github.com/users/nicoddemus/repos", "events_url": "https://api.github.com/users/nicoddemus/events{/privacy}", "received_events_url": "https://api.github.com/users/nicoddemus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-12-06T23:53:00Z", "updated_at": "2017-12-17T11:45:19Z", "closed_at": "2017-12-17T11:45:18Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hi!\r\n\r\nJust stumbled on this plugin! It looks like a much better version (and maintained!) of the honorable https://github.com/klrmn/pytest-random.\r\n\r\nWould you like to consider moving it under the `pytest-dev` organization for more visibility? You can read more about this [here](https://github.com/pytest-dev/pytest/blob/master/CONTRIBUTING.rst#submitting-plugins-to-pytest-dev). \ud83d\udc4d ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/92", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/92/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/92/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/92", "id": 279735045, "node_id": "MDU6SXNzdWUyNzk3MzUwNDU=", "number": 92, "title": "Deprecation warning", "user": {"login": "tolomea", "id": 805072, "node_id": "MDQ6VXNlcjgwNTA3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/805072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tolomea", "html_url": "https://github.com/tolomea", "followers_url": "https://api.github.com/users/tolomea/followers", "following_url": "https://api.github.com/users/tolomea/following{/other_user}", "gists_url": "https://api.github.com/users/tolomea/gists{/gist_id}", "starred_url": "https://api.github.com/users/tolomea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tolomea/subscriptions", "organizations_url": "https://api.github.com/users/tolomea/orgs", "repos_url": "https://api.github.com/users/tolomea/repos", "events_url": "https://api.github.com/users/tolomea/events{/privacy}", "received_events_url": "https://api.github.com/users/tolomea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-06T12:28:38Z", "updated_at": "2017-12-06T15:15:35Z", "closed_at": "2017-12-06T13:58:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "When running with deprecation warnings on I encountered this\r\n\r\npytest_randomly.py:67: DeprecationWarning: `factory.fuzzy.set_random_state` is deprecated. You should use `factory.random.set_random_state` instead\r\n    factory_set_random_state(random_states[seed])", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/86", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/86/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/86/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/86", "id": 271017993, "node_id": "MDU6SXNzdWUyNzEwMTc5OTM=", "number": 86, "title": "pytest --randomly-dont-reorganize failing with pytest-pylint", "user": {"login": "majuscule", "id": 187737, "node_id": "MDQ6VXNlcjE4NzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/187737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/majuscule", "html_url": "https://github.com/majuscule", "followers_url": "https://api.github.com/users/majuscule/followers", "following_url": "https://api.github.com/users/majuscule/following{/other_user}", "gists_url": "https://api.github.com/users/majuscule/gists{/gist_id}", "starred_url": "https://api.github.com/users/majuscule/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/majuscule/subscriptions", "organizations_url": "https://api.github.com/users/majuscule/orgs", "repos_url": "https://api.github.com/users/majuscule/repos", "events_url": "https://api.github.com/users/majuscule/events{/privacy}", "received_events_url": "https://api.github.com/users/majuscule/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-11-03T15:28:08Z", "updated_at": "2017-11-03T16:55:32Z", "closed_at": "2017-11-03T16:55:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "`pytest-randomly` seems to conflict with `pytest-pylint` when used with the randomly flag. I have attached a full console log that demonstrates the problem. Please let me know if there is anything else I can provide to help figure out what's going on. I've spent some time looking through `pytest_collection_modifyitems`, but I'm not sure what the root cause is.\r\n\r\n\r\n```\r\n~/t/randomly-debug\r\n\u276f ls -a\r\n.      ..     sample\r\n~/t/randomly-debug\r\n\u276f tree sample\r\nsample\r\n\u251c\u2500\u2500 __init__.py\r\n\u2514\u2500\u2500 test\r\n    \u2514\u2500\u2500 test_randomly.py\r\n\r\n1 directory, 2 files\r\n~/t/randomly-debug\r\n\u276f cat sample/__init__.py\r\n~/t/randomly-debug\r\n\u276f cat sample/test/test_randomly.py\r\n\"\"\"docstring\"\"\"\r\ndef test_randomly_interaction():\r\n    \"\"\"docstring\"\"\"\r\n    return True\r\n~/t/randomly-debug\r\n\u276f virtualenv venv\r\nNew python executable in /Users/dylan.lloyd/t/randomly-debug/venv/bin/python2.7\r\nAlso creating executable in /Users/dylan.lloyd/t/randomly-debug/venv/bin/python\r\nPlease make sure you remove any previous custom paths from your /Users/dylan.lloyd/.pydistutils.cfg file.\r\nInstalling setuptools, pip, wheel...done.\r\n~/t/randomly-debug\r\n\u276f ./venv/bin/pip install pylint==1.6.0 pytest==3.0.7 pytest-pylint==0.6.0\r\nCollecting pylint==1.6.0\r\n  Using cached pylint-1.6.0-py2.py3-none-any.whl\r\nCollecting pytest==3.0.7\r\n  Using cached pytest-3.0.7-py2.py3-none-any.whl\r\nCollecting pytest-pylint==0.6.0\r\n  Using cached pytest_pylint-0.6.0-py2-none-any.whl\r\nCollecting six (from pylint==1.6.0)\r\n  Using cached six-1.11.0-py2.py3-none-any.whl\r\nCollecting isort>=4.2.5 (from pylint==1.6.0)\r\n  Using cached isort-4.2.15-py2.py3-none-any.whl\r\nCollecting mccabe (from pylint==1.6.0)\r\n  Using cached mccabe-0.6.1-py2.py3-none-any.whl\r\nCollecting colorama (from pylint==1.6.0)\r\n  Using cached colorama-0.3.9-py2.py3-none-any.whl\r\nCollecting astroid<1.5.0,>=1.4.5 (from pylint==1.6.0)\r\n  Using cached astroid-1.4.9-py2.py3-none-any.whl\r\nRequirement already satisfied: setuptools in ./venv/lib/python2.7/site-packages (from pytest==3.0.7)\r\nCollecting py>=1.4.29 (from pytest==3.0.7)\r\n  Using cached py-1.4.34-py2.py3-none-any.whl\r\nCollecting wrapt (from astroid<1.5.0,>=1.4.5->pylint==1.6.0)\r\nCollecting lazy-object-proxy (from astroid<1.5.0,>=1.4.5->pylint==1.6.0)\r\nInstalling collected packages: six, isort, mccabe, colorama, wrapt, lazy-object-proxy, astroid, pylint, py, pytest, pytest-pylint\r\nSuccessfully installed astroid-1.4.9 colorama-0.3.9 isort-4.2.15 lazy-object-proxy-1.3.1 mccabe-0.6.1 py-1.4.34 pylint-1.6.0 pytest-3.0.7 pytest-pylint-0.6.0 six-1.11.0 wrapt-1.10.11\r\n~/t/randomly-debug\r\n\u276f ./venv/bin/pytest sample/test/test_randomly.py --pylint sample/__init__.py\r\n=================================== test session starts ====================================\r\nplatform darwin -- Python 2.7.12, pytest-3.0.7, py-1.4.34, pluggy-0.4.0\r\nrootdir: /Users/dylan.lloyd/t/randomly-debug, inifile:\r\nplugins: pylint-0.6.0\r\ncollected 3 items\r\n\r\nsample/test/test_randomly.py ..\r\nsample/__init__.py .\r\n\r\n================================= 3 passed in 0.11 seconds =================================\r\n~/t/randomly-debug\r\n\u276f ./venv/bin/pip install pytest-randomly==1.2.1\r\nCollecting pytest-randomly==1.2.1\r\n  Using cached pytest_randomly-1.2.1-py2.py3-none-any.whl\r\nRequirement already satisfied: pytest in ./venv/lib/python2.7/site-packages (from pytest-randomly==1.2.1)\r\nRequirement already satisfied: setuptools in ./venv/lib/python2.7/site-packages (from pytest->pytest-randomly==1.2.1)\r\nRequirement already satisfied: py>=1.4.29 in ./venv/lib/python2.7/site-packages (from pytest->pytest-randomly==1.2.1)\r\nInstalling collected packages: pytest-randomly\r\nSuccessfully installed pytest-randomly-1.2.1\r\n~/t/randomly-debug\r\n\u276f ./venv/bin/pytest sample/test/test_randomly.py --pylint sample/__init__.py\r\n=================================== test session starts ====================================\r\nplatform darwin -- Python 2.7.12, pytest-3.0.7, py-1.4.34, pluggy-0.4.0\r\nUsing --randomly-seed=1509722578\r\nrootdir: /Users/dylan.lloyd/t/randomly-debug, inifile:\r\nplugins: randomly-1.2.1, pylint-0.6.0\r\ncollected 3 items\r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/Users/dylan.lloyd/t/randomly-debug/venv/lib/python2.7/site-packages/_pytest/main.py\", line 98, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"/Users/dylan.lloyd/t/randomly-debug/venv/lib/python2.7/site-packages/_pytest/main.py\", line 132, in _main\r\nINTERNALERROR>     config.hook.pytest_collection(session=session)\r\nINTERNALERROR>   File \"/Users/dylan.lloyd/t/randomly-debug/venv/lib/python2.7/site-packages/_pytest/vendored_packages/pluggy.py\", line 745, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\nINTERNALERROR>   File \"/Users/dylan.lloyd/t/randomly-debug/venv/lib/python2.7/site-packages/_pytest/vendored_packages/pluggy.py\", line 339, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/Users/dylan.lloyd/t/randomly-debug/venv/lib/python2.7/site-packages/_pytest/vendored_packages/pluggy.py\", line 334, in <lambda>\r\nINTERNALERROR>     _MultiCall(methods, kwargs, hook.spec_opts).execute()\r\nINTERNALERROR>   File \"/Users/dylan.lloyd/t/randomly-debug/venv/lib/python2.7/site-packages/_pytest/vendored_packages/pluggy.py\", line 614, in execute\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/Users/dylan.lloyd/t/randomly-debug/venv/lib/python2.7/site-packages/_pytest/main.py\", line 141, in pytest_collection\r\nINTERNALERROR>     return session.perform_collect()\r\nINTERNALERROR>   File \"/Users/dylan.lloyd/t/randomly-debug/venv/lib/python2.7/site-packages/_pytest/main.py\", line 602, in perform_collect\r\nINTERNALERROR>     config=self.config, items=items)\r\nINTERNALERROR>   File \"/Users/dylan.lloyd/t/randomly-debug/venv/lib/python2.7/site-packages/_pytest/vendored_packages/pluggy.py\", line 745, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\nINTERNALERROR>   File \"/Users/dylan.lloyd/t/randomly-debug/venv/lib/python2.7/site-packages/_pytest/vendored_packages/pluggy.py\", line 339, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/Users/dylan.lloyd/t/randomly-debug/venv/lib/python2.7/site-packages/_pytest/vendored_packages/pluggy.py\", line 334, in <lambda>\r\nINTERNALERROR>     _MultiCall(methods, kwargs, hook.spec_opts).execute()\r\nINTERNALERROR>   File \"/Users/dylan.lloyd/t/randomly-debug/venv/lib/python2.7/site-packages/_pytest/vendored_packages/pluggy.py\", line 614, in execute\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/Users/dylan.lloyd/t/randomly-debug/venv/lib/python2.7/site-packages/pytest_randomly.py\", line 119, in pytest_collection_modifyitems\r\nINTERNALERROR>     current_module = item.module\r\nINTERNALERROR> AttributeError: 'PyLintItem' object has no attribute 'module'\r\n\r\n=============================== no tests ran in 0.01 seconds ===============================\r\n~/t/randomly-debug\r\n\u276f ./venv/bin/pytest sample/test/test_randomly.py --pylint sample/__init__.py --randomly-dont-reorganize\r\n================================================================================= test session starts ==================================================================================\r\nplatform darwin -- Python 2.7.12, pytest-3.0.7, py-1.4.34, pluggy-0.4.0\r\nUsing --randomly-seed=1509722745\r\nrootdir: /Users/dylan.lloyd/t/randomly-debug, inifile:\r\nplugins: randomly-1.2.1, pylint-0.6.0\r\ncollected 3 items\r\n\r\nsample/test/test_randomly.py ..\r\nsample/__init__.py .\r\n\r\n=============================================================================== 3 passed in 0.10 seconds ===============================================================================\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/75", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/75/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/75/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/75", "id": 258027461, "node_id": "MDU6SXNzdWUyNTgwMjc0NjE=", "number": 75, "title": "Unable to use random in pytest.mark.parametrize with xdist and randomly", "user": {"login": "p-himik", "id": 4410314, "node_id": "MDQ6VXNlcjQ0MTAzMTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4410314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/p-himik", "html_url": "https://github.com/p-himik", "followers_url": "https://api.github.com/users/p-himik/followers", "following_url": "https://api.github.com/users/p-himik/following{/other_user}", "gists_url": "https://api.github.com/users/p-himik/gists{/gist_id}", "starred_url": "https://api.github.com/users/p-himik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/p-himik/subscriptions", "organizations_url": "https://api.github.com/users/p-himik/orgs", "repos_url": "https://api.github.com/users/p-himik/repos", "events_url": "https://api.github.com/users/p-himik/events{/privacy}", "received_events_url": "https://api.github.com/users/p-himik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-09-15T12:44:59Z", "updated_at": "2019-08-07T12:13:27Z", "closed_at": "2017-10-16T14:28:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Packages:\r\n```\r\npytest-3.2.2\r\nxdist-1.20.0\r\nrandomly-1.2.1\r\n```\r\n\r\nExample code:\r\n```python\r\nimport pytest\r\nimport random\r\n\r\n\r\ndef gen_param():\r\n    a = random.random()\r\n    b = random.random()\r\n    c = a + b\r\n    return a, b, c\r\n\r\n\r\n\r\n@pytest.mark.parametrize('a,b,c', [gen_param() for _ in range(10)])\r\ndef test_sum(a, b, c):\r\n    assert a + b == c\r\n```\r\n\r\nExample result:\r\n```\r\nDifferent tests were collected between gw1 and gw0. The difference is:\r\n--- gw1\r\n\r\n+++ gw0\r\n\r\n@@ -1,10 +1,10 @@\r\n\r\n-test_it.py::test_sum[0.21119735007187512-0.03478699051186407-0.2459843405837392]\r\n-test_it.py::test_sum[0.19989965451085068-0.21530345609429247-0.41520311060514314]\r\n-test_it.py::test_sum[0.5682066547612487-0.7243829926261657-1.2925896473874143]\r\n-test_it.py::test_sum[0.5138857769400398-0.9866435513079722-1.500529328248012]\r\n-test_it.py::test_sum[0.32391650283278506-0.39646296915151646-0.7203794719843015]\r\n-test_it.py::test_sum[0.9573539653252039-0.46631807929040026-1.4236720446156041]\r\n-test_it.py::test_sum[0.18758435224247982-0.4081118220534776-0.5956961742959574]\r\n-test_it.py::test_sum[0.8300722136940875-0.24370118062201607-1.0737733943161034]\r\n-test_it.py::test_sum[0.45416992471686735-0.5539633757267955-1.0081333004436628]\r\n-test_it.py::test_sum[0.6404127883887936-0.07517291369462298-0.7155857020834165]\r\n+test_it.py::test_sum[0.4235467615256703-0.6336556280381637-1.0572023895638338]\r\n+test_it.py::test_sum[0.08598091323183876-0.9197414141632071-1.0057223273950457]\r\n+test_it.py::test_sum[0.6499835837722387-0.08942031974171283-0.7394039035139516]\r\n+test_it.py::test_sum[0.5982265644051936-0.4014341639946195-0.9996607283998131]\r\n+test_it.py::test_sum[0.6108773740309141-0.39536962117174335-1.0062469952026576]\r\n+test_it.py::test_sum[0.13520942528376823-0.36746285760417974-0.502672282887948]\r\n+test_it.py::test_sum[0.8469134601088156-0.34936702626625926-1.196280486375075]\r\n+test_it.py::test_sum[0.5828050759610505-0.028386017512678552-0.611191093473729]\r\n+test_it.py::test_sum[0.1425962119341786-0.5579729193825124-0.700569131316691]\r\n+test_it.py::test_sum[0.6183292075112786-0.5376259380555282-1.1559551455668067]\r\n```\r\n\r\n\r\nFrom what I could gather, it's possible to fix it simply by adding\r\n```python\r\ndef pytest_configure(config):\r\n    _reseed(config)\r\n```\r\nto `pytest_randomly.py`. But I've never written a single plugin for pytest and I've read only some excerpts from the documentation, so I may be wrong.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/60", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/60/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/60/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/60", "id": 236673147, "node_id": "MDU6SXNzdWUyMzY2NzMxNDc=", "number": 60, "title": "pytest-randomly 1.2.0 breaks test collection with pytest-xdist", "user": {"login": "rouge8", "id": 237005, "node_id": "MDQ6VXNlcjIzNzAwNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/237005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rouge8", "html_url": "https://github.com/rouge8", "followers_url": "https://api.github.com/users/rouge8/followers", "following_url": "https://api.github.com/users/rouge8/following{/other_user}", "gists_url": "https://api.github.com/users/rouge8/gists{/gist_id}", "starred_url": "https://api.github.com/users/rouge8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rouge8/subscriptions", "organizations_url": "https://api.github.com/users/rouge8/orgs", "repos_url": "https://api.github.com/users/rouge8/repos", "events_url": "https://api.github.com/users/rouge8/events{/privacy}", "received_events_url": "https://api.github.com/users/rouge8/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-17T17:22:46Z", "updated_at": "2017-06-18T04:26:58Z", "closed_at": "2017-06-17T22:45:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "pytest-randomly 1.2.0 seems to have broken test collection when using pytest-xdist.\r\n\r\n### tox.ini:\r\n\r\n```ini\r\n[tox]\r\nskipsdist = true\r\nusedevelop = false\r\nenvlist =\r\n    py{27,36}-randomly{11,12}\r\n\r\n[testenv]\r\ndeps =\r\n    pytest\r\n    pytest-xdist\r\n    randomly11: pytest-randomly<1.2.0\r\n    randomly12: pytest-randomly==1.2.0\r\ncommands = pytest -n auto {posargs}\r\n```\r\n\r\n### test_it.py\r\n\r\n```python\r\ndef test_1():\r\n    assert 1 + 1 == 2\r\n\r\n\r\ndef test_2():\r\n    assert 2 + 2 == 4\r\n```\r\n\r\n### output\r\n\r\n```console\r\n$ tox\r\npy27-randomly11 create: /Users/andy/tmp/pytest-randomly-xdist/.tox/py27-randomly11\r\npy27-randomly11 installdeps: pytest, pytest-xdist, pytest-randomly<1.2.0\r\npy27-randomly11 installed: apipkg==1.4,execnet==1.4.1,py==1.4.34,pytest==3.1.2,pytest-randomly==1.1.2,pytest-xdist==1.17.1\r\npy27-randomly11 runtests: PYTHONHASHSEED='4070452905'\r\npy27-randomly11 runtests: commands[0] | pytest -n auto\r\n======================================================== test session starts ========================================================\r\nplatform darwin -- Python 2.7.13, pytest-3.1.2, py-1.4.34, pluggy-0.4.0\r\nUsing --randomly-seed=1497720106\r\nrootdir: /Users/andy/tmp/pytest-randomly-xdist, inifile:\r\nplugins: xdist-1.17.1, randomly-1.1.2\r\ngw0 [2] / gw1 [2] / gw2 [2] / gw3 [2]\r\nscheduling tests via LoadScheduling\r\n..\r\n===================================================== 2 passed in 0.67 seconds ======================================================\r\npy27-randomly12 create: /Users/andy/tmp/pytest-randomly-xdist/.tox/py27-randomly12\r\npy27-randomly12 installdeps: pytest, pytest-xdist, pytest-randomly==1.2.0\r\npy27-randomly12 installed: apipkg==1.4,execnet==1.4.1,py==1.4.34,pytest==3.1.2,pytest-randomly==1.2.0,pytest-xdist==1.17.1\r\npy27-randomly12 runtests: PYTHONHASHSEED='4070452905'\r\npy27-randomly12 runtests: commands[0] | pytest -n auto\r\n======================================================== test session starts ========================================================\r\nplatform darwin -- Python 2.7.13, pytest-3.1.2, py-1.4.34, pluggy-0.4.0\r\nUsing --randomly-seed=1497720111\r\nrootdir: /Users/andy/tmp/pytest-randomly-xdist, inifile:\r\nplugins: xdist-1.17.1, randomly-1.2.0\r\ngw0 [2] / gw1 [2] / gw2 [2] / gw3 [2]\r\nscheduling tests via LoadScheduling\r\ncollecting 0 items / 1 errors\r\n============================================================== ERRORS ===============================================================\r\n_______________________________________________________ ERROR collecting gw1 ________________________________________________________\r\nDifferent tests were collected between gw3 and gw1. The difference is:\r\n--- gw3\r\n\r\n+++ gw1\r\n\r\n@@ -1,2 +1,2 @@\r\n\r\n+test_it.py::test_2\r\n test_it.py::test_1\r\n-test_it.py::test_2\r\n====================================================== 1 error in 0.62 seconds ======================================================\r\nERROR: InvocationError: '/Users/andy/tmp/pytest-randomly-xdist/.tox/py27-randomly12/bin/pytest -n auto'\r\npy36-randomly11 create: /Users/andy/tmp/pytest-randomly-xdist/.tox/py36-randomly11\r\npy36-randomly11 installdeps: pytest, pytest-xdist, pytest-randomly<1.2.0\r\npy36-randomly11 installed: apipkg==1.4,execnet==1.4.1,py==1.4.34,pytest==3.1.2,pytest-randomly==1.1.2,pytest-xdist==1.17.1\r\npy36-randomly11 runtests: PYTHONHASHSEED='4070452905'\r\npy36-randomly11 runtests: commands[0] | pytest -n auto\r\n======================================================== test session starts ========================================================\r\nplatform darwin -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0\r\nUsing --randomly-seed=1497720116\r\nrootdir: /Users/andy/tmp/pytest-randomly-xdist, inifile:\r\nplugins: xdist-1.17.1, randomly-1.1.2\r\ngw0 [2] / gw1 [2] / gw2 [2] / gw3 [2]\r\nscheduling tests via LoadScheduling\r\n..\r\n===================================================== 2 passed in 0.72 seconds ======================================================\r\npy36-randomly12 create: /Users/andy/tmp/pytest-randomly-xdist/.tox/py36-randomly12\r\npy36-randomly12 installdeps: pytest, pytest-xdist, pytest-randomly==1.2.0\r\npy36-randomly12 installed: apipkg==1.4,execnet==1.4.1,py==1.4.34,pytest==3.1.2,pytest-randomly==1.2.0,pytest-xdist==1.17.1\r\npy36-randomly12 runtests: PYTHONHASHSEED='4070452905'\r\npy36-randomly12 runtests: commands[0] | pytest -n auto\r\n======================================================== test session starts ========================================================\r\nplatform darwin -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0\r\nUsing --randomly-seed=1497720122\r\nrootdir: /Users/andy/tmp/pytest-randomly-xdist, inifile:\r\nplugins: xdist-1.17.1, randomly-1.2.0\r\ngw0 [2] / gw1 [2] / gw2 [2] / gw3 [2]\r\nscheduling tests via LoadScheduling\r\ncollecting 0 items / 3 errors\r\n============================================================== ERRORS ===============================================================\r\n_______________________________________________________ ERROR collecting gw1 ________________________________________________________\r\nDifferent tests were collected between gw0 and gw1. The difference is:\r\n--- gw0\r\n\r\n+++ gw1\r\n\r\n@@ -1,2 +1,2 @@\r\n\r\n+test_it.py::test_1\r\n test_it.py::test_2\r\n-test_it.py::test_1\r\n_______________________________________________________ ERROR collecting gw2 ________________________________________________________\r\nDifferent tests were collected between gw0 and gw2. The difference is:\r\n--- gw0\r\n\r\n+++ gw2\r\n\r\n@@ -1,2 +1,2 @@\r\n\r\n+test_it.py::test_1\r\n test_it.py::test_2\r\n-test_it.py::test_1\r\n_______________________________________________________ ERROR collecting gw3 ________________________________________________________\r\nDifferent tests were collected between gw0 and gw3. The difference is:\r\n--- gw0\r\n\r\n+++ gw3\r\n\r\n@@ -1,2 +1,2 @@\r\n\r\n+test_it.py::test_1\r\n test_it.py::test_2\r\n-test_it.py::test_1\r\n====================================================== 3 error in 0.69 seconds ======================================================\r\nERROR: InvocationError: '/Users/andy/tmp/pytest-randomly-xdist/.tox/py36-randomly12/bin/pytest -n auto'\r\n______________________________________________________________ summary ______________________________________________________________\r\n  py27-randomly11: commands succeeded\r\nERROR:   py27-randomly12: commands failed\r\n  py36-randomly11: commands succeeded\r\nERROR:   py36-randomly12: commands failed\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/30", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/30/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/30/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/30", "id": 185942940, "node_id": "MDU6SXNzdWUxODU5NDI5NDA=", "number": 30, "title": "doctests not supported ", "user": {"login": "marscher", "id": 170287, "node_id": "MDQ6VXNlcjE3MDI4Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/170287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marscher", "html_url": "https://github.com/marscher", "followers_url": "https://api.github.com/users/marscher/followers", "following_url": "https://api.github.com/users/marscher/following{/other_user}", "gists_url": "https://api.github.com/users/marscher/gists{/gist_id}", "starred_url": "https://api.github.com/users/marscher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marscher/subscriptions", "organizations_url": "https://api.github.com/users/marscher/orgs", "repos_url": "https://api.github.com/users/marscher/repos", "events_url": "https://api.github.com/users/marscher/events{/privacy}", "received_events_url": "https://api.github.com/users/marscher/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-10-28T14:50:34Z", "updated_at": "2017-01-29T09:37:00Z", "closed_at": "2017-01-29T09:36:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "If doctests are enabled the following exception is raised:\n\n```\nINTERNALERROR> Traceback (most recent call last):\nINTERNALERROR>   File \"/home/marscher/miniconda3/lib/python3.5/site-packages/_pytest/main.py\", line 96, in wrap_session\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\nINTERNALERROR>   File \"/home/marscher/miniconda3/lib/python3.5/site-packages/_pytest/main.py\", line 130, in _main\nINTERNALERROR>     config.hook.pytest_collection(session=session)\nINTERNALERROR>   File \"/home/marscher/miniconda3/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 745, in __call__\nINTERNALERROR>     return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\nINTERNALERROR>   File \"/home/marscher/miniconda3/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 339, in _hookexec\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\nINTERNALERROR>   File \"/home/marscher/miniconda3/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 334, in <lambda>\nINTERNALERROR>     _MultiCall(methods, kwargs, hook.spec_opts).execute()\nINTERNALERROR>   File \"/home/marscher/miniconda3/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 614, in execute\nINTERNALERROR>     res = hook_impl.function(*args)\nINTERNALERROR>   File \"/home/marscher/miniconda3/lib/python3.5/site-packages/_pytest/main.py\", line 139, in pytest_collection\nINTERNALERROR>     return session.perform_collect()\nINTERNALERROR>   File \"/home/marscher/miniconda3/lib/python3.5/site-packages/_pytest/main.py\", line 592, in perform_collect\nINTERNALERROR>     config=self.config, items=items)\nINTERNALERROR>   File \"/home/marscher/miniconda3/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 745, in __call__\nINTERNALERROR>     return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\nINTERNALERROR>   File \"/home/marscher/miniconda3/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 339, in _hookexec\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\nINTERNALERROR>   File \"/home/marscher/miniconda3/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 334, in <lambda>\nINTERNALERROR>     _MultiCall(methods, kwargs, hook.spec_opts).execute()\nINTERNALERROR>   File \"/home/marscher/miniconda3/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py\", line 614, in execute\nINTERNALERROR>     res = hook_impl.function(*args)\nINTERNALERROR>   File \"/home/marscher/miniconda3/lib/python3.5/site-packages/pytest_randomly.py\", line 125, in pytest_collection_modifyitems\nINTERNALERROR>     current_module = item.module\nINTERNALERROR> AttributeError: 'DoctestItem' object has no attribute 'module'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/22", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/22/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/22/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/22", "id": 176262183, "node_id": "MDU6SXNzdWUxNzYyNjIxODM=", "number": 22, "title": "Make random state different for test fixtures and the tests themselves", "user": {"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2016-09-11T20:04:12Z", "updated_at": "2016-09-12T22:16:20Z", "closed_at": "2016-09-12T22:16:20Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As discussed in #19, it's sometimes undesirable that we reset the random seed to the exact same value for fixtures and for tests - if both use the same data generation strategy (e.g. factory boy) they can end up generating the exact same objects which is a less useful test than the randomness they are trying to employ.\n\nWhat we could do is use multiple random states based upon the seed we've been given (e.g. seed, seed + 1, seed +2) for test setup, test running, test teardown, etc. Or we could just advance the random generator with the same seed an arbitrary amount e.g. generate 100 random numbers before the test setup, but 0 random numbers before the test.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/11", "repository_url": "https://api.github.com/repos/pytest-dev/pytest-randomly", "labels_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/11/comments", "events_url": "https://api.github.com/repos/pytest-dev/pytest-randomly/issues/11/events", "html_url": "https://github.com/pytest-dev/pytest-randomly/issues/11", "id": 165111355, "node_id": "MDU6SXNzdWUxNjUxMTEzNTU=", "number": 11, "title": "Tie random seed to PYTHONHASHSEED", "user": {"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-07-12T15:35:23Z", "updated_at": "2019-03-01T22:05:57Z", "closed_at": "2019-03-01T22:05:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It would be cool if this plugin could use `PYTHONHASHSEED` for the source of randomness so that tests are even more predictable. Setting it is probably outside the scope of the plugin since from inside the python interpreter it requires a restart which isn't such a great thing (though `python-libfaketime` gets away with it), however some tools like `tox` set it.\n", "performed_via_github_app": null, "score": 1.0}]}