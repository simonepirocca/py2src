{"total_count": 35, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/67", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/67/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/67/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/67", "id": 658640604, "node_id": "MDU6SXNzdWU2NTg2NDA2MDQ=", "number": 67, "title": "inspect.iscoroutinefunction fails after inject wraps", "user": {"login": "nikordaris", "id": 3432064, "node_id": "MDQ6VXNlcjM0MzIwNjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3432064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikordaris", "html_url": "https://github.com/nikordaris", "followers_url": "https://api.github.com/users/nikordaris/followers", "following_url": "https://api.github.com/users/nikordaris/following{/other_user}", "gists_url": "https://api.github.com/users/nikordaris/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikordaris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikordaris/subscriptions", "organizations_url": "https://api.github.com/users/nikordaris/orgs", "repos_url": "https://api.github.com/users/nikordaris/repos", "events_url": "https://api.github.com/users/nikordaris/events{/privacy}", "received_events_url": "https://api.github.com/users/nikordaris/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-16T22:52:45Z", "updated_at": "2020-08-11T10:58:39Z", "closed_at": "2020-07-21T11:20:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Decorating functions with param/params/autoparams returns a synchronous function instead of preserving the async function. The following inspect.iscoroutinefunction will fail. This causes problems when other decorators depend on inspecting the function prior to executing it. \r\n\r\n```python\r\n@inject.param(\"val\")\r\nasync def test_func(val):\r\n    return val\r\n\r\nassert inspect.iscoroutinefunction(test_func)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/63", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/63/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/63/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/63", "id": 624464671, "node_id": "MDU6SXNzdWU2MjQ0NjQ2NzE=", "number": 63, "title": "How to inject dependencies that have dependencies", "user": {"login": "caiquecp", "id": 7433684, "node_id": "MDQ6VXNlcjc0MzM2ODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/7433684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caiquecp", "html_url": "https://github.com/caiquecp", "followers_url": "https://api.github.com/users/caiquecp/followers", "following_url": "https://api.github.com/users/caiquecp/following{/other_user}", "gists_url": "https://api.github.com/users/caiquecp/gists{/gist_id}", "starred_url": "https://api.github.com/users/caiquecp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caiquecp/subscriptions", "organizations_url": "https://api.github.com/users/caiquecp/orgs", "repos_url": "https://api.github.com/users/caiquecp/repos", "events_url": "https://api.github.com/users/caiquecp/events{/privacy}", "received_events_url": "https://api.github.com/users/caiquecp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-25T20:01:23Z", "updated_at": "2020-05-26T12:38:47Z", "closed_at": "2020-05-26T12:38:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "What I'm trying to do:\r\n\r\n```python\r\ndef config_inject(binder: inject.Binder) -> None:\r\n        binder.bind(Database, MongoDatabase())\r\n        binder.bind(SomeRepository, MongoSomeRepository())\r\n    inject.configure(config_inject)\r\n```\r\n\r\nMongoSomeRepository has dependency over Database, but when I'm trying to config it this way I got the error \"No injector is configured\". I guess it happens because at the moment the bind is being made the injector is not ready. So how do I handle this case?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/57", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/57/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/57/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/57", "id": 616528822, "node_id": "MDU6SXNzdWU2MTY1Mjg4MjI=", "number": 57, "title": "support_pytest_issues", "user": {"login": "passjwhub", "id": 18527102, "node_id": "MDQ6VXNlcjE4NTI3MTAy", "avatar_url": "https://avatars1.githubusercontent.com/u/18527102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/passjwhub", "html_url": "https://github.com/passjwhub", "followers_url": "https://api.github.com/users/passjwhub/followers", "following_url": "https://api.github.com/users/passjwhub/following{/other_user}", "gists_url": "https://api.github.com/users/passjwhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/passjwhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/passjwhub/subscriptions", "organizations_url": "https://api.github.com/users/passjwhub/orgs", "repos_url": "https://api.github.com/users/passjwhub/repos", "events_url": "https://api.github.com/users/passjwhub/events{/privacy}", "received_events_url": "https://api.github.com/users/passjwhub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-05-12T10:04:51Z", "updated_at": "2020-05-15T08:45:40Z", "closed_at": "2020-05-15T08:45:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "  I am env at windows 10 and python3.6.8, \r\n================================================== test session starts ==================================================\r\nplatform win32 -- Python 3.6.8, pytest-5.4.1, py-1.8.1, pluggy-0.13.1  \r\ncachedir: .pytest_cache\r\n\r\nI want to run the test \"test_injector,py\" as  python -m unittest test_injector Its work normal as the follow info:\r\ntest_injector.py:48: DeprecationWarning: Please use assertRaisesRegex instead.\r\n  injector.get_instance, int)\r\n      ...\r\n----------------------------------------------------------------------\r\nRan 6 tests in 0.002s\r\n\r\nOK\r\n\r\nand then, I want to run the module with pytest\r\n\r\npytest test_injector.py , that was failure with this information\r\n__init__.py:3: in <module>\r\n    import inject\r\n..\\inject\\__init__.py:88: in <module>\r\n    from typing import Any, Callable, Dict, ForwardRef, Generic, Hashable, Optional, Type, TypeVar, \\\r\nE   ImportError: cannot import name 'ForwardRef'\r\n================================================ short test summary info ================================================\r\nERROR test_injector.py\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n=================================================== 1 error in 0.08s \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/55", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/55/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/55/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/55", "id": 615866097, "node_id": "MDU6SXNzdWU2MTU4NjYwOTc=", "number": 55, "title": "Error in case if class overrides __bool__", "user": {"login": "dbalabka", "id": 1269372, "node_id": "MDQ6VXNlcjEyNjkzNzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1269372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbalabka", "html_url": "https://github.com/dbalabka", "followers_url": "https://api.github.com/users/dbalabka/followers", "following_url": "https://api.github.com/users/dbalabka/following{/other_user}", "gists_url": "https://api.github.com/users/dbalabka/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbalabka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbalabka/subscriptions", "organizations_url": "https://api.github.com/users/dbalabka/orgs", "repos_url": "https://api.github.com/users/dbalabka/repos", "events_url": "https://api.github.com/users/dbalabka/events{/privacy}", "received_events_url": "https://api.github.com/users/dbalabka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-11T13:00:12Z", "updated_at": "2020-05-15T08:46:00Z", "closed_at": "2020-05-15T08:45:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It might be that class might override `__bool__` and restrict casting into boolean. Pandas DataFrame does it. In this case, it is impossible to use an instance of DataFrame as a dependency because of the following error:\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<timed exec> in <module>\r\n\r\n/opt/conda/lib/python3.7/site-packages/inject/__init__.py in instance(cls)\r\n    321 def instance(cls: Binding) -> Injectable:\r\n    322     \"\"\"Inject an instance of a class.\"\"\"\r\n--> 323     return get_injector_or_die().get_instance(cls)\r\n    324 \r\n    325 @overload\r\n\r\n/opt/conda/lib/python3.7/site-packages/inject/__init__.py in get_instance(self, cls)\r\n    169         binding = self._bindings.get(cls)\r\n    170         if binding:\r\n--> 171             return binding()\r\n    172 \r\n    173         # Try to create a runtime binding.\r\n\r\n/opt/conda/lib/python3.7/site-packages/inject/__init__.py in __call__(self)\r\n    212             if self._created and self._instance:\r\n    213                 return self._instance\r\n--> 214             self._instance = self._constructor()\r\n    215             self._created = True\r\n    216         return self._instance\r\n\r\n/opt/conda/lib/python3.7/site-packages/inject/__init__.py in injection_wrapper(*args, **kwargs)\r\n    262             for param, cls in params_to_provide.items():\r\n    263                 if param not in provided_params:\r\n--> 264                     kwargs[param] = instance(cls)\r\n    265             return func(*args, **kwargs)\r\n    266         return injection_wrapper\r\n\r\n/opt/conda/lib/python3.7/site-packages/inject/__init__.py in instance(cls)\r\n    321 def instance(cls: Binding) -> Injectable:\r\n    322     \"\"\"Inject an instance of a class.\"\"\"\r\n--> 323     return get_injector_or_die().get_instance(cls)\r\n    324 \r\n    325 @overload\r\n\r\n/opt/conda/lib/python3.7/site-packages/inject/__init__.py in get_instance(self, cls)\r\n    169         binding = self._bindings.get(cls)\r\n    170         if binding:\r\n--> 171             return binding()\r\n    172 \r\n    173         # Try to create a runtime binding.\r\n\r\n/opt/conda/lib/python3.7/site-packages/inject/__init__.py in __call__(self)\r\n    206 \r\n    207     def __call__(self) -> T:\r\n--> 208         if self._created and self._instance:\r\n    209             return self._instance\r\n    210 \r\n\r\n/opt/conda/lib/python3.7/site-packages/pandas/core/generic.py in __nonzero__(self)\r\n   1477     def __nonzero__(self):\r\n   1478         raise ValueError(\r\n-> 1479             f\"The truth value of a {type(self).__name__} is ambiguous. \"\r\n   1480             \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\r\n   1481         )\r\n\r\nValueError: The truth value of a GuestFeatures is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\r\n```\r\nto fix this issue it would be better to avoid boolean casting for `self._instance` in:\r\n```\r\n/opt/conda/lib/python3.7/site-packages/inject/__init__.py in __call__(self)\r\n    206 \r\n    207     def __call__(self) -> T:\r\n--> 208         if self._created and self._instance:\r\n    209             return self._instance\r\n    210 \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/53", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/53/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/53/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/53", "id": 608864990, "node_id": "MDU6SXNzdWU2MDg4NjQ5OTA=", "number": 53, "title": "Inject dependency to class that will be injected", "user": {"login": "saber-solooki", "id": 5122570, "node_id": "MDQ6VXNlcjUxMjI1NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5122570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saber-solooki", "html_url": "https://github.com/saber-solooki", "followers_url": "https://api.github.com/users/saber-solooki/followers", "following_url": "https://api.github.com/users/saber-solooki/following{/other_user}", "gists_url": "https://api.github.com/users/saber-solooki/gists{/gist_id}", "starred_url": "https://api.github.com/users/saber-solooki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saber-solooki/subscriptions", "organizations_url": "https://api.github.com/users/saber-solooki/orgs", "repos_url": "https://api.github.com/users/saber-solooki/repos", "events_url": "https://api.github.com/users/saber-solooki/events{/privacy}", "received_events_url": "https://api.github.com/users/saber-solooki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-29T08:15:35Z", "updated_at": "2020-04-29T12:50:33Z", "closed_at": "2020-04-29T12:50:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Suppose I have class A like this:\r\n`class A:`\r\n    `@inject.autoparams('instance_b'):`\r\n    `def __init__(self, instance_b: B):`\r\n         `self.instance_b= instance_b`\r\n\r\nin my configuration method:\r\n`def di_configuration(binder):`\r\n`binder.bind(B, B())`\r\n`binder.bind(A, A())`\r\n\r\n`inject.configure(di_configuration)`\r\n\r\nI expect this work because A need B and I config B to be injected. but when I run my django application I get this error:\r\ninject.InjectorException: No injector is configured\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/52", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/52/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/52/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/52", "id": 606576565, "node_id": "MDU6SXNzdWU2MDY1NzY1NjU=", "number": 52, "title": "__future__ breaks DI.", "user": {"login": "ancostas", "id": 13245211, "node_id": "MDQ6VXNlcjEzMjQ1MjEx", "avatar_url": "https://avatars3.githubusercontent.com/u/13245211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ancostas", "html_url": "https://github.com/ancostas", "followers_url": "https://api.github.com/users/ancostas/followers", "following_url": "https://api.github.com/users/ancostas/following{/other_user}", "gists_url": "https://api.github.com/users/ancostas/gists{/gist_id}", "starred_url": "https://api.github.com/users/ancostas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ancostas/subscriptions", "organizations_url": "https://api.github.com/users/ancostas/orgs", "repos_url": "https://api.github.com/users/ancostas/repos", "events_url": "https://api.github.com/users/ancostas/events{/privacy}", "received_events_url": "https://api.github.com/users/ancostas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-04-24T20:51:05Z", "updated_at": "2020-05-15T08:50:36Z", "closed_at": "2020-05-15T08:50:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nI've come across an issue when injecting classes that have signatures in which they return themselves. AFAIK you need to import `annotations` from `__future__` in order to do this kind of thing, and this seems to break DI for everything in the file where this is done, which is a bit unexpected IMO.\r\n\r\nex:\r\n```\r\nfrom __future__ import annotations\r\n\r\nimport inject\r\nfrom test import BaseTestInject\r\n\r\n\r\nclass Something:\r\n    def return_self(self) -> Something:\r\n        return self\r\n\r\n    @inject.autoparams()\r\n    def test_func(self, val: int):\r\n        return val\r\n\r\n\r\nclass AnotherThing:\r\n    @inject.autoparams()\r\n    def test_func(self, val: int):\r\n        return val\r\n\r\n\r\nclass TestFutureSupport(BaseTestInject):\r\n    def test_future_support(self):\r\n        inject.configure(lambda binder: binder.bind(int, 123), bind_in_runtime=False)\r\n\r\n        self.assertRaises(inject.InjectorException, Something().test_func)\r\n        self.assertRaises(inject.InjectorException, AnotherThing().test_func)\r\n\r\n```\r\n\r\nWould it be feasible to register string versions of the annotations automatically, if they are not provided by user? It seems like this would resolve the issue, at least for my superficial test, and is something the user would not expect to need to do.\r\n\r\n```\r\nfrom __future__ import annotations\r\n\r\nimport inject\r\nfrom test import BaseTestInject\r\n\r\n\r\nclass Something:\r\n    def return_self(self) -> Something:\r\n        return self\r\n\r\n    @inject.autoparams()\r\n    def test_func(self, val: int):\r\n        return val\r\n\r\n\r\nclass AnotherThing:\r\n    @inject.autoparams()\r\n    def test_func(self, val: int):\r\n        return val\r\n\r\n\r\nclass TestFutureSupport(BaseTestInject):\r\n    def test_future_support(self):\r\n        def deps(binder):\r\n            binder.bind(int, 123)\r\n            # This fixes things --> should it be done automatically?\r\n            binder.bind('int', 123)\r\n        inject.configure(deps, bind_in_runtime=False)\r\n\r\n        assert Something().test_func() == 123\r\n        assert AnotherThing().test_func() == 123\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/51", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/51/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/51/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/51", "id": 602734248, "node_id": "MDU6SXNzdWU2MDI3MzQyNDg=", "number": 51, "title": "[Question] Positional injection?", "user": {"login": "ancostas", "id": 13245211, "node_id": "MDQ6VXNlcjEzMjQ1MjEx", "avatar_url": "https://avatars3.githubusercontent.com/u/13245211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ancostas", "html_url": "https://github.com/ancostas", "followers_url": "https://api.github.com/users/ancostas/followers", "following_url": "https://api.github.com/users/ancostas/following{/other_user}", "gists_url": "https://api.github.com/users/ancostas/gists{/gist_id}", "starred_url": "https://api.github.com/users/ancostas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ancostas/subscriptions", "organizations_url": "https://api.github.com/users/ancostas/orgs", "repos_url": "https://api.github.com/users/ancostas/repos", "events_url": "https://api.github.com/users/ancostas/events{/privacy}", "received_events_url": "https://api.github.com/users/ancostas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1999678175, "node_id": "MDU6TGFiZWwxOTk5Njc4MTc1", "url": "https://api.github.com/repos/ivankorobkov/python-inject/labels/Question", "name": "Question", "color": "5608cc", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-19T14:50:21Z", "updated_at": "2020-04-21T12:53:47Z", "closed_at": "2020-04-21T12:53:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello, I really like your package!\r\n\r\nI'm wondering about something in your docs, they say that: `inject.params injects dependencies as keyword arguments or positional argument.`, but it seems that they only get injected as keyword arguments?\r\n\r\n```\r\ndef injection_wrapper(*args: Any, **kwargs: Any) -> T:\r\n    # Assumes whatever is provided fulfills type constraints\r\n    provided_params = frozenset(arg_names[:len(args)]) | frozenset(kwargs.keys())\r\n    # Injects whatever is missing into kwargs\r\n    for param, cls in params_to_provide.items():\r\n        if param not in provided_params:\r\n            kwargs[param] = instance(cls)\r\n    return func(*args, **kwargs)\r\n```\r\n\r\nFor example, the following works:\r\n```\r\nclass Provider:\r\n    def __init__(self, num: int):\r\n        self._num = num\r\n\r\n    def provide(self):\r\n        return self._num\r\n\r\n@inject.params(a=Provider)\r\ndef test_func(a: Provider, b: int = 100):\r\n    return a.provide() + b\r\n\r\ninject.configure(lambda binder: binder.bind(Provider, Provider(123)))\r\n\r\nassert test_func() == 223\r\nassert test_func(b=200) == 323\r\n```\r\n\r\nbut this doesn't:\r\n`assert test_func(200) == 323 # AttributeError: 'int' object has no attribute 'provide'`\r\n\r\nI've been playing with the code a bit, and have something that would satisfy the above tests (and your existing tests). Would you be interested in taking a look/is this something you think makes sense for this library?\r\n\r\nFor context: \r\nI work with projects that have many signatures a la `func(dep_1: A, dep_2: B, arg_1, arg_2)` and would love to use your library to inject them and invoke with `func(arg_1, arg_2)` without needing to refactor the code base much. \r\n\r\nCurrently, it seems like I'd need to make them all this: `func(arg_1, arg_2, dep_1: A, dep_2: B)`\r\n\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/49", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/49/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/49/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/49", "id": 577983818, "node_id": "MDU6SXNzdWU1Nzc5ODM4MTg=", "number": 49, "title": "AttributeError: '_AttributeInjection' object has no attribute 'returning_clause' with peewee ORM", "user": {"login": "dimma837", "id": 31541891, "node_id": "MDQ6VXNlcjMxNTQxODkx", "avatar_url": "https://avatars1.githubusercontent.com/u/31541891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimma837", "html_url": "https://github.com/dimma837", "followers_url": "https://api.github.com/users/dimma837/followers", "following_url": "https://api.github.com/users/dimma837/following{/other_user}", "gists_url": "https://api.github.com/users/dimma837/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimma837/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimma837/subscriptions", "organizations_url": "https://api.github.com/users/dimma837/orgs", "repos_url": "https://api.github.com/users/dimma837/repos", "events_url": "https://api.github.com/users/dimma837/events{/privacy}", "received_events_url": "https://api.github.com/users/dimma837/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-09T15:17:26Z", "updated_at": "2020-03-10T10:44:00Z", "closed_at": "2020-03-10T10:44:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, Ivan! Thank you for creating this library. But I have some difficulties using it with [peewee](https://github.com/coleifer/peewee) ORM.\r\nMain setup:\r\n```python\r\nimport inject\r\nfrom peewee import MySQLDatabase\r\n\r\ndatabase = MySQLDatabase(**config)\r\n\r\n\r\ndef injection(binder):\r\n    binder.bind(MySQLDatabase, database)\r\n\r\n\r\ninject.configure(injection)\r\n```\r\n`models` packet:\r\n```python\r\nimport inject\r\nfrom peewee import *\r\n\r\n\r\nclass BaseModel(Model):\r\n    class Meta:\r\n        database = inject.attr(MySQLDatabase)\r\n\r\nclass User(BaseModel):\r\n    id = CharField(primary_key=True)\r\n    name = TextField(null=True)\r\n\r\n    class Meta:\r\n        table_name = 'users'\r\n```\r\nThen during insertion `User.create(id='unique_id', name='John')` I caught this:\r\n```python\r\nTraceback (most recent call last):\r\n  File \"C:\\Workspace\\python\\my_project\\service.py\", line 40, in track\r\n    User.create(id='unique_id', name='John'):\r\n  File \"C:\\Workspace\\python\\my_project\\venv\\lib\\site-packages\\peewee.py\", line 6202, in insert\r\n    return ModelInsert(cls, cls._normalize_data(__data, insert))\r\n  File \"C:\\Workspace\\python\\my_project\\venv\\lib\\site-packages\\peewee.py\", line 7120, in __init__\r\n    if self.model._meta.database.returning_clause:\r\nAttributeError: '_AttributeInjection' object has no attribute 'returning_clause'\r\n```\r\nIt looks like `_AttributeInjection` container doesn't unwrap into `MySQLDatabase` instance. Can you help me? Is it my stupidity?\r\n\r\nEnviroment:\r\n* Python 3.7.4\r\n* Inject==4.1.1\r\n* peewee==3.13.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/48", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/48/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/48/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/48", "id": 571044635, "node_id": "MDU6SXNzdWU1NzEwNDQ2MzU=", "number": 48, "title": "pip install fails on windowsOS", "user": {"login": "sonedaiki", "id": 49139359, "node_id": "MDQ6VXNlcjQ5MTM5MzU5", "avatar_url": "https://avatars1.githubusercontent.com/u/49139359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonedaiki", "html_url": "https://github.com/sonedaiki", "followers_url": "https://api.github.com/users/sonedaiki/followers", "following_url": "https://api.github.com/users/sonedaiki/following{/other_user}", "gists_url": "https://api.github.com/users/sonedaiki/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonedaiki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonedaiki/subscriptions", "organizations_url": "https://api.github.com/users/sonedaiki/orgs", "repos_url": "https://api.github.com/users/sonedaiki/repos", "events_url": "https://api.github.com/users/sonedaiki/events{/privacy}", "received_events_url": "https://api.github.com/users/sonedaiki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-26T03:27:41Z", "updated_at": "2020-02-26T07:38:33Z", "closed_at": "2020-02-26T07:38:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\r\nI get the following error when I pip install on windows.\r\n\r\n>UnicodeDecodeError: 'cp932' codec can't decode byte 0x93 in position 471: illegal multibyte sequence\r\n\r\nPerhaps modifying setup.py(line7~9) as follows will cure it?\r\n\r\n```\r\ndef read_description():\r\n    with open('README.md', 'r', encoding='utf-8') as f:\r\n        return f.read()\r\n```\r\nor\r\n```\r\ndef read_description():\r\n    with open('README.md', 'r', encoding='utf-8_sig') as f:\r\n        return f.read()\r\n```\r\nThanks for your works.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/45", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/45/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/45/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/45", "id": 558527420, "node_id": "MDU6SXNzdWU1NTg1Mjc0MjA=", "number": 45, "title": "Type hints mismatch?", "user": {"login": "45deg", "id": 7984294, "node_id": "MDQ6VXNlcjc5ODQyOTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/7984294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/45deg", "html_url": "https://github.com/45deg", "followers_url": "https://api.github.com/users/45deg/followers", "following_url": "https://api.github.com/users/45deg/following{/other_user}", "gists_url": "https://api.github.com/users/45deg/gists{/gist_id}", "starred_url": "https://api.github.com/users/45deg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/45deg/subscriptions", "organizations_url": "https://api.github.com/users/45deg/orgs", "repos_url": "https://api.github.com/users/45deg/repos", "events_url": "https://api.github.com/users/45deg/events{/privacy}", "received_events_url": "https://api.github.com/users/45deg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-01T11:28:33Z", "updated_at": "2020-02-01T11:39:15Z", "closed_at": "2020-02-01T11:39:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\nI caught a type error with IntelliJ IDE caused by the inferred type of `inject.attr(IFoo)` is not `IFoo` but `Type[IFoo]`. Inspecting the library, I found the two different annotation of type:\r\n```python\r\ndef attr(cls: T) -> T:\r\n    # type: (Binding) -> T\r\n    \"\"\"Return a attribute injection (descriptor).\"\"\"\r\n    return _AttributeInjection(cls)\r\n```\r\nAfter changing `cls: T` with `cls: Binding`, the inference goes right.\r\n\r\nIs there any reason for these different annotations (backward compatibility, etc.)? \r\nI should have made a PR for that if it is an unintentional mistake but asked at first for clarification.\r\n\r\nThanks for your works.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/44", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/44/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/44/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/44", "id": 542730807, "node_id": "MDU6SXNzdWU1NDI3MzA4MDc=", "number": 44, "title": "Problem of binding a constructor which is a member function", "user": {"login": "sisai", "id": 10510464, "node_id": "MDQ6VXNlcjEwNTEwNDY0", "avatar_url": "https://avatars2.githubusercontent.com/u/10510464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sisai", "html_url": "https://github.com/sisai", "followers_url": "https://api.github.com/users/sisai/followers", "following_url": "https://api.github.com/users/sisai/following{/other_user}", "gists_url": "https://api.github.com/users/sisai/gists{/gist_id}", "starred_url": "https://api.github.com/users/sisai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sisai/subscriptions", "organizations_url": "https://api.github.com/users/sisai/orgs", "repos_url": "https://api.github.com/users/sisai/repos", "events_url": "https://api.github.com/users/sisai/events{/privacy}", "received_events_url": "https://api.github.com/users/sisai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-27T03:36:51Z", "updated_at": "2019-12-27T06:09:13Z", "closed_at": "2019-12-27T06:09:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear authors,\r\n    Thank you for your hard working on the python-inject package.\r\n    I am new to the concept of dependency injection, and I am trying to use this idea and the python-inject package in my current project. I encountered a problem that I cannot solve after hours. My problem is as follows:\r\n    Suppose that we have two classes A and B, B's init function is dependent on A:\r\n\r\n    class A(object):\r\n        def __init__(self):\r\n            print('A')\r\n    \r\n    class B(object):\r\n        @inject.autoparams()\r\n        def __init__(self, a: A):\r\n            self._a = a\r\n            print('B')\r\n\r\n    Then, to create the injection\r\n\r\n    def config():\r\n        binder.bind_to_constructor(A, A.__init__)\r\n        binder.bind_to_constructor(B, B.__init__)\r\n    \r\n    inject.configure(config)\r\n\r\n    Running this code gives an error \r\n\"File \"...\\lib\\site-packages\\inject-4.0.0-py3.6.egg\\inject\\__init__.py\", line 201, in __call__\r\n    self._instance = self._constructor()\r\nTypeError: __init__() missing 1 required positional argument: 'self'\".\r\n\r\n    I know there is an alternative way to implement this, which is manually instantiate an instance of A, and then bind dependencies on A to that instance. But what if I have another class C, whose instantiation is dependent on B:\r\n\r\n    class C(object):\r\n        @inject.autoparams()\r\n        def __init__(self, b: B):\r\n            self._b = b\r\n            print('C')\r\n\r\n    Then how to create the dependencies, \r\n\r\n    def config():\r\n        a = A()\r\n        binder.bind(A, a)\r\n        binder.bind(B, ???)\r\n  \r\n     ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/42", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/42/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/42/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/42", "id": 521409963, "node_id": "MDU6SXNzdWU1MjE0MDk5NjM=", "number": 42, "title": "Better type dependency injection", "user": {"login": "wisepotato", "id": 1401260, "node_id": "MDQ6VXNlcjE0MDEyNjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1401260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wisepotato", "html_url": "https://github.com/wisepotato", "followers_url": "https://api.github.com/users/wisepotato/followers", "following_url": "https://api.github.com/users/wisepotato/following{/other_user}", "gists_url": "https://api.github.com/users/wisepotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/wisepotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wisepotato/subscriptions", "organizations_url": "https://api.github.com/users/wisepotato/orgs", "repos_url": "https://api.github.com/users/wisepotato/repos", "events_url": "https://api.github.com/users/wisepotato/events{/privacy}", "received_events_url": "https://api.github.com/users/wisepotato/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-12T08:50:59Z", "updated_at": "2019-11-25T08:48:34Z", "closed_at": "2019-11-25T08:48:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, great package. Im currently using the latest version `3.5.4` and I currently have to 'cast' my injected instances, is there a possibility of making this typed? (I might introduce a PR, but just wanted to check with you)\r\n\r\nso instead of:\r\n```python\r\nconfig: Configuration = inject.get_instance(Configuration)\r\n```\r\nI would just get\r\n```\r\nconfig = inject.get_instance(Configuration)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/41", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/41/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/41/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/41", "id": 519856556, "node_id": "MDU6SXNzdWU1MTk4NTY1NTY=", "number": 41, "title": "Why i cannot inject Callable if functional style instead of class?", "user": {"login": "vitalij23", "id": 48436557, "node_id": "MDQ6VXNlcjQ4NDM2NTU3", "avatar_url": "https://avatars2.githubusercontent.com/u/48436557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vitalij23", "html_url": "https://github.com/vitalij23", "followers_url": "https://api.github.com/users/vitalij23/followers", "following_url": "https://api.github.com/users/vitalij23/following{/other_user}", "gists_url": "https://api.github.com/users/vitalij23/gists{/gist_id}", "starred_url": "https://api.github.com/users/vitalij23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vitalij23/subscriptions", "organizations_url": "https://api.github.com/users/vitalij23/orgs", "repos_url": "https://api.github.com/users/vitalij23/repos", "events_url": "https://api.github.com/users/vitalij23/events{/privacy}", "received_events_url": "https://api.github.com/users/vitalij23/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-08T07:26:19Z", "updated_at": "2019-11-10T17:31:25Z", "closed_at": "2019-11-10T17:31:25Z", "author_association": "NONE", "active_lock_reason": null, "body": ".", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/40", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/40/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/40/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/40", "id": 504192788, "node_id": "MDU6SXNzdWU1MDQxOTI3ODg=", "number": 40, "title": "[Feature Request/Question] Asyncio Support", "user": {"login": "givo", "id": 11993599, "node_id": "MDQ6VXNlcjExOTkzNTk5", "avatar_url": "https://avatars3.githubusercontent.com/u/11993599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/givo", "html_url": "https://github.com/givo", "followers_url": "https://api.github.com/users/givo/followers", "following_url": "https://api.github.com/users/givo/following{/other_user}", "gists_url": "https://api.github.com/users/givo/gists{/gist_id}", "starred_url": "https://api.github.com/users/givo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/givo/subscriptions", "organizations_url": "https://api.github.com/users/givo/orgs", "repos_url": "https://api.github.com/users/givo/repos", "events_url": "https://api.github.com/users/givo/events{/privacy}", "received_events_url": "https://api.github.com/users/givo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-08T18:02:20Z", "updated_at": "2019-10-14T17:43:32Z", "closed_at": "2019-10-14T17:43:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nFirst of all, great job on this project. I've been testing [pinject](https://github.com/google/pinject), [injector](https://github.com/alecthomas/injector) and [dependency-injector](https://github.com/ets-labs/python-dependency-injector), and in my opinion your DI framework is more convenient and stable then the others. Most important, you support hashable objects as binding keys.\r\n\r\nAre there any plans on implementing this soon? It could be very useful to have an `asyncio` support.\r\n\r\nAn example for having an async **Provider Binding**:\r\n\r\n```python\r\n# one module\r\nasync def get_cache():\r\n    return await cache.get('something')\r\n\r\n# DI configuration module\r\ndef config(binder):\r\n    # Executes the provider on each injection.\r\n    binder.bind_to_provider('CACHE', get_cache) \r\n\r\n# module that depends on db connection\r\n@inject.params(cache='CACHE')\r\nasync def get_users(cache):\r\n    # do something with cache\r\n```\r\n\r\nThanks in advance :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/39", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/39/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/39/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/39", "id": 480730968, "node_id": "MDU6SXNzdWU0ODA3MzA5Njg=", "number": 39, "title": "Question: Injecting a List", "user": {"login": "krcourville", "id": 1831245, "node_id": "MDQ6VXNlcjE4MzEyNDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1831245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krcourville", "html_url": "https://github.com/krcourville", "followers_url": "https://api.github.com/users/krcourville/followers", "following_url": "https://api.github.com/users/krcourville/following{/other_user}", "gists_url": "https://api.github.com/users/krcourville/gists{/gist_id}", "starred_url": "https://api.github.com/users/krcourville/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krcourville/subscriptions", "organizations_url": "https://api.github.com/users/krcourville/orgs", "repos_url": "https://api.github.com/users/krcourville/repos", "events_url": "https://api.github.com/users/krcourville/events{/privacy}", "received_events_url": "https://api.github.com/users/krcourville/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-14T15:01:42Z", "updated_at": "2019-08-15T02:32:00Z", "closed_at": "2019-08-15T02:32:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you for creating this library.  It's saved me some headaches for sure.\r\n\r\nIs there currently a way to inject a collection of implementations?\r\n\r\n```python\r\nclass Shape:\r\n    def draw(self):\r\n        raise NotImplementedError()\r\n\r\nclass Triangle(Shape):\r\n    def draw(self):\r\n        print('drew a triangle')\r\n        \r\nclass Square(Shape):\r\n    def draw(self):\r\n        print('drew a square')\r\n        \r\nclass ShapeContainer:\r\n    \"\"\"\r\n    how to inject shapes here?\r\n    \"\"\"\r\n    def __init__(self, shapes: List[Shape]):\r\n        self.shapes = shapes\r\n    \r\n    def draw_all(self):\r\n        for shape in self.shapes:\r\n            shape.draw()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/38", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/38/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/38/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/38", "id": 475854981, "node_id": "MDU6SXNzdWU0NzU4NTQ5ODE=", "number": 38, "title": "Overwrite existing bindings", "user": {"login": "Saabertooth", "id": 10930289, "node_id": "MDQ6VXNlcjEwOTMwMjg5", "avatar_url": "https://avatars1.githubusercontent.com/u/10930289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Saabertooth", "html_url": "https://github.com/Saabertooth", "followers_url": "https://api.github.com/users/Saabertooth/followers", "following_url": "https://api.github.com/users/Saabertooth/following{/other_user}", "gists_url": "https://api.github.com/users/Saabertooth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Saabertooth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Saabertooth/subscriptions", "organizations_url": "https://api.github.com/users/Saabertooth/orgs", "repos_url": "https://api.github.com/users/Saabertooth/repos", "events_url": "https://api.github.com/users/Saabertooth/events{/privacy}", "received_events_url": "https://api.github.com/users/Saabertooth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-01T19:40:27Z", "updated_at": "2019-08-08T21:18:04Z", "closed_at": "2019-08-08T21:18:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, if you create a binding where a binding already exists for the for the given key, an exception is thrown: `inject.InjectorException: Duplicate binding, key=<class 'someValue'>`\r\n\r\nIn many DI frameworks, it's common to allow binding of an existing key to a new value, the behavior for which is to replace the existing binding.\r\nFor example, Angular uses a hierarchical injector that allows children to override their parent bindings. Autofac uses the last registration/binding for a given key, value. \r\n\r\n#### An example use case: \r\nI have a set of binding configurations that my app uses. \r\nI then have a separate test configuration that inherits from my app bindings. If I'm using provider functions, its simple to override them, however if I'm doing simple binding of a Class/value to a value, then I don't have easy way to override the binding.\r\n\r\nI realize that there are workarounds for this, but I think this would be simple to implement and provide value to the framework as well as align the duplicate binding behavior to other DI frameworks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/36", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/36/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/36/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/36", "id": 473225480, "node_id": "MDU6SXNzdWU0NzMyMjU0ODA=", "number": 36, "title": "Type hints are not compatible with mypy", "user": {"login": "ajgrover", "id": 3088615, "node_id": "MDQ6VXNlcjMwODg2MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3088615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajgrover", "html_url": "https://github.com/ajgrover", "followers_url": "https://api.github.com/users/ajgrover/followers", "following_url": "https://api.github.com/users/ajgrover/following{/other_user}", "gists_url": "https://api.github.com/users/ajgrover/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajgrover/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajgrover/subscriptions", "organizations_url": "https://api.github.com/users/ajgrover/orgs", "repos_url": "https://api.github.com/users/ajgrover/repos", "events_url": "https://api.github.com/users/ajgrover/events{/privacy}", "received_events_url": "https://api.github.com/users/ajgrover/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-26T07:49:53Z", "updated_at": "2019-07-30T08:36:03Z", "closed_at": "2019-07-30T00:17:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello - I'm running into an issue where running `mypy` on a project that uses `inject` gives the following error on every import:\r\n\r\n```\r\npath/to/file.py:1: error: Cannot find module named 'inject'\r\n...\r\n```\r\n\r\nBased on the [mypy docs](https://mypy.readthedocs.io/en/latest/installed_packages.html) it appears that a `py.typed` file is necessary for PEP 561 compatibility. I tried adding this file and installing my fork but I wasn't able to get it working in the time I had. I'm not an expert with setuptools by any means so maybe [my simple change](https://github.com/ajgrover/python-inject/commit/cc8b2f903030c42e04cc43551a5c4af02ccd68ce) based on the mypy docs was not correct.\r\n\r\nIf it matters, I am using Python 3.7.4 and my project is using `pipenv`. There are no issues with mypy and any other third party libs.\r\n\r\nAny help would be appreciated!\r\n\r\ncc @andrewborba10, not sure if you are using `mypy` in your workflow", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/34", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/34/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/34/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/34", "id": 467195601, "node_id": "MDU6SXNzdWU0NjcxOTU2MDE=", "number": 34, "title": "AttributeError: type object 'Callable' has no attribute '_abc_registry'", "user": {"login": "xuleijian", "id": 50580946, "node_id": "MDQ6VXNlcjUwNTgwOTQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/50580946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuleijian", "html_url": "https://github.com/xuleijian", "followers_url": "https://api.github.com/users/xuleijian/followers", "following_url": "https://api.github.com/users/xuleijian/following{/other_user}", "gists_url": "https://api.github.com/users/xuleijian/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuleijian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuleijian/subscriptions", "organizations_url": "https://api.github.com/users/xuleijian/orgs", "repos_url": "https://api.github.com/users/xuleijian/repos", "events_url": "https://api.github.com/users/xuleijian/events{/privacy}", "received_events_url": "https://api.github.com/users/xuleijian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-07-12T02:55:09Z", "updated_at": "2019-07-24T12:02:03Z", "closed_at": "2019-07-24T12:02:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I use the lastest version Inject==3.5.2,I got the error \"AttributeError: type object 'Callable' has no attribute '_abc_registry' \".\r\nBut when I installed the lower version Inject==3.5.1,all the things are OK.Could you give me some help? Thank you !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/32", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/32/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/32/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/32", "id": 458276367, "node_id": "MDU6SXNzdWU0NTgyNzYzNjc=", "number": 32, "title": "Type-hints don't account for hashable keys", "user": {"login": "andrewborba10", "id": 4528805, "node_id": "MDQ6VXNlcjQ1Mjg4MDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4528805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewborba10", "html_url": "https://github.com/andrewborba10", "followers_url": "https://api.github.com/users/andrewborba10/followers", "following_url": "https://api.github.com/users/andrewborba10/following{/other_user}", "gists_url": "https://api.github.com/users/andrewborba10/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewborba10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewborba10/subscriptions", "organizations_url": "https://api.github.com/users/andrewborba10/orgs", "repos_url": "https://api.github.com/users/andrewborba10/repos", "events_url": "https://api.github.com/users/andrewborba10/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewborba10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-20T00:06:00Z", "updated_at": "2019-06-24T23:40:35Z", "closed_at": "2019-06-24T23:40:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Type-hints for any API which accepts a dependency binding defines it as \"Type[T]\" when in fact this can be a non-type value that is simply Hashable. Taken from docs:\r\n\r\n> It is possible to use any hashable object as a binding key.\r\n\r\nHere is my suggested alternative:\r\n\r\n```\r\nT = TypeVar('T')\r\nBinding = Union[Type[T], Hashable]\r\nConstructor = Provider = Callable[[], T]\r\n```\r\n\r\nI confirmed that my IDE understands that when you pass a non-type, it falls to \"Hashable\" and drops away type-hints from there. As it stands, I suspect that if you try to use Hashable values in conjunction with a Python type-checker, then the checker would give failures when it should be allowed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/31", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/31/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/31/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/31", "id": 458275422, "node_id": "MDU6SXNzdWU0NTgyNzU0MjI=", "number": 31, "title": "Type-hints are separated from implementation", "user": {"login": "andrewborba10", "id": 4528805, "node_id": "MDQ6VXNlcjQ1Mjg4MDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4528805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewborba10", "html_url": "https://github.com/andrewborba10", "followers_url": "https://api.github.com/users/andrewborba10/followers", "following_url": "https://api.github.com/users/andrewborba10/following{/other_user}", "gists_url": "https://api.github.com/users/andrewborba10/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewborba10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewborba10/subscriptions", "organizations_url": "https://api.github.com/users/andrewborba10/orgs", "repos_url": "https://api.github.com/users/andrewborba10/repos", "events_url": "https://api.github.com/users/andrewborba10/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewborba10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-06-20T00:01:41Z", "updated_at": "2019-06-26T16:26:35Z", "closed_at": "2019-06-24T23:40:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Type-hints are separated into a .pyi file alongside inject.py. This seems unnecessary when they can be bundled together for easier integration. Right now, my IDE doesn't understand the type-hints by default, and while I'm sure I can fiddle with settings and get it to pick up the .pyi file (which is something I've had trouble with in the past) its just a hassle that gets passed on to every new consumer of this library.\r\n\r\nI believe .pyi files were introduced as a stop-gap for the Python standard library to allow for incremental additions from the community and generally should be avoided in scenarios like this where the implementation can be fairly easily updated.\r\n\r\nI would gladly volunteer to do the work on this (in fact, I already wrote some type-hints within our own project via a shim between our code and this library, but that approach has some short-falls that ultimately motivated me to come here).\r\n\r\nPlease let me know if you're on board with this idea and I can submit a pull request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/30", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/30/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/30/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/30", "id": 457819356, "node_id": "MDU6SXNzdWU0NTc4MTkzNTY=", "number": 30, "title": "No ascii char in README.md  result in install error ", "user": {"login": "heyhpython", "id": 36200210, "node_id": "MDQ6VXNlcjM2MjAwMjEw", "avatar_url": "https://avatars2.githubusercontent.com/u/36200210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heyhpython", "html_url": "https://github.com/heyhpython", "followers_url": "https://api.github.com/users/heyhpython/followers", "following_url": "https://api.github.com/users/heyhpython/following{/other_user}", "gists_url": "https://api.github.com/users/heyhpython/gists{/gist_id}", "starred_url": "https://api.github.com/users/heyhpython/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heyhpython/subscriptions", "organizations_url": "https://api.github.com/users/heyhpython/orgs", "repos_url": "https://api.github.com/users/heyhpython/repos", "events_url": "https://api.github.com/users/heyhpython/events{/privacy}", "received_events_url": "https://api.github.com/users/heyhpython/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-19T05:53:35Z", "updated_at": "2019-07-10T08:25:03Z", "closed_at": "2019-07-10T08:25:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "there are no ascii encode chars in the readme.md , so when pip install inject on ascii encode platform there will be an error , I solve this by change the encoding to utf-8 in setup.py, but this error maybe confusing, hope to fix it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/27", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/27/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/27/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/27", "id": 432415723, "node_id": "MDU6SXNzdWU0MzI0MTU3MjM=", "number": 27, "title": "Export Binder ", "user": {"login": "AlvitrRavenclaw", "id": 16491675, "node_id": "MDQ6VXNlcjE2NDkxNjc1", "avatar_url": "https://avatars1.githubusercontent.com/u/16491675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlvitrRavenclaw", "html_url": "https://github.com/AlvitrRavenclaw", "followers_url": "https://api.github.com/users/AlvitrRavenclaw/followers", "following_url": "https://api.github.com/users/AlvitrRavenclaw/following{/other_user}", "gists_url": "https://api.github.com/users/AlvitrRavenclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlvitrRavenclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlvitrRavenclaw/subscriptions", "organizations_url": "https://api.github.com/users/AlvitrRavenclaw/orgs", "repos_url": "https://api.github.com/users/AlvitrRavenclaw/repos", "events_url": "https://api.github.com/users/AlvitrRavenclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/AlvitrRavenclaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-12T06:58:37Z", "updated_at": "2019-04-16T09:28:59Z", "closed_at": "2019-04-16T09:28:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "export Binder in .pyi\r\n```\r\nT = typing.TypeVar('T')\r\nBinder = typing.TypeVar('Binder')\r\nInjector = typing.TypeVar('Injector')\r\n```\r\nif we use type-hint in project,\r\n```\r\ndef my_config(binder: Binder):\r\n    binder.bind(Config, load_config_file())\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/23", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/23/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/23/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/23", "id": 416530145, "node_id": "MDU6SXNzdWU0MTY1MzAxNDU=", "number": 23, "title": "Implicit class instantiation is error-prone", "user": {"login": "o-fedorov", "id": 2283679, "node_id": "MDQ6VXNlcjIyODM2Nzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2283679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/o-fedorov", "html_url": "https://github.com/o-fedorov", "followers_url": "https://api.github.com/users/o-fedorov/followers", "following_url": "https://api.github.com/users/o-fedorov/following{/other_user}", "gists_url": "https://api.github.com/users/o-fedorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/o-fedorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/o-fedorov/subscriptions", "organizations_url": "https://api.github.com/users/o-fedorov/orgs", "repos_url": "https://api.github.com/users/o-fedorov/repos", "events_url": "https://api.github.com/users/o-fedorov/events{/privacy}", "received_events_url": "https://api.github.com/users/o-fedorov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-03T15:49:04Z", "updated_at": "2019-03-05T06:52:36Z", "closed_at": "2019-03-05T06:52:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If a user forgets to bind a class to an instance, in the best case she gets an exception like `TypeError` for abstract classes, typing variables, callables that require at least one argument and so on. Such messages are usually not helpful and sometimes obscuring.\r\n\r\nIn the worst case the singleton is instantiated with default parameters while it was not intended. It may lead to hard-to-debug issues. \r\n\r\nI've recently encountered one of such issues. Also, \"explicit is better than implicit\".\r\n\r\nAt minimum, I would add an argument to the `configure` functions to disable implicit classes instantiation.\r\n\r\nAnd for the future I would suggest to gradually make implicit instantiation disabled by default, or even deprecate and then remove this functionality.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/19", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/19/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/19/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/19", "id": 320925827, "node_id": "MDU6SXNzdWUzMjA5MjU4Mjc=", "number": 19, "title": "Feature request: support dynamic binding configuration", "user": {"login": "gshklover", "id": 406842, "node_id": "MDQ6VXNlcjQwNjg0Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/406842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gshklover", "html_url": "https://github.com/gshklover", "followers_url": "https://api.github.com/users/gshklover/followers", "following_url": "https://api.github.com/users/gshklover/following{/other_user}", "gists_url": "https://api.github.com/users/gshklover/gists{/gist_id}", "starred_url": "https://api.github.com/users/gshklover/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gshklover/subscriptions", "organizations_url": "https://api.github.com/users/gshklover/orgs", "repos_url": "https://api.github.com/users/gshklover/repos", "events_url": "https://api.github.com/users/gshklover/events{/privacy}", "received_events_url": "https://api.github.com/users/gshklover/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-07T19:27:20Z", "updated_at": "2018-05-10T08:15:14Z", "closed_at": "2018-05-10T08:15:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that currently, one needs to provide configuration once at initialization.\r\nIn some scenarios the complete set of bound classes might not be available at injector initialization (example: if injector is required while dynamically initializing other modules that require injector).\r\n\r\nPlease add a method to extend injector with more bindings dynamically.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/18", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/18/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/18/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/18", "id": 257650674, "node_id": "MDU6SXNzdWUyNTc2NTA2NzQ=", "number": 18, "title": "Release to include PR #17", "user": {"login": "ggtools", "id": 547260, "node_id": "MDQ6VXNlcjU0NzI2MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/547260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ggtools", "html_url": "https://github.com/ggtools", "followers_url": "https://api.github.com/users/ggtools/followers", "following_url": "https://api.github.com/users/ggtools/following{/other_user}", "gists_url": "https://api.github.com/users/ggtools/gists{/gist_id}", "starred_url": "https://api.github.com/users/ggtools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ggtools/subscriptions", "organizations_url": "https://api.github.com/users/ggtools/orgs", "repos_url": "https://api.github.com/users/ggtools/repos", "events_url": "https://api.github.com/users/ggtools/events{/privacy}", "received_events_url": "https://api.github.com/users/ggtools/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-14T09:20:56Z", "updated_at": "2017-09-14T16:08:08Z", "closed_at": "2017-09-14T16:08:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just discover PR #17 which fixes an issue I just bumped into. Any plan for a 3.3.1 release in a near future?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/16", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/16/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/16/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/16", "id": 253115426, "node_id": "MDU6SXNzdWUyNTMxMTU0MjY=", "number": 16, "title": "Inject creates multiple objects when a singleton was requested...", "user": {"login": "Alan-R", "id": 1258659, "node_id": "MDQ6VXNlcjEyNTg2NTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1258659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alan-R", "html_url": "https://github.com/Alan-R", "followers_url": "https://api.github.com/users/Alan-R/followers", "following_url": "https://api.github.com/users/Alan-R/following{/other_user}", "gists_url": "https://api.github.com/users/Alan-R/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alan-R/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alan-R/subscriptions", "organizations_url": "https://api.github.com/users/Alan-R/orgs", "repos_url": "https://api.github.com/users/Alan-R/repos", "events_url": "https://api.github.com/users/Alan-R/events{/privacy}", "received_events_url": "https://api.github.com/users/Alan-R/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-26T18:49:24Z", "updated_at": "2017-08-27T07:55:55Z", "closed_at": "2017-08-27T07:55:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Ran into some weirdness in using Inject. Weirdness that I consider to be a bug...\r\n\r\nI had declared that I wanted only one copy of a certain kind of object - but it gave me two distinct objects.\r\n\r\nIt took a while to figure out the symptoms in my code were caused by that, and what the underlying cause was.\r\n\r\nOne of the consumers of these objects was in a certain module, and the other was in the same file as the object declaration.\r\n\r\nBecause I was testing this new code, I had some code below the 'if __name__ == \"__main__\" clause.\r\n\r\nThat code thought the object class was <__main__.Store>, and the other consumers (and the code that set up the injection mapping) thought it was <store.Store>. Although they're the same class, Python treats them as different classes... Hence, any consumers of the object which used inject.params in __main__, were always going to get a unique object each time it asked for one. This happens because the inject code thinks it's OK to instantiate an object (with no parameters) if there is no declared supplier of the object. In my view, that's an error. If I declare that I need a certain kind of object in inject.params, then IMHO it's an error for me not to supply it in the injection parameters.\r\n\r\nIt would have cut several hours off the process to realize what was going on sooner - with an error message. Especially if the error message said something like: No constructor for object type blah - currently known constructors are: (list of known object types). That would have made it dead obvious what was wrong _immediately_.\r\n\r\nSo, I think that should be an error, at least by default (maybe all the time?).\r\n\r\nIdeally, it would be nice to figure out how to keep this from happening, then you wouldn't have to make that an error.\r\n\r\nHere's a thought about one approach:\r\n\r\nUpon checking, no matter where you look, cls.__name__ gives the same answer for both __main__.Store and store.store. So, if you paid attention to the class name instead of the actual class, then I believe that would solve the problem.\r\n\r\nIt seems really unlikely that someone would have two different classes of the same name, and want to supply two different constructors for them.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/15", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/15/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/15/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/15", "id": 98731678, "node_id": "MDU6SXNzdWU5ODczMTY3OA==", "number": 15, "title": "thread local instances similar to bind_to_constructor", "user": {"login": "peick", "id": 503214, "node_id": "MDQ6VXNlcjUwMzIxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/503214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peick", "html_url": "https://github.com/peick", "followers_url": "https://api.github.com/users/peick/followers", "following_url": "https://api.github.com/users/peick/following{/other_user}", "gists_url": "https://api.github.com/users/peick/gists{/gist_id}", "starred_url": "https://api.github.com/users/peick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peick/subscriptions", "organizations_url": "https://api.github.com/users/peick/orgs", "repos_url": "https://api.github.com/users/peick/repos", "events_url": "https://api.github.com/users/peick/events{/privacy}", "received_events_url": "https://api.github.com/users/peick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-08-03T12:15:14Z", "updated_at": "2015-08-05T12:41:04Z", "closed_at": "2015-08-05T12:41:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm missing a variant of `bind_to_constructor` to register thread local instances. `bind_to_constructor` registers an instance globally for all threads.\n\n`bind_to_provider` is not suitable in my case, because I don't want to create a different instance of every inject call.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/12", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/12/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/12/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/12", "id": 40853926, "node_id": "MDU6SXNzdWU0MDg1MzkyNg==", "number": 12, "title": "@param does not allow to call the function with positional parameters", "user": {"login": "scharf", "id": 3731059, "node_id": "MDQ6VXNlcjM3MzEwNTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/3731059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scharf", "html_url": "https://github.com/scharf", "followers_url": "https://api.github.com/users/scharf/followers", "following_url": "https://api.github.com/users/scharf/following{/other_user}", "gists_url": "https://api.github.com/users/scharf/gists{/gist_id}", "starred_url": "https://api.github.com/users/scharf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scharf/subscriptions", "organizations_url": "https://api.github.com/users/scharf/orgs", "repos_url": "https://api.github.com/users/scharf/repos", "events_url": "https://api.github.com/users/scharf/events{/privacy}", "received_events_url": "https://api.github.com/users/scharf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-08-21T21:46:47Z", "updated_at": "2014-08-22T07:49:16Z", "closed_at": "2014-08-22T07:49:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When a function is decorated with with @param, the function cannot be called with positional arguments:\n\n```\n@param('a',A)\ndef f(a):\n    return a\n```\n\nThen a call with positional arguments fails:\n\n```\nf(1)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/11", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/11/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/11/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/11", "id": 39409078, "node_id": "MDU6SXNzdWUzOTQwOTA3OA==", "number": 11, "title": "Django: inject.InjectorException: Injector is already configured (proposal)", "user": {"login": "alefnula", "id": 188258, "node_id": "MDQ6VXNlcjE4ODI1OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/188258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alefnula", "html_url": "https://github.com/alefnula", "followers_url": "https://api.github.com/users/alefnula/followers", "following_url": "https://api.github.com/users/alefnula/following{/other_user}", "gists_url": "https://api.github.com/users/alefnula/gists{/gist_id}", "starred_url": "https://api.github.com/users/alefnula/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alefnula/subscriptions", "organizations_url": "https://api.github.com/users/alefnula/orgs", "repos_url": "https://api.github.com/users/alefnula/repos", "events_url": "https://api.github.com/users/alefnula/events{/privacy}", "received_events_url": "https://api.github.com/users/alefnula/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-08-04T10:35:30Z", "updated_at": "2014-08-04T11:50:26Z", "closed_at": "2014-08-04T11:01:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Since `django` is (unfortunately) loading some of its modules more than once, `inject` is throwing an: `inject.InjectorException: Injector is already configured` exception.\n\nMy current workaround is:\n\n```\nif inject.get_injector() is None:\n    inject.configure(ioc.production)\n```\n\nBut that's exposing the internals of the `inject` library. I think that it would be cleaner to have something like:\n\n```\nif not inject.is_configured():\n    inject.configure(ioc.production)\n```\n\nBut, if you're OK with the \"hacky\" solution, I'll close the issue.\n\nThank you for your time :)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/10", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/10/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/10/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/10", "id": 37641267, "node_id": "MDU6SXNzdWUzNzY0MTI2Nw==", "number": 10, "title": "Configure with modules", "user": {"login": "ivankorobkov", "id": 85294, "node_id": "MDQ6VXNlcjg1Mjk0", "avatar_url": "https://avatars3.githubusercontent.com/u/85294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivankorobkov", "html_url": "https://github.com/ivankorobkov", "followers_url": "https://api.github.com/users/ivankorobkov/followers", "following_url": "https://api.github.com/users/ivankorobkov/following{/other_user}", "gists_url": "https://api.github.com/users/ivankorobkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivankorobkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivankorobkov/subscriptions", "organizations_url": "https://api.github.com/users/ivankorobkov/orgs", "repos_url": "https://api.github.com/users/ivankorobkov/repos", "events_url": "https://api.github.com/users/ivankorobkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ivankorobkov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ivankorobkov", "id": 85294, "node_id": "MDQ6VXNlcjg1Mjk0", "avatar_url": "https://avatars3.githubusercontent.com/u/85294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivankorobkov", "html_url": "https://github.com/ivankorobkov", "followers_url": "https://api.github.com/users/ivankorobkov/followers", "following_url": "https://api.github.com/users/ivankorobkov/following{/other_user}", "gists_url": "https://api.github.com/users/ivankorobkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivankorobkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivankorobkov/subscriptions", "organizations_url": "https://api.github.com/users/ivankorobkov/orgs", "repos_url": "https://api.github.com/users/ivankorobkov/repos", "events_url": "https://api.github.com/users/ivankorobkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ivankorobkov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ivankorobkov", "id": 85294, "node_id": "MDQ6VXNlcjg1Mjk0", "avatar_url": "https://avatars3.githubusercontent.com/u/85294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivankorobkov", "html_url": "https://github.com/ivankorobkov", "followers_url": "https://api.github.com/users/ivankorobkov/followers", "following_url": "https://api.github.com/users/ivankorobkov/following{/other_user}", "gists_url": "https://api.github.com/users/ivankorobkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivankorobkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivankorobkov/subscriptions", "organizations_url": "https://api.github.com/users/ivankorobkov/orgs", "repos_url": "https://api.github.com/users/ivankorobkov/repos", "events_url": "https://api.github.com/users/ivankorobkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ivankorobkov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2014-07-11T08:37:48Z", "updated_at": "2019-06-20T10:59:46Z", "closed_at": "2019-06-20T10:59:46Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Something like:\n\n``` python\ninject.configure_with_module(module1, module2, module3, ...)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/9", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/9/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/9/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/9", "id": 30123648, "node_id": "MDU6SXNzdWUzMDEyMzY0OA==", "number": 9, "title": "binding to a \"name\"", "user": {"login": "spinus", "id": 950799, "node_id": "MDQ6VXNlcjk1MDc5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/950799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spinus", "html_url": "https://github.com/spinus", "followers_url": "https://api.github.com/users/spinus/followers", "following_url": "https://api.github.com/users/spinus/following{/other_user}", "gists_url": "https://api.github.com/users/spinus/gists{/gist_id}", "starred_url": "https://api.github.com/users/spinus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spinus/subscriptions", "organizations_url": "https://api.github.com/users/spinus/orgs", "repos_url": "https://api.github.com/users/spinus/repos", "events_url": "https://api.github.com/users/spinus/events{/privacy}", "received_events_url": "https://api.github.com/users/spinus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-03-25T13:39:49Z", "updated_at": "2014-03-25T18:55:32Z", "closed_at": "2014-03-25T18:53:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I play with this library for a moment, and I wanted bind some instance to ... name.\n\n``` python\nbinder.bind(\"config\", {\"some\": \"example\"})\n```\n\nthen\n\n``` python\ninject.instance(\"config\")\n```\n\nand it works. I like it even it is not intentional. Maybe it is worth to put some code example with such a usage?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/5", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/5/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/5/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/5", "id": 28875693, "node_id": "MDU6SXNzdWUyODg3NTY5Mw==", "number": 5, "title": "Fix exception descriptions", "user": {"login": "ivankorobkov", "id": 85294, "node_id": "MDQ6VXNlcjg1Mjk0", "avatar_url": "https://avatars3.githubusercontent.com/u/85294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivankorobkov", "html_url": "https://github.com/ivankorobkov", "followers_url": "https://api.github.com/users/ivankorobkov/followers", "following_url": "https://api.github.com/users/ivankorobkov/following{/other_user}", "gists_url": "https://api.github.com/users/ivankorobkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivankorobkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivankorobkov/subscriptions", "organizations_url": "https://api.github.com/users/ivankorobkov/orgs", "repos_url": "https://api.github.com/users/ivankorobkov/repos", "events_url": "https://api.github.com/users/ivankorobkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ivankorobkov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-03-06T12:40:40Z", "updated_at": "2014-03-06T21:14:46Z", "closed_at": "2014-03-06T21:14:46Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/4", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/4/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/4/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/4", "id": 28875687, "node_id": "MDU6SXNzdWUyODg3NTY4Nw==", "number": 4, "title": "Provider example in readme", "user": {"login": "ivankorobkov", "id": 85294, "node_id": "MDQ6VXNlcjg1Mjk0", "avatar_url": "https://avatars3.githubusercontent.com/u/85294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivankorobkov", "html_url": "https://github.com/ivankorobkov", "followers_url": "https://api.github.com/users/ivankorobkov/followers", "following_url": "https://api.github.com/users/ivankorobkov/following{/other_user}", "gists_url": "https://api.github.com/users/ivankorobkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivankorobkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivankorobkov/subscriptions", "organizations_url": "https://api.github.com/users/ivankorobkov/orgs", "repos_url": "https://api.github.com/users/ivankorobkov/repos", "events_url": "https://api.github.com/users/ivankorobkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ivankorobkov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-03-06T12:40:34Z", "updated_at": "2014-03-06T21:14:46Z", "closed_at": "2014-03-06T21:14:46Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/3", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/3/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/3/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/3", "id": 28875674, "node_id": "MDU6SXNzdWUyODg3NTY3NA==", "number": 3, "title": "inject.param/arg", "user": {"login": "ivankorobkov", "id": 85294, "node_id": "MDQ6VXNlcjg1Mjk0", "avatar_url": "https://avatars3.githubusercontent.com/u/85294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivankorobkov", "html_url": "https://github.com/ivankorobkov", "followers_url": "https://api.github.com/users/ivankorobkov/followers", "following_url": "https://api.github.com/users/ivankorobkov/following{/other_user}", "gists_url": "https://api.github.com/users/ivankorobkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivankorobkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivankorobkov/subscriptions", "organizations_url": "https://api.github.com/users/ivankorobkov/orgs", "repos_url": "https://api.github.com/users/ivankorobkov/repos", "events_url": "https://api.github.com/users/ivankorobkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ivankorobkov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-03-06T12:40:20Z", "updated_at": "2014-03-06T20:19:49Z", "closed_at": "2014-03-06T20:19:49Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/1", "repository_url": "https://api.github.com/repos/ivankorobkov/python-inject", "labels_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/1/comments", "events_url": "https://api.github.com/repos/ivankorobkov/python-inject/issues/1/events", "html_url": "https://github.com/ivankorobkov/python-inject/issues/1", "id": 380273, "node_id": "MDU6SXNzdWUzODAyNzM=", "number": 1, "title": "Move all exception to the exc package", "user": {"login": "ivankorobkov", "id": 85294, "node_id": "MDQ6VXNlcjg1Mjk0", "avatar_url": "https://avatars3.githubusercontent.com/u/85294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivankorobkov", "html_url": "https://github.com/ivankorobkov", "followers_url": "https://api.github.com/users/ivankorobkov/followers", "following_url": "https://api.github.com/users/ivankorobkov/following{/other_user}", "gists_url": "https://api.github.com/users/ivankorobkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivankorobkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivankorobkov/subscriptions", "organizations_url": "https://api.github.com/users/ivankorobkov/orgs", "repos_url": "https://api.github.com/users/ivankorobkov/repos", "events_url": "https://api.github.com/users/ivankorobkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ivankorobkov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2010-10-25T07:50:06Z", "updated_at": "2011-06-14T16:25:43Z", "closed_at": "2011-06-14T16:25:43Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}]}