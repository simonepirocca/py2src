{"total_count": 163, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/588", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/588/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/588/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/588/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/588", "id": 664591150, "node_id": "MDU6SXNzdWU2NjQ1OTExNTA=", "number": 588, "title": "spec.tag generates duplicate JSON entries leading to invalid JSON", "user": {"login": "matdoering", "id": 25709555, "node_id": "MDQ6VXNlcjI1NzA5NTU1", "avatar_url": "https://avatars3.githubusercontent.com/u/25709555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matdoering", "html_url": "https://github.com/matdoering", "followers_url": "https://api.github.com/users/matdoering/followers", "following_url": "https://api.github.com/users/matdoering/following{/other_user}", "gists_url": "https://api.github.com/users/matdoering/gists{/gist_id}", "starred_url": "https://api.github.com/users/matdoering/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matdoering/subscriptions", "organizations_url": "https://api.github.com/users/matdoering/orgs", "repos_url": "https://api.github.com/users/matdoering/repos", "events_url": "https://api.github.com/users/matdoering/events{/privacy}", "received_events_url": "https://api.github.com/users/matdoering/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-23T15:54:29Z", "updated_at": "2020-07-24T06:36:56Z", "closed_at": "2020-07-24T06:36:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I call:\r\n\r\n`spec.tag({'name': 'test', 'description': 'test'})`\r\n\r\nThis generates the tag multiple times, which is invalid:\r\n\r\n```\r\n\r\n \"tags\": [\r\n    {\r\n      \"description\": \"test\",\r\n      \"name\": \"test\"\r\n    },\r\n    {\r\n      \"description\": \"test\",\r\n      \"name\": \"test\"\r\n    }\r\n  ]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/586", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/586/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/586/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/586/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/586", "id": 663281834, "node_id": "MDU6SXNzdWU2NjMyODE4MzQ=", "number": 586, "title": "Missing example on using a security_scheme", "user": {"login": "teancom", "id": 609527, "node_id": "MDQ6VXNlcjYwOTUyNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/609527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teancom", "html_url": "https://github.com/teancom", "followers_url": "https://api.github.com/users/teancom/followers", "following_url": "https://api.github.com/users/teancom/following{/other_user}", "gists_url": "https://api.github.com/users/teancom/gists{/gist_id}", "starred_url": "https://api.github.com/users/teancom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teancom/subscriptions", "organizations_url": "https://api.github.com/users/teancom/orgs", "repos_url": "https://api.github.com/users/teancom/repos", "events_url": "https://api.github.com/users/teancom/events{/privacy}", "received_events_url": "https://api.github.com/users/teancom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-21T20:17:51Z", "updated_at": "2020-07-23T19:29:37Z", "closed_at": "2020-07-23T19:29:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Security schemes as a concept are mentioned [here](https://apispec.readthedocs.io/en/latest/special_topics.html#documenting-security-schemes) but there is no mention in the documentation or the unit tests showing how to actually _apply_ a security scheme to an API in general, or specific end-points (which is my use-case).\r\n\r\nIt's quite possible that the inability to figure out what's needed is due to my lack of experience with both OpenAPI as well as python programming in general, but contrary-wise I was able to get everything else working exactly how I wanted (for which I'm very grateful! This was me dipping my toe into RESTful programming for the first time, and apispec was *very* helpful in generating great-looking docs).\r\n\r\nI can document what didn't work. I had this in my openapi.py:\r\n\r\n```\r\napi_key_scheme = {\"type\": \"apiKey\", \"in\": \"header\", \"name\": \"X-API-KEY\"}\r\nspec.components.security_scheme(\"ApiKeyAuth\", api_key_scheme)\r\n```\r\nAnd this in my code:\r\n```\r\n@apikey_required\r\ndef delete_event(id):\r\n    \"\"\" DELETE EVENT route\r\n    ---\r\n    delete:\r\n        summary: DELETE EVENT route\r\n        description: Delete a single Event specified by ID\r\n        security:\r\n          - ApiKeyAuth: []\r\n    <snip the rest>\r\n    \"\"\"\r\n```\r\nThis got me *very* close, though. In order for tools like Stoplight.io or Redoc to recognize that the ApiKeyAuth was required for this route, I ended up manually editing the generated YAML file, which looked like this:\r\n\r\n```\r\n    delete:\r\n      description: Delete a single Event specified by ID\r\n      parameters:\r\n      - in: path\r\n        name: id\r\n        required: true\r\n        schema:\r\n          format: int32\r\n          type: integer\r\n      responses:\r\n        '200':\r\n          description: JSON object representing an Event\r\n          schema:\r\n            $ref: '#/components/schemas/Event'\r\n        '404':\r\n          description: Event not found.\r\n      security:\r\n      - ApiKeyAuth: []\r\n```\r\n\r\nBy moving the `- ApiKeyAuth: []` section over to the right two spaces.\r\n\r\nI tried a bunch of variations in the docstring in my python code - and it's very, very possible that I'm close - but couldn't figure out the magic incantation to get it to generate correctly. A working example of applying a security_scheme to a route would have been very, very helpful.\r\n\r\nIf someone can put a bare-minimum working example into this issue, I'd be happy to add it into the docs in a PR.\r\n\r\nThanks again.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/575", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/575/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/575/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/575/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/575", "id": 645252661, "node_id": "MDU6SXNzdWU2NDUyNTI2NjE=", "number": 575, "title": "fields.Method doesn't generated into swagger doc", "user": {"login": "azzamsa", "id": 17734314, "node_id": "MDQ6VXNlcjE3NzM0MzE0", "avatar_url": "https://avatars2.githubusercontent.com/u/17734314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azzamsa", "html_url": "https://github.com/azzamsa", "followers_url": "https://api.github.com/users/azzamsa/followers", "following_url": "https://api.github.com/users/azzamsa/following{/other_user}", "gists_url": "https://api.github.com/users/azzamsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/azzamsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azzamsa/subscriptions", "organizations_url": "https://api.github.com/users/azzamsa/orgs", "repos_url": "https://api.github.com/users/azzamsa/repos", "events_url": "https://api.github.com/users/azzamsa/events{/privacy}", "received_events_url": "https://api.github.com/users/azzamsa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-25T06:23:32Z", "updated_at": "2020-07-24T04:06:05Z", "closed_at": "2020-06-25T10:04:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "MWE:\r\n\r\n```python\r\n...\r\nclass PetSchema(ma.Schema):\r\n    class Meta:\r\n        strict = True\r\n        ordered = True\r\n\r\n    id = ma.fields.Int(dump_only=True)\r\n    name = ma.fields.String()\r\n    foo = ma.fields.Method()\r\n\r\n\r\nblp = Blueprint(\"pets\", \"pets\", url_prefix=\"/pets\", description=\"Operations on pets\")\r\n\r\n@blp.route(\"/\")\r\nclass Pets(MethodView):\r\n    @blp.response(PetSchema(many=True))\r\n    def get(self):\r\n        \"\"\"List pets\"\"\"\r\n        # TODO\r\n        # return Pet.select()\r\n\r\n\r\n...\r\n```\r\n![image](https://user-images.githubusercontent.com/17734314/85666749-053ff680-b6e7-11ea-9528-61b64265b4ad.png)\r\n\r\n![image](https://user-images.githubusercontent.com/17734314/85666731-ff4a1580-b6e6-11ea-809e-a8968a4e848e.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/566", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/566/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/566/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/566/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/566", "id": 622439135, "node_id": "MDU6SXNzdWU2MjI0MzkxMzU=", "number": 566, "title": "Marshmallow plugin bug with string schema ref and schema_name_resolver", "user": {"login": "black3r", "id": 2176234, "node_id": "MDQ6VXNlcjIxNzYyMzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2176234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/black3r", "html_url": "https://github.com/black3r", "followers_url": "https://api.github.com/users/black3r/followers", "following_url": "https://api.github.com/users/black3r/following{/other_user}", "gists_url": "https://api.github.com/users/black3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/black3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/black3r/subscriptions", "organizations_url": "https://api.github.com/users/black3r/orgs", "repos_url": "https://api.github.com/users/black3r/repos", "events_url": "https://api.github.com/users/black3r/events{/privacy}", "received_events_url": "https://api.github.com/users/black3r/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-21T11:32:58Z", "updated_at": "2020-06-06T09:26:41Z", "closed_at": "2020-06-06T09:26:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "`resolve_schema_dict` claims to support `string` as its schema parameter type. It can get there for example when you are parsing schema from docstring using the provided yaml util, or using FlaskPlugin to do it for you. \r\n\r\nBut, when `schema_name_resolver` returns `None` for this case, the schema gets forwarded to `schema2jsonschema` which expects a `marshmallow.Schema` instance and crashes.\r\n\r\nTest case is a slightly modified \"example application\": \r\n<details>\r\n<summary>Show example test case</summary>\r\n\r\n```python\r\nimport uuid\r\n\r\nfrom apispec import APISpec\r\nfrom apispec.ext.marshmallow import MarshmallowPlugin\r\nfrom apispec_webframeworks.flask import FlaskPlugin\r\nfrom flask import Flask, jsonify\r\nfrom marshmallow import fields, Schema\r\n\r\n\r\ndef schema_name_resolver(schema):\r\n    if schema == \"PetSchema\":\r\n        return None\r\n\r\n\r\n# Create an APISpec\r\nspec = APISpec(\r\n    title=\"Swagger Petstore\",\r\n    version=\"1.0.0\",\r\n    openapi_version=\"3.0.2\",\r\n    plugins=[\r\n        FlaskPlugin(),\r\n        MarshmallowPlugin(schema_name_resolver=schema_name_resolver),\r\n    ],\r\n)\r\n\r\n\r\n# Optional marshmallow support\r\nclass CategorySchema(Schema):\r\n    id = fields.Int()\r\n    name = fields.Str(required=True)\r\n\r\n\r\nclass PetSchema(Schema):\r\n    categories = fields.List(fields.Nested(CategorySchema))\r\n    name = fields.Str()\r\n\r\n\r\n# Optional Flask support\r\napp = Flask(__name__)\r\n\r\n\r\n@app.route(\"/random\")\r\ndef random_pet():\r\n    \"\"\"A cute furry animal endpoint.\r\n    ---\r\n    get:\r\n      description: Get a random pet\r\n      responses:\r\n        200:\r\n          description: Return a pet\r\n          content:\r\n            application/json:\r\n              schema: PetSchema\r\n    \"\"\"\r\n    # Hardcoded example data\r\n    pet_data = {\r\n        \"name\": \"sample_pet_\" + str(uuid.uuid1()),\r\n        \"categories\": [{\"id\": 1, \"name\": \"sample_category\"}],\r\n    }\r\n    return PetSchema().dump(pet_data)\r\n\r\n\r\n# Register the path and the entities within it\r\nwith app.test_request_context():\r\n    spec.path(view=random_pet)\r\n\r\n\r\n@app.route(\"/spec.json\")\r\ndef get_spec():\r\n    return jsonify(spec.to_dict())\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Show example stacktrace</summary>\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home//PycharmProjects/test-apispec/main.py\", line 62, in <module>\r\n    spec.path(view=random_pet)\r\n  File \"/home//.local/share/virtualenvs/test-apispec-HubT4B3L/lib/python3.8/site-packages/apispec/core.py\", line 280, in path\r\n    plugin.operation_helper(path=path, operations=operations, **kwargs)\r\n  File \"/home//.local/share/virtualenvs/test-apispec-HubT4B3L/lib/python3.8/site-packages/apispec/ext/marshmallow/__init__.py\", line 202, in operation_helper\r\n    self.resolver.resolve_response(response)\r\n  File \"/home//.local/share/virtualenvs/test-apispec-HubT4B3L/lib/python3.8/site-packages/apispec/ext/marshmallow/schema_resolver.py\", line 113, in resolve_response\r\n    self.resolve_schema(response)\r\n  File \"/home//.local/share/virtualenvs/test-apispec-HubT4B3L/lib/python3.8/site-packages/apispec/ext/marshmallow/schema_resolver.py\", line 161, in resolve_schema\r\n    content[\"schema\"] = self.resolve_schema_dict(content[\"schema\"])\r\n  File \"/home//.local/share/virtualenvs/test-apispec-HubT4B3L/lib/python3.8/site-packages/apispec/ext/marshmallow/schema_resolver.py\", line 218, in resolve_schema_dict\r\n    return self.converter.resolve_nested_schema(schema)\r\n  File \"/home//.local/share/virtualenvs/test-apispec-HubT4B3L/lib/python3.8/site-packages/apispec/ext/marshmallow/openapi.py\", line 96, in resolve_nested_schema\r\n    json_schema = self.schema2jsonschema(schema)\r\n  File \"/home//.local/share/virtualenvs/test-apispec-HubT4B3L/lib/python3.8/site-packages/apispec/ext/marshmallow/openapi.py\", line 261, in schema2jsonschema\r\n    fields = get_fields(schema)\r\n  File \"/home//.local/share/virtualenvs/test-apispec-HubT4B3L/lib/python3.8/site-packages/apispec/ext/marshmallow/common.py\", line 63, in get_fields\r\n    raise ValueError(\r\nValueError: 'PetSchema' doesn't have either `fields` or `_declared_fields`.\r\n```\r\n</details>\r\n\r\nI think it should be enough to just pass `schema_instance` instead of `schema` to `self.schema2jsonschema` in `resolve_nested_schema`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/561", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/561/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/561/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/561/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/561", "id": 614420468, "node_id": "MDU6SXNzdWU2MTQ0MjA0Njg=", "number": 561, "title": "MarshmallowPlugin operation helper mutates parameters doc", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187052, "node_id": "MDU6TGFiZWwxMzkxODcwNTI=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-08T00:15:31Z", "updated_at": "2020-05-29T06:38:35Z", "closed_at": "2020-05-29T06:38:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This triggered https://github.com/marshmallow-code/flask-smorest/issues/147.\r\n\r\n`APISpec.path` deepcopies its inputs to avoid mutation issues, but this does not guard against structures having shared data, like a dict where different methods share the same operations dict.\r\n\r\nI'm not sure apispec should address this. It could lead to deepcopies everywhere. Or not so many, I didn't check.\r\n\r\nMaybe we can just expect \"flat\" structures.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/551", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/551/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/551/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/551/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/551", "id": 598115073, "node_id": "MDU6SXNzdWU1OTgxMTUwNzM=", "number": 551, "title": "Is there a way to programmatically upload spec output to swaggerhub?", "user": {"login": "efreethy", "id": 12145559, "node_id": "MDQ6VXNlcjEyMTQ1NTU5", "avatar_url": "https://avatars1.githubusercontent.com/u/12145559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/efreethy", "html_url": "https://github.com/efreethy", "followers_url": "https://api.github.com/users/efreethy/followers", "following_url": "https://api.github.com/users/efreethy/following{/other_user}", "gists_url": "https://api.github.com/users/efreethy/gists{/gist_id}", "starred_url": "https://api.github.com/users/efreethy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/efreethy/subscriptions", "organizations_url": "https://api.github.com/users/efreethy/orgs", "repos_url": "https://api.github.com/users/efreethy/repos", "events_url": "https://api.github.com/users/efreethy/events{/privacy}", "received_events_url": "https://api.github.com/users/efreethy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187052, "node_id": "MDU6TGFiZWwxMzkxODcwNTI=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-10T22:05:05Z", "updated_at": "2020-07-10T20:32:55Z", "closed_at": "2020-07-10T20:32:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "After generating specs it would be nice to push this to swagger hub using an API key - but its not clear that there is support anywhere out there. I can't find any tools that do just this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/548", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/548/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/548/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/548/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/548", "id": 592062473, "node_id": "MDU6SXNzdWU1OTIwNjI0NzM=", "number": 548, "title": "working with webargs meta-location", "user": {"login": "rocambolesque", "id": 4463477, "node_id": "MDQ6VXNlcjQ0NjM0Nzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4463477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rocambolesque", "html_url": "https://github.com/rocambolesque", "followers_url": "https://api.github.com/users/rocambolesque/followers", "following_url": "https://api.github.com/users/rocambolesque/following{/other_user}", "gists_url": "https://api.github.com/users/rocambolesque/gists{/gist_id}", "starred_url": "https://api.github.com/users/rocambolesque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rocambolesque/subscriptions", "organizations_url": "https://api.github.com/users/rocambolesque/orgs", "repos_url": "https://api.github.com/users/rocambolesque/repos", "events_url": "https://api.github.com/users/rocambolesque/events{/privacy}", "received_events_url": "https://api.github.com/users/rocambolesque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2020-04-01T16:55:21Z", "updated_at": "2020-04-02T12:31:15Z", "closed_at": "2020-04-02T09:23:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my api, in order to isolate validation code, I created a meta-location (following this example from the documentation https://webargs.readthedocs.io/en/latest/advanced.html#meta-locations):\r\n```python\r\n@parser.location_loader(\"view_args_and_json\")\r\ndef parse_view_args_and_json(request, schema):\r\n    newdata = deepcopy(request.view_args)\r\n    newdata.update(request.json)\r\n    return MultiDictProxy(newdata, schema)\r\n```\r\nAnd I'm using it as followed in my api:\r\n```python\r\n@bp.route(\"/<attr_id:int>\")\r\nclass MyView(MethodView):\r\n    @bp.arguments(PostMySchema, location=\"view_args_and_json\")\r\n    @bp.response(MySchema, code=201)\r\n    def post(self, payload, attr_id):\r\n        my_model = MyModel(**payload)\r\n        db_session.add(my_model)\r\n        db_session.commit()\r\n        return my_model, 201\r\n```\r\nHere's the schema:\r\n```python\r\nclass MySchema(Schema):\r\n    id = fields.Int(dump_only=True)\r\n    attr_id = fields.Int(load_only=True)\r\n    type = fields.Int()\r\n\r\nclass PostMySchema(RealtorFilterSchema):\r\n    @validates_schema\r\n    def validate_already_exists(self, data, **kwargs):  # here's the validation bit\r\n        my_model = MyModel.query.filter(\r\n            MyModel.attr_id == data[\"attr_id\"],\r\n            MyModel.type == data[\"type\"],\r\n        ).first()\r\n        if realtor_filter:\r\n            raise ValidationError(\"Already exists\")\r\n```\r\nAnd here's the generated openapi.json:\r\n```json\r\n{\r\n        \"parameters\": [\r\n          {\r\n            \"in\": \"view_args_and_json\",\r\n            \"name\": \"attr_id\",\r\n            \"required\": false,\r\n            \"schema\": {\r\n              \"type\": \"integer\",\r\n              \"format\": \"int32\"\r\n            }\r\n          },\r\n          {\r\n            \"in\": \"view_args_and_json\",\r\n            \"name\": \"type\",\r\n            \"required\": false,\r\n            \"schema\": {\r\n              \"type\": \"integer\",\r\n              \"format\": \"int32\"\r\n            }\r\n          }\r\n        ]\r\n}\r\n```\r\nThe swagger interface is unable to post data using this json.\r\nMy goal is to make openapi understand that `view_args_and_json` is supposed to be a `requestBody` and that `attr_id` is not supposed to be part of the body because it is a load-only field.\r\n\r\nI've tried to add my meta-location to `__location_map__` (https://github.com/marshmallow-code/apispec/blob/dev/src/apispec/ext/marshmallow/openapi.py#L30) without success.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/547", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/547/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/547/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/547/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/547", "id": 591133321, "node_id": "MDU6SXNzdWU1OTExMzMzMjE=", "number": 547, "title": "question: array schema reference", "user": {"login": "oxlade39", "id": 144005, "node_id": "MDQ6VXNlcjE0NDAwNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/144005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxlade39", "html_url": "https://github.com/oxlade39", "followers_url": "https://api.github.com/users/oxlade39/followers", "following_url": "https://api.github.com/users/oxlade39/following{/other_user}", "gists_url": "https://api.github.com/users/oxlade39/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxlade39/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxlade39/subscriptions", "organizations_url": "https://api.github.com/users/oxlade39/orgs", "repos_url": "https://api.github.com/users/oxlade39/repos", "events_url": "https://api.github.com/users/oxlade39/events{/privacy}", "received_events_url": "https://api.github.com/users/oxlade39/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-31T13:58:48Z", "updated_at": "2020-04-07T21:54:32Z", "closed_at": "2020-04-07T21:54:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using the docstring to reference a `schema` what is the correct approach when the route returns an array of said schema:\r\n\r\n```python\r\ndef myroute():\r\n    \"\"\"\r\n    Return many\r\n    ---\r\n    get:\r\n        produces:\r\n        - application/json\r\n        responses:\r\n            '200':\r\n                content:\r\n                    application/json:\r\n                        type: array\r\n                        schema: ModelSchema\r\n    \"\"\"\r\n    return jsonify(ModelSchema().dump(selected_models, many=True))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/546", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/546/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/546/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/546/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/546", "id": 585616802, "node_id": "MDU6SXNzdWU1ODU2MTY4MDI=", "number": 546, "title": "Duplicate parameter with name body and location body", "user": {"login": "dgiebert", "id": 4586135, "node_id": "MDQ6VXNlcjQ1ODYxMzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4586135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgiebert", "html_url": "https://github.com/dgiebert", "followers_url": "https://api.github.com/users/dgiebert/followers", "following_url": "https://api.github.com/users/dgiebert/following{/other_user}", "gists_url": "https://api.github.com/users/dgiebert/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgiebert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgiebert/subscriptions", "organizations_url": "https://api.github.com/users/dgiebert/orgs", "repos_url": "https://api.github.com/users/dgiebert/repos", "events_url": "https://api.github.com/users/dgiebert/events{/privacy}", "received_events_url": "https://api.github.com/users/dgiebert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-22T00:41:47Z", "updated_at": "2020-03-30T20:40:20Z", "closed_at": "2020-03-30T20:40:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Created a rather simple REST API with the following setup:\r\n\r\nModel\r\n```\r\nclass Question(db.Model):\r\n    __tablename__ = \"initial_questions\"\r\n    id = Column(Integer, primary_key=True, autoincrement=True)\r\n    text = Column(Text, nullable=False)\r\n```\r\n\r\nSchema\r\n```\r\nclass QuestionSchema(ma.SQLAlchemyAutoSchema):\r\n    class Meta:\r\n        model = Question\r\n\r\n    @post_load\r\n    def load(self, data, **kwargs):\r\n        return Question(**data)\r\n```\r\n\r\nController\r\n```\r\nquestions_blueprint = Blueprint(\"questions\", __name__, url_prefix=\"/questions\")\r\n\r\n@questions_blueprint.route(\"/\", methods=[\"POST\", \"GET\"])\r\n@jwt_required()\r\ndef controller():\r\n    question_controller = QuestionController(request)\r\n    return question_controller(request)\r\n\r\nclass QuestionController(MethodResource):\r\n    @use_kwargs(QuestionSchema)\r\n    @marshal_with(QuestionSchema(many=True))\r\n    def get(self, **kwargs):\r\n        try:\r\n            return Question.query.filter_by(domain=question_domain).all()\r\n        except StatementError as e:\r\n            return make_response(str(e.orig), 400)\r\n        except Exception as e:\r\n            return make_response(\"\", 500)\r\n```\r\nConfig + Register:\r\n```\r\napp.config.update({\r\n    'APISPEC_SPEC': APISpec(\r\n        title='Co-Rona',\r\n        version='v1',\r\n        openapi_version=\"3.0.2\",\r\n        plugins=[MarshmallowPlugin()],\r\n    ),\r\n    'APISPEC_SWAGGER_URL': '/swagger/',\r\n})\r\n\r\napispec = FlaskApiSpec(app)\r\napispec.register(QuestionController, blueprint=\"questions\", endpoint=\"controller\")\r\n```\r\n\r\nThis leads to the following error:\r\n```\r\napispec.exceptions.DuplicateParameterError: Duplicate parameter with name name and location body\r\n```\r\n\r\nAfter a \"bit\" of digging the reason is the property parsing that defaults to naming all elements in 'body' to 'body'\r\nSee here: https://github.com/marshmallow-code/apispec/blob/dev/src/apispec/ext/marshmallow/openapi.py#L232\r\n\r\nFor me changing this to the passed name attribute fixes the problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/540", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/540/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/540/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/540/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/540", "id": 566998680, "node_id": "MDU6SXNzdWU1NjY5OTg2ODA=", "number": 540, "title": "`components` details is not being retrieved with openapi=2.0", "user": {"login": "gusingh-r7", "id": 54996581, "node_id": "MDQ6VXNlcjU0OTk2NTgx", "avatar_url": "https://avatars2.githubusercontent.com/u/54996581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gusingh-r7", "html_url": "https://github.com/gusingh-r7", "followers_url": "https://api.github.com/users/gusingh-r7/followers", "following_url": "https://api.github.com/users/gusingh-r7/following{/other_user}", "gists_url": "https://api.github.com/users/gusingh-r7/gists{/gist_id}", "starred_url": "https://api.github.com/users/gusingh-r7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gusingh-r7/subscriptions", "organizations_url": "https://api.github.com/users/gusingh-r7/orgs", "repos_url": "https://api.github.com/users/gusingh-r7/repos", "events_url": "https://api.github.com/users/gusingh-r7/events{/privacy}", "received_events_url": "https://api.github.com/users/gusingh-r7/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187052, "node_id": "MDU6TGFiZWwxMzkxODcwNTI=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-18T16:04:22Z", "updated_at": "2020-05-18T13:05:09Z", "closed_at": "2020-05-18T13:05:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am not able to retrieve `components` details with openapi=2.0, however, when I simply change the openapi version to 3.2.0, `components` details are being retrieved correctly.\r\nPlease refer output for both the version.\r\n\r\nThis is how I am creating APISpec object. \r\n```\r\n     self.spec = APISpec(\r\n            title=API_SPEC_TITLE,\r\n            version=API_SPEC_VERSION,\r\n            openapi_version=OPEN_API_VERSION,\r\n            plugins=[FlaskPlugin(), MarshmallowPlugin()],\r\n        )\r\n\r\n```\r\nOutput with openapi=3.2.0\r\n```\r\n{\r\n  \"paths\": {\r\n    \"/api\": {\r\n      \"get\": {\r\n        \"description\": \"Get API spec details\",\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"type\": \"object\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"/info\": {\r\n      \"get\": {\r\n        \"description\": \"Get plugin details\",\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"$ref\": \"#/components/schemas/PluginInfo\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"info\": {\r\n    \"title\": \"Runtime API\",\r\n    \"version\": \"1.0\"\r\n  },\r\n  \"openapi\": \"3.2.0\",\r\n  \"components\": {\r\n    \"schemas\": {\r\n      \"PluginInfo\": {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"description\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"version\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"vendor\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"number_of_workers\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int32\"\r\n          },\r\n          \"name\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"threads\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int32\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nOutput with openapi==2.0:\r\n\r\n```\r\n{\r\n  \"paths\": {\r\n    \"/api\": {\r\n      \"get\": {\r\n        \"description\": \"Get API spec details\",\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"type\": \"object\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"/info\": {\r\n      \"get\": {\r\n        \"description\": \"Get plugin details\",\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": \"PluginInfoSchema\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"info\": {\r\n    \"title\": \"Runtime API\",\r\n    \"version\": \"1.0\"\r\n  },\r\n  \"swagger\": \"2.0\"\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/538", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/538/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/538/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/538/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/538", "id": 563996204, "node_id": "MDU6SXNzdWU1NjM5OTYyMDQ=", "number": 538, "title": "Ability to access APISpec.components in plugin init_spec method", "user": {"login": "Colin-b", "id": 7591933, "node_id": "MDQ6VXNlcjc1OTE5MzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/7591933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Colin-b", "html_url": "https://github.com/Colin-b", "followers_url": "https://api.github.com/users/Colin-b/followers", "following_url": "https://api.github.com/users/Colin-b/following{/other_user}", "gists_url": "https://api.github.com/users/Colin-b/gists{/gist_id}", "starred_url": "https://api.github.com/users/Colin-b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Colin-b/subscriptions", "organizations_url": "https://api.github.com/users/Colin-b/orgs", "repos_url": "https://api.github.com/users/Colin-b/repos", "events_url": "https://api.github.com/users/Colin-b/events{/privacy}", "received_events_url": "https://api.github.com/users/Colin-b/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-12T13:21:52Z", "updated_at": "2020-02-14T22:39:04Z", "closed_at": "2020-02-14T22:39:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there a specific reason why components is initialized after plugins init_spec methods are called?\r\n\r\nIf not, then I am willing to open a PR to solve this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/534", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/534/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/534/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/534/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/534", "id": 559552234, "node_id": "MDU6SXNzdWU1NTk1NTIyMzQ=", "number": 534, "title": "Can't create servers object using APISpec class", "user": {"login": "gendarius", "id": 35623244, "node_id": "MDQ6VXNlcjM1NjIzMjQ0", "avatar_url": "https://avatars3.githubusercontent.com/u/35623244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gendarius", "html_url": "https://github.com/gendarius", "followers_url": "https://api.github.com/users/gendarius/followers", "following_url": "https://api.github.com/users/gendarius/following{/other_user}", "gists_url": "https://api.github.com/users/gendarius/gists{/gist_id}", "starred_url": "https://api.github.com/users/gendarius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gendarius/subscriptions", "organizations_url": "https://api.github.com/users/gendarius/orgs", "repos_url": "https://api.github.com/users/gendarius/repos", "events_url": "https://api.github.com/users/gendarius/events{/privacy}", "received_events_url": "https://api.github.com/users/gendarius/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187052, "node_id": "MDU6TGFiZWwxMzkxODcwNTI=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-04T08:08:43Z", "updated_at": "2020-07-10T20:30:50Z", "closed_at": "2020-07-10T20:30:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "As per specification, the \"servers\" object type should be an array/list. This is an example:\r\n```\r\nservers:\r\n- url: https://localhost\r\n```\r\nTo translate this in apispec, I should add the following parameter to the class:\r\n```\r\nservers=[{\r\n    \"url\": \"https://localhost\"\r\n}]\r\n```\r\nHowever, the class APISpec only allows objects of type dictionary for `**options`.\r\nIn any IDE this results in a warning about wrong type.\r\nI solved the issue modifying line 184 of `core.py` in this way:\r\n```\r\n:param dict|list options: Optional top-level keys\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/525", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/525/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/525/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/525/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/525", "id": 544079138, "node_id": "MDU6SXNzdWU1NDQwNzkxMzg=", "number": 525, "title": "How do I define interface parameter descriptions for uploading and downloading files using swagger\uff1f", "user": {"login": "luli817", "id": 31745402, "node_id": "MDQ6VXNlcjMxNzQ1NDAy", "avatar_url": "https://avatars2.githubusercontent.com/u/31745402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luli817", "html_url": "https://github.com/luli817", "followers_url": "https://api.github.com/users/luli817/followers", "following_url": "https://api.github.com/users/luli817/following{/other_user}", "gists_url": "https://api.github.com/users/luli817/gists{/gist_id}", "starred_url": "https://api.github.com/users/luli817/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luli817/subscriptions", "organizations_url": "https://api.github.com/users/luli817/orgs", "repos_url": "https://api.github.com/users/luli817/repos", "events_url": "https://api.github.com/users/luli817/events{/privacy}", "received_events_url": "https://api.github.com/users/luli817/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-31T03:45:04Z", "updated_at": "2019-12-31T08:37:09Z", "closed_at": "2019-12-31T08:37:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to debug upload and download files on the webpage of 127.0.0.1/swagger-ui/\r\n![WechatIMG635](https://user-images.githubusercontent.com/31745402/71609393-09210f00-2bc3-11ea-8463-14349d71f320.png)\r\nlike this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/523", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/523/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/523/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/523/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/523", "id": 540992342, "node_id": "MDU6SXNzdWU1NDA5OTIzNDI=", "number": 523, "title": "Tag objects should be unique ?", "user": {"login": "kwinstonix", "id": 12824991, "node_id": "MDQ6VXNlcjEyODI0OTkx", "avatar_url": "https://avatars1.githubusercontent.com/u/12824991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwinstonix", "html_url": "https://github.com/kwinstonix", "followers_url": "https://api.github.com/users/kwinstonix/followers", "following_url": "https://api.github.com/users/kwinstonix/following{/other_user}", "gists_url": "https://api.github.com/users/kwinstonix/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwinstonix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwinstonix/subscriptions", "organizations_url": "https://api.github.com/users/kwinstonix/orgs", "repos_url": "https://api.github.com/users/kwinstonix/repos", "events_url": "https://api.github.com/users/kwinstonix/events{/privacy}", "received_events_url": "https://api.github.com/users/kwinstonix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-20T13:22:36Z", "updated_at": "2019-12-23T01:43:32Z", "closed_at": "2019-12-23T01:43:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I used `APISpec.tag()` for each OAS Operation object, so the `swagger.yaml` contains many  duplicate tag objects, so I think it should be better if we remove duplicate tag objects here.\r\n\r\nhttps://github.com/marshmallow-code/apispec/blob/1f386092f7b8693d635a707e94f81420a2d48175/src/apispec/core.py#L212\r\n\r\n```\r\n_tags = [{'name': \"tag name\" , 'description': 'desc'}]\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/509", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/509/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/509/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/509/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/509", "id": 509005359, "node_id": "MDU6SXNzdWU1MDkwMDUzNTk=", "number": 509, "title": "help with yaml in docstrings", "user": {"login": "grudelsud", "id": 310976, "node_id": "MDQ6VXNlcjMxMDk3Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/310976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grudelsud", "html_url": "https://github.com/grudelsud", "followers_url": "https://api.github.com/users/grudelsud/followers", "following_url": "https://api.github.com/users/grudelsud/following{/other_user}", "gists_url": "https://api.github.com/users/grudelsud/gists{/gist_id}", "starred_url": "https://api.github.com/users/grudelsud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grudelsud/subscriptions", "organizations_url": "https://api.github.com/users/grudelsud/orgs", "repos_url": "https://api.github.com/users/grudelsud/repos", "events_url": "https://api.github.com/users/grudelsud/events{/privacy}", "received_events_url": "https://api.github.com/users/grudelsud/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187052, "node_id": "MDU6TGFiZWwxMzkxODcwNTI=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-10-18T10:51:41Z", "updated_at": "2020-04-23T11:35:29Z", "closed_at": "2020-04-23T11:35:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "hey guys\r\n\r\napispec looks really great, but I'm finding really hard to find any documentation on how to write docstrings that would produce something usable for things like https://github.com/Redocly/redoc\r\n\r\nanyone here can point me in the right direction, please?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/508", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/508/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/508/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/508/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/508", "id": 502820525, "node_id": "MDU6SXNzdWU1MDI4MjA1MjU=", "number": 508, "title": "Default for schema fields.Date parameters not in API example values", "user": {"login": "MaxGrtz", "id": 32574331, "node_id": "MDQ6VXNlcjMyNTc0MzMx", "avatar_url": "https://avatars1.githubusercontent.com/u/32574331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaxGrtz", "html_url": "https://github.com/MaxGrtz", "followers_url": "https://api.github.com/users/MaxGrtz/followers", "following_url": "https://api.github.com/users/MaxGrtz/following{/other_user}", "gists_url": "https://api.github.com/users/MaxGrtz/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaxGrtz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaxGrtz/subscriptions", "organizations_url": "https://api.github.com/users/MaxGrtz/orgs", "repos_url": "https://api.github.com/users/MaxGrtz/repos", "events_url": "https://api.github.com/users/MaxGrtz/events{/privacy}", "received_events_url": "https://api.github.com/users/MaxGrtz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187052, "node_id": "MDU6TGFiZWwxMzkxODcwNTI=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-04T19:29:35Z", "updated_at": "2019-10-13T18:41:31Z", "closed_at": "2019-10-13T18:41:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I set the default value in da Marshmallow schema string field (for example) I get this value in the example value in the documentation for the corresponding function in my swagger ui.\r\n\r\nIf I try the same with a marshmallow.fields.Date field, I always get todays date as the value in the example.\r\n\r\nas an example I defined those two fields:     \r\n\r\n```py\r\nstart_date = ma.fields.Date(required=True, default=date.today().replace(day=1))\r\nend_date = ma.fields.Date(required=True, default=date.today().replace(day=1) + relativedelta(years=1))\r\n```\r\nThis ends up to be :\r\n  \"start_date\": \"2019-10-04\",\r\n  \"end_date\": \"2019-10-04\",\r\n\r\nin the generated example values in the request body.\r\n\r\nAm I doing something wrong or is the default for date params simply always today() and does not consider the set default in the schema field?\r\n\r\nThanks a lot in advance.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/507", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/507/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/507/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/507/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/507", "id": 501919520, "node_id": "MDU6SXNzdWU1MDE5MTk1MjA=", "number": 507, "title": "apispec-3.0.0 incompatible with apache-airflow", "user": {"login": "benbendemo", "id": 4705587, "node_id": "MDQ6VXNlcjQ3MDU1ODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4705587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benbendemo", "html_url": "https://github.com/benbendemo", "followers_url": "https://api.github.com/users/benbendemo/followers", "following_url": "https://api.github.com/users/benbendemo/following{/other_user}", "gists_url": "https://api.github.com/users/benbendemo/gists{/gist_id}", "starred_url": "https://api.github.com/users/benbendemo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benbendemo/subscriptions", "organizations_url": "https://api.github.com/users/benbendemo/orgs", "repos_url": "https://api.github.com/users/benbendemo/repos", "events_url": "https://api.github.com/users/benbendemo/events{/privacy}", "received_events_url": "https://api.github.com/users/benbendemo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-03T08:18:06Z", "updated_at": "2019-10-03T08:26:50Z", "closed_at": "2019-10-03T08:22:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, i need to report one issue, when my Python version is:2.7.5, when i use \"pip install apispec\", it will automatically install the latest version apispec-3.0.0.\r\n\r\nAfterwards, when i execute \"airflow webserver\" command, it just throws \"SyntaxError: invalid syntax\" error like below picture.\r\n\r\n<img width=\"694\" alt=\"image\" src=\"https://user-images.githubusercontent.com/4705587/66110056-8951cb80-e5f8-11e9-8855-3130d056eb4b.png\">\r\n\r\nI checked \"core.py\" file in apispec package, on line 224, there is a \"*\" parameter in path function, guess that's the reason why \"airflow webserver\" could'n work.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/505", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/505/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/505/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/505/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/505", "id": 497953453, "node_id": "MDU6SXNzdWU0OTc5NTM0NTM=", "number": 505, "title": "`type: object` not added to a Field leads to weirdness", "user": {"login": "flaker", "id": 627517, "node_id": "MDQ6VXNlcjYyNzUxNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/627517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaker", "html_url": "https://github.com/flaker", "followers_url": "https://api.github.com/users/flaker/followers", "following_url": "https://api.github.com/users/flaker/following{/other_user}", "gists_url": "https://api.github.com/users/flaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaker/subscriptions", "organizations_url": "https://api.github.com/users/flaker/orgs", "repos_url": "https://api.github.com/users/flaker/repos", "events_url": "https://api.github.com/users/flaker/events{/privacy}", "received_events_url": "https://api.github.com/users/flaker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-24T22:25:21Z", "updated_at": "2020-04-22T23:10:23Z", "closed_at": "2020-04-22T23:10:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI am using apispec with Marshmallow. I've noticed that while trying e.g. the swagger editor (https://editor.swagger.io/) one parameter is not present even when it's required. My field is declared as:\r\n\r\n`snapshot = ma.fields.Field(required=True, description='The state of the entity.')`\r\n\r\nand the json generated looks like:\r\n\r\n```\r\n        \"snapshot\": {\r\n          \"description\": \"The state of the entity.\"\r\n        }, \r\n```\r\n\r\nIf I add `\"type\": \"object\"`, the parameter shows up. This field can receive in practice anything that can be json serializable (eventually). But since we don't know  what is it going to be, we chose \"Field\". Should we be using something else?\r\n\r\nThanks.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/503", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/503/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/503/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/503/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/503", "id": 496637251, "node_id": "MDU6SXNzdWU0OTY2MzcyNTE=", "number": 503, "title": "Example in Readme Fails in python 3.6.3", "user": {"login": "thenetimp", "id": 438087, "node_id": "MDQ6VXNlcjQzODA4Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/438087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thenetimp", "html_url": "https://github.com/thenetimp", "followers_url": "https://api.github.com/users/thenetimp/followers", "following_url": "https://api.github.com/users/thenetimp/following{/other_user}", "gists_url": "https://api.github.com/users/thenetimp/gists{/gist_id}", "starred_url": "https://api.github.com/users/thenetimp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thenetimp/subscriptions", "organizations_url": "https://api.github.com/users/thenetimp/orgs", "repos_url": "https://api.github.com/users/thenetimp/repos", "events_url": "https://api.github.com/users/thenetimp/events{/privacy}", "received_events_url": "https://api.github.com/users/thenetimp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-21T09:43:25Z", "updated_at": "2019-09-21T11:40:11Z", "closed_at": "2019-09-21T11:40:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\npython spectest.py\r\nTraceback (most recent call last):\r\n  File \"spectest.py\", line 1, in <module>\r\n    from apispec import APISpec\r\n  File \"/Users/jandrews/flaskbase/apispec.py\", line 1, in <module>\r\n    from apispec import APISpec\r\nImportError: cannot import name 'APISpec'\r\n```\r\n\r\nPython 3.6.3 in a virtual environment.  Unable to use the sample script in the Readme.md", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/502", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/502/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/502/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/502/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/502", "id": 493744577, "node_id": "MDU6SXNzdWU0OTM3NDQ1Nzc=", "number": 502, "title": "No module named 'apispec'", "user": {"login": "Bernardoow", "id": 4077212, "node_id": "MDQ6VXNlcjQwNzcyMTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4077212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bernardoow", "html_url": "https://github.com/Bernardoow", "followers_url": "https://api.github.com/users/Bernardoow/followers", "following_url": "https://api.github.com/users/Bernardoow/following{/other_user}", "gists_url": "https://api.github.com/users/Bernardoow/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bernardoow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bernardoow/subscriptions", "organizations_url": "https://api.github.com/users/Bernardoow/orgs", "repos_url": "https://api.github.com/users/Bernardoow/repos", "events_url": "https://api.github.com/users/Bernardoow/events{/privacy}", "received_events_url": "https://api.github.com/users/Bernardoow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-15T14:32:19Z", "updated_at": "2019-09-15T19:45:54Z", "closed_at": "2019-09-15T19:45:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using pipenv and used pipenv install apispec=\"==2.0.2\". So I call the method in my file \"from apispec import APISpec\" and the got the error :\r\n\r\nfrom apispec import APISpec\r\nE   ModuleNotFoundError: No module named 'apispec'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/494", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/494/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/494/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/494/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/494", "id": 488518910, "node_id": "MDU6SXNzdWU0ODg1MTg5MTA=", "number": 494, "title": "Allow `many=True` schemas in `requestBody`", "user": {"login": "Ianleeclark", "id": 2055372, "node_id": "MDQ6VXNlcjIwNTUzNzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2055372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ianleeclark", "html_url": "https://github.com/Ianleeclark", "followers_url": "https://api.github.com/users/Ianleeclark/followers", "following_url": "https://api.github.com/users/Ianleeclark/following{/other_user}", "gists_url": "https://api.github.com/users/Ianleeclark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ianleeclark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ianleeclark/subscriptions", "organizations_url": "https://api.github.com/users/Ianleeclark/orgs", "repos_url": "https://api.github.com/users/Ianleeclark/repos", "events_url": "https://api.github.com/users/Ianleeclark/events{/privacy}", "received_events_url": "https://api.github.com/users/Ianleeclark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-09-03T10:20:43Z", "updated_at": "2020-04-22T23:11:55Z", "closed_at": "2020-04-22T23:11:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI recently came across what I believe to be is a bug. If you have a schema with the `many` flag set to `True`, the schema in the `requestBody` will not be of type `array`. \r\n\r\nI have traced this to the following line of code: https://github.com/marshmallow-code/apispec/blob/32b6c322ff17cd4e5ddbc89968c7014ff2f7808d/src/apispec/ext/marshmallow/openapi.py#L288\r\n\r\nIs this meant to be supported in the OAS 3.0 spec? When I looked over it, I couldn't find anything outright stating this isn't possible--specifically referring to https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#schemaObject", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/491", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/491/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/491/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/491/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/491", "id": 487778515, "node_id": "MDU6SXNzdWU0ODc3Nzg1MTU=", "number": 491, "title": "Drop Python 2 support", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 927005179, "node_id": "MDU6TGFiZWw5MjcwMDUxNzk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/backwards%20incompat", "name": "backwards incompat", "color": "eb6420", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-08-31T14:58:28Z", "updated_at": "2019-09-02T14:14:01Z", "closed_at": "2019-09-02T14:14:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Now that we're working on a new major apispec release, seems a good time as any to do this...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/485", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/485/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/485/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/485/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/485", "id": 483530746, "node_id": "MDU6SXNzdWU0ODM1MzA3NDY=", "number": 485, "title": "Drop marshmallow 3.0.0 RC releases compatibility", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-21T16:40:06Z", "updated_at": "2019-08-31T10:03:31Z", "closed_at": "2019-08-31T10:03:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://github.com/marshmallow-code/apispec/blob/78b14803dc966a2c41413f7e08aadcecc193b0b3/src/apispec/ext/marshmallow/openapi.py#L432-L442\r\n\r\nMA3 stable is out, we don't need to support older RC versions.\r\n\r\nWe could rework this in next release.\r\n\r\nLeaving it for now to avoid unnecessary conflicts with #478.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/482", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/482/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/482/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/482/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/482", "id": 478111600, "node_id": "MDU6SXNzdWU0NzgxMTE2MDA=", "number": 482, "title": "Apispec registering schema property's data type as the name, potential fix", "user": {"login": "KJoshi31", "id": 19541224, "node_id": "MDQ6VXNlcjE5NTQxMjI0", "avatar_url": "https://avatars2.githubusercontent.com/u/19541224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KJoshi31", "html_url": "https://github.com/KJoshi31", "followers_url": "https://api.github.com/users/KJoshi31/followers", "following_url": "https://api.github.com/users/KJoshi31/following{/other_user}", "gists_url": "https://api.github.com/users/KJoshi31/gists{/gist_id}", "starred_url": "https://api.github.com/users/KJoshi31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KJoshi31/subscriptions", "organizations_url": "https://api.github.com/users/KJoshi31/orgs", "repos_url": "https://api.github.com/users/KJoshi31/repos", "events_url": "https://api.github.com/users/KJoshi31/events{/privacy}", "received_events_url": "https://api.github.com/users/KJoshi31/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-07T19:56:14Z", "updated_at": "2020-04-23T11:25:24Z", "closed_at": "2020-04-23T11:25:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "we had similar issues to the following bug:  https://github.com/marshmallow-code/apispec/issues/200 except our issue came after the schemas were registered\r\n\r\nWith our version of Marshmallow being 3 we received errors similar to the following:\r\n`AttributeError: 'String' object has no attribute 'data_key'`\r\n\r\nWhat we had done was, we created our own subclasses defined as such:\r\n```python\r\nclass String(fields.String):\r\n    data_key = \"string\"\r\n```\r\n\r\nand our schema would then use these custom defined field subclasses instead of the pre-defined onces that come with Marshmallow, thus not receiving the related bug as reported by \r\nhttps://github.com/marshmallow-code/apispec/issues/200\r\n\r\nHowever after registering the schemas, we would get the schemas but the names of the properties would be their type instead of the actual name:\r\n```javascript\r\n {\r\n        \"properties\": {\r\n          \"List\": {\r\n            \"items\": {\r\n              \"format\": \"int32\", \r\n              \"type\": \"integer\"\r\n            }, \r\n            \"nullable\": true, \r\n            \"type\": \"array\"\r\n          }, \r\n          \"Nested\": {\r\n            \"$ref\": \"#/components/schemas/CardData\"\r\n          }, \r\n          \"Number\": {\r\n            \"format\": \"int32\", \r\n            \"type\": \"integer\"\r\n          }, \r\n          \"String\": {\r\n            \"format\": \"date-time\", \r\n            \"nullable\": true, \r\n            \"readOnly\": true, \r\n            \"type\": \"string\"\r\n          }\r\n        }, \r\n        \"type\": \"object\"\r\n      }\r\n```\r\n\r\nWhen digging into why the fields would show up this way, it came down to _observed_name method in the openapi.py file:\r\n```python\r\n    @staticmethod\r\n    def _observed_name(field, name):\r\n        \"\"\"Adjust field name to reflect `dump_to` and `load_from` attributes.\r\n\r\n        :param Field field: A marshmallow field.\r\n        :param str name: Field name\r\n        :rtype: str\r\n        \"\"\"\r\n        if MARSHMALLOW_VERSION_INFO[0] < 3:\r\n            # use getattr in case we're running against older versions of marshmallow.\r\n            dump_to = getattr(field, \"dump_to\", None)\r\n            load_from = getattr(field, \"load_from\", None)\r\n            return dump_to or load_from or name\r\n        return field.data_key or name\r\n```\r\n\r\nbasically the this method is evaluating the field names as their types which was a simple fix by removing the ```field.data_key``` from the outer return statement:\r\n```python\r\n        if MARSHMALLOW_VERSION_INFO[0] < 3:\r\n            # use getattr in case we're running against older versions of marshmallow.\r\n            dump_to = getattr(field, \"dump_to\", None)\r\n            load_from = getattr(field, \"load_from\", None)\r\n            return dump_to or load_from or name\r\n        return name\r\n```\r\nAfter this fix, we received the correct json data:\r\n```javascript\r\n{\r\n        \"properties\": {\r\n          \"affiliate\": {\r\n            \"format\": \"int32\",\r\n            \"type\": \"integer\"\r\n          },\r\n          \"card_data\": {\r\n            \"$ref\": \"#/components/schemas/CardData\"\r\n          },\r\n          \"created\": {\r\n            \"format\": \"date-time\",\r\n            \"nullable\": true,\r\n            \"readOnly\": true,\r\n            \"type\": \"string\"\r\n          },\r\n          \"id\": {\r\n            \"format\": \"int32\",\r\n            \"minimum\": 1,\r\n            \"nullable\": true,\r\n            \"type\": \"integer\"\r\n          }\r\n  ......\r\n```\r\n\r\nI believe this fix was necessary with how the openapi.py inside apispec was registering our schemas but was unsure of the removal of the field.data_key from the _observed_name method being a valid workaround for the json schema property name issue. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/479", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/479/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/479/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/479/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/479", "id": 472388780, "node_id": "MDU6SXNzdWU0NzIzODg3ODA=", "number": 479, "title": "Can't create a `$ref` parameter", "user": {"login": "jeffsawatzky", "id": 421404, "node_id": "MDQ6VXNlcjQyMTQwNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/421404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeffsawatzky", "html_url": "https://github.com/jeffsawatzky", "followers_url": "https://api.github.com/users/jeffsawatzky/followers", "following_url": "https://api.github.com/users/jeffsawatzky/following{/other_user}", "gists_url": "https://api.github.com/users/jeffsawatzky/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeffsawatzky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeffsawatzky/subscriptions", "organizations_url": "https://api.github.com/users/jeffsawatzky/orgs", "repos_url": "https://api.github.com/users/jeffsawatzky/repos", "events_url": "https://api.github.com/users/jeffsawatzky/events{/privacy}", "received_events_url": "https://api.github.com/users/jeffsawatzky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-24T16:47:03Z", "updated_at": "2019-07-24T20:39:46Z", "closed_at": "2019-07-24T20:39:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to create a parameter the references a global parameter like shown here:\r\nhttps://swagger.io/docs/specification/describing-parameters/#common-for-various-paths\r\n\r\nHowever, I am getting an `InvalidParameterError` because my paramter doesn't have a `name` or `in` property...but as far as I know it doesn't need it if it is referencing a global one.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/475", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/475/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/475/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/475", "id": 468236795, "node_id": "MDU6SXNzdWU0NjgyMzY3OTU=", "number": 475, "title": "partial=True on schema issues non-unique warning", "user": {"login": "mekanix", "id": 610855, "node_id": "MDQ6VXNlcjYxMDg1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/610855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mekanix", "html_url": "https://github.com/mekanix", "followers_url": "https://api.github.com/users/mekanix/followers", "following_url": "https://api.github.com/users/mekanix/following{/other_user}", "gists_url": "https://api.github.com/users/mekanix/gists{/gist_id}", "starred_url": "https://api.github.com/users/mekanix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mekanix/subscriptions", "organizations_url": "https://api.github.com/users/mekanix/orgs", "repos_url": "https://api.github.com/users/mekanix/repos", "events_url": "https://api.github.com/users/mekanix/events{/privacy}", "received_events_url": "https://api.github.com/users/mekanix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-15T17:03:29Z", "updated_at": "2019-08-21T09:06:16Z", "closed_at": "2019-08-21T09:06:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code gives:\r\n```\r\n/usr/home/meka/.virtualenvs/rest/lib/python3.6/site-packages/apispec/ext/marshmallow/common.py:145: UserWarning: Multiple schemas resolved to the name Pet. The name has been modified. Either manually add each of the schemas with a different name or provide a custom schema_name_resolver.\r\n```\r\nIf I remove `partial=True`, the warning goes away. In SwaggerUI, there are two schemas that corespond to `PetSchema` when partial is usedb.\r\n\r\n```py\r\nimport marshmallow as ma\r\nfrom flask import Flask\r\nfrom flask.views import MethodView\r\nfrom flask_rest_api import Api, Blueprint, abort\r\n\r\n\r\nclass Pet:\r\n    id = 1\r\n    name = 'Cat'\r\n\r\n\r\nclass PetSchema(ma.Schema):\r\n    id = ma.fields.Int(dump_only=True)\r\n    name = ma.fields.String()\r\n\r\n    class Meta:\r\n        strict = True\r\n\r\n\r\napp = Flask('My API')\r\napp.config['OPENAPI_VERSION'] = '3.0.2'\r\napi = Api(app)\r\n\r\nblp = Blueprint('pets', 'pets')\r\n\r\n\r\n@blp.route('/')\r\nclass Pets(MethodView):\r\n    @blp.arguments(PetSchema, location='query')\r\n    @blp.response(PetSchema(many=True))\r\n    def get(self, args):\r\n        \"\"\"List pets\"\"\"\r\n        return [Pet()]\r\n\r\n    @blp.arguments(PetSchema)\r\n    @blp.response(PetSchema, code=201)\r\n    def post(self, new_data):\r\n        \"\"\"Add a new pet\"\"\"\r\n        return Pet()\r\n\r\n\r\n@blp.route('/<pet_id>')\r\nclass PetsById(MethodView):\r\n    @blp.response(PetSchema)\r\n    def get(self, pet_id):\r\n        \"\"\"Get pet by ID\"\"\"\r\n        try:\r\n            item = Pet()\r\n        except ItemNotFoundError:\r\n            abort(404, message='Item not found.')\r\n        return item\r\n\r\n    @blp.arguments(PetSchema(partial=True))\r\n    @blp.response(PetSchema)\r\n    def put(self, update_data, pet_id):\r\n        \"\"\"Update existing pet\"\"\"\r\n        try:\r\n            item = Pet()\r\n        except ItemNotFoundError:\r\n            abort(404, message='Item not found.')\r\n        return item\r\n\r\n    @blp.response(code=204)\r\n    def delete(self, pet_id):\r\n        \"\"\"Delete pet\"\"\"\r\n        pass\r\n\r\n\r\napi.register_blueprint(blp)\r\n\r\nif __name__ == '__main__':\r\n    app.run()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/474", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/474/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/474/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/474/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/474", "id": 467550010, "node_id": "MDU6SXNzdWU0Njc1NTAwMTA=", "number": 474, "title": "How to generate global enum?", "user": {"login": "mlschneid", "id": 328514, "node_id": "MDQ6VXNlcjMyODUxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/328514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlschneid", "html_url": "https://github.com/mlschneid", "followers_url": "https://api.github.com/users/mlschneid/followers", "following_url": "https://api.github.com/users/mlschneid/following{/other_user}", "gists_url": "https://api.github.com/users/mlschneid/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlschneid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlschneid/subscriptions", "organizations_url": "https://api.github.com/users/mlschneid/orgs", "repos_url": "https://api.github.com/users/mlschneid/repos", "events_url": "https://api.github.com/users/mlschneid/events{/privacy}", "received_events_url": "https://api.github.com/users/mlschneid/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187052, "node_id": "MDU6TGFiZWwxMzkxODcwNTI=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-12T18:41:49Z", "updated_at": "2019-07-15T19:48:16Z", "closed_at": "2019-07-15T19:48:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm interested in generating a global enum (ex Color) that I can reference in parameters.\r\n\r\nIs this currently possible?\r\n\r\nExample below:\r\n\r\n```    \r\n  paths:\r\n      /products:\r\n        get:\r\n          parameters:\r\n          - in: query\r\n            name: color\r\n            required: true\r\n            schema:\r\n              $ref: '#/components/schemas/Color'\r\n          responses:\r\n            '200':\r\n              description: OK\r\n    components:\r\n      schemas:\r\n        Color:\r\n          type: string\r\n          enum:\r\n            - black\r\n            - white\r\n            - red\r\n            - green\r\n            - blue\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/473", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/473/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/473/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/473", "id": 467129035, "node_id": "MDU6SXNzdWU0NjcxMjkwMzU=", "number": 473, "title": "InvalidParameterError exception", "user": {"login": "dpgaspar", "id": 4025227, "node_id": "MDQ6VXNlcjQwMjUyMjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4025227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpgaspar", "html_url": "https://github.com/dpgaspar", "followers_url": "https://api.github.com/users/dpgaspar/followers", "following_url": "https://api.github.com/users/dpgaspar/following{/other_user}", "gists_url": "https://api.github.com/users/dpgaspar/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpgaspar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpgaspar/subscriptions", "organizations_url": "https://api.github.com/users/dpgaspar/orgs", "repos_url": "https://api.github.com/users/dpgaspar/repos", "events_url": "https://api.github.com/users/dpgaspar/events{/privacy}", "received_events_url": "https://api.github.com/users/dpgaspar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-07-11T22:05:45Z", "updated_at": "2019-07-18T13:55:34Z", "closed_at": "2019-07-18T13:55:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nOn apispec>2.0.0 I'm getting:\r\n```\r\napispec.exceptions.InvalidParameterError: Missing keys ['name', 'in'] for parameter\r\n```\r\n\r\nI may be mistaken but it seems that I do have `name` and `in` on all parameters\r\nOnce more I'm sorry for the long JSON spec:\r\n\r\n```\r\n{\r\n  \"components\": {\r\n    \"parameters\": {\r\n      \"get_info_schema\": {\r\n        \"in\": \"query\",\r\n        \"name\": \"q\",\r\n        \"schema\": {\r\n          \"properties\": {\r\n            \"add_columns\": {\r\n              \"additionalProperties\": {\r\n                \"properties\": {\r\n                  \"page\": {\r\n                    \"type\": \"integer\"\r\n                  },\r\n                  \"page_size\": {\r\n                    \"type\": \"integer\"\r\n                  }\r\n                },\r\n                \"type\": \"object\"\r\n              },\r\n              \"type\": \"object\"\r\n            },\r\n            \"keys\": {\r\n              \"items\": {\r\n                \"enum\": [\r\n                  \"add_columns\",\r\n                  \"edit_columns\",\r\n                  \"filters\",\r\n                  \"permissions\",\r\n                  \"add_title\",\r\n                  \"edit_title\",\r\n                  \"none\"\r\n                ],\r\n                \"type\": \"string\"\r\n              },\r\n              \"type\": \"array\"\r\n            }\r\n          },\r\n          \"type\": \"object\"\r\n        }\r\n      },\r\n      \"get_item_schema\": {\r\n        \"in\": \"query\",\r\n        \"name\": \"q\",\r\n        \"schema\": {\r\n          \"properties\": {\r\n            \"columns\": {\r\n              \"items\": {\r\n                \"type\": \"string\"\r\n              },\r\n              \"type\": \"array\"\r\n            },\r\n            \"keys\": {\r\n              \"items\": {\r\n                \"enum\": [\r\n                  \"show_columns\",\r\n                  \"description_columns\",\r\n                  \"label_columns\",\r\n                  \"show_title\",\r\n                  \"none\"\r\n                ],\r\n                \"type\": \"string\"\r\n              },\r\n              \"type\": \"array\"\r\n            }\r\n          },\r\n          \"type\": \"object\"\r\n        }\r\n      },\r\n      \"get_list_schema\": {\r\n        \"in\": \"query\",\r\n        \"name\": \"q\",\r\n        \"schema\": {\r\n          \"properties\": {\r\n            \"columns\": {\r\n              \"items\": {\r\n                \"type\": \"string\"\r\n              },\r\n              \"type\": \"array\"\r\n            },\r\n            \"filters\": {\r\n              \"items\": {\r\n                \"properties\": {\r\n                  \"col\": {\r\n                    \"type\": \"string\"\r\n                  },\r\n                  \"opr\": {\r\n                    \"type\": \"string\"\r\n                  },\r\n                  \"value\": {\r\n                    \"anyOf\": [\r\n                      {\r\n                        \"type\": \"number\"\r\n                      },\r\n                      {\r\n                        \"type\": \"string\"\r\n                      },\r\n                      {\r\n                        \"type\": \"boolean\"\r\n                      }\r\n                    ]\r\n                  }\r\n                },\r\n                \"type\": \"object\"\r\n              },\r\n              \"type\": \"array\"\r\n            },\r\n            \"keys\": {\r\n              \"items\": {\r\n                \"enum\": [\r\n                  \"list_columns\",\r\n                  \"order_columns\",\r\n                  \"label_columns\",\r\n                  \"description_columns\",\r\n                  \"list_title\",\r\n                  \"none\"\r\n                ],\r\n                \"type\": \"string\"\r\n              },\r\n              \"type\": \"array\"\r\n            },\r\n            \"order_column\": {\r\n              \"type\": \"string\"\r\n            },\r\n            \"order_direction\": {\r\n              \"enum\": [\r\n                \"asc\",\r\n                \"desc\"\r\n              ],\r\n              \"type\": \"string\"\r\n            },\r\n            \"page\": {\r\n              \"type\": \"integer\"\r\n            },\r\n            \"page_size\": {\r\n              \"type\": \"integer\"\r\n            }\r\n          },\r\n          \"type\": \"object\"\r\n        }\r\n      }\r\n    },\r\n    \"responses\": {\r\n      \"400\": {\r\n        \"content\": {\r\n          \"application/json\": {\r\n            \"schema\": {\r\n              \"properties\": {\r\n                \"message\": {\r\n                  \"type\": \"string\"\r\n                }\r\n              },\r\n              \"type\": \"object\"\r\n            }\r\n          }\r\n        },\r\n        \"description\": \"Bad request\"\r\n      },\r\n      \"401\": {\r\n        \"content\": {\r\n          \"application/json\": {\r\n            \"schema\": {\r\n              \"properties\": {\r\n                \"message\": {\r\n                  \"type\": \"string\"\r\n                }\r\n              },\r\n              \"type\": \"object\"\r\n            }\r\n          }\r\n        },\r\n        \"description\": \"Unauthorized\"\r\n      },\r\n      \"404\": {\r\n        \"content\": {\r\n          \"application/json\": {\r\n            \"schema\": {\r\n              \"properties\": {\r\n                \"message\": {\r\n                  \"type\": \"string\"\r\n                }\r\n              },\r\n              \"type\": \"object\"\r\n            }\r\n          }\r\n        },\r\n        \"description\": \"Not found\"\r\n      },\r\n      \"422\": {\r\n        \"content\": {\r\n          \"application/json\": {\r\n            \"schema\": {\r\n              \"properties\": {\r\n                \"message\": {\r\n                  \"type\": \"string\"\r\n                }\r\n              },\r\n              \"type\": \"object\"\r\n            }\r\n          }\r\n        },\r\n        \"description\": \"Could not process entity\"\r\n      },\r\n      \"500\": {\r\n        \"content\": {\r\n          \"application/json\": {\r\n            \"schema\": {\r\n              \"properties\": {\r\n                \"message\": {\r\n                  \"type\": \"string\"\r\n                }\r\n              },\r\n              \"type\": \"object\"\r\n            }\r\n          }\r\n        },\r\n        \"description\": \"Fatal error\"\r\n      }\r\n    },\r\n    \"schemas\": {\r\n      \"GroupModelApi.get\": {\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"maxLength\": 50,\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"type\": \"object\"\r\n      },\r\n      \"GroupModelApi.get_list\": {\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"maxLength\": 50,\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"type\": \"object\"\r\n      },\r\n      \"GroupModelApi.post\": {\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"maxLength\": 50,\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"type\": \"object\"\r\n      },\r\n      \"GroupModelApi.put\": {\r\n        \"properties\": {\r\n          \"name\": {\r\n            \"maxLength\": 50,\r\n            \"type\": \"string\"\r\n          }\r\n        },\r\n        \"required\": [\r\n          \"name\"\r\n        ],\r\n        \"type\": \"object\"\r\n      },\r\n      \"get_info_schema\": {\r\n        \"properties\": {\r\n          \"add_columns\": {\r\n            \"additionalProperties\": {\r\n              \"properties\": {\r\n                \"page\": {\r\n                  \"type\": \"integer\"\r\n                },\r\n                \"page_size\": {\r\n                  \"type\": \"integer\"\r\n                }\r\n              },\r\n              \"type\": \"object\"\r\n            },\r\n            \"type\": \"object\"\r\n          },\r\n          \"keys\": {\r\n            \"items\": {\r\n              \"enum\": [\r\n                \"add_columns\",\r\n                \"edit_columns\",\r\n                \"filters\",\r\n                \"permissions\",\r\n                \"add_title\",\r\n                \"edit_title\",\r\n                \"none\"\r\n              ],\r\n              \"type\": \"string\"\r\n            },\r\n            \"type\": \"array\"\r\n          }\r\n        },\r\n        \"type\": \"object\"\r\n      },\r\n      \"get_item_schema\": {\r\n        \"properties\": {\r\n          \"columns\": {\r\n            \"items\": {\r\n              \"type\": \"string\"\r\n            },\r\n            \"type\": \"array\"\r\n          },\r\n          \"keys\": {\r\n            \"items\": {\r\n              \"enum\": [\r\n                \"show_columns\",\r\n                \"description_columns\",\r\n                \"label_columns\",\r\n                \"show_title\",\r\n                \"none\"\r\n              ],\r\n              \"type\": \"string\"\r\n            },\r\n            \"type\": \"array\"\r\n          }\r\n        },\r\n        \"type\": \"object\"\r\n      },\r\n      \"get_list_schema\": {\r\n        \"properties\": {\r\n          \"columns\": {\r\n            \"items\": {\r\n              \"type\": \"string\"\r\n            },\r\n            \"type\": \"array\"\r\n          },\r\n          \"filters\": {\r\n            \"items\": {\r\n              \"properties\": {\r\n                \"col\": {\r\n                  \"type\": \"string\"\r\n                },\r\n                \"opr\": {\r\n                  \"type\": \"string\"\r\n                },\r\n                \"value\": {\r\n                  \"anyOf\": [\r\n                    {\r\n                      \"type\": \"number\"\r\n                    },\r\n                    {\r\n                      \"type\": \"string\"\r\n                    },\r\n                    {\r\n                      \"type\": \"boolean\"\r\n                    }\r\n                  ]\r\n                }\r\n              },\r\n              \"type\": \"object\"\r\n            },\r\n            \"type\": \"array\"\r\n          },\r\n          \"keys\": {\r\n            \"items\": {\r\n              \"enum\": [\r\n                \"list_columns\",\r\n                \"order_columns\",\r\n                \"label_columns\",\r\n                \"description_columns\",\r\n                \"list_title\",\r\n                \"none\"\r\n              ],\r\n              \"type\": \"string\"\r\n            },\r\n            \"type\": \"array\"\r\n          },\r\n          \"order_column\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"order_direction\": {\r\n            \"enum\": [\r\n              \"asc\",\r\n              \"desc\"\r\n            ],\r\n            \"type\": \"string\"\r\n          },\r\n          \"page\": {\r\n            \"type\": \"integer\"\r\n          },\r\n          \"page_size\": {\r\n            \"type\": \"integer\"\r\n          }\r\n        },\r\n        \"type\": \"object\"\r\n      }\r\n    },\r\n    \"securitySchemes\": {\r\n      \"jwt\": {\r\n        \"bearerFormat\": \"JWT\",\r\n        \"scheme\": \"bearer\",\r\n        \"type\": \"http\"\r\n      },\r\n      \"jwt_refresh\": {\r\n        \"bearerFormat\": \"JWT\",\r\n        \"scheme\": \"bearer\",\r\n        \"type\": \"http\"\r\n      }\r\n    }\r\n  },\r\n  \"info\": {\r\n    \"description\": \"F.A.B. Example\",\r\n    \"title\": \"F.A.B. Example\",\r\n    \"version\": \"v1\"\r\n  },\r\n  \"openapi\": \"3.0.2\",\r\n  \"paths\": {\r\n    \"/group/\": {\r\n      \"get\": {\r\n        \"parameters\": [\r\n          {\r\n            \"in\": \"query\",\r\n            \"name\": \"q\",\r\n            \"schema\": {\r\n              \"properties\": {\r\n                \"columns\": {\r\n                  \"items\": {\r\n                    \"type\": \"string\"\r\n                  },\r\n                  \"type\": \"array\"\r\n                },\r\n                \"filters\": {\r\n                  \"items\": {\r\n                    \"properties\": {\r\n                      \"col\": {\r\n                        \"type\": \"string\"\r\n                      },\r\n                      \"opr\": {\r\n                        \"type\": \"string\"\r\n                      },\r\n                      \"value\": {\r\n                        \"anyOf\": [\r\n                          {\r\n                            \"type\": \"number\"\r\n                          },\r\n                          {\r\n                            \"type\": \"string\"\r\n                          },\r\n                          {\r\n                            \"type\": \"boolean\"\r\n                          }\r\n                        ]\r\n                      }\r\n                    },\r\n                    \"type\": \"object\"\r\n                  },\r\n                  \"type\": \"array\"\r\n                },\r\n                \"keys\": {\r\n                  \"items\": {\r\n                    \"enum\": [\r\n                      \"list_columns\",\r\n                      \"order_columns\",\r\n                      \"label_columns\",\r\n                      \"description_columns\",\r\n                      \"list_title\",\r\n                      \"none\"\r\n                    ],\r\n                    \"type\": \"string\"\r\n                  },\r\n                  \"type\": \"array\"\r\n                },\r\n                \"order_column\": {\r\n                  \"type\": \"string\"\r\n                },\r\n                \"order_direction\": {\r\n                  \"enum\": [\r\n                    \"asc\",\r\n                    \"desc\"\r\n                  ],\r\n                  \"type\": \"string\"\r\n                },\r\n                \"page\": {\r\n                  \"type\": \"integer\"\r\n                },\r\n                \"page_size\": {\r\n                  \"type\": \"integer\"\r\n                }\r\n              },\r\n              \"type\": \"object\"\r\n            }\r\n          }\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"description_columns\": {\r\n                      \"type\": \"object\"\r\n                    },\r\n                    \"ids\": {\r\n                      \"items\": {\r\n                        \"type\": \"string\"\r\n                      },\r\n                      \"type\": \"array\"\r\n                    },\r\n                    \"label_columns\": {\r\n                      \"type\": \"object\"\r\n                    },\r\n                    \"list_columns\": {\r\n                      \"items\": {\r\n                        \"type\": \"string\"\r\n                      },\r\n                      \"type\": \"array\"\r\n                    },\r\n                    \"list_title\": {\r\n                      \"type\": \"string\"\r\n                    },\r\n                    \"order_columns\": {\r\n                      \"items\": {\r\n                        \"type\": \"string\"\r\n                      },\r\n                      \"type\": \"array\"\r\n                    },\r\n                    \"result\": {\r\n                      \"items\": {\r\n                        \"properties\": {\r\n                          \"name\": {\r\n                            \"maxLength\": 50,\r\n                            \"type\": \"string\"\r\n                          }\r\n                        },\r\n                        \"required\": [\r\n                          \"name\"\r\n                        ],\r\n                        \"type\": \"object\"\r\n                      },\r\n                      \"type\": \"array\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Items from Model\"\r\n          },\r\n          \"400\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Bad request\"\r\n          },\r\n          \"401\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Unauthorized\"\r\n          },\r\n          \"422\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Could not process entity\"\r\n          },\r\n          \"500\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Fatal error\"\r\n          }\r\n        },\r\n        \"security\": [\r\n          {\r\n            \"jwt\": []\r\n          }\r\n        ],\r\n        \"tags\": [\r\n          \"GroupModelApi\"\r\n        ]\r\n      },\r\n      \"post\": {\r\n        \"requestBody\": {\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"properties\": {\r\n                  \"name\": {\r\n                    \"maxLength\": 50,\r\n                    \"type\": \"string\"\r\n                  }\r\n                },\r\n                \"required\": [\r\n                  \"name\"\r\n                ],\r\n                \"type\": \"object\"\r\n              }\r\n            }\r\n          },\r\n          \"description\": \"Model schema\",\r\n          \"required\": true\r\n        },\r\n        \"responses\": {\r\n          \"201\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"id\": {\r\n                      \"type\": \"string\"\r\n                    },\r\n                    \"result\": {\r\n                      \"properties\": {\r\n                        \"name\": {\r\n                          \"maxLength\": 50,\r\n                          \"type\": \"string\"\r\n                        }\r\n                      },\r\n                      \"required\": [\r\n                        \"name\"\r\n                      ],\r\n                      \"type\": \"object\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Item inserted\"\r\n          },\r\n          \"400\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Bad request\"\r\n          },\r\n          \"401\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Unauthorized\"\r\n          },\r\n          \"422\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Could not process entity\"\r\n          },\r\n          \"500\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Fatal error\"\r\n          }\r\n        },\r\n        \"security\": [\r\n          {\r\n            \"jwt\": []\r\n          }\r\n        ],\r\n        \"tags\": [\r\n          \"GroupModelApi\"\r\n        ]\r\n      }\r\n    },\r\n    \"/group/_info\": {\r\n      \"get\": {\r\n        \"parameters\": [\r\n          {\r\n            \"in\": \"query\",\r\n            \"name\": \"q\",\r\n            \"schema\": {\r\n              \"properties\": {\r\n                \"add_columns\": {\r\n                  \"additionalProperties\": {\r\n                    \"properties\": {\r\n                      \"page\": {\r\n                        \"type\": \"integer\"\r\n                      },\r\n                      \"page_size\": {\r\n                        \"type\": \"integer\"\r\n                      }\r\n                    },\r\n                    \"type\": \"object\"\r\n                  },\r\n                  \"type\": \"object\"\r\n                },\r\n                \"keys\": {\r\n                  \"items\": {\r\n                    \"enum\": [\r\n                      \"add_columns\",\r\n                      \"edit_columns\",\r\n                      \"filters\",\r\n                      \"permissions\",\r\n                      \"add_title\",\r\n                      \"edit_title\",\r\n                      \"none\"\r\n                    ],\r\n                    \"type\": \"string\"\r\n                  },\r\n                  \"type\": \"array\"\r\n                }\r\n              },\r\n              \"type\": \"object\"\r\n            }\r\n          }\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"add_columns\": {\r\n                      \"type\": \"object\"\r\n                    },\r\n                    \"edit_columns\": {\r\n                      \"type\": \"object\"\r\n                    },\r\n                    \"filters\": {\r\n                      \"type\": \"object\"\r\n                    },\r\n                    \"permissions\": {\r\n                      \"items\": {\r\n                        \"type\": \"string\"\r\n                      },\r\n                      \"type\": \"array\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Item from Model\"\r\n          },\r\n          \"400\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Bad request\"\r\n          },\r\n          \"401\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Unauthorized\"\r\n          },\r\n          \"422\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Could not process entity\"\r\n          },\r\n          \"500\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Fatal error\"\r\n          }\r\n        },\r\n        \"security\": [\r\n          {\r\n            \"jwt\": []\r\n          }\r\n        ],\r\n        \"tags\": [\r\n          \"GroupModelApi\"\r\n        ]\r\n      }\r\n    },\r\n    \"/group/{pk}\": {\r\n      \"delete\": {\r\n        \"parameters\": [\r\n          {\r\n            \"in\": \"path\",\r\n            \"name\": \"pk\",\r\n            \"required\": true,\r\n            \"schema\": {\r\n              \"type\": \"integer\"\r\n            }\r\n          }\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Item deleted\"\r\n          },\r\n          \"404\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Not found\"\r\n          },\r\n          \"422\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Could not process entity\"\r\n          },\r\n          \"500\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Fatal error\"\r\n          }\r\n        },\r\n        \"security\": [\r\n          {\r\n            \"jwt\": []\r\n          }\r\n        ],\r\n        \"tags\": [\r\n          \"GroupModelApi\"\r\n        ]\r\n      },\r\n      \"get\": {\r\n        \"parameters\": [\r\n          {\r\n            \"in\": \"path\",\r\n            \"name\": \"pk\",\r\n            \"required\": true,\r\n            \"schema\": {\r\n              \"type\": \"integer\"\r\n            }\r\n          },\r\n          {\r\n            \"in\": \"query\",\r\n            \"name\": \"q\",\r\n            \"schema\": {\r\n              \"properties\": {\r\n                \"columns\": {\r\n                  \"items\": {\r\n                    \"type\": \"string\"\r\n                  },\r\n                  \"type\": \"array\"\r\n                },\r\n                \"keys\": {\r\n                  \"items\": {\r\n                    \"enum\": [\r\n                      \"show_columns\",\r\n                      \"description_columns\",\r\n                      \"label_columns\",\r\n                      \"show_title\",\r\n                      \"none\"\r\n                    ],\r\n                    \"type\": \"string\"\r\n                  },\r\n                  \"type\": \"array\"\r\n                }\r\n              },\r\n              \"type\": \"object\"\r\n            }\r\n          }\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"description_columns\": {\r\n                      \"type\": \"object\"\r\n                    },\r\n                    \"id\": {\r\n                      \"type\": \"string\"\r\n                    },\r\n                    \"label_columns\": {\r\n                      \"type\": \"object\"\r\n                    },\r\n                    \"result\": {\r\n                      \"properties\": {\r\n                        \"name\": {\r\n                          \"maxLength\": 50,\r\n                          \"type\": \"string\"\r\n                        }\r\n                      },\r\n                      \"required\": [\r\n                        \"name\"\r\n                      ],\r\n                      \"type\": \"object\"\r\n                    },\r\n                    \"show_columns\": {\r\n                      \"items\": {\r\n                        \"type\": \"string\"\r\n                      },\r\n                      \"type\": \"array\"\r\n                    },\r\n                    \"show_title\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Item from Model\"\r\n          },\r\n          \"400\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Bad request\"\r\n          },\r\n          \"401\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Unauthorized\"\r\n          },\r\n          \"404\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Not found\"\r\n          },\r\n          \"422\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Could not process entity\"\r\n          },\r\n          \"500\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Fatal error\"\r\n          }\r\n        },\r\n        \"security\": [\r\n          {\r\n            \"jwt\": []\r\n          }\r\n        ],\r\n        \"tags\": [\r\n          \"GroupModelApi\"\r\n        ]\r\n      },\r\n      \"put\": {\r\n        \"parameters\": [\r\n          {\r\n            \"in\": \"path\",\r\n            \"name\": \"pk\",\r\n            \"required\": true,\r\n            \"schema\": {\r\n              \"type\": \"integer\"\r\n            }\r\n          }\r\n        ],\r\n        \"requestBody\": {\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"properties\": {\r\n                  \"name\": {\r\n                    \"maxLength\": 50,\r\n                    \"type\": \"string\"\r\n                  }\r\n                },\r\n                \"required\": [\r\n                  \"name\"\r\n                ],\r\n                \"type\": \"object\"\r\n              }\r\n            }\r\n          },\r\n          \"description\": \"Model schema\",\r\n          \"required\": true\r\n        },\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"result\": {\r\n                      \"properties\": {\r\n                        \"name\": {\r\n                          \"maxLength\": 50,\r\n                          \"type\": \"string\"\r\n                        }\r\n                      },\r\n                      \"required\": [\r\n                        \"name\"\r\n                      ],\r\n                      \"type\": \"object\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Item changed\"\r\n          },\r\n          \"400\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Bad request\"\r\n          },\r\n          \"401\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Unauthorized\"\r\n          },\r\n          \"404\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Not found\"\r\n          },\r\n          \"422\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Could not process entity\"\r\n          },\r\n          \"500\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Fatal error\"\r\n          }\r\n        },\r\n        \"security\": [\r\n          {\r\n            \"jwt\": []\r\n          }\r\n        ],\r\n        \"tags\": [\r\n          \"GroupModelApi\"\r\n        ]\r\n      }\r\n    },\r\n    \"/openapi/{version}/_openapi\": {\r\n      \"get\": {\r\n        \"parameters\": [\r\n          {\r\n            \"in\": \"path\",\r\n            \"name\": \"version\",\r\n            \"required\": true,\r\n            \"schema\": {\r\n              \"type\": \"string\"\r\n            }\r\n          }\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Item from Model\"\r\n          },\r\n          \"404\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Not found\"\r\n          },\r\n          \"500\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Fatal error\"\r\n          }\r\n        },\r\n        \"security\": [\r\n          {\r\n            \"jwt\": []\r\n          }\r\n        ],\r\n        \"tags\": [\r\n          \"OpenApi\"\r\n        ]\r\n      }\r\n    },\r\n    \"/security/login\": {\r\n      \"post\": {\r\n        \"requestBody\": {\r\n          \"content\": {\r\n            \"application/json\": {\r\n              \"schema\": {\r\n                \"properties\": {\r\n                  \"password\": {\r\n                    \"type\": \"string\"\r\n                  },\r\n                  \"provider\": {\r\n                    \"enum\": [\r\n                      \"db\",\r\n                      \"ldap\"\r\n                    ],\r\n                    \"type\": \"string\"\r\n                  },\r\n                  \"refresh\": {\r\n                    \"type\": \"boolean\"\r\n                  },\r\n                  \"username\": {\r\n                    \"type\": \"string\"\r\n                  }\r\n                },\r\n                \"type\": \"object\"\r\n              }\r\n            }\r\n          },\r\n          \"required\": true\r\n        },\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"access_token\": {\r\n                      \"type\": \"string\"\r\n                    },\r\n                    \"refresh_token\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Authentication Successful\"\r\n          },\r\n          \"400\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Bad request\"\r\n          },\r\n          \"401\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Unauthorized\"\r\n          },\r\n          \"500\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Fatal error\"\r\n          }\r\n        },\r\n        \"tags\": [\r\n          \"SecurityApi\"\r\n        ]\r\n      }\r\n    },\r\n    \"/security/refresh\": {\r\n      \"post\": {\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"refresh_token\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Refresh Successful\"\r\n          },\r\n          \"401\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Unauthorized\"\r\n          },\r\n          \"500\": {\r\n            \"content\": {\r\n              \"application/json\": {\r\n                \"schema\": {\r\n                  \"properties\": {\r\n                    \"message\": {\r\n                      \"type\": \"string\"\r\n                    }\r\n                  },\r\n                  \"type\": \"object\"\r\n                }\r\n              }\r\n            },\r\n            \"description\": \"Fatal error\"\r\n          }\r\n        },\r\n        \"security\": [\r\n          {\r\n            \"jwt_refresh\": []\r\n          }\r\n        ],\r\n        \"tags\": [\r\n          \"SecurityApi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"servers\": [\r\n    {\r\n      \"url\": \"/api/v1\"\r\n    }\r\n  ]\r\n}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/463", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/463/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/463/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/463/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/463", "id": 459635000, "node_id": "MDU6SXNzdWU0NTk2MzUwMDA=", "number": 463, "title": "parameter name and in required for referenced parameter", "user": {"login": "runtothesun", "id": 52045847, "node_id": "MDQ6VXNlcjUyMDQ1ODQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/52045847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/runtothesun", "html_url": "https://github.com/runtothesun", "followers_url": "https://api.github.com/users/runtothesun/followers", "following_url": "https://api.github.com/users/runtothesun/following{/other_user}", "gists_url": "https://api.github.com/users/runtothesun/gists{/gist_id}", "starred_url": "https://api.github.com/users/runtothesun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/runtothesun/subscriptions", "organizations_url": "https://api.github.com/users/runtothesun/orgs", "repos_url": "https://api.github.com/users/runtothesun/repos", "events_url": "https://api.github.com/users/runtothesun/events{/privacy}", "received_events_url": "https://api.github.com/users/runtothesun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-06-24T00:17:42Z", "updated_at": "2019-06-26T15:33:52Z", "closed_at": "2019-06-24T16:28:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I have just updated to version 2.0.0 of apispec and I've seen a whole load of new error messages `'Missing keys ['name', 'in'] for parameter'` the check I think was added in PR #455. In my code I create a top level parameter using:\r\n\r\n`apispec.components.parameter('ParameterSchemaName','path',{\r\n 'name': 'parameterName',\r\n 'schema': {\r\n   'type': 'string',\r\n },\r\n 'description': '...',\r\n 'required': True\r\n})`\r\n\r\nand then reference it in the doc string:\r\n\r\n```\r\nparameters:\r\n-   $ref: '#/components/parameters/ParameterSchemaName\r\n```\r\n\r\nNow I need to add 'in' and 'name' into the docstring for this parameter but I have already specified the location and name in the top level definition. I see that there has been recent activity in this area so apologies if this is something that is in hand - I just wanted to raise it in case it was overlooked.\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/458", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/458/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/458/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/458", "id": 457338381, "node_id": "MDU6SXNzdWU0NTczMzgzODE=", "number": 458, "title": "Security scheme problem token not included", "user": {"login": "dpgaspar", "id": 4025227, "node_id": "MDQ6VXNlcjQwMjUyMjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4025227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpgaspar", "html_url": "https://github.com/dpgaspar", "followers_url": "https://api.github.com/users/dpgaspar/followers", "following_url": "https://api.github.com/users/dpgaspar/following{/other_user}", "gists_url": "https://api.github.com/users/dpgaspar/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpgaspar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpgaspar/subscriptions", "organizations_url": "https://api.github.com/users/dpgaspar/orgs", "repos_url": "https://api.github.com/users/dpgaspar/repos", "events_url": "https://api.github.com/users/dpgaspar/events{/privacy}", "received_events_url": "https://api.github.com/users/dpgaspar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-06-18T08:43:42Z", "updated_at": "2019-07-13T11:07:54Z", "closed_at": "2019-07-13T11:07:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nOn flask-appbuilder implementation, the swagger-ui is not including the configured JWT token on authorize. seems like that a normal OpenAPI 3.0.X implementation must include the security scheme to use, globally or by path:\r\n\r\n```\r\nopenapi: \"3.0.0\"\r\ncomponents:\r\n  securitySchemes:\r\n    bearerAuth:\r\n      type: http\r\n      scheme: bearer\r\n      bearerFormat: JWT\r\nsecurity:\r\n- bearerAuth: []\r\npaths:\r\n  /:\r\n    get:\r\n      description: my operation\r\n      responses: \r\n        200:\r\n          description: all is well\r\n```\r\n\r\nhttps://github.com/swagger-api/swagger-ui/issues/3860\r\n\r\nOn FAB implementation I'm adding the security scheme like this, following apispec documentation:\r\n```\r\n        jwt_scheme = {\"type\": \"http\", \"scheme\": \"bearer\", \"bearerFormat\": \"JWT\"}\r\n        api_spec.components.security_scheme(\"jwt\", jwt_scheme)\r\n```\r\n\r\nCan you please help, on how to add a global and/or local security directive?\r\n(source issue: https://github.com/dpgaspar/Flask-AppBuilder/issues/1035)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/453", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/453/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/453/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/453", "id": 454308976, "node_id": "MDU6SXNzdWU0NTQzMDg5NzY=", "number": 453, "title": "Allow to pass parameters argument to path", "user": {"login": "karec", "id": 2851415, "node_id": "MDQ6VXNlcjI4NTE0MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2851415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karec", "html_url": "https://github.com/karec", "followers_url": "https://api.github.com/users/karec/followers", "following_url": "https://api.github.com/users/karec/following{/other_user}", "gists_url": "https://api.github.com/users/karec/gists{/gist_id}", "starred_url": "https://api.github.com/users/karec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karec/subscriptions", "organizations_url": "https://api.github.com/users/karec/orgs", "repos_url": "https://api.github.com/users/karec/repos", "events_url": "https://api.github.com/users/karec/events{/privacy}", "received_events_url": "https://api.github.com/users/karec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-10T18:35:32Z", "updated_at": "2019-06-20T10:41:20Z", "closed_at": "2019-06-18T20:36:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The OpenAPI specifications allow to set parameters for a path item object https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#path-item-object to make them available for all operations.\r\n\r\nAFAIK, [`APISpec.path()`](https://github.com/marshmallow-code/apispec/blob/dev/src/apispec/core.py#L279) method doesn't take a `parameters` argument, resulting in duplicating documentation on every operation of the path for REST APIs.\r\n\r\nIf I've not missed a something here, I would be happy to work on a PR to add that feature\r\n\r\nEDIT: details and spelling", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/441", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/441/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/441/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/441", "id": 438534000, "node_id": "MDU6SXNzdWU0Mzg1MzQwMDA=", "number": 441, "title": "MarshmallowPlugin does not follow $ref when parsing requestBody", "user": {"login": "izieg-lo3", "id": 43968759, "node_id": "MDQ6VXNlcjQzOTY4NzU5", "avatar_url": "https://avatars3.githubusercontent.com/u/43968759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izieg-lo3", "html_url": "https://github.com/izieg-lo3", "followers_url": "https://api.github.com/users/izieg-lo3/followers", "following_url": "https://api.github.com/users/izieg-lo3/following{/other_user}", "gists_url": "https://api.github.com/users/izieg-lo3/gists{/gist_id}", "starred_url": "https://api.github.com/users/izieg-lo3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izieg-lo3/subscriptions", "organizations_url": "https://api.github.com/users/izieg-lo3/orgs", "repos_url": "https://api.github.com/users/izieg-lo3/repos", "events_url": "https://api.github.com/users/izieg-lo3/events{/privacy}", "received_events_url": "https://api.github.com/users/izieg-lo3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187047, "node_id": "MDU6TGFiZWwxMzkxODcwNDc=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 139187050, "node_id": "MDU6TGFiZWwxMzkxODcwNTA=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-29T22:28:50Z", "updated_at": "2019-06-26T08:13:47Z", "closed_at": "2019-06-26T08:13:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Suppose my spec contains the following for a route:\r\n```yaml\r\npost:\r\n    requestBody:\r\n        $ref: '#/components/requestBodies/MyRequestBody'\r\n```\r\nThe requestBody being referenced here is manually provided to `APISpec(components=...)` in the components dict (not a marshmallow schema)\r\n\r\nWithout the MarshmallowPlugin enabled, this works correctly with `apispec` and produces a valid OpenAPI doc.\r\n\r\nAfter enabling the MarshmallowPlugin, I get this error:\r\n```\r\nFile \"/usr/lib/python3.6/site-packages/apispec/ext/marshmallow/__init__.py\", line 206, in operation_helper\r\n     self.resolve_schema_in_request_body(operation[\"requestBody\"])\r\nFile \"/usr/lib/python3.6/site-packages/apispec/ext/marshmallow/__init__.py\", line 104, in resolve_schema_in_request_body\r\nKeyError: 'content'\r\n```\r\n\r\nIs this a bug? Is there another way I can reference my requestBody?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/437", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/437/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/437/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/437/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/437", "id": 437194626, "node_id": "MDU6SXNzdWU0MzcxOTQ2MjY=", "number": 437, "title": "Update Custom Fields docs for #435", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1335468265, "node_id": "MDU6TGFiZWwxMzM1NDY4MjY1", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/documentation", "name": "documentation", "color": "fce580", "default": true, "description": ""}, {"id": 139187050, "node_id": "MDU6TGFiZWwxMzkxODcwNTA=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-25T13:18:18Z", "updated_at": "2019-05-02T07:28:08Z", "closed_at": "2019-05-02T07:28:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": " https://github.com/marshmallow-code/apispec/pull/435#issuecomment-486654039", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/433", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/433/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/433/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/433/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/433", "id": 433780109, "node_id": "MDU6SXNzdWU0MzM3ODAxMDk=", "number": 433, "title": "Subclassed Lists marked as string type", "user": {"login": "andrjohn", "id": 1825117, "node_id": "MDQ6VXNlcjE4MjUxMTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1825117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrjohn", "html_url": "https://github.com/andrjohn", "followers_url": "https://api.github.com/users/andrjohn/followers", "following_url": "https://api.github.com/users/andrjohn/following{/other_user}", "gists_url": "https://api.github.com/users/andrjohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrjohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrjohn/subscriptions", "organizations_url": "https://api.github.com/users/andrjohn/orgs", "repos_url": "https://api.github.com/users/andrjohn/repos", "events_url": "https://api.github.com/users/andrjohn/events{/privacy}", "received_events_url": "https://api.github.com/users/andrjohn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-16T13:28:06Z", "updated_at": "2019-04-24T23:28:08Z", "closed_at": "2019-04-24T23:28:08Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I am using a tool to generate a Marshmallow schema that I then present as a RESTful API. In order to override some of the methods of marshmallow.fields.List, the generated schema can have generated classes that subclass List. The resulting APISpec is _almost_ perfect because openapi.py mostly uses isinstance to see if the field is a list. For example:\r\n\r\n        is_array = isinstance(\r\n            field, (marshmallow.fields.Nested, marshmallow.fields.List)\r\n        )\r\n\r\nHowever, when working out the field type the mapping is looked up using a concrete type:\r\n\r\n        self.field_mapping.get(type(field), (\"string\", None))\r\n\r\nIt isn't straightforward for me to add the new types using map_to_openapi_type because of the generated nature of my marshmallow and the way the presentation layer is kept separate. However, instead of falling back to `(\"string\", None)`, we can either: fall back to `(\"array\", None)` for instances of a List (and Nested?) either by explicitly checking for those types in `field2type_and_format`; or walking through the field_mapping (in order), checking for instances of each type.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/432", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/432/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/432/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/432/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/432", "id": 432401593, "node_id": "MDU6SXNzdWU0MzI0MDE1OTM=", "number": 432, "title": "fields.Dict assumes keys are strings", "user": {"login": "AbdealiJK", "id": 2200743, "node_id": "MDQ6VXNlcjIyMDA3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2200743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AbdealiJK", "html_url": "https://github.com/AbdealiJK", "followers_url": "https://api.github.com/users/AbdealiJK/followers", "following_url": "https://api.github.com/users/AbdealiJK/following{/other_user}", "gists_url": "https://api.github.com/users/AbdealiJK/gists{/gist_id}", "starred_url": "https://api.github.com/users/AbdealiJK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AbdealiJK/subscriptions", "organizations_url": "https://api.github.com/users/AbdealiJK/orgs", "repos_url": "https://api.github.com/users/AbdealiJK/repos", "events_url": "https://api.github.com/users/AbdealiJK/events{/privacy}", "received_events_url": "https://api.github.com/users/AbdealiJK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-12T06:06:55Z", "updated_at": "2019-04-12T09:13:40Z", "closed_at": "2019-04-12T09:13:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/marshmallow-code/apispec/blob/dev/src/apispec/ext/marshmallow/openapi.py#L422\r\n\r\nI see here and also discussed https://github.com/marshmallow-code/apispec/issues/201 that keys are ignored.\r\nI have a scenario where my keys are integers. I have a input which is like `{1: 2, 3: 1, 4: 3}` which takes in something like the linkages between 2 of my entities\r\n\r\nWhile I could change the schema, this seems to be a limitation of the library and thought I'd mention. The `keys` can be string or integers and it would be good to allow integers\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/429", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/429/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/429/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/429", "id": 430976571, "node_id": "MDU6SXNzdWU0MzA5NzY1NzE=", "number": 429, "title": "Support for Related and RelatedList", "user": {"login": "dpgaspar", "id": 4025227, "node_id": "MDQ6VXNlcjQwMjUyMjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4025227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpgaspar", "html_url": "https://github.com/dpgaspar", "followers_url": "https://api.github.com/users/dpgaspar/followers", "following_url": "https://api.github.com/users/dpgaspar/following{/other_user}", "gists_url": "https://api.github.com/users/dpgaspar/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpgaspar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpgaspar/subscriptions", "organizations_url": "https://api.github.com/users/dpgaspar/orgs", "repos_url": "https://api.github.com/users/dpgaspar/repos", "events_url": "https://api.github.com/users/dpgaspar/events{/privacy}", "received_events_url": "https://api.github.com/users/dpgaspar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187052, "node_id": "MDU6TGFiZWwxMzkxODcwNTI=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-04-09T13:45:04Z", "updated_at": "2019-04-23T14:28:25Z", "closed_at": "2019-04-23T14:28:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nCurrently I'm using apispec to create components/schemas based on Marshmallow Schemas.\r\nSome of my Schemas are generated by marshmallow-sqlalchemy so they are ModelSchemas.\r\nThe problem arises when I have Related or RelatedList \"fields\" this type identified on OpenApi Schema is \"string\". Can you give me some advise, or improve this?\r\n\r\nThank you!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/426", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/426/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/426/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/426", "id": 430536444, "node_id": "MDU6SXNzdWU0MzA1MzY0NDQ=", "number": 426, "title": "Stringification of response status codes leads to invalid swagger", "user": {"login": "DStape", "id": 7023894, "node_id": "MDQ6VXNlcjcwMjM4OTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7023894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DStape", "html_url": "https://github.com/DStape", "followers_url": "https://api.github.com/users/DStape/followers", "following_url": "https://api.github.com/users/DStape/following{/other_user}", "gists_url": "https://api.github.com/users/DStape/gists{/gist_id}", "starred_url": "https://api.github.com/users/DStape/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DStape/subscriptions", "organizations_url": "https://api.github.com/users/DStape/orgs", "repos_url": "https://api.github.com/users/DStape/repos", "events_url": "https://api.github.com/users/DStape/events{/privacy}", "received_events_url": "https://api.github.com/users/DStape/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-08T16:09:04Z", "updated_at": "2019-04-30T02:00:25Z", "closed_at": "2019-04-30T02:00:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Recent merge of https://github.com/marshmallow-code/apispec/pull/424 results in our swagger documentation being generated with the following response definitions:\r\n\r\n```\r\n\"responses\": {\r\n          \"HTTPStatus.OK\": {\r\n```\r\n\r\nPreviously:\r\n```\r\n\"responses\": {\r\n          \"200\": {\r\n```\r\ni.e. usage of https://docs.python.org/3/library/http.html#http-status-codes results in the generation of invalid swagger.\r\n\r\nPotential fix (```get_ref()``` in ```/src/apispec/core.py```):\r\n```\r\nfor code, response in iteritems(operation[\"responses\"]):\r\n    try:\r\n        status_code = int(code)\r\n    except TypeError, ValueError:\r\n        # log error and skip\r\n     responses[str(status_code)] = get_ref(\"response\", response, openapi_major_version)\r\n```\r\n\r\nI'm happy to open a PR for this, but would appreciate any feedback on the approach laid out above (cast the code to an int before casting to str).\r\n\r\nThanks,\r\nDavid", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/422", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/422/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/422/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/422", "id": 429539613, "node_id": "MDU6SXNzdWU0Mjk1Mzk2MTM=", "number": 422, "title": "Consider coercing response codes to strings", "user": {"login": "zachmullen", "id": 555959, "node_id": "MDQ6VXNlcjU1NTk1OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/555959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zachmullen", "html_url": "https://github.com/zachmullen", "followers_url": "https://api.github.com/users/zachmullen/followers", "following_url": "https://api.github.com/users/zachmullen/following{/other_user}", "gists_url": "https://api.github.com/users/zachmullen/gists{/gist_id}", "starred_url": "https://api.github.com/users/zachmullen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zachmullen/subscriptions", "organizations_url": "https://api.github.com/users/zachmullen/orgs", "repos_url": "https://api.github.com/users/zachmullen/repos", "events_url": "https://api.github.com/users/zachmullen/events{/privacy}", "received_events_url": "https://api.github.com/users/zachmullen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 357224733, "node_id": "MDU6TGFiZWwzNTcyMjQ3MzM=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/ready%20to%20claim", "name": "ready to claim", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-05T00:44:34Z", "updated_at": "2019-04-07T14:46:07Z", "closed_at": "2019-04-07T14:45:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "The OpenAPI specification [allows responses of the form 2XX, 4XX, etc](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#patterned-fields-1). Using this library, it's possible in a docstring to write something like this:\r\n\r\n\r\n ```yaml\r\nresponses:\r\n    200:\r\n        content:\r\n            application/json:\r\n                schema: GoodResponseSchema\r\n    4XX:\r\n        content:\r\n            application/json:\r\n                schema: RequestErrorSchema\r\n```\r\n\r\nThis causes the following error:\r\n\r\n```\r\nFile \"/Users/zach/.pyenv/versions/3.6.5/lib/python3.6/json/encoder.py\", line 353, in _iterencode_dict\r\n    items = sorted(dct.items(), key=lambda kv: kv[0])\r\nTypeError: '<' not supported between instances of 'str' and 'int'\r\n```\r\n\r\nWhich happens because the `200` key is stored as an `int`, and the `4XX` key is stored as a string. A preprocessing step to make them all strings would fix that problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/402", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/402/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/402/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/402", "id": 418460480, "node_id": "MDU6SXNzdWU0MTg0NjA0ODA=", "number": 402, "title": "Adding schema with an existing name should be allowed if the schemas are identical", "user": {"login": "maxalbert", "id": 2692805, "node_id": "MDQ6VXNlcjI2OTI4MDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2692805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxalbert", "html_url": "https://github.com/maxalbert", "followers_url": "https://api.github.com/users/maxalbert/followers", "following_url": "https://api.github.com/users/maxalbert/following{/other_user}", "gists_url": "https://api.github.com/users/maxalbert/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxalbert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxalbert/subscriptions", "organizations_url": "https://api.github.com/users/maxalbert/orgs", "repos_url": "https://api.github.com/users/maxalbert/repos", "events_url": "https://api.github.com/users/maxalbert/events{/privacy}", "received_events_url": "https://api.github.com/users/maxalbert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-07T18:51:00Z", "updated_at": "2019-03-12T09:42:03Z", "closed_at": "2019-03-09T22:32:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently adding the same (identical) schema with the same name raises a `DuplicateComponentNameError`.\r\n\r\nNormally this makes sense, but it causes issues in combination with [apispec_oneofschema](https://github.com/timakro/apispec-oneofschema) when trying to register two `OneOfSchema` instances which multiplex the same underlying schema.\r\n\r\nHere is a minimal example (where `SchemaA` is used in both `SchemaAorB` and `SchemaAorC`).\r\n```python\r\nfrom apispec import APISpec\r\nfrom apispec_oneofschema import MarshmallowPlugin \r\nfrom marshmallow import Schema, fields\r\nfrom marshmallow_oneofschema import OneOfSchema\r\n\r\nclass SchemaA(Schema):\r\n    id = fields.Integer()\r\n\r\nclass SchemaB(Schema):\r\n    id = fields.Integer()\r\n\r\nclass SchemaC(Schema):\r\n    id = fields.Integer()\r\n\r\nclass SchemaAorB(OneOfSchema):\r\n    type_schemas = {\r\n        \"ClassA\": SchemaA,\r\n        \"ClassB\": SchemaB,\r\n    }\r\n\r\nclass SchemaAorC(OneOfSchema):\r\n    type_schemas = {\r\n        \"ClassA\": SchemaA,\r\n        \"ClassC\": SchemaC,\r\n    }\r\n\r\nspec = APISpec( \r\n    title=\"MyAPI\",\r\n    version=\"1.0.0\",\r\n    openapi_version=\"3.0.2\", \r\n    plugins=[MarshmallowPlugin()],\r\n) \r\n\r\nspec.components.schema(\"SchemaAorB\", schema=SchemaAorB)\r\n\r\n# The following line raises DuplicateComponentNameError because\r\n# SchemaA has already been registered as part of SchemaAorB.\r\nspec.components.schema(\"SchemaAorC\", schema=SchemaAorC)\r\n```\r\nError:\r\n```\r\n~/code/apispec/apispec/core.py in schema(self, name, component, **kwargs)\r\n    132         if name in self._schemas:\r\n    133             raise DuplicateComponentNameError(\r\n--> 134                 'Another schema with name \"{}\" is already registered.'.format(name)\r\n    135             )\r\n    136         component = component or {}\r\n\r\nDuplicateComponentNameError: Another schema with name \"SchemaA\" is already registered.\r\n```\r\n\r\nIt would be great if `apispec` did not raise an error in this situation, provided that the schema to be added is identical to the existing one with the same name. It should of course continue to raise an error if the schemas are actually different.\r\n\r\nI'll submit a PR with a suggested fix soon. (I hope I'm not missing any reason why it is a bad idea to allow this.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/401", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/401/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/401/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/401", "id": 417314344, "node_id": "MDU6SXNzdWU0MTczMTQzNDQ=", "number": 401, "title": "Adding useful definitions", "user": {"login": "nicholasamorim", "id": 2200260, "node_id": "MDQ6VXNlcjIyMDAyNjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/2200260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicholasamorim", "html_url": "https://github.com/nicholasamorim", "followers_url": "https://api.github.com/users/nicholasamorim/followers", "following_url": "https://api.github.com/users/nicholasamorim/following{/other_user}", "gists_url": "https://api.github.com/users/nicholasamorim/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicholasamorim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicholasamorim/subscriptions", "organizations_url": "https://api.github.com/users/nicholasamorim/orgs", "repos_url": "https://api.github.com/users/nicholasamorim/repos", "events_url": "https://api.github.com/users/nicholasamorim/events{/privacy}", "received_events_url": "https://api.github.com/users/nicholasamorim/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187052, "node_id": "MDU6TGFiZWwxMzkxODcwNTI=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-05T14:04:04Z", "updated_at": "2019-03-05T14:42:27Z", "closed_at": "2019-03-05T14:42:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, thanks for this great project.\r\n\r\nMaybe I'm missing something but is there any way we can document individual fields? I'm using APISpec couple with Marshmallow and while the the response objects are rendered just fine, I'm wondering if there's any way of adding meaningful descriptions to each field.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/400", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/400/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/400/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/400/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/400", "id": 416708763, "node_id": "MDU6SXNzdWU0MTY3MDg3NjM=", "number": 400, "title": "Congrats for 1.0.0 !", "user": {"login": "buxx", "id": 1104637, "node_id": "MDQ6VXNlcjExMDQ2Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1104637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buxx", "html_url": "https://github.com/buxx", "followers_url": "https://api.github.com/users/buxx/followers", "following_url": "https://api.github.com/users/buxx/following{/other_user}", "gists_url": "https://api.github.com/users/buxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/buxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buxx/subscriptions", "organizations_url": "https://api.github.com/users/buxx/orgs", "repos_url": "https://api.github.com/users/buxx/repos", "events_url": "https://api.github.com/users/buxx/events{/privacy}", "received_events_url": "https://api.github.com/users/buxx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-04T09:32:57Z", "updated_at": "2019-03-04T10:17:40Z", "closed_at": "2019-03-04T10:17:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nThis issue is just a congratulation for your 1.0.0 stable release and your 1'000 commits \r\n\r\n# \ud83c\udf89\r\n\r\nThank's for your work (you can close this issue off course ;) )\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/398", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/398/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/398/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/398/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/398", "id": 414624463, "node_id": "MDU6SXNzdWU0MTQ2MjQ0NjM=", "number": 398, "title": "pyyaml dependency not working", "user": {"login": "timakro", "id": 8438790, "node_id": "MDQ6VXNlcjg0Mzg3OTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8438790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timakro", "html_url": "https://github.com/timakro", "followers_url": "https://api.github.com/users/timakro/followers", "following_url": "https://api.github.com/users/timakro/following{/other_user}", "gists_url": "https://api.github.com/users/timakro/gists{/gist_id}", "starred_url": "https://api.github.com/users/timakro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timakro/subscriptions", "organizations_url": "https://api.github.com/users/timakro/orgs", "repos_url": "https://api.github.com/users/timakro/repos", "events_url": "https://api.github.com/users/timakro/events{/privacy}", "received_events_url": "https://api.github.com/users/timakro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-26T13:58:17Z", "updated_at": "2019-02-26T14:00:34Z", "closed_at": "2019-02-26T14:00:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "When starting a fresh virtualenv and installing `apispec`, `pyaml` is not installed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/395", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/395/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/395/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/395/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/395", "id": 413181905, "node_id": "MDU6SXNzdWU0MTMxODE5MDU=", "number": 395, "title": "Representing openapi's \"Any Type\"", "user": {"login": "kaya-zekioglu", "id": 26235851, "node_id": "MDQ6VXNlcjI2MjM1ODUx", "avatar_url": "https://avatars0.githubusercontent.com/u/26235851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaya-zekioglu", "html_url": "https://github.com/kaya-zekioglu", "followers_url": "https://api.github.com/users/kaya-zekioglu/followers", "following_url": "https://api.github.com/users/kaya-zekioglu/following{/other_user}", "gists_url": "https://api.github.com/users/kaya-zekioglu/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaya-zekioglu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaya-zekioglu/subscriptions", "organizations_url": "https://api.github.com/users/kaya-zekioglu/orgs", "repos_url": "https://api.github.com/users/kaya-zekioglu/repos", "events_url": "https://api.github.com/users/kaya-zekioglu/events{/privacy}", "received_events_url": "https://api.github.com/users/kaya-zekioglu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187047, "node_id": "MDU6TGFiZWwxMzkxODcwNDc=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-22T00:05:34Z", "updated_at": "2019-09-04T08:29:27Z", "closed_at": "2019-09-04T08:29:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use `marshmallow.fields.Raw` to represent a \"arbitrary json\" field. Currently I do not see a way to represent a field in marshmallow that will produce a openapi property that is empty when passed through apispec.\r\n\r\nThe code in `apispec.marshmallow.openapi.OpenAPIConverter.field2type_and_format` (see https://github.com/marshmallow-code/apispec/blob/dev/apispec/ext/marshmallow/openapi.py#L159-L173) unconditionally sets the key `type` in the property object. However it seems that it is legal in openapi to have an empty schema (without the `type` key) which permits any type (see the \"Any Type\" section at the bottom of https://swagger.io/docs/specification/data-models/data-types/)\r\n\r\nPlease advise if this is possible with the current codebase or if I will need to implement a custom solution. Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/388", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/388/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/388/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/388/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/388", "id": 408729165, "node_id": "MDU6SXNzdWU0MDg3MjkxNjU=", "number": 388, "title": "Error importing YAMLDumper", "user": {"login": "ChrisTerBeke", "id": 1134120, "node_id": "MDQ6VXNlcjExMzQxMjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1134120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisTerBeke", "html_url": "https://github.com/ChrisTerBeke", "followers_url": "https://api.github.com/users/ChrisTerBeke/followers", "following_url": "https://api.github.com/users/ChrisTerBeke/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisTerBeke/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisTerBeke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisTerBeke/subscriptions", "organizations_url": "https://api.github.com/users/ChrisTerBeke/orgs", "repos_url": "https://api.github.com/users/ChrisTerBeke/repos", "events_url": "https://api.github.com/users/ChrisTerBeke/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisTerBeke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-11T11:03:17Z", "updated_at": "2019-02-11T13:54:45Z", "closed_at": "2019-02-11T11:12:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "As of last week, we are suddenly getting this line:\r\n\r\n```\r\nImportError: cannot import name 'YAMLDumper' from 'apispec.core' (/usr/local/lib/python3.7/site-packages/apispec/core.py)\r\n```\r\n\r\nSeems like YAMLDumper was moved to another module which is a breaking change, but the version increase was not a major one?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/383", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/383/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/383/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/383/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/383", "id": 406537791, "node_id": "MDU6SXNzdWU0MDY1Mzc3OTE=", "number": 383, "title": "Docstring-only schemas incorrectly referenced as arrays?", "user": {"login": "whoiswes", "id": 12676280, "node_id": "MDQ6VXNlcjEyNjc2Mjgw", "avatar_url": "https://avatars3.githubusercontent.com/u/12676280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whoiswes", "html_url": "https://github.com/whoiswes", "followers_url": "https://api.github.com/users/whoiswes/followers", "following_url": "https://api.github.com/users/whoiswes/following{/other_user}", "gists_url": "https://api.github.com/users/whoiswes/gists{/gist_id}", "starred_url": "https://api.github.com/users/whoiswes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whoiswes/subscriptions", "organizations_url": "https://api.github.com/users/whoiswes/orgs", "repos_url": "https://api.github.com/users/whoiswes/repos", "events_url": "https://api.github.com/users/whoiswes/events{/privacy}", "received_events_url": "https://api.github.com/users/whoiswes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187047, "node_id": "MDU6TGFiZWwxMzkxODcwNDc=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 4, "created_at": "2019-02-04T21:57:18Z", "updated_at": "2019-02-08T13:38:24Z", "closed_at": "2019-02-07T23:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tested with Marshmallow 3.0.0rc3 and APISpec 1.0.0rc1.\r\n\r\nTook a copy of the APISpec quickstart code and removed the defintions, so that schemas were only being referenced from the docstrings.  I'm seeing that the nested schema is being picked up as an array (incorrect) but then is also referenced as an array from the parent schema (correct).\r\n\r\nExample (as short as I can make it, ignoring imports):\r\n\r\n```py\r\nspec = APISpec(\r\n    title=\"Swagger Petstore\",\r\n    version=\"1.0.0\",\r\n    openapi_version=\"3.0.2\",\r\n    plugins=[FlaskPlugin(), MarshmallowPlugin()],\r\n)\r\n\r\napp = Flask(__name__)\r\n\r\nclass CategorySchema(Schema):\r\n    id = fields.Int()\r\n    name = fields.Str(required=True)\r\n\r\nclass PetSchema(Schema):\r\n    category = fields.Nested(CategorySchema, many=True)\r\n    name = fields.Str()\r\n\r\n@app.route(\"/pet\")\r\ndef random_pet():\r\n    \"\"\"\r\n    ---\r\n    get:\r\n      responses:\r\n        200:\r\n          content:\r\n            application/json:\r\n              schema: PetSchema\r\n    \"\"\"\r\n    return jsonify({'foo':'bar'})\r\n\r\n@app.route(\"/category\")\r\ndef random_category():\r\n    \"\"\"\r\n    ---\r\n    get:\r\n      responses:\r\n        200:\r\n          content:\r\n            application/json:\r\n              schema: CategorySchema\r\n    \"\"\"\r\n    return jsonify({'foo':'bar'})\r\n\r\nwith app.test_request_context():\r\n    spec.path(view=random_pet)\r\n    spec.path(view=random_category)\r\n    print(spec.to_dict()\r\n```\r\nHere's what gets output (note that both the nested reference and the child are both array types):\r\n\r\n```py\r\n\"schemas\": {                                                  \r\n  \"Category\": {                                               \r\n    \"type\": \"array\",                                          \r\n    \"items\": {                                                \r\n      \"type\": \"object\",                                       \r\n      \"properties\": {                                         \r\n        \"id\": {\"type\": \"integer\", \"format\": \"int32\"}                                                     \r\n      }                                                       \r\n    }                                                         \r\n  },                                                          \r\n  \"Pet\": {                                                    \r\n    \"type\": \"object\",                                         \r\n    \"properties\": {                                           \r\n      \"category\": {                                           \r\n        \"type\": \"array\",                                      \r\n        \"items\": {                                            \r\n          \"$ref\": \"#/components/schemas/Category\"             \r\n        }                                                     \r\n      }                                                       \r\n    }                                                         \r\n  }                                                           \r\n} \r\n```\r\n\r\nI think the issue stems from fields2jsonschema method [here](https://github.com/marshmallow-code/apispec/blob/dev/apispec/ext/marshmallow/openapi.py#L647-L648) where the schema attributes are checked for many=True.  I would expect the schemas themselves would always be referenced as singletons, then references to those schemas would be checked for many.  I certainly might be missing something though, but at least in my lab just commenting out those 2 lines fixed everything.\r\n\r\nAlternately, the schemas could be registered as they are in the example, but we try to do everything in docstrings if possible.  So if this is a non-issue feel free to close.\r\n\r\nMany thanks for some awesome libraries!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/377", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/377/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/377/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/377", "id": 405937310, "node_id": "MDU6SXNzdWU0MDU5MzczMTA=", "number": 377, "title": "Update docs with OpenAPI 3 examples", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 0, "created_at": "2019-02-02T02:17:09Z", "updated_at": "2019-02-02T18:34:56Z", "closed_at": "2019-02-02T18:34:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Now that #165 is resolved, the docs should be updated to show OpenAPI 3 examples.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/370", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/370/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/370/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/370/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/370", "id": 405049411, "node_id": "MDU6SXNzdWU0MDUwNDk0MTE=", "number": 370, "title": "Fix failing webframeworks build", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-31T02:13:05Z", "updated_at": "2019-01-31T20:41:44Z", "closed_at": "2019-01-31T20:41:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`tox -e webframeworks` is failing on the latest `dev`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/354", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/354/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/354/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/354/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/354", "id": 395142319, "node_id": "MDU6SXNzdWUzOTUxNDIzMTk=", "number": 354, "title": "RFC: Remove extracting reference from field metadata", "user": {"login": "Bangertm", "id": 22827894, "node_id": "MDQ6VXNlcjIyODI3ODk0", "avatar_url": "https://avatars2.githubusercontent.com/u/22827894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bangertm", "html_url": "https://github.com/Bangertm", "followers_url": "https://api.github.com/users/Bangertm/followers", "following_url": "https://api.github.com/users/Bangertm/following{/other_user}", "gists_url": "https://api.github.com/users/Bangertm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bangertm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bangertm/subscriptions", "organizations_url": "https://api.github.com/users/Bangertm/orgs", "repos_url": "https://api.github.com/users/Bangertm/repos", "events_url": "https://api.github.com/users/Bangertm/events{/privacy}", "received_events_url": "https://api.github.com/users/Bangertm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 927005179, "node_id": "MDU6TGFiZWw5MjcwMDUxNzk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/backwards%20incompat", "name": "backwards incompat", "color": "eb6420", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 2, "created_at": "2019-01-02T03:37:45Z", "updated_at": "2019-02-03T18:57:08Z", "closed_at": "2019-02-03T18:57:02Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Currently the Marshmallow plugin looks for 'ref' key containing a JSON reference path in field.  An example from the [tests](https://github.com/marshmallow-code/apispec/blob/29881b18e6723295870422f08c17851d49f83caf/tests/test_openapi.py#L600):\r\n```python\r\nclass PetSchema(Schema):\r\n    category = fields.Nested(CategorySchema, many=True, ref='#/definitions/Category')\r\n```\r\nThis functionality seems to be redundant with the plugin's ability to store automatically store references.  It also seems like it is a more fragile way to pass reference information into the spec. \r\n \r\nThis [code block](https://github.com/marshmallow-code/apispec/blob/29881b18e6723295870422f08c17851d49f83caf/apispec/ext/marshmallow/openapi.py#L343) extracts the reference and can probably be completely removed because the unbound self referencing case does not occur when a schema instance is passed to `schema2jsonschema`, which is the primary case currently (we could probably enforce that by instancing the schema within `schema2jsonschema`).  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/353", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/353/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/353/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/353", "id": 394850070, "node_id": "MDU6SXNzdWUzOTQ4NTAwNzA=", "number": 353, "title": "Addition of views from blueprints removed ?", "user": {"login": "cutenarwhal", "id": 40391421, "node_id": "MDQ6VXNlcjQwMzkxNDIx", "avatar_url": "https://avatars1.githubusercontent.com/u/40391421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cutenarwhal", "html_url": "https://github.com/cutenarwhal", "followers_url": "https://api.github.com/users/cutenarwhal/followers", "following_url": "https://api.github.com/users/cutenarwhal/following{/other_user}", "gists_url": "https://api.github.com/users/cutenarwhal/gists{/gist_id}", "starred_url": "https://api.github.com/users/cutenarwhal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cutenarwhal/subscriptions", "organizations_url": "https://api.github.com/users/cutenarwhal/orgs", "repos_url": "https://api.github.com/users/cutenarwhal/repos", "events_url": "https://api.github.com/users/cutenarwhal/events{/privacy}", "received_events_url": "https://api.github.com/users/cutenarwhal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-30T06:24:01Z", "updated_at": "2018-12-30T14:19:32Z", "closed_at": "2018-12-30T14:19:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I notice that support for blueprints used to be possible through some additional code though not in the apispec library itself, as per https://github.com/marshmallow-code/apispec/issues/68 \r\n\r\nSpecifically this code used to work\r\n```\r\nfrom apispec import Path, utils\r\nfrom apispec.ext.flask import flaskpath2swagger\r\n\r\ndef path_from_rule(spec, rule, **kwargs):\r\n    \"\"\"Path helper that allows passing a Flask url Rule object.\"\"\"\r\n    path = flaskpath2swagger(rule.rule)\r\n    view = current_app.view_functions.get(rule.endpoint)\r\n    # Get operations from view function docstring\r\n    operations = utils.load_operations_from_docstring(view.__doc__)\r\n    return Path(path=path, operations=operations)\r\n\r\nspec.register_path_helper(path_from_rule)\r\n```\r\n\r\nHowever I think apispec itself has changed a lot since then since 'flaskpath2swagger' is no longer available. I've checked the changelog and apispec is changing quite a lot. \r\n\r\nAre blueprints for Flask still not considered or have I overlooked something ?\r\n\r\nthankyou", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/348", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/348/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/348/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/348/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/348", "id": 392995570, "node_id": "MDU6SXNzdWUzOTI5OTU1NzA=", "number": 348, "title": "nested load_only fields appears in response", "user": {"login": "zeakd", "id": 10722657, "node_id": "MDQ6VXNlcjEwNzIyNjU3", "avatar_url": "https://avatars0.githubusercontent.com/u/10722657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zeakd", "html_url": "https://github.com/zeakd", "followers_url": "https://api.github.com/users/zeakd/followers", "following_url": "https://api.github.com/users/zeakd/following{/other_user}", "gists_url": "https://api.github.com/users/zeakd/gists{/gist_id}", "starred_url": "https://api.github.com/users/zeakd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zeakd/subscriptions", "organizations_url": "https://api.github.com/users/zeakd/orgs", "repos_url": "https://api.github.com/users/zeakd/repos", "events_url": "https://api.github.com/users/zeakd/events{/privacy}", "received_events_url": "https://api.github.com/users/zeakd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-20T11:04:28Z", "updated_at": "2019-03-04T09:51:03Z", "closed_at": "2019-03-04T09:50:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\n\r\nI'm using apispec 1.0.0b6 and I love responses swagger control with load, dump_only fields.\r\nbut when schema is nested, load_only fields appears in responses example value.\r\n\r\nrelated #303 #119 \r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/347", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/347/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/347/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/347/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/347", "id": 386374429, "node_id": "MDU6SXNzdWUzODYzNzQ0Mjk=", "number": 347, "title": "Invalid Reference Object", "user": {"login": "Bangertm", "id": 22827894, "node_id": "MDQ6VXNlcjIyODI3ODk0", "avatar_url": "https://avatars2.githubusercontent.com/u/22827894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bangertm", "html_url": "https://github.com/Bangertm", "followers_url": "https://api.github.com/users/Bangertm/followers", "following_url": "https://api.github.com/users/Bangertm/following{/other_user}", "gists_url": "https://api.github.com/users/Bangertm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bangertm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bangertm/subscriptions", "organizations_url": "https://api.github.com/users/Bangertm/orgs", "repos_url": "https://api.github.com/users/Bangertm/repos", "events_url": "https://api.github.com/users/Bangertm/events{/privacy}", "received_events_url": "https://api.github.com/users/Bangertm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187047, "node_id": "MDU6TGFiZWwxMzkxODcwNDc=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Bangertm", "id": 22827894, "node_id": "MDQ6VXNlcjIyODI3ODk0", "avatar_url": "https://avatars2.githubusercontent.com/u/22827894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bangertm", "html_url": "https://github.com/Bangertm", "followers_url": "https://api.github.com/users/Bangertm/followers", "following_url": "https://api.github.com/users/Bangertm/following{/other_user}", "gists_url": "https://api.github.com/users/Bangertm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bangertm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bangertm/subscriptions", "organizations_url": "https://api.github.com/users/Bangertm/orgs", "repos_url": "https://api.github.com/users/Bangertm/repos", "events_url": "https://api.github.com/users/Bangertm/events{/privacy}", "received_events_url": "https://api.github.com/users/Bangertm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Bangertm", "id": 22827894, "node_id": "MDQ6VXNlcjIyODI3ODk0", "avatar_url": "https://avatars2.githubusercontent.com/u/22827894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bangertm", "html_url": "https://github.com/Bangertm", "followers_url": "https://api.github.com/users/Bangertm/followers", "following_url": "https://api.github.com/users/Bangertm/following{/other_user}", "gists_url": "https://api.github.com/users/Bangertm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bangertm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bangertm/subscriptions", "organizations_url": "https://api.github.com/users/Bangertm/orgs", "repos_url": "https://api.github.com/users/Bangertm/repos", "events_url": "https://api.github.com/users/Bangertm/events{/privacy}", "received_events_url": "https://api.github.com/users/Bangertm/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 2, "created_at": "2018-11-30T22:29:49Z", "updated_at": "2019-01-25T01:39:39Z", "closed_at": "2019-01-25T01:39:39Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "It looks like this test:\r\n\r\nhttps://github.com/marshmallow-code/apispec/blob/b4bf604b6847b87616b84aed417154a58a97a8de/tests/test_openapi.py#L616-L623\r\n\r\nis incorrectly adding field metadata as additional properties to a reference object.  The OpenAPI v3 spec on [reference objects](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#reference-object) has this comment: \r\n\r\n> This object cannot be extended with additional properties and any properties added SHALL be ignored.\r\n\r\nThe way we are handling this for other cases where additional properties are in field metadata is with the use of `allOf` like here: https://github.com/marshmallow-code/apispec/blob/b4bf604b6847b87616b84aed417154a58a97a8de/tests/test_openapi.py#L758-L760\r\n\r\nPrance doesn't seem to complain about extra properties in a reference object, but Swagger UI shows a warning.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/344", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/344/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/344/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/344/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/344", "id": 380221112, "node_id": "MDU6SXNzdWUzODAyMjExMTI=", "number": 344, "title": "Error in documentation about contributing", "user": {"login": "buxx", "id": 1104637, "node_id": "MDQ6VXNlcjExMDQ2Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1104637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buxx", "html_url": "https://github.com/buxx", "followers_url": "https://api.github.com/users/buxx/followers", "following_url": "https://api.github.com/users/buxx/following{/other_user}", "gists_url": "https://api.github.com/users/buxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/buxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buxx/subscriptions", "organizations_url": "https://api.github.com/users/buxx/orgs", "repos_url": "https://api.github.com/users/buxx/repos", "events_url": "https://api.github.com/users/buxx/events{/privacy}", "received_events_url": "https://api.github.com/users/buxx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-13T13:17:23Z", "updated_at": "2018-11-13T20:49:35Z", "closed_at": "2018-11-13T19:00:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nIn page https://apispec.readthedocs.io/en/stable/contributing.html , documentation indicate Following command:\r\n\r\n    $ pip install -r dev-requirements.txt\r\n\r\nBut there is no more `dev-requirements.txt` file.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/343", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/343/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/343/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/343/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/343", "id": 379851028, "node_id": "MDU6SXNzdWUzNzk4NTEwMjg=", "number": 343, "title": "Discussion about implementing new plugin", "user": {"login": "buxx", "id": 1104637, "node_id": "MDQ6VXNlcjExMDQ2Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1104637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buxx", "html_url": "https://github.com/buxx", "followers_url": "https://api.github.com/users/buxx/followers", "following_url": "https://api.github.com/users/buxx/following{/other_user}", "gists_url": "https://api.github.com/users/buxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/buxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buxx/subscriptions", "organizations_url": "https://api.github.com/users/buxx/orgs", "repos_url": "https://api.github.com/users/buxx/repos", "events_url": "https://api.github.com/users/buxx/events{/privacy}", "received_events_url": "https://api.github.com/users/buxx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-12T16:20:23Z", "updated_at": "2018-12-16T00:18:03Z", "closed_at": "2018-12-16T00:18:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nIn addition of considering #307 , we are preparing integration of an alternative of Marshmallow: https://gitlab.com/sgrignard/serpyco\r\n\r\nHas i can see, Marshmallow is implemented as a [plugin](https://github.com/marshmallow-code/apispec/blob/dev/apispec/ext/marshmallow/__init__.py#L41), so we want to add support of serpyco by write a plugin.\r\n\r\nSerpyco use dataclasses as schema and produce json schema with them. So we need to code a plugin who exploit json schema produced by serpyco.\r\n\r\nDo you have any advice about this ? Thank you very much if you find time to respond ;)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/342", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/342/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/342/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/342/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/342", "id": 379666902, "node_id": "MDU6SXNzdWUzNzk2NjY5MDI=", "number": 342, "title": "default/missing value are passed in deserialized form with marshmallow 3", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187047, "node_id": "MDU6TGFiZWwxMzkxODcwNDc=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-12T08:22:41Z", "updated_at": "2019-09-03T20:11:52Z", "closed_at": "2019-09-03T20:11:52Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This will break automatic default documentation:\r\n\r\n```py\r\n    def field2property(self, field, use_refs=True, dump=True, load=True, name=None):\r\n        [...]\r\n        if 'doc_default' in field.metadata:\r\n            ret['default'] = field.metadata['doc_default']\r\n        else:\r\n            default = field.missing\r\n            if default is not marshmallow.missing and not callable(default):\r\n                ret['default'] = default\r\n```\r\n\r\nSince we have the field object, maybe we could use it to dump the value for the doc?\r\n\r\nCould that fail in some corner case?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/340", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/340/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/340/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/340/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/340", "id": 378470739, "node_id": "MDU6SXNzdWUzNzg0NzA3Mzk=", "number": 340, "title": "Raise exception upon name collision when registering components", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187049, "node_id": "MDU6TGFiZWwxMzkxODcwNDk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 0, "created_at": "2018-11-07T21:11:25Z", "updated_at": "2019-01-29T23:42:53Z", "closed_at": "2019-01-29T23:42:53Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "When registering e.g. two schemas with the same name, the latter silently overwrites the former.\r\n\r\nI think we should raise an Exception to inform the user.\r\n\r\nTheoretically, it could break code where for some reason the user relied on this (like register a first version, then conditionally register a second version), but this shouldn't be a blocker.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/339", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/339/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/339/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/339", "id": 378468702, "node_id": "MDU6SXNzdWUzNzg0Njg3MDI=", "number": 339, "title": "AttributeError: 'APISpec' object has no attribute 'definition'", "user": {"login": "darwinyip", "id": 3499338, "node_id": "MDQ6VXNlcjM0OTkzMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3499338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darwinyip", "html_url": "https://github.com/darwinyip", "followers_url": "https://api.github.com/users/darwinyip/followers", "following_url": "https://api.github.com/users/darwinyip/following{/other_user}", "gists_url": "https://api.github.com/users/darwinyip/gists{/gist_id}", "starred_url": "https://api.github.com/users/darwinyip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darwinyip/subscriptions", "organizations_url": "https://api.github.com/users/darwinyip/orgs", "repos_url": "https://api.github.com/users/darwinyip/repos", "events_url": "https://api.github.com/users/darwinyip/events{/privacy}", "received_events_url": "https://api.github.com/users/darwinyip/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187052, "node_id": "MDU6TGFiZWwxMzkxODcwNTI=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-07T21:05:21Z", "updated_at": "2018-11-08T14:11:10Z", "closed_at": "2018-11-08T14:11:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Getting AttributeError: 'APISpec' object has no attribute 'definition'.\r\nSame for `add_path()`.\r\n\r\nThis is using:\r\nmarshmallow==2.16.3\r\napispec==1.0.0.b5", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/335", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/335/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/335/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/335/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/335", "id": 377599125, "node_id": "MDU6SXNzdWUzNzc1OTkxMjU=", "number": 335, "title": "Make APISpec and Components methods chainable", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187049, "node_id": "MDU6TGFiZWwxMzkxODcwNDk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 357224733, "node_id": "MDU6TGFiZWwzNTcyMjQ3MzM=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/ready%20to%20claim", "name": "ready to claim", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 0, "created_at": "2018-11-05T21:54:39Z", "updated_at": "2018-11-07T00:16:56Z", "closed_at": "2018-11-07T00:16:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "See discussion in https://github.com/marshmallow-code/apispec/pull/305.\r\n\r\nJust let `path`, `tag`, etc. return `self`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/331", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/331/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/331/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/331/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/331", "id": 375646289, "node_id": "MDU6SXNzdWUzNzU2NDYyODk=", "number": 331, "title": "TypeError when adding non-Marshmallow definition", "user": {"login": "Bangertm", "id": 22827894, "node_id": "MDQ6VXNlcjIyODI3ODk0", "avatar_url": "https://avatars2.githubusercontent.com/u/22827894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bangertm", "html_url": "https://github.com/Bangertm", "followers_url": "https://api.github.com/users/Bangertm/followers", "following_url": "https://api.github.com/users/Bangertm/following{/other_user}", "gists_url": "https://api.github.com/users/Bangertm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bangertm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bangertm/subscriptions", "organizations_url": "https://api.github.com/users/Bangertm/orgs", "repos_url": "https://api.github.com/users/Bangertm/repos", "events_url": "https://api.github.com/users/Bangertm/events{/privacy}", "received_events_url": "https://api.github.com/users/Bangertm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187047, "node_id": "MDU6TGFiZWwxMzkxODcwNDc=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 3, "created_at": "2018-10-30T19:02:06Z", "updated_at": "2018-11-06T23:03:44Z", "closed_at": "2018-11-06T23:03:44Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "After upgrading apispec to 0.29 I'm seeing a TypeError when adding a non-Marshmallow definition to the spec.  \r\n\r\nFor example: \r\n\r\n```\r\nspec = APISpec(title='Demo',\r\n               version=1.0,\r\n               plugins=[MarshmallowPlugin()])\r\n\r\nspec.definition('Example', properties={'key1': {'type': 'integer'},\r\n                                          'key2': {'type': 'string'}})\r\n```\r\n\r\nRaises: TypeError: definition_helper() takes exactly 3 arguments (2 given).\r\n\r\nThe issue here seems to be calling the `definition_helper` of `MarshmallowPlugin` without a `schema` parameter.  This was previously caught via by including `TypeError` in this [except clause](https://github.com/marshmallow-code/apispec/blob/56b12fbb85224fc93284032986a55c8fa3d1168c/apispec/core.py#L278).\r\n\r\nOur use case is that we have Marshmallow schemas for most of our routes, but there are a couple of simple return values that we never need to validate and are easy enough add to the schema via properties like above.  \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/325", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/325/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/325/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/325/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/325", "id": 374778479, "node_id": "MDU6SXNzdWUzNzQ3Nzg0Nzk=", "number": 325, "title": "Use tox for testing and task running", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 0, "created_at": "2018-10-28T17:37:05Z", "updated_at": "2018-10-28T19:12:30Z", "closed_at": "2018-10-28T19:12:30Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Same as https://github.com/marshmallow-code/marshmallow/issues/1020", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/324", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/324/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/324/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/324/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/324", "id": 374778443, "node_id": "MDU6SXNzdWUzNzQ3Nzg0NDM=", "number": 324, "title": "Update docs for web frameworks plugins", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 0, "created_at": "2018-10-28T17:36:33Z", "updated_at": "2018-10-28T19:54:43Z", "closed_at": "2018-10-28T19:54:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/315", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/315/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/315/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/315/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/315", "id": 369948849, "node_id": "MDU6SXNzdWUzNjk5NDg4NDk=", "number": 315, "title": "RFC: Remove BasePlugin.response_helper", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 927005179, "node_id": "MDU6TGFiZWw5MjcwMDUxNzk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/backwards%20incompat", "name": "backwards incompat", "color": "eb6420", "default": false, "description": ""}, {"id": 995196147, "node_id": "MDU6TGFiZWw5OTUxOTYxNDc=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/refactor", "name": "refactor", "color": "1d76db", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 0, "created_at": "2018-10-14T22:05:38Z", "updated_at": "2018-10-30T03:34:50Z", "closed_at": "2018-10-30T03:34:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Before the Plugin class rework, one could map a method/status code combination to a helper function.\r\n\r\nSince the Plugin class interface was introduced, APISpec loops over all method/status code combinations and the helper function must include conditional tests to perform the work on each combination it wants to address.\r\n\r\n```py\r\n        for method, operation in iteritems(operations):\r\n            if method in VALID_METHODS and 'responses' in operation:\r\n                for status_code, response in iteritems(operation['responses']):\r\n                    for plugin in self.plugins:\r\n                        try:\r\n                            response.update(plugin.response_helper(method, status_code, **kwargs) or {})\r\n                        except PluginMethodNotImplementedError:\r\n                            continue\r\n```\r\n\r\n(See https://github.com/marshmallow-code/apispec/issues/207#issuecomment-387808725.)\r\n\r\nAt this point, it might be better to remove that loop from APISpec and let each plugin perform work on responses in its operation helper.\r\n\r\nIn fact, I don't see a use case for a response helper.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/314", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/314/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/314/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/314/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/314", "id": 369286366, "node_id": "MDU6SXNzdWUzNjkyODYzNjY=", "number": 314, "title": "Consider \"as_string\" keyword argument for marshmallow's field.Decimal", "user": {"login": "rishi-recharge", "id": 42555153, "node_id": "MDQ6VXNlcjQyNTU1MTUz", "avatar_url": "https://avatars2.githubusercontent.com/u/42555153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rishi-recharge", "html_url": "https://github.com/rishi-recharge", "followers_url": "https://api.github.com/users/rishi-recharge/followers", "following_url": "https://api.github.com/users/rishi-recharge/following{/other_user}", "gists_url": "https://api.github.com/users/rishi-recharge/gists{/gist_id}", "starred_url": "https://api.github.com/users/rishi-recharge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rishi-recharge/subscriptions", "organizations_url": "https://api.github.com/users/rishi-recharge/orgs", "repos_url": "https://api.github.com/users/rishi-recharge/repos", "events_url": "https://api.github.com/users/rishi-recharge/events{/privacy}", "received_events_url": "https://api.github.com/users/rishi-recharge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-11T20:12:04Z", "updated_at": "2018-10-12T14:59:53Z", "closed_at": "2018-10-12T14:59:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nfrom marshmallow import fields, Schema\r\n\r\n\r\nclass Product(Schema):\r\n    price = fields.Decimal(as_string=True)\r\n```\r\n\r\nToday, apispec will map the price field as a \"number\", which makes sense. I was wondering if apispec could consider the `as_string` keyword and map the field as a \"string\"?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/307", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/307/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/307/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/307/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/307", "id": 367782429, "node_id": "MDU6SXNzdWUzNjc3ODI0Mjk=", "number": 307, "title": "RFC: remove schema auto-reference feature from MarshmallowPlugin", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 927005179, "node_id": "MDU6TGFiZWw5MjcwMDUxNzk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/backwards%20incompat", "name": "backwards incompat", "color": "eb6420", "default": false, "description": ""}, {"id": 160865308, "node_id": "MDU6TGFiZWwxNjA4NjUzMDg=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 8, "created_at": "2018-10-08T13:09:15Z", "updated_at": "2019-01-25T14:07:08Z", "closed_at": "2019-01-25T14:07:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "See [comment](https://github.com/marshmallow-code/apispec/pull/179#issuecomment-405185455).\r\n\r\nRationale:\r\n\r\nThis is something that is easy to do in a custom plugin. Just override `definition_helper`. But it is hard to do in a totally generic way.\r\n\r\nTo make it more generic, the authors added a `schema_name_resolver` callback, so that the user can provide a function that returns a name from a Schema (for instance, it can be the schema name with Schema suffix removed, and lowercased: `PetSchema` -> `pet`).\r\n\r\nThe `inspect_schema_for_auto_referencing` method hardcodes the field types that have containers. Currently, only `Nested` and `List`. `Dict` is missing for Marshmallow 3 (this could be easily fixed). And there is no mechanism to allow custom container fields. We could add another parametrization mechanism for that, but it looks like overparametrization. I mean from a user perspective, it looks just as easy to reimplement the whole feature (the recipe can be provided in the docs) than to awkwardly parametrize the existing feature. OTOH, I realize the custom field with container is a corner case.\r\n\r\nThe PR I linked to above (#179) adds more complexity to fix issues in the feature.\r\n\r\nI'm thinking it might be better to drop it. Maybe we could add instructions in the docs to show how to achieve it in a custom plugin. Of course, if the original authors manage to do what they need in a plugin and publish this plugin, I'd be happy to link to it. The point is not to trash other people's work (NIH syndrome), but to make it the most practical both from user and maintainer perspective.\r\n\r\nMaybe I'm overthinking it. It's mostly a matter of opinion. I'm open to discussion about it. Since it is a breaking change, I'd like to have it settled for 1.0.\r\n\r\n@inkhey, @lebouquetin and @buxx, since you added the feature, I'd be happy to get your feedback. I think you can easily fit this in hapic. It might be even easier for you if you want to modify it. You tell me.\r\n\r\nNote: If we keep it, let's at least manage the `Dict` case for marshmallow 3.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/302", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/302/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/302/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/302", "id": 367341674, "node_id": "MDU6SXNzdWUzNjczNDE2NzQ=", "number": 302, "title": "Split out web framework plugins into separate package", "user": {"login": "ergo", "id": 33021, "node_id": "MDQ6VXNlcjMzMDIx", "avatar_url": "https://avatars3.githubusercontent.com/u/33021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ergo", "html_url": "https://github.com/ergo", "followers_url": "https://api.github.com/users/ergo/followers", "following_url": "https://api.github.com/users/ergo/following{/other_user}", "gists_url": "https://api.github.com/users/ergo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ergo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ergo/subscriptions", "organizations_url": "https://api.github.com/users/ergo/orgs", "repos_url": "https://api.github.com/users/ergo/repos", "events_url": "https://api.github.com/users/ergo/events{/privacy}", "received_events_url": "https://api.github.com/users/ergo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 22, "created_at": "2018-10-05T19:37:27Z", "updated_at": "2018-10-28T19:51:29Z", "closed_at": "2018-10-28T19:51:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,  \r\n\r\nNow that Apispec nears 1.0 release, and given how many issues are open right now I was thinking that maybe web framework plugins should be living in a separate `apispec_plugins` package.\r\nFor bw. compatibility existing namespace `apispec.ext.$framework` could pull them back from separate package.\r\n\r\nThis would allow plugin authors to fix bugs in implementations or support newer versions of frameworks without the need to release apispec itself, or even add new plugins.\r\n\r\nI will be attending a hackathon soon and we could probably tackle this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/300", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/300/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/300/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/300/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/300", "id": 367063085, "node_id": "MDU6SXNzdWUzNjcwNjMwODU=", "number": 300, "title": "When using example DocPlugin(), to_dict() paths contains an instance of Path.", "user": {"login": "justai-net", "id": 29281283, "node_id": "MDQ6VXNlcjI5MjgxMjgz", "avatar_url": "https://avatars1.githubusercontent.com/u/29281283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justai-net", "html_url": "https://github.com/justai-net", "followers_url": "https://api.github.com/users/justai-net/followers", "following_url": "https://api.github.com/users/justai-net/following{/other_user}", "gists_url": "https://api.github.com/users/justai-net/gists{/gist_id}", "starred_url": "https://api.github.com/users/justai-net/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justai-net/subscriptions", "organizations_url": "https://api.github.com/users/justai-net/orgs", "repos_url": "https://api.github.com/users/justai-net/repos", "events_url": "https://api.github.com/users/justai-net/events{/privacy}", "received_events_url": "https://api.github.com/users/justai-net/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-05T05:17:13Z", "updated_at": "2018-10-08T01:18:40Z", "closed_at": "2018-10-06T15:33:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n```\r\n'paths': OrderedDict([(<apispec.core.Path object at 0x10665cda0>,\r\nOrderedDict([('get',\r\n                                      {'responses': {200: {'description': 'A '\r\n                                                                          'list '\r\n                                                                          'of '\r\n                                                                          'all '\r\n                                                                          'appcodes',\r\n                                                           'schema': {'$ref': '#/definitions/appcode'}}},\r\n                                       'summary': 'Gets all appcode',\r\n                                       'tags': ['appcode']})]))]),\r\n```\r\nWanted\r\n```\r\n'paths': OrderedDict([('/appcode',\r\nOrderedDict([('get',\r\n                                      {'responses': {200: {'description': 'A '\r\n                                                                          'list '\r\n                                                                          'of '\r\n                                                                          'all '\r\n                                                                          'appcodes',\r\n                                                           'schema': {'$ref': '#/definitions/appcode'}}},\r\n                                       'summary': 'Gets all appcode',\r\n                                       'tags': ['appcode']})]))]),\r\n```\r\n\r\nManaged to find a fix,\r\n#core.py\r\n```\r\n    def update(self, path):\r\n        if path.path:\r\n            self.path = path.path\r\n        self.operations.update(path.operations)\r\n```\r\n\r\n#core.py\r\n```\r\n    def update(self, path):\r\n        if path.path:\r\n            self.path = path.path.path\r\n        self.operations.update(path.operations)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/293", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/293/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/293/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/293/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/293", "id": 362541508, "node_id": "MDU6SXNzdWUzNjI1NDE1MDg=", "number": 293, "title": "Bottle plugin: DeprecationWarning: Switch to Plugin API v2 and access the Route object directly.", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187050, "node_id": "MDU6TGFiZWwxMzkxODcwNTA=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-21T09:57:49Z", "updated_at": "2018-10-04T11:34:04Z", "closed_at": "2018-10-04T11:34:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I get this warning in the tests:\r\n\r\n> DeprecationWarning: Switch to Plugin API v2 and access the Route object directly.\r\n\r\nIt comes from Bottle. See https://github.com/bottlepy/bottle/issues/770 for instance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/288", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/288/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/288/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/288", "id": 361413702, "node_id": "MDU6SXNzdWUzNjE0MTM3MDI=", "number": 288, "title": "FlaskPlugin fails if FlaskInjector is injecting into a view", "user": {"login": "andho", "id": 242906, "node_id": "MDQ6VXNlcjI0MjkwNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/242906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andho", "html_url": "https://github.com/andho", "followers_url": "https://api.github.com/users/andho/followers", "following_url": "https://api.github.com/users/andho/following{/other_user}", "gists_url": "https://api.github.com/users/andho/gists{/gist_id}", "starred_url": "https://api.github.com/users/andho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andho/subscriptions", "organizations_url": "https://api.github.com/users/andho/orgs", "repos_url": "https://api.github.com/users/andho/repos", "events_url": "https://api.github.com/users/andho/events{/privacy}", "received_events_url": "https://api.github.com/users/andho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-18T17:48:30Z", "updated_at": "2018-09-19T07:15:43Z", "closed_at": "2018-09-19T07:01:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Because FlaskInjector wraps the view function in yet another \"decorator\" the view passed into `add_path` is not `==` to the view retrieved from `current_app.view_functions`. The failure occurs only for views that need injection (an argument in the function signature that's not a path parameter).\r\n\r\nIf there is a workaround for this that would be great.\r\n\r\nFor a long time solution, maybe allow to add_path using rule instead of view?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/282", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/282/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/282/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/282/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/282", "id": 358613288, "node_id": "MDU6SXNzdWUzNTg2MTMyODg=", "number": 282, "title": "Use `openapi-spec-validator` for version 2 as well?", "user": {"login": "lbeaufort", "id": 31420082, "node_id": "MDQ6VXNlcjMxNDIwMDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/31420082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbeaufort", "html_url": "https://github.com/lbeaufort", "followers_url": "https://api.github.com/users/lbeaufort/followers", "following_url": "https://api.github.com/users/lbeaufort/following{/other_user}", "gists_url": "https://api.github.com/users/lbeaufort/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbeaufort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbeaufort/subscriptions", "organizations_url": "https://api.github.com/users/lbeaufort/orgs", "repos_url": "https://api.github.com/users/lbeaufort/repos", "events_url": "https://api.github.com/users/lbeaufort/events{/privacy}", "received_events_url": "https://api.github.com/users/lbeaufort/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 13, "created_at": "2018-09-10T13:04:09Z", "updated_at": "2018-10-23T12:48:08Z", "closed_at": "2018-10-23T12:48:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello!\r\n\r\nWhile testing the latest version of `validate_spec` on our project, I came across an issue with validating OpenAPI spec v.2. It [looks like `openapi-spec-validator` is only being used for OpenAPI version 3](https://github.com/marshmallow-code/apispec/blob/dev/apispec/utils.py#L33-L34), so `prance` is falling back to using the [default `flex` validator](https://github.com/jfinkhaeuser/prance#compatibility) for version 2. \r\n\r\nSomething in the [`default` settings in `field2property`](https://github.com/marshmallow-code/apispec/blob/dev/apispec/ext/marshmallow/openapi.py#L321-L326) is making the `flex` validation fail for our OpenAPI v. 2 specs, but if I use `openapi-spec-validator`, our specs pass validation.\r\n\r\nCan we use  `openapi-spec-validator` for versions 2 and 3 in `validate_spec`? If so, I'm happy to put in a PR ([something like this](https://github.com/fecgov/apispec/pull/1/files))\r\n\r\nThanks, and please let me know if you have any questions!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/278", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/278/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/278/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/278/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/278", "id": 356902763, "node_id": "MDU6SXNzdWUzNTY5MDI3NjM=", "number": 278, "title": "Use 'yaml.safe_load' in 'load_yaml_from_docstring'", "user": {"login": "lbeaufort", "id": 31420082, "node_id": "MDQ6VXNlcjMxNDIwMDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/31420082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbeaufort", "html_url": "https://github.com/lbeaufort", "followers_url": "https://api.github.com/users/lbeaufort/followers", "following_url": "https://api.github.com/users/lbeaufort/following{/other_user}", "gists_url": "https://api.github.com/users/lbeaufort/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbeaufort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbeaufort/subscriptions", "organizations_url": "https://api.github.com/users/lbeaufort/orgs", "repos_url": "https://api.github.com/users/lbeaufort/repos", "events_url": "https://api.github.com/users/lbeaufort/events{/privacy}", "received_events_url": "https://api.github.com/users/lbeaufort/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 160865308, "node_id": "MDU6TGFiZWwxNjA4NjUzMDg=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}, {"id": 139187050, "node_id": "MDU6TGFiZWwxMzkxODcwNTA=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-09-04T17:18:15Z", "updated_at": "2018-09-08T22:46:18Z", "closed_at": "2018-09-08T22:46:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi there! \ud83d\udc4bThanks for providing a great project.\r\n\r\nBecause `yaml.load()` has [known security issues](https://github.com/yaml/pyyaml/pull/189), would it be feasible to use the existing `yaml.safe_load()` option instead of `yaml.load()` [here](https://github.com/marshmallow-code/apispec/blob/dev/apispec/yaml_utils.py#L49) for `load_yaml_from_docstring`? I'm happy to put in a PR if you agree. It looks like [Ansible has been using only yaml.safe_load() since v1.1](https://github.com/Screenly/screenly-ose/issues/878#issuecomment-414720801).\r\n\r\nIt doesn't look like there's been much activity by PyYAML to move forward with making `load()` safe by default. Here is the pending PyYAML 4.2 release plan: https://github.com/yaml/pyyaml/issues/193 \r\n\r\nThe PyYAML security vulnerability is being flagged for our [FEC API](https://github.com/fecgov/openFEC/issues/3280).\r\n\r\nPlease let me know if you have any questions, and thanks!\r\nLaura", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/270", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/270/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/270/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/270", "id": 351487373, "node_id": "MDU6SXNzdWUzNTE0ODczNzM=", "number": 270, "title": "Help support \"x-\" specification Extensions (v3) || swagger Extensions (v2)", "user": {"login": "tvtoan", "id": 9206452, "node_id": "MDQ6VXNlcjkyMDY0NTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/9206452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tvtoan", "html_url": "https://github.com/tvtoan", "followers_url": "https://api.github.com/users/tvtoan/followers", "following_url": "https://api.github.com/users/tvtoan/following{/other_user}", "gists_url": "https://api.github.com/users/tvtoan/gists{/gist_id}", "starred_url": "https://api.github.com/users/tvtoan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tvtoan/subscriptions", "organizations_url": "https://api.github.com/users/tvtoan/orgs", "repos_url": "https://api.github.com/users/tvtoan/repos", "events_url": "https://api.github.com/users/tvtoan/events{/privacy}", "received_events_url": "https://api.github.com/users/tvtoan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-17T07:30:52Z", "updated_at": "2018-08-19T21:28:57Z", "closed_at": "2018-08-19T21:28:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nCurrently, I am using apispec version 0.39.0 to export JSON for ReDoc but when I use \"x-logo\", the program reported an error.\r\n\r\nThanks !``\r\n\r\n```\r\nspec = APISpec(\r\n    title='User',\r\n    version='0.0.1',\r\n    info=dict(\r\n        description='A minimal user API',\r\n        x-logo=dict(\r\n            url=\"https://rebilly.github.io/ReDoc/petstore-logo.png\",\r\n            backgroundColor=\"#FFFFFF\",\r\n            altText=\"Petstore logo\"\r\n        ),\r\n    ),\r\n    plugins=[\r\n        FlaskPlugin(),\r\n        MarshmallowPlugin(),\r\n    ]\r\n)\r\n```\r\n\r\n```\r\nFile \"/home/vtoan/code/demo_tmp/flask-mongo/api.py\", line 15\r\n    'xLogo'=dict(\r\n    ^\r\nSyntaxError: keyword can't be an expression\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/264", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/264/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/264/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/264/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/264", "id": 347333390, "node_id": "MDU6SXNzdWUzNDczMzMzOTA=", "number": 264, "title": "Methods require docstrings", "user": {"login": "ekhaydarov", "id": 13380622, "node_id": "MDQ6VXNlcjEzMzgwNjIy", "avatar_url": "https://avatars0.githubusercontent.com/u/13380622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekhaydarov", "html_url": "https://github.com/ekhaydarov", "followers_url": "https://api.github.com/users/ekhaydarov/followers", "following_url": "https://api.github.com/users/ekhaydarov/following{/other_user}", "gists_url": "https://api.github.com/users/ekhaydarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekhaydarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekhaydarov/subscriptions", "organizations_url": "https://api.github.com/users/ekhaydarov/orgs", "repos_url": "https://api.github.com/users/ekhaydarov/repos", "events_url": "https://api.github.com/users/ekhaydarov/events{/privacy}", "received_events_url": "https://api.github.com/users/ekhaydarov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-03T09:53:30Z", "updated_at": "2018-08-06T02:44:10Z", "closed_at": "2018-08-06T02:44:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Docstrings are generally reserved for usage of the actual class/function. It does not seem like having another style of declaration taking over the docstrings pattern. Is it possible to actually complete a spec instantiation without the docstrings?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/261", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/261/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/261/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/261/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/261", "id": 347045064, "node_id": "MDU6SXNzdWUzNDcwNDUwNjQ=", "number": 261, "title": "Parse views docstrings for summary/description", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 927005179, "node_id": "MDU6TGFiZWw5MjcwMDUxNzk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/backwards%20incompat", "name": "backwards incompat", "color": "eb6420", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 2, "created_at": "2018-08-02T14:47:02Z", "updated_at": "2018-08-02T20:43:33Z", "closed_at": "2018-08-02T20:43:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Following up on a discussion in flask-rest-api: https://github.com/Nobatek/flask-rest-api/pull/3.\r\n\r\nA contributor suggested to parse the docstrings for `summary`. I think we can go further and also get `description`:\r\n\r\n```py\r\ndef my_view(...):\r\n\"\"\"Summary\r\n\r\nLong description...\r\n\"\"\"\r\n```\r\n\r\nThis could be done in apispec and it is compatible with the YAML docstring parsing:\r\n\r\n```py\r\ndef my_view(...):\r\n\"\"\"Summary\r\n\r\nLong description...\r\n---\r\nYAML stuff\r\n\"\"\"\r\n```\r\n\r\nI didn't take much time to look into it any deeper.\r\n\r\nMarking as 1.0 as I would like to at least take needed utils out of yaml_utils.py (`trim_docstring`, maybe `dedent`) back into utils (those have no yaml dependency).\r\n\r\nMarking as backward incompatible in case the feature is activated by default.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/257", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/257/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/257/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/257/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/257", "id": 345577792, "node_id": "MDU6SXNzdWUzNDU1Nzc3OTI=", "number": 257, "title": "Separate path_helper and operation_helper logic in web framework plugins", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187050, "node_id": "MDU6TGFiZWwxMzkxODcwNTA=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}, {"id": 995196147, "node_id": "MDU6TGFiZWw5OTUxOTYxNDc=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/refactor", "name": "refactor", "color": "1d76db", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-30T00:44:09Z", "updated_at": "2018-11-03T14:32:37Z", "closed_at": "2018-11-03T14:32:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "From #246:\r\n\r\n> Also the web framework path helpers deal with operations quite a lot, and perhaps this logic should be split into path_helper and operation_helper. From a quick glance, the coupling between the two seems loose. Could be a bit trickier with flask due to the if method in rule.methods test, which covers what looks like a twisted but legit case (method declared in the view but not in the rule).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/250", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/250/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/250/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/250", "id": 341904607, "node_id": "MDU6SXNzdWUzNDE5MDQ2MDc=", "number": 250, "title": "Field that is subclass of `fields.Int` gets `{type: string}` in the generated yaml.", "user": {"login": "TheGrandmother", "id": 5517562, "node_id": "MDQ6VXNlcjU1MTc1NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5517562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheGrandmother", "html_url": "https://github.com/TheGrandmother", "followers_url": "https://api.github.com/users/TheGrandmother/followers", "following_url": "https://api.github.com/users/TheGrandmother/following{/other_user}", "gists_url": "https://api.github.com/users/TheGrandmother/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheGrandmother/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheGrandmother/subscriptions", "organizations_url": "https://api.github.com/users/TheGrandmother/orgs", "repos_url": "https://api.github.com/users/TheGrandmother/repos", "events_url": "https://api.github.com/users/TheGrandmother/events{/privacy}", "received_events_url": "https://api.github.com/users/TheGrandmother/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-17T12:48:35Z", "updated_at": "2018-07-18T10:32:20Z", "closed_at": "2018-07-17T13:35:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Rolling Python: 3.6.5, marshmallow: 3.0.0b11 and apispec: 0.39.0\r\n\r\nI have created a custom field like this:\r\n```python\r\n#custom_fields.py\r\n\r\nclass Id(fields.Integer):\r\n    def __init__(self, **kw_args):\r\n        if 'validate' not in kw_args or kw_args['validate'] is None:\r\n            kw_args['validate'] = [lambda v: v > 0]\r\n        else:\r\n            kw_args['validate'] = kw_args['validate'].copy().append(\r\n                lambda v: v > 0)\r\n        super(Id, self).__init__(**kw_args)\r\n```\r\n\r\nAnd i then use it like this:\r\n```python\r\nclass Datapoint(Schema):\r\n    uuid = custom_fields.Id(required=True)\r\n```\r\n\r\nAnd I then add the definition and generate the specs with `to_yaml()` but then it says:\r\n```yaml\r\nuuid: {type: string}\r\n```\r\n\r\nThis confuses me since the field works as expected otherwise and it will fail the validation will fail if i pass anything but an integer > 0 to the `uuid` field.\r\n\r\n**NOTE**: I know that there is `field.UUID` but I, for some unknown reason, won't use it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/246", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/246/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/246/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/246", "id": 341507459, "node_id": "MDU6SXNzdWUzNDE1MDc0NTk=", "number": 246, "title": "Refactor: remove MarshmallowPlugin.path_helper, make YAML optional,...", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 927005179, "node_id": "MDU6TGFiZWw5MjcwMDUxNzk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/backwards%20incompat", "name": "backwards incompat", "color": "eb6420", "default": false, "description": ""}, {"id": 160865308, "node_id": "MDU6TGFiZWwxNjA4NjUzMDg=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}, {"id": 995196147, "node_id": "MDU6TGFiZWw5OTUxOTYxNDc=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/refactor", "name": "refactor", "color": "1d76db", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2", "html_url": "https://github.com/marshmallow-code/apispec/milestone/2", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/milestones/2/labels", "id": 3499652, "node_id": "MDk6TWlsZXN0b25lMzQ5OTY1Mg==", "number": 2, "title": "1.0", "description": "", "creator": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 40, "state": "closed", "created_at": "2018-07-16T13:15:27Z", "updated_at": "2019-04-07T16:43:57Z", "due_on": null, "closed_at": "2019-04-07T16:43:57Z"}, "comments": 5, "created_at": "2018-07-16T12:56:13Z", "updated_at": "2018-07-30T00:44:47Z", "closed_at": "2018-07-30T00:44:47Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We have two types of plugins:\r\n\r\n- web framework plugins:\r\n  - get path from view object (with a [limitation to one path per view](https://github.com/marshmallow-code/apispec/blob/dev/apispec/ext/flask.py#L107) in Flask, see #181)\r\n  - populate `operations` with info parsed from YAML docstrings\r\n\r\n- marshmallow plugin\r\n  - populate `operations` with info parsed from YAML docstrings\r\n  - resolve marshmallow schemas in operations\r\n\r\nSeveral remarks:\r\n\r\nThe path helper in marshmallow plugin is a generic path helper that expects a view function with a docstring. I'm wondering if it is of any use, since anyone using a web framework would use the dedicated path helper. Assuming a web framework is simple enough not to need more than this raw helper, then it should be `SimpleWebFrameworkPlugin.path_helper` anyway. This is not marshmallow specific at all. I'd be tempted to remove it. (It would break a few tests.) In my framework, I use `MarshmallowPlugin` but I override its path helper with a method that raises `PluginMethodNotImplementedError` to remove that feature.\r\n\r\nThe `WebFrameworkPlugin`s (flask,...) are more like `YAMLWebFrameworkPlugin`s. I'd be happy to make the YAML requirement optional. I don't use it, as I get all necessary information from the decorators I use to pass serialization and deserialization schemas. I don't think `flask-apispec` uses this either, although I didn't check. If we got rid of `MarshmallowPlugin.path_helper` already, then it's only about importing YAML stuff only in web framework plugins modules.\r\n\r\nBTW, `load_yaml_from_docstring` and `load_operations_from_docstring` could be reworked to return `{}` rather than `None` and avoid that `or` test in each plugin: \r\n\r\n```python\r\n    utils.load_operations_from_docstring(view.__doc__) or {}\r\n```\r\n\r\nOnce we're there, we'll have `MarshmallowPlugin` with only an `operation_helper`, and a few web framework plugins with only a `path_helper`. And only one `path_helper` returning a path string should be registered at a time, as the last one speaking overrides the others. Anyway, only one should be needed.\r\n\r\nAlso the web framework path helpers deal with operations quite a lot, and perhaps this logic should be split into `path_helper` and `operation_helper`. From a quick glance, the coupling between the two seems loose. Could be a bit trickier with flask due to the `if method in rule.methods` test, which covers what looks like a twisted but legit case (method declared in the view but not in the rule).\r\n\r\nIf doing this, then the plugin registration order will matter, as those web framework operation helpers will need to be executed before marshmallow helper, for instance. But I don't think this is an issue, apart from the test it breaks. Currently the order does not matter, and there's a test to check that, but it is only because the `operations` work from the web framework plugins is done in the path helper.\r\n\r\nJust posting here for feedback before doing anything. There's nothing really blocking in current design AFAIK, so I'm not stuck and I can totally live with it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/239", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/239/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/239/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/239", "id": 339233100, "node_id": "MDU6SXNzdWUzMzkyMzMxMDA=", "number": 239, "title": "Feedback on error message", "user": {"login": "loganasherjones", "id": 3633332, "node_id": "MDQ6VXNlcjM2MzMzMzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/3633332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/loganasherjones", "html_url": "https://github.com/loganasherjones", "followers_url": "https://api.github.com/users/loganasherjones/followers", "following_url": "https://api.github.com/users/loganasherjones/following{/other_user}", "gists_url": "https://api.github.com/users/loganasherjones/gists{/gist_id}", "starred_url": "https://api.github.com/users/loganasherjones/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/loganasherjones/subscriptions", "organizations_url": "https://api.github.com/users/loganasherjones/orgs", "repos_url": "https://api.github.com/users/loganasherjones/repos", "events_url": "https://api.github.com/users/loganasherjones/events{/privacy}", "received_events_url": "https://api.github.com/users/loganasherjones/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-08T15:08:05Z", "updated_at": "2018-07-16T09:23:32Z", "closed_at": "2018-07-16T09:23:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. I had a strange bug that caused me a lot of frustration. This may be solved by the new plugin work you've been doing but here is my setup:\r\n\r\n1. apispec - v0.38.0 (I'm doing something weird and haven't fixed it to update yet)\r\n2. Using tornado\r\n\r\nI was intermittently failing when calling `add_path`. The error I was getting was:\r\n\r\n```python\r\nAPISpecError('Path template is not specified')\r\n```\r\n\r\nThe core problem was, I had a method definition as the following:\r\n\r\n```python\r\n@coroutine\r\ndef post(self, *args, **kwargs):\r\n    pass\r\n```\r\n\r\nThe `*args` and `**kwargs` should never have been there but got populated by my editor automatically. At any rate, this came down to line 95 in `ext/tornado.py`. The type error that was generated was swallowed during the `add_path` call masking the problem a bit.\r\n\r\nEven more curious is the fact that the failure was not consistent. It might be something wonky with my environment, but at some point, the following line was returning different output:\r\n\r\n```python\r\nargs = list(inspect.signature(method).parameters.keys())[1:]\r\n```\r\n\r\nSometimes the output of this function would be `['args', 'kwargs']` and other times it would be `[]`. I did some initial testing to try to replicate the problem in a stripped down environment, but could never reproduce. \r\n\r\nThis turned out to be a little longer than I expected. Honestly, I'm not sure what I would expect you to do about it, except maybe point me more in the right direction with a more helpful error message?\r\n\r\nThanks so much for the library! It makes my life much easier, and I appreciate all the hard work. Let me know if I can help fix this problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/234", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/234/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/234/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/234", "id": 338262727, "node_id": "MDU6SXNzdWUzMzgyNjI3Mjc=", "number": 234, "title": "`to_yaml` and `validate_spec` fails when using the `BasePlugin`", "user": {"login": "TheGrandmother", "id": 5517562, "node_id": "MDQ6VXNlcjU1MTc1NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5517562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheGrandmother", "html_url": "https://github.com/TheGrandmother", "followers_url": "https://api.github.com/users/TheGrandmother/followers", "following_url": "https://api.github.com/users/TheGrandmother/following{/other_user}", "gists_url": "https://api.github.com/users/TheGrandmother/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheGrandmother/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheGrandmother/subscriptions", "organizations_url": "https://api.github.com/users/TheGrandmother/orgs", "repos_url": "https://api.github.com/users/TheGrandmother/repos", "events_url": "https://api.github.com/users/TheGrandmother/events{/privacy}", "received_events_url": "https://api.github.com/users/TheGrandmother/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187047, "node_id": "MDU6TGFiZWwxMzkxODcwNDc=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-04T12:47:55Z", "updated_at": "2018-07-15T21:17:56Z", "closed_at": "2018-07-15T21:17:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get a `AttributeError: 'Path' object has no attribute 'items'` when I try to use the `to_yaml` on a spec that uses a `BasePlugin` to handle path docstrings.\r\n\r\nI am running apispec version 0.39.0 and python version 3.6.5\r\n\r\nThis is the little plugin that I'm using (from the docs):\r\n```python\r\nclass DocPlugin(BasePlugin):\r\n\r\n    def init_spec(self, spec):\r\n        super(DocPlugin, self).init_spec(spec)\r\n        self.openapi_major_version = spec.openapi_version.major\r\n\r\n    def path_helper(self, path, func, **kwargs):\r\n        operations = load_operations_from_docstring(func.__doc__)\r\n        # Apply conditional processing\r\n        if self.openapi_major_version < 3:\r\n            pass\r\n        else:\r\n            pass\r\n        return Path(path=path, operations=operations)\r\n```\r\n\r\nThe path handler function looks like this:\r\n```python\r\n    async def get_task(self, request, name):\r\n        '''test.\r\n        ---\r\n        get:\r\n            responses:\r\n                200:\r\n                    schema: 'TaskSchema'\r\n        '''\r\n        try:\r\n            result = await self.repository.get_task_by_name(name)\r\n            return response.json(result)\r\n        except TaskNotFound as err:\r\n            return response.json(err.message, status=404)\r\n```\r\n\r\nAnd this is the part where I generate the the spec:\r\n```python\r\n        self.spec = APISpec(\r\n            title='Matomatic Sandbox',\r\n            version='1.0.0',\r\n            openapi_version='3.0',\r\n            plugins=[\r\n                    DocPlugin(),\r\n                    'apispec.ext.marshmallow'\r\n            ])\r\n\r\n        self.spec.definition('Task', schema=TaskSchema)\r\n        self.spec.add_path('/task/{name}', func=self.get_task)\r\n        print(self.spec.to_yaml())\r\n        self.spec.validate_spec()\r\n```\r\n\r\nIt fails with the following full stacktrace when the `to_yaml` is present:\r\n```\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 133, in <module>\r\n    App().get_app().run('127.0.0.1', 9090, debug=True)\r\n  File \"app.py\", line 105, in __init__\r\n    print(self.spec.to_yaml())\r\n  File \"/usr/local/lib/python3.6/dist-packages/apispec/core.py\", line 196, in to_yaml\r\n    return yaml.dump(self.to_dict(), Dumper=YAMLDumper)\r\n  File \"/home/grandmother/.local/lib/python3.6/site-packages/yaml/__init__.py\", line 200, in dump\r\n    return dump_all([data], stream, Dumper=Dumper, **kwds)\r\n  File \"/home/grandmother/.local/lib/python3.6/site-packages/yaml/__init__.py\", line 188, in dump_all\r\n    dumper.represent(data)\r\n  File \"/home/grandmother/.local/lib/python3.6/site-packages/yaml/representer.py\", line 26, in represent\r\n    node = self.represent_data(data)\r\n  File \"/home/grandmother/.local/lib/python3.6/site-packages/yaml/representer.py\", line 47, in represent_data\r\n    node = self.yaml_representers[data_types[0]](self, data)\r\n  File \"/home/grandmother/.local/lib/python3.6/site-packages/yaml/representer.py\", line 205, in represent_dict\r\n    return self.represent_mapping('tag:yaml.org,2002:map', data)\r\n  File \"/home/grandmother/.local/lib/python3.6/site-packages/yaml/representer.py\", line 116, in represent_mapping\r\n    node_value = self.represent_data(item_value)\r\n  File \"/home/grandmother/.local/lib/python3.6/site-packages/yaml/representer.py\", line 47, in represent_data\r\n    node = self.yaml_representers[data_types[0]](self, data)\r\n  File \"/usr/local/lib/python3.6/dist-packages/apispec/core.py\", line 453, in _represent_dict\r\n    return dumper.represent_mapping('tag:yaml.org,2002:map', instance.items())\r\n  File \"/home/grandmother/.local/lib/python3.6/site-packages/yaml/representer.py\", line 115, in represent_mapping\r\n    node_key = self.represent_data(item_key)\r\n  File \"/home/grandmother/.local/lib/python3.6/site-packages/yaml/representer.py\", line 47, in represent_data\r\n    node = self.yaml_representers[data_types[0]](self, data)\r\n  File \"/usr/local/lib/python3.6/dist-packages/apispec/core.py\", line 453, in _represent_dict\r\n    return dumper.represent_mapping('tag:yaml.org,2002:map', instance.items())\r\nAttributeError: 'Path' object has no attribute 'items'\r\n```\r\n\r\nIf the `to_yaml` line is commented out it fails with this stack trace:\r\n```\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 133, in <module>\r\n    App().get_app().run('127.0.0.1', 9090, debug=True)\r\n  File \"app.py\", line 106, in __init__\r\n    validate_spec(self.spec)\r\n  File \"/usr/local/lib/python3.6/dist-packages/apispec/utils.py\", line 114, in validate_spec\r\n    prance.BaseParser(spec_string=json.dumps(spec.to_dict()), **parser_kwargs)\r\n  File \"/usr/lib/python3.6/json/__init__.py\", line 231, in dumps\r\n    return _default_encoder.encode(obj)\r\n  File \"/usr/lib/python3.6/json/encoder.py\", line 199, in encode\r\n    chunks = self.iterencode(o, _one_shot=True)\r\n  File \"/usr/lib/python3.6/json/encoder.py\", line 257, in iterencode\r\n    return _iterencode(o, 0)\r\nTypeError: keys must be a string\r\n```\r\n\r\nIf i remove the `DocPlugin()` from the plugin list it all works. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/227", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/227/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/227/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/227", "id": 332063154, "node_id": "MDU6SXNzdWUzMzIwNjMxNTQ=", "number": 227, "title": "Add support for `summary` and `description` fields for paths", "user": {"login": "timakro", "id": 8438790, "node_id": "MDQ6VXNlcjg0Mzg3OTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8438790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timakro", "html_url": "https://github.com/timakro", "followers_url": "https://api.github.com/users/timakro/followers", "following_url": "https://api.github.com/users/timakro/following{/other_user}", "gists_url": "https://api.github.com/users/timakro/gists{/gist_id}", "starred_url": "https://api.github.com/users/timakro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timakro/subscriptions", "organizations_url": "https://api.github.com/users/timakro/orgs", "repos_url": "https://api.github.com/users/timakro/repos", "events_url": "https://api.github.com/users/timakro/events{/privacy}", "received_events_url": "https://api.github.com/users/timakro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187049, "node_id": "MDU6TGFiZWwxMzkxODcwNDk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 139187050, "node_id": "MDU6TGFiZWwxMzkxODcwNTA=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-06-13T16:05:10Z", "updated_at": "2019-02-05T00:52:16Z", "closed_at": "2019-02-05T00:52:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Documented [here](https://swagger.io/docs/specification/paths-and-operations/):\r\n\r\n> Paths may have an optional short summary and a longer description for documentation purposes. This information is supposed to be relevant to all operations in this path. description can be multi-line and supports Markdown (CommonMark) for rich text representation. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/226", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/226/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/226/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/226", "id": 331562123, "node_id": "MDU6SXNzdWUzMzE1NjIxMjM=", "number": 226, "title": "Marshmallow schema: Swagger-style inheritance", "user": {"login": "timakro", "id": 8438790, "node_id": "MDQ6VXNlcjg0Mzg3OTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8438790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timakro", "html_url": "https://github.com/timakro", "followers_url": "https://api.github.com/users/timakro/followers", "following_url": "https://api.github.com/users/timakro/following{/other_user}", "gists_url": "https://api.github.com/users/timakro/gists{/gist_id}", "starred_url": "https://api.github.com/users/timakro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timakro/subscriptions", "organizations_url": "https://api.github.com/users/timakro/orgs", "repos_url": "https://api.github.com/users/timakro/repos", "events_url": "https://api.github.com/users/timakro/events{/privacy}", "received_events_url": "https://api.github.com/users/timakro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-12T12:16:28Z", "updated_at": "2019-02-05T07:55:55Z", "closed_at": "2019-02-05T01:00:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently when a marshmallow schema is inherited and registered on the specification the fields from the parent are just copied. I suggest to use `allOf` for inheritance like documented [here](https://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/221", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/221/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/221/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/221/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/221", "id": 327807501, "node_id": "MDU6SXNzdWUzMjc4MDc1MDE=", "number": 221, "title": "Issue with tests involving response_helpers due to invalid docstrings", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187047, "node_id": "MDU6TGFiZWwxMzkxODcwNDc=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-30T16:31:17Z", "updated_at": "2018-06-06T09:17:37Z", "closed_at": "2018-06-06T09:17:36Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I was struck by this while working on https://github.com/marshmallow-code/apispec/pull/219. But I think the test failure is not due to the change in the plugin interface.\r\n\r\nI wonder how this feature is supposed to work. Maybe a test is missing.\r\n\r\nThe code in core.py reads:\r\n\r\n```python\r\n        # Process response helpers for any path operations defined.\r\n        # Rule is that method + http status exist in both operations and helpers\r\n        methods = set(iterkeys(path.operations)) & set(iterkeys(self._response_helpers))\r\n        for method in methods:\r\n            responses = path.operations[method]['responses']\r\n            statuses = set(iterkeys(responses)) & set(iterkeys(self._response_helpers[method]))\r\n            for status_code in statuses:\r\n                for func in self._response_helpers[method][status_code]:\r\n                    responses[status_code].update(\r\n                        func(self, **kwargs)\r\n                    )\r\n```\r\n\r\nI think the issue here is that it assumes `responses[status_code]` is a `dict`, which it may not be. In this example, it comes as a string `'description:some data'`.\r\n\r\nI've pushed a branch with a [failing test](https://github.com/marshmallow-code/apispec/commit/5139b89fd4131442e89992b3d6bc1b05d6360a2a) showing this.\r\n\r\nI'm not sure what to think about this. Perhaps the issue is in the step before, the path parser that fails to parse the YAML docstring describing the operation response.\r\n\r\nI'm a bit confused. I don't use YAML docstrings in my code, as I use another extension to pass everything as `dict`, so this is not the part that I know best. Hence this pretty blurry question.\r\n\r\nFiling this here for now. It kind of blocks https://github.com/marshmallow-code/apispec/pull/219 unless I either modify the test to remove offending feature, or modify the code to introduce a clumsy logic so as to avoid triggering this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/220", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/220/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/220/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/220", "id": 327302464, "node_id": "MDU6SXNzdWUzMjczMDI0NjQ=", "number": 220, "title": "Unable to document json fields", "user": {"login": "seeb0h", "id": 4989990, "node_id": "MDQ6VXNlcjQ5ODk5OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4989990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seeb0h", "html_url": "https://github.com/seeb0h", "followers_url": "https://api.github.com/users/seeb0h/followers", "following_url": "https://api.github.com/users/seeb0h/following{/other_user}", "gists_url": "https://api.github.com/users/seeb0h/gists{/gist_id}", "starred_url": "https://api.github.com/users/seeb0h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seeb0h/subscriptions", "organizations_url": "https://api.github.com/users/seeb0h/orgs", "repos_url": "https://api.github.com/users/seeb0h/repos", "events_url": "https://api.github.com/users/seeb0h/events{/privacy}", "received_events_url": "https://api.github.com/users/seeb0h/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-29T12:39:26Z", "updated_at": "2018-05-29T14:01:15Z", "closed_at": "2018-05-29T14:01:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using apispec with marshmallow and flask.\r\n\r\nI would like to produce an openapi json with documented fields for my json request. Like [here](https://rebilly.github.io/RebillyAPI/#/paths/~1contacts/post) (`customerID` => \"The contact customer ID\"):\r\n\r\n\r\nI can't find a way to do it in the documentation and examples. Is there with a specific docstring to add in my marshmallow schemas ? Which one ? \r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/218", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/218/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/218/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/218", "id": 326836903, "node_id": "MDU6SXNzdWUzMjY4MzY5MDM=", "number": 218, "title": "Add recursive merging in APISpec.to_dict", "user": {"login": "b0g3r", "id": 19777948, "node_id": "MDQ6VXNlcjE5Nzc3OTQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/19777948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b0g3r", "html_url": "https://github.com/b0g3r", "followers_url": "https://api.github.com/users/b0g3r/followers", "following_url": "https://api.github.com/users/b0g3r/following{/other_user}", "gists_url": "https://api.github.com/users/b0g3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/b0g3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b0g3r/subscriptions", "organizations_url": "https://api.github.com/users/b0g3r/orgs", "repos_url": "https://api.github.com/users/b0g3r/repos", "events_url": "https://api.github.com/users/b0g3r/events{/privacy}", "received_events_url": "https://api.github.com/users/b0g3r/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-27T18:10:04Z", "updated_at": "2018-06-10T16:27:42Z", "closed_at": "2018-06-10T16:27:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Open API spec 3.0.1 `securityDefinitions` was renaming and moved to `components`\r\n\r\nAPISpec class allowed add additional fields to swagger file with kwarg-parameter `options`. I try add `components` with security definition to kwarg, but this rewrite schema definitions (in swagger 3.0.1 schema definitions also in `components`)\r\n\r\nCurrently in [APISpec.to_dict](https://github.com/marshmallow-code/apispec/blob/dev/apispec/core.py#L167) used dict.update method, but this works without recursion and rewrite nested dict.\r\n\r\nHow about replace this method to recursive merging (e.g. https://gist.github.com/angstwad/bf22d1822c38a92ec0a9)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/215", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/215/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/215/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/215/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/215", "id": 324874008, "node_id": "MDU6SXNzdWUzMjQ4NzQwMDg=", "number": 215, "title": "Bottle plugin path regex bug when using argument type in the url", "user": {"login": "tshuval", "id": 3424362, "node_id": "MDQ6VXNlcjM0MjQzNjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/3424362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshuval", "html_url": "https://github.com/tshuval", "followers_url": "https://api.github.com/users/tshuval/followers", "following_url": "https://api.github.com/users/tshuval/following{/other_user}", "gists_url": "https://api.github.com/users/tshuval/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshuval/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshuval/subscriptions", "organizations_url": "https://api.github.com/users/tshuval/orgs", "repos_url": "https://api.github.com/users/tshuval/repos", "events_url": "https://api.github.com/users/tshuval/events{/privacy}", "received_events_url": "https://api.github.com/users/tshuval/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187047, "node_id": "MDU6TGFiZWwxMzkxODcwNDc=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 139187050, "node_id": "MDU6TGFiZWwxMzkxODcwNTA=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-21T10:56:38Z", "updated_at": "2018-11-03T14:32:47Z", "closed_at": "2018-11-03T14:32:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "When parsing the path of a bottle app in the form: `/path/to/<resourceId:int>`, the generated API path becomes `/path/to/{int}`.\r\n\r\nreproduce:\r\n\r\n    import re\r\n    RE_URL = re.compile(r'<(?:[^:<>]+:)?([^<>]+)>')\r\n    path = '/path/to/<resourceId:int>'\r\n    RE_URL.sub(r'{\\1}', path)  # --> '/path/to/{int}'\r\n\r\nThis can be fixed easily by replacing RE_URL with: `re.compile(r'<([^:]+)(?::.+)?>')`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/214", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/214/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/214/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/214", "id": 324674490, "node_id": "MDU6SXNzdWUzMjQ2NzQ0OTA=", "number": 214, "title": "Support Pyramid Framework", "user": {"login": "ergo", "id": 33021, "node_id": "MDQ6VXNlcjMzMDIx", "avatar_url": "https://avatars3.githubusercontent.com/u/33021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ergo", "html_url": "https://github.com/ergo", "followers_url": "https://api.github.com/users/ergo/followers", "following_url": "https://api.github.com/users/ergo/following{/other_user}", "gists_url": "https://api.github.com/users/ergo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ergo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ergo/subscriptions", "organizations_url": "https://api.github.com/users/ergo/orgs", "repos_url": "https://api.github.com/users/ergo/repos", "events_url": "https://api.github.com/users/ergo/events{/privacy}", "received_events_url": "https://api.github.com/users/ergo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-20T01:18:36Z", "updated_at": "2018-05-22T00:47:03Z", "closed_at": "2018-05-22T00:47:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI've needed to support Pyramid so I wrote extension for inspecting views in a pyramid way (not requiring global objects). I've created PR https://github.com/marshmallow-code/apispec/pull/213 with everything necessary.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/212", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/212/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/212/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/212", "id": 323492444, "node_id": "MDU6SXNzdWUzMjM0OTI0NDQ=", "number": 212, "title": "Recursive dependency causes RecursionError", "user": {"login": "KPilnacek", "id": 14175527, "node_id": "MDQ6VXNlcjE0MTc1NTI3", "avatar_url": "https://avatars2.githubusercontent.com/u/14175527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KPilnacek", "html_url": "https://github.com/KPilnacek", "followers_url": "https://api.github.com/users/KPilnacek/followers", "following_url": "https://api.github.com/users/KPilnacek/following{/other_user}", "gists_url": "https://api.github.com/users/KPilnacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/KPilnacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KPilnacek/subscriptions", "organizations_url": "https://api.github.com/users/KPilnacek/orgs", "repos_url": "https://api.github.com/users/KPilnacek/repos", "events_url": "https://api.github.com/users/KPilnacek/events{/privacy}", "received_events_url": "https://api.github.com/users/KPilnacek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-05-16T07:03:50Z", "updated_at": "2018-09-21T13:51:35Z", "closed_at": "2018-09-21T13:51:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nat first thanks for this package \ud83d\udc4d. I saves me a lot of effort with docs \ud83d\ude42 .\r\n\r\nI have a schema as follows\r\n```python\r\nfrom marshmallow import Schema, fields\r\n\r\nclass OneDataPointSchema(Schema):\r\n    content = fields.Nested('self',\r\n                            many=True,\r\n                            exclude=('content', ),\r\n                            )\r\n```\r\n and everything works as expected, however, my data have tree structure with possibly infinite recursive depth (in reality about 2 - 3 levels are more than enough). Thus, I need to remove the `exclude` parameter. In that moment, the docs fails to render due to `RecursionError` (I was fine with that as the documentation is not that necessary). However, after upgrading to 0.37.0 (particularly in 3b6a2da6d13b8252217c7f60d49c38a29965359c) the `RecursionError` appears even before the documentation is generated (our code is than broken \ud83d\ude41).\r\n\r\nIs there a way to limit the recursion depth (by configuring `apispec` in particular)? I understand that rendering infinite recursion is impractical.\r\n\r\nThanks for advices\r\nKrystof\r\n\r\nP.S. FYI I'm tomorrow leaving for vacation for 3 weeks, thus please apologise my inactivity in that period. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/209", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/209/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/209/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/209", "id": 322135816, "node_id": "MDU6SXNzdWUzMjIxMzU4MTY=", "number": 209, "title": "Resolve an array of schema objects in parameters", "user": {"login": "cvlong", "id": 7062355, "node_id": "MDQ6VXNlcjcwNjIzNTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7062355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cvlong", "html_url": "https://github.com/cvlong", "followers_url": "https://api.github.com/users/cvlong/followers", "following_url": "https://api.github.com/users/cvlong/following{/other_user}", "gists_url": "https://api.github.com/users/cvlong/gists{/gist_id}", "starred_url": "https://api.github.com/users/cvlong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cvlong/subscriptions", "organizations_url": "https://api.github.com/users/cvlong/orgs", "repos_url": "https://api.github.com/users/cvlong/repos", "events_url": "https://api.github.com/users/cvlong/events{/privacy}", "received_events_url": "https://api.github.com/users/cvlong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "cvlong", "id": 7062355, "node_id": "MDQ6VXNlcjcwNjIzNTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7062355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cvlong", "html_url": "https://github.com/cvlong", "followers_url": "https://api.github.com/users/cvlong/followers", "following_url": "https://api.github.com/users/cvlong/following{/other_user}", "gists_url": "https://api.github.com/users/cvlong/gists{/gist_id}", "starred_url": "https://api.github.com/users/cvlong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cvlong/subscriptions", "organizations_url": "https://api.github.com/users/cvlong/orgs", "repos_url": "https://api.github.com/users/cvlong/repos", "events_url": "https://api.github.com/users/cvlong/events{/privacy}", "received_events_url": "https://api.github.com/users/cvlong/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cvlong", "id": 7062355, "node_id": "MDQ6VXNlcjcwNjIzNTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7062355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cvlong", "html_url": "https://github.com/cvlong", "followers_url": "https://api.github.com/users/cvlong/followers", "following_url": "https://api.github.com/users/cvlong/following{/other_user}", "gists_url": "https://api.github.com/users/cvlong/gists{/gist_id}", "starred_url": "https://api.github.com/users/cvlong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cvlong/subscriptions", "organizations_url": "https://api.github.com/users/cvlong/orgs", "repos_url": "https://api.github.com/users/cvlong/repos", "events_url": "https://api.github.com/users/cvlong/events{/privacy}", "received_events_url": "https://api.github.com/users/cvlong/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-05-11T01:13:48Z", "updated_at": "2018-05-14T21:31:28Z", "closed_at": "2018-05-14T21:31:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I see that the marshmallow plugin currently resolves an array of schema items in the response, but is there existing functionality to also do this in the request?\r\n\r\nI'd like to be able to define my request parameters a docstring like this:\r\n\r\n```\r\nspec.definition('Schema', schema=Schema)\r\n\r\ndef example():\r\n    \"\"\"Example view that accepts an array objects \r\n    ---\r\n    post:\r\n        parameters:\r\n            - in: body\r\n              schema:\r\n                type: array\r\n                items: Schema\r\n    \"\"\"\r\n```\r\n\r\nSo that `['parameters'][0]['schema']` will produce more explicit results like `{'type': 'array', 'items': {'$ref': '#/definitions/Schema'}}` rather than `{'type': 'array', 'items': 'Schema'}`.\r\n\r\nDoes this functionality already exist? If not, I am happy to submit a PR to address this. Thank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/208", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/208/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/208/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/208", "id": 321552605, "node_id": "MDU6SXNzdWUzMjE1NTI2MDU=", "number": 208, "title": "Add description to fields of marshmallow generated schema", "user": {"login": "UrKr", "id": 7669179, "node_id": "MDQ6VXNlcjc2NjkxNzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7669179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/UrKr", "html_url": "https://github.com/UrKr", "followers_url": "https://api.github.com/users/UrKr/followers", "following_url": "https://api.github.com/users/UrKr/following{/other_user}", "gists_url": "https://api.github.com/users/UrKr/gists{/gist_id}", "starred_url": "https://api.github.com/users/UrKr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/UrKr/subscriptions", "organizations_url": "https://api.github.com/users/UrKr/orgs", "repos_url": "https://api.github.com/users/UrKr/repos", "events_url": "https://api.github.com/users/UrKr/events{/privacy}", "received_events_url": "https://api.github.com/users/UrKr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187049, "node_id": "MDU6TGFiZWwxMzkxODcwNDk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 160865308, "node_id": "MDU6TGFiZWwxNjA4NjUzMDg=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-05-09T12:35:54Z", "updated_at": "2018-07-29T16:10:31Z", "closed_at": "2018-07-29T16:10:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is it possible to add additional fields to OpenAPI schemas generated via marshmallow `Schema`. One example would be descriptions for fields. \r\n\r\n```\r\nclass ASchema(Schema):\r\n    a = fields.Int()\r\n```\r\n```\r\n    ASchema:\r\n      properties:\r\n        a:\r\n          type: integer\r\n          description: 'description for a field'\r\n      type: object\r\n      description: 'description for a schema'\r\n```\r\nCurrently docstrings on schemas are ignored, correct? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/207", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/207/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/207/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/207", "id": 321364311, "node_id": "MDU6SXNzdWUzMjEzNjQzMTE=", "number": 207, "title": "RFC: Use classes for plugins", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 927005179, "node_id": "MDU6TGFiZWw5MjcwMDUxNzk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/backwards%20incompat", "name": "backwards incompat", "color": "eb6420", "default": false, "description": ""}, {"id": 160865308, "node_id": "MDU6TGFiZWwxNjA4NjUzMDg=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 20, "created_at": "2018-05-08T22:09:44Z", "updated_at": "2018-06-28T11:53:32Z", "closed_at": "2018-06-28T11:53:32Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I think things would be simpler if plugins were classes.\r\n\r\nI read in the comments that the plugin system is copied on Sphinx. I don't know why Sphinx does it like this, but I don't see the benefit in apispec.\r\n\r\nSince plugins are only referred to by their path as string, there is no direct access to them. So their configuration can be a bit awkward:\r\n\r\n1/ Mutating a global variable in the plugin file.\r\n\r\n2/ Calling a function in the plugin file that will have to store either in a global in the file (which is equivalent to case 1 above) or somewhere else (like `map_to_swagger_type` stores the mapping in the field's `__swagger_field_mapping` attribute).\r\n\r\n3/ Acting upon the spec object. This is the case for `schema_name_resolver`, which is used only in marshmallow plugin, so shouldn't be exposed to `spec`.\r\n\r\nLikewise, storage is more complicated as it is done in the `spec` object. The list of schema definitions is stored in `spec.plugins['apispec.ext.marshmallow']['refs']` which is the reason why the `spec` object is passed to all functions in the plugin.\r\n\r\nWith plugin classes, the plugin object would keep its storage internal. It wouldn't need globals. It could be configured at instantiation before (or even after, if needed) being passed to the `spec` object.\r\n\r\nA plugin would just have to define such methods:\r\n\r\n```python\r\nclass MyApispecPlugin(BaseApispecPlugin):\r\n    def definition_helper(...):\r\n        [...]\r\n\r\n    def path_helper(...):\r\n        [...]\r\n\r\n    def operation_helper(...):\r\n        [...]\r\n```\r\n\r\nOf course, `BaseApispecPlugin` would provide no-op methods so that child classes would only add needed methods.\r\n\r\nThen, no need to store stuff in the spec object. Variables would be plugin class attributes, modifiable by direct access or plugin object method calls (this is plugin implementation detail). No need to expose plugin internal details to `spec` (`schema_name_resolver`). No need to add attributes to the field classes (schema -> swagger type mapping can be stored in a plugin object attribute).\r\n\r\nHere's what setup would look like:\r\n\r\n```python\r\n#\u00a0Instantiate and configure plugin\r\nma_plugin = apispec.ext.marshmallow.MarshmallowPlugin(\r\n    schema_name_resolver = my_func\r\n)\r\n\r\n# Create an APISpec\r\nspec = APISpec(\r\n    title='Swagger Petstore',\r\n    version='1.0.0',\r\n    plugins=[\r\n        apispec.ext.flask.FlaskPlugin(),  #\u00a0No specific config to do beforehand\r\n        ma_plugin,  # Configured above\r\n    ],\r\n)\r\n```\r\n\r\n@sloria, is there a reason I'm missing for the current plugin interface?\r\n\r\nThis refactor would solve part of #206.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/206", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/206/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/206/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/206", "id": 320971139, "node_id": "MDU6SXNzdWUzMjA5NzExMzk=", "number": 206, "title": "Make spec mandatory parameter to ext/marshmallow/swagger.py functions", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-07T21:51:48Z", "updated_at": "2018-07-16T13:31:30Z", "closed_at": "2018-07-16T13:31:30Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "(See https://github.com/marshmallow-code/apispec/pull/197#discussion_r179862048)\r\n\r\nMost functions in swagger.py take an optional `spec` attribute, either to use it or to pass it down to another function. It shouldn't be optional.\r\n\r\nNow that version 2 and 3 of the spec are supported, optional sort of means version 2 by default. There is no reason to give priority to a version, so it should be explicit.\r\n\r\nThis breaks a hell of a lot of tests, but it shouldn't break so many use cases, as the entry points definition/path/operation helpers all receive a `spec` parameter.\r\n\r\nI tried to work on this. In `test_swagger.py`, I created a fixture that provides a `spec` in both v2 and v3.\r\n\r\n```python\r\n@pytest.fixture(params=['2.0.0', '3.0.0'])\r\ndef spec(request):\r\n    return APISpec(\r\n        title='Pets',\r\n        version='0.1',\r\n        plugins=['apispec.ext.marshmallow'],\r\n        openapi_version=request.param\r\n    )\r\n```\r\n\r\nPassing this to each test function means it is run twice, once for each version. It's an important duplication as in most cases, the whole processing does not depend on the version, but it is fast anyway and since anything could change between versions, it makes sense to test all functions on both versions rather than create dedicated `_v3` test functions to test specific parts of the code.\r\n\r\nAnother approach would be to create two specs and parametrize only the test functions for which it is known to be useful:\r\n\r\n```python\r\nspec_v2 = APISpec(\r\n        title='Pets',\r\n        version='0.1',\r\n        plugins=['apispec.ext.marshmallow'],\r\n        openapi_version='2.0.0'\r\n    )\r\n\r\nspec_v3 = APISpec(\r\n        title='Pets',\r\n        version='0.1',\r\n        plugins=['apispec.ext.marshmallow'],\r\n        openapi_version='3.0.0'\r\n    )\r\n\r\n@pytest.mark.parametrize('spec', [spec_v2, spec_v3])\r\ndef test_function(spec):\r\n    [...]\r\n```\r\n\r\n------------------------------------------------\r\n\r\nFurther refactoring.\r\n\r\nThe whole `spec` object might not be needed. Currently, it is used to pass\r\n- OpenAPI version\r\n- list of definitions (refs)\r\n- a `schema_name_resolver` callable\r\n\r\n(Thinking out loud) It could be worth investigating an alternative solution\r\n- Pass OpenAPI major version explicitly\r\n- Pass list of definitions explicitly (and optionally)\r\n- Register the `schema_name_resolver` another way (I don't see how, right now, but it seems strange anyway to register it on the spec object while it is used only in the marshmallow plugin)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/204", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/204/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/204/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/204", "id": 320640778, "node_id": "MDU6SXNzdWUzMjA2NDA3Nzg=", "number": 204, "title": "Issue with a simple aiohttp docstring", "user": {"login": "asyd", "id": 334868, "node_id": "MDQ6VXNlcjMzNDg2OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/334868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asyd", "html_url": "https://github.com/asyd", "followers_url": "https://api.github.com/users/asyd/followers", "following_url": "https://api.github.com/users/asyd/following{/other_user}", "gists_url": "https://api.github.com/users/asyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/asyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asyd/subscriptions", "organizations_url": "https://api.github.com/users/asyd/orgs", "repos_url": "https://api.github.com/users/asyd/repos", "events_url": "https://api.github.com/users/asyd/events{/privacy}", "received_events_url": "https://api.github.com/users/asyd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187052, "node_id": "MDU6TGFiZWwxMzkxODcwNTI=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-07T00:00:08Z", "updated_at": "2018-10-06T21:28:22Z", "closed_at": "2018-10-06T21:28:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello folks, \r\n\r\nI'm trying to document an aiohttp API in a very simple way, here my code:\r\n\r\n``` python\r\nfrom aiohttp import web\r\nfrom apispec import APISpec\r\n\r\nspec = APISpec(\r\n    title='Test app',\r\n    version='0.0.1',\r\n    info=dict(\r\n        author='asyd'\r\n    )\r\n)\r\n\r\nroutes = web.RouteTableDef()\r\n\r\n\r\n@routes.get('/')\r\nasync def home(request):\r\n    \"\"\"\r\n    ---\r\n    get:\r\n        description: Get Hello world\r\n        responses:\r\n            200:\r\n                description: The text \"Hello world\"\r\n    \"\"\"\r\n    return web.Response(text=\"Hello world\")\r\n\r\n\r\n@routes.get('/doc')\r\nasync def get_doc(request):\r\n    return web.json_response(spec.to_dict())\r\n\r\n\r\nif __name__ == '__main__':\r\n    app = web.Application()\r\n    app.add_routes(routes)\r\n    spec.add_path(path='/', func=home)\r\n    spec.add_path(\r\n        path='/test',\r\n        operations=dict(\r\n            get=dict(\r\n                description=\"Get Hello world\",\r\n                responses={\r\n                    '200': 'Hello world',\r\n                }\r\n            )\r\n        )\r\n    )\r\n    web.run_app(app)\r\n```\r\n\r\nHowever, here the response:\r\n``` json\r\n{\r\n  \"info\": {\r\n    \"title\": \"Test app\",\r\n    \"version\": \"0.0.1\",\r\n    \"author\": \"asyd\"\r\n  },\r\n  \"paths\": {\r\n    \"/\": {},\r\n    \"/test\": {\r\n      \"get\": {\r\n        \"description\": \"Get Hello world\",\r\n        \"responses\": {\r\n          \"200\": \"Hello world\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"tags\": [],\r\n  \"swagger\": \"2.0\",\r\n  \"definitions\": {},\r\n  \"parameters\": {}\r\n}\r\n```\r\n\r\nAs you can see, the docstring from hello function is not parsed, so I'm wondering what I missed \r\n\r\nJust in case:\r\n\r\n``` shell\r\npipenv graph\r\naiohttp==3.2.0\r\n  - async-timeout [required: >=3.0,<4.0, installed: 3.0.0]\r\n  - attrs [required: >=17.3.0, installed: 18.1.0]\r\n  - chardet [required: >=2.0,<4.0, installed: 3.0.4]\r\n  - idna-ssl [required: >=1.0, installed: 1.0.1]\r\n    - idna [required: >=2.0, installed: 2.6]\r\n  - multidict [required: <5.0,>=4.0, installed: 4.3.1]\r\n  - yarl [required: <2.0,>=1.0, installed: 1.2.3]\r\n    - idna [required: >=2.0, installed: 2.6]\r\n    - multidict [required: >=4.0, installed: 4.3.1]\r\napispec==0.35.0\r\n  - PyYAML [required: >=3.10, installed: 3.12]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/201", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/201/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/201/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/201", "id": 320229184, "node_id": "MDU6SXNzdWUzMjAyMjkxODQ=", "number": 201, "title": "Why doesn't Marshmallow Dict field resolve to additionalProperties?", "user": {"login": "UrKr", "id": 7669179, "node_id": "MDQ6VXNlcjc2NjkxNzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7669179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/UrKr", "html_url": "https://github.com/UrKr", "followers_url": "https://api.github.com/users/UrKr/followers", "following_url": "https://api.github.com/users/UrKr/following{/other_user}", "gists_url": "https://api.github.com/users/UrKr/gists{/gist_id}", "starred_url": "https://api.github.com/users/UrKr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/UrKr/subscriptions", "organizations_url": "https://api.github.com/users/UrKr/orgs", "repos_url": "https://api.github.com/users/UrKr/repos", "events_url": "https://api.github.com/users/UrKr/events{/privacy}", "received_events_url": "https://api.github.com/users/UrKr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-04T10:43:18Z", "updated_at": "2018-05-07T10:16:40Z", "closed_at": "2018-05-07T10:16:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Any Dict field in a schema seems to resolve to just 'type': 'object' in the spec output. Why not to additionalProperties? \r\n\r\n```\r\n\r\nclass ASchema(MM.Schema):\r\n    data = MM.fields.Dict(keys=MM.fields.String(), values=MM.fields.Nested(OtherSchema), required=True)\r\n```\r\n\r\nthe yaml output for:\r\n`\r\nspec.definition('A', ASchema, schema=ASchema)\r\n`\r\nis this: \r\n`data: {type: object}`\r\nWhy not this:\r\n```\r\ndata: {\r\n  type: object,\r\n  additionalProperties: {\r\n    $ref: '#/definitions/A'\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/200", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/200/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/200/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/200", "id": 314164110, "node_id": "MDU6SXNzdWUzMTQxNjQxMTA=", "number": 200, "title": "Using Marshmallow Version 3 causes AttributeError when you follow the docs", "user": {"login": "datadidit", "id": 10933169, "node_id": "MDQ6VXNlcjEwOTMzMTY5", "avatar_url": "https://avatars3.githubusercontent.com/u/10933169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datadidit", "html_url": "https://github.com/datadidit", "followers_url": "https://api.github.com/users/datadidit/followers", "following_url": "https://api.github.com/users/datadidit/following{/other_user}", "gists_url": "https://api.github.com/users/datadidit/gists{/gist_id}", "starred_url": "https://api.github.com/users/datadidit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datadidit/subscriptions", "organizations_url": "https://api.github.com/users/datadidit/orgs", "repos_url": "https://api.github.com/users/datadidit/repos", "events_url": "https://api.github.com/users/datadidit/events{/privacy}", "received_events_url": "https://api.github.com/users/datadidit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-13T16:01:26Z", "updated_at": "2018-04-13T20:32:13Z", "closed_at": "2018-04-13T19:27:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I believe the code causing the issue is below and this should be a simple fix\r\n\r\n```\r\n    if MARSHMALLOW_VERSION_INFO[0] < 3:\r\n        # use getattr in case we're running against older versions of marshmallow.\r\n        dump_to = getattr(field, 'dump_to', None)\r\n        load_from = getattr(field, 'load_from', None)\r\n        return dump_to or load_from or name\r\n    else:\r\n        return field.data_key or name\r\n```\r\n\r\nExample Test\r\n```\r\nfrom apispec import APISpec\r\nfrom marshmallow import Schema, fields\r\n\r\nSPEC = APISpec(\r\n        title=\"Foo Bar\",\r\n        version=\"1.0.0\",\r\n        plugins = [\r\n            'apispec.ext.marshmallow',\r\n            'apispec.ext.flask'\r\n        ]\r\n    )\r\n\r\nclass GistSchema(Schema):\r\n    id = fields.Int(data_key=\"id\")\r\n    content = fields.Str(data_key=\"content\")\r\n\r\ndef test_definition():\r\n    SPEC.definition('Gist', schema=GistSchema)\r\n    print SPEC.to_yaml()\r\n\r\n\r\ntest_definition()\r\n```\r\n\r\nStacktrace:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/mkwyche/workspace/api/tests/test_apispec.py\", line 22, in <module>\r\n    test_definition()\r\n  File \"/Users/mkwyche/workspace/api/tests/test_apispec.py\", line 18, in test_definition\r\n    SPEC.definition('Gist', schema=GistSchema)\r\n  File \"/Users/mkwyche/workspace/python/.env/lib/python2.7/site-packages/apispec/core.py\", line 281, in definition\r\n    ret.update(func(self, name, definition=ret, **kwargs))\r\n  File \"/Users/mkwyche/workspace/python/.env/lib/python2.7/site-packages/apispec/ext/marshmallow/__init__.py\", line 109, in schema_definition_helper\r\n    json_schema = swagger.schema2jsonschema(schema_instance, spec=spec, name=name)\r\n  File \"/Users/mkwyche/workspace/python/.env/lib/python2.7/site-packages/apispec/ext/marshmallow/swagger.py\", line 545, in schema2jsonschema\r\n    return fields2jsonschema(fields, schema, spec=spec, use_refs=use_refs, dump=dump, name=name)\r\n  File \"/Users/mkwyche/workspace/python/.env/lib/python2.7/site-packages/apispec/ext/marshmallow/swagger.py\", line 609, in fields2jsonschema\r\n    observed_field_name = _observed_name(field_obj, field_name)\r\n  File \"/Users/mkwyche/workspace/python/.env/lib/python2.7/site-packages/apispec/ext/marshmallow/swagger.py\", line 102, in _observed_name\r\n    return field.data_key or name\r\nAttributeError: 'String' object has no attribute 'data_key'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/196", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/196/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/196/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/196/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/196", "id": 311506253, "node_id": "MDU6SXNzdWUzMTE1MDYyNTM=", "number": 196, "title": "Documenting callable default", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 160865308, "node_id": "MDU6TGFiZWwxNjA4NjUzMDg=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-05T07:51:52Z", "updated_at": "2018-07-18T02:04:04Z", "closed_at": "2018-07-18T02:04:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "When a default/missing value is a callable, it is called when generating the documentation.\r\n\r\n```python\r\n    if default is not marshmallow.missing:\r\n        if callable(default):\r\n            ret['default'] = default()\r\n        else:\r\n            ret['default'] = default\r\n```\r\n\r\nThis can be wrong if the value of the callable depends on the moment it is called. Typically, if it is `dt.datetime.now`. There should be an opt-out for this allowing to specify an alternative text to write in the docs.\r\n\r\nNot sure how to do that. Maybe a `default_doc` attribute in the Schema that would take precedence over default/missing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/193", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/193/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/193/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/193", "id": 311234091, "node_id": "MDU6SXNzdWUzMTEyMzQwOTE=", "number": 193, "title": "RFC: enforce method order for one endpoint in the spec", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187049, "node_id": "MDU6TGFiZWwxMzkxODcwNDk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 160865308, "node_id": "MDU6TGFiZWwxNjA4NjUzMDg=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}, {"id": 139187050, "node_id": "MDU6TGFiZWwxMzkxODcwNTA=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-04T13:39:22Z", "updated_at": "2018-11-03T14:33:04Z", "closed_at": "2018-11-03T14:33:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "_Although json objects are not ordered, some tools respect the order in the OpanAPI json file to display the spec. Therefore, it makes sense to respect the order desired by the user when writing the spec file. Several PRs are based on this assumption (#86, #87, #189)._\r\n\r\nIt could be nice to enforce the order of the methods for each endpoint. For instance, always present the methods in this order:\r\n\r\n    HTTP_METHODS = ['OPTIONS', 'HEAD', 'GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'TRACE']\r\n\r\nThe order list being a module variable, it could be mutated by the user if another order is required.\r\n\r\nThis feature requires modifications in flask, tornado, and perhaps bottle extensions. More details in https://github.com/marshmallow-code/apispec/pull/189.\r\n\r\nEdit: I'd remove `'TRACE'` from the list as it is not in [`VALID_METHODS`](https://github.com/marshmallow-code/apispec/blob/ea55ad0463b7fe6039d5e6507254682fd3ffdbb3/apispec/core.py#L13).\r\n\r\nEdit again: OpenAPI 3 contains `TRACE` (https://github.com/marshmallow-code/apispec/issues/165#issuecomment-388753808).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/184", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/184/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/184/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/184", "id": 302387596, "node_id": "MDU6SXNzdWUzMDIzODc1OTY=", "number": 184, "title": "Body parameters renamed \"body\"", "user": {"login": "mathewmarcus", "id": 14226006, "node_id": "MDQ6VXNlcjE0MjI2MDA2", "avatar_url": "https://avatars1.githubusercontent.com/u/14226006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathewmarcus", "html_url": "https://github.com/mathewmarcus", "followers_url": "https://api.github.com/users/mathewmarcus/followers", "following_url": "https://api.github.com/users/mathewmarcus/following{/other_user}", "gists_url": "https://api.github.com/users/mathewmarcus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathewmarcus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathewmarcus/subscriptions", "organizations_url": "https://api.github.com/users/mathewmarcus/orgs", "repos_url": "https://api.github.com/users/mathewmarcus/repos", "events_url": "https://api.github.com/users/mathewmarcus/events{/privacy}", "received_events_url": "https://api.github.com/users/mathewmarcus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-05T17:18:47Z", "updated_at": "2018-03-24T17:02:32Z", "closed_at": "2018-03-24T17:02:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When adding a body parameter, i.e. a parameter where `in=\"body\"`, via a docstring, the parameter is automatically renamed to `\"body\"`. \r\n\r\nFor example:\r\n\r\n```python\r\nfrom apispec import APISpec\r\nfrom flask import Flask\r\nfrom marshmallow import Schema, fields\r\nimport json\r\n\r\nspec = APISpec(\r\n    title='Swagger Petstore',\r\n    version='1.0.0',\r\n    plugins=[\r\n        'apispec.ext.flask',\r\n        'apispec.ext.marshmallow',\r\n    ],\r\n)\r\n\r\napp = Flask(__name__)\r\n\r\n\r\nclass CategorySchema(Schema):\r\n    id = fields.Int()\r\n    name = fields.Str(required=True)\r\n\r\n\r\nclass PetSchema(Schema):\r\n    category = fields.Nested(CategorySchema, many=True)\r\n    name = fields.Str()\r\n\r\n\r\n@app.route('/random', methods=['POST'])\r\ndef random_pet():\r\n    \"\"\"A cute furry animal endpoint.\r\n    ---\r\n    post:\r\n        description: Get a random pet\r\n        parameters:\r\n            - name: pet\r\n              required: true\r\n              in: body\r\n              schema: PetSchema\r\n    \"\"\"\r\n    pass\r\n\r\n\r\nwith app.test_request_context():\r\n    spec.add_path(view=random_pet)\r\n\r\nprint(json.dumps((spec.to_dict())))\r\n```\r\n\r\nthis yields the following swagger \r\n\r\n```\r\n{\r\n    \"info\": {\r\n        \"title\": \"Swagger Petstore\",\r\n        \"version\": \"1.0.0\"\r\n    },\r\n    \"paths\": {\r\n        \"/random\": {\r\n            \"post\": {\r\n                \"description\": \"Get a random pet\",\r\n                \"parameters\": [\r\n                    {\r\n                        \"in\": \"body\",\r\n                        \"required\": false,\r\n                        \"name\": \"body\",\r\n                        \"schema\": {\r\n                            \"type\": \"object\",\r\n                            \"properties\": {\r\n                                \"category\": {\r\n                                    \"type\": \"array\",\r\n                                    \"items\": {\r\n                                        \"type\": \"object\",\r\n                                        \"properties\": {\r\n                                            \"name\": {\r\n                                                \"type\": \"string\"\r\n                                            },\r\n                                            \"id\": {\r\n                                                \"type\": \"integer\",\r\n                                                \"format\": \"int32\"\r\n                                            }\r\n                                        },\r\n                                        \"required\": [\r\n                                            \"name\"\r\n                                        ]\r\n                                    }\r\n                                },\r\n                                \"name\": {\r\n                                    \"type\": \"string\"\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"tags\": [],\r\n    \"swagger\": \"2.0\",\r\n    \"definitions\": {},\r\n    \"parameters\": {}\r\n}\r\n```\r\n\r\nEssentially, even though the parameter is explicity named `pet`, it is automatically renamed `body`. \r\n\r\nThis appears to stem from the fact that when calling [schema2parameters](https://github.com/marshmallow-code/apispec/blob/dev/apispec/ext/marshmallow/swagger.py#L347), \r\n[resolve_parameters](https://github.com/marshmallow-code/apispec/blob/dev/apispec/ext/marshmallow/__init__.py#L206) does not pass along the `name` kwarg. As a result, when schema2parameters calls [field2parameters](https://github.com/marshmallow-code/apispec/blob/dev/apispec/ext/marshmallow/swagger.py#L364), name automatically becomes `\"body\"`, because of the [kwarg default value](https://github.com/marshmallow-code/apispec/blob/dev/apispec/ext/marshmallow/swagger.py#L368).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/181", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/181/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/181/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/181", "id": 289777824, "node_id": "MDU6SXNzdWUyODk3Nzc4MjQ=", "number": 181, "title": "Only single path added for Flask API MethodViews", "user": {"login": "mathewmarcus", "id": 14226006, "node_id": "MDQ6VXNlcjE0MjI2MDA2", "avatar_url": "https://avatars1.githubusercontent.com/u/14226006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathewmarcus", "html_url": "https://github.com/mathewmarcus", "followers_url": "https://api.github.com/users/mathewmarcus/followers", "following_url": "https://api.github.com/users/mathewmarcus/following{/other_user}", "gists_url": "https://api.github.com/users/mathewmarcus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathewmarcus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathewmarcus/subscriptions", "organizations_url": "https://api.github.com/users/mathewmarcus/orgs", "repos_url": "https://api.github.com/users/mathewmarcus/repos", "events_url": "https://api.github.com/users/mathewmarcus/events{/privacy}", "received_events_url": "https://api.github.com/users/mathewmarcus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187049, "node_id": "MDU6TGFiZWwxMzkxODcwNDk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 160865308, "node_id": "MDU6TGFiZWwxNjA4NjUzMDg=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-01-18T21:14:25Z", "updated_at": "2018-11-03T14:33:12Z", "closed_at": "2018-11-03T14:33:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The [Flask documentation](http://flask.pocoo.org/docs/0.12/views/#method-views-for-apis) gives a use case - for RESTful APIs - where a single method view can be added under multiple URL rules. The following code snippet is provided as an example.\r\n\r\n```python\r\nclass UserAPI(MethodView):\r\n\r\n    def get(self, user_id):\r\n        if user_id is None:\r\n            # return a list of users\r\n            pass\r\n        else:\r\n            # expose a single user\r\n            pass\r\n\r\n    def post(self):\r\n        # create a new user\r\n        pass\r\n\r\n    def delete(self, user_id):\r\n        # delete a single user\r\n        pass\r\n\r\n    def put(self, user_id):\r\n        # update a single user\r\n        pass\r\n\r\nuser_view = UserAPI.as_view('user_api')\r\napp.add_url_rule('/users/', defaults={'user_id': None},\r\n                 view_func=user_view, methods=['GET',])\r\napp.add_url_rule('/users/', view_func=user_view, methods=['POST',])\r\napp.add_url_rule('/users/<int:user_id>', view_func=user_view,\r\n                 methods=['GET', 'PUT', 'DELETE'])\r\n```\r\n\r\nIf we define the following apispec and add the above view function like so\r\n\r\n```python\r\nspec = APISpec(\r\n    title='Swagger Petstore',\r\n    version='1.0.0',\r\n    plugins=[\r\n        'apispec.ext.flask',\r\n        'apispec.ext.marshmallow',\r\n    ],\r\n)\r\n\r\nwith app.test_request_context():\r\n    spec.add_path(view=user_view)\r\n```\r\n\r\nonly one of the above paths would be included in the generated apispec.\r\n\r\nLooking at the `apispec.ext.flask` module, it seems that this behavior is a result of line 92 in the `_rule_for_view` function.\r\n\r\n```python\r\n    # WARNING: Assume 1 rule per view function for now\r\n    rule = current_app.url_map._rules_by_endpoint[endpoint][0]\r\n```\r\n\r\nGiven the comment, it seems like this behavior is expected. Is there any interest in/intent to modify this to enable all of the paths to be added to the apispec in the above situation?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/178", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/178/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/178/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/178", "id": 287105509, "node_id": "MDU6SXNzdWUyODcxMDU1MDk=", "number": 178, "title": "Marshmallow ext: Name should be set to dump_to even if load_from is not specified", "user": {"login": "LeonAgmonNacht", "id": 16452083, "node_id": "MDQ6VXNlcjE2NDUyMDgz", "avatar_url": "https://avatars1.githubusercontent.com/u/16452083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeonAgmonNacht", "html_url": "https://github.com/LeonAgmonNacht", "followers_url": "https://api.github.com/users/LeonAgmonNacht/followers", "following_url": "https://api.github.com/users/LeonAgmonNacht/following{/other_user}", "gists_url": "https://api.github.com/users/LeonAgmonNacht/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeonAgmonNacht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeonAgmonNacht/subscriptions", "organizations_url": "https://api.github.com/users/LeonAgmonNacht/orgs", "repos_url": "https://api.github.com/users/LeonAgmonNacht/repos", "events_url": "https://api.github.com/users/LeonAgmonNacht/events{/privacy}", "received_events_url": "https://api.github.com/users/LeonAgmonNacht/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 160865308, "node_id": "MDU6TGFiZWwxNjA4NjUzMDg=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/feedback%20welcome", "name": "feedback welcome", "color": "0e8a16", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-09T14:23:06Z", "updated_at": "2018-01-31T03:41:19Z", "closed_at": "2018-01-31T03:41:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "At the moment, name is changed if both load_from and dump_to is set and are equal, as per this code:\r\n```\r\ndef _observed_name(field, name):\r\n    \"\"\"Adjust field name to reflect `dump_to` and `load_from` attributes.\r\n    :param Field field: A marshmallow field.\r\n    :param str name: Field name\r\n    :rtype: str\r\n    \"\"\"\r\n    # use getattr in case we're running against older versions of marshmallow.\r\n    dump_to = getattr(field, 'dump_to', None)\r\n    load_from = getattr(field, 'load_from', None)\r\n    if load_from != dump_to:\r\n        return name\r\n    return dump_to or name\r\n```\r\nThis behaviour causes schema to look bad and does not make sense.\r\nName should be set to dump_to even if load_from is not specified.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/176", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/176/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/176/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/176", "id": 281143046, "node_id": "MDU6SXNzdWUyODExNDMwNDY=", "number": 176, "title": "Can't use apispec tornado plugin icw complex paths", "user": {"login": "p0psicles", "id": 1331394, "node_id": "MDQ6VXNlcjEzMzEzOTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1331394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/p0psicles", "html_url": "https://github.com/p0psicles", "followers_url": "https://api.github.com/users/p0psicles/followers", "following_url": "https://api.github.com/users/p0psicles/following{/other_user}", "gists_url": "https://api.github.com/users/p0psicles/gists{/gist_id}", "starred_url": "https://api.github.com/users/p0psicles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/p0psicles/subscriptions", "organizations_url": "https://api.github.com/users/p0psicles/orgs", "repos_url": "https://api.github.com/users/p0psicles/repos", "events_url": "https://api.github.com/users/p0psicles/events{/privacy}", "received_events_url": "https://api.github.com/users/p0psicles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-11T19:41:43Z", "updated_at": "2018-11-03T14:33:19Z", "closed_at": "2018-11-03T14:33:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use apispec icw the 'apispec.ext.tornado' and 'apispec.ext.marshmallow' plugins.\r\nOnly i'm getting the following error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"D:\\JetBrains\\PyCharm 2017.2.4\\helpers\\pydev\\pydevd.py\", line 1599, in <module>\r\n    globals = debugger.run(setup['file'], None, None, is_module)\r\n  File \"D:\\JetBrains\\PyCharm 2017.2.4\\helpers\\pydev\\pydevd.py\", line 1026, in run\r\n    pydev_imports.execfile(file, globals, locals)  # execute the script\r\n  File \"D:\\myproj/start.py\", line 7, in <module>\r\n    main()\r\n  File \"D:\\myproj\\medusa\\__main__.py\", line 2104, in main\r\n    application.start(sys.argv[1:])\r\n  File \"D:\\myproj\\medusa\\__main__.py\", line 347, in start\r\n    self.web_server = AppWebServer(self.web_options)\r\n  File \"D:\\myproj\\medusa\\server\\core.py\", line 230, in __init__\r\n    spec.add_path(urlspec=urlspec)\r\n  File \"D:\\Python27\\lib\\site-packages\\apispec\\core.py\", line 211, in add_path\r\n    raise APISpecError('Path template is not specified')\r\napispec.exceptions.APISpecError: Path template is not specified\r\n```\r\n\r\nIt seems to be happening because matcher._path is None.\r\nhttps://github.com/marshmallow-code/apispec/blob/dev/apispec/ext/tornado.py#L95\r\n\r\n`urlspec.matcher._path` returns None, because of this:\r\nhttps://github.com/tornadoweb/tornado/blob/master/tornado/routing.py#L571\r\n\r\nAnd my route looks like this:\r\n`'/api/v2/series/(?P<series_slug>\\\\w+)/episode(?:(?:(?:(?:/(?P<episode_slug>[\\\\w-]+))|/?)(?:(?:/(?P<path_param>\\\\w+))|/?))|/?)/?$'`\r\n\r\nSo because the tornado plugin uses the matcher._path, it's can't translate to an OpenApi compliant path.\r\nIs there anything I can do about it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/172", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/172/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/172/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/172", "id": 278470541, "node_id": "MDU6SXNzdWUyNzg0NzA1NDE=", "number": 172, "title": "Support for Hyperlinks schema field type (provided by flask-marshmallow)", "user": {"login": "Ch00k", "id": 230214, "node_id": "MDQ6VXNlcjIzMDIxNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/230214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ch00k", "html_url": "https://github.com/Ch00k", "followers_url": "https://api.github.com/users/Ch00k/followers", "following_url": "https://api.github.com/users/Ch00k/following{/other_user}", "gists_url": "https://api.github.com/users/Ch00k/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ch00k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ch00k/subscriptions", "organizations_url": "https://api.github.com/users/Ch00k/orgs", "repos_url": "https://api.github.com/users/Ch00k/repos", "events_url": "https://api.github.com/users/Ch00k/events{/privacy}", "received_events_url": "https://api.github.com/users/Ch00k/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 139187049, "node_id": "MDU6TGFiZWwxMzkxODcwNDk=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 139187050, "node_id": "MDU6TGFiZWwxMzkxODcwNTA=", "url": "https://api.github.com/repos/marshmallow-code/apispec/labels/help%20wanted", "name": "help wanted", "color": "0e8a16", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-01T13:45:26Z", "updated_at": "2019-08-31T08:57:44Z", "closed_at": "2019-08-31T08:57:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently if I have a `Hyperlinks` field type in my schema, it is being interpreted as `string`, and of course all the complex nested structure of the field is not preserved. Is there any way I can make `Hyperlinks` field type work with apispec?\r\nhttps://flask-marshmallow.readthedocs.io/en/latest/#flask_marshmallow.fields.Hyperlinks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/apispec/issues/171", "repository_url": "https://api.github.com/repos/marshmallow-code/apispec", "labels_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/171/comments", "events_url": "https://api.github.com/repos/marshmallow-code/apispec/issues/171/events", "html_url": "https://github.com/marshmallow-code/apispec/issues/171", "id": 278308229, "node_id": "MDU6SXNzdWUyNzgzMDgyMjk=", "number": 171, "title": "Paths with defaults do not get recognized", "user": {"login": "ukaratay", "id": 4573582, "node_id": "MDQ6VXNlcjQ1NzM1ODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4573582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ukaratay", "html_url": "https://github.com/ukaratay", "followers_url": "https://api.github.com/users/ukaratay/followers", "following_url": "https://api.github.com/users/ukaratay/following{/other_user}", "gists_url": "https://api.github.com/users/ukaratay/gists{/gist_id}", "starred_url": "https://api.github.com/users/ukaratay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ukaratay/subscriptions", "organizations_url": "https://api.github.com/users/ukaratay/orgs", "repos_url": "https://api.github.com/users/ukaratay/repos", "events_url": "https://api.github.com/users/ukaratay/events{/privacy}", "received_events_url": "https://api.github.com/users/ukaratay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-30T23:37:38Z", "updated_at": "2018-04-04T13:47:13Z", "closed_at": "2018-04-04T13:47:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have multiple paths in my Flask app:\r\n\r\n```python\r\napp.add_url_rule('/v1/models', defaults={'id': None}, view_func=analytics_model_v1, methods=['GET'])\r\napp.add_url_rule('/v1/models', view_func=analytics_model_v1, methods=['POST'])\r\napp.add_url_rule('/v1/models/<string:id>', view_func=analytics_model_v1, methods=['DELETE', 'GET', 'PATCH', 'PUT'])\r\n```\r\nWhen I add this view function to APISpec, it does not recognize the path /v1/models/<string:id>:\r\n\r\n```python\r\nwith app.test_request_context():\r\n    spec.add_path(view=analytics_model_v1)\r\n```\r\n\r\n```python\r\n>>> pprint(spec.__path)\r\nOrderedDict([('/models',\r\n              {'delete': {'description': '',\r\n                          'operationId': 'deleteModel',\r\n                          'parameters': ...,\r\n                          'produces': ...,\r\n                          'responses': ...,\r\n                          'summary': 'Delete an existing model',\r\n                          'tags': ['model']},\r\n               'get': {'consumes': ['application/json'],\r\n                       'description': '',\r\n                       'operationId': 'getModel',\r\n                       'parameters': ...,\r\n                       'produces': ['application/json'],\r\n                       'responses': ...,\r\n                       'summary': 'Get an existing model',\r\n                       'tags': ['model']},\r\n               'patch': {'consumes': ['application/json'],\r\n                         'description': '',\r\n                         'operationId': 'updateModel',\r\n                         'parameters': ...,\r\n                         'produces': ['application/json'],\r\n                         'responses': ...,\r\n                         'summary': 'Update an existing model',\r\n                         'tags': ['model']},\r\n               'post': {'consumes': ['application/json'],\r\n                        'description': '',\r\n                        'operationId': 'buildModel',\r\n                        'parameters': ...,\r\n                        'produces': ['application/json'],\r\n                        'responses': ...,\r\n                        'summary': 'Build a new model',\r\n                        'tags': ['model']},\r\n               'put': {'consumes': ['application/json'],\r\n                       'description': '',\r\n                       'operationId': 'rebuildModel',\r\n                       'parameters': ...,\r\n                       'produces': ['application/json'],\r\n                       'responses': ...,\r\n                       'summary': 'Rebuild an existing model with new '\r\n                                  'parameters',\r\n                       'tags': ['model']}})])\r\n```\r\nI looked through documentation and the code, but couldn't see any examples like this or an option.\r\n\r\nP.S. I had to redact some information from the output. Denoted by ellipsis.", "performed_via_github_app": null, "score": 1.0}]}