{"total_count": 625, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1407", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1407/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1407/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1407/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1407", "id": 674596720, "node_id": "MDU6SXNzdWU2NzQ1OTY3MjA=", "number": 1407, "title": "If a socket is already waiting on close, context.destroy(0) blocks", "user": {"login": "mathieulongtin", "id": 617359, "node_id": "MDQ6VXNlcjYxNzM1OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/617359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathieulongtin", "html_url": "https://github.com/mathieulongtin", "followers_url": "https://api.github.com/users/mathieulongtin/followers", "following_url": "https://api.github.com/users/mathieulongtin/following{/other_user}", "gists_url": "https://api.github.com/users/mathieulongtin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathieulongtin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathieulongtin/subscriptions", "organizations_url": "https://api.github.com/users/mathieulongtin/orgs", "repos_url": "https://api.github.com/users/mathieulongtin/repos", "events_url": "https://api.github.com/users/mathieulongtin/events{/privacy}", "received_events_url": "https://api.github.com/users/mathieulongtin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-06T20:57:08Z", "updated_at": "2020-08-10T14:14:40Z", "closed_at": "2020-08-10T14:14:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I run the following code, it stalls forever:\r\n\r\n    context = zmq.Context()\r\n    socket = context.socket(zmq.REQ)\r\n    socket.connect(\"tcp://localhost:12834\")\r\n    socket.send(b\"hello\")\r\n    socket.close()\r\n    context.destroy(0)\r\n\r\nHowever, if I close the socket with `socket.close(0)`, it finishes right away.\r\n\r\nIt seems sockets that are already closing when destroying the context don't get force to close.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1397", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1397/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1397/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1397/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1397", "id": 641172898, "node_id": "MDU6SXNzdWU2NDExNzI4OTg=", "number": 1397, "title": "High throughput test on TCP & EPGM", "user": {"login": "dxb-super", "id": 53667804, "node_id": "MDQ6VXNlcjUzNjY3ODA0", "avatar_url": "https://avatars2.githubusercontent.com/u/53667804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dxb-super", "html_url": "https://github.com/dxb-super", "followers_url": "https://api.github.com/users/dxb-super/followers", "following_url": "https://api.github.com/users/dxb-super/following{/other_user}", "gists_url": "https://api.github.com/users/dxb-super/gists{/gist_id}", "starred_url": "https://api.github.com/users/dxb-super/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dxb-super/subscriptions", "organizations_url": "https://api.github.com/users/dxb-super/orgs", "repos_url": "https://api.github.com/users/dxb-super/repos", "events_url": "https://api.github.com/users/dxb-super/events{/privacy}", "received_events_url": "https://api.github.com/users/dxb-super/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-18T12:37:09Z", "updated_at": "2020-06-18T13:02:06Z", "closed_at": "2020-06-18T13:02:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, everyone !\r\nI want to use zeromq pub/sub to transport large size msgs (e.g. images data). \r\nI did the below test in python environment:\r\n1. send different sizes of msg (from 2kB - 16MB) with random data\r\n2. one publisher in one docker container, and one subscriber in one other seperate container\r\n3. calculate the total data size and time, to estimate the throughput (total size / time) in MB/s\r\n\r\ntcp have good performance, but epgm I only got 20MB/s throughput even after I set the socket.rate, hwm ... Just want to know the reason. I hope I can use epgm because it is multicast protocol which should have advantage than tcp in multi subscriber cases.. test result have been shown below and test code has been attached. \r\n\r\n![image](https://user-images.githubusercontent.com/53667804/85020741-5ca00d00-b1a3-11ea-8850-323555677a11.png)\r\n![image](https://user-images.githubusercontent.com/53667804/85020758-63c71b00-b1a3-11ea-8bf7-5accef591ab2.png)\r\n\r\n**The code I used as below:**\r\n[zmq throupug test dockerized.zip](https://github.com/zeromq/pyzmq/files/4798560/zmq.throupug.test.dockerized.zip)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1396", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1396/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1396/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1396/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1396", "id": 640382617, "node_id": "MDU6SXNzdWU2NDAzODI2MTc=", "number": 1396, "title": "Lazy Pirate Pattern requires turning off LINGER but this isn't documented", "user": {"login": "basak", "id": 266788, "node_id": "MDQ6VXNlcjI2Njc4OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/266788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basak", "html_url": "https://github.com/basak", "followers_url": "https://api.github.com/users/basak/followers", "following_url": "https://api.github.com/users/basak/following{/other_user}", "gists_url": "https://api.github.com/users/basak/gists{/gist_id}", "starred_url": "https://api.github.com/users/basak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basak/subscriptions", "organizations_url": "https://api.github.com/users/basak/orgs", "repos_url": "https://api.github.com/users/basak/repos", "events_url": "https://api.github.com/users/basak/events{/privacy}", "received_events_url": "https://api.github.com/users/basak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-17T11:55:19Z", "updated_at": "2020-07-13T12:43:20Z", "closed_at": "2020-07-13T12:43:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm implementing the Lazy Pirate Pattern and found that I was running out of file descriptors if the timeout was short. Calling `socket.close()` didn't seem to be enough.\r\n\r\nThe [documentation example](http://zguide.zeromq.org/py:lpclient) calls `client.setsockopt(zmq.LINGER, 0)` first, and this resolved the problem for me. So that documentation is correct. However it took me a while to get this. Can I suggest that the documentation be adjusted to help prevent others from falling into this trap? It would help me, too, to understand the defined/expected behaviour around this too.\r\n\r\nThere's nothing I can find in the reference at https://pyzmq.readthedocs.io/en/latest/index.html suggests that this is required - so the only place that suggests it that I can find is in the Python code example. The [equivalent C documentationexample](http://zguide.zeromq.org/c:lpclient) uses `zmq_destroy()` instead and I don't see an exact Python equivalent of this. It's perhaps out of date now though? I see that `ZMQ_LINGER` is defined to be -1 (infinite) by default.\r\n\r\nExpected \"behaviour\": somewhere in the definition of `zmq.Socket` the behaviour of construction, `close()`, `LINGER` and cleanup with respect to the requirement for OS file descriptors should be defined - especially because in the Python world, garbage collection is assumed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1389", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1389/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1389/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1389/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1389", "id": 627821724, "node_id": "MDU6SXNzdWU2Mjc4MjE3MjQ=", "number": 1389, "title": "Behavior difference during disconnects between server and client sides", "user": {"login": "cjenkins5614", "id": 32284996, "node_id": "MDQ6VXNlcjMyMjg0OTk2", "avatar_url": "https://avatars1.githubusercontent.com/u/32284996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjenkins5614", "html_url": "https://github.com/cjenkins5614", "followers_url": "https://api.github.com/users/cjenkins5614/followers", "following_url": "https://api.github.com/users/cjenkins5614/following{/other_user}", "gists_url": "https://api.github.com/users/cjenkins5614/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjenkins5614/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjenkins5614/subscriptions", "organizations_url": "https://api.github.com/users/cjenkins5614/orgs", "repos_url": "https://api.github.com/users/cjenkins5614/repos", "events_url": "https://api.github.com/users/cjenkins5614/events{/privacy}", "received_events_url": "https://api.github.com/users/cjenkins5614/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-30T21:07:20Z", "updated_at": "2020-06-26T21:26:06Z", "closed_at": "2020-06-26T09:33:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the following testing, the binding servers are REP, and client is REQ, when one server dies, client won\u2019t automatically choose a different connected server to send the request. However, if the binding server is REQ, and clients are REP, when one client dies, the server is able to fall back to other healthy clients. Is this the expected behavior? \r\n\r\nThe documented behavior from https://zeromq.org/socket-api seems to be that both server and client have the ability to choose a different available peer, but my tests below didn\u2019t reproduce it.\r\n\r\n```\r\nimport time\r\nimport zmq\r\nfrom tqdm import trange\r\nimport json\r\n```\r\n\r\nServer is REQ. Client is REP.\r\n```\r\n# create two connecting clients\r\ncontext = zmq.Context()\r\nsocket = context.socket(zmq.REP)\r\nsocket.connect(\"tcp://localhost:5555\")\r\n\r\ncount = 0\r\nwhile True:\r\n    message = socket.recv()\r\n    socket.send(b\"\")\r\n    count += 1\r\n    print(json.loads(message.decode())['n'])\r\n\r\nprint(count)\r\n```\r\n\r\n```\r\n# create one binding server\r\ncontext = zmq.Context()\r\nsocket = context.socket(zmq.REQ)\r\nsocket.bind(\"tcp://*:5555\")\r\n\r\nfor n in trange(100):\r\n    message = json.dumps({\"n\": n}).encode()\r\n    socket.send(message)\r\n    socket.recv()\r\n    time.sleep(1)\r\n```\r\n\r\nOutput:\r\n```\r\n$$ python responder.py\r\n2\r\n4\r\n6\r\n8\r\n10\r\n12\r\n<<< fall back full on this responder\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n\r\n$$ python responder.py\r\n0\r\n1\r\n3\r\n5\r\n7\r\n9\r\n11\r\n13\r\n^CTraceback (most recent call last):\r\n  File \"responder.py\", line 17, in <module>\r\n    message = socket.recv()\r\n  File \"zmq/backend/cython/socket.pyx\", line 791, in zmq.backend.cython.socket.Socket.recv\r\n  File \"zmq/backend/cython/socket.pyx\", line 827, in zmq.backend.cython.socket.Socket.recv\r\n  File \"zmq/backend/cython/socket.pyx\", line 186, in zmq.backend.cython.socket._recv_copy\r\n  File \"zmq/backend/cython/checkrc.pxd\", line 13, in zmq.backend.cython.checkrc._check_rc\r\nKeyboardInterrupt\r\n```\r\n\r\nServer is REP. Client is REQ.\r\n```\r\n# create one server\r\ncontext = zmq.Context()\r\nsocket = context.socket(zmq.REP)\r\nsocket.bind(\"tcp://*:5555\")\r\n\r\ncount = 0\r\nwhile True:\r\n    message = socket.recv()\r\n    socket.send(b\"\")\r\n    count += 1\r\n    print(json.loads(message.decode())['n'])\r\n\r\nprint(count)\r\n```\r\n\r\n```\r\n# create one client connecting to two servers\r\ncontext = zmq.Context()\r\nsocket = context.socket(zmq.REQ)\r\nsocket.connect(\"tcp://localhost:5555\")\r\nsocket.connect(\"tcp://localhost2:5555\")\r\n\r\nfor n in trange(100):\r\n    message = json.dumps({\"n\": n}).encode()\r\n    socket.send(message)\r\n    socket.recv()\r\n    time.sleep(1)\r\n```\r\n\r\n\r\nOutput:\r\n```\r\n$$ python responder.py\r\n0\r\n<<< stuck\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1388", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1388/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1388/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1388/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1388", "id": 625166579, "node_id": "MDU6SXNzdWU2MjUxNjY1Nzk=", "number": 1388, "title": "Failing to connect to host on another network", "user": {"login": "jhalter2", "id": 17132460, "node_id": "MDQ6VXNlcjE3MTMyNDYw", "avatar_url": "https://avatars0.githubusercontent.com/u/17132460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhalter2", "html_url": "https://github.com/jhalter2", "followers_url": "https://api.github.com/users/jhalter2/followers", "following_url": "https://api.github.com/users/jhalter2/following{/other_user}", "gists_url": "https://api.github.com/users/jhalter2/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhalter2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhalter2/subscriptions", "organizations_url": "https://api.github.com/users/jhalter2/orgs", "repos_url": "https://api.github.com/users/jhalter2/repos", "events_url": "https://api.github.com/users/jhalter2/events{/privacy}", "received_events_url": "https://api.github.com/users/jhalter2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-26T20:09:57Z", "updated_at": "2020-05-27T14:40:17Z", "closed_at": "2020-05-27T14:40:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using the basic example host and client with the Req/Rep sockets and it works fine when executing both from two separate computers on the same local network. However, when trying to execute the example with machines on two different networks, the client never receives the message sent by the server. \r\n\r\nI've eliminated any firewall/router issues, so I think it may be an issue with how I'm doing the connect call on the client. \r\n\r\nMy code for binding the server is `socket.bind(\"tcp://*:5555\")`\r\nand my code for connecting on the client is `socket.connect(\"tcp://public_ip:router_port;local_ip:local_port\")`\r\n\r\nwhere I'm filling in the ips and ports with the actual IP values.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1380", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1380/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1380/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1380/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1380", "id": 615788682, "node_id": "MDU6SXNzdWU2MTU3ODg2ODI=", "number": 1380, "title": "Upload Windows wheels directly from CI", "user": {"login": "minrk", "id": 151929, "node_id": "MDQ6VXNlcjE1MTkyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/minrk", "html_url": "https://github.com/minrk", "followers_url": "https://api.github.com/users/minrk/followers", "following_url": "https://api.github.com/users/minrk/following{/other_user}", "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/minrk/subscriptions", "organizations_url": "https://api.github.com/users/minrk/orgs", "repos_url": "https://api.github.com/users/minrk/repos", "events_url": "https://api.github.com/users/minrk/events{/privacy}", "received_events_url": "https://api.github.com/users/minrk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2052397924, "node_id": "MDU6TGFiZWwyMDUyMzk3OTI0", "url": "https://api.github.com/repos/zeromq/pyzmq/labels/help%20wanted", "name": "help wanted", "color": "58d3bf", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-11T10:50:35Z", "updated_at": "2020-05-19T10:00:56Z", "closed_at": "2020-05-19T10:00:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Windows wheels are built on AppVeyor, but upload is manual. It would be good to upload directly from CI rather than requiring a human to wait for the builds to finish (takes hours), since the current setup usually means there are some hours and up to a day during which some Windows wheels are missing on CI.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1379", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1379/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1379/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1379/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1379", "id": 615714118, "node_id": "MDU6SXNzdWU2MTU3MTQxMTg=", "number": 1379, "title": "'AssertionError: yield from wasn't used with future' on recv_multipart()", "user": {"login": "sarthak-chakraborty", "id": 23696812, "node_id": "MDQ6VXNlcjIzNjk2ODEy", "avatar_url": "https://avatars3.githubusercontent.com/u/23696812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarthak-chakraborty", "html_url": "https://github.com/sarthak-chakraborty", "followers_url": "https://api.github.com/users/sarthak-chakraborty/followers", "following_url": "https://api.github.com/users/sarthak-chakraborty/following{/other_user}", "gists_url": "https://api.github.com/users/sarthak-chakraborty/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarthak-chakraborty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarthak-chakraborty/subscriptions", "organizations_url": "https://api.github.com/users/sarthak-chakraborty/orgs", "repos_url": "https://api.github.com/users/sarthak-chakraborty/repos", "events_url": "https://api.github.com/users/sarthak-chakraborty/events{/privacy}", "received_events_url": "https://api.github.com/users/sarthak-chakraborty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-11T09:01:51Z", "updated_at": "2020-06-07T19:43:21Z", "closed_at": "2020-06-07T19:43:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "ERROR:root:Traceback (most recent call last):\r\n  File \".\\async_client.py\", line 18, in <module>\r\n    [topic, msg] = sockfd.recv_multipart()\r\nAssertionError: yield from wasn't used with future\r\n\r\nReceived this error?\r\nCan anyone tell how or when such an error arises?\r\n\r\nCan anyone help with this issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1378", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1378/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1378/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1378/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1378", "id": 614451224, "node_id": "MDU6SXNzdWU2MTQ0NTEyMjQ=", "number": 1378, "title": "Windows wheels missing for Python 3.5-3.6 (pyzmq 19.0.1)", "user": {"login": "Tobotimus", "id": 7438501, "node_id": "MDQ6VXNlcjc0Mzg1MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/7438501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tobotimus", "html_url": "https://github.com/Tobotimus", "followers_url": "https://api.github.com/users/Tobotimus/followers", "following_url": "https://api.github.com/users/Tobotimus/following{/other_user}", "gists_url": "https://api.github.com/users/Tobotimus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tobotimus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tobotimus/subscriptions", "organizations_url": "https://api.github.com/users/Tobotimus/orgs", "repos_url": "https://api.github.com/users/Tobotimus/repos", "events_url": "https://api.github.com/users/Tobotimus/events{/privacy}", "received_events_url": "https://api.github.com/users/Tobotimus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-08T02:02:14Z", "updated_at": "2020-05-11T10:51:32Z", "closed_at": "2020-05-08T07:06:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI just tried to install Jupyter Notebook on my Windows machine with Python 3.6 and got an unexpected error whilst trying to compile this library.\r\n\r\nIt looks as though the reason is, there's no wheel available for version 19.0.1 for Windows on Python 3.6 (or 3.5 for that matter). I'm not sure how they're deployed for this project and whether or not this is intentional, or a known issue. So I thought I'd ask :)\r\n\r\nRegards,\r\nToby", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1377", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1377/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1377/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1377/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1377", "id": 610797177, "node_id": "MDU6SXNzdWU2MTA3OTcxNzc=", "number": 1377, "title": "Unable to install in python 3.7.7 alpine3.11 docker ", "user": {"login": "sant527", "id": 6462531, "node_id": "MDQ6VXNlcjY0NjI1MzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6462531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sant527", "html_url": "https://github.com/sant527", "followers_url": "https://api.github.com/users/sant527/followers", "following_url": "https://api.github.com/users/sant527/following{/other_user}", "gists_url": "https://api.github.com/users/sant527/gists{/gist_id}", "starred_url": "https://api.github.com/users/sant527/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sant527/subscriptions", "organizations_url": "https://api.github.com/users/sant527/orgs", "repos_url": "https://api.github.com/users/sant527/repos", "events_url": "https://api.github.com/users/sant527/events{/privacy}", "received_events_url": "https://api.github.com/users/sant527/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-01T15:04:42Z", "updated_at": "2020-05-20T12:51:41Z", "closed_at": "2020-05-20T12:51:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "On my archlinux host i have\r\n\r\n     python 3.7.3\r\n     pipenv, version 2018.11.26\r\n\r\nI have `Pipfile` and `Pipfile.lock` with many packages inside them. I install all the packages in a virtualenv using `pipenv install --dev` \r\n\r\nI have `psycopg2 2.8.4` and `pyzmq` packages which also get installed without any error.\r\n\r\nBut in the docker `python:3.7.7-alpine3.11` i am not able to install all my packages from `Pipfile` and `Pipfile.lock`. \r\n\r\n`psycopg2 2.8.4` and `pyzmq` packages dont get installed and throw error.\r\n\r\n`pyzmq` inside `Pipfile.lock`\r\n\r\n    \"pyzmq\": {\r\n        \"hashes\": [\r\n            \"sha256:01b588911714a6696283de3904f564c550c9e12e8b4995e173f1011755e01086\",\r\n            \"sha256:0573b9790aa26faff33fba40f25763657271d26f64bffb55a957a3d4165d6098\",\r\n            \"sha256:0fa82b9fc3334478be95a5566f35f23109f763d1669bb762e3871a8fa2a4a037\",\r\n            \"sha256:1e59b7b19396f26e360f41411a5d4603356d18871049cd7790f1a7d18f65fb2c\",\r\n            \"sha256:2a294b4f44201bb21acc2c1a17ff87fbe57b82060b10ddb00ac03e57f3d7fcfa\",\r\n            \"sha256:355b38d7dd6f884b8ee9771f59036bcd178d98539680c4f87e7ceb2c6fd057b6\",\r\n            \"sha256:4b73d20aec63933bbda7957e30add233289d86d92a0bb9feb3f4746376f33527\",\r\n            \"sha256:4ec47f2b50bdb97df58f1697470e5c58c3c5109289a623e30baf293481ff0166\",\r\n            \"sha256:5541dc8cad3a8486d58bbed076cb113b65b5dd6b91eb94fb3e38a3d1d3022f20\",\r\n            \"sha256:6fca7d11310430e751f9832257866a122edf9d7b635305c5d8c51f74a5174d3d\",\r\n            \"sha256:7369656f89878455a5bcd5d56ca961884f5d096268f71c0750fc33d6732a25e5\",\r\n            \"sha256:75d73ee7ca4b289a2a2dfe0e6bd8f854979fc13b3fe4ebc19381be3b04e37a4a\",\r\n            \"sha256:80c928d5adcfa12346b08d31360988d843b54b94154575cccd628f1fe91446bc\",\r\n            \"sha256:83ce18b133dc7e6789f64cb994e7376c5aa6b4aeced993048bf1d7f9a0fe6d3a\",\r\n            \"sha256:8b8498ceee33a7023deb2f3db907ca41d6940321e282297327a9be41e3983792\",\r\n            \"sha256:8c69a6cbfa94da29a34f6b16193e7c15f5d3220cb772d6d17425ff3faa063a6d\",\r\n            \"sha256:8ff946b20d13a99dc5c21cb76f4b8b253eeddf3eceab4218df8825b0c65ab23d\",\r\n            \"sha256:972d723a36ab6a60b7806faa5c18aa3c080b7d046c407e816a1d8673989e2485\",\r\n            \"sha256:a6c9c42bbdba3f9c73aedbb7671815af1943ae8073e532c2b66efb72f39f4165\",\r\n            \"sha256:aa3872f2ebfc5f9692ef8957fe69abe92d905a029c0608e45ebfcd451ad30ab5\",\r\n            \"sha256:cf08435b14684f7f2ca2df32c9df38a79cdc17c20dc461927789216cb43d8363\",\r\n            \"sha256:d30db4566177a6205ed1badb8dbbac3c043e91b12a2db5ef9171b318c5641b75\",\r\n            \"sha256:d5ac84f38575a601ab20c1878818ffe0d09eb51d6cb8511b636da46d0fd8949a\",\r\n            \"sha256:e37f22eb4bfbf69cd462c7000616e03b0cdc1b65f2d99334acad36ea0e4ddf6b\",\r\n            \"sha256:e6549dd80de7b23b637f586217a4280facd14ac01e9410a037a13854a6977299\",\r\n            \"sha256:ed6205ca0de035f252baa0fd26fdd2bc8a8f633f92f89ca866fd423ff26c6f25\",\r\n            \"sha256:efdde21febb9b5d7a8e0b87ea2549d7e00fda1936459cfb27fb6fca0c36af6c1\",\r\n            \"sha256:f4e72646bfe79ff3adbf1314906bbd2d67ef9ccc71a3a98b8b2ccbcca0ab7bec\"\r\n        ],\r\n        \"version\": \"==18.1.1\"\r\n\r\n`psycopg2` inside `Pipfile.lock`\r\n\r\n    \"psycopg2\": {\r\n        \"hashes\": [\r\n            \"sha256:4212ca404c4445dc5746c0d68db27d2cbfb87b523fe233dc84ecd24062e35677\",\r\n            \"sha256:47fc642bf6f427805daf52d6e52619fe0637648fe27017062d898f3bf891419d\",\r\n            \"sha256:72772181d9bad1fa349792a1e7384dde56742c14af2b9986013eb94a240f005b\",\r\n            \"sha256:8396be6e5ff844282d4d49b81631772f80dabae5658d432202faf101f5283b7c\",\r\n            \"sha256:893c11064b347b24ecdd277a094413e1954f8a4e8cdaf7ffbe7ca3db87c103f0\",\r\n            \"sha256:92a07dfd4d7c325dd177548c4134052d4842222833576c8391aab6f74038fc3f\",\r\n            \"sha256:965c4c93e33e6984d8031f74e51227bd755376a9df6993774fd5b6fb3288b1f4\",\r\n            \"sha256:9ab75e0b2820880ae24b7136c4d230383e07db014456a476d096591172569c38\",\r\n            \"sha256:b0845e3bdd4aa18dc2f9b6fb78fbd3d9d371ad167fd6d1b7ad01c0a6cdad4fc6\",\r\n            \"sha256:dca2d7203f0dfce8ea4b3efd668f8ea65cd2b35112638e488a4c12594015f67b\",\r\n            \"sha256:ed686e5926929887e2c7ae0a700e32c6129abb798b4ad2b846e933de21508151\",\r\n            \"sha256:ef6df7e14698e79c59c7ee7cf94cd62e5b869db369ed4b1b8f7b729ea825712a\",\r\n            \"sha256:f898e5cc0a662a9e12bde6f931263a1bbd350cfb18e1d5336a12927851825bb6\"\r\n        ],\r\n        \"index\": \"pypi\",\r\n        \"version\": \"==2.8.4\"\r\n\r\nWhen i try to install the packages from `Pipfile` and `Pipfile.lock` inside the docker i get the following error\r\n\r\n[![enter image description here][1]][1]\r\n\r\n[![enter image description here][2]][2]\r\n[![enter image description here][3]][3]\r\n\r\nI have read somewhere its the issue with gcc compiler not available in alpine. SO i also tried the Dockerfile with `RUN apk --no-cache add build-base`\r\n\r\n    FROM python:3.7.7-alpine3.11\r\n    \r\n    ENV PYTHONUNBUFFERED 1\r\n    \r\n    RUN apk --no-cache add build-base\r\n\r\nStill same error \r\n\r\nSince it gets installed on archlinux, why its not getting installed on my docker image. \r\n\r\nI want to keep the same configuration (python 3.7 and the same Pipfile and Pipfile.lock) throughtout my various projects, how to get this done in docker\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/9aOKi.png\r\n  [2]: https://i.stack.imgur.com/so73o.png\r\n  [3]: https://i.stack.imgur.com/pbx8A.png", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1372", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1372/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1372/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1372/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1372", "id": 591168292, "node_id": "MDU6SXNzdWU1OTExNjgyOTI=", "number": 1372, "title": "cElementTree was deprecated and removed in Python 3.9 in favour of ElementTree", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-31T14:43:45Z", "updated_at": "2020-04-06T11:01:32Z", "closed_at": "2020-04-06T11:01:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/zeromq/pyzmq/blob/0c37c6e6efe7b2ddfe4de4b434893346ed231766/tools/check_junit_result.py#L5\r\n\r\nRef : https://github.com/python/cpython/pull/19108", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1366", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1366/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1366/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1366/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1366", "id": 570815949, "node_id": "MDU6SXNzdWU1NzA4MTU5NDk=", "number": 1366, "title": "Pre-built wheel for python 3.7 windows amd64 missing from pypi for version 19.0.0", "user": {"login": "simmdan", "id": 1443981, "node_id": "MDQ6VXNlcjE0NDM5ODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1443981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simmdan", "html_url": "https://github.com/simmdan", "followers_url": "https://api.github.com/users/simmdan/followers", "following_url": "https://api.github.com/users/simmdan/following{/other_user}", "gists_url": "https://api.github.com/users/simmdan/gists{/gist_id}", "starred_url": "https://api.github.com/users/simmdan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simmdan/subscriptions", "organizations_url": "https://api.github.com/users/simmdan/orgs", "repos_url": "https://api.github.com/users/simmdan/repos", "events_url": "https://api.github.com/users/simmdan/events{/privacy}", "received_events_url": "https://api.github.com/users/simmdan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-25T20:35:22Z", "updated_at": "2020-02-26T15:28:38Z", "closed_at": "2020-02-26T13:04:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just noticed that in the latest release (19.0.0) the pre-built wheel for python 3.7 windows amd64 seems to be missing.  The win32 version is present for python 3.7, and the both win32 and amd64 are present for other versions of python, but not python 3.7.\r\n\r\nIs this an intentional omission or a bug?\r\n\r\nThanks for any help you can give.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1361", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1361/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1361/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1361/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1361", "id": 566342011, "node_id": "MDU6SXNzdWU1NjYzNDIwMTE=", "number": 1361, "title": "asyncio: memory leak when registering more than one socket to poller", "user": {"login": "RoPP", "id": 45775, "node_id": "MDQ6VXNlcjQ1Nzc1", "avatar_url": "https://avatars0.githubusercontent.com/u/45775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoPP", "html_url": "https://github.com/RoPP", "followers_url": "https://api.github.com/users/RoPP/followers", "following_url": "https://api.github.com/users/RoPP/following{/other_user}", "gists_url": "https://api.github.com/users/RoPP/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoPP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoPP/subscriptions", "organizations_url": "https://api.github.com/users/RoPP/orgs", "repos_url": "https://api.github.com/users/RoPP/repos", "events_url": "https://api.github.com/users/RoPP/events{/privacy}", "received_events_url": "https://api.github.com/users/RoPP/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-17T14:39:07Z", "updated_at": "2020-02-20T12:53:15Z", "closed_at": "2020-02-20T12:53:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "#968 fixed memory leak for one socket but polling multiple sockets still leak memory\r\n\r\n```python\r\nimport zmq\r\nimport zmq.asyncio\r\nimport asyncio\r\n\r\nsock1 = zmq.asyncio.Context.instance().socket(zmq.REP)\r\nsock1.connect(\"tcp://localhost:55570\")\r\nsock2 = zmq.asyncio.Context.instance().socket(zmq.REP)\r\nsock2.connect(\"tcp://localhost:55560\")\r\n\r\npoller = zmq.asyncio.Poller()\r\npoller.register(sock1, zmq.POLLIN)\r\npoller.register(sock2, zmq.POLLIN)\r\n\r\nasync def main():\r\n    while True:\r\n        try:\r\n            await poller.poll(timeout=1)\r\n            pass\r\n        except KeyboardInterrupt:\r\n            break\r\nasyncio.run(main())\r\n```\r\nIt seems that `_recv_futures` is still expanding indefinitely. The watcher is removed from `_recv_futures` on one socket but remains in others sockets' list.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1360", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1360/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1360/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1360/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1360", "id": 565733364, "node_id": "MDU6SXNzdWU1NjU3MzMzNjQ=", "number": 1360, "title": "`zmq.error.ZMQError: Invalid argument` when mocking subscriber", "user": {"login": "MKaras93", "id": 15715742, "node_id": "MDQ6VXNlcjE1NzE1NzQy", "avatar_url": "https://avatars3.githubusercontent.com/u/15715742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MKaras93", "html_url": "https://github.com/MKaras93", "followers_url": "https://api.github.com/users/MKaras93/followers", "following_url": "https://api.github.com/users/MKaras93/following{/other_user}", "gists_url": "https://api.github.com/users/MKaras93/gists{/gist_id}", "starred_url": "https://api.github.com/users/MKaras93/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MKaras93/subscriptions", "organizations_url": "https://api.github.com/users/MKaras93/orgs", "repos_url": "https://api.github.com/users/MKaras93/repos", "events_url": "https://api.github.com/users/MKaras93/events{/privacy}", "received_events_url": "https://api.github.com/users/MKaras93/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-15T11:09:23Z", "updated_at": "2020-05-26T11:21:53Z", "closed_at": "2020-05-26T11:21:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python-3.8.1 (default, Feb  2 2020, 08:37:37)\r\nlibzmq-4.3.2\r\npyzmq-18.1.1\r\n\r\nI have problem with mocking the subscriber - it works fine on Python 3.7 and 3.6, the problem appeared after updating to Python 3.8. Not entirely sure if it's a problem with mock or pyzmq - I don't have problems with other mocks, but I also don't have problem with zmq when running the app normally.\r\n\r\nCode causing error:\r\n```python\r\nclass Receiver:\r\n    def __init__(self, relay):\r\n        self.relay = relay\r\n        context = zmq.Context.instance()\r\n        self.subscriber = context.socket(zmq.SUB)\r\n        self.subscriber.setsockopt(zmq.SUBSCRIBE, b\"\")\r\n        logger.debug(f'Receiver created with relay {relay}')\r\n        self.connect()\r\n\r\n    def connect(self):\r\n        logger.debug(f'Connecting to {self.relay}...')\r\n        self.subscriber.connect(self.relay)\r\n\r\n@pytest.fixture()\r\ndef mock_receiver(relay)\r\n    receiver = Receiver(relay=relay))\r\n    mock_subscriber = Mock(spec=receiver.subscriber)\r\n```\r\nWhen running tests, on this line `mock_subscriber = Mock(spec=receiver.subscriber)` I get the following error:\r\n\r\n```\r\nconftest.py:269: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/usr/local/lib/python3.8/unittest/mock.py:1057: in __init__\r\n    _safe_super(CallableMixin, self).__init__(\r\n/usr/local/lib/python3.8/unittest/mock.py:442: in __init__\r\n    self._mock_add_spec(spec, spec_set, _spec_as_instance, _eat_self)\r\n/usr/local/lib/python3.8/unittest/mock.py:497: in _mock_add_spec\r\n    if asyncio.iscoroutinefunction(getattr(spec, attr, None)):\r\n/usr/local/lib/python3.8/site-packages/zmq/sugar/attrsettr.py:48: in __getattr__\r\n    return self._get_attr_opt(upper_key, opt)\r\n/usr/local/lib/python3.8/site-packages/zmq/sugar/attrsettr.py:52: in _get_attr_opt\r\n    return self.get(opt)\r\nzmq/backend/cython/socket.pyx:476: in zmq.backend.cython.socket.Socket.get\r\n    ???\r\nzmq/backend/cython/socket.pyx:262: in zmq.backend.cython.socket._getsockopt\r\n    ???\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\nE   zmq.error.ZMQError: Invalid argument\r\n\r\nzmq/backend/cython/checkrc.pxd:25: ZMQError\r\n```\r\n\r\nAs I said I'm not enitrely sure if the problem is on pyzmq side, sorry if I'm wasting your time, I'm a newbie with pyzmq. In case that's useful, here are the libraries I use for testing (all up to date).\r\nmock==4.0.1\r\npytest==5.3.5\r\npytest-mock==2.0.0\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1356", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1356/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1356/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1356/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1356", "id": 563401103, "node_id": "MDU6SXNzdWU1NjM0MDExMDM=", "number": 1356, "title": "Exception ignored in: ... __del__ - close - _rm_socket ", "user": {"login": "walnutgeek", "id": 4984234, "node_id": "MDQ6VXNlcjQ5ODQyMzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4984234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/walnutgeek", "html_url": "https://github.com/walnutgeek", "followers_url": "https://api.github.com/users/walnutgeek/followers", "following_url": "https://api.github.com/users/walnutgeek/following{/other_user}", "gists_url": "https://api.github.com/users/walnutgeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/walnutgeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/walnutgeek/subscriptions", "organizations_url": "https://api.github.com/users/walnutgeek/orgs", "repos_url": "https://api.github.com/users/walnutgeek/repos", "events_url": "https://api.github.com/users/walnutgeek/events{/privacy}", "received_events_url": "https://api.github.com/users/walnutgeek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-11T18:41:47Z", "updated_at": "2020-05-06T22:37:57Z", "closed_at": "2020-03-03T14:29:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "After running pytest see this message repeating twice:\r\n\r\nException ignored in: <function Socket.__del__ at 0x7f83905c59e0>\r\nTraceback (most recent call last):\r\n  File \"/Users/wg/miniconda3/envs/abv/lib/python3.7/site-packages/zmq/sugar/socket.py\", line 67, in __del__\r\n  File \"/Users/wg/miniconda3/envs/abc/lib/python3.7/site-packages/zmq/sugar/socket.py\", line 105, in close\r\n  File \"/Users/wg/miniconda3/envs/abc/lib/python3.7/site-packages/zmq/sugar/context.py\", line 153, in _rm_socket\r\nTypeError: 'NoneType' object is not callable\r\n\r\nAll test passed and pytest returns 0. (macos, python 3.7.6)\r\n\r\nSeem not hurt anything, but would be nice to why? GC collects something more then once? Any way to suppress?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1354", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1354/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1354/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1354/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1354", "id": 562001795, "node_id": "MDU6SXNzdWU1NjIwMDE3OTU=", "number": 1354, "title": "No way for async <-> sync communication over inproc transport.", "user": {"login": "devxpy", "id": 19492893, "node_id": "MDQ6VXNlcjE5NDkyODkz", "avatar_url": "https://avatars1.githubusercontent.com/u/19492893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devxpy", "html_url": "https://github.com/devxpy", "followers_url": "https://api.github.com/users/devxpy/followers", "following_url": "https://api.github.com/users/devxpy/following{/other_user}", "gists_url": "https://api.github.com/users/devxpy/gists{/gist_id}", "starred_url": "https://api.github.com/users/devxpy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devxpy/subscriptions", "organizations_url": "https://api.github.com/users/devxpy/orgs", "repos_url": "https://api.github.com/users/devxpy/repos", "events_url": "https://api.github.com/users/devxpy/events{/privacy}", "received_events_url": "https://api.github.com/users/devxpy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-08T10:37:20Z", "updated_at": "2020-02-08T17:03:02Z", "closed_at": "2020-02-08T17:03:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example:\r\n\r\n```python\r\nimport zmq\r\nimport zmq.asyncio as azmq\r\nfrom threading import Thread\r\nimport asyncio\r\n\r\naddr = 'inproc://#1'\r\n\r\ndef sender():\r\n    ctx = zmq.Context.instance()\r\n    sock = ctx.socket(zmq.PAIR)\r\n    sock.bind(addr)\r\n    sock.send(b'hello')\r\n\r\nasync def receiver():\r\n    ctx = azmq.Context.instance()\r\n    sock = ctx.socket(zmq.PAIR)\r\n    sock.connect(addr)\r\n    print(await sock.recv())\r\n\r\nThread(target=sender).start()\r\nasyncio.run(receiver())\r\n```\r\n\r\nOutput:\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 22, in <module>\r\n    asyncio.run(receiver())\r\n  File \"/Users/dev/.pyenv/versions/3.8.1/lib/python3.8/asyncio/runners.py\", line 43, in run\r\n    return loop.run_until_complete(main)\r\n  File \"/Users/dev/.pyenv/versions/3.8.1/lib/python3.8/asyncio/base_events.py\", line 612, in run_until_complete\r\n    return future.result()\r\n  File \"test.py\", line 18, in receiver\r\n    print(await sock.recv())\r\nTypeError: object bytes can't be used in 'await' expression\r\n```\r\n\r\nI think this is caused by https://github.com/zeromq/pyzmq/issues/1172. I could be wrong.\r\n\r\n---\r\n\r\nUsing different `Context` objects results in an infinite block on `recv()` because `inproc` sockets need to be under the same `Context`.\r\n\r\n---\r\n\r\nThanks for maintaining this great binding. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1353", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1353/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1353/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1353/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1353", "id": 551881772, "node_id": "MDU6SXNzdWU1NTE4ODE3NzI=", "number": 1353, "title": "pyzmq can't use send_multipart send message", "user": {"login": "xiongma", "id": 30991932, "node_id": "MDQ6VXNlcjMwOTkxOTMy", "avatar_url": "https://avatars2.githubusercontent.com/u/30991932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongma", "html_url": "https://github.com/xiongma", "followers_url": "https://api.github.com/users/xiongma/followers", "following_url": "https://api.github.com/users/xiongma/following{/other_user}", "gists_url": "https://api.github.com/users/xiongma/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongma/subscriptions", "organizations_url": "https://api.github.com/users/xiongma/orgs", "repos_url": "https://api.github.com/users/xiongma/repos", "events_url": "https://api.github.com/users/xiongma/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongma/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-19T07:47:34Z", "updated_at": "2020-01-19T08:36:51Z", "closed_at": "2020-01-19T08:36:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "@minrk  my platform is Centos, I can't use send_multipart send mesage, it didn't print any error messages, the type of this is PULL-PUSH", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1352", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1352/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1352/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1352/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1352", "id": 550484445, "node_id": "MDU6SXNzdWU1NTA0ODQ0NDU=", "number": 1352, "title": "Zguide examples contain old ZMQEventLoop-based approach", "user": {"login": "jwiede", "id": 5760862, "node_id": "MDQ6VXNlcjU3NjA4NjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/5760862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwiede", "html_url": "https://github.com/jwiede", "followers_url": "https://api.github.com/users/jwiede/followers", "following_url": "https://api.github.com/users/jwiede/following{/other_user}", "gists_url": "https://api.github.com/users/jwiede/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwiede/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwiede/subscriptions", "organizations_url": "https://api.github.com/users/jwiede/orgs", "repos_url": "https://api.github.com/users/jwiede/repos", "events_url": "https://api.github.com/users/jwiede/events{/privacy}", "received_events_url": "https://api.github.com/users/jwiede/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-15T23:22:09Z", "updated_at": "2020-01-21T00:30:41Z", "closed_at": "2020-01-21T00:30:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Current ZMQ guide examples repo (https://github.com/imatix/zguide.git) under examples/Python/asyncio_ioloop still reference ZMQEventLoop in various examples, see examples/Python/asyncio_ioloop/patho{pub,sub}.py for two such examples.\r\n\r\nGiven inclusion of fix #1021 into master, and associated doc updates, seems like those examples should have been fixed/updated for ZMQEventLoop-less approach as well.  Wasn't entirely clear whether issue belonged here or there (https://github.com/imatix/zguide.git), due to unclear relationship of \"docs\" in question.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1350", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1350/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1350/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1350/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1350", "id": 545652828, "node_id": "MDU6SXNzdWU1NDU2NTI4Mjg=", "number": 1350, "title": "18.1.1 - 'zmq' has no attribute 'ZMQ_REQ_CORRELATE'", "user": {"login": "Meow-ops", "id": 5023842, "node_id": "MDQ6VXNlcjUwMjM4NDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5023842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Meow-ops", "html_url": "https://github.com/Meow-ops", "followers_url": "https://api.github.com/users/Meow-ops/followers", "following_url": "https://api.github.com/users/Meow-ops/following{/other_user}", "gists_url": "https://api.github.com/users/Meow-ops/gists{/gist_id}", "starred_url": "https://api.github.com/users/Meow-ops/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Meow-ops/subscriptions", "organizations_url": "https://api.github.com/users/Meow-ops/orgs", "repos_url": "https://api.github.com/users/Meow-ops/repos", "events_url": "https://api.github.com/users/Meow-ops/events{/privacy}", "received_events_url": "https://api.github.com/users/Meow-ops/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-06T10:26:03Z", "updated_at": "2020-01-08T12:22:15Z", "closed_at": "2020-01-08T12:22:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using pyzmq version 18.1.1, i got the following error:\r\n\r\n```\r\n    new_sock.setsockopt(zmq.ZMQ_REQ_CORRELATE, 1)\r\n    AttributeError: module 'zmq' has no attribute 'ZMQ_REQ_CORRELATE'\r\n```\r\nThe feature was introduced in 0MQ version 4.0.0 (RC1), released on 2013/09/20, is there any reason why this is not available on pyzmq?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1343", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1343/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1343/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1343/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1343", "id": 522378290, "node_id": "MDU6SXNzdWU1MjIzNzgyOTA=", "number": 1343, "title": "ImportError: No module named zmq", "user": {"login": "MaiaSoares", "id": 36965370, "node_id": "MDQ6VXNlcjM2OTY1Mzcw", "avatar_url": "https://avatars2.githubusercontent.com/u/36965370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaiaSoares", "html_url": "https://github.com/MaiaSoares", "followers_url": "https://api.github.com/users/MaiaSoares/followers", "following_url": "https://api.github.com/users/MaiaSoares/following{/other_user}", "gists_url": "https://api.github.com/users/MaiaSoares/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaiaSoares/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaiaSoares/subscriptions", "organizations_url": "https://api.github.com/users/MaiaSoares/orgs", "repos_url": "https://api.github.com/users/MaiaSoares/repos", "events_url": "https://api.github.com/users/MaiaSoares/events{/privacy}", "received_events_url": "https://api.github.com/users/MaiaSoares/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-13T17:50:35Z", "updated_at": "2019-11-13T19:58:56Z", "closed_at": "2019-11-13T19:58:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "My code was running normally when I started to get the error: \r\n`ImportError: No module named zmq\r\n`\r\nI re-installed with pip but nothing changed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1337", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1337/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1337/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1337/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1337", "id": 516888743, "node_id": "MDU6SXNzdWU1MTY4ODg3NDM=", "number": 1337, "title": "TestThreadAuthentication.test_curve_user_id appears to be racy", "user": {"login": "mwhudson", "id": 672022, "node_id": "MDQ6VXNlcjY3MjAyMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/672022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mwhudson", "html_url": "https://github.com/mwhudson", "followers_url": "https://api.github.com/users/mwhudson/followers", "following_url": "https://api.github.com/users/mwhudson/following{/other_user}", "gists_url": "https://api.github.com/users/mwhudson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mwhudson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mwhudson/subscriptions", "organizations_url": "https://api.github.com/users/mwhudson/orgs", "repos_url": "https://api.github.com/users/mwhudson/repos", "events_url": "https://api.github.com/users/mwhudson/events{/privacy}", "received_events_url": "https://api.github.com/users/mwhudson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-03T21:05:41Z", "updated_at": "2019-11-07T11:48:43Z", "closed_at": "2019-11-07T11:48:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a frustrating issue as it only appears on Ubuntu's CI infrastructure and not at all on my machine but I do have a theory as to what is happening. The symptom is that TestThreadAuthentication.test_curve_user_id fails like this:\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n_________________ TestThreadAuthentication.test_curve_user_id __________________\r\n\r\nself = <zmq.tests.test_auth.TestThreadAuthentication testMethod=test_curve_user_id>\r\n\r\n    @skip_pypy\r\n    def test_curve_user_id(self):\r\n        \"\"\"threaded auth - CURVE\"\"\"\r\n        self.auth.allow('127.0.0.1')\r\n        certs = self.load_certs(self.secret_keys_dir)\r\n        server_public, server_secret, client_public, client_secret = certs\r\n    \r\n        self.auth.configure_curve(domain='*', location=self.public_keys_dir)\r\n        server = self.socket(zmq.PULL)\r\n        server.curve_publickey = server_public\r\n        server.curve_secretkey = server_secret\r\n        server.curve_server = True\r\n        client = self.socket(zmq.PUSH)\r\n        client.curve_publickey = client_public\r\n        client.curve_secretkey = client_secret\r\n        client.curve_serverkey = server_public\r\n>       assert self.can_connect(client, server)\r\nE       AssertionError: assert False\r\nE        +  where False = <bound method TestThreadAuthentication.can_connect of <zmq.tests.test_auth.TestThreadAuthentication testMethod=test_curve_user_id>>(<zmq.sugar.socket.Socket object at 0x7fab2a042850>, <zmq.sugar.socket.Socket object at 0x7fab2a042650>)\r\nE        +    where <bound method TestThreadAuthentication.can_connect of <zmq.tests.test_auth.TestThreadAuthentication testMethod=test_curve_user_id>> = <zmq.tests.test_auth.TestThreadAuthentication testMethod=test_curve_user_id>.can_connect\r\n\r\n/usr/lib/python3/dist-packages/zmq/tests/test_auth.py:327: AssertionError\r\n```\r\n\r\n(full log here https://objectstorage.prodstack4-5.canonical.com/v1/AUTH_77e2ada1e7a84929a74ba3b87153c0ac/autopkgtest-focal/focal/amd64/p/pyzmq/20191101_193354_9ea5a@/log.gz and many more examples linked from http://autopkgtest.ubuntu.com/packages/p/pyzmq/focal/amd64).\r\n\r\nWhat I *think* is happening is that the can_connect call is happening before the configuration of the authentication method has actually completed. The log output for the above failure is:\r\n\r\n```\r\n------------------------------ Captured log call -------------------------------\r\nbase.py                     53 DEBUG    Starting\r\nthread.py                   86 DEBUG    auth received API command b'ALLOW'\r\nbase.py                     73 DEBUG    Allowing 127.0.0.1\r\nbase.py                    207 DEBUG    version: b'1.0', request_id: b'1', domain: '', address: '127.0.0.1', identity: b'', mechanism: b'CURVE'\r\nbase.py                    222 DEBUG    PASSED (whitelist) address=127.0.0.1\r\nbase.py                    375 DEBUG    ZAP reply code=b'400' text=b'Unknown domain'\r\nthread.py                   86 DEBUG    auth received API command b'CURVE'\r\nbase.py                    114 DEBUG    Configure curve: *[/tmp/tmpewmxhtfc/public_keys]\r\nbase.py                    207 DEBUG    version: b'1.0', request_id: b'1', domain: '', address: '127.0.0.1', identity: b'', mechanism: b'CURVE'\r\nbase.py                    222 DEBUG    PASSED (whitelist) address=127.0.0.1\r\nbase.py                    356 DEBUG    ALLOWED (CURVE) domain=* client_key=b'iHzx::[5<yCgiHW&3&St(n3jRJ}pg&6ov.TOH7s^'\r\nbase.py                    375 DEBUG    ZAP reply code=b'200' text=b'OK'\r\nthread.py                   86 DEBUG    auth received API command b'TERMINATE'\r\n```\r\n\r\nYou can see that a connection is rejected with \"Unknown domain\" before the CURVE api method message is received, and locally in passing tests I don't see that. There is another request later which succeeds so maybe I'm failing to understand how all this works and I'm barking up the wrong tree but in any case, the test is definitely failing...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1335", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1335/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1335/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1335/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1335", "id": 510057776, "node_id": "MDU6SXNzdWU1MTAwNTc3NzY=", "number": 1335, "title": "Fails to install with Python 3.8 (stable) 64 bit windows using pip", "user": {"login": "fzzylogic", "id": 8237722, "node_id": "MDQ6VXNlcjgyMzc3MjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/8237722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fzzylogic", "html_url": "https://github.com/fzzylogic", "followers_url": "https://api.github.com/users/fzzylogic/followers", "following_url": "https://api.github.com/users/fzzylogic/following{/other_user}", "gists_url": "https://api.github.com/users/fzzylogic/gists{/gist_id}", "starred_url": "https://api.github.com/users/fzzylogic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fzzylogic/subscriptions", "organizations_url": "https://api.github.com/users/fzzylogic/orgs", "repos_url": "https://api.github.com/users/fzzylogic/repos", "events_url": "https://api.github.com/users/fzzylogic/events{/privacy}", "received_events_url": "https://api.github.com/users/fzzylogic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-21T15:36:20Z", "updated_at": "2019-11-14T08:57:54Z", "closed_at": "2019-11-14T08:57:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Similar to #1315, Python 3.8.0 (stable) 64 bit (Windows 10) / pyzmq 18.1 installed via pip fails. Error:\r\n\r\nERROR: Command errored out with exit status 1:\r\n   command: 'C:\\Users\\me\\wenv\\Scripts\\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'C:\\\\Users\\\\me\\\\AppData\\\\Local\\\\Temp\\\\pip-install-kurpdktj\\\\pyzmq\\\\setup.py'\"'\"'; __file__='\"'\"'C:\\\\Users\\\\me\\\\AppData\\\\Local\\\\Temp\\\\pip-install-kurpdktj\\\\pyzmq\\\\setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' bdist_wheel -d 'C:\\Users\\me\\AppData\\Local\\Temp\\pip-wheel-7wo68hje' --python-tag cp38", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1332", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1332/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1332/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1332/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1332", "id": 498751406, "node_id": "MDU6SXNzdWU0OTg3NTE0MDY=", "number": 1332, "title": "sock.setsockopt_string() -> expected int, got: b'2'", "user": {"login": "lbarkley1", "id": 36688202, "node_id": "MDQ6VXNlcjM2Njg4MjAy", "avatar_url": "https://avatars0.githubusercontent.com/u/36688202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbarkley1", "html_url": "https://github.com/lbarkley1", "followers_url": "https://api.github.com/users/lbarkley1/followers", "following_url": "https://api.github.com/users/lbarkley1/following{/other_user}", "gists_url": "https://api.github.com/users/lbarkley1/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbarkley1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbarkley1/subscriptions", "organizations_url": "https://api.github.com/users/lbarkley1/orgs", "repos_url": "https://api.github.com/users/lbarkley1/repos", "events_url": "https://api.github.com/users/lbarkley1/events{/privacy}", "received_events_url": "https://api.github.com/users/lbarkley1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-26T08:56:22Z", "updated_at": "2019-09-26T09:13:48Z", "closed_at": "2019-09-26T09:12:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Versions\r\n```\r\nlibzmq-4.3.2\r\npyzmq-18.1.0\r\nPython-3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)]\r\n```\r\n### The Issue\r\nI am trying to limit the number of messages limited in the client side queue.\r\n\r\n### What I've Tried\r\nI have read that setting the High Water Mark can limit the message queue. \r\n` sock.setsockopt_string(zmq.RCVHWM, '2')`\r\n\r\nError produced:\r\n`Exception has occurred: TypeError expected int, got: b'2'`\r\n`File \"\\zmq\\backend\\cython\\socket.pyx\", line 441, in zmq.backend.cython.socket.Socket.set`\r\n\r\nWhen I change this to an int i.e. `sock.setsockopt_string(zmq.RCVHWM, 2)`\r\n`Exception has occurred: TypeError unicode strings only`\r\n\r\nAnother suggested method of reducing the client side queue is to set 'CONFLATE' to true:\r\n`sock.setsockopt_string(zmq.CONFLATE,  '1')`\r\n\r\nThis throws the same errors as the previous attempt/method.\r\n\r\nAnother suggested method is: `sock.set_hwm(1)` but this doesn't seem to affect the queue\r\n\r\nMy entire socket setup:\r\n\r\n```\r\n# ZeroMQ Context\r\nself.context = zmq.Context()\r\n\r\n# Define the socket using the \"Context\"\r\nself.sock = self.context.socket(zmq.SUB)\r\nself.sock.set_hwm(1)\r\n\r\nif sys.version_info[0] < 3:\r\n        # for python 2\r\n        self.sock.setsockopt(zmq.CONFLATE,  chr(1))\r\n        self.sock.setsockopt(zmq.SUBSCRIBE, \"webUIStatus\")\r\nelse:\r\n        # for python 3\r\n        self.sock.setsockopt_string(zmq.CONFLATE, \"1\")\r\n        self.sock.setsockopt_string(zmq.SUBSCRIBE, \"webUIStatus\")\r\n\r\nself.sock.connect(\"tcp://{}:{}\".format(self.config.host, self.config.subPort))\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1331", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1331/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1331/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1331/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1331", "id": 497126715, "node_id": "MDU6SXNzdWU0OTcxMjY3MTU=", "number": 1331, "title": "Issues with libraries on 18.1.0", "user": {"login": "nomnemnom", "id": 3052405, "node_id": "MDQ6VXNlcjMwNTI0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3052405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nomnemnom", "html_url": "https://github.com/nomnemnom", "followers_url": "https://api.github.com/users/nomnemnom/followers", "following_url": "https://api.github.com/users/nomnemnom/following{/other_user}", "gists_url": "https://api.github.com/users/nomnemnom/gists{/gist_id}", "starred_url": "https://api.github.com/users/nomnemnom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nomnemnom/subscriptions", "organizations_url": "https://api.github.com/users/nomnemnom/orgs", "repos_url": "https://api.github.com/users/nomnemnom/repos", "events_url": "https://api.github.com/users/nomnemnom/events{/privacy}", "received_events_url": "https://api.github.com/users/nomnemnom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-09-23T14:17:40Z", "updated_at": "2019-09-24T13:31:25Z", "closed_at": "2019-09-24T13:31:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI was using pyzmq 17.0.0 on my system that I previously installed with `pip install pyzmq==17.0.0`.\r\n\r\nAfter I updated zeromq from I found that 18.0.0 installed with `pip install pyzmq==18.1.0` does not work on my system, but if I install it with `pip install pyzmq==18.1.0 --install-option=\"--zmq=bundled\"` it starts working fine again.\r\n\r\nWhile debugging I noticed that both 17.0.0 and 18.1.0 with --install-option use my systems libsodium, but that 18.1.0 installed without the option comes with it's own bundled libsodium.\r\n\r\n*17.0.0*\r\n```\r\n\u2514\u2500 $ \u25b6 lsof -p xxxx | grep -iE 'libzmq|sodium'\r\npython 31353 /usr/lib/x86_64-linux-gnu/libsodium.so.18.0.1\r\npython 31353 /home/user/.virtualenvs/indy-node/lib/python3.5/site-packages/zmq/.libs/libzmq-0576c57a.so.5.0.2\r\n```\r\n\r\n*18.1.0*\r\n```\r\n\u2514\u2500 $ \u25b6 lsof -p xxxx | grep -iE 'libzmq|sodium'\r\npython  /usr/lib/x86_64-linux-gnu/libsodium.so.18.0.1\r\npython  /home/user/.virtualenvs/indy-node/lib/python3.5/site-packages/zmq/.libs/libsodium-bcf9f097.so.23.3.0\r\npython 31445 /home/user/.virtualenvs/indy-node/lib/python3.5/site-packages/zmq/.libs/libzmq-1358af2c.so.5.2.2\r\n\r\n\u2514\u2500 $ \u25b6 ldd libzmq-1358af2c.so.5.2.2\r\n linux-vdso.so.1 => (0x00007ffc07be3000)\r\n libsodium-bcf9f097.so.23.3.0 => /home/user/.virtualenvs/indy-node/lib/python3.5/site-packages/zmq/.libs/././libsodium-bcf9f097.so.23.3.0 (0x00007fc327e4a000)\r\n librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007fc327c42000)\r\n libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fc327a25000)\r\n libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fc3276a3000)\r\n libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fc32739a000)\r\n libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc326fd0000)\r\n libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fc326dba000)\r\n /lib64/ld-linux-x86-64.so.2 (0x00007fc328447000)\r\n```\r\n\r\n*18.1.0 --install-option=\"\u2013zmq=bundled\"*\r\n```\r\n\u2514\u2500 $ \u25b6 lsof -p xxxx | grep -iE 'libzmq|sodium'\r\npython /usr/lib/x86_64-linux-gnu/libsodium.so.18.0.1\r\npython /home/user/.virtualenvs/indy-node/lib/python3.5/site-packages/zmq/libzmq.cpython-35m-x86_64-linux-gnu.so\r\n\r\n\u2514\u2500 $ \u25b6 ldd libzmq.cpython-35m-x86_64-linux-gnu.so\r\n linux-vdso.so.1 => (0x00007ffd68cfd000)\r\n librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f03c8852000)\r\n libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f03c84d0000)\r\n libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f03c81c7000)\r\n libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f03c7fb1000)\r\n libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f03c7d94000)\r\n libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f03c79ca000)\r\n /lib64/ld-linux-x86-64.so.2 (0x00007f03c8d19000)\r\n```\r\n\r\nI do not know if this is expected, and if this is causing my issues, so I wanted to ask you guys if there are some gotchas that I need to know when updating.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1327", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1327/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1327/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1327/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1327", "id": 493720760, "node_id": "MDU6SXNzdWU0OTM3MjA3NjA=", "number": 1327, "title": "Support unix domain sockets under Win10", "user": {"login": "casabre", "id": 25963696, "node_id": "MDQ6VXNlcjI1OTYzNjk2", "avatar_url": "https://avatars0.githubusercontent.com/u/25963696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/casabre", "html_url": "https://github.com/casabre", "followers_url": "https://api.github.com/users/casabre/followers", "following_url": "https://api.github.com/users/casabre/following{/other_user}", "gists_url": "https://api.github.com/users/casabre/gists{/gist_id}", "starred_url": "https://api.github.com/users/casabre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/casabre/subscriptions", "organizations_url": "https://api.github.com/users/casabre/orgs", "repos_url": "https://api.github.com/users/casabre/repos", "events_url": "https://api.github.com/users/casabre/events{/privacy}", "received_events_url": "https://api.github.com/users/casabre/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-15T10:27:46Z", "updated_at": "2019-09-25T07:01:02Z", "closed_at": "2019-09-25T07:01:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to the following [blog article](https://devblogs.microsoft.com/commandline/af_unix-comes-to-windows/), Win10 supports now AF_UNIX domain sockets. If I use `ipc://`, a not supported socket type will be reported. Thus, could please extend the compatible Win10 sockets to AF_UNIX as well. The support of the utilized Win10 version can be checked by `sc query afunix`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1322", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1322/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1322/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1322/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1322", "id": 486203328, "node_id": "MDU6SXNzdWU0ODYyMDMzMjg=", "number": 1322, "title": "Cannot immediately send on Dealer socket when using a monitor socket", "user": {"login": "Jeducious", "id": 34228929, "node_id": "MDQ6VXNlcjM0MjI4OTI5", "avatar_url": "https://avatars1.githubusercontent.com/u/34228929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jeducious", "html_url": "https://github.com/Jeducious", "followers_url": "https://api.github.com/users/Jeducious/followers", "following_url": "https://api.github.com/users/Jeducious/following{/other_user}", "gists_url": "https://api.github.com/users/Jeducious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jeducious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jeducious/subscriptions", "organizations_url": "https://api.github.com/users/Jeducious/orgs", "repos_url": "https://api.github.com/users/Jeducious/repos", "events_url": "https://api.github.com/users/Jeducious/events{/privacy}", "received_events_url": "https://api.github.com/users/Jeducious/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-28T07:22:15Z", "updated_at": "2019-08-28T10:09:22Z", "closed_at": "2019-08-28T10:09:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following code (which I modified from [here](https://github.com/zeromq/pyzmq/blob/master/examples/monitoring/simple_monitor.py) ) that involves a dealer socket which I am monitoring for the connection event, this helps me to know that I have a successful connection and should be able to send messages now (I think!):\r\n```python\r\n\r\ndef event_monitor(monitor):\r\n    evt = recv_monitor_message(monitor)\r\n    evt.update({'description': EVENT_MAP[evt['event']]})\r\n    print(\"Event: {}\".format(evt))\r\n    \r\n    return evt\r\n\r\nif dealer_monitor.poll(0):\r\n    evt = event_monitor(dealer_monitor)\r\n\r\n    if evt['event'] == zmq.EVENT_ACCEPTED: \r\n                     \r\n        hello_msg = utils.MsgWrapper(\r\n                        command = utils.hello_cip, t_uuid = t_uuid)\r\n        dealer.send_string(json.dumps(hello_msg.serialize()))\r\n```\r\n\r\nThe dealer socket never sends, however, if I modify this to send once the method consuming the monitor socket event has concluded, then the dealer socket can send. I am curious to know why, the docs make no mention of limitations of the dealer socket in this manner. I thought that once I have received the connected event, the socket is in a state that it can send. Is this not the case, or am I missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1320", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1320/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1320/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1320/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1320", "id": 481732724, "node_id": "MDU6SXNzdWU0ODE3MzI3MjQ=", "number": 1320, "title": "socket.recv(flags=zmq.NOBLOCK)  always throws zmq error Resource temporarily unavailable", "user": {"login": "shivarajalagond", "id": 26146204, "node_id": "MDQ6VXNlcjI2MTQ2MjA0", "avatar_url": "https://avatars0.githubusercontent.com/u/26146204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivarajalagond", "html_url": "https://github.com/shivarajalagond", "followers_url": "https://api.github.com/users/shivarajalagond/followers", "following_url": "https://api.github.com/users/shivarajalagond/following{/other_user}", "gists_url": "https://api.github.com/users/shivarajalagond/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivarajalagond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivarajalagond/subscriptions", "organizations_url": "https://api.github.com/users/shivarajalagond/orgs", "repos_url": "https://api.github.com/users/shivarajalagond/repos", "events_url": "https://api.github.com/users/shivarajalagond/events{/privacy}", "received_events_url": "https://api.github.com/users/shivarajalagond/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-16T18:33:32Z", "updated_at": "2019-08-22T13:16:40Z", "closed_at": "2019-08-22T13:16:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have created simple client/server using pyzmq. One thing I am not sure is the recv() does not recive the message even though its been sent from server. It just ignores it and throws an error which I find to be strange unless my understanding of the behavior is wrong.\r\n\r\n**Client.py**\r\n\r\n```\r\ntry:\r\n  socket = context.socket(zmq.REQ)\r\n  socket.connect(\"tcp://localhost:2222\")\r\n  print(\"Sending request\")\r\n  socket.send(b\"send the message\")\r\n  message = socket.recv(flags=zmq.NOBLOCK)\r\n  print(\"Received reply %s \" % message)\r\nexcept Exception as e:\r\n  print(str(e))\r\n```\r\n\r\n**Server.py**\r\n\r\n ```\r\ncontext = zmq.Context()\r\n socket = context.socket(zmq.REP)\r\n socket.bind(\"tcp://*:2222\")\r\n while True:\r\n   message = socket.recv()\r\n   socket.send(b\"Ack\")\r\n```\r\nI think the client should recieve the Ack and print it instead of throwing the exception.\r\nThe document says,\r\n**With flags=NOBLOCK, this raises ZMQError if no messages have arrived**\r\n\r\nClearly the server is responding with \"Ack\" as soon as it receives the message.\r\nThe Error message is, Resource temporarily unavailable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1319", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1319/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1319/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1319/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1319", "id": 480835188, "node_id": "MDU6SXNzdWU0ODA4MzUxODg=", "number": 1319, "title": "recv_json hangs inside pytest environment", "user": {"login": "JulianRMedina", "id": 22779710, "node_id": "MDQ6VXNlcjIyNzc5NzEw", "avatar_url": "https://avatars2.githubusercontent.com/u/22779710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianRMedina", "html_url": "https://github.com/JulianRMedina", "followers_url": "https://api.github.com/users/JulianRMedina/followers", "following_url": "https://api.github.com/users/JulianRMedina/following{/other_user}", "gists_url": "https://api.github.com/users/JulianRMedina/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianRMedina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianRMedina/subscriptions", "organizations_url": "https://api.github.com/users/JulianRMedina/orgs", "repos_url": "https://api.github.com/users/JulianRMedina/repos", "events_url": "https://api.github.com/users/JulianRMedina/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianRMedina/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-14T18:53:12Z", "updated_at": "2019-08-14T20:07:08Z", "closed_at": "2019-08-14T20:07:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python: 3.6\r\npyzmq: 17.1.2, this same issue occurs on pyzmq 18.2.0.dev0 or current master\r\nI'm trying to use a pytest fixture to create push and poll sockets. Like so:\r\n\r\n```\r\n@pytest.fixture(scope=\"function\")\r\ndef mock_zmq_push_pull():\r\n    \"\"\"\r\n    Pytest fixture for generating a zmq PULL socket.\r\n\r\n    :return: A zmq PULL socket which messages can be pulled from.\r\n    \"\"\"\r\n\r\n    bind_connection_pull_point = \"tcp://127.0.0.1:3003\"\r\n    bind_connection_push_point = \"tcp://127.0.0.1:3003\"\r\n\r\n    # Generate zmq context\r\n    context = zmq.Context()\r\n\r\n    # zmq.PUSH/PULL are recommended from pyzmq docs. Pylint believes this\r\n    # is incorrect\r\n    push_connection = context.socket(zmq.PUSH)  # pylint: disable=no-member\r\n    push_connection.connect(bind_connection_push_point)\r\n    pull_connection = context.socket(zmq.PULL)  # pylint: disable=no-member\r\n    pull_connection.connect(bind_connection_pull_point)\r\n\r\n    # Allow time for connections to start\r\n    time.sleep(0.15)\r\n\r\n    # Yield connection\r\n    yield (push_connection, pull_connection)\r\n\r\n    # Close the context and all associated sockets\r\n    context.destroy()\r\n```\r\n\r\nThen, when I go to use them in a simple example, the recv_json() of the pull hangs forever:\r\n\r\n```\r\ndef test_get_gui_connection_push(mock_zmq_push_pull):\r\n    \"\"\"\r\n    Test that get_gui_connection can create a push connection, send messages, \r\n    and have them recieved by a pull connection.\r\n\r\n    :param mock_zmq_pull: mock zmq PULL socket that can listen for messages\r\n    \"\"\"\r\n\r\n    send_data = {\"key-1\": \"data-1\"}\r\n\r\n    # Use push_connection to send a simple json object\r\n    mock_zmq_push_pull[0].send_json(send_data)\r\n\r\n    # Check that mock pull connection recieved the object\r\n    recvd_data = mock_zmq_push_pull[1].recv_json()\r\n\r\n    assert recvd_data == send_data\r\n```\r\n\r\nZMQ stacktrace shows the following when keyboard interrupted:\r\n\r\n```\r\nzmq/backend/cython/checkrc.pxd:12: KeyboardInterrupt\r\nTraceback (most recent call last):\r\n  File \"/usr/lib64/python3.6/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/usr/lib64/python3.6/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/usr/local/lib/python3.6/site-packages/pytest.py\", line 102, in <module>\r\n    raise SystemExit(pytest.main())\r\n  File \"/usr/local/lib/python3.6/site-packages/_pytest/config/__init__.py\", line 74, in main\r\n    return config.hook.pytest_cmdline_main(config=config)\r\n  File \"/usr/local/lib/python3.6/site-packages/pluggy/hooks.py\", line 289, in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/pluggy/manager.py\", line 87, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/pluggy/manager.py\", line 81, in <lambda>\r\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\n  File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 208, in _multicall\r\n    return outcome.get_result()\r\n  File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 80, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 187, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/usr/local/lib/python3.6/site-packages/_pytest/main.py\", line 250, in pytest_cmdline_main\r\n    return wrap_session(config, _main)\r\n  File \"/usr/local/lib/python3.6/site-packages/_pytest/main.py\", line 243, in wrap_session\r\n    session=session, exitstatus=session.exitstatus\r\n  File \"/usr/local/lib/python3.6/site-packages/pluggy/hooks.py\", line 289, in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/pluggy/manager.py\", line 87, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/pluggy/manager.py\", line 81, in <lambda>\r\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\n  File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 203, in _multicall\r\n    gen.send(outcome)\r\n  File \"/usr/local/lib/python3.6/site-packages/_pytest/terminal.py\", line 649, in pytest_sessionfinish\r\n    outcome.get_result()\r\n  File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 80, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/usr/local/lib/python3.6/site-packages/pluggy/callers.py\", line 187, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/usr/local/lib/python3.6/site-packages/_pytest/runner.py\", line 67, in pytest_sessionfinish\r\n    session._setupstate.teardown_all()\r\n  File \"/usr/local/lib/python3.6/site-packages/_pytest/runner.py\", line 320, in teardown_all\r\n    self._pop_and_teardown()\r\n  File \"/usr/local/lib/python3.6/site-packages/_pytest/runner.py\", line 291, in _pop_and_teardown\r\n    self._teardown_with_finalization(colitem)\r\n  File \"/usr/local/lib/python3.6/site-packages/_pytest/runner.py\", line 310, in _teardown_with_finalization\r\n    self._callfinalizers(colitem)\r\n  File \"/usr/local/lib/python3.6/site-packages/_pytest/runner.py\", line 299, in _callfinalizers\r\n    fin()\r\n  File \"/usr/local/lib/python3.6/site-packages/_pytest/fixtures.py\", line 847, in finish\r\n    raise val.with_traceback(tb)\r\n  File \"/usr/local/lib/python3.6/site-packages/_pytest/fixtures.py\", line 840, in finish\r\n    func()\r\n  File \"/usr/local/lib/python3.6/site-packages/_pytest/fixtures.py\", line 791, in _teardown_yield_fixture\r\n    next(it)\r\n  File \"/root/space_roulette_astro/tests/conftest.py\", line 206, in mock_zmq_push_pull\r\n    context.destroy()\r\n  File \"zmq/backend/cython/context.pyx\", line 244, in zmq.backend.cython.context.Context.destroy\r\n  File \"zmq/backend/cython/context.pyx\", line 136, in zmq.backend.cython.context.Context.term\r\n  File \"zmq/backend/cython/checkrc.pxd\", line 12, in zmq.backend.cython.checkrc._check_rc\r\nKeyboardInterrupt\r\n```\r\nIf I remove the context.destroy(), it shows that the code was interupted in recv_json()\r\n\r\n```\r\n    def recv_json(self, flags=0, **kwargs):\r\n        \"\"\"Receive a Python object as a message using json to serialize.\r\n    \r\n        Keyword arguments are passed on to json.loads\r\n    \r\n        Parameters\r\n        ----------\r\n        flags : int\r\n            Any valid flags for :func:`Socket.recv`.\r\n    \r\n        Returns\r\n        -------\r\n        obj : Python object\r\n            The Python object that arrives as a message.\r\n    \r\n        Raises\r\n        ------\r\n        ZMQError\r\n            for any of the reasons :func:`~Socket.recv` might fail\r\n        \"\"\"\r\n>       msg = self.recv(flags)\r\n\r\n/usr/local/lib64/python3.6/site-packages/zmq/sugar/socket.py:665: \r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1315", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1315/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1315/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1315/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1315", "id": 475455190, "node_id": "MDU6SXNzdWU0NzU0NTUxOTA=", "number": 1315, "title": "fails to install with Python 3.8.0b3", "user": {"login": "cs01", "id": 5715368, "node_id": "MDQ6VXNlcjU3MTUzNjg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5715368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cs01", "html_url": "https://github.com/cs01", "followers_url": "https://api.github.com/users/cs01/followers", "following_url": "https://api.github.com/users/cs01/following{/other_user}", "gists_url": "https://api.github.com/users/cs01/gists{/gist_id}", "starred_url": "https://api.github.com/users/cs01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cs01/subscriptions", "organizations_url": "https://api.github.com/users/cs01/orgs", "repos_url": "https://api.github.com/users/cs01/repos", "events_url": "https://api.github.com/users/cs01/events{/privacy}", "received_events_url": "https://api.github.com/users/cs01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-01T03:43:05Z", "updated_at": "2019-08-08T13:26:36Z", "closed_at": "2019-08-08T13:26:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I stumbled on this while testing pipx for python 3.8 compatibility and wanted to report it here. \r\n\r\n```\r\npython --version\r\nPython 3.8.0b3\r\n```\r\n\r\n```\r\npip install pyzmq\r\n...\r\n    In file included from /home/csmith/Downloads/Python-3.8.0b3/Include/compile.h:5:0,\r\n                     from /home/csmith/Downloads/Python-3.8.0b3/Include/Python.h:138,\r\n                     from zmq/backend/cython/_device.c:4:\r\n    /home/csmith/Downloads/Python-3.8.0b3/Include/code.h:122:28: note: declared here\r\n     PyAPI_FUNC(PyCodeObject *) PyCode_New(\r\n                                ^~~~~~~~~~\r\n    error: command 'gcc' failed with exit status 1\r\n    ----------------------------------------\r\nERROR: Command errored out with exit status 1: /tmp/pvenv/bin/python -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-install-6mnvkxwv/pyzmq/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-install-6mnvkxwv/pyzmq/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record /tmp/pip-record-57y2pv8f/install-record.txt --single-version-externally-managed --compile --install-headers /tmp/pvenv/include/site/python3.8/pyzmq Check the logs for full command output.\r\n```\r\n\r\nFull log: https://gist.github.com/cs01/174f417c0857e11d9beffa4d17e600ac\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1314", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1314/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1314/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1314/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1314", "id": 469602866, "node_id": "MDU6SXNzdWU0Njk2MDI4NjY=", "number": 1314, "title": "AttributeError: module 'zmq' has no attribute 'asyncio'", "user": {"login": "khssnv", "id": 833019, "node_id": "MDQ6VXNlcjgzMzAxOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/833019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khssnv", "html_url": "https://github.com/khssnv", "followers_url": "https://api.github.com/users/khssnv/followers", "following_url": "https://api.github.com/users/khssnv/following{/other_user}", "gists_url": "https://api.github.com/users/khssnv/gists{/gist_id}", "starred_url": "https://api.github.com/users/khssnv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khssnv/subscriptions", "organizations_url": "https://api.github.com/users/khssnv/orgs", "repos_url": "https://api.github.com/users/khssnv/repos", "events_url": "https://api.github.com/users/khssnv/events{/privacy}", "received_events_url": "https://api.github.com/users/khssnv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-18T07:02:16Z", "updated_at": "2019-07-18T10:59:16Z", "closed_at": "2019-07-18T10:10:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I attempted `zmq.asyncio` with Python 3.6.8. There was an issue:\r\n```console\r\nPython 3.6.8 (default, Jan 14 2019, 11:02:34)\r\n[GCC 8.0.1 20180414 (experimental) [trunk revision 259383]] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import zmq\r\n>>> zmq.asyncio\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAttributeError: module 'zmq' has no attribute 'asyncio'\r\n```\r\nI downloaded `18.0.2` release and replace [this](https://github.com/zeromq/pyzmq/blob/de6e47c7997e7ba109f21b3ff16673a95f8ca9a4/setup.py#L1293) with just `pass`. Then installed module with `pip install -e .` and not it works.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1310", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1310/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1310/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1310/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1310", "id": 466576919, "node_id": "MDU6SXNzdWU0NjY1NzY5MTk=", "number": 1310, "title": "PyZMQ with tornado 6.0 raises the wrong warning.", "user": {"login": "Zsailer", "id": 2791223, "node_id": "MDQ6VXNlcjI3OTEyMjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2791223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zsailer", "html_url": "https://github.com/Zsailer", "followers_url": "https://api.github.com/users/Zsailer/followers", "following_url": "https://api.github.com/users/Zsailer/following{/other_user}", "gists_url": "https://api.github.com/users/Zsailer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zsailer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zsailer/subscriptions", "organizations_url": "https://api.github.com/users/Zsailer/orgs", "repos_url": "https://api.github.com/users/Zsailer/repos", "events_url": "https://api.github.com/users/Zsailer/events{/privacy}", "received_events_url": "https://api.github.com/users/Zsailer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-10T23:38:11Z", "updated_at": "2019-07-11T16:03:42Z", "closed_at": "2019-07-11T07:43:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "PyZMQ raises the following warning when users upgrade to tornado>=6.x:\r\n\r\n```bash\r\nUsers/klay6683/miniconda3/envs/py37/lib/python3.7/site-packages/notebook/services/kernels/kernelmanager.py:19: VisibleDeprecationWarning: zmq.eventloop.minitornado is deprecated in pyzmq 14.0 and will be removed.\r\n    Install tornado itself to use zmq with the tornado IOLoop.\r\n```\r\n_Originally posted by @michaelaye in https://github.com/jupyter/notebook/issues/4549#issuecomment-509817150_\r\n\r\nThis happens because pyzmq attempts to import a module in tornado that no longer exists (specifically, [this import chunk](https://github.com/zeromq/pyzmq/blob/ae4895545c5053ea6205f9eef9388ea65199447b/zmq/eventloop/zmqstream.py#L40-L49)). When it cannot find this module, it **assumes tornado is not installed**, tries to import a deprecated module inside pyzmq (i.e. minitornado), and triggers this warning. Tornado *is* of course installed\u2014it just no longer contains this specific module\u2014so this warning isn't communicating the correct problem.\r\n\r\nTo fix, we either pull out the imported function from the deprecated module *or* stop using this function since it doesn't exist in Tornado anymore. \r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1309", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1309/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1309/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1309/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1309", "id": 466527946, "node_id": "MDU6SXNzdWU0NjY1Mjc5NDY=", "number": 1309, "title": "Getting Socket operation on non-socket when creating and destroying contexts", "user": {"login": "ddamiani", "id": 3155730, "node_id": "MDQ6VXNlcjMxNTU3MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3155730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ddamiani", "html_url": "https://github.com/ddamiani", "followers_url": "https://api.github.com/users/ddamiani/followers", "following_url": "https://api.github.com/users/ddamiani/following{/other_user}", "gists_url": "https://api.github.com/users/ddamiani/gists{/gist_id}", "starred_url": "https://api.github.com/users/ddamiani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ddamiani/subscriptions", "organizations_url": "https://api.github.com/users/ddamiani/orgs", "repos_url": "https://api.github.com/users/ddamiani/repos", "events_url": "https://api.github.com/users/ddamiani/events{/privacy}", "received_events_url": "https://api.github.com/users/ddamiani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-10T21:22:03Z", "updated_at": "2019-08-07T12:05:01Z", "closed_at": "2019-08-07T12:05:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm encountering an issue when creating and destroying contexts multiple times. When using a context created after destroying another, sometimes all the sockets created from that context will immediately show as closed via `socket.closed` and throw a \"Socket operation on non-socket\" error if used (which makes sense if they are closed).\r\n\r\nHere is a simple script that reliably causes the issue for me:\r\n\r\n```python\r\nimport zmq\r\n\r\nprint(\"pyzmq: %s zmq: %s\" %(zmq.__version__, zmq.zmq_version()))\r\n\r\nfor i in range(1000): \r\n    print(\"pass\", i) \r\n    ctx = zmq.Context()\r\n    print(\"ctx info\", hex(id(ctx)), hex(id(ctx.underlying)))\r\n    sock1 = ctx.socket(zmq.REQ) \r\n    sock2 = ctx.socket(zmq.REQ) \r\n    print(\"after create\", sock1.closed, sock2.closed, ctx.closed)\r\n    print(\"after create\", sock1.fileno(), sock2.fileno()) \r\n    ctx.destroy() \r\n    print(\"after destroy\", sock1.closed, sock2.closed, ctx.closed)\r\n```\r\n\r\nExample output of the error:\r\n```\r\npyzmq: 18.0.2 zmq: 4.3.1\r\npass 0\r\nctx info 0x7fccb2ab50d0 0x7fccb66e4710\r\nafter create False False False\r\nafter create 15 17\r\nafter destroy True True True\r\npass 1\r\nctx info 0x7fccb2ab5150 0x7fccb600a1b0\r\nafter create True True False\r\nTraceback (most recent call last):\r\n  File \"really_stupid_test.py\", line 13, in <module>\r\n    print(\"after create\", sock1.fileno(), sock2.fileno()) \r\n  File \"/u1/ddamiani/ami-venv/lib/python3.7/site-packages/zmq/sugar/socket.py\", line 161, in fileno\r\n    return self.FD\r\n  File \"/u1/ddamiani/ami-venv/lib/python3.7/site-packages/zmq/sugar/attrsettr.py\", line 48, in __getattr__\r\n    return self._get_attr_opt(upper_key, opt)\r\n  File \"/u1/ddamiani/ami-venv/lib/python3.7/site-packages/zmq/sugar/attrsettr.py\", line 52, in _get_attr_opt\r\n    return self.get(opt)\r\n  File \"zmq/backend/cython/socket.pyx\", line 477, in zmq.backend.cython.socket.Socket.get\r\n  File \"zmq/backend/cython/socket.pyx\", line 135, in zmq.backend.cython.socket._check_closed\r\nzmq.error.ZMQError: Socket operation on non-socket\r\n```\r\nThe iteration of the loop the error happens on is not always the same. If I explicitly close all the sockets before destroying the context then everything is fine. Also if I force it to use the **cffi** backend instead of **cython** then there is no error. I get the same behavior on pyzmq 17 and later. Everything is fine on pyzmq 16.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1305", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1305/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1305/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1305/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1305", "id": 462308978, "node_id": "MDU6SXNzdWU0NjIzMDg5Nzg=", "number": 1305, "title": "Closing an async socket raises error in poll method", "user": {"login": "elfjes", "id": 7681923, "node_id": "MDQ6VXNlcjc2ODE5MjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7681923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elfjes", "html_url": "https://github.com/elfjes", "followers_url": "https://api.github.com/users/elfjes/followers", "following_url": "https://api.github.com/users/elfjes/following{/other_user}", "gists_url": "https://api.github.com/users/elfjes/gists{/gist_id}", "starred_url": "https://api.github.com/users/elfjes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elfjes/subscriptions", "organizations_url": "https://api.github.com/users/elfjes/orgs", "repos_url": "https://api.github.com/users/elfjes/repos", "events_url": "https://api.github.com/users/elfjes/events{/privacy}", "received_events_url": "https://api.github.com/users/elfjes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-29T14:44:33Z", "updated_at": "2019-07-02T09:30:09Z", "closed_at": "2019-07-02T09:30:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When directly polling a socket with asyncio, an uncatchable CancellationError is raised, similiar to what happened in #1114 \r\n\r\nVersion info\r\n```\r\nlibzmq-4.3.1\r\npyzmq-18.0.2\r\nPython-3.7.3 (default, Apr  3 2019, 19:16:38) \r\n[GCC 8.0.1 20180414 (experimental) [trunk revision 259383]]\r\n```\r\nsome code to reproduce\r\n```\r\nimport asyncio\r\nimport zmq\r\nfrom zmq.asyncio import Context\r\n\r\n\r\nasync def start_polling(socket):\r\n    try:\r\n        print('starting')\r\n        await socket.poll()\r\n    except asyncio.CancelledError:\r\n        print('Got cancelled')\r\n    finally:\r\n        print('done')\r\n\r\n\r\nasync def stop(socket):\r\n    await asyncio.sleep(1)\r\n    socket.close()\r\n    print('socket closed')\r\n\r\n\r\nasync def main():\r\n    socket = Context.instance().socket(zmq.PULL)\r\n    await asyncio.gather(\r\n        start_polling(socket),\r\n        stop(socket)\r\n    )\r\n\r\nasyncio.run(main(), debug=True)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1304", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1304/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1304/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1304/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1304", "id": 461686167, "node_id": "MDU6SXNzdWU0NjE2ODYxNjc=", "number": 1304, "title": "18.0.1 files re-released on Jun 27 with new hashes", "user": {"login": "parente", "id": 153745, "node_id": "MDQ6VXNlcjE1Mzc0NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/153745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parente", "html_url": "https://github.com/parente", "followers_url": "https://api.github.com/users/parente/followers", "following_url": "https://api.github.com/users/parente/following{/other_user}", "gists_url": "https://api.github.com/users/parente/gists{/gist_id}", "starred_url": "https://api.github.com/users/parente/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parente/subscriptions", "organizations_url": "https://api.github.com/users/parente/orgs", "repos_url": "https://api.github.com/users/parente/repos", "events_url": "https://api.github.com/users/parente/events{/privacy}", "received_events_url": "https://api.github.com/users/parente/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-06-27T18:32:08Z", "updated_at": "2019-06-28T13:22:26Z", "closed_at": "2019-06-28T13:10:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pipenv started complaining that the hashes for pyzmq 18.0.1 changed upstream on pypi from what we had in a lock file for one of our projects. Sure enough, two of the packages on pypi have today's date unlike the rest of them from March.\r\n\r\nhttps://pypi.org/project/pyzmq/18.0.1/#files\r\n\r\nI'm not sure if old packages were overwritten or if these are new flavors that Pipenv suddenly decided to pick up.\r\n\r\nJust a small FYI.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1303", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1303/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1303/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1303/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1303", "id": 461611074, "node_id": "MDU6SXNzdWU0NjE2MTEwNzQ=", "number": 1303, "title": "Tox failed to install v18.0.2 on Windows", "user": {"login": "pshv", "id": 13659922, "node_id": "MDQ6VXNlcjEzNjU5OTIy", "avatar_url": "https://avatars1.githubusercontent.com/u/13659922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pshv", "html_url": "https://github.com/pshv", "followers_url": "https://api.github.com/users/pshv/followers", "following_url": "https://api.github.com/users/pshv/following{/other_user}", "gists_url": "https://api.github.com/users/pshv/gists{/gist_id}", "starred_url": "https://api.github.com/users/pshv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pshv/subscriptions", "organizations_url": "https://api.github.com/users/pshv/orgs", "repos_url": "https://api.github.com/users/pshv/repos", "events_url": "https://api.github.com/users/pshv/events{/privacy}", "received_events_url": "https://api.github.com/users/pshv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-27T15:52:37Z", "updated_at": "2019-07-10T08:18:42Z", "closed_at": "2019-07-10T08:18:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I faced 18.0.2 installation probem on my Jenkins server when trying to install pyzmq as a part of jupyter package within tox\r\n\r\n```\r\n3...\r\n2...\r\n1...\r\nUsing bundled libzmq\r\nalready have bundled\\zeromq\r\nstaging platform.hpp from: C:\\Users\\pshv\\AppData\\Local\\Temp\\pip-install-kd8w89jo\\pyzmq\\buildutils\\include_win32\r\nerror: Microsoft Visual C++ 14.0 is required. Get it with \"Microsoft Visual C++ Build Tools\": https://visualstudio.microsoft.com/downloads/\r\n************************************************\r\n----------------------------------------\r\nERROR: Failed building wheel for pyzmq\r\nRunning setup.py clean for pyzmq\r\n```\r\n\r\nand a bit below\r\n\r\n```\r\nrunning build_ext\r\nrunning configure\r\n{'libraries': ['libzmq'], 'include_dirs': [], 'library_dirs': [], 'runtime_library_dirs': [], 'extra_link_args': []}\r\nWarning: Couldn't find an acceptable libzmq on the system.\r\n\r\nIf you expected pyzmq to link against an installed libzmq, please check to make sure:\r\n\r\n\t* You have a C compiler installed\r\n\t* A development version of Python is installed (including headers)\r\n\t* A development version of ZMQ >= 3.2 is installed (including headers)\r\n\t* If ZMQ is not in a default location, supply the argument --zmq=<path>\r\n\t* If you did recently install ZMQ to a default location,\r\n\t  try rebuilding the ld cache with `sudo ldconfig`\r\n\t  or specify zmq's location with `--zmq=/usr/local`\r\n\r\nYou can skip all this detection/waiting nonsense if you know\r\nyou want pyzmq to bundle libzmq as an extension by passing:\r\n\r\n\t`--zmq=bundled`\r\n\r\nI will now try to build libzmq as a Python extension\r\nunless you interrupt me (^C) in the next 10 seconds...\r\n\r\n************************************************\r\n\r\n10...\r\n 9...\r\n 8...\r\n 7...\r\n 6...\r\n 5...\r\n 4...\r\n 3...\r\n 2...\r\n 1...\r\nUsing bundled libzmq\r\nalready have bundled\\zeromq\r\nalready have platform.hpp\r\nFatal: Cython-generated file 'zmq\\backend\\cython\\_device.c' not found.\r\n\t\t\t\tCython >= 0.20 is required to compile pyzmq from a development branch.\r\n\t\t\t\tPlease install Cython or download a release package of pyzmq.\r\n\r\n************************************************\r\n************************************************\r\n----------------------------------------\r\nERROR: Command \"'e:\\jenkins\\workspace\\job\\tests\\.tox\\py37-win\\scripts\\python.exe' -u -c 'import setuptools, tokenize;__file__='\"'\"'C:\\\\Users\\\\pshv\\\\AppData\\\\Local\\\\Temp\\\\pip-install-kd8w89jo\\\\pyzmq\\\\setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record 'C:\\Users\\pshv\\AppData\\Local\\Temp\\pip-record-cfa2znup\\install-record.txt' --single-version-externally-managed --compile --install-headers 'e:\\jenkins\\workspace\\job\\tests\\.tox\\py37-win\\include\\site\\python3.7\\pyzmq'\" failed with error code 1 in C:\\Users\\pshv\\AppData\\Local\\Temp\\pip-install-kd8w89jo\\pyzmq\\\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1299", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1299/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1299/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1299/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1299", "id": 460609632, "node_id": "MDU6SXNzdWU0NjA2MDk2MzI=", "number": 1299, "title": "parameter missing in documentation", "user": {"login": "rite2hhh", "id": 29960411, "node_id": "MDQ6VXNlcjI5OTYwNDEx", "avatar_url": "https://avatars0.githubusercontent.com/u/29960411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rite2hhh", "html_url": "https://github.com/rite2hhh", "followers_url": "https://api.github.com/users/rite2hhh/followers", "following_url": "https://api.github.com/users/rite2hhh/following{/other_user}", "gists_url": "https://api.github.com/users/rite2hhh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rite2hhh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rite2hhh/subscriptions", "organizations_url": "https://api.github.com/users/rite2hhh/orgs", "repos_url": "https://api.github.com/users/rite2hhh/repos", "events_url": "https://api.github.com/users/rite2hhh/events{/privacy}", "received_events_url": "https://api.github.com/users/rite2hhh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-25T19:52:51Z", "updated_at": "2020-06-08T09:35:15Z", "closed_at": "2020-06-08T09:35:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "A small one, but there's a discrepancy between the documentation and the API.\r\n\r\nThe latest documentation (18.0.0) does not show a required parameter in the API definition, although it list's the requirement right beneath the function name:\r\n\r\nDocumentation:\r\n> [zmq.curve_public()](https://pyzmq.readthedocs.io/en/latest/api/zmq.html#zmq.curve_public) # <---- missing parameter\r\nCompute the public key corresponding to a secret key for use with zmq.CURVE security\r\nParameters: private\u00a0\u2013 The private key as a 40 byte z85-encoded bytestring\r\n...\r\n\r\nAPI:\r\nhttps://github.com/zeromq/pyzmq/blob/c189da9f9bf146790a1a765645282b04d8fce877/zmq/backend/cython/utils.pyx#L65\r\n\r\nIs this a correct reference?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1298", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1298/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1298/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1298/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1298", "id": 460609629, "node_id": "MDU6SXNzdWU0NjA2MDk2Mjk=", "number": 1298, "title": "parameter missing in documentation", "user": {"login": "rite2hhh", "id": 29960411, "node_id": "MDQ6VXNlcjI5OTYwNDEx", "avatar_url": "https://avatars0.githubusercontent.com/u/29960411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rite2hhh", "html_url": "https://github.com/rite2hhh", "followers_url": "https://api.github.com/users/rite2hhh/followers", "following_url": "https://api.github.com/users/rite2hhh/following{/other_user}", "gists_url": "https://api.github.com/users/rite2hhh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rite2hhh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rite2hhh/subscriptions", "organizations_url": "https://api.github.com/users/rite2hhh/orgs", "repos_url": "https://api.github.com/users/rite2hhh/repos", "events_url": "https://api.github.com/users/rite2hhh/events{/privacy}", "received_events_url": "https://api.github.com/users/rite2hhh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-25T19:52:50Z", "updated_at": "2019-06-27T16:56:17Z", "closed_at": "2019-06-27T08:59:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/zeromq/pyzmq/blob/c189da9f9bf146790a1a765645282b04d8fce877/zmq/backend/cython/utils.pyx#L65", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1297", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1297/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1297/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1297/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1297", "id": 458175262, "node_id": "MDU6SXNzdWU0NTgxNzUyNjI=", "number": 1297, "title": "Unable to use Streamer device with inproc", "user": {"login": "jayrbolton", "id": 8740476, "node_id": "MDQ6VXNlcjg3NDA0NzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/8740476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayrbolton", "html_url": "https://github.com/jayrbolton", "followers_url": "https://api.github.com/users/jayrbolton/followers", "following_url": "https://api.github.com/users/jayrbolton/following{/other_user}", "gists_url": "https://api.github.com/users/jayrbolton/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayrbolton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayrbolton/subscriptions", "organizations_url": "https://api.github.com/users/jayrbolton/orgs", "repos_url": "https://api.github.com/users/jayrbolton/repos", "events_url": "https://api.github.com/users/jayrbolton/events{/privacy}", "received_events_url": "https://api.github.com/users/jayrbolton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-19T18:56:02Z", "updated_at": "2019-06-21T17:54:25Z", "closed_at": "2019-06-21T17:54:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use the Streamer device over `inproc` sockets and not getting it to work. Apologies if this is a misunderstanding of zmq or doesn't belong here, but I've hunted far and wide for docs on this and have not found anything.\r\n\r\nHere is some example code for this issue:\r\nhttps://github.com/jayrbolton/zmq_stream_inproc/blob/master/main.py\r\n\r\nIt starts up two push threads and two pull threads with a Streamer in between. If you set the protocol to `inproc`, then messages never get pulled. If you set the protocol to `ipc`, then everything works fine. Any help is appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1296", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1296/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1296/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1296/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1296", "id": 457713838, "node_id": "MDU6SXNzdWU0NTc3MTM4Mzg=", "number": 1296, "title": "async socket.recv hangs and does not recieve messages", "user": {"login": "JonMontgo", "id": 9218336, "node_id": "MDQ6VXNlcjkyMTgzMzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9218336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonMontgo", "html_url": "https://github.com/JonMontgo", "followers_url": "https://api.github.com/users/JonMontgo/followers", "following_url": "https://api.github.com/users/JonMontgo/following{/other_user}", "gists_url": "https://api.github.com/users/JonMontgo/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonMontgo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonMontgo/subscriptions", "organizations_url": "https://api.github.com/users/JonMontgo/orgs", "repos_url": "https://api.github.com/users/JonMontgo/repos", "events_url": "https://api.github.com/users/JonMontgo/events{/privacy}", "received_events_url": "https://api.github.com/users/JonMontgo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-18T21:54:27Z", "updated_at": "2020-05-07T13:09:21Z", "closed_at": "2019-07-05T18:20:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Client:\r\n\r\n```python\r\n#\r\n#   Hello World client in Python\r\n#   Connects REQ socket to tcp://localhost:5555\r\n#   Sends \"Hello\" to server, expects \"World\" back\r\n#\r\nimport asyncio\r\nimport zmq\r\nimport zmq.asyncio\r\n\r\ncontext = zmq.asyncio.Context()\r\n\r\n#  Socket to talk to server\r\nprint(\"Connecting to hello world server\u2026\")\r\nsocket = context.socket(zmq.REQ)\r\nsocket.connect(\"tcp://localhost:5555\")\r\n\r\n\r\nasync def send_req(request):\r\n    print(\"Sending request %s \u2026\" % request)\r\n    await socket.send_multipart([b\"Hello\"])\r\n    print(\"Waiting for reply\")\r\n    message = await socket.recv_multipart()\r\n    print(\"Received reply %s [ %s ]\" % (request, message))\r\n\r\n\r\nasync def schedule_all():\r\n    for i in range(0, 7000):\r\n        await send_req(i)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(schedule_all())\r\n```\r\n\r\nServer:\r\n\r\n```python\r\n#\r\n#   Hello World server in Python\r\n#   Binds REP socket to tcp://*:5555\r\n#   Expects b\"Hello\" from client, replies with b\"World\"\r\n#\r\nimport asyncio\r\nimport zmq\r\nimport zmq.asyncio\r\n\r\ncontext = zmq.asyncio.Context()\r\nsocket = context.socket(zmq.REP)\r\nsocket.bind(\"tcp://*:5555\")\r\n\r\n\r\nasync def do_work(message):\r\n    print(\"Received request: %s\" % message)\r\n    await asyncio.sleep(1)\r\n    await socket.send_multipart([b\"world\"])\r\n\r\n\r\nasync def recv_loop():\r\n    tasks = []\r\n    print(\"starting loop\")\r\n    while True:\r\n        message, _ = await asyncio.gather(\r\n            socket.recv_multipart(),\r\n            asyncio.gather(*tasks))\r\n        print(message)\r\n        tasks.append(do_work(message))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(recv_loop())\r\n```\r\n\r\nPython 3.7.3\r\npyzmq==18.0.1\r\n\r\nsocket sending doesn't block and if you use a synchronous server to receive the event you will see that it receives the event generated by `await socket.send_multipart([b'hello'])`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1290", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1290/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1290/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1290/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1290", "id": 445833121, "node_id": "MDU6SXNzdWU0NDU4MzMxMjE=", "number": 1290, "title": "send_multipart is not compatible with generator", "user": {"login": "hu6360567", "id": 1241597, "node_id": "MDQ6VXNlcjEyNDE1OTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1241597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hu6360567", "html_url": "https://github.com/hu6360567", "followers_url": "https://api.github.com/users/hu6360567/followers", "following_url": "https://api.github.com/users/hu6360567/following{/other_user}", "gists_url": "https://api.github.com/users/hu6360567/gists{/gist_id}", "starred_url": "https://api.github.com/users/hu6360567/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hu6360567/subscriptions", "organizations_url": "https://api.github.com/users/hu6360567/orgs", "repos_url": "https://api.github.com/users/hu6360567/repos", "events_url": "https://api.github.com/users/hu6360567/events{/privacy}", "received_events_url": "https://api.github.com/users/hu6360567/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-19T15:38:48Z", "updated_at": "2019-11-14T02:17:28Z", "closed_at": "2019-05-26T13:00:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\ndef encap_msg(msg):\r\n    yield b'Procotol v1`\r\n    yield uuid.uuid4().bytes\r\n    yield from msg\r\n\r\nsocket.send_multipart(encap_msg(msg))\r\n```\r\nWhen I ran this snippet part of code, it raised an error.\r\n```\r\nFile \"xxxxxx/zmq/sugar/socket.py\", line 439, in send_multipart\r\n    for msg in msg_parts[:-1]:\r\n'generator' object is not subscriptable\r\n```\r\n\r\nAccording to the document,  msg_parts is iterable, and generators are iterable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1289", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1289/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1289/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1289/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1289", "id": 445403614, "node_id": "MDU6SXNzdWU0NDU0MDM2MTQ=", "number": 1289, "title": "Error during pip install py-zmq-pipeline", "user": {"login": "aks1981", "id": 24263770, "node_id": "MDQ6VXNlcjI0MjYzNzcw", "avatar_url": "https://avatars3.githubusercontent.com/u/24263770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aks1981", "html_url": "https://github.com/aks1981", "followers_url": "https://api.github.com/users/aks1981/followers", "following_url": "https://api.github.com/users/aks1981/following{/other_user}", "gists_url": "https://api.github.com/users/aks1981/gists{/gist_id}", "starred_url": "https://api.github.com/users/aks1981/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aks1981/subscriptions", "organizations_url": "https://api.github.com/users/aks1981/orgs", "repos_url": "https://api.github.com/users/aks1981/repos", "events_url": "https://api.github.com/users/aks1981/events{/privacy}", "received_events_url": "https://api.github.com/users/aks1981/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-17T11:48:58Z", "updated_at": "2019-05-31T08:27:18Z", "closed_at": "2019-05-31T08:27:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi team,\r\n\r\nI am getting below error during ip install py-zmq-pipeline installation. Kindly help me.\r\nI am following  https://py-zmq-pipeline.readthedocs.io/en/latest/installation.html\r\n\r\nlibzmq-4.3.1\r\npyzmq-18.0.1\r\nPython-3.7.3 (default, May 16 2019, 15:54:12) \r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]\r\n\r\nERROR:\r\n\r\n(test) [root@jumpbox-sit test]# **pip install py-zmq-pipeline**\r\nCollecting py-zmq-pipeline\r\n  Using cached https://files.pythonhosted.org/packages/6b/db/1229cfb3461e47517cca3af2b4e508c74ebf6bcdad0cfad9d0a106f047e5/py-zmq-pipeline-0.1.7.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    running egg_info\r\n    creating pip-egg-info/py_zmq_pipeline.egg-info\r\n    writing pip-egg-info/py_zmq_pipeline.egg-info/PKG-INFO\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-install-ovrh49g6/py-zmq-pipeline/setup.py\", line 57, in <module>\r\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\r\n      File \"/root/test/lib/python3.7/site-packages/setuptools/__init__.py\", line 145, in setup\r\n        return distutils.core.setup(**attrs)\r\n      File \"/usr/src/Python-3.7.3/Lib/distutils/core.py\", line 148, in setup\r\n        dist.run_commands()\r\n      File \"/usr/src/Python-3.7.3/Lib/distutils/dist.py\", line 966, in run_commands\r\n        self.run_command(cmd)\r\n      File \"/usr/src/Python-3.7.3/Lib/distutils/dist.py\", line 985, in run_command\r\n        cmd_obj.run()\r\n      File \"/root/test/lib/python3.7/site-packages/setuptools/command/egg_info.py\", line 289, in run\r\n        writer(self, ep.name, os.path.join(self.egg_info, ep.name))\r\n      File \"/root/test/lib/python3.7/site-packages/setuptools/command/egg_info.py\", line 621, in write_pkg_info\r\n        metadata.write_pkg_info(cmd.egg_info)\r\n      File \"/usr/src/Python-3.7.3/Lib/distutils/dist.py\", line 1117, in write_pkg_info\r\n        self.write_pkg_file(pkg_info)\r\n      File \"/root/test/lib/python3.7/site-packages/setuptools/dist.py\", line 168, in write_pkg_file\r\n        long_desc = rfc822_escape(self.get_long_description())\r\n      File \"/usr/src/Python-3.7.3/Lib/distutils/util.py\", line 464, in rfc822_escape\r\n        lines = header.split('\\n')\r\n    TypeError: a bytes-like object is required, not 'str'\r\n    \r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-ovrh49g6/py-zmq-pipeline/\r\nYou are using pip version 19.0.3, however version 19.1.1 is available.\r\nYou should consider upgrading via the 'pip install --upgrade pip' command.\r\n(test) [root@jumpbox-sit test]# deactivate\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1288", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1288/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1288/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1288/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1288", "id": 442915373, "node_id": "MDU6SXNzdWU0NDI5MTUzNzM=", "number": 1288, "title": "Regression (18.0+): REQ_CORRELATE no longer sends replies to correct coroutine", "user": {"login": "CFSworks", "id": 700768, "node_id": "MDQ6VXNlcjcwMDc2OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/700768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CFSworks", "html_url": "https://github.com/CFSworks", "followers_url": "https://api.github.com/users/CFSworks/followers", "following_url": "https://api.github.com/users/CFSworks/following{/other_user}", "gists_url": "https://api.github.com/users/CFSworks/gists{/gist_id}", "starred_url": "https://api.github.com/users/CFSworks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CFSworks/subscriptions", "organizations_url": "https://api.github.com/users/CFSworks/orgs", "repos_url": "https://api.github.com/users/CFSworks/repos", "events_url": "https://api.github.com/users/CFSworks/events{/privacy}", "received_events_url": "https://api.github.com/users/CFSworks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-10T22:25:35Z", "updated_at": "2019-05-11T01:14:18Z", "closed_at": "2019-05-11T01:14:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello all!\r\n\r\nPlease see [this example program I wrote](https://gist.github.com/CFSworks/51368819e7c00669e20323f6308b5e12) which uses Python 3.5+'s/pyzmq 17+'s async support to simulate a server/worker model running across an inproc socket. This is just a simulation; my actual use case involves workers running across a network, which may be powered off without notice (including in the middle of handling a request) hence simulating the 'crashing'.\r\n\r\nThe workers handle a few requests, then terminate (simulating a crash) - the main coroutine keeps up the worker population when they do. The server generates a stream of requests and verifies that their responses are valid. Then it does the same thing again, but running 2 request-response streams in parallel. I have `REQ_CORRELATE` and `REQ_RELAXED` enabled to allow the coroutines to run in parallel. I also have `RCVTIMEO` set to detect workers that aren't coming back.\r\n\r\nThis program works perfectly on pyzmq 17 (although there is a bug where commenting out line 80 causes it to stall). I upgraded to pyzmq 18/master to see if this would be resolved (and indeed it is), but the request<->response correlation broke. Running the script causes the \"invalid response\" condition to trigger during the \"2 tasks\" test, irrespective of line 80 being there or not.\r\n\r\nHere's the system info as requested by `CONTRIBUTING.md` - I am on Linux:\r\n```\r\nlibzmq-4.3.1\r\npyzmq-18.1.0.dev\r\nPython-3.6.5 (default, Nov 15 2018, 07:31:41) \r\n[GCC 8.2.0]\r\n```\r\n\r\nBy the way, am I reinventing the wheel with my `exchange` function? Does pyzmq implement this already? I can't imagine \"keep asking about this until the answer doesn't get dropped\" is an uncommon pattern in the face of workers that might die before responding.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1286", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1286/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1286/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1286/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1286", "id": 439761060, "node_id": "MDU6SXNzdWU0Mzk3NjEwNjA=", "number": 1286, "title": "Compilation error with Python 3.8a3", "user": {"login": "zopyx", "id": 594239, "node_id": "MDQ6VXNlcjU5NDIzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/594239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zopyx", "html_url": "https://github.com/zopyx", "followers_url": "https://api.github.com/users/zopyx/followers", "following_url": "https://api.github.com/users/zopyx/following{/other_user}", "gists_url": "https://api.github.com/users/zopyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/zopyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zopyx/subscriptions", "organizations_url": "https://api.github.com/users/zopyx/orgs", "repos_url": "https://api.github.com/users/zopyx/repos", "events_url": "https://api.github.com/users/zopyx/events{/privacy}", "received_events_url": "https://api.github.com/users/zopyx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-05-02T19:57:09Z", "updated_at": "2019-07-02T08:22:35Z", "closed_at": "2019-07-02T08:22:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n    gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -Izmq/utils -Izmq/backend/cython -Izmq/devices -c build/temp.linux-x86_64-3.8/scratch/vers.c -o build/temp.linux-x86_64-3.8/scratch/vers.o\r\n    gcc -pthread build/temp.linux-x86_64-3.8/scratch/vers.o -lzmq -lrt -o build/temp.linux-x86_64-3.8/scratch/vers\r\n        ZMQ version detected: 4.1.6\r\n    Warning: Detected ZMQ version: 4.1.6, but pyzmq targets ZMQ 4.3.1.\r\n    Warning: libzmq features and fixes introduced after 4.1.6 will be unavailable.\r\n    ************************************************\r\n    ************************************************\r\n    building 'zmq.backend.cython._device' extension\r\n    creating build/temp.linux-x86_64-3.8/zmq\r\n    creating build/temp.linux-x86_64-3.8/zmq/backend\r\n    creating build/temp.linux-x86_64-3.8/zmq/backend/cython\r\n    gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -DHAVE_SYS_UN_H=1 -Izmq/utils -Izmq/backend/cython -Izmq/devices -I/home/ajung/src/pp.server/include -I/home/ajung/.pyenv/versions/3.8-dev/include/python3.8 -c zmq/backend/cython/_device.c -o build/temp.linux-x86_64-3.8/zmq/backend/cython/_device.o\r\n    zmq/backend/cython/_device.c: In function \u2018__Pyx_InitCachedConstants\u2019:\r\n    zmq/backend/cython/_device.c:2670:89: warning: passing argument 6 of \u2018PyCode_New\u2019 makes integer from pointer without a cast [-Wint-conversion]\r\n       __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_zmq_backend_cython__device_pyx, __pyx_n_s_device, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 36, __pyx_L1_error)\r\n                                                                                             ^\r\n    zmq/backend/cython/_device.c:314:37: note: in definition of macro \u2018__Pyx_PyCode_New\u2019\r\n               PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\r\n                                         ^~~~\r\n    In file included from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/compile.h:5:0,\r\n                     from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/Python.h:137,\r\n                     from zmq/backend/cython/_device.c:4:\r\n    /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/code.h:105:28: note: expected \u2018int\u2019 but argument is of type \u2018PyObject * {aka struct _object *}\u2019\r\n     PyAPI_FUNC(PyCodeObject *) PyCode_New(\r\n                                ^~~~~~~~~~\r\n    zmq/backend/cython/_device.c:2670:259: warning: passing argument 14 of \u2018PyCode_New\u2019 makes pointer from integer without a cast [-Wint-conversion]\r\n       __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_zmq_backend_cython__device_pyx, __pyx_n_s_device, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 36, __pyx_L1_error)\r\n                                                                                                                                                                                                                                                                       ^\r\n    zmq/backend/cython/_device.c:314:72: note: in definition of macro \u2018__Pyx_PyCode_New\u2019\r\n               PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\r\n                                                                            ^~~~~\r\n    In file included from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/compile.h:5:0,\r\n                     from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/Python.h:137,\r\n                     from zmq/backend/cython/_device.c:4:\r\n    /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/code.h:105:28: note: expected \u2018PyObject * {aka struct _object *}\u2019 but argument is of type \u2018int\u2019\r\n     PyAPI_FUNC(PyCodeObject *) PyCode_New(\r\n                                ^~~~~~~~~~\r\n    zmq/backend/cython/_device.c:2670:263: warning: passing argument 15 of \u2018PyCode_New\u2019 makes integer from pointer without a cast [-Wint-conversion]\r\n       __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_zmq_backend_cython__device_pyx, __pyx_n_s_device, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 36, __pyx_L1_error)\r\n                                                                                                                                                                                                                                                                           ^\r\n    zmq/backend/cython/_device.c:314:79: note: in definition of macro \u2018__Pyx_PyCode_New\u2019\r\n               PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\r\n                                                                                   ^~~~\r\n    In file included from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/compile.h:5:0,\r\n                     from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/Python.h:137,\r\n                     from zmq/backend/cython/_device.c:4:\r\n    /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/code.h:105:28: note: expected \u2018int\u2019 but argument is of type \u2018PyObject * {aka struct _object *}\u2019\r\n     PyAPI_FUNC(PyCodeObject *) PyCode_New(\r\n                                ^~~~~~~~~~\r\n    zmq/backend/cython/_device.c:314:11: error: too few arguments to function \u2018PyCode_New\u2019\r\n               PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\r\n               ^\r\n    zmq/backend/cython/_device.c:2670:33: note: in expansion of macro \u2018__Pyx_PyCode_New\u2019\r\n       __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_zmq_backend_cython__device_pyx, __pyx_n_s_device, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 36, __pyx_L1_error)\r\n                                     ^~~~~~~~~~~~~~~~\r\n    In file included from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/compile.h:5:0,\r\n                     from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/Python.h:137,\r\n                     from zmq/backend/cython/_device.c:4:\r\n    /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/code.h:105:28: note: declared here\r\n     PyAPI_FUNC(PyCodeObject *) PyCode_New(\r\n                                ^~~~~~~~~~\r\n    zmq/backend/cython/_device.c:2685:89: warning: passing argument 6 of \u2018PyCode_New\u2019 makes integer from pointer without a cast [-Wint-conversion]\r\n       __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_zmq_backend_cython__device_pyx, __pyx_n_s_proxy, 68, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 68, __pyx_L1_error)\r\n                                                                                             ^\r\n    zmq/backend/cython/_device.c:314:37: note: in definition of macro \u2018__Pyx_PyCode_New\u2019\r\n               PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\r\n                                         ^~~~\r\n    In file included from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/compile.h:5:0,\r\n                     from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/Python.h:137,\r\n                     from zmq/backend/cython/_device.c:4:\r\n    /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/code.h:105:28: note: expected \u2018int\u2019 but argument is of type \u2018PyObject * {aka struct _object *}\u2019\r\n     PyAPI_FUNC(PyCodeObject *) PyCode_New(\r\n                                ^~~~~~~~~~\r\n    zmq/backend/cython/_device.c:2685:260: warning: passing argument 14 of \u2018PyCode_New\u2019 makes pointer from integer without a cast [-Wint-conversion]\r\n       __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_zmq_backend_cython__device_pyx, __pyx_n_s_proxy, 68, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 68, __pyx_L1_error)\r\n                                                                                                                                                                                                                                                                        ^\r\n    zmq/backend/cython/_device.c:314:72: note: in definition of macro \u2018__Pyx_PyCode_New\u2019\r\n               PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\r\n                                                                            ^~~~~\r\n    In file included from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/compile.h:5:0,\r\n                     from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/Python.h:137,\r\n                     from zmq/backend/cython/_device.c:4:\r\n    /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/code.h:105:28: note: expected \u2018PyObject * {aka struct _object *}\u2019 but argument is of type \u2018int\u2019\r\n     PyAPI_FUNC(PyCodeObject *) PyCode_New(\r\n                                ^~~~~~~~~~\r\n    zmq/backend/cython/_device.c:2685:264: warning: passing argument 15 of \u2018PyCode_New\u2019 makes integer from pointer without a cast [-Wint-conversion]\r\n       __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_zmq_backend_cython__device_pyx, __pyx_n_s_proxy, 68, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 68, __pyx_L1_error)\r\n                                                                                                                                                                                                                                                                            ^\r\n    zmq/backend/cython/_device.c:314:79: note: in definition of macro \u2018__Pyx_PyCode_New\u2019\r\n               PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\r\n                                                                                   ^~~~\r\n    In file included from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/compile.h:5:0,\r\n                     from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/Python.h:137,\r\n                     from zmq/backend/cython/_device.c:4:\r\n    /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/code.h:105:28: note: expected \u2018int\u2019 but argument is of type \u2018PyObject * {aka struct _object *}\u2019\r\n     PyAPI_FUNC(PyCodeObject *) PyCode_New(\r\n                                ^~~~~~~~~~\r\n    zmq/backend/cython/_device.c:314:11: error: too few arguments to function \u2018PyCode_New\u2019\r\n               PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\r\n               ^\r\n    zmq/backend/cython/_device.c:2685:33: note: in expansion of macro \u2018__Pyx_PyCode_New\u2019\r\n       __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_zmq_backend_cython__device_pyx, __pyx_n_s_proxy, 68, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 68, __pyx_L1_error)\r\n                                     ^~~~~~~~~~~~~~~~\r\n    In file included from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/compile.h:5:0,\r\n                     from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/Python.h:137,\r\n                     from zmq/backend/cython/_device.c:4:\r\n    /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/code.h:105:28: note: declared here\r\n     PyAPI_FUNC(PyCodeObject *) PyCode_New(\r\n                                ^~~~~~~~~~\r\n    zmq/backend/cython/_device.c: In function \u2018__Pyx_CreateCodeObjectForTraceback\u2019:\r\n    zmq/backend/cython/_device.c:4999:9: warning: passing argument 6 of \u2018PyCode_New\u2019 makes integer from pointer without a cast [-Wint-conversion]\r\n             __pyx_empty_bytes, /*PyObject *code,*/\r\n             ^\r\n    zmq/backend/cython/_device.c:314:37: note: in definition of macro \u2018__Pyx_PyCode_New\u2019\r\n               PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\r\n                                         ^~~~\r\n    In file included from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/compile.h:5:0,\r\n                     from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/Python.h:137,\r\n                     from zmq/backend/cython/_device.c:4:\r\n    /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/code.h:105:28: note: expected \u2018int\u2019 but argument is of type \u2018PyObject * {aka struct _object *}\u2019\r\n     PyAPI_FUNC(PyCodeObject *) PyCode_New(\r\n                                ^~~~~~~~~~\r\n    zmq/backend/cython/_device.c:5007:9: warning: passing argument 14 of \u2018PyCode_New\u2019 makes pointer from integer without a cast [-Wint-conversion]\r\n             py_line,\r\n             ^\r\n    zmq/backend/cython/_device.c:314:72: note: in definition of macro \u2018__Pyx_PyCode_New\u2019\r\n               PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\r\n                                                                            ^~~~~\r\n    In file included from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/compile.h:5:0,\r\n                     from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/Python.h:137,\r\n                     from zmq/backend/cython/_device.c:4:\r\n    /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/code.h:105:28: note: expected \u2018PyObject * {aka struct _object *}\u2019 but argument is of type \u2018int\u2019\r\n     PyAPI_FUNC(PyCodeObject *) PyCode_New(\r\n                                ^~~~~~~~~~\r\n    zmq/backend/cython/_device.c:5008:9: warning: passing argument 15 of \u2018PyCode_New\u2019 makes integer from pointer without a cast [-Wint-conversion]\r\n             __pyx_empty_bytes  /*PyObject *lnotab*/\r\n             ^\r\n    zmq/backend/cython/_device.c:314:79: note: in definition of macro \u2018__Pyx_PyCode_New\u2019\r\n               PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\r\n                                                                                   ^~~~\r\n    In file included from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/compile.h:5:0,\r\n                     from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/Python.h:137,\r\n                     from zmq/backend/cython/_device.c:4:\r\n    /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/code.h:105:28: note: expected \u2018int\u2019 but argument is of type \u2018PyObject * {aka struct _object *}\u2019\r\n     PyAPI_FUNC(PyCodeObject *) PyCode_New(\r\n                                ^~~~~~~~~~\r\n    zmq/backend/cython/_device.c:314:11: error: too few arguments to function \u2018PyCode_New\u2019\r\n               PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\r\n               ^\r\n    zmq/backend/cython/_device.c:4993:15: note: in expansion of macro \u2018__Pyx_PyCode_New\u2019\r\n         py_code = __Pyx_PyCode_New(\r\n                   ^~~~~~~~~~~~~~~~\r\n    In file included from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/compile.h:5:0,\r\n                     from /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/Python.h:137,\r\n                     from zmq/backend/cython/_device.c:4:\r\n    /home/ajung/.pyenv/versions/3.8-dev/include/python3.8/code.h:105:28: note: declared here\r\n     PyAPI_FUNC(PyCodeObject *) PyCode_New(\r\n                                ^~~~~~~~~~\r\n    error: command 'gcc' failed with exit status 1\r\n\r\n    ----------------------------------------\r\nCommand \"/home/ajung/src/pp.server/bin/python -u -c \"import setuptools, tokenize;__file__='/tmp/pip-install-8tu1dg0v/pyzmq/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record /tmp/pip-record-o0ss2ngz/install-record.txt --single-version-externally-managed --compile --install-headers /home/ajung/src/pp.server/include/site/python3.8/pyzmq\" failed with error code 1 in /tmp/pip-install-8tu1dg0v/pyzmq/\r\nYou are using pip version 19.0.3, however version 19.1 is available.\r\nYou should consider upgrading via the 'pip install --upgrade pip' command.\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1284", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1284/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1284/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1284/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1284", "id": 437590488, "node_id": "MDU6SXNzdWU0Mzc1OTA0ODg=", "number": 1284, "title": "zmq multiprocessing start fail on windows", "user": {"login": "rilcky", "id": 50014516, "node_id": "MDQ6VXNlcjUwMDE0NTE2", "avatar_url": "https://avatars3.githubusercontent.com/u/50014516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rilcky", "html_url": "https://github.com/rilcky", "followers_url": "https://api.github.com/users/rilcky/followers", "following_url": "https://api.github.com/users/rilcky/following{/other_user}", "gists_url": "https://api.github.com/users/rilcky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rilcky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rilcky/subscriptions", "organizations_url": "https://api.github.com/users/rilcky/orgs", "repos_url": "https://api.github.com/users/rilcky/repos", "events_url": "https://api.github.com/users/rilcky/events{/privacy}", "received_events_url": "https://api.github.com/users/rilcky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-26T09:45:41Z", "updated_at": "2019-04-29T05:19:55Z", "closed_at": "2019-04-29T05:19:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a problem with zmq multiprocessing, the code below works well on linux but fails on windows, zmq 4.2.5, python 2.7,\r\n\r\n```\r\nfrom multiprocessing import Process\r\nfrom multiprocessing import Queue\r\nclass MessageHandler(Process):\r\n    def init(self, zmq_context, msg_queue, zmq_url):\r\n        super(MessageHandler, self).init()\r\n        self.queue = msg_queue\r\n        self.context = zmq_context\r\n        self.url = zmq_url\r\n    def run(self):\r\n        self.sub = self.context.socket(zmq.SUB)\r\n        self.sub.connect(self.url)\r\n        self.sub.setsockopt(zmq.SUBSCRIBE, b'')\r\n        while True:\r\n            msg = self.sub.recv()\r\n        self.queue.put_nowait(msg)\r\nmd_context = zmq.Context()\r\nmd_queue = Queue()\r\nmd_url = \"tcp//192.168.1.201:9995\"\r\nmd_handler = MessageHandler(md_context, md_queue, md_url)\r\nmd_handler.start()\r\n\r\n```\r\nAssert error as below:\r\n```\r\n\r\nTraceback (most recent call last):\r\nFile \"C:/Code/achilles_recv.py\", line 214, in \r\ninstance = SimpleStrategy()\r\nFile \"C:/Code/achilles_recv.py\", line 69, in init\r\nStrategyBase.init(self, self.process_id)\r\nFile \"C:\\Code\\base\\StrategyBase.py\", line 67, in `init`\r\nself.init_connections()\r\nFile \"C:\\Code\\engine\\StrategyEngine.py\", line 43, in init_connections\r\nmd_handler.start()\r\nFile \"C:\\ProgramData\\Anaconda2\\lib\\multiprocessing\\process.py\", line 130, in start\r\nself._popen = Popen(self)\r\nFile \"C:\\ProgramData\\Anaconda2\\lib\\multiprocessing\\forking.py\", line 277, in init\r\ndump(process_obj, to_child, HIGHEST_PROTOCOL)\r\nFile \"C:\\ProgramData\\Anaconda2\\lib\\multiprocessing\\forking.py\", line 199, in dump\r\nForkingPickler(file, protocol).dump(obj)\r\nFile \"C:\\ProgramData\\Anaconda2\\lib\\pickle.py\", line 224, in dump\r\nself.save(obj)\r\nFile \"C:\\ProgramData\\Anaconda2\\lib\\pickle.py\", line 331, in save\r\nself.save_reduce(obj=obj, *rv)\r\nFile \"C:\\ProgramData\\Anaconda2\\lib\\pickle.py\", line 425, in save_reduce\r\nsave(state)\r\nFile \"C:\\ProgramData\\Anaconda2\\lib\\pickle.py\", line 286, in save\r\nf(self, obj) # Call unbound method with explicit self\r\nFile \"C:\\ProgramData\\Anaconda2\\lib\\pickle.py\", line 655, in save_dict\r\nself._batch_setitems(obj.iteritems())\r\nFile \"C:\\ProgramData\\Anaconda2\\lib\\pickle.py\", line 687, in _batch_setitems\r\nsave(v)\r\nFile \"C:\\ProgramData\\Anaconda2\\lib\\pickle.py\", line 306, in save\r\nrv = reduce(self.proto)\r\nFile \"stringsource\", line 2, in zmq.backend.cython.context.Context.reduce_cython\r\nTypeError: no default reduce due to non-trivial cinit\r\n\r\n```\r\ndebug to find that zmq packege has not a function of \"reduce\"\uff0c could anyone help with this issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1282", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1282/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1282/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1282/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1282", "id": 433274617, "node_id": "MDU6SXNzdWU0MzMyNzQ2MTc=", "number": 1282, "title": "recv/send hangs when using multiple asyncio contexts", "user": {"login": "zoopp", "id": 1645023, "node_id": "MDQ6VXNlcjE2NDUwMjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1645023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zoopp", "html_url": "https://github.com/zoopp", "followers_url": "https://api.github.com/users/zoopp/followers", "following_url": "https://api.github.com/users/zoopp/following{/other_user}", "gists_url": "https://api.github.com/users/zoopp/gists{/gist_id}", "starred_url": "https://api.github.com/users/zoopp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zoopp/subscriptions", "organizations_url": "https://api.github.com/users/zoopp/orgs", "repos_url": "https://api.github.com/users/zoopp/repos", "events_url": "https://api.github.com/users/zoopp/events{/privacy}", "received_events_url": "https://api.github.com/users/zoopp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-15T13:12:24Z", "updated_at": "2019-08-23T18:08:49Z", "closed_at": "2019-04-16T13:44:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I discovered by accident (while writing a unit test) that if you create multiple `zmq.asyncio.Context` objects then you come across an issue in which `await`ing on (some) sockets blocks indefinitely. I did not see this documented anywhere so I think this is unintended behavior.\r\n\r\n* pyzmq version: 18.0.1\r\n* python version: 3.7.2\r\n* distribution: Archlinux\r\n\r\nMinimal code to reproduce the issue:\r\n```python3\r\nimport asyncio\r\n\r\nimport zmq\r\nimport zmq.asyncio\r\n\r\n\r\n# Uncomment this line and comment the lines bellow `# MARK` and it will work.\r\n# context = zmq.asyncio.Context()\r\n\r\n\r\nasync def send_loop():\r\n    # MARK\r\n    context = zmq.asyncio.Context()\r\n    pub = context.socket(zmq.PUB)\r\n    pub.bind('inproc://test')\r\n\r\n    while True:\r\n        print('> before send_multipart')\r\n        await pub.send_multipart([\r\n            b'test',\r\n            b'test'\r\n        ])\r\n        print('> after send_multipart')\r\n        await asyncio.sleep(1)\r\n\r\n\r\nasync def recv_loop():\r\n    # MARK\r\n    context = zmq.asyncio.Context()\r\n    sub = context.socket(zmq.SUB)\r\n    sub.connect('inproc://test')\r\n    sub.setsockopt_string(zmq.SUBSCRIBE, '')\r\n\r\n    while True:\r\n        print('> before recv_multipart')\r\n        a, b = await sub.recv_multipart()\r\n        print('> after recv_multipart:', a, b)\r\n        await asyncio.sleep(1)\r\n\r\n\r\nasync def main():\r\n    await asyncio.gather(send_loop(), recv_loop())\r\n\r\n\r\nasyncio.run(main())\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1280", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1280/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1280/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1280/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1280", "id": 429929639, "node_id": "MDU6SXNzdWU0Mjk5Mjk2Mzk=", "number": 1280, "title": "Could bind_to_random_port range be [inclusive, inclusive]?", "user": {"login": "kinow", "id": 304786, "node_id": "MDQ6VXNlcjMwNDc4Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/304786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kinow", "html_url": "https://github.com/kinow", "followers_url": "https://api.github.com/users/kinow/followers", "following_url": "https://api.github.com/users/kinow/following{/other_user}", "gists_url": "https://api.github.com/users/kinow/gists{/gist_id}", "starred_url": "https://api.github.com/users/kinow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kinow/subscriptions", "organizations_url": "https://api.github.com/users/kinow/orgs", "repos_url": "https://api.github.com/users/kinow/repos", "events_url": "https://api.github.com/users/kinow/events{/privacy}", "received_events_url": "https://api.github.com/users/kinow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-05T20:50:13Z", "updated_at": "2019-04-09T08:06:28Z", "closed_at": "2019-04-09T07:58:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nWe are using `pyzmq` in our project (for cyclic workflows) to replace our old communication layer, and it works like a charm, thanks!\r\n\r\nIn our project, we have a configuration option with a range for port binding, which matched well with `pyzmq`'s `bind_to_random_port`. However, yesterday we had [an issue](https://github.com/cylc/cylc/issues/3075) when running a workflow with a single port (useful for development & testing). \r\n\r\nWe have [a fix](https://github.com/cylc/cylc/pull/3077) for our code in the works, which simply checks if we have a range for a single port. If we have a range with a single port, then we call `bind`, otherwise we can use `bind_to_random_port`.\r\n\r\nThat should work fine, but I thought perhaps it would make sense `bind_to_random_port` to use inclusive ranges? This way\r\n\r\n```\r\nbind_to_random_port(8080, 8081)\r\n```\r\n\r\nWould try to bind to 8080 and 8081. Right now when you want to bind to a single port, you have to use `bind`. When you want to bind to two ports or more, you have to make your last port one number higher to make your last port inclusive.\r\n\r\nBut in user interfaces in certain applications, when asked for a range of ports, I think it is more intuitive to ask for inclusive ranges.\r\n\r\nExamples:\r\n\r\n- Linux `sysctl net.ipv4.ip_local_port_range` uses inclusive ranges\r\n- I believe `jupyterhub.utils.random_port` uses the port `0` to delegate to the OS finding a random port... in the case of using that with Linux, I believe that call is actually using the above inclusive range setting for the ports used\r\n- Iptables' port range (e.g. `--sport 8080:8081`) is inclusive\r\n\r\nI think in a workflow service, when a user is asked what range of ports to use for their tasks, they will think in an inclusive way. And when a used picks a single range 8080:8080 or a range with two ports 8080:8081, it would be nice to be able to use the same method in `pyzmq`.\r\n\r\nI think the main issue would be backward compatibility in `pyzmq`, as users would be probably using the same approach when the range has a single port (i.e. call `bind`, or call range `min` and `max+1`) :disappointed: \r\n\r\nI understand this issue might be closed, but I thought if other users wanted similar feature, they would maybe comment later in this ticket :+1: \r\n\r\nThanks for `pyzmq`!\r\nBruno\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1278", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1278/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1278/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1278/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1278", "id": 429538264, "node_id": "MDU6SXNzdWU0Mjk1MzgyNjQ=", "number": 1278, "title": "Update pypi requires_python to support NormalizedVersion", "user": {"login": "chargrnv", "id": 42224386, "node_id": "MDQ6VXNlcjQyMjI0Mzg2", "avatar_url": "https://avatars3.githubusercontent.com/u/42224386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chargrnv", "html_url": "https://github.com/chargrnv", "followers_url": "https://api.github.com/users/chargrnv/followers", "following_url": "https://api.github.com/users/chargrnv/following{/other_user}", "gists_url": "https://api.github.com/users/chargrnv/gists{/gist_id}", "starred_url": "https://api.github.com/users/chargrnv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chargrnv/subscriptions", "organizations_url": "https://api.github.com/users/chargrnv/orgs", "repos_url": "https://api.github.com/users/chargrnv/repos", "events_url": "https://api.github.com/users/chargrnv/events{/privacy}", "received_events_url": "https://api.github.com/users/chargrnv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-05T00:36:49Z", "updated_at": "2019-08-07T14:31:12Z", "closed_at": "2019-08-07T14:31:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Current:\r\n```\r\nRequires: Python >=2.7, !=3.0*, !=3.1*, !=3.2*\r\n```\r\n\r\nChange to:\r\n```\r\nRequires: Python >=2.7, !=3.0.*, !=3.1.*, !=3.2.*\r\n```\r\n\r\nThe current string throws a UnsupportedVersionError when using the NormalizedVersion from distlib and requires falling back to the LegacyVersion object.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1277", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1277/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1277/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1277/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1277", "id": 427255161, "node_id": "MDU6SXNzdWU0MjcyNTUxNjE=", "number": 1277, "title": "pyzmq cannot be safely installed by EasyInstall", "user": {"login": "katiaGurtman", "id": 22303179, "node_id": "MDQ6VXNlcjIyMzAzMTc5", "avatar_url": "https://avatars3.githubusercontent.com/u/22303179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/katiaGurtman", "html_url": "https://github.com/katiaGurtman", "followers_url": "https://api.github.com/users/katiaGurtman/followers", "following_url": "https://api.github.com/users/katiaGurtman/following{/other_user}", "gists_url": "https://api.github.com/users/katiaGurtman/gists{/gist_id}", "starred_url": "https://api.github.com/users/katiaGurtman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/katiaGurtman/subscriptions", "organizations_url": "https://api.github.com/users/katiaGurtman/orgs", "repos_url": "https://api.github.com/users/katiaGurtman/repos", "events_url": "https://api.github.com/users/katiaGurtman/events{/privacy}", "received_events_url": "https://api.github.com/users/katiaGurtman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-30T07:35:19Z", "updated_at": "2019-04-01T10:07:00Z", "closed_at": "2019-04-01T10:07:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "![Screenshot_20190330-101407_Termux](https://user-images.githubusercontent.com/22303179/55273016-9d79e080-52d6-11e9-836d-d6c7f5a4ade3.jpg)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1276", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1276/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1276/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1276/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1276", "id": 425264521, "node_id": "MDU6SXNzdWU0MjUyNjQ1MjE=", "number": 1276, "title": "Bad file descriptor (src/epoll.cpp:100)", "user": {"login": "calio", "id": 233995, "node_id": "MDQ6VXNlcjIzMzk5NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/233995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calio", "html_url": "https://github.com/calio", "followers_url": "https://api.github.com/users/calio/followers", "following_url": "https://api.github.com/users/calio/following{/other_user}", "gists_url": "https://api.github.com/users/calio/gists{/gist_id}", "starred_url": "https://api.github.com/users/calio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calio/subscriptions", "organizations_url": "https://api.github.com/users/calio/orgs", "repos_url": "https://api.github.com/users/calio/repos", "events_url": "https://api.github.com/users/calio/events{/privacy}", "received_events_url": "https://api.github.com/users/calio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-26T07:29:52Z", "updated_at": "2020-05-06T20:14:25Z", "closed_at": "2020-05-06T20:14:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Complete example\r\n```python\r\nimport sys\r\nimport os\r\nimport zmq\r\nimport logging\r\nimport socket\r\nlogger = logging.getLogger()\r\nlogger.setLevel(logging.DEBUG)\r\n\r\nclass Connection():\r\n    def __init__(self, handle):\r\n        sock_type, dest_addr = handle\r\n        self.sock_type = sock_type\r\n        self.dest_addr = dest_addr\r\n\r\n        context = zmq.Context()\r\n        self._handle = context.socket(self.sock_type)\r\n        logger.debug(\"recreate zmq socket {}\".format(self.sock_type))\r\n        self._handle.connect(self.dest_addr)\r\n        logger.debug(\"connect to zmq {}\".format(self.dest_addr))\r\n\r\n    def send(self, buf):\r\n        \"\"\"Send a (picklable) object\"\"\"\r\n        self._handle.send(buf)\r\n\r\ndef foo(reader):\r\n    print(\"subprocess\", vars(reader))\r\n    data = b\"GET\"\r\n    reader.send(data)\r\n\r\ndef _main():\r\n    s = socket.socket()\r\n    fd = s.fileno()\r\n    with os.fdopen(fd, 'rb', closefd=True):\r\n        fc = Connection((3, \"tcp://172.17.0.1:65535\"))\r\n    return foo(fc)\r\n\r\nexitcode = _main()\r\nsys.exit(exitcode)\r\n```\r\n### Expected behavior\r\nCode exit normally\r\n\r\n### Actual behavior\r\nCore dump\r\n```bash\r\n$ python zmq_bug_client.py                                                                                                \r\nsubprocess {'sock_type': 3, 'dest_addr': 'tcp://172.17.0.1:65535', '_handle': <zmq.sugar.socket.Socket object at 0x7fb8f17548d0>}\r\nBad file descriptor (src/epoll.cpp:100)\r\n[2]    13011 abort (core dumped)  python zmq_bug_client.py\r\n```\r\n\r\n### System info\r\n```\r\n$ pip freeze\r\nadal==1.2.1\r\nasn1crypto==0.24.0\r\natomicwrites==1.2.1\r\nattrs==18.2.0\r\nautopep8==1.4.3\r\ncachetools==3.1.0\r\ncertifi==2018.11.29\r\ncffi==1.12.2\r\nchardet==3.0.4\r\ncloudpickle==0.8.0\r\ncryptography==2.6.1\r\ndocker==3.7.0\r\ndocker-pycreds==0.4.0\r\nentrypoints==0.3\r\nflake8==3.7.7\r\ngoogle-auth==1.6.3\r\nidna==2.8\r\nkubernetes==8.0.1\r\nmccabe==0.6.1\r\nmore-itertools==5.0.0\r\nnetifaces==0.10.9\r\nnumpy==1.16.2\r\noauthlib==3.0.1\r\npluggy==0.8.1\r\npsutil==5.5.1\r\npy==1.7.0\r\npyasn1==0.4.5\r\npyasn1-modules==0.2.4\r\npycodestyle==2.5.0\r\npycparser==2.19\r\npyflakes==2.1.1\r\nPyJWT==1.7.1\r\npytest==4.2.0\r\npython-dateutil==2.8.0\r\nPyYAML==3.13\r\npyzmq==18.0.1\r\nrequests==2.21.0\r\nrequests-oauthlib==1.2.0\r\nrsa==4.0\r\nsix==1.12.0\r\nurllib3==1.24.1\r\nwebsocket-client==0.54.0\r\nzmq==0.0.0\r\n```\r\n```\r\n$ python --version\r\nPython 3.6.7\r\n```\r\n```\r\n$ uname -a\r\nLinux *** 4.15.0-46-generic #49-Ubuntu SMP Wed Feb 6 09:33:07 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n```\r\n$ gcc --version\r\ngcc (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0\r\nCopyright (C) 2017 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1273", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1273/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1273/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1273/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1273", "id": 421986761, "node_id": "MDU6SXNzdWU0MjE5ODY3NjE=", "number": 1273, "title": "Process not released under Python 3.5.3", "user": {"login": "gdassori", "id": 5659270, "node_id": "MDQ6VXNlcjU2NTkyNzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5659270?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gdassori", "html_url": "https://github.com/gdassori", "followers_url": "https://api.github.com/users/gdassori/followers", "following_url": "https://api.github.com/users/gdassori/following{/other_user}", "gists_url": "https://api.github.com/users/gdassori/gists{/gist_id}", "starred_url": "https://api.github.com/users/gdassori/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gdassori/subscriptions", "organizations_url": "https://api.github.com/users/gdassori/orgs", "repos_url": "https://api.github.com/users/gdassori/repos", "events_url": "https://api.github.com/users/gdassori/events{/privacy}", "received_events_url": "https://api.github.com/users/gdassori/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-17T23:20:27Z", "updated_at": "2019-03-18T00:35:48Z", "closed_at": "2019-03-18T00:35:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI'm using pyzmq in publish mode, with asyncio. This is the implementation:\r\n\r\nhttps://github.com/gdassori/spruned/blob/zmq/spruned/daemon/zeromq.py\r\n\r\nIt's basically an observer and it is working great in Python 3.5.2 and Python 3.6.3. With Python 3.5.3, instead, as you can see in the Travis builds (https://travis-ci.org/gdassori/spruned/jobs/507619224), the process is not released when closed.\r\n\r\nI can reproduce it on my local environment, and it's not a Travis issue.\r\n\r\nI tried to use the Context() as a context manager, instead of an instance, and also tried to close it with the context_instance.term method with try\\finally, but nothing solved the issue.\r\n\r\nAm I doing something wrong with the implementation or is this a new\\known issue ?\r\n\r\nThank you!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1271", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1271/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1271/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1271/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1271", "id": 421619957, "node_id": "MDU6SXNzdWU0MjE2MTk5NTc=", "number": 1271, "title": "Pyzmq raising cython error that cannot be caught in Python", "user": {"login": "HamsterHuey", "id": 3207370, "node_id": "MDQ6VXNlcjMyMDczNzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3207370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HamsterHuey", "html_url": "https://github.com/HamsterHuey", "followers_url": "https://api.github.com/users/HamsterHuey/followers", "following_url": "https://api.github.com/users/HamsterHuey/following{/other_user}", "gists_url": "https://api.github.com/users/HamsterHuey/gists{/gist_id}", "starred_url": "https://api.github.com/users/HamsterHuey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HamsterHuey/subscriptions", "organizations_url": "https://api.github.com/users/HamsterHuey/orgs", "repos_url": "https://api.github.com/users/HamsterHuey/repos", "events_url": "https://api.github.com/users/HamsterHuey/events{/privacy}", "received_events_url": "https://api.github.com/users/HamsterHuey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-15T17:08:54Z", "updated_at": "2019-03-15T17:30:39Z", "closed_at": "2019-03-15T17:30:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am seeing literally the exact same error as described in an older issue here: https://github.com/zeromq/pyzmq/issues/783\r\n\r\nMy socket receive timeout is raising an Error from Cython and this cannot be caught from within Python as far as I can tell. \r\n\r\n```\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zmq\\sugar\\socket.py\", line 526, in recv_json\r\n    msg = self.recv(flags)\r\n  File \"zmq/backend/cython/socket.pyx\", line 693, in zmq.backend.cython.socket.Socket.recv\r\n  File \"zmq/backend/cython/socket.pyx\", line 727, in zmq.backend.cython.socket.Socket.recv\r\n  File \"zmq/backend/cython/socket.pyx\", line 150, in zmq.backend.cython.socket._recv_copy\r\n  File \"zmq/backend/cython/socket.pyx\", line 145, in zmq.backend.cython.socket._recv_copy\r\n  File \"zmq/backend/cython/checkrc.pxd\", line 19, in zmq.backend.cython.checkrc._check_rc\r\n    raise Again(errno)\r\nzmq.error.Again: Resource temporarily unavailable\r\n```\r\n\r\nThere is no way for me to catch this error in Python. Even a completely broad `try: except:` block fails to catch this. Not sure what to try here.\r\n\r\nFor your reference:\r\nPython version 3.6.4\r\npyzmq version 16.0.3\r\n\r\nAll I am doing is setting up a receiver and letting it time out. Along the lines of:\r\n```\r\ncontext = zmq.Context()\r\nsocket = context.socket(zmq.SUB)\r\nsocket.setsockopt_string(zmq.SUBSCRIBE, '')\r\nsocket.setsockopt(zmq.CONFLATE, 1)  # Only keep latest message in queue\r\nsocket.setsockopt(zmq.RCVTIMEO, 5000)\r\nsocket.connect(address)\r\n\r\n# In main loop\r\nwhile True:\r\n    try:\r\n        message = socket.recv_json()\r\n    except:\r\n        break\r\n```\r\nI still always have the error above with trace and I can't see to catch this via Python at all. Any thoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1270", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1270/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1270/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1270/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1270", "id": 420459264, "node_id": "MDU6SXNzdWU0MjA0NTkyNjQ=", "number": 1270, "title": "Wheels for Python 2.7 x64 UCS2 on manylinux?", "user": {"login": "Anthchirp", "id": 2102431, "node_id": "MDQ6VXNlcjIxMDI0MzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2102431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Anthchirp", "html_url": "https://github.com/Anthchirp", "followers_url": "https://api.github.com/users/Anthchirp/followers", "following_url": "https://api.github.com/users/Anthchirp/following{/other_user}", "gists_url": "https://api.github.com/users/Anthchirp/gists{/gist_id}", "starred_url": "https://api.github.com/users/Anthchirp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Anthchirp/subscriptions", "organizations_url": "https://api.github.com/users/Anthchirp/orgs", "repos_url": "https://api.github.com/users/Anthchirp/repos", "events_url": "https://api.github.com/users/Anthchirp/events{/privacy}", "received_events_url": "https://api.github.com/users/Anthchirp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-13T11:53:07Z", "updated_at": "2020-04-15T23:45:36Z", "closed_at": "2020-04-15T23:45:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "pyzmq currently has binary wheels for python 2.7 x64 manylinux1 with wide unicode (UCS-4).\r\n(eg. pyzmq-18.0.1-cp27-cp27m**u**-manylinux1_x86_64.whl)\r\n\r\nWould it be possible to also get binary wheels for the ABI-incompatible python 2.7 x64 manylinux1 with *narrow* unicode (UCS-2)?\r\n(eg. pyzmq-18.0.1-cp27-cp27m-manylinux1_x86_64.whl)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1268", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1268/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1268/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1268/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1268", "id": 417977060, "node_id": "MDU6SXNzdWU0MTc5NzcwNjA=", "number": 1268, "title": "Warning messages from the dev-python/pyzmq-17.1.0 Gentoo package", "user": {"login": "fturco", "id": 5459866, "node_id": "MDQ6VXNlcjU0NTk4NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/5459866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fturco", "html_url": "https://github.com/fturco", "followers_url": "https://api.github.com/users/fturco/followers", "following_url": "https://api.github.com/users/fturco/following{/other_user}", "gists_url": "https://api.github.com/users/fturco/gists{/gist_id}", "starred_url": "https://api.github.com/users/fturco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fturco/subscriptions", "organizations_url": "https://api.github.com/users/fturco/orgs", "repos_url": "https://api.github.com/users/fturco/repos", "events_url": "https://api.github.com/users/fturco/events{/privacy}", "received_events_url": "https://api.github.com/users/fturco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-06T19:44:11Z", "updated_at": "2019-06-27T08:58:39Z", "closed_at": "2019-06-27T08:58:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can successfully build the `dev-python/pyzmq-17.1.0` package on my Gentoo Linux system, but there are still some warning messages:\r\n\r\n```\r\n * QA Notice: Package triggers severe warnings which indicate that it\r\n *            may exhibit random runtime failures.\r\n * /var/tmp/portage/dev-python/pyzmq-17.1.0/temp/timer_createh9bkDC.c:2:5: warning: implicit declaration of function \u2018timer_create\u2019 [-Wimplicit-function-declaration]\r\n * /var/tmp/portage/dev-python/pyzmq-17.1.0/temp/timer_createodnnvsj5.c:2:5: warning: implicit declaration of function \u2018timer_create\u2019 [-Wimplicit-function-declaration]\r\n * /var/tmp/portage/dev-python/pyzmq-17.1.0/temp/timer_create8sdfai4m.c:2:5: warning: implicit declaration of function \u2018timer_create\u2019 [-Wimplicit-function-declaration]\r\n * /var/tmp/portage/dev-python/pyzmq-17.1.0/temp/timer_createDfM3NI.c:2:5: warning: implicit declaration of function \u2018timer_create\u2019 [-Wimplicit-function-declaration]\r\n * /var/tmp/portage/dev-python/pyzmq-17.1.0/temp/timer_createuplogghu.c:2:5: warning: implicit declaration of function \u2018timer_create\u2019 [-Wimplicit-function-declaration]\r\n * /var/tmp/portage/dev-python/pyzmq-17.1.0/temp/timer_createxx4u1v88.c:2:5: warning: implicit declaration of function \u2018timer_create\u2019 [-Wimplicit-function-declaration]\r\n\r\n * Please do not file a Gentoo bug and instead report the above QA\r\n * issues directly to the upstream developers of this software.\r\n * Homepage: http://www.zeromq.org/bindings:python https://pypi.org/project/pyzmq/\r\n```\r\n\r\nI'm using the GCC 8.3.0 compiler.\r\n\r\n[build.log](https://github.com/zeromq/pyzmq/files/2938015/build.log)\r\n[info.txt](https://github.com/zeromq/pyzmq/files/2938016/info.txt)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1266", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1266/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1266/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1266/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1266", "id": 413525685, "node_id": "MDU6SXNzdWU0MTM1MjU2ODU=", "number": 1266, "title": "Cython imports fail in latest version", "user": {"login": "tjgrilley", "id": 1391931, "node_id": "MDQ6VXNlcjEzOTE5MzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1391931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjgrilley", "html_url": "https://github.com/tjgrilley", "followers_url": "https://api.github.com/users/tjgrilley/followers", "following_url": "https://api.github.com/users/tjgrilley/following{/other_user}", "gists_url": "https://api.github.com/users/tjgrilley/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjgrilley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjgrilley/subscriptions", "organizations_url": "https://api.github.com/users/tjgrilley/orgs", "repos_url": "https://api.github.com/users/tjgrilley/repos", "events_url": "https://api.github.com/users/tjgrilley/events{/privacy}", "received_events_url": "https://api.github.com/users/tjgrilley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-22T18:32:37Z", "updated_at": "2019-06-27T09:13:34Z", "closed_at": "2019-06-27T09:13:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/zeromq/pyzmq/blob/a047a08245af36fe35466951b118c23c9423b7ab/zmq/backend/cython/socket.pxd#L26\r\n\r\nCould we replace\r\n`from context import Context`\r\nwith\r\n`from .context import Context`\r\n\r\nThis second version is less reliant on building from within the cython directory. It was not an issue on earlier versions of cython, but with the latest version this causes an error if you try to \r\n`from zmq.backend.cython.context cimport Socket`\r\n\r\nThere may be a way to use sym links to solve this if someone does want to use zmq from within cython so they don't need the gil to access a thread isolated socket, but i've tried several variations and none of them satisfy both the cython compilation and the actual running of the application.\r\n\r\nTried solutions:\r\nLink at cython compile time with the -I directive, and append the zmq path to sys.path:\r\n`cython your_module_name.pyx -I/usr/lib/python3/dist-packages/zmq/backend/cython/`\r\n \r\nwith header in your_module_name.pyx:\r\n`import zmq.backend.cython\r\nimport sys\r\nsys.path.append(zmq.backend.cython.__path__)\r\nfrom zmq.backend.cython.socket cimport Socket\r\nfrom zmq.backend.cython.context cimport Context`\r\n\r\nLinking in os:\r\nln -s /usr/lib/python3/dist-packages/zmq/  /project/folder/zmq", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1264", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1264/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1264/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1264/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1264", "id": 411980020, "node_id": "MDU6SXNzdWU0MTE5ODAwMjA=", "number": 1264, "title": "PyZMQ 18.0.0 wheels missing for Windows", "user": {"login": "vphilippon", "id": 2819376, "node_id": "MDQ6VXNlcjI4MTkzNzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2819376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vphilippon", "html_url": "https://github.com/vphilippon", "followers_url": "https://api.github.com/users/vphilippon/followers", "following_url": "https://api.github.com/users/vphilippon/following{/other_user}", "gists_url": "https://api.github.com/users/vphilippon/gists{/gist_id}", "starred_url": "https://api.github.com/users/vphilippon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vphilippon/subscriptions", "organizations_url": "https://api.github.com/users/vphilippon/orgs", "repos_url": "https://api.github.com/users/vphilippon/repos", "events_url": "https://api.github.com/users/vphilippon/events{/privacy}", "received_events_url": "https://api.github.com/users/vphilippon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-19T15:25:39Z", "updated_at": "2019-02-19T15:53:22Z", "closed_at": "2019-02-19T15:52:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello maintainer(s)!\r\n\r\nCurrently, the `win32` and `win_amd64` wheels for v18.0.0 are missing on PyPI.\r\n\r\nJust making sure this doesn't fall into a crack :)\r\n\r\nCheers!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1262", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1262/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1262/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1262/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1262", "id": 410537823, "node_id": "MDU6SXNzdWU0MTA1Mzc4MjM=", "number": 1262, "title": "Update link in the main website - Edit in GitHub", "user": {"login": "Houcine19", "id": 8918872, "node_id": "MDQ6VXNlcjg5MTg4NzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/8918872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Houcine19", "html_url": "https://github.com/Houcine19", "followers_url": "https://api.github.com/users/Houcine19/followers", "following_url": "https://api.github.com/users/Houcine19/following{/other_user}", "gists_url": "https://api.github.com/users/Houcine19/gists{/gist_id}", "starred_url": "https://api.github.com/users/Houcine19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Houcine19/subscriptions", "organizations_url": "https://api.github.com/users/Houcine19/orgs", "repos_url": "https://api.github.com/users/Houcine19/repos", "events_url": "https://api.github.com/users/Houcine19/events{/privacy}", "received_events_url": "https://api.github.com/users/Houcine19/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-14T23:24:36Z", "updated_at": "2019-04-01T12:28:40Z", "closed_at": "2019-04-01T12:28:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nNot related to the code itself. The link in the main website: https://pyzmq.readthedocs.io/en/latest/ that send us to GitHub (`Edit in GitHub`) is not working. Is possible update so that can go to the right repo.\r\n\r\nIt's giving back a 404 at the moment.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1260", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1260/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1260/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1260/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1260", "id": 409516028, "node_id": "MDU6SXNzdWU0MDk1MTYwMjg=", "number": 1260, "title": "repeatedly construct and destroy context gives an error", "user": {"login": "junhyeokahn", "id": 23005104, "node_id": "MDQ6VXNlcjIzMDA1MTA0", "avatar_url": "https://avatars2.githubusercontent.com/u/23005104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/junhyeokahn", "html_url": "https://github.com/junhyeokahn", "followers_url": "https://api.github.com/users/junhyeokahn/followers", "following_url": "https://api.github.com/users/junhyeokahn/following{/other_user}", "gists_url": "https://api.github.com/users/junhyeokahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/junhyeokahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/junhyeokahn/subscriptions", "organizations_url": "https://api.github.com/users/junhyeokahn/orgs", "repos_url": "https://api.github.com/users/junhyeokahn/repos", "events_url": "https://api.github.com/users/junhyeokahn/events{/privacy}", "received_events_url": "https://api.github.com/users/junhyeokahn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-12T21:49:13Z", "updated_at": "2019-02-13T21:13:31Z", "closed_at": "2019-02-13T21:13:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\nUnder my project, I need to repeatedly construct and destroy context but it gives an error.\r\nFor example,\r\n```\r\nimport zmq\r\n\r\nfor i in range(100):\r\n    print(i)\r\n    context = zmq.Context()\r\n    data_socket = context.socket(zmq.SUB)\r\n    data_socket.connect(\"tcp://127.0.0.1:5552\")\r\n    data_socket.setsockopt_string(zmq.SUBSCRIBE, \"\")\r\n    context.destroy()\r\n```\r\n\r\nand it returns\r\n```\r\n0\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 7, in <module>\r\n    data_socket.connect(\"tcp://127.0.0.1:5552\")\r\n  File \"zmq/backend/cython/socket.pyx\", line 580, in zmq.backend.cython.socket.Socket.connect\r\n  File \"zmq/backend/cython/checkrc.pxd\", line 25, in zmq.backend.cython.checkrc._check_rc\r\nzmq.error.ZMQError: Socket operation on non-socket\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1259", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1259/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1259/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1259/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1259", "id": 408308724, "node_id": "MDU6SXNzdWU0MDgzMDg3MjQ=", "number": 1259, "title": "await sock.send_multipart() does not yield control to event loop", "user": {"login": "akking", "id": 10442067, "node_id": "MDQ6VXNlcjEwNDQyMDY3", "avatar_url": "https://avatars1.githubusercontent.com/u/10442067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akking", "html_url": "https://github.com/akking", "followers_url": "https://api.github.com/users/akking/followers", "following_url": "https://api.github.com/users/akking/following{/other_user}", "gists_url": "https://api.github.com/users/akking/gists{/gist_id}", "starred_url": "https://api.github.com/users/akking/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akking/subscriptions", "organizations_url": "https://api.github.com/users/akking/orgs", "repos_url": "https://api.github.com/users/akking/repos", "events_url": "https://api.github.com/users/akking/events{/privacy}", "received_events_url": "https://api.github.com/users/akking/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-08T20:19:15Z", "updated_at": "2019-02-14T20:58:15Z", "closed_at": "2019-02-14T20:58:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "For: https://github.com/zeromq/pyzmq/blob/bf5fbb8c515614f0abb4ee75b55ccbd0149eddb1/examples/asyncio/coroutines.py#L44\r\n\r\nIf you remove the `await sleep(1)`, the coroutine won't yield control back to the event loop. As a result, the receive won't get any change to receive the message. Is this the expected behavior?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1257", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1257/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1257/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1257/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1257", "id": 408112644, "node_id": "MDU6SXNzdWU0MDgxMTI2NDQ=", "number": 1257, "title": "pyZMQ not compiling in linux systems for python2.7", "user": {"login": "Pazhanivel", "id": 24754514, "node_id": "MDQ6VXNlcjI0NzU0NTE0", "avatar_url": "https://avatars3.githubusercontent.com/u/24754514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pazhanivel", "html_url": "https://github.com/Pazhanivel", "followers_url": "https://api.github.com/users/Pazhanivel/followers", "following_url": "https://api.github.com/users/Pazhanivel/following{/other_user}", "gists_url": "https://api.github.com/users/Pazhanivel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pazhanivel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pazhanivel/subscriptions", "organizations_url": "https://api.github.com/users/Pazhanivel/orgs", "repos_url": "https://api.github.com/users/Pazhanivel/repos", "events_url": "https://api.github.com/users/Pazhanivel/events{/privacy}", "received_events_url": "https://api.github.com/users/Pazhanivel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-08T11:29:04Z", "updated_at": "2019-02-08T13:19:15Z", "closed_at": "2019-02-08T13:16:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "posted in wrong page", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1256", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1256/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1256/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1256/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1256", "id": 405612211, "node_id": "MDU6SXNzdWU0MDU2MTIyMTE=", "number": 1256, "title": "Is pyzmq affected with Remote code execution vulnerability (CVE-2019-6250)", "user": {"login": "kk21986", "id": 13273109, "node_id": "MDQ6VXNlcjEzMjczMTA5", "avatar_url": "https://avatars0.githubusercontent.com/u/13273109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kk21986", "html_url": "https://github.com/kk21986", "followers_url": "https://api.github.com/users/kk21986/followers", "following_url": "https://api.github.com/users/kk21986/following{/other_user}", "gists_url": "https://api.github.com/users/kk21986/gists{/gist_id}", "starred_url": "https://api.github.com/users/kk21986/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kk21986/subscriptions", "organizations_url": "https://api.github.com/users/kk21986/orgs", "repos_url": "https://api.github.com/users/kk21986/repos", "events_url": "https://api.github.com/users/kk21986/events{/privacy}", "received_events_url": "https://api.github.com/users/kk21986/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-01T09:09:54Z", "updated_at": "2019-02-18T13:47:16Z", "closed_at": "2019-02-18T13:47:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "We could see the libzmq has affected with the vulnerability (CVE-2019-6250) and fix also released(CVE-2019-6250). So would like to know whether the pyzmq is also affected with the same. If yes, then can we have the patch to be released. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1255", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1255/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1255/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1255/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1255", "id": 405580873, "node_id": "MDU6SXNzdWU0MDU1ODA4NzM=", "number": 1255, "title": "Stop working with asyncio.run() Python 3.7.2", "user": {"login": "atitoff", "id": 13304485, "node_id": "MDQ6VXNlcjEzMzA0NDg1", "avatar_url": "https://avatars1.githubusercontent.com/u/13304485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atitoff", "html_url": "https://github.com/atitoff", "followers_url": "https://api.github.com/users/atitoff/followers", "following_url": "https://api.github.com/users/atitoff/following{/other_user}", "gists_url": "https://api.github.com/users/atitoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/atitoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atitoff/subscriptions", "organizations_url": "https://api.github.com/users/atitoff/orgs", "repos_url": "https://api.github.com/users/atitoff/repos", "events_url": "https://api.github.com/users/atitoff/events{/privacy}", "received_events_url": "https://api.github.com/users/atitoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-01T07:18:30Z", "updated_at": "2019-02-19T15:53:14Z", "closed_at": "2019-02-19T15:53:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Stop working zmq.DEALER if used asyncio.run(main()) in python 3.7.2\r\nIf instead of the line asyncio.run(main()) to specify another:\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(main())\r\n\r\nThen everything works correctly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1251", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1251/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1251/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1251/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1251", "id": 396331105, "node_id": "MDU6SXNzdWUzOTYzMzExMDU=", "number": 1251, "title": "[Question] Empty frame in dealer / router example", "user": {"login": "mondwan", "id": 3899555, "node_id": "MDQ6VXNlcjM4OTk1NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3899555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mondwan", "html_url": "https://github.com/mondwan", "followers_url": "https://api.github.com/users/mondwan/followers", "following_url": "https://api.github.com/users/mondwan/following{/other_user}", "gists_url": "https://api.github.com/users/mondwan/gists{/gist_id}", "starred_url": "https://api.github.com/users/mondwan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mondwan/subscriptions", "organizations_url": "https://api.github.com/users/mondwan/orgs", "repos_url": "https://api.github.com/users/mondwan/repos", "events_url": "https://api.github.com/users/mondwan/events{/privacy}", "received_events_url": "https://api.github.com/users/mondwan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-07T03:02:28Z", "updated_at": "2019-06-15T06:50:06Z", "closed_at": "2019-02-25T11:29:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello all, I am not sure whether this is a good place to ask question. Let me know if there is a better place to ask...\r\n\r\nI am confused about the DEALER / ROUTER implementation here and example in ZMQ document. According to the ZMQ document, [Dealer and router example][1], there are 3 `frames` for a message envelop, which are ID, EMPTY FRAME, and DATA FRAME. [PYZMQ example][2], however, does not contains the empty frame concept.\r\n\r\n[1]: http://zguide.zeromq.org/page:all#ROUTER-Broker-and-DEALER-Workers\r\n[2]: https://github.com/zeromq/pyzmq/blob/master/examples/asyncio/helloworld_pubsub_dealerrouter.py#L162\r\n\r\nAs first, I guess the empty frame is embedded internally through the API. I try to pick a [C example from zguide][3] as a server, and a mimic a dummy DEALER example as below:\r\n\r\n```python\r\nimport zmq\r\nimport sys\r\n\r\nif len(sys.argv) != 4:\r\n    print 'Usage: dumb_dealer_client IP PORT MSG'\r\n    sys.exit(1)\r\n\r\nip = sys.argv[1]\r\nport = sys.argv[2]\r\nmsg = sys.argv[3]\r\n\r\ncontext = zmq.Context()\r\nsocket = context.socket(zmq.DEALER)\r\n# socket.set(getattr(zmq, 'REQ_CORRELATE'), 0)\r\nsocket.identity = b'dumb_client'\r\n\r\nendpoint = \"tcp://%s:%s\" % (ip, port)\r\nsocket.connect(endpoint)\r\nprint 'Go to %s' % endpoint\r\n\r\n# This statement works with C example\r\n# socket.send_multipart(['', msg])\r\n\r\n# This statement does not work with C example\r\n# socket.send(msg)\r\nempty = socket.recv()\r\nprint 'Received empty from server: |%s|' % empty\r\nreply = socket.recv()\r\nprint 'Received msg from server: |%s|' % reply\r\n```\r\n\r\n[3]: https://github.com/booksbyus/zguide/blob/master/examples/C/hwserver3.c\r\n\r\nIt turns out that I need to explicitly specify `socket.send_multipart(['', msg])` in order to create a 3 `frames` message.\r\n\r\nFinally, my question is which implementation I should conform to? Do I miss anything? Thanks for your time.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1249", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1249/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1249/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1249/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1249", "id": 395901818, "node_id": "MDU6SXNzdWUzOTU5MDE4MTg=", "number": 1249, "title": "ZMQ_LINGER not honored, sockets end up in TIME_WAIT state", "user": {"login": "mx781", "id": 2210148, "node_id": "MDQ6VXNlcjIyMTAxNDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2210148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mx781", "html_url": "https://github.com/mx781", "followers_url": "https://api.github.com/users/mx781/followers", "following_url": "https://api.github.com/users/mx781/following{/other_user}", "gists_url": "https://api.github.com/users/mx781/gists{/gist_id}", "starred_url": "https://api.github.com/users/mx781/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mx781/subscriptions", "organizations_url": "https://api.github.com/users/mx781/orgs", "repos_url": "https://api.github.com/users/mx781/repos", "events_url": "https://api.github.com/users/mx781/events{/privacy}", "received_events_url": "https://api.github.com/users/mx781/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-01-04T11:58:08Z", "updated_at": "2019-01-08T16:08:38Z", "closed_at": "2019-01-08T16:08:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello pyzmq maintainers,\r\n\r\nWe seem to be running into an issue where the `linger=0` flag for `zmq_close` does not seem to be honored. Here is a minimal repro script:\r\n\r\n**main.py**\r\n```python\r\nimport zmq\r\nimport psutil\r\nimport time\r\nimport subprocess\r\nimport sys\r\n\r\ndef get_conns_for_port(port):\r\n    return {conn.raddr: conn for conn in psutil.net_connections() if conn.laddr.port == port}\r\n\r\nport = 7890\r\nsubprocess.Popen([sys.executable, 'server.py', str(port)])\r\n\r\nctx = zmq.Context()\r\nsock = ctx.socket(zmq.REQ)\r\nsock.connect('tcp://127.0.0.1:{}'.format(port))\r\n\r\ntime.sleep(1) # wait for connection to happen\r\nprint(get_conns_for_port(port))\r\n\r\nsock.send(b'terminate')\r\nsock.recv()\r\nsock.close(linger=0)\r\nctx.term()\r\n\r\n# time.sleep(15)\r\nprint(get_conns_for_port(port))\r\n```\r\n\r\n**server.py**\r\n```python\r\nimport zmq\r\nimport sys\r\n\r\nport = sys.argv[1]\r\nctx = zmq.Context()\r\nsocket = ctx.socket(zmq.REP)\r\nsocket.bind('tcp://127.0.0.1:{}'.format(port))\r\nsocket.setsockopt(zmq.RCVTIMEO, 2000)\r\n\r\nmsg = socket.recv()\r\nassert msg == b'terminate'\r\nsocket.send(b'ok')\r\nsocket.close(linger=0)\r\nctx.term()\r\n\r\nprint(\"Server process complete\")\r\n```\r\n\r\nThe output looks like this:\r\n```\r\n$ python main.py \r\n{addr(ip='127.0.0.1', port=37364): sconn(fd=15, family=<AddressFamily.AF_INET: 2>, type=<SocketKind.SOCK_STREAM: 1>, laddr=addr(ip='127.0.0.1', port=7890), raddr=addr(ip='127.0.0.1', port=37364), status='ESTABLISHED', pid=12170), (): sconn(fd=14, family=<AddressFamily.AF_INET: 2>, type=<SocketKind.SOCK_STREAM: 1>, laddr=addr(ip='127.0.0.1', port=7890), raddr=(), status='LISTEN', pid=12170)}\r\nServer process complete\r\n{addr(ip='127.0.0.1', port=37364): sconn(fd=-1, family=<AddressFamily.AF_INET: 2>, type=<SocketKind.SOCK_STREAM: 1>, laddr=addr(ip='127.0.0.1', port=7890), raddr=addr(ip='127.0.0.1', port=37364), status='TIME_WAIT', pid=None)}\r\n```\r\n\r\nThe first print shows expected results: the REP socket is listening, and has 1 established connection (to the REP). However, after a single pair of send/recv and closing both with `linger=0` and terminating context, `psutil` shows that the pair that was `ESTABLISHED` is now in status `TIME_WAIT`. According to [man netstat](http://netstat.net/) (which uses /proc under the hood, just like psutil), \r\n> `TIME_WAIT` The socket is waiting after close to handle packets still in the network.\r\n\r\nwhich sounds exactly what `linger=0` should be preventing. In fact, it seems the C# bindings for 0MQ have an option to do this exactly (as per [this issue](https://github.com/zeromq/netmq/issues/303) and related PRs). However in our case, it does not seem to be honored. \r\n\r\nIf you uncomment the `time.sleep()`, the same occurs - the socket is in a `TIME_WAIT` state until the TCP timeout runs out (`net.ipv4.netfilter.ip_conntrack_tcp_timeout_time_wait` on UNIX if I understand correctly). \r\n\r\nIn our real-world app, we make use of a lazy-pirate like pattern with pollers, etc; and we have also tried zmq_setsockopt on the sockets rather than passing it to close - neither aspect seems to change this behavior.\r\n\r\nCould anyone shed some light on whether this is to be expected (and if so, can it be mitigated in any way), or point at what we're doing wrong? Many thanks. \r\n\r\nenv:\r\n```\r\n$ pip freeze\r\npsutil==5.4.8\r\npyzmq==17.1.2\r\n\r\n$ uname -a\r\nLinux server3 4.15.0-43-generic #46-Ubuntu SMP Thu Dec 6 14:45:28 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1247", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1247/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1247/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1247/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1247", "id": 395374995, "node_id": "MDU6SXNzdWUzOTUzNzQ5OTU=", "number": 1247, "title": "Documentation of cffi support", "user": {"login": "MichaelSpece", "id": 5764673, "node_id": "MDQ6VXNlcjU3NjQ2NzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5764673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelSpece", "html_url": "https://github.com/MichaelSpece", "followers_url": "https://api.github.com/users/MichaelSpece/followers", "following_url": "https://api.github.com/users/MichaelSpece/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelSpece/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelSpece/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelSpece/subscriptions", "organizations_url": "https://api.github.com/users/MichaelSpece/orgs", "repos_url": "https://api.github.com/users/MichaelSpece/repos", "events_url": "https://api.github.com/users/MichaelSpece/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelSpece/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-02T20:47:02Z", "updated_at": "2019-02-08T15:42:56Z", "closed_at": "2019-02-08T15:42:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In light of #852 (and perhaps regardless), it would be helpful to extend the documentation of pyzmq's cffi support.  In particular, from examining [_cffi.py]( https://github.com/zeromq/pyzmq/blob/a69e32b17afb4842bcc18d7108261bfc08278c4c/zmq/backend/cffi/_cffi.py#L84) and [_verify.c]( https://github.com/zeromq/pyzmq/blob/a69e32b17afb4842bcc18d7108261bfc08278c4c/zmq/backend/cffi/_verify.c#L2), it appears that support is designed only for systems conforming to `have_sys_un_h = True`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1246", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1246/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1246/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1246/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1246", "id": 391730685, "node_id": "MDU6SXNzdWUzOTE3MzA2ODU=", "number": 1246, "title": "PyZMQ cannot receive messages outside Docker container.", "user": {"login": "NumesSanguis", "id": 8008618, "node_id": "MDQ6VXNlcjgwMDg2MTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8008618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NumesSanguis", "html_url": "https://github.com/NumesSanguis", "followers_url": "https://api.github.com/users/NumesSanguis/followers", "following_url": "https://api.github.com/users/NumesSanguis/following{/other_user}", "gists_url": "https://api.github.com/users/NumesSanguis/gists{/gist_id}", "starred_url": "https://api.github.com/users/NumesSanguis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NumesSanguis/subscriptions", "organizations_url": "https://api.github.com/users/NumesSanguis/orgs", "repos_url": "https://api.github.com/users/NumesSanguis/repos", "events_url": "https://api.github.com/users/NumesSanguis/events{/privacy}", "received_events_url": "https://api.github.com/users/NumesSanguis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-17T14:14:04Z", "updated_at": "2019-01-02T08:55:38Z", "closed_at": "2019-01-02T08:55:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a problem with a non-dockerized subscriber (bind) not being able to receive messages from a Dockerized publisher (connect). More details here: https://stackoverflow.com/questions/53802691/pyzmq-dockerized-pub-sub-sub-wont-receive-messages\r\n\r\nSorry if this is not the right location, but there are not that many people on Stack Overflow involved with both PyZMQ (ZeroMQ) and Docker. So I thought here was good for visibility.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1245", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1245/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1245/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1245/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1245", "id": 389140824, "node_id": "MDU6SXNzdWUzODkxNDA4MjQ=", "number": 1245, "title": "[Windows] Unable to import zmq when building python 3.7.1 in debug mode", "user": {"login": "n8vm", "id": 13104331, "node_id": "MDQ6VXNlcjEzMTA0MzMx", "avatar_url": "https://avatars1.githubusercontent.com/u/13104331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n8vm", "html_url": "https://github.com/n8vm", "followers_url": "https://api.github.com/users/n8vm/followers", "following_url": "https://api.github.com/users/n8vm/following{/other_user}", "gists_url": "https://api.github.com/users/n8vm/gists{/gist_id}", "starred_url": "https://api.github.com/users/n8vm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n8vm/subscriptions", "organizations_url": "https://api.github.com/users/n8vm/orgs", "repos_url": "https://api.github.com/users/n8vm/repos", "events_url": "https://api.github.com/users/n8vm/events{/privacy}", "received_events_url": "https://api.github.com/users/n8vm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-10T05:00:56Z", "updated_at": "2020-05-25T09:44:13Z", "closed_at": "2020-05-25T09:44:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I recently noticed that zmq cannot be imported when embedding/using python 3.7.1 in debug mode.\r\n\r\nI get the following error report on import:\r\n\r\n>>> import zmq\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\Nathan Morrical\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\zmq\\__init__.py\", line 47, in <module>\r\n    from zmq import backend\r\n  File \"C:\\Users\\Nathan Morrical\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\zmq\\backend\\__init__.py\", line 40, in <module>\r\n    reraise(*exc_info)\r\n  File \"C:\\Users\\Nathan Morrical\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\zmq\\utils\\sixcerpt.py\", line 34, in reraise\r\n    raise value\r\n  File \"C:\\Users\\Nathan Morrical\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\zmq\\backend\\__init__.py\", line 27, in <module>\r\n    _ns = select_backend(first)\r\n  File \"C:\\Users\\Nathan Morrical\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\zmq\\backend\\select.py\", line 27, in select_backend\r\n    mod = __import__(name, fromlist=public_api)\r\n  File \"C:\\Users\\Nathan Morrical\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\zmq\\backend\\cython\\__init__.py\", line 6, in <module>\r\n    from . import (constants, error, message, context,\r\nImportError: cannot import name 'constants' from 'zmq.backend.cython' (C:\\Users\\Nathan Morrical\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\zmq\\backend\\cython\\__init__.py)\r\n\r\nThis error goes away when I build python 3.7.1 in release mode. However, then I cannot debug my application...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1244", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1244/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1244/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1244/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1244", "id": 388714572, "node_id": "MDU6SXNzdWUzODg3MTQ1NzI=", "number": 1244, "title": "Multipart messages not fully atomic on push/pull sockets", "user": {"login": "takluyver", "id": 327925, "node_id": "MDQ6VXNlcjMyNzkyNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/takluyver", "html_url": "https://github.com/takluyver", "followers_url": "https://api.github.com/users/takluyver/followers", "following_url": "https://api.github.com/users/takluyver/following{/other_user}", "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}", "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions", "organizations_url": "https://api.github.com/users/takluyver/orgs", "repos_url": "https://api.github.com/users/takluyver/repos", "events_url": "https://api.github.com/users/takluyver/events{/privacy}", "received_events_url": "https://api.github.com/users/takluyver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-12-07T16:03:23Z", "updated_at": "2019-05-24T15:25:17Z", "closed_at": "2019-05-24T15:25:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I think we've (mostly @tmichela) stumbled across a case where multipart messages are not delivered atomically. I've tried to distil a minimum reproducible example [in this gist](https://gist.github.com/takluyver/1db6e33ecd5c22c8725437dc60ecb953).\r\n\r\n1. Start `atomicity_issue_push.py` running in one terminal.\r\n2. In another terminal, run `atomicity_issue_pull.py` repeatedly.\r\n3. It should always receive 2 parts, as it does the first time it's run, but subsequent runs often (not always) receive 1 part.\r\n\r\nI think it's likely something to do with the coincidence of sending large messages (0.5 GB) and exiting the process soon after receiving the message - if I insert `time.sleep(1)` at the end of the pull script, I can't reproduce it. The process should probably be cleaning up the context properly, but consider this as a simulated crash: it shouldn't affect things for other processes.\r\n\r\nThe [zmq_send docs](http://api.zeromq.org/4-1:zmq-send) say:\r\n\r\n> \u00d8MQ ensures atomic delivery of messages: peers shall receive either all message parts of a message or none at all.\r\n\r\nPerhaps this is a problem in libzmq, but I'm much more confident investigating it in Python than in C, so I thought I'd bring it up here first. It's possible it's related to https://github.com/zeromq/libzmq/issues/1588, which we ran into first; only after upgrading to get the fix for that did we start seeing this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1242", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1242/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1242/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1242/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1242", "id": 383478121, "node_id": "MDU6SXNzdWUzODM0NzgxMjE=", "number": 1242, "title": "try pkg-config for libzmq first, before hacks", "user": {"login": "dimpase", "id": 1276956, "node_id": "MDQ6VXNlcjEyNzY5NTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1276956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimpase", "html_url": "https://github.com/dimpase", "followers_url": "https://api.github.com/users/dimpase/followers", "following_url": "https://api.github.com/users/dimpase/following{/other_user}", "gists_url": "https://api.github.com/users/dimpase/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimpase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimpase/subscriptions", "organizations_url": "https://api.github.com/users/dimpase/orgs", "repos_url": "https://api.github.com/users/dimpase/repos", "events_url": "https://api.github.com/users/dimpase/events{/privacy}", "received_events_url": "https://api.github.com/users/dimpase/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-22T10:45:47Z", "updated_at": "2018-11-22T13:22:36Z", "closed_at": "2018-11-22T13:22:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "On the latest pyzmq I encounter it being unable to find the header `zmq.h`, when it is installed in `/usr/local/include`, and pyzmq is installed into Sage's python (I guess a private copy of Python will do, it's not really Sagemath-specific). I tracked it down to it not even trying to call `pkg-config`, but resorting to some kind of guesswork.\r\n\r\nOnce I tell it to call `pkg-config`, as follows:\r\n```diff\r\n--- a/setup.py\r\n+++ b/setup.py\r\n@@ -222,7 +222,7 @@ def settings_from_prefix(prefix=None, bundle_libzmq_dylib=False):\r\n           else:\r\n             settings['extra_link_args'] += ['-m64']\r\n \r\n-        if prefix:\r\n+        if 0: # so we will try pkg-config!\r\n             settings['libraries'].append('zmq')\r\n \r\n             settings['include_dirs'] += [pjoin(prefix, 'include')]\r\n```\r\neverything is good. It seems that assuming that everything will be in `\"prefix\"/` is too restrictive. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1237", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1237/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1237/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1237/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1237", "id": 375108547, "node_id": "MDU6SXNzdWUzNzUxMDg1NDc=", "number": 1237, "title": "ZMQ stuck on exception, finally section is not executed", "user": {"login": "vsmelov", "id": 9407507, "node_id": "MDQ6VXNlcjk0MDc1MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/9407507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsmelov", "html_url": "https://github.com/vsmelov", "followers_url": "https://api.github.com/users/vsmelov/followers", "following_url": "https://api.github.com/users/vsmelov/following{/other_user}", "gists_url": "https://api.github.com/users/vsmelov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsmelov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsmelov/subscriptions", "organizations_url": "https://api.github.com/users/vsmelov/orgs", "repos_url": "https://api.github.com/users/vsmelov/repos", "events_url": "https://api.github.com/users/vsmelov/events{/privacy}", "received_events_url": "https://api.github.com/users/vsmelov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-29T16:37:18Z", "updated_at": "2018-11-09T09:54:00Z", "closed_at": "2018-11-09T09:54:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! Thanks you for cool library :-)\r\nI faced with problem on handling application exception.\r\n\r\nIf I init ZMQ Context and Socket and then my application failed due to some exception (or Ctrl+C doesn't matter), all python code stops, but process still run (see main1 in examples below).\r\nCan you please explain such behavior?\r\n\r\nThis is very unuseful if you run program with docker-compose restart=always,\r\nfailed program will just run forever!\r\n\r\nAs far as I understand I have to destroy Context manually (but it is not clear why)\r\nIf I wrap execution in try/except (see main2), but on exception program does not go to finally section at all! (in normal execution it does, see main0).\r\nWhy finally section is not executed when I use zmq?\r\n\r\nSo the solution I use is atexit.register, then destroy-code is executed and program exit. But it's weird.\r\n\r\n```python\r\nimport asyncio\r\nimport atexit\r\n\r\nimport zmq.asyncio\r\n\r\n\r\nasync def foo_print():\r\n    while True:\r\n        print('foo_print')\r\n        await asyncio.sleep(1)\r\n\r\n\r\nasync def foo_zmq():\r\n    context = zmq.asyncio.Context.instance()\r\n    socket = context.socket(zmq.PUB)\r\n    bind_to = 'tcp://*:20000'\r\n    socket.bind(bind_to)\r\n    while True:\r\n        print('foo_zmq')\r\n        await asyncio.sleep(1)\r\n\r\n\r\nasync def main0():\r\n    \"\"\" Nothing: try-except (works as expected) \"\"\"\r\n    try:\r\n        await foo_print()  # press Ctrl+C here\r\n    except:\r\n        pass\r\n    finally:\r\n        print('finally')  # this will be called\r\n\r\n\r\nasync def main1():\r\n    \"\"\" ZMQ: just run (stuck on exception) \"\"\"\r\n    await foo_zmq()  # press Ctrl+C here\r\n\r\n\r\nasync def main2():\r\n    \"\"\" ZMQ: try-except destroy (doesn't work) \"\"\"\r\n    try:\r\n        await foo_zmq()  # press Ctrl+C here\r\n    except:\r\n        pass\r\n    finally:\r\n        print('finally')  # it will be never called!\r\n        zmq.asyncio.Context.instance().destroy(linger=0)  # this is too\r\n        # so program will stuck until you press Ctrl+C twice!\r\n\r\n\r\nasync def main3():\r\n    \"\"\" ZMQ: atexit destroy (works) \"\"\"\r\n    def final():\r\n        print('finally')  # it will be called!\r\n        zmq.asyncio.Context.instance().destroy(linger=0)  # this is too\r\n    atexit.register(final)\r\n    await foo_zmq()  # press Ctrl+C here\r\n\r\n\r\nif __name__ == '__main__':\r\n    # asyncio.get_event_loop().run_until_complete(main0())  # check nothing (works as expected)\r\n    asyncio.get_event_loop().run_until_complete(main1())  # ZMQ: just run (stuck on exception)\r\n    # asyncio.get_event_loop().run_until_complete(main2())  # ZMQ: try-except destroy (doesn't work)\r\n    # asyncio.get_event_loop().run_until_complete(main3())  # ZMQ: atexit destroy (works)\r\n\r\n```\r\n\r\nEnvironment:\r\n```\r\n(.venv) vsmelov@blocktech-008:~/PycharmProjects/base_price_publisher$ python -V\r\nPython 3.6.6\r\n(.venv) vsmelov@blocktech-008:~/PycharmProjects/base_price_publisher$ pip freeze | grep zmq\r\nYou are using pip version 10.0.1, however version 18.1 is available.\r\nYou should consider upgrading via the 'pip install --upgrade pip' command.\r\npyzmq==17.0.0\r\n(.venv) vsmelov@blocktech-008:~/PycharmProjects/base_price_publisher$ lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 18.04.1 LTS\r\nRelease:\t18.04\r\nCodename:\tbionic\r\n\r\n>>> print(\"libzmq-%s\" % zmq.zmq_version())\r\nlibzmq-4.1.6\r\n>>> print(\"pyzmq-%s\" % zmq.pyzmq_version())\r\npyzmq-17.0.0\r\n>>> print(\"Python-%s\" % sys.version)\r\nPython-3.6.6 (default, Sep 12 2018, 18:26:19) \r\n[GCC 8.0.1 20180414 (experimental) [trunk revision 259383]]\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1236", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1236/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1236/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1236/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1236", "id": 374537299, "node_id": "MDU6SXNzdWUzNzQ1MzcyOTk=", "number": 1236, "title": "Change history for pyzmq", "user": {"login": "devdave", "id": 281946, "node_id": "MDQ6VXNlcjI4MTk0Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/281946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devdave", "html_url": "https://github.com/devdave", "followers_url": "https://api.github.com/users/devdave/followers", "following_url": "https://api.github.com/users/devdave/following{/other_user}", "gists_url": "https://api.github.com/users/devdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/devdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devdave/subscriptions", "organizations_url": "https://api.github.com/users/devdave/orgs", "repos_url": "https://api.github.com/users/devdave/repos", "events_url": "https://api.github.com/users/devdave/events{/privacy}", "received_events_url": "https://api.github.com/users/devdave/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-26T20:31:31Z", "updated_at": "2018-10-27T11:25:26Z", "closed_at": "2018-10-27T11:25:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I forked txzmq (Twisted adapter library to pyzmq) which appears to have been abandoned.\r\n\r\nFrom what I can tell, the library was developed around version 13 of pyzmq and while txzmq still works, I would like to update my fork so it is closer to pyzmq's current version.   Unfortunately I can't seem to find a reliable change history for 14, 15, and 16 so I know exactly what to focus on.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1234", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1234/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1234/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1234/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1234", "id": 374179871, "node_id": "MDU6SXNzdWUzNzQxNzk4NzE=", "number": 1234, "title": "Use ZMQ_SERVER and ZMQ_CLIENT", "user": {"login": "Kipsora", "id": 23658877, "node_id": "MDQ6VXNlcjIzNjU4ODc3", "avatar_url": "https://avatars0.githubusercontent.com/u/23658877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kipsora", "html_url": "https://github.com/Kipsora", "followers_url": "https://api.github.com/users/Kipsora/followers", "following_url": "https://api.github.com/users/Kipsora/following{/other_user}", "gists_url": "https://api.github.com/users/Kipsora/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kipsora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kipsora/subscriptions", "organizations_url": "https://api.github.com/users/Kipsora/orgs", "repos_url": "https://api.github.com/users/Kipsora/repos", "events_url": "https://api.github.com/users/Kipsora/events{/privacy}", "received_events_url": "https://api.github.com/users/Kipsora/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-26T00:13:18Z", "updated_at": "2018-11-11T21:37:28Z", "closed_at": "2018-11-11T21:37:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "As `libzmq` has already provided `ZMQ_CLIENT` and `ZMQ_SERVER`, I am wondering how to use these two features on Python.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1228", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1228/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1228/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1228/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1228", "id": 361411501, "node_id": "MDU6SXNzdWUzNjE0MTE1MDE=", "number": 1228, "title": "Simplest pair messaging grabs mouse ", "user": {"login": "ctseaton", "id": 43385014, "node_id": "MDQ6VXNlcjQzMzg1MDE0", "avatar_url": "https://avatars0.githubusercontent.com/u/43385014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ctseaton", "html_url": "https://github.com/ctseaton", "followers_url": "https://api.github.com/users/ctseaton/followers", "following_url": "https://api.github.com/users/ctseaton/following{/other_user}", "gists_url": "https://api.github.com/users/ctseaton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ctseaton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ctseaton/subscriptions", "organizations_url": "https://api.github.com/users/ctseaton/orgs", "repos_url": "https://api.github.com/users/ctseaton/repos", "events_url": "https://api.github.com/users/ctseaton/events{/privacy}", "received_events_url": "https://api.github.com/users/ctseaton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-18T17:42:24Z", "updated_at": "2018-09-19T11:32:26Z", "closed_at": "2018-09-19T11:31:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to learn zmq for work, but while teaching myself and doing the simplest first example from https://learning-0mq-with-pyzmq.readthedocs.io: \r\n``import zmq\r\nimport time\r\nport = '5556'\r\ncontext = zmq.Context()\r\nsocket = context.socket(zmq.PAIR) \r\nsocket.connect(\"tcp://localhost:%s\" % port)\r\nwhile True:\r\n    msg = socket.recv()\r\n    print msg\r\n    socket.send(\"client message to server1\")\r\n    socket.send(\"client message to server2\")\r\n    time.sleep(1)``\r\n\r\nrunning this, and its server pair (difference being tcp://*:%s\") both of these options grab mouse control for some reason. if I run them congruently, I get the following error\r\n``$ ./pairclient.py \r\nimport: unable to grab mouse `': Resource temporarily unavailable @ error/xwindow.c/XSelectWindow/9199.\r\nimport: unable to grab mouse `': Resource temporarily unavailable @ error/xwindow.c/XSelectWindow/9199.\r\n./pairclient.py: line 9: port: command not found\r\n./pairclient.py: line 11: syntax error near unexpected token `('\r\n./pairclient.py: line 11: `context = zmq.Context()'``\r\n\r\n``$ pip show pyzmq\r\n/usr/local/lib/python2.7/dist-packages/pip/_vendor/requests/__init__.py:83: RequestsDependencyWarning: Old version of cryptography ([1, 2, 3]) may cause slowdown.\r\n  warnings.warn(warning, RequestsDependencyWarning)\r\nName: pyzmq\r\nVersion: 17.1.2\r\nSummary: Python bindings for 0MQ``\r\n\r\n``$ uname -a \r\nLinux rusty 4.13.0-37-generic #42~16.04.1-Ubuntu SMP Wed Mar 7 16:03:28 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux``\r\n\r\n``$gcc --version \r\ngcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.9) ``\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1226", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1226/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1226/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1226/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1226", "id": 358140148, "node_id": "MDU6SXNzdWUzNTgxNDAxNDg=", "number": 1226, "title": "Problem with IPv6 and link-local addresses", "user": {"login": "kjrrp", "id": 3809905, "node_id": "MDQ6VXNlcjM4MDk5MDU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3809905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjrrp", "html_url": "https://github.com/kjrrp", "followers_url": "https://api.github.com/users/kjrrp/followers", "following_url": "https://api.github.com/users/kjrrp/following{/other_user}", "gists_url": "https://api.github.com/users/kjrrp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjrrp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjrrp/subscriptions", "organizations_url": "https://api.github.com/users/kjrrp/orgs", "repos_url": "https://api.github.com/users/kjrrp/repos", "events_url": "https://api.github.com/users/kjrrp/events{/privacy}", "received_events_url": "https://api.github.com/users/kjrrp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-07T16:51:59Z", "updated_at": "2018-10-12T11:45:07Z", "closed_at": "2018-10-12T11:45:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to connect to a PUB queue on a remote host using IPv6 link-local addresses (global addresses works perfectly) .\r\n\r\nMy server (link-local address on eth1 *fe80::3be:94a3:15be:2407*):\r\n```\r\nimport zmq\r\ncontext = zmq.Context()\r\npub_socket = context.socket(zmq.PUB)\r\npub_socket.setsockopt(zmq.IPV6, True)\r\npub_socket.bind(\"tcp://*:5555)\r\n```\r\n\r\nMy client (link-local address on eth1 *fe80::3be:94a3:15be:2342*):\r\n```\r\nimport zmq\r\ncontext = zmq.Context()\r\nsub_socket = context.socket(zmq.SUB)\r\nsub_socket.setsockopt(zmq.IPV6, True)\r\nsub_socket.connect(\"tcp://[fe80::3be:94a3:15be:2407]:5555\")\r\n```\r\n\r\nI tried different combination of connect() to no avail. I either get a `zmq.error.ZMQError: Invalid argument` if I try to put a **%** in the address (as required by IPv6 link-local addresses) or there is no error but no connection. If I put the interface name in source it tries to resolve the interface's name using DNS.\r\n\r\nExamples of what I tried:\r\n<pre>\r\nconnect(\"tcp://[fe80::3be:94a3:15be:2407]:5555\") => no error, no connection\r\n\r\nconnect(\"tcp://fe80::3be:94a3:15be:2342;[fe80::3be:94a3:15be:2407]:5555\")  => no error, no connection\r\n\r\nconnect(\"tcp://[fe80::3be:94a3:15be:2342];[fe80::3be:94a3:15be:2407]:5555\")  => no error, no connection\r\n\r\nconnect(\"tcp://eth1;[fe80::3be:94a3:15be:2407]:5555\") => tries to resolve \"eth1\"\r\n\r\nconnect(\"tcp://eth1:2;[fe80::3be:94a3:15be:2407]:5555\") => tries to resolve \"eth1:2\"\r\n\r\nconnect(\"tcp://[fe80::3be:94a3:15be:2407%eth1]:5555\") =>  error\r\n\r\nconnect(\"tcp://[fe80::3be:94a3:15be:2407]%eth1:5555\") =>  error\r\n</pre>\r\n\r\nI'm using the latest pyzmq from pip.\r\n<pre>\r\nlibzmq-4.1.6\r\npyzmq-17.0.0\r\nPython-2.7.15rc1 (default, Apr 15 2018, 21:51:34) \r\n[GCC 7.3.0]\r\n</pre>\r\nBest,\r\n\r\n--\r\nkjrrp", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1222", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1222/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1222/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1222/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1222", "id": 354832902, "node_id": "MDU6SXNzdWUzNTQ4MzI5MDI=", "number": 1222, "title": "Pickle ZMQ context", "user": {"login": "surfingkaka", "id": 42520940, "node_id": "MDQ6VXNlcjQyNTIwOTQw", "avatar_url": "https://avatars1.githubusercontent.com/u/42520940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/surfingkaka", "html_url": "https://github.com/surfingkaka", "followers_url": "https://api.github.com/users/surfingkaka/followers", "following_url": "https://api.github.com/users/surfingkaka/following{/other_user}", "gists_url": "https://api.github.com/users/surfingkaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/surfingkaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/surfingkaka/subscriptions", "organizations_url": "https://api.github.com/users/surfingkaka/orgs", "repos_url": "https://api.github.com/users/surfingkaka/repos", "events_url": "https://api.github.com/users/surfingkaka/events{/privacy}", "received_events_url": "https://api.github.com/users/surfingkaka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-28T17:37:16Z", "updated_at": "2018-09-11T13:30:23Z", "closed_at": "2018-09-11T13:30:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since this is not possible, how does one pass around a ZMQ context ? I am trying to use a library that pickles to pass stuff ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1220", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1220/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1220/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1220/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1220", "id": 352723912, "node_id": "MDU6SXNzdWUzNTI3MjM5MTI=", "number": 1220, "title": "Do not clobber __init__.py if it already exists", "user": {"login": "cbwest3", "id": 8591862, "node_id": "MDQ6VXNlcjg1OTE4NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/8591862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbwest3", "html_url": "https://github.com/cbwest3", "followers_url": "https://api.github.com/users/cbwest3/followers", "following_url": "https://api.github.com/users/cbwest3/following{/other_user}", "gists_url": "https://api.github.com/users/cbwest3/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbwest3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbwest3/subscriptions", "organizations_url": "https://api.github.com/users/cbwest3/orgs", "repos_url": "https://api.github.com/users/cbwest3/repos", "events_url": "https://api.github.com/users/cbwest3/events{/privacy}", "received_events_url": "https://api.github.com/users/cbwest3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-21T21:50:10Z", "updated_at": "2018-10-30T11:02:10Z", "closed_at": "2018-10-30T11:02:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "When generating Python code from flatbuffer schema, do not clobber __init__.py if it already exists.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1212", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1212/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1212/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1212/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1212", "id": 351305448, "node_id": "MDU6SXNzdWUzNTEzMDU0NDg=", "number": 1212, "title": "TypeError when sending bytebuffer using PyPy-3.5.3 v6.0.0", "user": {"login": "jean-airoldie", "id": 25088801, "node_id": "MDQ6VXNlcjI1MDg4ODAx", "avatar_url": "https://avatars3.githubusercontent.com/u/25088801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jean-airoldie", "html_url": "https://github.com/jean-airoldie", "followers_url": "https://api.github.com/users/jean-airoldie/followers", "following_url": "https://api.github.com/users/jean-airoldie/following{/other_user}", "gists_url": "https://api.github.com/users/jean-airoldie/gists{/gist_id}", "starred_url": "https://api.github.com/users/jean-airoldie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jean-airoldie/subscriptions", "organizations_url": "https://api.github.com/users/jean-airoldie/orgs", "repos_url": "https://api.github.com/users/jean-airoldie/repos", "events_url": "https://api.github.com/users/jean-airoldie/events{/privacy}", "received_events_url": "https://api.github.com/users/jean-airoldie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-16T17:49:26Z", "updated_at": "2018-08-20T14:27:47Z", "closed_at": "2018-08-20T14:27:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI am unable to send a bytebuffer from a PUSH socket using pypy3.\r\nThe code was ran using `virtualenv -p pypy3`, and a [pypy3 linux x86-64 prebuilt binary](https://www.pypy.org/download.html).\r\n\r\nHere are my libraries version:\r\n```\r\nlibzmq-4.2.3\r\npyzmq-17.1.0\r\nPyPy-3.5.3 (fdd60ed87e94, Apr 24 2018, 06:10:04)\r\n[PyPy 6.0.0 with GCC 6.2.0 20160901]\r\n```\r\nHere is my system info :\r\n(Note that Running this code from the [pypy3-6.0.0 image](https://hub.docker.com/_/pypy/) yields the same issue.)\r\n```\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 18.04.1 LTS\r\nRelease:\t18.04\r\nCodename:\tbionic\r\n```\r\nHere is the a minimum amount of code to reproduce this issue :\r\n\r\n```python3\r\n#!/usr/bin/env pypy3\r\n\r\n# filename : push.py\r\n\r\nimport zmq\r\n\r\nctx = zmq.Context()\r\npush = ctx.socket(zmq.PUSH)\r\npush.bind(\"tcp://*:3001\")\r\n\r\nbuf = bytearray(b'\\x00')\r\n\r\npush.send(buf)\r\n```\r\n\r\nTraceback :\r\n```\r\n  Traceback (most recent call last):\r\n  File \"./push.py\", line 13, in <module>\r\n    push.send(buf)\r\n  File \"/home/maxence/lumby/lumby-storage/ENV/site-packages/zmq/sugar/socket.py\", line 392, in send\r\n    return super(Socket, self).send(data, flags=flags, copy=copy, track=track)\r\n  File \"/home/maxence/lumby/lumby-storage/ENV/site-packages/zmq/backend/cffi/socket.py\", line 209, in send\r\n    c_message = ffi.new('char[]', message)\r\n  File \"/home/maxence/sources/pypy3-v6.0.0-linux64/lib_pypy/cffi/api.py\", line 258, in new\r\n    return self._backend.newp(cdecl, init)\r\nTypeError: expected new array length or list/tuple/str, not bytearray\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1209", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1209/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1209/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1209/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1209", "id": 348162891, "node_id": "MDU6SXNzdWUzNDgxNjI4OTE=", "number": 1209, "title": "zmq.PUB in zmq.asyncio is 7x slower than plain zmq", "user": {"login": "gammaguy", "id": 11431640, "node_id": "MDQ6VXNlcjExNDMxNjQw", "avatar_url": "https://avatars2.githubusercontent.com/u/11431640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gammaguy", "html_url": "https://github.com/gammaguy", "followers_url": "https://api.github.com/users/gammaguy/followers", "following_url": "https://api.github.com/users/gammaguy/following{/other_user}", "gists_url": "https://api.github.com/users/gammaguy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gammaguy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gammaguy/subscriptions", "organizations_url": "https://api.github.com/users/gammaguy/orgs", "repos_url": "https://api.github.com/users/gammaguy/repos", "events_url": "https://api.github.com/users/gammaguy/events{/privacy}", "received_events_url": "https://api.github.com/users/gammaguy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-08-07T04:26:53Z", "updated_at": "2018-08-19T17:00:49Z", "closed_at": "2018-08-19T17:00:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was trying to rewrite my PubSub model with zmq.asyncio but it seems really slow vs plain zmq. \r\nAny thoughts?\r\n\r\nThis run was on Windows 10, Python 3.6.6, pyzmq 17.1.0 .\r\nAlso tried on AWS as Ubuntu 16.04, Python 3.6.5, pyzmq 17.0.0, relatively similar results\r\n\r\n**Straight zmq:**\r\nThat took: 514.5178ms\r\nWhole thing took: 568.4677ms\r\n\r\n**zmq.asyncio:**\r\nThat took: 3788.8812ms\r\nWhole thing took3936.3975ms\r\n\r\n\r\n\r\n\r\n\r\n```python\r\n# zmq_server.py\r\nimport zmq\r\nfrom timeit import default_timer as timer\r\n# import ujson as json\r\nimport json # took out the ujson as not everyone had it installed  but it's alot faster\r\n\r\ndef pub(num):\r\n  port = \"5556\"\r\n  context = zmq.Context()\r\n  socket = context.socket(zmq.PUB)\r\n  socket.bind(\"tcp://*:%s\" % port)\r\n\r\n  myList = [\"AAA\",\"BBB\",\"CCC\"]\r\n  market = dict()\r\n  market[myList[0]]=[100,10.00,10.01,200]\r\n  market[myList[1]]=[200,10.00,10.01,400]\r\n  market[myList[2]]=[300,10.00,10.01,600]\r\n\r\n  start = timer()\r\n  for i in range(num):\r\n    channel = myList[i%3]\r\n    messagedata = market[channel]\r\n    jsoned_data = json.dumps(messagedata)\r\n    socket.send_string(f\"{channel} {jsoned_data}\")\r\n  print(f\"That took: {(timer()-start)*1000}ms\")\r\n\r\nnum = 100000\r\nstart = timer()\r\npub(num)\r\nprint(f\"Whole thing took: {(timer()-start)*1000}ms\")\r\n```\r\n\r\n```python\r\n# zmq_asyncio_server.py\r\nimport asyncio\r\nimport zmq.asyncio\r\nfrom zmq.asyncio import Context\r\nfrom timeit import default_timer as timer\r\n# import ujson as json\r\nimport json # took out the ujson as not everyone had it installed but it's alot faster\r\n\r\nasync def pub(num):\r\n  port = \"5556\"\r\n  context = Context.instance()\r\n  socket = context.socket(zmq.PUB)\r\n  socket.bind(\"tcp://*:%s\" % port)\r\n\r\n  myList = [\"AAA\",\"BBB\",\"CCC\"]\r\n  market = dict()\r\n  market[myList[0]]=[100,10.00,10.01,200]\r\n  market[myList[1]]=[200,10.00,10.01,400]\r\n  market[myList[2]]=[300,10.00,10.01,600]\r\n\r\n  start = timer()\r\n  for i in range(num):\r\n    channel = myList[i%3]\r\n    messagedata = market[channel]\r\n    jsoned_data = json.dumps(messagedata)\r\n    await socket.send_string(f\"{channel} {jsoned_data}\")\r\n\r\n  print(f\"That took: {(timer()-start)*1000}ms\")\r\n\r\nnum = 100000\r\nloop = asyncio.get_event_loop()\r\nproducer_coro = pub(num)\r\n\r\nstart = timer()\r\nloop.run_until_complete(producer_coro)\r\nprint(f\"Whole thing took{(timer()-start)*1000}ms\")\r\nloop.close()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1205", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1205/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1205/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1205/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1205", "id": 345520239, "node_id": "MDU6SXNzdWUzNDU1MjAyMzk=", "number": 1205, "title": "test_on_recv_{basic,wake} failing", "user": {"login": "marbre", "id": 8095156, "node_id": "MDQ6VXNlcjgwOTUxNTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8095156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marbre", "html_url": "https://github.com/marbre", "followers_url": "https://api.github.com/users/marbre/followers", "following_url": "https://api.github.com/users/marbre/following{/other_user}", "gists_url": "https://api.github.com/users/marbre/gists{/gist_id}", "starred_url": "https://api.github.com/users/marbre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marbre/subscriptions", "organizations_url": "https://api.github.com/users/marbre/orgs", "repos_url": "https://api.github.com/users/marbre/repos", "events_url": "https://api.github.com/users/marbre/events{/privacy}", "received_events_url": "https://api.github.com/users/marbre/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-07-29T10:36:24Z", "updated_at": "2018-08-20T18:20:16Z", "closed_at": "2018-08-20T18:20:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "In connection with a pyzmq version bump for Gentoo Linux (https://github.com/gentoo/gentoo/pull/9284), the tests `test_on_recv_basic` and `test_on_recv_wake` fail:\r\n\r\n```\r\n========================================================================= FAILURES ==========================================================================\r\n_____________________________________________________________ TestZMQStream.test_on_recv_basic ______________________________________________________________\r\n\r\nself = <zmq.tests.test_zmqstream.TestZMQStream testMethod=test_on_recv_basic>\r\n\r\n    def setUp(self):\r\n        if tornado is None:\r\n            pytest.skip()\r\n        if asyncio:\r\n            asyncio.set_event_loop(asyncio.new_event_loop())\r\n        self.context = zmq.Context()\r\n        self.loop = ioloop.IOLoop.instance()\r\n>       self.push = zmqstream.ZMQStream(self.context.socket(zmq.PUSH))\r\n\r\n../pyzmq-17.1.0-python3_4/lib/zmq/tests/test_zmqstream.py:31: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../pyzmq-17.1.0-python3_4/lib/zmq/eventloop/zmqstream.py:120: in __init__\r\n    self._init_io_state()\r\n../pyzmq-17.1.0-python3_4/lib/zmq/eventloop/zmqstream.py:541: in _init_io_state\r\n    self.io_loop.add_handler(self.socket, self._handle_events, self.io_loop.READ)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <zmq.eventloop.ioloop.ZMQIOLoop object at 0x7f64b0055940>, fd = 150\r\nhandler = <bound method ZMQStream._handle_events of <zmq.eventloop.zmqstream.ZMQStream object at 0x7f64b0052630>>, events = 1\r\n\r\n    def add_handler(self, fd, handler, events):\r\n        fd, obj = self.split_fd(fd)\r\n        self._handlers[fd] = (obj, stack_context.wrap(handler))\r\n>       self._impl.register(fd, events | self.ERROR)\r\nE       ValueError: I/O operation on closed epoll object\r\n\r\n/usr/lib64/python3.4/site-packages/tornado/ioloop.py:728: ValueError\r\n______________________________________________________________ TestZMQStream.test_on_recv_wake ______________________________________________________________\r\n\r\nself = <zmq.tests.test_zmqstream.TestZMQStream testMethod=test_on_recv_wake>\r\n\r\n    def setUp(self):\r\n        if tornado is None:\r\n            pytest.skip()\r\n        if asyncio:\r\n            asyncio.set_event_loop(asyncio.new_event_loop())\r\n        self.context = zmq.Context()\r\n        self.loop = ioloop.IOLoop.instance()\r\n>       self.push = zmqstream.ZMQStream(self.context.socket(zmq.PUSH))\r\n\r\n../pyzmq-17.1.0-python3_4/lib/zmq/tests/test_zmqstream.py:31: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../pyzmq-17.1.0-python3_4/lib/zmq/eventloop/zmqstream.py:120: in __init__\r\n    self._init_io_state()\r\n../pyzmq-17.1.0-python3_4/lib/zmq/eventloop/zmqstream.py:541: in _init_io_state\r\n    self.io_loop.add_handler(self.socket, self._handle_events, self.io_loop.READ)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <zmq.eventloop.ioloop.ZMQIOLoop object at 0x7f64b0055940>, fd = 159\r\nhandler = <bound method ZMQStream._handle_events of <zmq.eventloop.zmqstream.ZMQStream object at 0x7f64b00c1f28>>, events = 1\r\n\r\n    def add_handler(self, fd, handler, events):\r\n        fd, obj = self.split_fd(fd)\r\n        self._handlers[fd] = (obj, stack_context.wrap(handler))\r\n>       self._impl.register(fd, events | self.ERROR)\r\nE       ValueError: I/O operation on closed epoll object\r\n\r\n/usr/lib64/python3.4/site-packages/tornado/ioloop.py:728: ValueError\r\n===================================================== 2 failed, 314 passed, 10 skipped in 67.87 seconds =====================================================#\r\n```\r\n\r\nAny hint?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1204", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1204/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1204/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1204/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1204", "id": 345295857, "node_id": "MDU6SXNzdWUzNDUyOTU4NTc=", "number": 1204, "title": "CFFI and Cython", "user": {"login": "lazuka13", "id": 8972055, "node_id": "MDQ6VXNlcjg5NzIwNTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/8972055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lazuka13", "html_url": "https://github.com/lazuka13", "followers_url": "https://api.github.com/users/lazuka13/followers", "following_url": "https://api.github.com/users/lazuka13/following{/other_user}", "gists_url": "https://api.github.com/users/lazuka13/gists{/gist_id}", "starred_url": "https://api.github.com/users/lazuka13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lazuka13/subscriptions", "organizations_url": "https://api.github.com/users/lazuka13/orgs", "repos_url": "https://api.github.com/users/lazuka13/repos", "events_url": "https://api.github.com/users/lazuka13/events{/privacy}", "received_events_url": "https://api.github.com/users/lazuka13/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-27T16:50:09Z", "updated_at": "2018-07-30T15:52:54Z", "closed_at": "2018-07-30T15:52:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Am I right to think that CFFI and Cython in pyzmq are just two different implementations of connection to libzmq? And is it right that I can completely get rid of CFFI, if I want to, without losing any functionality?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1203", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1203/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1203/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1203/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1203", "id": 344766974, "node_id": "MDU6SXNzdWUzNDQ3NjY5NzQ=", "number": 1203, "title": "asyncio: await socket.recv() missing events", "user": {"login": "haverins", "id": 41728911, "node_id": "MDQ6VXNlcjQxNzI4OTEx", "avatar_url": "https://avatars3.githubusercontent.com/u/41728911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haverins", "html_url": "https://github.com/haverins", "followers_url": "https://api.github.com/users/haverins/followers", "following_url": "https://api.github.com/users/haverins/following{/other_user}", "gists_url": "https://api.github.com/users/haverins/gists{/gist_id}", "starred_url": "https://api.github.com/users/haverins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haverins/subscriptions", "organizations_url": "https://api.github.com/users/haverins/orgs", "repos_url": "https://api.github.com/users/haverins/repos", "events_url": "https://api.github.com/users/haverins/events{/privacy}", "received_events_url": "https://api.github.com/users/haverins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-07-26T09:32:38Z", "updated_at": "2018-08-13T09:08:32Z", "closed_at": "2018-08-10T12:50:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I encountered an issue where `await socket.recv()` sometimes does not resolve even though there are incoming messages. It does not seem to happen if traffic is low.\r\n\r\nMinimal example to reproduce the issue: run following snippets (server.py & client.py). Client keeps printing messages for a while but then it stops. It seems that server is no longer notified by incoming messages thus run() is stuck at ```await router.recv_multipart()```. If 2nd client connects while server is stuck, then it starts receiving messages again but gets stuck again after a while.\r\n\r\n```python\r\n# server.py\r\nimport asyncio\r\nimport zmq.asyncio\r\n\r\nasync def send(router, identity, msg):\r\n    router.send_multipart([identity, msg])\r\n\r\nasync def run():\r\n    ctx = zmq.asyncio.Context()\r\n    router = ctx.socket(zmq.ROUTER)\r\n    router.bind(\"tcp://127.0.0.1:9001\")\r\n\r\n    while True:\r\n        identity, msg = await router.recv_multipart()\r\n        asyncio.ensure_future(send(router, identity, msg))\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(run())\r\n```\r\n\r\n```python\r\n# client.py\r\nimport asyncio\r\nimport zmq.asyncio\r\n\r\nasync def recv(dealer):\r\n    while True:\r\n        msg = await dealer.recv()\r\n        print(msg)\r\n\r\nasync def run():\r\n    ctx = zmq.asyncio.Context()\r\n    dealer = ctx.socket(zmq.DEALER)\r\n    dealer.connect(\"tcp://127.0.0.1:9001\")\r\n\r\n    asyncio.ensure_future(recv(dealer))\r\n\r\n    count = 0\r\n    while True:\r\n        dealer.send(str(count).encode())\r\n        await asyncio.sleep(0.001)\r\n        count += 1\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(run())\r\n```\r\n\r\nI'm using:\r\n\r\nPython 3.6.0\r\nlibzmq 4.2.5\r\npyzmq 17.1.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1202", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1202/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1202/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1202/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1202", "id": 344186660, "node_id": "MDU6SXNzdWUzNDQxODY2NjA=", "number": 1202, "title": "test_buffer_numpy sometimes hangs", "user": {"login": "jdemeyer", "id": 3625785, "node_id": "MDQ6VXNlcjM2MjU3ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdemeyer", "html_url": "https://github.com/jdemeyer", "followers_url": "https://api.github.com/users/jdemeyer/followers", "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}", "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions", "organizations_url": "https://api.github.com/users/jdemeyer/orgs", "repos_url": "https://api.github.com/users/jdemeyer/repos", "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}", "received_events_url": "https://api.github.com/users/jdemeyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-24T20:13:57Z", "updated_at": "2018-08-20T18:19:57Z", "closed_at": "2018-08-20T18:19:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I don't have more information for now but I noticed that sometimes the following tests just hangs\r\n```\r\nzmq/tests/test_message.py::TestFrame::test_buffer_numpy\r\n```\r\nThis happens say 1 in 20 times that I run the testsuite. By pressing CTRL-C, I found out that it seems stuck here:\r\n```\r\n                while numpy.isnan(A).any():\r\n                    # don't let nan sneak in\r\n                    A = numpy.ndarray(shape, dtype=dt)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1199", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1199/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1199/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1199/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1199", "id": 343808594, "node_id": "MDU6SXNzdWUzNDM4MDg1OTQ=", "number": 1199, "title": "test_large_send overflows nbytes()", "user": {"login": "jdemeyer", "id": 3625785, "node_id": "MDQ6VXNlcjM2MjU3ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdemeyer", "html_url": "https://github.com/jdemeyer", "followers_url": "https://api.github.com/users/jdemeyer/followers", "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}", "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions", "organizations_url": "https://api.github.com/users/jdemeyer/orgs", "repos_url": "https://api.github.com/users/jdemeyer/repos", "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}", "received_events_url": "https://api.github.com/users/jdemeyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-23T21:49:48Z", "updated_at": "2018-08-20T18:22:38Z", "closed_at": "2018-08-20T18:22:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When running the `pyzmq` testsuite, this seems to hang:\r\n```\r\nzmq/tests/test_socket.py::TestSocket::test_identity PASSED                                                                                                       [ 88%]\r\nzmq/tests/test_socket.py::TestSocket::test_int_sockopts PASSED                                                                                                   [ 88%]\r\nzmq/tests/test_socket.py::TestSocket::test_ipc_path_max_length PASSED                                                                                            [ 89%]\r\nzmq/tests/test_socket.py::TestSocket::test_ipc_path_max_length_msg PASSED                                                                                        [ 89%]\r\nzmq/tests/test_socket.py::TestSocket::test_large_send\r\n```\r\n\r\nAfter some investigation, I found out that an overflow happens in `nbytes`.\r\n\r\nAfter applying the following patch\r\n```diff\r\ndiff --git a/zmq/backend/cython/socket.pyx b/zmq/backend/cython/socket.pyx\r\nindex e46ff1b..de5f078 100644\r\n--- a/zmq/backend/cython/socket.pyx\r\n+++ b/zmq/backend/cython/socket.pyx\r\n@@ -116,7 +116,7 @@ IPC_PATH_MAX_LEN = get_ipc_path_max_len()\r\n # inline some small socket submethods:\r\n # true methods frequently cannot be inlined, acc. Cython docs\r\n \r\n-cdef inline int nbytes(buf):\r\n+cdef inline int nbytes(buf) except -1:\r\n     \"\"\"get n bytes\"\"\"\r\n     if PY_VERSION_HEX >= 0x03030000:\r\n         return buf.nbytes\r\n```\r\nthe testsuite instead fails with\r\n```\r\n=============================================================================== FAILURES ===============================================================================\r\n______________________________________________________________________ TestSocket.test_large_send ______________________________________________________________________\r\n\r\nself = <zmq.tests.test_socket.TestSocket testMethod=test_large_send>\r\n\r\n    @mark.skipif(\r\n        (\r\n            pypy and on_travis\r\n        ) or (\r\n            sys.maxsize < 2**32\r\n        ) or (\r\n            windows\r\n        ),\r\n        reason=\"only run on 64b and not on Travis.\"\r\n    )\r\n    def test_large_send(self):\r\n        try:\r\n            buf = os.urandom(1) * (2**31 + 1)\r\n        except MemoryError:\r\n            raise SkipTest()\r\n        a, b = self.create_bound_pair()\r\n>       a.send(buf, copy=False)\r\n\r\nzmq/tests/test_socket.py:497: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nzmq/sugar/socket.py:392: in send\r\n    return super(Socket, self).send(data, flags=flags, copy=copy, track=track)\r\nzmq/backend/cython/socket.pyx:729: in zmq.backend.cython.socket.Socket.send\r\n    cpdef send(self, object data, int flags=0, copy=True, track=False):\r\nzmq/backend/cython/socket.pyx:786: in zmq.backend.cython.socket.Socket.send\r\n    if nbytes(buf) < self.copy_threshold:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   n *= buf.shape[i]\r\nE   OverflowError: value too large to convert to int\r\n\r\nzmq/backend/cython/socket.pyx:128: OverflowError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1198", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1198/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1198/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1198/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1198", "id": 343754442, "node_id": "MDU6SXNzdWUzNDM3NTQ0NDI=", "number": 1198, "title": "Testsuite hangs", "user": {"login": "jdemeyer", "id": 3625785, "node_id": "MDQ6VXNlcjM2MjU3ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdemeyer", "html_url": "https://github.com/jdemeyer", "followers_url": "https://api.github.com/users/jdemeyer/followers", "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}", "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions", "organizations_url": "https://api.github.com/users/jdemeyer/orgs", "repos_url": "https://api.github.com/users/jdemeyer/repos", "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}", "received_events_url": "https://api.github.com/users/jdemeyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-23T18:57:52Z", "updated_at": "2018-07-23T19:29:50Z", "closed_at": "2018-07-23T19:29:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When running the `pyzmq` testsuite using `python setup.py test`, I get\r\n```\r\nrunning test\r\nTesting pyzmq-17.1.0 with libzmq-4.2.5\r\n========================================================================= test session starts ==========================================================================\r\nplatform linux2 -- Python 2.7.15, pytest-3.6.3, py-1.5.4, pluggy-0.6.0 -- /usr/local/src/sage-config/local/bin/python\r\ncachedir: .pytest_cache\r\nrootdir: /tmp/pyzmq, inifile:\r\ncollected 242 items                                                                                                                                                    \r\n\r\nzmq/tests/test_auth.py::TestThreadAuthentication::test_blacklist\r\n```\r\nand then it just hangs forever. Even sending `SIGINT` to interrupt doesn't work. When running this under `strace`, I can see that it's calling `sleep(1)` forever without doing anything else.\r\n\r\nI don't know what is causing this, it might very well be a problem with `pytest`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1197", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1197/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1197/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1197/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1197", "id": 343380495, "node_id": "MDU6SXNzdWUzNDMzODA0OTU=", "number": 1197, "title": "ZMQ_HEARTBEAT_TIMEOUT option is invalid", "user": {"login": "youyoujushi", "id": 14856239, "node_id": "MDQ6VXNlcjE0ODU2MjM5", "avatar_url": "https://avatars3.githubusercontent.com/u/14856239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/youyoujushi", "html_url": "https://github.com/youyoujushi", "followers_url": "https://api.github.com/users/youyoujushi/followers", "following_url": "https://api.github.com/users/youyoujushi/following{/other_user}", "gists_url": "https://api.github.com/users/youyoujushi/gists{/gist_id}", "starred_url": "https://api.github.com/users/youyoujushi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/youyoujushi/subscriptions", "organizations_url": "https://api.github.com/users/youyoujushi/orgs", "repos_url": "https://api.github.com/users/youyoujushi/repos", "events_url": "https://api.github.com/users/youyoujushi/events{/privacy}", "received_events_url": "https://api.github.com/users/youyoujushi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-22T06:10:52Z", "updated_at": "2018-07-22T06:14:58Z", "closed_at": "2018-07-22T06:14:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "My zeromq version is 4.2.5, and my code compile success. I set ZMQ_HEARTBEAT_IVL with 2 seconds, set ZMQ_HEARTBEAT_TIMEOUT with 5 seconds. I send one request per second, but only after send two request, the send operate is blocked.If I set ZMQ_HEARTBEAT_IVL with 3 seconds, the send operate is blocked after send 3 request. It seems ZMQ_HEARTBEAT_IVL influence the timeout. And every send request,I received a response. I don't know why ,can you help me?\r\nThis is my client code.\r\n\r\n#include <zmq.hpp>\r\n#include <string>\r\n#include <iostream>\r\nint main ()\r\n{\r\n    //  Prepare our context and socket\r\n    zmq::context_t context (1);\r\n    zmq::socket_t socket (context, ZMQ_REQ);\r\n\r\n    int num = 2000;\r\n    size_t len = 4;\r\n    socket.setsockopt(ZMQ_HEARTBEAT_IVL,&num,len);\r\n    \r\n    num = 5000;\r\n    socket.setsockopt(ZMQ_HEARTBEAT_TIMEOUT,&num,len);\r\n\r\n    std::cout << \"Connecting to hello world server...\" << std::endl;\r\n    socket.connect (\"tcp://localhost:5555\");\r\n\r\n    //  Do 10 requests, waiting each time for a response\r\n    for (int request_nbr = 0; request_nbr != 10; request_nbr++) {\r\n        zmq::message_t request (5);\r\n        memcpy (request.data (), \"Hello\", 5);\r\n        std::cout << \"Sending Hello \" << request_nbr << \"...\" << std::endl;\r\n        socket.send (request);\r\n\r\n        //  Get the reply.\r\n        zmq::message_t reply;\r\n        socket.recv (&reply);\r\n        std::cout << \"Received World \" << request_nbr << std::endl;\r\n    }\r\n    return 0;\r\n}\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1195", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1195/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1195/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1195/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1195", "id": 340864716, "node_id": "MDU6SXNzdWUzNDA4NjQ3MTY=", "number": 1195, "title": "Missing binary wheels for Python 3.7 on windows", "user": {"login": "nonZero", "id": 66484, "node_id": "MDQ6VXNlcjY2NDg0", "avatar_url": "https://avatars1.githubusercontent.com/u/66484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nonZero", "html_url": "https://github.com/nonZero", "followers_url": "https://api.github.com/users/nonZero/followers", "following_url": "https://api.github.com/users/nonZero/following{/other_user}", "gists_url": "https://api.github.com/users/nonZero/gists{/gist_id}", "starred_url": "https://api.github.com/users/nonZero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nonZero/subscriptions", "organizations_url": "https://api.github.com/users/nonZero/orgs", "repos_url": "https://api.github.com/users/nonZero/repos", "events_url": "https://api.github.com/users/nonZero/events{/privacy}", "received_events_url": "https://api.github.com/users/nonZero/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-07-13T03:02:31Z", "updated_at": "2018-07-13T16:19:12Z", "closed_at": "2018-07-13T16:19:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\nPython 3.7 was released!\r\n\r\nPlease upload to pypi the new binary wheels for windows.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1194", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1194/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1194/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1194/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1194", "id": 340831992, "node_id": "MDU6SXNzdWUzNDA4MzE5OTI=", "number": 1194, "title": "pyzmq dealer not sending to the addressed worker", "user": {"login": "kefa8", "id": 11657948, "node_id": "MDQ6VXNlcjExNjU3OTQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/11657948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kefa8", "html_url": "https://github.com/kefa8", "followers_url": "https://api.github.com/users/kefa8/followers", "following_url": "https://api.github.com/users/kefa8/following{/other_user}", "gists_url": "https://api.github.com/users/kefa8/gists{/gist_id}", "starred_url": "https://api.github.com/users/kefa8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kefa8/subscriptions", "organizations_url": "https://api.github.com/users/kefa8/orgs", "repos_url": "https://api.github.com/users/kefa8/repos", "events_url": "https://api.github.com/users/kefa8/events{/privacy}", "received_events_url": "https://api.github.com/users/kefa8/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-12T23:28:32Z", "updated_at": "2018-07-16T00:11:01Z", "closed_at": "2018-07-16T00:11:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having trouble trying to get a DEALER in pyzmq to send a message to my target worker thread. I've read the documentation and am pretty sure I have followed the example correctly. \r\n\r\nIn my code I have a ROUTER/DEALER setup. What I'm trying to achieve is to have multiple clients connect to the ROUTER and have them send requests that will go to a free worker thread and then have the worker thread reply once it finishes its task. I don't want a long running task to hold up other clients who might have a task that is quick to return.\r\n\r\nIn my code I'm addressing messages to free workers but the message ends up going to a busy worker.\r\n\r\nThis is running on Python 3.5.3, pyzmq 16.0.4 and Windows 10.\r\n\r\n        # code to setup ROUTER/DEALER protocol\r\n\r\n        self._frontend = self._context.socket(zmq.ROUTER)\r\n        self._frontend.bind(self._url)\r\n\r\n        url_worker = \"inproc://workers\"\r\n        self._backend = self._context.socket(zmq.DEALER)\r\n        self._backend.bind(url_worker)\r\n\r\n        for i in range(self._worker_threads):\r\n            id = 'w%d' % i\r\n            thread = threading.Thread(target=self.handle_request, args=(url_worker, self._context, id))\r\n            thread.start()\r\n\r\n        self.load_balance_requests([w.encode('ascii') for w in self._workers_ready])\r\n\r\n\r\n    # handles request for workers\r\n    def handle_request(self, url_worker, context, id):\r\n\r\n        self._logger.info('Connect to %s %s' % (url_worker, id))\r\n\r\n        socket = context.socket(zmq.REP)\r\n        # used to identify worker\r\n        socket.identity = id.encode('ascii')\r\n        socket.connect(url_worker)\r\n        with self._workers_lock:\r\n            self._workers_ready.append(id)\r\n\r\n        while True:\r\n            try:\r\n                #  Wait for next request from client\r\n                self._logger.info('Wait for message')\r\n                address, empty, zmsg = socket.recv_multipart()\r\n                self._logger.info('Request received')\r\n\r\n    def load_balance_requests(self, workers):\r\n        poller = zmq.Poller()\r\n        poller.register(self._backend, zmq.POLLIN)\r\n        poller.register(self._frontend, zmq.POLLIN)\r\n\r\n        while True:\r\n            sockets = dict(poller.poll())\r\n\r\n            if self._backend in sockets:\r\n                # Handle worker activity on the backend\r\n                request = self._backend.recv_multipart()\r\n                worker, empty, client = request[:3]\r\n                if not workers:\r\n                    # Poll for clients now that a worker is available\r\n                    poller.register(self._frontend, zmq.POLLIN)\r\n                workers.append(worker)\r\n                empty, reply = request[3:]\r\n                self._logger.info('Sending to %s from %s' % (str(client), str(worker)))\r\n                self._frontend.send_multipart([client, b\"\", reply])\r\n\r\n            if self._frontend in sockets:\r\n                # Get next client request, route to last-used worker\r\n                client, empty, request = self._frontend.recv_multipart()\r\n                worker = workers.pop(0)\r\n                self._logger.info('Sending to %s from %s' % (str(worker), str(client)))\r\n                self._backend.send_multipart([worker, b\"\", client, b\"\", request])\r\n                if not workers:\r\n                    # Don't poll clients if no workers are available\r\n                    poller.unregister(self._frontend)\r\n\r\n        # Clean up\r\n        self._backend.close()\r\n        self._frontend.close()\r\n        self._context.term()    \r\n\r\nThis is my log output. I have worker w0 on thread 31448, worker w1 on thread 14180 and worker w2 on thread 30932. The request sent to w0 is a long running task. The next 2 requests go to w1 and w2. So far so good. But then another request comes in that is sent to w1. However the request blocks and eventually shows up on thread 31448 which was worker w0. It eventually goes through but only after the first w0 task was finished.\r\n\r\nNot sure what I'm doing wrong here.\r\n\r\n\t2018-07-11 11:24:25,747 - myprogram INFO 31964 31448 - Connect to inproc://workers w0\r\n\t2018-07-11 11:24:25,747 - myprogram INFO 31964 14180 - Connect to inproc://workers w1\r\n\t2018-07-11 11:24:25,759 - myprogram INFO 31964 30932 - Connect to inproc://workers w2\r\n\t2018-07-11 11:25:08,156 - myprogram INFO 31964 2036 - Sending to b'w0' from b'\\x00\\x80\\x00\\x00)'\r\n\t2018-07-11 11:25:08,156 - myprogram INFO 31964 31448 - Request received\r\n\t2018-07-11 11:25:12,801 - myprogram INFO 31964 2036 - Sending to b'w1' from b'\\x00\\x80\\x00\\x00*'\r\n\t2018-07-11 11:25:12,801 - myprogram INFO 31964 14180 - Request to received\r\n\t2018-07-11 11:25:13,635 - myprogram INFO 31964 2036 - Sending to b'\\x00\\x80\\x00\\x00*' from b'w1'\r\n\t2018-07-11 11:25:15,346 - myprogram INFO 31964 2036 - Sending to b'w2' from b'\\x00\\x80\\x00\\x00+'\r\n\t2018-07-11 11:25:15,351 - myprogram INFO 31964 30932 - Request received\r\n\t2018-07-11 11:25:20,239 - myprogram INFO 31964 2036 - Sending to b'\\x00\\x80\\x00\\x00+' from b'w2'\r\n\t2018-07-11 11:25:20,542 - myprogram INFO 31964 2036 - Sending to b'w1' from b'\\x00\\x80\\x00\\x00,'\r\n\t2018-07-11 11:27:05,911 - myprogram INFO 31964 2036 - Sending to b'\\x00\\x80\\x00\\x00)' from b'w0'\r\n\t2018-07-11 11:27:05,912 - myprogram INFO 31964 31448 - Request received\r\n\t2018-07-11 11:27:06,468 - myprogram INFO 31964 2036 - Sending to b'\\x00\\x80\\x00\\x00,' from b'w1'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1191", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1191/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1191/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1191/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1191", "id": 339784454, "node_id": "MDU6SXNzdWUzMzk3ODQ0NTQ=", "number": 1191, "title": "pycharm Cannot find reference 'SUB' in '__init__.py", "user": {"login": "Xiang929", "id": 22191245, "node_id": "MDQ6VXNlcjIyMTkxMjQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/22191245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiang929", "html_url": "https://github.com/Xiang929", "followers_url": "https://api.github.com/users/Xiang929/followers", "following_url": "https://api.github.com/users/Xiang929/following{/other_user}", "gists_url": "https://api.github.com/users/Xiang929/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiang929/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiang929/subscriptions", "organizations_url": "https://api.github.com/users/Xiang929/orgs", "repos_url": "https://api.github.com/users/Xiang929/repos", "events_url": "https://api.github.com/users/Xiang929/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiang929/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-10T10:30:35Z", "updated_at": "2018-08-20T14:43:04Z", "closed_at": "2018-08-20T14:43:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Such as the title\uff0c All socket_types are not available, others are not automatically completed.\r\npycharm version: 2018.1.4\r\nsystem: Window10\r\npyzmq version: 17.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1190", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1190/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1190/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1190/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1190", "id": 339535592, "node_id": "MDU6SXNzdWUzMzk1MzU1OTI=", "number": 1190, "title": "`PerodicCallback` class signature changed in tornado", "user": {"login": "benhoff", "id": 11341463, "node_id": "MDQ6VXNlcjExMzQxNDYz", "avatar_url": "https://avatars0.githubusercontent.com/u/11341463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benhoff", "html_url": "https://github.com/benhoff", "followers_url": "https://api.github.com/users/benhoff/followers", "following_url": "https://api.github.com/users/benhoff/following{/other_user}", "gists_url": "https://api.github.com/users/benhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/benhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benhoff/subscriptions", "organizations_url": "https://api.github.com/users/benhoff/orgs", "repos_url": "https://api.github.com/users/benhoff/repos", "events_url": "https://api.github.com/users/benhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/benhoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-09T17:13:22Z", "updated_at": "2018-07-12T10:00:17Z", "closed_at": "2018-07-12T10:00:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tornado has removed the `io_loop` argument in version 5.0 and replaced it with `jitter`\r\n\r\n    versionchanged:: 5.0\r\n       The ``io_loop`` argument (deprecated since version 4.1) has been removed.\r\n    versionchanged:: 5.1\r\n       The ``jitter`` argument is added.\r\n\r\nSee [this link](https://github.com/tornadoweb/tornado/blob/master/tornado/ioloop.py#L1166).\r\n\r\nIs there a workaround for this? Currently just deleting the old `io_loop` argument throws and error\r\n\r\n`RuntimeError: There is no current event loop in thread 'Thread-1'`\r\n\r\nProbably [this](https://github.com/tornadoweb/tornado/issues/2308) which came from [here](https://github.com/tornadoweb/tornado/issues/2352)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1188", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1188/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1188/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1188/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1188", "id": 338938366, "node_id": "MDU6SXNzdWUzMzg5MzgzNjY=", "number": 1188, "title": "How can I install package pyzmq on windows", "user": {"login": "Rainiwinkler", "id": 26918238, "node_id": "MDQ6VXNlcjI2OTE4MjM4", "avatar_url": "https://avatars2.githubusercontent.com/u/26918238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rainiwinkler", "html_url": "https://github.com/Rainiwinkler", "followers_url": "https://api.github.com/users/Rainiwinkler/followers", "following_url": "https://api.github.com/users/Rainiwinkler/following{/other_user}", "gists_url": "https://api.github.com/users/Rainiwinkler/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rainiwinkler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rainiwinkler/subscriptions", "organizations_url": "https://api.github.com/users/Rainiwinkler/orgs", "repos_url": "https://api.github.com/users/Rainiwinkler/repos", "events_url": "https://api.github.com/users/Rainiwinkler/events{/privacy}", "received_events_url": "https://api.github.com/users/Rainiwinkler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-06T13:25:02Z", "updated_at": "2018-08-03T14:03:09Z", "closed_at": "2018-08-03T14:03:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I tried to install pyzmq package in python, I always get this error message\r\n\r\nPS C:\\python37-32> pip install pyzmq\r\nFailed building wheel for pyzmq\r\nbuilding 'zmq.libzmq' extension\r\nerror: Microsoft Visual C++ 14.0 is required. Get it with \"Microsoft Visual C++ Build Tools\": http://landinghub.visu\r\nSo I tried to fix it in two different ways: Option 1: I downloaded Microsoft Visual C++ 14.00 --> It doesn't work I downloaded the wheel \"pyzmq-17.0.0-cp37-cp37m-win_amd64.whl\" and tried to install it with the pip install comannd --> It doesn't work. And i also updated my setuptools.\r\n\r\nDoes anyone can give me an advice how I can install the package? That would be great. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1187", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1187/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1187/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1187/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1187", "id": 338544539, "node_id": "MDU6SXNzdWUzMzg1NDQ1Mzk=", "number": 1187, "title": "import deadlock in pyzmq if used in another thread", "user": {"login": "confiq", "id": 277770, "node_id": "MDQ6VXNlcjI3Nzc3MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/277770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/confiq", "html_url": "https://github.com/confiq", "followers_url": "https://api.github.com/users/confiq/followers", "following_url": "https://api.github.com/users/confiq/following{/other_user}", "gists_url": "https://api.github.com/users/confiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/confiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/confiq/subscriptions", "organizations_url": "https://api.github.com/users/confiq/orgs", "repos_url": "https://api.github.com/users/confiq/repos", "events_url": "https://api.github.com/users/confiq/events{/privacy}", "received_events_url": "https://api.github.com/users/confiq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-05T11:59:18Z", "updated_at": "2018-07-11T14:53:02Z", "closed_at": "2018-07-11T14:53:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If we have the following code\r\nfile1.py:\r\n```python\r\nimport zmq\r\nfrom threading import Thread\r\ncontext = zmq.Context.instance()\r\nsocket = context.socket(zmq.PUB)\r\nsocket.connect('tcp://localhost:12345')\r\n#socket.send_json('{uncomment_and_work:True}')\r\nclass importLock(Thread):\r\n    def run(self):\r\n        socket.send_json('{}')\r\n\r\na = importLock()\r\na.start()\r\n```\r\nand run it from file2.py\r\n\r\n`import file1`\r\nThis will cause the deadlock in python. If we uncommon `send_json` before spawning new thread it will not cause deadlock. \r\n\r\nThis is because of PR #721  and this [commit](https://github.com/zeromq/pyzmq/pull/721/files#diff-f838118f708bb4dea24b82532d851df1R451) that we import inside the function. \r\nImporting in function is bad practice and not [PEP8 ](https://www.python.org/dev/peps/pep-0008/#imports), this change can cause the deadlocks to clients and my suggestion is to remove it. \r\n\r\nI don't mind to open a new PR that will revert the change, but before that, I wanted to consult here and hear your opinion on the matter.\r\n\r\nCheers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1182", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1182/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1182/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1182/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1182", "id": 330637295, "node_id": "MDU6SXNzdWUzMzA2MzcyOTU=", "number": 1182, "title": "testing creating an issue from the hub cli", "user": {"login": "minrk", "id": 151929, "node_id": "MDQ6VXNlcjE1MTkyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/151929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/minrk", "html_url": "https://github.com/minrk", "followers_url": "https://api.github.com/users/minrk/followers", "following_url": "https://api.github.com/users/minrk/following{/other_user}", "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/minrk/subscriptions", "organizations_url": "https://api.github.com/users/minrk/orgs", "repos_url": "https://api.github.com/users/minrk/repos", "events_url": "https://api.github.com/users/minrk/events{/privacy}", "received_events_url": "https://api.github.com/users/minrk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-08T12:23:52Z", "updated_at": "2018-06-08T12:24:08Z", "closed_at": "2018-06-08T12:24:08Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "maybe this is how it works\n?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1181", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1181/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1181/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1181/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1181", "id": 330194807, "node_id": "MDU6SXNzdWUzMzAxOTQ4MDc=", "number": 1181, "title": "MemoryError/ZMQError in TestSocket.test_large_send, TestSocketGreen.test_large_send", "user": {"login": "mgorny", "id": 110765, "node_id": "MDQ6VXNlcjExMDc2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/110765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgorny", "html_url": "https://github.com/mgorny", "followers_url": "https://api.github.com/users/mgorny/followers", "following_url": "https://api.github.com/users/mgorny/following{/other_user}", "gists_url": "https://api.github.com/users/mgorny/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgorny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgorny/subscriptions", "organizations_url": "https://api.github.com/users/mgorny/orgs", "repos_url": "https://api.github.com/users/mgorny/repos", "events_url": "https://api.github.com/users/mgorny/events{/privacy}", "received_events_url": "https://api.github.com/users/mgorny/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-07T09:41:38Z", "updated_at": "2018-08-20T18:20:35Z", "closed_at": "2018-08-20T18:20:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems that the test accounts for possible OOM conditions early on but doesn't account for running OOM after allocating the initial buffer.\r\n\r\n```\r\n==================================================================== FAILURES =====================================================================\r\n___________________________________________________________ TestSocket.test_large_send ____________________________________________________________\r\n\r\nself = <zmq.tests.test_socket.TestSocket testMethod=test_large_send>\r\n\r\n    @mark.skipif(\r\n        (\r\n            pypy and on_travis\r\n        ) or (\r\n            sys.maxsize < 2**32\r\n        ) or (\r\n            windows\r\n        ),\r\n        reason=\"only run on 64b and not on Travis.\"\r\n    )\r\n    def test_large_send(self):\r\n        try:\r\n            buf = os.urandom(1) * (2**31 + 1)\r\n        except MemoryError:\r\n            raise SkipTest()\r\n        a, b = self.create_bound_pair()\r\n        a.send(buf, copy=False)\r\n>       rcvd = b.recv()\r\n\r\n../pyzmq-17.0.0-python2_7/lib/zmq/tests/test_socket.py:498: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nzmq/backend/cython/socket.pyx:790: in zmq.backend.cython.socket.Socket.recv\r\n    cpdef recv(self, int flags=0, copy=True, track=False):\r\nzmq/backend/cython/socket.pyx:826: in zmq.backend.cython.socket.Socket.recv\r\n    return _recv_copy(self.handle, flags)\r\nzmq/backend/cython/socket.pyx:197: in zmq.backend.cython.socket._recv_copy\r\n    msg_bytes = copy_zmq_msg_bytes(&zmq_msg)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n>   return PyBytes_FromStringAndSize(data_c, data_len_c)\r\nE   MemoryError\r\n\r\nzmq/backend/cython/message.pxd:61: MemoryError\r\n-------------------------------------------------------------- Captured stderr call ---------------------------------------------------------------\r\nOverflowError: value too large to convert to int\r\nException OverflowError: 'value too large to convert to int' in 'zmq.backend.cython.socket.nbytes' ignored\r\n_________________________________________________________ TestSocketGreen.test_large_send _________________________________________________________\r\n\r\nself = <zmq.tests.test_socket.TestSocketGreen testMethod=test_large_send>\r\n\r\n    @mark.skipif(\r\n        (\r\n            pypy and on_travis\r\n        ) or (\r\n            sys.maxsize < 2**32\r\n        ) or (\r\n            windows\r\n        ),\r\n        reason=\"only run on 64b and not on Travis.\"\r\n    )\r\n    def test_large_send(self):\r\n        try:\r\n            buf = os.urandom(1) * (2**31 + 1)\r\n        except MemoryError:\r\n            raise SkipTest()\r\n        a, b = self.create_bound_pair()\r\n>       a.send(buf, copy=False)\r\n\r\n../pyzmq-17.0.0-python2_7/lib/zmq/tests/test_socket.py:497: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../pyzmq-17.0.0-python2_7/lib/zmq/green/core.py:203: in send\r\n    msg = super(_Socket, self).send(data, flags, copy, track)\r\n../pyzmq-17.0.0-python2_7/lib/zmq/sugar/socket.py:391: in send\r\n    return super(Socket, self).send(data, flags=flags, copy=copy, track=track)\r\nzmq/backend/cython/socket.pyx:727: in zmq.backend.cython.socket.Socket.send\r\n    cpdef send(self, object data, int flags=0, copy=True, track=False):\r\nzmq/backend/cython/socket.pyx:785: in zmq.backend.cython.socket.Socket.send\r\n    _send_copy(self.handle, buf, flags)\r\nzmq/backend/cython/socket.pyx:237: in zmq.backend.cython.socket._send_copy\r\n    _check_rc(rc)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n>   raise ZMQError(errno)\r\nE   ZMQError: Cannot allocate memory\r\n\r\nzmq/backend/cython/checkrc.pxd:25: ZMQError\r\n-------------------------------------------------------------- Captured stderr call ---------------------------------------------------------------\r\nOverflowError: value too large to convert to int\r\nException OverflowError: 'value too large to convert to int' in 'zmq.backend.cython.socket.nbytes' ignored\r\n=============================================== 2 failed, 286 passed, 11 skipped in 183.35 seconds ===============================================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1179", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1179/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1179/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1179/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1179", "id": 328029862, "node_id": "MDU6SXNzdWUzMjgwMjk4NjI=", "number": 1179, "title": "SUB socket filter with reverse logic?", "user": {"login": "devxpy", "id": 19492893, "node_id": "MDQ6VXNlcjE5NDkyODkz", "avatar_url": "https://avatars1.githubusercontent.com/u/19492893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devxpy", "html_url": "https://github.com/devxpy", "followers_url": "https://api.github.com/users/devxpy/followers", "following_url": "https://api.github.com/users/devxpy/following{/other_user}", "gists_url": "https://api.github.com/users/devxpy/gists{/gist_id}", "starred_url": "https://api.github.com/users/devxpy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devxpy/subscriptions", "organizations_url": "https://api.github.com/users/devxpy/orgs", "repos_url": "https://api.github.com/users/devxpy/repos", "events_url": "https://api.github.com/users/devxpy/events{/privacy}", "received_events_url": "https://api.github.com/users/devxpy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-05-31T07:48:07Z", "updated_at": "2018-09-24T14:09:44Z", "closed_at": "2018-08-22T13:09:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I know we can filter out the messages containing a keyword at the start of message, using -\r\n\r\n`zmq.setsocketopt(zmq.SUBSCRIBE,  <keyword>)`\r\n\r\nBut how do I use this in reverse logic i.e., how do I __exclude__ all messages containing that keyword?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1177", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1177/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1177/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1177/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1177", "id": 325290726, "node_id": "MDU6SXNzdWUzMjUyOTA3MjY=", "number": 1177, "title": "socket STREAM with tornado was blocked under pyzmq17/tornado5", "user": {"login": "honglei", "id": 1011330, "node_id": "MDQ6VXNlcjEwMTEzMzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1011330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honglei", "html_url": "https://github.com/honglei", "followers_url": "https://api.github.com/users/honglei/followers", "following_url": "https://api.github.com/users/honglei/following{/other_user}", "gists_url": "https://api.github.com/users/honglei/gists{/gist_id}", "starred_url": "https://api.github.com/users/honglei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honglei/subscriptions", "organizations_url": "https://api.github.com/users/honglei/orgs", "repos_url": "https://api.github.com/users/honglei/repos", "events_url": "https://api.github.com/users/honglei/events{/privacy}", "received_events_url": "https://api.github.com/users/honglei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-05-22T13:20:22Z", "updated_at": "2018-05-25T15:08:38Z", "closed_at": "2018-05-23T12:46:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Environment: \r\n    Win10 x64/python3.6.5 \r\n    CentOS7 x64/python3.6.5\r\nthe following codes works under pyzmq16.0.4/libzmq4.1.6/Tornado4.5.3\r\nbut blocked under pyzmq17.0.0/libzmq4.1.6/Tornado5.0.2\r\n\r\n## server.py\r\n```python\r\nimport traceback\r\nimport zmq\r\nfrom zmq.asyncio import install\r\ninstall()\r\nimport tornado\r\nfrom tornado import gen\r\nif tornado.version_info[0]<5:\r\n    from tornado.platform.asyncio import AsyncIOMainLoop\r\n    AsyncIOMainLoop().install() \r\nfrom tornado.ioloop import IOLoop\r\nloop = IOLoop.instance()\r\n\r\nBIND_URL= 'tcp://127.0.0.1:21567'\r\n\r\nfrom zmq.asyncio import Context\r\nctx = Context.instance()\r\nsock = ctx.socket(zmq.STREAM) \r\nsock.bind( BIND_URL )\r\n\r\n@gen.coroutine \r\ndef recv_handler(sock, events):\r\n    client_id, message = yield sock.recv_multipart()\r\n    print( \"id:%r, request_len:%d\" %( client_id, len(message)) )\r\n    if message: \r\n        try:\r\n            yield sock.send_multipart([client_id, message] )\r\n        except zmq.ZMQError as e:\r\n            print ( traceback.format_exc() )\r\n            return\r\n        except KeyboardInterrupt as e:\r\n            return          \r\n    \r\nloop.add_handler(sock, recv_handler, zmq.POLLIN) \r\nloop.start()  \r\n```\r\n## client.py\r\n```python\r\nimport selectors\r\nimport socket\r\nimport traceback\r\nimport struct\r\ndef add_header(byte_data):\r\n    msg =  b\"\\xff\" + struct.pack(\"<H\", len(byte_data))  + byte_data      \r\n    return msg\r\n\r\nsel = selectors.DefaultSelector()\r\nADDR =('localhost', 21567)\r\ntcpCliSock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\ntcpCliSock.connect(ADDR)\r\n\r\nimport random\r\ndef io(conn, mask):\r\n    try:\r\n        if mask & selectors.EVENT_READ:\r\n            buffer = conn.recv(8192)\r\n            print ( buffer ) \r\n            \r\n        if  mask & selectors.EVENT_WRITE:\r\n            msg = b\"\"\r\n            for index in range(5): \r\n                repeat_times = random.randint(1,1000) #\r\n                body = str(index).encode(\"utf-8\")* repeat_times\r\n                #print (f\"{index},{repeat_times}\")\r\n                msg += add_header( body)              \r\n            conn.send(msg)\r\n            \r\n    except Exception as e:\r\n        print (traceback.format_exc() )\r\n        print('closing', conn)\r\n        sel.unregister(conn)\r\n        conn.close()        \r\n\r\nsel.register(tcpCliSock, selectors.EVENT_READ|selectors.EVENT_WRITE, io)\r\n\r\nimport time\r\nwhile True:\r\n    #time.sleep(1)\r\n    if 0 == len(sel.get_map()) :\r\n        break\r\n    events = sel.select(timeout=2) #seconds\r\n    for key, mask in events:\r\n        callback = key.data\r\n        callback(key.fileobj, mask)\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1174", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1174/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1174/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1174/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1174", "id": 319060131, "node_id": "MDU6SXNzdWUzMTkwNjAxMzE=", "number": 1174, "title": "CFFI backend bug?", "user": {"login": "mingwandroid", "id": 1042804, "node_id": "MDQ6VXNlcjEwNDI4MDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1042804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mingwandroid", "html_url": "https://github.com/mingwandroid", "followers_url": "https://api.github.com/users/mingwandroid/followers", "following_url": "https://api.github.com/users/mingwandroid/following{/other_user}", "gists_url": "https://api.github.com/users/mingwandroid/gists{/gist_id}", "starred_url": "https://api.github.com/users/mingwandroid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mingwandroid/subscriptions", "organizations_url": "https://api.github.com/users/mingwandroid/orgs", "repos_url": "https://api.github.com/users/mingwandroid/repos", "events_url": "https://api.github.com/users/mingwandroid/events{/privacy}", "received_events_url": "https://api.github.com/users/mingwandroid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-30T22:40:32Z", "updated_at": "2018-05-02T23:27:09Z", "closed_at": "2018-05-02T23:23:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to enable support for testing the CFFI backend over at `Anaconda Distribution`. Testing with:\r\n\r\n`PYZMQ_BACKEND=cffi py.test --pyargs zmq.tests.test_socket`\r\n\r\n.. fails with:\r\n\r\n```\r\n=================================================================================================================================== FAILURES ===================================================================================================================================\r\n___________________________________________________________________________________________________________________________ TestSocket.test_tracker ____________________________________________________________________________________________________________________________\r\n\r\nself = <zmq.tests.test_socket.TestSocket testMethod=test_tracker>\r\n\r\n    @skip_pypy\r\n    def test_tracker(self):\r\n        \"test the MessageTracker object for tracking when zmq is done with a buffer\"\r\n        addr = 'tcp://127.0.0.1'\r\n        # get a port:\r\n        sock = socket.socket()\r\n        sock.bind(('127.0.0.1', 0))\r\n        port = sock.getsockname()[1]\r\n        iface = \"%s:%i\" % (addr, port)\r\n        sock.close()\r\n        time.sleep(0.1)\r\n\r\n        a = self.context.socket(zmq.PUSH)\r\n        b = self.context.socket(zmq.PULL)\r\n        self.sockets.extend([a,b])\r\n        a.connect(iface)\r\n        time.sleep(0.1)\r\n        p1 = a.send(b'something', copy=False, track=True)\r\n        assert isinstance(p1, zmq.MessageTracker)\r\n>       assert p1 is zmq._FINISHED_TRACKER\r\nE       AssertionError: assert <zmq.sugar.tracker.MessageTracker object at 0x110e80630> is <zmq.sugar.tracker.MessageTracker object at 0x110def048>\r\nE        +  where <zmq.sugar.tracker.MessageTracker object at 0x110def048> = zmq._FINISHED_TRACKER\r\n```\r\n\r\nI tested this on macOS.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1172", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1172/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1172/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1172/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1172", "id": 318454811, "node_id": "MDU6SXNzdWUzMTg0NTQ4MTE=", "number": 1172, "title": "zmq.asyncio.Context.instance() returns synchronous version of zmq.Context object", "user": {"login": "achimnol", "id": 555156, "node_id": "MDQ6VXNlcjU1NTE1Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/555156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achimnol", "html_url": "https://github.com/achimnol", "followers_url": "https://api.github.com/users/achimnol/followers", "following_url": "https://api.github.com/users/achimnol/following{/other_user}", "gists_url": "https://api.github.com/users/achimnol/gists{/gist_id}", "starred_url": "https://api.github.com/users/achimnol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achimnol/subscriptions", "organizations_url": "https://api.github.com/users/achimnol/orgs", "repos_url": "https://api.github.com/users/achimnol/repos", "events_url": "https://api.github.com/users/achimnol/events{/privacy}", "received_events_url": "https://api.github.com/users/achimnol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-27T15:34:08Z", "updated_at": "2020-05-26T10:18:59Z", "closed_at": "2020-05-26T10:18:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "* pyzmq: 17.0.0\r\n* Python: 3.6.5\r\n* Installed via pip on macOS High Sierra\r\n\r\n![image](https://user-images.githubusercontent.com/555156/39371197-ef360822-4a7b-11e8-8fe5-506dd5fcde29.png)\r\n![image](https://user-images.githubusercontent.com/555156/39371208-f8124e92-4a7b-11e8-99db-26b082d0d2fd.png)\r\n\r\nI believe it should return an async-compatible (`zmq.asyncio.Context`) global object instead of `zmq.sugar.context.Context` global object.\r\nIf this is an intended behavior, it must be explicitly documented [here](https://pyzmq.readthedocs.io/en/latest/api/zmq.asyncio.html#context).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1171", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1171/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1171/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1171/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1171", "id": 317821940, "node_id": "MDU6SXNzdWUzMTc4MjE5NDA=", "number": 1171, "title": "Out-of-order message and slow performance when closing and reconnecting socket", "user": {"login": "will133", "id": 1441568, "node_id": "MDQ6VXNlcjE0NDE1Njg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1441568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/will133", "html_url": "https://github.com/will133", "followers_url": "https://api.github.com/users/will133/followers", "following_url": "https://api.github.com/users/will133/following{/other_user}", "gists_url": "https://api.github.com/users/will133/gists{/gist_id}", "starred_url": "https://api.github.com/users/will133/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/will133/subscriptions", "organizations_url": "https://api.github.com/users/will133/orgs", "repos_url": "https://api.github.com/users/will133/repos", "events_url": "https://api.github.com/users/will133/events{/privacy}", "received_events_url": "https://api.github.com/users/will133/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-25T22:57:31Z", "updated_at": "2018-08-20T18:30:21Z", "closed_at": "2018-08-20T18:30:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some code that would try to send a message, call close() and potentially reconnect again like the following:\r\n\r\n```python\r\nimport threading\r\n\r\n_NUM_MESSAGE = 1000\r\n\r\n\r\nclass ReconnectThread(threading.Thread):\r\n    def __init__(self, ctx, server_url):\r\n        super(ReconnectThread, self).__init__()\r\n        self.ctx = ctx\r\n        self.server_url = server_url\r\n\r\n    def _get_new_socket(self):\r\n        socket = self.ctx.socket(zmq.DEALER)\r\n        socket.linger = 1000\r\n        socket.connect(self.server_url)\r\n        return socket\r\n\r\n    def run(self):\r\n        for i in range(_NUM_MESSAGE):\r\n            sock = self._get_new_socket()\r\n            sock.send_multipart([('blah_%s' % i).encode('utf8')])\r\n            sock.close()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import zmq\r\n    ctx = zmq.Context()\r\n    try:\r\n        server_socket = ctx.socket(zmq.DEALER)\r\n        server_url = 'tcp://127.0.0.1:7384'\r\n        server_socket.bind(server_url)\r\n        thread = ReconnectThread(ctx, server_url)\r\n        thread.start()\r\n        for i in range(_NUM_MESSAGE):\r\n            print(server_socket.recv_multipart())\r\n    finally:\r\n        ctx.destroy()\r\n```\r\nFirst of all, I'd expect the message to be appear in order, but I'd get something like this instead:\r\n\r\n```\r\n[b'blah_0']\r\n[b'blah_1']\r\n[b'blah_3']\r\n[b'blah_10']\r\n[b'blah_7']\r\n[b'blah_8']\r\n...\r\n```\r\nSecond, it seems like when linger is set to 1000 (1 second), it's not enough and the program would hang (since the message seems to be dropped).  I'd expect one second would be sufficient to send one (or even 1000 messages).  When I run this with a longer linger (say 5000 or 10000), it would terminate correctly, but the output sometimes would stuttered for a few seconds.\r\n\r\nTo me the behavior seems somewhat strange.  Does anybody explain to me why?  It makes the close() unreliable since I always set linger to be reasonable (to prevent the close() from hanging when there's message in the queue) and it's hard to set it correctly when this is happening.\r\n\r\nI'm using pyzmq 17.0.0 with libzmq 4.2.5 running on Linux Python 3.6.5.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1168", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1168/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1168/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1168/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1168", "id": 315302655, "node_id": "MDU6SXNzdWUzMTUzMDI2NTU=", "number": 1168, "title": "Compile From Source Failed", "user": {"login": "larrymeng", "id": 5775109, "node_id": "MDQ6VXNlcjU3NzUxMDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5775109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larrymeng", "html_url": "https://github.com/larrymeng", "followers_url": "https://api.github.com/users/larrymeng/followers", "following_url": "https://api.github.com/users/larrymeng/following{/other_user}", "gists_url": "https://api.github.com/users/larrymeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/larrymeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larrymeng/subscriptions", "organizations_url": "https://api.github.com/users/larrymeng/orgs", "repos_url": "https://api.github.com/users/larrymeng/repos", "events_url": "https://api.github.com/users/larrymeng/events{/privacy}", "received_events_url": "https://api.github.com/users/larrymeng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-18T02:04:40Z", "updated_at": "2018-08-20T18:31:08Z", "closed_at": "2018-08-20T18:31:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "OS: CentOS 6.2\r\nlibzmq: 4.2.5\r\npyzmq: 17.0.0\r\n\r\n$ python setup.py configure --zmq=/usr/local/libzmq\r\n...\r\nConfigure: Autodetecting ZMQ settings...\r\n    Custom ZMQ dir:       /usr/local/libzmq\r\nbuild/temp.linux-x86_64-2.7/scratch/tmp/timer_createL6ua7m.o: In function `main':\r\ntimer_createL6ua7m.c:(.text+0x15): undefined reference to `timer_create'\r\n...\r\nundefined reference to `vtable for __cxxabiv1::__vmi_class_type_info'\r\ncollect2: ld \u8fd4\u56de 1\r\n\r\nerror: command 'gcc' failed with exit status 1\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1167", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1167/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1167/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1167/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1167", "id": 314057142, "node_id": "MDU6SXNzdWUzMTQwNTcxNDI=", "number": 1167, "title": "pyzmq 17 asyncio hangs on exit", "user": {"login": "antonymayi", "id": 6304370, "node_id": "MDQ6VXNlcjYzMDQzNzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/6304370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antonymayi", "html_url": "https://github.com/antonymayi", "followers_url": "https://api.github.com/users/antonymayi/followers", "following_url": "https://api.github.com/users/antonymayi/following{/other_user}", "gists_url": "https://api.github.com/users/antonymayi/gists{/gist_id}", "starred_url": "https://api.github.com/users/antonymayi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antonymayi/subscriptions", "organizations_url": "https://api.github.com/users/antonymayi/orgs", "repos_url": "https://api.github.com/users/antonymayi/repos", "events_url": "https://api.github.com/users/antonymayi/events{/privacy}", "received_events_url": "https://api.github.com/users/antonymayi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-13T10:39:21Z", "updated_at": "2020-06-12T20:41:11Z", "closed_at": "2018-05-02T08:04:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "after upgrading *just* pyzmq (same libzmq 4.2.5 and python 3.6.5 used in both cases) from 16.0.3 to 17.0 the following simple code runs to the end and then hangs forever while it was exiting ok before:\r\n\r\n```\r\nimport asyncio\r\nimport zmq.asyncio\r\n\r\nctx = zmq.asyncio.Context()\r\npub = ctx.socket(zmq.PUB)\r\npub.bind('inproc://test')\r\nsub = ctx.socket(zmq.SUB)\r\nsub.connect('inproc://test')\r\nsub.setsockopt(zmq.SUBSCRIBE, b'')\r\n\r\nmsg = b'foo', b'bar'\r\n\r\nasync def run():\r\n    await pub.send_multipart(msg)\r\n    assert msg == tuple(await sub.recv_multipart())\r\n    print('DONE')\r\n\r\nasyncio.get_event_loop().run_until_complete(run())\r\n```\r\n\r\nproduces:\r\n```\r\n$ python xxx.py\r\nDONE\r\n```\r\nand hangs forever.\r\n\r\ncouldn't find any notes suggesting I would need to change something when upgrading to 17.0 - so is this a bug?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1164", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1164/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1164/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1164/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1164", "id": 312817436, "node_id": "MDU6SXNzdWUzMTI4MTc0MzY=", "number": 1164, "title": "Alternative storage and verification scheme for client Public keys with CURVE authentication ", "user": {"login": "desmoteo", "id": 546739, "node_id": "MDQ6VXNlcjU0NjczOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/546739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/desmoteo", "html_url": "https://github.com/desmoteo", "followers_url": "https://api.github.com/users/desmoteo/followers", "following_url": "https://api.github.com/users/desmoteo/following{/other_user}", "gists_url": "https://api.github.com/users/desmoteo/gists{/gist_id}", "starred_url": "https://api.github.com/users/desmoteo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/desmoteo/subscriptions", "organizations_url": "https://api.github.com/users/desmoteo/orgs", "repos_url": "https://api.github.com/users/desmoteo/repos", "events_url": "https://api.github.com/users/desmoteo/events{/privacy}", "received_events_url": "https://api.github.com/users/desmoteo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-04-10T08:17:28Z", "updated_at": "2018-07-11T18:47:00Z", "closed_at": "2018-07-11T18:47:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi\r\n\r\nI am working on a project using CURVE authentication. Clients obtain the keys at startup via HTTPS API calls, so that they are not stored permanently on remote devices.  For these reasons client keys are stored in a db and are copied to files in a credentials folder accessible to the pyzmq Authenticator. \r\nEvery time a key is added to/removed from the db we have to modify the content of the  credentials folder accordingly and call configure_curve to update the state of the Authenticator.  \r\n\r\nI think it would be useful to provide an alternative scheme where during ZAP authentication, a callback is called to asses the client public key validity.\r\n\r\nI will try to provide a pull request for this. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/pyzmq/issues/1162", "repository_url": "https://api.github.com/repos/zeromq/pyzmq", "labels_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1162/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1162/comments", "events_url": "https://api.github.com/repos/zeromq/pyzmq/issues/1162/events", "html_url": "https://github.com/zeromq/pyzmq/issues/1162", "id": 312283840, "node_id": "MDU6SXNzdWUzMTIyODM4NDA=", "number": 1162, "title": "Will proxy_steerable be supported?", "user": {"login": "yl-1993", "id": 4398342, "node_id": "MDQ6VXNlcjQzOTgzNDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4398342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yl-1993", "html_url": "https://github.com/yl-1993", "followers_url": "https://api.github.com/users/yl-1993/followers", "following_url": "https://api.github.com/users/yl-1993/following{/other_user}", "gists_url": "https://api.github.com/users/yl-1993/gists{/gist_id}", "starred_url": "https://api.github.com/users/yl-1993/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yl-1993/subscriptions", "organizations_url": "https://api.github.com/users/yl-1993/orgs", "repos_url": "https://api.github.com/users/yl-1993/repos", "events_url": "https://api.github.com/users/yl-1993/events{/privacy}", "received_events_url": "https://api.github.com/users/yl-1993/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-08T08:12:32Z", "updated_at": "2018-08-19T11:49:26Z", "closed_at": "2018-08-19T11:49:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Will `zmq.proxy_steerable` be supported in future version? It seems to be a graceful way to terminate `zmq.proxy`.", "performed_via_github_app": null, "score": 1.0}]}