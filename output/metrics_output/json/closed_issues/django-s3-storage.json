{"total_count": 65, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/112", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/112/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/112/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/112", "id": 663929533, "node_id": "MDU6SXNzdWU2NjM5Mjk1MzM=", "number": 112, "title": "Error on save file", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-07-22T17:29:13Z", "updated_at": "2020-07-23T13:30:09Z", "closed_at": "2020-07-23T13:30:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all!\r\n\r\n```\r\n  File \"C:\\Users\\Asus\\Documents\\Projects\\python\\gelio_vostok_backend\\files\\views.py\", line 12, in upload_file\r\n    file = FileModel.objects.create(\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\manager.py\", line 82, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\query.py\", line 433, in create\r\n    obj.save(force_insert=True, using=self.db)\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\base.py\", line 745, in save\r\n    self.save_base(using=using, force_insert=force_insert,\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\base.py\", line 782, in save_base\r\n    updated = self._save_table(\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\base.py\", line 887, in _save_table\r\n    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\base.py\", line 924, in _do_insert\r\n    return manager._insert(\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\manager.py\", line 82, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\query.py\", line 1204, in _insert\r\n    return query.get_compiler(using=using).execute_sql(returning_fields)\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py\", line 1391, in execute_sql\r\n    for sql, params in self.as_sql():\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py\", line 1334, in as_sql\r\n    value_rows = [\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py\", line 1335, in <listcomp>\r\n    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py\", line 1335, in <listcomp>\r\n    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\sql\\compiler.py\", line 1286, in pre_save_val\r\n    return field.pre_save(obj, add=True)\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\fields\\files.py\", line 288, in pre_save\r\n    file.save(file.name, file.file, save=False)\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\db\\models\\fields\\files.py\", line 87, in save\r\n    self.name = self.storage.save(name, content, max_length=self.field.max_length)\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\core\\files\\storage.py\", line 51, in save\r\n    name = self.get_available_name(name, max_length=max_length)\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django_s3_storage\\storage.py\", line 65, in do_wrap_path_impl\r\n    return _to_posix_path(func(self, _to_sys_path(name), *args, **kwargs))\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django_s3_storage\\storage.py\", line 339, in get_available_name\r\n    return super(S3Storage, self).get_available_name(name, max_length=max_length)\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django\\core\\files\\storage.py\", line 82, in get_available_name\r\n    while self.exists(name) or (max_length and len(name) > max_length):\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django_s3_storage\\storage.py\", line 370, in exists\r\n    return self.exists(name + \"/\")\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\django_s3_storage\\storage.py\", line 359, in exists\r\n    results = self.s3_connection.list_objects_v2(\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\botocore\\client.py\", line 316, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"C:\\Users\\Asus\\.virtualenvs\\gelio_vostok_backend-XP0MyTwt\\lib\\site-packages\\botocore\\client.py\", line 635, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.errorfactory.NoSuchKey: An error occurred (NoSuchKey) when calling the ListObjectsV2 operation: Unknown\r\n```\r\n\r\nSeems it's incorrect handle file not exists error!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/108", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/108/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/108/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/108", "id": 585221429, "node_id": "MDU6SXNzdWU1ODUyMjE0Mjk=", "number": 108, "title": "Is it posible to make only some files public?", "user": {"login": "mark-mishyn", "id": 5605800, "node_id": "MDQ6VXNlcjU2MDU4MDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/5605800?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-mishyn", "html_url": "https://github.com/mark-mishyn", "followers_url": "https://api.github.com/users/mark-mishyn/followers", "following_url": "https://api.github.com/users/mark-mishyn/following{/other_user}", "gists_url": "https://api.github.com/users/mark-mishyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-mishyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-mishyn/subscriptions", "organizations_url": "https://api.github.com/users/mark-mishyn/orgs", "repos_url": "https://api.github.com/users/mark-mishyn/repos", "events_url": "https://api.github.com/users/mark-mishyn/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-mishyn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-20T17:28:15Z", "updated_at": "2020-07-28T09:28:01Z", "closed_at": "2020-03-23T10:07:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to make public some specific objects? I also use KMS-encryption, so AWS_S3_BUCKET_AUTH is True.\r\n\r\nI've tried to use bucket policy that grants public read access to a specific object tag, but seems like it doesn't work, since S3Storage explicitly sets X-Amz-Expires based on AWS_S3_MAX_AGE_SECONDS. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/106", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/106/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/106/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/106", "id": 547124787, "node_id": "MDU6SXNzdWU1NDcxMjQ3ODc=", "number": 106, "title": "Requesting a Short Demo project", "user": {"login": "john-blip", "id": 59668779, "node_id": "MDQ6VXNlcjU5NjY4Nzc5", "avatar_url": "https://avatars2.githubusercontent.com/u/59668779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/john-blip", "html_url": "https://github.com/john-blip", "followers_url": "https://api.github.com/users/john-blip/followers", "following_url": "https://api.github.com/users/john-blip/following{/other_user}", "gists_url": "https://api.github.com/users/john-blip/gists{/gist_id}", "starred_url": "https://api.github.com/users/john-blip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/john-blip/subscriptions", "organizations_url": "https://api.github.com/users/john-blip/orgs", "repos_url": "https://api.github.com/users/john-blip/repos", "events_url": "https://api.github.com/users/john-blip/events{/privacy}", "received_events_url": "https://api.github.com/users/john-blip/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-08T21:55:36Z", "updated_at": "2020-01-09T11:04:14Z", "closed_at": "2020-01-09T11:04:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, first off let me apologise if a lot of this is very amateurish.\r\nInitially I was trying to get django-storages working, but I was unable to get it working for media files. I have tried to implement the code you gave in the instructions, but there were a number of issues. \r\n\r\nThe command below gave an error that the command doesn't exist\r\n`./manage.py s3_sync_meta django.core.files.storage.default_storage` \r\n\r\n>from django_s3_storage.storage import S3Storage\r\nstorage = S3Storage(aws_s3_bucket_name='test_bucket')\r\n\r\nI was wondering if that 'test_bucket' name should be named the same as it my S3 bucket, or if this is just a folder that will be created within the existing bucket? \r\n\r\n> All of the file storage settings are available for the staticfiles storage, suffixed with _STATIC. You must provide at least AWS_S3_BUCKET_NAME_STATIC. Remember to run ./manage.py collectstatic after changing your staticfiles storage backend.\r\n\r\nCould you give an example of how AWS_S3_BUCKET_NAME_STATIC would be put into the settings? Should I just name this as anything I want?\r\n\r\nAlso when you use './manage.py' in the instructions I am assuming you mean 'python manage.py ....' Am I correct in this? \r\n\r\nMy issue with django-storages was that I was unable to upload images from the admin section directly to S3. Does this package need any additional settings to allow permissions to upload images from the admin? \r\n\r\nI was also wondering if it would be possible to use the package in conjunction with ckeditor in the following way\r\n\r\nfrom ckeditor_uploader.fields import RichTextUploadingField\r\nstorage = S3Storage(aws_s3_bucket_name='test_bucket')\r\n\r\nclass Car(models.Model):\r\n    name = models.CharField(max_length=255)\r\n    photo = models.ImageField(storage=storage)\r\n    Image/content = RichTextUploadingField(storage=storage)\r\n\r\nIdeally I would greatly appreciate if someone could point me in the direction of a quick demo project so I can find the answers to these questions through trial and error. I have spent a rather long time building my project and since Heroku needs media served through S3 this is all an unpleasant surprise. \r\n\r\nKind regards,\r\n\r\nJohn\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/103", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/103/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/103/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/103", "id": 522945914, "node_id": "MDU6SXNzdWU1MjI5NDU5MTQ=", "number": 103, "title": "Question about ManifestStaticS3Storage", "user": {"login": "greenpasta", "id": 3019430, "node_id": "MDQ6VXNlcjMwMTk0MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3019430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/greenpasta", "html_url": "https://github.com/greenpasta", "followers_url": "https://api.github.com/users/greenpasta/followers", "following_url": "https://api.github.com/users/greenpasta/following{/other_user}", "gists_url": "https://api.github.com/users/greenpasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/greenpasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/greenpasta/subscriptions", "organizations_url": "https://api.github.com/users/greenpasta/orgs", "repos_url": "https://api.github.com/users/greenpasta/repos", "events_url": "https://api.github.com/users/greenpasta/events{/privacy}", "received_events_url": "https://api.github.com/users/greenpasta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-14T15:50:59Z", "updated_at": "2019-11-14T18:47:27Z", "closed_at": "2019-11-14T18:47:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've configured as follows:\r\n\r\n`AWS_ACCESS_KEY_ID = 'xxxx'`\r\n`AWS_SECRET_ACCESS_KEY = 'yyyy'`\r\n`AWS_S3_BUCKET_NAME_STATIC = 'myapp-static'`\r\n`AWS_S3_MAX_AGE_SECONDS = '315360000'`\r\n`STATICFILES_STORAGE = 'django_s3_storage.storage.ManifestStaticS3Storage'`\r\n\r\nThe huge MAX_AGE is great so my visitors never have to reload static assets, if any of them change they'll have a new name. However... this also puts that MAX_AGE on `staticfiles.json`, so I think the clients also cache that basically forever and won't realize when other static assets have changed.\r\n\r\nIs this a valid concern? Am I doing this right?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/100", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/100/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/100/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/100", "id": 514293380, "node_id": "MDU6SXNzdWU1MTQyOTMzODA=", "number": 100, "title": "SignatureDoesNotMatch: The request signature we calculated does not match the signature you provided. Check your key and signing method.", "user": {"login": "orimboolak", "id": 22850744, "node_id": "MDQ6VXNlcjIyODUwNzQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/22850744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orimboolak", "html_url": "https://github.com/orimboolak", "followers_url": "https://api.github.com/users/orimboolak/followers", "following_url": "https://api.github.com/users/orimboolak/following{/other_user}", "gists_url": "https://api.github.com/users/orimboolak/gists{/gist_id}", "starred_url": "https://api.github.com/users/orimboolak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orimboolak/subscriptions", "organizations_url": "https://api.github.com/users/orimboolak/orgs", "repos_url": "https://api.github.com/users/orimboolak/repos", "events_url": "https://api.github.com/users/orimboolak/events{/privacy}", "received_events_url": "https://api.github.com/users/orimboolak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-29T23:28:50Z", "updated_at": "2019-10-31T09:26:22Z", "closed_at": "2019-10-31T09:26:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Keep getting this error when trying to access the stored file via the link. Kindly help", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/99", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/99/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/99/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/99", "id": 497217161, "node_id": "MDU6SXNzdWU0OTcyMTcxNjE=", "number": 99, "title": "Make settings names less generic", "user": {"login": "cdosborn", "id": 3847314, "node_id": "MDQ6VXNlcjM4NDczMTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3847314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdosborn", "html_url": "https://github.com/cdosborn", "followers_url": "https://api.github.com/users/cdosborn/followers", "following_url": "https://api.github.com/users/cdosborn/following{/other_user}", "gists_url": "https://api.github.com/users/cdosborn/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdosborn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdosborn/subscriptions", "organizations_url": "https://api.github.com/users/cdosborn/orgs", "repos_url": "https://api.github.com/users/cdosborn/repos", "events_url": "https://api.github.com/users/cdosborn/events{/privacy}", "received_events_url": "https://api.github.com/users/cdosborn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-23T17:00:34Z", "updated_at": "2019-10-31T09:26:35Z", "closed_at": "2019-10-31T09:26:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "The settings names are quite generic: `AWS_ACCESS_KEY_ID`. I'm only using django-s3-storage for media files with s3, and use other aws services. Would prefer the settings to be scoped by the library's name or s3.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/98", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/98/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/98/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/98", "id": 493062738, "node_id": "MDU6SXNzdWU0OTMwNjI3Mzg=", "number": 98, "title": "Save VersionId in model", "user": {"login": "Meess", "id": 8512566, "node_id": "MDQ6VXNlcjg1MTI1NjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8512566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Meess", "html_url": "https://github.com/Meess", "followers_url": "https://api.github.com/users/Meess/followers", "following_url": "https://api.github.com/users/Meess/following{/other_user}", "gists_url": "https://api.github.com/users/Meess/gists{/gist_id}", "starred_url": "https://api.github.com/users/Meess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Meess/subscriptions", "organizations_url": "https://api.github.com/users/Meess/orgs", "repos_url": "https://api.github.com/users/Meess/repos", "events_url": "https://api.github.com/users/Meess/events{/privacy}", "received_events_url": "https://api.github.com/users/Meess/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-12T22:45:03Z", "updated_at": "2019-09-13T18:38:32Z", "closed_at": "2019-09-13T18:38:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was wondering if there is a more appropriate way to save the VersionId in a model when updating it. The way I currently came up with is:\r\n\r\n```python\r\nmy_model = MyModel()\r\n# write query and S3 PUT request\r\nmy_model.my_file_field.save(\"someName.html\", file)\r\n\r\n# S3 request\r\nversion_id = S3Storage().meta(my_model.my_file_field.name)['VersionId']\r\n\r\n# write query\r\nmy_model.latest_version_id = version_id\r\nmy_model.save()\r\n```\r\n\r\nThis requires 2 request and 2 writes, which seems a bit cumbersome, being able to access the VersionId when the file is updated would enable it do everything in one go (i.e. 1 write and 1 request). Looked at the source code but couldn't find a way to access the meta data on the response, only by doing an additional request with .meta() or am I overlooking something?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/97", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/97/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/97/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/97", "id": 489830804, "node_id": "MDU6SXNzdWU0ODk4MzA4MDQ=", "number": 97, "title": "[FIXED] IAM permissions miss Principal field", "user": {"login": "zodman", "id": 44167, "node_id": "MDQ6VXNlcjQ0MTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/44167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zodman", "html_url": "https://github.com/zodman", "followers_url": "https://api.github.com/users/zodman/followers", "following_url": "https://api.github.com/users/zodman/following{/other_user}", "gists_url": "https://api.github.com/users/zodman/gists{/gist_id}", "starred_url": "https://api.github.com/users/zodman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zodman/subscriptions", "organizations_url": "https://api.github.com/users/zodman/orgs", "repos_url": "https://api.github.com/users/zodman/repos", "events_url": "https://api.github.com/users/zodman/events{/privacy}", "received_events_url": "https://api.github.com/users/zodman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-05T15:15:29Z", "updated_at": "2019-09-05T15:27:11Z", "closed_at": "2019-09-05T15:26:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "today i setup the custom perms of s3.\r\n\r\nand error showed:\r\n\r\n\r\n```\r\nError\r\nMissing required field Principal\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/96", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/96/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/96/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/96", "id": 478571572, "node_id": "MDU6SXNzdWU0Nzg1NzE1NzI=", "number": 96, "title": "Access Denied when calling the PutObject operation", "user": {"login": "edgarroman", "id": 507447, "node_id": "MDQ6VXNlcjUwNzQ0Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/507447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edgarroman", "html_url": "https://github.com/edgarroman", "followers_url": "https://api.github.com/users/edgarroman/followers", "following_url": "https://api.github.com/users/edgarroman/following{/other_user}", "gists_url": "https://api.github.com/users/edgarroman/gists{/gist_id}", "starred_url": "https://api.github.com/users/edgarroman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edgarroman/subscriptions", "organizations_url": "https://api.github.com/users/edgarroman/orgs", "repos_url": "https://api.github.com/users/edgarroman/repos", "events_url": "https://api.github.com/users/edgarroman/events{/privacy}", "received_events_url": "https://api.github.com/users/edgarroman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-08T16:24:34Z", "updated_at": "2020-04-21T22:12:06Z", "closed_at": "2019-08-08T17:45:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "So found this out when setting up a Django static files site.  \r\nWhen creating the bucket, if you select 'Block all public access' then when you run:\r\n`python manage.py collectstatic`\r\n\r\nYou will get an error of 'Access Denied'.  At first I thought my credentials were bad, and spent a lot of time tracking that.  But eventually debugged it to my bucket settings.  \r\n\r\nI suggest you maybe want to add a note in the README for this error case.  **To instruct folks to ensure that 'Block all public access' is disabled.**\r\n\r\nFor what it's worth, here is my error in full:\r\n\r\n```\r\npython manage.py collectstatic\r\nINFO Found credentials in shared credentials file: ~/.aws/credentials\r\n\r\nYou have requested to collect static files at the destination\r\nlocation as specified in your settings.\r\n\r\nThis will overwrite existing files!\r\nAre you sure you want to do this?\r\n\r\nType 'yes' to continue, or 'no' to cancel: yes\r\nTraceback (most recent call last):\r\n  File \"/var/task/ve-test/lib/python3.7/site-packages/django_s3_storage/storage.py\", line 42, in _do_wrap_errors\r\n    return func(self, name, *args, **kwargs)\r\n  File \"/var/task/ve-test/lib/python3.7/site-packages/django_s3_storage/storage.py\", line 322, in _save\r\n    self.s3_connection.put_object(Body=content.read(), **put_params)\r\n  File \"/var/task/ve-test/lib/python3.7/site-packages/botocore/client.py\", line 357, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/var/task/ve-test/lib/python3.7/site-packages/botocore/client.py\", line 661, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (AccessDenied) when calling the PutObject operation: Access Denied\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"manage.py\", line 21, in <module>\r\n    main()\r\n  File \"manage.py\", line 17, in main\r\n    execute_from_command_line(sys.argv)\r\n  File \"/var/task/ve-test/lib/python3.7/site-packages/django/core/management/__init__.py\", line 381, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/var/task/ve-test/lib/python3.7/site-packages/django/core/management/__init__.py\", line 375, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/var/task/ve-test/lib/python3.7/site-packages/django/core/management/base.py\", line 323, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/var/task/ve-test/lib/python3.7/site-packages/django/core/management/base.py\", line 364, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/var/task/ve-test/lib/python3.7/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 188, in handle\r\n    collected = self.collect()\r\n  File \"/var/task/ve-test/lib/python3.7/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 114, in collect\r\n    handler(path, prefixed_path, storage)\r\n  File \"/var/task/ve-test/lib/python3.7/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 352, in copy_file\r\n    self.storage.save(prefixed_path, source_file)\r\n  File \"/var/task/ve-test/lib/python3.7/site-packages/django/core/files/storage.py\", line 52, in save\r\n    return self._save(name, content)\r\n  File \"/var/task/ve-test/lib/python3.7/site-packages/django_s3_storage/storage.py\", line 44, in _do_wrap_errors\r\n    raise S3Error(\"S3Storage error at {!r}: {}\".format(name, force_text(ex)))\r\ndjango_s3_storage.storage.S3Error: S3Storage error at 'admin/css/widgets.css': An error occurred (AccessDenied) when calling the PutObject operation: Access Denied\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/94", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/94/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/94/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/94", "id": 469615351, "node_id": "MDU6SXNzdWU0Njk2MTUzNTE=", "number": 94, "title": "Using the s3_sync_meta command causes an AttributeError exception", "user": {"login": "chrisjakuta", "id": 30093831, "node_id": "MDQ6VXNlcjMwMDkzODMx", "avatar_url": "https://avatars1.githubusercontent.com/u/30093831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisjakuta", "html_url": "https://github.com/chrisjakuta", "followers_url": "https://api.github.com/users/chrisjakuta/followers", "following_url": "https://api.github.com/users/chrisjakuta/following{/other_user}", "gists_url": "https://api.github.com/users/chrisjakuta/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisjakuta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisjakuta/subscriptions", "organizations_url": "https://api.github.com/users/chrisjakuta/orgs", "repos_url": "https://api.github.com/users/chrisjakuta/repos", "events_url": "https://api.github.com/users/chrisjakuta/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisjakuta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-18T07:36:33Z", "updated_at": "2019-07-23T00:37:11Z", "closed_at": "2019-07-22T22:46:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "AttributeError: 'CompressedManifestStaticFilesStorage' object has no attribute 'sync_meta_iter'. \r\n\r\nI have the correct storage engine `django_s3_storage.storage.ManifestStaticS3Storage` - but when I run the `s3_sync_meta django.contrib.staticfiles.storage.staticfiles_storage` command I get this error. `CompressedManifestStaticfilesStorage` is one of the storage classes from `django.contrib.staticfiles.storage.staticfiles_storage`  Isn't this supposed to call the `django_s3_storage.storage` class `ManifestStaticS3Storage` ? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/89", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/89/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/89/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/89", "id": 462245638, "node_id": "MDU6SXNzdWU0NjIyNDU2Mzg=", "number": 89, "title": "Collectstatic fails with wrong AWS Key", "user": {"login": "d7090", "id": 12519541, "node_id": "MDQ6VXNlcjEyNTE5NTQx", "avatar_url": "https://avatars3.githubusercontent.com/u/12519541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d7090", "html_url": "https://github.com/d7090", "followers_url": "https://api.github.com/users/d7090/followers", "following_url": "https://api.github.com/users/d7090/following{/other_user}", "gists_url": "https://api.github.com/users/d7090/gists{/gist_id}", "starred_url": "https://api.github.com/users/d7090/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d7090/subscriptions", "organizations_url": "https://api.github.com/users/d7090/orgs", "repos_url": "https://api.github.com/users/d7090/repos", "events_url": "https://api.github.com/users/d7090/events{/privacy}", "received_events_url": "https://api.github.com/users/d7090/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-29T00:18:41Z", "updated_at": "2019-08-08T16:25:17Z", "closed_at": "2019-07-02T08:50:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "This has got me stumped - \r\n\r\nWhen I've ran collectstatic, Ive received an error that the AWS key ID is incorrect. I made a new set and still got the same error. Checked keys were being sent at the time of being called. Ran a few print statements in Botocore/client.py and found that a js file for admin is being sent as an API param instead of my keys.\r\n\r\nI have read others errors of it can fail when there is a missing file. The file that comes up does exist and runs fine in dev mode.\r\n\r\nI'm not sure how to fix this and I'm not sure if this is a bug or I have missed something. \r\nHere are my errors + config: \r\n**Error:** [dpaste/8Miz (Python)](https://dpaste.de/8Miz)\r\n**Djangos3-aws-settings:** [dpaste/38h6 (Python)](https://dpaste.de/38h6)\r\n**Production_settings:**[dpaste/ESVC (Python)](https://dpaste.de/ESVC)\r\n**Base_settings:**[dpaste/JHv9 (Python)](https://dpaste.de/JHv9)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/87", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/87/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/87/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/87", "id": 454659585, "node_id": "MDU6SXNzdWU0NTQ2NTk1ODU=", "number": 87, "title": "FileField.size returns compressed size when gzip is used", "user": {"login": "emesik", "id": 407107, "node_id": "MDQ6VXNlcjQwNzEwNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/407107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emesik", "html_url": "https://github.com/emesik", "followers_url": "https://api.github.com/users/emesik/followers", "following_url": "https://api.github.com/users/emesik/following{/other_user}", "gists_url": "https://api.github.com/users/emesik/gists{/gist_id}", "starred_url": "https://api.github.com/users/emesik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emesik/subscriptions", "organizations_url": "https://api.github.com/users/emesik/orgs", "repos_url": "https://api.github.com/users/emesik/repos", "events_url": "https://api.github.com/users/emesik/events{/privacy}", "received_events_url": "https://api.github.com/users/emesik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-11T12:26:38Z", "updated_at": "2019-07-22T07:09:39Z", "closed_at": "2019-07-22T07:09:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have `AWS_S3_GZIP=True` by default and I want to keep it that way. However, I'd like to be able to learn the uncompressed size of the file. The simplest way, `FileField.size` returns the size after compression and I see no other attribute or method of `FileField` that could return more info.\r\n\r\nIf I understand correctly, the `HEAD` response from S3 returns `ContentLength` of the data about to be transmitted, which means the gzipped version that is going to be served and further decompressed on client's side.\r\n\r\nThe S3 web interface also reports only compressed size in file properties. However, the bucket listings in S3 web interface display sizes of uncompressed objects, so I guess the information can be retrieved somehow.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/85", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/85/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/85/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/85", "id": 428361957, "node_id": "MDU6SXNzdWU0MjgzNjE5NTc=", "number": 85, "title": "Question: how use encryption dynamically for some files", "user": {"login": "mark-mishyn", "id": 5605800, "node_id": "MDQ6VXNlcjU2MDU4MDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/5605800?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-mishyn", "html_url": "https://github.com/mark-mishyn", "followers_url": "https://api.github.com/users/mark-mishyn/followers", "following_url": "https://api.github.com/users/mark-mishyn/following{/other_user}", "gists_url": "https://api.github.com/users/mark-mishyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-mishyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-mishyn/subscriptions", "organizations_url": "https://api.github.com/users/mark-mishyn/orgs", "repos_url": "https://api.github.com/users/mark-mishyn/repos", "events_url": "https://api.github.com/users/mark-mishyn/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-mishyn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-02T17:52:21Z", "updated_at": "2019-10-31T09:26:58Z", "closed_at": "2019-10-31T09:26:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all thank you for your work and awesome open source lib.\r\n\r\nI have a question about encryption. Lets say I have simple model:\r\n```\r\nclass File(models.Model):\r\n   os_file = models.FileField()\r\n   is_encrypted = models.BooleanField(default=False)\r\n```\r\n... and I want encrypt only those `File` instances which has `is_encrypted=True`. Any suggestions how to do it properly?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/82", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/82/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/82/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/82", "id": 388778735, "node_id": "MDU6SXNzdWUzODg3Nzg3MzU=", "number": 82, "title": "Images uploaded to AWS s3 via ckeditor expire after one hour", "user": {"login": "peterdoherty01", "id": 22255078, "node_id": "MDQ6VXNlcjIyMjU1MDc4", "avatar_url": "https://avatars1.githubusercontent.com/u/22255078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterdoherty01", "html_url": "https://github.com/peterdoherty01", "followers_url": "https://api.github.com/users/peterdoherty01/followers", "following_url": "https://api.github.com/users/peterdoherty01/following{/other_user}", "gists_url": "https://api.github.com/users/peterdoherty01/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterdoherty01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterdoherty01/subscriptions", "organizations_url": "https://api.github.com/users/peterdoherty01/orgs", "repos_url": "https://api.github.com/users/peterdoherty01/repos", "events_url": "https://api.github.com/users/peterdoherty01/events{/privacy}", "received_events_url": "https://api.github.com/users/peterdoherty01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-07T19:11:15Z", "updated_at": "2019-10-31T09:27:08Z", "closed_at": "2019-10-31T09:27:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using django 2.1.2 with django s3 storage, zinnia and ckeditor.\r\n\r\nI can upload files to AWS s3 perfectly but files uploaded via CKeditor disappear after 60mins.\r\n\r\nHow can I fix this? It seems like the new url is not updating to my setup.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/78", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/78/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/78/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/78", "id": 338960827, "node_id": "MDU6SXNzdWUzMzg5NjA4Mjc=", "number": 78, "title": "CacheControl header should be optional", "user": {"login": "manuganji", "id": 1709986, "node_id": "MDQ6VXNlcjE3MDk5ODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1709986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/manuganji", "html_url": "https://github.com/manuganji", "followers_url": "https://api.github.com/users/manuganji/followers", "following_url": "https://api.github.com/users/manuganji/following{/other_user}", "gists_url": "https://api.github.com/users/manuganji/gists{/gist_id}", "starred_url": "https://api.github.com/users/manuganji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/manuganji/subscriptions", "organizations_url": "https://api.github.com/users/manuganji/orgs", "repos_url": "https://api.github.com/users/manuganji/repos", "events_url": "https://api.github.com/users/manuganji/events{/privacy}", "received_events_url": "https://api.github.com/users/manuganji/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-06T14:29:53Z", "updated_at": "2019-10-31T09:27:33Z", "closed_at": "2019-10-31T09:27:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I want the ability to tune the caching from the AWS S3 console and I see in the [source](https://github.com/etianen/django-s3-storage/blob/master/django_s3_storage/storage.py#L221) that `CacheControl` header is always set even for public buckets.\r\n\r\n`django-storages` doesn't touch caching in the S3 backend. I believe that's the correct way to do it.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/77", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/77/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/77/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/77", "id": 332436018, "node_id": "MDU6SXNzdWUzMzI0MzYwMTg=", "number": 77, "title": "Installation issue", "user": {"login": "apiljic", "id": 2684894, "node_id": "MDQ6VXNlcjI2ODQ4OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2684894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apiljic", "html_url": "https://github.com/apiljic", "followers_url": "https://api.github.com/users/apiljic/followers", "following_url": "https://api.github.com/users/apiljic/following{/other_user}", "gists_url": "https://api.github.com/users/apiljic/gists{/gist_id}", "starred_url": "https://api.github.com/users/apiljic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apiljic/subscriptions", "organizations_url": "https://api.github.com/users/apiljic/orgs", "repos_url": "https://api.github.com/users/apiljic/repos", "events_url": "https://api.github.com/users/apiljic/events{/privacy}", "received_events_url": "https://api.github.com/users/apiljic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-14T14:47:58Z", "updated_at": "2018-06-14T19:32:03Z", "closed_at": "2018-06-14T19:32:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI would like to try django-s3-storage and maybe use it instead of django-storages.\r\nFollowing your instructions, I installed the package and added to the settings.py:\r\n    \r\n    AWS_REGION = \"us-east-1\"\r\n    AWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\")\r\n    AWS_SECRET_ACCESS_KEY = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")\r\n    AWS_S3_BUCKET_NAME = \"mybucketname\"\r\n    AWS_S3_GZIP = True\r\n    AWS_S3_FILE_OVERWRITE = False\r\n    \r\n    DEFAULT_FILE_STORAGE = 'django_s3_storage.storage.S3Storage'\r\n    STATICFILES_STORAGE = 'django_s3_storage.storage.ManifestStaticS3Storage'\r\n\r\nI am getting the following error:\r\nParamValidationError at /\r\nParameter validation failed:\r\nInvalid bucket name \"\": Bucket name must match the regex \"^[a-zA-Z0-9.\\-_]{1,255}$\"\r\n\r\nAny idea what I am doing wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/76", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/76/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/76/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/76", "id": 311475324, "node_id": "MDU6SXNzdWUzMTE0NzUzMjQ=", "number": 76, "title": "Collectstatic fail with some files", "user": {"login": "mayait", "id": 1101119, "node_id": "MDQ6VXNlcjExMDExMTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1101119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mayait", "html_url": "https://github.com/mayait", "followers_url": "https://api.github.com/users/mayait/followers", "following_url": "https://api.github.com/users/mayait/following{/other_user}", "gists_url": "https://api.github.com/users/mayait/gists{/gist_id}", "starred_url": "https://api.github.com/users/mayait/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mayait/subscriptions", "organizations_url": "https://api.github.com/users/mayait/orgs", "repos_url": "https://api.github.com/users/mayait/repos", "events_url": "https://api.github.com/users/mayait/events{/privacy}", "received_events_url": "https://api.github.com/users/mayait/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-05T05:15:57Z", "updated_at": "2019-10-31T09:28:23Z", "closed_at": "2019-10-31T09:28:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try to collectstatic it fails, it seems like is trying to sync non existent files.\r\n\r\nThe folder fonts not even exist there '''plugins/bower_components/jquery-wizard-master/libs/fonts/''' \r\n\r\n```\r\nPost-processing 'plugins/bower_components/jquery-wizard-master/libs/bootstrap/bootstrap.min.css' failed!\r\n\r\nTraceback (most recent call last):\r\n  File \"./manage.py\", line 15, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"/home/ubuntu/apps/env/lib/python3.5/site-packages/django/core/management/__init__.py\", line 371, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/home/ubuntu/apps/env/lib/python3.5/site-packages/django/core/management/__init__.py\", line 365, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/home/ubuntu/apps/env/lib/python3.5/site-packages/django/core/management/base.py\", line 288, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/home/ubuntu/apps/env/lib/python3.5/site-packages/django/core/management/base.py\", line 335, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/home/ubuntu/apps/env/lib/python3.5/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 189, in handle\r\n    collected = self.collect()\r\n  File \"/home/ubuntu/apps/env/lib/python3.5/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 135, in collect\r\n    raise processed\r\n  File \"/home/ubuntu/apps/env/lib/python3.5/site-packages/django/contrib/staticfiles/storage.py\", line 296, in _post_process\r\n    content = pattern.sub(converter, content)\r\n  File \"/home/ubuntu/apps/env/lib/python3.5/site-packages/django/contrib/staticfiles/storage.py\", line 197, in converter\r\n    force=True, hashed_files=hashed_files,\r\n  File \"/home/ubuntu/apps/env/lib/python3.5/site-packages/django/contrib/staticfiles/storage.py\", line 134, in _url\r\n    hashed_name = hashed_name_func(*args)\r\n  File \"/home/ubuntu/apps/env/lib/python3.5/site-packages/django/contrib/staticfiles/storage.py\", line 345, in _stored_name\r\n    cache_name = self.clean_name(self.hashed_name(name))\r\n  File \"/home/ubuntu/apps/env/lib/python3.5/site-packages/django/contrib/staticfiles/storage.py\", line 94, in hashed_name\r\n    raise ValueError(\"The file '%s' could not be found with %r.\" % (filename, self))\r\nValueError: The file 'plugins/bower_components/jquery-wizard-master/libs/fonts/glyphicons-halflings-regular.eot' could not be found with <django_s3_storage.storage.ManifestStaticS3Storage object at 0x7f2e58f163c8>.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/75", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/75/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/75/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/75", "id": 306541036, "node_id": "MDU6SXNzdWUzMDY1NDEwMzY=", "number": 75, "title": "Add support for \"immutable\" Cache-Control header", "user": {"login": "blopker", "id": 757503, "node_id": "MDQ6VXNlcjc1NzUwMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/757503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blopker", "html_url": "https://github.com/blopker", "followers_url": "https://api.github.com/users/blopker/followers", "following_url": "https://api.github.com/users/blopker/following{/other_user}", "gists_url": "https://api.github.com/users/blopker/gists{/gist_id}", "starred_url": "https://api.github.com/users/blopker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blopker/subscriptions", "organizations_url": "https://api.github.com/users/blopker/orgs", "repos_url": "https://api.github.com/users/blopker/repos", "events_url": "https://api.github.com/users/blopker/events{/privacy}", "received_events_url": "https://api.github.com/users/blopker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-19T16:40:57Z", "updated_at": "2020-01-28T13:14:03Z", "closed_at": "2019-10-31T09:27:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey @etianen, something that Whitenoise supports is adding the \"immutable\" value to the Cache-Control header for static files with hashed filenames. It looks like you already added support for caching hashed files longer, so why not add this wonderful feature?\r\n\r\nSee here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control and here: http://bitsup.blogspot.de/2016/05/cache-control-immutable.html\r\n\r\nI imagine it would be something like a new option: `AWS_S3_IMMUTABLE_CACHED_STATIC = True`.\r\n\r\nWould you be open to me submitting a PR?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/72", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/72/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/72/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/72", "id": 292922468, "node_id": "MDU6SXNzdWUyOTI5MjI0Njg=", "number": 72, "title": "Support for the AWS KMS encryption type", "user": {"login": "MartinFalatic", "id": 6424469, "node_id": "MDQ6VXNlcjY0MjQ0Njk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6424469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MartinFalatic", "html_url": "https://github.com/MartinFalatic", "followers_url": "https://api.github.com/users/MartinFalatic/followers", "following_url": "https://api.github.com/users/MartinFalatic/following{/other_user}", "gists_url": "https://api.github.com/users/MartinFalatic/gists{/gist_id}", "starred_url": "https://api.github.com/users/MartinFalatic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MartinFalatic/subscriptions", "organizations_url": "https://api.github.com/users/MartinFalatic/orgs", "repos_url": "https://api.github.com/users/MartinFalatic/repos", "events_url": "https://api.github.com/users/MartinFalatic/events{/privacy}", "received_events_url": "https://api.github.com/users/MartinFalatic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-01-30T20:15:28Z", "updated_at": "2018-02-15T17:17:07Z", "closed_at": "2018-02-15T10:32:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This package currently supports AES256 encryption. AWS KMS should be supported as well.\r\n\r\nCurrently this package uses the boolean AWS_S3_ENCRYPT_KEY to mediate whether to use no encryption or to use AES256 encryption.\r\n\r\nA backward compatible change would add another variable (e.g., AWS_S3_ENCRYPT_KEY_ID) to specify the key type iff AWS_S3_ENCRYPT_KEY is true.\r\n\r\nA somewhat breaking change would be to use AWS_S3_ENCRYPT_KEY such that if it's empty or None then encryption is disabled, otherwise the encryption type == the value of AWS_S3_ENCRYPT_KEY. This should still act correctly if encryption isn't being used, but if it is, then the AES256 case would need to be explicitly stated (or assumed to be the case if the value is  a boolean value of True).\r\n\r\nEdit: in addition to `ServerSideEncryption`, optional params `Key` and `SSEKMSKeyId` would need to be handled as well.\r\n\r\nYour thoughts?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/70", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/70/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/70/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/70", "id": 290544665, "node_id": "MDU6SXNzdWUyOTA1NDQ2NjU=", "number": 70, "title": "Unable pickle File objects with s3 stprage for django celery tasks", "user": {"login": "MikeVL", "id": 118285, "node_id": "MDQ6VXNlcjExODI4NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/118285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MikeVL", "html_url": "https://github.com/MikeVL", "followers_url": "https://api.github.com/users/MikeVL/followers", "following_url": "https://api.github.com/users/MikeVL/following{/other_user}", "gists_url": "https://api.github.com/users/MikeVL/gists{/gist_id}", "starred_url": "https://api.github.com/users/MikeVL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MikeVL/subscriptions", "organizations_url": "https://api.github.com/users/MikeVL/orgs", "repos_url": "https://api.github.com/users/MikeVL/repos", "events_url": "https://api.github.com/users/MikeVL/events{/privacy}", "received_events_url": "https://api.github.com/users/MikeVL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-22T17:13:03Z", "updated_at": "2018-01-23T10:24:42Z", "closed_at": "2018-01-23T10:23:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nEncodeError: Can't pickle <class 'botocore.client.S3'>: attribute lookup botocore.client.S3 failed\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/69", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/69/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/69/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/69", "id": 286474656, "node_id": "MDU6SXNzdWUyODY0NzQ2NTY=", "number": 69, "title": "Boto3 client error in multi threaded environment. ", "user": {"login": "jnoortheen", "id": 6702219, "node_id": "MDQ6VXNlcjY3MDIyMTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6702219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnoortheen", "html_url": "https://github.com/jnoortheen", "followers_url": "https://api.github.com/users/jnoortheen/followers", "following_url": "https://api.github.com/users/jnoortheen/following{/other_user}", "gists_url": "https://api.github.com/users/jnoortheen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnoortheen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnoortheen/subscriptions", "organizations_url": "https://api.github.com/users/jnoortheen/orgs", "repos_url": "https://api.github.com/users/jnoortheen/repos", "events_url": "https://api.github.com/users/jnoortheen/events{/privacy}", "received_events_url": "https://api.github.com/users/jnoortheen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-01-06T10:15:20Z", "updated_at": "2018-01-11T11:56:07Z", "closed_at": "2018-01-11T11:56:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using uwsgi behind django in production with threads enabled. I occasionally get \r\n\r\n```\r\nKeyError\r\n'endpoint_resolver'\r\n```\r\nfrom this line `django_s3_storage/storage.py in _setup at line 140`\r\n```\r\n        if self.settings.AWS_S3_ENDPOINT_URL:\r\n            connection_kwargs[\"endpoint_url\"] = self.settings.AWS_S3_ENDPOINT_URL\r\n        self.s3_connection = boto3.client(\"s3\", config=Config(\r\n            s3={\"addressing_style\": self.settings.AWS_S3_ADDRESSING_STYLE},\r\n            signature_version=self.settings.AWS_S3_SIGNATURE_VERSION,\r\n        ), **connection_kwargs)\r\n    def _setting_changed_received(self, setting, **kwargs):\r\n        if setting.startswith(\"AWS_\"):\r\n            # HACK: No supported way to close the HTTP session from boto3... :S\r\n            self.s3_connection._endpoint.http_session.close()\r\n````\r\n\r\nupon searching I got [this](http://boto3.readthedocs.io/en/latest/guide/resources.html#multithreading-multiprocessing) from boto3 documentation. Is it possible to do the same? like `django-storages` does [here](https://github.com/jschneier/django-storages/pull/358/files). ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/68", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/68/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/68/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/68", "id": 280822459, "node_id": "MDU6SXNzdWUyODA4MjI0NTk=", "number": 68, "title": "In AWS Lambda, InvalidAccessKeyId error unless AWS_SESSION_TOKEN is given", "user": {"login": "ceefour", "id": 24123, "node_id": "MDQ6VXNlcjI0MTIz", "avatar_url": "https://avatars1.githubusercontent.com/u/24123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ceefour", "html_url": "https://github.com/ceefour", "followers_url": "https://api.github.com/users/ceefour/followers", "following_url": "https://api.github.com/users/ceefour/following{/other_user}", "gists_url": "https://api.github.com/users/ceefour/gists{/gist_id}", "starred_url": "https://api.github.com/users/ceefour/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ceefour/subscriptions", "organizations_url": "https://api.github.com/users/ceefour/orgs", "repos_url": "https://api.github.com/users/ceefour/repos", "events_url": "https://api.github.com/users/ceefour/events{/privacy}", "received_events_url": "https://api.github.com/users/ceefour/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-10T16:29:13Z", "updated_at": "2019-01-07T06:00:59Z", "closed_at": "2017-12-21T12:57:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using django-s3-storage in Lambda (for example with zappa) will throw [InvalidAccessKey error](https://stackoverflow.com/a/47740672/122441) because it doesn't give `AWS_SESSION_TOKEN` which is required for [temporary security credentials given by Lambda](http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html#UsingTemporarySecurityCredentials). e.g.\r\n\r\n```\r\nbotocore.exceptions.ClientError: An error occurred (InvalidAccessKeyId) when calling the ListObjectsV2 operation: The AWS Access Key Id you provided does not exist in our records.\r\n```\r\n\r\nHow to fix this:\r\n\r\n1. Support `AWS_SESSION_TOKEN` in Django `settings.py` (and also add it to README/docs)\r\n2. [Pass that token to boto3](http://boto3.readthedocs.io/en/latest/guide/configuration.html)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/67", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/67/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/67/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/67", "id": 280695007, "node_id": "MDU6SXNzdWUyODA2OTUwMDc=", "number": 67, "title": "File name should use forward slash even in Windows", "user": {"login": "ceefour", "id": 24123, "node_id": "MDQ6VXNlcjI0MTIz", "avatar_url": "https://avatars1.githubusercontent.com/u/24123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ceefour", "html_url": "https://github.com/ceefour", "followers_url": "https://api.github.com/users/ceefour/followers", "following_url": "https://api.github.com/users/ceefour/following{/other_user}", "gists_url": "https://api.github.com/users/ceefour/gists{/gist_id}", "starred_url": "https://api.github.com/users/ceefour/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ceefour/subscriptions", "organizations_url": "https://api.github.com/users/ceefour/orgs", "repos_url": "https://api.github.com/users/ceefour/repos", "events_url": "https://api.github.com/users/ceefour/events{/privacy}", "received_events_url": "https://api.github.com/users/ceefour/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-09T07:04:12Z", "updated_at": "2017-12-21T12:51:38Z", "closed_at": "2017-12-21T12:51:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using `ImageField` and `django-imagekit` with django-s3-storage and I noticed that file `name` of a `ImageField/FileField` is using Windows path separators, e.g.\r\n\r\n```\r\n\"photo_id\": \"family-child\\\\26-abu-bakar.jpg\",\r\n\"photo_url\": \"https://s3.amazonaws.com/media.keluargasamara.com/prd/family-child/26-abu-bakar.jpg\",\r\n\"thumbnail_id\": \"CACHE\\\\images\\\\family-child\\\\26-abu-bakar\\\\352a50472bc938d5e792c202401046be.jpg\",\r\n\"thumbnail_url\": \"https://s3.amazonaws.com/media.keluargasamara.com/prd/CACHE/images/family-child/26-abu-bakar/352a50472bc938d5e792c202401046be.jpg\",\r\n```\r\n\r\nNote that I recently migrated from `django-storages` due to [this bug](https://github.com/matthewwithanm/django-imagekit/issues/391#issuecomment-306754822). django-storages properly used forward slash, but it made django-imagekit unusable (For now).\r\n\r\nI presume that this bug doesn't occur on Linux OS but the behavior should be consistent on Windows, because these paths are **S3 paths, they're not Windows paths**.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/66", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/66/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/66/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/66", "id": 275703391, "node_id": "MDU6SXNzdWUyNzU3MDMzOTE=", "number": 66, "title": "Manually assigning existing S3 file to ImageField", "user": {"login": "sysradium", "id": 16747951, "node_id": "MDQ6VXNlcjE2NzQ3OTUx", "avatar_url": "https://avatars0.githubusercontent.com/u/16747951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sysradium", "html_url": "https://github.com/sysradium", "followers_url": "https://api.github.com/users/sysradium/followers", "following_url": "https://api.github.com/users/sysradium/following{/other_user}", "gists_url": "https://api.github.com/users/sysradium/gists{/gist_id}", "starred_url": "https://api.github.com/users/sysradium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sysradium/subscriptions", "organizations_url": "https://api.github.com/users/sysradium/orgs", "repos_url": "https://api.github.com/users/sysradium/repos", "events_url": "https://api.github.com/users/sysradium/events{/privacy}", "received_events_url": "https://api.github.com/users/sysradium/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-21T13:00:15Z", "updated_at": "2018-02-15T10:31:09Z", "closed_at": "2018-02-15T10:31:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I uploaded a file to s3 without django-s3-storage how easy is it to assign that file to a model without downloading it of s3 and uploading again?\r\n\r\nShould I instantiate an `ImageField` and assign some `django_s3_storage.storage.S3File` object? If so then which fields are mandatory?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/63", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/63/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/63/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/63", "id": 255855100, "node_id": "MDU6SXNzdWUyNTU4NTUxMDA=", "number": 63, "title": "Incompatible with riak-cs", "user": {"login": "flo-dhalluin", "id": 496379, "node_id": "MDQ6VXNlcjQ5NjM3OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/496379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flo-dhalluin", "html_url": "https://github.com/flo-dhalluin", "followers_url": "https://api.github.com/users/flo-dhalluin/followers", "following_url": "https://api.github.com/users/flo-dhalluin/following{/other_user}", "gists_url": "https://api.github.com/users/flo-dhalluin/gists{/gist_id}", "starred_url": "https://api.github.com/users/flo-dhalluin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flo-dhalluin/subscriptions", "organizations_url": "https://api.github.com/users/flo-dhalluin/orgs", "repos_url": "https://api.github.com/users/flo-dhalluin/repos", "events_url": "https://api.github.com/users/flo-dhalluin/events{/privacy}", "received_events_url": "https://api.github.com/users/flo-dhalluin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-07T08:26:05Z", "updated_at": "2017-09-11T08:32:06Z", "closed_at": "2017-09-11T08:32:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/basho/riak_cs\r\n\r\nIs supposed to be an s3 compatible store. When using it I get weird errors : \r\n\r\n  File \"/home/flo/code/python/ablums/.venv/lib/python3.5/site-packages/django/db/models/fields/files.py\", line 94, in save\r\n    self.name = self.storage.save(name, content, max_length=self.field.max_length)\r\n  File \"/home/flo/code/python/ablums/.venv/lib/python3.5/site-packages/django/core/files/storage.py\", line 53, in save\r\n    name = self.get_available_name(name, max_length=max_length)\r\n  File \"/home/flo/code/python/django-s3-storage/django_s3_storage/storage.py\", line 385, in get_available_name\r\n    return super(S3Storage, self).get_available_name(name, max_length)\r\n  File \"/home/flo/code/python/ablums/.venv/lib/python3.5/site-packages/django/core/files/storage.py\", line 77, in get_available_name\r\n    while self.exists(name) or (max_length and len(name) > max_length):\r\n  File \"/home/flo/code/python/django-s3-storage/django_s3_storage/storage.py\", line 295, in exists\r\n    return self.exists(name + \"/\")\r\n  File \"/home/flo/code/python/django-s3-storage/django_s3_storage/storage.py\", line 289, in exists\r\n    return bool(results[\"KeyCount\"])\r\nKeyError: 'KeyCount'\r\n\r\nThe list_objects_v2 does not indeed returns a KeyCount parameters, when I manually call the api. \r\n\r\nI have a working PR, that does the trick by checking that a \"Content\" key exists instead of checking \"KeyCount\" but not sure if this belongs here, or upstream (boto3). \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/62", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/62/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/62/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/62", "id": 248222989, "node_id": "MDU6SXNzdWUyNDgyMjI5ODk=", "number": 62, "title": "Changes to caching", "user": {"login": "marfire", "id": 5117434, "node_id": "MDQ6VXNlcjUxMTc0MzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/5117434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marfire", "html_url": "https://github.com/marfire", "followers_url": "https://api.github.com/users/marfire/followers", "following_url": "https://api.github.com/users/marfire/following{/other_user}", "gists_url": "https://api.github.com/users/marfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/marfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marfire/subscriptions", "organizations_url": "https://api.github.com/users/marfire/orgs", "repos_url": "https://api.github.com/users/marfire/repos", "events_url": "https://api.github.com/users/marfire/events{/privacy}", "received_events_url": "https://api.github.com/users/marfire/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-08-06T03:25:47Z", "updated_at": "2017-08-22T22:24:15Z", "closed_at": "2017-08-22T10:44:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to suggest some changes to the way `django-s3-storage` handles the caching of static files.\r\n\r\nThe first issue is that the default expiration time\u20141 year\u2014is too long. That default applies not just to the versioned `ManifestStaticS3Storage` files but to the regular `StaticS3Storage` files as well. By comparison, `django-storages` doesn't set the header at all, by default, and `whitenoise` [uses](http://whitenoise.evans.io/en/stable/django.html#WHITENOISE_MAX_AGE) either 0 or 60 seconds, depending on `DEBUG`.\r\n\r\nIt's important to set a conservative default here because once a user's browser has cached a file there's no way for the developer to force it to refresh. So someone who starts with the default value and then decides to change it later will find that it's too late for some users.\r\n\r\nThe second issue is that `ManifestStaticS3Storage` doesn't distinguish between the versioned (e.g. `myfile.123456.css`) and the unversioned (`myfile.css`) files when it comes to caching. The way this should work is that the versioned files get cached forever, while the unversioned files get cached for a relatively short time. `whitenoise` [gets this right](https://github.com/evansd/whitenoise/blob/8c16bbccfcd771d0f434d11a6609c95a93323102/whitenoise/base.py#L206), using the filename to figure out if it's a versioned file or not and setting the expiration time accordingly.\r\n\r\nSo my suggestions are:\r\n1. Lower the default expiration time (perhaps to one hour, to match the file storage default, or lower).\r\n2. With `ManifestStaticS3Storage`, set the expiration time differently depending on whether or not it's a versioned file. If it is, set it to cache forever. If it isn't, use the `AWS_S3_MAX_AGE_SECONDS_STATIC` setting.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/61", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/61/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/61/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/61", "id": 245003795, "node_id": "MDU6SXNzdWUyNDUwMDM3OTU=", "number": 61, "title": "Upload file without storing whem on disk first", "user": {"login": "Smosker", "id": 16837024, "node_id": "MDQ6VXNlcjE2ODM3MDI0", "avatar_url": "https://avatars3.githubusercontent.com/u/16837024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Smosker", "html_url": "https://github.com/Smosker", "followers_url": "https://api.github.com/users/Smosker/followers", "following_url": "https://api.github.com/users/Smosker/following{/other_user}", "gists_url": "https://api.github.com/users/Smosker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Smosker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Smosker/subscriptions", "organizations_url": "https://api.github.com/users/Smosker/orgs", "repos_url": "https://api.github.com/users/Smosker/repos", "events_url": "https://api.github.com/users/Smosker/events{/privacy}", "received_events_url": "https://api.github.com/users/Smosker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-24T08:16:32Z", "updated_at": "2017-07-24T11:38:53Z", "closed_at": "2017-07-24T11:38:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! I'm want to use a s3 storage, can you please tell me - can this module load files directly to s3 storage without storing whem localy first in some /tmp dir?\r\n\r\nI have to work with big files and i dont want to store them localy before sending to s3 cloud.\r\nthanks in advance for reply.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/60", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/60/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/60/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/60", "id": 242755257, "node_id": "MDU6SXNzdWUyNDI3NTUyNTc=", "number": 60, "title": "sorl-thumbnail is incompitable with django-s3-storage", "user": {"login": "Flimm", "id": 355454, "node_id": "MDQ6VXNlcjM1NTQ1NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/355454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Flimm", "html_url": "https://github.com/Flimm", "followers_url": "https://api.github.com/users/Flimm/followers", "following_url": "https://api.github.com/users/Flimm/following{/other_user}", "gists_url": "https://api.github.com/users/Flimm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Flimm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Flimm/subscriptions", "organizations_url": "https://api.github.com/users/Flimm/orgs", "repos_url": "https://api.github.com/users/Flimm/repos", "events_url": "https://api.github.com/users/Flimm/events{/privacy}", "received_events_url": "https://api.github.com/users/Flimm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-13T16:14:29Z", "updated_at": "2018-02-15T10:31:22Z", "closed_at": "2018-02-15T10:31:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am trying to run this command, which is part of [sorl-thumbnail](https://github.com/jazzband/sorl-thumbnail):\r\n\r\n```\r\n$ python manage.py thumbnail clear_delete_all\r\nClear the Key Value Store ... [Done]\r\nStarting new HTTPS connection (1): s3-eu-west-1.amazonaws.com\r\nDelete all thumbnail files in THUMBNAIL_PREFIX ... Traceback (most recent call last):\r\n  File \"manage.py\", line 20, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"python/lib/python3.6/site-packages/django/core/management/__init__.py\", line 363, in execute_from_command_line\r\n    utility.execute()\r\n  File \"python/lib/python3.6/site-packages/django/core/management/__init__.py\", line 355, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"python/lib/python3.6/site-packages/django/core/management/base.py\", line 283, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"python/lib/python3.6/site-packages/django/core/management/base.py\", line 330, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"python/lib/python3.6/site-packages/sorl/thumbnail/management/commands/thumbnail.py\", line 74, in handle\r\n    delete_all_thumbnails()\r\n  File \"python/lib/python3.6/site-packages/sorl/thumbnail/images.py\", line 222, in delete_all_thumbnails\r\n    path = os.path.join(storage.location, settings.THUMBNAIL_PREFIX)\r\n  File \"python/lib/python3.6/site-packages/django/utils/functional.py\", line 239, in inner\r\n    return func(self._wrapped, *args)\r\nAttributeError: 'S3Storage' object has no attribute 'location'\r\n```\r\n\r\nIt seems that `sorl-thumbnail` expects there to be a `location` attribute on `S3Storage`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/56", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/56/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/56/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/56", "id": 238156572, "node_id": "MDU6SXNzdWUyMzgxNTY1NzI=", "number": 56, "title": "Problems with staticfiles.json while using ManifestStaticS3Storage", "user": {"login": "Edke", "id": 115118, "node_id": "MDQ6VXNlcjExNTExOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/115118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edke", "html_url": "https://github.com/Edke", "followers_url": "https://api.github.com/users/Edke/followers", "following_url": "https://api.github.com/users/Edke/following{/other_user}", "gists_url": "https://api.github.com/users/Edke/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edke/subscriptions", "organizations_url": "https://api.github.com/users/Edke/orgs", "repos_url": "https://api.github.com/users/Edke/repos", "events_url": "https://api.github.com/users/Edke/events{/privacy}", "received_events_url": "https://api.github.com/users/Edke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-06-23T14:20:25Z", "updated_at": "2017-06-27T11:54:37Z", "closed_at": "2017-06-27T11:54:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello @etianen \r\n\r\nI'm having trouble setting up static files using `django_s3_storage.storage.ManifestStaticS3Storage`. While accessing static files via static tag or using collectstatic, I'm getting Exception:\r\n\r\nOSError: S3Storage error at u'staticfiles.json': An error occurred (NoSuchKey) when calling the GetObject operation: The specified key does not exist.\r\n\r\nEverything works while using `django_s3_storage.storage.StaticS3Storage`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/55", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/55/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/55/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/55", "id": 237247134, "node_id": "MDU6SXNzdWUyMzcyNDcxMzQ=", "number": 55, "title": "In some instances, files are not getting copied over to s3 correctly.", "user": {"login": "kencochrane", "id": 261601, "node_id": "MDQ6VXNlcjI2MTYwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/261601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kencochrane", "html_url": "https://github.com/kencochrane", "followers_url": "https://api.github.com/users/kencochrane/followers", "following_url": "https://api.github.com/users/kencochrane/following{/other_user}", "gists_url": "https://api.github.com/users/kencochrane/gists{/gist_id}", "starred_url": "https://api.github.com/users/kencochrane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kencochrane/subscriptions", "organizations_url": "https://api.github.com/users/kencochrane/orgs", "repos_url": "https://api.github.com/users/kencochrane/repos", "events_url": "https://api.github.com/users/kencochrane/events{/privacy}", "received_events_url": "https://api.github.com/users/kencochrane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-06-20T15:14:03Z", "updated_at": "2017-06-27T11:52:40Z", "closed_at": "2017-06-27T11:52:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Depending on what you have for file names, some of the files are not getting copied over correctly.\r\n\r\nIf you have the following two files:\r\n- assets/bootstrap/css/bootstrap.min.css.map\r\n- assets/bootstrap/css/bootstrap.min.css\r\n\r\nIt will copy over the first one `bootstrap.min.css.map` but it will not copy over the second one `bootstrap.min.css`. This is because of the way we determine if a file exists or not.\r\n\r\nLook at the exists method found here: https://github.com/etianen/django-s3-storage/blob/master/django_s3_storage/storage.py#L269\r\n\r\n```\r\n    def exists(self, name):\r\n        # We also need to check for directory existence, so we'll list matching\r\n        # keys and return success if any match.\r\n        results = self.s3_connection.list_objects_v2(\r\n            Bucket=self.settings.AWS_S3_BUCKET_NAME,\r\n            MaxKeys=1,\r\n            Prefix=self._get_key_name(name),\r\n        )\r\n        return bool(results[\"KeyCount\"])\r\n```\r\nWhat this method does is it will do a listing of the bucket using the prefix of the given name. When it wants to see if `assets/bootstrap/css/bootstrap.min.css` exists it will list the contents of the bucket, using the prefix of `assets/bootstrap/css/bootstrap.min.css` and return at most 1 key.\r\n\r\nThis method will return `True` even if `assets/bootstrap/css/bootstrap.min.css` isn't there if the `assets/bootstrap/css/bootstrap.min.css.map` file is there because the prefix of `assets/bootstrap/css/bootstrap.min.css` matches the file `assets/bootstrap/css/bootstrap.min.css.map`. So you end up with a false positive. If the files doesn't exists, it will use the `get_available_name()` method from here: https://github.com/django/django/blob/master/django/core/files/storage.py#L60 to generate a random file name and store that.\r\n\r\nWhat happens is that the file is copied over, but the name was changed, and thus is unavailable when you try and fetch from s3 directly.\r\n\r\nThe fix is to do something like this.\r\n\r\n```\r\n    def exists(self, name):\r\n        try:\r\n            self.s3_connection.head_object(\r\n                Bucket=self.settings.AWS_S3_BUCKET_NAME,\r\n                Key=self._get_key_name(name))\r\n            return True\r\n        except ClientError as e:\r\n            if e.response['Error']['Code'] == \"404\":\r\n                return False\r\n            else:\r\n                raise e\r\n```\r\nThis code makes a head call for the object, and if it returns with no error, you know it exists, if it returns an error, check to make sure it is a 404, and not another error. If a 404, then we know the file doesn't exists.\r\n\r\nSimilar code can be found here: https://github.com/jschneier/django-storages/blob/master/storages/backends/s3boto3.py#L452-L467 and https://stackoverflow.com/questions/33842944/check-if-a-key-exists-in-a-bucket-in-s3-using-boto3\r\n\r\nI can submit a PR for the fix, but I had one question around the comment in the exists method.\r\n\r\n```\r\n  # We also need to check for directory existence, so we'll list matching\r\n  # keys and return success if any match.\r\n```\r\nIt says that we need to also check for directory existence. My code from above doesn't work for directories, so we will need a solution for that use case. Do you know if that comment is still relevant?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/53", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/53/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/53/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/53", "id": 235954973, "node_id": "MDU6SXNzdWUyMzU5NTQ5NzM=", "number": 53, "title": "django s3 storages does not recognise the bucket name", "user": {"login": "KakarN", "id": 9060759, "node_id": "MDQ6VXNlcjkwNjA3NTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/9060759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KakarN", "html_url": "https://github.com/KakarN", "followers_url": "https://api.github.com/users/KakarN/followers", "following_url": "https://api.github.com/users/KakarN/following{/other_user}", "gists_url": "https://api.github.com/users/KakarN/gists{/gist_id}", "starred_url": "https://api.github.com/users/KakarN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KakarN/subscriptions", "organizations_url": "https://api.github.com/users/KakarN/orgs", "repos_url": "https://api.github.com/users/KakarN/repos", "events_url": "https://api.github.com/users/KakarN/events{/privacy}", "received_events_url": "https://api.github.com/users/KakarN/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-14T17:34:17Z", "updated_at": "2017-11-14T14:52:20Z", "closed_at": "2017-11-14T14:52:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using django-s3-storage==0.11.2 and boto3==1.4.4. These are in the settings.py:\r\n\r\n```\r\n\tSTATIC_URL = '/static/'\r\n\tSTATICFILES_DIRS = [\r\n\t    os.path.join(BASE_DIR, \"static\"),\r\n\t]\r\n\tSTATIC_ROOT = os.path.join(BASE_DIR, 'static_cdn')\r\n\tMEDIA_URL = '/media/'\r\n\tMEDIA_ROOT = os.path.join(BASE_DIR, 'media_cdn')\r\n\r\n\tAWS_S3_BUCKET_NAME = \"my-bucket-name\"\r\n\tAWS_ACCESS_KEY_ID = 'test_id_x'\r\n\tAWS_SECRET_ACCESS_KEY = 'test_id_x+test_id_x'\r\n\tDEFAULT_FILE_STORAGE = \"django_s3_storage.storage.S3Storage\"\r\n\tSTATICFILES_STORAGE = \"django_s3_storage.storage.StaticS3Storage\"\r\n\tAWS_S3_ADDRESSING_STYLE = \"auto\"\r\n\tAWS_S3_BUCKET_AUTH_STATIC = False\r\n\tAWS_S3_MAX_AGE_SECONDS_STATIC =  60 * 60 * 24 * 365  # 1 year.\r\n\tAWS_S3_BUCKET_AUTH = False\r\n\tAWS_S3_MAX_AGE_SECONDS = 60 * 60 * 24 * 365  # 1 year.\r\n```\r\n\r\nI have also ran these command:\r\n\r\n`    manage.py s3_sync_meta django.core.files.storage.default_storage`\r\n\r\nBut when I run `collectstatic` or this command\r\n\r\n`\tmanage.py s3_sync_meta django.contrib.staticfiles.storage.staticfiles_storage`\r\n\r\nI get this error:\r\n\r\n> \tbotocore.exceptions.ParamValidationError: Parameter validation failed:\r\n> \tInvalid bucket name \"\": Bucket name must match the regex \"^[a-zA-Z0-9.\\-_]{1,255}$\"\r\n\r\nI have already created the bucket, and the bucket name is correct, because this works and does not gives any error:\r\n\r\n    `s3.meta.client.head_bucket(Bucket='my-bucket-name')`\r\n\r\nI don't know what am I missing here? Could you help me out please.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/51", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/51/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/51/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/51", "id": 231855493, "node_id": "MDU6SXNzdWUyMzE4NTU0OTM=", "number": 51, "title": "listdir() doesn't work at bucket root", "user": {"login": "aaugustin", "id": 788910, "node_id": "MDQ6VXNlcjc4ODkxMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/788910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaugustin", "html_url": "https://github.com/aaugustin", "followers_url": "https://api.github.com/users/aaugustin/followers", "following_url": "https://api.github.com/users/aaugustin/following{/other_user}", "gists_url": "https://api.github.com/users/aaugustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaugustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaugustin/subscriptions", "organizations_url": "https://api.github.com/users/aaugustin/orgs", "repos_url": "https://api.github.com/users/aaugustin/repos", "events_url": "https://api.github.com/users/aaugustin/events{/privacy}", "received_events_url": "https://api.github.com/users/aaugustin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-28T08:46:10Z", "updated_at": "2017-05-30T13:45:31Z", "closed_at": "2017-05-29T09:05:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`storage.listdir(path)` normalizes `path` as a bucket key, adds a slash, and then passes this prefix to the `boto3` API here:\r\n\r\nhttps://github.com/etianen/django-s3-storage/blob/9d41df75959590ccc50aa499b12e7af0c0fc7d06/django_s3_storage/storage.py#L278\r\n\r\nThis doesn't seem to work for the bucket root.\r\n\r\nAny of `''`, `'/'` or `'.'` gets normalized to `'.'` and passing `Prefix=\"./\"` to `list_objects_v2` doesn't work, as shown below.\r\n\r\n```\r\n# expected result with Prefix=\"\"\r\n>>> paginator = self.s3_connection.get_paginator(\"list_objects_v2\")\r\n>>> pages = paginator.paginate(Bucket=self.settings.AWS_S3_BUCKET_NAME, Delimiter=\"/\", Prefix=\"\")\r\n>>> list(pages)\r\n[{'ResponseMetadata': {'RequestId': 'EAC9F38060385E98', 'HostId': 'DjpPUviEQNUvnoBeje+TgUQDwR0QtMWJXR+7nfNxjimsj3I2dBYZ9fTvbwZR1ufG9ZN9FN/LOVs=', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amz-id-2': 'DjpPUviEQNUvnoBeje+TgUQDwR0QtMWJXR+7nfNxjimsj3I2dBYZ9fTvbwZR1ufG9ZN9FN/LOVs=', 'x-amz-request-id': 'EAC9F38060385E98', 'date': 'Sun, 28 May 2017 08:36:24 GMT', 'x-amz-bucket-region': 'eu-west-1', 'content-type': 'application/xml', 'transfer-encoding': 'chunked', 'server': 'AmazonS3'}, 'RetryAttempts': 0}, 'IsTruncated': False, 'Name': 'myks-org--photos', 'Prefix': '', 'Delimiter': '/', 'MaxKeys': 1000, 'CommonPrefixes': [{'Prefix': '2002/'}, {'Prefix': '2003/'}, {'Prefix': '2004/'}, {'Prefix': '2005/'}, {'Prefix': '2006/'}, {'Prefix': '2007/'}, {'Prefix': '2008/'}, {'Prefix': '2009/'}, {'Prefix': '2010/'}, {'Prefix': '2011/'}, {'Prefix': '2012/'}, {'Prefix': '2013/'}, {'Prefix': '2014/'}, {'Prefix': '2015/'}, {'Prefix': '2016/'}, {'Prefix': '2017/'}], 'KeyCount': 16}]\r\n\r\n# other Prefix values don't work\r\n>>> pages = paginator.paginate(Bucket=self.settings.AWS_S3_BUCKET_NAME, Delimiter=\"/\", Prefix=\".\")\r\n>>> list(pages)\r\n[{'ResponseMetadata': {'RequestId': '8A7908AE11249562', 'HostId': 'YlaPCrxFiS95+BZ1bhFFLv6Efx9iYvfrM4hm/DvSUmLR5TpACQX9tReixvcLP2NnCkw8yM3lU7k=', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amz-id-2': 'YlaPCrxFiS95+BZ1bhFFLv6Efx9iYvfrM4hm/DvSUmLR5TpACQX9tReixvcLP2NnCkw8yM3lU7k=', 'x-amz-request-id': '8A7908AE11249562', 'date': 'Sun, 28 May 2017 08:36:33 GMT', 'x-amz-bucket-region': 'eu-west-1', 'content-type': 'application/xml', 'transfer-encoding': 'chunked', 'server': 'AmazonS3'}, 'RetryAttempts': 0}, 'IsTruncated': False, 'Name': 'myks-org--photos', 'Prefix': '.', 'Delimiter': '/', 'MaxKeys': 1000, 'KeyCount': 0}]\r\n>>> pages = paginator.paginate(Bucket=self.settings.AWS_S3_BUCKET_NAME, Delimiter=\"/\", Prefix=\"/\")\r\n>>> list(pages)\r\n[{'ResponseMetadata': {'RequestId': '364AEA1FB40BB0AE', 'HostId': 'j4Ysb++IZlDgXPbrYw7Jq0DjcQAANECKwBXSzUZT3UMzcKGd8phHcyqZd6rMZxX76/AT5HzE/ew=', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amz-id-2': 'j4Ysb++IZlDgXPbrYw7Jq0DjcQAANECKwBXSzUZT3UMzcKGd8phHcyqZd6rMZxX76/AT5HzE/ew=', 'x-amz-request-id': '364AEA1FB40BB0AE', 'date': 'Sun, 28 May 2017 08:36:40 GMT', 'x-amz-bucket-region': 'eu-west-1', 'content-type': 'application/xml', 'transfer-encoding': 'chunked', 'server': 'AmazonS3'}, 'RetryAttempts': 0}, 'IsTruncated': False, 'Name': 'myks-org--photos', 'Prefix': '/', 'Delimiter': '/', 'MaxKeys': 1000, 'KeyCount': 0}]\r\n>>> pages = paginator.paginate(Bucket=self.settings.AWS_S3_BUCKET_NAME, Delimiter=\"/\", Prefix=\"./\")\r\n>>> list(pages)\r\n[{'ResponseMetadata': {'RequestId': '401D677C8330DAEB', 'HostId': 'E2qWXeK/pXA9TTfH2i4cDs+R3zm+Op7GNSRoeTxYLup/V5yDDF2akgRYxdKq9MzX6L2HX1aH2S4=', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amz-id-2': 'E2qWXeK/pXA9TTfH2i4cDs+R3zm+Op7GNSRoeTxYLup/V5yDDF2akgRYxdKq9MzX6L2HX1aH2S4=', 'x-amz-request-id': '401D677C8330DAEB', 'date': 'Sun, 28 May 2017 08:40:26 GMT', 'x-amz-bucket-region': 'eu-west-1', 'content-type': 'application/xml', 'transfer-encoding': 'chunked', 'server': 'AmazonS3'}, 'RetryAttempts': 0}, 'IsTruncated': False, 'Name': 'myks-org--photos', 'Prefix': './', 'Delimiter': '/', 'MaxKeys': 1000, 'KeyCount': 0}]\r\n```\r\n\r\nI think we need a special case like this:\r\n\r\n```python\r\npath = self._get_key_name(path)\r\npath = \"\" if path == \".\" else path + \"/\"\r\n```\r\n\r\nThere's a variety of ways to express this logic.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/49", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/49/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/49/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/49", "id": 228619082, "node_id": "MDU6SXNzdWUyMjg2MTkwODI=", "number": 49, "title": "An error occurred (InvalidArgument) when calling the ListObjectsV2 operation", "user": {"login": "TreHack", "id": 17263326, "node_id": "MDQ6VXNlcjE3MjYzMzI2", "avatar_url": "https://avatars2.githubusercontent.com/u/17263326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TreHack", "html_url": "https://github.com/TreHack", "followers_url": "https://api.github.com/users/TreHack/followers", "following_url": "https://api.github.com/users/TreHack/following{/other_user}", "gists_url": "https://api.github.com/users/TreHack/gists{/gist_id}", "starred_url": "https://api.github.com/users/TreHack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TreHack/subscriptions", "organizations_url": "https://api.github.com/users/TreHack/orgs", "repos_url": "https://api.github.com/users/TreHack/repos", "events_url": "https://api.github.com/users/TreHack/events{/privacy}", "received_events_url": "https://api.github.com/users/TreHack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-05-15T06:41:27Z", "updated_at": "2017-11-14T14:52:07Z", "closed_at": "2017-11-14T14:52:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I upload a file, I get the below error.\r\nI have also try django-storages, when I use boto2, everthing is ok. but when I user boto3, I got the same error? Are there some bugs?\r\n```\r\nTraceback:\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/core/handlers/base.py\" in get_response\r\n  132.                     response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/views/decorators/csrf.py\" in wrapped_view\r\n  58.         return view_func(*args, **kwargs)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/rest_framework/viewsets.py\" in view\r\n  83.             return self.dispatch(request, *args, **kwargs)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/rest_framework/views.py\" in dispatch\r\n  483.             response = self.handle_exception(exc)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/rest_framework/views.py\" in handle_exception\r\n  443.             self.raise_uncaught_exception(exc)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/rest_framework/views.py\" in dispatch\r\n  480.             response = handler(request, *args, **kwargs)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/rest_framework/mixins.py\" in create\r\n  21.         self.perform_create(serializer)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/rest_framework/mixins.py\" in perform_create\r\n  26.         serializer.save()\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/rest_framework/serializers.py\" in save\r\n  214.             self.instance = self.create(validated_data)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/rest_framework/serializers.py\" in create\r\n  906.             instance = ModelClass.objects.create(**validated_data)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/db/models/manager.py\" in manager_method\r\n  127.                 return getattr(self.get_queryset(), name)(*args, **kwargs)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/db/models/query.py\" in create\r\n  348.         obj.save(force_insert=True, using=self.db)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/db/models/base.py\" in save\r\n  734.                        force_update=force_update, update_fields=update_fields)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/db/models/base.py\" in save_base\r\n  762.             updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/db/models/base.py\" in _save_table\r\n  846.             result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/db/models/base.py\" in _do_insert\r\n  885.                                using=using, raw=raw)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/db/models/manager.py\" in manager_method\r\n  127.                 return getattr(self.get_queryset(), name)(*args, **kwargs)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/db/models/query.py\" in _insert\r\n  920.         return query.get_compiler(using=using).execute_sql(return_id)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/db/models/sql/compiler.py\" in execute_sql\r\n  973.             for sql, params in self.as_sql():\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/db/models/sql/compiler.py\" in as_sql\r\n  931.                 for obj in self.query.objs\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/db/models/fields/files.py\" in pre_save\r\n  314.             file.save(file.name, file, save=False)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/db/models/fields/files.py\" in save\r\n  93.             self.name = self.storage.save(name, content, max_length=self.field.max_length)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/core/files/storage.py\" in save\r\n  53.             name = self.get_available_name(name, max_length=max_length)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django/core/files/storage.py\" in get_available_name\r\n  89.         while self.exists(name) or (max_length and len(name) > max_length):\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/django_s3_storage/storage.py\" in exists\r\n  273.             Prefix=self._get_key_name(name),\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/botocore/client.py\" in _api_call\r\n  253.             return self._make_api_call(operation_name, kwargs)\r\nFile \"/home/yzxn1709/git-lab/top_cpt/env/local/lib/python2.7/site-packages/botocore/client.py\" in _make_api_call\r\n  557.             raise error_class(parsed_response, operation_name)\r\n\r\nException Type: ClientError at /v1/api/package\r\nException Value: An error occurred (InvalidArgument) when calling the ListObjectsV2 operation: Unknown\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/48", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/48/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/48/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/48", "id": 227964019, "node_id": "MDU6SXNzdWUyMjc5NjQwMTk=", "number": 48, "title": "Each collectstatic generates a new available name for certain specific files", "user": {"login": "Bartvds", "id": 685984, "node_id": "MDQ6VXNlcjY4NTk4NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/685984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bartvds", "html_url": "https://github.com/Bartvds", "followers_url": "https://api.github.com/users/Bartvds/followers", "following_url": "https://api.github.com/users/Bartvds/following{/other_user}", "gists_url": "https://api.github.com/users/Bartvds/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bartvds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bartvds/subscriptions", "organizations_url": "https://api.github.com/users/Bartvds/orgs", "repos_url": "https://api.github.com/users/Bartvds/repos", "events_url": "https://api.github.com/users/Bartvds/events{/privacy}", "received_events_url": "https://api.github.com/users/Bartvds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-11T11:45:08Z", "updated_at": "2018-03-05T11:14:32Z", "closed_at": "2017-05-12T09:06:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have the weirdest issue where every collectstatic copies a specific file to S3 under a new random name (looks like it is generated by the storage API's [`get_available_name()`](https://docs.djangoproject.com/en/1.11/ref/files/storage/#django.core.files.storage.Storage.get_available_name)).  This is of course very problematic as it break URL's\r\n\r\nIn the current project it does this for a .woff file from fontawesome  (the one from the [django-suit V2 preview](https://github.com/darklow/django-suit/tree/v2/suit/static/suit/fonts)). \r\n\r\nIn another projects this happens for a few different files.\r\n\r\nExample, note only this particular `.woff` file gets duplicated. The weird thing is that the original file name (without the random postfix) is missing. \r\n\r\nI feel this might have something to do with eventual consistency?  It looks like storage gets syncing, somehow thinks the files changed (incorrectly), then tries to replace it with a delete and create, but hitting a race condition between the delete and create in django's storage mechanism?\r\n\r\n![image](https://cloud.githubusercontent.com/assets/685984/25947129/73605816-364e-11e7-9226-4a5c08e68313.png)\r\n\r\nThis is deployed from EC2 on the official Ubuntu 16 AMI with python 3.6, django 1.11, django-s3-storage 0.11.1. This particular .woff file comes from a \"pip install -e git+git://..\" directly from django-suit's github.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/46", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/46/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/46/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/46", "id": 213683534, "node_id": "MDU6SXNzdWUyMTM2ODM1MzQ=", "number": 46, "title": "Files not updated on s3", "user": {"login": "Nizebulous", "id": 1147309, "node_id": "MDQ6VXNlcjExNDczMDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1147309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nizebulous", "html_url": "https://github.com/Nizebulous", "followers_url": "https://api.github.com/users/Nizebulous/followers", "following_url": "https://api.github.com/users/Nizebulous/following{/other_user}", "gists_url": "https://api.github.com/users/Nizebulous/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nizebulous/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nizebulous/subscriptions", "organizations_url": "https://api.github.com/users/Nizebulous/orgs", "repos_url": "https://api.github.com/users/Nizebulous/repos", "events_url": "https://api.github.com/users/Nizebulous/events{/privacy}", "received_events_url": "https://api.github.com/users/Nizebulous/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-03-13T06:27:41Z", "updated_at": "2017-06-29T09:00:55Z", "closed_at": "2017-06-29T09:00:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to push a change to some css files that I have and they aren't overwriting the existing files on s3 even though they had changed. I saw the other issue #43 and thought that this might be related to that \"fix\". So I'm trying to use 0.11.0. I will let you know how that goes.\r\nThis is on Django 1.10.5 and Python 3.4 (on elastic beanstalk).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/44", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/44/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/44/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/44", "id": 208550244, "node_id": "MDU6SXNzdWUyMDg1NTAyNDQ=", "number": 44, "title": "S3 custom domain and collectstatic", "user": {"login": "dionysio", "id": 2955632, "node_id": "MDQ6VXNlcjI5NTU2MzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2955632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dionysio", "html_url": "https://github.com/dionysio", "followers_url": "https://api.github.com/users/dionysio/followers", "following_url": "https://api.github.com/users/dionysio/following{/other_user}", "gists_url": "https://api.github.com/users/dionysio/gists{/gist_id}", "starred_url": "https://api.github.com/users/dionysio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dionysio/subscriptions", "organizations_url": "https://api.github.com/users/dionysio/orgs", "repos_url": "https://api.github.com/users/dionysio/repos", "events_url": "https://api.github.com/users/dionysio/events{/privacy}", "received_events_url": "https://api.github.com/users/dionysio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-17T20:42:40Z", "updated_at": "2018-02-15T10:31:35Z", "closed_at": "2018-02-15T10:31:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a cdn.domain.com that points to a s3 bucket with the same name. In my settings for this app I've added:\r\n\r\n```\r\nAWS_S3_CALLING_FORMAT_STATIC = 'boto.s3.connection.VHostCallingFormat'\r\nAWS_S3_HOST_STATIC = 'cdn.domain.com'\r\n```\r\nand URLs that are generated by {% static %} now work properly. I still have one problem though - when I run collectstatic command I get:\r\n\r\n```\r\n<Error>\r\n    <Code>InvalidRequest</Code>\r\n    <Message>\r\n        The authorization mechanism you have provided is not supported. Please use AWS4-HMAC-SHA256.\r\n    </Message>\r\n    <RequestId>FCA19FC7046E571A</RequestId>\r\n    <HostId>...</HostId>\r\n</Error>\r\n```\r\n\r\nIf I remove AWS_S3_CALLING_FORMAT_STATIC and AWS_S3_HOST_STATIC settings then collectstatic runs fine and I can see files being uploaded to S3. Am I missing some other setting here? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/43", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/43/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/43/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/43", "id": 207478645, "node_id": "MDU6SXNzdWUyMDc0Nzg2NDU=", "number": 43, "title": "Files are always re-uploaded to S3 storage", "user": {"login": "etianen", "id": 148744, "node_id": "MDQ6VXNlcjE0ODc0NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/148744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etianen", "html_url": "https://github.com/etianen", "followers_url": "https://api.github.com/users/etianen/followers", "following_url": "https://api.github.com/users/etianen/following{/other_user}", "gists_url": "https://api.github.com/users/etianen/gists{/gist_id}", "starred_url": "https://api.github.com/users/etianen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etianen/subscriptions", "organizations_url": "https://api.github.com/users/etianen/orgs", "repos_url": "https://api.github.com/users/etianen/repos", "events_url": "https://api.github.com/users/etianen/events{/privacy}", "received_events_url": "https://api.github.com/users/etianen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166596436, "node_id": "MDU6TGFiZWwxNjY1OTY0MzY=", "url": "https://api.github.com/repos/etianen/django-s3-storage/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 428777430, "node_id": "MDU6TGFiZWw0Mjg3Nzc0MzA=", "url": "https://api.github.com/repos/etianen/django-s3-storage/labels/needs%20more%20info", "name": "needs more info", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-02-14T10:39:15Z", "updated_at": "2017-02-21T09:24:43Z", "closed_at": "2017-02-21T09:24:43Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/42", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/42/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/42/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/42", "id": 206964085, "node_id": "MDU6SXNzdWUyMDY5NjQwODU=", "number": 42, "title": "IOError: S3Storage error on Heroku", "user": {"login": "dbinetti", "id": 161722, "node_id": "MDQ6VXNlcjE2MTcyMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/161722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbinetti", "html_url": "https://github.com/dbinetti", "followers_url": "https://api.github.com/users/dbinetti/followers", "following_url": "https://api.github.com/users/dbinetti/following{/other_user}", "gists_url": "https://api.github.com/users/dbinetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbinetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbinetti/subscriptions", "organizations_url": "https://api.github.com/users/dbinetti/orgs", "repos_url": "https://api.github.com/users/dbinetti/repos", "events_url": "https://api.github.com/users/dbinetti/events{/privacy}", "received_events_url": "https://api.github.com/users/dbinetti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-02-11T07:03:04Z", "updated_at": "2017-02-15T09:41:42Z", "closed_at": "2017-02-11T16:39:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "With version 0.11.0, Python 2.7.13\r\n\r\nI ran the `collectstatic` command manually, from a Heroku bash shell with `--clear`.  I then tried to do an automated build (normal Heroku deploy) and got this error.\r\n\r\n```\r\n-----> Python app detected\r\n     $ pip install -r requirements.txt\r\n     $ python manage.py collectstatic --noinput\r\n       Traceback (most recent call last):\r\n         File \"manage.py\", line 11, in <module>\r\n           execute_from_command_line(sys.argv)\r\n         File \"/app/.heroku/python/lib/python2.7/site-packages/django/core/management/__init__.py\", line 367, in execute_from_command_line\r\n           utility.execute()\r\n         File \"/app/.heroku/python/lib/python2.7/site-packages/django/core/management/__init__.py\", line 359, in execute\r\n           self.fetch_command(subcommand).run_from_argv(self.argv)\r\n         File \"/app/.heroku/python/lib/python2.7/site-packages/django/core/management/base.py\", line 294, in run_from_argv\r\n           self.execute(*args, **cmd_options)\r\n         File \"/app/.heroku/python/lib/python2.7/site-packages/django/core/management/base.py\", line 345, in execute\r\n           output = self.handle(*args, **options)\r\n         File \"/app/.heroku/python/lib/python2.7/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 193, in handle\r\n           collected = self.collect()\r\n         File \"/app/.heroku/python/lib/python2.7/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 124, in collect\r\n           handler(path, prefixed_path, storage)\r\n         File \"/app/.heroku/python/lib/python2.7/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 349, in copy_file\r\n           if not self.delete_file(path, prefixed_path, source_storage):\r\n         File \"/app/.heroku/python/lib/python2.7/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 258, in delete_file\r\n           target_last_modified = self.storage.get_modified_time(prefixed_path)\r\n         File \"/app/.heroku/python/lib/python2.7/site-packages/django/core/files/storage.py\", line 230, in get_modified_time\r\n           dt = self.modified_time(name)\r\n         File \"/app/.heroku/python/lib/python2.7/site-packages/django_s3_storage/storage.py\", line 322, in modified_time\r\n           return make_naive(self.meta(name)[\"LastModified\"])\r\n         File \"/app/.heroku/python/lib/python2.7/site-packages/django_s3_storage/storage.py\", line 32, in _do_wrap_errors\r\n           raise IOError(\"S3Storage error at {!r}: {}\".format(name, force_text(ex)))\r\n       IOError: S3Storage error at u'rest_framework/fonts/glyphicons-halflings-regular.woff': An error occurred (404) when calling the HeadObject operation: Not Found\r\n !     Error while running '$ python manage.py collectstatic --noinput'.\r\n       See traceback above for details.\r\n       You may need to update application code to resolve this error.\r\n       Or, you can disable collectstatic for this application:\r\n          $ heroku config:set DISABLE_COLLECTSTATIC=1\r\n       https://devcenter.heroku.com/articles/django-assets\r\n```\r\n\r\nDowngrading to 0.9.11 resolved the issue.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/40", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/40/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/40/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/40", "id": 206802512, "node_id": "MDU6SXNzdWUyMDY4MDI1MTI=", "number": 40, "title": "Bug with manifest storage and relative URLs", "user": {"login": "shauns", "id": 234027, "node_id": "MDQ6VXNlcjIzNDAyNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/234027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shauns", "html_url": "https://github.com/shauns", "followers_url": "https://api.github.com/users/shauns/followers", "following_url": "https://api.github.com/users/shauns/following{/other_user}", "gists_url": "https://api.github.com/users/shauns/gists{/gist_id}", "starred_url": "https://api.github.com/users/shauns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shauns/subscriptions", "organizations_url": "https://api.github.com/users/shauns/orgs", "repos_url": "https://api.github.com/users/shauns/repos", "events_url": "https://api.github.com/users/shauns/events{/privacy}", "received_events_url": "https://api.github.com/users/shauns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-02-10T13:58:59Z", "updated_at": "2017-02-10T18:44:44Z", "closed_at": "2017-02-10T18:44:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider Django's `base.css`: https://github.com/django/django/blob/1.10.5/django/contrib/admin/static/admin/css/base.css#L356\r\n\r\nIt uses a relative reference to another resource:\r\n```\r\nbackground: url(../img/sorting-icons.svg) 0 0 no-repeat;\r\n```\r\n\r\nWhen it comes to post-processing, we end up calling `.exists('../img/sorting-icons.svg')` method in this library. `_get_key_name` returns `shaun-test/admin/css/../img/sorting-icons.svg`, *not* `shaun-test/admin/img/sorting-icons.svg` as expected. This looks to be a regression caused by https://github.com/etianen/django-s3-storage/commit/893608027e8a78dc9b57f783d0c21541cbd2dad2 \r\n\r\nI'll try and get a test case/fix together.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/39", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/39/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/39/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/39", "id": 206179150, "node_id": "MDU6SXNzdWUyMDYxNzkxNTA=", "number": 39, "title": "Document required IAM policies", "user": {"login": "Bartvds", "id": 685984, "node_id": "MDQ6VXNlcjY4NTk4NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/685984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bartvds", "html_url": "https://github.com/Bartvds", "followers_url": "https://api.github.com/users/Bartvds/followers", "following_url": "https://api.github.com/users/Bartvds/following{/other_user}", "gists_url": "https://api.github.com/users/Bartvds/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bartvds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bartvds/subscriptions", "organizations_url": "https://api.github.com/users/Bartvds/orgs", "repos_url": "https://api.github.com/users/Bartvds/repos", "events_url": "https://api.github.com/users/Bartvds/events{/privacy}", "received_events_url": "https://api.github.com/users/Bartvds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-08T12:03:35Z", "updated_at": "2017-02-08T17:24:22Z", "closed_at": "2017-02-08T13:28:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having a bit of trouble figuring out what the most restrictive IAM policy for S3 storage is. I'd expect a simple read/write policy like this to work (but it doesn't)\r\n\r\n````json\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": [\"s3:ListBucket\"],\r\n      \"Resource\": [\"arn:aws:s3:::my-bucket\"]\r\n    },\r\n    {\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": [\r\n        \"s3:PutObject\",\r\n        \"s3:GetObject\",\r\n        \"s3:DeleteObject\"\r\n      ],\r\n      \"Resource\": [\"arn:aws:s3:::my-bucket/*\"]\r\n    }\r\n  ]\r\n}\r\n````\r\n\r\nI've googled around a bit, and I see the following a lot. It seems to work, but it feels a bit to broad and cargo-culted, especially the \"s3:*Object*\" wildcards (it includes Torrents, Version en ACL stuff).\r\n\r\n````json\r\n{\r\n    \"Version\": \"2012-10-17\",\r\n    \"Statement\": [\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"s3:ListBucket\",\r\n                \"s3:GetBucketLocation\",\r\n                \"s3:ListBucketMultipartUploads\",\r\n                \"s3:ListBucketVersions\"\r\n            ],\r\n            \"Resource\": [\r\n                \"arn:aws:s3:::my-bucket\"\r\n            ]\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"s3:*Object*\",\r\n                \"s3:ListMultipartUploadParts\",\r\n                \"s3:AbortMultipartUpload\"\r\n            ],\r\n            \"Resource\": [\r\n                \"arn:aws:s3:::my-bucket/*\"\r\n            ]\r\n        }\r\n    ]\r\n}\r\n````", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/38", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/38/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/38/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/38", "id": 198153372, "node_id": "MDU6SXNzdWUxOTgxNTMzNzI=", "number": 38, "title": "Error in readme", "user": {"login": "andrewmeares", "id": 22872974, "node_id": "MDQ6VXNlcjIyODcyOTc0", "avatar_url": "https://avatars1.githubusercontent.com/u/22872974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewmeares", "html_url": "https://github.com/andrewmeares", "followers_url": "https://api.github.com/users/andrewmeares/followers", "following_url": "https://api.github.com/users/andrewmeares/following{/other_user}", "gists_url": "https://api.github.com/users/andrewmeares/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewmeares/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewmeares/subscriptions", "organizations_url": "https://api.github.com/users/andrewmeares/orgs", "repos_url": "https://api.github.com/users/andrewmeares/repos", "events_url": "https://api.github.com/users/andrewmeares/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewmeares/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-12-30T14:26:02Z", "updated_at": "2016-12-30T14:39:14Z", "closed_at": "2016-12-30T14:39:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "<deleted>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/36", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/36/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/36/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/36", "id": 190587220, "node_id": "MDU6SXNzdWUxOTA1ODcyMjA=", "number": 36, "title": "0.9.11 ManifestStaticS3Storage incompatible with django-grappelli 2.9.1 / django 1.10", "user": {"login": "melinath", "id": 299979, "node_id": "MDQ6VXNlcjI5OTk3OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/299979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/melinath", "html_url": "https://github.com/melinath", "followers_url": "https://api.github.com/users/melinath/followers", "following_url": "https://api.github.com/users/melinath/following{/other_user}", "gists_url": "https://api.github.com/users/melinath/gists{/gist_id}", "starred_url": "https://api.github.com/users/melinath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/melinath/subscriptions", "organizations_url": "https://api.github.com/users/melinath/orgs", "repos_url": "https://api.github.com/users/melinath/repos", "events_url": "https://api.github.com/users/melinath/events{/privacy}", "received_events_url": "https://api.github.com/users/melinath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-20T22:05:27Z", "updated_at": "2017-02-10T20:03:52Z", "closed_at": "2017-02-06T13:14:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting the following error:\r\n\r\n```\r\nPost-processing 'grappelli/tinymce/jscripts/tiny_mce/themes/simple/skins/o2k7/ui.css' failed!\r\n[...]\r\nValueError: The file 'grappelli/tinymce/jscripts/tiny_mce/themes/simple/skins/o2k7/../../img/icons.gif' could not be found with <django_s3_storage.storage.ManifestStaticS3Storage object>.\r\n```\r\n\r\nHere's some relevant shell code:\r\n\r\n```\r\n >>> storage.exists('grappelli/tinymce/jscripts/tiny_mce/themes/simple/skins/o2k7/../../img/icons.gif')\r\nFalse\r\n>>> storage.exists('grappelli/tinymce/jscripts/tiny_mce/themes/simple/img/icons.gif')\r\nTrue\r\n```\r\n\r\nFWIW this broke when I upgraded django and grappelli, not when I upgraded django-s3-storage. But it seems like a bug in the storage somehow maybe? I don't see anything relevant in the 1.10 release notes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/35", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/35/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/35/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/35", "id": 187519093, "node_id": "MDU6SXNzdWUxODc1MTkwOTM=", "number": 35, "title": "Library not compressing uploaded files", "user": {"login": "ofersto", "id": 12147393, "node_id": "MDQ6VXNlcjEyMTQ3Mzkz", "avatar_url": "https://avatars0.githubusercontent.com/u/12147393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ofersto", "html_url": "https://github.com/ofersto", "followers_url": "https://api.github.com/users/ofersto/followers", "following_url": "https://api.github.com/users/ofersto/following{/other_user}", "gists_url": "https://api.github.com/users/ofersto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ofersto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ofersto/subscriptions", "organizations_url": "https://api.github.com/users/ofersto/orgs", "repos_url": "https://api.github.com/users/ofersto/repos", "events_url": "https://api.github.com/users/ofersto/events{/privacy}", "received_events_url": "https://api.github.com/users/ofersto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-05T19:50:35Z", "updated_at": "2016-11-07T13:39:14Z", "closed_at": "2016-11-07T13:39:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI tried to use this library for uploading django files to AWS S3 especially because it allows to compress files, but it doesn't work. Even when I tried to manually define AWS_S3_GZIP = True.\r\n\r\nPlease help", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/34", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/34/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/34/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/34", "id": 185314326, "node_id": "MDU6SXNzdWUxODUzMTQzMjY=", "number": 34, "title": "Could you push a release to PyPI?", "user": {"login": "aaugustin", "id": 788910, "node_id": "MDQ6VXNlcjc4ODkxMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/788910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaugustin", "html_url": "https://github.com/aaugustin", "followers_url": "https://api.github.com/users/aaugustin/followers", "following_url": "https://api.github.com/users/aaugustin/following{/other_user}", "gists_url": "https://api.github.com/users/aaugustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaugustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaugustin/subscriptions", "organizations_url": "https://api.github.com/users/aaugustin/orgs", "repos_url": "https://api.github.com/users/aaugustin/repos", "events_url": "https://api.github.com/users/aaugustin/events{/privacy}", "received_events_url": "https://api.github.com/users/aaugustin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-10-26T07:15:31Z", "updated_at": "2016-10-31T18:23:16Z", "closed_at": "2016-10-31T15:50:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\n\nI've been applying the patch from #26 to projects where I need it. I'd love to use an off-the-shelf version of django-s3-storage instead. When you have time, would it be possible to make a release?\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/33", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/33/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/33/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/33", "id": 180804650, "node_id": "MDU6SXNzdWUxODA4MDQ2NTA=", "number": 33, "title": "\"The file cannot be reopened\" when used with Django imagekit", "user": {"login": "mgalgs", "id": 152014, "node_id": "MDQ6VXNlcjE1MjAxNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/152014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgalgs", "html_url": "https://github.com/mgalgs", "followers_url": "https://api.github.com/users/mgalgs/followers", "following_url": "https://api.github.com/users/mgalgs/following{/other_user}", "gists_url": "https://api.github.com/users/mgalgs/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgalgs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgalgs/subscriptions", "organizations_url": "https://api.github.com/users/mgalgs/orgs", "repos_url": "https://api.github.com/users/mgalgs/repos", "events_url": "https://api.github.com/users/mgalgs/events{/privacy}", "received_events_url": "https://api.github.com/users/mgalgs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166596438, "node_id": "MDU6TGFiZWwxNjY1OTY0Mzg=", "url": "https://api.github.com/repos/etianen/django-s3-storage/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-10-04T04:35:28Z", "updated_at": "2016-11-02T10:33:20Z", "closed_at": "2016-10-31T13:21:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using django-s3-storage along with [django-imagekit](https://github.com/matthewwithanm/django-imagekit), but there seems to be a problem with the way django-s3-storage opens files.  It's easy to reproduce, and I have a full django app and repro instructions for the issue, here: https://github.com/mgalgs/iktest\n\nI was a bit thrown off for a while because django-s3-storage isn't anywhere in the stack trace of the erroneous situation, but @scottmx81 figured out that the test app works fine with django-storages, **or** by monkey-patching `pilkit.open_image` like so:\n\n``` python\nfrom pilkit.lib import Image\nfrom pilkit import utils\n\n\ndef open_image(target):\n    try:\n        target.seek(0)\n        return Image.open(target)\n    except ValueError:\n        return Image.open(target.storage.open(target.name))\n\nutils.open_image = open_image\n```\n\nWith django-storages no monkey-patch is required...\n\n/cc @scottmx81\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/32", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/32/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/32/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/32", "id": 177904073, "node_id": "MDU6SXNzdWUxNzc5MDQwNzM=", "number": 32, "title": "Not compatible with django = 1.10.1", "user": {"login": "erajuan", "id": 6233118, "node_id": "MDQ6VXNlcjYyMzMxMTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6233118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erajuan", "html_url": "https://github.com/erajuan", "followers_url": "https://api.github.com/users/erajuan/followers", "following_url": "https://api.github.com/users/erajuan/following{/other_user}", "gists_url": "https://api.github.com/users/erajuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/erajuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erajuan/subscriptions", "organizations_url": "https://api.github.com/users/erajuan/orgs", "repos_url": "https://api.github.com/users/erajuan/repos", "events_url": "https://api.github.com/users/erajuan/events{/privacy}", "received_events_url": "https://api.github.com/users/erajuan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-19T21:33:19Z", "updated_at": "2017-02-06T13:14:27Z", "closed_at": "2017-02-06T13:14:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "No storage images in bucket with django =1.10.1, I test in local and prod (apache2.4)\nNot show any errors.\n\nEvery things is ok, but the image not store in bucket, But when I change django to 1.10 is ok\n\nWhen I create a file in my bucket Django==1.10.1, every things is ok.\nfrom django.core.files.storage import default_storage\nfrom django.core.files.base import ContentFile\nfrom django.core.cache import cache\n\n> > > default_storage.exists('storage_test')\n> > > False\n> > > file = default_storage.open('storage_test', 'w')\n> > > file.write('storage contents')\n> > > file.close()\n> > > default_storage.exists('storage_test')\n> > > True\n\n(my first issues)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/31", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/31/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/31/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/31", "id": 173730969, "node_id": "MDU6SXNzdWUxNzM3MzA5Njk=", "number": 31, "title": "Use boto3", "user": {"login": "etianen", "id": 148744, "node_id": "MDQ6VXNlcjE0ODc0NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/148744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etianen", "html_url": "https://github.com/etianen", "followers_url": "https://api.github.com/users/etianen/followers", "following_url": "https://api.github.com/users/etianen/following{/other_user}", "gists_url": "https://api.github.com/users/etianen/gists{/gist_id}", "starred_url": "https://api.github.com/users/etianen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etianen/subscriptions", "organizations_url": "https://api.github.com/users/etianen/orgs", "repos_url": "https://api.github.com/users/etianen/repos", "events_url": "https://api.github.com/users/etianen/events{/privacy}", "received_events_url": "https://api.github.com/users/etianen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166596438, "node_id": "MDU6TGFiZWwxNjY1OTY0Mzg=", "url": "https://api.github.com/repos/etianen/django-s3-storage/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-08-29T09:14:53Z", "updated_at": "2017-02-07T13:50:59Z", "closed_at": "2017-02-07T13:50:59Z", "author_association": "OWNER", "active_lock_reason": null, "body": "It's now the recommended library, and boto has some bugs. #30\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/29", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/29/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/29/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/29", "id": 171664862, "node_id": "MDU6SXNzdWUxNzE2NjQ4NjI=", "number": 29, "title": "Replace boto with boto3", "user": {"login": "mehtadhaval", "id": 12560388, "node_id": "MDQ6VXNlcjEyNTYwMzg4", "avatar_url": "https://avatars1.githubusercontent.com/u/12560388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mehtadhaval", "html_url": "https://github.com/mehtadhaval", "followers_url": "https://api.github.com/users/mehtadhaval/followers", "following_url": "https://api.github.com/users/mehtadhaval/following{/other_user}", "gists_url": "https://api.github.com/users/mehtadhaval/gists{/gist_id}", "starred_url": "https://api.github.com/users/mehtadhaval/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mehtadhaval/subscriptions", "organizations_url": "https://api.github.com/users/mehtadhaval/orgs", "repos_url": "https://api.github.com/users/mehtadhaval/repos", "events_url": "https://api.github.com/users/mehtadhaval/events{/privacy}", "received_events_url": "https://api.github.com/users/mehtadhaval/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166596438, "node_id": "MDU6TGFiZWwxNjY1OTY0Mzg=", "url": "https://api.github.com/repos/etianen/django-s3-storage/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-08-17T13:59:32Z", "updated_at": "2016-08-29T09:17:03Z", "closed_at": "2016-08-28T17:16:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any plan to replace boto with boto3 ? The developers at boto prefer say that it is stable enough and projects should start integrating boto3. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/28", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/28/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/28/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/28", "id": 171013849, "node_id": "MDU6SXNzdWUxNzEwMTM4NDk=", "number": 28, "title": "Signature mismatch error", "user": {"login": "scythargon", "id": 1755870, "node_id": "MDQ6VXNlcjE3NTU4NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1755870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scythargon", "html_url": "https://github.com/scythargon", "followers_url": "https://api.github.com/users/scythargon/followers", "following_url": "https://api.github.com/users/scythargon/following{/other_user}", "gists_url": "https://api.github.com/users/scythargon/gists{/gist_id}", "starred_url": "https://api.github.com/users/scythargon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scythargon/subscriptions", "organizations_url": "https://api.github.com/users/scythargon/orgs", "repos_url": "https://api.github.com/users/scythargon/repos", "events_url": "https://api.github.com/users/scythargon/events{/privacy}", "received_events_url": "https://api.github.com/users/scythargon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166596436, "node_id": "MDU6TGFiZWwxNjY1OTY0MzY=", "url": "https://api.github.com/repos/etianen/django-s3-storage/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 428777430, "node_id": "MDU6TGFiZWw0Mjg3Nzc0MzA=", "url": "https://api.github.com/repos/etianen/django-s3-storage/labels/needs%20more%20info", "name": "needs more info", "color": "fef2c0", "default": false, "description": null}, {"id": 428777571, "node_id": "MDU6TGFiZWw0Mjg3Nzc1NzE=", "url": "https://api.github.com/repos/etianen/django-s3-storage/labels/probably%20fixed", "name": "probably fixed", "color": "c2e0c6", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-13T15:34:00Z", "updated_at": "2017-02-06T13:14:49Z", "closed_at": "2017-02-06T13:14:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I get\n`boto.exception.S3ResponseError: S3ResponseError: 403 Forbidden\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Error><Code>SignatureDoesNotMatch</Code><Message>The request signature we calculated does not match the signature you provided. Check your key and signing method.`\nwhen try to `collectstatic`, though credentials are fine - works perfectly with this library https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/27", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/27/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/27/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/27", "id": 163667316, "node_id": "MDU6SXNzdWUxNjM2NjczMTY=", "number": 27, "title": "Exists method returning a false positive", "user": {"login": "leonsmith", "id": 219717, "node_id": "MDQ6VXNlcjIxOTcxNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/219717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonsmith", "html_url": "https://github.com/leonsmith", "followers_url": "https://api.github.com/users/leonsmith/followers", "following_url": "https://api.github.com/users/leonsmith/following{/other_user}", "gists_url": "https://api.github.com/users/leonsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonsmith/subscriptions", "organizations_url": "https://api.github.com/users/leonsmith/orgs", "repos_url": "https://api.github.com/users/leonsmith/repos", "events_url": "https://api.github.com/users/leonsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/leonsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166596436, "node_id": "MDU6TGFiZWwxNjY1OTY0MzY=", "url": "https://api.github.com/repos/etianen/django-s3-storage/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 428777571, "node_id": "MDU6TGFiZWw0Mjg3Nzc1NzE=", "url": "https://api.github.com/repos/etianen/django-s3-storage/labels/probably%20fixed", "name": "probably fixed", "color": "c2e0c6", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-07-04T12:31:26Z", "updated_at": "2017-02-06T13:14:41Z", "closed_at": "2017-02-06T13:14:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The exists method returns a false positive when a file with a similar name exists within the bucket.\n\nI did comment on the comment on the commit in question but have copied is here for completeness.\n\nhttps://github.com/etianen/django-s3-storage/commit/027dcdf4185f97d8317965e6450d5378ddc5155b\n\n```\nThis causes false positives for keys that have the same prefix.\n\n\"css/main.css.map\" existing on s3 for \"css/main.css\" would cause this to return true.\n\nDo we need to check for directory existence in this method? the docs state this is just for files?\n```\n\nLooking further this looks like it was changed in relation to #16 the [Django docs](https://docs.djangoproject.com/en/1.9/ref/files/storage/#django.core.files.storage.Storage.exists) does state \n\n> Returns True if a file referenced by the given name already exists in the storage system, or False if the name is available for a new file.\n\nBut is is used with a directory in the `collectstatic --clear` command: https://github.com/django/django/blob/master/django/contrib/staticfiles/management/commands/collectstatic.py#L106\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/25", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/25/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/25/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/25", "id": 163325612, "node_id": "MDU6SXNzdWUxNjMzMjU2MTI=", "number": 25, "title": "Files being overwritten.", "user": {"login": "ankgt", "id": 20237236, "node_id": "MDQ6VXNlcjIwMjM3MjM2", "avatar_url": "https://avatars1.githubusercontent.com/u/20237236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ankgt", "html_url": "https://github.com/ankgt", "followers_url": "https://api.github.com/users/ankgt/followers", "following_url": "https://api.github.com/users/ankgt/following{/other_user}", "gists_url": "https://api.github.com/users/ankgt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ankgt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ankgt/subscriptions", "organizations_url": "https://api.github.com/users/ankgt/orgs", "repos_url": "https://api.github.com/users/ankgt/repos", "events_url": "https://api.github.com/users/ankgt/events{/privacy}", "received_events_url": "https://api.github.com/users/ankgt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-07-01T06:05:47Z", "updated_at": "2016-07-01T09:48:41Z", "closed_at": "2016-07-01T06:52:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a test model with a FileField. I find that if I create two objects of this model, and both objects have the same file name, the second object I create, overwrites the file on S3. \n\nFor example, the filename of the first object is test.pdf. \n\nIf I create a second object with the same file name test.pdf (but different contents), the test.pdf on S3 gets overwritten, and the first model also now refers to the new test.pdf.\n\nIs this normal behaviour?\n\nThanks.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/24", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/24/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/24/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/24", "id": 162756525, "node_id": "MDU6SXNzdWUxNjI3NTY1MjU=", "number": 24, "title": "s3_sync_meta issue", "user": {"login": "dbinetti", "id": 161722, "node_id": "MDQ6VXNlcjE2MTcyMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/161722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbinetti", "html_url": "https://github.com/dbinetti", "followers_url": "https://api.github.com/users/dbinetti/followers", "following_url": "https://api.github.com/users/dbinetti/following{/other_user}", "gists_url": "https://api.github.com/users/dbinetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbinetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbinetti/subscriptions", "organizations_url": "https://api.github.com/users/dbinetti/orgs", "repos_url": "https://api.github.com/users/dbinetti/repos", "events_url": "https://api.github.com/users/dbinetti/events{/privacy}", "received_events_url": "https://api.github.com/users/dbinetti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2016-06-28T18:39:55Z", "updated_at": "2017-02-14T10:40:44Z", "closed_at": "2017-02-11T16:47:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "when trying to sync the meta data after switching from `django-storages-redux` i get:\n\n```\ndjango-admin s3_sync_meta django.core.files.storage.default_storage\nSyncing meta for django.core.files.storage.default_storage\nTraceback (most recent call last):\n  File \"/app/.heroku/python/bin/django-admin\", line 11, in <module>\n    sys.exit(execute_from_command_line())\n  File \"/app/.heroku/python/lib/python2.7/site-packages/django/core/management/__init__.py\", line 353, in execute_from_command_line\n    utility.execute()\n  File \"/app/.heroku/python/lib/python2.7/site-packages/django/core/management/__init__.py\", line 345, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File \"/app/.heroku/python/lib/python2.7/site-packages/django/core/management/base.py\", line 348, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File \"/app/.heroku/python/lib/python2.7/site-packages/django/core/management/base.py\", line 399, in execute\n    output = self.handle(*args, **options)\n  File \"/app/.heroku/python/lib/python2.7/site-packages/django_s3_storage/management/commands/s3_sync_meta.py\", line 22, in handle\n    for path in storage.sync_meta_iter():\n  File \"/app/.heroku/python/lib/python2.7/site-packages/django_s3_storage/storage.py\", line 368, in sync_meta_iter\n    for path in sync_meta_impl(\"\"):\n  File \"/app/.heroku/python/lib/python2.7/site-packages/django_s3_storage/storage.py\", line 354, in sync_meta_impl\n    metadata = key.metadata.copy()\nAttributeError: 'NoneType' object has no attribute 'metadata'\n```\n\nHowever, I suspect this is user error; specifically, I'm not sure what is meant by `path.to.your.storage` in the documentation.  I'm trying to run this on my heroku instance, and I'm not at all clear what the 'path' is in this context...\n\nThanks.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/22", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/22/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/22/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/22", "id": 162015519, "node_id": "MDU6SXNzdWUxNjIwMTU1MTk=", "number": 22, "title": "New point relase?", "user": {"login": "leonsmith", "id": 219717, "node_id": "MDQ6VXNlcjIxOTcxNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/219717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonsmith", "html_url": "https://github.com/leonsmith", "followers_url": "https://api.github.com/users/leonsmith/followers", "following_url": "https://api.github.com/users/leonsmith/following{/other_user}", "gists_url": "https://api.github.com/users/leonsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonsmith/subscriptions", "organizations_url": "https://api.github.com/users/leonsmith/orgs", "repos_url": "https://api.github.com/users/leonsmith/repos", "events_url": "https://api.github.com/users/leonsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/leonsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-06-23T20:27:54Z", "updated_at": "2016-06-24T13:12:41Z", "closed_at": "2016-06-24T13:12:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Would it be possible to get a new point release up on pypi now those 2 issues got merged?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/19", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/19/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/19/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/19", "id": 159222777, "node_id": "MDU6SXNzdWUxNTkyMjI3Nzc=", "number": 19, "title": "Automatically remove S3 Key on model delete", "user": {"login": "makerj", "id": 5608983, "node_id": "MDQ6VXNlcjU2MDg5ODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5608983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/makerj", "html_url": "https://github.com/makerj", "followers_url": "https://api.github.com/users/makerj/followers", "following_url": "https://api.github.com/users/makerj/following{/other_user}", "gists_url": "https://api.github.com/users/makerj/gists{/gist_id}", "starred_url": "https://api.github.com/users/makerj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/makerj/subscriptions", "organizations_url": "https://api.github.com/users/makerj/orgs", "repos_url": "https://api.github.com/users/makerj/repos", "events_url": "https://api.github.com/users/makerj/events{/privacy}", "received_events_url": "https://api.github.com/users/makerj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-08T17:12:22Z", "updated_at": "2016-06-09T12:31:06Z", "closed_at": "2016-06-09T12:25:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nHow can I setup django-s3-storage to \"remove S3 Key on model delete\"?\nIf it's not possible, is there any plan?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/18", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/18/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/18/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/18", "id": 156303266, "node_id": "MDU6SXNzdWUxNTYzMDMyNjY=", "number": 18, "title": "Upload files to \".\" directory", "user": {"login": "frederikbotha", "id": 8957655, "node_id": "MDQ6VXNlcjg5NTc2NTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/8957655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frederikbotha", "html_url": "https://github.com/frederikbotha", "followers_url": "https://api.github.com/users/frederikbotha/followers", "following_url": "https://api.github.com/users/frederikbotha/following{/other_user}", "gists_url": "https://api.github.com/users/frederikbotha/gists{/gist_id}", "starred_url": "https://api.github.com/users/frederikbotha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frederikbotha/subscriptions", "organizations_url": "https://api.github.com/users/frederikbotha/orgs", "repos_url": "https://api.github.com/users/frederikbotha/repos", "events_url": "https://api.github.com/users/frederikbotha/events{/privacy}", "received_events_url": "https://api.github.com/users/frederikbotha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2016-05-23T15:28:04Z", "updated_at": "2016-06-29T10:05:04Z", "closed_at": "2016-06-23T08:25:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nNot sure if this is an issue or me setting things up wrong...most likely the latter. I really don't know where else to ask for support, I've tried IRC #django but did not really get anywhere.\n\nI have it setup with private file upload and static storage and it works as expected, except for the private upload bit. It upload everything to a directory in the bucket called \".\" so it would be; bucketname/./filethatwasuploaded\nI am not sure why or how to get it to upload just to the bucket, I've tried putting in a prefix, but then i get bucketname/prefix/./filethatwasuploaded\n\nI am using:\nDjango==1.9.6\nboto==2.40.0\ndjango-s3-storage==0.9.8\n\nThe settings in the settings file is almost identical to the ones in the readme, except for the keys.\n\nAny help would be very much appreciated and thanks for a great package.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/17", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/17/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/17/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/17", "id": 132146379, "node_id": "MDU6SXNzdWUxMzIxNDYzNzk=", "number": 17, "title": "Setting to disable GZIP compression?", "user": {"login": "Bartvds", "id": 685984, "node_id": "MDQ6VXNlcjY4NTk4NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/685984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bartvds", "html_url": "https://github.com/Bartvds", "followers_url": "https://api.github.com/users/Bartvds/followers", "following_url": "https://api.github.com/users/Bartvds/following{/other_user}", "gists_url": "https://api.github.com/users/Bartvds/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bartvds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bartvds/subscriptions", "organizations_url": "https://api.github.com/users/Bartvds/orgs", "repos_url": "https://api.github.com/users/Bartvds/repos", "events_url": "https://api.github.com/users/Bartvds/events{/privacy}", "received_events_url": "https://api.github.com/users/Bartvds/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-02-08T13:50:08Z", "updated_at": "2016-06-23T08:26:50Z", "closed_at": "2016-06-23T08:26:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Amazon CloudFront recently added (opt-in) support for auto-magic transparent GZIP compression.\n\nThis means it is no longer needed to pre-compress the S3 objects for gzipped serving over HTTP if you use CloudFront and opted in to this. \n\nSo it would be cool if we'd have a setting to disable the GZIP compression in django-s3-storage (maybe with a use-case note in the readme in case people missed [the CF announcement](https://aws.amazon.com/blogs/aws/new-gzip-compression-support-for-amazon-cloudfront/)).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/16", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/16/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/16/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/16", "id": 127116810, "node_id": "MDU6SXNzdWUxMjcxMTY4MTA=", "number": 16, "title": "collectstatic -c fails since django 1.9", "user": {"login": "xblitz", "id": 592097, "node_id": "MDQ6VXNlcjU5MjA5Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/592097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xblitz", "html_url": "https://github.com/xblitz", "followers_url": "https://api.github.com/users/xblitz/followers", "following_url": "https://api.github.com/users/xblitz/following{/other_user}", "gists_url": "https://api.github.com/users/xblitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/xblitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xblitz/subscriptions", "organizations_url": "https://api.github.com/users/xblitz/orgs", "repos_url": "https://api.github.com/users/xblitz/repos", "events_url": "https://api.github.com/users/xblitz/events{/privacy}", "received_events_url": "https://api.github.com/users/xblitz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-01-17T19:12:29Z", "updated_at": "2016-02-01T09:04:54Z", "closed_at": "2016-02-01T09:03:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "it seems that since django 1.9 specificaly this PR  https://github.com/django/django/commit/87d78241a2fc85e5715fb51c554fe06e91deee58 it breaks the \"collectstatic -c\"  since it tries to validate that the root directory exists (which is empty in out case) because the bucket.get_key fails if the key name is empty\n\nIn the case of s3-storages, maybe we can check if the bucket exists or just return true if its empty? (I think I would go for the true if empty)\n\nHere is the Traceback:\n\n```\nTraceback (most recent call last):\n  File \"manage.py\", line 10, in <module>\n    execute_from_command_line(sys.argv)\n  File \"/app/.heroku/python/lib/python3.4/site-packages/django/core/management/__init__.py\", line 353, in execute_from_command_line\n    utility.execute()\n  File \"/app/.heroku/python/lib/python3.4/site-packages/django/core/management/__init__.py\", line 345, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n  File \"/app/.heroku/python/lib/python3.4/site-packages/django/core/management/base.py\", line 348, in run_from_argv\n    self.execute(*args, **cmd_options)\n  File \"/app/.heroku/python/lib/python3.4/site-packages/django/core/management/base.py\", line 399, in execute\n    output = self.handle(*args, **options)\n  File \"/app/.heroku/python/lib/python3.4/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 176, in handle\n    collected = self.collect()\n  File \"/app/.heroku/python/lib/python3.4/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 89, in collect\n    self.clear_dir('')\n  File \"/app/.heroku/python/lib/python3.4/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 210, in clear_dir\n    if not self.storage.exists(path):\n  File \"/app/.heroku/python/lib/python3.4/site-packages/django_s3_storage/storage.py\", line 262, in exists\n    return self._get_key(name).exists()\n  File \"/app/.heroku/python/lib/python3.4/site-packages/django_s3_storage/storage.py\", line 194, in _get_key\n    return self.bucket.get_key(self._get_key_name(name), validate=validate)\n  File \"/app/.heroku/python/lib/python3.4/site-packages/boto/s3/bucket.py\", line 183, in get_key\n    return self.new_key(key_name)\n  File \"/app/.heroku/python/lib/python3.4/site-packages/boto/s3/bucket.py\", line 622, in new_key\n    raise ValueError('Empty key names are not allowed')\nValueError: Empty key names are not allowed\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/15", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/15/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/15/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/15", "id": 125319906, "node_id": "MDU6SXNzdWUxMjUzMTk5MDY=", "number": 15, "title": "Support windows", "user": {"login": "bpbp-boop", "id": 322387, "node_id": "MDQ6VXNlcjMyMjM4Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/322387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpbp-boop", "html_url": "https://github.com/bpbp-boop", "followers_url": "https://api.github.com/users/bpbp-boop/followers", "following_url": "https://api.github.com/users/bpbp-boop/following{/other_user}", "gists_url": "https://api.github.com/users/bpbp-boop/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpbp-boop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpbp-boop/subscriptions", "organizations_url": "https://api.github.com/users/bpbp-boop/orgs", "repos_url": "https://api.github.com/users/bpbp-boop/repos", "events_url": "https://api.github.com/users/bpbp-boop/events{/privacy}", "received_events_url": "https://api.github.com/users/bpbp-boop/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-01-07T04:26:59Z", "updated_at": "2016-02-01T09:57:31Z", "closed_at": "2016-02-01T08:47:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, if you run collectstatic on a windows environment paths get uploaded with windows-style path separators.\n\nExample:\nhttps://s3-ap-southeast-2.amazonaws.com/nextgame-images/admin%5Ccss%5Cbase.css\n\nIt would be great if this could automatically convert the paths to the correct unix-style path separators\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/13", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/13/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/13/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/13", "id": 121148577, "node_id": "MDU6SXNzdWUxMjExNDg1Nzc=", "number": 13, "title": "Using s3_sync_meta causes TypeError exception", "user": {"login": "cvng", "id": 7042907, "node_id": "MDQ6VXNlcjcwNDI5MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7042907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cvng", "html_url": "https://github.com/cvng", "followers_url": "https://api.github.com/users/cvng/followers", "following_url": "https://api.github.com/users/cvng/following{/other_user}", "gists_url": "https://api.github.com/users/cvng/gists{/gist_id}", "starred_url": "https://api.github.com/users/cvng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cvng/subscriptions", "organizations_url": "https://api.github.com/users/cvng/orgs", "repos_url": "https://api.github.com/users/cvng/repos", "events_url": "https://api.github.com/users/cvng/events{/privacy}", "received_events_url": "https://api.github.com/users/cvng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-12-09T02:50:47Z", "updated_at": "2015-12-14T19:52:25Z", "closed_at": "2015-12-10T12:50:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Anytime, I try to run `s3_sync_meta` command, that raises:\n`TypeError: sync_meta_iter() missing 1 required positional argument: 'self'`\n\nSo, I end up with this small fix, which simply instantiate `storage` object before calling `sync_meta_iter()`.\nI replaced in `s3_sync_meta.py`:\n\n``` python\n# Sync the meta.\nfor path in storage.sync_meta_iter():\n```\n\nwith:\n\n``` python\nfor path in storage().sync_meta_iter():\n```\n\nAnd now, I'm able to run `s3_sync_meta` as expected.\n\n**NOTE**: This happen on `python 3.4.3`, so maybe this is related.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/11", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/11/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/11/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/11", "id": 120064313, "node_id": "MDU6SXNzdWUxMjAwNjQzMTM=", "number": 11, "title": "Question: Migration from OG django-storages", "user": {"login": "alexkahn", "id": 4401271, "node_id": "MDQ6VXNlcjQ0MDEyNzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4401271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexkahn", "html_url": "https://github.com/alexkahn", "followers_url": "https://api.github.com/users/alexkahn/followers", "following_url": "https://api.github.com/users/alexkahn/following{/other_user}", "gists_url": "https://api.github.com/users/alexkahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexkahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexkahn/subscriptions", "organizations_url": "https://api.github.com/users/alexkahn/orgs", "repos_url": "https://api.github.com/users/alexkahn/repos", "events_url": "https://api.github.com/users/alexkahn/events{/privacy}", "received_events_url": "https://api.github.com/users/alexkahn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-12-03T00:06:33Z", "updated_at": "2015-12-07T00:35:38Z", "closed_at": "2015-12-03T16:59:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Anyone have advice on doing a migration from the OG django-storages to this storage backend?\n\nI serve a ton of images and would like know if this would be a good fit.\n\nI'm going to give it a go anyway and would be happy to document the process.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/10", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/10/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/10/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/10", "id": 118551275, "node_id": "MDU6SXNzdWUxMTg1NTEyNzU=", "number": 10, "title": "Forcing the cache-control header to bytes causes SignatureDoesNotMatch exception", "user": {"login": "aaugustin", "id": 788910, "node_id": "MDQ6VXNlcjc4ODkxMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/788910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaugustin", "html_url": "https://github.com/aaugustin", "followers_url": "https://api.github.com/users/aaugustin/followers", "following_url": "https://api.github.com/users/aaugustin/following{/other_user}", "gists_url": "https://api.github.com/users/aaugustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaugustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaugustin/subscriptions", "organizations_url": "https://api.github.com/users/aaugustin/orgs", "repos_url": "https://api.github.com/users/aaugustin/repos", "events_url": "https://api.github.com/users/aaugustin/events{/privacy}", "received_events_url": "https://api.github.com/users/aaugustin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-11-24T07:42:57Z", "updated_at": "2015-11-24T10:45:04Z", "closed_at": "2015-11-24T09:33:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I encountered a SignatureDoesNotMatch exception while trying to upload files.\n\nI'm using the eu-central-1 region. Apparently this is a recipe for disaster because it uses Amazon's v4 signature algorithm.\n\nI wrote the following minimal reproduction script to emulates what django-s3-storage does:\n\n``` python\n    import os\n\n    from boto import s3\n\n    s3_connection = s3.connect_to_region(\n        'eu-central-1',\n        aws_access_key_id=os.environ['AWS_ACCESS_KEY_ID'],\n        aws_secret_access_key=os.environ['AWS_SECRET_ACCESS_KEY'],\n    )\n\n    bucket = s3_connection.get_bucket(\n        os.environ['AWS_S3_BUCKET_NAME'],\n        validate=False,\n    )\n\n    key = bucket.get_key(\n        'test.txt',\n        validate=False,\n    )\n\n    key.set_contents_from_file(\n        open('test.txt'),\n        policy='private',\n        headers={'Content-Type': 'text/plain', 'Cache-Control': b'private, max-age=3600'},\n    )\n```\n\nand I got this exception, which is the same as the one I'm getting when I'm trying to upload a file:\n\n```\n    Traceback (most recent call last):\n      File \"test.py\", line 24, in <module>\n        headers={'Content-Type': 'text/plain', 'Cache-Control': b'private, max-age=3600'},\n      File \"/Users/myk/.virtualenvs/fractalideas_com/lib/python3.4/site-packages/boto/s3/key.py\", line 1293, in set_contents_from_file\n        chunked_transfer=chunked_transfer, size=size)\n      File \"/Users/myk/.virtualenvs/fractalideas_com/lib/python3.4/site-packages/boto/s3/key.py\", line 750, in send_file\n        chunked_transfer=chunked_transfer, size=size)\n      File \"/Users/myk/.virtualenvs/fractalideas_com/lib/python3.4/site-packages/boto/s3/key.py\", line 951, in _send_file_internal\n        query_args=query_args\n      File \"/Users/myk/.virtualenvs/fractalideas_com/lib/python3.4/site-packages/boto/s3/connection.py\", line 664, in make_request\n        retry_handler=retry_handler\n      File \"/Users/myk/.virtualenvs/fractalideas_com/lib/python3.4/site-packages/boto/connection.py\", line 1071, in make_request\n        retry_handler=retry_handler)\n      File \"/Users/myk/.virtualenvs/fractalideas_com/lib/python3.4/site-packages/boto/connection.py\", line 940, in _mexe\n        request.body, request.headers)\n      File \"/Users/myk/.virtualenvs/fractalideas_com/lib/python3.4/site-packages/boto/s3/key.py\", line 884, in sender\n        response.status, response.reason, body)\n    boto.exception.S3ResponseError: S3ResponseError: 403 Forbidden\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <Error><Code>SignatureDoesNotMatch</Code><Message>The request signature we calculated does not match the signature you provided. Check your key and signing method.</Message><AWSAccessKeyId>AKIAJF6PMZVKYXRGWSYQ</AWSAccessKeyId><StringToSign>AWS4-HMAC-SHA256\n    20151124T073315Z\n    20151124/eu-central-1/s3/aws4_request\n    705754741114d0b3b9751c7320182dbd4df2bb74b31c4fb997b1411646fcf4b3</StringToSign><SignatureProvided>d2bc85477ef151b21859c28dde1715511852a0aefd4e9bd33ab14c923b2d9faa</SignatureProvided><StringToSignBytes>41 57 53 34 2d 48 4d 41 43 2d 53 48 41 32 35 36 0a 32 30 31 35 31 31 32 34 54 30 37 33 33 31 35 5a 0a 32 30 31 35 31 31 32 34 2f 65 75 2d 63 65 6e 74 72 61 6c 2d 31 2f 73 33 2f 61 77 73 34 5f 72 65 71 75 65 73 74 0a 37 30 35 37 35 34 37 34 31 31 31 34 64 30 62 33 62 39 37 35 31 63 37 33 32 30 31 38 32 64 62 64 34 64 66 32 62 62 37 34 62 33 31 63 34 66 62 39 39 37 62 31 34 31 31 36 34 36 66 63 66 34 62 33</StringToSignBytes><CanonicalRequest>PUT\n    /test.txt\n\n    cache-control:private, max-age=3600\n    content-length:5\n    content-md5:2Oj8otwPiW/Xy0ywAxuiSQ==\n    content-type:text/plain\n    expect:100-Continue\n    host:fractalideas-com-dev.s3.eu-central-1.amazonaws.com:443\n    user-agent:Boto/2.38.0 Python/3.4.3 Darwin/15.0.0\n    x-amz-acl:private\n    x-amz-content-sha256:f2ca1bb6c7e907d06dafe4687e579fce76b37e4e93b7605022da52e6ccc26fd2\n    x-amz-date:20151124T073315Z\n\n    cache-control;content-length;content-md5;content-type;expect;host;user-agent;x-amz-acl;x-amz-content-sha256;x-amz-date\n    f2ca1bb6c7e907d06dafe4687e579fce76b37e4e93b7605022da52e6ccc26fd2</CanonicalRequest><CanonicalRequestBytes>50 55 54 0a 2f 74 65 73 74 2e 74 78 74 0a 0a 63 61 63 68 65 2d 63 6f 6e 74 72 6f 6c 3a 70 72 69 76 61 74 65 2c 20 6d 61 78 2d 61 67 65 3d 33 36 30 30 0a 63 6f 6e 74 65 6e 74 2d 6c 65 6e 67 74 68 3a 35 0a 63 6f 6e 74 65 6e 74 2d 6d 64 35 3a 32 4f 6a 38 6f 74 77 50 69 57 2f 58 79 30 79 77 41 78 75 69 53 51 3d 3d 0a 63 6f 6e 74 65 6e 74 2d 74 79 70 65 3a 74 65 78 74 2f 70 6c 61 69 6e 0a 65 78 70 65 63 74 3a 31 30 30 2d 43 6f 6e 74 69 6e 75 65 0a 68 6f 73 74 3a 66 72 61 63 74 61 6c 69 64 65 61 73 2d 63 6f 6d 2d 64 65 76 2e 73 33 2e 65 75 2d 63 65 6e 74 72 61 6c 2d 31 2e 61 6d 61 7a 6f 6e 61 77 73 2e 63 6f 6d 3a 34 34 33 0a 75 73 65 72 2d 61 67 65 6e 74 3a 42 6f 74 6f 2f 32 2e 33 38 2e 30 20 50 79 74 68 6f 6e 2f 33 2e 34 2e 33 20 44 61 72 77 69 6e 2f 31 35 2e 30 2e 30 0a 78 2d 61 6d 7a 2d 61 63 6c 3a 70 72 69 76 61 74 65 0a 78 2d 61 6d 7a 2d 63 6f 6e 74 65 6e 74 2d 73 68 61 32 35 36 3a 66 32 63 61 31 62 62 36 63 37 65 39 30 37 64 30 36 64 61 66 65 34 36 38 37 65 35 37 39 66 63 65 37 36 62 33 37 65 34 65 39 33 62 37 36 30 35 30 32 32 64 61 35 32 65 36 63 63 63 32 36 66 64 32 0a 78 2d 61 6d 7a 2d 64 61 74 65 3a 32 30 31 35 31 31 32 34 54 30 37 33 33 31 35 5a 0a 0a 63 61 63 68 65 2d 63 6f 6e 74 72 6f 6c 3b 63 6f 6e 74 65 6e 74 2d 6c 65 6e 67 74 68 3b 63 6f 6e 74 65 6e 74 2d 6d 64 35 3b 63 6f 6e 74 65 6e 74 2d 74 79 70 65 3b 65 78 70 65 63 74 3b 68 6f 73 74 3b 75 73 65 72 2d 61 67 65 6e 74 3b 78 2d 61 6d 7a 2d 61 63 6c 3b 78 2d 61 6d 7a 2d 63 6f 6e 74 65 6e 74 2d 73 68 61 32 35 36 3b 78 2d 61 6d 7a 2d 64 61 74 65 0a 66 32 63 61 31 62 62 36 63 37 65 39 30 37 64 30 36 64 61 66 65 34 36 38 37 65 35 37 39 66 63 65 37 36 62 33 37 65 34 65 39 33 62 37 36 30 35 30 32 32 64 61 35 32 65 36 63 63 63 32 36 66 64 32</CanonicalRequestBytes><RequestId>F178C70B4C87A673</RequestId><HostId>YGQWiH5L4DUm1888IJ4bFcqNMhIVza7Y2XiBOqESwecq/aiuYGVUlxnjHff13eb7nhQN73JomKk=</HostId></Error>\n```\n\nThe `b` prefix on the cache-control value looked odd. I tried removing it and no longer got the exception.\n\nThis led me to this code in `_get_cache_control`:\n\n```\n    return force_bytes(\"{privacy}, max-age={max_age}\".format(\n        privacy = privacy,\n        max_age = self.aws_s3_max_age_seconds,\n    ))  # Have to use bytes else the space will be percent-encoded. Odd, eh?\n```\n\nI changed it to:\n\n```\n    return \"{privacy}, max-age={max_age}\".format(\n        privacy = privacy,\n        max_age = self.aws_s3_max_age_seconds,\n    )\n```\n\nAnd uploads worked again.\n\nI'm not sure in which circumstances the space gets %-encoded and how bad it is but it is probably not as bad as not being able to upload files at all :-)\n\nAs a workaround, perhaps you could simply remove the space i.e. `\"{privacy},max-age={max_age}\"`; I believe that's a valid value as well.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/8", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/8/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/8/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/8", "id": 117362652, "node_id": "MDU6SXNzdWUxMTczNjI2NTI=", "number": 8, "title": "Support for ckeditor file-upload", "user": {"login": "busla", "id": 3162968, "node_id": "MDQ6VXNlcjMxNjI5Njg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3162968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/busla", "html_url": "https://github.com/busla", "followers_url": "https://api.github.com/users/busla/followers", "following_url": "https://api.github.com/users/busla/following{/other_user}", "gists_url": "https://api.github.com/users/busla/gists{/gist_id}", "starred_url": "https://api.github.com/users/busla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/busla/subscriptions", "organizations_url": "https://api.github.com/users/busla/orgs", "repos_url": "https://api.github.com/users/busla/repos", "events_url": "https://api.github.com/users/busla/events{/privacy}", "received_events_url": "https://api.github.com/users/busla/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 166596441, "node_id": "MDU6TGFiZWwxNjY1OTY0NDE=", "url": "https://api.github.com/repos/etianen/django-s3-storage/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-17T14:13:50Z", "updated_at": "2016-07-01T08:43:18Z", "closed_at": "2016-07-01T08:43:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Any plans on adding support for file-uploads to S3 with CKEditor?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/7", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/7/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/7/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/7", "id": 117355905, "node_id": "MDU6SXNzdWUxMTczNTU5MDU=", "number": 7, "title": "Feature request: Add a dir prefix option to directory", "user": {"login": "busla", "id": 3162968, "node_id": "MDQ6VXNlcjMxNjI5Njg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3162968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/busla", "html_url": "https://github.com/busla", "followers_url": "https://api.github.com/users/busla/followers", "following_url": "https://api.github.com/users/busla/following{/other_user}", "gists_url": "https://api.github.com/users/busla/gists{/gist_id}", "starred_url": "https://api.github.com/users/busla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/busla/subscriptions", "organizations_url": "https://api.github.com/users/busla/orgs", "repos_url": "https://api.github.com/users/busla/repos", "events_url": "https://api.github.com/users/busla/events{/privacy}", "received_events_url": "https://api.github.com/users/busla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-11-17T13:37:25Z", "updated_at": "2020-02-08T10:31:02Z", "closed_at": "2015-11-17T13:50:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would be great if I I could add a directory prefix setting to uploaded files so I can use the same bucket for different projects.\n\nExample:\n\nmy-s3-bucket-name/project1/media\nmy-s3-bucket-name/project2/media\n\nHere, `project1` and `project2` would be added to e.g. `django_s3_storage.storage.dir_prefix` setting.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/5", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/5/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/5/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/5", "id": 117018712, "node_id": "MDU6SXNzdWUxMTcwMTg3MTI=", "number": 5, "title": "Feature suggestion: support for reduced redundancy", "user": {"login": "aaugustin", "id": 788910, "node_id": "MDQ6VXNlcjc4ODkxMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/788910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaugustin", "html_url": "https://github.com/aaugustin", "followers_url": "https://api.github.com/users/aaugustin/followers", "following_url": "https://api.github.com/users/aaugustin/following{/other_user}", "gists_url": "https://api.github.com/users/aaugustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaugustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaugustin/subscriptions", "organizations_url": "https://api.github.com/users/aaugustin/orgs", "repos_url": "https://api.github.com/users/aaugustin/repos", "events_url": "https://api.github.com/users/aaugustin/events{/privacy}", "received_events_url": "https://api.github.com/users/aaugustin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-11-15T21:21:27Z", "updated_at": "2015-11-16T10:14:39Z", "closed_at": "2015-11-16T10:14:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This would involve:\n- adding a new setting\n- adding a new keyword argument for S3Storage.**init** and a new attribute for S3Storage\n- passing `reduced_redundancy=self.aws_s3_reduced_redundancy` in the call to `set_contents_from_file`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-s3-storage/issues/4", "repository_url": "https://api.github.com/repos/etianen/django-s3-storage", "labels_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/4/comments", "events_url": "https://api.github.com/repos/etianen/django-s3-storage/issues/4/events", "html_url": "https://github.com/etianen/django-s3-storage/issues/4", "id": 116325173, "node_id": "MDU6SXNzdWUxMTYzMjUxNzM=", "number": 4, "title": "Why should I use django-s3-storage instead of django-storages-redux?", "user": {"login": "aaugustin", "id": 788910, "node_id": "MDQ6VXNlcjc4ODkxMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/788910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaugustin", "html_url": "https://github.com/aaugustin", "followers_url": "https://api.github.com/users/aaugustin/followers", "following_url": "https://api.github.com/users/aaugustin/following{/other_user}", "gists_url": "https://api.github.com/users/aaugustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaugustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaugustin/subscriptions", "organizations_url": "https://api.github.com/users/aaugustin/orgs", "repos_url": "https://api.github.com/users/aaugustin/repos", "events_url": "https://api.github.com/users/aaugustin/events{/privacy}", "received_events_url": "https://api.github.com/users/aaugustin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-11-11T12:28:16Z", "updated_at": "2015-11-15T20:40:22Z", "closed_at": "2015-11-15T20:40:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I would find it useful to address this question in the README.\n\nPerhaps you just wrote django-s3-storage because it was fun.\n\nPerhaps you wanted a library that did one thing and did it well. django-storages clearly exihibits kitchen sink syndrome.\n\nPerhaps you wanted a modern and well-documented library. django-storages was abandoned and revived as django-storages-redux; it shows.\n\nPerhaps you needed features that django-storages-redux didn't provide.\n\nI'm interested in trying alternatives to the current _de facto_ solution. It would be an easier decision if I knew why the alternative exists!\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}]}