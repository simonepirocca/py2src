{"total_count": 539, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/etianen/django-reversion/issues/837", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/837/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/837/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/837/events", "html_url": "https://github.com/etianen/django-reversion/issues/837", "id": 621656439, "node_id": "MDU6SXNzdWU2MjE2NTY0Mzk=", "number": 837, "title": "Upgrading: Was the deletion of a consistent migration lineage a mistake or intentional?", "user": {"login": "oregon", "id": 1610260, "node_id": "MDQ6VXNlcjE2MTAyNjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1610260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oregon", "html_url": "https://github.com/oregon", "followers_url": "https://api.github.com/users/oregon/followers", "following_url": "https://api.github.com/users/oregon/following{/other_user}", "gists_url": "https://api.github.com/users/oregon/gists{/gist_id}", "starred_url": "https://api.github.com/users/oregon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oregon/subscriptions", "organizations_url": "https://api.github.com/users/oregon/orgs", "repos_url": "https://api.github.com/users/oregon/repos", "events_url": "https://api.github.com/users/oregon/events{/privacy}", "received_events_url": "https://api.github.com/users/oregon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-20T10:39:53Z", "updated_at": "2020-05-20T12:03:58Z", "closed_at": "2020-05-20T12:03:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems at first glance incredibly odd this project hamstrings itself by squashing migrations and providing no consistent path to possibly be upgraded across versions.  I read a handful of \"migration\" related topics in the Issue queue but couldn't find a clear answer to this.\r\n\r\nMigrations for this project require custom hand-writing schema migrations somewhere via the SchemaEditor since the migrations don't carry lineage.  This seems like a very odd requisite and I have to believe, totally unnecessary.  Did Django thwart this projects versioning sanity that produced this result?  I haven't seen the problem in other packages prior, and since there are a handful of threads semi-related, I think this backstory would be helpful to the many users of django-reversion from Django's popular past.  Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/836", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/836/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/836/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/836/events", "html_url": "https://github.com/etianen/django-reversion/issues/836", "id": 618477928, "node_id": "MDU6SXNzdWU2MTg0Nzc5Mjg=", "number": 836, "title": "Customized Set Comment ", "user": {"login": "nikolas310", "id": 15107827, "node_id": "MDQ6VXNlcjE1MTA3ODI3", "avatar_url": "https://avatars2.githubusercontent.com/u/15107827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikolas310", "html_url": "https://github.com/nikolas310", "followers_url": "https://api.github.com/users/nikolas310/followers", "following_url": "https://api.github.com/users/nikolas310/following{/other_user}", "gists_url": "https://api.github.com/users/nikolas310/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikolas310/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikolas310/subscriptions", "organizations_url": "https://api.github.com/users/nikolas310/orgs", "repos_url": "https://api.github.com/users/nikolas310/repos", "events_url": "https://api.github.com/users/nikolas310/events{/privacy}", "received_events_url": "https://api.github.com/users/nikolas310/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-14T19:21:57Z", "updated_at": "2020-05-18T10:03:13Z", "closed_at": "2020-05-18T10:03:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my model I've added like below. My ques is how can I set admin like comment. changed field1, field2 etc...\r\n\r\n   ```\r\n def save(self, *args, **kwargs):\r\n        with transaction.atomic(), reversion.create_revision():\r\n            if self.id:\r\n                if hasattr(self, 'updated_by'):\r\n                    reversion.set_user(self.updated_by)\r\n                reversion.set_comment(\"Updated\")\r\n            else:\r\n                if hasattr(self, 'created_by'):\r\n                    reversion.set_user(self.created_by)\r\n                reversion.set_comment(\"Created\")\r\n            super().save(*args, **kwargs)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/834", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/834/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/834/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/834/events", "html_url": "https://github.com/etianen/django-reversion/issues/834", "id": 612844608, "node_id": "MDU6SXNzdWU2MTI4NDQ2MDg=", "number": 834, "title": "Menu not showing in Django 2", "user": {"login": "farooqaaa", "id": 930117, "node_id": "MDQ6VXNlcjkzMDExNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/930117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/farooqaaa", "html_url": "https://github.com/farooqaaa", "followers_url": "https://api.github.com/users/farooqaaa/followers", "following_url": "https://api.github.com/users/farooqaaa/following{/other_user}", "gists_url": "https://api.github.com/users/farooqaaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/farooqaaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/farooqaaa/subscriptions", "organizations_url": "https://api.github.com/users/farooqaaa/orgs", "repos_url": "https://api.github.com/users/farooqaaa/repos", "events_url": "https://api.github.com/users/farooqaaa/events{/privacy}", "received_events_url": "https://api.github.com/users/farooqaaa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-05T19:35:40Z", "updated_at": "2020-05-05T20:06:43Z", "closed_at": "2020-05-05T19:56:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you use Baton's `admin.site.urls` in _urls.py_, the menu doesn't show. This can be fixed by using Django's admin URLs. I think this should be mentioned in the docs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/831", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/831/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/831/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/831/events", "html_url": "https://github.com/etianen/django-reversion/issues/831", "id": 601695335, "node_id": "MDU6SXNzdWU2MDE2OTUzMzU=", "number": 831, "title": "Should add hook function for `create_revision()` make also store other info from request?", "user": {"login": "thomaszdxsn", "id": 23616426, "node_id": "MDQ6VXNlcjIzNjE2NDI2", "avatar_url": "https://avatars1.githubusercontent.com/u/23616426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaszdxsn", "html_url": "https://github.com/thomaszdxsn", "followers_url": "https://api.github.com/users/thomaszdxsn/followers", "following_url": "https://api.github.com/users/thomaszdxsn/following{/other_user}", "gists_url": "https://api.github.com/users/thomaszdxsn/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaszdxsn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaszdxsn/subscriptions", "organizations_url": "https://api.github.com/users/thomaszdxsn/orgs", "repos_url": "https://api.github.com/users/thomaszdxsn/repos", "events_url": "https://api.github.com/users/thomaszdxsn/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaszdxsn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-17T04:36:30Z", "updated_at": "2020-04-17T09:07:25Z", "closed_at": "2020-04-17T09:07:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you awesome library.\r\n\r\nCurrently I used middleware, but I want also store User-Agent of request to comment field as JSON format\r\n\r\nInspect source code, but don't known how to add this function", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/829", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/829/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/829/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/829/events", "html_url": "https://github.com/etianen/django-reversion/issues/829", "id": 598270335, "node_id": "MDU6SXNzdWU1OTgyNzAzMzU=", "number": 829, "title": "Allow making revisions mandatory?", "user": {"login": "matthijskooijman", "id": 194491, "node_id": "MDQ6VXNlcjE5NDQ5MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/194491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthijskooijman", "html_url": "https://github.com/matthijskooijman", "followers_url": "https://api.github.com/users/matthijskooijman/followers", "following_url": "https://api.github.com/users/matthijskooijman/following{/other_user}", "gists_url": "https://api.github.com/users/matthijskooijman/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthijskooijman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthijskooijman/subscriptions", "organizations_url": "https://api.github.com/users/matthijskooijman/orgs", "repos_url": "https://api.github.com/users/matthijskooijman/repos", "events_url": "https://api.github.com/users/matthijskooijman/events{/privacy}", "received_events_url": "https://api.github.com/users/matthijskooijman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-11T13:51:33Z", "updated_at": "2020-04-13T09:01:33Z", "closed_at": "2020-04-13T09:01:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, a revision is only created if `create_revision()` is used, or the `Revision` middleware is used. If you forget to add `create_revision()` in some code path that modifies a model, you won't get a revision AFAICS. This can be a source of bugs, especially when there is some underlying code that modifies the model, but the revision should be created by a view higher up in the call stack (that has more info about what happens exactly).\r\n\r\nWould it make sense to, when registering a model (or maybe globally) *require* revisions?\r\n\r\nCurrently, nothing happens in the post-save handler when no revision is active:\r\n\r\nhttps://github.com/etianen/django-reversion/blob/c8d65bb6128c24000294fa3b5a29351e3fa6ac08/reversion/revisions.py#L326-L328\r\n\r\nI guess this could be changed to either ignore `is_active()` when revisions are mandatory (in which case `_current_frame()` will raise an exception later), or the signal handler could just raise an exception right away (might be cleaner).\r\n\r\nAlso, since this is post-save, it should probably *also* generate a revision in addition to an exception (unless we're in a transaction? Not sure when post-save runs exactly).\r\n\r\nhttps://github.com/etianen/django-reversion/blob/c8d65bb6128c24000294fa3b5a29351e3fa6ac08/reversion/revisions.py#L49-L52\r\n\r\n\r\nA related question might be if a revision should be tied to a particular model, specified to `create_revision`? If I'm creating a revision and expecting to save some model, but as a side effect some other model gets saved too, I think it now ends up in the same revision, even when the save of the other model was wrapped in its own `create_revision` (though I've not tested this, this is from reading the code).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/828", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/828/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/828/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/828/events", "html_url": "https://github.com/etianen/django-reversion/issues/828", "id": 592312977, "node_id": "MDU6SXNzdWU1OTIzMTI5Nzc=", "number": 828, "title": "Migration errors \"(fields.E304) Reverse accessor\"", "user": {"login": "nguyenbathanh", "id": 4046112, "node_id": "MDQ6VXNlcjQwNDYxMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4046112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nguyenbathanh", "html_url": "https://github.com/nguyenbathanh", "followers_url": "https://api.github.com/users/nguyenbathanh/followers", "following_url": "https://api.github.com/users/nguyenbathanh/following{/other_user}", "gists_url": "https://api.github.com/users/nguyenbathanh/gists{/gist_id}", "starred_url": "https://api.github.com/users/nguyenbathanh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nguyenbathanh/subscriptions", "organizations_url": "https://api.github.com/users/nguyenbathanh/orgs", "repos_url": "https://api.github.com/users/nguyenbathanh/repos", "events_url": "https://api.github.com/users/nguyenbathanh/events{/privacy}", "received_events_url": "https://api.github.com/users/nguyenbathanh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-02T02:24:49Z", "updated_at": "2020-04-02T02:29:04Z", "closed_at": "2020-04-02T02:29:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI'm following installation guide of `django-reversion` at the documentation page, everything went well until I executed database migration by command `./manage.py migrate`, these are the errors:\r\n\r\n```\r\nreversion.Revision.user: (fields.E304) Reverse accessor for 'Revision.user' clashes with reverse accessor for 'Revision.triggered_by_user'.\r\n\tHINT: Add or change a related_name argument to the definition for 'Revision.user' or 'Revision.triggered_by_user'.\r\nrevisions.Revision.triggered_by_user: (fields.E304) Reverse accessor for 'Revision.triggered_by_user' clashes with reverse accessor for 'Revision.user'.\r\n\tHINT: Add or change a related_name argument to the definition for 'Revision.triggered_by_user' or 'Revision.user'.\r\n```\r\n\r\nDo you have any ideas on this matter?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/825", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/825/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/825/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/825/events", "html_url": "https://github.com/etianen/django-reversion/issues/825", "id": 578568470, "node_id": "MDU6SXNzdWU1Nzg1Njg0NzA=", "number": 825, "title": "When saving with update_fields", "user": {"login": "rokondo", "id": 640866, "node_id": "MDQ6VXNlcjY0MDg2Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/640866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rokondo", "html_url": "https://github.com/rokondo", "followers_url": "https://api.github.com/users/rokondo/followers", "following_url": "https://api.github.com/users/rokondo/following{/other_user}", "gists_url": "https://api.github.com/users/rokondo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rokondo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rokondo/subscriptions", "organizations_url": "https://api.github.com/users/rokondo/orgs", "repos_url": "https://api.github.com/users/rokondo/repos", "events_url": "https://api.github.com/users/rokondo/events{/privacy}", "received_events_url": "https://api.github.com/users/rokondo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-10T13:11:51Z", "updated_at": "2020-03-11T10:13:26Z", "closed_at": "2020-03-11T10:12:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I save my objects with ` object.save(update_fields=[request.POST.get(\"field\")])  `\r\n\r\nI noticed that the other \"unchanged\" fields are not saved in revision. Is that expected behaviour or is there a good solution as a workaround?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/824", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/824/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/824/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/824/events", "html_url": "https://github.com/etianen/django-reversion/issues/824", "id": 577720073, "node_id": "MDU6SXNzdWU1Nzc3MjAwNzM=", "number": 824, "title": "Patch release 3.0.6 broke Python 3.5 compatibility", "user": {"login": "nkuttler", "id": 505328, "node_id": "MDQ6VXNlcjUwNTMyOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/505328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nkuttler", "html_url": "https://github.com/nkuttler", "followers_url": "https://api.github.com/users/nkuttler/followers", "following_url": "https://api.github.com/users/nkuttler/following{/other_user}", "gists_url": "https://api.github.com/users/nkuttler/gists{/gist_id}", "starred_url": "https://api.github.com/users/nkuttler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nkuttler/subscriptions", "organizations_url": "https://api.github.com/users/nkuttler/orgs", "repos_url": "https://api.github.com/users/nkuttler/repos", "events_url": "https://api.github.com/users/nkuttler/events{/privacy}", "received_events_url": "https://api.github.com/users/nkuttler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-09T07:57:38Z", "updated_at": "2020-03-09T11:07:39Z", "closed_at": "2020-03-09T08:43:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "In e9c608e885e06705eac9474a339efcba3d68f106 support for Python < 3.6 was removed, but the version was only increased from 3.0.5 to 3.0.6 and the change wasn't even mentioned in the changelog. This is a major change and would have deserved a major version bump.\r\n\r\nFeel free to close this issue, it increases visibility for the problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/822", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/822/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/822/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/822/events", "html_url": "https://github.com/etianen/django-reversion/issues/822", "id": 565796073, "node_id": "MDU6SXNzdWU1NjU3OTYwNzM=", "number": 822, "title": "Removing squashed migrations prevents migration", "user": {"login": "jribbens", "id": 350846, "node_id": "MDQ6VXNlcjM1MDg0Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/350846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jribbens", "html_url": "https://github.com/jribbens", "followers_url": "https://api.github.com/users/jribbens/followers", "following_url": "https://api.github.com/users/jribbens/following{/other_user}", "gists_url": "https://api.github.com/users/jribbens/gists{/gist_id}", "starred_url": "https://api.github.com/users/jribbens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jribbens/subscriptions", "organizations_url": "https://api.github.com/users/jribbens/orgs", "repos_url": "https://api.github.com/users/jribbens/repos", "events_url": "https://api.github.com/users/jribbens/events{/privacy}", "received_events_url": "https://api.github.com/users/jribbens/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-15T19:16:45Z", "updated_at": "2020-04-29T17:42:19Z", "closed_at": "2020-02-17T08:15:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Because the migrations have been squashed, migration is impossible as it returns the following error: `django.db.utils.ProgrammingError: relation \"reversion_revision\" already exists`... you have to `pip install django-reversion==3.0.1 && ./manage.py migrate reversion && pip install -U django-reversion`\r\n\r\nIf there were only 4 of them and somehow having both the originals and the squashed one causes problems, why not just remove the squashed one and keep the originals?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/820", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/820/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/820/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/820/events", "html_url": "https://github.com/etianen/django-reversion/issues/820", "id": 563037203, "node_id": "MDU6SXNzdWU1NjMwMzcyMDM=", "number": 820, "title": "RemovedInDjango40Warning about ugettext_lazy usage", "user": {"login": "frague59", "id": 1118696, "node_id": "MDQ6VXNlcjExMTg2OTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1118696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frague59", "html_url": "https://github.com/frague59", "followers_url": "https://api.github.com/users/frague59/followers", "following_url": "https://api.github.com/users/frague59/following{/other_user}", "gists_url": "https://api.github.com/users/frague59/gists{/gist_id}", "starred_url": "https://api.github.com/users/frague59/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frague59/subscriptions", "organizations_url": "https://api.github.com/users/frague59/orgs", "repos_url": "https://api.github.com/users/frague59/repos", "events_url": "https://api.github.com/users/frague59/events{/privacy}", "received_events_url": "https://api.github.com/users/frague59/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-11T08:08:44Z", "updated_at": "2020-02-11T10:52:29Z", "closed_at": "2020-02-11T10:52:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nI'm using reversion in a new project with django 3.0.3, and if I enable the python warnings with -Wa, I've the following message:\r\n```\r\n<ProjectRoot>/venv/lib/python3.7/site-packages/reversion/models.py:46: RemovedInDjango40Warning: django.utils.translation.ugettext_lazy() is deprecated in favor of django.utils.translation.gettext_lazy().\r\n  verbose_name=_(\"date created\"),\r\n<ProjectRoot>/venv/lib/python3.7/site-packages/reversion/models.py:55: RemovedInDjango40Warning: django.utils.translation.ugettext_lazy() is deprecated in favor of django.utils.translation.gettext_lazy().\r\n  verbose_name=_(\"user\"),\r\n<ProjectRoot>/venv/lib/python3.7/site-packages/reversion/models.py:61: RemovedInDjango40Warning: django.utils.translation.ugettext_lazy() is deprecated in favor of django.utils.translation.gettext_lazy().\r\n  verbose_name=_(\"comment\"),\r\n```\r\nI'll provide a PR about this...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/813", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/813/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/813/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/813/events", "html_url": "https://github.com/etianen/django-reversion/issues/813", "id": 540192956, "node_id": "MDU6SXNzdWU1NDAxOTI5NTY=", "number": 813, "title": "ProtectedError", "user": {"login": "cfblaeb", "id": 6593035, "node_id": "MDQ6VXNlcjY1OTMwMzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6593035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cfblaeb", "html_url": "https://github.com/cfblaeb", "followers_url": "https://api.github.com/users/cfblaeb/followers", "following_url": "https://api.github.com/users/cfblaeb/following{/other_user}", "gists_url": "https://api.github.com/users/cfblaeb/gists{/gist_id}", "starred_url": "https://api.github.com/users/cfblaeb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cfblaeb/subscriptions", "organizations_url": "https://api.github.com/users/cfblaeb/orgs", "repos_url": "https://api.github.com/users/cfblaeb/repos", "events_url": "https://api.github.com/users/cfblaeb/events{/privacy}", "received_events_url": "https://api.github.com/users/cfblaeb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2019-12-19T09:37:57Z", "updated_at": "2020-01-27T16:36:06Z", "closed_at": "2020-01-21T09:46:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a model (my_model) with foreignkeys with \"on_delete\" set to \"models.PROTECT\".\r\nmy_link = models.ForeignKey(my_other_model, on_delete=models.PROTECT, null=True, blank=True)\r\nIf I create a my_model and dont set my_link, then reversion works fine.\r\nBut if I set my_link to actually link to an instance of my_other_model then I get the following error when I try to look at a reversion history instance in the admin view.\r\nE.g going to:\r\nhttp://127.0.0.1:8000/admin/my_app/my_model/1/history/1/\r\ngives: \r\nInternal Server Error: /admin/my_app/organism/1/history/1/\r\nTraceback (most recent call last):\r\n  File \"/home/my_user/.pyenv/versions/3.8.0/envs/ve38/lib/python3.8/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/home/my_user/.pyenv/versions/3.8.0/envs/ve38/lib/python3.8/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/home/my_user/.pyenv/versions/3.8.0/envs/ve38/lib/python3.8/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/home/my_user/.pyenv/versions/3.8.0/envs/ve38/lib/python3.8/site-packages/django/utils/decorators.py\", line 130, in _wrapped_view\r\n    response = view_func(request, *args, **kwargs)\r\n  File \"/home/my_user/.pyenv/versions/3.8.0/envs/ve38/lib/python3.8/site-packages/django/views/decorators/cache.py\", line 44, in _wrapped_view_func\r\n    response = view_func(request, *args, **kwargs)\r\n  File \"/home/my_user/.pyenv/versions/3.8.0/envs/ve38/lib/python3.8/site-packages/django/contrib/admin/sites.py\", line 231, in inner\r\n    return view(request, *args, **kwargs)\r\n  File \"/home/my_user/.pyenv/versions/3.8.0/envs/ve38/lib/python3.8/site-packages/reversion/admin.py\", line 214, in revision_view\r\n    return self._reversion_revisionform_view(\r\n  File \"/home/my_user/.pyenv/versions/3.8.0/envs/ve38/lib/python3.8/site-packages/reversion/admin.py\", line 164, in _reversion_revisionform_view\r\n    version.revision.revert(delete=True)\r\n  File \"/home/my_user/.pyenv/versions/3.8.0/envs/ve38/lib/python3.8/site-packages/reversion/models.py\", line 101, in revert\r\n    collector.collect(list(group))\r\n  File \"/home/my_user/.pyenv/versions/3.8.0/envs/ve38/lib/python3.8/site-packages/django/db/models/deletion.py\", line 245, in collect\r\n    field.remote_field.on_delete(self, field, sub_objs, self.using)\r\n  File \"/home/my_user/.pyenv/versions/3.8.0/envs/ve38/lib/python3.8/site-packages/django/db/models/deletion.py\", line 23, in PROTECT\r\n    raise ProtectedError(\r\ndjango.db.models.deletion.ProtectedError: (\"Cannot delete some instances of model 'my_other_model' because they are referenced through a protected foreign key: 'my_model.mylink'\", <QuerySet [<my_model: my_model_string>]>)\r\n\"GET /admin/my_app/organism/1/history/1/ HTTP/1.1\" 500 121554\r\n\r\n\r\nIt would appear the offending part is when reversion tries to : \"# Delete objects that are no longer in the current revision.\"\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/811", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/811/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/811/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/811/events", "html_url": "https://github.com/etianen/django-reversion/issues/811", "id": 532640654, "node_id": "MDU6SXNzdWU1MzI2NDA2NTQ=", "number": 811, "title": "Changelog on readthedocs not updated since 3.0.2", "user": {"login": "chicheng", "id": 21835, "node_id": "MDQ6VXNlcjIxODM1", "avatar_url": "https://avatars3.githubusercontent.com/u/21835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chicheng", "html_url": "https://github.com/chicheng", "followers_url": "https://api.github.com/users/chicheng/followers", "following_url": "https://api.github.com/users/chicheng/following{/other_user}", "gists_url": "https://api.github.com/users/chicheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/chicheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chicheng/subscriptions", "organizations_url": "https://api.github.com/users/chicheng/orgs", "repos_url": "https://api.github.com/users/chicheng/repos", "events_url": "https://api.github.com/users/chicheng/events{/privacy}", "received_events_url": "https://api.github.com/users/chicheng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-04T12:02:17Z", "updated_at": "2019-12-05T11:06:51Z", "closed_at": "2019-12-05T11:06:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://django-reversion.readthedocs.io/en/stable/changelog.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/805", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/805/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/805/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/805/events", "html_url": "https://github.com/etianen/django-reversion/issues/805", "id": 499741166, "node_id": "MDU6SXNzdWU0OTk3NDExNjY=", "number": 805, "title": "LookupError: No installed app with label 'admin'", "user": {"login": "mehran-prs", "id": 22454054, "node_id": "MDQ6VXNlcjIyNDU0MDU0", "avatar_url": "https://avatars2.githubusercontent.com/u/22454054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mehran-prs", "html_url": "https://github.com/mehran-prs", "followers_url": "https://api.github.com/users/mehran-prs/followers", "following_url": "https://api.github.com/users/mehran-prs/following{/other_user}", "gists_url": "https://api.github.com/users/mehran-prs/gists{/gist_id}", "starred_url": "https://api.github.com/users/mehran-prs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mehran-prs/subscriptions", "organizations_url": "https://api.github.com/users/mehran-prs/orgs", "repos_url": "https://api.github.com/users/mehran-prs/repos", "events_url": "https://api.github.com/users/mehran-prs/events{/privacy}", "received_events_url": "https://api.github.com/users/mehran-prs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-28T08:01:50Z", "updated_at": "2020-05-19T13:40:38Z", "closed_at": "2020-05-19T13:40:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I want to use djagno-reversion without `django.contrib.admin` app (using with DRF wihtout admin), but raise `LookupError: No installed app with label 'admin'.` error when try to run `python manage.py createinitialrevisions` command, how can i resolve it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/800", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/800/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/800/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/800/events", "html_url": "https://github.com/etianen/django-reversion/issues/800", "id": 478855761, "node_id": "MDU6SXNzdWU0Nzg4NTU3NjE=", "number": 800, "title": "What is the most performant way of getting dates when a particular field in model changed?", "user": {"login": "velis74", "id": 5511919, "node_id": "MDQ6VXNlcjU1MTE5MTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5511919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/velis74", "html_url": "https://github.com/velis74", "followers_url": "https://api.github.com/users/velis74/followers", "following_url": "https://api.github.com/users/velis74/following{/other_user}", "gists_url": "https://api.github.com/users/velis74/gists{/gist_id}", "starred_url": "https://api.github.com/users/velis74/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/velis74/subscriptions", "organizations_url": "https://api.github.com/users/velis74/orgs", "repos_url": "https://api.github.com/users/velis74/repos", "events_url": "https://api.github.com/users/velis74/events{/privacy}", "received_events_url": "https://api.github.com/users/velis74/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-09T08:09:15Z", "updated_at": "2019-08-09T08:50:30Z", "closed_at": "2019-08-09T08:50:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is purely a performance question. \r\n\r\nI have a model which contains a field denoting current app_version. Now I'm attempting to reconstruct version update history such that I would end up with a list of (date, version) tuples showing the time points when the app_version field changed its value:\r\n\r\n```\r\n    for ver in Version.objects.get_for_object(device).select_related('revision', 'revision__user')\\\r\n            .prefetch_related('content_type').in_bulk().values():\r\n        try:\r\n            v = ver.field_dict['app_version']\r\n            if v:\r\n                versions.append((ver.revision.date_created, v))\r\n        except:\r\n            pass\r\n```\r\n\r\nThis particular query takes anywhere between .7 and 5 seconds on my dev machine for the database I'm querying. It results in 6 queries being performed. All of this per each device, so this is unacceptably slow.\r\n\r\nAs seen by the code, I only need two fields from here: field_dict and revision.date_created.\r\n\r\nI'm not sure, but can I take a shortcut like this here:\r\n\r\n```\r\n    for ver in Version.objects.get_for_object(device).values('serialized_data', 'revision__date_created'):\r\n        try:\r\n            data = json.loads(ver['serialized_data'])\r\n            v = data[0]['fields']['app_version']\r\n            versions.append((ver['revision__date_created'], v))\r\n        except:\r\n            pass\r\n```\r\n\r\nThis reduces query time to somewhere between .3 and 1.2 seconds.\r\n\r\nIdeally there would be an even faster method?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/797", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/797/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/797/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/797/events", "html_url": "https://github.com/etianen/django-reversion/issues/797", "id": 461739627, "node_id": "MDU6SXNzdWU0NjE3Mzk2Mjc=", "number": 797, "title": "Reverting deleted items and their related records", "user": {"login": "akulakov", "id": 243874, "node_id": "MDQ6VXNlcjI0Mzg3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/243874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akulakov", "html_url": "https://github.com/akulakov", "followers_url": "https://api.github.com/users/akulakov/followers", "following_url": "https://api.github.com/users/akulakov/following{/other_user}", "gists_url": "https://api.github.com/users/akulakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/akulakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akulakov/subscriptions", "organizations_url": "https://api.github.com/users/akulakov/orgs", "repos_url": "https://api.github.com/users/akulakov/repos", "events_url": "https://api.github.com/users/akulakov/events{/privacy}", "received_events_url": "https://api.github.com/users/akulakov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-06-27T20:42:14Z", "updated_at": "2019-07-31T07:52:06Z", "closed_at": "2019-07-30T18:02:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "When items are deleted and then reverted in order to un-delete, is there any way to configure, or a recipe to use so that linked records get restored as well?\r\n\r\nConsider having models A and B, both registered, A has a FK to B, with on_delete=CASCADE argument. If B is deleted, both records will be deleted, but if B is reverted, A stays deleted.\r\n\r\nSame for on_delete=SET_NULL -- would like to find a way to have it restored to the ID of deleted record when it's reverted.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/796", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/796/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/796/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/796/events", "html_url": "https://github.com/etianen/django-reversion/issues/796", "id": 460957586, "node_id": "MDU6SXNzdWU0NjA5NTc1ODY=", "number": 796, "title": "Add a revision when an instance is deleted", "user": {"login": "alexkiro", "id": 1538458, "node_id": "MDQ6VXNlcjE1Mzg0NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1538458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexkiro", "html_url": "https://github.com/alexkiro", "followers_url": "https://api.github.com/users/alexkiro/followers", "following_url": "https://api.github.com/users/alexkiro/following{/other_user}", "gists_url": "https://api.github.com/users/alexkiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexkiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexkiro/subscriptions", "organizations_url": "https://api.github.com/users/alexkiro/orgs", "repos_url": "https://api.github.com/users/alexkiro/repos", "events_url": "https://api.github.com/users/alexkiro/events{/privacy}", "received_events_url": "https://api.github.com/users/alexkiro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-26T13:01:56Z", "updated_at": "2019-06-26T15:14:29Z", "closed_at": "2019-06-26T14:00:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears that a entry is not added in `reversion_revision` when an instance of the registered model is deleted. Either from admin or from a view. \r\n\r\nIt would be a nice addition to also store a revision in these cases for:\r\n\r\n- complete auditing\r\n- being able to more easily revert to a specific version in time in these cases (e.g. by recreating the deleted instance) ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/794", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/794/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/794/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/794/events", "html_url": "https://github.com/etianen/django-reversion/issues/794", "id": 457412954, "node_id": "MDU6SXNzdWU0NTc0MTI5NTQ=", "number": 794, "title": "Django reversion requires the 'django.contrib.admin' application to be installed", "user": {"login": "irtimir", "id": 22493187, "node_id": "MDQ6VXNlcjIyNDkzMTg3", "avatar_url": "https://avatars1.githubusercontent.com/u/22493187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irtimir", "html_url": "https://github.com/irtimir", "followers_url": "https://api.github.com/users/irtimir/followers", "following_url": "https://api.github.com/users/irtimir/following{/other_user}", "gists_url": "https://api.github.com/users/irtimir/gists{/gist_id}", "starred_url": "https://api.github.com/users/irtimir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irtimir/subscriptions", "organizations_url": "https://api.github.com/users/irtimir/orgs", "repos_url": "https://api.github.com/users/irtimir/repos", "events_url": "https://api.github.com/users/irtimir/events{/privacy}", "received_events_url": "https://api.github.com/users/irtimir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-18T11:23:40Z", "updated_at": "2019-06-18T12:03:33Z", "closed_at": "2019-06-18T12:03:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When `createinitialrevisions` is called, occurs autodiscovery of application models `django.contrib.admin`, but it can't be installed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/788", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/788/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/788/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/788/events", "html_url": "https://github.com/etianen/django-reversion/issues/788", "id": 438680636, "node_id": "MDU6SXNzdWU0Mzg2ODA2MzY=", "number": 788, "title": "reversion works only in admin", "user": {"login": "AlekseiKhatkevich", "id": 47420076, "node_id": "MDQ6VXNlcjQ3NDIwMDc2", "avatar_url": "https://avatars0.githubusercontent.com/u/47420076?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlekseiKhatkevich", "html_url": "https://github.com/AlekseiKhatkevich", "followers_url": "https://api.github.com/users/AlekseiKhatkevich/followers", "following_url": "https://api.github.com/users/AlekseiKhatkevich/following{/other_user}", "gists_url": "https://api.github.com/users/AlekseiKhatkevich/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlekseiKhatkevich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlekseiKhatkevich/subscriptions", "organizations_url": "https://api.github.com/users/AlekseiKhatkevich/orgs", "repos_url": "https://api.github.com/users/AlekseiKhatkevich/repos", "events_url": "https://api.github.com/users/AlekseiKhatkevich/events{/privacy}", "received_events_url": "https://api.github.com/users/AlekseiKhatkevich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-30T09:26:02Z", "updated_at": "2019-11-08T17:54:12Z", "closed_at": "2019-11-08T17:54:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\r\nProblem is that reversion only works when entry has been made or changed in admin panel, but when it was made or changed from web page - \"recovery deleted\" folder would not show these deleted entries.\r\nSame issue for 5 different models.\r\n\r\nAll of them are registered in admin.py like this:\r\n\r\n@admin.register(BoatModel)\r\nclass BoatsAdmin(VersionAdmin):\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/787", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/787/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/787/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/787/events", "html_url": "https://github.com/etianen/django-reversion/issues/787", "id": 436476642, "node_id": "MDU6SXNzdWU0MzY0NzY2NDI=", "number": 787, "title": "Add ip address to registered model revision when RevisionMiddleware is present.", "user": {"login": "robwise1", "id": 17411210, "node_id": "MDQ6VXNlcjE3NDExMjEw", "avatar_url": "https://avatars3.githubusercontent.com/u/17411210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robwise1", "html_url": "https://github.com/robwise1", "followers_url": "https://api.github.com/users/robwise1/followers", "following_url": "https://api.github.com/users/robwise1/following{/other_user}", "gists_url": "https://api.github.com/users/robwise1/gists{/gist_id}", "starred_url": "https://api.github.com/users/robwise1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robwise1/subscriptions", "organizations_url": "https://api.github.com/users/robwise1/orgs", "repos_url": "https://api.github.com/users/robwise1/repos", "events_url": "https://api.github.com/users/robwise1/events{/privacy}", "received_events_url": "https://api.github.com/users/robwise1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-24T03:12:08Z", "updated_at": "2019-11-08T17:53:59Z", "closed_at": "2019-11-08T17:53:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I apologize if this has been raised before. I see similar feature requests but these appear to have answers that refer to out of date documentation. I am looking for advice on how to add the IP address to the revision. \r\n\r\nI understand that I need to create a separate model, with a OneToOne of the corresponding Revision as well as additional fields for whatever extra data is needed. However, I do not understand where I can access both the revision as well as the request. \r\n\r\nI have a model, registered with reversion like this\r\n\r\n```\r\n@reversion.register()\r\nclass Account(BaseAccount):\r\n    name = models.CharField()\r\n    ...\r\n```\r\n\r\nI'm using RevisionMiddleware, but the middleware only informs if a revision is necessary, and sets the user, the revision is not yet created. Is there a simple way to fetch the IP and create my Metadata storage model when registering a model? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/786", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/786/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/786/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/786/events", "html_url": "https://github.com/etianen/django-reversion/issues/786", "id": 436233399, "node_id": "MDU6SXNzdWU0MzYyMzMzOTk=", "number": 786, "title": "Lots of sql requests on the history view page", "user": {"login": "OlivierGuilloux", "id": 15343458, "node_id": "MDQ6VXNlcjE1MzQzNDU4", "avatar_url": "https://avatars0.githubusercontent.com/u/15343458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OlivierGuilloux", "html_url": "https://github.com/OlivierGuilloux", "followers_url": "https://api.github.com/users/OlivierGuilloux/followers", "following_url": "https://api.github.com/users/OlivierGuilloux/following{/other_user}", "gists_url": "https://api.github.com/users/OlivierGuilloux/gists{/gist_id}", "starred_url": "https://api.github.com/users/OlivierGuilloux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OlivierGuilloux/subscriptions", "organizations_url": "https://api.github.com/users/OlivierGuilloux/orgs", "repos_url": "https://api.github.com/users/OlivierGuilloux/repos", "events_url": "https://api.github.com/users/OlivierGuilloux/events{/privacy}", "received_events_url": "https://api.github.com/users/OlivierGuilloux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-23T14:53:34Z", "updated_at": "2019-04-23T15:27:05Z", "closed_at": "2019-04-23T15:26:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have a lot of SQL on the history view, for this one I have 40 queries:\r\n\r\n![image](https://user-images.githubusercontent.com/15343458/56590329-360a3480-65e7-11e9-834a-fcb0c5f1099a.png)\r\n\r\n\r\nWith revision that contains thousands of objects versions the page cannot display (timeout). Did I miss somthing ?\r\n\r\nWhen I comment the following line in `admin.py` the number of requests get down :\r\n```python\r\n                # Revert the revision.\r\n                # version.revision.revert(delete=True)\r\n```\r\n![image](https://user-images.githubusercontent.com/15343458/56590853-0c9dd880-65e8-11e9-904a-7c55deebb2d0.png)\r\n\r\nDid i miss something on my side ?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/781", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/781/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/781/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/781/events", "html_url": "https://github.com/etianen/django-reversion/issues/781", "id": 422133500, "node_id": "MDU6SXNzdWU0MjIxMzM1MDA=", "number": 781, "title": "Migrations snafu", "user": {"login": "andreasnuesslein", "id": 320080, "node_id": "MDQ6VXNlcjMyMDA4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/320080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreasnuesslein", "html_url": "https://github.com/andreasnuesslein", "followers_url": "https://api.github.com/users/andreasnuesslein/followers", "following_url": "https://api.github.com/users/andreasnuesslein/following{/other_user}", "gists_url": "https://api.github.com/users/andreasnuesslein/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreasnuesslein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreasnuesslein/subscriptions", "organizations_url": "https://api.github.com/users/andreasnuesslein/orgs", "repos_url": "https://api.github.com/users/andreasnuesslein/repos", "events_url": "https://api.github.com/users/andreasnuesslein/events{/privacy}", "received_events_url": "https://api.github.com/users/andreasnuesslein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-18T10:11:53Z", "updated_at": "2019-03-28T08:54:34Z", "closed_at": "2019-03-28T08:54:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Ahoy all,\r\n\r\nI know this has been discussed a lot, but `migrations` are still somewhat messed up.\r\ni.e.:\r\n> 3.0.2 - 05/11/2018\r\n> Removed squashed migrations, as they subtly messed up the Django migrations framework \r\n> (@etianen).\r\n\r\nHowever: version 3.0.3 still has \r\n```\r\n$ l migrations/\r\ntotal 8.0K\r\n-rw-r--r-- 1 nuts nuts 2.6K Mar 18 10:52 0001_squashed_0004_auto_20160611_1202.py\r\n```\r\n\r\nSo is the squashed migration gone or not? :)\r\nAccording to https://github.com/etianen/django-reversion/compare/v3.0.2..v3.0.3  nothing changed in that time.\r\n\r\nCheers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/780", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/780/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/780/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/780/events", "html_url": "https://github.com/etianen/django-reversion/issues/780", "id": 419381225, "node_id": "MDU6SXNzdWU0MTkzODEyMjU=", "number": 780, "title": "Can it run on django 1.10? ", "user": {"login": "raymondSeger", "id": 3291296, "node_id": "MDQ6VXNlcjMyOTEyOTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/3291296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raymondSeger", "html_url": "https://github.com/raymondSeger", "followers_url": "https://api.github.com/users/raymondSeger/followers", "following_url": "https://api.github.com/users/raymondSeger/following{/other_user}", "gists_url": "https://api.github.com/users/raymondSeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/raymondSeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raymondSeger/subscriptions", "organizations_url": "https://api.github.com/users/raymondSeger/orgs", "repos_url": "https://api.github.com/users/raymondSeger/repos", "events_url": "https://api.github.com/users/raymondSeger/events{/privacy}", "received_events_url": "https://api.github.com/users/raymondSeger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-11T09:56:29Z", "updated_at": "2019-03-11T11:34:45Z", "closed_at": "2019-03-11T11:34:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can it run on django 1.10? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/779", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/779/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/779/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/779/events", "html_url": "https://github.com/etianen/django-reversion/issues/779", "id": 413737571, "node_id": "MDU6SXNzdWU0MTM3Mzc1NzE=", "number": 779, "title": "Suggestion: Add note on serialized_rollback = True for TransactionTestCase or LiveServerTestCase", "user": {"login": "torbjoernk", "id": 1336965, "node_id": "MDQ6VXNlcjEzMzY5NjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1336965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/torbjoernk", "html_url": "https://github.com/torbjoernk", "followers_url": "https://api.github.com/users/torbjoernk/followers", "following_url": "https://api.github.com/users/torbjoernk/following{/other_user}", "gists_url": "https://api.github.com/users/torbjoernk/gists{/gist_id}", "starred_url": "https://api.github.com/users/torbjoernk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/torbjoernk/subscriptions", "organizations_url": "https://api.github.com/users/torbjoernk/orgs", "repos_url": "https://api.github.com/users/torbjoernk/repos", "events_url": "https://api.github.com/users/torbjoernk/events{/privacy}", "received_events_url": "https://api.github.com/users/torbjoernk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-23T20:40:50Z", "updated_at": "2019-02-25T20:59:34Z", "closed_at": "2019-02-25T20:59:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "**I suggest to add a note to the documentation of django-reversion when used in combination with [TransactionTestCase](https://docs.djangoproject.com/en/2.1/topics/testing/tools/#transactiontestcase) or [LiveServerTestCase](https://docs.djangoproject.com/en/2.1/topics/testing/tools/#liveservertestcase) in order to enable `serialized_rollback`.**\r\n\r\nI just spend several hours debugging the failure of my Selenium-driven LiveServerTestCases as soon as a django-reversion-registered model was created within such a test case.\r\n\r\nWith the following scaffold of the test case:\r\n```{.py}\r\nclass MyViewLiveTest(LiveServerTestCase):\r\n    @classmethod\r\n    def setUpClass(cls):\r\n        super().setUpClass()\r\n        cls.selenium = Chrome(options.binary_location)\r\n        cls.selenium.implicitly_wait(10)\r\n\r\n    @classmethod\r\n    def tearDownClass(cls):\r\n        cls.selenium.quit()\r\n        super().tearDownClass()\r\n\r\n    @tag('selenium')\r\n    def test_create_versioned_model(self):\r\n        with reversion.create_revision():\r\n            MyModel.objects.create(foo='bar')\r\n```\r\nOn class tear down I was presented the following error:\r\n```\r\npython manage.py test --tag=selenium requirements\r\nCreating test database for alias 'default'...\r\nSystem check identified no issues (0 silenced).\r\n\r\nError\r\nTraceback (most recent call last):\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/db/backends/base/base.py\", line 239, in _commit\r\n    return self.connection.commit()\r\nsqlite3.IntegrityError: FOREIGN KEY constraint failed\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/test/testcases.py\", line 209, in __call__\r\n    self._post_teardown()\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/test/testcases.py\", line 908, in _post_teardown\r\n    self._fixture_teardown()\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/test/testcases.py\", line 943, in _fixture_teardown\r\n    inhibit_post_migrate=inhibit_post_migrate)\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/core/management/__init__.py\", line 148, in call_command\r\n    return command.execute(*args, **defaults)\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/core/management/base.py\", line 353, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/core/management/commands/flush.py\", line 80, in handle\r\n    emit_post_migrate_signal(verbosity, interactive, database)\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/core/management/sql.py\", line 51, in emit_post_migrate_signal\r\n    **kwargs\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/dispatch/dispatcher.py\", line 175, in send\r\n    for receiver in self._live_receivers(sender)\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/dispatch/dispatcher.py\", line 175, in <listcomp>\r\n    for receiver in self._live_receivers(sender)\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/contrib/auth/management/__init__.py\", line 79, in create_permissions\r\n    Permission.objects.using(using).bulk_create(perms)\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/db/models/query.py\", line 471, in bulk_create\r\n    obj_without_pk._state.db = self.db\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/db/transaction.py\", line 212, in __exit__\r\n    connection.commit()\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/db/backends/base/base.py\", line 261, in commit\r\n    self._commit()\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/db/backends/base/base.py\", line 239, in _commit\r\n    return self.connection.commit()\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/db/utils.py\", line 89, in __exit__\r\n    raise dj_exc_value.with_traceback(traceback) from exc_value\r\n  File \"/home/john/.pyenv/versions/3.7.2/lib/python3.7/site-packages/django/db/backends/base/base.py\", line 239, in _commit\r\n    return self.connection.commit()\r\ndjango.db.utils.IntegrityError: FOREIGN KEY constraint failed\r\n\r\nDestroying test database for alias 'default'...\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\nThe fix is to set `serialized_rollback = True` in the LiveServerTestCase class as documented [in the warning box of the TransactionTestCase API docu](https://docs.djangoproject.com/en/2.1/topics/testing/tools/#transactiontestcase).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/778", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/778/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/778/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/778/events", "html_url": "https://github.com/etianen/django-reversion/issues/778", "id": 412536137, "node_id": "MDU6SXNzdWU0MTI1MzYxMzc=", "number": 778, "title": "changed", "user": {"login": "fle", "id": 648737, "node_id": "MDQ6VXNlcjY0ODczNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/648737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fle", "html_url": "https://github.com/fle", "followers_url": "https://api.github.com/users/fle/followers", "following_url": "https://api.github.com/users/fle/following{/other_user}", "gists_url": "https://api.github.com/users/fle/gists{/gist_id}", "starred_url": "https://api.github.com/users/fle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fle/subscriptions", "organizations_url": "https://api.github.com/users/fle/orgs", "repos_url": "https://api.github.com/users/fle/repos", "events_url": "https://api.github.com/users/fle/events{/privacy}", "received_events_url": "https://api.github.com/users/fle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-20T17:12:19Z", "updated_at": "2019-02-20T17:12:29Z", "closed_at": "2019-02-20T17:12:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/777", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/777/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/777/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/777/events", "html_url": "https://github.com/etianen/django-reversion/issues/777", "id": 404297575, "node_id": "MDU6SXNzdWU0MDQyOTc1NzU=", "number": 777, "title": "AttributeError: module 'reversion' has no attribute 'models'", "user": {"login": "cegg", "id": 3072972, "node_id": "MDQ6VXNlcjMwNzI5NzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3072972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cegg", "html_url": "https://github.com/cegg", "followers_url": "https://api.github.com/users/cegg/followers", "following_url": "https://api.github.com/users/cegg/following{/other_user}", "gists_url": "https://api.github.com/users/cegg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cegg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cegg/subscriptions", "organizations_url": "https://api.github.com/users/cegg/orgs", "repos_url": "https://api.github.com/users/cegg/repos", "events_url": "https://api.github.com/users/cegg/events{/privacy}", "received_events_url": "https://api.github.com/users/cegg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-29T13:44:14Z", "updated_at": "2019-01-30T08:24:27Z", "closed_at": "2019-01-30T08:24:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to reanimate someone else's django application.\r\n\r\nPython 3.6.8\r\nconda 4.5.11\r\nDjango 1.11.3 (also tried 2.1.5)\r\ndjango-reversion 3.0.3\r\n\r\n`models.py` code:\r\n```\r\n@reversion.register()\r\nclass Drug(models.Model):\r\n    version = fields.GenericRelation(reversion.models.Version)\r\n```\r\n\r\n`$ DEBUG=true python manage.py runserver`\r\n\r\n```\r\n  File \"/Users/userjoe/myapp/myapp/models.py\", line 281, in <module>\r\n    class Drug(models.Model):\r\n  File \"/Users/userjoe/myapp/myapp/models.py\", line 285, in Drug\r\n    version = fields.GenericRelation(reversion.models.Version)\r\nAttributeError: module 'reversion' has no attribute 'models'\r\n```\r\n\r\nWhat is it trying to tell me? A version mismatch somewhere? \r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/773", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/773/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/773/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/773/events", "html_url": "https://github.com/etianen/django-reversion/issues/773", "id": 401098488, "node_id": "MDU6SXNzdWU0MDEwOTg0ODg=", "number": 773, "title": "Tests runnable without external database?", "user": {"login": "risicle", "id": 807447, "node_id": "MDQ6VXNlcjgwNzQ0Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/807447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/risicle", "html_url": "https://github.com/risicle", "followers_url": "https://api.github.com/users/risicle/followers", "following_url": "https://api.github.com/users/risicle/following{/other_user}", "gists_url": "https://api.github.com/users/risicle/gists{/gist_id}", "starred_url": "https://api.github.com/users/risicle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/risicle/subscriptions", "organizations_url": "https://api.github.com/users/risicle/orgs", "repos_url": "https://api.github.com/users/risicle/repos", "events_url": "https://api.github.com/users/risicle/events{/privacy}", "received_events_url": "https://api.github.com/users/risicle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-20T13:34:18Z", "updated_at": "2020-05-12T15:24:52Z", "closed_at": "2020-05-12T15:24:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be particularly neat if the test suite's external database tests were optional. This would allow the django-reversion Nix package (https://github.com/NixOS/nixpkgs/blob/ca7ef865c45726dc80ba6e3d42e37ccfa6c0ae73/pkgs/development/python-modules/django_reversion/default.nix) to enable the tests, which would give package maintainers bumping the version a little more confidence they're not building broken packages. (They'd also get re-run whenever any of its dependencies get bumped to check *those* haven't broken it)\r\n\r\nIt does appear that a good few of the tests simply work against the default sqlite database and it would probably just be a matter of scattering some `@skipIf` decorators or `skipTest()` calls throughout the others. For bonus points, make `settings.py` simply omit the missing entries of `DATABASES` if the relevant db credentials e.g. `DJANGO_DATABASE_NAME_POSTGRES` aren't found in the env.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/772", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/772/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/772/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/772/events", "html_url": "https://github.com/etianen/django-reversion/issues/772", "id": 399344167, "node_id": "MDU6SXNzdWUzOTkzNDQxNjc=", "number": 772, "title": "Could not revert when register only particular fields. ", "user": {"login": "wojciezki", "id": 20116216, "node_id": "MDQ6VXNlcjIwMTE2MjE2", "avatar_url": "https://avatars1.githubusercontent.com/u/20116216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wojciezki", "html_url": "https://github.com/wojciezki", "followers_url": "https://api.github.com/users/wojciezki/followers", "following_url": "https://api.github.com/users/wojciezki/following{/other_user}", "gists_url": "https://api.github.com/users/wojciezki/gists{/gist_id}", "starred_url": "https://api.github.com/users/wojciezki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wojciezki/subscriptions", "organizations_url": "https://api.github.com/users/wojciezki/orgs", "repos_url": "https://api.github.com/users/wojciezki/repos", "events_url": "https://api.github.com/users/wojciezki/events{/privacy}", "received_events_url": "https://api.github.com/users/wojciezki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-15T13:26:44Z", "updated_at": "2019-01-15T14:11:20Z", "closed_at": "2019-01-15T14:11:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/771", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/771/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/771/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/771/events", "html_url": "https://github.com/etianen/django-reversion/issues/771", "id": 390787405, "node_id": "MDU6SXNzdWUzOTA3ODc0MDU=", "number": 771, "title": "RevisionMixin not working with DeleteView ?", "user": {"login": "PLsergent", "id": 27278774, "node_id": "MDQ6VXNlcjI3Mjc4Nzc0", "avatar_url": "https://avatars3.githubusercontent.com/u/27278774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PLsergent", "html_url": "https://github.com/PLsergent", "followers_url": "https://api.github.com/users/PLsergent/followers", "following_url": "https://api.github.com/users/PLsergent/following{/other_user}", "gists_url": "https://api.github.com/users/PLsergent/gists{/gist_id}", "starred_url": "https://api.github.com/users/PLsergent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PLsergent/subscriptions", "organizations_url": "https://api.github.com/users/PLsergent/orgs", "repos_url": "https://api.github.com/users/PLsergent/repos", "events_url": "https://api.github.com/users/PLsergent/events{/privacy}", "received_events_url": "https://api.github.com/users/PLsergent/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-13T17:41:45Z", "updated_at": "2018-12-14T08:48:06Z", "closed_at": "2018-12-14T08:48:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I was making a list of my database changes to have an \"history\" page. I'm using RevisionMixin with my class based views and I iterate over the Version table to display all past actions. It's working pretty well, I'm having my creations and modifications but I'm unable to display the deletions. Why is that ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/770", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/770/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/770/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/770/events", "html_url": "https://github.com/etianen/django-reversion/issues/770", "id": 390650818, "node_id": "MDU6SXNzdWUzOTA2NTA4MTg=", "number": 770, "title": "Add comment with new-style RevisionMiddleware", "user": {"login": "spapas", "id": 3911074, "node_id": "MDQ6VXNlcjM5MTEwNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3911074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spapas", "html_url": "https://github.com/spapas", "followers_url": "https://api.github.com/users/spapas/followers", "following_url": "https://api.github.com/users/spapas/following{/other_user}", "gists_url": "https://api.github.com/users/spapas/gists{/gist_id}", "starred_url": "https://api.github.com/users/spapas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spapas/subscriptions", "organizations_url": "https://api.github.com/users/spapas/orgs", "repos_url": "https://api.github.com/users/spapas/repos", "events_url": "https://api.github.com/users/spapas/events{/privacy}", "received_events_url": "https://api.github.com/users/spapas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-13T12:11:07Z", "updated_at": "2018-12-13T12:50:01Z", "closed_at": "2018-12-13T12:33:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to add a comment with the path that was used for each reversion with new-style middleware. See previous discussion (for old-style ones) in #562.\r\n\r\nI've tried something like this:\r\n\r\n```\r\nimport reversion\r\nfrom reversion.middleware import RevisionMiddleware\r\n\r\nclass CommentedRevisionMiddleware(RevisionMiddleware):\r\n    def __call__(self, request):\r\n        resp = self.get_response(request)\r\n    if reversion.is_active():\r\n        reversion.set_comment(request.path)\r\n    return resp\r\n```\r\n\r\nand various variations. No luck, the comment always stays empty :(\r\n\r\nAny help? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/767", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/767/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/767/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/767/events", "html_url": "https://github.com/etianen/django-reversion/issues/767", "id": 378406437, "node_id": "MDU6SXNzdWUzNzg0MDY0Mzc=", "number": 767, "title": "ModuleNotFoundError: No module named 'django.core.urlresolvers'", "user": {"login": "chang-brian", "id": 29786894, "node_id": "MDQ6VXNlcjI5Nzg2ODk0", "avatar_url": "https://avatars3.githubusercontent.com/u/29786894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chang-brian", "html_url": "https://github.com/chang-brian", "followers_url": "https://api.github.com/users/chang-brian/followers", "following_url": "https://api.github.com/users/chang-brian/following{/other_user}", "gists_url": "https://api.github.com/users/chang-brian/gists{/gist_id}", "starred_url": "https://api.github.com/users/chang-brian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chang-brian/subscriptions", "organizations_url": "https://api.github.com/users/chang-brian/orgs", "repos_url": "https://api.github.com/users/chang-brian/repos", "events_url": "https://api.github.com/users/chang-brian/events{/privacy}", "received_events_url": "https://api.github.com/users/chang-brian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-07T18:08:09Z", "updated_at": "2019-04-18T08:32:06Z", "closed_at": "2019-04-18T08:32:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does django-reversion support Django 2.0 and 2.1? There's still a reference to `django.core.urlresolvers` rather than `django.urls`.\r\n\r\n`Traceback (most recent call last):\r\n  File \"./manage.py\", line 17, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"/Users/brian/.local/share/virtualenvs/jyve-django-94mtg9Ra/lib/python3.6/site-packages/django/core/management/__init__.py\", line 371, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/Users/brian/.local/share/virtualenvs/jyve-django-94mtg9Ra/lib/python3.6/site-packages/django/core/management/__init__.py\", line 365, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/Users/brian/.local/share/virtualenvs/jyve-django-94mtg9Ra/lib/python3.6/site-packages/django/core/management/base.py\", line 288, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/Users/brian/.local/share/virtualenvs/jyve-django-94mtg9Ra/lib/python3.6/site-packages/django/core/management/base.py\", line 335, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/Users/brian/.local/share/virtualenvs/jyve-django-94mtg9Ra/lib/python3.6/site-packages/reversion/management/commands/createinitialrevisions.py\", line 58, in handle\r\n    for model in self.get_models(options):\r\n  File \"/Users/brian/.local/share/virtualenvs/jyve-django-94mtg9Ra/lib/python3.6/site-packages/reversion/management/commands/__init__.py\", line 31, in get_models\r\n    admin.autodiscover()\r\n  File \"/Users/brian/.local/share/virtualenvs/jyve-django-94mtg9Ra/lib/python3.6/site-packages/django/contrib/admin/__init__.py\", line 26, in autodiscover\r\n    autodiscover_modules('admin', register_to=site)\r\n  File \"/Users/brian/.local/share/virtualenvs/jyve-django-94mtg9Ra/lib/python3.6/site-packages/django/utils/module_loading.py\", line 47, in autodiscover_modules\r\n    import_module('%s.%s' % (app_config.name, module_to_search))\r\n  File \"/Users/brian/.local/share/virtualenvs/jyve-django-94mtg9Ra/lib/python3.6/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 994, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 678, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/Users/brian/.local/share/virtualenvs/jyve-django-94mtg9Ra/lib/python3.6/site-packages/adminsortable2/admin.py\", line 9, in <module>\r\n    from django.core.urlresolvers import reverse\r\nModuleNotFoundError: No module named 'django.core.urlresolvers'`\r\n\r\nThis happens when I run `./manage.py createinitialrevisions`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/763", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/763/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/763/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/763/events", "html_url": "https://github.com/etianen/django-reversion/issues/763", "id": 375848248, "node_id": "MDU6SXNzdWUzNzU4NDgyNDg=", "number": 763, "title": "Upgrade from 3.0.0 to 3.0.1 result in error when migrate", "user": {"login": "chowlinyi", "id": 34671670, "node_id": "MDQ6VXNlcjM0NjcxNjcw", "avatar_url": "https://avatars0.githubusercontent.com/u/34671670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chowlinyi", "html_url": "https://github.com/chowlinyi", "followers_url": "https://api.github.com/users/chowlinyi/followers", "following_url": "https://api.github.com/users/chowlinyi/following{/other_user}", "gists_url": "https://api.github.com/users/chowlinyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/chowlinyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chowlinyi/subscriptions", "organizations_url": "https://api.github.com/users/chowlinyi/orgs", "repos_url": "https://api.github.com/users/chowlinyi/repos", "events_url": "https://api.github.com/users/chowlinyi/events{/privacy}", "received_events_url": "https://api.github.com/users/chowlinyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-10-31T08:25:55Z", "updated_at": "2019-03-18T10:30:30Z", "closed_at": "2018-11-05T10:17:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "After upgrading from 3.0.0 to 3.0.1 when I tried to run migrate, it returns the following error:\r\n\r\nApplying reversion.0001_squashed_0004_auto_20160611_1202...Traceback (most recent call last):\r\n  File \"../.virtualenvs/aws/lib/python3.6/site-packages/django/db/backends/utils.py\", line 83, in _execute\r\n    return self.cursor.execute(sql)\r\npsycopg2.ProgrammingError: relation \"reversion_revision\" already exists", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/762", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/762/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/762/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/762/events", "html_url": "https://github.com/etianen/django-reversion/issues/762", "id": 375117161, "node_id": "MDU6SXNzdWUzNzUxMTcxNjE=", "number": 762, "title": "Accessing versioned field don't yield same result whether using `field_dict` or `object` ", "user": {"login": "Kraymer", "id": 84227, "node_id": "MDQ6VXNlcjg0MjI3", "avatar_url": "https://avatars2.githubusercontent.com/u/84227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kraymer", "html_url": "https://github.com/Kraymer", "followers_url": "https://api.github.com/users/Kraymer/followers", "following_url": "https://api.github.com/users/Kraymer/following{/other_user}", "gists_url": "https://api.github.com/users/Kraymer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kraymer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kraymer/subscriptions", "organizations_url": "https://api.github.com/users/Kraymer/orgs", "repos_url": "https://api.github.com/users/Kraymer/repos", "events_url": "https://api.github.com/users/Kraymer/events{/privacy}", "received_events_url": "https://api.github.com/users/Kraymer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-29T16:56:47Z", "updated_at": "2018-10-29T19:49:57Z", "closed_at": "2018-10-29T19:49:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have this b object with a `date_from` field originally set at _26 Oct_ and set to _25 Oct_ later, in  the meantime the object has been versioned twice.\r\n\r\n`$ manage.py shell_plus`\r\n```\r\nIn [5]: b.versions().last().field_dict['date_from']\r\nOut[5]: datetime.datetime(2018, 10, 26, 14, 0)\r\n\r\nIn [6]: b.versions().last().object.date_from\r\nOut[6]: datetime.datetime(2018, 10, 25, 14, 0)\r\n```\r\nIsn't `b.versions().last().object.date_from` supposed to be equal to `datetime.datetime(2018, 10, 26, 14, 0)` ?\r\nor I get a wrong comprehension of this `object` field", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/759", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/759/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/759/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/759/events", "html_url": "https://github.com/etianen/django-reversion/issues/759", "id": 373555056, "node_id": "MDU6SXNzdWUzNzM1NTUwNTY=", "number": 759, "title": "Disabling \"Users\" filter on \"Revisions\" admin page", "user": {"login": "Kraymer", "id": 84227, "node_id": "MDQ6VXNlcjg0MjI3", "avatar_url": "https://avatars2.githubusercontent.com/u/84227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kraymer", "html_url": "https://github.com/Kraymer", "followers_url": "https://api.github.com/users/Kraymer/followers", "following_url": "https://api.github.com/users/Kraymer/following{/other_user}", "gists_url": "https://api.github.com/users/Kraymer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kraymer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kraymer/subscriptions", "organizations_url": "https://api.github.com/users/Kraymer/orgs", "repos_url": "https://api.github.com/users/Kraymer/repos", "events_url": "https://api.github.com/users/Kraymer/events{/privacy}", "received_events_url": "https://api.github.com/users/Kraymer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-24T15:54:48Z", "updated_at": "2018-10-25T09:02:18Z", "closed_at": "2018-10-25T07:46:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I access http://xxxx/admin/reversion/revision/ page, the page takes minutes to load because of _User_ filter list containing thousands of elements.\r\n\r\nHow can I disable that filter ?\r\n\r\nI tried adding this code to my app :\r\n\r\n~~~\r\nadmin.site.unregister(Version)\r\n\r\nclass VersionAdmin(VersionAdmin):\r\n    list_filter = ()\r\nadmin.site.register(Version, VersionAdmin)\r\n~~~\r\n\r\nwith no results\r\n\r\n![selection_460](https://user-images.githubusercontent.com/84227/47444010-ce00a000-d7b5-11e8-9617-89c268359017.png)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/758", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/758/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/758/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/758/events", "html_url": "https://github.com/etianen/django-reversion/issues/758", "id": 373544978, "node_id": "MDU6SXNzdWUzNzM1NDQ5Nzg=", "number": 758, "title": "Question: There is a way to create reversions for a placeholder field of django-cms?", "user": {"login": "CristianCn", "id": 11417305, "node_id": "MDQ6VXNlcjExNDE3MzA1", "avatar_url": "https://avatars2.githubusercontent.com/u/11417305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CristianCn", "html_url": "https://github.com/CristianCn", "followers_url": "https://api.github.com/users/CristianCn/followers", "following_url": "https://api.github.com/users/CristianCn/following{/other_user}", "gists_url": "https://api.github.com/users/CristianCn/gists{/gist_id}", "starred_url": "https://api.github.com/users/CristianCn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CristianCn/subscriptions", "organizations_url": "https://api.github.com/users/CristianCn/orgs", "repos_url": "https://api.github.com/users/CristianCn/repos", "events_url": "https://api.github.com/users/CristianCn/events{/privacy}", "received_events_url": "https://api.github.com/users/CristianCn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-24T15:33:40Z", "updated_at": "2018-10-26T15:56:47Z", "closed_at": "2018-10-26T15:56:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have registered my models and it works great for the normal model fields, but it doesn't create reversions for the placeholder fields \r\n\r\nI saw that aldryn has created a way in aldryn-reversion but now it is deprecated, there is a way to register placeholder fields at the moment or tehre any plans in the future to add this feature?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/753", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/753/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/753/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/753/events", "html_url": "https://github.com/etianen/django-reversion/issues/753", "id": 359977021, "node_id": "MDU6SXNzdWUzNTk5NzcwMjE=", "number": 753, "title": "License clarity", "user": {"login": "iMerica", "id": 487897, "node_id": "MDQ6VXNlcjQ4Nzg5Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/487897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iMerica", "html_url": "https://github.com/iMerica", "followers_url": "https://api.github.com/users/iMerica/followers", "following_url": "https://api.github.com/users/iMerica/following{/other_user}", "gists_url": "https://api.github.com/users/iMerica/gists{/gist_id}", "starred_url": "https://api.github.com/users/iMerica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iMerica/subscriptions", "organizations_url": "https://api.github.com/users/iMerica/orgs", "repos_url": "https://api.github.com/users/iMerica/repos", "events_url": "https://api.github.com/users/iMerica/events{/privacy}", "received_events_url": "https://api.github.com/users/iMerica/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-09-13T16:44:40Z", "updated_at": "2018-09-13T17:07:04Z", "closed_at": "2018-09-13T17:05:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi thanks for building this. I'm trying to understand which license you've adapted and not having any luck. Would you please consider adapting the language from a mainstream license - one that even Github can parse and classify (e.g MIT or Apache).\r\n\r\nThank you,\r\n\r\nMichael\r\n\r\nhttps://choosealicense.com ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/751", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/751/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/751/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/751/events", "html_url": "https://github.com/etianen/django-reversion/issues/751", "id": 357603251, "node_id": "MDU6SXNzdWUzNTc2MDMyNTE=", "number": 751, "title": "Question: can a revision work within a modelform.save in the admin?", "user": {"login": "BrendaH", "id": 5462600, "node_id": "MDQ6VXNlcjU0NjI2MDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5462600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BrendaH", "html_url": "https://github.com/BrendaH", "followers_url": "https://api.github.com/users/BrendaH/followers", "following_url": "https://api.github.com/users/BrendaH/following{/other_user}", "gists_url": "https://api.github.com/users/BrendaH/gists{/gist_id}", "starred_url": "https://api.github.com/users/BrendaH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BrendaH/subscriptions", "organizations_url": "https://api.github.com/users/BrendaH/orgs", "repos_url": "https://api.github.com/users/BrendaH/repos", "events_url": "https://api.github.com/users/BrendaH/events{/privacy}", "received_events_url": "https://api.github.com/users/BrendaH/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-06T10:59:10Z", "updated_at": "2018-09-11T13:12:40Z", "closed_at": "2018-09-11T13:12:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a model called Function. This has a ForeignKey to auth.Group (the default Django Group).\r\nIn the admin on Function I display a multiselectfield to manage the users in the connected Group. These are also saved on the Group.\r\n\r\nI know, via another issue on this project, that it is impossible to save the reverse relation between auth.Group and auth.User. So I have given up the hope of having a revision where you can revert to the Function with the Group and it's Users in that state.\r\nHowever, I was hoping to be able to give a status view via the revision comments. Like, just telling which users were added or removed.\r\n\r\nBut, **I can not get reversion to display my comment**. It seems as if this whole block is just ignored or if the comment is overwritten somewhere.\r\n\r\nI am not using a custom view. I am using a ModelForm and a ModelAdmin and was happy letting them do the work. But I am now thinking that I should be building my own view to have the actual function.save() inside the revision-block. Please tell me I'm wrong??\r\n\r\nThings already tried to no avail:\r\nSetting reversion.comment AFTER calling the parent form.save()\r\nCalling self.instance.save() (so saving the function) inside this form save() and inside the reversion-block.\r\n\r\nFunctionAdmin and GroupAdmin both extend VersionAdmin.\r\nFunction has also been registered thus: `@reversion.register(follow=([\"group\"]))`\r\n\r\nadmin.py:\r\n```\r\nclass FunctionAdmin(VersionAdmin):\r\n    actions = ['show_mailinglist']\r\n    fieldsets = (\r\n        (_('General'), {'fields': ('functionname', 'users', 'on_whoiswho')}),\r\n    )\r\n    form = FunctionAdminForm\r\n\r\n... some irrelevant code....\r\n\r\n    def get_form(self, request, obj=None, **kwargs):\r\n        # only needed to get the request to the form\r\n        form = super(FunctionAdmin, self).get_form(request, obj=obj, **kwargs)\r\n        form.request = request\r\n        return form\r\n```\r\n\r\nadminforms.py:\r\n```\r\nclass FunctionAdminForm(forms.ModelForm):\r\n    # Add users field that will be filled from the linked group\r\n    users = UserModelMultipleChoiceField(\r\n        User.objects.filter(is_active=True, peactor__isnull=False).order_by('first_name', 'last_name'),\r\n        widget=admin.widgets.FilteredSelectMultiple(_('users'), False),\r\n        required=False,\r\n        help_text=_('Shows all active users'),\r\n        label=_('users').capitalize(),\r\n    )\r\n\r\n    class Meta:\r\n        model = Function\r\n        exclude = ()\r\n\r\n    def save(self, *args, **kwargs):\r\n        old_users = list(self.instance.group.user_set.all())\r\n        new_users = list(self.cleaned_data['users'])\r\n\r\n        with reversion.create_revision():\r\n            reversion.set_user(self.request.user)\r\n\r\n            reversion_comment = (_(\"Function edited in admin.\\nOld ids were %(oldvalue)s\\n\"\r\n                                 \"New ids are %(newvalue)s\") %\r\n                                 {'oldvalue': ','.join(str(ou) for ou in old_users),\r\n                                 'newvalue': ','.join(str(nu) for nu in new_users)})\r\n\r\n            # On a new Function, also create a Group with the same name\r\n            if not hasattr(self.instance, 'group'):\r\n                newgroup = Group.objects.create(name=self.cleaned_data['functionname'])\r\n                self.instance.group = newgroup\r\n\r\n            # Update the name of the Group if the Function's name was changed\r\n            if self.instance.group.name is not self.cleaned_data['functionname']:\r\n                    self.instance.group.name = self.cleaned_data['functionname']\r\n                    self.instance.group.save()\r\n                    reversion_comment = reversion_comment + _(\"\\nName changed to \" + self.cleaned_data['functionname'])\r\n\r\n            kwargs['commit'] = True\r\n\r\n            reversion.set_comment(reversion_comment)\r\n            return super(FunctionAdminForm, self).save(*args, **kwargs)\r\n\r\n    def save_m2m(self):\r\n        self.instance.group.user_set.clear()\r\n        self.instance.group.user_set.add(*self.cleaned_data['users'])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/749", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/749/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/749/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/749/events", "html_url": "https://github.com/etianen/django-reversion/issues/749", "id": 356932865, "node_id": "MDU6SXNzdWUzNTY5MzI4NjU=", "number": 749, "title": "Recover view: display date of deletion (additionally)", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-04T18:50:50Z", "updated_at": "2018-09-09T02:20:54Z", "closed_at": "2018-09-09T02:20:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sorry if I missed something, but it appears that the table in the \"Recover deleted\" view displays the date when the object was modified, and not when it was deleted.\r\nI think it would be good to display the date of deletion additionally there, and use if for primary sorting.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/747", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/747/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/747/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/747/events", "html_url": "https://github.com/etianen/django-reversion/issues/747", "id": 352805565, "node_id": "MDU6SXNzdWUzNTI4MDU1NjU=", "number": 747, "title": "Customisable `Version` and `Revision` save logic", "user": {"login": "oogles", "id": 1289812, "node_id": "MDQ6VXNlcjEyODk4MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1289812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oogles", "html_url": "https://github.com/oogles", "followers_url": "https://api.github.com/users/oogles/followers", "following_url": "https://api.github.com/users/oogles/following{/other_user}", "gists_url": "https://api.github.com/users/oogles/gists{/gist_id}", "starred_url": "https://api.github.com/users/oogles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oogles/subscriptions", "organizations_url": "https://api.github.com/users/oogles/orgs", "repos_url": "https://api.github.com/users/oogles/repos", "events_url": "https://api.github.com/users/oogles/events{/privacy}", "received_events_url": "https://api.github.com/users/oogles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-22T05:12:43Z", "updated_at": "2018-09-06T00:19:04Z", "closed_at": "2018-09-06T00:19:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are using django-reversion in a complex system that goes far beyond simply allowing users to modify one or more objects presented in a form.\r\n\r\nThe system contains many manual transaction blocks, created with Django's `atomic()`, wrapping a variety of individual processes. Many of these processes manually raise exceptions under certain conditions, deliberately causing their wrapping transaction to rollback, while allowing the exception to be caught and handled and otherwise not interrupting the remainder of the outer process.\r\n\r\nThis obviously presents a problem when these processes affect models registered with django-reversion - it saves `Version` records for changes that are ultimately never committed to the database. Unfortunately, the solution offered in #231 - to use `create_revision()` to \"mark up small, discrete blocks of code\" - isn't feasible due to the complexity of the system. Not to mention, we'd like to retain the ability to group multiple changes under a single `Revision`.\r\n\r\nSo, instead, would it be possible for a future version of django-reversion to support making some of the core behaviour swappable? For example, if we could replace the default `add_to_revision()` behaviour to immediately save a `Version` to the database instead of keeping it in memory to be saved at the end of the revision context, it could be rolled back with the transaction in which it was written. This approach has some downsides, but they are more acceptable in our use case than the current problem with transaction rollbacks.\r\n\r\nIn order to get the desired functionality, we are currently looking at creating our own solution, but if we could make use of all the other features of django-reversion that already do what we need, and just customise it where we need to, that would be ideal.\r\n\r\nAt this point, we are thinking we would need to customise/replace the following behaviour:\r\n\r\n* Entering a new revision context: We would need to write a `Revision` record to the database, so something is available for later `Version` records to link to.\r\n* `add_to_revision`: As mentioned, to immediately write `Version` records.\r\n* Exiting the revision context: We would need to remove the current behaviour of writing the `Revision`/`Version` records at this point.\r\n\r\nDoes this sound like something that is feasible for django-reversion to support?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/745", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/745/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/745/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/745/events", "html_url": "https://github.com/etianen/django-reversion/issues/745", "id": 352599490, "node_id": "MDU6SXNzdWUzNTI1OTk0OTA=", "number": 745, "title": "Update docs to mention with which django version is the 3.0 compatible", "user": {"login": "Kraymer", "id": 84227, "node_id": "MDQ6VXNlcjg0MjI3", "avatar_url": "https://avatars2.githubusercontent.com/u/84227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kraymer", "html_url": "https://github.com/Kraymer", "followers_url": "https://api.github.com/users/Kraymer/followers", "following_url": "https://api.github.com/users/Kraymer/following{/other_user}", "gists_url": "https://api.github.com/users/Kraymer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kraymer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kraymer/subscriptions", "organizations_url": "https://api.github.com/users/Kraymer/orgs", "repos_url": "https://api.github.com/users/Kraymer/repos", "events_url": "https://api.github.com/users/Kraymer/events{/privacy}", "received_events_url": "https://api.github.com/users/Kraymer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-21T15:37:55Z", "updated_at": "2019-02-23T07:55:41Z", "closed_at": "2019-02-23T07:55:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "`pip install django-reversion` install 3.0.0,  which is not mentioned in the docs https://django-reversion.readthedocs.io/en/stable/django-versions.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/744", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/744/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/744/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/744/events", "html_url": "https://github.com/etianen/django-reversion/issues/744", "id": 348127214, "node_id": "MDU6SXNzdWUzNDgxMjcyMTQ=", "number": 744, "title": "Import of django.contrib.admin.models.LogEntry in reversion.models causes startup error", "user": {"login": "wylee", "id": 751427, "node_id": "MDQ6VXNlcjc1MTQyNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/751427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wylee", "html_url": "https://github.com/wylee", "followers_url": "https://api.github.com/users/wylee/followers", "following_url": "https://api.github.com/users/wylee/following{/other_user}", "gists_url": "https://api.github.com/users/wylee/gists{/gist_id}", "starred_url": "https://api.github.com/users/wylee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wylee/subscriptions", "organizations_url": "https://api.github.com/users/wylee/orgs", "repos_url": "https://api.github.com/users/wylee/repos", "events_url": "https://api.github.com/users/wylee/events{/privacy}", "received_events_url": "https://api.github.com/users/wylee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-08-07T00:45:05Z", "updated_at": "2019-04-02T13:23:27Z", "closed_at": "2019-04-02T13:23:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "The top level import of `django.contrib.admin.models.LogEntry` in the module `reversion.models` causes a startup error in Django projects that don't include `django.contrib.admin` in `INSTALLED_APPS`:\r\n\r\n> RuntimeError: Model class django.contrib.admin.models.LogEntry doesn't declare an explicit app_label and isn't in an application in INSTALLED_APPS.\r\n\r\nPerhaps this import could moved into the `Revision.get_comment()` method?\r\n\r\n--\r\n\r\nAffects version 3.0.0\r\n\r\nhttps://github.com/etianen/django-reversion/blob/d4cb8aa5ca383b3d9bf57b07598d0e86dc390c2e/reversion/models.py#L10", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/741", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/741/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/741/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/741/events", "html_url": "https://github.com/etianen/django-reversion/issues/741", "id": 341115882, "node_id": "MDU6SXNzdWUzNDExMTU4ODI=", "number": 741, "title": "How to call fields from Revision model in a custom  inherited model?", "user": {"login": "photonauta35", "id": 641411, "node_id": "MDQ6VXNlcjY0MTQxMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/641411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/photonauta35", "html_url": "https://github.com/photonauta35", "followers_url": "https://api.github.com/users/photonauta35/followers", "following_url": "https://api.github.com/users/photonauta35/following{/other_user}", "gists_url": "https://api.github.com/users/photonauta35/gists{/gist_id}", "starred_url": "https://api.github.com/users/photonauta35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/photonauta35/subscriptions", "organizations_url": "https://api.github.com/users/photonauta35/orgs", "repos_url": "https://api.github.com/users/photonauta35/repos", "events_url": "https://api.github.com/users/photonauta35/events{/privacy}", "received_events_url": "https://api.github.com/users/photonauta35/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-13T18:24:43Z", "updated_at": "2018-07-19T17:51:19Z", "closed_at": "2018-07-19T09:23:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example, if I need call `date_created` from Revision in my admin.py as list_display field? Is there possible? \r\n\r\n```\r\n@admin.register(Container)\r\nclass ContainerAdmin(CompareVersionAdmin, admin.ModelAdmin):\r\n    list_display = ('date_created', 'id_auto_series', 'id_human', 'uuid', 'title', 'description', 'description_level',)\r\n    filter_horizontal = ('items', 'container_child')\r\n```\r\n\r\n```\r\n ERRORS:\r\ndjango_1    | <class 'collection.admin.ContainerAdmin'>: (admin.E108) The value of 'list_display[0]' refers to 'date_created', which is not a callable, an attribute of 'ContainerAdmin', or an attribute or method on 'collection.Container'.\r\n```\r\n\r\n![selecao_038](https://user-images.githubusercontent.com/641411/42707533-dce66e7a-86b0-11e8-8e9c-3aac9ec073d5.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/740", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/740/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/740/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/740/events", "html_url": "https://github.com/etianen/django-reversion/issues/740", "id": 339849426, "node_id": "MDU6SXNzdWUzMzk4NDk0MjY=", "number": 740, "title": "Support for multlanguage tables?", "user": {"login": "chrda81", "id": 36750848, "node_id": "MDQ6VXNlcjM2NzUwODQ4", "avatar_url": "https://avatars1.githubusercontent.com/u/36750848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrda81", "html_url": "https://github.com/chrda81", "followers_url": "https://api.github.com/users/chrda81/followers", "following_url": "https://api.github.com/users/chrda81/following{/other_user}", "gists_url": "https://api.github.com/users/chrda81/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrda81/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrda81/subscriptions", "organizations_url": "https://api.github.com/users/chrda81/orgs", "repos_url": "https://api.github.com/users/chrda81/repos", "events_url": "https://api.github.com/users/chrda81/events{/privacy}", "received_events_url": "https://api.github.com/users/chrda81/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-10T13:45:10Z", "updated_at": "2018-07-19T09:23:46Z", "closed_at": "2018-07-19T09:23:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm trying to implement a multilanguage package in my project, while using django-reversion to keep track of any model changes. Is it possible to use django-reversion with a splitted model? Let's say I have a model 'News' with columns title, body, date, author, published, and archived. By using the package django-parler for multi language support for columns title and body, it separetes this two columns in its own tables and sets references in the original model. Would this work with django-reversion? If yes, is there an example project/snippet? Thanks.\r\n\r\nRegards,\r\nSky", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/739", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/739/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/739/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/739/events", "html_url": "https://github.com/etianen/django-reversion/issues/739", "id": 338380372, "node_id": "MDU6SXNzdWUzMzgzODAzNzI=", "number": 739, "title": "Error resulting from change of schema? ", "user": {"login": "vincentwhales", "id": 28204629, "node_id": "MDQ6VXNlcjI4MjA0NjI5", "avatar_url": "https://avatars1.githubusercontent.com/u/28204629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincentwhales", "html_url": "https://github.com/vincentwhales", "followers_url": "https://api.github.com/users/vincentwhales/followers", "following_url": "https://api.github.com/users/vincentwhales/following{/other_user}", "gists_url": "https://api.github.com/users/vincentwhales/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincentwhales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincentwhales/subscriptions", "organizations_url": "https://api.github.com/users/vincentwhales/orgs", "repos_url": "https://api.github.com/users/vincentwhales/repos", "events_url": "https://api.github.com/users/vincentwhales/events{/privacy}", "received_events_url": "https://api.github.com/users/vincentwhales/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-04T21:49:26Z", "updated_at": "2018-07-12T23:23:59Z", "closed_at": "2018-07-12T23:23:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a class that I recently removed a `OneToOneField`. \r\n\r\n```\r\n@reversion.register(ignore_duplicates=True)\r\nclass Account(models.Model):\r\n     instance = models.OneToOneField(Account, blank=True,...    # Removed\r\n```\r\nRight now I am getting this error:\r\n\r\n```\r\n  File \"/Users/vng/.virtualenvs/prometheus/lib/python3.6/site-packages/django/db/models/query.py\", line 510, in update_or_create\r\n    obj.save(using=self.db)\r\n  File \"/Users/vng/Dropbox/Code/Prometheus/accounts/models.py\", line 38, in save\r\n    super().save(*args, **kwargs)\r\n  File \"/Users/vng/.virtualenvs/prometheus/lib/python3.6/site-packages/django/db/models/base.py\", line 729, in save\r\n    force_update=force_update, update_fields=update_fields)\r\n  File \"/Users/vng/.virtualenvs/prometheus/lib/python3.6/site-packages/django/db/models/base.py\", line 769, in save_base\r\n    update_fields=update_fields, raw=raw, using=using,\r\n  File \"/Users/vng/.virtualenvs/prometheus/lib/python3.6/site-packages/django/dispatch/dispatcher.py\", line 178, in send\r\n    for receiver in self._live_receivers(sender)\r\n  File \"/Users/vng/.virtualenvs/prometheus/lib/python3.6/site-packages/django/dispatch/dispatcher.py\", line 178, in <listcomp>\r\n    for receiver in self._live_receivers(sender)\r\n  File \"/Users/vng/.virtualenvs/prometheus/lib/python3.6/site-packages/reversion/revisions.py\", line 329, in _post_save_receiver\r\n    add_to_revision(instance, model_db=using)\r\n  File \"/Users/vng/.virtualenvs/prometheus/lib/python3.6/site-packages/reversion/revisions.py\", line 215, in add_to_revision\r\n    _add_to_revision(obj, db, model_db, True)\r\n  File \"/Users/vng/.virtualenvs/prometheus/lib/python3.6/site-packages/reversion/revisions.py\", line 201, in _add_to_revision\r\n    if previous_version and previous_version._local_field_dict == version._local_field_dict:\r\n  File \"/Users/vng/.virtualenvs/prometheus/lib/python3.6/site-packages/django/utils/functional.py\", line 36, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"/Users/vng/.virtualenvs/prometheus/lib/python3.6/site-packages/reversion/models.py\", line 261, in _local_field_dict\r\n    object_version = self._object_version\r\n  File \"/Users/vng/.virtualenvs/prometheus/lib/python3.6/site-packages/django/utils/functional.py\", line 36, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"/Users/vng/.virtualenvs/prometheus/lib/python3.6/site-packages/reversion/models.py\", line 244, in _object_version\r\n    \"object_repr\": self.object_repr,\r\nreversion.errors.RevertError: Could not load <Account: 123-445-2222> - incompatible version data.\r\n```\r\n\r\nwhat is the right procedure to deal with django-reversion once we have a schema migration on the object? \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/737", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/737/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/737/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/737/events", "html_url": "https://github.com/etianen/django-reversion/issues/737", "id": 336928394, "node_id": "MDU6SXNzdWUzMzY5MjgzOTQ=", "number": 737, "title": "How to modify a saved version?", "user": {"login": "wolfgang-reutz", "id": 2330847, "node_id": "MDQ6VXNlcjIzMzA4NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2330847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wolfgang-reutz", "html_url": "https://github.com/wolfgang-reutz", "followers_url": "https://api.github.com/users/wolfgang-reutz/followers", "following_url": "https://api.github.com/users/wolfgang-reutz/following{/other_user}", "gists_url": "https://api.github.com/users/wolfgang-reutz/gists{/gist_id}", "starred_url": "https://api.github.com/users/wolfgang-reutz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wolfgang-reutz/subscriptions", "organizations_url": "https://api.github.com/users/wolfgang-reutz/orgs", "repos_url": "https://api.github.com/users/wolfgang-reutz/repos", "events_url": "https://api.github.com/users/wolfgang-reutz/events{/privacy}", "received_events_url": "https://api.github.com/users/wolfgang-reutz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-29T09:28:17Z", "updated_at": "2018-07-19T09:23:55Z", "closed_at": "2018-07-19T09:23:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI did some googling and could not find a hint how to deal with this problem I have:\r\n\r\nI have some object with a valid_from and a valid_thru attribute and a name and shortname.\r\n\r\nUsecase:\r\n\r\n- User x changes the name or the shortname\r\n- this change gets saved with create_revision and I now have 2 saved versions of this object\r\n- now comes the tricky part: As this is a new version of the same object, the newest version should have a valid_from date time **from** now, but the old version should get a valid_thru date time set too\r\n- I need this to work with the current versions, but have a history with dates to calculate which version was current to a given point in time\r\n\r\nWhat I found out so far:\r\nI can get the different versions, work with them and manipulate the serialized_data directly by converting the string to a dictionary, change a field and then convert it back to JSON and overwrite serialized_data\r\n\r\nIs this the recommended way to change a version or is there a better way to do it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/736", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/736/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/736/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/736/events", "html_url": "https://github.com/etianen/django-reversion/issues/736", "id": 336355211, "node_id": "MDU6SXNzdWUzMzYzNTUyMTE=", "number": 736, "title": "Efficient way to retrieve value of attribute at a given time? ", "user": {"login": "vincentwhales", "id": 28204629, "node_id": "MDQ6VXNlcjI4MjA0NjI5", "avatar_url": "https://avatars1.githubusercontent.com/u/28204629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincentwhales", "html_url": "https://github.com/vincentwhales", "followers_url": "https://api.github.com/users/vincentwhales/followers", "following_url": "https://api.github.com/users/vincentwhales/following{/other_user}", "gists_url": "https://api.github.com/users/vincentwhales/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincentwhales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincentwhales/subscriptions", "organizations_url": "https://api.github.com/users/vincentwhales/orgs", "repos_url": "https://api.github.com/users/vincentwhales/repos", "events_url": "https://api.github.com/users/vincentwhales/events{/privacy}", "received_events_url": "https://api.github.com/users/vincentwhales/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-27T19:19:36Z", "updated_at": "2018-06-29T05:33:34Z", "closed_at": "2018-06-29T05:33:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am currently using django-reversion to track a model `Account` which has a field `total_spent`.\r\n\r\nOvertime this field gets updated whenever an accounts spends money. My goal is to retrieve the value of total_spent between datetime X and datetime Y to calculate the total difference.\r\n\r\nHow can I do this efficiently with reversion? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/735", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/735/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/735/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/735/events", "html_url": "https://github.com/etianen/django-reversion/issues/735", "id": 334904176, "node_id": "MDU6SXNzdWUzMzQ5MDQxNzY=", "number": 735, "title": "How to store the timestamp and author of a delete operation?", "user": {"login": "kklingenberg", "id": 1569113, "node_id": "MDQ6VXNlcjE1NjkxMTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1569113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kklingenberg", "html_url": "https://github.com/kklingenberg", "followers_url": "https://api.github.com/users/kklingenberg/followers", "following_url": "https://api.github.com/users/kklingenberg/following{/other_user}", "gists_url": "https://api.github.com/users/kklingenberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/kklingenberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kklingenberg/subscriptions", "organizations_url": "https://api.github.com/users/kklingenberg/orgs", "repos_url": "https://api.github.com/users/kklingenberg/repos", "events_url": "https://api.github.com/users/kklingenberg/events{/privacy}", "received_events_url": "https://api.github.com/users/kklingenberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-06-22T14:41:38Z", "updated_at": "2018-07-05T07:56:15Z", "closed_at": "2018-07-05T07:56:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm requesting advise :grimacing:. I need to be able to tell who deleted an object, and when it happened. I'm considering three options:\r\n\r\n1. Fork and add the `post_delete` signal that would create a revision, where the corresponding version would be tagged as a delete. An attempt at this can be seen [here](https://github.com/kklingenberg/django-reversion/commit/88a35040a927922d050ce9d228d3700d2caa4f4d). However, I believe this goes against the scope of django-reversion, since the `get_deleted` queryset method already deals with half of what I need, and this would overlap with it somewhat.\r\n2. Inherit from `reversion.models.Version` and add a foreign key to the user (the author of the deletion) and an extra timestamp, so that a previous version can be tagged as 'the last one before a delete' and can be annotated with what I need. I'd also need to handle the `post_delete` for each registered model. I dislike this because the table inheritance will create another version table.\r\n3. Fork and allow users to provide their own version model, by making `Version` abstract and providing a default concrete model. This would require app configuration though, and I think that's also a major change from the current status.\r\n\r\nI'd appreciate any guidance on this, and am willing to submit a PR for whichever approach you're willing to include in the library, if any.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/734", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/734/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/734/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/734/events", "html_url": "https://github.com/etianen/django-reversion/issues/734", "id": 334527064, "node_id": "MDU6SXNzdWUzMzQ1MjcwNjQ=", "number": 734, "title": "Revert only a subset of fields", "user": {"login": "bluesurfer", "id": 4722772, "node_id": "MDQ6VXNlcjQ3MjI3NzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4722772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluesurfer", "html_url": "https://github.com/bluesurfer", "followers_url": "https://api.github.com/users/bluesurfer/followers", "following_url": "https://api.github.com/users/bluesurfer/following{/other_user}", "gists_url": "https://api.github.com/users/bluesurfer/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluesurfer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluesurfer/subscriptions", "organizations_url": "https://api.github.com/users/bluesurfer/orgs", "repos_url": "https://api.github.com/users/bluesurfer/repos", "events_url": "https://api.github.com/users/bluesurfer/events{/privacy}", "received_events_url": "https://api.github.com/users/bluesurfer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-21T14:44:02Z", "updated_at": "2018-07-19T09:24:13Z", "closed_at": "2018-07-19T09:24:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Me again, sorry \ud83d\ude04 \r\n\r\nI would like to revert only a subset of specific fields and ignore the others. As the docs states, that is achieved by filling the `fields` argument during the registration step. Ok!\r\n\r\nBut when trying to revert the model I get some integrity errors because `django-reversion` sets to none all the fields that I did not specify in the `fields`argument during registration.\r\n\r\nI am not interested in recovering an object once it gets deleted but just to provide a field-specific versioning. By now I guess I will have to define a custom revert method and use the `field_dict` method inside `Version` and use it to retrieve the field version data.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/732", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/732/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/732/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/732/events", "html_url": "https://github.com/etianen/django-reversion/issues/732", "id": 334067555, "node_id": "MDU6SXNzdWUzMzQwNjc1NTU=", "number": 732, "title": "GenericRelation as a ManyToMany?", "user": {"login": "bluesurfer", "id": 4722772, "node_id": "MDQ6VXNlcjQ3MjI3NzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4722772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluesurfer", "html_url": "https://github.com/bluesurfer", "followers_url": "https://api.github.com/users/bluesurfer/followers", "following_url": "https://api.github.com/users/bluesurfer/following{/other_user}", "gists_url": "https://api.github.com/users/bluesurfer/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluesurfer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluesurfer/subscriptions", "organizations_url": "https://api.github.com/users/bluesurfer/orgs", "repos_url": "https://api.github.com/users/bluesurfer/repos", "events_url": "https://api.github.com/users/bluesurfer/events{/privacy}", "received_events_url": "https://api.github.com/users/bluesurfer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-20T13:04:37Z", "updated_at": "2018-07-19T09:24:25Z", "closed_at": "2018-07-19T09:24:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to version a `GenericRelation` field. Consider the following models: \r\n\r\n```\r\n@reversion.register(fields=['url', 'tags'], follow=['tags])\r\nclass Bookmark(models.Model):\r\n    url = models.URLField()\r\n    tags = GenericRelation(TaggedItem)\r\n\r\n@reversion.register(fields=['tag'])\r\nclass TaggedItem(models.Model):\r\n    tag = models.SlugField()\r\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\r\n    object_id = models.PositiveIntegerField()\r\n    content_object = GenericForeignKey('content_type', 'object_id')\r\n```\r\n\r\nEvery time I create a revision for `Bookmark` I would expect to found the following `serialized_data` inside `Version`:\r\n\r\n`{'pk': 1, 'fields': {'url': 'someurl', 'tags': ['tag1', 'tag2']}}`\r\n\r\nPlus when I change the `slug` field in the `Tag` I am expecting to see a new revision also in `Bookmark` since I define the `follow` option.\r\n\r\nWhat I am getting instead is this:\r\n\r\n`{'pk': 1, 'fields': {'url': 'someurl'}}`\r\n\r\nThere's no `tags` field! Furthermore any change on slug in `TaggedItem` is ignored from the revisions of `Bookmark` (but there exists a revision for `TaggedItem`).\r\n\r\nThis is my first time using this library. I probably must have misunderstood something.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/729", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/729/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/729/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/729/events", "html_url": "https://github.com/etianen/django-reversion/issues/729", "id": 332415374, "node_id": "MDU6SXNzdWUzMzI0MTUzNzQ=", "number": 729, "title": "Translation of revision comments", "user": {"login": "BrendaH", "id": 5462600, "node_id": "MDQ6VXNlcjU0NjI2MDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5462600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BrendaH", "html_url": "https://github.com/BrendaH", "followers_url": "https://api.github.com/users/BrendaH/followers", "following_url": "https://api.github.com/users/BrendaH/following{/other_user}", "gists_url": "https://api.github.com/users/BrendaH/gists{/gist_id}", "starred_url": "https://api.github.com/users/BrendaH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BrendaH/subscriptions", "organizations_url": "https://api.github.com/users/BrendaH/orgs", "repos_url": "https://api.github.com/users/BrendaH/repos", "events_url": "https://api.github.com/users/BrendaH/events{/privacy}", "received_events_url": "https://api.github.com/users/BrendaH/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-14T13:58:11Z", "updated_at": "2018-06-14T14:34:53Z", "closed_at": "2018-06-14T14:34:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "When creating a revision and adding a comment, it seems that using gettext (or the likes) does not do anything. The string ends up in the original language (English in my case) in the database.\r\nPerhaps this is the wrong place to actually translate such a string, though it would be neat if the user's language is used. Either on saving the stuff or on displaying again (though use of arguments might be a bit more difficult that way) It looks like Django LogEntry does stuff like this by saving the message as json and on unpacking and presenting it to the user doing the translation. (I looked at 1.11 version of Django code)\r\n\r\nMy main use base for my project is in Dutch, but the system might be used in the future in for example Germany and then it would be nice if the strings get saved in the database in German.\r\nOr (the project can be viewed in English/Dutch at the moment) the strings are on output presented in the chosen language of the viewer.\r\n\r\nIs this already possible in some way and am I missing things? Or can comments not be translated?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/727", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/727/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/727/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/727/events", "html_url": "https://github.com/etianen/django-reversion/issues/727", "id": 330538378, "node_id": "MDU6SXNzdWUzMzA1MzgzNzg=", "number": 727, "title": "how to use django-reversion for future possible versions of models", "user": {"login": "csisnett", "id": 19243165, "node_id": "MDQ6VXNlcjE5MjQzMTY1", "avatar_url": "https://avatars1.githubusercontent.com/u/19243165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csisnett", "html_url": "https://github.com/csisnett", "followers_url": "https://api.github.com/users/csisnett/followers", "following_url": "https://api.github.com/users/csisnett/following{/other_user}", "gists_url": "https://api.github.com/users/csisnett/gists{/gist_id}", "starred_url": "https://api.github.com/users/csisnett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csisnett/subscriptions", "organizations_url": "https://api.github.com/users/csisnett/orgs", "repos_url": "https://api.github.com/users/csisnett/repos", "events_url": "https://api.github.com/users/csisnett/events{/privacy}", "received_events_url": "https://api.github.com/users/csisnett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-08T06:45:20Z", "updated_at": "2018-07-19T09:24:33Z", "closed_at": "2018-07-19T09:24:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everyone,\r\n\r\nI'm creating a website using the Rest Framework, it enables users to  modify or create new objects, kinda like Wikipedia where anyone can make edits but it has to go through a process to be accepted.\r\n\r\nI understand the default behaviour is to save previous changes, but I'd like to use the library to keep track of possible future versions of my models. (Until they get approved by selected users) The thing is the default behaviour is that we have to make change to our model object to create a new version, I would instead like to create a new version and then if accepted by the selected users, apply the changes to the object.\r\n\r\nMy question is: how could I create versions of models without altering the original object?\r\n\r\nI still haven't quite figure out the concept of revision blocks which is why I may be asking this question.\r\n\r\nIf you think there's a better alternative to my problem I'm open to suggestions and if you're curious this is my repository: https://github.com/csisnett/padres-backend\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/725", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/725/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/725/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/725/events", "html_url": "https://github.com/etianen/django-reversion/issues/725", "id": 328750859, "node_id": "MDU6SXNzdWUzMjg3NTA4NTk=", "number": 725, "title": "Keep change_message as JSON", "user": {"login": "RamezIssac", "id": 6247918, "node_id": "MDQ6VXNlcjYyNDc5MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6247918?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RamezIssac", "html_url": "https://github.com/RamezIssac", "followers_url": "https://api.github.com/users/RamezIssac/followers", "following_url": "https://api.github.com/users/RamezIssac/following{/other_user}", "gists_url": "https://api.github.com/users/RamezIssac/gists{/gist_id}", "starred_url": "https://api.github.com/users/RamezIssac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RamezIssac/subscriptions", "organizations_url": "https://api.github.com/users/RamezIssac/orgs", "repos_url": "https://api.github.com/users/RamezIssac/repos", "events_url": "https://api.github.com/users/RamezIssac/events{/privacy}", "received_events_url": "https://api.github.com/users/RamezIssac/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-02T15:00:39Z", "updated_at": "2018-06-08T14:53:39Z", "closed_at": "2018-06-08T14:53:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As suggested in #580 discussion \r\nWe can keep change_message as JSON , and mimic admin.LogEntry change_message getter \r\n\r\nGoals are\r\n1- Not violating the \"no translated text\" in database rule\r\n2- More importantly, this change will yield correct change_message translation if language changed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/724", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/724/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/724/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/724/events", "html_url": "https://github.com/etianen/django-reversion/issues/724", "id": 327068443, "node_id": "MDU6SXNzdWUzMjcwNjg0NDM=", "number": 724, "title": "add support for bulk delete() on QuerySet", "user": {"login": "siyb", "id": 1403000, "node_id": "MDQ6VXNlcjE0MDMwMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1403000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siyb", "html_url": "https://github.com/siyb", "followers_url": "https://api.github.com/users/siyb/followers", "following_url": "https://api.github.com/users/siyb/following{/other_user}", "gists_url": "https://api.github.com/users/siyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/siyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siyb/subscriptions", "organizations_url": "https://api.github.com/users/siyb/orgs", "repos_url": "https://api.github.com/users/siyb/repos", "events_url": "https://api.github.com/users/siyb/events{/privacy}", "received_events_url": "https://api.github.com/users/siyb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-28T15:58:24Z", "updated_at": "2018-05-29T08:01:38Z", "closed_at": "2018-05-29T08:01:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using django-reversion==2.0.13 and I have tried to use reversion during a bulk delete (didn't work), but since the django documentation states:\r\n\r\n> The delete() method does a bulk delete and does not call any delete() methods on your models. It does, however, emit the pre_delete and post_delete signals for all deleted objects (including cascaded deletions).\r\n\r\nI though it was worth a shot. I know that the reversion documentation clearly states:\r\n\r\n> Bulk actions, such as Queryset.update(), do not send signals, so won\u2019t be noticed by django-reversion.\r\n\r\nNow to my question: Are the signals emitted by django sufficient to add reversion support to bulk deletes and if so, are you planning on supporting bulk deletes?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/721", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/721/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/721/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/721/events", "html_url": "https://github.com/etianen/django-reversion/issues/721", "id": 320089367, "node_id": "MDU6SXNzdWUzMjAwODkzNjc=", "number": 721, "title": "DateTimeField handling is broken with django-reversion with AttributeError: 'unicode' object has no attribute 'isoformat'", "user": {"login": "oliver-zhou", "id": 906828, "node_id": "MDQ6VXNlcjkwNjgyOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/906828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oliver-zhou", "html_url": "https://github.com/oliver-zhou", "followers_url": "https://api.github.com/users/oliver-zhou/followers", "following_url": "https://api.github.com/users/oliver-zhou/following{/other_user}", "gists_url": "https://api.github.com/users/oliver-zhou/gists{/gist_id}", "starred_url": "https://api.github.com/users/oliver-zhou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oliver-zhou/subscriptions", "organizations_url": "https://api.github.com/users/oliver-zhou/orgs", "repos_url": "https://api.github.com/users/oliver-zhou/repos", "events_url": "https://api.github.com/users/oliver-zhou/events{/privacy}", "received_events_url": "https://api.github.com/users/oliver-zhou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-03T21:38:33Z", "updated_at": "2018-10-18T11:58:00Z", "closed_at": "2018-07-19T09:24:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having issues using the Django Admin + Django Reversion with DateTimeField values. This is somewhat similar to #632 \r\n\r\nWhen manually saving a string value like this : '2017-08-08T22:51:15.125Z' to the DateTimeField of a value, it works fine from shell, but it does not work in the Django Admin.\r\n\r\nExample in shell or Django code outside of admin\r\n```\r\nobj.date_created = '2017-08-16T22:51:15.125Z'\r\nobj.save()\r\nobj.refresh_from_db()\r\nobj.date_created\r\n\r\n```\r\nResult is something like this is saved into the object\r\n`datetime.datetime(2017, 8, 16, 22, 51, 15, 125000, tzinfo=<UTC>)\r\n`\r\nThe model has an overridden save function, somewhat like this -\r\n\r\n```\r\n    def save(self, *args, **kwargs):\r\n        self.date_created = '2017-08-16T22:51:15.125Z'\r\n        super(Obj, self).save(*args, **kwargs)\r\n```\r\n\r\nHowever, when using the Django admin to save a change to this object that then tries to save that same string value down, everything blows up, and I get an\r\nAttributeError: 'unicode' object has no attribute 'isoformat'\r\n\r\nThis only happens during the add_to_revision portion of django-reversion from django admin, and nowhere else.\r\n\r\ndjango-reversion==2.0.13\r\nDjango==1.11.13 and Django==1.11.12\r\npython 2.7.10\r\n\r\nReproducible Model - \r\n\r\n```\r\nclass TestCase(models.Model):\r\n    date_created = models.DateTimeField(\r\n        null=True, blank=True, auto_now_add=True)\r\n\r\n    def save(self, *args, **kwargs):\r\n        self.date_created = '2017-08-16T22:51:15.125Z'\r\n        super(TestCase, self).save(*args, **kwargs)\r\n\r\n```\r\nIn admin.py - \r\n\r\n```\r\nclass TestCaseResource(resources.ModelResource):\r\n    '''To set up RecruiterResource'''\r\n    class Meta:\r\n        model = Recruiter\r\n\r\nclass TestCaseAdmin(VersionAdmin, OrganizationAdmin):\r\n    '''RecruiterOrganization Admin.\r\n\r\n    Trying to subclass the official django-organization admin\r\n    '''\r\n    resource_class = RecruiterOrganizationResource\r\n```\r\n\r\nPartial Trace \r\n```\r\n\r\n  File \"/Users/oliver/.virtualenvs/hirevisor_api/lib/python2.7/site-packages/django/contrib/admin/options.py\", line 1408, in changeform_view\r\n    return self._changeform_view(request, object_id, form_url, extra_context)\r\n  File \"/Users/oliver/.virtualenvs/hirevisor_api/lib/python2.7/site-packages/django/contrib/admin/options.py\", line 1448, in _changeform_view\r\n    self.save_model(request, new_object, form, not add)\r\n  File \"/Users/oliver/.virtualenvs/hirevisor_api/lib/python2.7/site-packages/django/contrib/admin/options.py\", line 979, in save_model\r\n    obj.save()\r\n  File \"/Users/oliver/src/h_mvp_backend/recruiters/models.py\", line 239, in save\r\n    super(TestCase, self).save(*args, **kwargs)\r\n  File \"/Users/oliver/.virtualenvs/hirevisor_api/lib/python2.7/site-packages/django/db/models/base.py\", line 808, in save\r\n    force_update=force_update, update_fields=update_fields)\r\n  File \"/Users/oliver/.virtualenvs/hirevisor_api/lib/python2.7/site-packages/django/db/models/base.py\", line 848, in save_base\r\n    update_fields=update_fields, raw=raw, using=using,\r\n  File \"/Users/oliver/.virtualenvs/hirevisor_api/lib/python2.7/site-packages/django/dispatch/dispatcher.py\", line 193, in send\r\n    for receiver in self._live_receivers(sender)\r\n  File \"/Users/oliver/.virtualenvs/hirevisor_api/lib/python2.7/site-packages/reversion/revisions.py\", line 329, in _post_save_receiver\r\n    add_to_revision(instance, model_db=using)\r\n  File \"/Users/oliver/.virtualenvs/hirevisor_api/lib/python2.7/site-packages/reversion/revisions.py\", line 215, in add_to_revision\r\n    _add_to_revision(obj, db, model_db, True)\r\n  File \"/Users/oliver/.virtualenvs/hirevisor_api/lib/python2.7/site-packages/reversion/revisions.py\", line 194, in _add_to_revision\r\n    fields=version_options.fields,\r\n  File \"/Users/oliver/.virtualenvs/hirevisor_api/lib/python2.7/site-packages/django/core/serializers/__init__.py\", line 129, in serialize\r\n    s.serialize(queryset, **options)\r\n  File \"/Users/oliver/.virtualenvs/hirevisor_api/lib/python2.7/site-packages/django/core/serializers/base.py\", line 89, in serialize\r\n    self.handle_field(obj, field)\r\n  File \"/Users/oliver/.virtualenvs/hirevisor_api/lib/python2.7/site-packages/django/core/serializers/python.py\", line 54, in handle_field\r\n    self._current[field.name] = field.value_to_string(obj)\r\n  File \"/Users/oliver/.virtualenvs/hirevisor_api/lib/python2.7/site-packages/django/db/models/fields/__init__.py\", line 1464, in value_to_string\r\n    return '' if val is None else val.isoformat()\r\nAttributeError: 'unicode' object has no attribute 'isoformat'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/720", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/720/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/720/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/720/events", "html_url": "https://github.com/etianen/django-reversion/issues/720", "id": 319253385, "node_id": "MDU6SXNzdWUzMTkyNTMzODU=", "number": 720, "title": "Support for soft deletable models", "user": {"login": "ivissani", "id": 784088, "node_id": "MDQ6VXNlcjc4NDA4OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/784088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivissani", "html_url": "https://github.com/ivissani", "followers_url": "https://api.github.com/users/ivissani/followers", "following_url": "https://api.github.com/users/ivissani/following{/other_user}", "gists_url": "https://api.github.com/users/ivissani/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivissani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivissani/subscriptions", "organizations_url": "https://api.github.com/users/ivissani/orgs", "repos_url": "https://api.github.com/users/ivissani/repos", "events_url": "https://api.github.com/users/ivissani/events{/privacy}", "received_events_url": "https://api.github.com/users/ivissani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-01T16:44:27Z", "updated_at": "2018-06-13T16:34:38Z", "closed_at": "2018-06-13T16:34:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I recently run into trouble trying to use reversion within an app. The problem, I believe, was due to the fact that I was overriding the default manager of a model to filter some instances in a similar way as [SoftDeletableModel](https://django-model-utils.readthedocs.io/en/latest/models.html#softdeletablemodel) does. \r\nAs far as I could track it, the error is located in the `_save_revision` method. Specifically the variable `model_db_existing_pks` is populated by checking the tracked objects' primary keys against those objects that exists in the DB. The problem is that this check is done by querying the DB using the `_default_manager` for each model. As you can guess, when the default manager filters out some instances, those instances' PKs will not survive the filter.\r\nI wonder whether it would be more appropriate to use the `_base_manager` instead which is [not allowed to filter out any instances ](https://docs.djangoproject.com/en/2.0/topics/db/managers/#don-t-filter-away-any-results-in-this-type-of-manager-subclass).\r\nThis behaviour could at least be made explicit in the documentation. I believe this could save time to some other folks.\r\nAs you can see this is a question not an issue really.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/719", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/719/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/719/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/719/events", "html_url": "https://github.com/etianen/django-reversion/issues/719", "id": 318891028, "node_id": "MDU6SXNzdWUzMTg4OTEwMjg=", "number": 719, "title": "Deletion of nested inlines doesn't go through", "user": {"login": "pkariz", "id": 4921363, "node_id": "MDQ6VXNlcjQ5MjEzNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4921363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pkariz", "html_url": "https://github.com/pkariz", "followers_url": "https://api.github.com/users/pkariz/followers", "following_url": "https://api.github.com/users/pkariz/following{/other_user}", "gists_url": "https://api.github.com/users/pkariz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pkariz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pkariz/subscriptions", "organizations_url": "https://api.github.com/users/pkariz/orgs", "repos_url": "https://api.github.com/users/pkariz/repos", "events_url": "https://api.github.com/users/pkariz/events{/privacy}", "received_events_url": "https://api.github.com/users/pkariz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-30T13:32:20Z", "updated_at": "2018-07-19T09:25:01Z", "closed_at": "2018-07-19T09:25:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you have models:\r\n```python\r\nclass Parent:\r\n    ...\r\nclass Child:\r\n     parent = fk(Parent)\r\nclass Grandchild:\r\n    parent = fk(Child)\r\n```\r\nand you create these reversions:\r\n```python\r\nwith reversion.create_revision():\r\n    parent = Parent.objects.create()\r\n    child_a = Child.objects.create(\r\n        parent=parent)\r\n    grandchild_a = Grandchild.objects.create(\r\n        parent=child_a)\r\n\r\nwith reversion.create_revision():\r\n    child_b = Child.objects.create(\r\n        parent=parent)\r\n    grandchild_b = Grandchild.objects.create(\r\n        parent=child_b)\r\n    reversion.add_to_revision(parent)\r\n```\r\nand if you then call\r\n```python\r\n Version.objects.get_for_object(parent)[1].revision.revert(delete=True)\r\n```\r\nyou will get an exception in revert function on line:\r\n```python\r\ncollector.collect([item for item in current_revision if item not in old_revision])\r\n```\r\nbecause this list will contain instances of different models, in this case [child_b, grandchild_b]. It doesn't seem like .collect can handle different types, so i suggest calling .collect per each type.\r\n\r\ni opened a PR #718 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/717", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/717/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/717/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/717/events", "html_url": "https://github.com/etianen/django-reversion/issues/717", "id": 318678051, "node_id": "MDU6SXNzdWUzMTg2NzgwNTE=", "number": 717, "title": "Is this package compatible with python3.6?", "user": {"login": "annp89", "id": 1740816, "node_id": "MDQ6VXNlcjE3NDA4MTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1740816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/annp89", "html_url": "https://github.com/annp89", "followers_url": "https://api.github.com/users/annp89/followers", "following_url": "https://api.github.com/users/annp89/following{/other_user}", "gists_url": "https://api.github.com/users/annp89/gists{/gist_id}", "starred_url": "https://api.github.com/users/annp89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/annp89/subscriptions", "organizations_url": "https://api.github.com/users/annp89/orgs", "repos_url": "https://api.github.com/users/annp89/repos", "events_url": "https://api.github.com/users/annp89/events{/privacy}", "received_events_url": "https://api.github.com/users/annp89/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-29T00:07:01Z", "updated_at": "2018-07-19T09:25:12Z", "closed_at": "2018-07-19T09:25:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "There's no mention of Python 3.6 in the setup.py and I was curious if you plan to add support for it or if it is already safe to use with Python 3.6?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/716", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/716/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/716/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/716/events", "html_url": "https://github.com/etianen/django-reversion/issues/716", "id": 317442484, "node_id": "MDU6SXNzdWUzMTc0NDI0ODQ=", "number": 716, "title": "Switching to a cutom user model results in InconsistentMigrationHistory", "user": {"login": "ybv", "id": 4458116, "node_id": "MDQ6VXNlcjQ0NTgxMTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4458116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ybv", "html_url": "https://github.com/ybv", "followers_url": "https://api.github.com/users/ybv/followers", "following_url": "https://api.github.com/users/ybv/following{/other_user}", "gists_url": "https://api.github.com/users/ybv/gists{/gist_id}", "starred_url": "https://api.github.com/users/ybv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ybv/subscriptions", "organizations_url": "https://api.github.com/users/ybv/orgs", "repos_url": "https://api.github.com/users/ybv/repos", "events_url": "https://api.github.com/users/ybv/events{/privacy}", "received_events_url": "https://api.github.com/users/ybv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-25T00:43:38Z", "updated_at": "2018-05-09T21:42:15Z", "closed_at": "2018-05-09T21:42:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Firstly, thank you @etianen , and others for this library! \r\n\r\nI've been using reversion for a couple of my models for a while no. Based on some new requirements, I'm having to create a custom user model, and when I do that, reversion seems to be breaking with\r\n\r\n```django.db.migrations.exceptions.InconsistentMigrationHistory: Migration reversion.0001_squashed_0004_auto_20160611_1202 is applied before its dependency user_accounts.0001_initial on database 'default'.```\r\n\r\nwhen I change  `AUTH_USER_MODEL` to the custom user model I created\r\n\r\nIt made sense as I looked at the migration [code](https://github.com/etianen/django-reversion/blob/master/reversion/migrations/0001_squashed_0004_auto_20160611_1202.py#L15)\r\n\r\nIs there a way around this?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/715", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/715/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/715/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/715/events", "html_url": "https://github.com/etianen/django-reversion/issues/715", "id": 316910622, "node_id": "MDU6SXNzdWUzMTY5MTA2MjI=", "number": 715, "title": "IntegrityError on registered Model object delete", "user": {"login": "singhravi1", "id": 20294674, "node_id": "MDQ6VXNlcjIwMjk0Njc0", "avatar_url": "https://avatars1.githubusercontent.com/u/20294674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/singhravi1", "html_url": "https://github.com/singhravi1", "followers_url": "https://api.github.com/users/singhravi1/followers", "following_url": "https://api.github.com/users/singhravi1/following{/other_user}", "gists_url": "https://api.github.com/users/singhravi1/gists{/gist_id}", "starred_url": "https://api.github.com/users/singhravi1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/singhravi1/subscriptions", "organizations_url": "https://api.github.com/users/singhravi1/orgs", "repos_url": "https://api.github.com/users/singhravi1/repos", "events_url": "https://api.github.com/users/singhravi1/events{/privacy}", "received_events_url": "https://api.github.com/users/singhravi1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-23T17:34:44Z", "updated_at": "2018-04-23T19:19:23Z", "closed_at": "2018-04-23T19:18:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\nI have a model registered with `@reversion.register` decorator.\r\nNow if i edit the object and then delete the object, i am getting `FOREIGN KEY constraint failed`.\r\n\r\nEdit: This was because of on_delete attribute values in models", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/713", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/713/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/713/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/713/events", "html_url": "https://github.com/etianen/django-reversion/issues/713", "id": 316820709, "node_id": "MDU6SXNzdWUzMTY4MjA3MDk=", "number": 713, "title": "migrate command does nothing", "user": {"login": "famagusta", "id": 1617696, "node_id": "MDQ6VXNlcjE2MTc2OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1617696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/famagusta", "html_url": "https://github.com/famagusta", "followers_url": "https://api.github.com/users/famagusta/followers", "following_url": "https://api.github.com/users/famagusta/following{/other_user}", "gists_url": "https://api.github.com/users/famagusta/gists{/gist_id}", "starred_url": "https://api.github.com/users/famagusta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/famagusta/subscriptions", "organizations_url": "https://api.github.com/users/famagusta/orgs", "repos_url": "https://api.github.com/users/famagusta/repos", "events_url": "https://api.github.com/users/famagusta/events{/privacy}", "received_events_url": "https://api.github.com/users/famagusta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-23T13:47:55Z", "updated_at": "2018-04-23T14:07:35Z", "closed_at": "2018-04-23T14:07:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am trying to run the migrations for this project but I get \"No migrations to apply\" response.\r\nI am using django 1.11 with python 3.6.\r\n\r\nAny help would be appreciated.\r\n\r\nThanks & Regards\r\nRobin Philip", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/712", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/712/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/712/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/712/events", "html_url": "https://github.com/etianen/django-reversion/issues/712", "id": 314011013, "node_id": "MDU6SXNzdWUzMTQwMTEwMTM=", "number": 712, "title": "AttributeError on reverting through admin", "user": {"login": "EvelineV", "id": 10654199, "node_id": "MDQ6VXNlcjEwNjU0MTk5", "avatar_url": "https://avatars0.githubusercontent.com/u/10654199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EvelineV", "html_url": "https://github.com/EvelineV", "followers_url": "https://api.github.com/users/EvelineV/followers", "following_url": "https://api.github.com/users/EvelineV/following{/other_user}", "gists_url": "https://api.github.com/users/EvelineV/gists{/gist_id}", "starred_url": "https://api.github.com/users/EvelineV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EvelineV/subscriptions", "organizations_url": "https://api.github.com/users/EvelineV/orgs", "repos_url": "https://api.github.com/users/EvelineV/repos", "events_url": "https://api.github.com/users/EvelineV/events{/privacy}", "received_events_url": "https://api.github.com/users/EvelineV/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-13T08:17:05Z", "updated_at": "2018-04-13T09:47:21Z", "closed_at": "2018-04-13T09:47:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI have an object with four revisions, I cannot access the second revision in the VersionAdmin (but I can access the other three). This happens when I just try to view the revision. I can revert to any of the other three. \r\n\r\nI'm on Django 1.11 with django-reversion 2.0.9 (I tried 2.0.13 as well, but it did not solve the problem). My database is PostgreSQL.\r\n\r\nIs this a known issue? Do you have a workaround?\r\n\r\n```\r\nTraceback:\r\n\r\nFile \"/usr/local/lib/python3.5/site-packages/reversion/models.py\" in revert\r\n  79.                             old_revision.add(model._default_manager.using(version.db).get(pk=version.object_id))\r\n\r\nDuring handling of the above exception ('NoneType' object has no attribute '_default_manager'), another exception occurred:\r\n\r\nFile \"/usr/local/lib/python3.5/site-packages/django/core/handlers/exception.py\" in inner\r\n  41.             response = get_response(request)\r\n\r\nFile \"/usr/local/lib/python3.5/site-packages/django/core/handlers/base.py\" in _legacy_get_response\r\n  249.             response = self._get_response(request)\r\n\r\nFile \"/usr/local/lib/python3.5/site-packages/django/core/handlers/base.py\" in _get_response\r\n  187.                 response = self.process_exception_by_middleware(e, request)\r\n\r\nFile \"/usr/local/lib/python3.5/site-packages/django/core/handlers/base.py\" in _get_response\r\n  185.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n\r\nFile \"/usr/local/lib/python3.5/site-packages/django/utils/decorators.py\" in _wrapped_view\r\n  149.                     response = view_func(request, *args, **kwargs)\r\n\r\nFile \"/usr/local/lib/python3.5/site-packages/django/views/decorators/cache.py\" in _wrapped_view_func\r\n  57.         response = view_func(request, *args, **kwargs)\r\n\r\nFile \"/usr/local/lib/python3.5/site-packages/django/contrib/admin/sites.py\" in inner\r\n  224.             return view(request, *args, **kwargs)\r\n\r\nFile \"/usr/local/lib/python3.5/site-packages/reversion/admin.py\" in revision_view\r\n  238.             context,\r\n\r\nFile \"/usr/local/lib/python3.5/site-packages/reversion/admin.py\" in _reversion_revisionform_view\r\n  184.                 version.revision.revert(delete=True)\r\n\r\nFile \"/usr/local/lib/python3.5/site-packages/reversion/models.py\" in revert\r\n  80.                         except model.DoesNotExist:\r\n\r\nException Type: AttributeError at /adminapp/model_name/192/history/4912363/\r\nException Value: 'NoneType' object has no attribute 'DoesNotExist'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/711", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/711/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/711/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/711/events", "html_url": "https://github.com/etianen/django-reversion/issues/711", "id": 313128674, "node_id": "MDU6SXNzdWUzMTMxMjg2NzQ=", "number": 711, "title": "Django 2.0 perform_destroy not resulting in a revision", "user": {"login": "atomboulian", "id": 5349946, "node_id": "MDQ6VXNlcjUzNDk5NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/5349946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atomboulian", "html_url": "https://github.com/atomboulian", "followers_url": "https://api.github.com/users/atomboulian/followers", "following_url": "https://api.github.com/users/atomboulian/following{/other_user}", "gists_url": "https://api.github.com/users/atomboulian/gists{/gist_id}", "starred_url": "https://api.github.com/users/atomboulian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atomboulian/subscriptions", "organizations_url": "https://api.github.com/users/atomboulian/orgs", "repos_url": "https://api.github.com/users/atomboulian/repos", "events_url": "https://api.github.com/users/atomboulian/events{/privacy}", "received_events_url": "https://api.github.com/users/atomboulian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-10T23:58:25Z", "updated_at": "2018-04-11T00:18:46Z", "closed_at": "2018-04-11T00:18:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I am using django-reversion successfully with my create and update for my DRF ModelViewSets. But destroy does not create a revision in the reversion_version table. Am I doing something wrong?\r\n\r\nI have the following code:\r\n\r\n```\r\nclass ProductViewSet(viewsets.ModelViewSet):\r\n    serializer_class = ProductSerializer\r\n    # other stuff\r\n\r\n    def _did_qa(self, prev_instance, serializer):\r\n        prev_status = prev_instance.status\r\n        new_status = serializer.validated_data.get(\"status\", None)\r\n\r\n        if new_status == ACTIVE:\r\n\r\n            if prev_status == QA:\r\n                return True\r\n\r\n        return False\r\n\r\n    def perform_create(self, serializer):\r\n        with reversion.create_revision():\r\n            super().perform_create(serializer)\r\n            reversion.set_user(self.request.user)\r\n            reversion.set_comment(\"Created\")\r\n\r\n    def perform_update(self, serializer):\r\n        prev_instance = copy(serializer.instance)\r\n\r\n        with reversion.create_revision():\r\n            super().perform_update(serializer)\r\n            reversion.set_user(self.request.user)\r\n\r\n            if self._did_qa(prev_instance, serializer):\r\n                reversion_comment = \"QA Completed\"\r\n            else:\r\n                reversion_comment = \"Modified\"\r\n\r\n            reversion.set_comment(reversion_comment)\r\n    \r\n    def perform_destroy(self, instance):\r\n        LOG.info(\"Before revision\")\r\n        with reversion.create_revision():\r\n            LOG.info(\"Inside create revision\")\r\n            super().perform_destroy(instance)\r\n            reversion.set_user(self.request.user)\r\n            reversion.set_comment(\"Deleted\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/710", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/710/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/710/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/710/events", "html_url": "https://github.com/etianen/django-reversion/issues/710", "id": 308961575, "node_id": "MDU6SXNzdWUzMDg5NjE1NzU=", "number": 710, "title": "Revertion of all inline files", "user": {"login": "cookieofcode", "id": 25263004, "node_id": "MDQ6VXNlcjI1MjYzMDA0", "avatar_url": "https://avatars1.githubusercontent.com/u/25263004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cookieofcode", "html_url": "https://github.com/cookieofcode", "followers_url": "https://api.github.com/users/cookieofcode/followers", "following_url": "https://api.github.com/users/cookieofcode/following{/other_user}", "gists_url": "https://api.github.com/users/cookieofcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/cookieofcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cookieofcode/subscriptions", "organizations_url": "https://api.github.com/users/cookieofcode/orgs", "repos_url": "https://api.github.com/users/cookieofcode/repos", "events_url": "https://api.github.com/users/cookieofcode/events{/privacy}", "received_events_url": "https://api.github.com/users/cookieofcode/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-27T13:08:44Z", "updated_at": "2018-03-29T21:05:25Z", "closed_at": "2018-03-29T21:05:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I defined a model \"Customer\" which allows uploading assigned documents to the model \"Document\" via an inline in the _admin interface_.\r\n\r\nWe're currently using django-reversion-compare==0.8.3 and django-reversion==2.0.12. The issue remains when excluding reversion-compare and using VersionAdmin instead of CompareVersionAdmin.\r\n\r\n### Expected behaviour:\r\nWhen deleting a customer and restoring him afterwards, all inline documents should be restored as well.\r\n\r\n### Actual behaviour:\r\nThe deletion of the customer works and the document entries get deleted as well (but remain on the file system, which is ok). When restoring the customer, only one document (of three assigned documents for example) get restored. If the three documents are uploaded at the same time (saved all together) it works. But if the documents are uploaded and saved at a different time, only one (the latest upload) gets restored.\r\n\r\n### Steps to reproduce:\r\n1. Create new customer\r\n2. Select image1 via inline to customer\r\n3. Save customer (uploads document)\r\n4. Upload image2 via inline to customer\r\n5. Save customer (uploads document)\r\n6. Delete customer\r\n7. Restore customer\r\n\r\n\r\nHere is a shortened version with the relevant attributes:\r\n```\r\n#models.py\r\n\r\n@reversion.register()\r\nclass Customer(models.Model):\r\nlast_name = models.CharField(max_length=255, null=False, blank=False, verbose_name=_(\"Nachname\"))\r\n[...]\r\n\r\nclass Document(models.Model):\r\n    uploaded_document = models.FileField(upload_to='uploaded_documents', verbose_name=_(\"Dokument\"), blank=True)\r\n    customer = models.ForeignKey(\r\n        'Customer',\r\n        null=True,\r\n        blank=True,\r\n        on_delete=models.CASCADE,\r\n        verbose_name=_(\"Angeh\u00e4ngt and Kunde\")\r\n    )\r\n[...]\r\n```\r\n\r\n```\r\n#admin.py\r\n\r\nclass DocumentInline(admin.TabularInline):\r\n    model = Document\r\n    verbose_name = _(\"Dokument\")\r\n    verbose_name_plural = _(\"Dokumente\")\r\n    fields = ['uploaded_document']\r\n    extra = 0\r\n\r\nclass DocumentAdmin(CompareVersionAdmin):\r\n    pass\r\n\r\n@admin.register(Customer)\r\nclass CustomerAdmin(ParsleyAdminMixin, CompareVersionAdmin, admin.ModelAdmin):\r\n    inlines = [DocumentInline]\r\n    form = CustomerForm\r\n[...]\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/706", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/706/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/706/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/706/events", "html_url": "https://github.com/etianen/django-reversion/issues/706", "id": 301338947, "node_id": "MDU6SXNzdWUzMDEzMzg5NDc=", "number": 706, "title": "New revision appears when open a recover object view (before saving or changing it)", "user": {"login": "alu0100608939", "id": 5494611, "node_id": "MDQ6VXNlcjU0OTQ2MTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5494611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alu0100608939", "html_url": "https://github.com/alu0100608939", "followers_url": "https://api.github.com/users/alu0100608939/followers", "following_url": "https://api.github.com/users/alu0100608939/following{/other_user}", "gists_url": "https://api.github.com/users/alu0100608939/gists{/gist_id}", "starred_url": "https://api.github.com/users/alu0100608939/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alu0100608939/subscriptions", "organizations_url": "https://api.github.com/users/alu0100608939/orgs", "repos_url": "https://api.github.com/users/alu0100608939/repos", "events_url": "https://api.github.com/users/alu0100608939/events{/privacy}", "received_events_url": "https://api.github.com/users/alu0100608939/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-01T09:47:14Z", "updated_at": "2018-03-01T10:48:56Z", "closed_at": "2018-03-01T10:48:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Whenever I access a 'recover' view of my objects, there is a change in the database.\r\nA new entry appears in the table revision_reversion with \"now\" as date_created and blank comment.\r\nThis happens even before I do any change or save it.\r\n\r\nI think this happens at the line:\r\n`    version.revision.revert(delete=True)`\r\n\r\nat VersionAdmin.revisionform_view\r\n\r\nI can fix this moving this line inside the 'with' statement. However, I don't know if this is correct.\r\n``` \r\ndef revisionform_view(self, request, version, template_name, extra_context=None):\r\n        try:\r\n            with transaction.atomic():\r\n                # Revert the revision.\r\n                # version.revision.revert(delete=True)  # < ----- Not here\r\n                # Run the normal changeform view.\r\n                with self._create_revision(request):\r\n                    version.revision.revert(delete=True) # <---- But here\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/705", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/705/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/705/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/705/events", "html_url": "https://github.com/etianen/django-reversion/issues/705", "id": 299861919, "node_id": "MDU6SXNzdWUyOTk4NjE5MTk=", "number": 705, "title": "Is it possible to store Version.serialized_data in an encrypted format?", "user": {"login": "BillBrower", "id": 1717845, "node_id": "MDQ6VXNlcjE3MTc4NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1717845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BillBrower", "html_url": "https://github.com/BillBrower", "followers_url": "https://api.github.com/users/BillBrower/followers", "following_url": "https://api.github.com/users/BillBrower/following{/other_user}", "gists_url": "https://api.github.com/users/BillBrower/gists{/gist_id}", "starred_url": "https://api.github.com/users/BillBrower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BillBrower/subscriptions", "organizations_url": "https://api.github.com/users/BillBrower/orgs", "repos_url": "https://api.github.com/users/BillBrower/repos", "events_url": "https://api.github.com/users/BillBrower/events{/privacy}", "received_events_url": "https://api.github.com/users/BillBrower/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-23T21:52:07Z", "updated_at": "2018-02-24T23:07:23Z", "closed_at": "2018-02-24T23:07:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I looked for a setting that allow you to specify a subclassed `Version` but I didn't see anything like that. I also looked into the Django serialization formats to see if I could leverage `Version.format` but that seems like a dead end too (I didn't see any way to register a custom serializer so that it could be used with `serializers.serialize`).\r\n\r\nIs storing the serialized data in an encrypted format possible at all? \r\n\r\nIf not, does the `exclude` parameter on the `register` decorator keep any fields that are listed from being stored in `Version.serialized_data`? I read in issue #387 that excluded fields just get stored as null. Is that still the case? My intention is just to use django-reversion as an audit log, I don't need to be able to rollback so storing sensitive fields as null would work just fine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/704", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/704/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/704/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/704/events", "html_url": "https://github.com/etianen/django-reversion/issues/704", "id": 296478446, "node_id": "MDU6SXNzdWUyOTY0Nzg0NDY=", "number": 704, "title": "Change history doesn't record deletions", "user": {"login": "pikrzysztof", "id": 3964215, "node_id": "MDQ6VXNlcjM5NjQyMTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3964215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pikrzysztof", "html_url": "https://github.com/pikrzysztof", "followers_url": "https://api.github.com/users/pikrzysztof/followers", "following_url": "https://api.github.com/users/pikrzysztof/following{/other_user}", "gists_url": "https://api.github.com/users/pikrzysztof/gists{/gist_id}", "starred_url": "https://api.github.com/users/pikrzysztof/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pikrzysztof/subscriptions", "organizations_url": "https://api.github.com/users/pikrzysztof/orgs", "repos_url": "https://api.github.com/users/pikrzysztof/repos", "events_url": "https://api.github.com/users/pikrzysztof/events{/privacy}", "received_events_url": "https://api.github.com/users/pikrzysztof/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-12T18:29:31Z", "updated_at": "2018-02-13T12:15:51Z", "closed_at": "2018-02-13T12:05:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Deletions are not visible in the change history. Restoring deleted stuff is not obvious too. The only way we can presume that a revert was a restoration is when we see an entry which reverts to a latest version.\r\n\r\nSee the change history of an object deleted and reverted twice.\r\n![screenshot from 2018-02-12 18-25-58](https://user-images.githubusercontent.com/3964215/36112800-a5c91a14-1022-11e8-8e49-0953c3f40a8a.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/703", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/703/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/703/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/703/events", "html_url": "https://github.com/etianen/django-reversion/issues/703", "id": 296476924, "node_id": "MDU6SXNzdWUyOTY0NzY5MjQ=", "number": 703, "title": "Edit reason", "user": {"login": "pikrzysztof", "id": 3964215, "node_id": "MDQ6VXNlcjM5NjQyMTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3964215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pikrzysztof", "html_url": "https://github.com/pikrzysztof", "followers_url": "https://api.github.com/users/pikrzysztof/followers", "following_url": "https://api.github.com/users/pikrzysztof/following{/other_user}", "gists_url": "https://api.github.com/users/pikrzysztof/gists{/gist_id}", "starred_url": "https://api.github.com/users/pikrzysztof/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pikrzysztof/subscriptions", "organizations_url": "https://api.github.com/users/pikrzysztof/orgs", "repos_url": "https://api.github.com/users/pikrzysztof/repos", "events_url": "https://api.github.com/users/pikrzysztof/events{/privacy}", "received_events_url": "https://api.github.com/users/pikrzysztof/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-12T18:24:15Z", "updated_at": "2018-02-14T14:48:15Z", "closed_at": "2018-02-14T14:48:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "How hard would it be to add a proper implementation of \"edit/delete/add reason\" which would be visible in the change history?\r\n\r\nIt could be pretty well emulated by adding an extra text field in every model which users would use change to store edit comments, but it looks like an ugly way of doing it (and you can't have \"delete reason\" in this case).\r\n\r\nJust to be clear, I'm not asking you to implement this feature, I'm just interested in description how to do this and possibly submit a MR later if it's doable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/702", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/702/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/702/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/702/events", "html_url": "https://github.com/etianen/django-reversion/issues/702", "id": 295865604, "node_id": "MDU6SXNzdWUyOTU4NjU2MDQ=", "number": 702, "title": "Why ignore version in _add_to_revision function when explicit = False ?", "user": {"login": "yanlong", "id": 2688896, "node_id": "MDQ6VXNlcjI2ODg4OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2688896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanlong", "html_url": "https://github.com/yanlong", "followers_url": "https://api.github.com/users/yanlong/followers", "following_url": "https://api.github.com/users/yanlong/following{/other_user}", "gists_url": "https://api.github.com/users/yanlong/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanlong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanlong/subscriptions", "organizations_url": "https://api.github.com/users/yanlong/orgs", "repos_url": "https://api.github.com/users/yanlong/repos", "events_url": "https://api.github.com/users/yanlong/events{/privacy}", "received_events_url": "https://api.github.com/users/yanlong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-09T13:09:22Z", "updated_at": "2018-02-23T16:39:37Z", "closed_at": "2018-02-23T16:39:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a model with parent model. When I change the field which belong to the parent model only the first change can be store in the revision. I found the _add_to_revision function ignore non-explicit (explicit = False) versions which I can not figure out why ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/701", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/701/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/701/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/701/events", "html_url": "https://github.com/etianen/django-reversion/issues/701", "id": 294352097, "node_id": "MDU6SXNzdWUyOTQzNTIwOTc=", "number": 701, "title": "Do we support Django 2?", "user": {"login": "avalanchy", "id": 1640089, "node_id": "MDQ6VXNlcjE2NDAwODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1640089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avalanchy", "html_url": "https://github.com/avalanchy", "followers_url": "https://api.github.com/users/avalanchy/followers", "following_url": "https://api.github.com/users/avalanchy/following{/other_user}", "gists_url": "https://api.github.com/users/avalanchy/gists{/gist_id}", "starred_url": "https://api.github.com/users/avalanchy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avalanchy/subscriptions", "organizations_url": "https://api.github.com/users/avalanchy/orgs", "repos_url": "https://api.github.com/users/avalanchy/repos", "events_url": "https://api.github.com/users/avalanchy/events{/privacy}", "received_events_url": "https://api.github.com/users/avalanchy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-05T10:59:42Z", "updated_at": "2018-07-19T09:25:23Z", "closed_at": "2018-07-19T09:25:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I saw that we already running tests against v2 and found an issue where someone was already migrating to Django 2. But it is not explicitly stated that we support it. \r\n\r\nIn docs we can find that django-reversion 2.0.0 supports Django \"1.8 - current\", but in changelog we find only news about handling Django  1.11.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/700", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/700/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/700/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/700/events", "html_url": "https://github.com/etianen/django-reversion/issues/700", "id": 293677294, "node_id": "MDU6SXNzdWUyOTM2NzcyOTQ=", "number": 700, "title": "RevisionMiddleware.atomic = False", "user": {"login": "dan-developer", "id": 10473169, "node_id": "MDQ6VXNlcjEwNDczMTY5", "avatar_url": "https://avatars3.githubusercontent.com/u/10473169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dan-developer", "html_url": "https://github.com/dan-developer", "followers_url": "https://api.github.com/users/dan-developer/followers", "following_url": "https://api.github.com/users/dan-developer/following{/other_user}", "gists_url": "https://api.github.com/users/dan-developer/gists{/gist_id}", "starred_url": "https://api.github.com/users/dan-developer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dan-developer/subscriptions", "organizations_url": "https://api.github.com/users/dan-developer/orgs", "repos_url": "https://api.github.com/users/dan-developer/repos", "events_url": "https://api.github.com/users/dan-developer/events{/privacy}", "received_events_url": "https://api.github.com/users/dan-developer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-01T20:45:13Z", "updated_at": "2018-02-01T22:21:07Z", "closed_at": "2018-02-01T22:21:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "How do I set RevisionMiddleware.atomic = False in the middleware?\r\n\r\nhttps://django-reversion.readthedocs.io/en/stable/middleware.html#reversion-middleware-revisionmiddleware", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/699", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/699/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/699/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/699/events", "html_url": "https://github.com/etianen/django-reversion/issues/699", "id": 292114884, "node_id": "MDU6SXNzdWUyOTIxMTQ4ODQ=", "number": 699, "title": "Squashed migrations", "user": {"login": "sximba", "id": 5112443, "node_id": "MDQ6VXNlcjUxMTI0NDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5112443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sximba", "html_url": "https://github.com/sximba", "followers_url": "https://api.github.com/users/sximba/followers", "following_url": "https://api.github.com/users/sximba/following{/other_user}", "gists_url": "https://api.github.com/users/sximba/gists{/gist_id}", "starred_url": "https://api.github.com/users/sximba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sximba/subscriptions", "organizations_url": "https://api.github.com/users/sximba/orgs", "repos_url": "https://api.github.com/users/sximba/repos", "events_url": "https://api.github.com/users/sximba/events{/privacy}", "received_events_url": "https://api.github.com/users/sximba/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-01-27T11:54:04Z", "updated_at": "2018-10-31T12:21:04Z", "closed_at": "2018-02-05T10:39:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Will the squashed migrations (i.e 0001, 0002, 0003, 0004) ever be deleted as advised in the django docs?\r\n\r\nThe squashed migration has existed for 2 years now. I think it is safe to assume everyone who uses the project has applied it.\r\n\r\nTheir presence in the code base makes it impossible to unapply migrations and leave the django migration tree clean.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/698", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/698/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/698/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/698/events", "html_url": "https://github.com/etianen/django-reversion/issues/698", "id": 289913683, "node_id": "MDU6SXNzdWUyODk5MTM2ODM=", "number": 698, "title": "Roadmap for v2.0.13", "user": {"login": "passuf", "id": 2511953, "node_id": "MDQ6VXNlcjI1MTE5NTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2511953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/passuf", "html_url": "https://github.com/passuf", "followers_url": "https://api.github.com/users/passuf/followers", "following_url": "https://api.github.com/users/passuf/following{/other_user}", "gists_url": "https://api.github.com/users/passuf/gists{/gist_id}", "starred_url": "https://api.github.com/users/passuf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/passuf/subscriptions", "organizations_url": "https://api.github.com/users/passuf/orgs", "repos_url": "https://api.github.com/users/passuf/repos", "events_url": "https://api.github.com/users/passuf/events{/privacy}", "received_events_url": "https://api.github.com/users/passuf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-19T09:35:07Z", "updated_at": "2018-01-23T12:25:47Z", "closed_at": "2018-01-23T10:41:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Without wanting to push you, is there a roadmap for the release of the next version?\r\nIt would be very nice if PR #691 would be included in an official release, as my project depends on it.\r\n\r\nThanks for all your work!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/697", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/697/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/697/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/697/events", "html_url": "https://github.com/etianen/django-reversion/issues/697", "id": 289072720, "node_id": "MDU6SXNzdWUyODkwNzI3MjA=", "number": 697, "title": "ImportError: No module named apps", "user": {"login": "chrisspen", "id": 116631, "node_id": "MDQ6VXNlcjExNjYzMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/116631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisspen", "html_url": "https://github.com/chrisspen", "followers_url": "https://api.github.com/users/chrisspen/followers", "following_url": "https://api.github.com/users/chrisspen/following{/other_user}", "gists_url": "https://api.github.com/users/chrisspen/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisspen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisspen/subscriptions", "organizations_url": "https://api.github.com/users/chrisspen/orgs", "repos_url": "https://api.github.com/users/chrisspen/repos", "events_url": "https://api.github.com/users/chrisspen/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisspen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-16T22:07:17Z", "updated_at": "2018-07-19T09:25:31Z", "closed_at": "2018-07-19T09:25:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Attempting to install the current 2.0.12 version alongside Django 1.11 results in the error:\r\n\r\n    File \"/tmp/pip-build-7Sx47W/django-reversion/setup.py\", line 2, in <module>\r\n        from reversion import __version__\r\n    File \"reversion/__init__.py\", line 21, in <module>\r\n        from reversion.revisions import (  # noqa\r\n    File \"reversion/revisions.py\", line 6, in <module>\r\n        from django.apps import apps\r\n    ImportError: No module named apps\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/696", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/696/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/696/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/696/events", "html_url": "https://github.com/etianen/django-reversion/issues/696", "id": 288817810, "node_id": "MDU6SXNzdWUyODg4MTc4MTA=", "number": 696, "title": "Data is corrupted", "user": {"login": "ebsaral", "id": 2864828, "node_id": "MDQ6VXNlcjI4NjQ4Mjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2864828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebsaral", "html_url": "https://github.com/ebsaral", "followers_url": "https://api.github.com/users/ebsaral/followers", "following_url": "https://api.github.com/users/ebsaral/following{/other_user}", "gists_url": "https://api.github.com/users/ebsaral/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebsaral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebsaral/subscriptions", "organizations_url": "https://api.github.com/users/ebsaral/orgs", "repos_url": "https://api.github.com/users/ebsaral/repos", "events_url": "https://api.github.com/users/ebsaral/events{/privacy}", "received_events_url": "https://api.github.com/users/ebsaral/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-16T08:10:53Z", "updated_at": "2018-02-19T19:33:14Z", "closed_at": "2018-02-19T15:47:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nWhen I traceback the error at `reversion/models.py` in `_object_version`, I see that this line produces corrupted data: `data = force_text(data.encode(\"utf8\"))`\r\n\r\nThe data is like this:\r\n\r\n`u'[{\"pk\": 82, \"model\": \"accounting.incominginvoice\", \"fields\": {\"vendor_bank_name\": \"\", \"active\": true, \"update_date\": \"2018-01-15T16:19:02.343Z\", \"due_date\": \"2018-01-05\", \"notes\": \"\", \"set_paid_by\": null, \"invoice_address\": null, \"subtotal\": -9203.73, \"vendor_invoice_address\": \"\", \"client\": 103, \"approved_by\": 890, \"is_paid\": false, \"created_by_scheduler\": false, \"vendor_swift_bic\": \"\", \"is_approv'`\r\n\r\nAs you can see at the field `is_approved`, data gets corrupted.\r\n\r\nAny guess why it can be like this?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/695", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/695/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/695/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/695/events", "html_url": "https://github.com/etianen/django-reversion/issues/695", "id": 287954428, "node_id": "MDU6SXNzdWUyODc5NTQ0Mjg=", "number": 695, "title": "How can I create revisions without calling obj.save() for each model?", "user": {"login": "mehtadev17", "id": 6795712, "node_id": "MDQ6VXNlcjY3OTU3MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6795712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mehtadev17", "html_url": "https://github.com/mehtadev17", "followers_url": "https://api.github.com/users/mehtadev17/followers", "following_url": "https://api.github.com/users/mehtadev17/following{/other_user}", "gists_url": "https://api.github.com/users/mehtadev17/gists{/gist_id}", "starred_url": "https://api.github.com/users/mehtadev17/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mehtadev17/subscriptions", "organizations_url": "https://api.github.com/users/mehtadev17/orgs", "repos_url": "https://api.github.com/users/mehtadev17/repos", "events_url": "https://api.github.com/users/mehtadev17/events{/privacy}", "received_events_url": "https://api.github.com/users/mehtadev17/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-01-11T23:01:50Z", "updated_at": "2019-03-13T10:34:38Z", "closed_at": "2018-01-12T18:32:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "How do I create a revision without saving the object? I create a version for all my models during a specific action from the user. There are too many objects to save at that time which causes the process to be slow. How can I create revisions without calling `obj.save()` for each model? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/694", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/694/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/694/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/694/events", "html_url": "https://github.com/etianen/django-reversion/issues/694", "id": 287111154, "node_id": "MDU6SXNzdWUyODcxMTExNTQ=", "number": 694, "title": "Security/Integrity of using revert/rollback trick in front-facing views?", "user": {"login": "tlambert03", "id": 1609449, "node_id": "MDQ6VXNlcjE2MDk0NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1609449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlambert03", "html_url": "https://github.com/tlambert03", "followers_url": "https://api.github.com/users/tlambert03/followers", "following_url": "https://api.github.com/users/tlambert03/following{/other_user}", "gists_url": "https://api.github.com/users/tlambert03/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlambert03/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlambert03/subscriptions", "organizations_url": "https://api.github.com/users/tlambert03/orgs", "repos_url": "https://api.github.com/users/tlambert03/repos", "events_url": "https://api.github.com/users/tlambert03/events{/privacy}", "received_events_url": "https://api.github.com/users/tlambert03/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-09T14:40:08Z", "updated_at": "2018-01-09T17:51:37Z", "closed_at": "2018-01-09T17:51:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you for the awesome app, and please forgive this \"non-bug\" post on your issue tracker:\r\nI have a front-facing view (based on `reversion.admin.VersionAdmin._reversion_revisionform_view`) that lets users see a previous version of an object (and all its relations) by adding a `?rev=` GET parameter to the URL (my code is below).  It works great, but being relatively new to database management I have a few questions:\r\n\r\n1.  When my view is executed, debug-toolbar reports about 10ms between the first `UPDATE` event and the final `ROLLBACK TO SAVEPOINT` event.  I know it's very unlikely with low-traffic websites, but if a second user were to request the page in those 10 ms, am I correct in thinking that they would get the rolled-back version without having explicitly asked for it?\r\n2. It seems safe enough for an admin view, but from the viewpoint of database integrity, is it risky to have a public-facing view that lets users \"abuse\" the revert/rollback transaction mechanism like this?  Is there a race condition or other scenario that could leave the database in an inconsistent state?\r\n3.  There are no POST requests accepted at this url/view, but since this page would not require login, could a malicious user take advantage of this view to screw up the database?\r\n\r\n```python\r\nclass myModelDetailView(DetailView):\r\n    queryset = MyModel.objects.all()\r\n\r\n    def version_view(self, request, rev, *args, **kwargs):\r\n       # step back \"rev\" number of revisions and render response\r\n        versions = Version.objects.get_for_object(self.get_object())\r\n        version = versions[min(versions.count() - 1, rev)]\r\n        try:\r\n            with transaction.atomic(using=version.db):\r\n                # Revert the revision.\r\n                version.revision.revert(delete=True)\r\n                # Get the object and render the response\r\n                self.object = self.get_object()\r\n                context = self.get_context_data(object=self.object)\r\n                response = self.render_to_response(context)\r\n                response.render()  # eager rendering of response before db rollback\r\n                raise _RollBackRevisionView(response)\r\n        except _RollBackRevisionView as ex:\r\n            return ex.response\r\n\r\n    def get(self, request, *args, **kwargs):\r\n        try:\r\n            # look for rev parameter in get string\r\n            rev = int(self.request.GET.get('rev', False))\r\n        except Exception:\r\n            rev = 0\r\n        if rev > 0:\r\n            return self.version_view(request, rev, *args, **kwargs)\r\n        return super().get(request, *args, **kwargs)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/693", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/693/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/693/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/693/events", "html_url": "https://github.com/etianen/django-reversion/issues/693", "id": 284756220, "node_id": "MDU6SXNzdWUyODQ3NTYyMjA=", "number": 693, "title": "Reversion Middleware issue when migrating to Django 2", "user": {"login": "samifahed", "id": 3503909, "node_id": "MDQ6VXNlcjM1MDM5MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3503909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samifahed", "html_url": "https://github.com/samifahed", "followers_url": "https://api.github.com/users/samifahed/followers", "following_url": "https://api.github.com/users/samifahed/following{/other_user}", "gists_url": "https://api.github.com/users/samifahed/gists{/gist_id}", "starred_url": "https://api.github.com/users/samifahed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samifahed/subscriptions", "organizations_url": "https://api.github.com/users/samifahed/orgs", "repos_url": "https://api.github.com/users/samifahed/repos", "events_url": "https://api.github.com/users/samifahed/events{/privacy}", "received_events_url": "https://api.github.com/users/samifahed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-27T16:37:31Z", "updated_at": "2018-01-02T13:36:54Z", "closed_at": "2018-01-02T13:36:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWhen migrating from the `MIDDLEWARE_CLASSES` django setting to the `MIDDLEWARE` setting, django calls `__init__` and `__call__` methods on the middleware instead of `process_request` and `process_response`.\r\nIn the case of `RevisionMiddleware`, the behavior is different when we use the `MIDDLEWARE` setting instead of the `MIDDLEWARE_CLASSES` one, because the [create_revision in the views](https://github.com/etianen/django-reversion/blob/51abcac5db7f3b73eb1503c3bcf591b9f7240523/reversion/views.py#L22) rolls back when the status code of the http request > 400, however the old behavior uses the [create_revision context manager](https://github.com/etianen/django-reversion/blob/51abcac5db7f3b73eb1503c3bcf591b9f7240523/reversion/revisions.py#L297) which doesn't roll back the transaction of what happened in the request.\r\n\r\nOne is used in the `__init__` and the other is used in the `process_request` in the [RevisionMiddleware](https://github.com/etianen/django-reversion/blob/master/reversion/middleware.py#L6).\r\n\r\nWhat I see is that the migration from one setting to the other is not consistent, which makes the behavior with Django 2 different.\r\n\r\nIs this intended to be different?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/692", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/692/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/692/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/692/events", "html_url": "https://github.com/etianen/django-reversion/issues/692", "id": 283885586, "node_id": "MDU6SXNzdWUyODM4ODU1ODY=", "number": 692, "title": "REST operation don\u00b4t save coments", "user": {"login": "jvp2003d", "id": 7420074, "node_id": "MDQ6VXNlcjc0MjAwNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7420074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvp2003d", "html_url": "https://github.com/jvp2003d", "followers_url": "https://api.github.com/users/jvp2003d/followers", "following_url": "https://api.github.com/users/jvp2003d/following{/other_user}", "gists_url": "https://api.github.com/users/jvp2003d/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvp2003d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvp2003d/subscriptions", "organizations_url": "https://api.github.com/users/jvp2003d/orgs", "repos_url": "https://api.github.com/users/jvp2003d/repos", "events_url": "https://api.github.com/users/jvp2003d/events{/privacy}", "received_events_url": "https://api.github.com/users/jvp2003d/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-21T13:41:27Z", "updated_at": "2017-12-22T07:45:26Z", "closed_at": "2017-12-21T14:02:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Inside the admin django-reversion works fine. But from REST api operation don\u00b4t save any comment in table reversion_revision\r\n![image](https://user-images.githubusercontent.com/7420074/34258116-d5553bae-e65c-11e7-9945-0a938b43bb6c.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/690", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/690/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/690/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/690/events", "html_url": "https://github.com/etianen/django-reversion/issues/690", "id": 282101709, "node_id": "MDU6SXNzdWUyODIxMDE3MDk=", "number": 690, "title": "Access the request object on the signals", "user": {"login": "jlugao", "id": 3421634, "node_id": "MDQ6VXNlcjM0MjE2MzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3421634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlugao", "html_url": "https://github.com/jlugao", "followers_url": "https://api.github.com/users/jlugao/followers", "following_url": "https://api.github.com/users/jlugao/following{/other_user}", "gists_url": "https://api.github.com/users/jlugao/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlugao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlugao/subscriptions", "organizations_url": "https://api.github.com/users/jlugao/orgs", "repos_url": "https://api.github.com/users/jlugao/repos", "events_url": "https://api.github.com/users/jlugao/events{/privacy}", "received_events_url": "https://api.github.com/users/jlugao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-14T13:32:46Z", "updated_at": "2017-12-14T15:36:21Z", "closed_at": "2017-12-14T15:36:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, I am trying to add additional information about the user (ip address) to every revision. I am trying to update this using signals, however I can't access the request object, is there a way to do this?\r\n\r\nThanks for the great project", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/689", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/689/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/689/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/689/events", "html_url": "https://github.com/etianen/django-reversion/issues/689", "id": 281771874, "node_id": "MDU6SXNzdWUyODE3NzE4NzQ=", "number": 689, "title": "Recover button (in FeinCMS) raises SQL error", "user": {"login": "djowett", "id": 1470021, "node_id": "MDQ6VXNlcjE0NzAwMjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1470021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djowett", "html_url": "https://github.com/djowett", "followers_url": "https://api.github.com/users/djowett/followers", "following_url": "https://api.github.com/users/djowett/following{/other_user}", "gists_url": "https://api.github.com/users/djowett/gists{/gist_id}", "starred_url": "https://api.github.com/users/djowett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djowett/subscriptions", "organizations_url": "https://api.github.com/users/djowett/orgs", "repos_url": "https://api.github.com/users/djowett/repos", "events_url": "https://api.github.com/users/djowett/events{/privacy}", "received_events_url": "https://api.github.com/users/djowett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-13T14:38:38Z", "updated_at": "2017-12-15T11:12:00Z", "closed_at": "2017-12-14T09:54:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n2017-12-13 14:33:14,148: manage[2482]: ERROR: Internal Server Error: /cms/blogpost/recover/\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python2.7/dist-packages/django/core/handlers/base.py\", line 149, in get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/usr/lib/python2.7/dist-packages/django/core/handlers/base.py\", line 147, in get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/usr/lib/python2.7/dist-packages/django/utils/decorators.py\", line 149, in _wrapped_view\r\n    response = view_func(request, *args, **kwargs)\r\n  File \"/usr/lib/python2.7/dist-packages/django/views/decorators/cache.py\", line 57, in _wrapped_view_func\r\n    response = view_func(request, *args, **kwargs)\r\n  File \"/usr/lib/python2.7/dist-packages/django/contrib/admin/sites.py\", line 244, in inner\r\n    return view(request, *args, **kwargs)\r\n  File \"/usr/lib/python2.7/dist-packages/reversion/admin.py\", line 279, in recoverlist_view\r\n    context,\r\n  File \"/usr/lib/python2.7/dist-packages/django/shortcuts.py\", line 67, in render\r\n    template_name, context, request=request, using=using)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/loader.py\", line 97, in render_to_string\r\n    return template.render(context, request)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/backends/django.py\", line 95, in render\r\n    return self.template.render(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/base.py\", line 206, in render\r\n    return self._render(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/base.py\", line 197, in _render\r\n    return self.nodelist.render(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/base.py\", line 992, in render\r\n    bit = node.render_annotated(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/base.py\", line 959, in render_annotated\r\n    return self.render(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/loader_tags.py\", line 173, in render\r\n    return compiled_parent._render(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/base.py\", line 197, in _render\r\n    return self.nodelist.render(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/base.py\", line 992, in render\r\n    bit = node.render_annotated(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/base.py\", line 959, in render_annotated\r\n    return self.render(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/loader_tags.py\", line 173, in render\r\n    return compiled_parent._render(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/base.py\", line 197, in _render\r\n    return self.nodelist.render(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/base.py\", line 992, in render\r\n    bit = node.render_annotated(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/base.py\", line 959, in render_annotated\r\n    return self.render(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/loader_tags.py\", line 69, in render\r\n    result = block.nodelist.render(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/base.py\", line 992, in render\r\n    bit = node.render_annotated(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/base.py\", line 959, in render_annotated\r\n    return self.render(context)\r\n  File \"/usr/lib/python2.7/dist-packages/django/template/defaulttags.py\", line 325, in render\r\n    if match:\r\n  File \"/usr/lib/python2.7/dist-packages/django/db/models/query.py\", line 266, in __nonzero__\r\n    return type(self).__bool__(self)\r\n  File \"/usr/lib/python2.7/dist-packages/django/db/models/query.py\", line 262, in __bool__\r\n    self._fetch_all()\r\n  File \"/usr/lib/python2.7/dist-packages/django/db/models/query.py\", line 1074, in _fetch_all\r\n    self._result_cache = list(self.iterator())\r\n  File \"/usr/lib/python2.7/dist-packages/django/db/models/query.py\", line 52, in __iter__\r\n    results = compiler.execute_sql()\r\n  File \"/usr/lib/python2.7/dist-packages/django/db/models/sql/compiler.py\", line 848, in execute_sql\r\n    cursor.execute(sql, params)\r\n  File \"/usr/lib/python2.7/dist-packages/django/db/backends/utils.py\", line 79, in execute\r\n    return super(CursorDebugWrapper, self).execute(sql, params)\r\n  File \"/usr/lib/python2.7/dist-packages/django/db/backends/utils.py\", line 64, in execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/usr/lib/python2.7/dist-packages/django/db/utils.py\", line 95, in __exit__\r\n    six.reraise(dj_exc_type, dj_exc_value, traceback)\r\n  File \"/usr/lib/python2.7/dist-packages/django/db/backends/utils.py\", line 64, in execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/usr/lib/python2.7/dist-packages/django/db/backends/mysql/base.py\", line 112, in execute\r\n    return self.cursor.execute(query, args)\r\n  File \"/usr/lib/python2.7/dist-packages/MySQLdb/cursors.py\", line 226, in execute\r\n    self.errorhandler(self, exc, value)\r\n  File \"/usr/lib/python2.7/dist-packages/MySQLdb/connections.py\", line 36, in defaulterrorhandler\r\n    raise errorvalue\r\nProgrammingError: (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'varchar(191))\\n                WHERE\\n                    V.`db` = 'default' AND\\n ' at line 4\")\r\n```\r\n\r\nI'm suspecting bb4d193bc may have something to do with it because I see the error on 2.0.11, but not 2.0.10", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/687", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/687/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/687/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/687/events", "html_url": "https://github.com/etianen/django-reversion/issues/687", "id": 279287654, "node_id": "MDU6SXNzdWUyNzkyODc2NTQ=", "number": 687, "title": "REVERT opportunity with CBV in django-reversion app?", "user": {"login": "nurzhannogerbek", "id": 8999232, "node_id": "MDQ6VXNlcjg5OTkyMzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8999232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nurzhannogerbek", "html_url": "https://github.com/nurzhannogerbek", "followers_url": "https://api.github.com/users/nurzhannogerbek/followers", "following_url": "https://api.github.com/users/nurzhannogerbek/following{/other_user}", "gists_url": "https://api.github.com/users/nurzhannogerbek/gists{/gist_id}", "starred_url": "https://api.github.com/users/nurzhannogerbek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nurzhannogerbek/subscriptions", "organizations_url": "https://api.github.com/users/nurzhannogerbek/orgs", "repos_url": "https://api.github.com/users/nurzhannogerbek/repos", "events_url": "https://api.github.com/users/nurzhannogerbek/events{/privacy}", "received_events_url": "https://api.github.com/users/nurzhannogerbek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-05T08:32:29Z", "updated_at": "2017-12-07T10:52:54Z", "closed_at": "2017-12-07T10:52:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use next CBV to revert to a specific version of a record. Unfortunately it raise error. I am little bit confused. Can you say whats the reason? Problem in my CBV or in django-reversion?\r\n\r\n**views.py:**\r\n```\r\nfrom reversion.views import RevisionMixin\r\nfrom django.views import View\r\nfrom django.shortcuts import get_object_or_404, redirect\r\nfrom reversion.models import Version\r\nimport reversion\r\n\r\nclass ArticleRevert(RevisionMixin, View):\r\n    def get(self, request, *args, **kwargs):\r\n        article=get_object_or_404(Article, pk=self.kwargs.get('pk'))\r\n        revision=get_object_or_404(Version.objects.get_for_object(article), pk=self.kwargs.get('article_reversion_id')).revision\r\n        reversion.set_comment(\"Revert to version #{}\".format(revision.id))\r\n        revision.revert()\r\n        return redirect('article_list')\r\n```\r\n\r\n**ERROR:**\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/nurzhan_nogerbek/Virtualenvs/py2714/lib/python2.7/site-packages/django/core/handlers/exception.py\", line 41, in inner\r\n    response = get_response(request)\r\n  File \"/Users/nurzhan_nogerbek/Virtualenvs/py2714/lib/python2.7/site-packages/django/core/handlers/base.py\", line 187, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/Users/nurzhan_nogerbek/Virtualenvs/py2714/lib/python2.7/site-packages/django/core/handlers/base.py\", line 185, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/Users/nurzhan_nogerbek/Virtualenvs/py2714/lib/python2.7/site-packages/django/views/generic/base.py\", line 68, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/Users/nurzhan_nogerbek/Virtualenvs/py2714/lib/python2.7/site-packages/reversion/views.py\", line 43, in do_revision_view\r\n    return func(request, *args, **kwargs)\r\n  File \"/Users/nurzhan_nogerbek/Virtualenvs/py2714/lib/python2.7/site-packages/django/views/generic/base.py\", line 88, in dispatch\r\n    return handler(request, *args, **kwargs)\r\n  File \"/Applications/Projects/web/project/article/views.py\", line 165, in get\r\n    reversion.set_comment(\"Revert to version #{}\".format(reversion.id))\r\n  File \"/Users/nurzhan_nogerbek/Virtualenvs/py2714/lib/python2.7/site-packages/reversion/revisions.py\", line 122, in set_comment\r\n    _update_frame(comment=comment)\r\n  File \"/Users/nurzhan_nogerbek/Virtualenvs/py2714/lib/python2.7/site-packages/reversion/revisions.py\", line 87, in _update_frame\r\n    _local.stack = _local.stack[:-1] + (_current_frame()._replace(**kwargs),)\r\n  File \"/Users/nurzhan_nogerbek/Virtualenvs/py2714/lib/python2.7/site-packages/reversion/revisions.py\", line 53, in _current_frame\r\n    raise RevisionManagementError(\"There is no active revision for this thread\")\r\nRevisionManagementError: There is no active revision for this thread\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/686", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/686/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/686/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/686/events", "html_url": "https://github.com/etianen/django-reversion/issues/686", "id": 278956152, "node_id": "MDU6SXNzdWUyNzg5NTYxNTI=", "number": 686, "title": "AttributeError: 'Section' object has no attribute 'section_ptr'", "user": {"login": "kplatis", "id": 5221058, "node_id": "MDQ6VXNlcjUyMjEwNTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5221058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kplatis", "html_url": "https://github.com/kplatis", "followers_url": "https://api.github.com/users/kplatis/followers", "following_url": "https://api.github.com/users/kplatis/following{/other_user}", "gists_url": "https://api.github.com/users/kplatis/gists{/gist_id}", "starred_url": "https://api.github.com/users/kplatis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kplatis/subscriptions", "organizations_url": "https://api.github.com/users/kplatis/orgs", "repos_url": "https://api.github.com/users/kplatis/repos", "events_url": "https://api.github.com/users/kplatis/events{/privacy}", "received_events_url": "https://api.github.com/users/kplatis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-04T11:07:20Z", "updated_at": "2018-06-26T13:34:36Z", "closed_at": "2018-02-09T10:38:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use multi-table inheritance and I keep track of changes for the following structure:\r\n\r\n```\r\n@reversion.register(follow=('emailsection', 'linkssection', ))\r\nclass Section(models.Model):\r\n   pass\r\n\r\n@reversion.register(follow=('section_ptr', ))\r\nclass EmailSection(Section):\r\n   pass\r\n\r\n@reversion.register(follow=('section_ptr', ))\r\nclass LinksSection(Section):\r\n  pass\r\n```\r\n\r\n\r\nI have also implemented a custom page where the user can create revision using:\r\n```\r\n with reversion.create_revision():\r\n    object.save()\r\n    reversion.set_user(request.user)\r\n    reversion.set_comment(comment)\r\n```\r\nwhere object is a related object that is saved in a revision along with all the related objects (including the Section, EmailSection and LinksSection.\r\n\r\nAlso in the same page the user can revert to a revision using:\r\n```\r\n  revision = Revision.objects.get(id=revision_id)\r\n  revision.revert(delete=True)\r\n```\r\n\r\nbut when reverting I get error `AttributeError: 'Section' object has no attribute 'section_ptr'`\r\n\r\nThe specific traceback I get is:\r\n\r\n```\r\n  File \"/Users/platico/PycharmProjects/news-service/src/configs/ajax.py\", line 51, in revert_to_revision\r\n    revision.revert(delete=True)\r\n  File \"/Users/platico/PycharmProjects/news-service/src/lib/python2.7/site-packages/reversion/models.py\", line 91, in revert\r\n    collector.collect([item for item in current_revision if item not in old_revision])\r\n  File \"/Users/platico/PycharmProjects/news-service/src/lib/python2.7/site-packages/django/db/models/deletion.py\", line 212, in collect\r\n    parent_objs = [getattr(obj, ptr.name) for obj in new_objs]\r\nAttributeError: 'Section' object has no attribute 'section_ptr'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/685", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/685/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/685/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/685/events", "html_url": "https://github.com/etianen/django-reversion/issues/685", "id": 278403234, "node_id": "MDU6SXNzdWUyNzg0MDMyMzQ=", "number": 685, "title": "Error on Recover list", "user": {"login": "jlpoveda", "id": 191520, "node_id": "MDQ6VXNlcjE5MTUyMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/191520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlpoveda", "html_url": "https://github.com/jlpoveda", "followers_url": "https://api.github.com/users/jlpoveda/followers", "following_url": "https://api.github.com/users/jlpoveda/following{/other_user}", "gists_url": "https://api.github.com/users/jlpoveda/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlpoveda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlpoveda/subscriptions", "organizations_url": "https://api.github.com/users/jlpoveda/orgs", "repos_url": "https://api.github.com/users/jlpoveda/repos", "events_url": "https://api.github.com/users/jlpoveda/events{/privacy}", "received_events_url": "https://api.github.com/users/jlpoveda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-01T09:17:19Z", "updated_at": "2018-07-19T09:25:40Z", "closed_at": "2018-07-19T09:25:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recover list returns this error:\r\n\r\n```\r\n(1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'varchar(191))\\n\r\n                WHERE\\n                    \r\nV.`db` = 'default' AND\\n ' at line 4\")\r\n```\r\n\r\nThis is the whole query:\r\n\r\n```\r\nSELECT `reversion_version`.`id`, `reversion_version`.`revision_id`, `reversion_version`.`object_id`, `reversion_version`.`content_type_id`, `reversion_version`.`db`, `reversion_version`.`format`, `reversion_version`.`serialized_data`, `reversion_version`.`object_repr` FROM `reversion_version` WHERE `reversion_version`.`id` IN (\r\n                SELECT MAX(V.`id`)\r\n                FROM `reversion_version` AS V\r\n                LEFT JOIN `Customer` ON V.`object_id` = CAST(`Customer`.`ID` as varchar(191))\r\n                WHERE\r\n                    V.`db` = 'default' AND\r\n                    V.`content_type_id` = 66 AND\r\n                    `Customer`.`ID` IS NULL\r\n                GROUP BY V.`object_id`\r\n                ) ORDER BY `reversion_version`.`id` ASC LIMIT 21;\r\n```\r\n\r\nThe problem is caused because __mysql__ only CAST to:\r\n```\r\nBINARY[(N)]\r\nCHAR[(N)]\r\nDATE\r\nDATETIME\r\nDECIMAL[(M[,D])]\r\nSIGNED\r\n[INTEGER]\r\nTIME\r\nUNSIGNED [INTEGER]\r\n```\r\n\r\nIn the `VersionQuerySet.get_deleted` method (https://github.com/etianen/django-reversion/blob/master/reversion/models.py#L128) you can see the source of the problem.\r\n\r\n_Django_ converts a CharField into a varchar in __mysql__\r\n\r\nYou think there's a simple solution? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/684", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/684/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/684/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/684/events", "html_url": "https://github.com/etianen/django-reversion/issues/684", "id": 277659985, "node_id": "MDU6SXNzdWUyNzc2NTk5ODU=", "number": 684, "title": "How to combine django-modeltranslation and django-reversion apps?", "user": {"login": "nurzhannogerbek", "id": 8999232, "node_id": "MDQ6VXNlcjg5OTkyMzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8999232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nurzhannogerbek", "html_url": "https://github.com/nurzhannogerbek", "followers_url": "https://api.github.com/users/nurzhannogerbek/followers", "following_url": "https://api.github.com/users/nurzhannogerbek/following{/other_user}", "gists_url": "https://api.github.com/users/nurzhannogerbek/gists{/gist_id}", "starred_url": "https://api.github.com/users/nurzhannogerbek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nurzhannogerbek/subscriptions", "organizations_url": "https://api.github.com/users/nurzhannogerbek/orgs", "repos_url": "https://api.github.com/users/nurzhannogerbek/repos", "events_url": "https://api.github.com/users/nurzhannogerbek/events{/privacy}", "received_events_url": "https://api.github.com/users/nurzhannogerbek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-29T07:55:48Z", "updated_at": "2017-11-30T08:43:22Z", "closed_at": "2017-11-30T08:37:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to combine [django-modeltranslation](https://github.com/deschler/django-modeltranslation) and django-reversion apps?\r\n\r\nI have next problem: in `models.py` file I registered `Slide` model which has `head` field. This field has several other fields for translation like `head_ru`, `head_kz`, `head_en`. I set these fields in `translation.py` and `settings.py` files. In DB slide table has all this fields. Also I show all this fields in form where user can edit data. When user submit the form django-reversion create version only for head field and ignore other fields. How to fix this problem?\r\n\r\n**models.py:**\r\n```\r\nfrom django.db import models\r\nimport reversion\r\n\r\n@reversion.register()\r\nclass Slide(models.Model):\r\n    head = models.CharField(verbose_name='Title', max_length=200, blank=False,)\r\n```\r\n\r\n**translation.py:**\r\n```\r\nfrom modeltranslation.translator import TranslationOptions\r\nfrom modeltranslation.translator import translator\r\nfrom .models import Slide\r\n\r\nclass SlideTranslationOptions(TranslationOptions):\r\n    fields = ('head',)\r\n\r\ntranslator.register(Slide, SlideTranslationOptions)\r\n```\r\n\r\n**settings.py:**\r\n```\r\nLANGUAGES = (\r\n    ('ru', 'Russian'),\r\n    ('en', 'English'),\r\n    ('kz', 'Kazakh'),\r\n)\r\n```\r\n\r\n**views.py:**\r\n```\r\nclass SlideEditView(RevisionMixin, UpdateView):\r\n    template_name = 'slider/edit_slide.html'\r\n    form_class = SlideForm\r\n    model = Slide\r\n\r\n    def form_valid(self, form):\r\n        form.save()\r\n        data = dict()\r\n        data['form_is_valid'] = True\r\n        context = {'slides': Slide.objects.all(),}\r\n        data['html_slides'] = render_to_string('slider/slides.html', context)\r\n        reversion.set_comment('EDIT')\r\n        return JsonResponse(data)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/683", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/683/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/683/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/683/events", "html_url": "https://github.com/etianen/django-reversion/issues/683", "id": 277338570, "node_id": "MDU6SXNzdWUyNzczMzg1NzA=", "number": 683, "title": "MySQL error when performing rollback", "user": {"login": "jamesmalone", "id": 3437792, "node_id": "MDQ6VXNlcjM0Mzc3OTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3437792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesmalone", "html_url": "https://github.com/jamesmalone", "followers_url": "https://api.github.com/users/jamesmalone/followers", "following_url": "https://api.github.com/users/jamesmalone/following{/other_user}", "gists_url": "https://api.github.com/users/jamesmalone/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesmalone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesmalone/subscriptions", "organizations_url": "https://api.github.com/users/jamesmalone/orgs", "repos_url": "https://api.github.com/users/jamesmalone/repos", "events_url": "https://api.github.com/users/jamesmalone/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesmalone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-28T10:48:19Z", "updated_at": "2017-12-05T17:15:18Z", "closed_at": "2017-11-28T17:41:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Seem to get a MySQL error with the latest reversion (2.0.11) when performing an UNDO to restore previously deleted objects:\r\n\r\nProgrammingError: (1064, You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near varchar(191))\\n WHERE\\n V.db = default AND\\n  at line 4)\r\n\r\nI'm running MySQL version 5.7.13\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/680", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/680/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/680/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/680/events", "html_url": "https://github.com/etianen/django-reversion/issues/680", "id": 275763145, "node_id": "MDU6SXNzdWUyNzU3NjMxNDU=", "number": 680, "title": "Savepoints on POST requests. Error if atomic(savepoint=False)", "user": {"login": "guettli", "id": 414336, "node_id": "MDQ6VXNlcjQxNDMzNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/414336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guettli", "html_url": "https://github.com/guettli", "followers_url": "https://api.github.com/users/guettli/followers", "following_url": "https://api.github.com/users/guettli/following{/other_user}", "gists_url": "https://api.github.com/users/guettli/gists{/gist_id}", "starred_url": "https://api.github.com/users/guettli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guettli/subscriptions", "organizations_url": "https://api.github.com/users/guettli/orgs", "repos_url": "https://api.github.com/users/guettli/repos", "events_url": "https://api.github.com/users/guettli/events{/privacy}", "received_events_url": "https://api.github.com/users/guettli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-11-21T15:54:14Z", "updated_at": "2018-07-19T09:26:02Z", "closed_at": "2018-07-19T09:26:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We discovered that your django postgres db connection uses savepoints on POST requests. We ask us: why?\r\n\r\nWe discovered that django-reversion begins the transactions if the request is a POST request.\r\n\r\nAfter the middlewares were processed, django does atomic() since atomic views are enabled.\r\n\r\nAFAIK savepoints make postgres a bit slower, and that's why we used atomic(savepoint=False).\r\n\r\nBut if we do this, we get this exception:\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"/.../lib/python2.7/site-packages/django/core/handlers/base.py\", line 131, in get_response\r\n    response = middleware_method(request, response)\r\n  File \"/.../lib/python2.7/site-packages/reversion/middleware.py\", line 44, in process_response\r\n    self._close_revision(request, False)\r\n  File \"/.../lib/python2.7/site-packages/reversion/middleware.py\", line 41, in _close_revision\r\n    request._revision_middleware.pop(self).__exit__(*sys.exc_info() if is_exception else (None, None, None))\r\n  File \"/.../lib/python2.7/site-packages/reversion/revisions.py\", line 317, in __exit__\r\n    return self._context.__exit__(exc_type, exc_value, traceback)\r\n  File \"/usr/lib64/python2.7/contextlib.py\", line 24, in __exit__\r\n    self.gen.next()\r\n  File \"/.../lib/python2.7/site-packages/reversion/revisions.py\", line 294, in _create_revision_context\r\n    using=using,\r\n  File \"/.../lib/python2.7/site-packages/reversion/revisions.py\", line 232, in _save_revision\r\n    for model, db_pks in model_db_pks.items()\r\n  File \"/.../lib/python2.7/site-packages/reversion/revisions.py\", line 232, in <dictcomp>\r\n    for model, db_pks in model_db_pks.items()\r\n  File \"/.../lib/python2.7/site-packages/reversion/revisions.py\", line 230, in <dictcomp>\r\n    for db, pks in db_pks.items()\r\nTypeError: argument 2 to map() must support iteration\r\n\r\n```\r\n\r\nWhat could go wrong, if atomic(savepoint=False) gets used to avoid not needed savepoints?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/678", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/678/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/678/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/678/events", "html_url": "https://github.com/etianen/django-reversion/issues/678", "id": 274122921, "node_id": "MDU6SXNzdWUyNzQxMjI5MjE=", "number": 678, "title": "Model instances without primary key value are unhashable in admin panel", "user": {"login": "kplatis", "id": 5221058, "node_id": "MDQ6VXNlcjUyMjEwNTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5221058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kplatis", "html_url": "https://github.com/kplatis", "followers_url": "https://api.github.com/users/kplatis/followers", "following_url": "https://api.github.com/users/kplatis/following{/other_user}", "gists_url": "https://api.github.com/users/kplatis/gists{/gist_id}", "starred_url": "https://api.github.com/users/kplatis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kplatis/subscriptions", "organizations_url": "https://api.github.com/users/kplatis/orgs", "repos_url": "https://api.github.com/users/kplatis/repos", "events_url": "https://api.github.com/users/kplatis/events{/privacy}", "received_events_url": "https://api.github.com/users/kplatis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2017-11-15T11:27:18Z", "updated_at": "2018-07-19T09:26:20Z", "closed_at": "2018-07-19T09:26:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have implemented a \"backup\" functionality when a user wants to keep a revision of his object along with all the related ones. I have implemented the admin integration and registered all the \"follows\" correctly. When the user presses the \"create new backup\" button, then the following code is executed:\r\n\r\n```\r\n    with reversion.create_revision():\r\n        main_object.save()\r\n\r\n        reversion.set_user(request.user)\r\n        reversion.set_comment(comment)\r\n```\r\n\r\nand a revision is created for the object and all the related ones. \r\n\r\nThe problem appears when I create a new object that has a relationship to the `main_object`. When the new object is created, if the user presses \"Create new Backup\", then a revision is successfully created for the main_object and all the related ones BUT the previous revisions show this message on the admin panel: ` \"Model instances without primary key value are unhashable\".`\r\n\r\nThe traceback that appears is:\r\n\r\n```\r\nFile \"/Users/platico/PycharmProjects/news-service/src/lib/python2.7/site-packages/django/core/handlers/base.py\" in get_response\r\n  132.                     response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\nFile \"/Users/platico/PycharmProjects/news-service/src/lib/python2.7/site-packages/django/utils/decorators.py\" in _wrapped_view\r\n  110.                     response = view_func(request, *args, **kwargs)\r\nFile \"/Users/platico/PycharmProjects/news-service/src/lib/python2.7/site-packages/django/views/decorators/cache.py\" in _wrapped_view_func\r\n  57.         response = view_func(request, *args, **kwargs)\r\nFile \"/Users/platico/PycharmProjects/news-service/src/lib/python2.7/site-packages/django/contrib/admin/sites.py\" in inner\r\n  233.             return view(request, *args, **kwargs)\r\nFile \"/Users/platico/PycharmProjects/news-service/src/lib/python2.7/site-packages/reversion/admin.py\" in revision_view\r\n  238.             context,\r\nFile \"/Users/platico/PycharmProjects/news-service/src/lib/python2.7/site-packages/reversion/admin.py\" in _reversion_revisionform_view\r\n  184.                 version.revision.revert(delete=True)\r\nFile \"/Users/platico/PycharmProjects/news-service/src/lib/python2.7/site-packages/reversion/models.py\" in revert\r\n  89.                         if item not in old_revision:\r\nFile \"/Users/platico/PycharmProjects/news-service/src/lib/python2.7/site-packages/django/db/models/base.py\" in __hash__\r\n  521.             raise TypeError(\"Model instances without primary key value are unhashable\")\r\n\r\n```\r\n\r\nwith an Exception Type of TypeError and an Exception Value of `Model instances without primary key value are unhashable`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/677", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/677/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/677/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/677/events", "html_url": "https://github.com/etianen/django-reversion/issues/677", "id": 272511342, "node_id": "MDU6SXNzdWUyNzI1MTEzNDI=", "number": 677, "title": "Multi Table inheritance in Admin problem", "user": {"login": "kplatis", "id": 5221058, "node_id": "MDQ6VXNlcjUyMjEwNTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5221058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kplatis", "html_url": "https://github.com/kplatis", "followers_url": "https://api.github.com/users/kplatis/followers", "following_url": "https://api.github.com/users/kplatis/following{/other_user}", "gists_url": "https://api.github.com/users/kplatis/gists{/gist_id}", "starred_url": "https://api.github.com/users/kplatis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kplatis/subscriptions", "organizations_url": "https://api.github.com/users/kplatis/orgs", "repos_url": "https://api.github.com/users/kplatis/repos", "events_url": "https://api.github.com/users/kplatis/events{/privacy}", "received_events_url": "https://api.github.com/users/kplatis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-09T10:23:24Z", "updated_at": "2017-12-05T17:18:55Z", "closed_at": "2017-12-05T17:18:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I have a multi table inheritance of type:\r\n\r\n```\r\nclass TypeA:\r\n       smth = models.CharField()\r\n\r\n class TypeB(TypeA):\r\n      smth1 = models.CharField()\r\n\r\n  class TypeC(TypeA):\r\n      smth2 = models.CharField()\r\n```\r\nand I register them in admin in order to have admin integration. I also add `typea_ptr` in the follow arrays of TypeB and TypeC in order to follow the parent class. But when I create a new revision it normally appears in 'History' page of TypeA but not in TypeB and TypeC. Do you have any idea what it might be?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/674", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/674/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/674/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/674/events", "html_url": "https://github.com/etianen/django-reversion/issues/674", "id": 268821393, "node_id": "MDU6SXNzdWUyNjg4MjEzOTM=", "number": 674, "title": "IntegrityError for related objects when reverting. [Solved]", "user": {"login": "hgylfason", "id": 1047717, "node_id": "MDQ6VXNlcjEwNDc3MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1047717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hgylfason", "html_url": "https://github.com/hgylfason", "followers_url": "https://api.github.com/users/hgylfason/followers", "following_url": "https://api.github.com/users/hgylfason/following{/other_user}", "gists_url": "https://api.github.com/users/hgylfason/gists{/gist_id}", "starred_url": "https://api.github.com/users/hgylfason/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hgylfason/subscriptions", "organizations_url": "https://api.github.com/users/hgylfason/orgs", "repos_url": "https://api.github.com/users/hgylfason/repos", "events_url": "https://api.github.com/users/hgylfason/events{/privacy}", "received_events_url": "https://api.github.com/users/hgylfason/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-26T16:09:11Z", "updated_at": "2018-07-19T09:26:29Z", "closed_at": "2018-07-19T09:26:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'll try to explain this problem through an example.\r\n\r\nThere are three models: **Sample**, **Parameter** and **Value**.\r\n\r\n**Value** has a _unique_together_ constraint for **Sample** and **Parameter**.\r\n\r\nThere are two instances of **Value**: _value1_ and _value2_.\r\nThere are three instances of **Parameter**: _param1_, _param2_ and _param3_.\r\nThere is one instance of **Sample**: _sample_.\r\n\r\nNow let's say these actions happen.\r\n\r\nrevision 1. _value2_ is created with _parameter_ = _param2_ and _sample_ = _sample1_.\r\nrevision 2. _value1_ is created with _parameter_ = _param1_ and _sample_ = _sample1_.\r\nrevision 3. _sample_ is changed.\r\nrevision 4. _value1.parameter_ = _param3_\r\nrevision 5. _value2.parameter_ = _param1_\r\n\r\nI want to get the state of sample and it's values at the time of _revision 3_.\r\nHow I'll do that is dependant on how I group these items in a revision.\r\n\r\nScenario 1\r\n_For every version of value there is a version of its sample in the same\r\nrevision._\r\n\r\nIn this scenario to get the state at the time of revision 3 we would revert\r\nversions or revision in revision 1,2 and 3. The first two to get the correct\r\nstate of value1 and value2 and the third one to get the state of the sample.\r\nThis won't work if revision 2 is reverted **before** revision 1 because the\r\nparameter value for value1 would be in conflict with the _current_ parameter\r\nvalue of value2.\r\n\r\nScenario 2\r\n_In every revision with a Value there is a version of the corresponding Sample\r\nand all its Values._\r\n\r\nIn this scenario we'll have a lot of duplicate versions but reverting is easy.\r\nI'll just revert revision 3 and I should get the correct state.\r\n**This is not my situation so I am not sure if an IntegrityError is raised?**\r\nE.g. if the version of _value1_ in that revision is reverted **before** the\r\nversion of _value2_ than I assume that an error is raised because the parameter\r\nvalue of the version is in conflict with the _current_ parameter value of\r\n_value2_.\r\n\r\nI'll note that I know of one solution for both scenarios which involves\r\nreverting in reverse order each revision up to the requested date (date of\r\nrevision 3) and **then** revert the revisions that are older than revision 3\r\nand reflect the state of the values i.e. revision 1 and 2.\r\nThe reason I cannot use this is because it just doesn't scale and the further\r\nyou want to go back in time the more expensive this operation becomes. Just not\r\napplicable in my case.\r\n\r\n# Edit\r\nAfter I had written this I looked at how Revision is reverted and noticed the __safe_revert_ method.\r\nIt solves this problem :)\r\nI therefore post this issue so that someone else can look it up if they are end up in a similar situation :) \r\nIf you don't find this useful than your welcome to remove this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/673", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/673/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/673/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/673/events", "html_url": "https://github.com/etianen/django-reversion/issues/673", "id": 264853293, "node_id": "MDU6SXNzdWUyNjQ4NTMyOTM=", "number": 673, "title": "DB hits while creating a revision", "user": {"login": "vedavidhbudimuri", "id": 6457019, "node_id": "MDQ6VXNlcjY0NTcwMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6457019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vedavidhbudimuri", "html_url": "https://github.com/vedavidhbudimuri", "followers_url": "https://api.github.com/users/vedavidhbudimuri/followers", "following_url": "https://api.github.com/users/vedavidhbudimuri/following{/other_user}", "gists_url": "https://api.github.com/users/vedavidhbudimuri/gists{/gist_id}", "starred_url": "https://api.github.com/users/vedavidhbudimuri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vedavidhbudimuri/subscriptions", "organizations_url": "https://api.github.com/users/vedavidhbudimuri/orgs", "repos_url": "https://api.github.com/users/vedavidhbudimuri/repos", "events_url": "https://api.github.com/users/vedavidhbudimuri/events{/privacy}", "received_events_url": "https://api.github.com/users/vedavidhbudimuri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-12T08:22:55Z", "updated_at": "2018-07-19T09:26:51Z", "closed_at": "2018-07-19T09:26:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n    with reversion.create_revision():\r\n\r\n        # Save a new model instance.\r\n        obj1 = YourModel()\r\n        obj1.name = \"obj1\"\r\n        obj1.save()\r\n\r\n        obj2 = YourModel()\r\n        obj2.name = \"obj2\"\r\n        obj2.save()\r\n    \r\n        obj3 = YourModel()\r\n        obj3.name = \"obj3\"\r\n        obj3.save()\r\n\r\n        # Store some meta-information.\r\n        reversion.set_user(request.user)\r\n        reversion.set_comment(\"Created revision 1\")\r\n\r\nAs there are three changes in the revision will there be additional 3 db hits to creation 3 version objects or just 1 using bulk_create (it seems to be 3 db hits (O(n)) for me after looking into https://github.com/etianen/django-reversion/blob/master/reversion/revisions.py)\r\n\r\nCan someone explain what exactly will be happening? And if we are making O(n) db calls why we cannot use bulk_create (just curious)?\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/672", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/672/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/672/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/672/events", "html_url": "https://github.com/etianen/django-reversion/issues/672", "id": 262810314, "node_id": "MDU6SXNzdWUyNjI4MTAzMTQ=", "number": 672, "title": "Add new version to already created revision", "user": {"login": "kplatis", "id": 5221058, "node_id": "MDQ6VXNlcjUyMjEwNTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5221058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kplatis", "html_url": "https://github.com/kplatis", "followers_url": "https://api.github.com/users/kplatis/followers", "following_url": "https://api.github.com/users/kplatis/following{/other_user}", "gists_url": "https://api.github.com/users/kplatis/gists{/gist_id}", "starred_url": "https://api.github.com/users/kplatis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kplatis/subscriptions", "organizations_url": "https://api.github.com/users/kplatis/orgs", "repos_url": "https://api.github.com/users/kplatis/repos", "events_url": "https://api.github.com/users/kplatis/events{/privacy}", "received_events_url": "https://api.github.com/users/kplatis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2017-10-04T14:33:15Z", "updated_at": "2017-11-09T10:22:46Z", "closed_at": "2017-11-09T10:22:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have created a \"backup\" functionality using the Django Reversion library for an object that keeps revision of a registered model, including the related objects (foreign keys etc.).\r\n\r\nLet's use the following case as an example.\r\n\r\n```\r\nclass Newspaper:\r\n   title = models.CharField()\r\n\r\nclass Article:\r\n   newspaper = models.ForeignKey('Newspaper') \r\n```\r\n\r\nWhen the user clicks to keep a backup of a newspaper object, a revision of the newspaper is created along with the already created articles, under the same revision. I did it so that when the user chooses to revert back to the latest backup, all related objects under the same revision to be reverted.\r\n\r\nThe problem starts when a new article of the newspaper is created after the revision is created. The issue is that if the user chooses to revert to the previous revision (the one before creating the new article), the new article will still be there because it was not registered in the latest revision.\r\n\r\nFurthermore, I don't want to create a new revision every time a new article is created because then there might be other changes included that the user will not want to include to the revision.\r\n\r\nWhat I think might be a suitable solution, is when a new article is created, to create a Version of the article and register it in the latest created revision of the newspaper, but I don't know if it's possible using the functions provided by the API (maybe using add_to_revision?)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/671", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/671/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/671/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/671/events", "html_url": "https://github.com/etianen/django-reversion/issues/671", "id": 262377398, "node_id": "MDU6SXNzdWUyNjIzNzczOTg=", "number": 671, "title": "Not saving revision", "user": {"login": "billytotochan", "id": 10459586, "node_id": "MDQ6VXNlcjEwNDU5NTg2", "avatar_url": "https://avatars3.githubusercontent.com/u/10459586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/billytotochan", "html_url": "https://github.com/billytotochan", "followers_url": "https://api.github.com/users/billytotochan/followers", "following_url": "https://api.github.com/users/billytotochan/following{/other_user}", "gists_url": "https://api.github.com/users/billytotochan/gists{/gist_id}", "starred_url": "https://api.github.com/users/billytotochan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/billytotochan/subscriptions", "organizations_url": "https://api.github.com/users/billytotochan/orgs", "repos_url": "https://api.github.com/users/billytotochan/repos", "events_url": "https://api.github.com/users/billytotochan/events{/privacy}", "received_events_url": "https://api.github.com/users/billytotochan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-03T10:27:54Z", "updated_at": "2018-07-19T10:07:46Z", "closed_at": "2018-07-19T10:07:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was wonder if I have to override each model save() method to use the reversion module or not.\r\n\r\n\r\nIn the models.py\r\n\r\n`from django.db import models`\r\n`import reversion`\r\n\r\n`@reversion.register()`\r\n`class YourModel(models.Model):`\r\n\r\n\r\n\r\nand i run `python manage.py createinitialrevisions` .\r\n\r\nI saw\r\n\r\n`Creating revision for your model`\r\n`- Created 0 / 0`\r\n\r\n\r\nBut when I created a model,\r\nthen updated it twice by changing some field.\r\n\r\n`from reversion.models import Version`\r\n`versions = Version.objects.get_for_object(instance)`\r\n\r\nreturn a empty queryset for me.\r\n\r\n\r\n\r\n\r\n\r\n\r\nDid I miss something ?\r\nOr I have to manually add `with reversion.create_revision():` for save() method of each model?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/670", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/670/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/670/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/670/events", "html_url": "https://github.com/etianen/django-reversion/issues/670", "id": 261833505, "node_id": "MDU6SXNzdWUyNjE4MzM1MDU=", "number": 670, "title": "History button for a model", "user": {"login": "efi-mk", "id": 822542, "node_id": "MDQ6VXNlcjgyMjU0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/822542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/efi-mk", "html_url": "https://github.com/efi-mk", "followers_url": "https://api.github.com/users/efi-mk/followers", "following_url": "https://api.github.com/users/efi-mk/following{/other_user}", "gists_url": "https://api.github.com/users/efi-mk/gists{/gist_id}", "starred_url": "https://api.github.com/users/efi-mk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/efi-mk/subscriptions", "organizations_url": "https://api.github.com/users/efi-mk/orgs", "repos_url": "https://api.github.com/users/efi-mk/repos", "events_url": "https://api.github.com/users/efi-mk/events{/privacy}", "received_events_url": "https://api.github.com/users/efi-mk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-30T09:54:23Z", "updated_at": "2018-07-19T10:07:56Z", "closed_at": "2018-07-19T10:07:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThank you very much for the effort you are putting into this.\r\n\r\nIs there a way to view a summary for the changes that happened to a model without checking each record, very similar to the history button that you have per record, but for a model.\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/668", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/668/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/668/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/668/events", "html_url": "https://github.com/etianen/django-reversion/issues/668", "id": 260082952, "node_id": "MDU6SXNzdWUyNjAwODI5NTI=", "number": 668, "title": "Test suite depending on test discovery ordering", "user": {"login": "claudep", "id": 143192, "node_id": "MDQ6VXNlcjE0MzE5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/143192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claudep", "html_url": "https://github.com/claudep", "followers_url": "https://api.github.com/users/claudep/followers", "following_url": "https://api.github.com/users/claudep/following{/other_user}", "gists_url": "https://api.github.com/users/claudep/gists{/gist_id}", "starred_url": "https://api.github.com/users/claudep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claudep/subscriptions", "organizations_url": "https://api.github.com/users/claudep/orgs", "repos_url": "https://api.github.com/users/claudep/repos", "events_url": "https://api.github.com/users/claudep/events{/privacy}", "received_events_url": "https://api.github.com/users/claudep/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-24T13:09:30Z", "updated_at": "2017-09-25T09:43:23Z", "closed_at": "2017-09-25T09:43:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Tests seem to fail currently on Travis on certain configs. My analysis showed that `TestModel` and `TestModelParent` are registered initially in the process of the admin autodiscovery soon in general test setup.\r\nThen you are unregistering models in most tests `tearDown` method. So if your first discovered test is using a mixin class which is registering a model, you'll get a double registration and the test fails. If by chance the first discovered test is not registering a model, it will succeed and unregister any registered model in its `tearDown` and the state is then clean for all subsequent tests.\r\n\r\nDoes that make sense?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/664", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/664/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/664/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/664/events", "html_url": "https://github.com/etianen/django-reversion/issues/664", "id": 257102334, "node_id": "MDU6SXNzdWUyNTcxMDIzMzQ=", "number": 664, "title": "add_to_revision() in other middleware.py does not save", "user": {"login": "pybean", "id": 5816395, "node_id": "MDQ6VXNlcjU4MTYzOTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5816395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pybean", "html_url": "https://github.com/pybean", "followers_url": "https://api.github.com/users/pybean/followers", "following_url": "https://api.github.com/users/pybean/following{/other_user}", "gists_url": "https://api.github.com/users/pybean/gists{/gist_id}", "starred_url": "https://api.github.com/users/pybean/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pybean/subscriptions", "organizations_url": "https://api.github.com/users/pybean/orgs", "repos_url": "https://api.github.com/users/pybean/repos", "events_url": "https://api.github.com/users/pybean/events{/privacy}", "received_events_url": "https://api.github.com/users/pybean/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-09-12T16:15:38Z", "updated_at": "2018-07-19T10:08:24Z", "closed_at": "2018-07-19T10:08:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI created my own django middleware.py, and simply called \"add_to_revision(instance)\" in its process_request() method. I see that my middleware works without any exceptions, but I do not see the new Version instance created by the \"add_to_revision\" call in database. This middleware worked fine when I was using reversion 2.0.8, and then it stops storing version instance after upgrading the reversion module to 2.0.10. \r\n\r\nPlease let me know if you need more information. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/663", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/663/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/663/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/663/events", "html_url": "https://github.com/etianen/django-reversion/issues/663", "id": 256477296, "node_id": "MDU6SXNzdWUyNTY0NzcyOTY=", "number": 663, "title": "Cannot save dict with decimals into json field because of RevisionMiddleware", "user": {"login": "lampslave", "id": 880505, "node_id": "MDQ6VXNlcjg4MDUwNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/880505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lampslave", "html_url": "https://github.com/lampslave", "followers_url": "https://api.github.com/users/lampslave/followers", "following_url": "https://api.github.com/users/lampslave/following{/other_user}", "gists_url": "https://api.github.com/users/lampslave/gists{/gist_id}", "starred_url": "https://api.github.com/users/lampslave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lampslave/subscriptions", "organizations_url": "https://api.github.com/users/lampslave/orgs", "repos_url": "https://api.github.com/users/lampslave/repos", "events_url": "https://api.github.com/users/lampslave/events{/privacy}", "received_events_url": "https://api.github.com/users/lampslave/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-10T01:16:07Z", "updated_at": "2017-09-11T13:35:16Z", "closed_at": "2017-09-11T13:17:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have model with json field from django-annoying (also tried django-jsonfield). Model is registered in reversion. When I try to save dict with decimal values in json field, I get error `Decimal('0') is not JSON serializable`. If middleware is disabled I get no errors. Simplified code and traceback:\r\n\r\n```\r\ndjango>=1.11,<2\r\ndjango-reversion==2.0.10\r\nmysql\r\n```\r\n\r\n```\r\nclass MyModel(models.Model):\r\n    data = JSONField()\r\n```\r\n\r\n```\r\nMyModel.objects.get_or_create(\r\n    defaults={'data': {u'one': Decimal('0'), u'two': Decimal('0')}\r\n```\r\n\r\n```\r\n  File \"/home/lampslave/.virtualenv/myenv/local/lib/python2.7/site-packages/django/db/models/query.py\", line 466, in get_or_create\r\n    return self._create_object_from_params(lookup, params)\r\n  File \"/home/lampslave/.virtualenv/myenv/local/lib/python2.7/site-packages/django/db/models/query.py\", line 498, in _create_object_from_params\r\n    obj = self.create(**params)\r\n  File \"/home/lampslave/.virtualenv/myenv/local/lib/python2.7/site-packages/django/db/models/query.py\", line 394, in create\r\n    obj.save(force_insert=True, using=self.db)\r\n  File \"/home/lampslave/.virtualenv/myenv/local/lib/python2.7/site-packages/django/db/models/base.py\", line 807, in save\r\n    force_update=force_update, update_fields=update_fields)\r\n  File \"/home/lampslave/.virtualenv/myenv/local/lib/python2.7/site-packages/django/db/models/base.py\", line 847, in save_base\r\n    update_fields=update_fields, raw=raw, using=using,\r\n  File \"/home/lampslave/.virtualenv/myenv/local/lib/python2.7/site-packages/django/dispatch/dispatcher.py\", line 193, in send\r\n    for receiver in self._live_receivers(sender)\r\n  File \"/home/lampslave/.virtualenv/myenv/local/lib/python2.7/site-packages/reversion/revisions.py\", line 329, in _post_save_receiver\r\n    add_to_revision(instance, model_db=using)\r\n  File \"/home/lampslave/.virtualenv/myenv/local/lib/python2.7/site-packages/reversion/revisions.py\", line 215, in add_to_revision\r\n    _add_to_revision(obj, db, model_db, True)\r\n  File \"/home/lampslave/.virtualenv/myenv/local/lib/python2.7/site-packages/reversion/revisions.py\", line 194, in _add_to_revision\r\n    fields=version_options.fields,\r\n  File \"/home/lampslave/.virtualenv/myenv/local/lib/python2.7/site-packages/django/core/serializers/__init__.py\", line 129, in serialize\r\n    s.serialize(queryset, **options)\r\n  File \"/home/lampslave/.virtualenv/myenv/local/lib/python2.7/site-packages/django/core/serializers/base.py\", line 89, in serialize\r\n    self.handle_field(obj, field)\r\n  File \"/home/lampslave/.virtualenv/myenv/local/lib/python2.7/site-packages/django/core/serializers/python.py\", line 47, in handle_field\r\n    value = field.value_from_object(obj)\r\n  File \"/home/lampslave/.virtualenv/myenv/local/lib/python2.7/site-packages/annoying/fields.py\", line 148, in value_from_object\r\n    return json.dumps(value, sort_keys=True, indent=2, separators=(',', ': '))\r\n  File \"/usr/lib/python2.7/json/__init__.py\", line 251, in dumps\r\n    sort_keys=sort_keys, **kw).encode(obj)\r\n  File \"/usr/lib/python2.7/json/encoder.py\", line 209, in encode\r\n    chunks = list(chunks)\r\n  File \"/usr/lib/python2.7/json/encoder.py\", line 434, in _iterencode\r\n    for chunk in _iterencode_dict(o, _current_indent_level):\r\n  File \"/usr/lib/python2.7/json/encoder.py\", line 408, in _iterencode_dict\r\n    for chunk in chunks:\r\n  File \"/usr/lib/python2.7/json/encoder.py\", line 442, in _iterencode\r\n    o = _default(o)\r\n  File \"/usr/lib/python2.7/json/encoder.py\", line 184, in default\r\n    raise TypeError(repr(o) + \" is not JSON serializable\")\r\nTypeError: Decimal('0') is not JSON serializable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/661", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/661/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/661/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/661/events", "html_url": "https://github.com/etianen/django-reversion/issues/661", "id": 251866452, "node_id": "MDU6SXNzdWUyNTE4NjY0NTI=", "number": 661, "title": "Admin broken when using primary keys with underscores", "user": {"login": "achidlow", "id": 5511888, "node_id": "MDQ6VXNlcjU1MTE4ODg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5511888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achidlow", "html_url": "https://github.com/achidlow", "followers_url": "https://api.github.com/users/achidlow/followers", "following_url": "https://api.github.com/users/achidlow/following{/other_user}", "gists_url": "https://api.github.com/users/achidlow/gists{/gist_id}", "starred_url": "https://api.github.com/users/achidlow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achidlow/subscriptions", "organizations_url": "https://api.github.com/users/achidlow/orgs", "repos_url": "https://api.github.com/users/achidlow/repos", "events_url": "https://api.github.com/users/achidlow/events{/privacy}", "received_events_url": "https://api.github.com/users/achidlow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-22T07:45:58Z", "updated_at": "2017-08-22T12:56:35Z", "closed_at": "2017-08-22T12:56:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If you have a model with a text based primary key with any of the special characters which django admin quotes, the history list is unable to be browsed. Once that is fixed, the changes are unable to be reverted due to a similar issue.\r\n\r\nIt's a pretty simple fix, pull request incoming.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/660", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/660/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/660/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/660/events", "html_url": "https://github.com/etianen/django-reversion/issues/660", "id": 251564644, "node_id": "MDU6SXNzdWUyNTE1NjQ2NDQ=", "number": 660, "title": "AttributeError: 'module' object has no attribute 'VersionAdmin'", "user": {"login": "unityliving-saravanan", "id": 30827570, "node_id": "MDQ6VXNlcjMwODI3NTcw", "avatar_url": "https://avatars0.githubusercontent.com/u/30827570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unityliving-saravanan", "html_url": "https://github.com/unityliving-saravanan", "followers_url": "https://api.github.com/users/unityliving-saravanan/followers", "following_url": "https://api.github.com/users/unityliving-saravanan/following{/other_user}", "gists_url": "https://api.github.com/users/unityliving-saravanan/gists{/gist_id}", "starred_url": "https://api.github.com/users/unityliving-saravanan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unityliving-saravanan/subscriptions", "organizations_url": "https://api.github.com/users/unityliving-saravanan/orgs", "repos_url": "https://api.github.com/users/unityliving-saravanan/repos", "events_url": "https://api.github.com/users/unityliving-saravanan/events{/privacy}", "received_events_url": "https://api.github.com/users/unityliving-saravanan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-08-21T06:51:19Z", "updated_at": "2018-07-19T10:08:42Z", "closed_at": "2018-07-19T10:08:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "import reversion\r\nfrom reversion.admin import VersionAdmin\r\n\r\nclass HouseReversionAdmin(reversion.VersionAdmin):\r\n......\r\nAttributeError: 'module' object has no attribute 'VersionAdmin'\r\n\r\ngetting above error.\r\n\r\ni referenced this issue https://github.com/etianen/django-reversion/issues/100 . Yet issue not resolved.\r\n\r\ndjango : 1.10.7\r\ndjango-reversion : 2.0.9\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/659", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/659/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/659/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/659/events", "html_url": "https://github.com/etianen/django-reversion/issues/659", "id": 249625106, "node_id": "MDU6SXNzdWUyNDk2MjUxMDY=", "number": 659, "title": "ValueError when trying to review a version", "user": {"login": "jfscyberpub", "id": 23479272, "node_id": "MDQ6VXNlcjIzNDc5Mjcy", "avatar_url": "https://avatars3.githubusercontent.com/u/23479272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfscyberpub", "html_url": "https://github.com/jfscyberpub", "followers_url": "https://api.github.com/users/jfscyberpub/followers", "following_url": "https://api.github.com/users/jfscyberpub/following{/other_user}", "gists_url": "https://api.github.com/users/jfscyberpub/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfscyberpub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfscyberpub/subscriptions", "organizations_url": "https://api.github.com/users/jfscyberpub/orgs", "repos_url": "https://api.github.com/users/jfscyberpub/repos", "events_url": "https://api.github.com/users/jfscyberpub/events{/privacy}", "received_events_url": "https://api.github.com/users/jfscyberpub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-11T12:46:46Z", "updated_at": "2017-08-18T16:00:09Z", "closed_at": "2017-08-18T16:00:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI found a problem where I got this error message when I try to check a version:\r\n\r\n`invalid literal for int() with base 10: 'None'`\r\n\r\nAfter further investigation, found that it's because one of my inline model were not versioned.\r\n\r\nSo I ended up replacing in reversion/models.py this line (l.80):\r\n`except model.DoesNotExist:`\r\n\r\nBy this line:\r\n`except (model.DoesNotExist, ValueError):`\r\n\r\nIt fixed my problem and of course I lost the data in the inline form (which makes sense and I'm totally fine with that).\r\n\r\nI thought I'd share this so maybe you could (or not) add this fix.\r\n\r\n**EDIT:** I use django 1.10.7 with django-reversion 2.0.8", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/658", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/658/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/658/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/658/events", "html_url": "https://github.com/etianen/django-reversion/issues/658", "id": 249101276, "node_id": "MDU6SXNzdWUyNDkxMDEyNzY=", "number": 658, "title": "Problem when upgrading from 2.0.8 to 2.0.9", "user": {"login": "jfscyberpub", "id": 23479272, "node_id": "MDQ6VXNlcjIzNDc5Mjcy", "avatar_url": "https://avatars3.githubusercontent.com/u/23479272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfscyberpub", "html_url": "https://github.com/jfscyberpub", "followers_url": "https://api.github.com/users/jfscyberpub/followers", "following_url": "https://api.github.com/users/jfscyberpub/following{/other_user}", "gists_url": "https://api.github.com/users/jfscyberpub/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfscyberpub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfscyberpub/subscriptions", "organizations_url": "https://api.github.com/users/jfscyberpub/orgs", "repos_url": "https://api.github.com/users/jfscyberpub/repos", "events_url": "https://api.github.com/users/jfscyberpub/events{/privacy}", "received_events_url": "https://api.github.com/users/jfscyberpub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-08-09T17:17:05Z", "updated_at": "2017-08-18T15:44:41Z", "closed_at": "2017-08-18T15:44:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI use Django 1.10.7 with python 2.7 and when I updgrade the django-reversion package from 2.0.8 to 2.0.9, I got this error when I add or update an entry: \r\n\r\n> invalid literal for int() with base 10: 'None'\r\n\r\nHere is the problem:\r\n\r\n![selection_130](https://user-images.githubusercontent.com/23479272/29134484-c439a66e-7d04-11e7-9767-11770c4d48f2.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/etianen/django-reversion/issues/656", "repository_url": "https://api.github.com/repos/etianen/django-reversion", "labels_url": "https://api.github.com/repos/etianen/django-reversion/issues/656/labels{/name}", "comments_url": "https://api.github.com/repos/etianen/django-reversion/issues/656/comments", "events_url": "https://api.github.com/repos/etianen/django-reversion/issues/656/events", "html_url": "https://github.com/etianen/django-reversion/issues/656", "id": 245652260, "node_id": "MDU6SXNzdWUyNDU2NTIyNjA=", "number": 656, "title": "Updating from 2.0.8 to 2.0.9 will force install last (1.11.3) version of Django instead current version ", "user": {"login": "egregors", "id": 2153895, "node_id": "MDQ6VXNlcjIxNTM4OTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2153895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/egregors", "html_url": "https://github.com/egregors", "followers_url": "https://api.github.com/users/egregors/followers", "following_url": "https://api.github.com/users/egregors/following{/other_user}", "gists_url": "https://api.github.com/users/egregors/gists{/gist_id}", "starred_url": "https://api.github.com/users/egregors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/egregors/subscriptions", "organizations_url": "https://api.github.com/users/egregors/orgs", "repos_url": "https://api.github.com/users/egregors/repos", "events_url": "https://api.github.com/users/egregors/events{/privacy}", "received_events_url": "https://api.github.com/users/egregors/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-26T08:58:43Z", "updated_at": "2017-07-26T10:04:43Z", "closed_at": "2017-07-26T09:21:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "So, if I have project with Django 1.10.7 for example, and I will try to update django-reversion by usual way, it force update current Django (I don't know why) and all will break. ", "performed_via_github_app": null, "score": 1.0}]}