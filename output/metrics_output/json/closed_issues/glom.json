{"total_count": 56, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/mahmoud/glom/issues/189", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/189/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/189/events", "html_url": "https://github.com/mahmoud/glom/issues/189", "id": 676638326, "node_id": "MDU6SXNzdWU2NzY2MzgzMjY=", "number": 189, "title": "Intermittent recursion depth exceeded on v20.7.0 CI", "user": {"login": "mahmoud", "id": 130193, "node_id": "MDQ6VXNlcjEzMDE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoud", "html_url": "https://github.com/mahmoud", "followers_url": "https://api.github.com/users/mahmoud/followers", "following_url": "https://api.github.com/users/mahmoud/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoud/subscriptions", "organizations_url": "https://api.github.com/users/mahmoud/orgs", "repos_url": "https://api.github.com/users/mahmoud/repos", "events_url": "https://api.github.com/users/mahmoud/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-11T07:08:19Z", "updated_at": "2020-08-11T07:10:30Z", "closed_at": "2020-08-11T07:10:30Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Reproduced every few Travis runs for Pythons <3.7. Always on `glom/test/test_error.py::test_midway_branch`\r\n\r\nFor example: https://travis-ci.org/github/mahmoud/glom/jobs/716806565\r\n\r\n```\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/site-packages/glom/test/test_error.py\", line 112, in _debug_some_str\r\n\r\n    return str(value)\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/site-packages/glom/core.py\", line 169, in __str__\r\n\r\n    self._target_spec_trace = format_target_spec_trace(self._scope, self.__wrapped)\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/site-packages/glom/core.py\", line 247, in format_target_spec_trace\r\n\r\n    segments.append(recurse(branches[-1], last_branch))\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/site-packages/glom/core.py\", line 237, in <lambda>\r\n\r\n    recurse = lambda s, last=False: format_target_spec_trace(s, root_error, width, depth + 1, prev_target, last)\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/site-packages/glom/core.py\", line 240, in format_target_spec_trace\r\n\r\n    for scope, spec, target, error, branches in _unpack_stack(scope):\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/site-packages/glom/core.py\", line 199, in _unpack_stack\r\n\r\n    if child in branches:\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/_collections_abc.py\", line 449, in __eq__\r\n\r\n    return dict(self.items()) == dict(other.items())\r\n... (the frame above 900 odd times) ...\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/site-packages/glom/test/test_error.py\", line 112, in _debug_some_str\r\n\r\n    return str(value)\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/site-packages/glom/core.py\", line 169, in __str__\r\n\r\n    self._target_spec_trace = format_target_spec_trace(self._scope, self.__wrapped)\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/site-packages/glom/core.py\", line 247, in format_target_spec_trace\r\n\r\n    segments.append(recurse(branches[-1], last_branch))\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/site-packages/glom/core.py\", line 237, in <lambda>\r\n\r\n    recurse = lambda s, last=False: format_target_spec_trace(s, root_error, width, depth + 1, prev_target, last)\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/site-packages/glom/core.py\", line 240, in format_target_spec_trace\r\n\r\n    for scope, spec, target, error, branches in _unpack_stack(scope):\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/site-packages/glom/core.py\", line 199, in _unpack_stack\r\n\r\n    if child in branches:\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/_collections_abc.py\", line 449, in __eq__\r\n\r\n    return dict(self.items()) == dict(other.items())\r\n```\r\n\r\nOther highlights include:\r\n\r\n```\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/_collections_abc.py\", line 447, in __eq__\r\n\r\n    if not isinstance(other, Mapping):\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/abc.py\", line 182, in __instancecheck__\r\n\r\n    if subclass in cls._abc_cache:\r\n```\r\n\r\nand\r\n\r\n```\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/_collections_abc.py\", line 447, in __eq__\r\n\r\n    if not isinstance(other, Mapping):\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/abc.py\", line 182, in __instancecheck__\r\n\r\n    if subclass in cls._abc_cache:\r\n\r\n  File \"/home/travis/build/mahmoud/glom/.tox/py34/lib/python3.4/_weakrefset.py\", line 75, in __contains__\r\n\r\n    return wr in self.data\r\n```\r\n\r\nBut it all goes back to the __eq__ on mapping's weakref. Probably got fixed in Py37/Py38, because I don't think I've ever seen those fail on travis.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/185", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/185/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/185/events", "html_url": "https://github.com/mahmoud/glom/issues/185", "id": 674337003, "node_id": "MDU6SXNzdWU2NzQzMzcwMDM=", "number": 185, "title": "v20.7 regression: PathAccessError `path` is a TType not a Path", "user": {"login": "jakul", "id": 862794, "node_id": "MDQ6VXNlcjg2Mjc5NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/862794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakul", "html_url": "https://github.com/jakul", "followers_url": "https://api.github.com/users/jakul/followers", "following_url": "https://api.github.com/users/jakul/following{/other_user}", "gists_url": "https://api.github.com/users/jakul/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakul/subscriptions", "organizations_url": "https://api.github.com/users/jakul/orgs", "repos_url": "https://api.github.com/users/jakul/repos", "events_url": "https://api.github.com/users/jakul/events{/privacy}", "received_events_url": "https://api.github.com/users/jakul/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-06T13:59:47Z", "updated_at": "2020-08-11T08:47:28Z", "closed_at": "2020-08-11T07:27:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "v20.7 has introduced a regression which can cause `ex.path.values()` to hang.\r\n\r\n```\r\n# In 20.5\r\nIn [1]: import glom\r\n   ...: try:\r\n   ...:      glom.glom({}, 'a')\r\n   ...: except glom.PathAccessError as ex:\r\n   ...:     print(ex.path.__class__)\r\n   ...:\r\n<class 'glom.core.Path'>\r\n\r\n# In 20.7\r\nIn [1]:\r\n   ...: import glom\r\n   ...: try:\r\n   ...:      glom.glom({}, 'a')\r\n   ...: except glom.PathAccessError as ex:\r\n   ...:     print(ex.path.__class__)\r\n   ...:\r\n<class 'glom.core.TType'>\r\n```\r\n\r\nTrying to call `values()` on a `TType` hangs indefinitely.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/184", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/184/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/184/events", "html_url": "https://github.com/mahmoud/glom/issues/184", "id": 673814398, "node_id": "MDU6SXNzdWU2NzM4MTQzOTg=", "number": 184, "title": "don't treat classes with glomit() methods as specs -- only instances", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-05T20:06:12Z", "updated_at": "2020-08-11T17:54:48Z", "closed_at": "2020-08-11T17:54:48Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "![image](https://user-images.githubusercontent.com/543934/89458691-48e14380-d71c-11ea-9a32-7d9dea93c4f7.png)\r\n\r\nin `_glom()` ^\r\n\r\nthis would allow Match based meta-glom to refer to spec types directly instead of `lambda t: isinstance(t, SpecType)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/169", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/169/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/169/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/169/events", "html_url": "https://github.com/mahmoud/glom/issues/169", "id": 655304341, "node_id": "MDU6SXNzdWU2NTUzMDQzNDE=", "number": 169, "title": "defining \"paralanguage\"?", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-12T00:29:38Z", "updated_at": "2020-07-19T04:17:09Z", "closed_at": "2020-07-19T04:17:09Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "do we like the term \"paralanguage\" for what glom is?\r\n\r\nshould we try to define it?  should we look for other terms?\r\n\r\nglom is doing some things like a language -- stack traces, variable scopes -- but is still very much a native python library, not merely implemented in python", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/168", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/168/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/168/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/168/events", "html_url": "https://github.com/mahmoud/glom/issues/168", "id": 655261939, "node_id": "MDU6SXNzdWU2NTUyNjE5Mzk=", "number": 168, "title": "`T.__()` dunder helper", "user": {"login": "mahmoud", "id": 130193, "node_id": "MDQ6VXNlcjEzMDE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoud", "html_url": "https://github.com/mahmoud", "followers_url": "https://api.github.com/users/mahmoud/followers", "following_url": "https://api.github.com/users/mahmoud/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoud/subscriptions", "organizations_url": "https://api.github.com/users/mahmoud/orgs", "repos_url": "https://api.github.com/users/mahmoud/repos", "events_url": "https://api.github.com/users/mahmoud/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-11T19:04:13Z", "updated_at": "2020-07-19T06:07:51Z", "closed_at": "2020-07-19T06:07:51Z", "author_association": "OWNER", "active_lock_reason": null, "body": "At the moment `T` reserves all dunders; you can't access a dunder attribute with a `T`. Some of these would probably work to open (e.g., `__dict__`) but others definitely wouldn't (e.g., `__class__`). So, a method called `__` which would help access all dunders.\r\n\r\n`T.__('dict__')` to access `__dict__` and so on. It's not perfect, but it could be worse, and I can't think of anything much better. It's very unlikely to collide with any real attributes at the very least.\r\n\r\nAlso, the error message when a user tries to access a dunder attribute should also be changed to redirect them to use the method.\r\n\r\nPS `T.__()` kinda looks like a [Hugh aka Third of Five](https://en.wikipedia.org/wiki/I,_Borg) smiley/kaomoji.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/165", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/165/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/165/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/165/events", "html_url": "https://github.com/mahmoud/glom/issues/165", "id": 652810915, "node_id": "MDU6SXNzdWU2NTI4MTA5MTU=", "number": 165, "title": "v20.7.0", "user": {"login": "mahmoud", "id": 130193, "node_id": "MDQ6VXNlcjEzMDE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoud", "html_url": "https://github.com/mahmoud", "followers_url": "https://api.github.com/users/mahmoud/followers", "following_url": "https://api.github.com/users/mahmoud/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoud/subscriptions", "organizations_url": "https://api.github.com/users/mahmoud/orgs", "repos_url": "https://api.github.com/users/mahmoud/repos", "events_url": "https://api.github.com/users/mahmoud/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-08T01:27:50Z", "updated_at": "2020-08-01T22:17:35Z", "closed_at": "2020-08-01T22:17:35Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Items to discuss, implement, and/or merge before this month's release:\r\n\r\n- [x] #94 \r\n- [x] #163 / #159 \r\n- [x] ~#157~ (deferred)\r\n- [x] ~#152~ (deferred due to more testing / repr issue)\r\n- [x] #150 (closes #149)\r\n- [x] #140\r\n- [x] #84 (probs just close)\r\n- [x] ~#154~  (deferred until there's a need for a datastructure with booleans built from `M` expressions)\r\n- [x] #146 (this works now, right?)\r\n- [x] #174 `S(a=T.a)` style capture \r\n- [x] recursive bbrepr\r\n- [x] `Literal` becomes `Val` alias\r\n- [x] #171 \r\n- [x] ~lowercase `match()` or `match` kwarg~ (defer until we've used Match() more)\r\n- [x] #170  \r\n\r\nAll of the above are pretty much there. The following are ideas for docs:\r\n\r\n- [x] update the part of the FAQ that talks about schema\r\n- [x] More links to the new exceptions & debugging doc\r\n- [x] Exceptions also explain stack-trace-formatting\r\n- [x] rewrite JSON tree walk snippet to use Switch once merged", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/159", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/159/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/159/events", "html_url": "https://github.com/mahmoud/glom/issues/159", "id": 647651785, "node_id": "MDU6SXNzdWU2NDc2NTE3ODU=", "number": 159, "title": "Switch control flow convenience Spec type", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-06-29T20:38:57Z", "updated_at": "2020-07-08T15:31:14Z", "closed_at": "2020-07-08T15:31:14Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "it tries keys, and returns the value on a non-glom-error-raising key\r\n\r\n```python\r\nSwitch({int: T, str: int})\r\n```\r\n\r\nTo nest, Switch would need to be used twice.\r\n\r\nFor example, absolute value via nested Switch:\r\n\r\n```python\r\nSwitch({\r\n   int: Switch({\r\n      M > 0: T,\r\n      M < 0: -T,\r\n   }),\r\n})\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/158", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/158/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/158/events", "html_url": "https://github.com/mahmoud/glom/issues/158", "id": 647443876, "node_id": "MDU6SXNzdWU2NDc0NDM4NzY=", "number": 158, "title": "bbrepr throughout  Match({<type str>: <type int>}) -> Match({str: int})", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-29T14:53:56Z", "updated_at": "2020-07-08T02:32:51Z", "closed_at": "2020-07-08T02:32:51Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "helper function to recursively traverse specs", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/149", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/149/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/149/events", "html_url": "https://github.com/mahmoud/glom/issues/149", "id": 645952906, "node_id": "MDU6SXNzdWU2NDU5NTI5MDY=", "number": 149, "title": "variable capture into scopes", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2020-06-26T01:56:57Z", "updated_at": "2020-07-08T16:38:47Z", "closed_at": "2020-07-08T16:38:46Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "1. `Let()` can assign `Var()` instead of a specific value, means \"hold this spot for later\"\r\n1. `S.var` before a value is bound raises `GlomError(variable accessed before assignment)` same as python\r\n1. any `Let()` which assigns a concrete value in a child will overwrite\r\n1. `Var(final=True)` if it should have only-once assignment\r\n1. a deeper `Let()` which defines another `Var()` under the same name will override it for child specs, same as normal behavior for variables in the scope (arising very naturally out of implementation)\r\n\r\n```python\r\n(\r\n    Let(last=Var()),\r\n    [Let(last=T)],\r\n    S.last\r\n)\r\n# same as\r\nT[-1]\r\n````\r\n\r\nOpen question -- this means `Let()` from deeper within a spec will \"leak up\"\r\n\r\nAlternative\r\n\r\n* `Let()` can assign a `Vars()` into scope\r\n* `Vars()` can be assigned to via normal means\r\n\r\n```python\r\n(\r\n    Let(vars=Vars()),\r\n    [assign(S.vars.last)],\r\n    S.vars.last\r\n)\r\n```\r\n\r\nthis helps by making the assignment more explicit -- however `.vars` doesn't seem like a very useful semantic object, and if everybody uses the same one, we are back to the same problem of deeper nesting overwriting\r\n\r\nAlternative 2\r\n\r\nexplicit separate `LetVar()` which performs indirect assignment\r\n\r\n```python\r\n(\r\n    Let(last=Var()),\r\n    [LetVar(last=T)],\r\n    S.last\r\n)\r\n```\r\n\r\nThis mitigates most of the overwriting problem -- `LetVar()` is presumably not written without intending a `Let()` above it -- and since `Let()` at different levels while define the same variable will mask each other, `LetVar()` and `Let()` will always pair up correctly\r\n\r\nPut another way -- a correct spec can be nested in another correct spec without worrying about \"crosstalk\" between their variables; the only way cross-talk would happen is if the inner spec was incorrect", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/147", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/147/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/147/events", "html_url": "https://github.com/mahmoud/glom/issues/147", "id": 643856767, "node_id": "MDU6SXNzdWU2NDM4NTY3Njc=", "number": 147, "title": "Extracting items from a list (with a default)", "user": {"login": "salvapinyol", "id": 19796896, "node_id": "MDQ6VXNlcjE5Nzk2ODk2", "avatar_url": "https://avatars0.githubusercontent.com/u/19796896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/salvapinyol", "html_url": "https://github.com/salvapinyol", "followers_url": "https://api.github.com/users/salvapinyol/followers", "following_url": "https://api.github.com/users/salvapinyol/following{/other_user}", "gists_url": "https://api.github.com/users/salvapinyol/gists{/gist_id}", "starred_url": "https://api.github.com/users/salvapinyol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/salvapinyol/subscriptions", "organizations_url": "https://api.github.com/users/salvapinyol/orgs", "repos_url": "https://api.github.com/users/salvapinyol/repos", "events_url": "https://api.github.com/users/salvapinyol/events{/privacy}", "received_events_url": "https://api.github.com/users/salvapinyol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-23T13:47:39Z", "updated_at": "2020-06-30T13:24:32Z", "closed_at": "2020-06-30T13:24:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, pretty new on glom but it looks very promising!\r\nI didn't found any support group or slack so I'm raising this issue here for help.\r\n\r\nwith this target:\r\n\r\ntarget = {\r\n    \"pluto\": {\"moons\": 6, \"population\": None},\r\n    \"venus\": {\"population\": {\"aliens\": 5}},\r\n    \"earth\": {\"moons\": 1, \"population\": {\"humans\": 7700000000, \"aliens\": 1}},\r\n}\r\n\r\nI need to produce this output:\r\n[('pluto',6), ('venus',0), ('earth',1)]\r\n\r\nBeing the int the number of moons of the planet, 0 if moons key doesn't exist.\r\n\r\nThanks!\r\n\r\nSalva.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/146", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/146/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/146/events", "html_url": "https://github.com/mahmoud/glom/issues/146", "id": 642278284, "node_id": "MDU6SXNzdWU2NDIyNzgyODQ=", "number": 146, "title": "S.a instead of S['a']", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-20T00:58:21Z", "updated_at": "2020-07-08T16:46:50Z", "closed_at": "2020-07-08T16:46:50Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "`Let` is turning out to be very useful, figure out some special casing so that `(Let(a=1), S['a'])` can be written as `(Let(a=1), S.a)` for better readability\r\n\r\nOne way to special case this would be to modify `__getattr__` on `TType`, `if t is S: return t[key]`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/141", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/141/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/141/events", "html_url": "https://github.com/mahmoud/glom/issues/141", "id": 625988285, "node_id": "MDU6SXNzdWU2MjU5ODgyODU=", "number": 141, "title": "rename Literal to Echo?", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-27T19:55:37Z", "updated_at": "2020-06-23T16:45:06Z", "closed_at": "2020-06-23T16:45:05Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "`Literal` sounds very langauge-design-ey; `Echo` describes more what the spec does\r\n\r\n```\r\nWherever a Literal object is encountered in a spec, it is\r\n    replaced with its wrapped *value* in the output.\r\n```\r\n\r\nversus if we called it `Echo`\r\n\r\n```\r\nEcho emits the wrapped value as its output.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/139", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/139/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/139/events", "html_url": "https://github.com/mahmoud/glom/issues/139", "id": 603219133, "node_id": "MDU6SXNzdWU2MDMyMTkxMzM=", "number": 139, "title": "Referencing the whole target - How to move data one level down into a into a list dictionaries?", "user": {"login": "mborus", "id": 5249529, "node_id": "MDQ6VXNlcjUyNDk1Mjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5249529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mborus", "html_url": "https://github.com/mborus", "followers_url": "https://api.github.com/users/mborus/followers", "following_url": "https://api.github.com/users/mborus/following{/other_user}", "gists_url": "https://api.github.com/users/mborus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mborus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mborus/subscriptions", "organizations_url": "https://api.github.com/users/mborus/orgs", "repos_url": "https://api.github.com/users/mborus/repos", "events_url": "https://api.github.com/users/mborus/events{/privacy}", "received_events_url": "https://api.github.com/users/mborus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-04-20T12:59:22Z", "updated_at": "2020-04-29T21:23:54Z", "closed_at": "2020-04-21T09:21:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, I have a nested structure with some global values and a list of dictionaries.\r\nI'm trying to move all global key/value pairs this nested list.\r\n\r\n    target = {'date': '2020-04-01',\r\n     'location': 'A',\r\n     'items': [\r\n         {'name': 'A', 'id': 'A1'},\r\n         {'name': 'B', 'id': 'B1'},\r\n         {'name': 'C', 'id': 'C1'}\r\n    ]}\r\n\r\nThe required result it\r\n\r\n    [{'name': 'A',\r\n      'id': 'A1',\r\n      'data': 'location',\r\n      'date': '2020-01-01',\r\n      'location': 'A'},\r\n     {'name': 'B',\r\n      'id': 'B1',\r\n      'data': 'location',\r\n      'date': '2020-01-01',\r\n      'location': 'A'},\r\n     {'name': 'C',\r\n      'id': 'C1',\r\n      'data': 'location',\r\n      'date': '2020-01-01',\r\n      'location': 'A'}]\r\n\r\nI can do list, by adding the target name to the spec\r\n\r\n    spec = ('items', [Assign( 'date', target['date'])], [Assign( 'location', target['location'])])\r\n    glom(target, spec)\r\n\r\nbut that feels like cheating. Is there a way of avoiding the use of the variable _target_ in this spec to get the same result?\r\n\r\n\r\n\r\n    ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/133", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/133/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/133/events", "html_url": "https://github.com/mahmoud/glom/issues/133", "id": 568717815, "node_id": "MDU6SXNzdWU1Njg3MTc4MTU=", "number": 133, "title": "glob/pattern/wildcard support?", "user": {"login": "ickc", "id": 10970208, "node_id": "MDQ6VXNlcjEwOTcwMjA4", "avatar_url": "https://avatars0.githubusercontent.com/u/10970208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ickc", "html_url": "https://github.com/ickc", "followers_url": "https://api.github.com/users/ickc/followers", "following_url": "https://api.github.com/users/ickc/following{/other_user}", "gists_url": "https://api.github.com/users/ickc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ickc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ickc/subscriptions", "organizations_url": "https://api.github.com/users/ickc/orgs", "repos_url": "https://api.github.com/users/ickc/repos", "events_url": "https://api.github.com/users/ickc/events{/privacy}", "received_events_url": "https://api.github.com/users/ickc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-21T03:45:25Z", "updated_at": "2020-05-14T01:01:55Z", "closed_at": "2020-05-14T01:01:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIt seems that currently a wildcard like glob pattern is not supported.\r\n\r\ne.g.\r\n\r\n```py\r\neg = {\r\n    'a': {\r\n        'b': '123',\r\n        'c': '456,\r\n    }\r\n}\r\n\r\n# expecting something like\r\nglom(eg, 'a.*')\r\n>>> ['123', '456']\r\n```\r\n\r\nBasically there's a certain nested level of dict with keys as some yet unknown names and each has some further dict structure. (i.e. spec could be `a.*.c` or something.)\r\n\r\nGiven the current capability in glom, it seems that if the data is in the following format it fits glom better:\r\n\r\n```py\r\n\r\neg = {\r\n    'a': [\r\n        {\r\n            'name': 'b',\r\n            'value: '123',\r\n        },{\r\n            'name': 'c',\r\n            'value: '456',\r\n        }\r\n    ],\r\n}\r\n```\r\n\r\nBut unfortunately I don't have the control of the data.\r\n\r\nWill a feature like this be considered (or if it can already do it with a different syntax)?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/128", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/128/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/128/events", "html_url": "https://github.com/mahmoud/glom/issues/128", "id": 536301649, "node_id": "MDU6SXNzdWU1MzYzMDE2NDk=", "number": 128, "title": "Give value to `__version__` attribute of package", "user": {"login": "pablo-esteban", "id": 4750021, "node_id": "MDQ6VXNlcjQ3NTAwMjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4750021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pablo-esteban", "html_url": "https://github.com/pablo-esteban", "followers_url": "https://api.github.com/users/pablo-esteban/followers", "following_url": "https://api.github.com/users/pablo-esteban/following{/other_user}", "gists_url": "https://api.github.com/users/pablo-esteban/gists{/gist_id}", "starred_url": "https://api.github.com/users/pablo-esteban/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pablo-esteban/subscriptions", "organizations_url": "https://api.github.com/users/pablo-esteban/orgs", "repos_url": "https://api.github.com/users/pablo-esteban/repos", "events_url": "https://api.github.com/users/pablo-esteban/events{/privacy}", "received_events_url": "https://api.github.com/users/pablo-esteban/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-11T11:11:47Z", "updated_at": "2020-08-01T06:28:58Z", "closed_at": "2020-08-01T06:28:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nCurrently, it is not possible to check the version programmatically:\r\n\r\n```\r\n>>> import glom\r\n>>> glom.__version__\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAttributeError: module 'glom' has no attribute '__version__'\r\n```\r\n\r\nTested on glom 19.2.0 and 19.10.0.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/126", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/126/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/126/events", "html_url": "https://github.com/mahmoud/glom/issues/126", "id": 528408784, "node_id": "MDU6SXNzdWU1Mjg0MDg3ODQ=", "number": 126, "title": "GroupBy reducer", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-26T00:06:03Z", "updated_at": "2020-05-27T19:58:33Z", "closed_at": "2020-05-27T19:58:33Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "```python\r\nclass GroupBy(object):\r\n    \"\"\"\r\n    a reducer glomspec that can group things together into a dict\r\n\r\n    given [item] returns {keyspec(item): [valspec(item)]}\r\n    \"\"\"\r\n    def __init__(self, keyspec, valspec=T):\r\n        self.keyspec, self.valspec = keyspec, valspec\r\n\r\n    def glomit(self, target, scope):\r\n        grouped = {}\r\n        recur = scope[glom]\r\n        for item in target:\r\n            key = recur(item, self.keyspec, scope)\r\n            val = recur(item, self.valspec, scope)\r\n            if key not in grouped:\r\n                grouped[key] = []\r\n            grouped[key].append(val)\r\n        return grouped\r\n```\r\n\r\nthis has functionality similar to `boltons.iterutils.bucketize`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/121", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/121/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/121/events", "html_url": "https://github.com/mahmoud/glom/issues/121", "id": 522484742, "node_id": "MDU6SXNzdWU1MjI0ODQ3NDI=", "number": 121, "title": "Even better built-in repr roundtripping", "user": {"login": "mahmoud", "id": 130193, "node_id": "MDQ6VXNlcjEzMDE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoud", "html_url": "https://github.com/mahmoud", "followers_url": "https://api.github.com/users/mahmoud/followers", "following_url": "https://api.github.com/users/mahmoud/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoud/subscriptions", "organizations_url": "https://api.github.com/users/mahmoud/orgs", "repos_url": "https://api.github.com/users/mahmoud/repos", "events_url": "https://api.github.com/users/mahmoud/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-13T21:31:53Z", "updated_at": "2020-07-08T02:33:11Z", "closed_at": "2020-07-08T02:33:11Z", "author_association": "OWNER", "active_lock_reason": null, "body": "As a follow up to #117, I think it makes sense to research combining [reprlib](https://docs.python.org/3/library/reprlib.html) and `bbrepr()` to pierce the veil of *instances* of builtin types, since so many glomspecs are wrapped in dicts and lists and tuples and whatnot. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/111", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/111/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/111/events", "html_url": "https://github.com/mahmoud/glom/issues/111", "id": 511635097, "node_id": "MDU6SXNzdWU1MTE2MzUwOTc=", "number": 111, "title": "v19.10.0", "user": {"login": "mahmoud", "id": 130193, "node_id": "MDQ6VXNlcjEzMDE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoud", "html_url": "https://github.com/mahmoud", "followers_url": "https://api.github.com/users/mahmoud/followers", "following_url": "https://api.github.com/users/mahmoud/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoud/subscriptions", "organizations_url": "https://api.github.com/users/mahmoud/orgs", "repos_url": "https://api.github.com/users/mahmoud/repos", "events_url": "https://api.github.com/users/mahmoud/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-24T00:15:50Z", "updated_at": "2019-10-29T08:01:06Z", "closed_at": "2019-10-29T08:01:06Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Little tracking issue for all the features landing in the next week or so.\r\n\r\n* [x] Iter() (#100)\r\n* [x] Fill mode (#110)\r\n* [x] Capture/Let (#108)\r\n* [x] Invoke (#101)\r\n* [x] Scope stitching (#97)\r\n\r\nWe'll defer Match and traversal to the release after. GlomError operating over the Scope instance, also going to wait til next release.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/105", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/105/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/105/events", "html_url": "https://github.com/mahmoud/glom/issues/105", "id": 506145688, "node_id": "MDU6SXNzdWU1MDYxNDU2ODg=", "number": 105, "title": "How to access data with \"dotted\" key values", "user": {"login": "davidban77", "id": 16437416, "node_id": "MDQ6VXNlcjE2NDM3NDE2", "avatar_url": "https://avatars0.githubusercontent.com/u/16437416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidban77", "html_url": "https://github.com/davidban77", "followers_url": "https://api.github.com/users/davidban77/followers", "following_url": "https://api.github.com/users/davidban77/following{/other_user}", "gists_url": "https://api.github.com/users/davidban77/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidban77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidban77/subscriptions", "organizations_url": "https://api.github.com/users/davidban77/orgs", "repos_url": "https://api.github.com/users/davidban77/repos", "events_url": "https://api.github.com/users/davidban77/events{/privacy}", "received_events_url": "https://api.github.com/users/davidban77/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-12T07:11:05Z", "updated_at": "2019-10-12T20:25:35Z", "closed_at": "2019-10-12T20:25:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, was trying to find some similar issue but couldn't find one, so figured I should just ask :).\r\n\r\nI have a quick question. How can I access data where there are some keys in the dictionary that have \".\" in them. For example:\r\n\r\n```\r\n{'vrf': {'default': {'address_family': {'ipv4': {'routes': {'10.0.1.0/24': {'route': '10.0.1.0/24',\r\n       'active': True,\r\n       'ubest': 1,\r\n       'mbest': 0,\r\n```\r\n\r\nTrying to access data like:\r\n`glom(p2, 'vrf.default.address_family.ipv4.routes.10.0.1.0/24')`\r\n\r\n```python\r\n\r\nPathAccessError: could not access '10', part 5 of Path('vrf', 'default', 'address_family', 'ipv4', 'routes', '10', '0', '1', '0/24'), got error: KeyError('10')\r\n\r\n```\r\n\r\nThought there was some escape characters that could be used, but did not find any reference on it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/104", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/104/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/104/events", "html_url": "https://github.com/mahmoud/glom/issues/104", "id": 502978254, "node_id": "MDU6SXNzdWU1MDI5NzgyNTQ=", "number": 104, "title": "JQ comparison", "user": {"login": "AlexandreGalois", "id": 23434410, "node_id": "MDQ6VXNlcjIzNDM0NDEw", "avatar_url": "https://avatars1.githubusercontent.com/u/23434410?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexandreGalois", "html_url": "https://github.com/AlexandreGalois", "followers_url": "https://api.github.com/users/AlexandreGalois/followers", "following_url": "https://api.github.com/users/AlexandreGalois/following{/other_user}", "gists_url": "https://api.github.com/users/AlexandreGalois/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexandreGalois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexandreGalois/subscriptions", "organizations_url": "https://api.github.com/users/AlexandreGalois/orgs", "repos_url": "https://api.github.com/users/AlexandreGalois/repos", "events_url": "https://api.github.com/users/AlexandreGalois/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexandreGalois/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-05T15:36:39Z", "updated_at": "2019-11-08T03:53:47Z", "closed_at": "2019-11-08T03:53:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "> \"The CLI that glom packs is very similar in function to jq, except it uses Python as its query language, instead of making its own.\"\r\n\r\nI tried to reproduce something from jq in glom but I can't seem to manage. This is my starting structure:\r\n\r\n`{\r\n    \"a\": 1,\r\n    \"b\": [\r\n        {\r\n            \"c\": 1,\r\n            \"d\": 5\r\n        },\r\n        {\r\n            \"c\": 2,\r\n            \"d\": 9\r\n        }\r\n    ]\r\n}`\r\n\r\nAnd this is the desired result:\r\n\r\n`{\r\n  \"a\": 1,\r\n  \"c\": 1,\r\n  \"d\": 5\r\n}\r\n{\r\n  \"a\": 1,\r\n  \"c\": 2,\r\n  \"d\": 9\r\n}\r\n`\r\n\r\nWith jq I would write `{a} + .b[]` ...but I get stuck trying to write it in glom..Not even sure if this is a good use-case for glom. \r\n\r\nAny pointers are greatly appreciated! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/102", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/102/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/102/events", "html_url": "https://github.com/mahmoud/glom/issues/102", "id": 500947048, "node_id": "MDU6SXNzdWU1MDA5NDcwNDg=", "number": 102, "title": "String specification should support list indexes", "user": {"login": "Granitosaurus", "id": 5476164, "node_id": "MDQ6VXNlcjU0NzYxNjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/5476164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Granitosaurus", "html_url": "https://github.com/Granitosaurus", "followers_url": "https://api.github.com/users/Granitosaurus/followers", "following_url": "https://api.github.com/users/Granitosaurus/following{/other_user}", "gists_url": "https://api.github.com/users/Granitosaurus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Granitosaurus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Granitosaurus/subscriptions", "organizations_url": "https://api.github.com/users/Granitosaurus/orgs", "repos_url": "https://api.github.com/users/Granitosaurus/repos", "events_url": "https://api.github.com/users/Granitosaurus/events{/privacy}", "received_events_url": "https://api.github.com/users/Granitosaurus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-01T14:45:36Z", "updated_at": "2019-10-15T06:28:57Z", "closed_at": "2019-10-15T06:28:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now it's a bit awkard to select values from objects that are mixed between lists and dicts.\r\n\r\nLets say we have object of this structure\r\n\r\n    {'cats':\r\n        [\r\n            {'name': 'mustache'},\r\n            {'name': 'whiskey'}\r\n        ]\r\n    }\r\n\r\n\r\nIf we want to get name of the first cat in current `glom` version we'd have to use a tuple specification with `T` object:\r\n\r\n    ('cats', T[0], 'name')\r\n\r\nThis is awfully complex and ugly for such a simple operation. Would be great if this would be supported:\r\n\r\n    cats[0].name\r\n\r\nedit: it's actually supported under:\r\n\r\n    cats.0.name\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/99", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/99/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/99/events", "html_url": "https://github.com/mahmoud/glom/issues/99", "id": 487084463, "node_id": "MDU6SXNzdWU0ODcwODQ0NjM=", "number": 99, "title": "Is there a way to add an element to a list?", "user": {"login": "argenisleon", "id": 37144, "node_id": "MDQ6VXNlcjM3MTQ0", "avatar_url": "https://avatars0.githubusercontent.com/u/37144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/argenisleon", "html_url": "https://github.com/argenisleon", "followers_url": "https://api.github.com/users/argenisleon/followers", "following_url": "https://api.github.com/users/argenisleon/following{/other_user}", "gists_url": "https://api.github.com/users/argenisleon/gists{/gist_id}", "starred_url": "https://api.github.com/users/argenisleon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/argenisleon/subscriptions", "organizations_url": "https://api.github.com/users/argenisleon/orgs", "repos_url": "https://api.github.com/users/argenisleon/repos", "events_url": "https://api.github.com/users/argenisleon/events{/privacy}", "received_events_url": "https://api.github.com/users/argenisleon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-29T17:25:02Z", "updated_at": "2019-08-29T18:23:04Z", "closed_at": "2019-08-29T18:23:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI just want to and element to a list like this. \r\n```\r\na = {\"list\":[1,2,3]}\r\nb = glom(a, \"list\")\r\nb.append(4)\r\nassign(a,\"list\", b)\r\n\r\nOutput:\r\n{'list': [1, 2, 3, 4]}\r\n```\r\n\r\nIs there a shortcut in glom?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/98", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/98/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/98/events", "html_url": "https://github.com/mahmoud/glom/issues/98", "id": 482279448, "node_id": "MDU6SXNzdWU0ODIyNzk0NDg=", "number": 98, "title": "How to set defaults not globally", "user": {"login": "berend", "id": 673681, "node_id": "MDQ6VXNlcjY3MzY4MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/673681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berend", "html_url": "https://github.com/berend", "followers_url": "https://api.github.com/users/berend/followers", "following_url": "https://api.github.com/users/berend/following{/other_user}", "gists_url": "https://api.github.com/users/berend/gists{/gist_id}", "starred_url": "https://api.github.com/users/berend/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berend/subscriptions", "organizations_url": "https://api.github.com/users/berend/orgs", "repos_url": "https://api.github.com/users/berend/repos", "events_url": "https://api.github.com/users/berend/events{/privacy}", "received_events_url": "https://api.github.com/users/berend/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-19T12:20:42Z", "updated_at": "2019-10-17T17:31:19Z", "closed_at": "2019-10-17T17:31:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to use `glom` to transform a dictionary according to a spec. Sometimes there are some objects not set ( = `None`), which I want to default to a value. I found out, how to do this globally with `glom`, but I struggle with \"local\" or specific defaults.\r\n\r\nMy example:\r\n```python\r\ndata = {\r\n    \"item\": {\"id\": 1337},\r\n    \"budget\": {\"amount\": 1234},\r\n    \"cost\": None\r\n}\r\n\r\nspec = {\r\n    \"item_id\": \"item.id\",\r\n    \"budget\": \"budget.amount\",\r\n    \"cost\": \"cost.amount\"\r\n}\r\n\r\nglom(data, spec, default=0)\r\n\r\n```\r\ngives me \r\n```\r\n0\r\n```\r\nBut I want \r\n```\r\n{\r\n    \"item_id\": 1337,\r\n    \"budget\": 1234,\r\n    \"cost\": 0\r\n}\r\n```\r\n\r\nI tried to replace `\"cost.amount\"` from my spec (with `lambda`, nested glom), but failed. Can `glom` do this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/96", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/96/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/96/events", "html_url": "https://github.com/mahmoud/glom/issues/96", "id": 476366483, "node_id": "MDU6SXNzdWU0NzYzNjY0ODM=", "number": 96, "title": "could T.__setitem__ and T.__setattr__ be equivalent to Assign?", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-02T21:43:08Z", "updated_at": "2019-10-24T00:06:54Z", "closed_at": "2019-10-24T00:06:54Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "this would enable a very compact idiom for \"store this value, I'll come back to it later\":\r\n\r\n```python\r\n(S['stored'] = T,\r\n process,\r\nS['stored'])\r\n```\r\n\r\nAlso, it feels very intuitive for `T.a = T.b` to be \"assign a to whatever the value of b is on the current target\" -- reads nicely\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/95", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/95/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/95/events", "html_url": "https://github.com/mahmoud/glom/issues/95", "id": 475245555, "node_id": "MDU6SXNzdWU0NzUyNDU1NTU=", "number": 95, "title": "tuple scopes should nest", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-31T16:35:09Z", "updated_at": "2019-10-29T08:01:30Z", "closed_at": "2019-10-29T08:01:29Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "just messing around, ran into this pattern:\r\n\r\n```python\r\n    ('Rules', ([(\r\n        Assign(S['exp'], glom.Coalesce('Expiration.Days', default=None)),\r\n        'Filter',\r\n        Coalesce(('And.Tags', ['Value']), ('Tag.Value', lambda x: [x])),\r\n        Coalesce((Check(validate=lambda t: lifespan in t), S['exp']), default=SKIP),\r\n        )], T[0])\r\n    )\r\n```\r\n\r\nbasically, using `Assign(S)` would be a handy way to stash something in the scope to be fetched later\r\n\r\nBUT this requires that tuples nest their scopes so that the later sections of the tuple can see earlier ones (this seems to be intuitively correct behavior since tuples correspond to sequential execution and later statements can see the scope created by earlier statements in a sequence)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/93", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/93/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/93/events", "html_url": "https://github.com/mahmoud/glom/issues/93", "id": 461588245, "node_id": "MDU6SXNzdWU0NjE1ODgyNDU=", "number": 93, "title": "How to add a key to a target dict in single spec", "user": {"login": "lukeshao", "id": 3283313, "node_id": "MDQ6VXNlcjMyODMzMTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3283313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukeshao", "html_url": "https://github.com/lukeshao", "followers_url": "https://api.github.com/users/lukeshao/followers", "following_url": "https://api.github.com/users/lukeshao/following{/other_user}", "gists_url": "https://api.github.com/users/lukeshao/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukeshao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukeshao/subscriptions", "organizations_url": "https://api.github.com/users/lukeshao/orgs", "repos_url": "https://api.github.com/users/lukeshao/repos", "events_url": "https://api.github.com/users/lukeshao/events{/privacy}", "received_events_url": "https://api.github.com/users/lukeshao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-27T15:11:50Z", "updated_at": "2019-06-29T09:05:58Z", "closed_at": "2019-06-29T09:05:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I need change some scripts from pyjq to glom. The target is to get the data dict and add the id key to it. \r\n\r\nE.g. input:\r\n```python\r\n{\r\n  'name': 'abc'\r\n  'data': {\r\n    'a': '1',\r\n    'b': '2'\r\n  },\r\n  'id': '123'\r\n}\r\n```\r\nOutput :\r\n```python\r\n{\r\n  'data': {\r\n    'a': '1',\r\n    'b': '2',\r\n    'id': '123'\r\n  }\r\n}\r\n```\r\n\r\nIn pyjq, we can have something like: \"data: (.data + {id: .id})\".  Is it possible to implement it in a single glom spec? Thanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/92", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/92/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/92/events", "html_url": "https://github.com/mahmoud/glom/issues/92", "id": 460108816, "node_id": "MDU6SXNzdWU0NjAxMDg4MTY=", "number": 92, "title": "borrow Pandas / SQLAlchemy syntax for filtration", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-24T21:40:28Z", "updated_at": "2019-11-08T03:55:41Z", "closed_at": "2019-11-08T03:55:41Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "This probably comes as part of a larger feature-set; Pandas and SQLAlchemy override bit-wise operators to express filtration of sequences.\r\n\r\n```\r\n>>> glom(\r\n    [ ('a', 0), ('b', 0), ('a', 11), ('b', 11) ], \r\n    F(T.a == 'a') | F(T.b > 10))\r\n[ ('a', 0), ('a', 11), ('b', 11)]\r\n```\r\n\r\nIn that hypothetical API, `F` stands for `Filter` -- takes a sub-spec, given a iterable target, returns an iterable result where where the sub-spec was \"truthey\"\r\n\r\n```\r\nclass F(object):\r\n    def __init__(self, subspec):\r\n        self.spec = subspec\r\n    def glomit(self, target, scope):\r\n        return [t for t in target if scope['glom'](t, scope)]\r\n\r\n    def __or__(self, other):\r\n        return _F_Or(self, other)\r\n    def __and__(self, other):\r\n        return _F_And(self, other)\r\n\r\nclass _F_Or(object):\r\n    def __init__(self, left, right):\r\n        self.left, self.right = left, right\r\n    def glomit(self, target, scope):\r\n        ## TBD but you can pretty much see the shape here\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/87", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/87/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/87/events", "html_url": "https://github.com/mahmoud/glom/issues/87", "id": 422623995, "node_id": "MDU6SXNzdWU0MjI2MjM5OTU=", "number": 87, "title": "Having a default/fallback for a specific missing path", "user": {"login": "liiight", "id": 4374581, "node_id": "MDQ6VXNlcjQzNzQ1ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/4374581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liiight", "html_url": "https://github.com/liiight", "followers_url": "https://api.github.com/users/liiight/followers", "following_url": "https://api.github.com/users/liiight/following{/other_user}", "gists_url": "https://api.github.com/users/liiight/gists{/gist_id}", "starred_url": "https://api.github.com/users/liiight/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liiight/subscriptions", "organizations_url": "https://api.github.com/users/liiight/orgs", "repos_url": "https://api.github.com/users/liiight/repos", "events_url": "https://api.github.com/users/liiight/events{/privacy}", "received_events_url": "https://api.github.com/users/liiight/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-19T09:28:21Z", "updated_at": "2019-03-21T18:22:22Z", "closed_at": "2019-03-19T09:43:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following data structure:\r\n```python\r\nfrom glom import glom\r\n\r\nbar = [{'foo': 'bar'}, {}, {'foo': 'baz'}]\r\nspec = ['foo']\r\nprint(glom(bar, spec))\r\n```\r\nThis fails with a path error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/orcarmi/PycharmProjects/shield/venv/lib/python3.6/site-packages/glom/core.py\", line 888, in _t_eval\r\n    cur = get(cur, arg)\r\nKeyError: 'foo'\r\nDuring handling of the above exception, another exception occurred:\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/Users/orcarmi/PycharmProjects/shield/venv/lib/python3.6/site-packages/glom/core.py\", line 1448, in glom\r\n    ret = _glom(target, spec, scope)\r\n  File \"/Users/orcarmi/PycharmProjects/shield/venv/lib/python3.6/site-packages/glom/core.py\", line 1468, in _glom\r\n    return _handle_list(target, spec, scope)\r\n  File \"/Users/orcarmi/PycharmProjects/shield/venv/lib/python3.6/site-packages/glom/core.py\", line 1172, in _handle_list\r\n    val = scope[glom](t, subspec, scope.new_child({Path: scope[Path] + [i]}))\r\n  File \"/Users/orcarmi/PycharmProjects/shield/venv/lib/python3.6/site-packages/glom/core.py\", line 1472, in _glom\r\n    return Path.from_text(spec).glomit(target, scope)\r\n  File \"/Users/orcarmi/PycharmProjects/shield/venv/lib/python3.6/site-packages/glom/core.py\", line 306, in glomit\r\n    return _t_eval(target, self.path_t, scope)\r\n  File \"/Users/orcarmi/PycharmProjects/shield/venv/lib/python3.6/site-packages/glom/core.py\", line 890, in _t_eval\r\n    raise PathAccessError(e, Path(_t), i // 2)\r\nglom.core.PathAccessError: could not access 'foo', part 0 of Path('foo'), got error: KeyError('foo',)\r\n```\r\nI'd like to be able to overcome the missing element in the data structure without needing to sanitize the data. \r\n\r\nIs that possible?\r\nusing glom 19.2.0, python 3.6\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/85", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/85/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/85/events", "html_url": "https://github.com/mahmoud/glom/issues/85", "id": 410871478, "node_id": "MDU6SXNzdWU0MTA4NzE0Nzg=", "number": 85, "title": "Is there a way to merge a list of dicts into a single dict?", "user": {"login": "proofit404", "id": 1862725, "node_id": "MDQ6VXNlcjE4NjI3MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1862725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/proofit404", "html_url": "https://github.com/proofit404", "followers_url": "https://api.github.com/users/proofit404/followers", "following_url": "https://api.github.com/users/proofit404/following{/other_user}", "gists_url": "https://api.github.com/users/proofit404/gists{/gist_id}", "starred_url": "https://api.github.com/users/proofit404/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/proofit404/subscriptions", "organizations_url": "https://api.github.com/users/proofit404/orgs", "repos_url": "https://api.github.com/users/proofit404/repos", "events_url": "https://api.github.com/users/proofit404/events{/privacy}", "received_events_url": "https://api.github.com/users/proofit404/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-15T17:31:33Z", "updated_at": "2019-02-19T18:04:02Z", "closed_at": "2019-02-18T04:01:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, thanks for the awesome project!\r\n\r\nIs there a way to convert `[{\"id\": 1, \"name\": \"foo\"}, {\"id\": 2, \"name\": \"bar\"}]` to `{1: \"foo\", 2: \"bar\"}`?\r\n\r\nBest regards, Artem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/77", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/77/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/77/events", "html_url": "https://github.com/mahmoud/glom/issues/77", "id": 400848518, "node_id": "MDU6SXNzdWU0MDA4NDg1MTg=", "number": 77, "title": "Extract tuples from complex objects?", "user": {"login": "antoine-gallix", "id": 7696611, "node_id": "MDQ6VXNlcjc2OTY2MTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7696611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoine-gallix", "html_url": "https://github.com/antoine-gallix", "followers_url": "https://api.github.com/users/antoine-gallix/followers", "following_url": "https://api.github.com/users/antoine-gallix/following{/other_user}", "gists_url": "https://api.github.com/users/antoine-gallix/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoine-gallix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoine-gallix/subscriptions", "organizations_url": "https://api.github.com/users/antoine-gallix/orgs", "repos_url": "https://api.github.com/users/antoine-gallix/repos", "events_url": "https://api.github.com/users/antoine-gallix/events{/privacy}", "received_events_url": "https://api.github.com/users/antoine-gallix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-18T18:58:43Z", "updated_at": "2019-09-16T15:30:18Z", "closed_at": "2019-09-16T15:20:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there a spec that can do the following ?\r\n\r\n```python\r\nd = {'a': 1, 'b': 2}\r\nglom(d, <some_spec_here>)\r\n>> (1,2)\r\n```\r\n\r\nMy intended use case is to extract tuples of selected data from complex items, that could be then used for sorting or grouping. Glom API creates easily dict outputs, but in the case the output needs to be an immutable tuple. It also differs from the nested list example of the tutorial because each element of the tuple is reached through a different path.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/73", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/73/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/73/events", "html_url": "https://github.com/mahmoud/glom/issues/73", "id": 397961602, "node_id": "MDU6SXNzdWUzOTc5NjE2MDI=", "number": 73, "title": "Allow deep apply function", "user": {"login": "antoine-gallix", "id": 7696611, "node_id": "MDQ6VXNlcjc2OTY2MTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7696611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoine-gallix", "html_url": "https://github.com/antoine-gallix", "followers_url": "https://api.github.com/users/antoine-gallix/followers", "following_url": "https://api.github.com/users/antoine-gallix/following{/other_user}", "gists_url": "https://api.github.com/users/antoine-gallix/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoine-gallix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoine-gallix/subscriptions", "organizations_url": "https://api.github.com/users/antoine-gallix/orgs", "repos_url": "https://api.github.com/users/antoine-gallix/repos", "events_url": "https://api.github.com/users/antoine-gallix/events{/privacy}", "received_events_url": "https://api.github.com/users/antoine-gallix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-10T18:38:18Z", "updated_at": "2019-01-11T11:50:06Z", "closed_at": "2019-01-11T11:14:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The Assign is a great enhancement of glom features. But it seems to work only with fixed values, whereas the fetch syntax allows execution of function at a given path. The most simple example would be:\r\n```python\r\nfrom glom import assign,Call,T\r\n\r\no = {'a': 2}\r\n\r\ndef f(x):\r\n    return 2 * x\r\n\r\n# classic python\r\no['a'] = f(o['a'])\r\n# > {'a': 4}\r\n\r\nassign(o, 'a', f) # doesn't work\r\n# > {'a': <function f at 0x7effe21b91e0>}\r\n\r\nassign(o, 'a', Call(f)) # doesn't work\r\n# > Call(<function f at 0x7f65c8c7a1e0>, args=(), kwargs={})\r\n\r\nassign(o, 'a', f(T['a']))\r\n# TypeError: unsupported operand type(s) for *: 'int' and 'TType'\r\n\r\n```\r\nA more realistic use case would be:\r\n\r\n```python\r\nfrom functools import partial\r\nfrom operator import itemgetter\r\n\r\nsort_by_quantity = partial(sorted,key=itemgetter('quantity'))\r\nassign(fat_nested_structure,'long.path.to.a.list.of.dicts',sort_by_quantity)\r\n# expected fat_nested_structure[\"long\"][\"path\"][\"to\"][\"a\"][\"list\"][\"of\"][\"dicts\"] get sorted inplace by 'quantity'\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/72", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/72/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/72/events", "html_url": "https://github.com/mahmoud/glom/issues/72", "id": 395004593, "node_id": "MDU6SXNzdWUzOTUwMDQ1OTM=", "number": 72, "title": "Python 3.7 has slightly changed the repr of KeyError, breaking some tests", "user": {"login": "Twey", "id": 101639, "node_id": "MDQ6VXNlcjEwMTYzOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/101639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Twey", "html_url": "https://github.com/Twey", "followers_url": "https://api.github.com/users/Twey/followers", "following_url": "https://api.github.com/users/Twey/following{/other_user}", "gists_url": "https://api.github.com/users/Twey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Twey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Twey/subscriptions", "organizations_url": "https://api.github.com/users/Twey/orgs", "repos_url": "https://api.github.com/users/Twey/repos", "events_url": "https://api.github.com/users/Twey/events{/privacy}", "received_events_url": "https://api.github.com/users/Twey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-31T16:39:45Z", "updated_at": "2019-01-28T20:39:47Z", "closed_at": "2019-01-20T07:44:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n=================================== FAILURES ===================================\r\n________________________________ test_coalesce _________________________________\r\n\r\n    def test_coalesce():\r\n        val = {'a': {'b': 'c'},  # basic dictionary nesting\r\n               'd': {'e': ['f'],    # list in dictionary\r\n                     'g': 'h'},\r\n               'i': [{'j': 'k', 'l': 'm'}],  # list of dictionaries\r\n               'n': 'o'}\r\n\r\n        assert glom(val, 'a.b') == 'c'\r\n        assert glom(val, Coalesce('xxx', 'yyy', 'a.b')) == 'c'\r\n\r\n        with pytest.raises(CoalesceError) as exc_info:\r\n            glom(val, Coalesce('xxx', 'yyy'))\r\n\r\n        msg = exc_info.exconly()\r\n        assert \"'xxx'\" in msg\r\n        assert \"'yyy'\" in msg\r\n        assert msg.count('PathAccessError') == 2\r\n>       assert \"[PathAccessError(KeyError('xxx',), Path('xxx'), 0), PathAccessError(KeyError('yyy',), Path('yyy'), 0)], [])\" in repr(exc_info.value)\r\nE       assert \"[PathAccessError(KeyError('xxx',), Path('xxx'), 0), PathAccessError(KeyError('yyy',), Path('yyy'), 0)], [])\" in \"CoalesceError(<glom.core.Coalesce object at 0x7ffff236b550>, [PathAccessError(KeyError('xxx'), Path('xxx'), 0), PathAccessError(KeyError('yyy'), Path('yyy'), 0)], [])\"\r\nE        +  where \"CoalesceError(<glom.core.Coalesce object at 0x7ffff236b550>, [PathAccessError(KeyError('xxx'), Path('xxx'), 0), PathAccessError(KeyError('yyy'), Path('yyy'), 0)], [])\" = repr(CoalesceError(<glom.core.Coalesce object at 0x7ffff236b550>, [PathAccessError(KeyError('xxx'), Path('xxx'), 0), PathAccessError(KeyError('yyy'), Path('yyy'), 0)], []))\r\nE        +    where CoalesceError(<glom.core.Coalesce object at 0x7ffff236b550>, [PathAccessError(KeyError('xxx'), Path('xxx'), 0), PathAccessError(KeyError('yyy'), Path('yyy'), 0)], []) = <ExceptionInfo CoalesceError tblen=4>.value\r\n\r\nglom/test/test_basic.py:75: AssertionError\r\n________________________ test_path_access_error_message ________________________\r\n\r\n    def test_path_access_error_message():\r\n\r\n        # test fuzzy access\r\n        with raises(GlomError) as exc_info:\r\n            glom({}, 'a.b')\r\n        assert (\"PathAccessError: could not access 'a', part 0 of Path('a', 'b'), got error: KeyError\"\r\n                in exc_info.exconly())\r\n>       assert repr(exc_info.value) == \"PathAccessError(KeyError('a',), Path('a', 'b'), 0)\"\r\nE       assert \"PathAccessEr...'a', 'b'), 0)\" == \"PathAccessErr...'a', 'b'), 0)\"\r\nE         - PathAccessError(KeyError('a'), Path('a', 'b'), 0)\r\nE         + PathAccessError(KeyError('a',), Path('a', 'b'), 0)\r\nE         ?                             +\r\n\r\nglom/test/test_path_and_t.py:56: AssertionError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/70", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/70/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/70/events", "html_url": "https://github.com/mahmoud/glom/issues/70", "id": 390873263, "node_id": "MDU6SXNzdWUzOTA4NzMyNjM=", "number": 70, "title": "true \"empty\" path (P?)", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-13T21:46:34Z", "updated_at": "2018-12-25T09:41:10Z", "closed_at": "2018-12-25T09:41:10Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "T = target, S = scope\r\nP = path?\r\nP is the 0 of path operations?\r\n\r\n```Path(T, P, P, P, P) == Path(T)```\r\n\r\ncurrently there are a few places we assume T is the \"blank\" path; this paints us into a corner when we want to break a path into chunks as in assign when we break the \"GOTO\" prefix from the \"ASSIGN THIS VALUE\" tail of the path\r\n\r\nmaybe we should have a true \"empty\" path global, and T and S should be like different root directories\r\n\r\nP for Path?\r\n\r\nR for Relative?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/68", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/68/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/68/events", "html_url": "https://github.com/mahmoud/glom/issues/68", "id": 389021194, "node_id": "MDU6SXNzdWUzODkwMjExOTQ=", "number": 68, "title": "Debian jessie installation", "user": {"login": "MetaAbstract", "id": 8529603, "node_id": "MDQ6VXNlcjg1Mjk2MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/8529603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MetaAbstract", "html_url": "https://github.com/MetaAbstract", "followers_url": "https://api.github.com/users/MetaAbstract/followers", "following_url": "https://api.github.com/users/MetaAbstract/following{/other_user}", "gists_url": "https://api.github.com/users/MetaAbstract/gists{/gist_id}", "starred_url": "https://api.github.com/users/MetaAbstract/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MetaAbstract/subscriptions", "organizations_url": "https://api.github.com/users/MetaAbstract/orgs", "repos_url": "https://api.github.com/users/MetaAbstract/repos", "events_url": "https://api.github.com/users/MetaAbstract/events{/privacy}", "received_events_url": "https://api.github.com/users/MetaAbstract/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-09T13:05:15Z", "updated_at": "2018-12-11T06:56:51Z", "closed_at": "2018-12-11T06:56:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I downloaded sources and run \r\nsudo: /configure ERROR configure: error: *** A compiler with support for C++14 language features is required.\r\nCan you help me?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/64", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/64/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/64/events", "html_url": "https://github.com/mahmoud/glom/issues/64", "id": 386402806, "node_id": "MDU6SXNzdWUzODY0MDI4MDY=", "number": 64, "title": "better error message on ('path', 'segment')", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-01T01:03:03Z", "updated_at": "2020-07-08T16:35:50Z", "closed_at": "2020-07-08T16:35:50Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "('path', 'segment') gives a much worse error message than 'path.segment' currently\r\n\r\nmaybe there's a way we can make the error message of the tuple form good", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/63", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/63/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/63/events", "html_url": "https://github.com/mahmoud/glom/issues/63", "id": 385678554, "node_id": "MDU6SXNzdWUzODU2Nzg1NTQ=", "number": 63, "title": "Tests fail: missing YAML file ", "user": {"login": "Twey", "id": 101639, "node_id": "MDQ6VXNlcjEwMTYzOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/101639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Twey", "html_url": "https://github.com/Twey", "followers_url": "https://api.github.com/users/Twey/followers", "following_url": "https://api.github.com/users/Twey/following{/other_user}", "gists_url": "https://api.github.com/users/Twey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Twey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Twey/subscriptions", "organizations_url": "https://api.github.com/users/Twey/orgs", "repos_url": "https://api.github.com/users/Twey/repos", "events_url": "https://api.github.com/users/Twey/events{/privacy}", "received_events_url": "https://api.github.com/users/Twey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-29T10:56:29Z", "updated_at": "2018-12-26T04:38:34Z", "closed_at": "2018-12-26T04:37:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "The YAML test `test_yaml_target` fails due to a missing YAML file (`test_valid.yaml`).  That file doesn't exist in the distribution and it's not clear where it's supposed to come from.\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n_______________________________ test_yaml_target _______________________________\r\n\r\n    def test_yaml_target():\r\n        cwd = os.path.dirname(os.path.abspath(__file__))\r\n        # Handles the filepath if running tox\r\n        if '.tox' in cwd:\r\n            cwd = os.path.join(cwd.split('.tox')[0] + '/glom/test/')\r\n        path = os.path.join(cwd, 'data/test_valid.yaml')\r\n        argv = ['__', '--target-file', path, '--target-format', 'yml', 'Hello']\r\n>       assert main(argv) == 0\r\n\r\nglom/test/test_main.py:23:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nglom/cli.py:83: in main\r\n    return cmd.run(argv) or 0\r\n/nix/store/jpyxgdwhniixch3cqq9g922vrsg8pfkj-python2.7-face-0.1.0/lib/python2.7/site-packages/face/command.py:380: in run\r\n    return inject(wrapped, kwargs)\r\n/nix/store/jpyxgdwhniixch3cqq9g922vrsg8pfkj-python2.7-face-0.1.0/lib/python2.7/site-packages/face/sinter.py:59: in inject\r\n    return f(**kwargs)\r\n<string>:6: in next_\r\n    ???\r\nglom/cli.py:173: in mw_get_target\r\n    _error('could not read target file %r, got: %s' % (target_file, ose))\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nmsg = \"could not read target file '/build/glom-18.3.1/glom/test/data/test_valid.yaml', got: [Errno 2] No such file or directory: '/build/glom-18.3.1/glom/test/data/test_valid.yaml'\"\r\n\r\n    def _error(msg):\r\n        # TODO: build this functionality into face\r\n        print('error:', msg)\r\n>       raise CommandLineError(msg)\r\nE       CommandLineError: could not read target file '/build/glom-18.3.1/glom/test/data/test_valid.yaml', got: [Errno 2] No such file or directory: '/build/glom-18.3.1/glom/test/data/test_valid.yaml'\r\n\r\nglom/cli.py:101: CommandLineError\r\n----------------------------- Captured stdout call -----------------------------\r\nerror: could not read target file '/build/glom-18.3.1/glom/test/data/test_valid.yaml', got: [Errno 2] No such file or directory: '/build/glom-18.3.1/glom/test/data/test_valid.yaml'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/61", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/61/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/61/events", "html_url": "https://github.com/mahmoud/glom/issues/61", "id": 384505016, "node_id": "MDU6SXNzdWUzODQ1MDUwMTY=", "number": 61, "title": "Overload an operator to invoke glom", "user": {"login": "scizzorz", "id": 2607718, "node_id": "MDQ6VXNlcjI2MDc3MTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2607718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scizzorz", "html_url": "https://github.com/scizzorz", "followers_url": "https://api.github.com/users/scizzorz/followers", "following_url": "https://api.github.com/users/scizzorz/following{/other_user}", "gists_url": "https://api.github.com/users/scizzorz/gists{/gist_id}", "starred_url": "https://api.github.com/users/scizzorz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scizzorz/subscriptions", "organizations_url": "https://api.github.com/users/scizzorz/orgs", "repos_url": "https://api.github.com/users/scizzorz/repos", "events_url": "https://api.github.com/users/scizzorz/events{/privacy}", "received_events_url": "https://api.github.com/users/scizzorz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-26T20:51:06Z", "updated_at": "2019-11-14T22:42:02Z", "closed_at": "2019-11-14T22:42:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been using glom a fair amount lately, but one thing that's mildly frustrating is how obvious it is that I'm using it:\r\n\r\n```\r\na = data['owner']['name']['last']\r\nb = glom(data, T['owner']['name']['last'])\r\n```\r\n\r\nPersonally, I think the second assignment is a bit more convoluted and hard to read at  a glance. However, if there was some sort of operator overload on `T`, I think it could be a lot cleaner:\r\n\r\n```\r\nc = data | T['owner']['name']['last']\r\n```\r\n\r\nLooking at the definition of `TType`, it seems like adding an operator overload would be pretty simple. In this case, it would be the `__ror__` operator.\r\n\r\nAnother idea that I think might clean things up a bit is a wrapper that facilitates something like this:\r\n\r\n```\r\nd = G(data)['owner']['name']['last']\r\n```\r\n\r\nBut I'm not sure how you would \"conclude\" the lookup and tell it to evaluate, rather than keep providing a nestable object.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/60", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/60/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/60/events", "html_url": "https://github.com/mahmoud/glom/issues/60", "id": 376955328, "node_id": "MDU6SXNzdWUzNzY5NTUzMjg=", "number": 60, "title": "Assign support S-based paths", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-02T20:22:47Z", "updated_at": "2018-12-25T11:59:46Z", "closed_at": "2018-12-25T11:59:46Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "would be handy if Assign could take S-based paths as well as T-based\r\n\r\n```\r\n>>> glom({}, Assign(T['foo'], 'bar'))\r\n{'foo': 'bar'}\r\n```\r\n\r\nit seems intuitive that Assign(S...) would work the same way:\r\n\r\n```\r\n>>> glom({}, (Assign(S['foo'], 'bar'), S['foo']))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"c:\\users\\kurt\\workspace\\glom\\glom\\mutable.py\", line 100, in __init__\r\n    path = Path(path)\r\n  File \"c:\\users\\kurt\\workspace\\glom\\glom\\core.py\", line 277, in __init__\r\n    % sub_parts[0])\r\nValueError: path segment must be path from T, not T\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/58", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/58/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/58/events", "html_url": "https://github.com/mahmoud/glom/issues/58", "id": 374080422, "node_id": "MDU6SXNzdWUzNzQwODA0MjI=", "number": 58, "title": "more googleable T and S?", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-25T18:44:50Z", "updated_at": "2018-12-13T06:21:50Z", "closed_at": "2018-12-13T06:21:50Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "T and S are really hard to google for -- see Q and F in django queries;\r\n\r\nin the documentation verbiage refer to \"T\" as \"TARGET\" and \"S\" as \"SCOPE\", then in all code samples we can use T and S, and advise users to do so, but if you google for \"what is TARGET glom\" they will get meaningful hits in our docs", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/53", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/53/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/53/events", "html_url": "https://github.com/mahmoud/glom/issues/53", "id": 356323048, "node_id": "MDU6SXNzdWUzNTYzMjMwNDg=", "number": 53, "title": "Correction to Snippet \"Filter Iterable\"", "user": {"login": "SegundoBob", "id": 1161057, "node_id": "MDQ6VXNlcjExNjEwNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1161057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SegundoBob", "html_url": "https://github.com/SegundoBob", "followers_url": "https://api.github.com/users/SegundoBob/followers", "following_url": "https://api.github.com/users/SegundoBob/following{/other_user}", "gists_url": "https://api.github.com/users/SegundoBob/gists{/gist_id}", "starred_url": "https://api.github.com/users/SegundoBob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SegundoBob/subscriptions", "organizations_url": "https://api.github.com/users/SegundoBob/orgs", "repos_url": "https://api.github.com/users/SegundoBob/repos", "events_url": "https://api.github.com/users/SegundoBob/events{/privacy}", "received_events_url": "https://api.github.com/users/SegundoBob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-02T23:37:22Z", "updated_at": "2018-09-27T16:45:53Z", "closed_at": "2018-09-27T16:34:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "The snippet [Filter Iterable](https://glom.readthedocs.io/en/latest/snippets.html#filter-iterable)\r\n```\r\nglom(['cat', 1, 'dog', 2], Check(types=str, default=OMIT))\r\n```\r\nGives me results:\r\n```\r\nSentinel('OMIT')\r\n```\r\nAdding a pair of brackets gives me the expected result.\r\n```\r\nglom(['cat', 1, 'dog', 2], [Check(types=str, default=OMIT)])\r\n```\r\nResult:\r\n```\r\n['cat', 'dog']\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/48", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/48/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/48/events", "html_url": "https://github.com/mahmoud/glom/issues/48", "id": 348499956, "node_id": "MDU6SXNzdWUzNDg0OTk5NTY=", "number": 48, "title": "KeyError in _t_child from weakref", "user": {"login": "tdsmith", "id": 173889, "node_id": "MDQ6VXNlcjE3Mzg4OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/173889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tdsmith", "html_url": "https://github.com/tdsmith", "followers_url": "https://api.github.com/users/tdsmith/followers", "following_url": "https://api.github.com/users/tdsmith/following{/other_user}", "gists_url": "https://api.github.com/users/tdsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/tdsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tdsmith/subscriptions", "organizations_url": "https://api.github.com/users/tdsmith/orgs", "repos_url": "https://api.github.com/users/tdsmith/repos", "events_url": "https://api.github.com/users/tdsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/tdsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-07T21:49:32Z", "updated_at": "2018-08-15T15:00:50Z", "closed_at": "2018-08-08T05:37:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running into a weird issue using glom in PySpark on Databricks.\r\n\r\nThis expression:\r\n\r\n`glom(ping, (T[stub][\"values\"].values(), sum), default=0)`\r\n\r\n(where `stub` is `\"a11y_time\"`)\r\n\r\nis consistently throwing this exception when I run it on my real data:\r\n\r\n```\r\n/databricks/spark/python/lib/py4j-0.10.6-src.zip/py4j/protocol.py in get_return_value(answer, gateway_client, target_id, name)\r\n     318 raise Py4JJavaError(\r\n     319 \"An error occurred while calling {0}{1}{2}.\\n\". \r\n --> 320                     format(target_id, \".\", name), value)\r\n     321 else:\r\n     322 raise Py4JError( Py4JJavaError: An error occurred while calling z:org.apache.spark.api.python.PythonRDD.runJob. : org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 22.0 failed 4 times, most recent failure: Lost task 0.3 in stage 22.0 (TID 243, 10.166.248.213, executor 2): org.apache.spark.api.python.PythonException: \r\n\r\nTraceback (most recent call last):\r\nFile \"/databricks/spark/python/pyspark/worker.py\", line 229, in main process()\r\nFile \"/databricks/spark/python/pyspark/worker.py\", line 224, in process serializer.dump_stream(func(split_index, iterator), outfile)\r\nFile \"/databricks/spark/python/pyspark/serializers.py\", line 372, in dump_stream vs = list(itertools.islice(iterator, batch))\r\nFile \"/databricks/spark/python/pyspark/rdd.py\", line 1354, in takeUpToNumLeft yield next(iterator) \r\nFile \"<command-26292>\", line 10, in to_row\r\nFile \"<command-26292>\", line 5, in histogram_measures\r\nFile \"/databricks/python/local/lib/python2.7/site-packages/glom/core.py\", line 753, in __getitem__ return _t_child(self, '[', item)\r\nFile \"/databricks/python/local/lib/python2.7/site-packages/glom/core.py\", line 791, in _t_child _T_PATHS[t] = _T_PATHS[parent] + (operation, arg)\r\nFile \"/usr/lib/python2.7/weakref.py\", line 330, in __getitem__ return self.data[ref(key)]\r\nKeyError: <weakref at 0x7f84c7d2f6d8; to '_TType' at 0x7f84c8933f30>\r\n```\r\n\r\nThe object that's crashing it is, itself, totally unremarkable:\r\n\r\n`{'submission_date': u'20180718', 'a11y_count': None, 'a11y_node_inspected_count': None, 'a11y_service_time': None, 'toolbox_time': None, 'toolbox_count': None, 'a11y_time': None, 'branch': u'Treatment', 'client_id': u'some-random-uuid', 'a11y_picker_time': None, 'a11y_select_accessible_for_node': None} `\r\n\r\nThe Python that Databricks is running looks like `2.7.12 (default, Dec 4 2017, 14:50:18) [GCC 5.4.0 20160609]`.\r\n\r\nI can't reproduce it on my Mac in 2.7.14 or 2.7.12.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/46", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/46/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/46/events", "html_url": "https://github.com/mahmoud/glom/issues/46", "id": 345167363, "node_id": "MDU6SXNzdWUzNDUxNjczNjM=", "number": 46, "title": "Help debugging a PathAccessError", "user": {"login": "xiaosimao", "id": 13148274, "node_id": "MDQ6VXNlcjEzMTQ4Mjc0", "avatar_url": "https://avatars0.githubusercontent.com/u/13148274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaosimao", "html_url": "https://github.com/xiaosimao", "followers_url": "https://api.github.com/users/xiaosimao/followers", "following_url": "https://api.github.com/users/xiaosimao/following{/other_user}", "gists_url": "https://api.github.com/users/xiaosimao/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaosimao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaosimao/subscriptions", "organizations_url": "https://api.github.com/users/xiaosimao/orgs", "repos_url": "https://api.github.com/users/xiaosimao/repos", "events_url": "https://api.github.com/users/xiaosimao/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaosimao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-27T10:03:43Z", "updated_at": "2018-07-31T17:00:35Z", "closed_at": "2018-07-31T17:00:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "@mahmoud @kurtbrose Hi, guys,there is a question i can not understand,please help me.\r\n\r\n```python\r\nfrom glom import glom\r\ntarget = {'system': {'planets': [{'name': 'earth'}, {'name': 'jupiter'}, {'name2': 'jupiters'}]}}\r\n\r\nprint glom(target, ('system.planets', ['name']))\r\n```\r\n\r\nWhy this occur PathAccessError?  \r\n\r\nDoes this  mean the dict which key is  name2 can not be in the list? \r\n\r\nAnd how can i get data like this {'plants':['earth', 'jupiter', 'jupiters']} in a pythonic way use glom?\r\n\r\nthank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/38", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/38/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/38/events", "html_url": "https://github.com/mahmoud/glom/issues/38", "id": 335967334, "node_id": "MDU6SXNzdWUzMzU5NjczMzQ=", "number": 38, "title": "glom equivalent for assignment to nested data structures?", "user": {"login": "borenstein", "id": 4448415, "node_id": "MDQ6VXNlcjQ0NDg0MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/4448415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/borenstein", "html_url": "https://github.com/borenstein", "followers_url": "https://api.github.com/users/borenstein/followers", "following_url": "https://api.github.com/users/borenstein/following{/other_user}", "gists_url": "https://api.github.com/users/borenstein/gists{/gist_id}", "starred_url": "https://api.github.com/users/borenstein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/borenstein/subscriptions", "organizations_url": "https://api.github.com/users/borenstein/orgs", "repos_url": "https://api.github.com/users/borenstein/repos", "events_url": "https://api.github.com/users/borenstein/events{/privacy}", "received_events_url": "https://api.github.com/users/borenstein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-26T19:54:07Z", "updated_at": "2018-08-23T16:35:46Z", "closed_at": "2018-08-23T16:35:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "First of all, this is a wonderful package, and basically ideal for my [core use case](https://medium.com/@open990/the-irs-990-e-file-dataset-getting-to-the-chocolatey-center-of-data-deliciousness-90f66097a600). \r\n\r\nWhen writing tests for glommy kinds of stuff, I sometimes have to go the other way: assigning something to some deeply nested data structure:\r\n\r\n    my_obj[\"a\"][\"b\"][\"c\"][\"d\"] = True\r\n\r\nRight now, all my ways of handling this are kind of cloodgy. But it seems like there could be an inverse glom that could do something like this:\r\n\r\n    iglom(my_obj, \"a.b.c.d\", True)\r\n\r\nRealistic? Is there something that already does this? I bet there's something that already does this and I missed the memo.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/35", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/35/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/35/events", "html_url": "https://github.com/mahmoud/glom/issues/35", "id": 328607456, "node_id": "MDU6SXNzdWUzMjg2MDc0NTY=", "number": 35, "title": "XML Example", "user": {"login": "roryhr", "id": 14201126, "node_id": "MDQ6VXNlcjE0MjAxMTI2", "avatar_url": "https://avatars1.githubusercontent.com/u/14201126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roryhr", "html_url": "https://github.com/roryhr", "followers_url": "https://api.github.com/users/roryhr/followers", "following_url": "https://api.github.com/users/roryhr/following{/other_user}", "gists_url": "https://api.github.com/users/roryhr/gists{/gist_id}", "starred_url": "https://api.github.com/users/roryhr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roryhr/subscriptions", "organizations_url": "https://api.github.com/users/roryhr/orgs", "repos_url": "https://api.github.com/users/roryhr/repos", "events_url": "https://api.github.com/users/roryhr/events{/privacy}", "received_events_url": "https://api.github.com/users/roryhr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-06-01T17:52:52Z", "updated_at": "2018-06-21T08:31:52Z", "closed_at": "2018-06-21T08:31:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nannoying_xml = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">\r\n  <Placemark>\r\n    <name>Simple placemark</name>\r\n    <description>Attached to the ground. Intelligently places itself \r\n       at the height of the underlying terrain.</description>\r\n    <Point>\r\n      <coordinates>-122.0822035425683,37.42228990140251,0</coordinates>\r\n    </Point>\r\n  </Placemark>\r\n</kml>\r\n\"\"\"\r\n\r\n# Does this work?\r\nimport glom\r\nglom.glom(target=annoying_xml, spec='Placemark.Point.coordinates')\r\n\r\n# What about this?\r\nimport xml.etree.ElementTree as ET\r\ntree = ET.fromstring(annoying_xml)\r\nglom.glom(target=tree, spec='Placemark.Point.coordinates')\r\n\r\n# I'm trying to get this\r\nprint(tree[0][2][0].text)\r\n# -122.0822035425683,37.42228990140251,0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/34", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/34/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/34/events", "html_url": "https://github.com/mahmoud/glom/issues/34", "id": 328181032, "node_id": "MDU6SXNzdWUzMjgxODEwMzI=", "number": 34, "title": "python-full isn't an accepted spec format", "user": {"login": "catlee", "id": 54458, "node_id": "MDQ6VXNlcjU0NDU4", "avatar_url": "https://avatars2.githubusercontent.com/u/54458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catlee", "html_url": "https://github.com/catlee", "followers_url": "https://api.github.com/users/catlee/followers", "following_url": "https://api.github.com/users/catlee/following{/other_user}", "gists_url": "https://api.github.com/users/catlee/gists{/gist_id}", "starred_url": "https://api.github.com/users/catlee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catlee/subscriptions", "organizations_url": "https://api.github.com/users/catlee/orgs", "repos_url": "https://api.github.com/users/catlee/repos", "events_url": "https://api.github.com/users/catlee/events{/privacy}", "received_events_url": "https://api.github.com/users/catlee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-31T15:14:19Z", "updated_at": "2019-03-09T06:44:51Z", "closed_at": "2019-03-09T06:44:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "The CLI help specifies that 'python-full' is an acceptable option for the spec format, but if you try and use it, you get an error: `expected spec-format to be one of python or json`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/29", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/29/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/29/events", "html_url": "https://github.com/mahmoud/glom/issues/29", "id": 326458190, "node_id": "MDU6SXNzdWUzMjY0NTgxOTA=", "number": 29, "title": "suggestion: curried form?", "user": {"login": "jondot", "id": 83390, "node_id": "MDQ6VXNlcjgzMzkw", "avatar_url": "https://avatars0.githubusercontent.com/u/83390?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jondot", "html_url": "https://github.com/jondot", "followers_url": "https://api.github.com/users/jondot/followers", "following_url": "https://api.github.com/users/jondot/following{/other_user}", "gists_url": "https://api.github.com/users/jondot/gists{/gist_id}", "starred_url": "https://api.github.com/users/jondot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jondot/subscriptions", "organizations_url": "https://api.github.com/users/jondot/orgs", "repos_url": "https://api.github.com/users/jondot/repos", "events_url": "https://api.github.com/users/jondot/events{/privacy}", "received_events_url": "https://api.github.com/users/jondot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-25T09:58:05Z", "updated_at": "2018-06-01T02:56:11Z", "closed_at": "2018-06-01T02:56:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Look at this beauty \u2764\ufe0f\r\n\r\n```python\r\nfrom toolz import curry\r\nfrom toolz.curried import pipe, map\r\nfrom glom import glom\r\n\r\ncallsigns = [{'callsign':'goose'}, {'callsign':'maverick'}]\r\n\r\n@curry\r\ndef glom_curried(spec, v):\r\n  return glom(v, spec)\r\n\r\n\r\n\r\n# --- userland code ---\r\n\r\nconvert_callsigns = glom_curried({'name':'callsign'})\r\n\r\nprint(pipe(callsigns,\r\n           map(convert_callsigns),\r\n           list))\r\n```\r\n\r\nperhaps this can be a nice API:\r\n\r\n```python\r\nfrom glom.curried import glom\r\nconvert_callsigns = glom({'name':'callsign'})\r\n\r\nprint(pipe(callsigns,\r\n           map(convert_callsigns),\r\n           list))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/27", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/27/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/27/events", "html_url": "https://github.com/mahmoud/glom/issues/27", "id": 325758946, "node_id": "MDU6SXNzdWUzMjU3NTg5NDY=", "number": 27, "title": "accessing item from list within a list ", "user": {"login": "wdieter", "id": 10604076, "node_id": "MDQ6VXNlcjEwNjA0MDc2", "avatar_url": "https://avatars2.githubusercontent.com/u/10604076?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdieter", "html_url": "https://github.com/wdieter", "followers_url": "https://api.github.com/users/wdieter/followers", "following_url": "https://api.github.com/users/wdieter/following{/other_user}", "gists_url": "https://api.github.com/users/wdieter/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdieter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdieter/subscriptions", "organizations_url": "https://api.github.com/users/wdieter/orgs", "repos_url": "https://api.github.com/users/wdieter/repos", "events_url": "https://api.github.com/users/wdieter/events{/privacy}", "received_events_url": "https://api.github.com/users/wdieter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-05-23T15:27:36Z", "updated_at": "2018-06-01T02:53:37Z", "closed_at": "2018-06-01T02:53:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure if an issue but was hoping to get some insight as to how you might specify this spec. \r\nI have a dictionary that looks like this: \r\n  \r\n    data = {\"data\": [{'name': 'bob',\r\n                      'custom': {\r\n                          'hobbies': [{\r\n                            'swimming': True\r\n                          }]\r\n                        }\r\n                      },\r\n                     {'name': 'joey',\r\n                      'custom': {\r\n                          'hobbies': [{\r\n                            'swimming': False\r\n                          }]\r\n                        }\r\n                      }]\r\n            }\r\nand I want to get a dictionary that looks like: \r\n`{'names': ['bob', 'joey'], 'swims': [True, False]}`\r\nthe closest I'm able to get is by using this spec:  \r\n`spec = {\"names\": (\"data\", [\"name\"]),\r\n    \"swims\": (\"data\", [\"custom\"], [\"hobbies\"], [['swimming']])}`\r\nbut the 'swims' attribute comes back as `[[True], [False]]`\r\nIs there a way to get those attributes out of those inner lists by adjusting the spec? It seems trivial but actually nested lists multiple levels deep seems pretty common in json.\r\nBTW glom is super handy! \r\nThanks, W\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/20", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/20/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/20/events", "html_url": "https://github.com/mahmoud/glom/issues/20", "id": 324512893, "node_id": "MDU6SXNzdWUzMjQ1MTI4OTM=", "number": 20, "title": "Beginner question for docs: Can \"T\" do filters and/or grouping? ", "user": {"login": "mborus", "id": 5249529, "node_id": "MDQ6VXNlcjUyNDk1Mjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5249529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mborus", "html_url": "https://github.com/mborus", "followers_url": "https://api.github.com/users/mborus/followers", "following_url": "https://api.github.com/users/mborus/following{/other_user}", "gists_url": "https://api.github.com/users/mborus/gists{/gist_id}", "starred_url": "https://api.github.com/users/mborus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mborus/subscriptions", "organizations_url": "https://api.github.com/users/mborus/orgs", "repos_url": "https://api.github.com/users/mborus/repos", "events_url": "https://api.github.com/users/mborus/events{/privacy}", "received_events_url": "https://api.github.com/users/mborus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-18T18:40:50Z", "updated_at": "2018-05-19T18:08:48Z", "closed_at": "2018-05-18T20:33:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nsorry if this is too obvious, but from the tutorial I can't understand if glom supports grouping or if this is not something it's intended to do.\r\n\r\nIf you extend the planets example to include a category and sum up the moons by that category?\r\n\r\n    from glom import glom, T\r\n    target = {'system': {'planets': [{'name': 'earth', 'category':1, 'moons': 1},\r\n        {'name': 'pluto', 'category':1, 'moons': 5},\r\n        {'name': 'uranus', 'category':2, 'moons': 5},\r\n        {'name': 'jupiter', 'category':2, 'moons': 69}]}}\r\n\r\n    spec = T['system']['planets']\r\n\r\nif I wanted to sum up the moons by category, I could run\r\n\r\n    [\r\n        sum([p['moons'] for p in glom(target, spec) if p['category'] == 1]),\r\n        sum([p['moons'] for p in glom(target, spec) if p['category'] == 2])\r\n    ]\r\n\r\nBut is there a way of adding filtering (for example sum only category 2) or grouping directly to the spec?\r\n\r\nOf is this outside the scope of glom?\r\n\r\n##UPDATE##\r\n\r\n    A spec without the T notation works for filtering:\r\n\r\n    from glom import OMIT\r\n    spec = ('system.planets', [lambda x : x['moons'] if x['category'] == 2 else OMIT], sum)\r\n\r\n    As the T-notation is not fixed yet, I'm closing the issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/19", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/19/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/19/events", "html_url": "https://github.com/mahmoud/glom/issues/19", "id": 323657570, "node_id": "MDU6SXNzdWUzMjM2NTc1NzA=", "number": 19, "title": "Coalesce + T usage", "user": {"login": "tshelburne", "id": 1202267, "node_id": "MDQ6VXNlcjEyMDIyNjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1202267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshelburne", "html_url": "https://github.com/tshelburne", "followers_url": "https://api.github.com/users/tshelburne/followers", "following_url": "https://api.github.com/users/tshelburne/following{/other_user}", "gists_url": "https://api.github.com/users/tshelburne/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshelburne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshelburne/subscriptions", "organizations_url": "https://api.github.com/users/tshelburne/orgs", "repos_url": "https://api.github.com/users/tshelburne/repos", "events_url": "https://api.github.com/users/tshelburne/events{/privacy}", "received_events_url": "https://api.github.com/users/tshelburne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-16T14:53:23Z", "updated_at": "2018-07-15T04:11:55Z", "closed_at": "2018-07-15T04:11:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm mapping a large dictionary to a smaller (but still with many properties) one using glom, and ran into a strange issue. I'm using `Coalesce` to easily enable a default for every property in the mapped values, and `T` to ease legibility of my code. I'm not sure if I'm missing something here and using it incorrectly, or if this is a difference which shouldn't happen. It basically looks like in the context of `Coalesce`, `T` works differently than a simple string path.\r\n\r\nSimplified version:\r\n\r\n```python\r\nfrom glom import glom, T, Coalesce\r\n\r\ncomplete_data = {\r\n    'object': {\r\n        'prop1': 1,\r\n        'prop2': {\r\n            'nested': 2,\r\n        },\r\n    },\r\n}\r\n\r\nlimited_data = {\r\n    'object': {\r\n        'prop1': 1,\r\n        'prop2': None,\r\n    },\r\n}\r\n\r\ndef full_coalesce(obj_spec):\r\n    return {k: Coalesce(v, default=None) for k, v in obj_spec.items()}\r\n\r\nobj = T['object']\r\n\r\nworking_spec = full_coalesce({\r\n    'prop1': obj['prop1'],\r\n    'nested': 'object.prop2.nested',  \r\n})\r\n\r\nbroken_spec = full_coalesce({\r\n    'prop1': obj['prop1'],\r\n    'nested': obj['prop2']['nested'],\r\n})\r\n\r\nprint glom(complete_data, working_spec)\r\nprint glom(limited_data, working_spec)\r\nprint glom(complete_data, broken_spec)\r\nprint glom(limited_data, broken_spec)\r\n```\r\n\r\nThe output:\r\n\r\n```shell\r\n{'prop1': 1, 'nested': 2}\r\n{'prop1': 1, 'nested': None}\r\n{'prop1': 1, 'nested': 2}\r\nTraceback (most recent call last):\r\n  File \"testing-glom.py\", line 41, in <module>\r\n    print glom(limited_data, broken_spec)\r\n  File \"./venv/lib/python2.7/site-packages/glom/core.py\", line 919, in glom\r\n    ret = self._glom(target, spec, path=path, inspector=inspector)\r\n  File \"./venv/lib/python2.7/site-packages/glom/core.py\", line 949, in _glom\r\n    val = self._glom(target, subspec, path=path, inspector=next_inspector)\r\n  File \"./venv/lib/python2.7/site-packages/glom/core.py\", line 994, in _glom\r\n    ret = self._glom(target, subspec, path=path, inspector=next_inspector)\r\n  File \"./venv/lib/python2.7/site-packages/glom/core.py\", line 978, in _glom\r\n    ret = _t_eval(spec, target, path, inspector, self._glom)\r\n  File \"./venv/lib/python2.7/site-packages/glom/core.py\", line 678, in _t_eval\r\n    cur = cur[arg]\r\nTypeError: 'NoneType' object has no attribute '__getitem__'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/17", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/17/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/17/events", "html_url": "https://github.com/mahmoud/glom/issues/17", "id": 322558610, "node_id": "MDU6SXNzdWUzMjI1NTg2MTA=", "number": 17, "title": "set literal spec to build set result from iterable", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-13T02:36:28Z", "updated_at": "2018-06-01T03:00:46Z", "closed_at": "2018-06-01T03:00:46Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "`{T}` could work exactly like `[T]` but build up a set rather than a list", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/14", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/14/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/14/events", "html_url": "https://github.com/mahmoud/glom/issues/14", "id": 321723750, "node_id": "MDU6SXNzdWUzMjE3MjM3NTA=", "number": 14, "title": "runnable spec / equivalent of re.compile for glom-specs", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-09T20:56:36Z", "updated_at": "2018-07-05T03:07:36Z", "closed_at": "2018-07-05T02:37:12Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Might be nice to have the equivalent of `re.compile()` or a runnable spec object.\r\n\r\nE.g.\r\n\r\n```\r\ns = Spec({ glom-spec })\r\nresult = s.glom(target)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/13", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/13/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/13/events", "html_url": "https://github.com/mahmoud/glom/issues/13", "id": 321717649, "node_id": "MDU6SXNzdWUzMjE3MTc2NDk=", "number": 13, "title": "deeply nested setting", "user": {"login": "willkg", "id": 820826, "node_id": "MDQ6VXNlcjgyMDgyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/820826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willkg", "html_url": "https://github.com/willkg", "followers_url": "https://api.github.com/users/willkg/followers", "following_url": "https://api.github.com/users/willkg/following{/other_user}", "gists_url": "https://api.github.com/users/willkg/gists{/gist_id}", "starred_url": "https://api.github.com/users/willkg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willkg/subscriptions", "organizations_url": "https://api.github.com/users/willkg/orgs", "repos_url": "https://api.github.com/users/willkg/repos", "events_url": "https://api.github.com/users/willkg/events{/privacy}", "received_events_url": "https://api.github.com/users/willkg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2018-05-09T20:37:49Z", "updated_at": "2018-12-13T21:30:44Z", "closed_at": "2018-12-13T21:30:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I work on a project that flings around deeply nested Python structures with wild abandon. glom nicely handles the \"get something from this structure even if all the branches of the path aren't there\" and now I can replace some code I wrote. Yay!\r\n\r\nThe other side of things that I need to handle is setting a value in a deeply nested structure where the branches of the path may not be there.\r\n\r\nFor example, maybe something like this which uses dicts:\r\n\r\n```\r\n>>> from glom import glom_set\r\n>>> foo = {}\r\n>>> glom_set(foo, 'a.b.c', value=5)\r\n>>> foo\r\n{'a': {'b': {'c': 5}}}\r\n```\r\n\r\nThere are more complex tree manipulations that could be done, but at the moment I'm thinking about setting a single leaf value.\r\n\r\nIs manipulating deeply nested data structures in place in-scope for glom?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/9", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/9/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/9/events", "html_url": "https://github.com/mahmoud/glom/issues/9", "id": 321613357, "node_id": "MDU6SXNzdWUzMjE2MTMzNTc=", "number": 9, "title": "Extension API", "user": {"login": "mahmoud", "id": 130193, "node_id": "MDQ6VXNlcjEzMDE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoud", "html_url": "https://github.com/mahmoud", "followers_url": "https://api.github.com/users/mahmoud/followers", "following_url": "https://api.github.com/users/mahmoud/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoud/subscriptions", "organizations_url": "https://api.github.com/users/mahmoud/orgs", "repos_url": "https://api.github.com/users/mahmoud/repos", "events_url": "https://api.github.com/users/mahmoud/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-09T15:16:55Z", "updated_at": "2018-07-05T00:21:37Z", "closed_at": "2018-07-05T00:21:37Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Right now glom is only extensible in the sense that you can [register new types](http://glom.readthedocs.io/en/latest/api.html#setup-and-registration) for automatic handling, etc.\r\n\r\nBut internally there's an emerging signature of what plugins to glom's recursion could look like. I think after #7 adds validation we could look at turning that API into a `GlomContext` object and exposing this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/7", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/7/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/7/events", "html_url": "https://github.com/mahmoud/glom/issues/7", "id": 321609653, "node_id": "MDU6SXNzdWUzMjE2MDk2NTM=", "number": 7, "title": "Check() and validate", "user": {"login": "mahmoud", "id": 130193, "node_id": "MDQ6VXNlcjEzMDE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoud", "html_url": "https://github.com/mahmoud", "followers_url": "https://api.github.com/users/mahmoud/followers", "following_url": "https://api.github.com/users/mahmoud/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoud/subscriptions", "organizations_url": "https://api.github.com/users/mahmoud/orgs", "repos_url": "https://api.github.com/users/mahmoud/repos", "events_url": "https://api.github.com/users/mahmoud/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-09T15:07:18Z", "updated_at": "2018-07-05T00:35:41Z", "closed_at": "2018-07-05T00:35:41Z", "author_association": "OWNER", "active_lock_reason": null, "body": "While this wasn't on my mind when I first started out, it's been pointed out to me that `glom` may also benefit from a validation story.\r\n\r\nSome preliminary design work suggests the following would work well:\r\n\r\n* Create a `Check()` specifier type\r\n* Support `type=...`, `value=...`, and maybe other kwargs.\r\n* Add an `action` kwarg to determine what to do if the `Check` fails the condition ('omit', 'raise', other?)\r\n* Explore having the spec work like `Inspect`, where it can wrap a spec or appear on it's own (probably after the spec it's supposed to check)\r\n* Extend the recursion API to pass through a validation context of some sort so that multiple errors can be registered, instead of just raising immediately (maybe a top-level glom() kwarg controlling this)\r\n\r\nThis is great for an `assert`-like functionality here and there, but for heavily Checked specs, we may want to have a convenience construct of some sort.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/6", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/6/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/6/events", "html_url": "https://github.com/mahmoud/glom/issues/6", "id": 321607031, "node_id": "MDU6SXNzdWUzMjE2MDcwMzE=", "number": 6, "title": "Rationalize T and Path differences", "user": {"login": "mahmoud", "id": 130193, "node_id": "MDQ6VXNlcjEzMDE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoud", "html_url": "https://github.com/mahmoud", "followers_url": "https://api.github.com/users/mahmoud/followers", "following_url": "https://api.github.com/users/mahmoud/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoud/subscriptions", "organizations_url": "https://api.github.com/users/mahmoud/orgs", "repos_url": "https://api.github.com/users/mahmoud/repos", "events_url": "https://api.github.com/users/mahmoud/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-09T15:00:58Z", "updated_at": "2018-07-05T00:37:44Z", "closed_at": "2018-07-05T00:37:44Z", "author_association": "OWNER", "active_lock_reason": null, "body": "At first, T and Path seem like they have a lot of overlap. But T is for very specific access, and Path() is for more looser, more general access. It doesn't look like either is going away, or merging into the other and that's good because that means this is all we need to do:\r\n\r\n* Allow `T` objects inside of `Path`, such that `Path(T)` gives the same result as `Path()` (See note below)\r\n* Make `_get_path` support resolving Ts\r\n* Eliminate `GlomKeyError` and so forth, opting instead for the PathAccessError throughout. \r\n\r\nThe one disadvantage is that users won't be able to use `T` as keys in their own dict targets, but that seems a very very niche case. The one challenge is making the PathAccessError messaging around the \"index\" of the path with the problem reflect the `T` traversal.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mahmoud/glom/issues/5", "repository_url": "https://api.github.com/repos/mahmoud/glom", "labels_url": "https://api.github.com/repos/mahmoud/glom/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/mahmoud/glom/issues/5/comments", "events_url": "https://api.github.com/repos/mahmoud/glom/issues/5/events", "html_url": "https://github.com/mahmoud/glom/issues/5", "id": 320907823, "node_id": "MDU6SXNzdWUzMjA5MDc4MjM=", "number": 5, "title": "cookbook: omit", "user": {"login": "kurtbrose", "id": 543934, "node_id": "MDQ6VXNlcjU0MzkzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/543934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtbrose", "html_url": "https://github.com/kurtbrose", "followers_url": "https://api.github.com/users/kurtbrose/followers", "following_url": "https://api.github.com/users/kurtbrose/following{/other_user}", "gists_url": "https://api.github.com/users/kurtbrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtbrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtbrose/subscriptions", "organizations_url": "https://api.github.com/users/kurtbrose/orgs", "repos_url": "https://api.github.com/users/kurtbrose/repos", "events_url": "https://api.github.com/users/kurtbrose/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtbrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-07T18:31:04Z", "updated_at": "2018-05-09T06:00:31Z", "closed_at": "2018-05-09T06:00:31Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "show options how to filter a list\r\n\r\n\r\n1- lambda list comprehension on the outside  lambda t: [e for e in t if cond]\r\n\r\n2- lambda return OMIT   lambda v: v if cond else OMIT", "performed_via_github_app": null, "score": 1.0}]}