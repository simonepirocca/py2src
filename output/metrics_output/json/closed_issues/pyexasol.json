{"total_count": 36, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/badoo/pyexasol/issues/56", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/56/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/56/events", "html_url": "https://github.com/badoo/pyexasol/issues/56", "id": 663979618, "node_id": "MDU6SXNzdWU2NjM5Nzk2MTg=", "number": 56, "title": "Query text before execution", "user": {"login": "kamal-1", "id": 48100355, "node_id": "MDQ6VXNlcjQ4MTAwMzU1", "avatar_url": "https://avatars2.githubusercontent.com/u/48100355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamal-1", "html_url": "https://github.com/kamal-1", "followers_url": "https://api.github.com/users/kamal-1/followers", "following_url": "https://api.github.com/users/kamal-1/following{/other_user}", "gists_url": "https://api.github.com/users/kamal-1/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamal-1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamal-1/subscriptions", "organizations_url": "https://api.github.com/users/kamal-1/orgs", "repos_url": "https://api.github.com/users/kamal-1/repos", "events_url": "https://api.github.com/users/kamal-1/events{/privacy}", "received_events_url": "https://api.github.com/users/kamal-1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-22T18:59:05Z", "updated_at": "2020-07-22T20:10:40Z", "closed_at": "2020-07-22T20:10:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "We can get the query text after the query has executed.\r\n\r\nq = \"select name, val from {sn!i}.{tn!i}\"\r\np = { \"sn\": \"ETL\", \"tn\": \"METADATA\" }\r\nc.execute(q, p).fetchall()\r\nc.last_statement().query\r\n\r\nIs there a way to get the query text substituted with the parameter values before the query execution?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/55", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/55/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/55/events", "html_url": "https://github.com/badoo/pyexasol/issues/55", "id": 663642067, "node_id": "MDU6SXNzdWU2NjM2NDIwNjc=", "number": 55, "title": "Limit of 30 websocket connections?", "user": {"login": "beepworld", "id": 10942481, "node_id": "MDQ6VXNlcjEwOTQyNDgx", "avatar_url": "https://avatars2.githubusercontent.com/u/10942481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beepworld", "html_url": "https://github.com/beepworld", "followers_url": "https://api.github.com/users/beepworld/followers", "following_url": "https://api.github.com/users/beepworld/following{/other_user}", "gists_url": "https://api.github.com/users/beepworld/gists{/gist_id}", "starred_url": "https://api.github.com/users/beepworld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beepworld/subscriptions", "organizations_url": "https://api.github.com/users/beepworld/orgs", "repos_url": "https://api.github.com/users/beepworld/repos", "events_url": "https://api.github.com/users/beepworld/events{/privacy}", "received_events_url": "https://api.github.com/users/beepworld/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-22T10:11:53Z", "updated_at": "2020-07-29T08:31:23Z", "closed_at": "2020-07-29T08:31:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you very much for your awesome work on pyexasol.\r\n\r\nThere is a websocket connection limit of 30 in Exasol. If there are 30 open websocket connections, you can't open annother one. Do you know how to increase the Exasol websocket connection limit on the server side? If yes, an update of the docs would be helpful for everybody else running into this limit.\r\n\r\nThanks a lot!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/53", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/53/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/53/events", "html_url": "https://github.com/badoo/pyexasol/issues/53", "id": 629053573, "node_id": "MDU6SXNzdWU2MjkwNTM1NzM=", "number": 53, "title": "Broken pipe exception not caught", "user": {"login": "inytar", "id": 1442084, "node_id": "MDQ6VXNlcjE0NDIwODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1442084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inytar", "html_url": "https://github.com/inytar", "followers_url": "https://api.github.com/users/inytar/followers", "following_url": "https://api.github.com/users/inytar/following{/other_user}", "gists_url": "https://api.github.com/users/inytar/gists{/gist_id}", "starred_url": "https://api.github.com/users/inytar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inytar/subscriptions", "organizations_url": "https://api.github.com/users/inytar/orgs", "repos_url": "https://api.github.com/users/inytar/repos", "events_url": "https://api.github.com/users/inytar/events{/privacy}", "received_events_url": "https://api.github.com/users/inytar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-02T09:34:29Z", "updated_at": "2020-06-03T13:57:55Z", "closed_at": "2020-06-03T13:57:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThanks for this amazing tool! We've been using it for all of our python - exasol related projects.\r\nSince a while we have moved to encrypted connections with Exasol and we sometimes see the following exception:\r\n```\r\n  File \"/opt/conda/envs/pdash/lib/python3.7/site-packages/pyexasol/connection.py\", line 179, in execute\r\n    return self.cls_statement(self, query, query_params)\r\n  File \"/opt/conda/envs/pdash/lib/python3.7/site-packages/pyexasol/statement.py\", line 51, in __init__\r\n    self._execute()\r\n  File \"/opt/conda/envs/pdash/lib/python3.7/site-packages/pyexasol/statement.py\", line 155, in _execute\r\n    'sqlText': self.query,\r\n  File \"/opt/conda/envs/pdash/lib/python3.7/site-packages/pyexasol/connection.py\", line 516, in req\r\n    self._ws_send(send_data)\r\n  File \"/opt/conda/envs/pdash/lib/python3.7/site-packages/pyexasol/connection.py\", line 606, in <lambda>\r\n    self._ws_send = lambda x: self._ws.send_binary(zlib.compress(x.encode(), 1))\r\n  File \"/opt/conda/envs/pdash/lib/python3.7/site-packages/websocket/_core.py\", line 285, in send_binary\r\n    return self.send(payload, ABNF.OPCODE_BINARY)\r\n  File \"/opt/conda/envs/pdash/lib/python3.7/site-packages/websocket/_core.py\", line 253, in send\r\n    return self.send_frame(frame)\r\n  File \"/opt/conda/envs/pdash/lib/python3.7/site-packages/websocket/_core.py\", line 279, in send_frame\r\n    l = self._send(data)\r\n  File \"/opt/conda/envs/pdash/lib/python3.7/site-packages/websocket/_core.py\", line 449, in _send\r\n    return send(self.sock, data)\r\n  File \"/opt/conda/envs/pdash/lib/python3.7/site-packages/websocket/_socket.py\", line 157, in send\r\n    return _send()\r\n  File \"/opt/conda/envs/pdash/lib/python3.7/site-packages/websocket/_socket.py\", line 139, in _send\r\n    return sock.send(data)\r\n  File \"/opt/conda/envs/pdash/lib/python3.7/ssl.py\", line 1003, in send\r\n    return self._sslobj.write(data)\r\nBrokenPipeError: [Errno 32] Broken pipe\r\n```\r\nThis is using pyexasol version 0.12.0.\r\nI was wondering if this type of exception could be transformed into a `ExaCommunicationError` as other exceptions related to websocket connections failing are?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/52", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/52/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/52/events", "html_url": "https://github.com/badoo/pyexasol/issues/52", "id": 625536728, "node_id": "MDU6SXNzdWU2MjU1MzY3Mjg=", "number": 52, "title": "pyexasol not recording logout_time in exa_dba_audit_sessions", "user": {"login": "ralphielauren", "id": 24233842, "node_id": "MDQ6VXNlcjI0MjMzODQy", "avatar_url": "https://avatars3.githubusercontent.com/u/24233842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ralphielauren", "html_url": "https://github.com/ralphielauren", "followers_url": "https://api.github.com/users/ralphielauren/followers", "following_url": "https://api.github.com/users/ralphielauren/following{/other_user}", "gists_url": "https://api.github.com/users/ralphielauren/gists{/gist_id}", "starred_url": "https://api.github.com/users/ralphielauren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ralphielauren/subscriptions", "organizations_url": "https://api.github.com/users/ralphielauren/orgs", "repos_url": "https://api.github.com/users/ralphielauren/repos", "events_url": "https://api.github.com/users/ralphielauren/events{/privacy}", "received_events_url": "https://api.github.com/users/ralphielauren/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-27T09:33:05Z", "updated_at": "2020-06-01T13:03:43Z", "closed_at": "2020-06-01T13:03:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "- pyexasol version 0.12.1 or 0.10.1\r\n- python 3.7\r\n\r\n**Closing a connection in a python script, doesn't show logout_time in exasol metadata table.**\r\n\r\nTo reproduce:\r\n\r\n1. open an exasol connection\r\n2. run a dummy query\r\n3. close connection\r\n4. try to run the query again\r\n\r\n```python\r\n>>> import os\r\n>>> import pyexasol\r\n>>> C = pyexasol.connect(dsn=os.getenv(\"EXASOL_DSN\"), user=os.getenv(\"EXASOL_USR\"), password=os.getenv(\"EXASOL_PWD\"))\r\n>>> stmt = C.execute(\"/* test */ SELECT 1;\")\r\n>>> print(stmt)\r\n<ExaStatement session_id=1667199361071797309 stmt_idx=1>\r\n>>> C.close()\r\n>>> C.execute(\"/* test */ SELECT 1;\")\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/uid/.virtualenvs/test/lib/python3.7/site-packages/pyexasol/connection.py\", line 179, in execute\r\n    return self.cls_statement(self, query, query_params)\r\n  File \"/Users/uid/.virtualenvs/test/lib/python3.7/site-packages/pyexasol/statement.py\", line 36, in __init__\r\n    raise ExaRuntimeError(self.connection, \"Exasol connection was closed\")\r\n```\r\n\r\nHowever when I checked the **exa_statistics.exa_dba_audit_sessions** table, no logout time was recorded:\r\n\r\n```sql\r\nSELECT \r\n  session_id,\r\n  login_time,\r\n  logout_time,\r\n  user_name,\r\n  client,\r\n  driver,\r\n  os_name\r\nFROM exa_statistics.exa_dba_audit_sessions \r\nWHERE session_id = '1667835135723529859';\r\n```\r\n\r\nEven the next day (accounting for some delays) the logout time was 2 hours later.\r\n\r\nAm I missing something?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/51", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/51/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/51/events", "html_url": "https://github.com/badoo/pyexasol/issues/51", "id": 624750229, "node_id": "MDU6SXNzdWU2MjQ3NTAyMjk=", "number": 51, "title": "Issue with parsing double from CSV", "user": {"login": "RomantsovArtur", "id": 40241717, "node_id": "MDQ6VXNlcjQwMjQxNzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/40241717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RomantsovArtur", "html_url": "https://github.com/RomantsovArtur", "followers_url": "https://api.github.com/users/RomantsovArtur/followers", "following_url": "https://api.github.com/users/RomantsovArtur/following{/other_user}", "gists_url": "https://api.github.com/users/RomantsovArtur/gists{/gist_id}", "starred_url": "https://api.github.com/users/RomantsovArtur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RomantsovArtur/subscriptions", "organizations_url": "https://api.github.com/users/RomantsovArtur/orgs", "repos_url": "https://api.github.com/users/RomantsovArtur/repos", "events_url": "https://api.github.com/users/RomantsovArtur/events{/privacy}", "received_events_url": "https://api.github.com/users/RomantsovArtur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-05-26T09:45:27Z", "updated_at": "2020-06-03T10:28:39Z", "closed_at": "2020-06-03T10:28:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI faced an issue while working with library functionality\r\n`conn.import_from_file(file_obj, update_table_name)`\r\nif we have double value in CSV file like \"0.0272\" it will become 0.027200000000000002 in exasol.\r\n\r\nI can't see ability to setup format for CSV like that: (1..57,58 format='999999999999999.999999', 59..93)\r\nTo query, that was produced by library:\r\n```\r\nIMPORT INTO tmp_transactions_7220673 FROM CSV\r\nAT 'http://27.1.0.10:46363' FILE '000.gz'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/50", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/50/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/50/events", "html_url": "https://github.com/badoo/pyexasol/issues/50", "id": 609727791, "node_id": "MDU6SXNzdWU2MDk3Mjc3OTE=", "number": 50, "title": "Insert multi cannot insert decimal into text field", "user": {"login": "CHBEXD", "id": 64581337, "node_id": "MDQ6VXNlcjY0NTgxMzM3", "avatar_url": "https://avatars3.githubusercontent.com/u/64581337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CHBEXD", "html_url": "https://github.com/CHBEXD", "followers_url": "https://api.github.com/users/CHBEXD/followers", "following_url": "https://api.github.com/users/CHBEXD/following{/other_user}", "gists_url": "https://api.github.com/users/CHBEXD/gists{/gist_id}", "starred_url": "https://api.github.com/users/CHBEXD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CHBEXD/subscriptions", "organizations_url": "https://api.github.com/users/CHBEXD/orgs", "repos_url": "https://api.github.com/users/CHBEXD/repos", "events_url": "https://api.github.com/users/CHBEXD/events{/privacy}", "received_events_url": "https://api.github.com/users/CHBEXD/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-04-30T08:52:36Z", "updated_at": "2020-07-22T19:42:29Z", "closed_at": "2020-07-22T19:42:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nIs it expected that Insert_multi cannot insert decimal into text field? Thanks.\r\n\r\nTable schema:\r\n```\r\nCREATE TABLE SAMPLE_SCHEMA.TABLE1(\r\nNNUMBER NUMERIC(30,10),\r\nWWORD VARCHAR(20000)\r\n)\r\n\r\nCREATE TABLE SAMPLE_SCHEMA.TABLE2(\r\nNNUMBER VARCHAR(20000),\r\nWWORD VARCHAR(20000)\r\n)\r\n```\r\n\r\nPython code:\r\n```\r\nimport pyexasol\r\nimport pandas as pd\r\nprint(pyexasol.__version__)\r\nprint(pd.__version__)\r\n\r\ndef get_connection():\r\n    conn = pyexasol.connect(\r\n        dsn=\"DSN\",\r\n        user=\"USERNAME\",\r\n        password=\"PASSWORD\")\r\n    return conn\r\n\r\ntuple_list = [\r\n    (3.1415926, \"AAA\"),(1.41421356237, \"BBB\")\r\n]\r\ndf = pd.DataFrame(tuple_list, columns=[\"NNUMBER\", \"WWORD\"])\r\nconn = get_connection()\r\n\r\nconn.import_from_pandas(df, (\"SAMPLE_SCHEMA\", \"TABLE1\"))\r\nconn.commit()\r\nprint(\"Step 1 OK\")\r\n\r\nconn.import_from_pandas(df, (\"SAMPLE_SCHEMA\", \"TABLE2\"))\r\nconn.commit()\r\nprint(\"Step 2 OK\")\r\n\r\ntuple_list = list(df.itertuples(index=False))\r\nconn.ext.insert_multi((\"SAMPLE_SCHEMA\", \"TABLE1\"),tuple_list,columns=list(df.columns))\r\nconn.commit()\r\nprint(\"Step 3 OK\")\r\n\r\nconn.ext.insert_multi((\"SAMPLE_SCHEMA\", \"TABLE2\"),tuple_list,columns=list(df.columns))\r\nconn.commit()\r\nprint(\"Step 4 OK\")  # <-- Will never be reached.\r\n```\r\n\r\nOutput:\r\n```\r\n0.12.0\r\n1.0.3\r\nStep 1 OK\r\nStep 2 OK\r\nStep 3 OK\r\nTraceback (most recent call last):\r\n    ............\r\n    raise cls_err(self, req['sqlText'], ret['exception']['sqlCode'], ret['exception']['text'])\r\nKeyError: 'sqlText'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/49", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/49/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/49/events", "html_url": "https://github.com/badoo/pyexasol/issues/49", "id": 571431837, "node_id": "MDU6SXNzdWU1NzE0MzE4Mzc=", "number": 49, "title": "Unsupported WebSocket opcode", "user": {"login": "reitzig", "id": 4246780, "node_id": "MDQ6VXNlcjQyNDY3ODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4246780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reitzig", "html_url": "https://github.com/reitzig", "followers_url": "https://api.github.com/users/reitzig/followers", "following_url": "https://api.github.com/users/reitzig/following{/other_user}", "gists_url": "https://api.github.com/users/reitzig/gists{/gist_id}", "starred_url": "https://api.github.com/users/reitzig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reitzig/subscriptions", "organizations_url": "https://api.github.com/users/reitzig/orgs", "repos_url": "https://api.github.com/users/reitzig/repos", "events_url": "https://api.github.com/users/reitzig/events{/privacy}", "received_events_url": "https://api.github.com/users/reitzig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2020-02-26T14:41:21Z", "updated_at": "2020-03-25T10:27:32Z", "closed_at": "2020-03-25T10:26:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "We're seeing low-level errors bubble up through pyexasol which we can't explain. For example:\r\n\r\n```\r\npyexasol.exceptions.ExaQueryError: \r\n(\r\n    message     =>  WebSocket: readMessage: Unsupported WebSocket opcode: 11 (Session: <snip>)\r\n    dsn         =>  exasol:8888\r\n    user        =>  sys\r\n    schema      =>  \r\n    code        =>  00000\r\n    session_id  =>  <snip>\r\n    query       =>  MERGE INTO <snip>\r\nUSING <snip> landing_inserts\r\nON ( lake_table.<snip> = landing_inserts.<snip> )\r\nWHEN MATCHED THEN\r\n    UPDATE SET lake_table.<snip> = landing_inserts.<snip> , ..., lake_table.<snip>=CURRENT_TIMESTAMP\r\nWHEN NOT MATCHED THEN\r\n    INSERT VALUES (...)\r\n)\r\n```\r\n\r\nThis is after several queries ran through successfully; it _is_ the first `MERGE`, though.\r\n\r\nRe-running the same code yielded the same error with `opcode: 12`.\r\nWe've also seen `opcode 14` once on another query, but have not been able to reproduce.\r\n\r\nThis is running queries with pyexasol 0.11.2 on Python 3.7.6 against `exasol/docker-db:6.2.4-d1`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/48", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/48/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/48/events", "html_url": "https://github.com/badoo/pyexasol/issues/48", "id": 569980525, "node_id": "MDU6SXNzdWU1Njk5ODA1MjU=", "number": 48, "title": "Import Parameters", "user": {"login": "kamal-1", "id": 48100355, "node_id": "MDQ6VXNlcjQ4MTAwMzU1", "avatar_url": "https://avatars2.githubusercontent.com/u/48100355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamal-1", "html_url": "https://github.com/kamal-1", "followers_url": "https://api.github.com/users/kamal-1/followers", "following_url": "https://api.github.com/users/kamal-1/following{/other_user}", "gists_url": "https://api.github.com/users/kamal-1/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamal-1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamal-1/subscriptions", "organizations_url": "https://api.github.com/users/kamal-1/orgs", "repos_url": "https://api.github.com/users/kamal-1/repos", "events_url": "https://api.github.com/users/kamal-1/events{/privacy}", "received_events_url": "https://api.github.com/users/kamal-1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-24T16:43:54Z", "updated_at": "2020-02-24T20:35:42Z", "closed_at": "2020-02-24T20:35:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use the import_from_iterable functionality but getting an error for the timestamp format. Is there a way to specify the timestamp format similar when using import_from_iterable function? I tried searching through the docs but didn't find any example for that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/46", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/46/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/46/events", "html_url": "https://github.com/badoo/pyexasol/issues/46", "id": 557333320, "node_id": "MDU6SXNzdWU1NTczMzMzMjA=", "number": 46, "title": "Security Risk with Export", "user": {"login": "ageof", "id": 29753283, "node_id": "MDQ6VXNlcjI5NzUzMjgz", "avatar_url": "https://avatars3.githubusercontent.com/u/29753283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ageof", "html_url": "https://github.com/ageof", "followers_url": "https://api.github.com/users/ageof/followers", "following_url": "https://api.github.com/users/ageof/following{/other_user}", "gists_url": "https://api.github.com/users/ageof/gists{/gist_id}", "starred_url": "https://api.github.com/users/ageof/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ageof/subscriptions", "organizations_url": "https://api.github.com/users/ageof/orgs", "repos_url": "https://api.github.com/users/ageof/repos", "events_url": "https://api.github.com/users/ageof/events{/privacy}", "received_events_url": "https://api.github.com/users/ageof/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-30T08:18:22Z", "updated_at": "2020-02-20T15:25:28Z", "closed_at": "2020-02-20T15:25:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I was just trying to issue a SQL statement with (export_to_pandas) a user who only had read rights, an error occurred. I found out that the data is written to a CSV via SQL export and then the data is collected via FTP. These extended rights, FTP and the CSV file represent a security risk. In my opinion, another variant for select statements should be selected. I would appreciate a feedback or a modification of the Select variant", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/45", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/45/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/45/events", "html_url": "https://github.com/badoo/pyexasol/issues/45", "id": 555439226, "node_id": "MDU6SXNzdWU1NTU0MzkyMjY=", "number": 45, "title": "Import from iterable swallows ETL exception", "user": {"login": "LennartAtExasol", "id": 56670912, "node_id": "MDQ6VXNlcjU2NjcwOTEy", "avatar_url": "https://avatars3.githubusercontent.com/u/56670912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LennartAtExasol", "html_url": "https://github.com/LennartAtExasol", "followers_url": "https://api.github.com/users/LennartAtExasol/followers", "following_url": "https://api.github.com/users/LennartAtExasol/following{/other_user}", "gists_url": "https://api.github.com/users/LennartAtExasol/gists{/gist_id}", "starred_url": "https://api.github.com/users/LennartAtExasol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LennartAtExasol/subscriptions", "organizations_url": "https://api.github.com/users/LennartAtExasol/orgs", "repos_url": "https://api.github.com/users/LennartAtExasol/repos", "events_url": "https://api.github.com/users/LennartAtExasol/events{/privacy}", "received_events_url": "https://api.github.com/users/LennartAtExasol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-01-27T09:03:07Z", "updated_at": "2020-06-03T10:29:05Z", "closed_at": "2020-06-03T10:29:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can not exactly pinpoint where the exception is happening.\r\nWhen importing form an iterable and a string truncation occurs (ETL-3003) or an integer is out of range (ETL-3050) pyexasol is not throwing the corresponding exception. \r\n\r\nInstead the user is notified that the server closed the connection (Broken Pipe Error) and the program terminates. I suspect an unhandled exception somewhere in the connection.py module?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/44", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/44/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/44/events", "html_url": "https://github.com/badoo/pyexasol/issues/44", "id": 555403451, "node_id": "MDU6SXNzdWU1NTU0MDM0NTE=", "number": 44, "title": "Openshift getpwuid(): uid not found", "user": {"login": "ageof", "id": 29753283, "node_id": "MDQ6VXNlcjI5NzUzMjgz", "avatar_url": "https://avatars3.githubusercontent.com/u/29753283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ageof", "html_url": "https://github.com/ageof", "followers_url": "https://api.github.com/users/ageof/followers", "following_url": "https://api.github.com/users/ageof/following{/other_user}", "gists_url": "https://api.github.com/users/ageof/gists{/gist_id}", "starred_url": "https://api.github.com/users/ageof/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ageof/subscriptions", "organizations_url": "https://api.github.com/users/ageof/orgs", "repos_url": "https://api.github.com/users/ageof/repos", "events_url": "https://api.github.com/users/ageof/events{/privacy}", "received_events_url": "https://api.github.com/users/ageof/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-27T07:37:38Z", "updated_at": "2020-01-28T14:47:18Z", "closed_at": "2020-01-28T14:47:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello everybody,\r\nwhen I try to start my application with PyExasol on Openshift, it always crashes. The reason is that connection.py tries to 'clientOsUsername': getpass.getuser ()\r\naccess. Since the UID is random in OpenShift, this is not possible. It would be nice if you could parameterize clientOsUsername for OpenShift or another alternative.\r\n\r\nThank you and hope for a solution or implementation", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/42", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/42/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/42/events", "html_url": "https://github.com/badoo/pyexasol/issues/42", "id": 540215647, "node_id": "MDU6SXNzdWU1NDAyMTU2NDc=", "number": 42, "title": "Undetermined behavior of SCRIPT_OUTPUT", "user": {"login": "LennartAtExasol", "id": 56670912, "node_id": "MDQ6VXNlcjU2NjcwOTEy", "avatar_url": "https://avatars3.githubusercontent.com/u/56670912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LennartAtExasol", "html_url": "https://github.com/LennartAtExasol", "followers_url": "https://api.github.com/users/LennartAtExasol/followers", "following_url": "https://api.github.com/users/LennartAtExasol/following{/other_user}", "gists_url": "https://api.github.com/users/LennartAtExasol/gists{/gist_id}", "starred_url": "https://api.github.com/users/LennartAtExasol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LennartAtExasol/subscriptions", "organizations_url": "https://api.github.com/users/LennartAtExasol/orgs", "repos_url": "https://api.github.com/users/LennartAtExasol/repos", "events_url": "https://api.github.com/users/LennartAtExasol/events{/privacy}", "received_events_url": "https://api.github.com/users/LennartAtExasol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-12-19T10:17:07Z", "updated_at": "2020-01-02T08:15:23Z", "closed_at": "2020-01-02T08:15:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following Python3 UDF script looks for the shortest string in a given input set.\r\n\r\n```\r\nCREATE OR REPLACE PYTHON3 SET SCRIPT shortest_string(input_string VARCHAR(2000000)) RETURNS VARCHAR(2000000) AS \r\ndef run(ctx):\r\n short = \"\"\r\n l = 2e6\r\n \r\n print('outer')\r\n while True:\r\n  _l = len(ctx.input_string)\r\n  print('inner')\r\n  if _l < l:\r\n        l = _l\r\n        short = ctx.input_string\r\n        print('if_inner')\r\n  \r\n  if not ctx.next(): break\r\n return short\r\n/\r\n```\r\n\r\nWhen pyexasols script_output is listening it prints:\r\n```\r\n1 * 'outer'\r\nx * 'inner'\r\ny < x * 'if_inner'\r\n```\r\n\r\nWhere x depends on the number of rows in the set as it should be.\r\n\r\nHowever if \"print('inner')\" is commented out **nothing** is printed at all to the listener. Neither 'outer' nor 'if_inner'. I can't explain this behaviour.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/40", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/40/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/40/events", "html_url": "https://github.com/badoo/pyexasol/issues/40", "id": 531103831, "node_id": "MDU6SXNzdWU1MzExMDM4MzE=", "number": 40, "title": "Broken pipe in import_from_iterable ", "user": {"login": "nautilus28", "id": 4472857, "node_id": "MDQ6VXNlcjQ0NzI4NTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4472857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nautilus28", "html_url": "https://github.com/nautilus28", "followers_url": "https://api.github.com/users/nautilus28/followers", "following_url": "https://api.github.com/users/nautilus28/following{/other_user}", "gists_url": "https://api.github.com/users/nautilus28/gists{/gist_id}", "starred_url": "https://api.github.com/users/nautilus28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nautilus28/subscriptions", "organizations_url": "https://api.github.com/users/nautilus28/orgs", "repos_url": "https://api.github.com/users/nautilus28/repos", "events_url": "https://api.github.com/users/nautilus28/events{/privacy}", "received_events_url": "https://api.github.com/users/nautilus28/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-02T12:43:31Z", "updated_at": "2019-12-02T16:48:02Z", "closed_at": "2019-12-02T16:48:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Vitaly,\r\n\r\nI have run into this error several times when importing a large dataset using `import_from_iterable`.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/pyexasol/connection.py\", line 247, in import_from_iterable\r\n    return self.import_from_callback(cb.import_from_iterable, src, table, None, import_params)\r\n  File \"/usr/local/lib/python3.7/site-packages/pyexasol/connection.py\", line 339, in import_from_callback\r\n    raise e\r\n  File \"/usr/local/lib/python3.7/site-packages/pyexasol/connection.py\", line 323, in import_from_callback\r\n    result = callback(http_proc.write_pipe, src, **callback_params)\r\n  File \"/usr/local/lib/python3.7/site-packages/pyexasol/callback.py\", line 66, in import_from_iterable\r\n    writer.writerow(row)\r\nBrokenPipeError: [Errno 32] Broken pipe\r\n```\r\n\r\nI am using pyexasol 0.6.4.\r\n\r\nShould this be caught by the library?\r\n\r\nThanks.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/39", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/39/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/39/events", "html_url": "https://github.com/badoo/pyexasol/issues/39", "id": 527050037, "node_id": "MDU6SXNzdWU1MjcwNTAwMzc=", "number": 39, "title": "How to handle identity/ autoincrement columns when writing to Exasol DB?", "user": {"login": "nazaretl", "id": 20397685, "node_id": "MDQ6VXNlcjIwMzk3Njg1", "avatar_url": "https://avatars1.githubusercontent.com/u/20397685?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nazaretl", "html_url": "https://github.com/nazaretl", "followers_url": "https://api.github.com/users/nazaretl/followers", "following_url": "https://api.github.com/users/nazaretl/following{/other_user}", "gists_url": "https://api.github.com/users/nazaretl/gists{/gist_id}", "starred_url": "https://api.github.com/users/nazaretl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nazaretl/subscriptions", "organizations_url": "https://api.github.com/users/nazaretl/orgs", "repos_url": "https://api.github.com/users/nazaretl/repos", "events_url": "https://api.github.com/users/nazaretl/events{/privacy}", "received_events_url": "https://api.github.com/users/nazaretl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-11-22T08:11:46Z", "updated_at": "2020-01-22T11:22:29Z", "closed_at": "2020-01-01T12:44:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys,\r\nstackoverflow could help me with the problem so I'm hopping you can give me an advice.\r\n\r\nI have an Exasol table with an autoincrement primary key and want to fill this table using import_from_pandas from pyexasol.\r\n\r\nBy importing to exasol table I have to leave the RKEY out since Exasol auto increments it. But leaving rkey empty or not creating the rkey column in pandas at all doesn\u2019t work for me.\r\n\r\nI went through pandas.to_csv and it doesn\u2019t seem to have an option to leave out columns when writing to csv.\r\nA minimal exampe is below.\r\n\r\nimport pandas as pd\r\nimport pyexasol\r\n\r\nscore = pd.DataFrame(columns = ['rkey','score'])\r\nscore['score'] = list(range(10))\r\nconn = pyexasol.connect(dsn=dsn,user=user, password=pw,compression=True)\r\nconn.import_from_pandas(score,(schema, table))", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/38", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/38/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/38/events", "html_url": "https://github.com/badoo/pyexasol/issues/38", "id": 522817251, "node_id": "MDU6SXNzdWU1MjI4MTcyNTE=", "number": 38, "title": "get_sys_columns((my_schema, my_table)) doesn't work if the connection's schema is defined", "user": {"login": "tokybe", "id": 6314342, "node_id": "MDQ6VXNlcjYzMTQzNDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6314342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tokybe", "html_url": "https://github.com/tokybe", "followers_url": "https://api.github.com/users/tokybe/followers", "following_url": "https://api.github.com/users/tokybe/following{/other_user}", "gists_url": "https://api.github.com/users/tokybe/gists{/gist_id}", "starred_url": "https://api.github.com/users/tokybe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tokybe/subscriptions", "organizations_url": "https://api.github.com/users/tokybe/orgs", "repos_url": "https://api.github.com/users/tokybe/repos", "events_url": "https://api.github.com/users/tokybe/events{/privacy}", "received_events_url": "https://api.github.com/users/tokybe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-14T12:09:18Z", "updated_at": "2020-03-02T18:45:49Z", "closed_at": "2020-03-02T18:45:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nUsing `get_sys_columns()` with a tuple `(my_schema, my_table)`, my_schema is ignored if the `schema` argument of the current connection is not the default one ('', no schema).\r\nI'm using version 0.6.4.\r\nAny idea?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/37", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/37/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/37/events", "html_url": "https://github.com/badoo/pyexasol/issues/37", "id": 513906854, "node_id": "MDU6SXNzdWU1MTM5MDY4NTQ=", "number": 37, "title": "How to import only selected columns of csv file", "user": {"login": "kst83", "id": 3646748, "node_id": "MDQ6VXNlcjM2NDY3NDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3646748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kst83", "html_url": "https://github.com/kst83", "followers_url": "https://api.github.com/users/kst83/followers", "following_url": "https://api.github.com/users/kst83/following{/other_user}", "gists_url": "https://api.github.com/users/kst83/gists{/gist_id}", "starred_url": "https://api.github.com/users/kst83/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kst83/subscriptions", "organizations_url": "https://api.github.com/users/kst83/orgs", "repos_url": "https://api.github.com/users/kst83/repos", "events_url": "https://api.github.com/users/kst83/events{/privacy}", "received_events_url": "https://api.github.com/users/kst83/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-29T13:12:08Z", "updated_at": "2020-01-01T18:41:18Z", "closed_at": "2020-01-01T18:41:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to import only selected columns of a csv file into exasol?\r\nIf I understand correctly, Exasol supports this using the the csv_cols block in the import statement, as described in the documentations.\r\nBut is it possible to use this feature with pyexasol?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/36", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/36/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/36/events", "html_url": "https://github.com/badoo/pyexasol/issues/36", "id": 503302884, "node_id": "MDU6SXNzdWU1MDMzMDI4ODQ=", "number": 36, "title": "WebSocketConnectionClosedException: Connection is already closed.", "user": {"login": "sgrjack2", "id": 43068428, "node_id": "MDQ6VXNlcjQzMDY4NDI4", "avatar_url": "https://avatars0.githubusercontent.com/u/43068428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrjack2", "html_url": "https://github.com/sgrjack2", "followers_url": "https://api.github.com/users/sgrjack2/followers", "following_url": "https://api.github.com/users/sgrjack2/following{/other_user}", "gists_url": "https://api.github.com/users/sgrjack2/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrjack2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrjack2/subscriptions", "organizations_url": "https://api.github.com/users/sgrjack2/orgs", "repos_url": "https://api.github.com/users/sgrjack2/repos", "events_url": "https://api.github.com/users/sgrjack2/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrjack2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-10-07T08:27:26Z", "updated_at": "2019-10-31T10:57:22Z", "closed_at": "2019-10-31T10:57:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am trying to make a connection with Exasol to pull some data into a dataframe, however, when I attempt to establish a connection I get an error:\r\n\r\nWebSocketConnectionClosedException: Connection is already closed.\r\n\r\nWhich then is followed by the error ExaConnectionFailedError.\r\n\r\nThe information provided to open exasol is correct as it works when logging directly into exasol. Has anyone had any similar issues?\r\n\r\nThanks,\r\nRyan", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/34", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/34/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/34/events", "html_url": "https://github.com/badoo/pyexasol/issues/34", "id": 497094250, "node_id": "MDU6SXNzdWU0OTcwOTQyNTA=", "number": 34, "title": "DELETE and UPDATE Statements throw an error", "user": {"login": "lumarino", "id": 44267863, "node_id": "MDQ6VXNlcjQ0MjY3ODYz", "avatar_url": "https://avatars1.githubusercontent.com/u/44267863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lumarino", "html_url": "https://github.com/lumarino", "followers_url": "https://api.github.com/users/lumarino/followers", "following_url": "https://api.github.com/users/lumarino/following{/other_user}", "gists_url": "https://api.github.com/users/lumarino/gists{/gist_id}", "starred_url": "https://api.github.com/users/lumarino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lumarino/subscriptions", "organizations_url": "https://api.github.com/users/lumarino/orgs", "repos_url": "https://api.github.com/users/lumarino/repos", "events_url": "https://api.github.com/users/lumarino/events{/privacy}", "received_events_url": "https://api.github.com/users/lumarino/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-23T13:20:58Z", "updated_at": "2019-09-23T14:13:29Z", "closed_at": "2019-09-23T14:13:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nIs there a way to execute Delete and Update Statements?\r\nExecuting a query like: \"UPDATE SCHEMA.TABLE SET SUBS= 1 WHERE USER_ID = 2\"\r\nthrows the error: unexpected UPDATE.\r\n\r\nThanks in advance,\r\nLuca\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/33", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/33/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/33/events", "html_url": "https://github.com/badoo/pyexasol/issues/33", "id": 494633496, "node_id": "MDU6SXNzdWU0OTQ2MzM0OTY=", "number": 33, "title": "Performance of import_from_pandas for small data frames", "user": {"login": "tkilias", "id": 5796845, "node_id": "MDQ6VXNlcjU3OTY4NDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/5796845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tkilias", "html_url": "https://github.com/tkilias", "followers_url": "https://api.github.com/users/tkilias/followers", "following_url": "https://api.github.com/users/tkilias/following{/other_user}", "gists_url": "https://api.github.com/users/tkilias/gists{/gist_id}", "starred_url": "https://api.github.com/users/tkilias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tkilias/subscriptions", "organizations_url": "https://api.github.com/users/tkilias/orgs", "repos_url": "https://api.github.com/users/tkilias/repos", "events_url": "https://api.github.com/users/tkilias/events{/privacy}", "received_events_url": "https://api.github.com/users/tkilias/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 35, "created_at": "2019-09-17T13:44:21Z", "updated_at": "2020-01-01T12:45:32Z", "closed_at": "2020-01-01T12:45:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello @wildraid,\r\n\r\nI got a report, that the function import_from_pandas for small data frames (less than 100 rows) is compared with larger data frames quite slow.\r\n\r\nI wrote a small test script and measured the performance of different data frame sizes and for very small data frames the overhead is quite large. You can find the script and results [here](\r\nhttps://gist.github.com/tkilias/20e8dbb8f6f0e045b205cc92916cf71c)\r\n\r\nIn the specific use case the data frame size is given by external factors and can't be changed and might fluctuate between very small and very large. So the question is, if we might want to optimize the import_from_pandas function for different sizes. For large data frames the import via CSV is the best way, for smaller data frames insert statements or prepared statements might offer a better performance. I checked the documentation of the websocket-api of the ExasolDB and it provides an [API for PreparedStatements](https://github.com/exasol/websocket-api/blob/master/WebsocketAPI.md#createpreparedstatement-creates-a-prepared-statement) were you add the tuples to JSON of the requests.\r\n\r\nWhat do you think about this? Do you have other ideas?\r\n\r\nThanks,\r\ntkilias", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/30", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/30/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/30/events", "html_url": "https://github.com/badoo/pyexasol/issues/30", "id": 464787877, "node_id": "MDU6SXNzdWU0NjQ3ODc4Nzc=", "number": 30, "title": "Encryption doesn't happen on Connection", "user": {"login": "kamal-1", "id": 48100355, "node_id": "MDQ6VXNlcjQ4MTAwMzU1", "avatar_url": "https://avatars2.githubusercontent.com/u/48100355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamal-1", "html_url": "https://github.com/kamal-1", "followers_url": "https://api.github.com/users/kamal-1/followers", "following_url": "https://api.github.com/users/kamal-1/following{/other_user}", "gists_url": "https://api.github.com/users/kamal-1/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamal-1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamal-1/subscriptions", "organizations_url": "https://api.github.com/users/kamal-1/orgs", "repos_url": "https://api.github.com/users/kamal-1/repos", "events_url": "https://api.github.com/users/kamal-1/events{/privacy}", "received_events_url": "https://api.github.com/users/kamal-1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-05T22:27:39Z", "updated_at": "2019-07-10T16:41:14Z", "closed_at": "2019-07-10T16:41:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I installed pyexasol as described in \"pyexasol/docs/ENCRYPTION.md\". After initiating the connection to database with \"encryption=True\" option or specifying \"encryption = True\" in the config file, it still created a non-encrypted connection.\r\n\r\nI am checking the encryption status in the exa_user_sessions system table.\r\n\r\nAm I missing something here?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/29", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/29/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/29/events", "html_url": "https://github.com/badoo/pyexasol/issues/29", "id": 460957092, "node_id": "MDU6SXNzdWU0NjA5NTcwOTI=", "number": 29, "title": "potential bug with split_part function", "user": {"login": "nautilus28", "id": 4472857, "node_id": "MDQ6VXNlcjQ0NzI4NTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4472857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nautilus28", "html_url": "https://github.com/nautilus28", "followers_url": "https://api.github.com/users/nautilus28/followers", "following_url": "https://api.github.com/users/nautilus28/following{/other_user}", "gists_url": "https://api.github.com/users/nautilus28/gists{/gist_id}", "starred_url": "https://api.github.com/users/nautilus28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nautilus28/subscriptions", "organizations_url": "https://api.github.com/users/nautilus28/orgs", "repos_url": "https://api.github.com/users/nautilus28/repos", "events_url": "https://api.github.com/users/nautilus28/events{/privacy}", "received_events_url": "https://api.github.com/users/nautilus28/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-26T13:00:59Z", "updated_at": "2019-07-01T23:33:57Z", "closed_at": "2019-07-01T23:33:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have encountered an error with pyexasol when using the `split_part` in the query. Here is the log message:\r\n  \r\n```pyexasol.exceptions.ExaQueryError:\r\n(\r\n    message     =>  function or script SPLIT_PART not found [line 1, column 8] (Session: 1637404284587589169)\r\n    dsn         =>  localhost:8564\r\n    user        =>  canhduong\r\n    schema      =>\r\n    code        =>  42000\r\n    session_id  =>  1637404284587589169\r\n    query       =>  select split_part(id, \"-\", 1) from users limit 10\r\n)\r\n```\r\n\r\nI am using pyexasol version: 0.6.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/28", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/28/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/28/events", "html_url": "https://github.com/badoo/pyexasol/issues/28", "id": 452097810, "node_id": "MDU6SXNzdWU0NTIwOTc4MTA=", "number": 28, "title": "Allow ENCODING parameter in ExaSQLImportThread", "user": {"login": "vinlopez", "id": 22057983, "node_id": "MDQ6VXNlcjIyMDU3OTgz", "avatar_url": "https://avatars2.githubusercontent.com/u/22057983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vinlopez", "html_url": "https://github.com/vinlopez", "followers_url": "https://api.github.com/users/vinlopez/followers", "following_url": "https://api.github.com/users/vinlopez/following{/other_user}", "gists_url": "https://api.github.com/users/vinlopez/gists{/gist_id}", "starred_url": "https://api.github.com/users/vinlopez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vinlopez/subscriptions", "organizations_url": "https://api.github.com/users/vinlopez/orgs", "repos_url": "https://api.github.com/users/vinlopez/repos", "events_url": "https://api.github.com/users/vinlopez/events{/privacy}", "received_events_url": "https://api.github.com/users/vinlopez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-04T16:39:15Z", "updated_at": "2019-06-05T08:35:52Z", "closed_at": "2019-06-05T08:35:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nCurrently, encoding is not part of the parameters that are accepted by ExaSQLImportThread.\r\nIn our configuration, not having \"ENCODING = 'UTF-8' \" with cause the export to fail.\r\n\r\nCould you please add this feature; useful and straightforward :) ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/26", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/26/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/26/events", "html_url": "https://github.com/badoo/pyexasol/issues/26", "id": 437319657, "node_id": "MDU6SXNzdWU0MzczMTk2NTc=", "number": 26, "title": "How can I show all the tables in a specific scheme?", "user": {"login": "Ericonaldo", "id": 26572674, "node_id": "MDQ6VXNlcjI2NTcyNjc0", "avatar_url": "https://avatars2.githubusercontent.com/u/26572674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ericonaldo", "html_url": "https://github.com/Ericonaldo", "followers_url": "https://api.github.com/users/Ericonaldo/followers", "following_url": "https://api.github.com/users/Ericonaldo/following{/other_user}", "gists_url": "https://api.github.com/users/Ericonaldo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ericonaldo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ericonaldo/subscriptions", "organizations_url": "https://api.github.com/users/Ericonaldo/orgs", "repos_url": "https://api.github.com/users/Ericonaldo/repos", "events_url": "https://api.github.com/users/Ericonaldo/events{/privacy}", "received_events_url": "https://api.github.com/users/Ericonaldo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-25T17:43:04Z", "updated_at": "2019-06-26T14:05:51Z", "closed_at": "2019-06-26T14:05:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to show all the tables in a specific scheme?\r\nSay that I have a database called PSG, I can excecute \"select * from PSG.sometable\" but I can not get how many and the name of all the tables, even if I have tried many grammar and read many docs", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/25", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/25/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/25/events", "html_url": "https://github.com/badoo/pyexasol/issues/25", "id": 437147756, "node_id": "MDU6SXNzdWU0MzcxNDc3NTY=", "number": 25, "title": "what's the schema?", "user": {"login": "Ericonaldo", "id": 26572674, "node_id": "MDQ6VXNlcjI2NTcyNjc0", "avatar_url": "https://avatars2.githubusercontent.com/u/26572674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ericonaldo", "html_url": "https://github.com/Ericonaldo", "followers_url": "https://api.github.com/users/Ericonaldo/followers", "following_url": "https://api.github.com/users/Ericonaldo/following{/other_user}", "gists_url": "https://api.github.com/users/Ericonaldo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ericonaldo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ericonaldo/subscriptions", "organizations_url": "https://api.github.com/users/Ericonaldo/orgs", "repos_url": "https://api.github.com/users/Ericonaldo/repos", "events_url": "https://api.github.com/users/Ericonaldo/events{/privacy}", "received_events_url": "https://api.github.com/users/Ericonaldo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-25T11:26:07Z", "updated_at": "2019-04-25T11:40:19Z", "closed_at": "2019-04-25T11:40:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "In /docs/LOCAL_CONFIG.md it says:\r\n\r\nschema = my_schema\r\n\r\nSo what's the schema?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/24", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/24/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/24/events", "html_url": "https://github.com/badoo/pyexasol/issues/24", "id": 435958140, "node_id": "MDU6SXNzdWU0MzU5NTgxNDA=", "number": 24, "title": "Please expose resultType property for responseData", "user": {"login": "kamal-1", "id": 48100355, "node_id": "MDQ6VXNlcjQ4MTAwMzU1", "avatar_url": "https://avatars2.githubusercontent.com/u/48100355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamal-1", "html_url": "https://github.com/kamal-1", "followers_url": "https://api.github.com/users/kamal-1/followers", "following_url": "https://api.github.com/users/kamal-1/following{/other_user}", "gists_url": "https://api.github.com/users/kamal-1/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamal-1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamal-1/subscriptions", "organizations_url": "https://api.github.com/users/kamal-1/orgs", "repos_url": "https://api.github.com/users/kamal-1/repos", "events_url": "https://api.github.com/users/kamal-1/events{/privacy}", "received_events_url": "https://api.github.com/users/kamal-1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-23T01:32:29Z", "updated_at": "2019-04-23T13:58:21Z", "closed_at": "2019-04-23T13:58:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Exasol WebSockets API returns a property called resultType in response to the Execute command. Please expose this property in pyexasol. It will help in determining whether the query returned a resultset so it can be iterated on or the query returned a rowCount.\r\n\r\nresults (object[]) => array of result objects\r\n\r\n- resultType (string) => type of result: **\"resultSet\" or \"rowCount\"**\r\n- rowCount (number, optional) => present if resultType is \"rowCount\", number of rows\r\n- resultSet (object, optional) => present if resultType is \"resultSet\", result set", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/23", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/23/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/23/events", "html_url": "https://github.com/badoo/pyexasol/issues/23", "id": 431603269, "node_id": "MDU6SXNzdWU0MzE2MDMyNjk=", "number": 23, "title": "connection pool support", "user": {"login": "nautilus28", "id": 4472857, "node_id": "MDQ6VXNlcjQ0NzI4NTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4472857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nautilus28", "html_url": "https://github.com/nautilus28", "followers_url": "https://api.github.com/users/nautilus28/followers", "following_url": "https://api.github.com/users/nautilus28/following{/other_user}", "gists_url": "https://api.github.com/users/nautilus28/gists{/gist_id}", "starred_url": "https://api.github.com/users/nautilus28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nautilus28/subscriptions", "organizations_url": "https://api.github.com/users/nautilus28/orgs", "repos_url": "https://api.github.com/users/nautilus28/repos", "events_url": "https://api.github.com/users/nautilus28/events{/privacy}", "received_events_url": "https://api.github.com/users/nautilus28/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-10T16:39:19Z", "updated_at": "2019-04-21T13:37:19Z", "closed_at": "2019-04-21T13:37:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am developing a web application in which I use `pyexasol` to query for data from Exasol.\r\n\r\nIs it possible to use a connection pool in `pyexasol`?\r\n\r\nHaving a connection pool would allow the web server to maintain long-running connections in memory for efficient re-use.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/22", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/22/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/22/events", "html_url": "https://github.com/badoo/pyexasol/issues/22", "id": 427068579, "node_id": "MDU6SXNzdWU0MjcwNjg1Nzk=", "number": 22, "title": "Insert statement for meta data ok?", "user": {"login": "kst83", "id": 3646748, "node_id": "MDQ6VXNlcjM2NDY3NDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3646748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kst83", "html_url": "https://github.com/kst83", "followers_url": "https://api.github.com/users/kst83/followers", "following_url": "https://api.github.com/users/kst83/following{/other_user}", "gists_url": "https://api.github.com/users/kst83/gists{/gist_id}", "starred_url": "https://api.github.com/users/kst83/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kst83/subscriptions", "organizations_url": "https://api.github.com/users/kst83/orgs", "repos_url": "https://api.github.com/users/kst83/repos", "events_url": "https://api.github.com/users/kst83/events{/privacy}", "received_events_url": "https://api.github.com/users/kst83/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-29T16:20:10Z", "updated_at": "2019-04-21T13:37:30Z", "closed_at": "2019-04-21T13:37:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I understand that when working with lots of data it makes sense to not use single insert statements but import_/export_ statements.\r\nBut is it ok to execute the insert statement for managing master data with pyexasol sind import_from_iterable doesn't seem to be flexible enough?\r\nOr should a different library like pyodbc be used in this case?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/19", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/19/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/19/events", "html_url": "https://github.com/badoo/pyexasol/issues/19", "id": 421452323, "node_id": "MDU6SXNzdWU0MjE0NTIzMjM=", "number": 19, "title": "export to pandas with chunksize", "user": {"login": "qlew", "id": 29059674, "node_id": "MDQ6VXNlcjI5MDU5Njc0", "avatar_url": "https://avatars0.githubusercontent.com/u/29059674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qlew", "html_url": "https://github.com/qlew", "followers_url": "https://api.github.com/users/qlew/followers", "following_url": "https://api.github.com/users/qlew/following{/other_user}", "gists_url": "https://api.github.com/users/qlew/gists{/gist_id}", "starred_url": "https://api.github.com/users/qlew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qlew/subscriptions", "organizations_url": "https://api.github.com/users/qlew/orgs", "repos_url": "https://api.github.com/users/qlew/repos", "events_url": "https://api.github.com/users/qlew/events{/privacy}", "received_events_url": "https://api.github.com/users/qlew/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-15T10:32:51Z", "updated_at": "2019-03-18T22:57:57Z", "closed_at": "2019-03-18T22:57:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found an issue when passing `chunksize` as callback parameter to `export_to_pandas`\r\n```python\r\nimport pyexasol\r\nimport pandas\r\n```\r\n<details><summary>Output of pandas.show_versions()</summary>\r\n<p>\r\n\r\n \r\n#### INSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.6.4.final.0\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 4.10.0-42-generic\r\nmachine: x86_64\r\nprocessor: x86_64\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: en_US.UTF-8\r\n\r\npandas: 0.22.0\r\npytest: 3.7.1\r\npip: 19.0.1\r\nsetuptools: 39.0.1\r\nCython: 0.27.3\r\nnumpy: 1.14.0\r\nscipy: 1.0.0\r\npyarrow: None\r\nxarray: None\r\nIPython: 6.2.1\r\nsphinx: 1.6.6\r\npatsy: 0.5.0\r\ndateutil: 2.6.1\r\npytz: 2017.3\r\nblosc: None\r\nbottleneck: 1.2.1\r\ntables: 3.4.2\r\nnumexpr: 2.6.4\r\nfeather: None\r\nmatplotlib: 2.1.2\r\nopenpyxl: 2.4.10\r\nxlrd: 1.1.0\r\nxlwt: 1.3.0\r\nxlsxwriter: 1.0.2\r\nlxml: 4.1.1\r\nbs4: 4.6.0\r\nhtml5lib: 0.9999999\r\nsqlalchemy: 1.2.1\r\npymysql: None\r\npsycopg2: None\r\njinja2: 2.10\r\ns3fs: None\r\nfastparquet: None\r\npandas_gbq: None\r\npandas_datareader: None\r\n</p>\r\n</details>\r\n\r\n```python\r\nconn = pyexasol.connect_local_config('my_exasol')\r\n# create dummy data on DB\r\nconn.open_schema('abt_ds')\r\nconn.execute(\"delete from test\")\r\nconn.import_from_file('dummy.csv', 'TEST')\r\n```\r\nExporting to pandas without chunking works as expected:\r\n```python\r\nquery = \"select * from test order by id\"\r\ndf = conn.export_to_pandas(query)\r\nprint(df)\r\n```\r\n```bash\r\n   ID  START_DATE\r\n0   1  2018-11-19\r\n1   2  2018-01-10\r\n2   3  2017-07-26\r\n3   4  2018-08-26\r\n```\r\nWith chunking, `pandas` returns a `TextFileReader` (as expected)\r\n```python\r\ncb_params = {'chunksize': 2}\r\ndf_chunks = conn.export_to_pandas(query, callback_params=cb_params)\r\ntype(df_chunks)\r\n```\r\n```bash\r\npandas.io.parsers.TextFileReader\r\n```\r\nHowever, iterating results in an error:\r\n```python\r\nfor chunk in df_chunks:\r\n    print(chunk)\r\n```\r\n<details><summary>Output</summary>\r\n<p>\r\n\r\n#### \r\n```bash\r\n   ID  START_DATE\r\n0   1  2018-11-19\r\n1   2  2018-01-10\r\n   ID  START_DATE\r\n2   3  2017-07-26\r\n3   4  2018-08-26\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-38-c7f26f9d1458> in <module>()\r\n----> 1 for chunk in df_chunks:\r\n      2     print(chunk)\r\n\r\n~/anaconda3/lib/python3.6/site-packages/pandas/io/parsers.py in __next__(self)\r\n   1040     def __next__(self):\r\n   1041         try:\r\n-> 1042             return self.get_chunk()\r\n   1043         except StopIteration:\r\n   1044             self.close()\r\n\r\n~/anaconda3/lib/python3.6/site-packages/pandas/io/parsers.py in get_chunk(self, size)\r\n   1104                 raise StopIteration\r\n   1105             size = min(size, self.nrows - self._currow)\r\n-> 1106         return self.read(nrows=size)\r\n   1107 \r\n   1108 \r\n\r\n~/anaconda3/lib/python3.6/site-packages/pandas/io/parsers.py in read(self, nrows)\r\n   1067                 raise ValueError('skipfooter not supported for iteration')\r\n   1068 \r\n-> 1069         ret = self._engine.read(nrows)\r\n   1070 \r\n   1071         if self.options.get('as_recarray'):\r\n\r\n~/anaconda3/lib/python3.6/site-packages/pandas/io/parsers.py in read(self, nrows)\r\n   1837     def read(self, nrows=None):\r\n   1838         try:\r\n-> 1839             data = self._reader.read(nrows)\r\n   1840         except StopIteration:\r\n   1841             if self._first_chunk:\r\n\r\npandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()\r\n\r\npandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()\r\n\r\npandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()\r\n\r\npandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()\r\n\r\npandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()\r\n\r\nValueError: I/O operation on closed file\r\n```\r\n</p>\r\n</details>\r\n\r\nMy impression is that under the hood `pandas.read_csv` receives an open pipe, however this pipe is closed before the output of `pandas.read_csv` is returned to the caller of `ExaConnection.export_to_pandas`.\r\n\r\nActually, you can reproduce this type of error with `pandas` alone:\r\n```python\r\n# good\r\nwith open('dummy2.csv') as file:\r\n    my_df = pandas.read_csv(file, chunksize=2)\r\n    for chunk in my_df:\r\n        print(chunk)\r\n```\r\n```bash\r\n   ID        DATE\r\n0   1  2018-11-19\r\n1   2  2018-01-10\r\n   ID        DATE\r\n2   3  2017-07-26\r\n3   4  2018-08-26\r\n```\r\n```python\r\n# bad\r\nwith open('dummy2.csv') as file:\r\n    my_df = pandas.read_csv(file, chunksize=2)\r\nfor chunk in my_df:\r\n    print(chunk)\r\n```\r\n\r\n<details><summary>Output</summary>\r\n<p>\r\n\r\n#### \r\n```bash\r\n   ID        DATE\r\n0   1  2018-11-19\r\n1   2  2018-01-10\r\n   ID        DATE\r\n2   3  2017-07-26\r\n3   4  2018-08-26\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-57-ce497a3f68b5> in <module>()\r\n      2 with open('dummy2.csv') as file:\r\n      3     my_df = pandas.read_csv(file, chunksize=2)\r\n----> 4 for chunk in my_df:\r\n      5     print(chunk)\r\n\r\n~/anaconda3/lib/python3.6/site-packages/pandas/io/parsers.py in __next__(self)\r\n   1040     def __next__(self):\r\n   1041         try:\r\n-> 1042             return self.get_chunk()\r\n   1043         except StopIteration:\r\n   1044             self.close()\r\n\r\n~/anaconda3/lib/python3.6/site-packages/pandas/io/parsers.py in get_chunk(self, size)\r\n   1104                 raise StopIteration\r\n   1105             size = min(size, self.nrows - self._currow)\r\n-> 1106         return self.read(nrows=size)\r\n   1107 \r\n   1108 \r\n\r\n~/anaconda3/lib/python3.6/site-packages/pandas/io/parsers.py in read(self, nrows)\r\n   1067                 raise ValueError('skipfooter not supported for iteration')\r\n   1068 \r\n-> 1069         ret = self._engine.read(nrows)\r\n   1070 \r\n   1071         if self.options.get('as_recarray'):\r\n\r\n~/anaconda3/lib/python3.6/site-packages/pandas/io/parsers.py in read(self, nrows)\r\n   1837     def read(self, nrows=None):\r\n   1838         try:\r\n-> 1839             data = self._reader.read(nrows)\r\n   1840         except StopIteration:\r\n   1841             if self._first_chunk:\r\n\r\npandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader.read()\r\n\r\npandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_low_memory()\r\n\r\npandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._read_rows()\r\n\r\npandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._tokenize_rows()\r\n\r\npandas/_libs/parsers.pyx in pandas._libs.parsers.raise_parser_error()\r\n\r\nValueError: I/O operation on closed file.\r\n```\r\n</p>\r\n</details>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/18", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/18/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/18/events", "html_url": "https://github.com/badoo/pyexasol/issues/18", "id": 418387449, "node_id": "MDU6SXNzdWU0MTgzODc0NDk=", "number": 18, "title": "import_from_file destination formatting", "user": {"login": "mplunney", "id": 11544824, "node_id": "MDQ6VXNlcjExNTQ0ODI0", "avatar_url": "https://avatars1.githubusercontent.com/u/11544824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mplunney", "html_url": "https://github.com/mplunney", "followers_url": "https://api.github.com/users/mplunney/followers", "following_url": "https://api.github.com/users/mplunney/following{/other_user}", "gists_url": "https://api.github.com/users/mplunney/gists{/gist_id}", "starred_url": "https://api.github.com/users/mplunney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mplunney/subscriptions", "organizations_url": "https://api.github.com/users/mplunney/orgs", "repos_url": "https://api.github.com/users/mplunney/repos", "events_url": "https://api.github.com/users/mplunney/events{/privacy}", "received_events_url": "https://api.github.com/users/mplunney/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-07T16:02:07Z", "updated_at": "2019-03-08T13:45:55Z", "closed_at": "2019-03-08T13:45:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I am working on an ETL process to import csv and xlsx data into our Exasol data warehouse. I am able to successfully load the data using pyexasol, but I'm having trouble attempting to get it into a destination table that is not all caps (our database nomenclature uses camel case). \r\n\r\nI have tried the `quote_ident` function, but it returns the same `Value [\"TestTable\"] is not a safe identifier` exception that just passing `'\"TestTable\"'` as the destination table argument to the `import_from_file` function does.\r\n\r\nAm I misunderstanding the purpose of this function? Or am I not using it properly? I've been through all of the documentation, but haven't found a way to import with this package to a destination with lower case characters in the string.\r\n\r\n```\r\ncnxn.import_from_file(open(importFile, 'rb'), '\"TestTable\"')\r\n```\r\n```\r\ndest = pyexasol.ExaFormatter.quote_ident('TestTable')\r\ncnxn.import_from_file(open(importFile, 'rb'), dest)\r\n```\r\n\r\nMany thanks for any advice you can give.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/17", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/17/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/17/events", "html_url": "https://github.com/badoo/pyexasol/issues/17", "id": 416551185, "node_id": "MDU6SXNzdWU0MTY1NTExODU=", "number": 17, "title": "Pandas import error ", "user": {"login": "Salehflaconi", "id": 46321953, "node_id": "MDQ6VXNlcjQ2MzIxOTUz", "avatar_url": "https://avatars3.githubusercontent.com/u/46321953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Salehflaconi", "html_url": "https://github.com/Salehflaconi", "followers_url": "https://api.github.com/users/Salehflaconi/followers", "following_url": "https://api.github.com/users/Salehflaconi/following{/other_user}", "gists_url": "https://api.github.com/users/Salehflaconi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Salehflaconi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Salehflaconi/subscriptions", "organizations_url": "https://api.github.com/users/Salehflaconi/orgs", "repos_url": "https://api.github.com/users/Salehflaconi/repos", "events_url": "https://api.github.com/users/Salehflaconi/events{/privacy}", "received_events_url": "https://api.github.com/users/Salehflaconi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2019-03-03T19:09:44Z", "updated_at": "2019-06-26T14:05:37Z", "closed_at": "2019-06-26T14:05:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using the below script to move the data from local file into exasol \r\nThe error appears in the import part \r\n\r\nimport boto3\r\nimport botocore\r\nimport pyexasol\r\nimport pandas as pd\r\nimport exa_cred as exa\r\nimport Bucket_info as Bk_info\r\nimport datetime\r\nimport pandas as pd\r\nimport base64\r\n\r\n#reading credential info and bucket info from local file\r\nexuser = exa.cred['exuser']\r\nexpwd = exa.cred['expwd']\r\nexdsn = exa.cred['exdsn']\r\nschema=exa.cred['schema']\r\n\r\nC = pyexasol.connect(dsn=exdsn, user=exuser, password=expwd,schema=schema)\r\n\r\n#Bucket information\r\nBucket = Bucket_name\r\nKey = \"file.csv\"\r\noutPutName = \"file.csv\"\r\n\r\n#Handling exception of not found and downloading the file locally\r\ns3 = boto3.resource('s3')\r\ntry:\r\n    s3.Bucket(Bucket).download_file(Key, outPutName)\r\nexcept botocore.exceptions.ClientError as e:\r\n    if e.response['Error']['Code'] == \"404\":\r\n        print(\"The object does not exist.\")\r\n    else:\r\n        raise\r\n\r\n#reading the data with pandas\r\nprint(str(datetime.datetime.now()) + \" - Start script ...\\n\")\r\n\r\ndf=pd.DataFrame\r\ndf =pd.read_csv(outPutName,delimiter=';',skipinitialspace=True,engine='python', quotechar ='\"')\r\n\r\nprint(\"Testing that pandas is working\")\r\nprint(df.head(10))\r\n\r\n#Import part of pandas DataFrame into Exasol table\r\nprint(df.iloc[[0,1], [0,1,2]])\r\nC.import_from_pandas(df.iloc[[0], [0,1,2]], 'file')\r\n### Import Error  which is \r\n\r\nTraceback (most recent call last):\r\n  File \"C:/...../script.py\", line 55, in <module>\r\n    C.import_from_pandas(df.iloc[[0], [0,1,2]], 'script')\r\n  File \"C:....\\lib\\site-packages\\pyexasol\\connection.py\", line 213, in import_from_pandas\r\n    return self.import_from_callback(cb.import_from_pandas, src, table, callback_params)\r\n  File \"C:\\lib\\site-packages\\pyexasol\\connection.py\", line 300, in import_from_callback\r\n    raise sql_thread.exc\r\n  File \"C:\\...\\site-packages\\pyexasol\\connection.py\", line 290, in import_from_callback\r\n    sql_thread.join()\r\n  File \"C:\\...\\site-packages\\pyexasol\\http_transport.py\", line 53, in join\r\n    raise self.exc\r\n  File \"C:\\...\\site-packages\\pyexasol\\http_transport.py\", line 37, in run\r\n    self.run_sql()\r\n  File \"C:\\...\\site-packages\\pyexasol\\http_transport.py\", line 165, in run_sql\r\n    self.connection.execute(query)\r\n  File \"C:\\...\\site-packages\\pyexasol\\connection.py\", line 140, in execute\r\n    self.last_stmt = self.cls_statement(self, query, query_params)\r\n  File \"C:\\...\\site-packages\\pyexasol\\statement.py\", line 47, in __init__\r\n    self._execute()\r\n  File \"C:\\.....\\statement.py\", line 141, in _execute\r\n    'sqlText': self.query,\r\n  File \"C:\\...\\site-packages\\pyexasol\\connection.py\", line 442, in req\r\n    raise cls_err(self, req['sqlText'], ret['exception']['sqlCode'], ret['exception']['text'])\r\npyexasol.exceptions.ExaQueryError: \r\n(\r\n'] (Session: xxxx)\r\n    dsn         =>  xxxx\r\n    user        =>  xxxx\r\n    schema      =>  xxxx\r\n    code        =>  xxxx\r\n    session_id  =>  xxxx\r\n    query       =>  xxxx \r\nAT 'Server_IP:port' FILE '000.csv'\r\n)\r\n\r\n\r\nProcess finished with exit code 1\r\n\r\nFollowing versions are used:\r\nExasol = 6.0.8\r\nPython = Python 3.7.2\r\nrsa = 3.4.2\r\npandas = 0.24.1\r\nwebsocket-client = 0.55.0\r\npyexasol    =  0.5.2\r\nOS = Windows ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/14", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/14/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/14/events", "html_url": "https://github.com/badoo/pyexasol/issues/14", "id": 402649175, "node_id": "MDU6SXNzdWU0MDI2NDkxNzU=", "number": 14, "title": "How to use pyexasol behind a proxy", "user": {"login": "kst83", "id": 3646748, "node_id": "MDQ6VXNlcjM2NDY3NDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3646748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kst83", "html_url": "https://github.com/kst83", "followers_url": "https://api.github.com/users/kst83/followers", "following_url": "https://api.github.com/users/kst83/following{/other_user}", "gists_url": "https://api.github.com/users/kst83/gists{/gist_id}", "starred_url": "https://api.github.com/users/kst83/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kst83/subscriptions", "organizations_url": "https://api.github.com/users/kst83/orgs", "repos_url": "https://api.github.com/users/kst83/repos", "events_url": "https://api.github.com/users/kst83/events{/privacy}", "received_events_url": "https://api.github.com/users/kst83/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-24T10:51:41Z", "updated_at": "2019-02-06T13:17:56Z", "closed_at": "2019-02-06T13:17:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to use pyexasol behind a proxy?\r\nIf it is, how do you pass the proxy to pyexasol.connect?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/13", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/13/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/13/events", "html_url": "https://github.com/badoo/pyexasol/issues/13", "id": 390703881, "node_id": "MDU6SXNzdWUzOTA3MDM4ODE=", "number": 13, "title": "Ignore duplicates on import_from_iterable", "user": {"login": "kst83", "id": 3646748, "node_id": "MDQ6VXNlcjM2NDY3NDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3646748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kst83", "html_url": "https://github.com/kst83", "followers_url": "https://api.github.com/users/kst83/followers", "following_url": "https://api.github.com/users/kst83/following{/other_user}", "gists_url": "https://api.github.com/users/kst83/gists{/gist_id}", "starred_url": "https://api.github.com/users/kst83/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kst83/subscriptions", "organizations_url": "https://api.github.com/users/kst83/orgs", "repos_url": "https://api.github.com/users/kst83/repos", "events_url": "https://api.github.com/users/kst83/events{/privacy}", "received_events_url": "https://api.github.com/users/kst83/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-13T14:29:50Z", "updated_at": "2019-02-06T13:18:11Z", "closed_at": "2019-02-06T13:18:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nis there a way to ignore/not insert entries with duplicate primary keys when using import_from_iterable?\r\n\r\nBest regards\r\nNiklaus", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/12", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/12/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/12/events", "html_url": "https://github.com/badoo/pyexasol/issues/12", "id": 347292491, "node_id": "MDU6SXNzdWUzNDcyOTI0OTE=", "number": 12, "title": "Pyexasol crashed in Kubernete due to incorrectly identified as orphaned process", "user": {"login": "superoverflow", "id": 25377610, "node_id": "MDQ6VXNlcjI1Mzc3NjEw", "avatar_url": "https://avatars1.githubusercontent.com/u/25377610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/superoverflow", "html_url": "https://github.com/superoverflow", "followers_url": "https://api.github.com/users/superoverflow/followers", "following_url": "https://api.github.com/users/superoverflow/following{/other_user}", "gists_url": "https://api.github.com/users/superoverflow/gists{/gist_id}", "starred_url": "https://api.github.com/users/superoverflow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/superoverflow/subscriptions", "organizations_url": "https://api.github.com/users/superoverflow/orgs", "repos_url": "https://api.github.com/users/superoverflow/repos", "events_url": "https://api.github.com/users/superoverflow/events{/privacy}", "received_events_url": "https://api.github.com/users/superoverflow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-03T07:41:23Z", "updated_at": "2018-08-13T11:03:10Z", "closed_at": "2018-08-13T11:03:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "When running pyexasol inside a kubernete pod, pyexasol crashed as it incorrectly identified the process as an orphan. This behavior was introduced in commit \r\n> 39d8ae3688510f9c5f04465a0d4bf4591b73e478\r\n\r\nPlease see below for more details for the error:\r\n\r\n```\r\nRuntimeError: Current process is orphaned, ppid=1\r\nat check_orphaned (/usr/local/lib/python3.6/site-packages/pyexasol/utils.py:120)\r\nat handle_request (/usr/local/lib/python3.6/site-packages/pyexasol/http_transport.py:245)\r\nat <module> (/usr/local/lib/python3.6/site-packages/pyexasol/__main__.py:43)\r\n\r\n```\r\n\r\nBelow is the ps stack for the kube pod\r\n```\r\n$ kubectl exec my-pod -- ps -ef\r\nUID        PID  PPID C STIME TTY          TIME CMD\r\nroot        1     0  0 22:07 ?        00:00:01 python some.py\r\nroot        8     1  2 22:07 ?        00:00:01 /usr/local/bin/python -m pyexasol http --host x.x.x.x --port yyyy --mode export\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/9", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/9/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/9/events", "html_url": "https://github.com/badoo/pyexasol/issues/9", "id": 336593242, "node_id": "MDU6SXNzdWUzMzY1OTMyNDI=", "number": 9, "title": "stderr does not work with Jupyter Notebooks", "user": {"login": "cal859", "id": 11082585, "node_id": "MDQ6VXNlcjExMDgyNTg1", "avatar_url": "https://avatars0.githubusercontent.com/u/11082585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cal859", "html_url": "https://github.com/cal859", "followers_url": "https://api.github.com/users/cal859/followers", "following_url": "https://api.github.com/users/cal859/following{/other_user}", "gists_url": "https://api.github.com/users/cal859/gists{/gist_id}", "starred_url": "https://api.github.com/users/cal859/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cal859/subscriptions", "organizations_url": "https://api.github.com/users/cal859/orgs", "repos_url": "https://api.github.com/users/cal859/repos", "events_url": "https://api.github.com/users/cal859/events{/privacy}", "received_events_url": "https://api.github.com/users/cal859/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-28T12:06:37Z", "updated_at": "2018-07-02T10:10:17Z", "closed_at": "2018-06-28T14:11:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nSince the most recent update of pyexasol (0.3.26), the use of stderr means pyexasol is no longer able to import data into a jupyter notebook.\r\n\r\nPlease see below the full error readout:\r\n\r\n```py\r\n~/venvp3/lib/python3.6/site-packages/pyexasol/connection.py in export_to_pandas(self, query_or_table, query_params, callback_params)\r\n    211 \r\n    212     def export_to_pandas(self, query_or_table, query_params=None, callback_params=None):\r\n--> 213         return self.export_to_callback(cb.export_to_pandas, None, query_or_table, query_params, callback_params, {'with_column_names': True})\r\n    214 \r\n    215     def import_from_file(self, src, table, import_params=None):\r\n\r\n~/venvp3/lib/python3.6/site-packages/pyexasol/connection.py in export_to_callback(self, callback, dst, query_or_table, query_params, callback_params, export_params)\r\n    266                 raise sql_thread.exc\r\n    267 \r\n--> 268             raise e\r\n    269 \r\n    270     def import_from_callback(self, callback, src, table, callback_params=None, import_params=None):\r\n\r\n~/venvp3/lib/python3.6/site-packages/pyexasol/connection.py in export_to_callback(self, callback, dst, query_or_table, query_params, callback_params, export_params)\r\n    244         try:\r\n    245             http_proc = ExaHTTPProcess(self.ws_host, self.ws_port, compression, self.encryption, HTTP_EXPORT)\r\n--> 246             http_proc.start()\r\n    247 \r\n    248             sql_thread = ExaSQLExportThread(self, http_proc.get_proxy(), compression, query_or_table, export_params)\r\n\r\n~/venvp3/lib/python3.6/site-packages/pyexasol/http_transport.py in start(self)\r\n    199             args.append('--encryption')\r\n    200 \r\n--> 201         self.proc = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=sys.stderr)\r\n    202         self.proxy = self.proc.stdout.readline().decode().rstrip('\\n')\r\n    203 \r\n\r\n/usr/local/Cellar/python/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/subprocess.py in __init__(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags, restore_signals, start_new_session, pass_fds, encoding, errors)\r\n    665         (p2cread, p2cwrite,\r\n    666          c2pread, c2pwrite,\r\n--> 667          errread, errwrite) = self._get_handles(stdin, stdout, stderr)\r\n    668 \r\n    669         # We wrap OS handles *before* launching the child, otherwise a\r\n\r\n/usr/local/Cellar/python/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/subprocess.py in _get_handles(self, stdin, stdout, stderr)\r\n   1199             else:\r\n   1200                 # Assuming file-like object\r\n-> 1201                 errwrite = stderr.fileno()\r\n   1202 \r\n   1203             return (p2cread, p2cwrite,\r\n\r\nUnsupportedOperation: fileno\r\n```\r\n\r\nI encountered this error when trying to use the 'export_to_pandas' function.\r\n\r\nThis error should be reproducible for a simple select statement, ie\r\n\r\n``` \r\nselect 1 from dual \r\n``` \r\n\r\nThanks!\r\n\r\nPython Version - 3.6.3\r\npyexasol version - 0.3.26\r\nPandas Version - 0.23.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/7", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/7/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/7/events", "html_url": "https://github.com/badoo/pyexasol/issues/7", "id": 332995551, "node_id": "MDU6SXNzdWUzMzI5OTU1NTE=", "number": 7, "title": "Pandas import/export throws cannot serialize error", "user": {"login": "BeatTheBookie", "id": 29930054, "node_id": "MDQ6VXNlcjI5OTMwMDU0", "avatar_url": "https://avatars2.githubusercontent.com/u/29930054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BeatTheBookie", "html_url": "https://github.com/BeatTheBookie", "followers_url": "https://api.github.com/users/BeatTheBookie/followers", "following_url": "https://api.github.com/users/BeatTheBookie/following{/other_user}", "gists_url": "https://api.github.com/users/BeatTheBookie/gists{/gist_id}", "starred_url": "https://api.github.com/users/BeatTheBookie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BeatTheBookie/subscriptions", "organizations_url": "https://api.github.com/users/BeatTheBookie/orgs", "repos_url": "https://api.github.com/users/BeatTheBookie/repos", "events_url": "https://api.github.com/users/BeatTheBookie/events{/privacy}", "received_events_url": "https://api.github.com/users/BeatTheBookie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-06-16T15:43:36Z", "updated_at": "2019-03-03T18:18:49Z", "closed_at": "2018-06-19T16:57:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following script:\r\n\r\nimport pyexasol\r\nimport json\r\nimport pandas\r\n\r\nCon = pyexasol.connect(dsn='*********:8563', user='***', password = '***')\r\n\r\n##serialize error\r\ndata_frame = Con.export_to_pandas(\"SELECT * FROM STAGE.SQUAWKA_CUR_FIXTURES\")\r\n\r\n##works\r\n#st = Con.execute(\"SELECT * FROM STAGE.SQUAWKA_CUR_FIXTURES\")\r\n#data_frame = pandas.DataFrame(data=st.fetchall())\r\n\r\n\r\nprint(data_frame.head())\r\n\r\n##serialize error\r\n#Con.import_from_pandas(data_frame,'sandbox.cur_fixtures')\r\n\r\n##serialize error\r\n#Con.import_from_iterable(data_frame.iterrows(),'sandbox.cur_fixtures')\r\n\r\n\r\nthrows error, when trying to export or import data into a pandas data frame.\r\nUsing the fetchall() method works and data can be loaded into a data frame.\r\n\r\nFollowing trace is shown:\r\n\r\nC:\\Programmel\\Continuum\\Anaconda3\\envs\\tensorflow\\python.exe \"C:/Users/ado/Documents/betting db/099_dokumentation/Python/test.py\"\r\nTraceback (most recent call last):\r\n  File \"C:/Users/ado/Documents/betting db/099_dokumentation/Python/test.py\", line 8, in <module>\r\n    data_frame = Con.export_to_pandas(\"SELECT * FROM STAGE.SQUAWKA_CUR_FIXTURES\")\r\n  File \"C:\\Programmel\\Continuum\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\pyexasol\\connection.py\", line 205, in export_to_pandas\r\n    return self.export_to_callback(cb.export_to_pandas, None, query_or_table, query_params, callback_params, {'with_column_names': True})\r\n  File \"C:\\Programmel\\Continuum\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\pyexasol\\connection.py\", line 260, in export_to_callback\r\n    raise e\r\n  File \"C:\\Programmel\\Continuum\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\pyexasol\\connection.py\", line 238, in export_to_callback\r\n    http_proc.start()\r\n  File \"C:\\Programmel\\Continuum\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\pyexasol\\http_transport.py\", line 213, in start\r\n    super().start()\r\n  File \"C:\\Programmel\\Continuum\\Anaconda3\\envs\\tensorflow\\lib\\multiprocessing\\process.py\", line 105, in start\r\n    self._popen = self._Popen(self)\r\n  File \"C:\\Programmel\\Continuum\\Anaconda3\\envs\\tensorflow\\lib\\multiprocessing\\context.py\", line 223, in _Popen\r\n    return _default_context.get_context().Process._Popen(process_obj)\r\n  File \"C:\\Programmel\\Continuum\\Anaconda3\\envs\\tensorflow\\lib\\multiprocessing\\context.py\", line 322, in _Popen\r\n    return Popen(process_obj)\r\n  File \"C:\\Programmel\\Continuum\\Anaconda3\\envs\\tensorflow\\lib\\multiprocessing\\popen_spawn_win32.py\", line 65, in __init__\r\n    reduction.dump(process_obj, to_child)\r\n  File \"C:\\Programmel\\Continuum\\Anaconda3\\envs\\tensorflow\\lib\\multiprocessing\\reduction.py\", line 60, in dump\r\n    ForkingPickler(file, protocol).dump(obj)\r\nTypeError: cannot serialize '_io.FileIO' object\r\n\r\nProcess finished with exit code 1\r\n\r\n\r\n\r\nFollowing versions are used:\r\nExasol = 6.0.0\r\nPython = 3.6.5\r\nrsa = 3.4.2\r\npandas = 0.23.0\r\nwebsocket-client = 0.48.0\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/badoo/pyexasol/issues/5", "repository_url": "https://api.github.com/repos/badoo/pyexasol", "labels_url": "https://api.github.com/repos/badoo/pyexasol/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/badoo/pyexasol/issues/5/comments", "events_url": "https://api.github.com/repos/badoo/pyexasol/issues/5/events", "html_url": "https://github.com/badoo/pyexasol/issues/5", "id": 315912881, "node_id": "MDU6SXNzdWUzMTU5MTI4ODE=", "number": 5, "title": "get_disk_space_usage() is failing if Exasol has just started", "user": {"login": "expobrain", "id": 2404909, "node_id": "MDQ6VXNlcjI0MDQ5MDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2404909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/expobrain", "html_url": "https://github.com/expobrain", "followers_url": "https://api.github.com/users/expobrain/followers", "following_url": "https://api.github.com/users/expobrain/following{/other_user}", "gists_url": "https://api.github.com/users/expobrain/gists{/gist_id}", "starred_url": "https://api.github.com/users/expobrain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/expobrain/subscriptions", "organizations_url": "https://api.github.com/users/expobrain/orgs", "repos_url": "https://api.github.com/users/expobrain/repos", "events_url": "https://api.github.com/users/expobrain/events{/privacy}", "received_events_url": "https://api.github.com/users/expobrain/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-19T14:51:32Z", "updated_at": "2018-04-20T11:07:43Z", "closed_at": "2018-04-20T11:07:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The function `get_disk_space_usage()` in `ext.py` fails with:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"examples/13_ext.py\", line 36, in <module>\r\n    occupied_space = C.ext.get_disk_space_usage()\r\n  File \"/home/travis/build/expobrain/pyexasol/pyexasol/ext.py\", line 200, in get_disk_space_usage\r\n    row['occupied_size'] = int(row['occupied_size'])\r\nTypeError: 'NoneType' object is not subscriptable\r\n```\r\n\r\nif Exasol has just started and the `$EXA_STATS_DB_SIZE` table is stil empty.", "performed_via_github_app": null, "score": 1.0}]}