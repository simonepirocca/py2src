{"total_count": 35, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/revsys/django-test-plus/issues/133", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/133/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/133/events", "html_url": "https://github.com/revsys/django-test-plus/issues/133", "id": 668395979, "node_id": "MDU6SXNzdWU2NjgzOTU5Nzk=", "number": 133, "title": "Something broke?", "user": {"login": "simkimsia", "id": 245021, "node_id": "MDQ6VXNlcjI0NTAyMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/245021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simkimsia", "html_url": "https://github.com/simkimsia", "followers_url": "https://api.github.com/users/simkimsia/followers", "following_url": "https://api.github.com/users/simkimsia/following{/other_user}", "gists_url": "https://api.github.com/users/simkimsia/gists{/gist_id}", "starred_url": "https://api.github.com/users/simkimsia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simkimsia/subscriptions", "organizations_url": "https://api.github.com/users/simkimsia/orgs", "repos_url": "https://api.github.com/users/simkimsia/repos", "events_url": "https://api.github.com/users/simkimsia/events{/privacy}", "received_events_url": "https://api.github.com/users/simkimsia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-30T05:56:54Z", "updated_at": "2020-07-31T14:51:05Z", "closed_at": "2020-07-30T13:46:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "![image](https://user-images.githubusercontent.com/245021/88886122-65890180-d26c-11ea-9085-077118f8f27b.png)\r\n\r\nI am having this issue when I build. Did something break recently? Because my last build at 3 days ago was fine using the same version of django-test-plus\r\n\r\n3 days ago\r\n\r\n![image](https://user-images.githubusercontent.com/245021/88886684-9c134c00-d26d-11ea-996f-8a1bfb065f9f.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/113", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/113/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/113/events", "html_url": "https://github.com/revsys/django-test-plus/issues/113", "id": 531498599, "node_id": "MDU6SXNzdWU1MzE0OTg1OTk=", "number": 113, "title": "Django 3.0 support", "user": {"login": "laactech", "id": 38537239, "node_id": "MDQ6VXNlcjM4NTM3MjM5", "avatar_url": "https://avatars3.githubusercontent.com/u/38537239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laactech", "html_url": "https://github.com/laactech", "followers_url": "https://api.github.com/users/laactech/followers", "following_url": "https://api.github.com/users/laactech/following{/other_user}", "gists_url": "https://api.github.com/users/laactech/gists{/gist_id}", "starred_url": "https://api.github.com/users/laactech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laactech/subscriptions", "organizations_url": "https://api.github.com/users/laactech/orgs", "repos_url": "https://api.github.com/users/laactech/repos", "events_url": "https://api.github.com/users/laactech/events{/privacy}", "received_events_url": "https://api.github.com/users/laactech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-02T19:48:09Z", "updated_at": "2019-12-17T15:27:31Z", "closed_at": "2019-12-03T15:21:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for this package. It has made testing django a lot easier.\r\n\r\n- **OS version and name**: Ubuntu 18.04\r\n- **python version**: 3.8\r\n- **django version**: 3.0\r\n- **django-test-plus version**: 1.3.1\r\n\r\nWhen I attempt to run my test suite, I receive this error\r\n\r\n```python\r\nImportError: cannot import name 'curry' from 'django.utils.functional'\r\n```\r\nI believe that Django 3.0 removes this due to the drop in Python 2 support.\r\n\r\nhttps://docs.djangoproject.com/en/3.0/releases/3.0/#removed-private-python-2-compatibility-apis\r\n\r\nTo achieve Django 3.0 support, I believe this will have to be removed.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/104", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/104/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/104/events", "html_url": "https://github.com/revsys/django-test-plus/issues/104", "id": 487664102, "node_id": "MDU6SXNzdWU0ODc2NjQxMDI=", "number": 104, "title": "Re-add older `response_200*` methods to docs", "user": {"login": "frankwiles", "id": 144159, "node_id": "MDQ6VXNlcjE0NDE1OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/144159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frankwiles", "html_url": "https://github.com/frankwiles", "followers_url": "https://api.github.com/users/frankwiles/followers", "following_url": "https://api.github.com/users/frankwiles/following{/other_user}", "gists_url": "https://api.github.com/users/frankwiles/gists{/gist_id}", "starred_url": "https://api.github.com/users/frankwiles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frankwiles/subscriptions", "organizations_url": "https://api.github.com/users/frankwiles/orgs", "repos_url": "https://api.github.com/users/frankwiles/repos", "events_url": "https://api.github.com/users/frankwiles/events{/privacy}", "received_events_url": "https://api.github.com/users/frankwiles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "frankwiles", "id": 144159, "node_id": "MDQ6VXNlcjE0NDE1OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/144159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frankwiles", "html_url": "https://github.com/frankwiles", "followers_url": "https://api.github.com/users/frankwiles/followers", "following_url": "https://api.github.com/users/frankwiles/following{/other_user}", "gists_url": "https://api.github.com/users/frankwiles/gists{/gist_id}", "starred_url": "https://api.github.com/users/frankwiles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frankwiles/subscriptions", "organizations_url": "https://api.github.com/users/frankwiles/orgs", "repos_url": "https://api.github.com/users/frankwiles/repos", "events_url": "https://api.github.com/users/frankwiles/events{/privacy}", "received_events_url": "https://api.github.com/users/frankwiles/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "frankwiles", "id": 144159, "node_id": "MDQ6VXNlcjE0NDE1OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/144159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frankwiles", "html_url": "https://github.com/frankwiles", "followers_url": "https://api.github.com/users/frankwiles/followers", "following_url": "https://api.github.com/users/frankwiles/following{/other_user}", "gists_url": "https://api.github.com/users/frankwiles/gists{/gist_id}", "starred_url": "https://api.github.com/users/frankwiles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frankwiles/subscriptions", "organizations_url": "https://api.github.com/users/frankwiles/orgs", "repos_url": "https://api.github.com/users/frankwiles/repos", "events_url": "https://api.github.com/users/frankwiles/events{/privacy}", "received_events_url": "https://api.github.com/users/frankwiles/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-08-30T20:44:27Z", "updated_at": "2019-10-03T21:18:50Z", "closed_at": "2019-10-03T21:18:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/99", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/99/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/99/events", "html_url": "https://github.com/revsys/django-test-plus/issues/99", "id": 474767372, "node_id": "MDU6SXNzdWU0NzQ3NjczNzI=", "number": 99, "title": "pytest support for DRF", "user": {"login": "jefftriplett", "id": 50527, "node_id": "MDQ6VXNlcjUwNTI3", "avatar_url": "https://avatars1.githubusercontent.com/u/50527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jefftriplett", "html_url": "https://github.com/jefftriplett", "followers_url": "https://api.github.com/users/jefftriplett/followers", "following_url": "https://api.github.com/users/jefftriplett/following{/other_user}", "gists_url": "https://api.github.com/users/jefftriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/jefftriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jefftriplett/subscriptions", "organizations_url": "https://api.github.com/users/jefftriplett/orgs", "repos_url": "https://api.github.com/users/jefftriplett/repos", "events_url": "https://api.github.com/users/jefftriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/jefftriplett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-30T19:02:29Z", "updated_at": "2019-07-31T16:50:19Z", "closed_at": "2019-07-31T16:50:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Current, django-test-plus's pytest support defaults to the Django-friendly `BaseTestCase` whereas for DRF support, we need a DRF-friendly `APITestCase`. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/91", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/91/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/91/events", "html_url": "https://github.com/revsys/django-test-plus/issues/91", "id": 453415965, "node_id": "MDU6SXNzdWU0NTM0MTU5NjU=", "number": 91, "title": "Support for django 2.2", "user": {"login": "simkimsia", "id": 245021, "node_id": "MDQ6VXNlcjI0NTAyMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/245021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simkimsia", "html_url": "https://github.com/simkimsia", "followers_url": "https://api.github.com/users/simkimsia/followers", "following_url": "https://api.github.com/users/simkimsia/following{/other_user}", "gists_url": "https://api.github.com/users/simkimsia/gists{/gist_id}", "starred_url": "https://api.github.com/users/simkimsia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simkimsia/subscriptions", "organizations_url": "https://api.github.com/users/simkimsia/orgs", "repos_url": "https://api.github.com/users/simkimsia/repos", "events_url": "https://api.github.com/users/simkimsia/events{/privacy}", "received_events_url": "https://api.github.com/users/simkimsia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-07T09:17:04Z", "updated_at": "2019-06-26T20:05:27Z", "closed_at": "2019-06-26T20:05:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Think this is already working in 2.2 Django but not updated the tox in a way that works with the cloud ci builder", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/90", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/90/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/90/events", "html_url": "https://github.com/revsys/django-test-plus/issues/90", "id": 443444307, "node_id": "MDU6SXNzdWU0NDM0NDQzMDc=", "number": 90, "title": "Latest PyPI version (1.2.0) not in CHANGELOG", "user": {"login": "adamzap", "id": 101698, "node_id": "MDQ6VXNlcjEwMTY5OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/101698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamzap", "html_url": "https://github.com/adamzap", "followers_url": "https://api.github.com/users/adamzap/followers", "following_url": "https://api.github.com/users/adamzap/following{/other_user}", "gists_url": "https://api.github.com/users/adamzap/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamzap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamzap/subscriptions", "organizations_url": "https://api.github.com/users/adamzap/orgs", "repos_url": "https://api.github.com/users/adamzap/repos", "events_url": "https://api.github.com/users/adamzap/events{/privacy}", "received_events_url": "https://api.github.com/users/adamzap/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-13T14:52:58Z", "updated_at": "2019-06-24T14:57:40Z", "closed_at": "2019-06-24T14:57:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version 1.2.0 is the latest on PyPI, but the CHANGELOG skips from 1.1.1 to 1.2.1.\r\n\r\nThanks for a great project!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/87", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/87/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/87/events", "html_url": "https://github.com/revsys/django-test-plus/issues/87", "id": 406511098, "node_id": "MDU6SXNzdWU0MDY1MTEwOTg=", "number": 87, "title": "Consider making make_user a class based method on TestCase class", "user": {"login": "avelis", "id": 181597, "node_id": "MDQ6VXNlcjE4MTU5Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/181597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avelis", "html_url": "https://github.com/avelis", "followers_url": "https://api.github.com/users/avelis/followers", "following_url": "https://api.github.com/users/avelis/following{/other_user}", "gists_url": "https://api.github.com/users/avelis/gists{/gist_id}", "starred_url": "https://api.github.com/users/avelis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avelis/subscriptions", "organizations_url": "https://api.github.com/users/avelis/orgs", "repos_url": "https://api.github.com/users/avelis/repos", "events_url": "https://api.github.com/users/avelis/events{/privacy}", "received_events_url": "https://api.github.com/users/avelis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-04T20:44:15Z", "updated_at": "2019-02-18T14:38:03Z", "closed_at": "2019-02-18T14:38:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "The intention here to be able to use `make_user` in `setupUpTestData` vs `setUp`. There are scenarios where between tests the user object created does not need to change or be created for every single test.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/86", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/86/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/86/events", "html_url": "https://github.com/revsys/django-test-plus/issues/86", "id": 399079254, "node_id": "MDU6SXNzdWUzOTkwNzkyNTQ=", "number": 86, "title": "More intuitive http response assertions", "user": {"login": "epicserve", "id": 191620, "node_id": "MDQ6VXNlcjE5MTYyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/191620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epicserve", "html_url": "https://github.com/epicserve", "followers_url": "https://api.github.com/users/epicserve/followers", "following_url": "https://api.github.com/users/epicserve/following{/other_user}", "gists_url": "https://api.github.com/users/epicserve/gists{/gist_id}", "starred_url": "https://api.github.com/users/epicserve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epicserve/subscriptions", "organizations_url": "https://api.github.com/users/epicserve/orgs", "repos_url": "https://api.github.com/users/epicserve/repos", "events_url": "https://api.github.com/users/epicserve/events{/privacy}", "received_events_url": "https://api.github.com/users/epicserve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-01-14T21:23:40Z", "updated_at": "2019-08-30T21:11:29Z", "closed_at": "2019-08-30T20:44:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been thinking it would be better to make `assert` methods for http status codes instead of the current `response_XXX` pattern.\r\n\r\nRational:\r\n* The camel case and assert prefix match the Python TestCase pattern.\r\n* Remembering a name instead of a number is easier.\r\n* It makes your code more human readable.\r\n\r\nFor example we could add the following:\r\n\r\n```python\r\nclass BaseTestCase(object):\r\n\r\n    def assertHttpStatus(self, status_code: int, response: object = None):\r\n        response = self._which_response(response)\r\n        self.assertEqual(response.status_code, status_code)\r\n\r\n    def assertHttpOk(self, response=None):\r\n        self.assertHttpStatus(200, response)\r\n\r\n    def assertHttpRedirects(self, response: object = None, url: str = None):\r\n        self.assertHttpStatus(302, response)\r\n        response = self._which_response(response)\r\n        if url is not None:\r\n            self.assertEqual(response.url, url)\r\n\r\n    def asssertHttpForbidden(self, response: object = None):\r\n        self.assertHttpStatus(403, response)\r\n\r\n    def asssertHttpNotFound(self, response: object = None):\r\n        self.assertHttpStatus(404, response)\r\n\r\n    def asssertHttpBadRequest(self, response: object = None):\r\n        self.assertHttpStatus(403, response)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/78", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/78/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/78/events", "html_url": "https://github.com/revsys/django-test-plus/issues/78", "id": 335911314, "node_id": "MDU6SXNzdWUzMzU5MTEzMTQ=", "number": 78, "title": "1.1.0 breaks pytest", "user": {"login": "lgandras", "id": 746677, "node_id": "MDQ6VXNlcjc0NjY3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/746677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lgandras", "html_url": "https://github.com/lgandras", "followers_url": "https://api.github.com/users/lgandras/followers", "following_url": "https://api.github.com/users/lgandras/following{/other_user}", "gists_url": "https://api.github.com/users/lgandras/gists{/gist_id}", "starred_url": "https://api.github.com/users/lgandras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lgandras/subscriptions", "organizations_url": "https://api.github.com/users/lgandras/orgs", "repos_url": "https://api.github.com/users/lgandras/repos", "events_url": "https://api.github.com/users/lgandras/events{/privacy}", "received_events_url": "https://api.github.com/users/lgandras/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-06-26T16:59:26Z", "updated_at": "2018-07-02T12:53:00Z", "closed_at": "2018-06-28T15:41:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nafter upgrading from 1.0.22 to 1.1.0, i get suddenly the following stack trace:\r\n\r\n```\r\n(venv) user@host:~/project$ pytest \r\nTraceback (most recent call last):\r\n  File \"/home/user/project/venv/bin/pytest\", line 11, in <module>\r\n    sys.exit(main())\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 56, in main\r\n    config = _prepareconfig(args, plugins)\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 181, in _prepareconfig\r\n    pluginmanager=pluginmanager, args=args\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/pluggy/__init__.py\", line 617, in __call__\r\n    return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/pluggy/__init__.py\", line 222, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/pluggy/__init__.py\", line 216, in <lambda>\r\n    firstresult=hook.spec_opts.get('firstresult'),\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/pluggy/callers.py\", line 196, in _multicall\r\n    gen.send(outcome)\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/_pytest/helpconfig.py\", line 89, in pytest_cmdline_parse\r\n    config = outcome.get_result()\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/pluggy/callers.py\", line 76, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/pluggy/callers.py\", line 180, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 607, in pytest_cmdline_parse\r\n    self.parse(args)\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 772, in parse\r\n    self._preparse(args, addopts=addopts)\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/_pytest/config/__init__.py\", line 724, in _preparse\r\n    self.pluginmanager.load_setuptools_entrypoints(\"pytest11\")\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/pluggy/__init__.py\", line 397, in load_setuptools_entrypoints\r\n    plugin = ep.load()\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2291, in load\r\n    return self.resolve()\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/pkg_resources/__init__.py\", line 2297, in resolve\r\n    module = __import__(self.module_name, fromlist=['__name__'], level=0)\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/test_plus/__init__.py\", line 1, in <module>\r\n    from .test import APITestCase, TestCase\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 634, in _load_backward_compatible\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/_pytest/assertion/rewrite.py\", line 216, in load_module\r\n    py.builtin.exec_(co, mod.__dict__)\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/test_plus/test.py\", line 16, in <module>\r\n    from .compat import reverse, NoReverseMatch, APIClient\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 664, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 634, in _load_backward_compatible\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/_pytest/assertion/rewrite.py\", line 216, in load_module\r\n    py.builtin.exec_(co, mod.__dict__)\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/test_plus/compat.py\", line 7, in <module>\r\n    from rest_framework.test import APIClient\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/rest_framework/test.py\", line 21, in <module>\r\n    from rest_framework.compat import coreapi, requests\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/rest_framework/compat.py\", line 107, in <module>\r\n    from django.contrib.postgres import fields as postgres_fields\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/django/contrib/postgres/fields/__init__.py\", line 1, in <module>\r\n    from .array import *  # NOQA\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/django/contrib/postgres/fields/array.py\", line 3, in <module>\r\n    from django.contrib.postgres import lookups\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/django/contrib/postgres/lookups.py\", line 4, in <module>\r\n    from .search import SearchVector, SearchVectorExact, SearchVectorField\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/django/contrib/postgres/search.py\", line 47, in <module>\r\n    class SearchVector(SearchVectorCombinable, Func):\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/django/contrib/postgres/search.py\", line 50, in SearchVector\r\n    _output_field = SearchVectorField()\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/django/db/models/fields/__init__.py\", line 172, in __init__\r\n    self.db_tablespace = db_tablespace or settings.DEFAULT_INDEX_TABLESPACE\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/django/conf/__init__.py\", line 56, in __getattr__\r\n    self._setup(name)\r\n  File \"/home/user/project/venv/lib/python3.5/site-packages/django/conf/__init__.py\", line 39, in _setup\r\n    % (desc, ENVIRONMENT_VARIABLE))\r\ndjango.core.exceptions.ImproperlyConfigured: Requested setting DEFAULT_INDEX_TABLESPACE, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.\r\n```\r\n\r\nIn case it is important, these are the requirements for the project:\r\n```\r\nbleach==2.1.3\r\ndj-database-url==0.5.0\r\nDjango==1.11.11\r\ndjango-admin-sortable2==0.6.19\r\ndjango-bleach==0.3.0\r\ndjango-classy-tags==0.8.0\r\ndjango-cms==3.5.2\r\ndjango-constance[database]==2.2.0\r\ndjango-cors-headers==2.2.0\r\ndjango-enumfields==0.10.1\r\ndjango-finalware==1.0.0\r\ndjango-filer==1.3.2\r\ndjango-formtools==2.1\r\ndjango-htmlmin==0.10.0\r\ndjango-nested-admin==3.0.21\r\npython-monkey-business==1.0.0\r\ndjango-ipware==2.1.0\r\ndjango-polymorphic==2.0.2\r\ndjango-reversion==2.0.13\r\ndjango-sass-processor==0.7\r\ndjango-sekizai==0.10.0\r\nDjango-Select2==6.0.3\r\ndjango-settings-export==1.2.1\r\ndjango-simple-history==2.1.1\r\ndjango-sortedm2m==1.5.0\r\ndjango-treebeard==4.3\r\ndjangocms-admin-style==1.2.8\r\ndjangocms-attributes-field==0.3.0\r\ndjangocms-cascade==0.16.2\r\ndjangocms-column==1.7.0\r\ndjangocms-inherit==0.2.2\r\ndjangocms-link==2.1.2\r\ndjangocms-picture==2.0.6\r\ndjangocms-style==2.0.2\r\ndjangocms-teaser==0.2.0\r\ndjangocms-video==2.0.4\r\ndjangorestframework==3.8.2\r\nhtml5lib==1.0.1\r\niptools==0.6.1\r\nlibsass==0.14.5\r\nPillow==5.1.0\r\npsycopg2-binary==2.7.5\r\npytz==2018.4\r\nsix==1.11.0\r\ntzlocal==1.5.1\r\nenum34==1.1.6\r\nwebencodings==0.5.1\r\nbeautifulsoup4==4.6.0\r\nlxml==4.2.2\r\nelasticsearch==6.3.0\r\nelasticsearch-dsl==6.1.0\r\n\r\ndjango-compressor==2.2\r\ndjango-appconf==1.0.2\r\nrcssmin==1.0.6\r\nrjsmin==1.0.12\r\n\r\nbrotlipy==0.7.0\r\ncffi==1.11.5\r\ndjango-brotli==0.1.3\r\npycparser==2.18\r\n\r\ndjango-sslserver==0.20\r\n\r\npolib==1.1.0\r\n\r\ncoverage==4.5.1\r\ncobertura-clover-transform==1.1.4.post1\r\ndjango-coverage-plugin==1.5.0\r\ndjango-test-plus==1.0.22\r\nfactory-boy==2.11.1\r\ntblib==1.3.2\r\n\r\nflake8==3.5.0\r\npytest==3.6.2\r\npytest-django==3.3.2\r\npytest-sugar==0.9.1\r\npytest-cov==2.5.1\r\npytest-xdist==1.22.2\r\npytest-flake8==1.0.1\r\npytest-html==1.19.0\r\nfreezegun==0.3.10\r\nparameterized==0.6.1\r\n\r\ndjango-debug-toolbar==1.9.1\r\nipython==6.4.0\r\n\r\nSphinx==1.7.5\r\nsphinx-rtd-theme==0.4.0\r\n```\r\n\r\nAs you can notice in the stack trace, django-test-plus attempts to read the settings before they are actually loaded by pytest. Rolling back to 1.0.22 solves this issue for me.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/75", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/75/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/75/events", "html_url": "https://github.com/revsys/django-test-plus/issues/75", "id": 315171866, "node_id": "MDU6SXNzdWUzMTUxNzE4NjY=", "number": 75, "title": "Add msg parameter to response_xxx methods", "user": {"login": "radius", "id": 632863, "node_id": "MDQ6VXNlcjYzMjg2Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/632863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radius", "html_url": "https://github.com/radius", "followers_url": "https://api.github.com/users/radius/followers", "following_url": "https://api.github.com/users/radius/following{/other_user}", "gists_url": "https://api.github.com/users/radius/gists{/gist_id}", "starred_url": "https://api.github.com/users/radius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radius/subscriptions", "organizations_url": "https://api.github.com/users/radius/orgs", "repos_url": "https://api.github.com/users/radius/repos", "events_url": "https://api.github.com/users/radius/events{/privacy}", "received_events_url": "https://api.github.com/users/radius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-17T18:08:04Z", "updated_at": "2018-09-19T16:50:52Z", "closed_at": "2018-09-19T16:50:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm happy to make a PR for this if anyone is interested.\r\nThe current `response_xxx` methods are essentially a convenience wrapper for doing `assertEqual` with the current response status code.\r\n\r\n`assertEqual` takes a third parameter `msg` which is passed to stdout when the test fails. It would be helpful in debugging test failures to be able to pass this parameter.\r\n\r\nAs an example, here is how `response_200` would look with this new parameter:\r\n\r\n```python\r\ndef response_200(self, response=None, msg=None):\r\n        \"\"\" Given response has status_code 200 \"\"\"\r\n        response = self._which_response(response)\r\n        self.assertEqual(response.status_code, 200, msg)\r\n``` \r\n\r\nI would like this for all the `response_xxx` methods.\r\n\r\nOnce again, I am happy to make this change and do a PR, but it would be cool if someone could tell me if this has any chance of being approved (assuming it's well documented and passes tests and all that). \r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/69", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/69/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/69/events", "html_url": "https://github.com/revsys/django-test-plus/issues/69", "id": 282506876, "node_id": "MDU6SXNzdWUyODI1MDY4NzY=", "number": 69, "title": "Add response_204 ", "user": {"login": "williln", "id": 2286304, "node_id": "MDQ6VXNlcjIyODYzMDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2286304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/williln", "html_url": "https://github.com/williln", "followers_url": "https://api.github.com/users/williln/followers", "following_url": "https://api.github.com/users/williln/following{/other_user}", "gists_url": "https://api.github.com/users/williln/gists{/gist_id}", "starred_url": "https://api.github.com/users/williln/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/williln/subscriptions", "organizations_url": "https://api.github.com/users/williln/orgs", "repos_url": "https://api.github.com/users/williln/repos", "events_url": "https://api.github.com/users/williln/events{/privacy}", "received_events_url": "https://api.github.com/users/williln/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-15T18:13:18Z", "updated_at": "2017-12-15T22:44:32Z", "closed_at": "2017-12-15T22:44:32Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/65", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/65/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/65/events", "html_url": "https://github.com/revsys/django-test-plus/issues/65", "id": 269179468, "node_id": "MDU6SXNzdWUyNjkxNzk0Njg=", "number": 65, "title": "Not actually testing Django 2.0 compatability", "user": {"login": "goodtune", "id": 286798, "node_id": "MDQ6VXNlcjI4Njc5OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/286798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goodtune", "html_url": "https://github.com/goodtune", "followers_url": "https://api.github.com/users/goodtune/followers", "following_url": "https://api.github.com/users/goodtune/following{/other_user}", "gists_url": "https://api.github.com/users/goodtune/gists{/gist_id}", "starred_url": "https://api.github.com/users/goodtune/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goodtune/subscriptions", "organizations_url": "https://api.github.com/users/goodtune/orgs", "repos_url": "https://api.github.com/users/goodtune/repos", "events_url": "https://api.github.com/users/goodtune/events{/privacy}", "received_events_url": "https://api.github.com/users/goodtune/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-27T17:25:10Z", "updated_at": "2017-10-30T23:35:52Z", "closed_at": "2017-10-30T23:35:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In a101fda and 1a6deef the `tox.ini` and `.travis.yml` files were updated to \"add Django 2.0 to the test matrix\" however pip doesn't recognise 2.0a1 or 2.0b1 with a simple `<2.1` filter.\r\n\r\nWhile Django 2.0 is in pre-release it will be necessary to use the `--pre` option to pip.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/62", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/62/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/62/events", "html_url": "https://github.com/revsys/django-test-plus/issues/62", "id": 266538008, "node_id": "MDU6SXNzdWUyNjY1MzgwMDg=", "number": 62, "title": "Drop official support for Django <1.8", "user": {"login": "jefftriplett", "id": 50527, "node_id": "MDQ6VXNlcjUwNTI3", "avatar_url": "https://avatars1.githubusercontent.com/u/50527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jefftriplett", "html_url": "https://github.com/jefftriplett", "followers_url": "https://api.github.com/users/jefftriplett/followers", "following_url": "https://api.github.com/users/jefftriplett/following{/other_user}", "gists_url": "https://api.github.com/users/jefftriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/jefftriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jefftriplett/subscriptions", "organizations_url": "https://api.github.com/users/jefftriplett/orgs", "repos_url": "https://api.github.com/users/jefftriplett/repos", "events_url": "https://api.github.com/users/jefftriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/jefftriplett/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 215186047, "node_id": "MDU6TGFiZWwyMTUxODYwNDc=", "url": "https://api.github.com/repos/revsys/django-test-plus/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-18T15:31:23Z", "updated_at": "2017-10-18T19:36:21Z", "closed_at": "2017-10-18T19:36:21Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Please see #60 for details.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/55", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/55/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/55/events", "html_url": "https://github.com/revsys/django-test-plus/issues/55", "id": 221255548, "node_id": "MDU6SXNzdWUyMjEyNTU1NDg=", "number": 55, "title": "Can't make email user through `make_user`", "user": {"login": "myungseokang", "id": 12431127, "node_id": "MDQ6VXNlcjEyNDMxMTI3", "avatar_url": "https://avatars0.githubusercontent.com/u/12431127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/myungseokang", "html_url": "https://github.com/myungseokang", "followers_url": "https://api.github.com/users/myungseokang/followers", "following_url": "https://api.github.com/users/myungseokang/following{/other_user}", "gists_url": "https://api.github.com/users/myungseokang/gists{/gist_id}", "starred_url": "https://api.github.com/users/myungseokang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/myungseokang/subscriptions", "organizations_url": "https://api.github.com/users/myungseokang/orgs", "repos_url": "https://api.github.com/users/myungseokang/repos", "events_url": "https://api.github.com/users/myungseokang/events{/privacy}", "received_events_url": "https://api.github.com/users/myungseokang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-12T13:05:09Z", "updated_at": "2017-12-18T00:18:48Z", "closed_at": "2017-12-18T00:18:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/revsys/django-test-plus/blob/master/test_plus/test.py#L264\r\n\r\nCan't make email user through make_user\r\n\r\nI am using `email` field instead of `username` field in `User` class.\r\nSo, I registered `email` to USERNAME_FIELD.\r\nAnd I customized `UserManager` class by fitting in `User` model.\r\n\r\nMy conclusion is `make_user` method needs options that help not using username and also using another field name.\r\n\r\nP.S. Maybe I think that can solve this problem using `USERNAME_FIELD`.\r\nOr change name `make_user` method to `_make_user` method and make new `make_user` method can receive option not using `username` field.\r\n\r\nThis is entirely my suggestion, not the compulsion.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/54", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/54/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/54/events", "html_url": "https://github.com/revsys/django-test-plus/issues/54", "id": 212506903, "node_id": "MDU6SXNzdWUyMTI1MDY5MDM=", "number": 54, "title": "assertLoginRequired does not work in CBVTestCase", "user": {"login": "rubickcz", "id": 3601440, "node_id": "MDQ6VXNlcjM2MDE0NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3601440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rubickcz", "html_url": "https://github.com/rubickcz", "followers_url": "https://api.github.com/users/rubickcz/followers", "following_url": "https://api.github.com/users/rubickcz/following{/other_user}", "gists_url": "https://api.github.com/users/rubickcz/gists{/gist_id}", "starred_url": "https://api.github.com/users/rubickcz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rubickcz/subscriptions", "organizations_url": "https://api.github.com/users/rubickcz/orgs", "repos_url": "https://api.github.com/users/rubickcz/repos", "events_url": "https://api.github.com/users/rubickcz/events{/privacy}", "received_events_url": "https://api.github.com/users/rubickcz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-07T17:42:34Z", "updated_at": "2017-06-26T15:57:07Z", "closed_at": "2017-06-26T15:57:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI am getting following error, when calling `self.assertLoginRequired('user_list')` in a class that inherits from `CBVTestCase`:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/ondra/projects/attendance/attendance/users/tests/test_views.py\", line 33, in test_login_required\r\n    self.get('user_list')\r\n  File \"/home/ondra/other/venvs/attendance/lib/python3.6/site-packages/test_plus/test.py\", line 436, in get\r\n    instance = self.get_instance(cls, initkwargs=initkwargs, request=request, **kwargs)\r\n  File \"/home/ondra/other/venvs/attendance/lib/python3.6/site-packages/test_plus/test.py\", line 420, in get_instance\r\n    instance = cls(**initkwargs)\r\nTypeError: 'str' object is not callable\r\n```\r\nThis seems to be caused by the fact that `get()` method looks different in `TestCase` and `CBVTestCase`:\r\n```\r\n# TestCase\r\ndef get(self, url_name, *args, **kwargs):\r\n```\r\n```\r\n# CBVTestCase\r\ndef get(self, cls, *args, **kwargs)\r\n```\r\n`assertLoginRequired()` method is only defined in `TestCase` class, so it expects a different `get()` method signature and passes string (intended to be `url_name`) as `cls` paramter.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/51", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/51/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/51/events", "html_url": "https://github.com/revsys/django-test-plus/issues/51", "id": 185722842, "node_id": "MDU6SXNzdWUxODU3MjI4NDI=", "number": 51, "title": "'TestCase' object has no attribute 'assertResponseContains'", "user": {"login": "ndanielsen", "id": 2944777, "node_id": "MDQ6VXNlcjI5NDQ3Nzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2944777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndanielsen", "html_url": "https://github.com/ndanielsen", "followers_url": "https://api.github.com/users/ndanielsen/followers", "following_url": "https://api.github.com/users/ndanielsen/following{/other_user}", "gists_url": "https://api.github.com/users/ndanielsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndanielsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndanielsen/subscriptions", "organizations_url": "https://api.github.com/users/ndanielsen/orgs", "repos_url": "https://api.github.com/users/ndanielsen/repos", "events_url": "https://api.github.com/users/ndanielsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ndanielsen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-27T16:46:43Z", "updated_at": "2017-12-15T21:44:13Z", "closed_at": "2017-12-15T21:44:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Great testing util that you're maintaining here. I'm getting this error when running a basic test. \n\nAttributeError: 'IssueTestCase' object has no attribute 'assertResponseContains'\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/47", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/47/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/47/events", "html_url": "https://github.com/revsys/django-test-plus/issues/47", "id": 171457805, "node_id": "MDU6SXNzdWUxNzE0NTc4MDU=", "number": 47, "title": "Sending JSON String in post request", "user": {"login": "PabloVallejo", "id": 1751074, "node_id": "MDQ6VXNlcjE3NTEwNzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1751074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PabloVallejo", "html_url": "https://github.com/PabloVallejo", "followers_url": "https://api.github.com/users/PabloVallejo/followers", "following_url": "https://api.github.com/users/PabloVallejo/following{/other_user}", "gists_url": "https://api.github.com/users/PabloVallejo/gists{/gist_id}", "starred_url": "https://api.github.com/users/PabloVallejo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PabloVallejo/subscriptions", "organizations_url": "https://api.github.com/users/PabloVallejo/orgs", "repos_url": "https://api.github.com/users/PabloVallejo/repos", "events_url": "https://api.github.com/users/PabloVallejo/events{/privacy}", "received_events_url": "https://api.github.com/users/PabloVallejo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-16T16:22:14Z", "updated_at": "2016-08-18T21:29:25Z", "closed_at": "2016-08-18T21:29:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd love to know how to send a raw JSON string in the request body. \nCurrently I'm passing the string directly to `data`, but it specs a dictionary instead.\n\n``` python\nresponse = self.post(\n    'my-url',\n    data=json_string,\n)\n```\n\nAny thoughts on this?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/46", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/46/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/46/events", "html_url": "https://github.com/revsys/django-test-plus/issues/46", "id": 170238047, "node_id": "MDU6SXNzdWUxNzAyMzgwNDc=", "number": 46, "title": "Add a form error helper", "user": {"login": "epicserve", "id": 191620, "node_id": "MDQ6VXNlcjE5MTYyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/191620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epicserve", "html_url": "https://github.com/epicserve", "followers_url": "https://api.github.com/users/epicserve/followers", "following_url": "https://api.github.com/users/epicserve/following{/other_user}", "gists_url": "https://api.github.com/users/epicserve/gists{/gist_id}", "starred_url": "https://api.github.com/users/epicserve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epicserve/subscriptions", "organizations_url": "https://api.github.com/users/epicserve/orgs", "repos_url": "https://api.github.com/users/epicserve/repos", "events_url": "https://api.github.com/users/epicserve/events{/privacy}", "received_events_url": "https://api.github.com/users/epicserve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-09T18:32:05Z", "updated_at": "2016-10-19T14:46:39Z", "closed_at": "2016-10-19T14:46:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When debugging tests I added the following to my own personal base TestCase class, which has been really handy. I could do a PR if this seems like something that would be good to add.\n\n```\ndef print_form_errors(self, resp_or_form=None):\n\n    if resp_or_form is None:\n        resp_or_form = self.last_response\n\n    if not isinstance(resp_or_form, (forms.Form, forms.ModelForm)):\n        form = resp_or_form.context['form']\n    else:\n        form = resp_or_form\n    print(form.errors.as_text())\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/43", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/43/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/43/events", "html_url": "https://github.com/revsys/django-test-plus/issues/43", "id": 162284893, "node_id": "MDU6SXNzdWUxNjIyODQ4OTM=", "number": 43, "title": "How to use token authentication while testing REST API", "user": {"login": "Darwesh27", "id": 4861876, "node_id": "MDQ6VXNlcjQ4NjE4NzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/4861876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Darwesh27", "html_url": "https://github.com/Darwesh27", "followers_url": "https://api.github.com/users/Darwesh27/followers", "following_url": "https://api.github.com/users/Darwesh27/following{/other_user}", "gists_url": "https://api.github.com/users/Darwesh27/gists{/gist_id}", "starred_url": "https://api.github.com/users/Darwesh27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Darwesh27/subscriptions", "organizations_url": "https://api.github.com/users/Darwesh27/orgs", "repos_url": "https://api.github.com/users/Darwesh27/repos", "events_url": "https://api.github.com/users/Darwesh27/events{/privacy}", "received_events_url": "https://api.github.com/users/Darwesh27/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-06-25T14:58:37Z", "updated_at": "2020-07-01T07:52:15Z", "closed_at": "2016-06-25T16:31:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am using django rest framework's token authentication in my django project and I need to unit test my ModelViewSets but the default `login` method of the TestCase class in not doing the job. I'm using drf's TokenAuthentication.\n\n```\nREST_FRAMEWORK = {\n    # Use Django's standard `django.contrib.auth` permissions,\n    # or allow read-only access for unauthenticated users.\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n    )\n}\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/36", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/36/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/36/events", "html_url": "https://github.com/revsys/django-test-plus/issues/36", "id": 148619765, "node_id": "MDU6SXNzdWUxNDg2MTk3NjU=", "number": 36, "title": "Support for django 1.9?", "user": {"login": "noisy", "id": 201263, "node_id": "MDQ6VXNlcjIwMTI2Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/201263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noisy", "html_url": "https://github.com/noisy", "followers_url": "https://api.github.com/users/noisy/followers", "following_url": "https://api.github.com/users/noisy/following{/other_user}", "gists_url": "https://api.github.com/users/noisy/gists{/gist_id}", "starred_url": "https://api.github.com/users/noisy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noisy/subscriptions", "organizations_url": "https://api.github.com/users/noisy/orgs", "repos_url": "https://api.github.com/users/noisy/repos", "events_url": "https://api.github.com/users/noisy/events{/privacy}", "received_events_url": "https://api.github.com/users/noisy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 215186044, "node_id": "MDU6TGFiZWwyMTUxODYwNDQ=", "url": "https://api.github.com/repos/revsys/django-test-plus/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "frankwiles", "id": 144159, "node_id": "MDQ6VXNlcjE0NDE1OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/144159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frankwiles", "html_url": "https://github.com/frankwiles", "followers_url": "https://api.github.com/users/frankwiles/followers", "following_url": "https://api.github.com/users/frankwiles/following{/other_user}", "gists_url": "https://api.github.com/users/frankwiles/gists{/gist_id}", "starred_url": "https://api.github.com/users/frankwiles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frankwiles/subscriptions", "organizations_url": "https://api.github.com/users/frankwiles/orgs", "repos_url": "https://api.github.com/users/frankwiles/repos", "events_url": "https://api.github.com/users/frankwiles/events{/privacy}", "received_events_url": "https://api.github.com/users/frankwiles/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "frankwiles", "id": 144159, "node_id": "MDQ6VXNlcjE0NDE1OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/144159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frankwiles", "html_url": "https://github.com/frankwiles", "followers_url": "https://api.github.com/users/frankwiles/followers", "following_url": "https://api.github.com/users/frankwiles/following{/other_user}", "gists_url": "https://api.github.com/users/frankwiles/gists{/gist_id}", "starred_url": "https://api.github.com/users/frankwiles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frankwiles/subscriptions", "organizations_url": "https://api.github.com/users/frankwiles/orgs", "repos_url": "https://api.github.com/users/frankwiles/repos", "events_url": "https://api.github.com/users/frankwiles/events{/privacy}", "received_events_url": "https://api.github.com/users/frankwiles/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2016-04-15T10:12:05Z", "updated_at": "2016-04-20T23:33:55Z", "closed_at": "2016-04-20T23:33:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "documentation says:\n\n> 1.4, 1.5, 1.6, 1.7, and 1.8\n\nis there a support for django 1.9?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/31", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/31/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/31/events", "html_url": "https://github.com/revsys/django-test-plus/issues/31", "id": 124498258, "node_id": "MDU6SXNzdWUxMjQ0OTgyNTg=", "number": 31, "title": "pytest support", "user": {"login": "ftobia", "id": 144146, "node_id": "MDQ6VXNlcjE0NDE0Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/144146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftobia", "html_url": "https://github.com/ftobia", "followers_url": "https://api.github.com/users/ftobia/followers", "following_url": "https://api.github.com/users/ftobia/following{/other_user}", "gists_url": "https://api.github.com/users/ftobia/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftobia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftobia/subscriptions", "organizations_url": "https://api.github.com/users/ftobia/orgs", "repos_url": "https://api.github.com/users/ftobia/repos", "events_url": "https://api.github.com/users/ftobia/events{/privacy}", "received_events_url": "https://api.github.com/users/ftobia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-12-31T19:42:29Z", "updated_at": "2018-08-30T13:36:25Z", "closed_at": "2018-08-30T13:36:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use pytest for testing, so I don't use Django's TestCase directly. pytest-django is a package that provides fixtures that wrap Django's TestCase.\n\nWould you be amenable to providing pytest fixtures for your helpers, like pytest-django does? If so I'd be happy to put together a pull request for you to look over.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/30", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/30/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/30/events", "html_url": "https://github.com/revsys/django-test-plus/issues/30", "id": 124498070, "node_id": "MDU6SXNzdWUxMjQ0OTgwNzA=", "number": 30, "title": "assertNumQueriesLessThan -> assertNumQueriesLessThanOrEqualTo", "user": {"login": "ftobia", "id": 144146, "node_id": "MDQ6VXNlcjE0NDE0Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/144146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftobia", "html_url": "https://github.com/ftobia", "followers_url": "https://api.github.com/users/ftobia/followers", "following_url": "https://api.github.com/users/ftobia/following{/other_user}", "gists_url": "https://api.github.com/users/ftobia/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftobia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftobia/subscriptions", "organizations_url": "https://api.github.com/users/ftobia/orgs", "repos_url": "https://api.github.com/users/ftobia/repos", "events_url": "https://api.github.com/users/ftobia/events{/privacy}", "received_events_url": "https://api.github.com/users/ftobia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-31T19:38:48Z", "updated_at": "2016-01-21T20:54:36Z", "closed_at": "2016-01-21T20:54:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "The behavior of \"assertNumQueriesLessThan\" is actually less than or equal to.\n\nhttps://github.com/revsys/django-test-plus/blob/a09b7233272ff0753ccb2bc838584910a5a0aeee/test_plus/test.py#L42\n\nI suggest one of:\n- change the name to match the behavior\n- change the behavior to match the name\n- include both functions and make the behavior correct for each\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/29", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/29/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/29/events", "html_url": "https://github.com/revsys/django-test-plus/issues/29", "id": 124431677, "node_id": "MDU6SXNzdWUxMjQ0MzE2Nzc=", "number": 29, "title": "Behaviour of TestCase.post is not as expected", "user": {"login": "goodtune", "id": 286798, "node_id": "MDQ6VXNlcjI4Njc5OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/286798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goodtune", "html_url": "https://github.com/goodtune", "followers_url": "https://api.github.com/users/goodtune/followers", "following_url": "https://api.github.com/users/goodtune/following{/other_user}", "gists_url": "https://api.github.com/users/goodtune/gists{/gist_id}", "starred_url": "https://api.github.com/users/goodtune/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goodtune/subscriptions", "organizations_url": "https://api.github.com/users/goodtune/orgs", "repos_url": "https://api.github.com/users/goodtune/repos", "events_url": "https://api.github.com/users/goodtune/events{/privacy}", "received_events_url": "https://api.github.com/users/goodtune/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-12-31T04:36:34Z", "updated_at": "2016-01-21T20:58:50Z", "closed_at": "2016-01-21T20:58:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a test using the `post` method which is failing under a use case I would expect to work.\n\n```\ndef test_some_view(self):\n    data = {}\n    self.post('named:view', data)\n    self.response_302()\n```\n\nThe above test case is failing, because the response code is 404 not 302.\n\nHowever if I rework the test case as below, it now works with the desired side effects.\n\n```\ndef test_some_view(self):\n    data = {}\n    url = self.reverse('named:view')\n    res = self.client.post(url, data)\n    self.assertEqual(res.status_code, 302)\n```\n\nIs there anything obvious that is wrong in my usage of the `post` method, or is this a bug?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/28", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/28/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/28/events", "html_url": "https://github.com/revsys/django-test-plus/issues/28", "id": 120965379, "node_id": "MDU6SXNzdWUxMjA5NjUzNzk=", "number": 28, "title": "assertLoginRequired fails for view function names and named url patters", "user": {"login": "jayfk", "id": 2930472, "node_id": "MDQ6VXNlcjI5MzA0NzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2930472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayfk", "html_url": "https://github.com/jayfk", "followers_url": "https://api.github.com/users/jayfk/followers", "following_url": "https://api.github.com/users/jayfk/following{/other_user}", "gists_url": "https://api.github.com/users/jayfk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayfk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayfk/subscriptions", "organizations_url": "https://api.github.com/users/jayfk/orgs", "repos_url": "https://api.github.com/users/jayfk/repos", "events_url": "https://api.github.com/users/jayfk/events{/privacy}", "received_events_url": "https://api.github.com/users/jayfk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-12-08T09:13:12Z", "updated_at": "2016-05-23T19:15:28Z", "closed_at": "2016-05-23T19:15:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "`assertLoginRequired` currently only works with plain urls like `/account/login/`, but not named url patterns like `account:login`\n\n`settings.LOGIN_URL` can be a  view function name or a named url pattern, from the docs:\n\n> **LOGIN_URL**\n> \n> Default: '/accounts/login/'\n> \n> The URL where requests are redirected for login, especially when using the login_required() decorator.\n> \n> This setting also accepts view function names and named URL patterns which can be used to reduce configuration duplication since you don\u2019t have to define the URL in two places (settings and URLconf).\n\nMaybe check if the url can be reversed if the `expected_url` does not match [here](https://github.com/revsys/django-test-plus/blob/master/test_plus/test.py#L185)?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/27", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/27/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/27/events", "html_url": "https://github.com/revsys/django-test-plus/issues/27", "id": 116145890, "node_id": "MDU6SXNzdWUxMTYxNDU4OTA=", "number": 27, "title": "\"<<<<<<< HEAD\" conflict mark in README", "user": {"login": "jfunez", "id": 805749, "node_id": "MDQ6VXNlcjgwNTc0OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/805749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfunez", "html_url": "https://github.com/jfunez", "followers_url": "https://api.github.com/users/jfunez/followers", "following_url": "https://api.github.com/users/jfunez/following{/other_user}", "gists_url": "https://api.github.com/users/jfunez/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfunez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfunez/subscriptions", "organizations_url": "https://api.github.com/users/jfunez/orgs", "repos_url": "https://api.github.com/users/jfunez/repos", "events_url": "https://api.github.com/users/jfunez/events{/privacy}", "received_events_url": "https://api.github.com/users/jfunez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-11-10T16:36:00Z", "updated_at": "2015-11-10T16:41:53Z", "closed_at": "2015-11-10T16:41:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "at the second paragraph (line 43):\n\n```\nThis is sufficient to get things rolling, but you are encouraged to <<<<<<< HEAD\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/25", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/25/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/25/events", "html_url": "https://github.com/revsys/django-test-plus/issues/25", "id": 113126854, "node_id": "MDU6SXNzdWUxMTMxMjY4NTQ=", "number": 25, "title": "Set up formal documentation on Read the Docs", "user": {"login": "pydanny", "id": 62857, "node_id": "MDQ6VXNlcjYyODU3", "avatar_url": "https://avatars1.githubusercontent.com/u/62857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pydanny", "html_url": "https://github.com/pydanny", "followers_url": "https://api.github.com/users/pydanny/followers", "following_url": "https://api.github.com/users/pydanny/following{/other_user}", "gists_url": "https://api.github.com/users/pydanny/gists{/gist_id}", "starred_url": "https://api.github.com/users/pydanny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pydanny/subscriptions", "organizations_url": "https://api.github.com/users/pydanny/orgs", "repos_url": "https://api.github.com/users/pydanny/repos", "events_url": "https://api.github.com/users/pydanny/events{/privacy}", "received_events_url": "https://api.github.com/users/pydanny/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-10-24T01:47:16Z", "updated_at": "2015-11-10T16:24:41Z", "closed_at": "2015-11-10T16:24:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Because it's our moral duty!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/23", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/23/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/23/events", "html_url": "https://github.com/revsys/django-test-plus/issues/23", "id": 105078768, "node_id": "MDU6SXNzdWUxMDUwNzg3Njg=", "number": 23, "title": "Fix passing arguments for self.get() and self.post() ", "user": {"login": "mariodev", "id": 546130, "node_id": "MDQ6VXNlcjU0NjEzMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/546130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mariodev", "html_url": "https://github.com/mariodev", "followers_url": "https://api.github.com/users/mariodev/followers", "following_url": "https://api.github.com/users/mariodev/following{/other_user}", "gists_url": "https://api.github.com/users/mariodev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mariodev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mariodev/subscriptions", "organizations_url": "https://api.github.com/users/mariodev/orgs", "repos_url": "https://api.github.com/users/mariodev/repos", "events_url": "https://api.github.com/users/mariodev/events{/privacy}", "received_events_url": "https://api.github.com/users/mariodev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-06T08:25:48Z", "updated_at": "2015-11-10T15:17:14Z", "closed_at": "2015-11-10T15:17:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "When we pass url names into get/post methods, it seems we might get into trouble when using  `extra` or `follow` as named arguments for url.\n\nSo when dealing with named urls, we should explicitly pass `args` and `kwargs` the same way as django's reverse function.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/19", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/19/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/19/events", "html_url": "https://github.com/revsys/django-test-plus/issues/19", "id": 103288894, "node_id": "MDU6SXNzdWUxMDMyODg4OTQ=", "number": 19, "title": "Documentation about CBVTestCase", "user": {"login": "jambonrose", "id": 2659203, "node_id": "MDQ6VXNlcjI2NTkyMDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2659203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jambonrose", "html_url": "https://github.com/jambonrose", "followers_url": "https://api.github.com/users/jambonrose/followers", "following_url": "https://api.github.com/users/jambonrose/following{/other_user}", "gists_url": "https://api.github.com/users/jambonrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/jambonrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jambonrose/subscriptions", "organizations_url": "https://api.github.com/users/jambonrose/orgs", "repos_url": "https://api.github.com/users/jambonrose/repos", "events_url": "https://api.github.com/users/jambonrose/events{/privacy}", "received_events_url": "https://api.github.com/users/jambonrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-26T14:53:54Z", "updated_at": "2015-08-28T14:14:01Z", "closed_at": "2015-08-28T14:13:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\nIn `README.rst`, the documentation imports `CBVTestCase` with:\n\n```\nfrom test_plus import CBVTestCase\n```\n\nThis leads to an `ImportError` in my case.\n\nThere appear to be two ways to fix this:\n1. change the documentation to read: `from test_plus.test import CBVTestCase`\n2. import the `CBVTestCase` class to the package `__init__.py` file\n\nI favor the second more than the first. I'm happy to submit a PR.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/15", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/15/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/15/events", "html_url": "https://github.com/revsys/django-test-plus/issues/15", "id": 95859345, "node_id": "MDU6SXNzdWU5NTg1OTM0NQ==", "number": 15, "title": "self.get/post method do not explain well how to use follow=True ", "user": {"login": "pydanny", "id": 62857, "node_id": "MDQ6VXNlcjYyODU3", "avatar_url": "https://avatars1.githubusercontent.com/u/62857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pydanny", "html_url": "https://github.com/pydanny", "followers_url": "https://api.github.com/users/pydanny/followers", "following_url": "https://api.github.com/users/pydanny/following{/other_user}", "gists_url": "https://api.github.com/users/pydanny/gists{/gist_id}", "starred_url": "https://api.github.com/users/pydanny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pydanny/subscriptions", "organizations_url": "https://api.github.com/users/pydanny/orgs", "repos_url": "https://api.github.com/users/pydanny/repos", "events_url": "https://api.github.com/users/pydanny/events{/privacy}", "received_events_url": "https://api.github.com/users/pydanny/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-07-18T20:57:51Z", "updated_at": "2015-08-04T04:43:35Z", "closed_at": "2015-08-04T04:43:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Makes testing forms kind of a pain. Would you consider adding it as a stand-alone parameter to those methods (I can do the PR if you want)?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/8", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/8/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/8/events", "html_url": "https://github.com/revsys/django-test-plus/issues/8", "id": 87079484, "node_id": "MDU6SXNzdWU4NzA3OTQ4NA==", "number": 8, "title": "Add helper for adding needed permissions", "user": {"login": "epicserve", "id": 191620, "node_id": "MDQ6VXNlcjE5MTYyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/191620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epicserve", "html_url": "https://github.com/epicserve", "followers_url": "https://api.github.com/users/epicserve/followers", "following_url": "https://api.github.com/users/epicserve/following{/other_user}", "gists_url": "https://api.github.com/users/epicserve/gists{/gist_id}", "starred_url": "https://api.github.com/users/epicserve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epicserve/subscriptions", "organizations_url": "https://api.github.com/users/epicserve/orgs", "repos_url": "https://api.github.com/users/epicserve/repos", "events_url": "https://api.github.com/users/epicserve/events{/privacy}", "received_events_url": "https://api.github.com/users/epicserve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-06-10T19:31:25Z", "updated_at": "2015-07-13T14:50:49Z", "closed_at": "2015-07-13T14:50:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have stuff like this in my tests:\n\n``` python\nuser = self.make_user('testuser')\nuser.user_permissions.add(*list(Permission.objects.filter(codename__endswith='user')))\n```\n\nIf would be nice if I could so something like this:\n\n``` python\nuser = self.make_user('testuser', model_perms=[User, FooModel])\n```\n\nThis would just add the permissions available for the models you pass with the model_perms argument.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/7", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/7/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/7/events", "html_url": "https://github.com/revsys/django-test-plus/issues/7", "id": 84718459, "node_id": "MDU6SXNzdWU4NDcxODQ1OQ==", "number": 7, "title": "Make the self.post() and self.get() work with urls", "user": {"login": "epicserve", "id": 191620, "node_id": "MDQ6VXNlcjE5MTYyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/191620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epicserve", "html_url": "https://github.com/epicserve", "followers_url": "https://api.github.com/users/epicserve/followers", "following_url": "https://api.github.com/users/epicserve/following{/other_user}", "gists_url": "https://api.github.com/users/epicserve/gists{/gist_id}", "starred_url": "https://api.github.com/users/epicserve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epicserve/subscriptions", "organizations_url": "https://api.github.com/users/epicserve/orgs", "repos_url": "https://api.github.com/users/epicserve/repos", "events_url": "https://api.github.com/users/epicserve/events{/privacy}", "received_events_url": "https://api.github.com/users/epicserve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-06-03T18:54:08Z", "updated_at": "2015-06-16T16:40:12Z", "closed_at": "2015-06-16T16:01:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have situations where I've already reversed a named url and it doesn't make sense to do the work twice. For example, it would be nice if I could do this:\n\n``` python\nurl = self.reverse('things:thing_update', pk=thing.pk)\nself.get(url)\nself.post(url, data={})\n```\n\nYou could make this work by adding some logic that says if the `url_name` startswith '/' or 'http' then just use it as a url and don't reverse it.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/6", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/6/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/6/events", "html_url": "https://github.com/revsys/django-test-plus/issues/6", "id": 84710708, "node_id": "MDU6SXNzdWU4NDcxMDcwOA==", "number": 6, "title": "Make the self.response_XXX methods work with self.last_response", "user": {"login": "epicserve", "id": 191620, "node_id": "MDQ6VXNlcjE5MTYyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/191620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epicserve", "html_url": "https://github.com/epicserve", "followers_url": "https://api.github.com/users/epicserve/followers", "following_url": "https://api.github.com/users/epicserve/following{/other_user}", "gists_url": "https://api.github.com/users/epicserve/gists{/gist_id}", "starred_url": "https://api.github.com/users/epicserve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epicserve/subscriptions", "organizations_url": "https://api.github.com/users/epicserve/orgs", "repos_url": "https://api.github.com/users/epicserve/repos", "events_url": "https://api.github.com/users/epicserve/events{/privacy}", "received_events_url": "https://api.github.com/users/epicserve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-06-03T18:38:19Z", "updated_at": "2015-06-16T15:34:29Z", "closed_at": "2015-06-16T15:34:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be handy if this worked:\n\n``` python\nself.get('app_label:name_url')\nself.response_200()\n```\n\nYou could do something like this:\n\n``` python\ndef response_200(self, response=None):\n    \"\"\" Given response has status_code 200 \"\"\"\n\n    if response is None:\n        response = self.last_response\n\n    self.assertEqual(response.status_code, 200)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/5", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/5/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/5/events", "html_url": "https://github.com/revsys/django-test-plus/issues/5", "id": 82658516, "node_id": "MDU6SXNzdWU4MjY1ODUxNg==", "number": 5, "title": "get method not supporting kwargs", "user": {"login": "ensignavenger", "id": 1141854, "node_id": "MDQ6VXNlcjExNDE4NTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1141854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensignavenger", "html_url": "https://github.com/ensignavenger", "followers_url": "https://api.github.com/users/ensignavenger/followers", "following_url": "https://api.github.com/users/ensignavenger/following{/other_user}", "gists_url": "https://api.github.com/users/ensignavenger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensignavenger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensignavenger/subscriptions", "organizations_url": "https://api.github.com/users/ensignavenger/orgs", "repos_url": "https://api.github.com/users/ensignavenger/repos", "events_url": "https://api.github.com/users/ensignavenger/events{/privacy}", "received_events_url": "https://api.github.com/users/ensignavenger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-05-30T01:43:37Z", "updated_at": "2015-06-16T16:20:09Z", "closed_at": "2015-06-16T16:20:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to rewrite the following to use test case plus:\n\nself.client.get(reverse('search'),{'query': 1})\n\nFrom the readme, I gather that I should be able to do:\n\nself.get('search', query=1)\n\nBut I am getting:\ndjango.core.urlresolvers.NoReverseMatch: Reverse for 'search' with arguments '()' and keyword arguments '{'query': 1}' not found. 1 pattern(s) tried: ['search']\n\nSo I tried:\nresponse = self.get('search', extra={'query': 1})\nBut that doesn't work, either.  The source translates that to:\nresponse = self.client.get(reverse('search'), query=1)\nWhich passes my query as a Header!\n\nIt looks like to satisfy my use case, we need to add another 'special' key in addition to extra, that simply passes the dict to client.get() as an argument, rather than converting it into a kwarg.\n\nAny thoughts?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/4", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/4/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/4/events", "html_url": "https://github.com/revsys/django-test-plus/issues/4", "id": 82446715, "node_id": "MDU6SXNzdWU4MjQ0NjcxNQ==", "number": 4, "title": "Make it so you can import TestCase from test_plus", "user": {"login": "epicserve", "id": 191620, "node_id": "MDQ6VXNlcjE5MTYyMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/191620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/epicserve", "html_url": "https://github.com/epicserve", "followers_url": "https://api.github.com/users/epicserve/followers", "following_url": "https://api.github.com/users/epicserve/following{/other_user}", "gists_url": "https://api.github.com/users/epicserve/gists{/gist_id}", "starred_url": "https://api.github.com/users/epicserve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/epicserve/subscriptions", "organizations_url": "https://api.github.com/users/epicserve/orgs", "repos_url": "https://api.github.com/users/epicserve/repos", "events_url": "https://api.github.com/users/epicserve/events{/privacy}", "received_events_url": "https://api.github.com/users/epicserve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-05-29T14:17:34Z", "updated_at": "2015-06-16T15:18:43Z", "closed_at": "2015-06-16T15:18:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Just a thought, what about making it so you can import `TestCase` from `test_plus.__init__.py`?\n\nThis just seems like it might be little nicer \n\n``` python\nfrom test_plus import TestCase\n```\n\nthan this:\n\n``` python\nfrom test_plus.test import TestCase\n```\n\nI think adding something like the following in `test_plus.__init__.py` would do the trick:\n\n``` python\nfrom .test import TestCase\n\n__all__ = [\n    'TestCase',\n]\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/revsys/django-test-plus/issues/2", "repository_url": "https://api.github.com/repos/revsys/django-test-plus", "labels_url": "https://api.github.com/repos/revsys/django-test-plus/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/revsys/django-test-plus/issues/2/comments", "events_url": "https://api.github.com/repos/revsys/django-test-plus/issues/2/events", "html_url": "https://github.com/revsys/django-test-plus/issues/2", "id": 81980025, "node_id": "MDU6SXNzdWU4MTk4MDAyNQ==", "number": 2, "title": "Readme typo", "user": {"login": "ensignavenger", "id": 1141854, "node_id": "MDQ6VXNlcjExNDE4NTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1141854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensignavenger", "html_url": "https://github.com/ensignavenger", "followers_url": "https://api.github.com/users/ensignavenger/followers", "following_url": "https://api.github.com/users/ensignavenger/following{/other_user}", "gists_url": "https://api.github.com/users/ensignavenger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensignavenger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensignavenger/subscriptions", "organizations_url": "https://api.github.com/users/ensignavenger/orgs", "repos_url": "https://api.github.com/users/ensignavenger/repos", "events_url": "https://api.github.com/users/ensignavenger/events{/privacy}", "received_events_url": "https://api.github.com/users/ensignavenger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-05-28T15:21:26Z", "updated_at": "2015-05-28T21:21:01Z", "closed_at": "2015-05-28T21:21:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Nice work!  I am going to try using this in my project today.  \n\nIn your readme, the line:\n\npk_url self.reverse('name-takes-a-pk', pk=12)\n\nshould probably be:\n\npk_url = self.reverse('name-takes-a-pk', pk=12)\n\n(Forgot the '=')\n", "performed_via_github_app": null, "score": 1.0}]}