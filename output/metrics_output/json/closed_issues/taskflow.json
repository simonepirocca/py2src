{"total_count": 100, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/taskflow/taskflow/issues/221", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/221/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/221/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/221/events", "html_url": "https://github.com/taskflow/taskflow/issues/221", "id": 687397465, "node_id": "MDU6SXNzdWU2ODczOTc0NjU=", "number": 221, "title": "need get notification when thread get created and destoryed", "user": {"login": "9MW", "id": 22912791, "node_id": "MDQ6VXNlcjIyOTEyNzkx", "avatar_url": "https://avatars0.githubusercontent.com/u/22912791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/9MW", "html_url": "https://github.com/9MW", "followers_url": "https://api.github.com/users/9MW/followers", "following_url": "https://api.github.com/users/9MW/following{/other_user}", "gists_url": "https://api.github.com/users/9MW/gists{/gist_id}", "starred_url": "https://api.github.com/users/9MW/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/9MW/subscriptions", "organizations_url": "https://api.github.com/users/9MW/orgs", "repos_url": "https://api.github.com/users/9MW/repos", "events_url": "https://api.github.com/users/9MW/events{/privacy}", "received_events_url": "https://api.github.com/users/9MW/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-27T16:57:57Z", "updated_at": "2020-08-29T05:44:10Z", "closed_at": "2020-08-29T05:44:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Please describe your feature request.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\ni 'm use libcds in project,and i need a way to notify cds when thread gets create or destory,any way could achieve that?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/218", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/218/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/218/events", "html_url": "https://github.com/taskflow/taskflow/issues/218", "id": 685638426, "node_id": "MDU6SXNzdWU2ODU2Mzg0MjY=", "number": 218, "title": "doc grammar", "user": {"login": "mgood7123", "id": 26642847, "node_id": "MDQ6VXNlcjI2NjQyODQ3", "avatar_url": "https://avatars3.githubusercontent.com/u/26642847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgood7123", "html_url": "https://github.com/mgood7123", "followers_url": "https://api.github.com/users/mgood7123/followers", "following_url": "https://api.github.com/users/mgood7123/following{/other_user}", "gists_url": "https://api.github.com/users/mgood7123/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgood7123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgood7123/subscriptions", "organizations_url": "https://api.github.com/users/mgood7123/orgs", "repos_url": "https://api.github.com/users/mgood7123/repos", "events_url": "https://api.github.com/users/mgood7123/events{/privacy}", "received_events_url": "https://api.github.com/users/mgood7123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-25T16:49:57Z", "updated_at": "2020-08-25T19:08:51Z", "closed_at": "2020-08-25T19:08:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n`} // at this point, taskflow might get destructed while it is running, resulting in defined behavior`\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to https://taskflow.github.io/taskflow/chapter2.html#C2_ThreadSafety\r\n3. Scroll up to 'Issuing multiple runs on the same taskflow will automatically synchronize to a sequential chain of executions in the order of run calls.'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/217", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/217/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/217/events", "html_url": "https://github.com/taskflow/taskflow/issues/217", "id": 685547272, "node_id": "MDU6SXNzdWU2ODU1NDcyNzI=", "number": 217, "title": "alias", "user": {"login": "mgood7123", "id": 26642847, "node_id": "MDQ6VXNlcjI2NjQyODQ3", "avatar_url": "https://avatars3.githubusercontent.com/u/26642847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgood7123", "html_url": "https://github.com/mgood7123", "followers_url": "https://api.github.com/users/mgood7123/followers", "following_url": "https://api.github.com/users/mgood7123/following{/other_user}", "gists_url": "https://api.github.com/users/mgood7123/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgood7123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgood7123/subscriptions", "organizations_url": "https://api.github.com/users/mgood7123/orgs", "repos_url": "https://api.github.com/users/mgood7123/repos", "events_url": "https://api.github.com/users/mgood7123/events{/privacy}", "received_events_url": "https://api.github.com/users/mgood7123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-25T14:43:29Z", "updated_at": "2020-08-25T16:15:07Z", "closed_at": "2020-08-25T16:15:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Please describe your feature request.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n\r\ncould you provide a `tf::Task::depend` alias for `tf::Task::precede`?\r\nand a could you provide a `tf::Taskflow::add` alias for `tf::Taskflow::emplace`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/216", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/216/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/216/events", "html_url": "https://github.com/taskflow/taskflow/issues/216", "id": 685542528, "node_id": "MDU6SXNzdWU2ODU1NDI1Mjg=", "number": 216, "title": "pipelining example (with working non-taskflow pipeline example)", "user": {"login": "mgood7123", "id": 26642847, "node_id": "MDQ6VXNlcjI2NjQyODQ3", "avatar_url": "https://avatars3.githubusercontent.com/u/26642847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgood7123", "html_url": "https://github.com/mgood7123", "followers_url": "https://api.github.com/users/mgood7123/followers", "following_url": "https://api.github.com/users/mgood7123/following{/other_user}", "gists_url": "https://api.github.com/users/mgood7123/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgood7123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgood7123/subscriptions", "organizations_url": "https://api.github.com/users/mgood7123/orgs", "repos_url": "https://api.github.com/users/mgood7123/repos", "events_url": "https://api.github.com/users/mgood7123/events{/privacy}", "received_events_url": "https://api.github.com/users/mgood7123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-08-25T14:38:40Z", "updated_at": "2020-08-27T05:43:43Z", "closed_at": "2020-08-27T05:43:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Please describe your feature request.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n\r\nwould it be possible to use taskflow to implement pipe-lining (software)\r\n\r\nfor example\r\n\r\n```\r\nZ takes 4 seconds\r\nX takes 1 second\r\nX depends on Z\r\nW is waiting\r\nE is executing\r\nexecution:  |1|2|3|4|5|6|7|8|\r\n            |Z|E|E|E|Z|E|E|E|\r\n            |W|W|W|W|X|W|W|W|\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/214", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/214/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/214/events", "html_url": "https://github.com/taskflow/taskflow/issues/214", "id": 684170225, "node_id": "MDU6SXNzdWU2ODQxNzAyMjU=", "number": 214, "title": "is there a better way for dynamic parallel_for?", "user": {"login": "9MW", "id": 22912791, "node_id": "MDQ6VXNlcjIyOTEyNzkx", "avatar_url": "https://avatars0.githubusercontent.com/u/22912791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/9MW", "html_url": "https://github.com/9MW", "followers_url": "https://api.github.com/users/9MW/followers", "following_url": "https://api.github.com/users/9MW/following{/other_user}", "gists_url": "https://api.github.com/users/9MW/gists{/gist_id}", "starred_url": "https://api.github.com/users/9MW/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/9MW/subscriptions", "organizations_url": "https://api.github.com/users/9MW/orgs", "repos_url": "https://api.github.com/users/9MW/repos", "events_url": "https://api.github.com/users/9MW/events{/privacy}", "received_events_url": "https://api.github.com/users/9MW/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-23T12:02:36Z", "updated_at": "2020-08-23T16:09:04Z", "closed_at": "2020-08-23T15:58:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need varying size parallel_for,but in current imp i need\r\nrecreate parallel_for task or use parallel_for in subflow.that cost a lot time compare with just execute exist taskflow.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/213", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/213/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/213/events", "html_url": "https://github.com/taskflow/taskflow/issues/213", "id": 681001680, "node_id": "MDU6SXNzdWU2ODEwMDE2ODA=", "number": 213, "title": "What is the proper way to perform #pragma omp master in taskflow", "user": {"login": "UNDEFINED-BEHAVIOR", "id": 8407331, "node_id": "MDQ6VXNlcjg0MDczMzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/8407331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/UNDEFINED-BEHAVIOR", "html_url": "https://github.com/UNDEFINED-BEHAVIOR", "followers_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/followers", "following_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/following{/other_user}", "gists_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/gists{/gist_id}", "starred_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/subscriptions", "organizations_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/orgs", "repos_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/repos", "events_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/events{/privacy}", "received_events_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-18T12:27:23Z", "updated_at": "2020-08-19T01:42:51Z", "closed_at": "2020-08-19T01:42:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "There are situations such as plugins development where the user is required to call something that can only be called from the main thread, in the middle of the execution. What would be the best way to do this in taskflow?\r\n\r\nMy current method is to divide execution in to multiple Taskflow objects:\r\n\r\n```\r\ntaskflow tf1, tf2\r\n// ... Enqueue tasks for tf1\r\n// ... Enqueue tasks for tf2\r\nauto f = executor.run(tf1)\r\nsomeMainThreadExclusiveFn() // tf1 probably running in parallel at this point (?)\r\n// ... Some more main thread fns\r\nf.wait()\r\nexecutor.run(tf2)\r\n// ...\r\n```\r\n\r\nIs there a cleaner way to do this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/211", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/211/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/211/events", "html_url": "https://github.com/taskflow/taskflow/issues/211", "id": 678987806, "node_id": "MDU6SXNzdWU2Nzg5ODc4MDY=", "number": 211, "title": "How to retrieve thread id?", "user": {"login": "UNDEFINED-BEHAVIOR", "id": 8407331, "node_id": "MDQ6VXNlcjg0MDczMzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/8407331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/UNDEFINED-BEHAVIOR", "html_url": "https://github.com/UNDEFINED-BEHAVIOR", "followers_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/followers", "following_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/following{/other_user}", "gists_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/gists{/gist_id}", "starred_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/subscriptions", "organizations_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/orgs", "repos_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/repos", "events_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/events{/privacy}", "received_events_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-14T08:17:29Z", "updated_at": "2020-08-14T17:11:59Z", "closed_at": "2020-08-14T17:11:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there an equivalent of omp_get_thread_num()?\r\nIt is possible to get one from std::this_thread::get_id() of course but is there a way to get nicely numbered thread ids?\r\nexample: 0 .. N for 0.. N workers", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/204", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/204/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/204/events", "html_url": "https://github.com/taskflow/taskflow/issues/204", "id": 667525044, "node_id": "MDU6SXNzdWU2Njc1MjUwNDQ=", "number": 204, "title": "Please consider re-enabling the case of tf::Executor with 0 workers (Running on main thread)", "user": {"login": "UNDEFINED-BEHAVIOR", "id": 8407331, "node_id": "MDQ6VXNlcjg0MDczMzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/8407331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/UNDEFINED-BEHAVIOR", "html_url": "https://github.com/UNDEFINED-BEHAVIOR", "followers_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/followers", "following_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/following{/other_user}", "gists_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/gists{/gist_id}", "starred_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/subscriptions", "organizations_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/orgs", "repos_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/repos", "events_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/events{/privacy}", "received_events_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-29T03:46:13Z", "updated_at": "2020-08-09T12:35:46Z", "closed_at": "2020-08-09T12:35:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Previously:\r\nhttps://github.com/taskflow/taskflow/issues/94\r\nRelated:\r\nhttps://github.com/taskflow/taskflow/issues/128\r\nhttps://github.com/taskflow/taskflow/issues/164\r\n\r\nHello,\r\n\r\nPlease consider re-enabling the case of tf::Executor with 0 workers. (Running on main thread)\r\nAs it allows the same written-in-node-graph-style, taskflow-integrated library to be ported directly to a system with no threading capability at minimal refactoring costs.\r\n\r\nIf this comes with a significant performance impact, perhaps consider introducing a preprocessor switch.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/203", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/203/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/203/events", "html_url": "https://github.com/taskflow/taskflow/issues/203", "id": 665793107, "node_id": "MDU6SXNzdWU2NjU3OTMxMDc=", "number": 203, "title": "Add CMake option to disable unit tests and examples build", "user": {"login": "egorodet", "id": 21955635, "node_id": "MDQ6VXNlcjIxOTU1NjM1", "avatar_url": "https://avatars2.githubusercontent.com/u/21955635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/egorodet", "html_url": "https://github.com/egorodet", "followers_url": "https://api.github.com/users/egorodet/followers", "following_url": "https://api.github.com/users/egorodet/following{/other_user}", "gists_url": "https://api.github.com/users/egorodet/gists{/gist_id}", "starred_url": "https://api.github.com/users/egorodet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/egorodet/subscriptions", "organizations_url": "https://api.github.com/users/egorodet/orgs", "repos_url": "https://api.github.com/users/egorodet/repos", "events_url": "https://api.github.com/users/egorodet/events{/privacy}", "received_events_url": "https://api.github.com/users/egorodet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-26T14:33:33Z", "updated_at": "2020-07-27T19:34:15Z", "closed_at": "2020-07-27T19:34:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "When Taskflow is added as submodule to the target Git project and is integrated in CMake build by adding as subdirectory, it would be nice to have CMake option to disable Taskflow unit tests and examples building, which are not needed when target project is built.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/197", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/197/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/197/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/197/events", "html_url": "https://github.com/taskflow/taskflow/issues/197", "id": 657007682, "node_id": "MDU6SXNzdWU2NTcwMDc2ODI=", "number": 197, "title": "Some unit test fail when building on i386 platforms", "user": {"login": "Levi-Armstrong", "id": 9803128, "node_id": "MDQ6VXNlcjk4MDMxMjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/9803128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Levi-Armstrong", "html_url": "https://github.com/Levi-Armstrong", "followers_url": "https://api.github.com/users/Levi-Armstrong/followers", "following_url": "https://api.github.com/users/Levi-Armstrong/following{/other_user}", "gists_url": "https://api.github.com/users/Levi-Armstrong/gists{/gist_id}", "starred_url": "https://api.github.com/users/Levi-Armstrong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Levi-Armstrong/subscriptions", "organizations_url": "https://api.github.com/users/Levi-Armstrong/orgs", "repos_url": "https://api.github.com/users/Levi-Armstrong/repos", "events_url": "https://api.github.com/users/Levi-Armstrong/events{/privacy}", "received_events_url": "https://api.github.com/users/Levi-Armstrong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-15T02:11:31Z", "updated_at": "2020-08-12T21:44:25Z", "closed_at": "2020-07-30T17:43:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am releasing this on launchpad.net which build for both amd64 and i386 and noticed that the tests below are failing on i386 platforms.\r\n\r\n```\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1202:\r\nTEST CASE:  ParallelForIndex.1thread\r\n  PositiveFloatingStep\r\n\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1146: FATAL ERROR: REQUIRE( n == counter ) is NOT correct!\r\n  values: REQUIRE( 5 == 6 )\r\n\r\n===============================================================================\r\n[doctest] test cases:      1 |      0 passed |      1 failed |    119 skipped\r\n[doctest] assertions:   3212 |   3211 passed |      1 failed |\r\n[doctest] Status: FAILURE!\r\n\r\n        Start  76: parallel_for_idx.2threads\r\n 76/165 Test  #76: parallel_for_idx.2threads ........***Failed    0.05 sec\r\n[doctest] doctest version is \"2.3.6\"\r\n[doctest] run with \"--help\" for options\r\n===============================================================================\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1206:\r\nTEST CASE:  ParallelForIndex.2threads\r\n  PositiveFloatingStep\r\n\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1146: FATAL ERROR: REQUIRE( n == counter ) is NOT correct!\r\n  values: REQUIRE( 5 == 6 )\r\n\r\n===============================================================================\r\n[doctest] test cases:      1 |      0 passed |      1 failed |    119 skipped\r\n[doctest] assertions:   3212 |   3211 passed |      1 failed |\r\n[doctest] Status: FAILURE!\r\n\r\n        Start  77: parallel_for_idx.3threads\r\n 77/165 Test  #77: parallel_for_idx.3threads ........***Failed    0.05 sec\r\n[doctest] doctest version is \"2.3.6\"\r\n[doctest] run with \"--help\" for options\r\n===============================================================================\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1210:\r\nTEST CASE:  ParallelForIndex.3threads\r\n  PositiveFloatingStep\r\n\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1146: FATAL ERROR: REQUIRE( n == counter ) is NOT correct!\r\n  values: REQUIRE( 5 == 6 )\r\n\r\n===============================================================================\r\n[doctest] test cases:      1 |      0 passed |      1 failed |    119 skipped\r\n[doctest] assertions:   3212 |   3211 passed |      1 failed |\r\n[doctest] Status: FAILURE!\r\n\r\n        Start  78: parallel_for_idx.4threads\r\n 78/165 Test  #78: parallel_for_idx.4threads ........***Failed    0.04 sec\r\n[doctest] doctest version is \"2.3.6\"\r\n[doctest] run with \"--help\" for options\r\n===============================================================================\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1214:\r\nTEST CASE:  ParallelForIndex.4threads\r\n  PositiveFloatingStep\r\n\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1146: FATAL ERROR: REQUIRE( n == counter ) is NOT correct!\r\n  values: REQUIRE( 5 == 6 )\r\n\r\n===============================================================================\r\n[doctest] test cases:      1 |      0 passed |      1 failed |    119 skipped\r\n[doctest] assertions:   3212 |   3211 passed |      1 failed |\r\n[doctest] Status: FAILURE!\r\n\r\n        Start  79: parallel_for_idx.5threads\r\n 79/165 Test  #79: parallel_for_idx.5threads ........***Failed    0.04 sec\r\n[doctest] doctest version is \"2.3.6\"\r\n[doctest] run with \"--help\" for options\r\n===============================================================================\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1218:\r\nTEST CASE:  ParallelForIndex.5threads\r\n  PositiveFloatingStep\r\n\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1146: FATAL ERROR: REQUIRE( n == counter ) is NOT correct!\r\n  values: REQUIRE( 5 == 6 )\r\n\r\n===============================================================================\r\n[doctest] test cases:      1 |      0 passed |      1 failed |    119 skipped\r\n[doctest] assertions:   3212 |   3211 passed |      1 failed |\r\n[doctest] Status: FAILURE!\r\n\r\n        Start  80: parallel_for_idx.6threads\r\n 80/165 Test  #80: parallel_for_idx.6threads ........***Failed    0.04 sec\r\n[doctest] doctest version is \"2.3.6\"\r\n[doctest] run with \"--help\" for options\r\n===============================================================================\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1222:\r\nTEST CASE:  ParallelForIndex.6threads\r\n  PositiveFloatingStep\r\n\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1146: FATAL ERROR: REQUIRE( n == counter ) is NOT correct!\r\n  values: REQUIRE( 5 == 6 )\r\n\r\n===============================================================================\r\n[doctest] test cases:      1 |      0 passed |      1 failed |    119 skipped\r\n[doctest] assertions:   3212 |   3211 passed |      1 failed |\r\n[doctest] Status: FAILURE!\r\n\r\n        Start  81: parallel_for_idx.7threads\r\n 81/165 Test  #81: parallel_for_idx.7threads ........***Failed    0.04 sec\r\n[doctest] doctest version is \"2.3.6\"\r\n[doctest] run with \"--help\" for options\r\n===============================================================================\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1226:\r\nTEST CASE:  ParallelForIndex.7threads\r\n  PositiveFloatingStep\r\n\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1146: FATAL ERROR: REQUIRE( n == counter ) is NOT correct!\r\n  values: REQUIRE( 5 == 6 )\r\n\r\n===============================================================================\r\n[doctest] test cases:      1 |      0 passed |      1 failed |    119 skipped\r\n[doctest] assertions:   3212 |   3211 passed |      1 failed |\r\n[doctest] Status: FAILURE!\r\n\r\n        Start  82: parallel_for_idx.8threads\r\n 82/165 Test  #82: parallel_for_idx.8threads ........***Failed    0.04 sec\r\n[doctest] doctest version is \"2.3.6\"\r\n[doctest] run with \"--help\" for options\r\n===============================================================================\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1230:\r\nTEST CASE:  ParallelForIndex.8threads\r\n  PositiveFloatingStep\r\n\r\n/<<PKGBUILDDIR>>/unittests/basics.cpp:1146: FATAL ERROR: REQUIRE( n == counter ) is NOT correct!\r\n  values: REQUIRE( 5 == 6 )\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/194", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/194/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/194/events", "html_url": "https://github.com/taskflow/taskflow/issues/194", "id": 648120034, "node_id": "MDU6SXNzdWU2NDgxMjAwMzQ=", "number": 194, "title": "Clarify project dependencies and `/3rd-party` directory in README", "user": {"login": "xbreak", "id": 13489144, "node_id": "MDQ6VXNlcjEzNDg5MTQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/13489144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xbreak", "html_url": "https://github.com/xbreak", "followers_url": "https://api.github.com/users/xbreak/followers", "following_url": "https://api.github.com/users/xbreak/following{/other_user}", "gists_url": "https://api.github.com/users/xbreak/gists{/gist_id}", "starred_url": "https://api.github.com/users/xbreak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xbreak/subscriptions", "organizations_url": "https://api.github.com/users/xbreak/orgs", "repos_url": "https://api.github.com/users/xbreak/repos", "events_url": "https://api.github.com/users/xbreak/events{/privacy}", "received_events_url": "https://api.github.com/users/xbreak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-30T12:08:58Z", "updated_at": "2020-07-01T07:07:27Z", "closed_at": "2020-07-01T07:07:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's not clear to me what the actual taskflow dependencies are (if any). Particularly in respect to the bundled dependencies in /3rd-part. I hope you can clarify both the \"build\" dependencies and separately dependencies needed for test and examples in the readme and whether they are installed with taskflow.\r\n\r\nCheers\r\n\r\nEdit: Also relates to #176. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/187", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/187/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/187/events", "html_url": "https://github.com/taskflow/taskflow/issues/187", "id": 640257221, "node_id": "MDU6SXNzdWU2NDAyNTcyMjE=", "number": 187, "title": "busy wait or wait a OS  notification ", "user": {"login": "hxxfff", "id": 7425600, "node_id": "MDQ6VXNlcjc0MjU2MDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/7425600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hxxfff", "html_url": "https://github.com/hxxfff", "followers_url": "https://api.github.com/users/hxxfff/followers", "following_url": "https://api.github.com/users/hxxfff/following{/other_user}", "gists_url": "https://api.github.com/users/hxxfff/gists{/gist_id}", "starred_url": "https://api.github.com/users/hxxfff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hxxfff/subscriptions", "organizations_url": "https://api.github.com/users/hxxfff/orgs", "repos_url": "https://api.github.com/users/hxxfff/repos", "events_url": "https://api.github.com/users/hxxfff/events{/privacy}", "received_events_url": "https://api.github.com/users/hxxfff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-17T08:43:37Z", "updated_at": "2020-06-21T22:29:54Z", "closed_at": "2020-06-21T22:29:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "busy wait or wait a OS  notification , in this case:\r\n\"\r\nA.precede(B, C, E); \r\nC.precede(D);\r\nB.precede(D, E);\r\n\"\r\nwhen task  D wait B and C,  may be  B and C finished almost a same time (for example time gap =1 us),  will D busy wait or wait a OS  notification(condition)? sometimes, the OS notification delay > 2ms, it mean's D is delayed 2ms before invoked. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/186", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/186/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/186/events", "html_url": "https://github.com/taskflow/taskflow/issues/186", "id": 638060757, "node_id": "MDU6SXNzdWU2MzgwNjA3NTc=", "number": 186, "title": "Is taskflow suitable for this scenario ?", "user": {"login": "boxerab", "id": 95393, "node_id": "MDQ6VXNlcjk1Mzkz", "avatar_url": "https://avatars0.githubusercontent.com/u/95393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boxerab", "html_url": "https://github.com/boxerab", "followers_url": "https://api.github.com/users/boxerab/followers", "following_url": "https://api.github.com/users/boxerab/following{/other_user}", "gists_url": "https://api.github.com/users/boxerab/gists{/gist_id}", "starred_url": "https://api.github.com/users/boxerab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boxerab/subscriptions", "organizations_url": "https://api.github.com/users/boxerab/orgs", "repos_url": "https://api.github.com/users/boxerab/repos", "events_url": "https://api.github.com/users/boxerab/events{/privacy}", "received_events_url": "https://api.github.com/users/boxerab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2020-06-13T00:26:47Z", "updated_at": "2020-06-15T12:51:15Z", "closed_at": "2020-06-15T12:51:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "This looks like a wonderful project.\r\n\r\nHere is my problem:\r\n\r\nI would like to run an incremental filter on a compressed 2D image i.e. decompress the image in small windows and then filter each window once it is fully decompressed. The uncompressed image is broken down into 64x64 code blocks (each code block has a matching compressed code stream), and the blocks are grouped into overlapping 128x128 windows, where each window covers 4 blocks. All blocks in a window must be decompressed before that window gets filtered. \r\n\r\nSay I have a 192x192 image; then there are 4 overlapping windows. \r\n\r\nLet's say I have four threads, and each thread processes one window. Each thread tries to decompress its blocks, and when they are all decompressed, it applies the filter, But, if a block is already being decompressed by another thread, then we must wait until the other thread is done (but while waiting we can steal decompress jobs from some other thread).\r\n\r\nSo....... could this problem be modelled efficiently with taskflow ?\r\n\r\nOne more issue: I would like to set the thread affinity of the threads in the pool, and reserve one core and it's hyperthreaded sibling for each window.\r\n\r\nThanks very much!\r\nAaron\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/184", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/184/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/184/events", "html_url": "https://github.com/taskflow/taskflow/issues/184", "id": 636067983, "node_id": "MDU6SXNzdWU2MzYwNjc5ODM=", "number": 184, "title": "confict with boost 1.63", "user": {"login": "yulei666", "id": 7358439, "node_id": "MDQ6VXNlcjczNTg0Mzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7358439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yulei666", "html_url": "https://github.com/yulei666", "followers_url": "https://api.github.com/users/yulei666/followers", "following_url": "https://api.github.com/users/yulei666/following{/other_user}", "gists_url": "https://api.github.com/users/yulei666/gists{/gist_id}", "starred_url": "https://api.github.com/users/yulei666/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yulei666/subscriptions", "organizations_url": "https://api.github.com/users/yulei666/orgs", "repos_url": "https://api.github.com/users/yulei666/repos", "events_url": "https://api.github.com/users/yulei666/events{/privacy}", "received_events_url": "https://api.github.com/users/yulei666/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-10T08:58:04Z", "updated_at": "2020-06-11T15:09:20Z", "closed_at": "2020-06-11T15:09:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nIn file taskflow/utility/traits.hpp\r\nMACRO **\"has_member\"** is defined but isn't used any where. And it is conflict with boost 1.63, make it complie error\r\n\r\n**Suggestion**\r\nChang Name to tf_has_member Or Remove it?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/183", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/183/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/183/events", "html_url": "https://github.com/taskflow/taskflow/issues/183", "id": 635146548, "node_id": "MDU6SXNzdWU2MzUxNDY1NDg=", "number": 183, "title": "debug.cpp is missing even though the link of debug.cpp is written in README.md", "user": {"login": "ShotaOchi", "id": 26920335, "node_id": "MDQ6VXNlcjI2OTIwMzM1", "avatar_url": "https://avatars3.githubusercontent.com/u/26920335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShotaOchi", "html_url": "https://github.com/ShotaOchi", "followers_url": "https://api.github.com/users/ShotaOchi/followers", "following_url": "https://api.github.com/users/ShotaOchi/following{/other_user}", "gists_url": "https://api.github.com/users/ShotaOchi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShotaOchi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShotaOchi/subscriptions", "organizations_url": "https://api.github.com/users/ShotaOchi/orgs", "repos_url": "https://api.github.com/users/ShotaOchi/repos", "events_url": "https://api.github.com/users/ShotaOchi/events{/privacy}", "received_events_url": "https://api.github.com/users/ShotaOchi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-09T06:23:54Z", "updated_at": "2020-06-09T17:11:52Z", "closed_at": "2020-06-09T17:11:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "The URL below is written in README.md.\r\nhttps://github.com/taskflow/taskflow/blob/master/examples/debug.cpp\r\n\r\nHowever, clicking the link causes 404 error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/178", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/178/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/178/events", "html_url": "https://github.com/taskflow/taskflow/issues/178", "id": 629011564, "node_id": "MDU6SXNzdWU2MjkwMTE1NjQ=", "number": 178, "title": "Inconsistent tags", "user": {"login": "egorpugin", "id": 4325333, "node_id": "MDQ6VXNlcjQzMjUzMzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4325333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/egorpugin", "html_url": "https://github.com/egorpugin", "followers_url": "https://api.github.com/users/egorpugin/followers", "following_url": "https://api.github.com/users/egorpugin/following{/other_user}", "gists_url": "https://api.github.com/users/egorpugin/gists{/gist_id}", "starred_url": "https://api.github.com/users/egorpugin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/egorpugin/subscriptions", "organizations_url": "https://api.github.com/users/egorpugin/orgs", "repos_url": "https://api.github.com/users/egorpugin/repos", "events_url": "https://api.github.com/users/egorpugin/events{/privacy}", "received_events_url": "https://api.github.com/users/egorpugin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-02T08:34:43Z", "updated_at": "2020-06-02T16:27:12Z", "closed_at": "2020-06-02T16:27:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "This breaks some scripts.\r\n\r\n![image](https://user-images.githubusercontent.com/4325333/83498797-0bb2c800-a4c5-11ea-8788-feaba104b7b6.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/177", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/177/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/177/events", "html_url": "https://github.com/taskflow/taskflow/issues/177", "id": 627556916, "node_id": "MDU6SXNzdWU2Mjc1NTY5MTY=", "number": 177, "title": "Missing dependency in the cmake.in file", "user": {"login": "Levi-Armstrong", "id": 9803128, "node_id": "MDQ6VXNlcjk4MDMxMjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/9803128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Levi-Armstrong", "html_url": "https://github.com/Levi-Armstrong", "followers_url": "https://api.github.com/users/Levi-Armstrong/followers", "following_url": "https://api.github.com/users/Levi-Armstrong/following{/other_user}", "gists_url": "https://api.github.com/users/Levi-Armstrong/gists{/gist_id}", "starred_url": "https://api.github.com/users/Levi-Armstrong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Levi-Armstrong/subscriptions", "organizations_url": "https://api.github.com/users/Levi-Armstrong/orgs", "repos_url": "https://api.github.com/users/Levi-Armstrong/repos", "events_url": "https://api.github.com/users/Levi-Armstrong/events{/privacy}", "received_events_url": "https://api.github.com/users/Levi-Armstrong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-29T21:34:29Z", "updated_at": "2020-06-04T16:14:56Z", "closed_at": "2020-06-04T16:14:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nMissing dependencies in the cmake.in file. The package has the following required dependency which I believe should also be in the cmake.in file. If not I must add the line to my packages CMakeLists.txt file.\r\n\r\n- `find_package(Threads REQUIRED)`\r\n\r\nPropose adding the following line to the cmake.in file.\r\n\r\n- `find_dependency(Threads)`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/171", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/171/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/171/events", "html_url": "https://github.com/taskflow/taskflow/issues/171", "id": 625621864, "node_id": "MDU6SXNzdWU2MjU2MjE4NjQ=", "number": 171, "title": "Simple recursive Fibonacci with cpp-taskflow?", "user": {"login": "DanielLangr", "id": 7069698, "node_id": "MDQ6VXNlcjcwNjk2OTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/7069698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanielLangr", "html_url": "https://github.com/DanielLangr", "followers_url": "https://api.github.com/users/DanielLangr/followers", "following_url": "https://api.github.com/users/DanielLangr/following{/other_user}", "gists_url": "https://api.github.com/users/DanielLangr/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanielLangr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanielLangr/subscriptions", "organizations_url": "https://api.github.com/users/DanielLangr/orgs", "repos_url": "https://api.github.com/users/DanielLangr/repos", "events_url": "https://api.github.com/users/DanielLangr/events{/privacy}", "received_events_url": "https://api.github.com/users/DanielLangr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-27T11:41:17Z", "updated_at": "2020-06-15T05:56:15Z", "closed_at": "2020-06-01T08:22:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could you, please, provide an exemplary code how a simple recursive Fibonacci number calculation would be implemented with cpp-taskflow? Something similar such as follows with `std::async`:\r\n\r\n```\r\nlong Fib(long n) {\r\n   if (n < 2) return n;\r\n   auto fx = std::async(Fib, n - 1);\r\n   auto fy = std::async(Fib, n - 2);\r\n   return fx.get() + fy.get();\r\n}\r\n```\r\nor with OpenMP:\r\n\r\n```\r\nlong Fib(long n) // run by single thread within a parallel region\r\n{\r\n   if (n < 2) return n;\r\n   long x, y;\r\n   #pragma omp task untied shared(x)\r\n   x = Fib(n - 1);\r\n   #pragma omp task untied shared(y)\r\n   y = Fib(n - 2);\r\n   #pragma omp taskwait\r\n   return x + y;\r\n}\r\n```\r\n\r\nor with Intel TBB:\r\n\r\n```\r\nlong Fib(long n)\r\n{\r\n   if (n < 2) return n;\r\n   long x, y;\r\n   tbb::task_group g;\r\n   g.run([&]{ x = Fib(n - 1); });\r\n   g.run([&]{ y = Fib(n - 2); });\r\n   g.wait(); \r\n   return x + y;\r\n}\r\n```\r\n\r\nThis problem is almost an _ethalon_ in task parallelism, so I believe it would be worth adding it also to cpp-taskflow examples.\r\n\r\n**EDIT**\r\n\r\nI am new to cpp-taskflow, but tried to implement it by myself as follows:\r\n\r\n```\r\nlong Fib(long n, tf::Subflow& sbf)\r\n{\r\n   if (n < 2) return n;\r\n   long res1, res2;\r\n   auto task1 = sbf.emplace( [&res1, n] (tf::Subflow& sbf) { res1 = Fib(n - 1, sbf); } );\r\n   auto task2 = sbf.emplace( [&res2, n] (tf::Subflow& sbf) { res2 = Fib(n - 2, sbf); } );\r\n   // wait until task1 and task2 have finished; how???\r\n   return res1 + res2;\r\n}\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n   auto n = atol(argv[1]);\r\n   int n_threads = atoi(argv[2]);\r\n   long res{};\r\n\r\n   tf::Taskflow taskflow;\r\n   auto task = taskflow.emplace( [&res, n] (tf::Subflow& sbf) { res = Fib(n, sbf);  });\r\n   tf::Executor executor;\r\n   auto fut = executor.run_n(taskflow, n_threads);\r\n   fut.wait();\r\n\r\n   std::cout << \"n: \" << n << \", \" << \"result: \" << res << std::endl;\r\n}\r\n```\r\n\r\nBut it does not give the correct results. I believe the problem is that after emplacing new sub-tasks, I need somehow to wait for their completion (and suspend the current task meanwhile). Which is what all the above solutions with `std::async`, OpenMP, and TBB enable. Is there any possibility to achieve this with cpp-taskflow as well?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/168", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/168/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/168/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/168/events", "html_url": "https://github.com/taskflow/taskflow/issues/168", "id": 618366878, "node_id": "MDU6SXNzdWU2MTgzNjY4Nzg=", "number": 168, "title": "getenv", "user": {"login": "matt77hias", "id": 2464019, "node_id": "MDQ6VXNlcjI0NjQwMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2464019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matt77hias", "html_url": "https://github.com/matt77hias", "followers_url": "https://api.github.com/users/matt77hias/followers", "following_url": "https://api.github.com/users/matt77hias/following{/other_user}", "gists_url": "https://api.github.com/users/matt77hias/gists{/gist_id}", "starred_url": "https://api.github.com/users/matt77hias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matt77hias/subscriptions", "organizations_url": "https://api.github.com/users/matt77hias/orgs", "repos_url": "https://api.github.com/users/matt77hias/repos", "events_url": "https://api.github.com/users/matt77hias/events{/privacy}", "received_events_url": "https://api.github.com/users/matt77hias/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-14T16:26:21Z", "updated_at": "2020-05-18T18:59:13Z", "closed_at": "2020-05-18T18:59:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The only W4 MSVC warning that remains is:\r\n\r\nWarning C4996 'getenv': This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use `_CRT_SECURE_NO_WARNINGS`.\r\n\r\nThe current use, however, is perfectly fine and technically not unsafe.\r\n\r\n`getenv_s()` was added to C11 to let the caller provide a buffer, but will maybe be removed again.\r\nSo ideally `_dupenv_s` should be used _for MSVC_.\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/166", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/166/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/166/events", "html_url": "https://github.com/taskflow/taskflow/issues/166", "id": 618297134, "node_id": "MDU6SXNzdWU2MTgyOTcxMzQ=", "number": 166, "title": "Narrowing conversions", "user": {"login": "matt77hias", "id": 2464019, "node_id": "MDQ6VXNlcjI0NjQwMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2464019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matt77hias", "html_url": "https://github.com/matt77hias", "followers_url": "https://api.github.com/users/matt77hias/followers", "following_url": "https://api.github.com/users/matt77hias/following{/other_user}", "gists_url": "https://api.github.com/users/matt77hias/gists{/gist_id}", "starred_url": "https://api.github.com/users/matt77hias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matt77hias/subscriptions", "organizations_url": "https://api.github.com/users/matt77hias/orgs", "repos_url": "https://api.github.com/users/matt77hias/repos", "events_url": "https://api.github.com/users/matt77hias/events{/privacy}", "received_events_url": "https://api.github.com/users/matt77hias/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-14T14:53:35Z", "updated_at": "2020-05-14T18:03:37Z", "closed_at": "2020-05-14T18:03:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I think most `unsigned` (int) types (especially in observer.hpp) can be replaced with `std::size_t` to fix all narrowing conversion warnings.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/163", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/163/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/163/events", "html_url": "https://github.com/taskflow/taskflow/issues/163", "id": 608889435, "node_id": "MDU6SXNzdWU2MDg4ODk0MzU=", "number": 163, "title": "Unable to build if project depends on another library that uses an upstream MPark.Variant include", "user": {"login": "mydatamodels", "id": 52713225, "node_id": "MDQ6VXNlcjUyNzEzMjI1", "avatar_url": "https://avatars2.githubusercontent.com/u/52713225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mydatamodels", "html_url": "https://github.com/mydatamodels", "followers_url": "https://api.github.com/users/mydatamodels/followers", "following_url": "https://api.github.com/users/mydatamodels/following{/other_user}", "gists_url": "https://api.github.com/users/mydatamodels/gists{/gist_id}", "starred_url": "https://api.github.com/users/mydatamodels/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mydatamodels/subscriptions", "organizations_url": "https://api.github.com/users/mydatamodels/orgs", "repos_url": "https://api.github.com/users/mydatamodels/repos", "events_url": "https://api.github.com/users/mydatamodels/events{/privacy}", "received_events_url": "https://api.github.com/users/mydatamodels/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-29T08:56:50Z", "updated_at": "2020-04-30T08:54:01Z", "closed_at": "2020-04-30T08:54:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nOur project uses cpp-taskflow and xtl libraries.\r\nIn xtl the same variant implementation is used, but with some subtle differences:\r\n\r\nhttps://github.com/xtensor-stack/xtl/blob/master/include/xtl/xvariant_impl.hpp\r\n\r\nThe first thing that jumps out at me is that in the upstream the namespace is mpark and not nstd. Because of the header guards the first header included disables the other one, so for the client it's impossible to access to both namespaces.\r\n\r\n**To Reproduce**\r\nJust include both libraries and try to access both namespaces.\r\n\r\n**Additional context**\r\nI open the issue over you and not xtl because you changed the upstream :)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/161", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/161/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/161/events", "html_url": "https://github.com/taskflow/taskflow/issues/161", "id": 606973376, "node_id": "MDU6SXNzdWU2MDY5NzMzNzY=", "number": 161, "title": "Adaptive Heterogenous Task Scheduling", "user": {"login": "robinchrist", "id": 22774099, "node_id": "MDQ6VXNlcjIyNzc0MDk5", "avatar_url": "https://avatars1.githubusercontent.com/u/22774099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robinchrist", "html_url": "https://github.com/robinchrist", "followers_url": "https://api.github.com/users/robinchrist/followers", "following_url": "https://api.github.com/users/robinchrist/following{/other_user}", "gists_url": "https://api.github.com/users/robinchrist/gists{/gist_id}", "starred_url": "https://api.github.com/users/robinchrist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robinchrist/subscriptions", "organizations_url": "https://api.github.com/users/robinchrist/orgs", "repos_url": "https://api.github.com/users/robinchrist/repos", "events_url": "https://api.github.com/users/robinchrist/events{/privacy}", "received_events_url": "https://api.github.com/users/robinchrist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-26T10:07:09Z", "updated_at": "2020-04-29T15:50:03Z", "closed_at": "2020-04-29T15:50:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently adding a GPU / Accelerator backend to one of my projects and I'm facing the following problem:\r\n\r\nI basically need to schedule between different backends, i.e. a task (with dependencies) could be picked up by a GPU backend, or the CPU backend.\r\nAdditionally, I'd like to make the CPU backend NUMA aware... I basically need some kind of hybrid micro-macro scheduling.\r\n\r\nI'm not sure whether taskflow is the right tool for that. Do you have any hints for me, possibly to other projects?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/159", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/159/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/159/events", "html_url": "https://github.com/taskflow/taskflow/issues/159", "id": 602489853, "node_id": "MDU6SXNzdWU2MDI0ODk4NTM=", "number": 159, "title": "Pinning a node to a specifc thread ", "user": {"login": "jcelerier", "id": 2772730, "node_id": "MDQ6VXNlcjI3NzI3MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/2772730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcelerier", "html_url": "https://github.com/jcelerier", "followers_url": "https://api.github.com/users/jcelerier/followers", "following_url": "https://api.github.com/users/jcelerier/following{/other_user}", "gists_url": "https://api.github.com/users/jcelerier/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcelerier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcelerier/subscriptions", "organizations_url": "https://api.github.com/users/jcelerier/orgs", "repos_url": "https://api.github.com/users/jcelerier/repos", "events_url": "https://api.github.com/users/jcelerier/events{/privacy}", "received_events_url": "https://api.github.com/users/jcelerier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-18T15:48:00Z", "updated_at": "2020-04-20T16:12:41Z", "closed_at": "2020-04-20T16:12:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\ndoes the library offer any guarantee on stability of the threads on which a given node would execute (at least in the static scheduling case) ? \r\n\r\nThe reason being that some libraries sometimes attach data to the thread in which their constructor is called, and don't support these objects from ever being used from another thread.\r\nThus I'm wondering if this will already be safe, and if not, if there could be a way to specify that a given node should always execute on the same thread of the thread pool.\r\n\r\nThanks for the great lib !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/157", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/157/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/157/events", "html_url": "https://github.com/taskflow/taskflow/issues/157", "id": 597697631, "node_id": "MDU6SXNzdWU1OTc2OTc2MzE=", "number": 157, "title": "Support for an option to make the Executor exploit tasks", "user": {"login": "lawfuyang", "id": 53224523, "node_id": "MDQ6VXNlcjUzMjI0NTIz", "avatar_url": "https://avatars0.githubusercontent.com/u/53224523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lawfuyang", "html_url": "https://github.com/lawfuyang", "followers_url": "https://api.github.com/users/lawfuyang/followers", "following_url": "https://api.github.com/users/lawfuyang/following{/other_user}", "gists_url": "https://api.github.com/users/lawfuyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/lawfuyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lawfuyang/subscriptions", "organizations_url": "https://api.github.com/users/lawfuyang/orgs", "repos_url": "https://api.github.com/users/lawfuyang/repos", "events_url": "https://api.github.com/users/lawfuyang/events{/privacy}", "received_events_url": "https://api.github.com/users/lawfuyang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-04-10T05:06:41Z", "updated_at": "2020-04-15T01:57:13Z", "closed_at": "2020-04-15T01:57:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "By calling \"run().wait()\" on an Executor, it effectively blocks the executor's thread.\r\n\r\nThis removes the ability for me to freely create Taskflow objects in my application within executing tasks and achieving high levels of parallelism & ease of use.\r\n\r\nA workaround, which I am assuming is the intended design, is to pass around Subflow objects in all tasks. It's simply not ideal in an environment where abstraction on an enterprise scale is necessary. Ideally, the Executor itself should be stealing and exploiting tasks before triggering the \"wait\" call from the std::future object.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/154", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/154/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/154/events", "html_url": "https://github.com/taskflow/taskflow/issues/154", "id": 588591779, "node_id": "MDU6SXNzdWU1ODg1OTE3Nzk=", "number": 154, "title": "Relation to HeteroFlow?", "user": {"login": "dnbaker", "id": 6412885, "node_id": "MDQ6VXNlcjY0MTI4ODU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6412885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnbaker", "html_url": "https://github.com/dnbaker", "followers_url": "https://api.github.com/users/dnbaker/followers", "following_url": "https://api.github.com/users/dnbaker/following{/other_user}", "gists_url": "https://api.github.com/users/dnbaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnbaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnbaker/subscriptions", "organizations_url": "https://api.github.com/users/dnbaker/orgs", "repos_url": "https://api.github.com/users/dnbaker/repos", "events_url": "https://api.github.com/users/dnbaker/events{/privacy}", "received_events_url": "https://api.github.com/users/dnbaker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-26T17:23:42Z", "updated_at": "2020-03-26T19:20:06Z", "closed_at": "2020-03-26T19:20:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThe library looks great, and I'm excited to try it. I wanted to check whether one framework should be preferred over another.\r\n\r\nOn the README.md, it mentions HeteroFlow as a project using cpp-taskflow, but I don't see any examples of taskFlow in that codebase.\r\n\r\nIt also shows an example of using cpp-taskflow for CUDA computation.\r\n\r\nI have a variety of applications that would benefit from using cpp-taskflow, of which some would be a good fit for CUDA. If one wants to use one of the frameworks for heterogenous compute, should one be preferred?\r\n\r\nThanks!\r\n\r\nDaniel", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/153", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/153/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/153/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/153/events", "html_url": "https://github.com/taskflow/taskflow/issues/153", "id": 587517602, "node_id": "MDU6SXNzdWU1ODc1MTc2MDI=", "number": 153, "title": "Broken compilation of 2.3.1 due to warning with MSVC 2017", "user": {"login": "ToniSimi", "id": 43369564, "node_id": "MDQ6VXNlcjQzMzY5NTY0", "avatar_url": "https://avatars2.githubusercontent.com/u/43369564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ToniSimi", "html_url": "https://github.com/ToniSimi", "followers_url": "https://api.github.com/users/ToniSimi/followers", "following_url": "https://api.github.com/users/ToniSimi/following{/other_user}", "gists_url": "https://api.github.com/users/ToniSimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ToniSimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ToniSimi/subscriptions", "organizations_url": "https://api.github.com/users/ToniSimi/orgs", "repos_url": "https://api.github.com/users/ToniSimi/repos", "events_url": "https://api.github.com/users/ToniSimi/events{/privacy}", "received_events_url": "https://api.github.com/users/ToniSimi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-25T08:12:38Z", "updated_at": "2020-03-26T07:15:31Z", "closed_at": "2020-03-26T07:15:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are using MSVC 2017 in C++17 mode and our codebase follows the rule to treat warnings as errors. Release 2.3.1 (as well as the current codebase) includes a nameless struct which causes compilation to fail:\r\n\r\ntaskflow\\utility\\object_pool.hpp(86): warning C4201: nonstandard extension used: nameless struct/union", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/152", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/152/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/152/events", "html_url": "https://github.com/taskflow/taskflow/issues/152", "id": 586683941, "node_id": "MDU6SXNzdWU1ODY2ODM5NDE=", "number": 152, "title": "taskflow blocks", "user": {"login": "mjjdick", "id": 7288113, "node_id": "MDQ6VXNlcjcyODgxMTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7288113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjjdick", "html_url": "https://github.com/mjjdick", "followers_url": "https://api.github.com/users/mjjdick/followers", "following_url": "https://api.github.com/users/mjjdick/following{/other_user}", "gists_url": "https://api.github.com/users/mjjdick/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjjdick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjjdick/subscriptions", "organizations_url": "https://api.github.com/users/mjjdick/orgs", "repos_url": "https://api.github.com/users/mjjdick/repos", "events_url": "https://api.github.com/users/mjjdick/events{/privacy}", "received_events_url": "https://api.github.com/users/mjjdick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-24T04:31:10Z", "updated_at": "2020-03-25T08:29:08Z", "closed_at": "2020-03-25T08:29:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n```\r\n// A simple example to capture the following task dependencies.\r\n//\r\n// TaskA---->TaskB---->TaskD\r\n// TaskA---->TaskC---->TaskD\r\n\r\n#include <taskflow/taskflow.hpp>  // the only include you need\r\n\r\nvoid func(){\r\n    tf::Executor executor;\r\n    tf::Taskflow taskflow1;\r\n\r\n    auto A1 = taskflow1.emplace([]() { std::cout << \"TaskA1\\n\"; });\r\n    auto B1 = taskflow1.emplace([]() { std::cout << \"TaskB1\\n\"; });\r\n    auto C1 = taskflow1.emplace([]() { std::cout << \"TaskC1\\n\"; });\r\n    auto D1 = taskflow1.emplace([]() { std::cout << \"TaskD1\\n\"; });\r\n\r\n    A1.precede(B1);  // B runs after A  //          +---+\r\n    A1.precede(C1);  // C runs after A  //    +---->| B |-----+\r\n    B1.precede(D1);  // D runs after B  //    |     +---+     |\r\n    C1.precede(D1);  // D runs after C  //  +---+           +-v-\r\n\r\n    executor.run(taskflow1).wait();\r\n\r\n    std::cout<<11111;\r\n}\r\n\r\nint main(){\r\n\r\n  tf::Executor executor;\r\n  tf::Taskflow taskflow;\r\n\r\n  auto A = taskflow.emplace([]() { std::cout << \"TaskA\\n\"; });\r\n//  auto B = taskflow.emplace([]() { std::cout << \"TaskB\\n\"; });\r\n  auto B = taskflow.emplace([]() { func(); });\r\n  auto C = taskflow.emplace([]() { std::cout << \"TaskC\\n\"; });\r\n  auto D = taskflow.emplace([]() { std::cout << \"TaskD\\n\"; });\r\n\r\n  A.precede(B);  // B runs after A  //          +---+                  \r\n  A.precede(C);  // C runs after A  //    +---->| B |-----+            \r\n  B.precede(D);  // D runs after B  //    |     +---+     |            \r\n  C.precede(D);  // D runs after C  //  +---+           +-v-+\r\n\r\n  executor.run(taskflow).wait();    //    |     +---+     |\r\n                                    //    +---->| C |-----+            \r\n  return 0;                         //          +---+\r\n}\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\nI just jun this code\r\n\r\n**Additional context**\r\nI know this problem can be solved by subflow, but if I write a library using taskflow, and others use my lib and also use taskflow, it will blocked, am i right? so, how can i solved the problem? thx very much for any help .\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/151", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/151/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/151/events", "html_url": "https://github.com/taskflow/taskflow/issues/151", "id": 582580237, "node_id": "MDU6SXNzdWU1ODI1ODAyMzc=", "number": 151, "title": "std::is_pod_v is deprecated since C++20", "user": {"login": "matt77hias", "id": 2464019, "node_id": "MDQ6VXNlcjI0NjQwMTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2464019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matt77hias", "html_url": "https://github.com/matt77hias", "followers_url": "https://api.github.com/users/matt77hias/followers", "following_url": "https://api.github.com/users/matt77hias/following{/other_user}", "gists_url": "https://api.github.com/users/matt77hias/gists{/gist_id}", "starred_url": "https://api.github.com/users/matt77hias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matt77hias/subscriptions", "organizations_url": "https://api.github.com/users/matt77hias/orgs", "repos_url": "https://api.github.com/users/matt77hias/repos", "events_url": "https://api.github.com/users/matt77hias/events{/privacy}", "received_events_url": "https://api.github.com/users/matt77hias/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-16T20:29:55Z", "updated_at": "2020-03-26T05:51:32Z", "closed_at": "2020-03-26T05:51:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "passive_vector.hpp:\r\n\r\n`static_assert(std::is_pod_v<T>, \"must be a passive data structure type\");`\r\n\r\nCref.: https://stackoverflow.com/questions/48225673/why-is-stdis-pod-deprecated-in-c20\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/150", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/150/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/150/events", "html_url": "https://github.com/taskflow/taskflow/issues/150", "id": 576660339, "node_id": "MDU6SXNzdWU1NzY2NjAzMzk=", "number": 150, "title": "Is it( tf::Executor) thread safe?", "user": {"login": "nqf", "id": 29970876, "node_id": "MDQ6VXNlcjI5OTcwODc2", "avatar_url": "https://avatars2.githubusercontent.com/u/29970876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nqf", "html_url": "https://github.com/nqf", "followers_url": "https://api.github.com/users/nqf/followers", "following_url": "https://api.github.com/users/nqf/following{/other_user}", "gists_url": "https://api.github.com/users/nqf/gists{/gist_id}", "starred_url": "https://api.github.com/users/nqf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nqf/subscriptions", "organizations_url": "https://api.github.com/users/nqf/orgs", "repos_url": "https://api.github.com/users/nqf/repos", "events_url": "https://api.github.com/users/nqf/events{/privacy}", "received_events_url": "https://api.github.com/users/nqf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-06T02:46:07Z", "updated_at": "2020-03-11T00:19:12Z", "closed_at": "2020-03-11T00:19:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nI would like to share a  tf::Executor  globally", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/149", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/149/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/149/events", "html_url": "https://github.com/taskflow/taskflow/issues/149", "id": 573612205, "node_id": "MDU6SXNzdWU1NzM2MTIyMDU=", "number": 149, "title": "Head doesn't compile on MSVC", "user": {"login": "dcnieho", "id": 1787673, "node_id": "MDQ6VXNlcjE3ODc2NzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1787673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcnieho", "html_url": "https://github.com/dcnieho", "followers_url": "https://api.github.com/users/dcnieho/followers", "following_url": "https://api.github.com/users/dcnieho/following{/other_user}", "gists_url": "https://api.github.com/users/dcnieho/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcnieho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcnieho/subscriptions", "organizations_url": "https://api.github.com/users/dcnieho/orgs", "repos_url": "https://api.github.com/users/dcnieho/repos", "events_url": "https://api.github.com/users/dcnieho/events{/privacy}", "received_events_url": "https://api.github.com/users/dcnieho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-01T20:43:35Z", "updated_at": "2020-03-05T20:14:32Z", "closed_at": "2020-03-05T20:14:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen compiling simple.cpp, I get:\r\n``C:\\dat\\projects\\Tonii\\TaskFlowTest\\taskflow\\taskflow\\utility\\object_pool.hpp(645): error C4703: potentially uninitialized local pointer variable 's' used``\r\n\r\nThis is in x64 debug mode, with /permissive- /std:c++latest\r\nComplete command line:\r\n``/JMC /permissive- /GS /W3 /Zc:wchar_t /I\".\\taskflow\" /ZI /Gm- /Od /sdl /Fd\"x64\\Debug\\vc142.pdb\" /Zc:inline /fp:precise /D \"_DEBUG\" /D \"_CONSOLE\" /D \"_UNICODE\" /D \"UNICODE\" /errorReport:prompt /WX- /Zc:forScope /RTC1 /Gd /MDd /std:c++latest /FC /Fa\"x64\\Debug\\\" /EHsc /nologo /Fo\"x64\\Debug\\\" /Fp\"x64\\Debug\\TaskFlowTest.pch\" /diagnostics:column``\r\n\r\nI get the same error both with current master HEAD as with the commit tagged v2.3.0\r\n\r\n**edit: MSVC version: 19.4.5**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/148", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/148/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/148/events", "html_url": "https://github.com/taskflow/taskflow/issues/148", "id": 573561245, "node_id": "MDU6SXNzdWU1NzM1NjEyNDU=", "number": 148, "title": "Continuous processing of input queue", "user": {"login": "dcnieho", "id": 1787673, "node_id": "MDQ6VXNlcjE3ODc2NzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1787673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcnieho", "html_url": "https://github.com/dcnieho", "followers_url": "https://api.github.com/users/dcnieho/followers", "following_url": "https://api.github.com/users/dcnieho/following{/other_user}", "gists_url": "https://api.github.com/users/dcnieho/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcnieho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcnieho/subscriptions", "organizations_url": "https://api.github.com/users/dcnieho/orgs", "repos_url": "https://api.github.com/users/dcnieho/repos", "events_url": "https://api.github.com/users/dcnieho/events{/privacy}", "received_events_url": "https://api.github.com/users/dcnieho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-01T15:00:32Z", "updated_at": "2020-03-06T07:39:22Z", "closed_at": "2020-03-06T07:39:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "cpp-taskflow looks like exactly what i need, but i have trouble wrapping my head around exactly how i would use it. Sorry for this help request, hope its ok to post here.\r\n\r\nI am looking to build up an image processing pipeline that will be run on each image provided by a camera. These images will be stored in a queue, and will come in at a faster rate (e.g. 500 Hz, so every 2 ms) than executing the whole pipeline will take (perhaps 10s of ms). Each image will traverse the exact same pipeline. I would like for this application to run real-time (with delay, assume we have enough cores) and thus need the built pipeline to run multiple times, and interleaved/overlapped (so next pipeline execution starts before previous is finished). This sounds similar to #66, which i understand is still open. I see also #39 which seems to provide an answer, but the syntax is no longer supported. As i currently can't compile v2.3.0 and HEAD (see #149), i am asking here first to check the concept and ask the questions i have.\r\n\r\nPlease let me know if this understanding is incorrect:\r\n- I understand i would build up a ``tf::Taskflow`` representing my pipeline (not purely linear, has some operations that can run in parallel and are then gathered),\r\n- To enable overlapping execution of multiple pipelines, i can submit the taskflow to the executor multiple times. Would i do this by simply calling ``tf::Executor::run_until()`` multiple times? If i understand the docs correctly, this would not work, because they say in chapter 2: \"Issuing multiple runs on the same taskflow will automatically synchronize to a sequential chain of executions in the order of run calls.\" So the second run_until() wouldn't start until the first met its exit condition? EDIT: **ah, i understand the trick is to enqueue not the _the same_ pipeline multiple times, but _multiple identical_ pipelines on the executor. See below untested play code. I think that leaves only the below question.**\r\n- how would i efficiently get my data into the pipeline? I envision that perhaps the first node would be popping an image of the images-to-be-processed-queue, and this pop would be blocking, suspending the queue until an image is available. Would that work or be a bad idea with your scheduler?\r\n\r\nThanks very much for your advice!\r\n\r\nStarting code to work from, based on #39, hopefully updated to current taskflow version:\r\n```c++\r\n#include <taskflow/taskflow.hpp>\r\n#include <thread>\r\n#include <chrono>\r\nusing namespace std::literals::chrono_literals;\r\n\r\nstd::mutex logMutex;\r\nvoid dispatchPipeline(tf::Executor& executor, int batch)\r\n{\r\n    auto taskMaker = [](std::string const& taskName, int batch, std::chrono::seconds sleepDur)\r\n    {\r\n        return [=]()\r\n\t{\r\n            // Simulate some work\r\n            std::this_thread::sleep_for(sleepDur);\r\n            {\r\n                std::lock_guard<std::mutex> lock(logMutex);\r\n                std::cout << taskName << batch << '\\n';\r\n            }\r\n        };\r\n    };\r\n    \r\n    tf::Taskflow f{};\r\n    auto[A, B, C, D] = f.emplace(\r\n        taskMaker(\"A\", batch, 1s),\r\n        taskMaker(\"B\", batch, 2s),\r\n        taskMaker(\"C\", batch, 3s),\r\n        taskMaker(\"D\", batch, 4s)\r\n    );\r\n\r\n    A.precede(B);  // B runs after A\r\n    A.precede(C);  // C runs after A\r\n    B.precede(D);  // D runs after B\r\n    C.precede(D);  // D runs after C\r\n\r\n    // Schedule this independent graph of tasks (so they start running)\r\n    executor.run_n(f, 4, [=](){ std::lock_guard<std::mutex> lock(logMutex); std::cout << \"end of four executions for batch\" << batch << \"\\n\"; });\r\n}\r\n\r\nint main()\r\n{\r\n    tf::Executor executor(4);\r\n\r\n    // enqueue identical pipeline multiple times, for overlapped execution\r\n    for (auto batch = 0; batch < 4; ++batch)\r\n    {\r\n        dispatchPipeline(executor, batch);\r\n    }\r\n    std::cout << \"Tasks dispatched\\n\";\r\n    executor.wait_for_all();\r\n    std::cout << \"All tasks finished\\n\";\r\n\r\n    return 0;\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/144", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/144/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/144/events", "html_url": "https://github.com/taskflow/taskflow/issues/144", "id": 571664281, "node_id": "MDU6SXNzdWU1NzE2NjQyODE=", "number": 144, "title": "Many tests fail with Bus error on FreeBSD and Clang", "user": {"login": "vedranmiletic", "id": 246061, "node_id": "MDQ6VXNlcjI0NjA2MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/246061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vedranmiletic", "html_url": "https://github.com/vedranmiletic", "followers_url": "https://api.github.com/users/vedranmiletic/followers", "following_url": "https://api.github.com/users/vedranmiletic/following{/other_user}", "gists_url": "https://api.github.com/users/vedranmiletic/gists{/gist_id}", "starred_url": "https://api.github.com/users/vedranmiletic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vedranmiletic/subscriptions", "organizations_url": "https://api.github.com/users/vedranmiletic/orgs", "repos_url": "https://api.github.com/users/vedranmiletic/repos", "events_url": "https://api.github.com/users/vedranmiletic/events{/privacy}", "received_events_url": "https://api.github.com/users/vedranmiletic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-02-26T21:14:57Z", "updated_at": "2020-03-11T10:11:13Z", "closed_at": "2020-03-11T04:57:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nMany tests fail on FreeBSD with Bus error when compiled with Clang.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Compile with Clang\r\n2. Test\r\n\r\n```\r\nThe following tests FAILED:\r\n         29 - builder (Bus error)\r\n         30 - creation (Bus error)\r\n         31 - iterators (Bus error)\r\n         32 - std_function (Bus error)\r\n         33 - serialruns.1thread (Bus error)\r\n         34 - serialruns.2threads (Bus error)\r\n         35 - serialruns.3threads (Bus error)\r\n         36 - serialruns.4threads (Bus error)\r\n         37 - serialruns.5threads (Bus error)\r\n         38 - serialruns.6threads (Bus error)\r\n         39 - serialruns.7threads (Bus error)\r\n         40 - serialruns.8threads (Bus error)\r\n         41 - parallel_runs.1thread (Bus error)\r\n         42 - parallel_runs.2threads (Bus error)\r\n         43 - parallel_runs.3threads (Bus error)\r\n         44 - parallel_runs.4threads (Bus error)\r\n         45 - parallel_runs.5threads (Bus error)\r\n         46 - parallel_runs.6threads (Bus error)\r\n         47 - parallel_runs.7threads (Bus error)\r\n         48 - parallel_runs.8threads (Bus error)\r\n         49 - parallel_for.1thread (Bus error)\r\n         50 - parallel_for.2threads (Bus error)\r\n         51 - parallel_for.3threads (Bus error)\r\n         52 - parallel_for.4threads (Bus error)\r\n         53 - parallel_for.5threads (Bus error)\r\n         54 - parallel_for.6threads (Bus error)\r\n         55 - parallel_for.7threads (Bus error)\r\n         56 - parallel_for.8threads (Bus error)\r\n         57 - parallel_for_idx.1thread (Bus error)\r\n         58 - parallel_for_idx.2threads (Bus error)\r\n         59 - parallel_for_idx.3threads (Bus error)\r\n         60 - parallel_for_idx.4threads (Bus error)\r\n         61 - parallel_for_idx.5threads (Bus error)\r\n         62 - parallel_for_idx.6threads (Bus error)\r\n         63 - parallel_for_idx.7threads (Bus error)\r\n         64 - parallel_for_idx.8threads (Bus error)\r\n         65 - reduce (Bus error)\r\n         66 - reduce_min (Bus error)\r\n         67 - reduce_max (Bus error)\r\n         68 - joined_subflow.1thread (Bus error)\r\n         69 - joined_subflow.2threads (Bus error)\r\n         70 - joined_subflow.3threads (Bus error)\r\n         71 - joined_subflow.4threads (Bus error)\r\n         72 - joined_subflow.5threads (Bus error)\r\n         73 - joined_subflow.6threads (Bus error)\r\n         74 - joined_subflow.7threads (Bus error)\r\n         75 - joined_subflow.8threads (Bus error)\r\n         76 - detached_subflow.1thread (Bus error)\r\n         77 - detached_subflow.2threads (Bus error)\r\n         78 - detached_subflow.3threads (Bus error)\r\n         79 - detached_subflow.4threads (Bus error)\r\n         80 - detached_subflow.5threads (Bus error)\r\n         81 - detached_subflow.6threads (Bus error)\r\n         82 - detached_subflow.7threads (Bus error)\r\n         83 - detached_subflow.8threads (Bus error)\r\n         84 - tree_subflow (Bus error)\r\n         85 - composition-1 (Bus error)\r\n         86 - composition-2 (Bus error)\r\n         87 - composition-3 (Bus error)\r\n         88 - observer.1thread (Bus error)\r\n         89 - observer.2threads (Bus error)\r\n         90 - observer.3threads (Bus error)\r\n         91 - observer.4threads (Bus error)\r\n         92 - loop_cond.1thread (Bus error)\r\n         93 - loop_cond.2threads (Bus error)\r\n         94 - loop_cond.3threads (Bus error)\r\n         95 - loop_cond.4threads (Bus error)\r\n         96 - flip_coin_cond.1thread (Bus error)\r\n         97 - flip_coin_cond.2threads (Bus error)\r\n         98 - flip_coin_cond.3threads (Bus error)\r\n         99 - flip_coin_cond.4threads (Bus error)\r\n        100 - cyclic_cond.1thread (Bus error)\r\n        101 - cyclic_cond.2threads (Bus error)\r\n        102 - cyclic_cond.3threads (Bus error)\r\n        103 - cyclic_cond.4threads (Bus error)\r\n        104 - cyclic_cond.5threads (Bus error)\r\n        105 - cyclic_cond.6threads (Bus error)\r\n        106 - cyclic_cond.7threads (Bus error)\r\n        107 - cyclic_cond.8threads (Bus error)\r\n        108 - btree_cond (Bus error)\r\n        109 - dynamic_btree_cond (Bus error)\r\n        110 - nested_cond.1thread (Bus error)\r\n        111 - nested_cond.2threads (Bus error)\r\n        112 - nested_cond.3threads (Bus error)\r\n        113 - nested_cond.4threads (Bus error)\r\n        114 - nested_cond.5threads (Bus error)\r\n        115 - nested_cond.6threads (Bus error)\r\n        116 - nested_cond.7threads (Bus error)\r\n        117 - nested_cond.8threads (Bus error)\r\n        118 - cond2cond.1thread (Bus error)\r\n        119 - cond2cond.2threads (Bus error)\r\n        120 - cond2cond.3threads (Bus error)\r\n        121 - cond2cond.4threads (Bus error)\r\n        122 - cond2cond.5threads (Bus error)\r\n        123 - cond2cond.6threads (Bus error)\r\n        124 - cond2cond.7threads (Bus error)\r\n        125 - cond2cond.8threads (Bus error)\r\n        126 - hier_cond.1thread (Bus error)\r\n        127 - hier_cond.2threads (Bus error)\r\n        128 - hier_cond.3threads (Bus error)\r\n        129 - hier_cond.4threads (Bus error)\r\n        130 - hier_cond.5threads (Bus error)\r\n        131 - hier_cond.6threads (Bus error)\r\n        132 - hier_cond.7threads (Bus error)\r\n        133 - hier_cond.8threads (Bus error)\r\n        134 - static_traverse (Bus error)\r\n        135 - dynamic_traverse (Bus error)\r\n        136 - parallel_traverse.1thread (Bus error)\r\n        137 - parallel_traverse.2threads (Bus error)\r\n        138 - parallel_traverse.3threads (Bus error)\r\n        139 - parallel_traverse.4threads (Bus error)\r\n        140 - parallel_traverse.5threads (Bus error)\r\n        141 - parallel_traverse.6threads (Bus error)\r\n        142 - parallel_traverse.7threads (Bus error)\r\n        143 - parallel_traverse.8threads (Bus error)\r\n        144 - bubble_sort (Bus error)\r\n        145 - selection_sort (Bus error)\r\n        146 - merge_sort (Bus error)\r\n        147 - quick_sort (Bus error)\r\n```\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: FreeBSD\r\n - Version: 12.1-RELEASE-p2\r\n - Compiler: Clang 8.0.1\r\n\r\n**Additional context**\r\nWhen compiled with GCC, everything works fine.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/143", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/143/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/143/events", "html_url": "https://github.com/taskflow/taskflow/issues/143", "id": 568586360, "node_id": "MDU6SXNzdWU1Njg1ODYzNjA=", "number": 143, "title": "Using Cpp-Taskflow through Microsoft vcpkg", "user": {"login": "tsung-wei-huang", "id": 13237509, "node_id": "MDQ6VXNlcjEzMjM3NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/13237509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsung-wei-huang", "html_url": "https://github.com/tsung-wei-huang", "followers_url": "https://api.github.com/users/tsung-wei-huang/followers", "following_url": "https://api.github.com/users/tsung-wei-huang/following{/other_user}", "gists_url": "https://api.github.com/users/tsung-wei-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsung-wei-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsung-wei-huang/subscriptions", "organizations_url": "https://api.github.com/users/tsung-wei-huang/orgs", "repos_url": "https://api.github.com/users/tsung-wei-huang/repos", "events_url": "https://api.github.com/users/tsung-wei-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/tsung-wei-huang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-20T21:34:16Z", "updated_at": "2020-02-20T21:37:16Z", "closed_at": "2020-02-20T21:37:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "You can download and install cpp-taskflow using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\r\n\r\n```bash\r\n    git clone https://github.com/Microsoft/vcpkg.git\r\n    cd vcpkg\r\n    ./bootstrap-vcpkg.sh\r\n    ./vcpkg integrate install\r\n    ./vcpkg install cpp-taskflow\r\n```\r\n\r\nThe cpp-taskflow port in vcpkg is kept up to date by Microsoft team members and community contributors. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/141", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/141/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/141/events", "html_url": "https://github.com/taskflow/taskflow/issues/141", "id": 562095369, "node_id": "MDU6SXNzdWU1NjIwOTUzNjk=", "number": 141, "title": "Typos in readme", "user": {"login": "Chaosmeister", "id": 13346344, "node_id": "MDQ6VXNlcjEzMzQ2MzQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/13346344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chaosmeister", "html_url": "https://github.com/Chaosmeister", "followers_url": "https://api.github.com/users/Chaosmeister/followers", "following_url": "https://api.github.com/users/Chaosmeister/following{/other_user}", "gists_url": "https://api.github.com/users/Chaosmeister/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chaosmeister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chaosmeister/subscriptions", "organizations_url": "https://api.github.com/users/Chaosmeister/orgs", "repos_url": "https://api.github.com/users/Chaosmeister/repos", "events_url": "https://api.github.com/users/Chaosmeister/events{/privacy}", "received_events_url": "https://api.github.com/users/Chaosmeister/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-08T23:48:25Z", "updated_at": "2020-02-09T00:05:23Z", "closed_at": "2020-02-09T00:05:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Search for \r\n> calalble\r\n-----\r\n> A task is empty is it is not\r\n\r\nThe second is should be an \"if\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/139", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/139/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/139/events", "html_url": "https://github.com/taskflow/taskflow/issues/139", "id": 555280875, "node_id": "MDU6SXNzdWU1NTUyODA4NzU=", "number": 139, "title": "Compile error when passing std::function<> to taskflow.emplace()", "user": {"login": "leonsal", "id": 7933396, "node_id": "MDQ6VXNlcjc5MzMzOTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/7933396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonsal", "html_url": "https://github.com/leonsal", "followers_url": "https://api.github.com/users/leonsal/followers", "following_url": "https://api.github.com/users/leonsal/following{/other_user}", "gists_url": "https://api.github.com/users/leonsal/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonsal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonsal/subscriptions", "organizations_url": "https://api.github.com/users/leonsal/orgs", "repos_url": "https://api.github.com/users/leonsal/repos", "events_url": "https://api.github.com/users/leonsal/events{/privacy}", "received_events_url": "https://api.github.com/users/leonsal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-26T20:11:46Z", "updated_at": "2020-01-27T13:26:38Z", "closed_at": "2020-01-27T13:26:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "After updating cpp-taskflow my application didn't compile any more.\r\nBoth gcc 8.3.0 and clang 8.0.0 indicate an error when I try to\r\npass an `std::function<>` object to `taskflow.emplace()`:\r\n\r\nTest which compiled OK with previous version:\r\n```\r\n std::function<void()> func5 = [](){\r\n        print(\"T5\");\r\n        std::this_thread::sleep_for(10ms);\r\n };\r\n auto t5 = taskflow.emplace(func5);\r\n```\r\nFollows the error emitted by clang:\r\n```\r\nIn file included from /home/leonel/s/cpptests/cpp-taskflow/cpp-taskflow/taskflow/core/graph.hpp:4:\r\n/home/leonel/s/cpptests/cpp-taskflow/cpp-taskflow/taskflow/core/../utility/traits.hpp:134:59: error: type 'std::function<void ()> &' cannot be used prior to '::' because\r\n      it has no members\r\nstruct function_traits : public function_traits<decltype(&T::operator())>{\r\n                                                          ^\r\n/home/leonel/s/cpptests/cpp-taskflow/cpp-taskflow/taskflow/core/flow_builder.hpp:381:45: note: in instantiation of template class\r\n      'tf::function_traits<std::function<void ()> &>' requested here\r\n  else if constexpr(std::is_same_v<typename function_traits<C>::return_type, int>) {\r\n                                            ^\r\n/home/leonel/s/cpptests/cpp-taskflow/main.cpp:58:24: note: in instantiation of function template specialization 'tf::FlowBuilder::emplace<std::function<void ()> &>'\r\n      requested here\r\n    auto t5 = taskflow.emplace(func5);\r\n                       ^\r\n1 error generated.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/136", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/136/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/136/events", "html_url": "https://github.com/taskflow/taskflow/issues/136", "id": 541455928, "node_id": "MDU6SXNzdWU1NDE0NTU5Mjg=", "number": 136, "title": "Question - 5 parallel tasks run with only 2 thread", "user": {"login": "mohsenomidi", "id": 47596867, "node_id": "MDQ6VXNlcjQ3NTk2ODY3", "avatar_url": "https://avatars2.githubusercontent.com/u/47596867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mohsenomidi", "html_url": "https://github.com/mohsenomidi", "followers_url": "https://api.github.com/users/mohsenomidi/followers", "following_url": "https://api.github.com/users/mohsenomidi/following{/other_user}", "gists_url": "https://api.github.com/users/mohsenomidi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mohsenomidi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mohsenomidi/subscriptions", "organizations_url": "https://api.github.com/users/mohsenomidi/orgs", "repos_url": "https://api.github.com/users/mohsenomidi/repos", "events_url": "https://api.github.com/users/mohsenomidi/events{/privacy}", "received_events_url": "https://api.github.com/users/mohsenomidi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-22T14:09:43Z", "updated_at": "2019-12-22T16:53:12Z", "closed_at": "2019-12-22T16:53:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nI Think **This is not a bug**, but i will describe here my question :\r\nplease see the the code below, it contains 5 function and need to run all of them in parallel, but it just create 2 threads and run them in 2 threads only, it is not complicated topology something like this: \r\n```\r\n                        | -Task A |\r\n                        | -Task B |\r\n  StartPoint->          | -Task C |  ->  EndPoint\r\n                        | -Task D |\r\n                        | -Task E |\r\n```\r\nhow can i forced this do in parallel with 5 threads ?\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1- Define 5 abstract functions to do something. \r\n2- Create a task flow for running all these tasks parallel.\r\n3- Compile the Code.\r\n4- Execute\r\n\r\n**Output of the code**\r\n```\r\nStrat ThreadID: 140507743696640\r\nFunction E Start. ThreadID: 140507743696640\r\nFunction A Start. ThreadID: 140507735303936\r\nFunction E Done.  ThreadID: 140507743696640\r\nVariable: 1\r\nFunction D Start. ThreadID: 140507743696640\r\nFunction A Done.  ThreadID: 140507735303936\r\nVariable: 2\r\nfunction B Start. ThreadID: 140507735303936\r\nFunction B Done.  ThreadID: 140507735303936\r\nVariable: 3\r\nFunction C Start. ThreadID: 140507735303936\r\nFunction D Done.  ThreadID: 140507743696640\r\nVariable: 4\r\nFunction C Done.  ThreadID: 140507735303936\r\nVariable: 5\r\nDone  ThreadID: 140507735303936\r\n\r\n```\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: [Ubuntu 18.04]\r\n - Compiler [g++ (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0]\r\n - OS Version  [4.15.0-72-generic  x86_64 x86_64 x86_64 GNU/Linux]\r\n\r\n**My Sample Code**\r\n```\r\n#include <taskflow/taskflow.hpp>\r\n#include <iostream>\r\n#include <chrono>\r\n\r\nbool functionA()\r\n{\r\n    std::cout << \"Function A Start. ThreadID: \" << std::this_thread::get_id() << std::endl;\r\n    std::this_thread::sleep_for(std::chrono::seconds(5));\r\n    std::cout << \"Function A Done.  ThreadID: \" << std::this_thread::get_id() << std::endl;\r\n    return true;\r\n} \r\n\r\nbool functionB()\r\n{\r\n    std::cout << \"function B Start. ThreadID: \" << std::this_thread::get_id() << std::endl;\r\n    std::this_thread::sleep_for(std::chrono::seconds(2));\r\n    std::cout << \"Function B Done.  ThreadID: \" << std::this_thread::get_id() << std::endl;\r\n    return true;\r\n} \r\n\r\nbool functionC()\r\n{\r\n    std::cout << \"Function C Start. ThreadID: \" << std::this_thread::get_id() << std::endl;\r\n    std::this_thread::sleep_for(std::chrono::seconds(3));\r\n    std::cout << \"Function C Done.  ThreadID: \" << std::this_thread::get_id() << std::endl;\r\n    return true;\r\n} \r\n\r\nbool functionD()\r\n{\r\n    std::cout << \"Function D Start. ThreadID: \" << std::this_thread::get_id()<< std::endl;\r\n    std::this_thread::sleep_for(std::chrono::seconds(6));\r\n    std::cout << \"Function D Done.  ThreadID: \" << std::this_thread::get_id()<< std::endl;\r\n    return true;\r\n} \r\n\r\nbool functionE()\r\n{\r\n    std::cout << \"Function E Start. ThreadID: \" << std::this_thread::get_id() << std::endl;\r\n    std::this_thread::sleep_for(std::chrono::seconds(1));\r\n    std::cout << \"Function E Done.  ThreadID: \" << std::this_thread::get_id() << std::endl;\r\n    return true;\r\n}\r\n\r\nint main()\r\n{\r\n    tf::Executor executor;\r\n    tf::Taskflow taskflow;\r\n    int shared_variable=0;\r\n    tf::Task startPoint = taskflow.emplace([](){std::cout << \"Strat ThreadID: \" << std::this_thread::get_id() << std::endl;}).name(\"startPoint\");\r\n    tf::Task endPoint = taskflow.emplace([&](){std::cout << \"Done  ThreadID: \" << std::this_thread::get_id()  <<std::endl;}).name(\"endPoint\");\r\n    tf::Task TaskA = taskflow.emplace([&](){functionA(); shared_variable++; std::cout << \"Variable: \" << shared_variable << std::endl;}).name(\"functionA\");\r\n    tf::Task TaskB = taskflow.emplace([&](){functionB(); shared_variable++; std::cout << \"Variable: \" << shared_variable << std::endl;}).name(\"functionB\");\r\n    tf::Task TaskC = taskflow.emplace([&](){functionC(); shared_variable++; std::cout << \"Variable: \" << shared_variable << std::endl;}).name(\"functionC\");\r\n    tf::Task TaskD = taskflow.emplace([&](){functionD(); shared_variable++; std::cout << \"Variable: \" << shared_variable << std::endl;}).name(\"functionD\");\r\n    tf::Task TaskE = taskflow.emplace([&](){functionE(); shared_variable++; std::cout << \"Variable: \" << shared_variable << std::endl;}).name(\"FunctionE\");\r\n\r\n    startPoint.precede(TaskA);\r\n    startPoint.precede(TaskB);\r\n    startPoint.precede(TaskC);\r\n    startPoint.precede(TaskD);\r\n    startPoint.precede(TaskE);\r\n    TaskA.precede(endPoint);\r\n    TaskB.precede(endPoint);\r\n    TaskC.precede(endPoint);\r\n    TaskD.precede(endPoint);\r\n    TaskE.precede(endPoint);\r\n                                            \r\n    executor.run(taskflow).wait();\r\n}\r\n\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/133", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/133/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/133/events", "html_url": "https://github.com/taskflow/taskflow/issues/133", "id": 539251928, "node_id": "MDU6SXNzdWU1MzkyNTE5Mjg=", "number": 133, "title": "Compilation error MSVC 16.4.1", "user": {"login": "corporateshark", "id": 2510143, "node_id": "MDQ6VXNlcjI1MTAxNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2510143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/corporateshark", "html_url": "https://github.com/corporateshark", "followers_url": "https://api.github.com/users/corporateshark/followers", "following_url": "https://api.github.com/users/corporateshark/following{/other_user}", "gists_url": "https://api.github.com/users/corporateshark/gists{/gist_id}", "starred_url": "https://api.github.com/users/corporateshark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/corporateshark/subscriptions", "organizations_url": "https://api.github.com/users/corporateshark/orgs", "repos_url": "https://api.github.com/users/corporateshark/repos", "events_url": "https://api.github.com/users/corporateshark/events{/privacy}", "received_events_url": "https://api.github.com/users/corporateshark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-17T18:59:53Z", "updated_at": "2019-12-18T18:22:00Z", "closed_at": "2019-12-18T18:22:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Microsoft Visual Studio Community 2019\r\nVersion 16.4.1\r\nC++20 enabled\r\n```\r\ncpptaskflow\\taskflow\\core/executor.hpp(864,41): error C3538: in a declarator-list 'std::scoped_lock' must always deduce to the same type\r\ncpptaskflow\\taskflow\\core/executor.hpp(864,41): message : could be 'std::scoped_lock<>'\r\ncpptaskflow\\taskflow\\core/executor.hpp(864,41): message : or       'std::scoped_lock<std::mutex>'\r\n```\r\n\r\nP.S. Works fine with the previous version of MSVC.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/131", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/131/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/131/events", "html_url": "https://github.com/taskflow/taskflow/issues/131", "id": 536725219, "node_id": "MDU6SXNzdWU1MzY3MjUyMTk=", "number": 131, "title": "Is taskflow capable of catching exception from its excuting taskflows?", "user": {"login": "zxbzswxr", "id": 18022264, "node_id": "MDQ6VXNlcjE4MDIyMjY0", "avatar_url": "https://avatars1.githubusercontent.com/u/18022264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zxbzswxr", "html_url": "https://github.com/zxbzswxr", "followers_url": "https://api.github.com/users/zxbzswxr/followers", "following_url": "https://api.github.com/users/zxbzswxr/following{/other_user}", "gists_url": "https://api.github.com/users/zxbzswxr/gists{/gist_id}", "starred_url": "https://api.github.com/users/zxbzswxr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zxbzswxr/subscriptions", "organizations_url": "https://api.github.com/users/zxbzswxr/orgs", "repos_url": "https://api.github.com/users/zxbzswxr/repos", "events_url": "https://api.github.com/users/zxbzswxr/events{/privacy}", "received_events_url": "https://api.github.com/users/zxbzswxr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-12T02:48:17Z", "updated_at": "2019-12-12T03:25:47Z", "closed_at": "2019-12-12T03:25:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you.\r\nthere are some questions and I push it straightforward.\r\ndoes try...catch  work for taskflow?\r\nIf I run a taskflow in a try catch block and throw some exceptions(not only one) in subtasks . Can taskflow library deal with it and if so, how?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/130", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/130/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/130/events", "html_url": "https://github.com/taskflow/taskflow/issues/130", "id": 536717769, "node_id": "MDU6SXNzdWU1MzY3MTc3Njk=", "number": 130, "title": "does taskflow have plan \u540c", "user": {"login": "zxbzswxr", "id": 18022264, "node_id": "MDQ6VXNlcjE4MDIyMjY0", "avatar_url": "https://avatars1.githubusercontent.com/u/18022264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zxbzswxr", "html_url": "https://github.com/zxbzswxr", "followers_url": "https://api.github.com/users/zxbzswxr/followers", "following_url": "https://api.github.com/users/zxbzswxr/following{/other_user}", "gists_url": "https://api.github.com/users/zxbzswxr/gists{/gist_id}", "starred_url": "https://api.github.com/users/zxbzswxr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zxbzswxr/subscriptions", "organizations_url": "https://api.github.com/users/zxbzswxr/orgs", "repos_url": "https://api.github.com/users/zxbzswxr/repos", "events_url": "https://api.github.com/users/zxbzswxr/events{/privacy}", "received_events_url": "https://api.github.com/users/zxbzswxr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-12T02:19:30Z", "updated_at": "2019-12-12T02:20:16Z", "closed_at": "2019-12-12T02:19:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Please describe your feature request.**\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/128", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/128/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/128/events", "html_url": "https://github.com/taskflow/taskflow/issues/128", "id": 534897608, "node_id": "MDU6SXNzdWU1MzQ4OTc2MDg=", "number": 128, "title": "Can no longer run a taskflow with zero workers", "user": {"login": "freehour", "id": 32013564, "node_id": "MDQ6VXNlcjMyMDEzNTY0", "avatar_url": "https://avatars3.githubusercontent.com/u/32013564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/freehour", "html_url": "https://github.com/freehour", "followers_url": "https://api.github.com/users/freehour/followers", "following_url": "https://api.github.com/users/freehour/following{/other_user}", "gists_url": "https://api.github.com/users/freehour/gists{/gist_id}", "starred_url": "https://api.github.com/users/freehour/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/freehour/subscriptions", "organizations_url": "https://api.github.com/users/freehour/orgs", "repos_url": "https://api.github.com/users/freehour/repos", "events_url": "https://api.github.com/users/freehour/events{/privacy}", "received_events_url": "https://api.github.com/users/freehour/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-09T12:27:37Z", "updated_at": "2020-02-15T05:56:36Z", "closed_at": "2020-02-15T05:56:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "It is no longer possible to run a taskflow with zero workers, i.e. on the thread that calls\r\n`executor.run(taskflow)`\r\n\r\nI have a workload where I need to run some of my taskflows on a specific thread (the main thread). Prior to this commit https://github.com/cpp-taskflow/cpp-taskflow/commit/58d96bb3c9e3a0fad9174c03b1dbcbca567c7fd3 it was possible by passing the taskflow to an executor with zero workers, but now it throws an exception.\r\n`if(_workers.size() == 0) {\r\n    TF_THROW(Error::EXECUTOR, \"no workers to execute the graph\");\r\n  }`\r\n\r\nIs there another way to run a taskflow on a specific thread that I'm not aware of?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/122", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/122/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/122/events", "html_url": "https://github.com/taskflow/taskflow/issues/122", "id": 515219397, "node_id": "MDU6SXNzdWU1MTUyMTkzOTc=", "number": 122, "title": "Provide cpp-taskflow.pc configuration", "user": {"login": "xbreak", "id": 13489144, "node_id": "MDQ6VXNlcjEzNDg5MTQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/13489144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xbreak", "html_url": "https://github.com/xbreak", "followers_url": "https://api.github.com/users/xbreak/followers", "following_url": "https://api.github.com/users/xbreak/following{/other_user}", "gists_url": "https://api.github.com/users/xbreak/gists{/gist_id}", "starred_url": "https://api.github.com/users/xbreak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xbreak/subscriptions", "organizations_url": "https://api.github.com/users/xbreak/orgs", "repos_url": "https://api.github.com/users/xbreak/repos", "events_url": "https://api.github.com/users/xbreak/events{/privacy}", "received_events_url": "https://api.github.com/users/xbreak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-31T07:21:31Z", "updated_at": "2020-02-15T05:57:01Z", "closed_at": "2020-02-15T05:57:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Please describe your feature request.**\r\nIt would be nice if cpp-taskflow could provide a pkg-config file to make discovery and consumption of this project easier in non-cmake build systems such as autotools, make, waf, meson, build2 et.c.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/121", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/121/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/121/events", "html_url": "https://github.com/taskflow/taskflow/issues/121", "id": 509296937, "node_id": "MDU6SXNzdWU1MDkyOTY5Mzc=", "number": 121, "title": "Support / work around for MinGW64?", "user": {"login": "dudds4", "id": 8979036, "node_id": "MDQ6VXNlcjg5NzkwMzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/8979036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dudds4", "html_url": "https://github.com/dudds4", "followers_url": "https://api.github.com/users/dudds4/followers", "following_url": "https://api.github.com/users/dudds4/following{/other_user}", "gists_url": "https://api.github.com/users/dudds4/gists{/gist_id}", "starred_url": "https://api.github.com/users/dudds4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dudds4/subscriptions", "organizations_url": "https://api.github.com/users/dudds4/orgs", "repos_url": "https://api.github.com/users/dudds4/repos", "events_url": "https://api.github.com/users/dudds4/events{/privacy}", "received_events_url": "https://api.github.com/users/dudds4/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-18T20:32:22Z", "updated_at": "2019-10-29T18:56:08Z", "closed_at": "2019-10-29T18:56:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to use MinGW64 v8.1.0 compiler, posix thread model, on windows, but I get a linker error. Any idea how this might be solved?\r\n\r\nerror:\r\nprocedure entry point __cxa_init_primary_exception could not be located in the dynamic link library\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/117", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/117/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/117/events", "html_url": "https://github.com/taskflow/taskflow/issues/117", "id": 499917682, "node_id": "MDU6SXNzdWU0OTk5MTc2ODI=", "number": 117, "title": "FAQ / Scheduling algorithms", "user": {"login": "robinchrist", "id": 22774099, "node_id": "MDQ6VXNlcjIyNzc0MDk5", "avatar_url": "https://avatars1.githubusercontent.com/u/22774099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robinchrist", "html_url": "https://github.com/robinchrist", "followers_url": "https://api.github.com/users/robinchrist/followers", "following_url": "https://api.github.com/users/robinchrist/following{/other_user}", "gists_url": "https://api.github.com/users/robinchrist/gists{/gist_id}", "starred_url": "https://api.github.com/users/robinchrist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robinchrist/subscriptions", "organizations_url": "https://api.github.com/users/robinchrist/orgs", "repos_url": "https://api.github.com/users/robinchrist/repos", "events_url": "https://api.github.com/users/robinchrist/events{/privacy}", "received_events_url": "https://api.github.com/users/robinchrist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-29T13:29:35Z", "updated_at": "2020-02-15T05:57:29Z", "closed_at": "2020-02-15T05:57:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI've noticed that in the current version of TaskFlow only the WorkStealing algorithm is left...\r\nHowever there's still an answer in the FAQ telling the opposite\r\n```\r\nQ7: How does Cpp-Taskflow schedule tasks?\r\nCpp-Taskflow has implemented different scheduler modules (centralized queue, proactive shceduler, speculative strategy, and work stealing). The default scheduler implements the famous work stealing algorithm that has shown to behave efficiently in most multicore architectures. You can find the source code at taskflow/core/executor.hpp\r\n```\r\n\r\nAre there any plans to add support for the \"old\" algorithms in the future?\r\n\r\n\r\nAdditionally, this in the README.md is outdated believe\r\n\r\nTouching a taskflow or **an executor** from multiple threads is not safe\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/115", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/115/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/115/events", "html_url": "https://github.com/taskflow/taskflow/issues/115", "id": 493197377, "node_id": "MDU6SXNzdWU0OTMxOTczNzc=", "number": 115, "title": "Task::is_placeholder()?", "user": {"login": "freehour", "id": 32013564, "node_id": "MDQ6VXNlcjMyMDEzNTY0", "avatar_url": "https://avatars3.githubusercontent.com/u/32013564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/freehour", "html_url": "https://github.com/freehour", "followers_url": "https://api.github.com/users/freehour/followers", "following_url": "https://api.github.com/users/freehour/following{/other_user}", "gists_url": "https://api.github.com/users/freehour/gists{/gist_id}", "starred_url": "https://api.github.com/users/freehour/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/freehour/subscriptions", "organizations_url": "https://api.github.com/users/freehour/orgs", "repos_url": "https://api.github.com/users/freehour/repos", "events_url": "https://api.github.com/users/freehour/events{/privacy}", "received_events_url": "https://api.github.com/users/freehour/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-13T08:23:04Z", "updated_at": "2019-09-19T16:38:18Z", "closed_at": "2019-09-17T17:15:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could we have a function in Task to check whether it has some work assigned or is a placehoder?\r\nThere is Task::empty() but this only checks for a Node.\r\nI was a bit confused that the documentation for FlowBuilder::placeholder says \"creates an empty task\" but Task::empty() returns false.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/111", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/111/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/111/events", "html_url": "https://github.com/taskflow/taskflow/issues/111", "id": 479209658, "node_id": "MDU6SXNzdWU0NzkyMDk2NTg=", "number": 111, "title": "Best way to pass member function to emplace() ?", "user": {"login": "leonsal", "id": 7933396, "node_id": "MDQ6VXNlcjc5MzMzOTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/7933396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonsal", "html_url": "https://github.com/leonsal", "followers_url": "https://api.github.com/users/leonsal/followers", "following_url": "https://api.github.com/users/leonsal/following{/other_user}", "gists_url": "https://api.github.com/users/leonsal/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonsal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonsal/subscriptions", "organizations_url": "https://api.github.com/users/leonsal/orgs", "repos_url": "https://api.github.com/users/leonsal/repos", "events_url": "https://api.github.com/users/leonsal/events{/privacy}", "received_events_url": "https://api.github.com/users/leonsal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-10T00:38:40Z", "updated_at": "2019-08-10T01:40:53Z", "closed_at": "2019-08-10T01:40:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nWhat is the best way to pass a member function to \"Taskflow::emplace()\" ?\r\nI tried using the same syntax accepted by `std::invoke()` but the compilation\r\naborted with a failed static assert:\r\n`static_assert(dependent_false_v<C>, \"invalid task work type\");`\r\nBut using `std::bind()` and a lambda works.\r\n\r\nRegards.\r\n\r\n```\r\nstruct Node {\r\n   void run() {\r\n      std::cout << \"Node::run()\\n\";\r\n   }\r\n};\r\n\r\nint main() {\r\n\r\n   tf::Taskflow taskflow;\r\n   Node n{};\r\n   std::invoke(&Node::run, &n);                 // Compiles OK and calls Node::run\r\n   auto t1 = taskflow.emplace(&Node::run, &n);  // Compilation aborts !\r\n   auto t2 = taskflow.emplace(std::bind(&Node::run, &n)) // Works\r\n   auto t3 = taskflow.emplace([&n](){n.run();}); // Works\r\n}\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/107", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/107/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/107/events", "html_url": "https://github.com/taskflow/taskflow/issues/107", "id": 478578131, "node_id": "MDU6SXNzdWU0Nzg1NzgxMzE=", "number": 107, "title": "Executor blocks when running an empty Taskflow", "user": {"login": "freehour", "id": 32013564, "node_id": "MDQ6VXNlcjMyMDEzNTY0", "avatar_url": "https://avatars3.githubusercontent.com/u/32013564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/freehour", "html_url": "https://github.com/freehour", "followers_url": "https://api.github.com/users/freehour/followers", "following_url": "https://api.github.com/users/freehour/following{/other_user}", "gists_url": "https://api.github.com/users/freehour/gists{/gist_id}", "starred_url": "https://api.github.com/users/freehour/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/freehour/subscriptions", "organizations_url": "https://api.github.com/users/freehour/orgs", "repos_url": "https://api.github.com/users/freehour/repos", "events_url": "https://api.github.com/users/freehour/events{/privacy}", "received_events_url": "https://api.github.com/users/freehour/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-08T16:38:45Z", "updated_at": "2019-08-09T07:20:30Z", "closed_at": "2019-08-09T07:20:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this is the expected behavior.\r\n```\r\n    tf::Taskflow taskflow;\r\n    tf::Executor executor;\r\n\r\n    executor.run(taskflow); // blocks unless executor is created with 0 threads\r\n    std::cout << \"is never called\" << std::endl;\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/102", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/102/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/102/events", "html_url": "https://github.com/taskflow/taskflow/issues/102", "id": 474700107, "node_id": "MDU6SXNzdWU0NzQ3MDAxMDc=", "number": 102, "title": "Warning during compilation", "user": {"login": "Milerius", "id": 21139416, "node_id": "MDQ6VXNlcjIxMTM5NDE2", "avatar_url": "https://avatars1.githubusercontent.com/u/21139416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Milerius", "html_url": "https://github.com/Milerius", "followers_url": "https://api.github.com/users/Milerius/followers", "following_url": "https://api.github.com/users/Milerius/following{/other_user}", "gists_url": "https://api.github.com/users/Milerius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Milerius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Milerius/subscriptions", "organizations_url": "https://api.github.com/users/Milerius/orgs", "repos_url": "https://api.github.com/users/Milerius/repos", "events_url": "https://api.github.com/users/Milerius/events{/privacy}", "received_events_url": "https://api.github.com/users/Milerius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-30T17:06:14Z", "updated_at": "2019-07-31T16:17:03Z", "closed_at": "2019-07-31T16:17:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nWarn unused during compilation\r\n\r\n**Screenshots**\r\n```\r\n[ 37%] Building CXX object src/CMakeFiles/mmbot-test.dir/price/service.price.platform.cpp.o\r\nIn file included from /Users/roman/CLionProjects/antara-makerbot/src/price/service.price.platform.cpp:18:\r\nIn file included from /Users/roman/CLionProjects/antara-makerbot/cmake-build-debug/_deps/cpp-taskflow-src/taskflow/taskflow.hpp:3:\r\nIn file included from /Users/roman/CLionProjects/antara-makerbot/cmake-build-debug/_deps/cpp-taskflow-src/taskflow/core/executor.hpp:72:\r\n/Users/roman/CLionProjects/antara-makerbot/cmake-build-debug/_deps/cpp-taskflow-src/taskflow/core/observer.hpp:49:32: warning: unused parameter 'num_workers' [-Wunused-parameter]\r\n  virtual void set_up(unsigned num_workers) {};\r\n                               ^\r\n/Users/roman/CLionProjects/antara-makerbot/cmake-build-debug/_deps/cpp-taskflow-src/taskflow/core/observer.hpp:56:34: warning: unused parameter 'worker_id' [-Wunused-parameter]\r\n  virtual void on_entry(unsigned worker_id, TaskView task_view) {};\r\n                                 ^\r\n/Users/roman/CLionProjects/antara-makerbot/cmake-build-debug/_deps/cpp-taskflow-src/taskflow/core/observer.hpp:56:54: warning: unused parameter 'task_view' [-Wunused-parameter]\r\n  virtual void on_entry(unsigned worker_id, TaskView task_view) {};\r\n                                                     ^\r\n/Users/roman/CLionProjects/antara-makerbot/cmake-build-debug/_deps/cpp-taskflow-src/taskflow/core/observer.hpp:63:33: warning: unused parameter 'worker_id' [-Wunused-parameter]\r\n  virtual void on_exit(unsigned worker_id, TaskView task_view) {};\r\n                                ^\r\n/Users/roman/CLionProjects/antara-makerbot/cmake-build-debug/_deps/cpp-taskflow-src/taskflow/core/observer.hpp:63:53: warning: unused parameter 'task_view' [-Wunused-parameter]\r\n  virtual void on_exit(unsigned worker_id, TaskView task_view) {};\r\n                                                    ^\r\n/Users/roman/CLionProjects/antara-makerbot/cmake-build-debug/_deps/cpp-taskflow-src/taskflow/core/observer.hpp:160:60: warning: unused parameter 'tv' [-Wunused-parameter]\r\ninline void ExecutorObserver::on_exit(unsigned w, TaskView tv) {\r\n                                                           ^\r\n6 warnings generated.\r\n[ 43%] Linking CXX executable ../bin/mmbot-test\r\n[100%] Built target mmbot-test\r\n````\r\n\r\n```cpp\r\nst_price price_service_platform::get_price(antara::pair currency_pair)\r\n    {\r\n        VLOG_SCOPE_F(loguru::Verbosity_INFO, pretty_function);\r\n        std::atomic_size_t nb_calls_succeed = 0u;\r\n        tf::Executor executor;\r\n        tf::Taskflow taskflow;\r\n        std::atomic<double> price;\r\n        std::vector<tf::Task> tsk;\r\n        auto price_functor = [&](const auto &current_price_platform_ptr) {\r\n            auto current_price = current_price_platform_ptr->get_price(currency_pair).value();\r\n            nb_calls_succeed += (current_price != 0.0);\r\n            price = price + current_price;\r\n        };\r\n        for (auto &&current_platform_price : registry_platform_price_) {\r\n            if (mmbot_config_.prices_registry.count(current_platform_price.first) > 0) {\r\n                const auto &current_price_platform_ptr = current_platform_price.second;\r\n                tsk.push_back(taskflow.emplace([&]() { price_functor(current_price_platform_ptr); }));\r\n            }\r\n        }\r\n\r\n        if (!registry_platform_price_.empty()) {\r\n            executor.run(taskflow);\r\n            executor.wait_for_all();\r\n        }\r\n        if (nb_calls_succeed == 0) {\r\n            throw errors::pair_not_available();\r\n        }\r\n        return st_price{price.load() / nb_calls_succeed.load()};\r\n    }\r\n```\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Osx\r\n - clang-8\r\n\r\n**Additional informations:**\r\n\r\nUsing package through cmake new feature:\r\n\r\n```cmake\r\nset(TF_BUILD_EXAMPLES OFF CACHE BOOL \"Override option\" FORCE)\r\nset(TF_BUILD_TESTS OFF CACHE BOOL \"Override option\" FORCE)\r\nFetchContent_Declare(\r\n        cpp-taskflow\r\n        URL https://github.com/cpp-taskflow/cpp-taskflow/archive/master.zip\r\n)\r\n\r\nFetchContent_MakeAvailable(cpp-taskflow)\r\n```\r\n\r\nAlso there is another anoying things in your CMakeLists.txt:\r\n\r\n```cmake\r\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\r\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"7.3\")\r\n    message(FATAL_ERROR \"\\nCpp-Taskflow requires g++ at least v7.3\")\r\n  endif()\r\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -O2\")\r\n## clang++\r\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\r\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"6.0\")\r\n    message(FATAL_ERROR \"\\nCpp-Taskflow requires clang++ at least v6.0\")\r\n  endif() \r\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -O2\")\r\n## microsoft visual c++\r\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\r\n  if(NOT MSVC_VERSION GREATER_EQUAL 1914)\r\n    message(FATAL_ERROR \"\\nCpp-Taskflow requires MSVC++ at least v14.14\") \r\n  endif()\r\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /O2 /W3\")\r\n  add_definitions(-D_ENABLE_EXTENDED_ALIGNED_STORAGE)\r\nelse()\r\n  message(FATAL_ERROR \"\\n\\\r\nCpp-Taskflow currently supports the following compilers:\\n\\\r\n- g++ v7.3 or above\\n\\\r\n- clang++ v6.0 or above\\n\\\r\n- MSVC++ v19.14 or above\\n\\\r\n\")\r\nendif()\r\n```\r\n\r\nYou should not force flags globally but use it per target for people using your library through `fetch_content` and `add_subdirectory` this lead to override settings globally for our targets too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/96", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/96/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/96/events", "html_url": "https://github.com/taskflow/taskflow/issues/96", "id": 465639687, "node_id": "MDU6SXNzdWU0NjU2Mzk2ODc=", "number": 96, "title": "Undefined behaviour of per_thread_object_pool() on Windows in case of multi-DLL application architecture", "user": {"login": "bsviglo", "id": 6697628, "node_id": "MDQ6VXNlcjY2OTc2Mjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6697628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bsviglo", "html_url": "https://github.com/bsviglo", "followers_url": "https://api.github.com/users/bsviglo/followers", "following_url": "https://api.github.com/users/bsviglo/following{/other_user}", "gists_url": "https://api.github.com/users/bsviglo/gists{/gist_id}", "starred_url": "https://api.github.com/users/bsviglo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bsviglo/subscriptions", "organizations_url": "https://api.github.com/users/bsviglo/orgs", "repos_url": "https://api.github.com/users/bsviglo/repos", "events_url": "https://api.github.com/users/bsviglo/events{/privacy}", "received_events_url": "https://api.github.com/users/bsviglo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-07-09T08:21:46Z", "updated_at": "2019-08-15T09:31:00Z", "closed_at": "2019-08-15T09:25:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is a call stack where we constantly allocated memory but never freed it (memory growing is pretty big couple of 100s of Mb per minute)\r\n![image](https://user-images.githubusercontent.com/6697628/60871404-538c8900-a23b-11e9-89ff-bccf477d47d9.png)\r\nI have graph (`tf::Taskflow`) with each task use inner parallelizm by using `tf::Subflow` and parallel_for.\r\nOne more thing, I recreate `tf::TaskFlow` every frame. Maybe it's not desired behaviour (you're using internal caching), but any way I think we should support this case also.\r\nI'd like to be sure that whenever I delete `tf::TaskFlow` object I also delete all related internal allocated memory including caching.\r\n\r\n**Update:** I'm using the latest master version, the same behaviour on 2.2.0 version\r\n\r\n**Update:** I've changed my code that now I create `tf::TaskFlow` once and reuse it during entire program execution but I still observe lots of memory allocated by the provided above callstack\r\n\r\n**Update:** I think a have an idea what is wrong. My application uses multi-DLL architecture, where I have main application and lots of DLL all of them uses cpp-taskflow. So I think that each DLL use own copy of cpp-taskflow (and `thread_local `variables) which may results in undefined behaviour or memory leak, but I'm not certain about this idea yet.\r\n\r\n**Update:** Link on MSDN with thread_local storage and multi-DLL https://developercommunity.visualstudio.com/content/problem/124121/thread-local-variables-fail-to-be-initialized-when.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/94", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/94/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/94/events", "html_url": "https://github.com/taskflow/taskflow/issues/94", "id": 459592340, "node_id": "MDU6SXNzdWU0NTk1OTIzNDA=", "number": 94, "title": "Usable on system with no threads?", "user": {"login": "UNDEFINED-BEHAVIOR", "id": 8407331, "node_id": "MDQ6VXNlcjg0MDczMzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/8407331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/UNDEFINED-BEHAVIOR", "html_url": "https://github.com/UNDEFINED-BEHAVIOR", "followers_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/followers", "following_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/following{/other_user}", "gists_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/gists{/gist_id}", "starred_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/subscriptions", "organizations_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/orgs", "repos_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/repos", "events_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/events{/privacy}", "received_events_url": "https://api.github.com/users/UNDEFINED-BEHAVIOR/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-23T16:12:14Z", "updated_at": "2019-06-24T23:18:22Z", "closed_at": "2019-06-24T23:18:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not really a feature request but a question. (or a request if it isn't supported)\r\nIt is possible to use this library on platform with no thread support, ie: web/emscripten and older mobiles. Such that the same code written for desktop with this library run on those platform but sequentially, in the main thread?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/93", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/93/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/93/events", "html_url": "https://github.com/taskflow/taskflow/issues/93", "id": 457579382, "node_id": "MDU6SXNzdWU0NTc1NzkzODI=", "number": 93, "title": "any plan for c++14 support?", "user": {"login": "sumory", "id": 1326893, "node_id": "MDQ6VXNlcjEzMjY4OTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1326893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sumory", "html_url": "https://github.com/sumory", "followers_url": "https://api.github.com/users/sumory/followers", "following_url": "https://api.github.com/users/sumory/following{/other_user}", "gists_url": "https://api.github.com/users/sumory/gists{/gist_id}", "starred_url": "https://api.github.com/users/sumory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sumory/subscriptions", "organizations_url": "https://api.github.com/users/sumory/orgs", "repos_url": "https://api.github.com/users/sumory/repos", "events_url": "https://api.github.com/users/sumory/events{/privacy}", "received_events_url": "https://api.github.com/users/sumory/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-06-18T16:26:16Z", "updated_at": "2020-02-28T05:30:42Z", "closed_at": "2020-02-28T05:30:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "for lots of production systems built with gcc4.9, so it would bring cpp-taskflow more users with c++14 support.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/91", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/91/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/91/events", "html_url": "https://github.com/taskflow/taskflow/issues/91", "id": 456246073, "node_id": "MDU6SXNzdWU0NTYyNDYwNzM=", "number": 91, "title": "Question: How does observer mode avoid multi thread writing?", "user": {"login": "hongyx11", "id": 16175755, "node_id": "MDQ6VXNlcjE2MTc1NzU1", "avatar_url": "https://avatars2.githubusercontent.com/u/16175755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hongyx11", "html_url": "https://github.com/hongyx11", "followers_url": "https://api.github.com/users/hongyx11/followers", "following_url": "https://api.github.com/users/hongyx11/following{/other_user}", "gists_url": "https://api.github.com/users/hongyx11/gists{/gist_id}", "starred_url": "https://api.github.com/users/hongyx11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hongyx11/subscriptions", "organizations_url": "https://api.github.com/users/hongyx11/orgs", "repos_url": "https://api.github.com/users/hongyx11/repos", "events_url": "https://api.github.com/users/hongyx11/events{/privacy}", "received_events_url": "https://api.github.com/users/hongyx11/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-14T13:20:50Z", "updated_at": "2019-06-14T16:43:50Z", "closed_at": "2019-06-14T16:43:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am reading the observer.hpp code, the on_entry and on_exist method.\r\nDoes observer.hpp run on multithread env?\r\nIf so, there is no lock scheme.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/90", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/90/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/90/events", "html_url": "https://github.com/taskflow/taskflow/issues/90", "id": 451926376, "node_id": "MDU6SXNzdWU0NTE5MjYzNzY=", "number": 90, "title": "On using cpp-taskflow in  C", "user": {"login": "erling-d-andersen", "id": 10224241, "node_id": "MDQ6VXNlcjEwMjI0MjQx", "avatar_url": "https://avatars1.githubusercontent.com/u/10224241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erling-d-andersen", "html_url": "https://github.com/erling-d-andersen", "followers_url": "https://api.github.com/users/erling-d-andersen/followers", "following_url": "https://api.github.com/users/erling-d-andersen/following{/other_user}", "gists_url": "https://api.github.com/users/erling-d-andersen/gists{/gist_id}", "starred_url": "https://api.github.com/users/erling-d-andersen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erling-d-andersen/subscriptions", "organizations_url": "https://api.github.com/users/erling-d-andersen/orgs", "repos_url": "https://api.github.com/users/erling-d-andersen/repos", "events_url": "https://api.github.com/users/erling-d-andersen/events{/privacy}", "received_events_url": "https://api.github.com/users/erling-d-andersen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-04T10:48:14Z", "updated_at": "2019-10-10T07:01:37Z", "closed_at": "2019-10-10T07:01:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here I summarize an offline discussion I have had with Tsung-Wei. He suggested I should do it.\r\n\r\nI have been using Intel Cilk to parallelize some code i.e. numerical computations where everything is done in C and NOT C++.  However Cilk is going to be discontinued and Intel suggest to use TBB or OpenMP.  I am not a big fan of OpenMP. And TBB is a C++ code. There simply does not seem to be a good solution for us C programmers.\r\n\r\n[You can find a ton of half baked C tasking libraries on Github but none seem to have the quality of cpp-taskflow.]\r\n\r\ncpp-taskflow is also C++ but since it is a header only implementation I think I can link it into my code with a static version of the C++ library. That way my DLL/SO will have no explicit c++ dependencies.\r\n\r\nCurrently, I have defined a simple C interface to cpp-taskflow and tested it versus Cilk (Intel C implementation) . Performance wise there does not seem to a big difference.\r\n\r\nThe C interface does not have all syntactic sugar and convenience of C++ of course but this simple interface seems good enough for my purpose. There are no secrets in what I am doing but is still playing around, so code is not ready for release.\r\n\r\nI am likely to post some questions as I am moving forward.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/89", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/89/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/89/events", "html_url": "https://github.com/taskflow/taskflow/issues/89", "id": 446510925, "node_id": "MDU6SXNzdWU0NDY1MTA5MjU=", "number": 89, "title": "Cpp-Taskflow CMake target does not link Thread ", "user": {"login": "sleepyeye", "id": 37354487, "node_id": "MDQ6VXNlcjM3MzU0NDg3", "avatar_url": "https://avatars3.githubusercontent.com/u/37354487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sleepyeye", "html_url": "https://github.com/sleepyeye", "followers_url": "https://api.github.com/users/sleepyeye/followers", "following_url": "https://api.github.com/users/sleepyeye/following{/other_user}", "gists_url": "https://api.github.com/users/sleepyeye/gists{/gist_id}", "starred_url": "https://api.github.com/users/sleepyeye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sleepyeye/subscriptions", "organizations_url": "https://api.github.com/users/sleepyeye/orgs", "repos_url": "https://api.github.com/users/sleepyeye/repos", "events_url": "https://api.github.com/users/sleepyeye/events{/privacy}", "received_events_url": "https://api.github.com/users/sleepyeye/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-21T09:25:27Z", "updated_at": "2019-05-23T11:34:37Z", "closed_at": "2019-05-23T11:34:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nThis is not an issue rather a small improvement suggestion.\r\n\r\nI found that [cpp-taskflow cmake target](https://github.com/cpp-taskflow/cpp-taskflow/blob/c7abd3df617829e23c2ef5942e0c6b180c978d9a/CMakeLists.txt#L96) does not link [Threads::Threads](https://github.com/cpp-taskflow/cpp-taskflow/blob/master/CMakeLists.txt#L90) target even if it tried to find it in the same script.\r\nIs this intended behavior?\r\n\r\n\r\nIt is not that serious problem. But sometimes it might make end-user a bit cumbersome since user need to manually find and link `Threads`.\r\n\r\nFor example I expected\r\n```cmake\r\ntarget_link_libraries(myproject\r\n  PUBLIC\r\n  extern::lodepng\r\n  extern::glm\r\n  extern::taskflow)\r\n```\r\n\r\nBut I should do like this\r\n```cmake\r\nfind_package(Threads REQUIRED)\r\ntarget_link_libraries(myproject\r\n  PUBLIC\r\n  Threads::Threads\r\n  extern::lodepng\r\n  extern::glm\r\n  extern::taskflow)\r\n```\r\n\r\nProbably this can be improved by changing this from\r\n```cmake\r\nadd_library(${PROJECT_NAME} INTERFACE)\r\n\r\ntarget_compile_features(${PROJECT_NAME} INTERFACE cxx_std_17)\r\ntarget_include_directories(${PROJECT_NAME} INTERFACE\r\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\r\n  $<INSTALL_INTERFACE:include/> \r\n)\r\n```\r\n\r\nto\r\n```cmake\r\nadd_library(${PROJECT_NAME} INTERFACE)\r\ntarget_link_libraries(${PROJECT_NAME} PUBLIC Threads::Threads)\r\ntarget_compile_features(${PROJECT_NAME} INTERFACE cxx_std_17)\r\ntarget_include_directories(${PROJECT_NAME} INTERFACE\r\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\r\n  $<INSTALL_INTERFACE:include/> \r\n)\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/88", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/88/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/88/events", "html_url": "https://github.com/taskflow/taskflow/issues/88", "id": 444710719, "node_id": "MDU6SXNzdWU0NDQ3MTA3MTk=", "number": 88, "title": "IEEE IPDPS19 paper link is broken", "user": {"login": "SreeArikatla", "id": 5777192, "node_id": "MDQ6VXNlcjU3NzcxOTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/5777192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SreeArikatla", "html_url": "https://github.com/SreeArikatla", "followers_url": "https://api.github.com/users/SreeArikatla/followers", "following_url": "https://api.github.com/users/SreeArikatla/following{/other_user}", "gists_url": "https://api.github.com/users/SreeArikatla/gists{/gist_id}", "starred_url": "https://api.github.com/users/SreeArikatla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SreeArikatla/subscriptions", "organizations_url": "https://api.github.com/users/SreeArikatla/orgs", "repos_url": "https://api.github.com/users/SreeArikatla/repos", "events_url": "https://api.github.com/users/SreeArikatla/events{/privacy}", "received_events_url": "https://api.github.com/users/SreeArikatla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-16T01:19:01Z", "updated_at": "2019-05-16T19:50:00Z", "closed_at": "2019-05-16T19:50:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nThe link to `IEEE IPDPS19 paper` on the README.md is broken\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/87", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/87/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/87/events", "html_url": "https://github.com/taskflow/taskflow/issues/87", "id": 444451012, "node_id": "MDU6SXNzdWU0NDQ0NTEwMTI=", "number": 87, "title": "Is there any maximum number of precede task?", "user": {"login": "sleepyeye", "id": 37354487, "node_id": "MDQ6VXNlcjM3MzU0NDg3", "avatar_url": "https://avatars3.githubusercontent.com/u/37354487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sleepyeye", "html_url": "https://github.com/sleepyeye", "followers_url": "https://api.github.com/users/sleepyeye/followers", "following_url": "https://api.github.com/users/sleepyeye/following{/other_user}", "gists_url": "https://api.github.com/users/sleepyeye/gists{/gist_id}", "starred_url": "https://api.github.com/users/sleepyeye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sleepyeye/subscriptions", "organizations_url": "https://api.github.com/users/sleepyeye/orgs", "repos_url": "https://api.github.com/users/sleepyeye/repos", "events_url": "https://api.github.com/users/sleepyeye/events{/privacy}", "received_events_url": "https://api.github.com/users/sleepyeye/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-15T13:50:43Z", "updated_at": "2019-05-21T09:08:34Z", "closed_at": "2019-05-21T09:01:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. First of all, I sorry for didn't follow the issue template. I'm not sure whether this is bug or my mistakes. So I cloudn't settle down to the template.\r\n\r\nCurrently I'm building  high performance graphics application (ray tracer)\r\nand it needs to compute HUGE amount of same function(with different parameters) parallelly.\r\n\r\nHowever when I try to lunch tasks parallelly, sometimes taskflow failed to build task graph.\r\nThe problematic code is in below.\r\n```cpp\r\n  tf::Task taskStart = tf.emplace([](){ syncLog(\"Start  \\n\"); });\r\n  tf::Task taskEnd = tf.emplace([](){ syncLog(\"End  \\n\"); });\r\n  for(int i = 0; i < numSamples ; ++i) {\r\n    tf::Task task = tf.emplace([i](){ /* do something */ });\r\n    taskStart.precede(task);\r\n    task.precede(taskEnd);\r\n  }\r\n...\r\n  tf.wait_for_all();\r\n```\r\nBasically this is parallel for. \r\nHowever, when I increased `numSamples` really high, it failed to construct taskflow with these error\r\n`terminated by signal SIGSEGV (Address boundary error`.\r\nWhen I set `numSamples=1280*720*4` it works. But when I set `numSamples=1280*720*1024` it failed.\r\n\r\n\r\nI'm suspecting that a task can have limited number of successor tasks and my application some how over it. \r\n\r\nIs there anything that I'm missing?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/86", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/86/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/86/events", "html_url": "https://github.com/taskflow/taskflow/issues/86", "id": 444250066, "node_id": "MDU6SXNzdWU0NDQyNTAwNjY=", "number": 86, "title": "Build error using 18.04.2 x64 and g++ 7.4.0", "user": {"login": "aogrcs", "id": 5660925, "node_id": "MDQ6VXNlcjU2NjA5MjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5660925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aogrcs", "html_url": "https://github.com/aogrcs", "followers_url": "https://api.github.com/users/aogrcs/followers", "following_url": "https://api.github.com/users/aogrcs/following{/other_user}", "gists_url": "https://api.github.com/users/aogrcs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aogrcs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aogrcs/subscriptions", "organizations_url": "https://api.github.com/users/aogrcs/orgs", "repos_url": "https://api.github.com/users/aogrcs/repos", "events_url": "https://api.github.com/users/aogrcs/events{/privacy}", "received_events_url": "https://api.github.com/users/aogrcs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-15T05:57:26Z", "updated_at": "2019-05-25T07:12:33Z", "closed_at": "2019-05-25T07:12:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\nI build the simple.cpp using\r\ng++ simple.cpp -std=c++1z -O2 -lpthread -lstdc++fs -o simple\r\nthe error is\r\nsimple.cpp:6:10: fatal error: taskflow/taskflow.hpp: No such file or directory\r\nI have already add the path /home/talos/cpp-taskflow which includes taskflow/taskflow.hpp\r\nCould someone help me? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/82", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/82/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/82/events", "html_url": "https://github.com/taskflow/taskflow/issues/82", "id": 437624616, "node_id": "MDU6SXNzdWU0Mzc2MjQ2MTY=", "number": 82, "title": "Crash at destruction time", "user": {"login": "KingDuckZ", "id": 1258127, "node_id": "MDQ6VXNlcjEyNTgxMjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1258127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KingDuckZ", "html_url": "https://github.com/KingDuckZ", "followers_url": "https://api.github.com/users/KingDuckZ/followers", "following_url": "https://api.github.com/users/KingDuckZ/following{/other_user}", "gists_url": "https://api.github.com/users/KingDuckZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/KingDuckZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KingDuckZ/subscriptions", "organizations_url": "https://api.github.com/users/KingDuckZ/orgs", "repos_url": "https://api.github.com/users/KingDuckZ/repos", "events_url": "https://api.github.com/users/KingDuckZ/events{/privacy}", "received_events_url": "https://api.github.com/users/KingDuckZ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-04-26T11:16:06Z", "updated_at": "2019-04-30T18:17:04Z", "closed_at": "2019-04-30T18:17:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nMy program is crashing during Taskflow's cleanup after main() returns.\r\n\r\n**To Reproduce**\r\nThis is only happening in a specific case for me, we have a very customised environment so I don't know how to help reproducing the failure. All I can say is this is due to the statics destruction not happening in the expected order.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: custom build environment with gcc 8.2.0 and glibc 2.17 \r\n - Browser ???\r\n - Version latest master\r\n\r\n**Additional context**\r\nWith some help from valgrind I pinpointed the problem to singular_allocator.hpp. I added some print statements in there and this is the output:\r\n\r\n    Handle::Handle() - manager is 0x852200 - handle allocated mempool 0x1f44990\r\n    Handle::Handle() - manager is 0x8521a0 - handle allocated mempool 0x3476890\r\n    Handle::Handle() - manager is 0x852200 - handle allocated mempool 0x7f1ce4000980\r\n    Handle::~Handle() - storing back mempool 0x7f1ce4000980 into 0x852200\r\n    SingularMempoolManager::~SingularMempoolManager - 0x8521a0 found 0 pools\r\n    \t0x8521a0 destructor done\r\n    Handle::~Handle() - storing back mempool 0x3476890 into 0x8521a0\r\n    Handle::~Handle() - storing back mempool 0x1f44990 into 0x852200\r\n    SingularMempoolManager::~SingularMempoolManager - 0x852200 found 2 pools\r\n    \tdeleting mempool 0x7f1ce4000980\r\n    \tdeleting mempool 0x1f44990\r\n    Segmentation fault\r\n\r\nThe \"deleting mempool\" print is right after the delete p; line in ~SingularMempoolManager(). As you can see from this log, the SingularMempoolManager 8521a0 has an empty pools vector and it gets destroyed (and hence its pools vector gets its block deallocated). Following, a Handle that was originally associated with 8521a0 gets destroyed, which causes it to emplace_back() into the pools vector that got deallocated just now. That probably tramples on my malloc's memory pool causing a crash later on in the code. Valgrind correctly reports an invalid write of size 8 here.\r\n\r\nI see a few ways this code could be improved:\r\n\r\n1. destructors should be noexcept. emplace_back() may throw (on reallocation, if running with more threads than items reserved in the vector) and as such it should be wrapped in a try/catch block; leaking a SingularMempool is better than trashing the entire program imo\r\n2. asserts should be placed to prevent this kind of dangling reference from happening as it's very hard to debug; as a suggestion, I use [SafePtr](https://github.com/mawww/kakoune/blob/master/src/safe_ptr.hh) from mawww and it's been an invaluable help for me so far\r\n3. destruction order can't be left up to the compiler in this case; the thread local Handles should for example register with atexit() (\u00e0 la Alexandrescu's Loki) or use some equivalent technique.\r\n\r\nI hope I gave useful details, please feel free to ask for as many info as it may be useful to you. This is quite a critical bug for me and I hope it can get fixed as soon as possible. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/81", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/81/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/81/events", "html_url": "https://github.com/taskflow/taskflow/issues/81", "id": 436793256, "node_id": "MDU6SXNzdWU0MzY3OTMyNTY=", "number": 81, "title": "Readme still up to date?", "user": {"login": "KingDuckZ", "id": 1258127, "node_id": "MDQ6VXNlcjEyNTgxMjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1258127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KingDuckZ", "html_url": "https://github.com/KingDuckZ", "followers_url": "https://api.github.com/users/KingDuckZ/followers", "following_url": "https://api.github.com/users/KingDuckZ/following{/other_user}", "gists_url": "https://api.github.com/users/KingDuckZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/KingDuckZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KingDuckZ/subscriptions", "organizations_url": "https://api.github.com/users/KingDuckZ/orgs", "repos_url": "https://api.github.com/users/KingDuckZ/repos", "events_url": "https://api.github.com/users/KingDuckZ/events{/privacy}", "received_events_url": "https://api.github.com/users/KingDuckZ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-24T16:27:49Z", "updated_at": "2019-04-30T18:16:55Z", "closed_at": "2019-04-30T18:16:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm referring to this line from the readme:\r\n\r\n    auto [A, fu] = tf.emplace([] (tf::SubflowBuilder& subflow) {});\r\n\r\nThis used to work fine with v2.0 in my project but after updating to master today I get a build error: \"cannot decompose inaccessible member tf::Task::_node of tf::Task\".\r\n\r\nIs it still possible to obtain a future from a subtask? I need that future so I can pass it to task B (A.precede(B);)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/77", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/77/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/77/events", "html_url": "https://github.com/taskflow/taskflow/issues/77", "id": 435514324, "node_id": "MDU6SXNzdWU0MzU1MTQzMjQ=", "number": 77, "title": "Conan package", "user": {"login": "Milerius", "id": 21139416, "node_id": "MDQ6VXNlcjIxMTM5NDE2", "avatar_url": "https://avatars1.githubusercontent.com/u/21139416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Milerius", "html_url": "https://github.com/Milerius", "followers_url": "https://api.github.com/users/Milerius/followers", "following_url": "https://api.github.com/users/Milerius/following{/other_user}", "gists_url": "https://api.github.com/users/Milerius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Milerius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Milerius/subscriptions", "organizations_url": "https://api.github.com/users/Milerius/orgs", "repos_url": "https://api.github.com/users/Milerius/repos", "events_url": "https://api.github.com/users/Milerius/events{/privacy}", "received_events_url": "https://api.github.com/users/Milerius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-21T14:20:15Z", "updated_at": "2020-04-20T16:00:31Z", "closed_at": "2020-04-20T16:00:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It's can be great if we can make a contact with official bincrafters from conan so they add cpp-taskflow officialy to their remote\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/75", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/75/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/75/events", "html_url": "https://github.com/taskflow/taskflow/issues/75", "id": 428522356, "node_id": "MDU6SXNzdWU0Mjg1MjIzNTY=", "number": 75, "title": "CMake failed on os X", "user": {"login": "yangxingpping", "id": 2830738, "node_id": "MDQ6VXNlcjI4MzA3Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2830738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yangxingpping", "html_url": "https://github.com/yangxingpping", "followers_url": "https://api.github.com/users/yangxingpping/followers", "following_url": "https://api.github.com/users/yangxingpping/following{/other_user}", "gists_url": "https://api.github.com/users/yangxingpping/gists{/gist_id}", "starred_url": "https://api.github.com/users/yangxingpping/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yangxingpping/subscriptions", "organizations_url": "https://api.github.com/users/yangxingpping/orgs", "repos_url": "https://api.github.com/users/yangxingpping/repos", "events_url": "https://api.github.com/users/yangxingpping/events{/privacy}", "received_events_url": "https://api.github.com/users/yangxingpping/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-03T01:43:40Z", "updated_at": "2019-04-14T13:48:54Z", "closed_at": "2019-04-14T13:48:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nmkdir build; cd build; cmake ..\r\nIt's seems that cannot detect the Clang++ version ,\r\nerror log is:\r\n  Cpp-Taskflow currently supports the following compilers:\\n\\\r\n  - g++ v7.3 or above\\n\\\r\n  - clang++ v6.0 or above\\n\\\r\n  - MSVC++ v19.14 or above\\n\\\r\n\r\nso I replace \r\n   elseif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\r\nwith \r\n  elseif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\r\nand it's works for me!\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Mac OSX 10.14.2\r\n - CMake Version 3.12.1\r\n -Clang++ Version:\r\n    Apple LLVM version 10.0.1 (clang-1001.0.46.3)\r\n   Target: x86_64-apple-darwin18.2.0\r\n*Additional context**\r\nAdd any other context about the problem here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/74", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/74/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/74/events", "html_url": "https://github.com/taskflow/taskflow/issues/74", "id": 427385042, "node_id": "MDU6SXNzdWU0MjczODUwNDI=", "number": 74, "title": "QUESTION: independent tasks to be run without ordering", "user": {"login": "RiccardoRossi", "id": 8059665, "node_id": "MDQ6VXNlcjgwNTk2NjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/8059665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RiccardoRossi", "html_url": "https://github.com/RiccardoRossi", "followers_url": "https://api.github.com/users/RiccardoRossi/followers", "following_url": "https://api.github.com/users/RiccardoRossi/following{/other_user}", "gists_url": "https://api.github.com/users/RiccardoRossi/gists{/gist_id}", "starred_url": "https://api.github.com/users/RiccardoRossi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RiccardoRossi/subscriptions", "organizations_url": "https://api.github.com/users/RiccardoRossi/orgs", "repos_url": "https://api.github.com/users/RiccardoRossi/repos", "events_url": "https://api.github.com/users/RiccardoRossi/events{/privacy}", "received_events_url": "https://api.github.com/users/RiccardoRossi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-03-31T11:13:03Z", "updated_at": "2019-04-23T07:19:44Z", "closed_at": "2019-04-23T07:19:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is even less than a feature request, and more of a conceptual question on tasking.\r\n\r\nlet's imagine that i have the tasks\r\n\r\nA B C D E F G\r\n\r\nbecause of their structure the tasks can be run **in any order**. HOWEVER a task can be running only when its neighbour tasks are not being run (however it does not matter if the neighbouring tasks were actually executed or not).\r\nTo make an example, i could run B only under the guarantee that neither A or C are run while B is running.\r\n\r\nthe question is:\r\nhow can i prescribe such logical dependency without implying an order between the tasks?\r\n\r\nthank you in advance for any hint on this\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/72", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/72/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/72/events", "html_url": "https://github.com/taskflow/taskflow/issues/72", "id": 424827943, "node_id": "MDU6SXNzdWU0MjQ4Mjc5NDM=", "number": 72, "title": "Exception handling for dispatch()", "user": {"login": "robinchrist", "id": 22774099, "node_id": "MDQ6VXNlcjIyNzc0MDk5", "avatar_url": "https://avatars1.githubusercontent.com/u/22774099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robinchrist", "html_url": "https://github.com/robinchrist", "followers_url": "https://api.github.com/users/robinchrist/followers", "following_url": "https://api.github.com/users/robinchrist/following{/other_user}", "gists_url": "https://api.github.com/users/robinchrist/gists{/gist_id}", "starred_url": "https://api.github.com/users/robinchrist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robinchrist/subscriptions", "organizations_url": "https://api.github.com/users/robinchrist/orgs", "repos_url": "https://api.github.com/users/robinchrist/repos", "events_url": "https://api.github.com/users/robinchrist/events{/privacy}", "received_events_url": "https://api.github.com/users/robinchrist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-03-25T10:33:39Z", "updated_at": "2020-02-15T05:56:10Z", "closed_at": "2020-02-15T05:56:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was running into issues where my application crashed with `std::terminate()`.\r\nAfter some debugging I found out that in one task an exception is thrown.\r\nI switched from `silent_dispatch()` to `dispatch()` and thought that I could catch these exceptions with the `shared_future` being returned from `dispatch`... However, this is not the case.\r\nI assume that `std::terminate` is called because the worker threads are running in a detached state (aren`t they?)...\r\n\r\nDo you think it's possible to add exception handling, at least for `dispatch`?\r\nI'm not familiar enough with the internals of Taskflow (yet) to prepare code...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/71", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/71/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/71/events", "html_url": "https://github.com/taskflow/taskflow/issues/71", "id": 424636975, "node_id": "MDU6SXNzdWU0MjQ2MzY5NzU=", "number": 71, "title": "Warning in basic_taskflow.hpp on Visual Studio 2017 x64 (15.8.4)", "user": {"login": "Pursche", "id": 4644652, "node_id": "MDQ6VXNlcjQ2NDQ2NTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4644652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pursche", "html_url": "https://github.com/Pursche", "followers_url": "https://api.github.com/users/Pursche/followers", "following_url": "https://api.github.com/users/Pursche/following{/other_user}", "gists_url": "https://api.github.com/users/Pursche/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pursche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pursche/subscriptions", "organizations_url": "https://api.github.com/users/Pursche/orgs", "repos_url": "https://api.github.com/users/Pursche/repos", "events_url": "https://api.github.com/users/Pursche/events{/privacy}", "received_events_url": "https://api.github.com/users/Pursche/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-24T17:15:00Z", "updated_at": "2019-04-06T04:36:19Z", "closed_at": "2019-04-06T04:36:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "When compiling Taskflow in VS2017 we get a warning like this:\r\nWarning\tC4267\t'argument': conversion from 'size_t' to 'int', possible loss of data\r\nIn \\taskflow\\taskflow\\graph\\basic_taskflow.hpp on line 478 (this points to the wrong line but whatever)\r\n\r\nThe actual line that causes this is the following:\r\nnode->_num_dependents = node->_dependents.size();\r\nBy static casting it like so, we fixed the issue:\r\nnode->_num_dependents = static_cast<unsigned int>(node->_dependents.size());\r\n\r\nI would like to end this issue by saying that I absolutely love taskflow, and the fact that my first reported issue is something as minor as a warning (which triggers our \"treat warnings as error\" flag, but still) speaks for itself. Great job so far and thank you! :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/67", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/67/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/67/events", "html_url": "https://github.com/taskflow/taskflow/issues/67", "id": 412045644, "node_id": "MDU6SXNzdWU0MTIwNDU2NDQ=", "number": 67, "title": "Longer-running tasks with Framework", "user": {"login": "ibaned", "id": 971921, "node_id": "MDQ6VXNlcjk3MTkyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/971921?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibaned", "html_url": "https://github.com/ibaned", "followers_url": "https://api.github.com/users/ibaned/followers", "following_url": "https://api.github.com/users/ibaned/following{/other_user}", "gists_url": "https://api.github.com/users/ibaned/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibaned/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibaned/subscriptions", "organizations_url": "https://api.github.com/users/ibaned/orgs", "repos_url": "https://api.github.com/users/ibaned/repos", "events_url": "https://api.github.com/users/ibaned/events{/privacy}", "received_events_url": "https://api.github.com/users/ibaned/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-19T17:42:18Z", "updated_at": "2019-02-20T16:58:38Z", "closed_at": "2019-02-20T16:58:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! First off, thank you for implementing `Framework`, this is exactly what I would need to use `TaskFlow` in my physics simulation code. In particular, each time step of the simulation is a set of tasks with dependencies between them, and the simulation should continue to execute this task graph in a loop until the time variable reaches a user-specified value.\r\n\r\nI had a question about a slightly more complex case that I'd like to do as well:\r\n\r\nMy simulation spends a long time writing to files, but it doesn't write to a file every single time step. It only writes to a file when the time variable is a multiple of some large number. Is there a way to simultaneously dispatch one task (the file writing task) and a framework `run_until` (the normal simulation time steps), then wait on both of them? That way I could allow the file writing to be concurrent with many time steps, until the next file write is needed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/65", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/65/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/65/events", "html_url": "https://github.com/taskflow/taskflow/issues/65", "id": 407487780, "node_id": "MDU6SXNzdWU0MDc0ODc3ODA=", "number": 65, "title": "WorkStealingThreadpool - tree of tasks - unexpected behaviour", "user": {"login": "dev-depintel", "id": 47404052, "node_id": "MDQ6VXNlcjQ3NDA0MDUy", "avatar_url": "https://avatars3.githubusercontent.com/u/47404052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dev-depintel", "html_url": "https://github.com/dev-depintel", "followers_url": "https://api.github.com/users/dev-depintel/followers", "following_url": "https://api.github.com/users/dev-depintel/following{/other_user}", "gists_url": "https://api.github.com/users/dev-depintel/gists{/gist_id}", "starred_url": "https://api.github.com/users/dev-depintel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dev-depintel/subscriptions", "organizations_url": "https://api.github.com/users/dev-depintel/orgs", "repos_url": "https://api.github.com/users/dev-depintel/repos", "events_url": "https://api.github.com/users/dev-depintel/events{/privacy}", "received_events_url": "https://api.github.com/users/dev-depintel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-07T00:04:46Z", "updated_at": "2019-04-30T18:18:37Z", "closed_at": "2019-04-30T18:18:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am observing some unexpected behaviour when trying to dynamically spawn a tree of tasks.\r\n\r\nHere is a simple example: \r\n\r\n```C++\r\nvoid syncLog(std::string const& msg)\r\n{\r\n    static std::mutex logMutex;\r\n    std::lock_guard<std::mutex> lock(logMutex);\r\n    std::cout << msg << '\\n';\r\n}\r\n\r\nvoid grow(tf::SubflowBuilder& subflow, uint64_t depth)\r\n{\r\n    syncLog(\"Depth: \" + std::to_string(depth));\r\n    std::this_thread::sleep_for(std::chrono::seconds(1));\r\n    if(depth < 3)\r\n    {\r\n        subflow.silent_emplace(\r\n                [depth](tf::SubflowBuilder& subsubflow){grow(subsubflow, depth+1);},\r\n                [depth](tf::SubflowBuilder& subsubflow){grow(subsubflow, depth+1);});\r\n        subflow.detach();\r\n    }\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    tf::Taskflow mainTaskFlow(8);\r\n    mainTaskFlow.silent_emplace([](tf::SubflowBuilder& subflow){grow(subflow, 0);});\r\n    mainTaskFlow.wait_for_all();\r\n}\r\n```\r\nHere is the dumped topology of the main taskflow: [here](https://imgur.com/3v6dXlD)\r\n\r\nUsing \"WorkStealingThreadpool\" I have the following (unexpected) output:\r\n\r\n```text\r\n[09:54:22] Depth: 0 \r\n[09:54:23] Depth: 1\r\n[09:54:24] Depth: 2\r\n[09:54:25] Depth: 3 **Only a single thread running until here**\r\n[09:54:26] Depth: 2 **Only two threads from here**\r\n[09:54:26] Depth: 3 \r\n[09:54:27] Depth: 3\r\n[09:54:27] Depth: 1\r\n[09:54:28] Depth: 3\r\n[09:54:28] Depth: 2\r\n[09:54:29] Depth: 3\r\n[09:54:29] Depth: 2\r\n[09:54:30] Depth: 3\r\n[09:54:30] Depth: 3\r\n[09:54:31] Depth: 3\r\n```\r\nUsing \"SimpleThreadpool\"  I have the following (expected) output:\r\n```text\r\n[10:02:31] Depth: 0 *one thread*\r\n[10:02:32] Depth: 1 *two threads*\r\n[10:02:32] Depth: 1\r\n[10:02:33] Depth: 2 *four threads*\r\n[10:02:33] Depth: 2\r\n[10:02:33] Depth: 2\r\n[10:02:33] Depth: 2\r\n[10:02:34] Depth: 3 *eight threads*\r\n[10:02:34] Depth: 3\r\n[10:02:34] Depth: 3\r\n[10:02:34] Depth: 3\r\n[10:02:34] Depth: 3\r\n[10:02:34] Depth: 3\r\n[10:02:34] Depth: 3\r\n[10:02:34] Depth: 3\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/64", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/64/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/64/events", "html_url": "https://github.com/taskflow/taskflow/issues/64", "id": 407072565, "node_id": "MDU6SXNzdWU0MDcwNzI1NjU=", "number": 64, "title": "what do you think it would take to get a c++11 supported version?", "user": {"login": "luxe", "id": 1312081, "node_id": "MDQ6VXNlcjEzMTIwODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1312081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luxe", "html_url": "https://github.com/luxe", "followers_url": "https://api.github.com/users/luxe/followers", "following_url": "https://api.github.com/users/luxe/following{/other_user}", "gists_url": "https://api.github.com/users/luxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/luxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luxe/subscriptions", "organizations_url": "https://api.github.com/users/luxe/orgs", "repos_url": "https://api.github.com/users/luxe/repos", "events_url": "https://api.github.com/users/luxe/events{/privacy}", "received_events_url": "https://api.github.com/users/luxe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-06T04:01:48Z", "updated_at": "2019-02-13T07:08:01Z", "closed_at": "2019-02-13T07:08:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Any thoughts on the work that would be needed to backport the library for c+11 also?  \r\nI know the examples show structured bindings and stuff, but a user does not strictly need to use that.\r\nIs there anything specifically about the API that would not work in c++11?\r\nCurious what the big blockers would be, and if you think that's even something worth doing.  Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/63", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/63/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/63/events", "html_url": "https://github.com/taskflow/taskflow/issues/63", "id": 406483574, "node_id": "MDU6SXNzdWU0MDY0ODM1NzQ=", "number": 63, "title": "[Question] example/dynamic_traversal performance", "user": {"login": "Nic30", "id": 5032806, "node_id": "MDQ6VXNlcjUwMzI4MDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/5032806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nic30", "html_url": "https://github.com/Nic30", "followers_url": "https://api.github.com/users/Nic30/followers", "following_url": "https://api.github.com/users/Nic30/following{/other_user}", "gists_url": "https://api.github.com/users/Nic30/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nic30/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nic30/subscriptions", "organizations_url": "https://api.github.com/users/Nic30/orgs", "repos_url": "https://api.github.com/users/Nic30/repos", "events_url": "https://api.github.com/users/Nic30/events{/privacy}", "received_events_url": "https://api.github.com/users/Nic30/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-04T19:32:00Z", "updated_at": "2019-02-06T09:56:03Z", "closed_at": "2019-02-06T09:55:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nwhy is the parallel version of dynamic traversal example so much slower? I understand that it is caused by communication overhead between the worker processes. I expect that there is some queue of tasks and that is the limit.\r\n\r\nIs it possible to tune-up taskflow for large number of small tasks (for BFS like algorithms)?\r\n\r\nIs there any performance comparisons with boost threadpool?\r\n\r\n```\r\n$ ./dynamic_traversal seq\r\nSeq runtime: 37\r\n./dynamic_traversal seq tf\r\nTf runtime: 677\r\n\r\n./dynamic_traversal\r\nTf runtime: 668\r\n./dynamic_traversal tf\r\nTf runtime: 651\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/61", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/61/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/61/events", "html_url": "https://github.com/taskflow/taskflow/issues/61", "id": 404087209, "node_id": "MDU6SXNzdWU0MDQwODcyMDk=", "number": 61, "title": "thinking about how to integrate into bazel", "user": {"login": "luxe", "id": 1312081, "node_id": "MDQ6VXNlcjEzMTIwODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1312081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luxe", "html_url": "https://github.com/luxe", "followers_url": "https://api.github.com/users/luxe/followers", "following_url": "https://api.github.com/users/luxe/following{/other_user}", "gists_url": "https://api.github.com/users/luxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/luxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luxe/subscriptions", "organizations_url": "https://api.github.com/users/luxe/orgs", "repos_url": "https://api.github.com/users/luxe/repos", "events_url": "https://api.github.com/users/luxe/events{/privacy}", "received_events_url": "https://api.github.com/users/luxe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-29T01:55:15Z", "updated_at": "2019-01-29T04:52:53Z", "closed_at": "2019-01-29T04:52:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nI want to integrate this library into a [bazel](https://bazel.build/) project.  This would require building it from source and then using it in bazel rules.\r\n\r\n**Describe the solution you'd like**\r\nA bazel BUILD file that can build and use this project.  \r\nI think I can pull it off by using the foreign rules here:  \r\nhttps://github.com/bazelbuild/rules_foreign_cc\r\n\r\n**Describe alternatives you've considered**\r\nIt would probably be better than trying to write a bunch of individual BUILD files and then try to get you to merge and support those.\r\n\r\n**Additional context**\r\nI just wanted to make an issue so you knew I was working on it, and if you had any comments yourself.  thanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/60", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/60/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/60/events", "html_url": "https://github.com/taskflow/taskflow/issues/60", "id": 400168317, "node_id": "MDU6SXNzdWU0MDAxNjgzMTc=", "number": 60, "title": "Subflows in a parallel_for", "user": {"login": "igsoft", "id": 11719351, "node_id": "MDQ6VXNlcjExNzE5MzUx", "avatar_url": "https://avatars0.githubusercontent.com/u/11719351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/igsoft", "html_url": "https://github.com/igsoft", "followers_url": "https://api.github.com/users/igsoft/followers", "following_url": "https://api.github.com/users/igsoft/following{/other_user}", "gists_url": "https://api.github.com/users/igsoft/gists{/gist_id}", "starred_url": "https://api.github.com/users/igsoft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/igsoft/subscriptions", "organizations_url": "https://api.github.com/users/igsoft/orgs", "repos_url": "https://api.github.com/users/igsoft/repos", "events_url": "https://api.github.com/users/igsoft/events{/privacy}", "received_events_url": "https://api.github.com/users/igsoft/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-17T08:49:38Z", "updated_at": "2019-01-23T22:45:41Z", "closed_at": "2019-01-23T22:45:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm experimenting with taskflow and in some cases would be useful to have dynamic subflows inside a parallel_for to continue to generate tasks. Is this possible with the current interface? If yes could you write a small example?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/59", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/59/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/59/events", "html_url": "https://github.com/taskflow/taskflow/issues/59", "id": 398155072, "node_id": "MDU6SXNzdWUzOTgxNTUwNzI=", "number": 59, "title": "gcc 7.3.0 with c++17 compile error", "user": {"login": "wjx0912", "id": 5556482, "node_id": "MDQ6VXNlcjU1NTY0ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/5556482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wjx0912", "html_url": "https://github.com/wjx0912", "followers_url": "https://api.github.com/users/wjx0912/followers", "following_url": "https://api.github.com/users/wjx0912/following{/other_user}", "gists_url": "https://api.github.com/users/wjx0912/gists{/gist_id}", "starred_url": "https://api.github.com/users/wjx0912/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wjx0912/subscriptions", "organizations_url": "https://api.github.com/users/wjx0912/orgs", "repos_url": "https://api.github.com/users/wjx0912/repos", "events_url": "https://api.github.com/users/wjx0912/events{/privacy}", "received_events_url": "https://api.github.com/users/wjx0912/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-11T06:55:47Z", "updated_at": "2019-02-05T13:26:49Z", "closed_at": "2019-01-12T11:06:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "error screenshot: (the source code only include #<taskflow.hpp>,  cflags is: -std=c++17)\r\nhttp://98.142.142.53/cpp-taskflow-compile.png\r\n\r\nhere is my gcc info:\r\n`root@imx8mqevk:~/mnt/source/capture_and_encode# gcc -v\r\nUsing built-in specs.\r\nCOLLECT_GCC=gcc\r\nCOLLECT_LTO_WRAPPER=/usr/libexec/gcc/aarch64-poky-linux/7.3.0/lto-wrapper\r\nTarget: aarch64-poky-linux\r\nConfigured with: ../../../../../../work-shared/gcc-7.3.0-r0/gcc-7.3.0/configure --build=x86_64-linux --host=aarch64-poky-linux --target=aarch64-poky-linux --prefix=/usr --exec_prefix=/usr --bindir=/usr/bin --sbindir=/usr/sbin --libexecdir=/usr/libexec --datadir=/usr/share --sysconfdir=/etc --sharedstatedir=/com --localstatedir=/var --libdir=/usr/lib --includedir=/usr/include --oldincludedir=/usr/include --infodir=/usr/share/info --mandir=/usr/share/man --disable-silent-rules --disable-dependency-tracking --with-libtool-sysroot=/home/chunrong/fsl-arm-yocto-bsp/build-xwaylandimx8/tmp/work/aarch64-poky-linux/gcc/7.3.0-r0/recipe-sysroot --with-gnu-ld --enable-shared --enable-languages=c,c++ --enable-threads=posix --enable-multilib --enable-c99 --enable-long-long --enable-symvers=gnu --enable-libstdcxx-pch --program-prefix=aarch64-poky-linux- --without-local-prefix --enable-lto --enable-libssp --enable-libitm --disable-bootstrap --disable-libmudflap --with-system-zlib --with-linker-hash-style=gnu --enable-linker-build-id --with-ppl=no --with-cloog=no --enable-checking=release --enable-cheaders=c_global --without-isl --with-sysroot=/ --with-build-sysroot=/home/chunrong/fsl-arm-yocto-bsp/build-xwaylandimx8/tmp/work/aarch64-poky-linux/gcc/7.3.0-r0/recipe-sysroot --with-gxx-include-dir=/usr/include/c++/7.3.0 --without-long-double-128 --enable-nls --enable-initfini-array --enable-__cxa_atexit\r\nThread model: posix\r\ngcc version 7.3.0 (GCC) `", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/58", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/58/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/58/events", "html_url": "https://github.com/taskflow/taskflow/issues/58", "id": 394431275, "node_id": "MDU6SXNzdWUzOTQ0MzEyNzU=", "number": 58, "title": "Warnings on Visual Studio 2017 x64 (15.9.4)", "user": {"login": "bsviglo", "id": 6697628, "node_id": "MDQ6VXNlcjY2OTc2Mjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6697628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bsviglo", "html_url": "https://github.com/bsviglo", "followers_url": "https://api.github.com/users/bsviglo/followers", "following_url": "https://api.github.com/users/bsviglo/following{/other_user}", "gists_url": "https://api.github.com/users/bsviglo/gists{/gist_id}", "starred_url": "https://api.github.com/users/bsviglo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bsviglo/subscriptions", "organizations_url": "https://api.github.com/users/bsviglo/orgs", "repos_url": "https://api.github.com/users/bsviglo/repos", "events_url": "https://api.github.com/users/bsviglo/events{/privacy}", "received_events_url": "https://api.github.com/users/bsviglo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-27T16:05:11Z", "updated_at": "2019-01-13T04:20:03Z", "closed_at": "2019-01-13T04:20:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "\\cpp-taskflow\\include\\taskflow\\threadpool\\workstealing_threadpool.hpp(570): warning C4267: 'initializing': conversion from 'size_t' to 'unsigned int', possible loss of data\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/57", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/57/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/57/events", "html_url": "https://github.com/taskflow/taskflow/issues/57", "id": 394366366, "node_id": "MDU6SXNzdWUzOTQzNjYzNjY=", "number": 57, "title": "Compile error when compiling with clang 7", "user": {"login": "ceeac", "id": 28988143, "node_id": "MDQ6VXNlcjI4OTg4MTQz", "avatar_url": "https://avatars3.githubusercontent.com/u/28988143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ceeac", "html_url": "https://github.com/ceeac", "followers_url": "https://api.github.com/users/ceeac/followers", "following_url": "https://api.github.com/users/ceeac/following{/other_user}", "gists_url": "https://api.github.com/users/ceeac/gists{/gist_id}", "starred_url": "https://api.github.com/users/ceeac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ceeac/subscriptions", "organizations_url": "https://api.github.com/users/ceeac/orgs", "repos_url": "https://api.github.com/users/ceeac/repos", "events_url": "https://api.github.com/users/ceeac/events{/privacy}", "received_events_url": "https://api.github.com/users/ceeac/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-27T11:08:53Z", "updated_at": "2018-12-28T22:09:31Z", "closed_at": "2018-12-28T22:07:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version:**\r\n504e78b (latest master)\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. clone the repository\r\n2. ```~$ cd cpp-taskflow && mkdir build && cd build && cmake -DCMAKE_CXX_COMPILER=clang++-7 .. && make -j1 ```\r\n\r\n**Expected behavior**\r\ncpp-taskflow compiles without errors\r\n\r\n**Actual behavior**\r\n```bash\r\n$ make -j1\r\n/usr/bin/cmake -H/home/ceeac/Projects/code/cpp-taskflow -B/home/ceeac/Projects/code/cpp-taskflow/build --check-build-system CMakeFiles/Makefile.cmake 0\r\n/usr/bin/cmake -E cmake_progress_start /home/ceeac/Projects/code/cpp-taskflow/build/CMakeFiles /home/ceeac/Projects/code/cpp-taskflow/build/CMakeFiles/progress.marks\r\nmake -f CMakeFiles/Makefile2 all\r\nmake[1]: Entering directory '/media/ceeac/Projects/code/cpp-taskflow/build'\r\nmake -f CMakeFiles/threadpool_test_tmp.dir/build.make CMakeFiles/threadpool_test_tmp.dir/depend\r\nmake[2]: Entering directory '/media/ceeac/Projects/code/cpp-taskflow/build'\r\ncd /home/ceeac/Projects/code/cpp-taskflow/build && /usr/bin/cmake -E cmake_depends \"Unix Makefiles\" /home/ceeac/Projects/code/cpp-taskflow /home/ceeac/Projects/code/cpp-taskflow /home/ceeac/Projects/code/cpp-taskflow/build /home/ceeac/Projects/code/cpp-taskflow/build /home/ceeac/Projects/code/cpp-taskflow/build/CMakeFiles/threadpool_test_tmp.dir/DependInfo.cmake --color=\r\nmake[2]: Leaving directory '/media/ceeac/Projects/code/cpp-taskflow/build'\r\nmake -f CMakeFiles/threadpool_test_tmp.dir/build.make CMakeFiles/threadpool_test_tmp.dir/build\r\nmake[2]: Entering directory '/media/ceeac/Projects/code/cpp-taskflow/build'\r\nmake[2]: Nothing to be done for 'CMakeFiles/threadpool_test_tmp.dir/build'.\r\nmake[2]: Leaving directory '/media/ceeac/Projects/code/cpp-taskflow/build'\r\n[  6%] Built target threadpool_test_tmp\r\nmake -f CMakeFiles/executor.dir/build.make CMakeFiles/executor.dir/depend\r\nmake[2]: Entering directory '/media/ceeac/Projects/code/cpp-taskflow/build'\r\ncd /home/ceeac/Projects/code/cpp-taskflow/build && /usr/bin/cmake -E cmake_depends \"Unix Makefiles\" /home/ceeac/Projects/code/cpp-taskflow /home/ceeac/Projects/code/cpp-taskflow /home/ceeac/Projects/code/cpp-taskflow/build /home/ceeac/Projects/code/cpp-taskflow/build /home/ceeac/Projects/code/cpp-taskflow/build/CMakeFiles/executor.dir/DependInfo.cmake --color=\r\nmake[2]: Leaving directory '/media/ceeac/Projects/code/cpp-taskflow/build'\r\nmake -f CMakeFiles/executor.dir/build.make CMakeFiles/executor.dir/build\r\nmake[2]: Entering directory '/media/ceeac/Projects/code/cpp-taskflow/build'\r\n[  9%] Building CXX object CMakeFiles/executor.dir/example/executor.cpp.o\r\n/usr/bin/clang++-7   -I/home/ceeac/Projects/code/cpp-taskflow  -Wall -O2 -g   -std=gnu++17 -o CMakeFiles/executor.dir/example/executor.cpp.o -c /home/ceeac/Projects/code/cpp-taskflow/example/executor.cpp\r\nIn file included from /home/ceeac/Projects/code/cpp-taskflow/example/executor.cpp:6:\r\nIn file included from /home/ceeac/Projects/code/cpp-taskflow/taskflow/taskflow.hpp:3:\r\nIn file included from /home/ceeac/Projects/code/cpp-taskflow/taskflow/threadpool/threadpool.hpp:10:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/functional:61:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/unordered_map:46:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/hashtable.h:37:\r\nIn file included from /usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/node_handle.h:39:\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/optional:575:9: error: call to implicitly-deleted copy constructor of 'std::_Optional_payload<tf::BasicTaskflow<WorkStealingThreadpool>::Closure, true, false, false>'\r\n      : _Optional_payload(__engaged\r\n        ^                 ~~~~~~~~~\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/optional:739:4: note: in instantiation of member function 'std::_Optional_payload<tf::BasicTaskflow<WorkStealingThreadpool>::Closure, true, false, false>::_Optional_payload' requested here\r\n        : _M_payload(__other._M_payload._M_engaged,\r\n          ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/optional:985:11: note: in instantiation of member function 'std::_Optional_base<tf::BasicTaskflow<WorkStealingThreadpool>::Closure, false, false>::_Optional_base' requested here\r\n    class optional\r\n          ^\r\n/home/ceeac/Projects/code/cpp-taskflow/taskflow/threadpool/workstealing_threadpool.hpp:248:10: note: in implicit move constructor for 'std::optional<tf::BasicTaskflow<WorkStealingThreadpool>::Closure>' first required here\r\n  return item;\r\n         ^\r\n/home/ceeac/Projects/code/cpp-taskflow/taskflow/threadpool/workstealing_threadpool.hpp:442:24: note: in instantiation of member function 'tf::WorkStealingQueue<tf::BasicTaskflow<WorkStealingThreadpool>::Closure>::pop' requested here\r\n        if(t = w.queue.pop(); !t) {\r\n                       ^\r\n/home/ceeac/Projects/code/cpp-taskflow/taskflow/threadpool/workstealing_threadpool.hpp:375:3: note: in instantiation of member function 'tf::WorkStealingThreadpool<tf::BasicTaskflow<WorkStealingThreadpool>::Closure>::_spawn' requested here\r\n  _spawn(N);\r\n  ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/ext/new_allocator.h:136:23: note: (skipping 10 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)\r\n        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\r\n                             ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/alloc_traits.h:475:8: note: in instantiation of function template specialization '__gnu_cxx::new_allocator<std::_List_node<tf::BasicTaskflow<WorkStealingThreadpool> > >::construct<tf::BasicTaskflow<WorkStealingThreadpool>, const unsigned long &>' requested here\r\n        { __a.construct(__p, std::forward<_Args>(__args)...); }\r\n              ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_list.h:644:24: note: in instantiation of function template specialization 'std::allocator_traits<std::allocator<std::_List_node<tf::BasicTaskflow<WorkStealingThreadpool> > > >::construct<tf::BasicTaskflow<WorkStealingThreadpool>, const unsigned long &>' requested here\r\n          _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),\r\n                              ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_list.h:1902:18: note: in instantiation of function template specialization 'std::__cxx11::list<tf::BasicTaskflow<WorkStealingThreadpool>, std::allocator<tf::BasicTaskflow<WorkStealingThreadpool> > >::_M_create_node<const unsigned long &>' requested here\r\n         _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);\r\n                        ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_list.h:1234:10: note: in instantiation of function template specialization 'std::__cxx11::list<tf::BasicTaskflow<WorkStealingThreadpool>, std::allocator<tf::BasicTaskflow<WorkStealingThreadpool> > >::_M_insert<const unsigned long &>' requested here\r\n          this->_M_insert(end(), std::forward<_Args>(__args)...);\r\n                ^\r\n/home/ceeac/Projects/code/cpp-taskflow/example/executor.cpp:76:20: note: in instantiation of function template specialization 'std::__cxx11::list<tf::BasicTaskflow<WorkStealingThreadpool>, std::allocator<tf::BasicTaskflow<WorkStealingThreadpool> > >::emplace_back<const unsigned long &>' requested here\r\n    auto& tf = tfs.emplace_back(MAX_THREAD);\r\n                   ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/optional:581:7: note: explicitly defaulted function was implicitly deleted here\r\n      _Optional_payload(const _Optional_payload&) = default;\r\n      ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/optional:622:24: note: copy constructor of '_Optional_payload<tf::BasicTaskflow<WorkStealingThreadpool>::Closure, true, false, false>' is implicitly deleted because variant field '_M_payload' has a non-trivial copy constructor\r\n          _Stored_type _M_payload;\r\n                       ^\r\n1 error generated.\r\nmake[2]: *** [CMakeFiles/executor.dir/build.make:66: CMakeFiles/executor.dir/example/executor.cpp.o] Error 1\r\nmake[2]: Leaving directory '/media/ceeac/Projects/code/cpp-taskflow/build'\r\nmake[1]: *** [CMakeFiles/Makefile2:113: CMakeFiles/executor.dir/all] Error 2\r\nmake[1]: Leaving directory '/media/ceeac/Projects/code/cpp-taskflow/build'\r\nmake: *** [Makefile:144: all] Error 2\r\n```\r\n**Desktop (please complete the following information):**\r\n - OS: Ubuntu 18.10\r\n\r\n**Additional context**\r\n```bash\r\n$ clang --version\r\nclang version 7.0.0-3 (tags/RELEASE_700/final)\r\nTarget: x86_64-pc-linux-gnu\r\nThread model: posix\r\nInstalledDir: /usr/bin\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/55", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/55/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/55/events", "html_url": "https://github.com/taskflow/taskflow/issues/55", "id": 389749477, "node_id": "MDU6SXNzdWUzODk3NDk0Nzc=", "number": 55, "title": "separate declaration and implementation", "user": {"login": "lifeiteng", "id": 3107839, "node_id": "MDQ6VXNlcjMxMDc4Mzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3107839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifeiteng", "html_url": "https://github.com/lifeiteng", "followers_url": "https://api.github.com/users/lifeiteng/followers", "following_url": "https://api.github.com/users/lifeiteng/following{/other_user}", "gists_url": "https://api.github.com/users/lifeiteng/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifeiteng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifeiteng/subscriptions", "organizations_url": "https://api.github.com/users/lifeiteng/orgs", "repos_url": "https://api.github.com/users/lifeiteng/repos", "events_url": "https://api.github.com/users/lifeiteng/events{/privacy}", "received_events_url": "https://api.github.com/users/lifeiteng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-12-11T12:50:37Z", "updated_at": "2018-12-12T08:20:32Z", "closed_at": "2018-12-12T08:20:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nI want to use TaskFlow in a C++ project which depends on TensorFlow. When compiling the Op & Kernel with `c++17`, there is a problem https://github.com/tensorflow/tensorflow/issues/23561\r\n\r\n**Describe the solution you'd like**\r\nseparate declaration and implementation, e.g.\r\n```\r\n# depends\r\ng++ -std=c++17 taskflow/graph taskflow/threadpool ..\r\n\r\n# keep header simple\r\ng++ -std=c++11 taskflow/taskflow.hpp ..\r\n```\r\nIn this way, I can use taskflow/taskflow.hpp with TensorFlow without c++17\r\n\r\n**Describe alternatives you've considered**\r\nseparate declaration and implementation in Ops & Kernels, there is a lot of work to do.\r\n\r\n**Additional context**\r\nCan you give some suggestions for doing this (separate declaration and implementation).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/53", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/53/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/53/events", "html_url": "https://github.com/taskflow/taskflow/issues/53", "id": 386485490, "node_id": "MDU6SXNzdWUzODY0ODU0OTA=", "number": 53, "title": "Create a Vcpkg package ", "user": {"login": "bangusi", "id": 2768844, "node_id": "MDQ6VXNlcjI3Njg4NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2768844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bangusi", "html_url": "https://github.com/bangusi", "followers_url": "https://api.github.com/users/bangusi/followers", "following_url": "https://api.github.com/users/bangusi/following{/other_user}", "gists_url": "https://api.github.com/users/bangusi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bangusi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bangusi/subscriptions", "organizations_url": "https://api.github.com/users/bangusi/orgs", "repos_url": "https://api.github.com/users/bangusi/repos", "events_url": "https://api.github.com/users/bangusi/events{/privacy}", "received_events_url": "https://api.github.com/users/bangusi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-01T18:47:57Z", "updated_at": "2018-12-05T10:47:58Z", "closed_at": "2018-12-05T10:47:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "On Windows at least, having the library as a [vcpkg](https://github.com/Microsoft/vcpkg) is incredibly convenient", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/50", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/50/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/50/events", "html_url": "https://github.com/taskflow/taskflow/issues/50", "id": 383738621, "node_id": "MDU6SXNzdWUzODM3Mzg2MjE=", "number": 50, "title": "Release request", "user": {"login": "victorusu", "id": 15230430, "node_id": "MDQ6VXNlcjE1MjMwNDMw", "avatar_url": "https://avatars0.githubusercontent.com/u/15230430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/victorusu", "html_url": "https://github.com/victorusu", "followers_url": "https://api.github.com/users/victorusu/followers", "following_url": "https://api.github.com/users/victorusu/following{/other_user}", "gists_url": "https://api.github.com/users/victorusu/gists{/gist_id}", "starred_url": "https://api.github.com/users/victorusu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/victorusu/subscriptions", "organizations_url": "https://api.github.com/users/victorusu/orgs", "repos_url": "https://api.github.com/users/victorusu/repos", "events_url": "https://api.github.com/users/victorusu/events{/privacy}", "received_events_url": "https://api.github.com/users/victorusu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-23T08:38:51Z", "updated_at": "2018-11-27T21:57:16Z", "closed_at": "2018-11-27T21:57:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, have you considered to have releases? \r\n\r\nIf so, when do you plan to have the first one?\r\nIf not, can you make release?\r\n\r\n\r\nThanks.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/49", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/49/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/49/events", "html_url": "https://github.com/taskflow/taskflow/issues/49", "id": 382540004, "node_id": "MDU6SXNzdWUzODI1NDAwMDQ=", "number": 49, "title": "Taskflow reuse", "user": {"login": "BenjaminNavarro", "id": 14923636, "node_id": "MDQ6VXNlcjE0OTIzNjM2", "avatar_url": "https://avatars2.githubusercontent.com/u/14923636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenjaminNavarro", "html_url": "https://github.com/BenjaminNavarro", "followers_url": "https://api.github.com/users/BenjaminNavarro/followers", "following_url": "https://api.github.com/users/BenjaminNavarro/following{/other_user}", "gists_url": "https://api.github.com/users/BenjaminNavarro/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenjaminNavarro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenjaminNavarro/subscriptions", "organizations_url": "https://api.github.com/users/BenjaminNavarro/orgs", "repos_url": "https://api.github.com/users/BenjaminNavarro/repos", "events_url": "https://api.github.com/users/BenjaminNavarro/events{/privacy}", "received_events_url": "https://api.github.com/users/BenjaminNavarro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "clin99", "id": 34017491, "node_id": "MDQ6VXNlcjM0MDE3NDkx", "avatar_url": "https://avatars3.githubusercontent.com/u/34017491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clin99", "html_url": "https://github.com/clin99", "followers_url": "https://api.github.com/users/clin99/followers", "following_url": "https://api.github.com/users/clin99/following{/other_user}", "gists_url": "https://api.github.com/users/clin99/gists{/gist_id}", "starred_url": "https://api.github.com/users/clin99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clin99/subscriptions", "organizations_url": "https://api.github.com/users/clin99/orgs", "repos_url": "https://api.github.com/users/clin99/repos", "events_url": "https://api.github.com/users/clin99/events{/privacy}", "received_events_url": "https://api.github.com/users/clin99/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "clin99", "id": 34017491, "node_id": "MDQ6VXNlcjM0MDE3NDkx", "avatar_url": "https://avatars3.githubusercontent.com/u/34017491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clin99", "html_url": "https://github.com/clin99", "followers_url": "https://api.github.com/users/clin99/followers", "following_url": "https://api.github.com/users/clin99/following{/other_user}", "gists_url": "https://api.github.com/users/clin99/gists{/gist_id}", "starred_url": "https://api.github.com/users/clin99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clin99/subscriptions", "organizations_url": "https://api.github.com/users/clin99/orgs", "repos_url": "https://api.github.com/users/clin99/repos", "events_url": "https://api.github.com/users/clin99/events{/privacy}", "received_events_url": "https://api.github.com/users/clin99/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 20, "created_at": "2018-11-20T07:51:38Z", "updated_at": "2019-04-30T18:18:01Z", "closed_at": "2019-04-30T18:18:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I came across cpp-taskflow recently and I find it very interesting and well designed. However, from my point of view, it would be great to have the possibility to reuse a Taskflow graph after its completion.\r\n\r\nTo give a bit of background, I work on robot control and we always have a bunch of stuff to compute in a real time loop (up to 1kHz/1ms) in order to send the robot(s) a new command. Taskflow would fit perfectly to describe and perform all the computations but having to reconstruct the graph at each iteration is not very elegant and may also bring some latencies due to the dynamic memory allocations that happen behind the scene.\r\n\r\nIs it something that could be implemented in cpp-taskflow?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/47", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/47/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/47/events", "html_url": "https://github.com/taskflow/taskflow/issues/47", "id": 374685827, "node_id": "MDU6SXNzdWUzNzQ2ODU4Mjc=", "number": 47, "title": "Register callback function to run when task is completed", "user": {"login": "markg85", "id": 49061, "node_id": "MDQ6VXNlcjQ5MDYx", "avatar_url": "https://avatars0.githubusercontent.com/u/49061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markg85", "html_url": "https://github.com/markg85", "followers_url": "https://api.github.com/users/markg85/followers", "following_url": "https://api.github.com/users/markg85/following{/other_user}", "gists_url": "https://api.github.com/users/markg85/gists{/gist_id}", "starred_url": "https://api.github.com/users/markg85/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markg85/subscriptions", "organizations_url": "https://api.github.com/users/markg85/orgs", "repos_url": "https://api.github.com/users/markg85/repos", "events_url": "https://api.github.com/users/markg85/events{/privacy}", "received_events_url": "https://api.github.com/users/markg85/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2018-10-27T20:30:17Z", "updated_at": "2018-11-19T09:02:06Z", "closed_at": "2018-11-19T09:02:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nC++ has a bit of a weird API when it comes to `std::future` and monitoring progress. It is \"doable\" but certainly not trivial and requires quite a bit of hackery. What i once did is starting the tasks from within a sub thread and let that thread block on the tasks, like your `wait_for_all()` function. Then, once those tasks were done the block lifted and the next line would be called to in effect notify some other class that the task is done.\r\n\r\nI'm hoping for an api function like that in taskflow.\r\nYou now have the functions: `dispatch/silent_dispatch/wait_for_topologies/wait_for_all`\r\nI would like to request a new addition to those, lets call it `dispatch_callback` which would be non blocking and takes one callable as argument. That callable would be called once all tasks are done processing.\r\n\r\nThe implementation could be what i described above as hackery :) But i'm guessing you have much neater options at your disposal as you're already managing the threadpool behind it.\r\n\r\nFor me, it would make this project really useful! Even though i'm merely using it as a threadpool, it simply becomes very easy and convenient to use and implement multithreading in something :)\r\n\r\nCheers,\r\nMark", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/45", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/45/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/45/events", "html_url": "https://github.com/taskflow/taskflow/issues/45", "id": 371791163, "node_id": "MDU6SXNzdWUzNzE3OTExNjM=", "number": 45, "title": "Disposal of completed tasks and destruction of task trees.", "user": {"login": "ForgeMistress", "id": 469613, "node_id": "MDQ6VXNlcjQ2OTYxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/469613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ForgeMistress", "html_url": "https://github.com/ForgeMistress", "followers_url": "https://api.github.com/users/ForgeMistress/followers", "following_url": "https://api.github.com/users/ForgeMistress/following{/other_user}", "gists_url": "https://api.github.com/users/ForgeMistress/gists{/gist_id}", "starred_url": "https://api.github.com/users/ForgeMistress/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ForgeMistress/subscriptions", "organizations_url": "https://api.github.com/users/ForgeMistress/orgs", "repos_url": "https://api.github.com/users/ForgeMistress/repos", "events_url": "https://api.github.com/users/ForgeMistress/events{/privacy}", "received_events_url": "https://api.github.com/users/ForgeMistress/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-10-19T03:16:22Z", "updated_at": "2019-02-15T05:19:52Z", "closed_at": "2019-02-15T05:19:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been trying to figure out where I am able to remove tasks from the graph or how the lifetimes of the tasks are managed, but this library doesn't seem to make it obvious where that is. The reason for this is that I want to be able to build temporary graphs for asynchronous resource loading that I can then discard once they've been processed. The graph would be perfect since I can use the graph to ensure resources that have dependencies are loaded in the correct order. However, once the resources are loaded, it is safe for the graph to be cleaned up to keep memory usage low.\r\n\r\nAre there any examples that you could provide that display this type of behavior? It seems like the only way for me to do this would be to discard the Taskflow object entirely and construct a new one, however that seems a little bit excessive since I feel like there should be a way to selectively remove branches of tasks from the graph.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/42", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/42/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/42/events", "html_url": "https://github.com/taskflow/taskflow/issues/42", "id": 359610230, "node_id": "MDU6SXNzdWUzNTk2MTAyMzA=", "number": 42, "title": "[ProactiveThreadpool Bug] shutdown hangs", "user": {"login": "tsung-wei-huang", "id": 13237509, "node_id": "MDQ6VXNlcjEzMjM3NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/13237509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsung-wei-huang", "html_url": "https://github.com/tsung-wei-huang", "followers_url": "https://api.github.com/users/tsung-wei-huang/followers", "following_url": "https://api.github.com/users/tsung-wei-huang/following{/other_user}", "gists_url": "https://api.github.com/users/tsung-wei-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsung-wei-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsung-wei-huang/subscriptions", "organizations_url": "https://api.github.com/users/tsung-wei-huang/orgs", "repos_url": "https://api.github.com/users/tsung-wei-huang/repos", "events_url": "https://api.github.com/users/tsung-wei-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/tsung-wei-huang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 906067016, "node_id": "MDU6TGFiZWw5MDYwNjcwMTY=", "url": "https://api.github.com/repos/taskflow/taskflow/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "guannan-git", "id": 37226218, "node_id": "MDQ6VXNlcjM3MjI2MjE4", "avatar_url": "https://avatars2.githubusercontent.com/u/37226218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guannan-git", "html_url": "https://github.com/guannan-git", "followers_url": "https://api.github.com/users/guannan-git/followers", "following_url": "https://api.github.com/users/guannan-git/following{/other_user}", "gists_url": "https://api.github.com/users/guannan-git/gists{/gist_id}", "starred_url": "https://api.github.com/users/guannan-git/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guannan-git/subscriptions", "organizations_url": "https://api.github.com/users/guannan-git/orgs", "repos_url": "https://api.github.com/users/guannan-git/repos", "events_url": "https://api.github.com/users/guannan-git/events{/privacy}", "received_events_url": "https://api.github.com/users/guannan-git/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "guannan-git", "id": 37226218, "node_id": "MDQ6VXNlcjM3MjI2MjE4", "avatar_url": "https://avatars2.githubusercontent.com/u/37226218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guannan-git", "html_url": "https://github.com/guannan-git", "followers_url": "https://api.github.com/users/guannan-git/followers", "following_url": "https://api.github.com/users/guannan-git/following{/other_user}", "gists_url": "https://api.github.com/users/guannan-git/gists{/gist_id}", "starred_url": "https://api.github.com/users/guannan-git/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guannan-git/subscriptions", "organizations_url": "https://api.github.com/users/guannan-git/orgs", "repos_url": "https://api.github.com/users/guannan-git/repos", "events_url": "https://api.github.com/users/guannan-git/events{/privacy}", "received_events_url": "https://api.github.com/users/guannan-git/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-09-12T18:58:54Z", "updated_at": "2018-09-12T20:54:24Z", "closed_at": "2018-09-12T20:54:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The proactive thread pool hangs during dynamic tasking - task adds another tasks to the threadpool. For example, the following code can cause proactive threadpool to hang when calling shutdown:\r\n\r\n```cpp\r\nstd::function<void(int)> insert;\r\ninsert = [&threadpool, &insert, &sum] (int i) {\r\n  if(i > 0) {\r\n    threadpool.silent_async([i=i-1, &insert] () {\r\n      insert(i);\r\n    }); \r\n  }   \r\n  else {\r\n    if(auto s = ++sum; s == num_threads) {\r\n      promise.set_value();\r\n    }   \r\n  }   \r\n};\r\n\r\n// emplace dynamic tasks\r\nfor(size_t i=0; i<num_threads; i++){\r\n  insert(num_tasks / num_threads);\r\n}\r\n  \r\n// this will hang\r\nthreadpool.shutdown();\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/39", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/39/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/39/events", "html_url": "https://github.com/taskflow/taskflow/issues/39", "id": 356590743, "node_id": "MDU6SXNzdWUzNTY1OTA3NDM=", "number": 39, "title": "Sharing threadpool between taskflows", "user": {"login": "vkhomenko", "id": 1189283, "node_id": "MDQ6VXNlcjExODkyODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1189283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vkhomenko", "html_url": "https://github.com/vkhomenko", "followers_url": "https://api.github.com/users/vkhomenko/followers", "following_url": "https://api.github.com/users/vkhomenko/following{/other_user}", "gists_url": "https://api.github.com/users/vkhomenko/gists{/gist_id}", "starred_url": "https://api.github.com/users/vkhomenko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vkhomenko/subscriptions", "organizations_url": "https://api.github.com/users/vkhomenko/orgs", "repos_url": "https://api.github.com/users/vkhomenko/repos", "events_url": "https://api.github.com/users/vkhomenko/events{/privacy}", "received_events_url": "https://api.github.com/users/vkhomenko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-09-03T19:58:21Z", "updated_at": "2018-11-19T04:31:01Z", "closed_at": "2018-11-19T04:31:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to create several independent taskflows which share the same threadpool? The rational is that I would like to set the total number of threads to correspond to the number of h/w threads, but it's tricky with several taskflows.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/36", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/36/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/36/events", "html_url": "https://github.com/taskflow/taskflow/issues/36", "id": 355634278, "node_id": "MDU6SXNzdWUzNTU2MzQyNzg=", "number": 36, "title": "Can this be used to run a \"single\" task a thousand times? (each time with different arguments)", "user": {"login": "markg85", "id": 49061, "node_id": "MDQ6VXNlcjQ5MDYx", "avatar_url": "https://avatars0.githubusercontent.com/u/49061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markg85", "html_url": "https://github.com/markg85", "followers_url": "https://api.github.com/users/markg85/followers", "following_url": "https://api.github.com/users/markg85/following{/other_user}", "gists_url": "https://api.github.com/users/markg85/gists{/gist_id}", "starred_url": "https://api.github.com/users/markg85/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markg85/subscriptions", "organizations_url": "https://api.github.com/users/markg85/orgs", "repos_url": "https://api.github.com/users/markg85/repos", "events_url": "https://api.github.com/users/markg85/events{/privacy}", "received_events_url": "https://api.github.com/users/markg85/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-08-30T15:20:02Z", "updated_at": "2018-08-31T15:18:47Z", "closed_at": "2018-08-31T15:18:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have a fairly simple task: make thumbnails of a thousand large images.\r\nRight now i'm using a thread pool which works great! I basically have one function that accepts two input arguments (the source of the large image and the destination of the thumbnail), that is then added to a queue which is then emptied by the threadpool.\r\n\r\nBut how would you do such a thing in this tasks library? Is it even intended to be used like that, and if so, how?\r\nAn example would be really great :)\r\n\r\nI've been looking at the parallel_for example but i don't quite see how i would apply that to my case yet.\r\n\r\n\r\nCheers,\r\nMark", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/34", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/34/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/34/events", "html_url": "https://github.com/taskflow/taskflow/issues/34", "id": 354489140, "node_id": "MDU6SXNzdWUzNTQ0ODkxNDA=", "number": 34, "title": "Add object/memory pool for task nodes", "user": {"login": "tsung-wei-huang", "id": 13237509, "node_id": "MDQ6VXNlcjEzMjM3NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/13237509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsung-wei-huang", "html_url": "https://github.com/tsung-wei-huang", "followers_url": "https://api.github.com/users/tsung-wei-huang/followers", "following_url": "https://api.github.com/users/tsung-wei-huang/following{/other_user}", "gists_url": "https://api.github.com/users/tsung-wei-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsung-wei-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsung-wei-huang/subscriptions", "organizations_url": "https://api.github.com/users/tsung-wei-huang/orgs", "repos_url": "https://api.github.com/users/tsung-wei-huang/repos", "events_url": "https://api.github.com/users/tsung-wei-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/tsung-wei-huang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-08-27T21:41:46Z", "updated_at": "2019-02-15T04:57:54Z", "closed_at": "2019-02-15T04:57:54Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We are planning to add `object pool` or `memory pool` for task nodes to boost the performance. In large applications, frequently creating task nodes can introduce overhead due to the dynamic memory allocation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/31", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/31/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/31/events", "html_url": "https://github.com/taskflow/taskflow/issues/31", "id": 349724718, "node_id": "MDU6SXNzdWUzNDk3MjQ3MTg=", "number": 31, "title": "Dynamically Scheduled parallel_for (questions)", "user": {"login": "vblanco20-1", "id": 1417000, "node_id": "MDQ6VXNlcjE0MTcwMDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1417000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vblanco20-1", "html_url": "https://github.com/vblanco20-1", "followers_url": "https://api.github.com/users/vblanco20-1/followers", "following_url": "https://api.github.com/users/vblanco20-1/following{/other_user}", "gists_url": "https://api.github.com/users/vblanco20-1/gists{/gist_id}", "starred_url": "https://api.github.com/users/vblanco20-1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vblanco20-1/subscriptions", "organizations_url": "https://api.github.com/users/vblanco20-1/orgs", "repos_url": "https://api.github.com/users/vblanco20-1/repos", "events_url": "https://api.github.com/users/vblanco20-1/events{/privacy}", "received_events_url": "https://api.github.com/users/vblanco20-1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-08-11T10:38:08Z", "updated_at": "2018-08-29T03:25:03Z", "closed_at": "2018-08-29T03:25:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello.\r\nAt the moment, im moving one of my game experiments to taskflow (a spaceship battle simulation with 150.000 game objects moving around). [details](http://victor.madtriangles.com/code%20experiment/2018/06/11/post-ecs-battle-huge.html)  \r\n\r\nFor this, ive implemented taskflow to schedule my whole game loop, having each of the game simulation steps be a task. This has worked quite well, and it runs fine, but this is not at full speed yet. Just running multiple systems at once increases parallelism but not enough.\r\n\r\n\r\nIn the original implementation, i was using std::for_each constantly (the c++17 std parallel for algorithm version), and it was netting me a 6-7 times scalability on a ryzen with 8 cores and 16 threads. I tested running std::for_each inside tasks and it actually runs and scales, but i dont think thats good as i would like to leave taskflow to schedule everything instead.\r\n\r\nOn the engine, i have a \"schedule\" step that builds the task graph for the whole engine, and then i execute it by making the main thread wait until everything is finished. \r\n\r\nThis means there is a delay beetween the task creation and the task execution, and this causes considerable issues with the parallel for. The parallel for creates a few tasks but there is no dynamic version. On the engine, i have a task that \"prepares\" the game objects that will run for a system (for example, the renderables), and then have a parallel for that goes over all that list of renderables and calculates culling. Next, a different system has a different task that just iterates over the visible renderables and draws them to the screen. Sadly there is no way to create tasks within tasks, wich would solve this instantly.\r\n\r\n```cpp\r\n//pseudocode mockup\r\n//-- somewhere , basically  globals (non owning, temporal) so they can be shared from place to place\r\nvector<RenderObject*> *renderables;// pointer to a renderables vector, can be any size from 10 to 200.000\r\nCameraData * camdata;//also global\r\n\r\n//There should be no data races by design given the constraints within tasks.\r\n\r\n\r\n//--------------------------------\r\n//over multiple systems and classes but simplified\r\n\r\n//gameplay systems scheduling\r\nauto root_task = task_engine.placeholder();\r\n\r\nauto game_final_task = GameSystems.Schedule(root_task);\r\n\r\n//grabs renderable data and camera data and stores them in the temporal globals to share them across time. \r\nauto prepare_cull_task = task_engine.silent_emplace([&]() {\r\n//copy camera data to the temporal storage.\r\ncamdata = Engine.GetCameraData();\r\n//gather all the renderables and put them in an array, then point that to the global one so it can be used out of scope.\r\nrenderables = Engine.GetRenderables(); \r\n\r\n}\r\n\r\n//performs culling\r\nauto cull_task = task_engine.silent_emplace([&]() {\r\n    //serial, should actually be parallel\r\n    for(auto r : Renderables){\r\n       r->cull(camdata);\r\n    }\r\n}\r\n\r\n//renders the renderable list\r\nauto render_task =  task_engine.silent_emplace([&]() {\r\n   //serial becouse gpu\r\n    for(auto r: Renderables)    {\r\n         if(r->visible)  Engine.DrawRenderable(r);\r\n    }\r\n}\r\n\r\n\r\nprepare_cull_task.gather(game_final_task);\r\ncull_task.gather(prepare_cull_task);\r\nrender_task.gather(cull_task);\r\n\r\n//execute the whole engine iteration\r\ntask_engine.wait_for_all();\r\n\r\n\r\n```\r\n\r\nThe provided parallel_for will not work in a case like this, becouse it needs to have a set size. Even if i create the parallel for task on the schedule step, this will not work becouse the amount of renderables is set by the gameplay systems, wich can create or destroy game objects.  \r\n\r\nFor this, i was going to implement my own dynamically scheduled parallel for, more similar to how std::for_each(parallel) works, but i wanted to ask about the design. \r\n\r\nMy plan is to have a new type of high level task creator that supports this pattern. It would have a lambda for the \"preparation\" step, and then it will create a customizable number of tasks. (for example 4 tasks). Those tasks will execute the work prepared on the preparation step.\r\n\r\nFor example, my culling system has the preparation step of grabbing all the renderables, and they are 100.000. Becouse its that many, the intermediate step (that prepares the parallel for) divides it in batches of 4048 (configurable) and inserts the chunks into a parallel queue (just begin/end ranges). Then the worker tasks just dequeue the work chunks and execute the function inside.\r\n\r\nIs a pattern like that alright? Given  how common the pattern is, i would like to have it be generic and add it to the library. \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/30", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/30/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/30/events", "html_url": "https://github.com/taskflow/taskflow/issues/30", "id": 347623149, "node_id": "MDU6SXNzdWUzNDc2MjMxNDk=", "number": 30, "title": "[API request] wait for all previous topologies to finish", "user": {"login": "tsung-wei-huang", "id": 13237509, "node_id": "MDQ6VXNlcjEzMjM3NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/13237509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsung-wei-huang", "html_url": "https://github.com/tsung-wei-huang", "followers_url": "https://api.github.com/users/tsung-wei-huang/followers", "following_url": "https://api.github.com/users/tsung-wei-huang/following{/other_user}", "gists_url": "https://api.github.com/users/tsung-wei-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsung-wei-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsung-wei-huang/subscriptions", "organizations_url": "https://api.github.com/users/tsung-wei-huang/orgs", "repos_url": "https://api.github.com/users/tsung-wei-huang/repos", "events_url": "https://api.github.com/users/tsung-wei-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/tsung-wei-huang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-04T14:30:00Z", "updated_at": "2018-08-06T14:54:33Z", "closed_at": "2018-08-06T14:54:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Need an API to wait for existing topologies to finish before dispatching the current graph.\r\n\r\n```cpp\r\nwait_for_all_topologieis();\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/29", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/29/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/29/events", "html_url": "https://github.com/taskflow/taskflow/issues/29", "id": 338229158, "node_id": "MDU6SXNzdWUzMzgyMjkxNTg=", "number": 29, "title": "OpenMP Comparison in matrix.cpp is unfair", "user": {"login": "jcownie-intel", "id": 5287103, "node_id": "MDQ6VXNlcjUyODcxMDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5287103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcownie-intel", "html_url": "https://github.com/jcownie-intel", "followers_url": "https://api.github.com/users/jcownie-intel/followers", "following_url": "https://api.github.com/users/jcownie-intel/following{/other_user}", "gists_url": "https://api.github.com/users/jcownie-intel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcownie-intel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcownie-intel/subscriptions", "organizations_url": "https://api.github.com/users/jcownie-intel/orgs", "repos_url": "https://api.github.com/users/jcownie-intel/repos", "events_url": "https://api.github.com/users/jcownie-intel/events{/privacy}", "received_events_url": "https://api.github.com/users/jcownie-intel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-04T10:57:13Z", "updated_at": "2018-10-18T08:16:57Z", "closed_at": "2018-10-17T19:53:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nThe OpenMP code in example/matrix.cpp is exceptionally naive. You know that the matrices are of different sizes and will therefore take different times to multiply, yet you are using the default (i.e. static in all compilers of which I am aware) loop schedule. To be fair you should at least use `schedule(dynamic)` on all of the parallel for statements. You could also experiment with `schedule(nonmonotonic:dynamic)` if you have a modern compiler. \r\n\r\nYou could also reduce the number of fork/join operations by using code more like this\r\n```C++\r\nvoid openmp(const std::vector<size_t>& D) {\r\n\r\n  std::cout << \"========== OpenMP ==========\\n\";\r\n\r\n  auto tbeg = std::chrono::steady_clock::now();\r\n\r\n  std::vector<matrix_t> As(D.size());\r\n  std::vector<matrix_t> Bs(D.size());\r\n  std::vector<matrix_t> Cs(D.size());\r\n\r\n  std::cout << \"Generating matrix As ...\\n\";\r\n\r\n  #pragma omp parallel\r\n  {\r\n    #pragma omp for schedule(dynamic)\r\n    for(int j=0; j<(int)D.size(); ++j) {\r\n      As[j] = random_matrix(D[j]);\r\n    }\r\n\r\n    #pragma omp single\r\n      std::cout << \"Generating matrix Bs ...\\n\";\r\n\r\n    #pragma omp for schedule(dynamic)\r\n    for(int j=0; j<(int)D.size(); ++j) {\r\n      Bs[j] = random_matrix(D[j]);\r\n    }\r\n\r\n    #pragma omp single\r\n      std::cout << \"Computing matrix product values Cs ...\\n\";\r\n\r\n    #pragma omp for schedule(dynamic), nowait\r\n    for(int j=0; j<(int)D.size(); ++j) {\r\n      Cs[j] = As[j] * Bs[j];\r\n    }\r\n  }\r\n\r\n  auto tend = std::chrono::steady_clock::now();\r\n\r\n  std::cout << \"OpenMP takes \"\r\n            << std::chrono::duration_cast<std::chrono::milliseconds>(tend-tbeg).count()\r\n            << \" ms\\n\";\r\n}\r\n```\r\nOr you could experiment with omp taskloop :-)\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Read the code\r\n2. Be amazed at its naivety\r\n\r\n**Expected behavior**\r\nBe fair in your comparisons.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/28", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/28/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/28/events", "html_url": "https://github.com/taskflow/taskflow/issues/28", "id": 335191318, "node_id": "MDU6SXNzdWUzMzUxOTEzMTg=", "number": 28, "title": "Support for common reduce operations", "user": {"login": "tsung-wei-huang", "id": 13237509, "node_id": "MDQ6VXNlcjEzMjM3NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/13237509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsung-wei-huang", "html_url": "https://github.com/tsung-wei-huang", "followers_url": "https://api.github.com/users/tsung-wei-huang/followers", "following_url": "https://api.github.com/users/tsung-wei-huang/following{/other_user}", "gists_url": "https://api.github.com/users/tsung-wei-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsung-wei-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsung-wei-huang/subscriptions", "organizations_url": "https://api.github.com/users/tsung-wei-huang/orgs", "repos_url": "https://api.github.com/users/tsung-wei-huang/repos", "events_url": "https://api.github.com/users/tsung-wei-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/tsung-wei-huang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-24T16:11:17Z", "updated_at": "2018-07-02T02:58:38Z", "closed_at": "2018-07-02T02:58:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We are adding the following method to taskflow to support common reduce operations:\r\n\r\n```cpp\r\nreduce_min\r\nreduce_max\r\nreduce_sum\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/27", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/27/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/27/events", "html_url": "https://github.com/taskflow/taskflow/issues/27", "id": 334743667, "node_id": "MDU6SXNzdWUzMzQ3NDM2Njc=", "number": 27, "title": "Support custom threadpool and executor", "user": {"login": "tsung-wei-huang", "id": 13237509, "node_id": "MDQ6VXNlcjEzMjM3NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/13237509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsung-wei-huang", "html_url": "https://github.com/tsung-wei-huang", "followers_url": "https://api.github.com/users/tsung-wei-huang/followers", "following_url": "https://api.github.com/users/tsung-wei-huang/following{/other_user}", "gists_url": "https://api.github.com/users/tsung-wei-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsung-wei-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsung-wei-huang/subscriptions", "organizations_url": "https://api.github.com/users/tsung-wei-huang/orgs", "repos_url": "https://api.github.com/users/tsung-wei-huang/repos", "events_url": "https://api.github.com/users/tsung-wei-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/tsung-wei-huang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-22T04:46:44Z", "updated_at": "2018-08-29T03:25:39Z", "closed_at": "2018-08-29T03:25:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently the taskflow implements its own threadpool object. We are planning to standardize the interface to allow custom threadpool or executor.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/26", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/26/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/26/events", "html_url": "https://github.com/taskflow/taskflow/issues/26", "id": 334561206, "node_id": "MDU6SXNzdWUzMzQ1NjEyMDY=", "number": 26, "title": "Fix add_test() calls in a CMake script", "user": {"login": "elfring", "id": 660477, "node_id": "MDQ6VXNlcjY2MDQ3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/660477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elfring", "html_url": "https://github.com/elfring", "followers_url": "https://api.github.com/users/elfring/followers", "following_url": "https://api.github.com/users/elfring/following{/other_user}", "gists_url": "https://api.github.com/users/elfring/gists{/gist_id}", "starred_url": "https://api.github.com/users/elfring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elfring/subscriptions", "organizations_url": "https://api.github.com/users/elfring/orgs", "repos_url": "https://api.github.com/users/elfring/repos", "events_url": "https://api.github.com/users/elfring/events{/privacy}", "received_events_url": "https://api.github.com/users/elfring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-21T16:08:54Z", "updated_at": "2018-08-25T16:15:50Z", "closed_at": "2018-08-25T16:05:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "[The prefix \u201c`${PROJECT_SOURCE_DIR}/unittest/`\u201d was specified](https://github.com/cpp-taskflow/cpp-taskflow/blob/8df87745966ceaf0b91e52b6d9ecc15c39c6c404/CMakeLists.txt#L79 \"Update candidate\") for [calls of the CMake command \u201c`add_test`\u201d](https://cmake.org/cmake/help/v3.11/command/add_test.html \"Description for add_test()\").\r\nI suggest to delete it there.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/25", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/25/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/25/events", "html_url": "https://github.com/taskflow/taskflow/issues/25", "id": 333820756, "node_id": "MDU6SXNzdWUzMzM4MjA3NTY=", "number": 25, "title": "Adjust condition checks in implementation of the function \u201cdump\u201d", "user": {"login": "elfring", "id": 660477, "node_id": "MDQ6VXNlcjY2MDQ3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/660477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elfring", "html_url": "https://github.com/elfring", "followers_url": "https://api.github.com/users/elfring/followers", "following_url": "https://api.github.com/users/elfring/following{/other_user}", "gists_url": "https://api.github.com/users/elfring/gists{/gist_id}", "starred_url": "https://api.github.com/users/elfring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elfring/subscriptions", "organizations_url": "https://api.github.com/users/elfring/orgs", "repos_url": "https://api.github.com/users/elfring/repos", "events_url": "https://api.github.com/users/elfring/events{/privacy}", "received_events_url": "https://api.github.com/users/elfring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-06-19T20:10:44Z", "updated_at": "2018-08-25T16:05:07Z", "closed_at": "2018-08-25T16:05:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I suggest to [determine the emptiness of strings in a consistent way](http://en.cppreference.com/w/cpp/string/basic_string/empty \"Description for std::basic_string::empty()\") for a succinct data output.\r\nHow do you think about to integrate [a source code adjustment](https://github.com/cpp-taskflow/cpp-taskflow/blob/b3b0eb270b5fe51666c0043b63bb674e6ca2cde6/taskflow.hpp#L1011 \"Update candidate\") like the following?\r\n\r\n```diff\r\ndiff --git a/taskflow.hpp b/taskflow.hpp\r\nindex d30ea83..ae3ae89 100644\r\n--- a/taskflow.hpp\r\n+++ b/taskflow.hpp\r\n@@ -1017,20 +1017,13 @@ std::string BasicTaskflow<F>::dump() const {\r\n   os << \"digraph Taskflow {\\n\";\r\n   \r\n   for(const auto& node : _nodes) {\r\n-\r\n-    os << \"  \\\"\";\r\n-    if(!node.name().empty()) os << node.name();\r\n-    else os << &node;\r\n-    os << \"\\\";\\n\";\r\n+    os << \"  \\\"\" << (node.name().empty() ? &node : node.name()) << \"\\\";\\n\";\r\n \r\n     for(const auto s : node._successors) {\r\n-      os << \"  \\\"\";\r\n-      if(!node.name().empty()) os << node.name();\r\n-      else os << &node;\r\n-      os << \"\\\" -> \\\"\";\r\n-      if(s->name() != \"\") os << s->name();\r\n-      else os << s;\r\n-      os << \"\\\";\\n\";  \r\n+      os << \"  \\\"\" << (node.name().empty() ? &node : node.name())\r\n+         << \"\\\" -> \\\"\"\r\n+         << (s->name().empty() ? s : s->name())\r\n+         << \"\\\";\\n\";  \r\n     }\r\n   }\r\n \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/24", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/24/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/24/events", "html_url": "https://github.com/taskflow/taskflow/issues/24", "id": 333053969, "node_id": "MDU6SXNzdWUzMzMwNTM5Njk=", "number": 24, "title": "Adjust two constants in implementation of the function \u201cthrow_re\u201d", "user": {"login": "elfring", "id": 660477, "node_id": "MDQ6VXNlcjY2MDQ3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/660477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elfring", "html_url": "https://github.com/elfring", "followers_url": "https://api.github.com/users/elfring/followers", "following_url": "https://api.github.com/users/elfring/following{/other_user}", "gists_url": "https://api.github.com/users/elfring/gists{/gist_id}", "starred_url": "https://api.github.com/users/elfring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elfring/subscriptions", "organizations_url": "https://api.github.com/users/elfring/orgs", "repos_url": "https://api.github.com/users/elfring/repos", "events_url": "https://api.github.com/users/elfring/events{/privacy}", "received_events_url": "https://api.github.com/users/elfring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-17T11:00:25Z", "updated_at": "2018-06-20T15:42:24Z", "closed_at": "2018-06-20T15:42:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I suggest to use constant characters instead of [passing string literals](http://en.cppreference.com/w/cpp/language/string_literal \"Description for string literals\") which contain only single characters.\r\nWould you like to integrate [a source code adjustment](https://github.com/cpp-taskflow/cpp-taskflow/blob/8df87745966ceaf0b91e52b6d9ecc15c39c6c404/taskflow.hpp#L45 \"Update candidate\") like the following?\r\n\r\n```diff\r\ndiff --git a/taskflow.hpp b/taskflow.hpp\r\nindex fd8e7f5..d30ea83 100644\r\n--- a/taskflow.hpp\r\n+++ b/taskflow.hpp\r\n@@ -45,7 +45,7 @@ namespace tf {\r\n template <typename... ArgsT>\r\n inline void throw_re(const char* fname, const size_t line, ArgsT&&... args) {\r\n   std::ostringstream oss;\r\n-  oss << \"[\" << fname << \":\" << line << \"] \";\r\n+  oss << '[' << fname << ':' << line << \"] \";\r\n   (oss << ... << std::forward<ArgsT>(args));\r\n   throw std::runtime_error(oss.str());\r\n }\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/23", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/23/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/23/events", "html_url": "https://github.com/taskflow/taskflow/issues/23", "id": 333013287, "node_id": "MDU6SXNzdWUzMzMwMTMyODc=", "number": 23, "title": "Question about taskflow example in readme", "user": {"login": "vtronko", "id": 8950786, "node_id": "MDQ6VXNlcjg5NTA3ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/8950786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vtronko", "html_url": "https://github.com/vtronko", "followers_url": "https://api.github.com/users/vtronko/followers", "following_url": "https://api.github.com/users/vtronko/following{/other_user}", "gists_url": "https://api.github.com/users/vtronko/gists{/gist_id}", "starred_url": "https://api.github.com/users/vtronko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vtronko/subscriptions", "organizations_url": "https://api.github.com/users/vtronko/orgs", "repos_url": "https://api.github.com/users/vtronko/repos", "events_url": "https://api.github.com/users/vtronko/events{/privacy}", "received_events_url": "https://api.github.com/users/vtronko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-16T20:33:45Z", "updated_at": "2018-06-17T19:24:43Z", "closed_at": "2018-06-17T19:24:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I found this quite confusing at first, there's this graph you use as an example of comprehensive taskflow.\r\n![image](https://user-images.githubusercontent.com/8950786/41502204-52cd7cf4-71bd-11e8-8e0d-313f75fde2c8.png)\r\nI might be nitpicking, but isn't S-a1 edge quite redundant here? You can't proceed to a1 without a0 being complete, and that one requires S being finished anyway. \r\nCorrect me if I am wrong here. Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/21", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/21/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/21/events", "html_url": "https://github.com/taskflow/taskflow/issues/21", "id": 332973806, "node_id": "MDU6SXNzdWUzMzI5NzM4MDY=", "number": 21, "title": "Visual Studio/Windows support", "user": {"login": "vblanco20-1", "id": 1417000, "node_id": "MDQ6VXNlcjE0MTcwMDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1417000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vblanco20-1", "html_url": "https://github.com/vblanco20-1", "followers_url": "https://api.github.com/users/vblanco20-1/followers", "following_url": "https://api.github.com/users/vblanco20-1/following{/other_user}", "gists_url": "https://api.github.com/users/vblanco20-1/gists{/gist_id}", "starred_url": "https://api.github.com/users/vblanco20-1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vblanco20-1/subscriptions", "organizations_url": "https://api.github.com/users/vblanco20-1/orgs", "repos_url": "https://api.github.com/users/vblanco20-1/repos", "events_url": "https://api.github.com/users/vblanco20-1/events{/privacy}", "received_events_url": "https://api.github.com/users/vblanco20-1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 906067023, "node_id": "MDU6TGFiZWw5MDYwNjcwMjM=", "url": "https://api.github.com/repos/taskflow/taskflow/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-06-16T09:07:09Z", "updated_at": "2018-08-29T03:24:34Z", "closed_at": "2018-08-29T03:24:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello. I went to try this library on windows, but ive had some issues with visual studio 2017 latest update. \r\n\r\nWith a quick source code edit, i was able to have the matrix example running well, but thats a hack.\r\nWhen compiled on visual studio, the library throws a huge amount of warnings.  They are mostly about type casting and data padding.\r\n\r\n![image](https://user-images.githubusercontent.com/1417000/41497405-07fce682-7155-11e8-99e4-094e0a3b8070.png)\r\n\r\nThe library fails to compile due to Threadpool::async<>, wich somehow fails the second if constexpr\r\n(Line 279 of taskflow.hpp). The branch is ignored and it tries to call .set_value(c) when the std::promise is of void type. By commenting that out, the library compiles and i can run the matrix demo with full parallism. The issue is that doing that is a huge hack. \r\n\r\nAnother common error, specifically in the matrix example, is that openmp refuses to compile with the loop variable as a size_t. It requests a \"signed\" integer and size_t is unsigned.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/19", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/19/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/19/events", "html_url": "https://github.com/taskflow/taskflow/issues/19", "id": 332912673, "node_id": "MDU6SXNzdWUzMzI5MTI2NzM=", "number": 19, "title": "Reconsider influence of value objects on interfaces", "user": {"login": "elfring", "id": 660477, "node_id": "MDQ6VXNlcjY2MDQ3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/660477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elfring", "html_url": "https://github.com/elfring", "followers_url": "https://api.github.com/users/elfring/followers", "following_url": "https://api.github.com/users/elfring/following{/other_user}", "gists_url": "https://api.github.com/users/elfring/gists{/gist_id}", "starred_url": "https://api.github.com/users/elfring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elfring/subscriptions", "organizations_url": "https://api.github.com/users/elfring/orgs", "repos_url": "https://api.github.com/users/elfring/repos", "events_url": "https://api.github.com/users/elfring/events{/privacy}", "received_events_url": "https://api.github.com/users/elfring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-15T21:00:39Z", "updated_at": "2018-08-25T16:08:28Z", "closed_at": "2018-08-25T16:05:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "This class library was designed in the way that specific member functions work with references.\r\nA design pattern suggests to omit them because [value objects](https://en.wikipedia.org/wiki/Value_object \"Description for the usage of value objects\") like [strings](https://github.com/cpp-taskflow/cpp-taskflow/blob/9cf75aeec0fefa98e597b53169a615acec9e921e/taskflow.hpp#L318 \"BasicTaskflow\") can be occasionally handled also in a more efficient way by an other programming interface style.\r\nWould you like to support the configuration for this implementation detail?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/18", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/18/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/18/events", "html_url": "https://github.com/taskflow/taskflow/issues/18", "id": 332901887, "node_id": "MDU6SXNzdWUzMzI5MDE4ODc=", "number": 18, "title": "Support for \u201cnameless\u201d tasks?", "user": {"login": "elfring", "id": 660477, "node_id": "MDQ6VXNlcjY2MDQ3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/660477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elfring", "html_url": "https://github.com/elfring", "followers_url": "https://api.github.com/users/elfring/followers", "following_url": "https://api.github.com/users/elfring/following{/other_user}", "gists_url": "https://api.github.com/users/elfring/gists{/gist_id}", "starred_url": "https://api.github.com/users/elfring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elfring/subscriptions", "organizations_url": "https://api.github.com/users/elfring/orgs", "repos_url": "https://api.github.com/users/elfring/repos", "events_url": "https://api.github.com/users/elfring/events{/privacy}", "received_events_url": "https://api.github.com/users/elfring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-15T20:17:43Z", "updated_at": "2018-08-25T16:05:07Z", "closed_at": "2018-08-25T16:05:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "It might be expected that [tasks can get a name](https://github.com/cpp-taskflow/cpp-taskflow/blob/3a523e8d71209a18e0cf969c73d5f155cc442282/README.md#task-api \"Naming tasks\") for this software.\r\n* How do you think about to [identify tasks by any other means than the data type \u201c`std::string`\u201d](https://github.com/cpp-taskflow/cpp-taskflow/blob/9cf75aeec0fefa98e597b53169a615acec9e921e/taskflow.hpp#L318 \"Storage for task names\")?\r\n* Can this class attribute be occasionally omitted generally?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/16", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/16/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/16/events", "html_url": "https://github.com/taskflow/taskflow/issues/16", "id": 332872343, "node_id": "MDU6SXNzdWUzMzI4NzIzNDM=", "number": 16, "title": "reserved identifier violation", "user": {"login": "elfring", "id": 660477, "node_id": "MDQ6VXNlcjY2MDQ3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/660477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elfring", "html_url": "https://github.com/elfring", "followers_url": "https://api.github.com/users/elfring/followers", "following_url": "https://api.github.com/users/elfring/following{/other_user}", "gists_url": "https://api.github.com/users/elfring/gists{/gist_id}", "starred_url": "https://api.github.com/users/elfring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elfring/subscriptions", "organizations_url": "https://api.github.com/users/elfring/orgs", "repos_url": "https://api.github.com/users/elfring/repos", "events_url": "https://api.github.com/users/elfring/events{/privacy}", "received_events_url": "https://api.github.com/users/elfring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-15T18:24:16Z", "updated_at": "2018-06-17T08:43:52Z", "closed_at": "2018-06-16T21:59:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to point out that an identifier like \u201c[`__throw__`](https://github.com/cpp-taskflow/cpp-taskflow/blob/9cf75aeec0fefa98e597b53169a615acec9e921e/taskflow.hpp#L44 \"Update candidate\")\u201d [does eventually not fit](https://www.securecoding.cert.org/confluence/display/cplusplus/DCL51-CPP.+Do+not+declare+or+define+a+reserved+identifier \"Do not declare an identifier which is reserved for the compiler implementation.\") to the expected naming convention of the C++ language standard.\r\nWould you like to adjust your selection for unique names?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/13", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/13/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/13/events", "html_url": "https://github.com/taskflow/taskflow/issues/13", "id": 332542312, "node_id": "MDU6SXNzdWUzMzI1NDIzMTI=", "number": 13, "title": "Are tasks bound to threads, or can they run on any thread in the pool?", "user": {"login": "damienhocking", "id": 1317330, "node_id": "MDQ6VXNlcjEzMTczMzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1317330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/damienhocking", "html_url": "https://github.com/damienhocking", "followers_url": "https://api.github.com/users/damienhocking/followers", "following_url": "https://api.github.com/users/damienhocking/following{/other_user}", "gists_url": "https://api.github.com/users/damienhocking/gists{/gist_id}", "starred_url": "https://api.github.com/users/damienhocking/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/damienhocking/subscriptions", "organizations_url": "https://api.github.com/users/damienhocking/orgs", "repos_url": "https://api.github.com/users/damienhocking/repos", "events_url": "https://api.github.com/users/damienhocking/events{/privacy}", "received_events_url": "https://api.github.com/users/damienhocking/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-14T19:55:34Z", "updated_at": "2018-06-14T23:37:03Z", "closed_at": "2018-06-14T21:15:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/12", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/12/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/12/events", "html_url": "https://github.com/taskflow/taskflow/issues/12", "id": 331039718, "node_id": "MDU6SXNzdWUzMzEwMzk3MTg=", "number": 12, "title": "Change the number of worker threads", "user": {"login": "tsung-wei-huang", "id": 13237509, "node_id": "MDQ6VXNlcjEzMjM3NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/13237509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsung-wei-huang", "html_url": "https://github.com/tsung-wei-huang", "followers_url": "https://api.github.com/users/tsung-wei-huang/followers", "following_url": "https://api.github.com/users/tsung-wei-huang/following{/other_user}", "gists_url": "https://api.github.com/users/tsung-wei-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsung-wei-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsung-wei-huang/subscriptions", "organizations_url": "https://api.github.com/users/tsung-wei-huang/orgs", "repos_url": "https://api.github.com/users/tsung-wei-huang/repos", "events_url": "https://api.github.com/users/tsung-wei-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/tsung-wei-huang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "tsung-wei-huang", "id": 13237509, "node_id": "MDQ6VXNlcjEzMjM3NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/13237509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsung-wei-huang", "html_url": "https://github.com/tsung-wei-huang", "followers_url": "https://api.github.com/users/tsung-wei-huang/followers", "following_url": "https://api.github.com/users/tsung-wei-huang/following{/other_user}", "gists_url": "https://api.github.com/users/tsung-wei-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsung-wei-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsung-wei-huang/subscriptions", "organizations_url": "https://api.github.com/users/tsung-wei-huang/orgs", "repos_url": "https://api.github.com/users/tsung-wei-huang/repos", "events_url": "https://api.github.com/users/tsung-wei-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/tsung-wei-huang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tsung-wei-huang", "id": 13237509, "node_id": "MDQ6VXNlcjEzMjM3NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/13237509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsung-wei-huang", "html_url": "https://github.com/tsung-wei-huang", "followers_url": "https://api.github.com/users/tsung-wei-huang/followers", "following_url": "https://api.github.com/users/tsung-wei-huang/following{/other_user}", "gists_url": "https://api.github.com/users/tsung-wei-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsung-wei-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsung-wei-huang/subscriptions", "organizations_url": "https://api.github.com/users/tsung-wei-huang/orgs", "repos_url": "https://api.github.com/users/tsung-wei-huang/repos", "events_url": "https://api.github.com/users/tsung-wei-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/tsung-wei-huang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-06-11T04:11:21Z", "updated_at": "2018-06-27T23:50:35Z", "closed_at": "2018-06-27T23:50:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Plan to add a new method called `num_workers` to allow users to configure the number of worker threads in the taskflow. Currently, user either pass the argument to the constructor of taskflow or leave it to default `std::thread::hardware_concurrency()`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/10", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/10/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/10/events", "html_url": "https://github.com/taskflow/taskflow/issues/10", "id": 329574265, "node_id": "MDU6SXNzdWUzMjk1NzQyNjU=", "number": 10, "title": "Adding reduce operation", "user": {"login": "tsung-wei-huang", "id": 13237509, "node_id": "MDQ6VXNlcjEzMjM3NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/13237509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsung-wei-huang", "html_url": "https://github.com/tsung-wei-huang", "followers_url": "https://api.github.com/users/tsung-wei-huang/followers", "following_url": "https://api.github.com/users/tsung-wei-huang/following{/other_user}", "gists_url": "https://api.github.com/users/tsung-wei-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsung-wei-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsung-wei-huang/subscriptions", "organizations_url": "https://api.github.com/users/tsung-wei-huang/orgs", "repos_url": "https://api.github.com/users/tsung-wei-huang/repos", "events_url": "https://api.github.com/users/tsung-wei-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/tsung-wei-huang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "clin99", "id": 34017491, "node_id": "MDQ6VXNlcjM0MDE3NDkx", "avatar_url": "https://avatars3.githubusercontent.com/u/34017491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clin99", "html_url": "https://github.com/clin99", "followers_url": "https://api.github.com/users/clin99/followers", "following_url": "https://api.github.com/users/clin99/following{/other_user}", "gists_url": "https://api.github.com/users/clin99/gists{/gist_id}", "starred_url": "https://api.github.com/users/clin99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clin99/subscriptions", "organizations_url": "https://api.github.com/users/clin99/orgs", "repos_url": "https://api.github.com/users/clin99/repos", "events_url": "https://api.github.com/users/clin99/events{/privacy}", "received_events_url": "https://api.github.com/users/clin99/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "clin99", "id": 34017491, "node_id": "MDQ6VXNlcjM0MDE3NDkx", "avatar_url": "https://avatars3.githubusercontent.com/u/34017491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clin99", "html_url": "https://github.com/clin99", "followers_url": "https://api.github.com/users/clin99/followers", "following_url": "https://api.github.com/users/clin99/following{/other_user}", "gists_url": "https://api.github.com/users/clin99/gists{/gist_id}", "starred_url": "https://api.github.com/users/clin99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clin99/subscriptions", "organizations_url": "https://api.github.com/users/clin99/orgs", "repos_url": "https://api.github.com/users/clin99/repos", "events_url": "https://api.github.com/users/clin99/events{/privacy}", "received_events_url": "https://api.github.com/users/clin99/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-06-05T18:29:52Z", "updated_at": "2018-06-16T04:22:54Z", "closed_at": "2018-06-16T04:22:54Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We are adding a `reduce` operation to Taskflow. The API will follow the STL-style [reduce](http://en.cppreference.com/w/cpp/algorithm/reduce) in C++17.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/6", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/6/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/6/events", "html_url": "https://github.com/taskflow/taskflow/issues/6", "id": 328377800, "node_id": "MDU6SXNzdWUzMjgzNzc4MDA=", "number": 6, "title": "Segmentation fault in parallel_for", "user": {"login": "tsung-wei-huang", "id": 13237509, "node_id": "MDQ6VXNlcjEzMjM3NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/13237509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsung-wei-huang", "html_url": "https://github.com/tsung-wei-huang", "followers_url": "https://api.github.com/users/tsung-wei-huang/followers", "following_url": "https://api.github.com/users/tsung-wei-huang/following{/other_user}", "gists_url": "https://api.github.com/users/tsung-wei-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsung-wei-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsung-wei-huang/subscriptions", "organizations_url": "https://api.github.com/users/tsung-wei-huang/orgs", "repos_url": "https://api.github.com/users/tsung-wei-huang/repos", "events_url": "https://api.github.com/users/tsung-wei-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/tsung-wei-huang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 906067016, "node_id": "MDU6TGFiZWw5MDYwNjcwMTY=", "url": "https://api.github.com/repos/taskflow/taskflow/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "tsung-wei-huang", "id": 13237509, "node_id": "MDQ6VXNlcjEzMjM3NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/13237509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsung-wei-huang", "html_url": "https://github.com/tsung-wei-huang", "followers_url": "https://api.github.com/users/tsung-wei-huang/followers", "following_url": "https://api.github.com/users/tsung-wei-huang/following{/other_user}", "gists_url": "https://api.github.com/users/tsung-wei-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsung-wei-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsung-wei-huang/subscriptions", "organizations_url": "https://api.github.com/users/tsung-wei-huang/orgs", "repos_url": "https://api.github.com/users/tsung-wei-huang/repos", "events_url": "https://api.github.com/users/tsung-wei-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/tsung-wei-huang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tsung-wei-huang", "id": 13237509, "node_id": "MDQ6VXNlcjEzMjM3NTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/13237509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsung-wei-huang", "html_url": "https://github.com/tsung-wei-huang", "followers_url": "https://api.github.com/users/tsung-wei-huang/followers", "following_url": "https://api.github.com/users/tsung-wei-huang/following{/other_user}", "gists_url": "https://api.github.com/users/tsung-wei-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsung-wei-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsung-wei-huang/subscriptions", "organizations_url": "https://api.github.com/users/tsung-wei-huang/orgs", "repos_url": "https://api.github.com/users/tsung-wei-huang/repos", "events_url": "https://api.github.com/users/tsung-wei-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/tsung-wei-huang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-06-01T04:23:28Z", "updated_at": "2018-06-01T04:44:04Z", "closed_at": "2018-06-01T04:44:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "There is a bug in `parallel_for` that can cause segmentation fault from captured variables in the lambda. We are fixing it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/taskflow/taskflow/issues/3", "repository_url": "https://api.github.com/repos/taskflow/taskflow", "labels_url": "https://api.github.com/repos/taskflow/taskflow/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/taskflow/taskflow/issues/3/comments", "events_url": "https://api.github.com/repos/taskflow/taskflow/issues/3/events", "html_url": "https://github.com/taskflow/taskflow/issues/3", "id": 316875163, "node_id": "MDU6SXNzdWUzMTY4NzUxNjM=", "number": 3, "title": "Segmentation fault", "user": {"login": "clin99", "id": 34017491, "node_id": "MDQ6VXNlcjM0MDE3NDkx", "avatar_url": "https://avatars3.githubusercontent.com/u/34017491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clin99", "html_url": "https://github.com/clin99", "followers_url": "https://api.github.com/users/clin99/followers", "following_url": "https://api.github.com/users/clin99/following{/other_user}", "gists_url": "https://api.github.com/users/clin99/gists{/gist_id}", "starred_url": "https://api.github.com/users/clin99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clin99/subscriptions", "organizations_url": "https://api.github.com/users/clin99/orgs", "repos_url": "https://api.github.com/users/clin99/repos", "events_url": "https://api.github.com/users/clin99/events{/privacy}", "received_events_url": "https://api.github.com/users/clin99/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 906067016, "node_id": "MDU6TGFiZWw5MDYwNjcwMTY=", "url": "https://api.github.com/repos/taskflow/taskflow/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-23T15:55:03Z", "updated_at": "2018-06-06T17:56:10Z", "closed_at": "2018-04-24T02:14:43Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I run the unit test and sometimes it reports a segmentation fault. Can you look into this?", "performed_via_github_app": null, "score": 1.0}]}