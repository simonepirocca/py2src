{"total_count": 51, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pydata/patsy/issues/159", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/159/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/159/events", "html_url": "https://github.com/pydata/patsy/issues/159", "id": 664637207, "node_id": "MDU6SXNzdWU2NjQ2MzcyMDc=", "number": 159, "title": "Using two patsy versions in the same environment", "user": {"login": "yanivbm88", "id": 19760109, "node_id": "MDQ6VXNlcjE5NzYwMTA5", "avatar_url": "https://avatars0.githubusercontent.com/u/19760109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanivbm88", "html_url": "https://github.com/yanivbm88", "followers_url": "https://api.github.com/users/yanivbm88/followers", "following_url": "https://api.github.com/users/yanivbm88/following{/other_user}", "gists_url": "https://api.github.com/users/yanivbm88/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanivbm88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanivbm88/subscriptions", "organizations_url": "https://api.github.com/users/yanivbm88/orgs", "repos_url": "https://api.github.com/users/yanivbm88/repos", "events_url": "https://api.github.com/users/yanivbm88/events{/privacy}", "received_events_url": "https://api.github.com/users/yanivbm88/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-23T17:09:29Z", "updated_at": "2020-07-23T17:45:31Z", "closed_at": "2020-07-23T17:45:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI came across the need to use two patsy versions in the same environment (0.4.1 & 0.5.1). That happens because I'm trying to integrate a new product to an older environment that already uses patsy 0.4.1, and patsy 0.5.1 is a requirements for my new product.\r\n\r\nWhat is the recommended way of handling this? Is there a proper way to setup patsy under an alternative name?\r\n\r\nThanks,\r\nYaniv", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/136", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/136/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/136/events", "html_url": "https://github.com/pydata/patsy/issues/136", "id": 373993954, "node_id": "MDU6SXNzdWUzNzM5OTM5NTQ=", "number": 136, "title": "dmatrix() issue in python 3.6.7", "user": {"login": "garzillo", "id": 9381647, "node_id": "MDQ6VXNlcjkzODE2NDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/9381647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garzillo", "html_url": "https://github.com/garzillo", "followers_url": "https://api.github.com/users/garzillo/followers", "following_url": "https://api.github.com/users/garzillo/following{/other_user}", "gists_url": "https://api.github.com/users/garzillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/garzillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garzillo/subscriptions", "organizations_url": "https://api.github.com/users/garzillo/orgs", "repos_url": "https://api.github.com/users/garzillo/repos", "events_url": "https://api.github.com/users/garzillo/events{/privacy}", "received_events_url": "https://api.github.com/users/garzillo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-25T15:03:43Z", "updated_at": "2018-10-27T22:35:29Z", "closed_at": "2018-10-27T22:35:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's a minimally reproducible example for a bug I'm experiencing with python 3.6.7. \r\n\r\nI also tried the exact same thing on 3.6.0 and 3.6.3 and it worked without issue\r\n\r\nimport pandas as pd\r\nfrom patsy import dmatrix\r\n\r\nX = {\r\n    'a': [2, 3, 4, 5],\r\n    'b': [1, 0, 0, 1],\r\n    'c': [0, 1, 1, 0],\r\n    'd': [1, 0, 1, 0],\r\n    'e': [0, 1, 0, 1]\r\n}\r\n\r\nX = pd.DataFrame(X)\r\nformula = '0+a:c+a:d+a:e+b:c+b:d+b:e'\r\n\r\nm = dmatrix(formula, data=X, return_type='dataframe')\r\n\r\nThis returns the following:\r\n\r\n`\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/alberto/.pyenv/versions/patsy/lib/python3.6/site-packages/patsy/highlevel.py\", line 291, in dmatrix\r\n    NA_action, return_type)\r\n  File \"/home/alberto/.pyenv/versions/patsy/lib/python3.6/site-packages/patsy/highlevel.py\", line 165, in _do_highlevel_design\r\n    NA_action)\r\n  File \"/home/alberto/.pyenv/versions/patsy/lib/python3.6/site-packages/patsy/highlevel.py\", line 62, in _try_incr_builders\r\n    formula_like = ModelDesc.from_formula(formula_like)\r\n  File \"/home/alberto/.pyenv/versions/patsy/lib/python3.6/site-packages/patsy/desc.py\", line 164, in from_formula\r\n    tree = parse_formula(tree_or_string)\r\n  File \"/home/alberto/.pyenv/versions/patsy/lib/python3.6/site-packages/patsy/parse_formula.py\", line 148, in parse_formula\r\n    _atomic_token_types)\r\n  File \"/home/alberto/.pyenv/versions/patsy/lib/python3.6/site-packages/patsy/infix_parser.py\", line 210, in infix_parse\r\n    for token in token_source:\r\n  File \"/home/alberto/.pyenv/versions/patsy/lib/python3.6/site-packages/patsy/parse_formula.py\", line 94, in _tokenize_formula\r\n    yield _read_python_expr(it, end_tokens)\r\n  File \"/home/alberto/.pyenv/versions/patsy/lib/python3.6/site-packages/patsy/parse_formula.py\", line 44, in _read_python_expr\r\n    for pytype, token_string, origin in it:\r\n  File \"/home/alberto/.pyenv/versions/patsy/lib/python3.6/site-packages/patsy/util.py\", line 332, in next\r\n    return six.advance_iterator(self._it)\r\n  File \"/home/alberto/.pyenv/versions/patsy/lib/python3.6/site-packages/patsy/tokens.py\", line 35, in python_tokenize\r\n    assert pytype not in (tokenize.NL, tokenize.NEWLINE)\r\nAssertionError\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/135", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/135/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/135/events", "html_url": "https://github.com/pydata/patsy/issues/135", "id": 373940299, "node_id": "MDU6SXNzdWUzNzM5NDAyOTk=", "number": 135, "title": "statsmodels.formula.api tokenize issue in Python 3.7.1", "user": {"login": "sbwiecko", "id": 31131320, "node_id": "MDQ6VXNlcjMxMTMxMzIw", "avatar_url": "https://avatars3.githubusercontent.com/u/31131320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbwiecko", "html_url": "https://github.com/sbwiecko", "followers_url": "https://api.github.com/users/sbwiecko/followers", "following_url": "https://api.github.com/users/sbwiecko/following{/other_user}", "gists_url": "https://api.github.com/users/sbwiecko/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbwiecko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbwiecko/subscriptions", "organizations_url": "https://api.github.com/users/sbwiecko/orgs", "repos_url": "https://api.github.com/users/sbwiecko/repos", "events_url": "https://api.github.com/users/sbwiecko/events{/privacy}", "received_events_url": "https://api.github.com/users/sbwiecko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-25T13:12:24Z", "updated_at": "2018-10-27T22:35:34Z", "closed_at": "2018-10-27T22:35:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/statsmodels/statsmodels/issues/5343#issue-373873989", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/122", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/122/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/122/events", "html_url": "https://github.com/pydata/patsy/issues/122", "id": 308369305, "node_id": "MDU6SXNzdWUzMDgzNjkzMDU=", "number": 122, "title": "Pandas 0.22.0 `DeprecationWarning` from `util.py:652`", "user": {"login": "macks22", "id": 3409997, "node_id": "MDQ6VXNlcjM0MDk5OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3409997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/macks22", "html_url": "https://github.com/macks22", "followers_url": "https://api.github.com/users/macks22/followers", "following_url": "https://api.github.com/users/macks22/following{/other_user}", "gists_url": "https://api.github.com/users/macks22/gists{/gist_id}", "starred_url": "https://api.github.com/users/macks22/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/macks22/subscriptions", "organizations_url": "https://api.github.com/users/macks22/orgs", "repos_url": "https://api.github.com/users/macks22/repos", "events_url": "https://api.github.com/users/macks22/events{/privacy}", "received_events_url": "https://api.github.com/users/macks22/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-25T17:40:46Z", "updated_at": "2018-04-02T16:11:40Z", "closed_at": "2018-04-02T06:55:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "The warning basically says it all:\r\n```\r\n/Users/<user>/anaconda2/envs/py3k/lib/python3.6/site-packages/patsy/util.py:652: DeprecationWarning: pandas.core.common.is_categorical_dtype is deprecated. import from the public API: pandas.api.types.is_categorical_dtype instead\r\n  return safe_is_pandas_categorical_dtype(data.dtype)\r\n```\r\nWould be good to switch over to the new API soon to get rid of the warning and prevent breakage with future `pandas` versions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/115", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/115/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/115/events", "html_url": "https://github.com/pydata/patsy/issues/115", "id": 284975512, "node_id": "MDU6SXNzdWUyODQ5NzU1MTI=", "number": 115, "title": "RLS: patsy 0.5.0", "user": {"login": "jreback", "id": 953992, "node_id": "MDQ6VXNlcjk1Mzk5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jreback", "html_url": "https://github.com/jreback", "followers_url": "https://api.github.com/users/jreback/followers", "following_url": "https://api.github.com/users/jreback/following{/other_user}", "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}", "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jreback/subscriptions", "organizations_url": "https://api.github.com/users/jreback/orgs", "repos_url": "https://api.github.com/users/jreback/repos", "events_url": "https://api.github.com/users/jreback/events{/privacy}", "received_events_url": "https://api.github.com/users/jreback/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-12-28T19:26:22Z", "updated_at": "2018-01-10T12:37:01Z", "closed_at": "2018-01-10T05:27:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "pandas is removing this deprecation of dtype instrospection functions that were originally defined in ``pandas.core.common``, these are now in ``pandas.api.types``.  It seems that the code to fix this is already in master (of patsy), just needs a release to push out. last release was late 2015.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/113", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/113/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/113/events", "html_url": "https://github.com/pydata/patsy/issues/113", "id": 280087020, "node_id": "MDU6SXNzdWUyODAwODcwMjA=", "number": 113, "title": "Unquote Q(' ')", "user": {"login": "saroele", "id": 562438, "node_id": "MDQ6VXNlcjU2MjQzOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/562438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saroele", "html_url": "https://github.com/saroele", "followers_url": "https://api.github.com/users/saroele/followers", "following_url": "https://api.github.com/users/saroele/following{/other_user}", "gists_url": "https://api.github.com/users/saroele/gists{/gist_id}", "starred_url": "https://api.github.com/users/saroele/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saroele/subscriptions", "organizations_url": "https://api.github.com/users/saroele/orgs", "repos_url": "https://api.github.com/users/saroele/repos", "events_url": "https://api.github.com/users/saroele/events{/privacy}", "received_events_url": "https://api.github.com/users/saroele/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-07T11:00:52Z", "updated_at": "2017-12-11T09:22:20Z", "closed_at": "2017-12-11T09:22:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm constructing formulas from pandas DataFrames that users pass as input. To escape all kind of strange characters in the column names, I'm quoting each column with `Q('column_name')`.\r\n\r\nWhen I pass the resulting formulas to statsmodels OLS and print a summary, all my variables are shown as `Q('column_name')`.  Can I unquote these variables somehow? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/109", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/109/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/109/events", "html_url": "https://github.com/pydata/patsy/issues/109", "id": 237286677, "node_id": "MDU6SXNzdWUyMzcyODY2Nzc=", "number": 109, "title": "patsy with Aalen Additive Fitter", "user": {"login": "ncdingari", "id": 6037028, "node_id": "MDQ6VXNlcjYwMzcwMjg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6037028?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ncdingari", "html_url": "https://github.com/ncdingari", "followers_url": "https://api.github.com/users/ncdingari/followers", "following_url": "https://api.github.com/users/ncdingari/following{/other_user}", "gists_url": "https://api.github.com/users/ncdingari/gists{/gist_id}", "starred_url": "https://api.github.com/users/ncdingari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ncdingari/subscriptions", "organizations_url": "https://api.github.com/users/ncdingari/orgs", "repos_url": "https://api.github.com/users/ncdingari/repos", "events_url": "https://api.github.com/users/ncdingari/events{/privacy}", "received_events_url": "https://api.github.com/users/ncdingari/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-20T17:26:12Z", "updated_at": "2017-06-20T20:26:44Z", "closed_at": "2017-06-20T20:26:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using `patsy` with `lifelines` python package\r\n\r\nWhen I run\r\nXtest = patsy.dmatrix('Variable1 + Variable2 -1', data = testData, return_type='dataframe')\r\n\r\nNumber of rows are being dropped, number of rows in Xtest is less than testData. When we do one-hot-encoding, this won't happen. If I do one-hot-encoding and try to input to\r\ntestPred = aaf.predict_survival_function(Xtest.ix[1:10])\r\nis not working", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/108", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/108/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/108/events", "html_url": "https://github.com/pydata/patsy/issues/108", "id": 236423762, "node_id": "MDU6SXNzdWUyMzY0MjM3NjI=", "number": 108, "title": "intercept term in splines", "user": {"login": "hovnatan", "id": 8426582, "node_id": "MDQ6VXNlcjg0MjY1ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8426582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hovnatan", "html_url": "https://github.com/hovnatan", "followers_url": "https://api.github.com/users/hovnatan/followers", "following_url": "https://api.github.com/users/hovnatan/following{/other_user}", "gists_url": "https://api.github.com/users/hovnatan/gists{/gist_id}", "starred_url": "https://api.github.com/users/hovnatan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hovnatan/subscriptions", "organizations_url": "https://api.github.com/users/hovnatan/orgs", "repos_url": "https://api.github.com/users/hovnatan/repos", "events_url": "https://api.github.com/users/hovnatan/events{/privacy}", "received_events_url": "https://api.github.com/users/hovnatan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-16T09:05:41Z", "updated_at": "2017-06-17T19:14:24Z", "closed_at": "2017-06-17T19:14:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to understand cubic spline generation. As far as I can see from the output of\r\n```\r\nx = np.linspace(0., 1., 100)\r\ny1 = dmatrix(\"bs(x, df=6, degree=3, include_intercept=True)\", {\"x\": x})\r\nprint(y1)\r\ny2 = dmatrix(\"bs(x, df=6, degree=3, include_intercept=False)\", {\"x\": x})\r\nprint(y2)\r\n```\r\nthe `y1` (with intercept) and `y2` (without intercept) are the same. Is there something I am missing? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/106", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/106/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/106/events", "html_url": "https://github.com/pydata/patsy/issues/106", "id": 226312672, "node_id": "MDU6SXNzdWUyMjYzMTI2NzI=", "number": 106, "title": "Polynomial contrast coding", "user": {"login": "jingw222", "id": 5494367, "node_id": "MDQ6VXNlcjU0OTQzNjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5494367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jingw222", "html_url": "https://github.com/jingw222", "followers_url": "https://api.github.com/users/jingw222/followers", "following_url": "https://api.github.com/users/jingw222/following{/other_user}", "gists_url": "https://api.github.com/users/jingw222/gists{/gist_id}", "starred_url": "https://api.github.com/users/jingw222/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jingw222/subscriptions", "organizations_url": "https://api.github.com/users/jingw222/orgs", "repos_url": "https://api.github.com/users/jingw222/repos", "events_url": "https://api.github.com/users/jingw222/events{/privacy}", "received_events_url": "https://api.github.com/users/jingw222/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-04T15:07:35Z", "updated_at": "2017-05-06T01:19:53Z", "closed_at": "2017-05-06T01:19:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to employ polynomial contrast coding `patsy.Poly` on,  say, a categorical variable of four levels that is only up to quadratic level instead of cubic one? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/101", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/101/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/101/events", "html_url": "https://github.com/pydata/patsy/issues/101", "id": 207658047, "node_id": "MDU6SXNzdWUyMDc2NTgwNDc=", "number": 101, "title": "How to handle exposure with patsy a.ka. offset function", "user": {"login": "olivier-lacroix", "id": 24560122, "node_id": "MDQ6VXNlcjI0NTYwMTIy", "avatar_url": "https://avatars0.githubusercontent.com/u/24560122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olivier-lacroix", "html_url": "https://github.com/olivier-lacroix", "followers_url": "https://api.github.com/users/olivier-lacroix/followers", "following_url": "https://api.github.com/users/olivier-lacroix/following{/other_user}", "gists_url": "https://api.github.com/users/olivier-lacroix/gists{/gist_id}", "starred_url": "https://api.github.com/users/olivier-lacroix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olivier-lacroix/subscriptions", "organizations_url": "https://api.github.com/users/olivier-lacroix/orgs", "repos_url": "https://api.github.com/users/olivier-lacroix/repos", "events_url": "https://api.github.com/users/olivier-lacroix/events{/privacy}", "received_events_url": "https://api.github.com/users/olivier-lacroix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-14T22:40:22Z", "updated_at": "2017-02-15T03:05:04Z", "closed_at": "2017-02-15T03:05:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am considering using pymc3 for a Poisson GLM application, and am looking for a way to take into account an exposure parameter.\r\n\r\nIn R, this can be indicated via an offset function, basically indicating that regression parameter shall be 1. see for instance https://stat.ethz.ch/R-manual/R-devel/library/stats/html/offset.html\r\n\r\nI have not found a straightforward way to this with patsy. Have I missed something? Is this doable in patsy?\r\n\r\nThank you,\r\n\r\nOlivier", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/99", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/99/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/99/events", "html_url": "https://github.com/pydata/patsy/issues/99", "id": 199768014, "node_id": "MDU6SXNzdWUxOTk3NjgwMTQ=", "number": 99, "title": "bug: patsy fails when included in standalone applications", "user": {"login": "pbrod", "id": 1193469, "node_id": "MDQ6VXNlcjExOTM0Njk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1193469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pbrod", "html_url": "https://github.com/pbrod", "followers_url": "https://api.github.com/users/pbrod/followers", "following_url": "https://api.github.com/users/pbrod/following{/other_user}", "gists_url": "https://api.github.com/users/pbrod/gists{/gist_id}", "starred_url": "https://api.github.com/users/pbrod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pbrod/subscriptions", "organizations_url": "https://api.github.com/users/pbrod/orgs", "repos_url": "https://api.github.com/users/pbrod/repos", "events_url": "https://api.github.com/users/pbrod/events{/privacy}", "received_events_url": "https://api.github.com/users/pbrod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-10T09:13:59Z", "updated_at": "2017-01-10T11:26:38Z", "closed_at": "2017-01-10T09:22:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I include patsy in a standalone application made by cx_freeze I get a type exceptions error message:\r\n\r\n<type 'exceptions.TypeError'>: expected string or buffer'\r\n\r\nThe reason for this error is that python sets all docstrings to None when compiling the source code.\r\nIn order to fix this all lines manipulating the __doc__ should test for the cornercase that it is None.\r\n\r\nThe two lines in patsy/mgcv_cubic_splines.py which say:\r\n\r\n       __doc__ = __doc__ + CubicRegressionSpline.commondoc\r\n\r\nshould therefore be replaced with\r\n\r\n       __doc__ = __doc__ + CubicRegressionSpline.commondoc if __doc__ else CubicRegressionSpline.commondoc\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/94", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/94/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/94/events", "html_url": "https://github.com/pydata/patsy/issues/94", "id": 181181369, "node_id": "MDU6SXNzdWUxODExODEzNjk=", "number": 94, "title": "[question] How to get full-ranked categorical data?", "user": {"login": "shivamkalra", "id": 1386352, "node_id": "MDQ6VXNlcjEzODYzNTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1386352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivamkalra", "html_url": "https://github.com/shivamkalra", "followers_url": "https://api.github.com/users/shivamkalra/followers", "following_url": "https://api.github.com/users/shivamkalra/following{/other_user}", "gists_url": "https://api.github.com/users/shivamkalra/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivamkalra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivamkalra/subscriptions", "organizations_url": "https://api.github.com/users/shivamkalra/orgs", "repos_url": "https://api.github.com/users/shivamkalra/repos", "events_url": "https://api.github.com/users/shivamkalra/events{/privacy}", "received_events_url": "https://api.github.com/users/shivamkalra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-05T15:05:18Z", "updated_at": "2016-10-05T15:16:15Z", "closed_at": "2016-10-05T15:16:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "My data consists of four columns, lets say `a, b, c, d`. Where `a` and `b` is categorical data with 3 and 5 categories each. My formula is `d = C(a) + C(b) + c` and even tried `d = 0 + C(a) + C(b) + c` but none of them is giving me full-ranked data so that I've all 3 and 5 categories in my final input data. Is there way to force patsy to give me full-ranked data?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/89", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/89/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/89/events", "html_url": "https://github.com/pydata/patsy/issues/89", "id": 164607424, "node_id": "MDU6SXNzdWUxNjQ2MDc0MjQ=", "number": 89, "title": "BUG: patsy raises with zero constraint", "user": {"login": "josef-pkt", "id": 440735, "node_id": "MDQ6VXNlcjQ0MDczNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/440735?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josef-pkt", "html_url": "https://github.com/josef-pkt", "followers_url": "https://api.github.com/users/josef-pkt/followers", "following_url": "https://api.github.com/users/josef-pkt/following{/other_user}", "gists_url": "https://api.github.com/users/josef-pkt/gists{/gist_id}", "starred_url": "https://api.github.com/users/josef-pkt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josef-pkt/subscriptions", "organizations_url": "https://api.github.com/users/josef-pkt/orgs", "repos_url": "https://api.github.com/users/josef-pkt/repos", "events_url": "https://api.github.com/users/josef-pkt/events{/privacy}", "received_events_url": "https://api.github.com/users/josef-pkt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-07-08T20:12:48Z", "updated_at": "2016-10-25T19:58:04Z", "closed_at": "2016-10-25T19:58:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why does patsy raise a ValueError in this case?\n\nIt looks like a perfectly valid degenerate case.\nWe are reusing t_test which uses patsy's constraint for other things that pure constraints.\nhttps://github.com/statsmodels/statsmodels/pull/3096\n\npatsy\\constraint.py\", line 62:\n\n```\n        if np.any(np.all(self.coefs == 0, axis=1)):\n            raise ValueError(\"can't test a constant constraint\")\n```\n\n```\n>>> res.t_test(np.zeros((1, 7)))\nTraceback (most recent call last):\n  File \"<pyshell#9>\", line 1, in <module>\n    res.t_test(np.zeros((1, 7)))\n  File \"E:\\josef_new_notebook\\git\\statsmodels_py34_pr\\statsmodels\\base\\model.py\", line 1204, in t_test\n    LC = DesignInfo(names).linear_constraint(r_matrix)\n  File \"C:\\Users\\josef\\Downloads\\WinPython-64bit-3.4.4.2\\python-3.4.4.amd64\\lib\\site-packages\\patsy\\design_info.py\", line 536, in linear_constraint\n    return linear_constraint(constraint_likes, self.column_names)\n  File \"C:\\Users\\josef\\Downloads\\WinPython-64bit-3.4.4.2\\python-3.4.4.amd64\\lib\\site-packages\\patsy\\constraint.py\", line 404, in linear_constraint\n    return LinearConstraint(variable_names, coefs)\n  File \"C:\\Users\\josef\\Downloads\\WinPython-64bit-3.4.4.2\\python-3.4.4.amd64\\lib\\site-packages\\patsy\\constraint.py\", line 62, in __init__\n    raise ValueError(\"can't test a constant constraint\")\nValueError: can't test a constant constraint\n\n>>> res.t_test(1e-20 * np.ones((1, 7)))\n<class 'statsmodels.stats.contrast.ContrastResults'>\n                             Test for Constraints                             \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nc0          1.534e-18   5.21e-19      2.945      0.004    4.97e-19    2.57e-18\n==============================================================================\n```\n\n(In my opinion patsy should not **enforce** statistics, but can warn instead.)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/81", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/81/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/81/events", "html_url": "https://github.com/pydata/patsy/issues/81", "id": 146186097, "node_id": "MDU6SXNzdWUxNDYxODYwOTc=", "number": 81, "title": "Why is patsy returning additional columns when I add a None or NaN value?", "user": {"login": "rsgmon", "id": 5660575, "node_id": "MDQ6VXNlcjU2NjA1NzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5660575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsgmon", "html_url": "https://github.com/rsgmon", "followers_url": "https://api.github.com/users/rsgmon/followers", "following_url": "https://api.github.com/users/rsgmon/following{/other_user}", "gists_url": "https://api.github.com/users/rsgmon/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsgmon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsgmon/subscriptions", "organizations_url": "https://api.github.com/users/rsgmon/orgs", "repos_url": "https://api.github.com/users/rsgmon/repos", "events_url": "https://api.github.com/users/rsgmon/events{/privacy}", "received_events_url": "https://api.github.com/users/rsgmon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-06T04:51:43Z", "updated_at": "2016-04-06T06:17:47Z", "closed_at": "2016-04-06T06:17:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting strange return when None or Nan values are in a dataset. As seen below instead of just dropping the None row it creates additional columns with 1's and 0's.\n\n```\nimport numpy as np\nimport pandas as pd\nimport patsy as pt\n\ndf = pd.DataFrame(np.array([(1,3),(2,6),(4,2),(6,3)]), columns=['y','X'])\nIn[60]: df\nOut[60]: \n   y  X\n0  1  3\n1  2  6\n2  4  2\n3  6  3\nIn[61]: pt.dmatrices('y ~ X', df)\nOut[61]: \n(DesignMatrix with shape (4, 1)\n   y\n   1\n   2\n   4\n   6\n   Terms:\n     'y' (column 0),\n DesignMatrix with shape (4, 2)\n   Intercept  X\n           1  3\n           1  6\n           1  2\n           1  3\n   Terms:\n     'Intercept' (column 0)\n     'X' (column 1))\nIn[62]: df = pd.DataFrame(np.array([(1,3),(2,6),(4,2),(6,None)]), columns=['y','X'])\nIn[63]: pt.dmatrices('y ~ X', df)\nOut[63]: \n(DesignMatrix with shape (3, 4)\n   y[1]  y[2]  y[4]  y[6]\n      1     0     0     0\n      0     1     0     0\n      0     0     1     0\n   Terms:\n     'y' (columns 0:4),\n DesignMatrix with shape (3, 3)\n   Intercept  X[T.3]  X[T.6]\n           1       1       0\n           1       0       1\n           1       0       0\n   Terms:\n     'Intercept' (column 0)\n     'X' (columns 1:3)) \n```\n\nWhy is patsy returning additional columns when I add a None value?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/78", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/78/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/78/events", "html_url": "https://github.com/pydata/patsy/issues/78", "id": 117035520, "node_id": "MDU6SXNzdWUxMTcwMzU1MjA=", "number": 78, "title": "Python. Titanic Data Error", "user": {"login": "pintolx", "id": 15163435, "node_id": "MDQ6VXNlcjE1MTYzNDM1", "avatar_url": "https://avatars3.githubusercontent.com/u/15163435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pintolx", "html_url": "https://github.com/pintolx", "followers_url": "https://api.github.com/users/pintolx/followers", "following_url": "https://api.github.com/users/pintolx/following{/other_user}", "gists_url": "https://api.github.com/users/pintolx/gists{/gist_id}", "starred_url": "https://api.github.com/users/pintolx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pintolx/subscriptions", "organizations_url": "https://api.github.com/users/pintolx/orgs", "repos_url": "https://api.github.com/users/pintolx/repos", "events_url": "https://api.github.com/users/pintolx/events{/privacy}", "received_events_url": "https://api.github.com/users/pintolx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2015-11-16T01:49:28Z", "updated_at": "2015-11-16T03:44:07Z", "closed_at": "2015-11-16T03:42:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying out some machine learning algorithms to be able to predict the people who survived who were aboard the titanic. I am following this example https://github.com/mlakhavani/titanic/blob/master/TitanixFinal.ipynb\n\nHowever on from patsy import dmatrices\n\n```\ny, x = dmatrices('survived ~ sex + age + sibsp + parch + pclass + fare + C + Q + S + Col + Dr + Master + Miss + Mr + Mrs + Rev',\n                 titanic_train, return_type=\"dataframe\")\n\ny_test, x_test = dmatrices('survived ~ sex + age + sibsp + parch + pclass + fare + + C + Q + S + Col + Dr + Master + Miss + Mr + Mrs + Rev',\n                           titanic_test, return_type=\"dataframe\")\ni get this error\nPatsyError                                Traceback (most recent call last)\n<ipython-input-153-63b2f538454b> in <module>()\n      1 y_test, x_test = dmatrices('Survived ~ Sex + Age + SibSp + Parch + Pclass + Fare + + C + Q + S ++ Dr + Master + Miss + Mr + Mrs + Rev',\n----> 2                            titanic_test, return_type=\"dataframe\")\n\nC:\\Anaconda\\lib\\site-packages\\patsy\\highlevel.pyc in dmatrices(formula_like, data, eval_env, NA_action, return_type)\n    295     eval_env = EvalEnvironment.capture(eval_env, reference=1)\n    296     (lhs, rhs) = _do_highlevel_design(formula_like, data, eval_env,\n--> 297                                       NA_action, return_type)\n    298     if lhs.shape[1] == 0:\n    299         raise PatsyError(\"model is missing required outcome variables\")\n\nC:\\Anaconda\\lib\\site-packages\\patsy\\highlevel.pyc in _do_highlevel_design(formula_like, data, eval_env, NA_action, return_type)\n    154         return build_design_matrices(builders, data,\n    155                                      NA_action=NA_action,\n--> 156                                      return_type=return_type)\n    157     else:\n    158         # No builders, but maybe we can still get matrices\n\nC:\\Anaconda\\lib\\site-packages\\patsy\\build.pyc in build_design_matrices(builders, data, NA_action, return_type, dtype)\n    945         for evaluator in builder._evaluators:\n    946             if evaluator not in evaluator_to_values:\n--> 947                 value, is_NA = evaluator.eval(data, NA_action)\n    948                 evaluator_to_isNAs[evaluator] = is_NA\n    949                 # value may now be a Series, DataFrame, or ndarray\n\nC:\\Anaconda\\lib\\site-packages\\patsy\\build.pyc in eval(self, data, NA_action)\n    161         result = self.factor.eval(self._state, data)\n    162         result = categorical_to_int(result, self._levels, NA_action,\n--> 163                                     origin=self.factor)\n    164         assert result.ndim == 1\n    165         return result, np.asarray(result == -1)\n\nC:\\Anaconda\\lib\\site-packages\\patsy\\categorical.pyc in categorical_to_int(data, levels, NA_action, origin)\n    270     if hasattr(data, \"shape\") and len(data.shape) > 1:\n    271         raise PatsyError(\"categorical data must be 1-dimensional\",\n--> 272                          origin)\n    273     if (not iterable(data)\n    274         or isinstance(data, (six.text_type, six.binary_type))):\n\nPatsyError: categorical data must be 1-dimensional\n    Survived ~ Sex + Age + SibSp + Parch + Pclass + Fare + + C + Q + S ++ Dr + Master + Miss + Mr + Mrs + Rev\n\n```\n\nHow can i solve this issue?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/73", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/73/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/73/events", "html_url": "https://github.com/pydata/patsy/issues/73", "id": 108127736, "node_id": "MDU6SXNzdWUxMDgxMjc3MzY=", "number": 73, "title": "dmatrices: fix \"ValueError: For numerical factors, num_columns must be an int\"", "user": {"login": "patrick-nicholson", "id": 7896723, "node_id": "MDQ6VXNlcjc4OTY3MjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7896723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrick-nicholson", "html_url": "https://github.com/patrick-nicholson", "followers_url": "https://api.github.com/users/patrick-nicholson/followers", "following_url": "https://api.github.com/users/patrick-nicholson/following{/other_user}", "gists_url": "https://api.github.com/users/patrick-nicholson/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrick-nicholson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrick-nicholson/subscriptions", "organizations_url": "https://api.github.com/users/patrick-nicholson/orgs", "repos_url": "https://api.github.com/users/patrick-nicholson/repos", "events_url": "https://api.github.com/users/patrick-nicholson/events{/privacy}", "received_events_url": "https://api.github.com/users/patrick-nicholson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-24T13:17:05Z", "updated_at": "2015-09-24T19:36:48Z", "closed_at": "2015-09-24T19:36:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "With an interaction term, dmatrices is failing with the error `ValueError: For numerical factors, num_columns must be an int`.  \n\nThe tests `if not isinstance(num_columns, int)` in the `design_info` module (lines 87 and 218) return `True` because `num_columns` is a `long` rather than an `int`.  \n\nChanging the test to `if not isinstance(num_columns, (int, long))` has worked for me.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/71", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/71/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/71/events", "html_url": "https://github.com/pydata/patsy/issues/71", "id": 101235810, "node_id": "MDU6SXNzdWUxMDEyMzU4MTA=", "number": 71, "title": "Column names without explicitly creating the design matrix", "user": {"login": "quantdaddy", "id": 8163570, "node_id": "MDQ6VXNlcjgxNjM1NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8163570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantdaddy", "html_url": "https://github.com/quantdaddy", "followers_url": "https://api.github.com/users/quantdaddy/followers", "following_url": "https://api.github.com/users/quantdaddy/following{/other_user}", "gists_url": "https://api.github.com/users/quantdaddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantdaddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantdaddy/subscriptions", "organizations_url": "https://api.github.com/users/quantdaddy/orgs", "repos_url": "https://api.github.com/users/quantdaddy/repos", "events_url": "https://api.github.com/users/quantdaddy/events{/privacy}", "received_events_url": "https://api.github.com/users/quantdaddy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-08-16T05:40:16Z", "updated_at": "2015-08-16T22:55:57Z", "closed_at": "2015-08-16T06:35:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a large data set and I want to get the unique column names of the design matrix I'll get by specifying the formula. One way is to explicitly create the design matrix and then look up the column name. However, the design matrix is too large and it gives memory error. Is there a way to access the column names without creating the design matrix? I'm not interested in design matrix per se, \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/70", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/70/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/70/events", "html_url": "https://github.com/pydata/patsy/issues/70", "id": 94605618, "node_id": "MDU6SXNzdWU5NDYwNTYxOA==", "number": 70, "title": "New release?", "user": {"login": "jseabold", "id": 296164, "node_id": "MDQ6VXNlcjI5NjE2NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseabold", "html_url": "https://github.com/jseabold", "followers_url": "https://api.github.com/users/jseabold/followers", "following_url": "https://api.github.com/users/jseabold/following{/other_user}", "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions", "organizations_url": "https://api.github.com/users/jseabold/orgs", "repos_url": "https://api.github.com/users/jseabold/repos", "events_url": "https://api.github.com/users/jseabold/events{/privacy}", "received_events_url": "https://api.github.com/users/jseabold/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-07-12T22:31:08Z", "updated_at": "2015-07-22T01:28:12Z", "closed_at": "2015-07-22T01:28:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Any chance on getting a release with cd0b84247ec345cb84d3a1751028d5c38611c485? Now that pandas is keeping categorical dtypes in DataFrames, we're running in to this more and more.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/69", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/69/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/69/events", "html_url": "https://github.com/pydata/patsy/issues/69", "id": 83211057, "node_id": "MDU6SXNzdWU4MzIxMTA1Nw==", "number": 69, "title": "two fatal errors during test", "user": {"login": "braindevices", "id": 7507440, "node_id": "MDQ6VXNlcjc1MDc0NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7507440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/braindevices", "html_url": "https://github.com/braindevices", "followers_url": "https://api.github.com/users/braindevices/followers", "following_url": "https://api.github.com/users/braindevices/following{/other_user}", "gists_url": "https://api.github.com/users/braindevices/gists{/gist_id}", "starred_url": "https://api.github.com/users/braindevices/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/braindevices/subscriptions", "organizations_url": "https://api.github.com/users/braindevices/orgs", "repos_url": "https://api.github.com/users/braindevices/repos", "events_url": "https://api.github.com/users/braindevices/events{/privacy}", "received_events_url": "https://api.github.com/users/braindevices/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-05-31T22:40:56Z", "updated_at": "2015-07-22T21:27:05Z", "closed_at": "2015-07-22T21:27:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "system versions:\n\n```\nPython 2.7.6\n>>> patsy.__version__\n'0.3.0'\n>>> numpy.__version__\n'1.8.1'\n>>> pandas.__version__\n'0.16.1'\n```\n\ntest results:\n\n```\n.............py276/lib/python2.7/site-packages/pandas/core/categorical.py:472: FutureWarning: Accessing 'levels' is deprecated, use 'categories'\nwarn(\"Accessing 'levels' is deprecated, use 'categories'\", FutureWarning)\npy276/lib/python2.7/site-packages/pandas/core/categorical.py:420: FutureWarning: 'labels' is deprecated. Use 'codes' instead\nwarnings.warn(\"'labels' is deprecated. Use 'codes' instead\", FutureWarning)\n...FF.................\n======================================================================\nFAIL: patsy.test_highlevel.test_formula_likes\n----------------------------------------------------------------------\nTraceback (most recent call last):\nFile \"py276/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\nFile \"py276/lib/python2.7/site-packages/patsy/test_highlevel.py\", line 202, in test_formula_likes\n    [[1], [2], [3]], [\"x\"])\nFile \"py276/lib/python2.7/site-packages/patsy/test_highlevel.py\", line 104, in t\n    expected_lhs_values, expected_lhs_names)\nFile \"py276/lib/python2.7/site-packages/patsy/test_highlevel.py\", line 32, in check_result\n    assert rhs.design_info.column_names == expected_rhs_names\nAssertionError\n\n======================================================================\nFAIL: patsy.test_highlevel.test_return_pandas\n----------------------------------------------------------------------\nTraceback (most recent call last):\nFile \"py276/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\nFile \"py276/lib/python2.7/site-packages/patsy/test_highlevel.py\", line 348, in test_return_pandas\n    assert np.array_equal(df4.columns, [\"AA\"])\nAssertionError\n\n----------------------------------------------------------------------\nRan 35 tests in 65.391s\n\nFAILED (failures=2)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/68", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/68/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/68/events", "html_url": "https://github.com/pydata/patsy/issues/68", "id": 79465915, "node_id": "MDU6SXNzdWU3OTQ2NTkxNQ==", "number": 68, "title": "dmatrix does not work with categorical variables", "user": {"login": "fccoelho", "id": 140123, "node_id": "MDQ6VXNlcjE0MDEyMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/140123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fccoelho", "html_url": "https://github.com/fccoelho", "followers_url": "https://api.github.com/users/fccoelho/followers", "following_url": "https://api.github.com/users/fccoelho/following{/other_user}", "gists_url": "https://api.github.com/users/fccoelho/gists{/gist_id}", "starred_url": "https://api.github.com/users/fccoelho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fccoelho/subscriptions", "organizations_url": "https://api.github.com/users/fccoelho/orgs", "repos_url": "https://api.github.com/users/fccoelho/repos", "events_url": "https://api.github.com/users/fccoelho/events{/privacy}", "received_events_url": "https://api.github.com/users/fccoelho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-05-22T14:00:38Z", "updated_at": "2015-07-22T01:50:00Z", "closed_at": "2015-07-22T01:50:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following example:\n\n``` python\nimport pandas as pd\nimport patsy\n\ndata = pd.DataFrame({'a':[0,1,0,1,0,1,0,1,0,1]})\ndata.a = data.a.astype(\"category\")\ndmatrix(\"C(a)\", data)\n```\n\nleads to this error:\n\n``` python\nusr/local/lib/python3.4/dist-packages/patsy/highlevel.py in dmatrix(formula_like, data, eval_env, NA_action, return_type)\n    276     eval_env = EvalEnvironment.capture(eval_env, reference=1)\n    277     (lhs, rhs) = _do_highlevel_design(formula_like, data, eval_env,\n--> 278                                       NA_action, return_type)\n    279     if lhs.shape[1] != 0:\n    280         raise PatsyError(\"encountered outcome variables for a model \"\n\n/usr/local/lib/python3.4/dist-packages/patsy/highlevel.py in _do_highlevel_design(formula_like, data, eval_env, NA_action, return_type)\n    150         return iter([data])\n    151     builders = _try_incr_builders(formula_like, data_iter_maker, eval_env,\n--> 152                                   NA_action)\n    153     if builders is not None:\n    154         return build_design_matrices(builders, data,\n\n/usr/local/lib/python3.4/dist-packages/patsy/highlevel.py in _try_incr_builders(formula_like, data_iter_maker, eval_env, NA_action)\n     55                                        formula_like.rhs_termlist],\n     56                                       data_iter_maker,\n---> 57                                       NA_action)\n     58     else:\n     59         return None\n\n/usr/local/lib/python3.4/dist-packages/patsy/build.py in design_matrix_builders(termlists, data_iter_maker, NA_action)\n    658                                                    factor_states,\n    659                                                    data_iter_maker,\n--> 660                                                    NA_action)\n    661     # Now we need the factor evaluators, which encapsulate the knowledge of\n    662     # how to turn any given factor into a chunk of data:\n\n/usr/local/lib/python3.4/dist-packages/patsy/build.py in _examine_factor_types(factors, factor_states, data_iter_maker, NA_action)\n    427                     cat_sniffers[factor] = CategoricalSniffer(NA_action,\n    428                                                               factor.origin)\n--> 429                 done = cat_sniffers[factor].sniff(value)\n    430                 if done:\n    431                     examine_needed.remove(factor)\n\n/usr/local/lib/python3.4/dist-packages/patsy/categorical.py in sniff(self, data)\n    169         # fastpath to avoid doing an item-by-item iteration over boolean\n    170         # arrays, as requested by #44\n--> 171         if hasattr(data, \"dtype\") and np.issubdtype(data.dtype, np.bool_):\n    172             self._level_set = set([True, False])\n    173             return True\n\n/usr/local/lib/python3.4/dist-packages/numpy/core/numerictypes.py in issubdtype(arg1, arg2)\n    761     \"\"\"\n    762     if issubclass_(arg2, generic):\n--> 763         return issubclass(dtype(arg1).type, arg2)\n    764     mro = dtype(arg2).type.mro()\n    765     if len(mro) > 1:\n\nTypeError: data type not understood\n```\n\nThis must be a bug. Is there any workaround?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/61", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/61/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/61/events", "html_url": "https://github.com/pydata/patsy/issues/61", "id": 68496448, "node_id": "MDU6SXNzdWU2ODQ5NjQ0OA==", "number": 61, "title": "Provide more metadata about how coding actually occurred, at the factor level", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199690906, "node_id": "MDU6TGFiZWwxOTk2OTA5MDY=", "url": "https://api.github.com/repos/pydata/patsy/labels/statsmodels-request", "name": "statsmodels-request", "color": "5319e7", "default": false, "description": null}, {"id": 199683336, "node_id": "MDU6TGFiZWwxOTk2ODMzMzY=", "url": "https://api.github.com/repos/pydata/patsy/labels/well-defined-task-definitely-do-this", "name": "well-defined-task-definitely-do-this", "color": "009800", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-14T21:04:56Z", "updated_at": "2015-06-14T02:08:41Z", "closed_at": "2015-06-14T02:08:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In `DesignInfo`, we should provide:\n- For each factor, whether it is continuous or categorical\n- If categorical, what levels it has\n- If categorical, the `ContrastMatrix` we use for each (factor, term) pair.\n\nThis is pretty simple and obvious stuff, and useful to `statsmodels` (in particular, knowing what levels exist so you can generate all pairwise tests etc.).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/58", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/58/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/58/events", "html_url": "https://github.com/pydata/patsy/issues/58", "id": 59541371, "node_id": "MDU6SXNzdWU1OTU0MTM3MQ==", "number": 58, "title": "Malfunctionary testing in categorical.py", "user": {"login": "ppodolsky", "id": 5057878, "node_id": "MDQ6VXNlcjUwNTc4Nzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5057878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppodolsky", "html_url": "https://github.com/ppodolsky", "followers_url": "https://api.github.com/users/ppodolsky/followers", "following_url": "https://api.github.com/users/ppodolsky/following{/other_user}", "gists_url": "https://api.github.com/users/ppodolsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppodolsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppodolsky/subscriptions", "organizations_url": "https://api.github.com/users/ppodolsky/orgs", "repos_url": "https://api.github.com/users/ppodolsky/repos", "events_url": "https://api.github.com/users/ppodolsky/events{/privacy}", "received_events_url": "https://api.github.com/users/ppodolsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-03-02T20:13:42Z", "updated_at": "2015-07-22T01:50:47Z", "closed_at": "2015-07-22T01:50:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Have no idea what is testing in\n        cat = pandas.Categorical([1, 0, -1], (\"a\", \"b\"))\n        conv = categorical_to_int(cat, (\"a\", \"b\"), NAAction())\n        assert np.all(conv == [1, 0, -1])\nof test_categorical_to_int(). Need to be corrected\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/53", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/53/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/53/events", "html_url": "https://github.com/pydata/patsy/issues/53", "id": 56105475, "node_id": "MDU6SXNzdWU1NjEwNTQ3NQ==", "number": 53, "title": "Providing a unicode string to dmatrices results in a misleading error message", "user": {"login": "gnovak", "id": 3418639, "node_id": "MDQ6VXNlcjM0MTg2Mzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3418639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnovak", "html_url": "https://github.com/gnovak", "followers_url": "https://api.github.com/users/gnovak/followers", "following_url": "https://api.github.com/users/gnovak/following{/other_user}", "gists_url": "https://api.github.com/users/gnovak/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnovak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnovak/subscriptions", "organizations_url": "https://api.github.com/users/gnovak/orgs", "repos_url": "https://api.github.com/users/gnovak/repos", "events_url": "https://api.github.com/users/gnovak/events{/privacy}", "received_events_url": "https://api.github.com/users/gnovak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-01-31T01:09:26Z", "updated_at": "2015-11-07T23:47:28Z", "closed_at": "2015-11-07T23:47:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Doing this works fine:\nfoo = pd.DataFrame(dict(a=[1,2.0], b=[4,5.0]))\npatsy.dmatrices('a ~ b', foo)\n\nHowever, if the formula is given by a unicode string:\npatsy.dmatrices(u'a ~ b', foo)\n\nAn exception is raised:\nValueError: design matrix must be real-valued floating point\n\nThe exception is very misleading about the nature of the problem.  I thought an inf or nan had crept into the dataframe, but no bad values were there.\n\nOne possible fix is to send the first argument of dmatrices through the str() function:\npatsy.dmatrices(str(u'a ~ b'), foo)\n\nAnother possible fix is to raise print a different error message so that the user has some clear idea of the cause of the problem. \n\nI'm using patsy version 0.3.0\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/52", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/52/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/52/events", "html_url": "https://github.com/pydata/patsy/issues/52", "id": 54200470, "node_id": "MDU6SXNzdWU1NDIwMDQ3MA==", "number": 52, "title": "Check for None in __doc__ before changing it.", "user": {"login": "pbrod", "id": 1193469, "node_id": "MDQ6VXNlcjExOTM0Njk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1193469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pbrod", "html_url": "https://github.com/pbrod", "followers_url": "https://api.github.com/users/pbrod/followers", "following_url": "https://api.github.com/users/pbrod/following{/other_user}", "gists_url": "https://api.github.com/users/pbrod/gists{/gist_id}", "starred_url": "https://api.github.com/users/pbrod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pbrod/subscriptions", "organizations_url": "https://api.github.com/users/pbrod/orgs", "repos_url": "https://api.github.com/users/pbrod/repos", "events_url": "https://api.github.com/users/pbrod/events{/privacy}", "received_events_url": "https://api.github.com/users/pbrod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-01-13T14:38:22Z", "updated_at": "2015-01-13T19:23:09Z", "closed_at": "2015-01-13T19:23:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python code byte-compiled with -OO has doc-strings stripped out.\n\nThis creates problems when compiling different packages which changes the doc-strings by doing something like this:\ndoc += \"additional text\"\n(when the docstring is 'None', this will fail).\n\nmgcv_cubic_splines.py does this and thus creates problems when trying to bytecompile it with the -OO option using cx_freeze/py2exe.\n\nIn order to fix this, I would propose to change all the lines  which say:\n**doc** += CubicRegressionSpline.common_doc \nwith\n**doc** =**doc** +CubicRegressionSpline.common_doc if **doc** else ''\n\nSee also:\nhttp://bugs.python.org/issue23189#\nhttp://stackoverflow.com/questions/22299532/unsupported-operand-types-for-nonetype-and-str-winappdbg-error-after-c\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/51", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/51/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/51/events", "html_url": "https://github.com/pydata/patsy/issues/51", "id": 54004591, "node_id": "MDU6SXNzdWU1NDAwNDU5MQ==", "number": 51, "title": "Idiom question for dataframes + test data", "user": {"login": "kyleabeauchamp", "id": 1900459, "node_id": "MDQ6VXNlcjE5MDA0NTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1900459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyleabeauchamp", "html_url": "https://github.com/kyleabeauchamp", "followers_url": "https://api.github.com/users/kyleabeauchamp/followers", "following_url": "https://api.github.com/users/kyleabeauchamp/following{/other_user}", "gists_url": "https://api.github.com/users/kyleabeauchamp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyleabeauchamp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyleabeauchamp/subscriptions", "organizations_url": "https://api.github.com/users/kyleabeauchamp/orgs", "repos_url": "https://api.github.com/users/kyleabeauchamp/repos", "events_url": "https://api.github.com/users/kyleabeauchamp/events{/privacy}", "received_events_url": "https://api.github.com/users/kyleabeauchamp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-11T20:57:04Z", "updated_at": "2015-01-12T16:24:30Z", "closed_at": "2015-01-12T16:24:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a workflow where I want to construct a design matrix from some training data that happens to be stored in a pandas dataframe.  I then want to be able to take a _new_ pandas dataframe and apply the same transformation, so that I can have a pure numpy representation of test dataset with the same category indices.  I suppose an error would be raised if my training dataset has categorical values that were missing in the original dmatrix.  \n\nI can't seem to figure out the most idiomatic way to achieve this.  \n\nMy big picture workflow looks something like this:\n1.  X = dmatrix(\"y ~ v0 \\* v1\", train_data, return_type=\"dataframe\")\n2.  X_sparse = scipy.sparse.csr_matrix(X.values)\n3.  fit a custom model (using pymc2, actually) with the sparse representation of the data\n4.  X_test = X.transform_into_basis(test_data)\n5.  X_test_sparse = scipy.sparse.csr_matrix(X_test.values)\n6.  X_test = model.predict(X_test_sparse)\n\nWhat I need is a clean way to transform / featurize my test dataset.  I suppose I'd also love for the API to look something like the sklearn `model.transform()` api.\n\nDoes this exist?  Can someone point me in the right direction?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/50", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/50/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/50/events", "html_url": "https://github.com/pydata/patsy/issues/50", "id": 53677127, "node_id": "MDU6SXNzdWU1MzY3NzEyNw==", "number": 50, "title": "Using `=` instead of `~` in a formula", "user": {"login": "joonro", "id": 1063143, "node_id": "MDQ6VXNlcjEwNjMxNDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1063143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joonro", "html_url": "https://github.com/joonro", "followers_url": "https://api.github.com/users/joonro/followers", "following_url": "https://api.github.com/users/joonro/following{/other_user}", "gists_url": "https://api.github.com/users/joonro/gists{/gist_id}", "starred_url": "https://api.github.com/users/joonro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joonro/subscriptions", "organizations_url": "https://api.github.com/users/joonro/orgs", "repos_url": "https://api.github.com/users/joonro/repos", "events_url": "https://api.github.com/users/joonro/events{/privacy}", "received_events_url": "https://api.github.com/users/joonro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-01-07T20:19:58Z", "updated_at": "2015-01-08T07:17:27Z", "closed_at": "2015-01-08T00:12:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was wondering if using `~` instead of `=` in a formula string is to be compatible with the R formula syntax, or because using the latter will break something. If it won't break anything, could we optionally use `=` in the place of `~`? \n\nI know it is not a big deal, but I think a model statement with `=` would look more natural. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/49", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/49/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/49/events", "html_url": "https://github.com/pydata/patsy/issues/49", "id": 46477477, "node_id": "MDU6SXNzdWU0NjQ3NzQ3Nw==", "number": 49, "title": "Errors thrown with incr_dbuilders()", "user": {"login": "nkconnor", "id": 6473809, "node_id": "MDQ6VXNlcjY0NzM4MDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6473809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nkconnor", "html_url": "https://github.com/nkconnor", "followers_url": "https://api.github.com/users/nkconnor/followers", "following_url": "https://api.github.com/users/nkconnor/following{/other_user}", "gists_url": "https://api.github.com/users/nkconnor/gists{/gist_id}", "starred_url": "https://api.github.com/users/nkconnor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nkconnor/subscriptions", "organizations_url": "https://api.github.com/users/nkconnor/orgs", "repos_url": "https://api.github.com/users/nkconnor/repos", "events_url": "https://api.github.com/users/nkconnor/events{/privacy}", "received_events_url": "https://api.github.com/users/nkconnor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-10-22T06:40:38Z", "updated_at": "2015-05-03T22:40:30Z", "closed_at": "2015-05-03T22:40:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running a logistic regression and having trouble using Patsy's API to prepare the data when it is bigger than a small sample.\n\nUsing the `dmatrices` function directly on a DataFrame, I am left with this abrupt error ( please note, I spun up an EC2 with 300GB of RAM after encountering this on my laptop, and got the same error ):\n\n```\nTraceback (most recent call last):\nFile \"My_File.py\", line 22, in <module>\n   df, return_type=\"dataframe\")\nFile \"/root/anaconda/lib/python2.7/site-packages/patsy/highlevel.py\", line 297, in dmatrices\n NA_action, return_type)\nFile \"/root/anaconda/lib/python2.7/site-packages/patsy/highlevel.py\", line 156, in do_highlevel_design\nreturn_type=return_type)\nFile \"/root/anaconda/lib/python2.7/site-packages/patsy/build.py\", line 989, in build_design_matrices\nresults.append(builder._build(evaluator_to_values, dtype))\nFile \"/root/anaconda/lib/python2.7/site-packages/patsy/build.py\", line 821, in _build\nm = DesignMatrix(np.empty((num_rows, self.total_columns), dtype=dtype),\nMemoryError\n```\n\nSo, I combed through [Patsy's docs](https://patsy.readthedocs.org/en/latest/API-reference.html) and found this gem:\n\n```\npatsy.incr_dbuilder(formula_like, data_iter_maker, eval_env=0)\n    Construct a design matrix builder incrementally from a large data set.\n```\n\nHowever, the method is sparsely documented, and the source code is largely uncommented.\n\nI have arrived at this code:\n\n```\ndef iter_maker():\n    with open(\"test.tsv\", \"r\") as f:\n        reader = csv.DictReader(f, delimiter=\"\\t\")\n        for row in reader:\n            yield(row)\n\n\ny, dta = incr_dbuilders(\"s ~ C(x) + C(y):C(rgh) + \\\nC(z):C(f) + C(r):C(p) + C(q):C(w) + \\\nC(zr):C(rt) + C(ff):C(djjj) + C(hh):C(tt) + \\\nC(bb):lat + C(jj):lng + C(ee):C(bb) + C(qq):C(uu)\",\n        iter_maker)\n\ndf = dmatrix(dta, {}, 0, \"drop\", return_type=\"dataframe\")\n```\n\nbut I receive `PatsyError: Error evaluating factor: NameError: name 'ff' is not defined`\n\nThis is being thrown because _try_incr_builders (called from dmatrix) is returning None [on line 151 of highlevel.py](https://github.com/pydata/patsy/blob/master/patsy/highlevel.py)\n\nWhat is the correct way to use these Patsy functions to prepare my data? Any examples or guidance you may have will be helpful.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/45", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/45/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/45/events", "html_url": "https://github.com/pydata/patsy/issues/45", "id": 35373992, "node_id": "MDU6SXNzdWUzNTM3Mzk5Mg==", "number": 45, "title": "0.2.2 or 0.3(?) release please", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars3.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2014-06-10T11:47:39Z", "updated_at": "2014-07-18T23:54:58Z", "closed_at": "2014-07-18T23:45:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Finally echo of API change in Ipython 2.0 reached Debian:\nhttps://bugs.debian.org/cgi-bin/bugreport.cgi?bug=751045\nso I wondered if I should patch or consider taking current master snapshot or just wait for a new release... ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/41", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/41/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/41/events", "html_url": "https://github.com/pydata/patsy/issues/41", "id": 32900842, "node_id": "MDU6SXNzdWUzMjkwMDg0Mg==", "number": 41, "title": "setup.py develop doesn't work?", "user": {"login": "jseabold", "id": 296164, "node_id": "MDQ6VXNlcjI5NjE2NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseabold", "html_url": "https://github.com/jseabold", "followers_url": "https://api.github.com/users/jseabold/followers", "following_url": "https://api.github.com/users/jseabold/following{/other_user}", "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions", "organizations_url": "https://api.github.com/users/jseabold/orgs", "repos_url": "https://api.github.com/users/jseabold/repos", "events_url": "https://api.github.com/users/jseabold/events{/privacy}", "received_events_url": "https://api.github.com/users/jseabold/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-05-06T15:01:42Z", "updated_at": "2014-05-06T15:05:59Z", "closed_at": "2014-05-06T15:05:59Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I'm a bit baffled by this. Is this a local problem?\n\n```\n|16 $ python setup.py develop\n/usr/lib/python2.7/distutils/dist.py:267: UserWarning: Unknown distribution option: 'install_requires'\nwarnings.warn(msg)\nusage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\nor: setup.py --help [cmd1 cmd2 ...]\nor: setup.py --help-commands\nor: setup.py cmd --help\n\nerror: invalid command 'develop'\n```\n\nSetuptools version\n\n```\n>>> import setuptools\n>>> print(setuptools.__version__)\n3.4.4\n```\n\nOn\n\n```\n|20 $ python --version\nPython 2.7.5+\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/39", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/39/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/39/events", "html_url": "https://github.com/pydata/patsy/issues/39", "id": 32515019, "node_id": "MDU6SXNzdWUzMjUxNTAxOQ==", "number": 39, "title": "statistics should get more tests", "user": {"login": "jankatins", "id": 890156, "node_id": "MDQ6VXNlcjg5MDE1Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jankatins", "html_url": "https://github.com/jankatins", "followers_url": "https://api.github.com/users/jankatins/followers", "following_url": "https://api.github.com/users/jankatins/following{/other_user}", "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}", "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions", "organizations_url": "https://api.github.com/users/jankatins/orgs", "repos_url": "https://api.github.com/users/jankatins/repos", "events_url": "https://api.github.com/users/jankatins/events{/privacy}", "received_events_url": "https://api.github.com/users/jankatins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-04-30T08:16:42Z", "updated_at": "2014-04-30T11:11:33Z", "closed_at": "2014-04-30T09:23:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was just looking for a nice example of stat_\\* in the tests (useable in a tweet...) and found mostly the *bline ones. stat_density and co should also get test cases.\n\nIdeas for testcases: http://docs.ggplot2.org/0.9.3.1/index.html -> Statistics\n\ngeom_smooth also needs tests\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/37", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/37/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/37/events", "html_url": "https://github.com/pydata/patsy/issues/37", "id": 32385836, "node_id": "MDU6SXNzdWUzMjM4NTgzNg==", "number": 37, "title": "Support for whitespace in column names", "user": {"login": "CamDavidsonPilon", "id": 884032, "node_id": "MDQ6VXNlcjg4NDAzMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/884032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CamDavidsonPilon", "html_url": "https://github.com/CamDavidsonPilon", "followers_url": "https://api.github.com/users/CamDavidsonPilon/followers", "following_url": "https://api.github.com/users/CamDavidsonPilon/following{/other_user}", "gists_url": "https://api.github.com/users/CamDavidsonPilon/gists{/gist_id}", "starred_url": "https://api.github.com/users/CamDavidsonPilon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CamDavidsonPilon/subscriptions", "organizations_url": "https://api.github.com/users/CamDavidsonPilon/orgs", "repos_url": "https://api.github.com/users/CamDavidsonPilon/repos", "events_url": "https://api.github.com/users/CamDavidsonPilon/events{/privacy}", "received_events_url": "https://api.github.com/users/CamDavidsonPilon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-04-28T18:30:33Z", "updated_at": "2014-04-30T08:00:05Z", "closed_at": "2014-04-28T21:40:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Maybe I'm doing something wrong, but these example fails:\n\n```\ndf = pd.DataFrame( np.arange(10), columns = ['test data'] )\n\npatsy.dmatrix('test data', df )\n#SyntaxError: unexpected EOF while parsing\n\npatsy.dmatrix('\"test data\"', df )\n#PatsyError: categorical data must be an iterable container\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/35", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/35/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/35/events", "html_url": "https://github.com/pydata/patsy/issues/35", "id": 28892926, "node_id": "MDU6SXNzdWUyODg5MjkyNg==", "number": 35, "title": "Docs CSS issue", "user": {"login": "jseabold", "id": 296164, "node_id": "MDQ6VXNlcjI5NjE2NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseabold", "html_url": "https://github.com/jseabold", "followers_url": "https://api.github.com/users/jseabold/followers", "following_url": "https://api.github.com/users/jseabold/following{/other_user}", "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions", "organizations_url": "https://api.github.com/users/jseabold/orgs", "repos_url": "https://api.github.com/users/jseabold/repos", "events_url": "https://api.github.com/users/jseabold/events{/privacy}", "received_events_url": "https://api.github.com/users/jseabold/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-03-06T16:32:19Z", "updated_at": "2014-03-08T02:41:23Z", "closed_at": "2014-03-08T02:41:23Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Is this just me or are the stylesheets not working / uploaded?\n\nhttp://patsy.readthedocs.org/en/latest/\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/33", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/33/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/33/events", "html_url": "https://github.com/pydata/patsy/issues/33", "id": 25445859, "node_id": "MDU6SXNzdWUyNTQ0NTg1OQ==", "number": 33, "title": "Header in *.py files mention COPYING instead of LICENSE.txt", "user": {"login": "sergiopasra", "id": 890104, "node_id": "MDQ6VXNlcjg5MDEwNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/890104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergiopasra", "html_url": "https://github.com/sergiopasra", "followers_url": "https://api.github.com/users/sergiopasra/followers", "following_url": "https://api.github.com/users/sergiopasra/following{/other_user}", "gists_url": "https://api.github.com/users/sergiopasra/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergiopasra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergiopasra/subscriptions", "organizations_url": "https://api.github.com/users/sergiopasra/orgs", "repos_url": "https://api.github.com/users/sergiopasra/repos", "events_url": "https://api.github.com/users/sergiopasra/events{/privacy}", "received_events_url": "https://api.github.com/users/sergiopasra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-01-11T16:12:22Z", "updated_at": "2014-01-11T16:45:41Z", "closed_at": "2014-01-11T16:44:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, COPYING was renamed to LICENSE.txt in 625317cddbc1d26e7da7392600c4f17178edb055 but the header of *.py files still mention it\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/32", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/32/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/32/events", "html_url": "https://github.com/pydata/patsy/issues/32", "id": 25437957, "node_id": "MDU6SXNzdWUyNTQzNzk1Nw==", "number": 32, "title": "clarify that 2to3 is needed for Python 3 support", "user": {"login": "holocronweaver", "id": 1024369, "node_id": "MDQ6VXNlcjEwMjQzNjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1024369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/holocronweaver", "html_url": "https://github.com/holocronweaver", "followers_url": "https://api.github.com/users/holocronweaver/followers", "following_url": "https://api.github.com/users/holocronweaver/following{/other_user}", "gists_url": "https://api.github.com/users/holocronweaver/gists{/gist_id}", "starred_url": "https://api.github.com/users/holocronweaver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/holocronweaver/subscriptions", "organizations_url": "https://api.github.com/users/holocronweaver/orgs", "repos_url": "https://api.github.com/users/holocronweaver/repos", "events_url": "https://api.github.com/users/holocronweaver/events{/privacy}", "received_events_url": "https://api.github.com/users/holocronweaver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-01-11T05:14:29Z", "updated_at": "2014-01-11T20:35:45Z", "closed_at": "2014-01-11T20:35:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "From what I can tell, this project requires 2to3 to create a Python 3 build, but this is not stated in the README.  Please clarify this, preferably including an example coversion like:\n`2to3 --output-dir=patsy3 -W -n patsy`\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/25", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/25/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/25/events", "html_url": "https://github.com/pydata/patsy/issues/25", "id": 20579905, "node_id": "MDU6SXNzdWUyMDU3OTkwNQ==", "number": 25, "title": "Capture only the values of referenced variables in formula namespace", "user": {"login": "njsmith", "id": 609896, "node_id": "MDQ6VXNlcjYwOTg5Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njsmith", "html_url": "https://github.com/njsmith", "followers_url": "https://api.github.com/users/njsmith/followers", "following_url": "https://api.github.com/users/njsmith/following{/other_user}", "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions", "organizations_url": "https://api.github.com/users/njsmith/orgs", "repos_url": "https://api.github.com/users/njsmith/repos", "events_url": "https://api.github.com/users/njsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/njsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-10-06T13:35:07Z", "updated_at": "2015-05-20T02:34:04Z", "closed_at": "2015-05-20T02:34:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Right now when creating a formula, we capture the namespace itself.\n\nThis can pin large variables in memory, and presents an obstacle to serializiing model designs (#26).\n\nWhat we should do is to figure out which variables from the enclosing namespace are actually used, and then capture only those.\n\nThe klugey way to do this is to observe which variables are accessed when evaluating the formula the first time, and then save only those.\n\nThe more principle, reliable, and modular way is to use `ast` to parse the formula, and then extract all bare variable references. (Or maybe we should just re-use the token-based implementation of this.) Those which are found not in the data, and not in the builtins, but in the environment, should get stashed to use for actual evaluation.\n\nThis isn't just an optimization, it does produce a user-visible effect: if some variable name referenced in the formula is rebound after the formula is created, then previously the new value would be used in future predictions, but after this change, the old value will continue to be used.\n\nThis is unaesthetic (I think PHP's so-called \"closures\" work this way?), but in our case it's actually for the best -- ideally we'd save a read-only snapshot of the environment, period, which is not tractable. But this moves us slightly in that direction, so, okay.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/23", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/23/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/23/events", "html_url": "https://github.com/pydata/patsy/issues/23", "id": 18448159, "node_id": "MDU6SXNzdWUxODQ0ODE1OQ==", "number": 23, "title": "Feature Request: bivariate splines", "user": {"login": "aflaxman", "id": 51236, "node_id": "MDQ6VXNlcjUxMjM2", "avatar_url": "https://avatars0.githubusercontent.com/u/51236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aflaxman", "html_url": "https://github.com/aflaxman", "followers_url": "https://api.github.com/users/aflaxman/followers", "following_url": "https://api.github.com/users/aflaxman/following{/other_user}", "gists_url": "https://api.github.com/users/aflaxman/gists{/gist_id}", "starred_url": "https://api.github.com/users/aflaxman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aflaxman/subscriptions", "organizations_url": "https://api.github.com/users/aflaxman/orgs", "repos_url": "https://api.github.com/users/aflaxman/repos", "events_url": "https://api.github.com/users/aflaxman/events{/privacy}", "received_events_url": "https://api.github.com/users/aflaxman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-08-23T00:28:38Z", "updated_at": "2014-07-16T21:07:23Z", "closed_at": "2014-07-16T20:41:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to use bivariate splines similarly to the way you have patsy.spline working already, e.g.\n`z ~ 1 + bispline(x, y, knots_x, knots_y)`\nSince scipy includes `scipy.interpolate.bisplrep` and `scipy.interpolate.bisplev`, you have already shown the way, and I can try to follow it and send a pull request if it goes well. Would this be of interest?\n\nIs there an implementation of bivariate splines in R that you would like patsy to follow in notation?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/22", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/22/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/22/events", "html_url": "https://github.com/pydata/patsy/issues/22", "id": 18039953, "node_id": "MDU6SXNzdWUxODAzOTk1Mw==", "number": 22, "title": "Error in dmatrix with missing data in pandas Categoricals & return type=dataframe", "user": {"login": "hmgaudecker", "id": 158456, "node_id": "MDQ6VXNlcjE1ODQ1Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/158456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hmgaudecker", "html_url": "https://github.com/hmgaudecker", "followers_url": "https://api.github.com/users/hmgaudecker/followers", "following_url": "https://api.github.com/users/hmgaudecker/following{/other_user}", "gists_url": "https://api.github.com/users/hmgaudecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/hmgaudecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hmgaudecker/subscriptions", "organizations_url": "https://api.github.com/users/hmgaudecker/orgs", "repos_url": "https://api.github.com/users/hmgaudecker/repos", "events_url": "https://api.github.com/users/hmgaudecker/events{/privacy}", "received_events_url": "https://api.github.com/users/hmgaudecker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-08-14T08:13:29Z", "updated_at": "2013-08-22T04:06:24Z", "closed_at": "2013-08-20T15:40:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just exploring patsy seriously for the first time -- instant love affair! Thanks a lot! \n\nFound one little bug (patsy 0.2.0, pandas 0.12) as described in issue title. Minimal example taken from the first line of the docs and slightly adjusted to reproduce the behaviour. Seems like the missing data should be dropped from some index but is not. Or am I missing something?\n\n```\nIn [1]: from patsy import dmatrix, demo_data\nIn [2]: import pandas as pd\nIn [3]: import numpy as np\n\nIn [4]: data = pd.DataFrame(demo_data(\"a\", \"b\", \"x1\", \"x2\", \"y\"))\n\nIn [5]: data['a'].iloc[0] = np.nan\n\nIn [6]: dmatrix('a', data, return_type='dataframe')\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-6-3ab0bd40ae1e> in <module>()\n----> 1 dmatrix('a', data, return_type='dataframe')\n\n/home/xxx/anaconda/envs/py33/lib/python3.3/site-packages/patsy/highlevel.py in dmatrix(formula_like, data, eval_env, NA_action, return_type)\n    276     eval_env = EvalEnvironment.capture(eval_env, reference=1)\n    277     (lhs, rhs) = _do_highlevel_design(formula_like, data, eval_env,\n--> 278                                       NA_action, return_type)\n    279     if lhs.shape[1] != 0:\n    280         raise PatsyError(\"encountered outcome variables for a model \"\n\n/home/xxx/anaconda/envs/py33/lib/python3.3/site-packages/patsy/highlevel.py in _do_highlevel_design(formula_like, data, eval_env, NA_action, return_type)\n    154         return build_design_matrices(builders, data,\n    155                                      NA_action=NA_action,\n--> 156                                      return_type=return_type)\n    157     else:\n    158         # No builders, but maybe we can still get matrices\n\n/home/xxx/anaconda/envs/py33/lib/python3.3/site-packages/patsy/build.py in build_design_matrices(builders, data, NA_action, return_type, dtype)\n    954             matrices[i] = pandas.DataFrame(matrix,\n    955                                            columns=di.column_names,\n--> 956                                            index=pandas_index)\n    957             matrices[i].design_info = di\n    958     return matrices\n\n/home/xxx/anaconda/envs/py33/lib/python3.3/site-packages/pandas/core/frame.py in __init__(self, data, index, columns, dtype, copy)\n    413             else:\n    414                 mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n--> 415                                          copy=copy)\n    416         elif isinstance(data, list):\n    417             if len(data) > 0:\n\n/home/xxx/anaconda/envs/py33/lib/python3.3/site-packages/pandas/core/frame.py in _init_ndarray(self, values, index, columns, dtype, copy)\n    559             columns = _ensure_index(columns)\n    560 \n--> 561         return create_block_manager_from_blocks([ values.T ], [ columns, index ])\n    562 \n    563     def _wrap_array(self, arr, axes, copy=False):\n\n/home/xxx/anaconda/envs/py33/lib/python3.3/site-packages/pandas/core/internals.py in create_block_manager_from_blocks(blocks, axes)\n   2233         blocks = [ getattr(b,'values',b) for b in blocks ]\n   2234         tot_items = sum(b.shape[0] for b in blocks)\n-> 2235         construction_error(tot_items,blocks[0].shape[1:],axes)\n   2236 \n   2237 def create_block_manager_from_arrays(arrays, names, axes):\n\n/home/xxx/anaconda/envs/py33/lib/python3.3/site-packages/pandas/core/internals.py in construction_error(tot_items, block_shape, axes)\n   2215     raise ValueError(\"Shape of passed values is %s, indices imply %s\" % (\n   2216             tuple(map(int, [tot_items] + list(block_shape))),\n-> 2217             tuple(map(int, [len(ax) for ax in axes]))))\n   2218 \n   2219 \n\nValueError: Shape of passed values is (0, 8), indices imply (0, 7)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/21", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/21/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/21/events", "html_url": "https://github.com/pydata/patsy/issues/21", "id": 15959023, "node_id": "MDU6SXNzdWUxNTk1OTAyMw==", "number": 21, "title": "polynomials", "user": {"login": "vincentarelbundock", "id": 987057, "node_id": "MDQ6VXNlcjk4NzA1Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/987057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincentarelbundock", "html_url": "https://github.com/vincentarelbundock", "followers_url": "https://api.github.com/users/vincentarelbundock/followers", "following_url": "https://api.github.com/users/vincentarelbundock/following{/other_user}", "gists_url": "https://api.github.com/users/vincentarelbundock/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincentarelbundock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincentarelbundock/subscriptions", "organizations_url": "https://api.github.com/users/vincentarelbundock/orgs", "repos_url": "https://api.github.com/users/vincentarelbundock/repos", "events_url": "https://api.github.com/users/vincentarelbundock/events{/privacy}", "received_events_url": "https://api.github.com/users/vincentarelbundock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-06-25T03:00:15Z", "updated_at": "2013-06-25T04:00:16Z", "closed_at": "2013-06-25T04:00:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice if this behaved as expected: \n\ny ~ x**2\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/17", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/17/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/17/events", "html_url": "https://github.com/pydata/patsy/issues/17", "id": 13093478, "node_id": "MDU6SXNzdWUxMzA5MzQ3OA==", "number": 17, "title": "Bug parsing formulas with with \"[]\" in feature names", "user": {"login": "szs8", "id": 112979, "node_id": "MDQ6VXNlcjExMjk3OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/112979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/szs8", "html_url": "https://github.com/szs8", "followers_url": "https://api.github.com/users/szs8/followers", "following_url": "https://api.github.com/users/szs8/following{/other_user}", "gists_url": "https://api.github.com/users/szs8/gists{/gist_id}", "starred_url": "https://api.github.com/users/szs8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/szs8/subscriptions", "organizations_url": "https://api.github.com/users/szs8/orgs", "repos_url": "https://api.github.com/users/szs8/repos", "events_url": "https://api.github.com/users/szs8/events{/privacy}", "received_events_url": "https://api.github.com/users/szs8/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-04-11T22:39:47Z", "updated_at": "2013-04-12T12:54:08Z", "closed_at": "2013-04-12T08:20:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have features with [] in their names like \"features[1]\" and that confuses the parser. Is there any way to escape it?\n\n``` python\nIn [164]: data = demo_data(\"a\", \"b\", \"x1\", \"x2\", \"x[5]\")\n\nIn [165]: dmatrices(\"a ~ x[5]\", data)\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n<ipython-input-165-1a6534f0f134> in <module>()\n----> 1 dmatrices(\"a ~ x[5]\", data)\n\n/Users/xxx/lib/python2.7/site-packages/patsy-0.1.0_dev-py2.7.egg/patsy/highlevel.pyc in dmatrices(formula_like, data, eval_env, return_type)\n    281     \"\"\"\n    282     eval_env = EvalEnvironment.capture(eval_env, reference=1)\n--> 283     (lhs, rhs) = _do_highlevel_design(formula_like, data, eval_env, return_type)\n    284     if lhs.shape[1] == 0:\n    285         raise PatsyError(\"model is missing required outcome variables\")\n\n/Users/xxx/lib/python2.7/site-packages/patsy-0.1.0_dev-py2.7.egg/patsy/highlevel.pyc in _do_highlevel_design(formula_like, data, eval_env, return_type)\n    145     def data_iter_maker():\n    146         return iter([data])\n--> 147     builders = _try_incr_builders(formula_like, data_iter_maker, eval_env)\n    148     if builders is not None:\n    149         return build_design_matrices(builders, data,\n\n/Users/xxx/lib/python2.7/site-packages/patsy-0.1.0_dev-py2.7.egg/patsy/highlevel.pyc in _try_incr_builders(formula_like, data_iter_maker, eval_env)\n     59         return design_matrix_builders([formula_like.lhs_termlist,\n     60                                        formula_like.rhs_termlist],\n---> 61                                       data_iter_maker)\n     62     else:\n     63         return None\n\n/Users/xxx/lib/python2.7/site-packages/patsy-0.1.0_dev-py2.7.egg/patsy/build.pyc in design_matrix_builders(termlists, data_iter_maker)\n    691      cat_postprocessors) = _examine_factor_types(all_factors,\n    692                                                  factor_states,\n--> 693                                                  data_iter_maker)\n    694     # Now we need the factor evaluators, which encapsulate the knowledge of\n    695     # how to turn any given factor into a chunk of data:\n\n/Users/xxx/lib/python2.7/site-packages/patsy-0.1.0_dev-py2.7.egg/patsy/build.pyc in _examine_factor_types(factors, factor_states, data_iter_maker)\n    441             break\n    442         for factor in list(examine_needed):\n--> 443             value = factor.eval(factor_states[factor], data)\n    444             if isinstance(value, Categorical):\n    445                 postprocessor = CategoricalTransform(levels=value.levels)\n\n/Users/xxx/lib/python2.7/site-packages/patsy-0.1.0_dev-py2.7.egg/patsy/eval.pyc in eval(self, memorize_state, data)\n    471     #    http://nedbatchelder.com/blog/200711/rethrowing_exceptions_in_python.html\n    472     def eval(self, memorize_state, data):\n--> 473         return self._eval(memorize_state[\"eval_code\"], memorize_state, data)\n    474\n    475 def test_EvalFactor_basics():\n\n/Users/xxx/lib/python2.7/site-packages/patsy-0.1.0_dev-py2.7.egg/patsy/eval.pyc in _eval(self, code, memorize_state, data)\n    454     def _eval(self, code, memorize_state, data):\n    455         inner_namespace = VarLookupDict([data, memorize_state[\"transforms\"]])\n--> 456         return self._eval_env.eval(code, inner_namespace=inner_namespace)\n    457\n    458     def memorize_chunk(self, state, which_pass, data):\n\n/Users/xxx/lib/python2.7/site-packages/patsy-0.1.0_dev-py2.7.egg/patsy/eval.pyc in eval(self, expr, source_name, inner_namespace)\n    119         code = compile(expr, source_name, \"eval\", self.flags, False)\n    120         return eval(code, {}, VarLookupDict([inner_namespace]\n--> 121                                             + self._namespaces))\n    122\n    123     @classmethod\n\n<string> in <module>()\n\nNameError: name 'x' is not defined\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/15", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/15/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/15/events", "html_url": "https://github.com/pydata/patsy/issues/15", "id": 12186001, "node_id": "MDU6SXNzdWUxMjE4NjAwMQ==", "number": 15, "title": "Non standard python name error (unicode or invalid names)", "user": {"login": "EnricoGiampieri", "id": 1419337, "node_id": "MDQ6VXNlcjE0MTkzMzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1419337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EnricoGiampieri", "html_url": "https://github.com/EnricoGiampieri", "followers_url": "https://api.github.com/users/EnricoGiampieri/followers", "following_url": "https://api.github.com/users/EnricoGiampieri/following{/other_user}", "gists_url": "https://api.github.com/users/EnricoGiampieri/gists{/gist_id}", "starred_url": "https://api.github.com/users/EnricoGiampieri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EnricoGiampieri/subscriptions", "organizations_url": "https://api.github.com/users/EnricoGiampieri/orgs", "repos_url": "https://api.github.com/users/EnricoGiampieri/repos", "events_url": "https://api.github.com/users/EnricoGiampieri/events{/privacy}", "received_events_url": "https://api.github.com/users/EnricoGiampieri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-03-19T15:38:40Z", "updated_at": "2013-03-20T13:44:34Z", "closed_at": "2013-03-20T13:44:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use ptsy almost everyday trough the statsmodels library. There is a little catch that hit me here and there, and it's about pandas dataframe with column name that are written with non ascii characters or that are not valid python names.\n\nIn the first case I obtain an UnicodeError saying that it can't convert the special character to a proper ascii value. \n\ntake for example this code:\n\n```\nbad_df = pd.DataFrame({u'x\u00e8':randn(10), u'x2': randn(10)})\ndmatrices(u\"x\u00e8 ~ x2 \", bad_df)\n```\n\nThis can be due to some internal conversion to a simple string instead of unicode. This looks trivial, but in Europe we use a lot of special characters and this force me to \"reshape\" all the dataset beforehand in a very error-prone job. I know this is an issue of python 2.7 and probably won't appear in python 3.x, but I cannot do the switch yet.\n\nThe second case is a lot more tricky and without an obvious solution. take this dataframe:\n\n```\nbad_df2 = pd.DataFrame({'x 1':randn(10), 'x 2': randn(10)})\n```\n\nThe names `\"x 1\"` and `\"x 2\"` cannot be used as it is, forcing again to make a lot of conversion for alla special kind of characters mangling the names of all columns. Would it be possible to implement a special case to pass the name of the columns as a string (inside the formula string) and let patsy evaluate it as a `LookupFactor`? With this kind of solution the model could look like this:\n\n```\n\" 'x 1' ~ 'x 2'  \"\n```\n\nIt's not beautiful, but shouldn't create any kind of ambiguity and still let us use a more general set of meaningful names\n\nThank you very much for your hard work!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/12", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/12/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/12/events", "html_url": "https://github.com/pydata/patsy/issues/12", "id": 8142060, "node_id": "MDU6SXNzdWU4MTQyMDYw", "number": 12, "title": "Patsy imports IPython", "user": {"login": "wesm", "id": 329591, "node_id": "MDQ6VXNlcjMyOTU5MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesm", "html_url": "https://github.com/wesm", "followers_url": "https://api.github.com/users/wesm/followers", "following_url": "https://api.github.com/users/wesm/following{/other_user}", "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesm/subscriptions", "organizations_url": "https://api.github.com/users/wesm/orgs", "repos_url": "https://api.github.com/users/wesm/repos", "events_url": "https://api.github.com/users/wesm/events{/privacy}", "received_events_url": "https://api.github.com/users/wesm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2012-11-06T15:28:31Z", "updated_at": "2013-01-12T18:59:52Z", "closed_at": "2012-11-06T17:12:45Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Is this necessary?\n\n```\n>>> import sys\n>>> 'IPython' in sys.modules\nFalse\n>>> import patsy\n>>> 'IPython' in sys.modules\nTrue\n```\n\ncc @changhiskhan. this was causing downstream issues in pandas testing where some tests were skipped when IPython was imported ( to prevent the test suite from messing up an interactive session with plot windows, etc.)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/11", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/11/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/11/events", "html_url": "https://github.com/pydata/patsy/issues/11", "id": 7971400, "node_id": "MDU6SXNzdWU3OTcxNDAw", "number": 11, "title": "Improve error message for unexpected categorical level", "user": {"login": "jseabold", "id": 296164, "node_id": "MDQ6VXNlcjI5NjE2NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseabold", "html_url": "https://github.com/jseabold", "followers_url": "https://api.github.com/users/jseabold/followers", "following_url": "https://api.github.com/users/jseabold/following{/other_user}", "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions", "organizations_url": "https://api.github.com/users/jseabold/orgs", "repos_url": "https://api.github.com/users/jseabold/repos", "events_url": "https://api.github.com/users/jseabold/events{/privacy}", "received_events_url": "https://api.github.com/users/jseabold/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2012-10-30T15:36:46Z", "updated_at": "2012-10-30T18:30:54Z", "closed_at": "2012-10-30T18:30:54Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Parking this here so I don't forget about it. The following error message is a little obscure. I think it could be improved (from the statsmodels perspective) if object -> observation and if it also gave the factor name that caused the problem. E.g.,\n\nObservation with level 4 in C(X) does not match any of the expected levels.\n\n```\nfrom patsy import build_design_matrices, dmatrix\nfrom patsy import EvalEnvironment\n\nenv = EvalEnvironment.capture()\n\ndata = {\"X\" : [0,1,2,3], \"Y\" : [1,2,3,4]}\nformula = \"C(X) + Y\"\nnew_data = {\"X\" : [0,0,1,2,3,3,4], \"Y\" : [1,2,3,4,5,6,7]}\ninfo = dmatrix(formula, data)\nbuild_design_matrices([info.design_info.builder], new_data)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/9", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/9/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/9/events", "html_url": "https://github.com/pydata/patsy/issues/9", "id": 7337472, "node_id": "MDU6SXNzdWU3MzM3NDcy", "number": 9, "title": "BUILD: please rename changes into License", "user": {"login": "timmie", "id": 11860, "node_id": "MDQ6VXNlcjExODYw", "avatar_url": "https://avatars1.githubusercontent.com/u/11860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timmie", "html_url": "https://github.com/timmie", "followers_url": "https://api.github.com/users/timmie/followers", "following_url": "https://api.github.com/users/timmie/following{/other_user}", "gists_url": "https://api.github.com/users/timmie/gists{/gist_id}", "starred_url": "https://api.github.com/users/timmie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timmie/subscriptions", "organizations_url": "https://api.github.com/users/timmie/orgs", "repos_url": "https://api.github.com/users/timmie/repos", "events_url": "https://api.github.com/users/timmie/events{/privacy}", "received_events_url": "https://api.github.com/users/timmie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2012-10-03T23:02:37Z", "updated_at": "2012-10-07T18:11:34Z", "closed_at": "2012-10-07T18:11:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to build & package for Ubuntu, I get the following error:\n\n```\nCopying patsy.egg-info to /build/buildd/patsy-0.1.0~ppa1~revno/debian/python-patsy/usr/lib/python2.7/dist-packages/patsy-0.1.0_dev.egg-info\nrunning install_scripts\n   dh_install -O--buildsystem=python_distutils\n   dh_installdocs -O--buildsystem=python_distutils\ncp: cannot stat `LICENSE.txt': No such file or directory\ndh_installdocs: cp -a LICENSE.txt debian/python-patsy/usr/share/doc/python-patsy returned exit code 1\nmake: *** [binary] Error 2\n```\n\nWould it be possible to rename \nhttps://github.com/pydata/patsy/blob/master/COPYING\ninto \nhttps://github.com/pydata/patsy/blob/master/LICENSE.txt\n?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/8", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/8/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/8/events", "html_url": "https://github.com/pydata/patsy/issues/8", "id": 7046843, "node_id": "MDU6SXNzdWU3MDQ2ODQz", "number": 8, "title": "Preseve pandas index when creating design matrix", "user": {"login": "njvack", "id": 169598, "node_id": "MDQ6VXNlcjE2OTU5OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/169598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njvack", "html_url": "https://github.com/njvack", "followers_url": "https://api.github.com/users/njvack/followers", "following_url": "https://api.github.com/users/njvack/following{/other_user}", "gists_url": "https://api.github.com/users/njvack/gists{/gist_id}", "starred_url": "https://api.github.com/users/njvack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njvack/subscriptions", "organizations_url": "https://api.github.com/users/njvack/orgs", "repos_url": "https://api.github.com/users/njvack/repos", "events_url": "https://api.github.com/users/njvack/events{/privacy}", "received_events_url": "https://api.github.com/users/njvack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2012-09-21T16:44:38Z", "updated_at": "2012-09-24T18:51:56Z", "closed_at": "2012-09-21T21:58:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi -- me again!\n\nIn my project, I'm planning to use pandas to do initial manipulation of the data. Patsy works great with pandas DataFrames, but when I build the design matrices, they lose their index. It's definitely something I can work around -- but is there a reasonable way to preserve the index?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/7", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/7/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/7/events", "html_url": "https://github.com/pydata/patsy/issues/7", "id": 7011248, "node_id": "MDU6SXNzdWU3MDExMjQ4", "number": 7, "title": "Need a way to limit what functions can be called", "user": {"login": "njvack", "id": 169598, "node_id": "MDQ6VXNlcjE2OTU5OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/169598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njvack", "html_url": "https://github.com/njvack", "followers_url": "https://api.github.com/users/njvack/followers", "following_url": "https://api.github.com/users/njvack/following{/other_user}", "gists_url": "https://api.github.com/users/njvack/gists{/gist_id}", "starred_url": "https://api.github.com/users/njvack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njvack/subscriptions", "organizations_url": "https://api.github.com/users/njvack/orgs", "repos_url": "https://api.github.com/users/njvack/repos", "events_url": "https://api.github.com/users/njvack/events{/privacy}", "received_events_url": "https://api.github.com/users/njvack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2012-09-20T13:18:24Z", "updated_at": "2013-02-26T17:01:49Z", "closed_at": "2013-02-25T12:02:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nPatsy is awesome, and I'm hoping to use it in a web application. However, the fact that it'll eval() arbitrary expressions makes it a big ol' security hole. For example, you can do this:\n\ndmatrices(\"y ~ open('bad.txt', 'w')\")\n\nand while patsy raises an exception that files don't have a len(), it does indeed create the file. With a bit of creativity, I'm pretty sure there are a variety of paths to arbitrary code execution exploits there; see:\n\nhttp://me.veekun.com/blog/2012/03/24/on-principle/\n\nfor a much more devious example.\n\nWhat might work better would be to actually have a minimal parser and a set of functions it'll be willing to run on data (one could maybe pass in a mapping of function names to functions) instead -- this:\n\nhttp://effbot.org/zone/simple-iterator-parser.htm\n\nsuggests it should be pretty easy.\n\nArbitrary python code isn't really the right thing here, IMO -- there's no reason to be defining classes or using comprehensions in a formula.\n\nIn any case: eval() in this context probably cannot reasonably be made safe, and will probably wind up biting people who are using patsy as part of anything that accepts untrusted strings.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/6", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/6/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/6/events", "html_url": "https://github.com/pydata/patsy/issues/6", "id": 6740029, "node_id": "MDU6SXNzdWU2NzQwMDI5", "number": 6, "title": "[docs]: Library-developers.rst : Least Squares Regression example", "user": {"login": "westurner", "id": 50891, "node_id": "MDQ6VXNlcjUwODkx", "avatar_url": "https://avatars2.githubusercontent.com/u/50891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/westurner", "html_url": "https://github.com/westurner", "followers_url": "https://api.github.com/users/westurner/followers", "following_url": "https://api.github.com/users/westurner/following{/other_user}", "gists_url": "https://api.github.com/users/westurner/gists{/gist_id}", "starred_url": "https://api.github.com/users/westurner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/westurner/subscriptions", "organizations_url": "https://api.github.com/users/westurner/orgs", "repos_url": "https://api.github.com/users/westurner/repos", "events_url": "https://api.github.com/users/westurner/events{/privacy}", "received_events_url": "https://api.github.com/users/westurner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-09-09T04:01:27Z", "updated_at": "2012-09-14T18:20:15Z", "closed_at": "2012-09-09T11:16:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Error Message in the RTD-rendered documentation http://patsy.readthedocs.org/en/v0.1.0/library-developers.html [1]:\n\n```\nNameError: name 'LM' is not defined\n```\n\nIt looks like the example LM least squares regression model class in example_lm.py [2] _ (that is not for reuse, but may be relevant to #3) is not persisted between invocations of the IPython directive [3] in docs/library-developers.rst. [1]\n\nThe IPython directive docs [3] say that \"[functions] persist across sessions\", but I guess execfile does not persist into locals().\n\n[1] https://github.com/pydata/patsy/blob/master/doc/library-developers.rst\n[2] https://github.com/pydata/patsy/blob/master/doc/_examples/example_lm.py\n[3] http://ipython.org/ipython-doc/dev/development/ipython_directive.html\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/5", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/5/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/5/events", "html_url": "https://github.com/pydata/patsy/issues/5", "id": 6313136, "node_id": "MDU6SXNzdWU2MzEzMTM2", "number": 5, "title": "Rude install behavior", "user": {"login": "rgommers", "id": 98330, "node_id": "MDQ6VXNlcjk4MzMw", "avatar_url": "https://avatars3.githubusercontent.com/u/98330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rgommers", "html_url": "https://github.com/rgommers", "followers_url": "https://api.github.com/users/rgommers/followers", "following_url": "https://api.github.com/users/rgommers/following{/other_user}", "gists_url": "https://api.github.com/users/rgommers/gists{/gist_id}", "starred_url": "https://api.github.com/users/rgommers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rgommers/subscriptions", "organizations_url": "https://api.github.com/users/rgommers/orgs", "repos_url": "https://api.github.com/users/rgommers/repos", "events_url": "https://api.github.com/users/rgommers/events{/privacy}", "received_events_url": "https://api.github.com/users/rgommers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2012-08-19T16:02:12Z", "updated_at": "2015-10-26T22:38:35Z", "closed_at": "2015-10-26T22:38:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Nathaniel, can you please remove this line \n\n```\ninstall_requires=[\"numpy\"],\n```\n\nfrom setup.py? It isn't a good idea to have this line here, because then if you use pip or easy_install to install patsy, it will try to upgrade numpy under some circumstances. This is rude and should never happen automatically. In my case, I had 1.8.0-dev on my system (in-place build) and pip tried to ignore it and install 1.7.0 into site-packages.\n\nThe same was done for statsmodels. There it was replaced with\n\n```\n try:\n     from numpy.version import short_version as npversion\n except ImportError:\n     raise ImportError(\"statsmodels requires numpy\")\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/4", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/4/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/4/events", "html_url": "https://github.com/pydata/patsy/issues/4", "id": 5836408, "node_id": "MDU6SXNzdWU1ODM2NDA4", "number": 4, "title": "dmatrices name?", "user": {"login": "jseabold", "id": 296164, "node_id": "MDQ6VXNlcjI5NjE2NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/296164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseabold", "html_url": "https://github.com/jseabold", "followers_url": "https://api.github.com/users/jseabold/followers", "following_url": "https://api.github.com/users/jseabold/following{/other_user}", "gists_url": "https://api.github.com/users/jseabold/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseabold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseabold/subscriptions", "organizations_url": "https://api.github.com/users/jseabold/orgs", "repos_url": "https://api.github.com/users/jseabold/repos", "events_url": "https://api.github.com/users/jseabold/events{/privacy}", "received_events_url": "https://api.github.com/users/jseabold/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-07-25T18:10:52Z", "updated_at": "2012-07-27T10:06:31Z", "closed_at": "2012-07-27T10:06:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I mentioned this on the ML, but I thought I'd raise an issue. dmatrices is a bit of a misnomer since there is no such thing as a left-hand side design matrix. This is why I preferred the original make_matrices or make_model_matrices. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/3", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/3/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/3/events", "html_url": "https://github.com/pydata/patsy/issues/3", "id": 5542453, "node_id": "MDU6SXNzdWU1NTQyNDUz", "number": 3, "title": "Better explain what \"statistical models\" patsy can handle in the README / overview?", "user": {"login": "cdeil", "id": 852409, "node_id": "MDQ6VXNlcjg1MjQwOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/852409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdeil", "html_url": "https://github.com/cdeil", "followers_url": "https://api.github.com/users/cdeil/followers", "following_url": "https://api.github.com/users/cdeil/following{/other_user}", "gists_url": "https://api.github.com/users/cdeil/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdeil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdeil/subscriptions", "organizations_url": "https://api.github.com/users/cdeil/orgs", "repos_url": "https://api.github.com/users/cdeil/repos", "events_url": "https://api.github.com/users/cdeil/events{/privacy}", "received_events_url": "https://api.github.com/users/cdeil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-07-11T07:21:52Z", "updated_at": "2013-02-25T11:53:41Z", "closed_at": "2013-02-25T11:53:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Physicists / astronomers (and maybe other potential users like engineers, ...?) often use a different vocabulary than statisticians / economists. E.g. I'm an astronomer and I would say that `y(x) = a * x + b` is a linear model with parameters `a` and `b` and that `y(x) = exp(- x / s)` is a non-linear model with parameter `s`. Now when I read \"This is patsy, a Python library for describing statistical models and building design matrices.\" I was excited that I might be able to specify arbitrary models (being ignorant of what exactly \"statistical models\" are and thinking that \"design matrices\" refers to the subset of linear models patsy can handle) and fit them to data, but if I understand correctly patsy only handles linear models, right?\n\nMaybe you could add a sentences or two to the README or to http://patsy.readthedocs.org/en/latest/overview.html to make it even more clear up-front what kinds of \"statistical models\" patsy can and can't handle?\n(I had the same problem when I first saw statsmodels, it took me a while to figure out that it only can fit very specific models, not arbitrary nonlinear models.)\n\nTwo more things you could add to the docs:\n- A link to the R formula mini-language you mention?\n  With google I found http://stat.ethz.ch/R-manual/R-devel/library/stats/html/formula.html , but I'm not sure this is the best starting point to read about R formulas?\n- A link to statsmodels in the docs and mention that it is planned to use patsy for statsmodels?\n\nThanks for making patsy and writing great documentation!\nI'll try to learn how statisticians do regression from the patsy and statsmodels docs.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/2", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/2/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/2/events", "html_url": "https://github.com/pydata/patsy/issues/2", "id": 5542371, "node_id": "MDU6SXNzdWU1NTQyMzcx", "number": 2, "title": "Exceptions in examples on readthedocs", "user": {"login": "cdeil", "id": 852409, "node_id": "MDQ6VXNlcjg1MjQwOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/852409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdeil", "html_url": "https://github.com/cdeil", "followers_url": "https://api.github.com/users/cdeil/followers", "following_url": "https://api.github.com/users/cdeil/following{/other_user}", "gists_url": "https://api.github.com/users/cdeil/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdeil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdeil/subscriptions", "organizations_url": "https://api.github.com/users/cdeil/orgs", "repos_url": "https://api.github.com/users/cdeil/repos", "events_url": "https://api.github.com/users/cdeil/events{/privacy}", "received_events_url": "https://api.github.com/users/cdeil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-07-11T07:13:21Z", "updated_at": "2012-10-25T14:07:52Z", "closed_at": "2012-10-25T14:07:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "The pandas example gives an ImportError:\nhttp://patsy.readthedocs.org/en/latest/expert-model-specification.html\n\nI think you can install numpy and pandas via a pip requirements file on readthedocs (haven't tried), and then it should work:\nhttp://read-the-docs.readthedocs.org/en/latest/faq.html\n\nThe least squares example (the LM class) gives a NameError:\nhttp://patsy.readthedocs.org/en/latest/library-developers.html\nDoes LM stand for LinearModel? Maybe you can mention that in a class docstring?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pydata/patsy/issues/1", "repository_url": "https://api.github.com/repos/pydata/patsy", "labels_url": "https://api.github.com/repos/pydata/patsy/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/pydata/patsy/issues/1/comments", "events_url": "https://api.github.com/repos/pydata/patsy/issues/1/events", "html_url": "https://github.com/pydata/patsy/issues/1", "id": 5535542, "node_id": "MDU6SXNzdWU1NTM1NTQy", "number": 1, "title": "Listwise deletion", "user": {"login": "vincentarelbundock", "id": 987057, "node_id": "MDQ6VXNlcjk4NzA1Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/987057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincentarelbundock", "html_url": "https://github.com/vincentarelbundock", "followers_url": "https://api.github.com/users/vincentarelbundock/followers", "following_url": "https://api.github.com/users/vincentarelbundock/following{/other_user}", "gists_url": "https://api.github.com/users/vincentarelbundock/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincentarelbundock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincentarelbundock/subscriptions", "organizations_url": "https://api.github.com/users/vincentarelbundock/orgs", "repos_url": "https://api.github.com/users/vincentarelbundock/repos", "events_url": "https://api.github.com/users/vincentarelbundock/events{/privacy}", "received_events_url": "https://api.github.com/users/vincentarelbundock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-07-10T21:51:37Z", "updated_at": "2013-02-25T12:58:54Z", "closed_at": "2013-02-25T11:27:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Listwise deletion is an extremely common operation. It needs to be applied after selecting variables (done by `patsy` when it interprets the formula), but before splitting exogenous and endogenous variables in separate matrices (also done by `patsy`). \n\nR's `model.matrix` function applies list-wise deletion by default, and I expect that `statsmodels` will also want to have that be the default behavior. Ohterwise, many of the estimation procedures will bork and we will need to remind users to handle their NAs. \n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}]}