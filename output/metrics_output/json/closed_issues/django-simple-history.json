{"total_count": 307, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/696", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/696/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/696/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/696/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/696", "id": 675438591, "node_id": "MDU6SXNzdWU2NzU0Mzg1OTE=", "number": 696, "title": "Delete a column, the operation record(+,-,~) related to this column has not been deleted", "user": {"login": "gonglei1999", "id": 22909891, "node_id": "MDQ6VXNlcjIyOTA5ODkx", "avatar_url": "https://avatars0.githubusercontent.com/u/22909891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gonglei1999", "html_url": "https://github.com/gonglei1999", "followers_url": "https://api.github.com/users/gonglei1999/followers", "following_url": "https://api.github.com/users/gonglei1999/following{/other_user}", "gists_url": "https://api.github.com/users/gonglei1999/gists{/gist_id}", "starred_url": "https://api.github.com/users/gonglei1999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gonglei1999/subscriptions", "organizations_url": "https://api.github.com/users/gonglei1999/orgs", "repos_url": "https://api.github.com/users/gonglei1999/repos", "events_url": "https://api.github.com/users/gonglei1999/events{/privacy}", "received_events_url": "https://api.github.com/users/gonglei1999/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-08T06:00:10Z", "updated_at": "2020-08-09T16:22:20Z", "closed_at": "2020-08-09T16:22:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nIf I delete a column in the table, the corresponding column in the record table is also deleted. But the operation records (+, -, ~) generated by this column are not deleted, which will cause some problems", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/685", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/685/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/685/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/685/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/685", "id": 654916653, "node_id": "MDU6SXNzdWU2NTQ5MTY2NTM=", "number": 685, "title": "Wrong link to docs in \"About\" (of this github project)", "user": {"login": "SzymonNastaly", "id": 32243444, "node_id": "MDQ6VXNlcjMyMjQzNDQ0", "avatar_url": "https://avatars2.githubusercontent.com/u/32243444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SzymonNastaly", "html_url": "https://github.com/SzymonNastaly", "followers_url": "https://api.github.com/users/SzymonNastaly/followers", "following_url": "https://api.github.com/users/SzymonNastaly/following{/other_user}", "gists_url": "https://api.github.com/users/SzymonNastaly/gists{/gist_id}", "starred_url": "https://api.github.com/users/SzymonNastaly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SzymonNastaly/subscriptions", "organizations_url": "https://api.github.com/users/SzymonNastaly/orgs", "repos_url": "https://api.github.com/users/SzymonNastaly/repos", "events_url": "https://api.github.com/users/SzymonNastaly/events{/privacy}", "received_events_url": "https://api.github.com/users/SzymonNastaly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-10T17:06:31Z", "updated_at": "2020-07-13T15:26:07Z", "closed_at": "2020-07-13T15:26:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen viewing this project, there is the typical \"About\" section on the right. There the link [https://django-simple-history.readthedocs.org](https://django-simple-history.readthedocs.org) - it doesn't work anymore.\r\nThe correct link is given in the README on the bottom: [https://django-simple-history.readthedocs.io/](https://django-simple-history.readthedocs.io/).\r\n\r\n\r\n**Error**\r\n\"Error 1016 - Origin DNS error\" is returned by Cloudflare\r\n\r\n**Environment (please complete the following information):**\r\n - OS: MacOS 10.15.5\r\n - Browser: Vivaldi, most recent\r\n\r\n**Additional context**\r\nI think just changing the link (for easier discoverability) would be great.\r\n\r\n**Sorry if I made this issue in the wrong place or something, this is my first github issue ever**\r\nBTW: This project is GREAT", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/684", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/684/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/684/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/684/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/684", "id": 654837350, "node_id": "MDU6SXNzdWU2NTQ4MzczNTA=", "number": 684, "title": "Can you get a User's history?", "user": {"login": "thommor", "id": 45167957, "node_id": "MDQ6VXNlcjQ1MTY3OTU3", "avatar_url": "https://avatars0.githubusercontent.com/u/45167957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thommor", "html_url": "https://github.com/thommor", "followers_url": "https://api.github.com/users/thommor/followers", "following_url": "https://api.github.com/users/thommor/following{/other_user}", "gists_url": "https://api.github.com/users/thommor/gists{/gist_id}", "starred_url": "https://api.github.com/users/thommor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thommor/subscriptions", "organizations_url": "https://api.github.com/users/thommor/orgs", "repos_url": "https://api.github.com/users/thommor/repos", "events_url": "https://api.github.com/users/thommor/events{/privacy}", "received_events_url": "https://api.github.com/users/thommor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-10T14:52:32Z", "updated_at": "2020-07-10T17:39:56Z", "closed_at": "2020-07-10T17:39:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't think it is possible but is there currently any way of retrieving a User's history of what they have changed in other models. For example if user1 has made changes to Poll models and other User models is there a way of retrieving those changes without having to query each historic model?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/683", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/683/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/683/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/683/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/683", "id": 651024588, "node_id": "MDU6SXNzdWU2NTEwMjQ1ODg=", "number": 683, "title": "django admin site changes doesn't save in history form ", "user": {"login": "maryamsajedi", "id": 43887956, "node_id": "MDQ6VXNlcjQzODg3OTU2", "avatar_url": "https://avatars3.githubusercontent.com/u/43887956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maryamsajedi", "html_url": "https://github.com/maryamsajedi", "followers_url": "https://api.github.com/users/maryamsajedi/followers", "following_url": "https://api.github.com/users/maryamsajedi/following{/other_user}", "gists_url": "https://api.github.com/users/maryamsajedi/gists{/gist_id}", "starred_url": "https://api.github.com/users/maryamsajedi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maryamsajedi/subscriptions", "organizations_url": "https://api.github.com/users/maryamsajedi/orgs", "repos_url": "https://api.github.com/users/maryamsajedi/repos", "events_url": "https://api.github.com/users/maryamsajedi/events{/privacy}", "received_events_url": "https://api.github.com/users/maryamsajedi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-05T08:16:30Z", "updated_at": "2020-07-06T09:19:53Z", "closed_at": "2020-07-05T14:44:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "when there is a change in admin site , i can see the change in history but there is no change reason for change.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/682", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/682/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/682/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/682/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/682", "id": 648168170, "node_id": "MDU6SXNzdWU2NDgxNjgxNzA=", "number": 682, "title": "About related objects (onetoone, foreignkey, manytomany)", "user": {"login": "fx-it", "id": 17315195, "node_id": "MDQ6VXNlcjE3MzE1MTk1", "avatar_url": "https://avatars0.githubusercontent.com/u/17315195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fx-it", "html_url": "https://github.com/fx-it", "followers_url": "https://api.github.com/users/fx-it/followers", "following_url": "https://api.github.com/users/fx-it/following{/other_user}", "gists_url": "https://api.github.com/users/fx-it/gists{/gist_id}", "starred_url": "https://api.github.com/users/fx-it/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fx-it/subscriptions", "organizations_url": "https://api.github.com/users/fx-it/orgs", "repos_url": "https://api.github.com/users/fx-it/repos", "events_url": "https://api.github.com/users/fx-it/events{/privacy}", "received_events_url": "https://api.github.com/users/fx-it/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-30T13:20:20Z", "updated_at": "2020-06-30T13:33:59Z", "closed_at": "2020-06-30T13:33:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. I expect simplehistory to monitor related objects of deleted model. For example. There are A and B models.\r\n```\r\nclass A(models.Model):\r\n    history = HistoricalRecords()\r\nclass B(models.Model):\r\n    a = ForeignKey(to=a, on_delete=models.CASCADE)\r\n    historical = HistoricalRecords()\r\n```\r\n\r\nB has ForeignKey relation to A model. If instances of the models were deleted, b instance in history has only a_id int value, but can't get related  object immediately (like b.a). The same situation with the reverse relation (a.b_set.all()) - empty queryset. How should i correctly get related objects of instances in history? May be there is some way that i haven't noticed at the docs. I dont think that i have to create special properties or always call like:\r\n```\r\na = A()\r\nbs = B.history.filter(a_id=a.pk)\r\n```\r\nbecause in DRF serializers it will be terrible to override every relation to get related objects.\r\n\r\nI used to try to override __getattribute__ in the BaseModel of all models class to get related objects, but it is in process (caught a recursion error).\r\nIt will be conveniently if there is an opportunity to get related objects from both of instance states (real and in history)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/665", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/665/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/665/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/665/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/665", "id": 622915794, "node_id": "MDU6SXNzdWU2MjI5MTU3OTQ=", "number": 665, "title": "Is there a way to enable history on some models", "user": {"login": "sanchitsharma", "id": 6803096, "node_id": "MDQ6VXNlcjY4MDMwOTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6803096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanchitsharma", "html_url": "https://github.com/sanchitsharma", "followers_url": "https://api.github.com/users/sanchitsharma/followers", "following_url": "https://api.github.com/users/sanchitsharma/following{/other_user}", "gists_url": "https://api.github.com/users/sanchitsharma/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanchitsharma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanchitsharma/subscriptions", "organizations_url": "https://api.github.com/users/sanchitsharma/orgs", "repos_url": "https://api.github.com/users/sanchitsharma/repos", "events_url": "https://api.github.com/users/sanchitsharma/events{/privacy}", "received_events_url": "https://api.github.com/users/sanchitsharma/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-22T03:01:36Z", "updated_at": "2020-06-01T13:14:03Z", "closed_at": "2020-05-23T16:24:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry if this is trivial (seems so) but I couldn't find anything in docs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/662", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/662/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/662/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/662/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/662", "id": 621418882, "node_id": "MDU6SXNzdWU2MjE0MTg4ODI=", "number": 662, "title": "no name module", "user": {"login": "honeybot143", "id": 65639227, "node_id": "MDQ6VXNlcjY1NjM5MjI3", "avatar_url": "https://avatars1.githubusercontent.com/u/65639227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honeybot143", "html_url": "https://github.com/honeybot143", "followers_url": "https://api.github.com/users/honeybot143/followers", "following_url": "https://api.github.com/users/honeybot143/following{/other_user}", "gists_url": "https://api.github.com/users/honeybot143/gists{/gist_id}", "starred_url": "https://api.github.com/users/honeybot143/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honeybot143/subscriptions", "organizations_url": "https://api.github.com/users/honeybot143/orgs", "repos_url": "https://api.github.com/users/honeybot143/repos", "events_url": "https://api.github.com/users/honeybot143/events{/privacy}", "received_events_url": "https://api.github.com/users/honeybot143/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-20T02:50:44Z", "updated_at": "2020-05-20T14:23:55Z", "closed_at": "2020-05-20T14:23:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\t\"resource\": \"/home/honeybot/projects/webproject/webproject/urls.py\",\r\n\t\"owner\": \"python\",\r\n\t\"code\": \"no-name-in-module\",\r\n\t\"severity\": 8,\r\n\t\"message\": \"No name 'path' in module 'django.conf.urls'\",\r\n\t\"source\": \"pylint\",\r\n\t\"startLineNumber\": 17,\r\n\t\"startColumn\": 1,\r\n\t\"endLineNumber\": 17,\r\n\t\"endColumn\": 1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/661", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/661/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/661/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/661/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/661", "id": 618268824, "node_id": "MDU6SXNzdWU2MTgyNjg4MjQ=", "number": 661, "title": "Is there a script to import old admin history?", "user": {"login": "cbene06", "id": 13965829, "node_id": "MDQ6VXNlcjEzOTY1ODI5", "avatar_url": "https://avatars3.githubusercontent.com/u/13965829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbene06", "html_url": "https://github.com/cbene06", "followers_url": "https://api.github.com/users/cbene06/followers", "following_url": "https://api.github.com/users/cbene06/following{/other_user}", "gists_url": "https://api.github.com/users/cbene06/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbene06/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbene06/subscriptions", "organizations_url": "https://api.github.com/users/cbene06/orgs", "repos_url": "https://api.github.com/users/cbene06/repos", "events_url": "https://api.github.com/users/cbene06/events{/privacy}", "received_events_url": "https://api.github.com/users/cbene06/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-14T14:17:02Z", "updated_at": "2020-05-15T14:01:24Z", "closed_at": "2020-05-15T14:01:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI successfully integrated django-simple-history in my app, thanks for this useful lib.\r\n\r\nI would like to import my old admin history into the simple history database. Is there already a script for this, or should I create it from scratch?\r\n\r\nThanks,\r\nChristophe", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/660", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/660/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/660/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/660/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/660", "id": 612107788, "node_id": "MDU6SXNzdWU2MTIxMDc3ODg=", "number": 660, "title": "_change_reason on model instance does not set history_change_reason on save", "user": {"login": "ryancausey", "id": 2704075, "node_id": "MDQ6VXNlcjI3MDQwNzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2704075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryancausey", "html_url": "https://github.com/ryancausey", "followers_url": "https://api.github.com/users/ryancausey/followers", "following_url": "https://api.github.com/users/ryancausey/following{/other_user}", "gists_url": "https://api.github.com/users/ryancausey/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryancausey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryancausey/subscriptions", "organizations_url": "https://api.github.com/users/ryancausey/orgs", "repos_url": "https://api.github.com/users/ryancausey/repos", "events_url": "https://api.github.com/users/ryancausey/events{/privacy}", "received_events_url": "https://api.github.com/users/ryancausey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-04T19:19:58Z", "updated_at": "2020-05-04T19:25:05Z", "closed_at": "2020-05-04T19:25:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nThe [documentation](https://django-simple-history.readthedocs.io/en/latest/historical_model.html#change-reason) states that `_change_reason` can be set on an instance before saving it to set what `history_change_reason` is. In practice this does not appear to work.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create a model similar to:\r\n```\r\nfrom django.db import models\r\nfrom simple_history.models import HistoricalRecords\r\n\r\n# Create your models here.\r\n\r\nclass TestModel(models.Model):\r\n    foo = models.CharField(max_length=10)\r\n    history = HistoricalRecords()\r\n\r\n```\r\n2. Save the model instance with `_change_reason` set and observe there is no history_change_reason.\r\n```\r\nIn [1]: from testing.models import TestModel\r\nIn [2]: test_1 = TestModel(foo=\"test1\")\r\nIn [3]: test_1.full_clean()\r\nIn [4]: test_1._change_reason = \"this is a test\"\r\nIn [5]: test_1.save()\r\nIn [6]: test_1.history.first().history_change_reason\r\nIn [7]: test_1.history.all()\r\nOut[7]: <QuerySet [<HistoricalTestModel: TestModel object (1) as of 2020-05-04 19:08:35.846212+00:00>]>\r\n```\r\n3. Use `update_change_reason` to set the reason and observe it is set.\r\n```\r\nIn [10]: from simple_history.utils import update_change_reason\r\nIn [11]: update_change_reason(test_1, \"this is an update test\")\r\nIn [12]: test_1.history.first().history_change_reason\r\nOut[12]: 'this is an update test'\r\n```\r\n\r\n**Expected behavior**\r\nWhen `_change_reason` is set on the model instance before save, the `history_change_reason` gets set on the historical model as described in the documentation.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Ubuntu 18.04\r\n - Django Simple History Version: 2.8.0\r\n - Django Version: 2.2.11\r\n - Database Version: MySQL 5.7", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/659", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/659/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/659/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/659/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/659", "id": 611485746, "node_id": "MDU6SXNzdWU2MTE0ODU3NDY=", "number": 659, "title": "How to display additional field in historical admin form?", "user": {"login": "decomorreno", "id": 24738500, "node_id": "MDQ6VXNlcjI0NzM4NTAw", "avatar_url": "https://avatars3.githubusercontent.com/u/24738500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decomorreno", "html_url": "https://github.com/decomorreno", "followers_url": "https://api.github.com/users/decomorreno/followers", "following_url": "https://api.github.com/users/decomorreno/following{/other_user}", "gists_url": "https://api.github.com/users/decomorreno/gists{/gist_id}", "starred_url": "https://api.github.com/users/decomorreno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decomorreno/subscriptions", "organizations_url": "https://api.github.com/users/decomorreno/orgs", "repos_url": "https://api.github.com/users/decomorreno/repos", "events_url": "https://api.github.com/users/decomorreno/events{/privacy}", "received_events_url": "https://api.github.com/users/decomorreno/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-03T19:17:37Z", "updated_at": "2020-05-21T15:29:43Z", "closed_at": "2020-05-21T15:29:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I added custom field to historical model (I was following this example https://django-simple-history.readthedocs.io/en/latest/historical_model.html#adding-additional-fields-to-historical-models) and it's working perfectly. Now I'm looking if there is some way to display this field in django admin form (I can display it in history_list_display, but it's a long TextField, so it's not very convenient). I read all the docs and searched existing issues and didn't find any similar problem. \r\n\r\nThank you\r\nHubert", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/649", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/649/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/649/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/649/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/649", "id": 605886799, "node_id": "MDU6SXNzdWU2MDU4ODY3OTk=", "number": 649, "title": "Bulk update with history", "user": {"login": "jihoon796", "id": 11223144, "node_id": "MDQ6VXNlcjExMjIzMTQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/11223144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jihoon796", "html_url": "https://github.com/jihoon796", "followers_url": "https://api.github.com/users/jihoon796/followers", "following_url": "https://api.github.com/users/jihoon796/following{/other_user}", "gists_url": "https://api.github.com/users/jihoon796/gists{/gist_id}", "starred_url": "https://api.github.com/users/jihoon796/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jihoon796/subscriptions", "organizations_url": "https://api.github.com/users/jihoon796/orgs", "repos_url": "https://api.github.com/users/jihoon796/repos", "events_url": "https://api.github.com/users/jihoon796/events{/privacy}", "received_events_url": "https://api.github.com/users/jihoon796/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-23T21:29:07Z", "updated_at": "2020-04-23T21:45:48Z", "closed_at": "2020-04-23T21:45:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Problem Statement**\r\nSince Django 2.2, `bulk_update` has been available. However, I noticed that this feature is not yet available django-simple-history.\r\n\r\n**Describe the solution you'd like**\r\nIt would work much like `bulk_create_with_history()`, updating the objects in bulk and using the `HistoryManager` to efficiently bulk create historical instances albeit with a different history type. \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/645", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/645/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/645/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/645/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/645", "id": 602477402, "node_id": "MDU6SXNzdWU2MDI0Nzc0MDI=", "number": 645, "title": "Update the doc, please", "user": {"login": "JudiPuak", "id": 62934325, "node_id": "MDQ6VXNlcjYyOTM0MzI1", "avatar_url": "https://avatars2.githubusercontent.com/u/62934325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JudiPuak", "html_url": "https://github.com/JudiPuak", "followers_url": "https://api.github.com/users/JudiPuak/followers", "following_url": "https://api.github.com/users/JudiPuak/following{/other_user}", "gists_url": "https://api.github.com/users/JudiPuak/gists{/gist_id}", "starred_url": "https://api.github.com/users/JudiPuak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JudiPuak/subscriptions", "organizations_url": "https://api.github.com/users/JudiPuak/orgs", "repos_url": "https://api.github.com/users/JudiPuak/repos", "events_url": "https://api.github.com/users/JudiPuak/events{/privacy}", "received_events_url": "https://api.github.com/users/JudiPuak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-18T14:50:15Z", "updated_at": "2020-04-23T14:53:52Z", "closed_at": "2020-04-23T14:53:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nA.\r\nI added history = HistoricalRecords() to my Location model\r\nI also added admin.site.register(Location, SimpleHistoryAdmin) in admin.py\r\nAfter migrating, I couldn't find the historicallocation table in admin as the doc says I would\r\nHowever, when I clicked on the location table, clicked on an entry, now there is this History button on the upper corner\r\n\r\nB.\r\nI'd like to add a field in my location list html template:  when was the last time this location instance was modified\r\n{{ location.history.history_date }} does not work even though the doc says that history table has history_date field in it\r\ni spent a frustrating 30 minutes reading the doc over and over again but i could not find anything about this\r\nI scoured stackoverflow too but with no success\r\nafter a cold bath, i found out that this works:  {{ location.history.first.history_date }}\r\ni had to add \".first\" in there\r\nmaybe i am not smart enough to understand the doc\r\n\r\n**Describe the solution you'd like**\r\nFor A:  please investigate this.  If I am right, please update the doc.  If I am wrong, please advise me why i can't see the historicallocation table in admin\r\nFor B:  if indeed the doc does not have anything on this and if my solution is correct, please update the doc for future reference\r\n\r\nall in all, django-simple-history works great.\r\ni tried django-audit-log but it didn't work\r\nthank you for your great work\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/640", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/640/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/640/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/640/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/640", "id": 585525001, "node_id": "MDU6SXNzdWU1ODU1MjUwMDE=", "number": 640, "title": "Readonly fields with `SIMPLE_HISTORY_EDIT=False`", "user": {"login": "partizaans", "id": 36724707, "node_id": "MDQ6VXNlcjM2NzI0NzA3", "avatar_url": "https://avatars0.githubusercontent.com/u/36724707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/partizaans", "html_url": "https://github.com/partizaans", "followers_url": "https://api.github.com/users/partizaans/followers", "following_url": "https://api.github.com/users/partizaans/following{/other_user}", "gists_url": "https://api.github.com/users/partizaans/gists{/gist_id}", "starred_url": "https://api.github.com/users/partizaans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/partizaans/subscriptions", "organizations_url": "https://api.github.com/users/partizaans/orgs", "repos_url": "https://api.github.com/users/partizaans/repos", "events_url": "https://api.github.com/users/partizaans/events{/privacy}", "received_events_url": "https://api.github.com/users/partizaans/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-21T15:50:31Z", "updated_at": "2020-04-23T14:54:11Z", "closed_at": "2020-04-23T14:54:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nFields rendered in history view are not readonly even if `SIMPLE_HISTORY_EDIT` is set to `False`\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Set `SIMPLE_HISTORY_EDIT` to `False`\r\n2. Open history list for a historical model\r\n3. Click on one of records\r\n4. Fields seem to be editable while no `Change History` button is rendered\r\n\r\n**Expected behavior**\r\nExpected history fields to be rendered in readonly mode.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Manjaro Linux 19.0.2\r\n - Django Simple History Version: 2.8.0\r\n - Django Version: 2.2.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/639", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/639/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/639/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/639/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/639", "id": 577460221, "node_id": "MDU6SXNzdWU1Nzc0NjAyMjE=", "number": 639, "title": "Assigning User object to changed_by attribute gives Error", "user": {"login": "asad9711", "id": 13981131, "node_id": "MDQ6VXNlcjEzOTgxMTMx", "avatar_url": "https://avatars0.githubusercontent.com/u/13981131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asad9711", "html_url": "https://github.com/asad9711", "followers_url": "https://api.github.com/users/asad9711/followers", "following_url": "https://api.github.com/users/asad9711/following{/other_user}", "gists_url": "https://api.github.com/users/asad9711/gists{/gist_id}", "starred_url": "https://api.github.com/users/asad9711/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asad9711/subscriptions", "organizations_url": "https://api.github.com/users/asad9711/orgs", "repos_url": "https://api.github.com/users/asad9711/repos", "events_url": "https://api.github.com/users/asad9711/events{/privacy}", "received_events_url": "https://api.github.com/users/asad9711/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-08T07:41:02Z", "updated_at": "2020-03-08T11:26:30Z", "closed_at": "2020-03-08T11:26:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "**models.py**\r\n\r\n```python\r\nclass BaseModel(models.Model):\r\n    createdAt = models.DateTimeField(default=timezone.now)\r\n    id = models.CharField(primary_key=True, max_length=50, default=string_uuid)\r\n\r\n\r\n    class Meta:\r\n        abstract = True\r\n\r\nclass User(BaseModel):\r\n    firstName = models.CharField(max_length=200)\r\n\r\nclass UserTrackMixin(models.Model):\r\n\r\n    changed_by = models.ForeignKey(User, null=True, on_delete=models.DO_NOTHING)\r\n\r\n    @property\r\n    def _history_user(self):\r\n        return self.changed_by\r\n\r\n    @_history_user.setter\r\n    def _history_user(self, value):\r\n        self.changed_by = value\r\n\r\n    class Meta:\r\n        abstract = True\r\n\r\n\r\nclass Service(BaseModel, UserTrackMixin):\r\n    name = models.CharField(max_length=200)\r\n    serviceType = models.CharField(max_length=200)\r\n\r\n    history = HistoricalRecords()\r\n\r\n```\r\n\r\nI am trying to associate user changing the service object using the way proposed [here](https://django-simple-history.readthedocs.io/en/latest/user_tracking.html#using-history-user-to-record-which-user-changed-a-model)\r\n\r\nBut, when i am trying to assign user object to the attribute **changed_by** to **Service** object it gives error as mentioned below.\r\n\r\n\r\n\r\n```python\r\nu1=User.objects.first()\r\n<User: User object (07ab8565-26c7-4bfa-a92e-e12bf924160a)>\r\ns._history_user = u1\r\ns.save()\r\n\r\n\r\nValueError: Cannot assign \"<User: User object (07ab8565-26c7-4bfa-a92e-e12bf924160a)>\": \"HistoricalService.history_user\" must be a \"User\" instance.\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/638", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/638/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/638/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/638/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/638", "id": 577314607, "node_id": "MDU6SXNzdWU1NzczMTQ2MDc=", "number": 638, "title": "It Recorded without changing fields", "user": {"login": "AliYmn", "id": 18416653, "node_id": "MDQ6VXNlcjE4NDE2NjUz", "avatar_url": "https://avatars1.githubusercontent.com/u/18416653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AliYmn", "html_url": "https://github.com/AliYmn", "followers_url": "https://api.github.com/users/AliYmn/followers", "following_url": "https://api.github.com/users/AliYmn/following{/other_user}", "gists_url": "https://api.github.com/users/AliYmn/gists{/gist_id}", "starred_url": "https://api.github.com/users/AliYmn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AliYmn/subscriptions", "organizations_url": "https://api.github.com/users/AliYmn/orgs", "repos_url": "https://api.github.com/users/AliYmn/repos", "events_url": "https://api.github.com/users/AliYmn/events{/privacy}", "received_events_url": "https://api.github.com/users/AliYmn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-07T10:27:07Z", "updated_at": "2020-03-10T02:39:19Z", "closed_at": "2020-03-09T15:52:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen i save without changing field, django-simple-history recorded this action. So i have too more stack logs. Also i used excluded_fields but there was no solution.\r\n\r\n** Screen Shot **\r\n\r\n<img src=\"https://serving.photos.photobox.com/391270082b965a06cb8ae9d2cd542afd39d414eba043497e12cd7dd2905da4d87891b378.jpg\"/>\r\n\r\nSo, i have to solved this problem?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/635", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/635/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/635/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/635/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/635", "id": 576438091, "node_id": "MDU6SXNzdWU1NzY0MzgwOTE=", "number": 635, "title": "Add possibility to specify a default user for bulk_create_with_history", "user": {"login": "bmampaey", "id": 3693702, "node_id": "MDQ6VXNlcjM2OTM3MDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3693702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmampaey", "html_url": "https://github.com/bmampaey", "followers_url": "https://api.github.com/users/bmampaey/followers", "following_url": "https://api.github.com/users/bmampaey/following{/other_user}", "gists_url": "https://api.github.com/users/bmampaey/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmampaey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmampaey/subscriptions", "organizations_url": "https://api.github.com/users/bmampaey/orgs", "repos_url": "https://api.github.com/users/bmampaey/repos", "events_url": "https://api.github.com/users/bmampaey/events{/privacy}", "received_events_url": "https://api.github.com/users/bmampaey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-05T18:07:43Z", "updated_at": "2020-05-05T01:39:16Z", "closed_at": "2020-05-05T01:39:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Problem Statement**\r\nWhen calling bulk_create_with_history, if there is no _hystory_user set on the object, then no user will be associated with the change.\r\n\r\n**Describe the solution you'd like**\r\nAllow to specify a default_user to be set for history_user if _history_user is not set.\r\n\r\n**Describe alternatives you've considered**\r\nSetting the value of _history_user explicitly on each objects to create.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/633", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/633/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/633/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/633/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/633", "id": 573975941, "node_id": "MDU6SXNzdWU1NzM5NzU5NDE=", "number": 633, "title": "Documentation is out of date", "user": {"login": "hellerbarde", "id": 37417, "node_id": "MDQ6VXNlcjM3NDE3", "avatar_url": "https://avatars0.githubusercontent.com/u/37417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellerbarde", "html_url": "https://github.com/hellerbarde", "followers_url": "https://api.github.com/users/hellerbarde/followers", "following_url": "https://api.github.com/users/hellerbarde/following{/other_user}", "gists_url": "https://api.github.com/users/hellerbarde/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellerbarde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellerbarde/subscriptions", "organizations_url": "https://api.github.com/users/hellerbarde/orgs", "repos_url": "https://api.github.com/users/hellerbarde/repos", "events_url": "https://api.github.com/users/hellerbarde/events{/privacy}", "received_events_url": "https://api.github.com/users/hellerbarde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-02T13:31:05Z", "updated_at": "2020-03-02T15:54:40Z", "closed_at": "2020-03-02T15:54:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen I go to the documentation at https://django-simple-history.readthedocs.io/en/latest/ I expect to see Django 3.0 in the list of supported Django versions (same as the readme file on the github project). However, it is not on that list. \r\n\r\nThank you for your work. :) \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/629", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/629/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/629/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/629/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/629", "id": 565769228, "node_id": "MDU6SXNzdWU1NjU3NjkyMjg=", "number": 629, "title": "Load ContentType model using django_apps instead of direct import", "user": {"login": "erikvw", "id": 502244, "node_id": "MDQ6VXNlcjUwMjI0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/502244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikvw", "html_url": "https://github.com/erikvw", "followers_url": "https://api.github.com/users/erikvw/followers", "following_url": "https://api.github.com/users/erikvw/following{/other_user}", "gists_url": "https://api.github.com/users/erikvw/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikvw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikvw/subscriptions", "organizations_url": "https://api.github.com/users/erikvw/orgs", "repos_url": "https://api.github.com/users/erikvw/repos", "events_url": "https://api.github.com/users/erikvw/events{/privacy}", "received_events_url": "https://api.github.com/users/erikvw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-15T15:56:12Z", "updated_at": "2020-02-17T19:45:32Z", "closed_at": "2020-02-17T19:45:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Problem Statement**\r\nI extend the `SimpleHistoryAdmin` class and depending on the loading sequence run into `AppRegistryNotReady` exception with the ContentType model class imported at the top of `SimpleHistoryAdmin`.\r\n\r\n**Describe the solution you'd like**\r\nUse django_apps to import the model and access it within `SimpleHistoryAdmin ` using an instance method, e.g. `content_type_model_cls()`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/628", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/628/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/628/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/628/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/628", "id": 565409735, "node_id": "MDU6SXNzdWU1NjU0MDk3MzU=", "number": 628, "title": "excluded_fields doesn't work on register(User) in Django", "user": {"login": "slenart", "id": 893683, "node_id": "MDQ6VXNlcjg5MzY4Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/893683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slenart", "html_url": "https://github.com/slenart", "followers_url": "https://api.github.com/users/slenart/followers", "following_url": "https://api.github.com/users/slenart/following{/other_user}", "gists_url": "https://api.github.com/users/slenart/gists{/gist_id}", "starred_url": "https://api.github.com/users/slenart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slenart/subscriptions", "organizations_url": "https://api.github.com/users/slenart/orgs", "repos_url": "https://api.github.com/users/slenart/repos", "events_url": "https://api.github.com/users/slenart/events{/privacy}", "received_events_url": "https://api.github.com/users/slenart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-14T15:51:24Z", "updated_at": "2020-02-14T19:47:29Z", "closed_at": "2020-02-14T19:47:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen `exluced_fields` \"exclude\" some fields in history's table,\r\nthen we expected to see only new entries in the historical table for\r\nchanges made not in excluded fields.\r\n\r\n**To Reproduce**\r\nGot code:\r\n```\r\nfrom simple_history import register\r\nfrom django.contrib.auth.models import User\r\n\r\n\r\napply_history_to_User = register(\r\n    User, app='core', excluded_fields = ['password', 'last_login'],\r\n    table_name='auth_historicaluser',\r\n    use_base_model_db=True, inherit=True,\r\n)\r\n\r\n# change to `app=__package__`\r\n```\r\n\r\n\r\n**Expected behavior**\r\nlast_login field is excluded so when user log in it should **not**\r\nadd any record to history's table, but it's not true.\r\nEvery login created a new record in history table and values are same\r\n(Except internal history_date of course and history_id)\r\n\r\n**Environment (please complete the following information):**\r\n- Django                          2.2.9\r\n- django-simple-history           2.8.0 \r\n- Database Version: [Mysql 5.7.28]\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/626", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/626/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/626/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/626/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/626", "id": 564429821, "node_id": "MDU6SXNzdWU1NjQ0Mjk4MjE=", "number": 626, "title": "rate limit history of models?", "user": {"login": "CSchank", "id": 12722104, "node_id": "MDQ6VXNlcjEyNzIyMTA0", "avatar_url": "https://avatars0.githubusercontent.com/u/12722104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CSchank", "html_url": "https://github.com/CSchank", "followers_url": "https://api.github.com/users/CSchank/followers", "following_url": "https://api.github.com/users/CSchank/following{/other_user}", "gists_url": "https://api.github.com/users/CSchank/gists{/gist_id}", "starred_url": "https://api.github.com/users/CSchank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CSchank/subscriptions", "organizations_url": "https://api.github.com/users/CSchank/orgs", "repos_url": "https://api.github.com/users/CSchank/repos", "events_url": "https://api.github.com/users/CSchank/events{/privacy}", "received_events_url": "https://api.github.com/users/CSchank/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-13T04:20:58Z", "updated_at": "2020-02-14T15:38:36Z", "closed_at": "2020-02-14T15:38:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nPerhaps I just haven't seen this as an option, but there doesn't appear to be a built-in way to change the frequency of how often new history is kept.\r\n\r\n**Describe the solution you'd like**\r\nFor example, if a project has an auto-save where the client is saving every 5 seconds, we don't necessarily want to keep a history of every single change every 5 seconds. Instead, if the user is editing many times per minute, I'd like to be able to only save a new historical entry every, say one or two minutes. Thus, the model would still be saved, but we'd only end up with a maximum of one new history entry per minute.\r\n\r\n**Describe alternatives you've considered**\r\nUsing the example shown of how to save the model without creating a history entry, we could manually check in our view whether there has been a save in the past minute and call that alternative, \"history-free\" save function instead. It seems like this could be more elegantly handled by the plugin itself, by simply providing a value.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/624", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/624/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/624/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/624/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/624", "id": 563156084, "node_id": "MDU6SXNzdWU1NjMxNTYwODQ=", "number": 624, "title": "no such table: auth_historicaluser when running Bitbucket Pipeline", "user": {"login": "StevenMapes", "id": 2013210, "node_id": "MDQ6VXNlcjIwMTMyMTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2013210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StevenMapes", "html_url": "https://github.com/StevenMapes", "followers_url": "https://api.github.com/users/StevenMapes/followers", "following_url": "https://api.github.com/users/StevenMapes/following{/other_user}", "gists_url": "https://api.github.com/users/StevenMapes/gists{/gist_id}", "starred_url": "https://api.github.com/users/StevenMapes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StevenMapes/subscriptions", "organizations_url": "https://api.github.com/users/StevenMapes/orgs", "repos_url": "https://api.github.com/users/StevenMapes/repos", "events_url": "https://api.github.com/users/StevenMapes/events{/privacy}", "received_events_url": "https://api.github.com/users/StevenMapes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-11T11:52:15Z", "updated_at": "2020-02-14T09:43:28Z", "closed_at": "2020-02-14T09:43:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Update** After further testing the issue is due to a missing migrations relating to the Django Auth app that are not created within the project repository or contained within the django-simple-history app itself, and so a new step is required.\r\n\r\nIf you run a showmigrations locally you see the following:\r\n```\r\nadmin\r\n [ ] 0001_initial\r\n [ ] 0002_logentry_remove_auto_add\r\n [ ] 0003_logentry_add_action_flag_choices\r\nauth\r\n [ ] 0001_initial\r\n [ ] 0002_alter_permission_name_max_length\r\n [ ] 0003_alter_user_email_max_length\r\n [ ] 0004_alter_user_username_opts\r\n [ ] 0005_alter_user_last_login_null\r\n [ ] 0006_require_contenttypes_0002\r\n [ ] 0007_alter_validators_add_error_messages\r\n [ ] 0008_alter_user_username_max_length\r\n [ ] 0009_alter_user_last_name_max_length\r\n [ ] 0010_alter_group_name_max_length\r\n [ ] 0011_update_proxy_permissions\r\n [ ] 0012_historicaluser\r\n```\r\n\r\nWhen adding a showmigrations step on BitBucket Piplines. You'll see \r\n\r\n```\r\nadmin\r\n [ ] 0001_initial\r\n [ ] 0002_logentry_remove_auto_add\r\n [ ] 0003_logentry_add_action_flag_choices\r\nauth\r\n [ ] 0001_initial\r\n [ ] 0002_alter_permission_name_max_length\r\n [ ] 0003_alter_user_email_max_length\r\n [ ] 0004_alter_user_username_opts\r\n [ ] 0005_alter_user_last_login_null\r\n [ ] 0006_require_contenttypes_0002\r\n [ ] 0007_alter_validators_add_error_messages\r\n [ ] 0008_alter_user_username_max_length\r\n [ ] 0009_alter_user_last_name_max_length\r\n [ ] 0010_alter_group_name_max_length\r\n [ ] 0011_update_proxy_permissions\r\n```\r\n\r\nThis results in the unit tests failing due to the ```auth_historicaluser``` table not being created by the migrations.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behaviour:\r\n1. Setup pipelines yml and push code to BitBucket\r\n2. See error\r\n \r\n**Fix**\r\n\r\nThe work around is to ensure that you add a step of ``python manage.py makemigrations auth`` into your YML file\r\n\r\nE.G\r\n```\r\npipelines:\r\n  branches:\r\n    'develop':\r\n      - step:\r\n          name: Python 3.7.3\r\n          image: python:3.7.3\r\n          caches:\r\n            - pip\r\n          script:\r\n            - pip install -U pip setuptools\r\n            - pip install -r requirements/pipelines.txt\r\n            - python manage.py makemigrations auth\r\n            - coverage erase\r\n            - coverage run manage.py test\r\n            - coverage report\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/623", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/623/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/623/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/623/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/623", "id": 562849231, "node_id": "MDU6SXNzdWU1NjI4NDkyMzE=", "number": 623, "title": "FileField should be transformed into a CharField instead of a TextField", "user": {"login": "jcushman", "id": 376272, "node_id": "MDQ6VXNlcjM3NjI3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/376272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcushman", "html_url": "https://github.com/jcushman", "followers_url": "https://api.github.com/users/jcushman/followers", "following_url": "https://api.github.com/users/jcushman/following{/other_user}", "gists_url": "https://api.github.com/users/jcushman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcushman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcushman/subscriptions", "organizations_url": "https://api.github.com/users/jcushman/orgs", "repos_url": "https://api.github.com/users/jcushman/repos", "events_url": "https://api.github.com/users/jcushman/events{/privacy}", "received_events_url": "https://api.github.com/users/jcushman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-10T21:49:16Z", "updated_at": "2020-02-12T21:15:45Z", "closed_at": "2020-02-12T21:15:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n`FileField` is turned into a `TextField` on history tables by the [`transform_field` function](https://github.com/treyhunner/django-simple-history/blob/68211b5dcbf79dfab71144fe1a524598b3656e23/simple_history/models.py#L546), but it should be turned into a CharField instead:\r\n\r\n```\r\n    elif isinstance(field, models.FileField):\r\n        # Don't copy file, just path.\r\n        field.__class__ = models.TextField  # should be CharField\r\n```\r\n\r\nUsing `TextField` changes the representation of the file field in the database, because `FileField`s use the same database representation as `CharField`, not `TextField`.\r\n\r\nFor example, see Django's [postgres backend](https://github.com/django/django/blob/master/django/db/backends/postgresql/base.py#L72), where FileField is mapped to `'varchar(%(max_length)s)'` instead of `'text'`; the same is true for other backends. \r\n\r\nThe upshot is that `FileFields` end up as `varchar`s in the primary table but as `text`s in the history table. This probably works fine for most users, since it's a more permissive field, but it's breaking a third party tool I'm using that expects the primary table and history table columns to have the same type.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create a history-tracked table with a `FileField`\r\n2. Run `./manage.py sqlmigrate` to observe that the file field on the primary table is `varchar` but the field on the history table is `text`.\r\n\r\n**Expected behavior**\r\nFields on the primary and history table should have the same type.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/622", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/622/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/622/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/622/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/622", "id": 559692631, "node_id": "MDU6SXNzdWU1NTk2OTI2MzE=", "number": 622, "title": "Migrations break for ManyToMany models", "user": {"login": "StevenMapes", "id": 2013210, "node_id": "MDQ6VXNlcjIwMTMyMTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2013210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StevenMapes", "html_url": "https://github.com/StevenMapes", "followers_url": "https://api.github.com/users/StevenMapes/followers", "following_url": "https://api.github.com/users/StevenMapes/following{/other_user}", "gists_url": "https://api.github.com/users/StevenMapes/gists{/gist_id}", "starred_url": "https://api.github.com/users/StevenMapes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StevenMapes/subscriptions", "organizations_url": "https://api.github.com/users/StevenMapes/orgs", "repos_url": "https://api.github.com/users/StevenMapes/repos", "events_url": "https://api.github.com/users/StevenMapes/events{/privacy}", "received_events_url": "https://api.github.com/users/StevenMapes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-04T12:38:32Z", "updated_at": "2020-02-04T12:46:23Z", "closed_at": "2020-02-04T12:46:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nThis is a rather major bug as it makes the app completely unusable which is a shame as I really wanted to use it for a few projects.\r\n\r\nThe buy is that you can not use this app if you have models with ManyToMany relationships using custom \"through\" models\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Install django and this app into a new project\r\n2. Create the following models\r\n```\r\nfrom django.db import models\r\n\r\nfrom simple_history.models import HistoricalRecords\r\n\r\n\r\nclass AuditModel(models.Model):\r\n    history = HistoricalRecords()\r\n    class Meta:\r\n        abstract = True\r\n\r\n\r\nclass Address(AuditModel):\r\n    address_id = models.AutoField(primary_key=True)\r\n    address_1 = models.CharField(max_length=255, blank=True, default=\"\")\r\n    address_2 = models.CharField(max_length=255, blank=True, default=\"\")\r\n    city = models.CharField(max_length=255, blank=True, default=\"\")\r\n    state = models.CharField(max_length=255, blank=True, default=\"\")\r\n    postcode = models.CharField(max_length=32, blank=True, default=\"\")\r\n    country_code = models.CharField(max_length=2, blank=True, default=\"\", db_index=True)\r\n    created_on = models.DateTimeField(auto_now_add=True, db_index=True)\r\n    updated_on = models.DateTimeField(auto_now=True, db_index=True)\r\n\r\nclass Company(AuditModel):\r\n    \"\"\"The companies to which users below either directly or indirectly\"\"\"\r\n\r\n    class Meta:\r\n        db_table = \"company\"\r\n        verbose_name_plural = \"Companies\"\r\n        index_together = (\r\n            (\"archived\", \"company\")\r\n        )\r\n        ordering = [\"company\"]\r\n\r\n    company_id = models.AutoField(primary_key=True)\r\n    company = models.CharField(max_length=255, unique=True)\r\n    addresses = models.ManyToManyField(Address, through='CompanyAddress')\r\n    archived = models.BooleanField(default=False)\r\n    created_on = models.DateTimeField(auto_now_add=True, db_index=True)\r\n    updated_on = models.DateTimeField(auto_now=True, db_index=True)\r\n\r\nclass CompanyAddress(AuditModel):\r\n    \"\"\"Join table between a Company and the Address table\"\"\"\r\n    class Meta:\r\n        db_table = \"company_address\"\r\n        unique_together = (\r\n            (\"company\", \"address\")\r\n        )\r\n        verbose_name_plural = \"Company addresses\"\r\n\r\n    company_address_id = models.AutoField(primary_key=True)\r\n    company = models.ForeignKey(Company, on_delete=models.CASCADE)\r\n    address = models.ForeignKey(Address, on_delete=models.CASCADE)\r\n    created_on = models.DateTimeField(auto_now_add=True, db_index=True)\r\n    updated_on = models.DateTimeField(auto_now=True, db_index=True)\r\n```\r\n3. Run ```python manage.py makemigrations```\r\n```\r\nERRORS:\r\naddress.Company.company: (models.E006) The field 'company' clashes with the field 'company' from model 'address.auditmodel'.\r\naddress.CompanyAddress.address: (models.E006) The field 'address' clashes with the field 'address' from model 'address.auditmodel'.\r\naddress.CompanyAddress.company: (models.E006) The field 'company' clashes with the field 'company' from model 'address.auditmodel'.\r\n```\r\n\r\nIf you create the joining model to use ```related_name``` then you receive even more errors\r\n```\r\nclass CompanyAddress(AuditModel):\r\n    \"\"\"Join table between a Company and the Address table\"\"\"\r\n    class Meta:\r\n        db_table = \"company_address\"\r\n        unique_together = (\r\n            (\"company\", \"address\")\r\n        )\r\n        verbose_name_plural = \"Company addresses\"\r\n\r\n    company_address_id = models.AutoField(primary_key=True)\r\n    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name=\"addresses\")\r\n    address = models.ForeignKey(Address, on_delete=models.CASCADE, related_name=\"companies\")\r\n    created_on = models.DateTimeField(auto_now_add=True, db_index=True)\r\n    updated_on = models.DateTimeField(auto_now=True, db_index=True)\r\n```\r\n\r\n```\r\n$ python manage.py makemigrations\r\nSystemCheckError: System check identified some issues:\r\n\r\nERRORS:\r\naddress.Company.company: (models.E006) The field 'company' clashes with the field 'company' from model 'address.auditmodel'.\r\naddress.CompanyAddress.address: (models.E006) The field 'address' clashes with the field 'address' from model 'address.auditmodel'.\r\naddress.CompanyAddress.company: (fields.E302) Reverse accessor for 'CompanyAddress.company' clashes with field name 'Company.addresses'.\r\n        HINT: Rename field 'Company.addresses', or add/change a related_name argument to the definition for field 'CompanyAddress.company'.\r\naddress.CompanyAddress.company: (fields.E303) Reverse query name for 'CompanyAddress.company' clashes with field name 'Company.addresses'.\r\n        HINT: Rename field 'Company.addresses', or add/change a related_name argument to the definition for field 'CompanyAddress.company'.\r\naddress.CompanyAddress.company: (models.E006) The field 'company' clashes with the field 'company' from model 'address.auditmodel'.\r\n```\r\n\r\n\r\n**Expected behavior**\r\nThe migrations should generate\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Ubuntu 18.04, Ubuntu 16.04, Kubuntu 18\r\n - Django Version: 3.0.3\r\n - Database Version: All - Confirmed with MySQL, MariaDB and SQLite\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/621", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/621/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/621/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/621/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/621", "id": 553765824, "node_id": "MDU6SXNzdWU1NTM3NjU4MjQ=", "number": 621, "title": "Is it possible to show the changed field/fields on the Change history table?", "user": {"login": "sharozmirza", "id": 16842395, "node_id": "MDQ6VXNlcjE2ODQyMzk1", "avatar_url": "https://avatars0.githubusercontent.com/u/16842395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sharozmirza", "html_url": "https://github.com/sharozmirza", "followers_url": "https://api.github.com/users/sharozmirza/followers", "following_url": "https://api.github.com/users/sharozmirza/following{/other_user}", "gists_url": "https://api.github.com/users/sharozmirza/gists{/gist_id}", "starred_url": "https://api.github.com/users/sharozmirza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sharozmirza/subscriptions", "organizations_url": "https://api.github.com/users/sharozmirza/orgs", "repos_url": "https://api.github.com/users/sharozmirza/repos", "events_url": "https://api.github.com/users/sharozmirza/events{/privacy}", "received_events_url": "https://api.github.com/users/sharozmirza/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-22T20:08:43Z", "updated_at": "2020-02-27T10:46:35Z", "closed_at": "2020-01-22T21:16:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I change model object through the django admin site and if I do not use django-simple-history, I can see which field is changed in the `Action` column. Is it possible to achieve this using django-simple-history?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/619", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/619/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/619/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/619/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/619", "id": 547516933, "node_id": "MDU6SXNzdWU1NDc1MTY5MzM=", "number": 619, "title": "How to prevent a requested change from being recorded?", "user": {"login": "abersheeran", "id": 25364828, "node_id": "MDQ6VXNlcjI1MzY0ODI4", "avatar_url": "https://avatars3.githubusercontent.com/u/25364828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abersheeran", "html_url": "https://github.com/abersheeran", "followers_url": "https://api.github.com/users/abersheeran/followers", "following_url": "https://api.github.com/users/abersheeran/following{/other_user}", "gists_url": "https://api.github.com/users/abersheeran/gists{/gist_id}", "starred_url": "https://api.github.com/users/abersheeran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abersheeran/subscriptions", "organizations_url": "https://api.github.com/users/abersheeran/orgs", "repos_url": "https://api.github.com/users/abersheeran/repos", "events_url": "https://api.github.com/users/abersheeran/events{/privacy}", "received_events_url": "https://api.github.com/users/abersheeran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-09T14:35:57Z", "updated_at": "2020-02-14T15:39:26Z", "closed_at": "2020-02-14T15:39:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "My project has two users, one is employees and the other is users. I just want to record the operation history of employees, not the records of users. \r\n\r\nHow should I do? I didn't find a way to do it in the documentation.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/618", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/618/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/618/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/618/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/618", "id": 545528605, "node_id": "MDU6SXNzdWU1NDU1Mjg2MDU=", "number": 618, "title": "Model.validate_unique incompatible with django-simple-history", "user": {"login": "guyjeangilles", "id": 7256157, "node_id": "MDQ6VXNlcjcyNTYxNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7256157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guyjeangilles", "html_url": "https://github.com/guyjeangilles", "followers_url": "https://api.github.com/users/guyjeangilles/followers", "following_url": "https://api.github.com/users/guyjeangilles/following{/other_user}", "gists_url": "https://api.github.com/users/guyjeangilles/gists{/gist_id}", "starred_url": "https://api.github.com/users/guyjeangilles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guyjeangilles/subscriptions", "organizations_url": "https://api.github.com/users/guyjeangilles/orgs", "repos_url": "https://api.github.com/users/guyjeangilles/repos", "events_url": "https://api.github.com/users/guyjeangilles/events{/privacy}", "received_events_url": "https://api.github.com/users/guyjeangilles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-06T04:07:43Z", "updated_at": "2020-02-19T12:50:26Z", "closed_at": "2020-02-14T15:45:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nIncluding `self.validate_unique()` in an overridden `save()` method raises a `Validation Error` when reverting a model.\r\n```\r\n>>> model.history.earliest().instance.save()\r\n...\r\ndjango.core.exceptions.ValidationError: {'id': ['<model name> with this ID already exists.']}\r\n```\r\nQuerying history doesn't raise an error, however. Directly using the model's `save()` function does not error either\r\n\r\n```\r\n>>> model.history.all()\r\n# no errors raised\r\n>>> model.save()\r\n>>> model.save()\r\n# no errors raised\r\n```\r\n\r\n\r\n**To Reproduce**\r\nThe following when added to any model throws an error. Save function is based off the [Django Docs](https://docs.djangoproject.com/en/2.2/ref/models/instances/#customizing-model-loading)\r\n```\r\n# models.py\r\n...\r\ndef save(self, *args, **kwargs):\r\n    \"\"\"Error causing save\"\"\"\r\n    self.validate_unique()\r\n    super().save(*args, **kwargs)\r\n...\r\n```\r\nThe following does not raise an error\r\n```\r\n# models.py\r\n...\r\ndef save(self, *args, **kwargs):\r\n    \"\"\"Properly functioning save\"\"\"\r\n    super().save(*args, **kwargs)\r\n...\r\n```\r\n\r\n**Expected behavior**\r\n`book.history.earliest().instance.save()` should work whenever `model.save()` works.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Ubuntu 16.04\r\n - Django Simple History Version: 2.8.0\r\n - Django Version: 2.2.9\r\n - Database Version: (PostgreSQL) 12.1 (Debian 12.1-1.pgdg100+1)\r\n\r\n**Additional context**\r\nMy environment is in a Docker container, but I can reproduce the error outside of Docker with a Django project made within a virtualenv environment\r\n- Docker version: Docker version 19.03.5, build 633a0ea838\r\n- Docker Compose Version: docker-compose version 1.24.1, build 4667896b\r\n\r\nThe exact traceback from my project\r\n```\r\nTraceback (most recent call last):\r\n  File \"<console>\", line 1, in <module>\r\n  File \"/usr/src/bookroost/catalog/models/records.py\", line 102, in save\r\n    self.validate_unique()\r\n  File \"/root/.local/lib/python3.8/site-packages/django/db/models/base.py\", line 987, in validate_unique\r\n    raise ValidationError(errors)\r\ndjango.core.exceptions.ValidationError: {'id': ['Book with this ID already exists.']}\r\n```\r\n\r\nThis is blocking me on my current project so any workaround would be greatly appreciated :)\r\n\r\nEDIT: added tracebook\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/615", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/615/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/615/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/615/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/615", "id": 542324897, "node_id": "MDU6SXNzdWU1NDIzMjQ4OTc=", "number": 615, "title": "Can't recreate historical instance when using Inheritance", "user": {"login": "amir5121", "id": 14313737, "node_id": "MDQ6VXNlcjE0MzEzNzM3", "avatar_url": "https://avatars2.githubusercontent.com/u/14313737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amir5121", "html_url": "https://github.com/amir5121", "followers_url": "https://api.github.com/users/amir5121/followers", "following_url": "https://api.github.com/users/amir5121/following{/other_user}", "gists_url": "https://api.github.com/users/amir5121/gists{/gist_id}", "starred_url": "https://api.github.com/users/amir5121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amir5121/subscriptions", "organizations_url": "https://api.github.com/users/amir5121/orgs", "repos_url": "https://api.github.com/users/amir5121/repos", "events_url": "https://api.github.com/users/amir5121/events{/privacy}", "received_events_url": "https://api.github.com/users/amir5121/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-25T11:21:17Z", "updated_at": "2019-12-25T12:26:59Z", "closed_at": "2019-12-25T12:26:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Let's say i have the following:\r\n\r\n```\r\n    class Parent(models.Model):\r\n        fields...\r\n    \thistory = HistoricalRecords(inherit=True)\r\n    \r\n    class Child(Parent):\r\n        fields...\r\n        \r\n    class Invoice(models.Model):\r\n        fields...\r\n        parent_history = models.ForeignKey(\"app.HistoricalParent\", blank=True, null=True, on_delete=models.PROTECT, help_text=\"This keeps the state of the Child when Invoice is generated\")\r\n        parent =  models.ForeignKey(Parent, blank=True, null=True, on_delete=models.PROTECT) # can be removed so foreign key loop gets eliminated\r\n```\r\n\r\n\r\nHow can i reach from `Invoice` to `Child`?\r\n\r\n    Invoice.objects.get(id=1).parent_history.child\r\n\r\nDoes not work and raise \r\n    \r\n    AttributeError: 'HistoricalParent' object has no attribute 'child'\r\n\r\nand this is how i am reaching `Child` from `Parent`\r\n\r\n    Invoice.objects.get(id=1).parent.child\r\n\r\nI can't find the foreign key from `HistoricalChild` to `HistoricalParent`. Am i missing something? Does django-simple-history works some other way?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/612", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/612/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/612/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/612/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/612", "id": 531251046, "node_id": "MDU6SXNzdWU1MzEyNTEwNDY=", "number": 612, "title": "Documentation - requests for clarification", "user": {"login": "d33tah", "id": 295322, "node_id": "MDQ6VXNlcjI5NTMyMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d33tah", "html_url": "https://github.com/d33tah", "followers_url": "https://api.github.com/users/d33tah/followers", "following_url": "https://api.github.com/users/d33tah/following{/other_user}", "gists_url": "https://api.github.com/users/d33tah/gists{/gist_id}", "starred_url": "https://api.github.com/users/d33tah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d33tah/subscriptions", "organizations_url": "https://api.github.com/users/d33tah/orgs", "repos_url": "https://api.github.com/users/d33tah/repos", "events_url": "https://api.github.com/users/d33tah/events{/privacy}", "received_events_url": "https://api.github.com/users/d33tah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-02T16:29:52Z", "updated_at": "2019-12-03T21:57:25Z", "closed_at": "2019-12-03T21:52:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nThanks for django-simple-history! I decided to plug it in to my project a couple of months ago and recently had another requirement to do raw SQL queries or handle inter-project dependencies some other way, which prompted me to read the docs more carefully. There are a couple items that I'm still not clear about:\r\n\r\n1. A) What's the relationship between *historical$model and *$model tables? In other words: B) is the latest version stored in *$model, *historical$model, or both?\r\n2. The documentation is missing example use cases for many of the features. One that I most care about is \"save without a historical record\". A) What happens if the tables go out of sync? B) Does anything prevent that if data was modified externally, are there any automatic health recovery procedures? C) Are there any failure modes I should be aware of? Also: D) is there something new I need to be mindful of when doing raw SQL inserts/updates/selects?\r\n3. Why do some people prefer UUID as history_id?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/608", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/608/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/608/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/608/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/608", "id": 526060591, "node_id": "MDU6SXNzdWU1MjYwNjA1OTE=", "number": 608, "title": "Pin `black` to a specific version, so that new PRs don't fail the build extraneously", "user": {"login": "rossmechanic", "id": 6855461, "node_id": "MDQ6VXNlcjY4NTU0NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6855461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossmechanic", "html_url": "https://github.com/rossmechanic", "followers_url": "https://api.github.com/users/rossmechanic/followers", "following_url": "https://api.github.com/users/rossmechanic/following{/other_user}", "gists_url": "https://api.github.com/users/rossmechanic/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossmechanic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossmechanic/subscriptions", "organizations_url": "https://api.github.com/users/rossmechanic/orgs", "repos_url": "https://api.github.com/users/rossmechanic/repos", "events_url": "https://api.github.com/users/rossmechanic/events{/privacy}", "received_events_url": "https://api.github.com/users/rossmechanic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-20T19:15:02Z", "updated_at": "2019-12-01T15:30:49Z", "closed_at": "2019-12-01T15:30:49Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/607", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/607/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/607/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/607/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/607", "id": 526021159, "node_id": "MDU6SXNzdWU1MjYwMjExNTk=", "number": 607, "title": "Add tests for #585", "user": {"login": "rossmechanic", "id": 6855461, "node_id": "MDQ6VXNlcjY4NTU0NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6855461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossmechanic", "html_url": "https://github.com/rossmechanic", "followers_url": "https://api.github.com/users/rossmechanic/followers", "following_url": "https://api.github.com/users/rossmechanic/following{/other_user}", "gists_url": "https://api.github.com/users/rossmechanic/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossmechanic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossmechanic/subscriptions", "organizations_url": "https://api.github.com/users/rossmechanic/orgs", "repos_url": "https://api.github.com/users/rossmechanic/repos", "events_url": "https://api.github.com/users/rossmechanic/events{/privacy}", "received_events_url": "https://api.github.com/users/rossmechanic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-20T18:52:16Z", "updated_at": "2019-11-29T22:29:55Z", "closed_at": "2019-11-29T22:29:55Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Merged #585 to get it in as it looks like a safe change, but need to add tests for it before the next release", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/605", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/605/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/605/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/605/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/605", "id": 525109394, "node_id": "MDU6SXNzdWU1MjUxMDkzOTQ=", "number": 605, "title": "\"minutes\" flag still checks historical records for records that have never changed", "user": {"login": "craigmaloney", "id": 527251, "node_id": "MDQ6VXNlcjUyNzI1MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/527251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/craigmaloney", "html_url": "https://github.com/craigmaloney", "followers_url": "https://api.github.com/users/craigmaloney/followers", "following_url": "https://api.github.com/users/craigmaloney/following{/other_user}", "gists_url": "https://api.github.com/users/craigmaloney/gists{/gist_id}", "starred_url": "https://api.github.com/users/craigmaloney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/craigmaloney/subscriptions", "organizations_url": "https://api.github.com/users/craigmaloney/orgs", "repos_url": "https://api.github.com/users/craigmaloney/repos", "events_url": "https://api.github.com/users/craigmaloney/events{/privacy}", "received_events_url": "https://api.github.com/users/craigmaloney/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-19T16:11:09Z", "updated_at": "2019-12-03T23:20:45Z", "closed_at": "2019-12-03T23:20:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nUsing the minutes flag on a large database will still trawl historical records that have not changed and are unlikely to change. This is fine for smaller databases but on the database that I'm using I'm finding it trawling records that are decades old and unlikely to ever change. Need better filtering on the stop date to prevent referencing these records.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create a history database on a database of 8M records\r\n2. Run `python manage.py clean_duplicate_history -m 60 --auto`\r\n3. Check the process to find that it is searching on unrelated records\r\n\r\n**Expected behavior**\r\nIf we know the subset of records that we're searching on historical records it might make more sense to filter on those records from the get-go rather than iterate over each record in the database in hopes of a match. The `model.objects.all()` returned 8M records, whereas the records that had changed in that period were 1,835. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/603", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/603/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/603/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/603/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/603", "id": 524633493, "node_id": "MDU6SXNzdWU1MjQ2MzM0OTM=", "number": 603, "title": "OOM when using clean_duplicate_history on over 8M records", "user": {"login": "craigmaloney", "id": 527251, "node_id": "MDQ6VXNlcjUyNzI1MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/527251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/craigmaloney", "html_url": "https://github.com/craigmaloney", "followers_url": "https://api.github.com/users/craigmaloney/followers", "following_url": "https://api.github.com/users/craigmaloney/following{/other_user}", "gists_url": "https://api.github.com/users/craigmaloney/gists{/gist_id}", "starred_url": "https://api.github.com/users/craigmaloney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/craigmaloney/subscriptions", "organizations_url": "https://api.github.com/users/craigmaloney/orgs", "repos_url": "https://api.github.com/users/craigmaloney/repos", "events_url": "https://api.github.com/users/craigmaloney/events{/privacy}", "received_events_url": "https://api.github.com/users/craigmaloney/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-18T21:35:36Z", "updated_at": "2019-11-20T20:39:51Z", "closed_at": "2019-11-20T20:39:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nI am getting an OOM error when running ``clean_duplicate_history`` to clean up duplicate rows for an application that I'm running.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Have an existing database of over 8M records\r\n2. Create a cloud instance of about 6GB of memory or less\r\n3. Run ``python manage.py clean_duplicate_history --auto`` to clean up duplicates\r\n4. Get an OOM error because the database is loaded into memory.\r\n\r\n**Expected behavior**\r\nExpect that the program will not OOM.\r\n\r\n**Additional context**\r\nThis is in part because the clean_duplicate_history is using .all() without setting an iterator. The iterator will prevent loading the contents all into memory for processing.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/602", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/602/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/602/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/602/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/602", "id": 519930583, "node_id": "MDU6SXNzdWU1MTk5MzA1ODM=", "number": 602, "title": "Ability to disable admin Revert functionality", "user": {"login": "lazybird", "id": 2660255, "node_id": "MDQ6VXNlcjI2NjAyNTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2660255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lazybird", "html_url": "https://github.com/lazybird", "followers_url": "https://api.github.com/users/lazybird/followers", "following_url": "https://api.github.com/users/lazybird/following{/other_user}", "gists_url": "https://api.github.com/users/lazybird/gists{/gist_id}", "starred_url": "https://api.github.com/users/lazybird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lazybird/subscriptions", "organizations_url": "https://api.github.com/users/lazybird/orgs", "repos_url": "https://api.github.com/users/lazybird/repos", "events_url": "https://api.github.com/users/lazybird/events{/privacy}", "received_events_url": "https://api.github.com/users/lazybird/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-08T10:19:19Z", "updated_at": "2020-05-05T01:52:28Z", "closed_at": "2020-05-05T01:52:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nI'm using django-simple-history in a project where we don't want to allow the \"Revert\" functionality in the admin.\r\n\r\n**Describe the solution you'd like**\r\nIn `simple_history.admin.SimpleHistoryAdmin` we could have a way to disable the \"revert\" button.\r\n\r\n\r\n    class PollHistoryAdmin(SimpleHistoryAdmin):\r\n        enable_revert = False\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/600", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/600/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/600/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/600/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/600", "id": 515900592, "node_id": "MDU6SXNzdWU1MTU5MDA1OTI=", "number": 600, "title": "'Options' object has no attribute 'simple_history_manager_attribute'", "user": {"login": "rifuso", "id": 19328446, "node_id": "MDQ6VXNlcjE5MzI4NDQ2", "avatar_url": "https://avatars3.githubusercontent.com/u/19328446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rifuso", "html_url": "https://github.com/rifuso", "followers_url": "https://api.github.com/users/rifuso/followers", "following_url": "https://api.github.com/users/rifuso/following{/other_user}", "gists_url": "https://api.github.com/users/rifuso/gists{/gist_id}", "starred_url": "https://api.github.com/users/rifuso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rifuso/subscriptions", "organizations_url": "https://api.github.com/users/rifuso/orgs", "repos_url": "https://api.github.com/users/rifuso/repos", "events_url": "https://api.github.com/users/rifuso/events{/privacy}", "received_events_url": "https://api.github.com/users/rifuso/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-01T04:09:00Z", "updated_at": "2019-12-01T21:11:52Z", "closed_at": "2019-12-01T21:11:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to integrate the admin as instructed here:\r\n\r\nhttps://django-simple-history.readthedocs.io/en/latest/admin.html\r\n\r\nBut I get this error (Django 2.2.6, Python 3.7):\r\n\r\nFile \"/Users/f/virt_env/veeo-2VJsLjIm/lib/python3.7/site-packages/simple_history/admin.py\" in history_view\r\n  51.         history = getattr(model, model._meta.simple_history_manager_attribute)\r\n\r\nException Type: AttributeError at /admin/website/sitepage/1/history/\r\nException Value: 'Options' object has no attribute 'simple_history_manager_attribute'\r\n\r\nAny suggestions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/598", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/598/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/598/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/598/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/598", "id": 508929054, "node_id": "MDU6SXNzdWU1MDg5MjkwNTQ=", "number": 598, "title": "Django 3 support", "user": {"login": "elmcrest", "id": 931919, "node_id": "MDQ6VXNlcjkzMTkxOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/931919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elmcrest", "html_url": "https://github.com/elmcrest", "followers_url": "https://api.github.com/users/elmcrest/followers", "following_url": "https://api.github.com/users/elmcrest/following{/other_user}", "gists_url": "https://api.github.com/users/elmcrest/gists{/gist_id}", "starred_url": "https://api.github.com/users/elmcrest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elmcrest/subscriptions", "organizations_url": "https://api.github.com/users/elmcrest/orgs", "repos_url": "https://api.github.com/users/elmcrest/repos", "events_url": "https://api.github.com/users/elmcrest/events{/privacy}", "received_events_url": "https://api.github.com/users/elmcrest/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-18T08:22:59Z", "updated_at": "2020-02-19T12:55:33Z", "closed_at": "2019-12-01T15:29:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nRunning my CI with Django 3.0b1 breaks because of incompatibility of django-simple-history.\r\nMy guess is that Django 3 drops Python 2 support and therefor `python_2_unicode_compatible` isn't available anymore.\r\n\r\n**Describe the solution you'd like**\r\nMake it compatible with Django 3\r\n\r\n**Describe alternatives you've considered**\r\nThere are none I guess\r\n\r\n**Additional context**\r\nStacktrace:\r\n```bash\r\n  File \"/root/.vscode-server/extensions/ms-python.python-2019.10.41019/pythonFiles/ptvsd_launcher.py\", line 43, in <module>\r\n    main(ptvsdArgs)\r\n  File \"/root/.vscode-server/extensions/ms-python.python-2019.10.41019/pythonFiles/lib/python/old_ptvsd/ptvsd/__main__.py\", line 432, in main\r\n    run()\r\n  File \"/root/.vscode-server/extensions/ms-python.python-2019.10.41019/pythonFiles/lib/python/old_ptvsd/ptvsd/__main__.py\", line 316, in run_file\r\n    runpy.run_path(target, run_name='__main__')\r\n  File \"/usr/local/lib/python3.7/runpy.py\", line 263, in run_path\r\n    pkg_name=pkg_name, script_name=fname)\r\n  File \"/usr/local/lib/python3.7/runpy.py\", line 96, in _run_module_code\r\n    mod_name, mod_spec, pkg_name, script_name)\r\n  File \"/usr/local/lib/python3.7/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/app/paper/manage.py\", line 21, in <module>\r\n    main()\r\n  File \"/app/paper/manage.py\", line 17, in main\r\n    execute_from_command_line(sys.argv)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/core/management/__init__.py\", line 401, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/usr/local/lib/python3.7/site-packages/django/core/management/__init__.py\", line 377, in execute\r\n    django.setup()\r\n  File \"/usr/local/lib/python3.7/site-packages/django/__init__.py\", line 24, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/apps/registry.py\", line 114, in populate\r\n    app_config.import_models()\r\n  File \"/usr/local/lib/python3.7/site-packages/django/apps/config.py\", line 211, in import_models\r\n    self.models_module = import_module(models_module_name)\r\n  File \"/usr/local/lib/python3.7/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/usr/local/lib/python3.7/site-packages/simple_history/models.py\", line 19, in <module>\r\n    from django.utils.encoding import python_2_unicode_compatible, smart_text\r\nImportError: cannot import name 'python_2_unicode_compatible' from 'django.utils.encoding' (/usr/local/lib/python3.7/site-packages/django/utils/encoding.py)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/596", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/596/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/596/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/596/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/596", "id": 504941298, "node_id": "MDU6SXNzdWU1MDQ5NDEyOTg=", "number": 596, "title": "Missing closing parenthesis in documentation example", "user": {"login": "guilleijo", "id": 16108743, "node_id": "MDQ6VXNlcjE2MTA4NzQz", "avatar_url": "https://avatars3.githubusercontent.com/u/16108743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guilleijo", "html_url": "https://github.com/guilleijo", "followers_url": "https://api.github.com/users/guilleijo/followers", "following_url": "https://api.github.com/users/guilleijo/following{/other_user}", "gists_url": "https://api.github.com/users/guilleijo/gists{/gist_id}", "starred_url": "https://api.github.com/users/guilleijo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guilleijo/subscriptions", "organizations_url": "https://api.github.com/users/guilleijo/orgs", "repos_url": "https://api.github.com/users/guilleijo/repos", "events_url": "https://api.github.com/users/guilleijo/events{/privacy}", "received_events_url": "https://api.github.com/users/guilleijo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-09T23:05:45Z", "updated_at": "2019-10-23T19:34:33Z", "closed_at": "2019-10-23T19:34:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nThere is a missing closing parenthesis in a code example under \"Adding additional fields to historical models\"\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to 'https://django-simple-history.readthedocs.io/en/latest/historical_model.html#adding-additional-fields-to-historical-models'\r\n2. Scroll down to the end of the first block of code\r\n3. See that `history = HistoricalRecords(bases=[IPAddressHistoricalModel,]` is missing the closing parenthesis\r\n\r\n**Expected behavior**\r\nThe line should say `history = HistoricalRecords(bases=[IPAddressHistoricalModel,])`\r\n\r\n**Screenshots**\r\n<img width=\"501\" alt=\"Screen Shot 2019-10-09 at 19 52 17 1\" src=\"https://user-images.githubusercontent.com/16108743/66526713-01743180-ead0-11e9-8f28-93d50d85a103.png\">\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/595", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/595/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/595/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/595/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/595", "id": 504926905, "node_id": "MDU6SXNzdWU1MDQ5MjY5MDU=", "number": 595, "title": "Read the Docs Django version support 2.2 missing", "user": {"login": "daniel-butler", "id": 22578954, "node_id": "MDQ6VXNlcjIyNTc4OTU0", "avatar_url": "https://avatars2.githubusercontent.com/u/22578954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniel-butler", "html_url": "https://github.com/daniel-butler", "followers_url": "https://api.github.com/users/daniel-butler/followers", "following_url": "https://api.github.com/users/daniel-butler/following{/other_user}", "gists_url": "https://api.github.com/users/daniel-butler/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniel-butler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniel-butler/subscriptions", "organizations_url": "https://api.github.com/users/daniel-butler/orgs", "repos_url": "https://api.github.com/users/daniel-butler/repos", "events_url": "https://api.github.com/users/daniel-butler/events{/privacy}", "received_events_url": "https://api.github.com/users/daniel-butler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-09T22:21:49Z", "updated_at": "2019-12-01T21:09:36Z", "closed_at": "2019-12-01T21:09:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nOn the readthedocs website the index.html page does not have the updated 2.2 version displayed.\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to [https://django-simple-history.readthedocs.io/en/latest/index.html](https://django-simple-history.readthedocs.io/en/latest/index.html)\r\n2. Look at the supported versions table\r\n\r\n**Expected behavior**\r\nTo match the docs/index.html page\r\n\r\n**Screenshots**\r\n![missing versions](https://user-images.githubusercontent.com/22578954/66524861-a1768e80-eac1-11e9-87b1-881e9ebfc0a2.PNG)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/592", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/592/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/592/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/592/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/592", "id": 501512419, "node_id": "MDU6SXNzdWU1MDE1MTI0MTk=", "number": 592, "title": "SQL error at bulk_create_with_history", "user": {"login": "xahgmah", "id": 1928972, "node_id": "MDQ6VXNlcjE5Mjg5NzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1928972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xahgmah", "html_url": "https://github.com/xahgmah", "followers_url": "https://api.github.com/users/xahgmah/followers", "following_url": "https://api.github.com/users/xahgmah/following{/other_user}", "gists_url": "https://api.github.com/users/xahgmah/gists{/gist_id}", "starred_url": "https://api.github.com/users/xahgmah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xahgmah/subscriptions", "organizations_url": "https://api.github.com/users/xahgmah/orgs", "repos_url": "https://api.github.com/users/xahgmah/repos", "events_url": "https://api.github.com/users/xahgmah/events{/privacy}", "received_events_url": "https://api.github.com/users/xahgmah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-02T14:06:41Z", "updated_at": "2019-11-20T20:46:18Z", "closed_at": "2019-11-20T20:46:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is an SQL error on bulk_create_with_history when a model with HistoryRecords has an attribute `relation_name`:\r\n> django.db.utils.IntegrityError: NOT NULL constraint failed: tests_historicalstreet.history_relation_id\r\n\r\n\r\n1. Use any model with `log = HistoricalRecords(related_name=\"history\")`\r\n2. Try to create instances of this model with `bulk_create_with_history` method\r\n3. Model items created without history\r\n3. See the SQL error", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/591", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/591/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/591/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/591/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/591", "id": 501393969, "node_id": "MDU6SXNzdWU1MDEzOTM5Njk=", "number": 591, "title": "create_historical_record on demand", "user": {"login": "Lyalpha", "id": 12103194, "node_id": "MDQ6VXNlcjEyMTAzMTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/12103194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lyalpha", "html_url": "https://github.com/Lyalpha", "followers_url": "https://api.github.com/users/Lyalpha/followers", "following_url": "https://api.github.com/users/Lyalpha/following{/other_user}", "gists_url": "https://api.github.com/users/Lyalpha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lyalpha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lyalpha/subscriptions", "organizations_url": "https://api.github.com/users/Lyalpha/orgs", "repos_url": "https://api.github.com/users/Lyalpha/repos", "events_url": "https://api.github.com/users/Lyalpha/events{/privacy}", "received_events_url": "https://api.github.com/users/Lyalpha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-02T10:01:15Z", "updated_at": "2019-11-19T04:45:16Z", "closed_at": "2019-10-08T16:43:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am doing some `queryset.update()`, which of course doesn't trigger `save()` and so doesn't create a historical record.\r\n\r\nI can loop over the instances and manually `save()`, but I have an extensive number of other `post_save` signals that will fire unnecessarily for this `.update()` operation. Rather than having to disconnect signals, I was hoping there might be an option to just create a history record for an instance on demand, without a full save? I was looking at something like `HistorticalRecords.create_historical_record()`, but not sure how to go about calling/implementing it.\r\n\r\nI guess this could be considered a stopgap for a `bulk_update_with_history` method (e.g. #414). I don't know if my skills are up to implementing that properly unfortunately, so I was wondering if there was a possibility of the above workaround.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/587", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/587/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/587/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/587/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/587", "id": 495641431, "node_id": "MDU6SXNzdWU0OTU2NDE0MzE=", "number": 587, "title": "History Diffing - Display the __str__ value instead of the id for foreign key fields", "user": {"login": "aceaceace30", "id": 38151161, "node_id": "MDQ6VXNlcjM4MTUxMTYx", "avatar_url": "https://avatars3.githubusercontent.com/u/38151161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aceaceace30", "html_url": "https://github.com/aceaceace30", "followers_url": "https://api.github.com/users/aceaceace30/followers", "following_url": "https://api.github.com/users/aceaceace30/following{/other_user}", "gists_url": "https://api.github.com/users/aceaceace30/gists{/gist_id}", "starred_url": "https://api.github.com/users/aceaceace30/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aceaceace30/subscriptions", "organizations_url": "https://api.github.com/users/aceaceace30/orgs", "repos_url": "https://api.github.com/users/aceaceace30/repos", "events_url": "https://api.github.com/users/aceaceace30/events{/privacy}", "received_events_url": "https://api.github.com/users/aceaceace30/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-19T08:10:46Z", "updated_at": "2019-09-25T22:08:10Z", "closed_at": "2019-09-25T22:08:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I used history diffing on my project but it was displaying id for the foreign key fields.\r\n\r\nIs there a Django way to do this? Should I query first from the model to get the field I needed?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/584", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/584/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/584/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/584/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/584", "id": 487022400, "node_id": "MDU6SXNzdWU0ODcwMjI0MDA=", "number": 584, "title": "makemigrations error", "user": {"login": "AliYmn", "id": 18416653, "node_id": "MDQ6VXNlcjE4NDE2NjUz", "avatar_url": "https://avatars1.githubusercontent.com/u/18416653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AliYmn", "html_url": "https://github.com/AliYmn", "followers_url": "https://api.github.com/users/AliYmn/followers", "following_url": "https://api.github.com/users/AliYmn/following{/other_user}", "gists_url": "https://api.github.com/users/AliYmn/gists{/gist_id}", "starred_url": "https://api.github.com/users/AliYmn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AliYmn/subscriptions", "organizations_url": "https://api.github.com/users/AliYmn/orgs", "repos_url": "https://api.github.com/users/AliYmn/repos", "events_url": "https://api.github.com/users/AliYmn/events{/privacy}", "received_events_url": "https://api.github.com/users/AliYmn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-29T15:16:11Z", "updated_at": "2019-08-29T15:29:05Z", "closed_at": "2019-08-29T15:29:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "    (env) ali@aliymn:~/portal-2.0$ python manage.py populate_history --auto\r\n    /home/ali/env/lib/python3.6/site-packages/psycopg2/__init__.py:144: UserWarning: The psycopg2 wheel package will be renamed from release 2.8; in order to keep installing from binary please use \"pip install psycopg2-binary\" instead. For details see: <http://initd.org/psycopg/docs/install.html#binary-install-from-pypi>.\r\n    \"\"\")\r\n    Traceback (most recent call last):\r\n    File \"manage.py\", line 12, in <module>\r\n        execute_from_command_line(sys.argv)\r\n    File \"/home/ali/env/lib/python3.6/site-packages/django/core/management/__init__.py\", line 381, in execute_from_command_line\r\n        utility.execute()\r\n    File \"/home/ali/env/lib/python3.6/site-packages/django/core/management/__init__.py\", line 357, in execute\r\n        django.setup()\r\n    File \"/home/ali/env/lib/python3.6/site-packages/django/__init__.py\", line 24, in setup\r\n        apps.populate(settings.INSTALLED_APPS)\r\n    File \"/home/ali/env/lib/python3.6/site-packages/django/apps/registry.py\", line 89, in populate\r\n        app_config = AppConfig.create(entry)\r\n    File \"/home/ali/env/lib/python3.6/site-packages/django/apps/config.py\", line 90, in create\r\n        module = import_module(entry)\r\n    File \"/home/ali/env/lib/python3.6/importlib/__init__.py\", line 126, in import_module\r\n        return _bootstrap._gcd_import(name[level:], package, level)\r\n    File \"<frozen importlib._bootstrap>\", line 994, in _gcd_import\r\n    File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n    File \"<frozen importlib._bootstrap>\", line 953, in _find_and_load_unlocked\r\n    ModuleNotFoundError: No module named 'tasksimple_history'   ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/583", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/583/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/583/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/583/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/583", "id": 486820135, "node_id": "MDU6SXNzdWU0ODY4MjAxMzU=", "number": 583, "title": "history_user_id_field not supported with Django 1.11", "user": {"login": "altostratous", "id": 15015135, "node_id": "MDQ6VXNlcjE1MDE1MTM1", "avatar_url": "https://avatars0.githubusercontent.com/u/15015135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altostratous", "html_url": "https://github.com/altostratous", "followers_url": "https://api.github.com/users/altostratous/followers", "following_url": "https://api.github.com/users/altostratous/following{/other_user}", "gists_url": "https://api.github.com/users/altostratous/gists{/gist_id}", "starred_url": "https://api.github.com/users/altostratous/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altostratous/subscriptions", "organizations_url": "https://api.github.com/users/altostratous/orgs", "repos_url": "https://api.github.com/users/altostratous/repos", "events_url": "https://api.github.com/users/altostratous/events{/privacy}", "received_events_url": "https://api.github.com/users/altostratous/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-29T08:41:53Z", "updated_at": "2019-08-30T10:40:13Z", "closed_at": "2019-08-30T10:37:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nThe prior version in the Django ORM has caused a failure while forming cached property names when processing the history model. \r\n\r\n**To Reproduce**\r\nSteps to reproduce the behaviour:\r\n1. In an already set up project with one model with history, configure `history_user_id_field`,\r\n2. Make migrations,\r\n3. Migrate,\r\n4. Try to create one object of the aforesaid model,\r\n5. Some exception occurs in the ORM while getting model fields in the model object descriptor.\r\n\r\n**Expected behaviour**\r\nThe object should be created and the according history would be saved accordingly.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Ubuntu 18.04\r\n - Browser (if applicable): postman\r\n - Django Simple History Version: 2.7.3\r\n - Django Version: 1.11.23\r\n - Database Version: PostgreSQL 10.5.0\r\n - Python: 3.6.8\r\n\r\n**Additional context**\r\nI tracked the stack and saw that the way to get property fields in Django ORM fails and it is changed in newer versions of Django.\r\n\r\nSo I think it is better to remove Django 1.11 from 2.7.3 support. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/581", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/581/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/581/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/581/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/581", "id": 482417140, "node_id": "MDU6SXNzdWU0ODI0MTcxNDA=", "number": 581, "title": "Better documentation for multiple databases", "user": {"login": "jlauu", "id": 2280157, "node_id": "MDQ6VXNlcjIyODAxNTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2280157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlauu", "html_url": "https://github.com/jlauu", "followers_url": "https://api.github.com/users/jlauu/followers", "following_url": "https://api.github.com/users/jlauu/following{/other_user}", "gists_url": "https://api.github.com/users/jlauu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlauu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlauu/subscriptions", "organizations_url": "https://api.github.com/users/jlauu/orgs", "repos_url": "https://api.github.com/users/jlauu/repos", "events_url": "https://api.github.com/users/jlauu/events{/privacy}", "received_events_url": "https://api.github.com/users/jlauu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-19T16:46:38Z", "updated_at": "2020-04-12T16:26:53Z", "closed_at": "2020-04-12T16:26:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nI'm having trouble integrating with my particular use case:\r\n```\r\nDATABASES = {\r\n  'default': {...}, // this is the Django auto-generated DB where I want historical records stored\r\n  'external_app': {...} // my model instances live in this external DB\r\n} \r\n```\r\n\r\nMy users are also maintained in the `default` DB.\r\n\r\n**Describe the solution you'd like**\r\nI want historical records to be written to the default `app_data` Django DB (where admin models are also stored).\r\n\r\n**Describe alternatives you've considered**\r\nHaving setup my `settings.py` accordingly, let `MyModel` be the model instance of the external db, I've tried:\r\n\r\n\r\n1) Simple integration\r\n```\r\n// This tries to write to `external_app` DB\r\nclass MyModel(models.Model):\r\n     history = HistoricalRecords()\r\n```\r\n\r\n\r\n2) Use different app param\r\n```\r\n// This does not migrate/auto-generate in `default` DB\r\nclass MyModel(models.Model):\r\n     history = HistoricalRecords(app=\"MyApp\") // which routes to the `default` DB\r\n```\r\n\r\n3) Try bases\r\n```\r\n// This throws a conflict on `id` field of `MyModel` and `MyHistoricalRecord`\r\nclass MyHistoricalRecord:\r\n  class Meta:\r\n     app_label = 'default'\r\n     managed = True\r\n\r\nclass MyModel(models.Model):\r\n     history = HistoricalRecords(app=\"MyApp\", bases=[MyHistoricalRecord]) // which routes to the `default` DB\r\n```\r\n\r\nSeems like 2) is the closest to my desired solution -- however the tables don't exist and when I try to run `makemigrations` no changes are made.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/577", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/577/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/577/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/577/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/577", "id": 478365340, "node_id": "MDU6SXNzdWU0NzgzNjUzNDA=", "number": 577, "title": "Add support of bulk_create_with_history for databases others to PostgreSQL", "user": {"login": "xahgmah", "id": 1928972, "node_id": "MDQ6VXNlcjE5Mjg5NzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1928972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xahgmah", "html_url": "https://github.com/xahgmah", "followers_url": "https://api.github.com/users/xahgmah/followers", "following_url": "https://api.github.com/users/xahgmah/following{/other_user}", "gists_url": "https://api.github.com/users/xahgmah/gists{/gist_id}", "starred_url": "https://api.github.com/users/xahgmah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xahgmah/subscriptions", "organizations_url": "https://api.github.com/users/xahgmah/orgs", "repos_url": "https://api.github.com/users/xahgmah/repos", "events_url": "https://api.github.com/users/xahgmah/events{/privacy}", "received_events_url": "https://api.github.com/users/xahgmah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-08T09:51:33Z", "updated_at": "2020-05-05T01:44:37Z", "closed_at": "2020-05-05T01:44:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Problem Statement**\r\nAs mention at https://docs.djangoproject.com/en/2.2/ref/models/querysets/#bulk-create\r\n\r\n> If the model\u2019s primary key is an AutoField it does not retrieve and set the primary key attribute, as save() does, unless the database backend supports it (currently PostgreSQL).\r\n\r\nFor AutoField only PostgreSQL returns model instances with primary keys. Other DB's keep them None. That is why the next operation create history items for these items doesn't work. \r\n\r\n\r\n**Describe the solution you'd like**\r\nCheck if primary keys equal to None. If yes get created items with primary keys by the queries to DB. After that use those items to create history records.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/575", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/575/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/575/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/575/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/575", "id": 468937451, "node_id": "MDU6SXNzdWU0Njg5Mzc0NTE=", "number": 575, "title": "diff_against doesn't detect changes to parent model attributes when using inherited models", "user": {"login": "marcanuy", "id": 954673, "node_id": "MDQ6VXNlcjk1NDY3Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/954673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcanuy", "html_url": "https://github.com/marcanuy", "followers_url": "https://api.github.com/users/marcanuy/followers", "following_url": "https://api.github.com/users/marcanuy/following{/other_user}", "gists_url": "https://api.github.com/users/marcanuy/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcanuy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcanuy/subscriptions", "organizations_url": "https://api.github.com/users/marcanuy/orgs", "repos_url": "https://api.github.com/users/marcanuy/repos", "events_url": "https://api.github.com/users/marcanuy/events{/privacy}", "received_events_url": "https://api.github.com/users/marcanuy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-17T01:09:42Z", "updated_at": "2019-09-09T19:38:34Z", "closed_at": "2019-09-09T19:38:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n`HistoricalChanges.diff_against` won't detect changes in inherited models (`inherit=True`).\r\n\r\nProblem resides at the way `_model_to_dict` serializes fields.\r\n\r\n~~~ python\r\ndef _model_to_dict(model):\r\n    return json.loads(serialize(\"json\", [model]))[0][\"fields\"]\r\n~~~\r\nIt uses `django.core.serializers.serialize`, but as explained [here](https://docs.djangoproject.com/en/2.2/topics/serialization/#inherited-models):\r\n\r\n> if you have a model that uses multi-table inheritance, you also need to serialize all of the base classes for the model. This is because only the fields that are locally defined on the model will be serialized.\r\n\r\nSo it ignores any fields in the parent class.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Have inherited models:\r\n\r\n~~~ python\r\nclass Place(models.Model):\r\n    name = models.CharField(max_length=50)\r\n\r\nclass Restaurant(Place):\r\n    serves_hot_dogs = models.BooleanField(default=False)\r\n~~~\r\n\r\nThen from a `Restaurant` instance change an attribute from the parent class `Place.name`\r\n\r\n~~~ python\r\nr = Restaurant.objects.create(name=\"McDonalds\")\r\nr.name = \"BurgerKing\"\r\nr.save()\r\n~~~\r\n\r\nNow try to detect changes:\r\n\r\n~~~ python\r\nnew_record, old_record = r.history.all()\r\ndelta = new_record.diff_against(old_record)\r\nfor change in delta.changes:\r\n    print(\"{} changed from {} to {}\".format(change.field, change.old, change.new))\r\n~~~\r\n\r\nBut it won't detect the `name` field so it doesn't detect any changes and `delta.changes=[]`\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Ubuntu 18.10\r\n - Django Simple History Version: 2.7.2\r\n - Django Version: 2.2.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/571", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/571/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/571/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/571/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/571", "id": 465942624, "node_id": "MDU6SXNzdWU0NjU5NDI2MjQ=", "number": 571, "title": "Historical model with \"excluded_fields\" causes DoesNotExist error when trying to get instance from historical record if object is deleted", "user": {"login": "yakimka", "id": 28621349, "node_id": "MDQ6VXNlcjI4NjIxMzQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/28621349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yakimka", "html_url": "https://github.com/yakimka", "followers_url": "https://api.github.com/users/yakimka/followers", "following_url": "https://api.github.com/users/yakimka/following{/other_user}", "gists_url": "https://api.github.com/users/yakimka/gists{/gist_id}", "starred_url": "https://api.github.com/users/yakimka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yakimka/subscriptions", "organizations_url": "https://api.github.com/users/yakimka/orgs", "repos_url": "https://api.github.com/users/yakimka/repos", "events_url": "https://api.github.com/users/yakimka/events{/privacy}", "received_events_url": "https://api.github.com/users/yakimka/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 950789305, "node_id": "MDU6TGFiZWw5NTA3ODkzMDU=", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/accepted", "name": "accepted", "color": "68d153", "default": false, "description": "Issue accepted for completion"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-09T19:14:44Z", "updated_at": "2019-08-21T19:01:44Z", "closed_at": "2019-08-21T19:01:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nHistorical model with \"excluded_fields\" causes DoesNotExist error when trying to get instance from historical record if object is deleted\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create model as follows\r\n\r\n```python\r\nclass ExampleModelWithExcludedField(models.Model):\r\n    history = HistoricalRecords(excluded_fields=['description'])\r\n    name = models.CharField(max_length=255)\r\n    description = models.TextField()\r\n    date = models.DateTimeField(auto_now_add=True)\r\n```\r\n2. Run `./manage.py shell`\r\n\r\n```\r\n>>> obj = ExampleModelWithExcludedField.objects.create(name='name', description='desc')\r\n>>> obj_id = obj.id\r\n>>> obj.delete()\r\n(1, {'simple_app.ExampleModelWithExcludedField': 1})\r\n>>> hist_obj = HistoricalExampleModelWithExcludedField.objects.filter(id=obj_id).first()\r\n>>> hist_obj.instance\r\nTraceback (most recent call last):\r\n  File \"<console>\", line 1, in <module>\r\n  File \".../simple_history/models.py\", line 383, in get_instance\r\n    .values(*excluded_attnames)\r\n  File \".../django/db/models/query.py\", line 379, in get\r\n    \"%s matching query does not exist.\" %\r\nsimple_app.models.DoesNotExist: ExampleModelWithExcludedField matching query does not exist.\r\n```\r\n\r\n**Expected behavior**\r\nI expected to get instance with default values for fields that excluded.\r\n\r\n**Environment:**\r\n - OS: Ubuntu 18.04, Arch linux\r\n - Django Simple History Version: 2.7.2\r\n - Django Version: 1.11.22\r\n - Database Version: Sqlite3, PostgreSQL 11.4\r\n\r\n\r\n**My repo for reproduce this error**\r\n\r\n1. Clone the repo - https://github.com/yakimka/example-simple-history-project.git\r\n     - Database is already present.\r\n2. Install requirements\r\n3. Run python manage.py shell\r\n4. Run:\r\n\r\n```\r\n>>> from simple_app.models import HistoricalExampleModelWithExcludedField\r\n>>> obj_with_excluded_fields = HistoricalExampleModelWithExcludedField.objects.filter(id=1).first()\r\n>>> obj_with_excluded_fields.instance\r\n```\r\n\r\n5. See error\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/570", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/570/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/570/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/570/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/570", "id": 464317074, "node_id": "MDU6SXNzdWU0NjQzMTcwNzQ=", "number": 570, "title": "Problem upgrading from 1.9.0 to 2.5.0", "user": {"login": "alecvn", "id": 7558545, "node_id": "MDQ6VXNlcjc1NTg1NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/7558545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecvn", "html_url": "https://github.com/alecvn", "followers_url": "https://api.github.com/users/alecvn/followers", "following_url": "https://api.github.com/users/alecvn/following{/other_user}", "gists_url": "https://api.github.com/users/alecvn/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecvn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecvn/subscriptions", "organizations_url": "https://api.github.com/users/alecvn/orgs", "repos_url": "https://api.github.com/users/alecvn/repos", "events_url": "https://api.github.com/users/alecvn/events{/privacy}", "received_events_url": "https://api.github.com/users/alecvn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-04T15:17:48Z", "updated_at": "2019-07-15T21:53:39Z", "closed_at": "2019-07-15T21:53:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have an older project which we are in the process of upgrading from version 1.9.0 to 2.5.0.  It's quite a far reaching upgrade of the project and includes the Python 3 and Django 11 upgrade as well.  When running any Django management command however we get `AttributeError: module 'simple_history.models' has no attribute 'HistoricalRecords'`.\r\n\r\n**Environment:**\r\n - OS: Ubuntu 18.04\r\n - Django Simple History Version: 2.5.0 (from 1.9.0)\r\n - Django Version: 1.11.3 (from 1.9.12)\r\n - Database Version: PostgreSQL 9.5.4\r\n\r\n**Additional context**\r\nWe are running the entire environment on docker.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/569", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/569/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/569/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/569/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/569", "id": 460387202, "node_id": "MDU6SXNzdWU0NjAzODcyMDI=", "number": 569, "title": "How to register model with SimpleHistoryAdmin and custom search_fields?", "user": {"login": "pawisoon", "id": 6951295, "node_id": "MDQ6VXNlcjY5NTEyOTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6951295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawisoon", "html_url": "https://github.com/pawisoon", "followers_url": "https://api.github.com/users/pawisoon/followers", "following_url": "https://api.github.com/users/pawisoon/following{/other_user}", "gists_url": "https://api.github.com/users/pawisoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawisoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawisoon/subscriptions", "organizations_url": "https://api.github.com/users/pawisoon/orgs", "repos_url": "https://api.github.com/users/pawisoon/repos", "events_url": "https://api.github.com/users/pawisoon/events{/privacy}", "received_events_url": "https://api.github.com/users/pawisoon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-25T12:12:23Z", "updated_at": "2019-06-25T12:24:46Z", "closed_at": "2019-06-25T12:24:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nHow would I register a model in admin panel that uses SimpleHistoryAdmin and search_fields? \r\nYou cant register a model twice unless you use a proxy. But I would like to register it once with a search field to search by a specific field in that model. \r\nAny ideas? \r\n\r\nCheers,\r\nPawe\u0142 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/567", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/567/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/567/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/567/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/567", "id": 454192726, "node_id": "MDU6SXNzdWU0NTQxOTI3MjY=", "number": 567, "title": "How to use history_change_reason", "user": {"login": "fcdk1982", "id": 21138888, "node_id": "MDQ6VXNlcjIxMTM4ODg4", "avatar_url": "https://avatars2.githubusercontent.com/u/21138888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fcdk1982", "html_url": "https://github.com/fcdk1982", "followers_url": "https://api.github.com/users/fcdk1982/followers", "following_url": "https://api.github.com/users/fcdk1982/following{/other_user}", "gists_url": "https://api.github.com/users/fcdk1982/gists{/gist_id}", "starred_url": "https://api.github.com/users/fcdk1982/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fcdk1982/subscriptions", "organizations_url": "https://api.github.com/users/fcdk1982/orgs", "repos_url": "https://api.github.com/users/fcdk1982/repos", "events_url": "https://api.github.com/users/fcdk1982/events{/privacy}", "received_events_url": "https://api.github.com/users/fcdk1982/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-10T14:15:09Z", "updated_at": "2019-06-11T19:38:57Z", "closed_at": "2019-06-11T19:38:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use django-simple-history for tracking changes and can't understand how to set history_change_reason field. How to add  field in my UpdateForm and setting history model for it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/566", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/566/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/566/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/566/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/566", "id": 454047877, "node_id": "MDU6SXNzdWU0NTQwNDc4Nzc=", "number": 566, "title": "Hide History based on User type", "user": {"login": "srinivasaravind5", "id": 28944481, "node_id": "MDQ6VXNlcjI4OTQ0NDgx", "avatar_url": "https://avatars0.githubusercontent.com/u/28944481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasaravind5", "html_url": "https://github.com/srinivasaravind5", "followers_url": "https://api.github.com/users/srinivasaravind5/followers", "following_url": "https://api.github.com/users/srinivasaravind5/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasaravind5/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasaravind5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasaravind5/subscriptions", "organizations_url": "https://api.github.com/users/srinivasaravind5/orgs", "repos_url": "https://api.github.com/users/srinivasaravind5/repos", "events_url": "https://api.github.com/users/srinivasaravind5/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasaravind5/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-10T08:07:45Z", "updated_at": "2019-06-11T19:39:34Z", "closed_at": "2019-06-11T19:39:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now, any user who has access to the model can see the history, There should be a way in which we can restrict them.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/563", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/563/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/563/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/563/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/563", "id": 445990249, "node_id": "MDU6SXNzdWU0NDU5OTAyNDk=", "number": 563, "title": "Model instances with HistoricalRecords do not have changeReason attribute ", "user": {"login": "nicolazilio", "id": 2800360, "node_id": "MDQ6VXNlcjI4MDAzNjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2800360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolazilio", "html_url": "https://github.com/nicolazilio", "followers_url": "https://api.github.com/users/nicolazilio/followers", "following_url": "https://api.github.com/users/nicolazilio/following{/other_user}", "gists_url": "https://api.github.com/users/nicolazilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolazilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolazilio/subscriptions", "organizations_url": "https://api.github.com/users/nicolazilio/orgs", "repos_url": "https://api.github.com/users/nicolazilio/repos", "events_url": "https://api.github.com/users/nicolazilio/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolazilio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-20T08:38:23Z", "updated_at": "2019-05-21T07:35:03Z", "closed_at": "2019-05-20T13:21:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nModel instances with HistoricalRecords do not have changeReason attribute \r\n\r\n**Expected behavior**\r\n\r\nFrom ReadTheDocs pages, my understanding is, although I may be wrong, that when HistoricalRecords is added to a model, the model should acquire a `changeReason` attribute that can be used to set the reason for changing a record. For example, for a model like this one\r\n\r\n```\r\nclass SaCerevisiaeStrain (models.Model):\r\n    name = models.CharField(\"name\", max_length = 255, blank=False)\r\n    history = HistoricalRecords()\r\n```\r\n   \r\nI expect SaCerevisiaeStrain to have a `changeReason` attribute that can be accessed like so `SaCerevisiaeStrain.changeReason`. Yet, I cannot see any such attribute. The history DB table does include a`history_change_reason` column, and I can set a value for it using the `update_change_reason` function.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Debian 8.11 \r\n - Django Simple History Version: 2.7.2\r\n - Django Version: 2.1.8\r\n - Database Version: MariaDB 10.2.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/561", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/561/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/561/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/561/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/561", "id": 445722960, "node_id": "MDU6SXNzdWU0NDU3MjI5NjA=", "number": 561, "title": "most_recent with excluded_fields sets values incorrectly", "user": {"login": "AmandaCLNg", "id": 29140160, "node_id": "MDQ6VXNlcjI5MTQwMTYw", "avatar_url": "https://avatars1.githubusercontent.com/u/29140160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AmandaCLNg", "html_url": "https://github.com/AmandaCLNg", "followers_url": "https://api.github.com/users/AmandaCLNg/followers", "following_url": "https://api.github.com/users/AmandaCLNg/following{/other_user}", "gists_url": "https://api.github.com/users/AmandaCLNg/gists{/gist_id}", "starred_url": "https://api.github.com/users/AmandaCLNg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AmandaCLNg/subscriptions", "organizations_url": "https://api.github.com/users/AmandaCLNg/orgs", "repos_url": "https://api.github.com/users/AmandaCLNg/repos", "events_url": "https://api.github.com/users/AmandaCLNg/events{/privacy}", "received_events_url": "https://api.github.com/users/AmandaCLNg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-18T14:50:41Z", "updated_at": "2019-05-28T17:41:50Z", "closed_at": "2019-05-28T17:41:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Decsription**\r\nWhen a model (obv. with history!) has an excluded field that is not the _last_ field in the model definition, most_recent value incorrectly sets the values in the returned object.\r\n\r\n**To Reproduce**\r\nSet/modify the PollWithExcludeFields model\r\n```\r\nclass PollWithExcludeFields(models.Model):\r\n    question = models.CharField(max_length=200)\r\n    pub_date = models.DateTimeField(\"date published\")\r\n    place = models.TextField(null=True)\r\n\r\n    history = HistoricalRecords(excluded_fields=[\"pub_date\"])\r\n``` \r\n\r\nRun this in shell\r\n```\r\n>>> p = PollWithExcludeFields(question=\"what's up?\", pub_date=today, place='The Pub')\r\n>>> p.save()\r\n>>> most_recent = p.history.most_recent()\r\n>>> p.__dict__\r\n{'_state': <django.db.models.base.ModelState object at 0x7fd9db6bca90>, 'id': 1, 'question': \"what's up?\", 'pub_date': datetime.datetime(2021, 1, 1, 10, 0), 'place': 'The Pub'}\r\n>>> most_recent.__dict__\r\n{'_state': <django.db.models.base.ModelState object at 0x7fd9daf522b0>, 'id': 1, 'question': \"what's up?\", 'pub_date': 'The Pub', 'place': None}\r\n```\r\n\r\n**Expected behavior**\r\nExpect `most_recent.pub_date` to be `None` and `most_recent.place` to be `The Pub`\r\n\r\n**Environment (please complete the following information):**\r\n - Ubuntu 18.04 Server\r\n - Django Simple History Version: master\r\n - Django Version: 2.2.1\r\n - Database Version: (default: SQLite)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/556", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/556/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/556/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/556/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/556", "id": 435937794, "node_id": "MDU6SXNzdWU0MzU5Mzc3OTQ=", "number": 556, "title": "BigAutoField not mirrored as bigint in historical copy of table", "user": {"login": "tomj74", "id": 2747799, "node_id": "MDQ6VXNlcjI3NDc3OTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/2747799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomj74", "html_url": "https://github.com/tomj74", "followers_url": "https://api.github.com/users/tomj74/followers", "following_url": "https://api.github.com/users/tomj74/following{/other_user}", "gists_url": "https://api.github.com/users/tomj74/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomj74/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomj74/subscriptions", "organizations_url": "https://api.github.com/users/tomj74/orgs", "repos_url": "https://api.github.com/users/tomj74/repos", "events_url": "https://api.github.com/users/tomj74/events{/privacy}", "received_events_url": "https://api.github.com/users/tomj74/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-22T23:48:19Z", "updated_at": "2019-05-28T17:42:06Z", "closed_at": "2019-05-28T17:42:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "**To Reproduce**\r\nCreate model with explicit id field of type\r\n\r\n    id = BigAutoField(primary_key=True)\r\n\r\nadd\r\n\r\n    history = HistoricalRecords()\r\n\r\n**Expected behavior**\r\nhistorical table is created with BIGINT id field\r\n\r\n**Actual**\r\nhistorical table is created with INT id field", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/554", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/554/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/554/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/554/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/554", "id": 434363688, "node_id": "MDU6SXNzdWU0MzQzNjM2ODg=", "number": 554, "title": "Limit history rows", "user": {"login": "nicolaetelecine", "id": 22622136, "node_id": "MDQ6VXNlcjIyNjIyMTM2", "avatar_url": "https://avatars0.githubusercontent.com/u/22622136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolaetelecine", "html_url": "https://github.com/nicolaetelecine", "followers_url": "https://api.github.com/users/nicolaetelecine/followers", "following_url": "https://api.github.com/users/nicolaetelecine/following{/other_user}", "gists_url": "https://api.github.com/users/nicolaetelecine/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolaetelecine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolaetelecine/subscriptions", "organizations_url": "https://api.github.com/users/nicolaetelecine/orgs", "repos_url": "https://api.github.com/users/nicolaetelecine/repos", "events_url": "https://api.github.com/users/nicolaetelecine/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolaetelecine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-17T16:01:30Z", "updated_at": "2019-04-18T14:57:14Z", "closed_at": "2019-04-17T17:17:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nHi, \r\nby default, history rows are not limited?\r\ncurrenty it is a way to limit the history rows?\r\n\r\n**Describe the solution you'd like**\r\nAdd new parameter limit, example:\r\nhistory = HistoricalRecords(cascade_delete_history=True, limit=10)\r\nThat will keep only 10 history rows, older will be delete.\r\n\r\nThank you,\r\nNicolae", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/552", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/552/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/552/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/552/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/552", "id": 434164164, "node_id": "MDU6SXNzdWU0MzQxNjQxNjQ=", "number": 552, "title": "ModuleNotFoundError: No module named 'six'", "user": {"login": "nick-traeger", "id": 11520139, "node_id": "MDQ6VXNlcjExNTIwMTM5", "avatar_url": "https://avatars2.githubusercontent.com/u/11520139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick-traeger", "html_url": "https://github.com/nick-traeger", "followers_url": "https://api.github.com/users/nick-traeger/followers", "following_url": "https://api.github.com/users/nick-traeger/following{/other_user}", "gists_url": "https://api.github.com/users/nick-traeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick-traeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick-traeger/subscriptions", "organizations_url": "https://api.github.com/users/nick-traeger/orgs", "repos_url": "https://api.github.com/users/nick-traeger/repos", "events_url": "https://api.github.com/users/nick-traeger/events{/privacy}", "received_events_url": "https://api.github.com/users/nick-traeger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-17T08:48:33Z", "updated_at": "2019-04-17T14:31:34Z", "closed_at": "2019-04-17T14:31:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nIt looks as if the new version lacks the dependency on module six.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. pip install django-simple-history\r\n2. python manage.py makemigrations\r\n\r\n**Expected behavior**\r\nA running system\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Linux Mint \r\n - Browser (if applicable): chrome\r\n - Django Simple History Version: 2.7.1\r\n - Django Version: 2.2\r\n - Database Version: sqlite3\r\n\r\n**Additional context**\r\nTested with an old and a new environment\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/551", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/551/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/551/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/551/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/551", "id": 433832409, "node_id": "MDU6SXNzdWU0MzM4MzI0MDk=", "number": 551, "title": "Can't retrieve absolute URL of history objects", "user": {"login": "richardcornish", "id": 76278, "node_id": "MDQ6VXNlcjc2Mjc4", "avatar_url": "https://avatars0.githubusercontent.com/u/76278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richardcornish", "html_url": "https://github.com/richardcornish", "followers_url": "https://api.github.com/users/richardcornish/followers", "following_url": "https://api.github.com/users/richardcornish/following{/other_user}", "gists_url": "https://api.github.com/users/richardcornish/gists{/gist_id}", "starred_url": "https://api.github.com/users/richardcornish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richardcornish/subscriptions", "organizations_url": "https://api.github.com/users/richardcornish/orgs", "repos_url": "https://api.github.com/users/richardcornish/repos", "events_url": "https://api.github.com/users/richardcornish/events{/privacy}", "received_events_url": "https://api.github.com/users/richardcornish/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-16T15:05:00Z", "updated_at": "2019-04-16T19:16:02Z", "closed_at": "2019-04-16T19:16:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nCan't retrieve a history object.\r\n\r\n**To Reproduce**\r\nI created a basic `DetailView` but I can't figure out the queryset to retrieve it from a URL that is similar to the admin, i.e. `/admin/loglines/logline/1/history/3/`. My use case seems fairly simple, just \r\n\r\n```\r\nclass LoglineHistoryDetailView(DetailView):\r\n    template_name = 'loglines/logline_detail_history.html'\r\n\r\n    def get_queryset(self):\r\n        return Logline.history.filter(history_id=self.kwargs['history_pk'])\r\n```\r\n\r\nMy URLs:\r\n\r\n```\r\nurlpatterns = [\r\n    path('<int:pk>/history/<int:history_pk>/', LoglineHistoryDetailView.as_view(), name='logline_detail_history'),\r\n    path('<int:pk>/', LoglineDetailView.as_view(), name='logline_detail'),\r\n]\r\n```\r\n\r\nThe correct SQL from the admin displays:\r\n\r\n```\r\nSELECT \u2022\u2022\u2022 FROM \"loglines_historicallogline\" WHERE (\"loglines_historicallogline\".\"history_id\" = '3' AND \"loglines_historicallogline\".\"id\" = '1')\r\n```\r\n\r\nMy SQL ends up as:\r\n\r\n```\r\nSELECT \u2022\u2022\u2022 FROM \"loglines_historicallogline\" WHERE (\"loglines_historicallogline\".\"history_id\" = '3' AND \"loglines_historicallogline\".\"history_id\" = '1')\r\n```\r\n\r\nThere seems to be some pre-querying happening in the `history` manager, but the source code is fairly obscure.\r\n\r\n**Expected behavior**\r\nRetrieve the object and display a template.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/545", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/545/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/545/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/545/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/545", "id": 433454129, "node_id": "MDU6SXNzdWU0MzM0NTQxMjk=", "number": 545, "title": "Patch release for `use_base_model_db`", "user": {"login": "dopatraman", "id": 3819564, "node_id": "MDQ6VXNlcjM4MTk1NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3819564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dopatraman", "html_url": "https://github.com/dopatraman", "followers_url": "https://api.github.com/users/dopatraman/followers", "following_url": "https://api.github.com/users/dopatraman/following{/other_user}", "gists_url": "https://api.github.com/users/dopatraman/gists{/gist_id}", "starred_url": "https://api.github.com/users/dopatraman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dopatraman/subscriptions", "organizations_url": "https://api.github.com/users/dopatraman/orgs", "repos_url": "https://api.github.com/users/dopatraman/repos", "events_url": "https://api.github.com/users/dopatraman/events{/privacy}", "received_events_url": "https://api.github.com/users/dopatraman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-15T20:01:25Z", "updated_at": "2019-04-15T20:02:53Z", "closed_at": "2019-04-15T20:02:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Can we make a patch release for the latest merged PR? #539 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/543", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/543/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/543/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/543/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/543", "id": 430655494, "node_id": "MDU6SXNzdWU0MzA2NTU0OTQ=", "number": 543, "title": "Historical record created when only excluded field changes", "user": {"login": "ivanfr90", "id": 4324408, "node_id": "MDQ6VXNlcjQzMjQ0MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4324408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivanfr90", "html_url": "https://github.com/ivanfr90", "followers_url": "https://api.github.com/users/ivanfr90/followers", "following_url": "https://api.github.com/users/ivanfr90/following{/other_user}", "gists_url": "https://api.github.com/users/ivanfr90/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivanfr90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivanfr90/subscriptions", "organizations_url": "https://api.github.com/users/ivanfr90/orgs", "repos_url": "https://api.github.com/users/ivanfr90/repos", "events_url": "https://api.github.com/users/ivanfr90/events{/privacy}", "received_events_url": "https://api.github.com/users/ivanfr90/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-08T20:58:07Z", "updated_at": "2019-04-10T11:12:10Z", "closed_at": "2019-04-09T14:49:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nI'm trying to track the my User model and I'm doing use of `excluded_fields` property because I want to avoid history changes when user re-login to my website (is when the `last_login` attribute model is updated with a timestamp).\r\n\r\nThe History model has been created properly and doesn't has the `last_login` column but the problem is that when the excluded attribute changes, always a new history entry is added.\r\n\r\nModel definition:\r\n\r\n```\r\nclass User(AbstractUser):\r\n    history = HistoricalRecords(excluded_fields=['last_login'])\r\n```\r\n\r\nDoes it matter if model has an Abstract inheritance?\r\nThe User model is built on the following inheritance:\r\n\r\n`AbstractBaseUser --> AbstractUser --> User`\r\n\r\nAn important note is that `last_login` attribute is defined at the top model, AbstractBaseUser.\r\n\r\n\r\n**Environment**\r\n - OS: Ubuntu 18.04\r\n - Django Simple History Version: 2.7.0\r\n - Django Version: 1.11.20\r\n - Database Version: PostgreSQL 10.6-R1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/541", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/541/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/541/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/541/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/541", "id": 428475837, "node_id": "MDU6SXNzdWU0Mjg0NzU4Mzc=", "number": 541, "title": "What is the best way to track Read events on operational models?", "user": {"login": "dopatraman", "id": 3819564, "node_id": "MDQ6VXNlcjM4MTk1NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3819564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dopatraman", "html_url": "https://github.com/dopatraman", "followers_url": "https://api.github.com/users/dopatraman/followers", "following_url": "https://api.github.com/users/dopatraman/following{/other_user}", "gists_url": "https://api.github.com/users/dopatraman/gists{/gist_id}", "starred_url": "https://api.github.com/users/dopatraman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dopatraman/subscriptions", "organizations_url": "https://api.github.com/users/dopatraman/orgs", "repos_url": "https://api.github.com/users/dopatraman/repos", "events_url": "https://api.github.com/users/dopatraman/events{/privacy}", "received_events_url": "https://api.github.com/users/dopatraman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-02T22:35:02Z", "updated_at": "2019-04-03T01:58:05Z", "closed_at": "2019-04-03T01:58:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Problem Statement**\r\nThis library does an excellent job of tracking CUD events, but does not support auditing Read events. I understand that most users probably don't need this, but it would be useful to have.\r\n\r\n**Describe the solution you'd like**\r\nAllow an option for the `HistoricalRecords` constructor that instructs the library to record read events on operational tables.\r\n\r\n**Describe alternatives you've considered**\r\nCurrently, I'm trying to log reads by hooking into Django's manager api:\r\n```\r\nclass MyManager(models.Manager):\r\n    def get_queryset(self):\r\n        self._log_read()\r\n        return super().get_queryset()\r\n\r\n    def _log_read(self):\r\n        historical_model = self.model.history.model\r\n        attrs = {\r\n            'id': getattr(self.model, 'id')\r\n        }\r\n        read_record = historical_model(\r\n                history_date=datetime.now(),\r\n                history_type='R',\r\n                history_user=request.thread_local.current_request.user,\r\n                history_change_reason='reading',\r\n                **attrs\r\n            )\r\n        read_record.save()\r\n```\r\n\r\nHowever, this produces an error, because the `id` passed into the `historical_model` constructor is of the type `django.db.models.query_utils.DeferredAttribute`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/540", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/540/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/540/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/540/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/540", "id": 426430713, "node_id": "MDU6SXNzdWU0MjY0MzA3MTM=", "number": 540, "title": "clean_duplicate_history doesn't respect history field name", "user": {"login": "yetanotherape", "id": 443452, "node_id": "MDQ6VXNlcjQ0MzQ1Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/443452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yetanotherape", "html_url": "https://github.com/yetanotherape", "followers_url": "https://api.github.com/users/yetanotherape/followers", "following_url": "https://api.github.com/users/yetanotherape/following{/other_user}", "gists_url": "https://api.github.com/users/yetanotherape/gists{/gist_id}", "starred_url": "https://api.github.com/users/yetanotherape/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yetanotherape/subscriptions", "organizations_url": "https://api.github.com/users/yetanotherape/orgs", "repos_url": "https://api.github.com/users/yetanotherape/repos", "events_url": "https://api.github.com/users/yetanotherape/events{/privacy}", "received_events_url": "https://api.github.com/users/yetanotherape/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 36700564, "node_id": "MDU6TGFiZWwzNjcwMDU2NA==", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-28T11:04:20Z", "updated_at": "2019-04-04T16:30:44Z", "closed_at": "2019-04-04T16:30:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using not default field name for HistoricalRecords:\r\n```\r\nclass Record(models.Model)\r\n...\r\nlog = HistoricalRecords()\r\n```\r\nWhen I run `clean_duplicate_history` if fails with a message \"AttributeError: ... object has no attribute 'diff_against'\". It seems that 'history' attribute is hardcoded.\r\n\r\n**Environment:**\r\n - OS: Ubuntu 16.04\r\n - Django Simple History Version: 2.7.0\r\n - Django Version: 1.11.20\r\n - Database Version: MySQL 5.7\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/538", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/538/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/538/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/538/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/538", "id": 425128973, "node_id": "MDU6SXNzdWU0MjUxMjg5NzM=", "number": 538, "title": "Unable to create HistoricalUser record on a separate database", "user": {"login": "dopatraman", "id": 3819564, "node_id": "MDQ6VXNlcjM4MTk1NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3819564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dopatraman", "html_url": "https://github.com/dopatraman", "followers_url": "https://api.github.com/users/dopatraman/followers", "following_url": "https://api.github.com/users/dopatraman/following{/other_user}", "gists_url": "https://api.github.com/users/dopatraman/gists{/gist_id}", "starred_url": "https://api.github.com/users/dopatraman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dopatraman/subscriptions", "organizations_url": "https://api.github.com/users/dopatraman/orgs", "repos_url": "https://api.github.com/users/dopatraman/repos", "events_url": "https://api.github.com/users/dopatraman/events{/privacy}", "received_events_url": "https://api.github.com/users/dopatraman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-25T21:42:50Z", "updated_at": "2019-04-23T13:19:38Z", "closed_at": "2019-04-23T13:19:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nI have two databases, an operational and a history database. I've setup my db router such that all the historical tables get migrated onto the history database. However, commands that create operational models (users for instance) do not forward historical records to the history database. Instead, they attempt to lookup the history table in the operational database. This causes an error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/django/db/backends/utils.py\", line 84, in _execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/usr/local/lib/python3.7/site-packages/django/db/backends/mysql/base.py\", line 71, in execute\r\n    return self.cursor.execute(query, args)\r\n  File \"/usr/local/lib/python3.7/site-packages/MySQLdb/cursors.py\", line 206, in execute\r\n    res = self._query(query)\r\n  File \"/usr/local/lib/python3.7/site-packages/MySQLdb/cursors.py\", line 312, in _query\r\n    db.query(q)\r\n  File \"/usr/local/lib/python3.7/site-packages/MySQLdb/connections.py\", line 224, in query\r\n    _mysql.connection.query(self, query)\r\nMySQLdb._exceptions.ProgrammingError: (1146, \"Table 'operational-db.operational-db_historicaluser' doesn't exist\")\r\n```\r\n\r\nSo far, I've initialized the `HistoricalRecord` instance like this:\r\n```\r\nhistory = HistoricalRecords(history_user_id_field=models.IntegerField(null=True), history_user_getter=_history_user_getter)\r\n```\r\n\r\nwhere my `_history_user_getter` is a function that accepts a `historical_instance`.\r\n\r\nI assume there must be a way to configure the historical model to use a separate database. How do I do that?\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Configure your `dbrouter.py` file to run a `historicaluser` migration on a separate database\r\n2. Run the migrations & verify the table has been created\r\n3. Attempt to create a superuser (`python manage.py createsuperuser`)\r\n4. Observe the error that appears\r\n\r\n**Expected behavior**\r\nI'd like to see a record in the `historicaluser` table (in the history database) that describes a user created in the operational database.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Mac OSX Mojave\r\n - Django Simple History Version: 2.7.0\r\n - Django Version: 2.1\r\n - Database Version: MySQL\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/535", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/535/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/535/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/535/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/535", "id": 420991229, "node_id": "MDU6SXNzdWU0MjA5OTEyMjk=", "number": 535, "title": "History Info for Django User Related Tables", "user": {"login": "surya534", "id": 40024319, "node_id": "MDQ6VXNlcjQwMDI0MzE5", "avatar_url": "https://avatars2.githubusercontent.com/u/40024319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/surya534", "html_url": "https://github.com/surya534", "followers_url": "https://api.github.com/users/surya534/followers", "following_url": "https://api.github.com/users/surya534/following{/other_user}", "gists_url": "https://api.github.com/users/surya534/gists{/gist_id}", "starred_url": "https://api.github.com/users/surya534/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/surya534/subscriptions", "organizations_url": "https://api.github.com/users/surya534/orgs", "repos_url": "https://api.github.com/users/surya534/repos", "events_url": "https://api.github.com/users/surya534/events{/privacy}", "received_events_url": "https://api.github.com/users/surya534/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-14T12:29:22Z", "updated_at": "2019-04-16T01:29:09Z", "closed_at": "2019-04-16T01:29:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nI am using django User model for creating and managing users. I want to track history of these tables also. If i update Permissions/Groups to User regularly then History table for auth_group, auth_permissions etc.\r\n\r\nIs there a way right now ? I dont see anything in documentation", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/534", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/534/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/534/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/534/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/534", "id": 418329767, "node_id": "MDU6SXNzdWU0MTgzMjk3Njc=", "number": 534, "title": "Specify history_type for custom model methods", "user": {"login": "bencleary", "id": 11590157, "node_id": "MDQ6VXNlcjExNTkwMTU3", "avatar_url": "https://avatars3.githubusercontent.com/u/11590157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bencleary", "html_url": "https://github.com/bencleary", "followers_url": "https://api.github.com/users/bencleary/followers", "following_url": "https://api.github.com/users/bencleary/following{/other_user}", "gists_url": "https://api.github.com/users/bencleary/gists{/gist_id}", "starred_url": "https://api.github.com/users/bencleary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bencleary/subscriptions", "organizations_url": "https://api.github.com/users/bencleary/orgs", "repos_url": "https://api.github.com/users/bencleary/repos", "events_url": "https://api.github.com/users/bencleary/events{/privacy}", "received_events_url": "https://api.github.com/users/bencleary/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-07T14:11:22Z", "updated_at": "2019-03-07T19:09:31Z", "closed_at": "2019-03-07T19:09:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nIf this is already in please just close it off and point me in the right direction. A model i was working on used soft deleting, just by updating the model instance itself. When marking this as deleted by default it actions it as record change not record deleted.\r\n\r\n**Describe the solution you'd like**\r\nI appreciate this is probably a niche problem but soemthing to solve it was to modify the create_historial_record method, i have implemented a similar method to the changeReason implementation.\r\n\r\n```python \r\n    def create_historical_record(self, instance, history_type):\r\n        if hasattr(instance, 'changeType'):\r\n            history_type = getattr(instance, 'changeType', history_type)\r\n        history_date = getattr(instance, '_history_date', now())\r\n        history_user = self.get_history_user(instance)\r\n        history_change_reason = getattr(instance, 'changeReason', None)\r\n        manager = getattr(instance, self.manager_name)\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nNone\r\n\r\n**Additional context**\r\nSource Code\r\n![image](https://user-images.githubusercontent.com/11590157/53962131-3192c680-40e2-11e9-89ed-9614e0119394.png)\r\n\r\nModel Instance\r\n![image](https://user-images.githubusercontent.com/11590157/53962174-4707f080-40e2-11e9-8dfe-8b445f3866de.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/533", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/533/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/533/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/533/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/533", "id": 416480816, "node_id": "MDU6SXNzdWU0MTY0ODA4MTY=", "number": 533, "title": "Foreign Key value in __str__ results in error.", "user": {"login": "dojutsu-user", "id": 29149191, "node_id": "MDQ6VXNlcjI5MTQ5MTkx", "avatar_url": "https://avatars3.githubusercontent.com/u/29149191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dojutsu-user", "html_url": "https://github.com/dojutsu-user", "followers_url": "https://api.github.com/users/dojutsu-user/followers", "following_url": "https://api.github.com/users/dojutsu-user/following{/other_user}", "gists_url": "https://api.github.com/users/dojutsu-user/gists{/gist_id}", "starred_url": "https://api.github.com/users/dojutsu-user/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dojutsu-user/subscriptions", "organizations_url": "https://api.github.com/users/dojutsu-user/orgs", "repos_url": "https://api.github.com/users/dojutsu-user/repos", "events_url": "https://api.github.com/users/dojutsu-user/events{/privacy}", "received_events_url": "https://api.github.com/users/dojutsu-user/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-03T06:14:39Z", "updated_at": "2019-03-07T19:09:44Z", "closed_at": "2019-03-07T19:09:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nI have two models like this:\r\n```python3\r\nclass Book(models.Model):\r\n    title = models.CharField(max_length=50)\r\n    # other fields\r\n\r\nclass BookCode(models.Model):\r\n    book_id = models.CharField(max_length=10)\r\n    associated_book = models.ForeignKey(Book, on_delete=models.CASCADE)\r\n    history = HistoricalRecords()\r\n    # other fields\r\n\r\n    def __str__(self):\r\n        return f'[{self.book_id.upper}] {self.associated_book.title}'\r\n```\r\n\r\nWhen I try to get the history of model `BookCode`, this happens\r\n```\r\n>>> BookCode.history.all()\r\nTraceback (most recent call last):\r\n  File \"<console>\", line 1, in <module>\r\n  File \"/home/pikachu/Desktop/Practice/library/venv/lib/python3.6/site-packages/django/db/models/query.py\", line 247, in __repr__\r\n    return '<%s %r>' % (self.__class__.__name__, data)\r\n  File \"/home/pikachu/Desktop/Practice/library/venv/lib/python3.6/site-packages/django/db/models/base.py\", line 503, in __repr__\r\n    return '<%s: %s>' % (self.__class__.__name__, self)\r\n  File \"/home/pikachu/Desktop/Practice/library/venv/lib/python3.6/site-packages/simple_history/models.py\", line 386, in <lambda>\r\n    self.history_object, self.history_date\r\n  File \"/home/pikachu/Desktop/Practice/library/portal/books/models.py\", line 84, in __str__\r\n    return f'[{self.book_id.upper()}] {self.associated_book.title}'\r\n  File \"/home/pikachu/Desktop/Practice/library/venv/lib/python3.6/site-packages/django/db/models/fields/related_descriptors.py\", line 188, in __get__\r\n    \"%s has no %s.\" % (self.field.model.__name__, self.field.name)\r\nbooks.models.BookCode.associated_book.RelatedObjectDoesNotExist: BookCode has no associated_book.\r\n```\r\n\r\n**Expected behavior**\r\nModel history should be the output.\r\n\r\n**Environment:**\r\n - OS: Ubuntu 18.04.2 LTS\r\n - Django Simple History Version: 2.7.0\r\n - Django Version: 2.1.7\r\n - Database Version: Using default `sqlite3`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/531", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/531/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/531/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/531/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/531", "id": 414874585, "node_id": "MDU6SXNzdWU0MTQ4NzQ1ODU=", "number": 531, "title": "get model history table name", "user": {"login": "s3341458", "id": 2015244, "node_id": "MDQ6VXNlcjIwMTUyNDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2015244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/s3341458", "html_url": "https://github.com/s3341458", "followers_url": "https://api.github.com/users/s3341458/followers", "following_url": "https://api.github.com/users/s3341458/following{/other_user}", "gists_url": "https://api.github.com/users/s3341458/gists{/gist_id}", "starred_url": "https://api.github.com/users/s3341458/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/s3341458/subscriptions", "organizations_url": "https://api.github.com/users/s3341458/orgs", "repos_url": "https://api.github.com/users/s3341458/repos", "events_url": "https://api.github.com/users/s3341458/events{/privacy}", "received_events_url": "https://api.github.com/users/s3341458/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-26T23:43:32Z", "updated_at": "2019-02-28T00:23:14Z", "closed_at": "2019-02-27T15:36:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nHow to get history table name of an original model\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/528", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/528/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/528/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/528/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/528", "id": 410832095, "node_id": "MDU6SXNzdWU0MTA4MzIwOTU=", "number": 528, "title": "bulk_update_with_history", "user": {"login": "sergiusnick", "id": 34229611, "node_id": "MDQ6VXNlcjM0MjI5NjEx", "avatar_url": "https://avatars1.githubusercontent.com/u/34229611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergiusnick", "html_url": "https://github.com/sergiusnick", "followers_url": "https://api.github.com/users/sergiusnick/followers", "following_url": "https://api.github.com/users/sergiusnick/following{/other_user}", "gists_url": "https://api.github.com/users/sergiusnick/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergiusnick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergiusnick/subscriptions", "organizations_url": "https://api.github.com/users/sergiusnick/orgs", "repos_url": "https://api.github.com/users/sergiusnick/repos", "events_url": "https://api.github.com/users/sergiusnick/events{/privacy}", "received_events_url": "https://api.github.com/users/sergiusnick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 950789305, "node_id": "MDU6TGFiZWw5NTA3ODkzMDU=", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/accepted", "name": "accepted", "color": "68d153", "default": false, "description": "Issue accepted for completion"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-15T15:56:06Z", "updated_at": "2020-04-24T22:03:43Z", "closed_at": "2020-04-24T22:03:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nMethod \"bulk_create_with_history\" is a good feature to make INSERT INTO and save history too with only two queries. But updating is common case too. \r\n\r\n**Describe the solution you'd like**\r\nCreate method \"bulk_update_with_history\" (which is similar to \"bulk_create_with_history\"), that calls model.objects.update\r\n\r\n**Describe alternatives you've considered**\r\nFor-loop and call \"save\". It is important, when you need a special pre- or post-processing, but it is n+1 select problem\r\n\r\n**Additional context**\r\nIt seems to be easy to do. Just change \"bulk_create\" on \"update\" in method \"bulk_create_with_history\"\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/525", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/525/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/525/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/525/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/525", "id": 405714989, "node_id": "MDU6SXNzdWU0MDU3MTQ5ODk=", "number": 525, "title": "I try django-simple-history with django 2.1.4 but it is showing internal server error. ", "user": {"login": "Akashutreja", "id": 20302933, "node_id": "MDQ6VXNlcjIwMzAyOTMz", "avatar_url": "https://avatars0.githubusercontent.com/u/20302933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Akashutreja", "html_url": "https://github.com/Akashutreja", "followers_url": "https://api.github.com/users/Akashutreja/followers", "following_url": "https://api.github.com/users/Akashutreja/following{/other_user}", "gists_url": "https://api.github.com/users/Akashutreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/Akashutreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Akashutreja/subscriptions", "organizations_url": "https://api.github.com/users/Akashutreja/orgs", "repos_url": "https://api.github.com/users/Akashutreja/repos", "events_url": "https://api.github.com/users/Akashutreja/events{/privacy}", "received_events_url": "https://api.github.com/users/Akashutreja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-01T14:04:16Z", "updated_at": "2019-02-01T17:05:30Z", "closed_at": "2019-02-01T17:05:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI am trying to use django-simple-history but when I run it on production server it started showing me Internal server error.\r\nPlease help me out.\r\nHere is my settings.py file code \r\n\r\n```\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'api',\r\n    'rest_framework',\r\n    'corsheaders',\r\n    'rest_framework.authtoken',\r\n    'simple_history',\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'corsheaders.middleware.CorsMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n    'simple_history.middleware.HistoryRequestMiddleware',\r\n]\r\n\r\n```\r\n\r\nAnd model in which  i am using it as \r\n```\r\nclass Employee(models.Model):\r\n    DateOfResignation = models.TextField(blank=True, null=True)\r\n    LastWorkingDay = models.TextField(blank=True, null=True)\r\n    DateOfDeletion = models.DateTimeField(default=datetime.datetime.utcnow, blank=True, null=True)\r\n    ChangedBy = models.TextField(blank=True, null=True)\r\n    history = HistoricalRecords()\r\n    __history_date = datetime.datetime.utcnow()\r\n\r\n    @property\r\n    def _history_date(self):\r\n        return self.__history_date\r\n\r\n    @_history_date.setter\r\n    def _history_date(self, value):\r\n        self.__history_date = datetime.datetime.utcnow()\r\n\r\n```\r\n\r\nAnd the error which I am getting is.\r\n**Internal Server Error**\r\nThe server encountered an internal error or misconfiguration and was unable to complete your request.\r\n\r\nPlease contact the server administrator at you@example.com to inform them of the time this error occurred, and the actions you performed just before this error.\r\n\r\nMore information about this error may be available in the server error log.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/521", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/521/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/521/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/521/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/521", "id": 401890639, "node_id": "MDU6SXNzdWU0MDE4OTA2Mzk=", "number": 521, "title": "Error when method __str__ points to a foreign key", "user": {"login": "thiagoabreudev", "id": 4981847, "node_id": "MDQ6VXNlcjQ5ODE4NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4981847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagoabreudev", "html_url": "https://github.com/thiagoabreudev", "followers_url": "https://api.github.com/users/thiagoabreudev/followers", "following_url": "https://api.github.com/users/thiagoabreudev/following{/other_user}", "gists_url": "https://api.github.com/users/thiagoabreudev/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagoabreudev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagoabreudev/subscriptions", "organizations_url": "https://api.github.com/users/thiagoabreudev/orgs", "repos_url": "https://api.github.com/users/thiagoabreudev/repos", "events_url": "https://api.github.com/users/thiagoabreudev/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagoabreudev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-22T18:15:02Z", "updated_at": "2019-01-23T17:04:47Z", "closed_at": "2019-01-23T17:04:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Error when method __str__ points to a foreign key**\r\n\r\n> Traceback (most recent call last):\r\n  File \"/home/thiago/workspace/aprendendo/teste-simple-history/tasks/lib/python3.6/site-packages/django/db/models/fields/related_descriptors.py\", line 178, in __get__\r\n    rel_obj = getattr(instance, self.cache_name)\r\nAttributeError: 'Task' object has no attribute '_type_task_cache'\r\n\r\n**The code below shows the problem:**\r\n\r\n```\r\nfrom django.db import models\r\nfrom simple_history.models import HistoricalRecords\r\n\r\n\r\nclass TypeTask(models.Model):\r\n\tname = models.CharField(verbose_name='Type Task', max_length=255)\r\n\r\n\r\nclass Task(models.Model):\r\n\ttype_task = models.ForeignKey(TypeTask, verbose_name='Type task', on_delete=models.PROTECT)\r\n\ttask_date = models.DateTimeField(verbose_name='Date of task', auto_now=True)\r\n\ttask_status = models.CharField(verbose_name='TaskStatus', max_length=255)\r\n\thistory = HistoricalRecords(excluded_fields=['type_task', 'task_date'])\r\n\r\n\tdef __str__(self):\r\n\t\treturn str(self.type_task.name)\r\n```\r\n\r\n**Steps to reproduce the behavior:**\r\n1. Go to 'Django shell'\r\n2. Run\r\n```\r\nfrom core.models import TypeTask, Task\r\ntype_task = TypeTask.objects.create(name='Online')\r\ntask = Task.objects.create(type_task=type_task, task_status='OPEN')\r\ntask.history.all()\r\n```\r\n\r\n**Environment:**\r\n - Django Simple History Version: [e.g. 2.7.0]\r\n - Django Version: [e.g. 1.11.18]\r\n\r\n**Additional context**\r\n\r\n - if the __str__ method does not return a foreign key field the problem does not occur\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/520", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/520/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/520/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/520/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/520", "id": 401665987, "node_id": "MDU6SXNzdWU0MDE2NjU5ODc=", "number": 520, "title": "Setting user_related_name results in strange migrations in v2.6.0", "user": {"login": "dgilge", "id": 33256939, "node_id": "MDQ6VXNlcjMzMjU2OTM5", "avatar_url": "https://avatars0.githubusercontent.com/u/33256939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgilge", "html_url": "https://github.com/dgilge", "followers_url": "https://api.github.com/users/dgilge/followers", "following_url": "https://api.github.com/users/dgilge/following{/other_user}", "gists_url": "https://api.github.com/users/dgilge/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgilge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgilge/subscriptions", "organizations_url": "https://api.github.com/users/dgilge/orgs", "repos_url": "https://api.github.com/users/dgilge/repos", "events_url": "https://api.github.com/users/dgilge/events{/privacy}", "received_events_url": "https://api.github.com/users/dgilge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-22T09:15:23Z", "updated_at": "2019-01-24T14:40:08Z", "closed_at": "2019-01-24T14:40:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n1. Setting `user_related_name=\"mymodels\"` doesn't change `related_name=\"+\"` to `related_name=\"mymodels\"` since v2.6.0.\r\n2. Setting `user_related_name=\"mymodels\"` shouldn't alter other values in migrations\r\n\r\n**To Reproduce**\r\n1. Install v2.5.1\r\n2. Add a history to a model, e.g. with `register`:\r\n\r\n```python\r\nregister(\r\n    EmailAddress,\r\n    app=__package__,\r\n    excluded_fields=('primary',),\r\n    user_related_name='historicalemailaddresses',\r\n)\r\n```\r\n\r\n3. Run `makemigrations`\r\n4. Install v2.6.0\r\n5. Run `makemigrations`\r\n6. Remove `user_related_name`\r\n7. Run `makemigrations`\r\n\r\n**Expected behavior**\r\n\r\n1. No. 5 shouldn't create another migration with `related_name=\"+\"`\r\n2. No. 7 should change `related_name=\"+\"` only (but it doesn't because it has this value in the previous migration already). But the change looks like this on my system:\r\n\r\nAfter applying No. 5:\r\n\r\n```python\r\n        migrations.AlterField(\r\n            model_name=\"historicalemailaddress\",\r\n            name=\"user\",\r\n            field=models.ForeignKey(\r\n                blank=True,\r\n                db_constraint=False,\r\n                null=True,\r\n                on_delete=django.db.models.deletion.DO_NOTHING,\r\n                related_name=\"+\",\r\n                to=settings.AUTH_USER_MODEL,\r\n                verbose_name=\"user\",\r\n            ),\r\n        )\r\n```\r\n\r\nWhy were `blank`, `db_constraint` and `verbose_name` (and other values like `help_text` in other cases) added here?\r\n\r\nAfter applying No. 7:\r\n\r\n```python\r\n        migrations.AlterField(\r\n            model_name=\"historicalemailaddress\",\r\n            name=\"history_user\",\r\n            field=models.ForeignKey(\r\n                null=True,\r\n                on_delete=django.db.models.deletion.SET_NULL,\r\n                related_name=\"+\",\r\n                to=settings.AUTH_USER_MODEL,\r\n            ),\r\n        )\r\n```\r\n\r\nThe migration in < v2.6.0 looked like (I comment strange changes):\r\n\r\n```python\r\n        migrations.AlterField(\r\n            model_name=\"historicalemailaddress\",\r\n            name=\"history_user\",  # Why this changed to \"user\"?\r\n            field=models.ForeignKey(\r\n                null=True,\r\n                on_delete=django.db.models.deletion.SET_NULL,  # Why this changed to \"DO_NOTHING\"?\r\n                related_name=\"historicalemailaddresses\",\r\n                to=settings.AUTH_USER_MODEL,\r\n            ),\r\n        )\r\n```\r\n\r\n**Environment:**\r\n - OS: macOS 10.13.6\r\n - Django Simple History Version: 2.6.0, 2.7.0\r\n - Django Version: 2.0.10\r\n - Database Version: PostgreSQL 9.6\r\n\r\n**I also want to say \"thank you\" for all the improvements and fixes you implemented in the last months for simple history and for keeping this package alive!**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/519", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/519/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/519/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/519/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/519", "id": 400959015, "node_id": "MDU6SXNzdWU0MDA5NTkwMTU=", "number": 519, "title": "Does DSH work with factory_boy ?", "user": {"login": "atodorov", "id": 1002300, "node_id": "MDQ6VXNlcjEwMDIzMDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1002300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atodorov", "html_url": "https://github.com/atodorov", "followers_url": "https://api.github.com/users/atodorov/followers", "following_url": "https://api.github.com/users/atodorov/following{/other_user}", "gists_url": "https://api.github.com/users/atodorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/atodorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atodorov/subscriptions", "organizations_url": "https://api.github.com/users/atodorov/orgs", "repos_url": "https://api.github.com/users/atodorov/repos", "events_url": "https://api.github.com/users/atodorov/events{/privacy}", "received_events_url": "https://api.github.com/users/atodorov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-19T04:17:02Z", "updated_at": "2019-01-20T12:37:24Z", "closed_at": "2019-01-20T12:37:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm in the middle of quite a big change for Kiwi TCMS which uses `model_obj.history.latest().history_id` in a few places. This all seems to work fine at runtime when I exercise the pages manually.\r\n\r\nHowever the automated test suite fails and debugging shows me there are 0 history objects in the test DB. I am using factory_boy to create model objects for tests so not sure how well that plays with simple-history.\r\n\r\nSome comment is greatly appreciated since I have no idea how to proceed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/514", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/514/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/514/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/514/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/514", "id": 399253844, "node_id": "MDU6SXNzdWUzOTkyNTM4NDQ=", "number": 514, "title": "how could  I get all history queyset?", "user": {"login": "linpan", "id": 6077601, "node_id": "MDQ6VXNlcjYwNzc2MDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6077601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linpan", "html_url": "https://github.com/linpan", "followers_url": "https://api.github.com/users/linpan/followers", "following_url": "https://api.github.com/users/linpan/following{/other_user}", "gists_url": "https://api.github.com/users/linpan/gists{/gist_id}", "starred_url": "https://api.github.com/users/linpan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linpan/subscriptions", "organizations_url": "https://api.github.com/users/linpan/orgs", "repos_url": "https://api.github.com/users/linpan/repos", "events_url": "https://api.github.com/users/linpan/events{/privacy}", "received_events_url": "https://api.github.com/users/linpan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-15T09:22:36Z", "updated_at": "2019-01-15T15:28:17Z", "closed_at": "2019-01-15T15:28:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/512", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/512/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/512/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/512/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/512", "id": 399058391, "node_id": "MDU6SXNzdWUzOTkwNTgzOTE=", "number": 512, "title": "simple-history 2.6.0 generates a migration while 2.5.1 doesn't", "user": {"login": "atodorov", "id": 1002300, "node_id": "MDQ6VXNlcjEwMDIzMDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1002300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atodorov", "html_url": "https://github.com/atodorov", "followers_url": "https://api.github.com/users/atodorov/followers", "following_url": "https://api.github.com/users/atodorov/following{/other_user}", "gists_url": "https://api.github.com/users/atodorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/atodorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atodorov/subscriptions", "organizations_url": "https://api.github.com/users/atodorov/orgs", "repos_url": "https://api.github.com/users/atodorov/repos", "events_url": "https://api.github.com/users/atodorov/events{/privacy}", "received_events_url": "https://api.github.com/users/atodorov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 950789305, "node_id": "MDU6TGFiZWw5NTA3ODkzMDU=", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/accepted", "name": "accepted", "color": "68d153", "default": false, "description": "Issue accepted for completion"}, {"id": 36700564, "node_id": "MDU6TGFiZWwzNjcwMDU2NA==", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-14T20:22:48Z", "updated_at": "2019-01-14T23:22:04Z", "closed_at": "2019-01-14T23:22:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nKiwi TCMS uses simple-history as dependency. Until recently we had version 2.5.1 and we've upgraded to 2.6.0. The problem is that with 2.5.1 ./manage.py migrate/makemigrations doesn't detect any new changes but with 2.6.0 it does.\r\n\r\nHere's how the initial migration looks like:\r\n```\r\nfrom django.db import migrations, models\r\n\r\n        migrations.AddField(\r\n            model_name='testplan',\r\n            name='parent',\r\n            field=models.ForeignKey(blank=True, null=True, on_delete=models.deletion.CASCADE,\r\n                                    related_name='child_set', to='testplans.TestPlan'),\r\n        ),\r\n\r\n        migrations.CreateModel(\r\n            name='HistoricalTestPlan',\r\n            fields=[\r\n                ('parent', models.ForeignKey(blank=True, db_constraint=False, null=True,\r\n                                             on_delete=models.deletion.DO_NOTHING, related_name='+',\r\n                                             to='testplans.TestPlan')),\r\n            ]\r\n        )\r\n```\r\n\r\nHere's what `makemigrations` produces with 2.6.0:\r\n\r\n```\r\nimport django.db.models.deletion\r\n\r\n        migrations.AlterField(\r\n            model_name='historicaltestplan',\r\n            name='parent',\r\n            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='testplans.HistoricalTestPlan'),\r\n        ),\r\n```\r\n\r\nThe only difference I see is how we reference the `on_delete` constraint.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. git clone https://github.com/kiwitcms/Kiwi/\r\n2. pip install -r requirements/devel.txt\r\n3. ./manage.py migrate\r\n4. ./manage.py makemigrations  <--- produces a new migration\r\n\r\nRepeat the above with 2.5.1 instead and the last step tells you there are no changes detected\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Linux, RHEL 7\r\n - Django Simple History Version: 2.5.1 and 2.6\r\n - Django Version: 2.1.5\r\n - Database Version: SQLite\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/504", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/504/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/504/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/504/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/504", "id": 392665835, "node_id": "MDU6SXNzdWUzOTI2NjU4MzU=", "number": 504, "title": "UUID causes first, last, prev_record, next_record to be incorrectly ordered", "user": {"login": "nessalc", "id": 12846041, "node_id": "MDQ6VXNlcjEyODQ2MDQx", "avatar_url": "https://avatars3.githubusercontent.com/u/12846041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nessalc", "html_url": "https://github.com/nessalc", "followers_url": "https://api.github.com/users/nessalc/followers", "following_url": "https://api.github.com/users/nessalc/following{/other_user}", "gists_url": "https://api.github.com/users/nessalc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nessalc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nessalc/subscriptions", "organizations_url": "https://api.github.com/users/nessalc/orgs", "repos_url": "https://api.github.com/users/nessalc/repos", "events_url": "https://api.github.com/users/nessalc/events{/privacy}", "received_events_url": "https://api.github.com/users/nessalc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-19T15:56:46Z", "updated_at": "2018-12-19T16:11:22Z", "closed_at": "2018-12-19T16:08:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "**The Bug**\r\nIf history_id is set to use UUID (`history_id_field=models.UUIDField(default=uuid.uuid4)`), `.first()`, `.last()`, `.next_record` and `.prev_record` do not necessarily perform their expected function. Since, by its nature, UUID4 is random, only a fluke would cause these IDs to be in date order.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Add `HistoricalRecords` with `history_id_field=models.UUIDField(default=uuid.uuid4)` to a model\r\n2. Create instance of model\r\n3. Edit model two or more times\r\n4. In shell or template, view `h=model.history.first()`\r\n5. `h.prev_record` should not display anything, but `.next_record` and `.prev_record` appear to be based on date, while `.first()` and `.last()` are based on `history_id`.\r\n\r\n**Expected behavior**\r\nI would expect the four functions/properties to be related, especially as they are described this way in the documentation [here](https://django-simple-history.readthedocs.io/en/2.6.0/usage.html#getting-previous-and-next-historical-record).\r\n\r\nOne of the following should be the case:\r\n- `.first()` and `.last()` should be based on `history_date`\r\n- `.prev_record` and `.next_record` should be based on `history_id`\r\n- documentation should be cleared up regarding the uses of these properties/methods.\r\n\r\n**Environment:**\r\n - OS: Windows 7 x64\r\n - Django Simple History Version: 2.6.0\r\n - Django Version: 2.1\r\n - Python Version: 3.7.1\r\n - Database Version: SQLite3\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/503", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/503/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/503/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/503/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/503", "id": 390379882, "node_id": "MDU6SXNzdWUzOTAzNzk4ODI=", "number": 503, "title": "Model history list missing in Django-admin panel", "user": {"login": "r0b1n1sl4m", "id": 6296015, "node_id": "MDQ6VXNlcjYyOTYwMTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6296015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r0b1n1sl4m", "html_url": "https://github.com/r0b1n1sl4m", "followers_url": "https://api.github.com/users/r0b1n1sl4m/followers", "following_url": "https://api.github.com/users/r0b1n1sl4m/following{/other_user}", "gists_url": "https://api.github.com/users/r0b1n1sl4m/gists{/gist_id}", "starred_url": "https://api.github.com/users/r0b1n1sl4m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r0b1n1sl4m/subscriptions", "organizations_url": "https://api.github.com/users/r0b1n1sl4m/orgs", "repos_url": "https://api.github.com/users/r0b1n1sl4m/repos", "events_url": "https://api.github.com/users/r0b1n1sl4m/events{/privacy}", "received_events_url": "https://api.github.com/users/r0b1n1sl4m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-12T19:43:00Z", "updated_at": "2018-12-12T20:14:16Z", "closed_at": "2018-12-12T20:13:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now the only way to check an instance history is by clicking in history button from model instance single view in from in Django-admin. I couldn't find a way to list all history changes for a specific model, there is also no way to check deleted instance history form the Django-admin.\r\n\r\nI'm hoping if is there any way to see the list of history for a specific model from Django-admin and revert deleted instance.\r\n\r\nNot sure if it's a bug or just a missing feature so I'm sending some of my admin panel screenshots here:\r\n![image](https://user-images.githubusercontent.com/6296015/49894444-21b76d80-fe78-11e8-84ca-03192e72ebb3.png)\r\n![image](https://user-images.githubusercontent.com/6296015/49894474-33007a00-fe78-11e8-920d-69ac5a6a9daa.png)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/500", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/500/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/500/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/500/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/500", "id": 390197118, "node_id": "MDU6SXNzdWUzOTAxOTcxMTg=", "number": 500, "title": "Can't use .prev_record and .next_record when using not default field name", "user": {"login": "yetanotherape", "id": 443452, "node_id": "MDQ6VXNlcjQ0MzQ1Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/443452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yetanotherape", "html_url": "https://github.com/yetanotherape", "followers_url": "https://api.github.com/users/yetanotherape/followers", "following_url": "https://api.github.com/users/yetanotherape/following{/other_user}", "gists_url": "https://api.github.com/users/yetanotherape/gists{/gist_id}", "starred_url": "https://api.github.com/users/yetanotherape/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yetanotherape/subscriptions", "organizations_url": "https://api.github.com/users/yetanotherape/orgs", "repos_url": "https://api.github.com/users/yetanotherape/repos", "events_url": "https://api.github.com/users/yetanotherape/events{/privacy}", "received_events_url": "https://api.github.com/users/yetanotherape/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-12T12:08:35Z", "updated_at": "2018-12-13T06:22:01Z", "closed_at": "2018-12-12T15:43:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using not default field name for HistoricalRecords:\r\n```\r\nclass Record(models.Model)\r\n...\r\nlog = HistoricalRecords()\r\n```\r\nWhen I try to use .prev_record or .next_record property of the history object if fails with a message \"AttributeError: 'Record' object has no attribute 'history'\". It seems that 'history' attribute is hardcoded now.\r\n\r\n**Environment:**\r\n - OS: Ubuntu 16.04\r\n - Django Simple History Version: 2.5.1\r\n - Django Version: 1.11.17\r\n - Database Version: MySQL 5.7\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/495", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/495/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/495/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/495/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/495", "id": 388583360, "node_id": "MDU6SXNzdWUzODg1ODMzNjA=", "number": 495, "title": "Showing history in admin causes n+1 queries for history_user", "user": {"login": "rudkjobing", "id": 7032667, "node_id": "MDQ6VXNlcjcwMzI2Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/7032667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rudkjobing", "html_url": "https://github.com/rudkjobing", "followers_url": "https://api.github.com/users/rudkjobing/followers", "following_url": "https://api.github.com/users/rudkjobing/following{/other_user}", "gists_url": "https://api.github.com/users/rudkjobing/gists{/gist_id}", "starred_url": "https://api.github.com/users/rudkjobing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rudkjobing/subscriptions", "organizations_url": "https://api.github.com/users/rudkjobing/orgs", "repos_url": "https://api.github.com/users/rudkjobing/repos", "events_url": "https://api.github.com/users/rudkjobing/events{/privacy}", "received_events_url": "https://api.github.com/users/rudkjobing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-07T10:02:04Z", "updated_at": "2018-12-07T16:00:52Z", "closed_at": "2018-12-07T16:00:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It need a select_related as far as i can tell. Will create a pr for it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/487", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/487/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/487/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/487/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/487", "id": 385088410, "node_id": "MDU6SXNzdWUzODUwODg0MTA=", "number": 487, "title": "support customise history date base on request context", "user": {"login": "s3341458", "id": 2015244, "node_id": "MDQ6VXNlcjIwMTUyNDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2015244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/s3341458", "html_url": "https://github.com/s3341458", "followers_url": "https://api.github.com/users/s3341458/followers", "following_url": "https://api.github.com/users/s3341458/following{/other_user}", "gists_url": "https://api.github.com/users/s3341458/gists{/gist_id}", "starred_url": "https://api.github.com/users/s3341458/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/s3341458/subscriptions", "organizations_url": "https://api.github.com/users/s3341458/orgs", "repos_url": "https://api.github.com/users/s3341458/repos", "events_url": "https://api.github.com/users/s3341458/events{/privacy}", "received_events_url": "https://api.github.com/users/s3341458/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-28T03:44:12Z", "updated_at": "2018-11-28T16:22:43Z", "closed_at": "2018-11-28T16:22:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nour current project want to  have better support of offline scenarios, so when user updated a object or created a object, it might hit the server much later after user click the button on their device.\r\nIn this case, we want to use the client date on its device for history date instead of server date time.\r\n\r\nIn our case, such client action date time will be provided in request headers.\r\nso we hope there is a easy way for history to support custom date from request context.\r\n\r\n**Describe the solution you'd like**\r\nextract history_date = getattr(instance, \"_history_date\", now()) into a method, so we can customised it by \r\noverwrite it through inheritance.\r\n\r\n**Describe alternatives you've considered**\r\nlike 'default_get_user' support 'default_get_history_date(request, **kwargs)', so we can customise it by passing function on construction time.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/485", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/485/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/485/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/485/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/485", "id": 384835366, "node_id": "MDU6SXNzdWUzODQ4MzUzNjY=", "number": 485, "title": "Setting app_label different to model class ", "user": {"login": "uhurusurfa", "id": 13331506, "node_id": "MDQ6VXNlcjEzMzMxNTA2", "avatar_url": "https://avatars1.githubusercontent.com/u/13331506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uhurusurfa", "html_url": "https://github.com/uhurusurfa", "followers_url": "https://api.github.com/users/uhurusurfa/followers", "following_url": "https://api.github.com/users/uhurusurfa/following{/other_user}", "gists_url": "https://api.github.com/users/uhurusurfa/gists{/gist_id}", "starred_url": "https://api.github.com/users/uhurusurfa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uhurusurfa/subscriptions", "organizations_url": "https://api.github.com/users/uhurusurfa/orgs", "repos_url": "https://api.github.com/users/uhurusurfa/repos", "events_url": "https://api.github.com/users/uhurusurfa/events{/privacy}", "received_events_url": "https://api.github.com/users/uhurusurfa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 950789305, "node_id": "MDU6TGFiZWw5NTA3ODkzMDU=", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/accepted", "name": "accepted", "color": "68d153", "default": false, "description": "Issue accepted for completion"}, {"id": 36700564, "node_id": "MDU6TGFiZWwzNjcwMDU2NA==", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-27T14:58:58Z", "updated_at": "2018-11-28T21:16:11Z", "closed_at": "2018-11-28T21:16:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Am I completely missing something or can you only set the **_app_label_** via the register method passing app='some_app'?\r\nI have tried:\r\nhistory = HistoricalRecords(inherit=False)\r\n   and\r\nhistory = HistoricalRecords(inherit=True)\r\n\r\n... but the app_label in the generated history model is always the same as the model it is created from.\r\nHave traversed the code and see no obvious way to change the generated history model to use a different app_lable than the model from which it is created when creating the history model using the history = HistoricalRecords() mechanism.\r\n\r\nThis does work:\r\n register(MyModel, app='some_other_app', inherit=False)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/473", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/473/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/473/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/473", "id": 376092353, "node_id": "MDU6SXNzdWUzNzYwOTIzNTM=", "number": 473, "title": "Admin template issues on django trunk ", "user": {"login": "rossmechanic", "id": 6855461, "node_id": "MDQ6VXNlcjY4NTU0NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6855461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossmechanic", "html_url": "https://github.com/rossmechanic", "followers_url": "https://api.github.com/users/rossmechanic/followers", "following_url": "https://api.github.com/users/rossmechanic/following{/other_user}", "gists_url": "https://api.github.com/users/rossmechanic/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossmechanic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossmechanic/subscriptions", "organizations_url": "https://api.github.com/users/rossmechanic/orgs", "repos_url": "https://api.github.com/users/rossmechanic/repos", "events_url": "https://api.github.com/users/rossmechanic/events{/privacy}", "received_events_url": "https://api.github.com/users/rossmechanic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 950789305, "node_id": "MDU6TGFiZWw5NTA3ODkzMDU=", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/accepted", "name": "accepted", "color": "68d153", "default": false, "description": "Issue accepted for completion"}, {"id": 878336793, "node_id": "MDU6TGFiZWw4NzgzMzY3OTM=", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/good-first-issue", "name": "good-first-issue", "color": "6181e2", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-31T18:02:10Z", "updated_at": "2018-10-31T20:12:49Z", "closed_at": "2018-10-31T20:12:49Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nA clear and concise description of what the bug is.\r\nWhen running the full suite of tests, we run into the following errors when testing against django trunk:\r\n```\r\nSystemCheckError: System check identified some issues:\r\n\r\nERRORS:\r\n?: (admin.E404) 'django.contrib.messages.context_processors.messages' must be enabled in DjangoTemplates (TEMPLATES) in order to use the admin application.\r\n?: (admin.E406) 'django.contrib.messages' must be in INSTALLED_APPS in order to use the admin application.\r\n```\r\n\r\nWe should fix these before the next release. \r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\nRun `tox` locally. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/465", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/465/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/465/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/465", "id": 372725874, "node_id": "MDU6SXNzdWUzNzI3MjU4NzQ=", "number": 465, "title": "'Options' object has no attribute 'simple_history_manager_attribute'", "user": {"login": "simon-moon", "id": 7491749, "node_id": "MDQ6VXNlcjc0OTE3NDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7491749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simon-moon", "html_url": "https://github.com/simon-moon", "followers_url": "https://api.github.com/users/simon-moon/followers", "following_url": "https://api.github.com/users/simon-moon/following{/other_user}", "gists_url": "https://api.github.com/users/simon-moon/gists{/gist_id}", "starred_url": "https://api.github.com/users/simon-moon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simon-moon/subscriptions", "organizations_url": "https://api.github.com/users/simon-moon/orgs", "repos_url": "https://api.github.com/users/simon-moon/repos", "events_url": "https://api.github.com/users/simon-moon/events{/privacy}", "received_events_url": "https://api.github.com/users/simon-moon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-22T22:26:04Z", "updated_at": "2018-10-23T00:56:24Z", "closed_at": "2018-10-23T00:56:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nOn a fresh install of 2.5.1, using middleware, and integrating with django admin I get the following error when trying to open the history screen in django admin:\r\n\r\n'Options' object has no attribute 'simple_history_manager_attribute'\r\n\r\nPython 3.4.3\r\nDjango 2.0.3\r\n\r\n\r\nI have a base class that is inherited by many others:\r\n\r\n```python\r\nclass CandidateDocument(models.Model):\r\n    objects = InheritanceManager()\r\n    user = models.ForeignKey(\"auth.User\", on_delete=models.CASCADE)\r\n    verified_state = models.IntegerField(default=VerificationPending,\r\n                                         choices=VerificationState)\r\n    input_date = models.DateTimeField(auto_now=True)\r\n    complete = models.BooleanField(default=False)\r\n    requires_verification = models.BooleanField(default=True)\r\n    minimum_qualification = False\r\n    history = HistoricalRecords()\r\n    order_number = 0\r\n\r\nclass CandidateEducation(CandidateDocument) \r\n```\r\n\r\nIn Admin.py I have a custom admin class:\r\n```python\r\nclass HiddenDocAdmin(admin.ModelAdmin):\r\n    def in_menu(self):\r\n        return False\r\n\r\n    def response_change(self, request, obj, post_url_continue=None):\r\n        url = reverse(\"admin:document_upload_\" +\r\n                                   \"candidatedocument_changelist\")\r\n        return redirect(url)\r\n\r\n    readonly_fields = ['first_name', 'last_name']\r\n\r\n    def first_name(self, obj):\r\n        return obj.user.first_name\r\n\r\n    def last_name(self, obj):\r\n        return obj.user.last_name\r\n\r\n```\r\n\r\nwhich get inherited like so:\r\n\r\n```python\r\nclass CandidateEducationAdmin(HiddenDocAdmin):\r\n    model = CandidateEducation\r\n    fields = ['user', 'first_name', 'last_name', 'verified_state',\r\n              'education_type', 'institution_name', 'graduation_date']\r\n```\r\nwhich I then register:\r\n\r\n```python\r\nadmin.site.register(models.CandidateEducation, CandidateEducationAdmin)\r\n```\r\n\r\nI've tried various ways to add simple_history.admin.SimpleHistoryAdmin to the admin classes but each time I met with the same error", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/459", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/459/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/459/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/459/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/459", "id": 371830528, "node_id": "MDU6SXNzdWUzNzE4MzA1Mjg=", "number": 459, "title": "Registration cycle with custom and historized User model and simple-history 2.5.0", "user": {"login": "pm13", "id": 6249977, "node_id": "MDQ6VXNlcjYyNDk5Nzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6249977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pm13", "html_url": "https://github.com/pm13", "followers_url": "https://api.github.com/users/pm13/followers", "following_url": "https://api.github.com/users/pm13/following{/other_user}", "gists_url": "https://api.github.com/users/pm13/gists{/gist_id}", "starred_url": "https://api.github.com/users/pm13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pm13/subscriptions", "organizations_url": "https://api.github.com/users/pm13/orgs", "repos_url": "https://api.github.com/users/pm13/repos", "events_url": "https://api.github.com/users/pm13/events{/privacy}", "received_events_url": "https://api.github.com/users/pm13/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-19T07:01:23Z", "updated_at": "2018-10-22T18:52:34Z", "closed_at": "2018-10-22T18:52:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nI have custom user model in module which imports simple_history.models (I think it is common to register historical records in models.py with custom user model.) It worked with simple-history 2.4.0. \r\n\r\nBut there is new call of get_user_model on class level (https://github.com/treyhunner/django-simple-history/commit/372632779592b026756cbfd83fc8712afb7a6978). It raises exception:\r\n\r\n File \".../models.py\", line ..., in <module>\r\n    import simple_history.models\r\n  File \".../simple_history/models.py\", line 29, in <module>\r\n    User = get_user_model()\r\n  File \".../django/contrib/auth/__init__.py\", line 170, in get_user_model\r\n    \"AUTH_USER_MODEL refers to model '%s' that has not been installed\" % settings.AUTH_USER_MODEL\r\ndjango.core.exceptions.ImproperlyConfigured: AUTH_USER_MODEL refers to model '....User' that has not been installed\r\n\r\nClass level User variable is used only once - so it is quite simple to call get_user_model in get_extra_fields method (one line down :)) - it solves problem.\r\n\r\n**To Reproduce**\r\n1. Define custom user model and import simple_history.models in models.py (for historization of users).\r\n2. Set AUTH_USER_MODEL to this model.\r\n\r\n**Environment:**\r\n - Django Simple History Version: 2.5.0\r\n - Django Version: 2.1.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/456", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/456/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/456/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/456", "id": 371734766, "node_id": "MDU6SXNzdWUzNzE3MzQ3NjY=", "number": 456, "title": "Adopt conflict-resistant changelog generator", "user": {"login": "barm", "id": 1093763, "node_id": "MDQ6VXNlcjEwOTM3NjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1093763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barm", "html_url": "https://github.com/barm", "followers_url": "https://api.github.com/users/barm/followers", "following_url": "https://api.github.com/users/barm/following{/other_user}", "gists_url": "https://api.github.com/users/barm/gists{/gist_id}", "starred_url": "https://api.github.com/users/barm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barm/subscriptions", "organizations_url": "https://api.github.com/users/barm/orgs", "repos_url": "https://api.github.com/users/barm/repos", "events_url": "https://api.github.com/users/barm/events{/privacy}", "received_events_url": "https://api.github.com/users/barm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-18T22:15:00Z", "updated_at": "2020-05-05T01:47:01Z", "closed_at": "2020-05-05T01:47:01Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "**Problem Statement**\r\nWhen working on issues in parallel, we ran into merge conflicts due to changelogs being manually edited in a single file. \r\n\r\n**Describe the solution you'd like**\r\n@tbeadle suggested a solution that is used by Gitlab that breaks individual bullets in the changelog into separate files and uses a script to generate the additional changelog entries into the actual changelog file at release time:\r\nhttps://docs.gitlab.com/ee/development/changelog.html\r\n\r\nSee in use in Gitlab:\r\nhttps://gitlab.com/gitlab-org/gitlab-ce/tree/master/changelogs/\r\n\r\nGitlab provides `bin/changelog` to generate the changelog entry file\r\n\r\n**Describe alternatives you've considered**\r\nStatus-quo\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/455", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/455/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/455/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/455/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/455", "id": 371730560, "node_id": "MDU6SXNzdWUzNzE3MzA1NjA=", "number": 455, "title": "Create alias for camel cased `changeReason`", "user": {"login": "barm", "id": 1093763, "node_id": "MDQ6VXNlcjEwOTM3NjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1093763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barm", "html_url": "https://github.com/barm", "followers_url": "https://api.github.com/users/barm/followers", "following_url": "https://api.github.com/users/barm/following{/other_user}", "gists_url": "https://api.github.com/users/barm/gists{/gist_id}", "starred_url": "https://api.github.com/users/barm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barm/subscriptions", "organizations_url": "https://api.github.com/users/barm/orgs", "repos_url": "https://api.github.com/users/barm/repos", "events_url": "https://api.github.com/users/barm/events{/privacy}", "received_events_url": "https://api.github.com/users/barm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1207025326, "node_id": "MDU6TGFiZWwxMjA3MDI1MzI2", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/3.0%20planning", "name": "3.0 planning", "color": "f7656f", "default": false, "description": "Discuss proposals for changes in the next major version"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-18T21:59:32Z", "updated_at": "2020-05-05T01:47:38Z", "closed_at": "2020-05-05T01:47:38Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "**Problem Statement**\r\nThe naming for `changeReason` is camelCase instead of the more Pythonic snake_case. We'd like to move to snake_case for this for consistency.\r\n\r\n**Describe the solution you'd like**\r\nMove to snake_case but temporarily maintain backward compatibility so we don't suddenly break downstream projects.\r\n\r\nWe can make an alias `change_reason` and still accept `changeReason` but warn that it is deprecated for at least one major release.\r\n\r\n**Describe alternatives you've considered**\r\nWe could alternatively continue to use camelCase, but that's not very nice.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/453", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/453/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/453/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/453", "id": 371690107, "node_id": "MDU6SXNzdWUzNzE2OTAxMDc=", "number": 453, "title": "Add test config for Python 3.7", "user": {"login": "kseever", "id": 34247997, "node_id": "MDQ6VXNlcjM0MjQ3OTk3", "avatar_url": "https://avatars1.githubusercontent.com/u/34247997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kseever", "html_url": "https://github.com/kseever", "followers_url": "https://api.github.com/users/kseever/followers", "following_url": "https://api.github.com/users/kseever/following{/other_user}", "gists_url": "https://api.github.com/users/kseever/gists{/gist_id}", "starred_url": "https://api.github.com/users/kseever/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kseever/subscriptions", "organizations_url": "https://api.github.com/users/kseever/orgs", "repos_url": "https://api.github.com/users/kseever/repos", "events_url": "https://api.github.com/users/kseever/events{/privacy}", "received_events_url": "https://api.github.com/users/kseever/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-18T20:04:09Z", "updated_at": "2018-12-06T14:52:03Z", "closed_at": "2018-12-06T14:52:02Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/446", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/446/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/446/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/446/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/446", "id": 371215694, "node_id": "MDU6SXNzdWUzNzEyMTU2OTQ=", "number": 446, "title": "Add Black auto formatter", "user": {"login": "barm", "id": 1093763, "node_id": "MDQ6VXNlcjEwOTM3NjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1093763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barm", "html_url": "https://github.com/barm", "followers_url": "https://api.github.com/users/barm/followers", "following_url": "https://api.github.com/users/barm/following{/other_user}", "gists_url": "https://api.github.com/users/barm/gists{/gist_id}", "starred_url": "https://api.github.com/users/barm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barm/subscriptions", "organizations_url": "https://api.github.com/users/barm/orgs", "repos_url": "https://api.github.com/users/barm/repos", "events_url": "https://api.github.com/users/barm/events{/privacy}", "received_events_url": "https://api.github.com/users/barm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 878336793, "node_id": "MDU6TGFiZWw4NzgzMzY3OTM=", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/good-first-issue", "name": "good-first-issue", "color": "6181e2", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "rossmechanic", "id": 6855461, "node_id": "MDQ6VXNlcjY4NTU0NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6855461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossmechanic", "html_url": "https://github.com/rossmechanic", "followers_url": "https://api.github.com/users/rossmechanic/followers", "following_url": "https://api.github.com/users/rossmechanic/following{/other_user}", "gists_url": "https://api.github.com/users/rossmechanic/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossmechanic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossmechanic/subscriptions", "organizations_url": "https://api.github.com/users/rossmechanic/orgs", "repos_url": "https://api.github.com/users/rossmechanic/repos", "events_url": "https://api.github.com/users/rossmechanic/events{/privacy}", "received_events_url": "https://api.github.com/users/rossmechanic/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rossmechanic", "id": 6855461, "node_id": "MDQ6VXNlcjY4NTU0NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6855461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossmechanic", "html_url": "https://github.com/rossmechanic", "followers_url": "https://api.github.com/users/rossmechanic/followers", "following_url": "https://api.github.com/users/rossmechanic/following{/other_user}", "gists_url": "https://api.github.com/users/rossmechanic/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossmechanic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossmechanic/subscriptions", "organizations_url": "https://api.github.com/users/rossmechanic/orgs", "repos_url": "https://api.github.com/users/rossmechanic/repos", "events_url": "https://api.github.com/users/rossmechanic/events{/privacy}", "received_events_url": "https://api.github.com/users/rossmechanic/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-10-17T18:43:06Z", "updated_at": "2018-11-13T16:56:11Z", "closed_at": "2018-11-09T23:57:02Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "**Problem Statement**\r\nCurrently we don't have an auto formatter, so code style can be inconsistent.\r\n\r\n**Describe the solution you'd like**\r\nWe like [Black](https://github.com/ambv/black) at Cadre and think we should adopt this to eliminate the need for stylistic comments in code reviews.\r\n\r\n**Describe alternatives you've considered**\r\nyapf is another good formatter, but takes longer and uses a heuristic so may not be deterministic.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/442", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/442/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/442/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/442", "id": 369218183, "node_id": "MDU6SXNzdWUzNjkyMTgxODM=", "number": 442, "title": "Improve bulk_history_create", "user": {"login": "dgilge", "id": 33256939, "node_id": "MDQ6VXNlcjMzMjU2OTM5", "avatar_url": "https://avatars0.githubusercontent.com/u/33256939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgilge", "html_url": "https://github.com/dgilge", "followers_url": "https://api.github.com/users/dgilge/followers", "following_url": "https://api.github.com/users/dgilge/following{/other_user}", "gists_url": "https://api.github.com/users/dgilge/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgilge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgilge/subscriptions", "organizations_url": "https://api.github.com/users/dgilge/orgs", "repos_url": "https://api.github.com/users/dgilge/repos", "events_url": "https://api.github.com/users/dgilge/events{/privacy}", "received_events_url": "https://api.github.com/users/dgilge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-11T17:06:05Z", "updated_at": "2018-10-18T22:00:35Z", "closed_at": "2018-10-18T22:00:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Problem Statement**\r\n1. I love change reasons and you can't set them (without additional db hits).\r\n2. Normally, a history type is defined when a historical record is created. I love consistency.\r\n\r\n**Describe the solution you'd like**\r\n1. Adding the following line below that one should do the trick, I think:\r\nhttps://github.com/treyhunner/django-simple-history/blob/a3b86f101a7a675efd5f979bffa2244f9bcc4c56/simple_history/manager.py#L99\r\n    ```python\r\n    history_change_reason=getattr(instance, 'changeReason', ''),\r\n    ```\r\n\r\n2. Adding a keyword argument to `bulk_history_create` called `history_type=''` and then add the following line below the line mentioned in 1.\r\n    ```python\r\n    history_type=history_type,\r\n    ```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/439", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/439/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/439/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/439/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/439", "id": 365010719, "node_id": "MDU6SXNzdWUzNjUwMTA3MTk=", "number": 439, "title": "Allow historical data to be deleted when the master record is deleted", "user": {"login": "rwlogel", "id": 3373178, "node_id": "MDQ6VXNlcjMzNzMxNzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3373178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rwlogel", "html_url": "https://github.com/rwlogel", "followers_url": "https://api.github.com/users/rwlogel/followers", "following_url": "https://api.github.com/users/rwlogel/following{/other_user}", "gists_url": "https://api.github.com/users/rwlogel/gists{/gist_id}", "starred_url": "https://api.github.com/users/rwlogel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rwlogel/subscriptions", "organizations_url": "https://api.github.com/users/rwlogel/orgs", "repos_url": "https://api.github.com/users/rwlogel/repos", "events_url": "https://api.github.com/users/rwlogel/events{/privacy}", "received_events_url": "https://api.github.com/users/rwlogel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-28T19:21:38Z", "updated_at": "2018-10-10T20:26:29Z", "closed_at": "2018-10-10T20:26:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Problem Statement**\r\nWe have a number of tables using `HistoricalRecords`,  when attempting to delete a user in the admin it fails (see ticket #391).  In our circumstance if the record is being deleted we don't actually want to keep any historical records.\r\n\r\n**Describe the solution you'd like**\r\nI'd like to be able to specify that the historical records would be deleted when the master record is deleted.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/437", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/437/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/437/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/437/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/437", "id": 362891607, "node_id": "MDU6SXNzdWUzNjI4OTE2MDc=", "number": 437, "title": "Add history_instance to pre_create_historical_record signal", "user": {"login": "dgilge", "id": 33256939, "node_id": "MDQ6VXNlcjMzMjU2OTM5", "avatar_url": "https://avatars0.githubusercontent.com/u/33256939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgilge", "html_url": "https://github.com/dgilge", "followers_url": "https://api.github.com/users/dgilge/followers", "following_url": "https://api.github.com/users/dgilge/following{/other_user}", "gists_url": "https://api.github.com/users/dgilge/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgilge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgilge/subscriptions", "organizations_url": "https://api.github.com/users/dgilge/orgs", "repos_url": "https://api.github.com/users/dgilge/repos", "events_url": "https://api.github.com/users/dgilge/events{/privacy}", "received_events_url": "https://api.github.com/users/dgilge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-22T21:18:30Z", "updated_at": "2018-12-07T16:07:43Z", "closed_at": "2018-12-07T16:07:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Problem Statement**\r\nI'd like to set an extra field before saving the historical record (with the user's IP address and probably the form's URL). I think it's a good time to discuss that now because the signals aren't released yet and it was a not backwards compatible change.\r\n\r\n**Describe the solution you'd like**\r\nChange https://github.com/treyhunner/django-simple-history/blob/master/simple_history/models.py#L345-L364 to\r\n```python\r\n    def create_historical_record(self, instance, history_type):\r\n        manager = getattr(instance, self.manager_name)\r\n        history_instance = manager.model()\r\n        history_instance.history_date = getattr(instance, '_history_date', now())\r\n        history_instance.history_user = self.get_history_user(instance)\r\n        history_instance.history_change_reason = getattr(instance, 'changeReason', None)\r\n\r\n        pre_create_historical_record.send(\r\n            sender=manager.model, instance=instance,\r\n            history_instance=history_instance,  # this is the important difference\r\n            history_date=history_instance.history_date,\r\n            history_user=history_instance.history_user,\r\n            history_change_reason=history_instance.history_change_reason,\r\n        )\r\n\r\n        for field in self.fields_included(instance):\r\n            setattr(history_instance, field.attname, getattr(instance, field.attname))\r\n        history_instance.save()\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n1. Override `create_historical_record`:\r\n\r\n```python\r\n    def create_historical_record(self, instance, history_type):\r\n        history_date = getattr(instance, '_history_date', now())\r\n        history_user = self.get_history_user(instance)\r\n        history_change_reason = getattr(instance, 'changeReason', None)\r\n        ip_address = instance.request.META['REMOTE_ADDR']  # first line added\r\n        manager = getattr(instance, self.manager_name)\r\n\r\n        pre_create_historical_record.send(\r\n            sender=manager.model, instance=instance,\r\n            history_date=history_date, history_user=history_user,\r\n            history_change_reason=history_change_reason,\r\n        )\r\n\r\n        attrs = {}\r\n        for field in self.fields_included(instance):\r\n            attrs[field.attname] = getattr(instance, field.attname)\r\n        history_instance = manager.create(\r\n            ip_address=ip_address,  # second line added\r\n            history_date=history_date, history_type=history_type,\r\n            history_user=history_user,\r\n            history_change_reason=history_change_reason, **attrs\r\n        )\r\n\r\n        post_create_historical_record.send(\r\n            sender=manager.model, instance=instance,\r\n            history_instance=history_instance,\r\n            history_date=history_date, history_user=history_user,\r\n            history_change_reason=history_change_reason,\r\n)\r\n```\r\nAs you can see I had to override the whole method.\r\n\r\n2. Use the `post_create_historical_record` signal which results in an additional db hit.\r\n\r\n**Additional context**\r\nJust if somebody is confused. I have this base model:\r\n\r\n```python\r\nclass IPAddressHistoricalModel(models.Model):\r\n    \"\"\"\r\n    Abstract model for history models tracking the IP address.\r\n    \"\"\"\r\n    ip_address = models.GenericIPAddressField(_('IP address'))\r\n\r\n    class Meta:\r\n        abstract = True\r\n```\r\n\r\nAnd I use it in my models like:\r\n```python\r\n    history = HistoricalRecords(bases=(IPAddressHistoricalModel,))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/436", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/436/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/436/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/436", "id": 362850640, "node_id": "MDU6SXNzdWUzNjI4NTA2NDA=", "number": 436, "title": "HistoricalRecords' iterator fails when used with 'excluded_fields' and 'inherit=True'", "user": {"login": "sunit-poddar", "id": 36638339, "node_id": "MDQ6VXNlcjM2NjM4MzM5", "avatar_url": "https://avatars2.githubusercontent.com/u/36638339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunit-poddar", "html_url": "https://github.com/sunit-poddar", "followers_url": "https://api.github.com/users/sunit-poddar/followers", "following_url": "https://api.github.com/users/sunit-poddar/following{/other_user}", "gists_url": "https://api.github.com/users/sunit-poddar/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunit-poddar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunit-poddar/subscriptions", "organizations_url": "https://api.github.com/users/sunit-poddar/orgs", "repos_url": "https://api.github.com/users/sunit-poddar/repos", "events_url": "https://api.github.com/users/sunit-poddar/events{/privacy}", "received_events_url": "https://api.github.com/users/sunit-poddar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-22T11:42:31Z", "updated_at": "2018-12-07T16:06:52Z", "closed_at": "2018-12-07T16:06:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "While working with `django-simple-history`, I came across few interesting enhancements/features/bugs which i'm listing down below -\r\n- How to exclude fields in `abstract inheritance`?\r\n   ```\r\n   class RowInformation(models.Model):\r\n      is_active = models.BooleanField(default=True)\r\n      created_at = models.DateTimeField(auto_add_now=True)\r\n      ...\r\n\r\n   class Wallet(RowInformation):\r\n      manufacturer = models.ForeignKey(Manufacturer, on_delete=models.PROTECT)\r\n      total_spent = models.FloatField(default=0)\r\n      ...\r\n   ```\r\n- How to exclude fields in `multitable inheritance`?\r\n   ```\r\n   class RowInformation(models.Model):\r\n      is_active = models.BooleanField(default=True)\r\n      created_at = models.DateTimeField(auto_add_now=True)\r\n      ...\r\n\r\n   class Transactions(models.Model):\r\n      amount = models.FloatField()\r\n      mode = models.ChatField(max_length=3, choices=VALID_MODES)\r\n      ...       \r\n      history = HistoricalRecords(inherit=True, excluded_fields=['is_active'])\r\n\r\n   class Sales(Transactions, RowInformation):\r\n      vehicle = models.ForeignKey(VehicleInformation, on_delete=models.PROTECT)\r\n      timestamp = models.DateTimeField()\r\n      ...\r\n   ```\r\n- When I'm adding fields to `excluded_fields` to any models for example `Transactions`, it still gets tracked into `TransactionsHistoricalRecords` models. Checked the database for same and database doesn't have those fields but while performing `histories = Sales.objects.first().history.all()`, it fetches excluded fields in `histories` as well.\r\n\r\n- Now coming to the real issue from which all these things came up -\r\n  I've a model structure as follows \r\n  ```\r\n   class RowInformation(models.Model):\r\n      is_active = models.BooleanField(default=True)\r\n      created_at = models.DateTimeField(auto_add_now=True)\r\n      ...\r\n\r\n   class Wallet(RowInformation):\r\n      manufacturer = models.ForeignKey(Manufacturer, on_delete=models.PROTECT)\r\n      total_spent = models.FloatField(default=0)\r\n      ...\r\n\r\n   class Transactions(RowInformation):\r\n      wallet = models.ForeignKey(Wallet, on_delete=models.PROTECT)\r\n      amount = models.FloatField()\r\n      mode = models.ChatField(max_length=3, choices=VALID_MODES)\r\n      ...       \r\n      history = HistoricalRecords(inherit=True, excluded_fields=['is_active'])\r\n\r\n   class Sales(Transactions, RowInformation):\r\n      vehicle = models.ForeignKey(VehicleInformation, on_delete=models.PROTECT)\r\n      timestamp = models.DateTimeField()\r\n      ...\r\n  ```\r\n  When I execute  `histories = Sales.objects.first().history.all()`, throws an error saying `Wallet matching query does not exist` or `invalid literal for int() with base 10: '<text in field>'`.\r\nChecked the above for values in queryset where I noticed -\r\n    - `histories.first().__dict__` has all the values as expected but when i use `self.__dict__` in model's `def __str__(self)`, the values have interchanged.\r\n\r\nPlease refer to the repo for detailed insight on models and database.\r\n\r\n**Public repo to play around with**\r\nForked a existing public repo - https://github.com/codingforentrepreneurs/Try-Django\r\n- https://github.com/sunit-poddar/sample-django-project\r\n\r\n**Project structure**\r\nI've added a EER diagram for whole project. Although please notice the structure of following mentioned models - \r\n- RowInformation\r\n- Person\r\n- Wallet\r\n- Transactions\r\n- Sales\r\n- Expenditures\r\n- Manufacturer\r\n- VehicleInformation\r\n\r\nEER link - https://raw.githubusercontent.com/sunit-poddar/sample-django-project/master/src/try-django-eer-001.png\r\n\r\n**To Reproduce in the repo**\r\n1. Clone the repo - https://github.com/sunit-poddar/Try-Django.git\r\n    - Database is already present for your ease of use.\r\n2. Install requirements\r\n2. Run `python manage.py shell`\r\n3. Import models and run -\r\n    - `sales = Sales.obects.first()`\r\n    - `sales.history.all()`\r\n4. See error\r\n\r\n**Environment:**\r\n - OS: Ubuntu 18.04\r\n - Django Simple History Version: 2.3.0\r\n - Django Version: 2.1\r\n - Python version: 3.5.4\r\n - Database Version: SQLite\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/433", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/433/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/433/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/433/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/433", "id": 362192816, "node_id": "MDU6SXNzdWUzNjIxOTI4MTY=", "number": 433, "title": "Model field values change after putting `excluded_fields` in HistoricalRecords", "user": {"login": "sunit-poddar", "id": 36638339, "node_id": "MDQ6VXNlcjM2NjM4MzM5", "avatar_url": "https://avatars2.githubusercontent.com/u/36638339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunit-poddar", "html_url": "https://github.com/sunit-poddar", "followers_url": "https://api.github.com/users/sunit-poddar/followers", "following_url": "https://api.github.com/users/sunit-poddar/following{/other_user}", "gists_url": "https://api.github.com/users/sunit-poddar/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunit-poddar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunit-poddar/subscriptions", "organizations_url": "https://api.github.com/users/sunit-poddar/orgs", "repos_url": "https://api.github.com/users/sunit-poddar/repos", "events_url": "https://api.github.com/users/sunit-poddar/events{/privacy}", "received_events_url": "https://api.github.com/users/sunit-poddar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-09-20T13:40:01Z", "updated_at": "2018-09-22T07:17:46Z", "closed_at": "2018-09-22T07:17:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using `HistoricalRecords` with my models and adding fields to `excluded_fields`. It saves the data as expected in database but while retrieving in model instances, it jumbles up the data i.e. values gets interchanged.\r\n\r\nExample models --\r\n```\r\nclass RowInformation(models.Model):\r\n    is_active = models.BooleanField()\r\n    created_at = models.DateTimeField(auto_add_now=True)\r\n    modified_at = models.DateTimeField(auto_now=True)\r\n\r\nclass ParentModel(RowInformation):\r\n    name = models.CharField(max_length=50, null=False, blank=False)\r\n    age = models.PositiveIntegerField()\r\n    address = models.TextField()\r\n    contact = models.IntegerField()\r\n\r\n    history = HistoricalRecords()\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n\r\nclass ChildModel(RowInformation):\r\n    parent = models.ForeignKey(ParentModel, on_delete=models.PROTECT)\r\n    name = models.CharField(max_length=50, null=False, blank=False)\r\n    age = models.PositiveIntegerField()\r\n\r\n    history = HistoricalRecords()\r\n\r\n    def __str__(self):\r\n        return self.name\r\n```\r\nNow while saving, it saves the data right excluding the mentioned fields (checked the database for respective values) but while performing `ChildModel.history.all()`, it messes up the order of values and because of that field with foreign key is holding value for other field's values depending on how many fields i have in `excluded_fields` which leads to exception -\r\n - `invalid literal for int() with base 10: '<text in field>' if a text field is replacing values\r\n -  'ParentModel matching query does not exist' if an integer field is replacing values and not in range of existing values in `ParentModel`\r\n\r\nSame is the case with `ParentModel.objects.all()` and other field values as well for example `field1`'s value gets changed to some other field's value\r\n\r\nI'm guessing this is because `Django Simple History` picks the value from database and puts it in model fields in the same order. (Didn't check the source code hence I could be wrong in this)\r\n\r\n**Context**\r\nWith the above models when i do `ChildModel.objects.first()` it returns me following data in queryset\r\n```\r\n{'_state': <django.db.models.base.ModelState at 0x7f50fe7ca898>,\r\n 'age': 13,\r\n 'created_at': datetime.datetime(2018, 9, 21, 6, 6, 57, 528544, tzinfo=<UTC>),\r\n 'id': 1,\r\n 'is_active': True,\r\n 'modified_at': datetime.datetime(2018, 9, 21, 6, 6, 57, 528568, tzinfo=<UTC>),\r\n 'name': 'Jimmie Doe',\r\n 'parent_id': 1}\r\n```\r\nand with `ChildModel.history.last()`\r\n```\r\n{'_state': <django.db.models.base.ModelState at 0x7f50fe764f60>,\r\n 'age': 13,\r\n 'created_at': datetime.datetime(2018, 9, 21, 6, 6, 57, 528544, tzinfo=<UTC>),\r\n 'id': 1,\r\n 'is_active': True,\r\n 'modified_at': datetime.datetime(2018, 9, 21, 6, 6, 57, 528568, tzinfo=<UTC>),\r\n 'name': 'Jimmie Doe',\r\n 'parent_id': 1}\r\n```\r\nwhich is exactly what is expected out of it.\r\nBut when i add `excluded_fields` in `HistoricalRecords` i.e. `history = HistoricalRecords(excluded_fields=['modified_at', 'is_active'])` and run the Child model for history -`ChildModel.history.last()`, this is what is get in queryset\r\n```\r\n{'_state': <django.db.models.base.ModelState at 0x7fb7b6f7b2b0>,\r\n 'age': None,\r\n 'created_at': datetime.datetime(2018, 9, 21, 6, 6, 57, 528544, tzinfo=<UTC>),\r\n 'id': 1,\r\n 'is_active': 'Jimmie Doe',\r\n 'modified_at': 1,\r\n 'name': '',\r\n 'parent_id': 13}\r\n```\r\n\r\nPlease notice how the values of fields have changed for `parent_id` which is my foreign key in this scenario. Also the values of all other fields except for `id` and `created_at`.\r\nNow when I continue to run the above, i get `ParentModel matching query does not exist.` as there's no ParentModel entry with id 13.\r\n\r\n\r\n**Environment:**\r\n - OS: Ubuntu 18.04\r\n - Django Simple History Version: 2.3.0\r\n - Django Version: 2.1\r\n - Python version: 3.5.4\r\n - Database Version: PostgreSQL 9.6.10\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/431", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/431/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/431/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/431/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/431", "id": 356617753, "node_id": "MDU6SXNzdWUzNTY2MTc3NTM=", "number": 431, "title": "django-simple-history does not respect 'deconstruct' kwargs for custom foreignkey fields", "user": {"login": "pchokron", "id": 42222295, "node_id": "MDQ6VXNlcjQyMjIyMjk1", "avatar_url": "https://avatars1.githubusercontent.com/u/42222295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pchokron", "html_url": "https://github.com/pchokron", "followers_url": "https://api.github.com/users/pchokron/followers", "following_url": "https://api.github.com/users/pchokron/following{/other_user}", "gists_url": "https://api.github.com/users/pchokron/gists{/gist_id}", "starred_url": "https://api.github.com/users/pchokron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pchokron/subscriptions", "organizations_url": "https://api.github.com/users/pchokron/orgs", "repos_url": "https://api.github.com/users/pchokron/repos", "events_url": "https://api.github.com/users/pchokron/events{/privacy}", "received_events_url": "https://api.github.com/users/pchokron/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 950789305, "node_id": "MDU6TGFiZWw5NTA3ODkzMDU=", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/accepted", "name": "accepted", "color": "68d153", "default": false, "description": "Issue accepted for completion"}, {"id": 36700564, "node_id": "MDU6TGFiZWwzNjcwMDU2NA==", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-04T00:26:58Z", "updated_at": "2018-11-08T20:10:13Z", "closed_at": "2018-11-08T20:10:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nAfter subclassing ForeignKey to override get_attname, and defining a deconstruct method to carry the additional parameter, makemigrations creates the correct migrations but django-simple-history ignores the extra parameters.  The resulting models are unusable.  A custom migration fixes the issue but will be replaced on the next makemigrations operation. \r\n\r\nThe custom foreign key field is motivated and inspired by:\r\nhttps://stackoverflow.com/questions/21524830/modifying-djangos-default-id-suffix-for-related-objects/24427909#24427909\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nDeconstruct, as defined in Django docs [here](https://docs.djangoproject.com/en/2.1/howto/custom-model-fields/#field-deconstruction), is used to carry the attr_name argument into the migrations.  Here is the class: \r\n```\r\nclass CustomAttrNameForeignKey(models.ForeignKey):\r\n    def __init__(self, *args, **kwargs):\r\n        self.attr_name = kwargs.pop('attr_name', None)\r\n        super().__init__(*args, **kwargs)\r\n\r\n    def get_attname(self):\r\n        return self.attr_name or super().get_attname()\r\n\r\n    def deconstruct(self):\r\n        name, path, args, kwargs = super().deconstruct()\r\n        if self.attr_name:\r\n            kwargs['attr_name'] = self.attr_name\r\n        return name, path, args, kwargs\r\n```\r\n\r\n**Expected behavior**\r\nWhen running make migration, Django creates 2 migrations as expected.  One for the model and one for the historical model.  However, the migration associated with the historical model does not have the needed 'attr_name' argument.  This makes all operations (save, get_or_create, etc.) on model instances fail.\r\n\r\nHere is an example of the generated migration code:\r\n```\r\n        migrations.AlterField(\r\n            model_name='mymodel',\r\n            name='status_fk', \r\n            field=CustomAttrNameForeignKey(attr_name='status', db_column='status', to='MyStatusModel'),\r\n        ),\r\n        migrations.AlterField(\r\n            model_name='historicalmymodel',\r\n            name='status_fk',\r\n            field=CustomAttrNameForeignKey(blank=True, db_column='status', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='MyStatusModel'),\r\n        ),\r\n```\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Ubuntu 16.04\r\n - Django Simple History Version: 2.1.1\r\n - Django Version: 1.11.6\r\n - Database Version: PostgreSQL 9.6.6\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/429", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/429/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/429/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/429", "id": 356216506, "node_id": "MDU6SXNzdWUzNTYyMTY1MDY=", "number": 429, "title": "Override history field", "user": {"login": "ngjonnathan", "id": 10481561, "node_id": "MDQ6VXNlcjEwNDgxNTYx", "avatar_url": "https://avatars1.githubusercontent.com/u/10481561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngjonnathan", "html_url": "https://github.com/ngjonnathan", "followers_url": "https://api.github.com/users/ngjonnathan/followers", "following_url": "https://api.github.com/users/ngjonnathan/following{/other_user}", "gists_url": "https://api.github.com/users/ngjonnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngjonnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngjonnathan/subscriptions", "organizations_url": "https://api.github.com/users/ngjonnathan/orgs", "repos_url": "https://api.github.com/users/ngjonnathan/repos", "events_url": "https://api.github.com/users/ngjonnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/ngjonnathan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-01T16:45:19Z", "updated_at": "2020-01-30T02:31:16Z", "closed_at": "2018-12-14T17:44:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description**\r\nI have a history field in a Base class that every model in my project inherit from.\r\n\r\nThere are some models that I want to exclude specific fields from history. Overriding history to exclude some fields in Child model it's not working properly.\r\n\r\n**Example**\r\n```python\r\nfrom django.db import models\r\nfrom simple_history.models import HistoricalRecords\r\n\r\nclass Base(models.Model):\r\n    # Base field 1\r\n    # Base field 2\r\n    # ....\r\n    history = HistoricalRecords(inherit=True)\r\n    \r\nclass Child(Base):\r\n    history = HistoricalRecords(exclude_fields=['field1','field2'])\r\n    field1 = models.CharField(max_length=2)\r\n    field2 = models.BooleanField()\r\n\r\n```\r\n**Expected behavior**\r\nHistoryChild field1 and field2 should be excluded from migration files.\r\n\r\n**Environment**\r\n - Ubuntu 16.04\r\n - Django Simple History Version: 2.3.0\r\n - Django Version: 1.11\r\n - Database Version:  PostgreSQL 9.6\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/427", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/427/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/427/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/427/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/427", "id": 354666293, "node_id": "MDU6SXNzdWUzNTQ2NjYyOTM=", "number": 427, "title": "In  the admin, in the history the history_change_reason is not displayed", "user": {"login": "eliUni", "id": 39832255, "node_id": "MDQ6VXNlcjM5ODMyMjU1", "avatar_url": "https://avatars3.githubusercontent.com/u/39832255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eliUni", "html_url": "https://github.com/eliUni", "followers_url": "https://api.github.com/users/eliUni/followers", "following_url": "https://api.github.com/users/eliUni/following{/other_user}", "gists_url": "https://api.github.com/users/eliUni/gists{/gist_id}", "starred_url": "https://api.github.com/users/eliUni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eliUni/subscriptions", "organizations_url": "https://api.github.com/users/eliUni/orgs", "repos_url": "https://api.github.com/users/eliUni/repos", "events_url": "https://api.github.com/users/eliUni/events{/privacy}", "received_events_url": "https://api.github.com/users/eliUni/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 950789305, "node_id": "MDU6TGFiZWw5NTA3ODkzMDU=", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/accepted", "name": "accepted", "color": "68d153", "default": false, "description": "Issue accepted for completion"}, {"id": 878336793, "node_id": "MDU6TGFiZWw4NzgzMzY3OTM=", "url": "https://api.github.com/repos/jazzband/django-simple-history/labels/good-first-issue", "name": "good-first-issue", "color": "6181e2", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "rossmechanic", "id": 6855461, "node_id": "MDQ6VXNlcjY4NTU0NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6855461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossmechanic", "html_url": "https://github.com/rossmechanic", "followers_url": "https://api.github.com/users/rossmechanic/followers", "following_url": "https://api.github.com/users/rossmechanic/following{/other_user}", "gists_url": "https://api.github.com/users/rossmechanic/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossmechanic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossmechanic/subscriptions", "organizations_url": "https://api.github.com/users/rossmechanic/orgs", "repos_url": "https://api.github.com/users/rossmechanic/repos", "events_url": "https://api.github.com/users/rossmechanic/events{/privacy}", "received_events_url": "https://api.github.com/users/rossmechanic/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rossmechanic", "id": 6855461, "node_id": "MDQ6VXNlcjY4NTU0NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6855461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossmechanic", "html_url": "https://github.com/rossmechanic", "followers_url": "https://api.github.com/users/rossmechanic/followers", "following_url": "https://api.github.com/users/rossmechanic/following{/other_user}", "gists_url": "https://api.github.com/users/rossmechanic/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossmechanic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossmechanic/subscriptions", "organizations_url": "https://api.github.com/users/rossmechanic/orgs", "repos_url": "https://api.github.com/users/rossmechanic/repos", "events_url": "https://api.github.com/users/rossmechanic/events{/privacy}", "received_events_url": "https://api.github.com/users/rossmechanic/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-08-28T10:23:56Z", "updated_at": "2018-10-19T14:53:52Z", "closed_at": "2018-10-19T14:53:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the admin view, I want to use the historical_change_reason but it's always displayed change\r\n\r\n\r\n**Expected behavior**\r\nThe historical_change_reason field mentionned in the database and not only change\r\n\r\n**Screenshots**\r\n![image](https://user-images.githubusercontent.com/39832255/44717355-0e48e800-aabd-11e8-91a2-cad971cec9a4.png)\r\n\r\nand in the database\r\n![image](https://user-images.githubusercontent.com/39832255/44717383-23be1200-aabd-11e8-977a-2302355f4392.png)\r\n\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Windows\r\n - Browser:  Chrome\r\n - Django Simple History Version: django-simple-history==2.1.1\r\n - Django Version: Django==1.11.10\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/425", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/425/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/425/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/425/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/425", "id": 353728999, "node_id": "MDU6SXNzdWUzNTM3Mjg5OTk=", "number": 425, "title": "Warn when using HistoricalRecords on a class by inherit=True and a class inherited by proxy=True", "user": {"login": "a-roomana", "id": 13819361, "node_id": "MDQ6VXNlcjEzODE5MzYx", "avatar_url": "https://avatars2.githubusercontent.com/u/13819361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a-roomana", "html_url": "https://github.com/a-roomana", "followers_url": "https://api.github.com/users/a-roomana/followers", "following_url": "https://api.github.com/users/a-roomana/following{/other_user}", "gists_url": "https://api.github.com/users/a-roomana/gists{/gist_id}", "starred_url": "https://api.github.com/users/a-roomana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a-roomana/subscriptions", "organizations_url": "https://api.github.com/users/a-roomana/orgs", "repos_url": "https://api.github.com/users/a-roomana/repos", "events_url": "https://api.github.com/users/a-roomana/events{/privacy}", "received_events_url": "https://api.github.com/users/a-roomana/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-24T10:26:01Z", "updated_at": "2019-06-20T14:33:02Z", "closed_at": "2018-08-27T15:58:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Adding a `HistoricalRecords` to a model by `inherit=True` and a model by `proxy=True` inherited it, create table on database for it!\r\n\r\nfor example: \r\n\r\n```python\r\nclass MyModel(models.Model):\r\n    history = HistoricalRecords(inherit=True)\r\n\r\n\r\nclass ProxyModel(MyModel):\r\n    class Meta:\r\n        proxy = True\r\n```\r\n\r\ncreate table `<app_name>_historicalproxymodel` on database!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/424", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/424/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/424/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/424/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/424", "id": 353465939, "node_id": "MDU6SXNzdWUzNTM0NjU5Mzk=", "number": 424, "title": "Migration crash on alter to unique", "user": {"login": "jmiguelherazo", "id": 19996930, "node_id": "MDQ6VXNlcjE5OTk2OTMw", "avatar_url": "https://avatars1.githubusercontent.com/u/19996930?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmiguelherazo", "html_url": "https://github.com/jmiguelherazo", "followers_url": "https://api.github.com/users/jmiguelherazo/followers", "following_url": "https://api.github.com/users/jmiguelherazo/following{/other_user}", "gists_url": "https://api.github.com/users/jmiguelherazo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmiguelherazo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmiguelherazo/subscriptions", "organizations_url": "https://api.github.com/users/jmiguelherazo/orgs", "repos_url": "https://api.github.com/users/jmiguelherazo/repos", "events_url": "https://api.github.com/users/jmiguelherazo/events{/privacy}", "received_events_url": "https://api.github.com/users/jmiguelherazo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-08-23T16:48:04Z", "updated_at": "2018-08-28T16:40:35Z", "closed_at": "2018-08-28T16:40:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nWhen you update a model to alter a field to unique=True, makemigration try to alter the same field in the historical model, and crash because it's not unique.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create a model and Adding HistoricalRecords\r\n2. Make multiple update (generate history)\r\n3. Change a model field to be unique\r\n4. Make migrations\r\n5. Migrate\r\n\r\n**Expected behavior**\r\nThe migration generated must ignore the unique=true in the Historical Model\r\n\r\n**Environment (please complete the following information):**\r\n - Django Simple History Version: 2.3.0\r\n - Django Version: 2.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/423", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/423/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/423/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/423", "id": 353306561, "node_id": "MDU6SXNzdWUzNTMzMDY1NjE=", "number": 423, "title": "Performance optimization for populate_history", "user": {"login": "vdboor", "id": 200303, "node_id": "MDQ6VXNlcjIwMDMwMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/200303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vdboor", "html_url": "https://github.com/vdboor", "followers_url": "https://api.github.com/users/vdboor/followers", "following_url": "https://api.github.com/users/vdboor/following{/other_user}", "gists_url": "https://api.github.com/users/vdboor/gists{/gist_id}", "starred_url": "https://api.github.com/users/vdboor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vdboor/subscriptions", "organizations_url": "https://api.github.com/users/vdboor/orgs", "repos_url": "https://api.github.com/users/vdboor/repos", "events_url": "https://api.github.com/users/vdboor/events{/privacy}", "received_events_url": "https://api.github.com/users/vdboor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-23T09:49:04Z", "updated_at": "2018-08-29T15:12:16Z", "closed_at": "2018-08-29T15:12:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nOur database had more then 500K of product rows, and more then 1M orders.\r\nRunning `manage.py populate_history` had such performance impact that we had to abort this. It took quite some time getting the history tables filled with an initial version.\r\n\r\n**Describe the solution you'd like**\r\nIn the end, we've monkey-patched the `bulk_history_create()` function to perform a raw SQL `INSERT INTO .. SELECT FROM` query. This gives a tremendous speedup:\r\n\r\n```\r\ndef bulk_history_create(model, history_model, batch_size):\r\n    history_fields = sorted(get_model_columns(model) & get_model_columns(history_model))\r\n    sql_fields = '\"{0}\"'.format('\", \"'.join(history_fields))\r\n\r\n    with connection.cursor() as cursor:\r\n        query = \"\"\"\r\n            INSERT INTO \"{history_table}\" (\r\n                {sql_fields}, \"history_date\", \"history_type\"\r\n            )\r\n            SELECT {sql_fields}, %s, %s FROM \"{model_table}\"\r\n        \"\"\".format(\r\n            history_table=history_model._meta.db_table,\r\n            model_table=model._meta.db_table,\r\n            sql_fields=sql_fields\r\n        )\r\n        cursor.execute(query, params=[now(), TYPE_ADD])\r\n```\r\n\r\nI'm not sure this SQL statement works across all possible engines, or that it could only be used in case of PostgreSQL for example. I do hope this code helps to add this performance improvement for the databases that support this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/421", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/421/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/421/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/421/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/421", "id": 350960710, "node_id": "MDU6SXNzdWUzNTA5NjA3MTA=", "number": 421, "title": "Record the IP Address that made a change", "user": {"login": "mscansian", "id": 6120009, "node_id": "MDQ6VXNlcjYxMjAwMDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6120009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mscansian", "html_url": "https://github.com/mscansian", "followers_url": "https://api.github.com/users/mscansian/followers", "following_url": "https://api.github.com/users/mscansian/following{/other_user}", "gists_url": "https://api.github.com/users/mscansian/gists{/gist_id}", "starred_url": "https://api.github.com/users/mscansian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mscansian/subscriptions", "organizations_url": "https://api.github.com/users/mscansian/orgs", "repos_url": "https://api.github.com/users/mscansian/repos", "events_url": "https://api.github.com/users/mscansian/events{/privacy}", "received_events_url": "https://api.github.com/users/mscansian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-15T20:45:55Z", "updated_at": "2018-10-31T20:45:38Z", "closed_at": "2018-10-31T20:45:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Problem Statement**\r\nAs described in https://github.com/treyhunner/django-simple-history/issues/420 we use this project for audit. One of the requirements is to record the IP Address that made a change in the system.\r\n\r\n**Describe the solution you'd like**\r\nSimple solution: Add IP Address to the history model, update `create_historical_record` to save the REMOTE_ADDR and display it in the admin panel.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/420", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/420/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/420/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/420/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/420", "id": 350948052, "node_id": "MDU6SXNzdWUzNTA5NDgwNTI=", "number": 420, "title": "Ensure history integrity for audit use case", "user": {"login": "mscansian", "id": 6120009, "node_id": "MDQ6VXNlcjYxMjAwMDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6120009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mscansian", "html_url": "https://github.com/mscansian", "followers_url": "https://api.github.com/users/mscansian/followers", "following_url": "https://api.github.com/users/mscansian/following{/other_user}", "gists_url": "https://api.github.com/users/mscansian/gists{/gist_id}", "starred_url": "https://api.github.com/users/mscansian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mscansian/subscriptions", "organizations_url": "https://api.github.com/users/mscansian/orgs", "repos_url": "https://api.github.com/users/mscansian/repos", "events_url": "https://api.github.com/users/mscansian/events{/privacy}", "received_events_url": "https://api.github.com/users/mscansian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-15T20:07:47Z", "updated_at": "2018-08-30T17:13:10Z", "closed_at": "2018-08-30T17:13:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Use case\r\nWe are a small company that develops a web app for the financial market. We have several Django models that we need to track the changes for audit purposes. We are required by law to do that and sometimes a customer needs to know who/when/how changed the parameters of a specific contract, setting, etc. Currently *django-simple-history* is fulfilling our needs. It keeps a version of all changes on the selected models in the database and we can check at any point in time.\r\n\r\n### Problem\r\nIn order to have a true audit system we need to ensure that the model history cannot be changed or deleted. Since *django-simple-history* uses the application database as storage, it's quite easy to update or delete a record. We need something that restrict this kind of action to a tiny subset of people. Also, since these logs are part of our DR plan, we need to have an immutable off-site backup.\r\n\r\n### What I have considered\r\nOverriding `create_historical_record` to send the information to a third-party service (such as DynamoDB, CloudWatchLogs or Kinesis). This means that we can have the best of both worlds: The nice history view that *django-simple-history* provides and also a secure and immutable backup for audit and DR.\r\n\r\nAt first we though about forking the project and implementing this for internal use. I'm not sure, but I think this kind of functionality is overextending the scope of the project, right? I don't wanna do that. Forking means duplicating the effort to maintain a codebase and provides no benefit to the upstream project.\r\n\r\n### What I need\r\nI need to understand if there's a way to implement this that we can merge in the main project. I'm not sure what are the boundaries of the project's scope. If you guys think that this feature is a nice addition, I will gladly send a PR :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/419", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/419/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/419/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/419", "id": 348458587, "node_id": "MDU6SXNzdWUzNDg0NTg1ODc=", "number": 419, "title": "Relate generated Historical_x model to their base model", "user": {"login": "rorosentrater", "id": 31737849, "node_id": "MDQ6VXNlcjMxNzM3ODQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/31737849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorosentrater", "html_url": "https://github.com/rorosentrater", "followers_url": "https://api.github.com/users/rorosentrater/followers", "following_url": "https://api.github.com/users/rorosentrater/following{/other_user}", "gists_url": "https://api.github.com/users/rorosentrater/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorosentrater/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorosentrater/subscriptions", "organizations_url": "https://api.github.com/users/rorosentrater/orgs", "repos_url": "https://api.github.com/users/rorosentrater/repos", "events_url": "https://api.github.com/users/rorosentrater/events{/privacy}", "received_events_url": "https://api.github.com/users/rorosentrater/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-07T19:36:24Z", "updated_at": "2018-08-13T17:45:19Z", "closed_at": "2018-08-13T17:45:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nForgive me in advance if this is a dumb request/not what simple-history is meant for but,\r\nI have been having a hard time using the generated historical model to filter base model objects. \r\n\r\nI find I have issues when I want to display many base objects based on an aggregation of each base object's history.\r\nExample:\r\n\r\n```python\r\nclass MyModel(models.Model):\r\n    favorite_letter= models.CharField(max_length=1)\r\n    ...\r\n    history = HistoricalRecords()  # Simple-history\r\n```\r\nSample data:\r\n**Base model (MyModel)**\r\n\r\nid | favorite_letter\r\n------------ | -------------\r\n1 | G\r\n2 | K\r\n3 | W\r\n\r\n**Historical model (HistoricalMyModel)**\r\n\r\nid | favorite_letter| history_id\r\n------------ | ------------- | -------------\r\n1 | L | 1\r\n1 | G | 3\r\n... | ... | ...\r\n2 | Q | 10\r\n2 | N | 11\r\n2 | W | 12\r\n... | ... | ...\r\n3 | N | 100\r\n3 | W | 101\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n**Scenario:**\r\nI want to return every MyModel object (base model objects, NOT historical records) that has ever set \"N\" as their favorite letter (I know the current state of the MyModel object may no longer have this as their CURRENT favorite letter). \r\n\r\n**Problem:**\r\nCurrently, I know no way of easily querying a base model's history and returning base model objects with a satisfactory history.\r\n\r\n**Desired change:**\r\nI think we should make the generated historical model related to the base model it was created from so you can easily query base model objects by their history. \r\n\r\n**Suggestions?**\r\nIf the HistoricalMyModel model had a sort of foreign key relating back to the record it was associated to (1:m) Then we could use the django ORM filter syntax to query this. Something like:\r\n```python\r\nMyModel.objects.all().filter(history__favorite_letter='N')\r\n```\r\nid | favorite_letter\r\n------------ | -------------\r\n2 | K\r\n3 | W", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jazzband/django-simple-history/issues/409", "repository_url": "https://api.github.com/repos/jazzband/django-simple-history", "labels_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/409/labels{/name}", "comments_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/409/comments", "events_url": "https://api.github.com/repos/jazzband/django-simple-history/issues/409/events", "html_url": "https://github.com/jazzband/django-simple-history/issues/409", "id": 332655313, "node_id": "MDU6SXNzdWUzMzI2NTUzMTM=", "number": 409, "title": "Feature to track changes only and not the creation part.", "user": {"login": "tom-riddle", "id": 11945658, "node_id": "MDQ6VXNlcjExOTQ1NjU4", "avatar_url": "https://avatars1.githubusercontent.com/u/11945658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tom-riddle", "html_url": "https://github.com/tom-riddle", "followers_url": "https://api.github.com/users/tom-riddle/followers", "following_url": "https://api.github.com/users/tom-riddle/following{/other_user}", "gists_url": "https://api.github.com/users/tom-riddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/tom-riddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tom-riddle/subscriptions", "organizations_url": "https://api.github.com/users/tom-riddle/orgs", "repos_url": "https://api.github.com/users/tom-riddle/repos", "events_url": "https://api.github.com/users/tom-riddle/events{/privacy}", "received_events_url": "https://api.github.com/users/tom-riddle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-15T06:01:22Z", "updated_at": "2018-06-15T13:56:51Z", "closed_at": "2018-06-15T13:56:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem Statement**\r\nI dont want to track the creation records of the model instance.\r\n\r\n**Describe the solution you'd like**\r\nI would to track only the update and delete part of the model\r\n\r\n\r\n**Additional context**\r\nDue to large number of records, I dont want to track the created instance in the history. I already have a created_on date. I believe the changes are getting saved on pre_save signal, so the first instance will be available in the first history record.\r\n", "performed_via_github_app": null, "score": 1.0}]}