{"total_count": 6, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/40", "repository_url": "https://api.github.com/repos/shibukawa/imagesize_py", "labels_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/40/comments", "events_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/40/events", "html_url": "https://github.com/shibukawa/imagesize_py/issues/40", "id": 577270433, "node_id": "MDU6SXNzdWU1NzcyNzA0MzM=", "number": 40, "title": "Extended function to support Buffer and io.BufferedReader.", "user": {"login": "TinDang97", "id": 38763342, "node_id": "MDQ6VXNlcjM4NzYzMzQy", "avatar_url": "https://avatars2.githubusercontent.com/u/38763342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TinDang97", "html_url": "https://github.com/TinDang97", "followers_url": "https://api.github.com/users/TinDang97/followers", "following_url": "https://api.github.com/users/TinDang97/following{/other_user}", "gists_url": "https://api.github.com/users/TinDang97/gists{/gist_id}", "starred_url": "https://api.github.com/users/TinDang97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TinDang97/subscriptions", "organizations_url": "https://api.github.com/users/TinDang97/orgs", "repos_url": "https://api.github.com/users/TinDang97/repos", "events_url": "https://api.github.com/users/TinDang97/events{/privacy}", "received_events_url": "https://api.github.com/users/TinDang97/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-07T03:32:54Z", "updated_at": "2020-06-18T08:03:55Z", "closed_at": "2020-06-18T08:03:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I maintained your function to process with Bytes and io.BufferedReader. If you want, you can get it.\r\nCause it helpful when you work with buffer.\r\n\r\n**Note:\r\nBut this way, it doesn't support XML cause ElementTree works with file.\r\n\r\nThanks for your repo.\r\n\r\n```\r\ndef image_size(src):\r\n    \"\"\"\r\n    Implement: https://github.com/shibukawa/imagesize_py\r\n    Return (width, height) for a given img file content\r\n    no requirements\r\n    :rtype Tuple[int, int]\r\n    \"\"\"\r\n    assert isinstance(src, (bytes, io.BufferedReader, str))\r\n    height = -1\r\n    width = -1\r\n    cursor = 0\r\n\r\n    if type(src) is str:\r\n        src = open(src, 'rb')\r\n\r\n    if type(src) is io.BufferedReader:\r\n        buffer = src.read()\r\n        src.close()\r\n    else:\r\n        buffer = src\r\n\r\n    head = buffer[:24]\r\n    size = len(head)\r\n    # handle GIFs\r\n    if size >= 10 and head[:6] in (b'GIF87a', b'GIF89a'):\r\n        # Check to see if content_type is correct\r\n        try:\r\n            width, height = struct.unpack(\"<hh\", head[6:10])\r\n        except struct.error:\r\n            raise ValueError(\"Invalid GIF file\")\r\n    # see png edition spec bytes are below chunk length then and finally the\r\n    elif size >= 24 and head.startswith(b'\\211PNG\\r\\n\\032\\n') and head[12:16] == b'IHDR':\r\n        try:\r\n            width, height = struct.unpack(\">LL\", head[16:24])\r\n        except struct.error:\r\n            raise ValueError(\"Invalid PNG file\")\r\n    # Maybe this is for an older PNG version.\r\n    elif size >= 16 and head.startswith(b'\\211PNG\\r\\n\\032\\n'):\r\n        # Check to see if we have the right content type\r\n        try:\r\n            width, height = struct.unpack(\">LL\", head[8:16])\r\n        except struct.error:\r\n            raise ValueError(\"Invalid PNG file\")\r\n    # handle JPEGs\r\n    elif size >= 2 and head.startswith(b'\\377\\330'):\r\n        try:\r\n            size = 2\r\n            ftype = 0\r\n            while not 0xc0 <= ftype <= 0xcf or ftype in [0xc4, 0xc8, 0xcc]:\r\n                cursor += size\r\n                byte = buffer[cursor:cursor+1]\r\n                cursor += 1\r\n                while ord(byte) == 0xff:\r\n                    byte = buffer[cursor:cursor+1]\r\n                    cursor += 1\r\n                ftype = ord(byte)\r\n                size = struct.unpack('>H', buffer[cursor:cursor+2])[0] - 2\r\n                cursor += 2\r\n            # We are at a SOFn block\r\n            cursor += 1  # Skip `precision' byte.\r\n            height, width = struct.unpack('>HH', buffer[cursor:cursor+4])\r\n            cursor += 4\r\n        except struct.error:\r\n            raise ValueError(\"Invalid JPEG file\")\r\n    # handle JPEG2000s\r\n    elif size >= 12 and head.startswith(b'\\x00\\x00\\x00\\x0cjP  \\r\\n\\x87\\n'):\r\n        cursor = 48\r\n        try:\r\n            height, width = struct.unpack('>LL', buffer[cursor:cursor+8])\r\n        except struct.error:\r\n            raise ValueError(\"Invalid JPEG2000 file\")\r\n    # handle big endian TIFF\r\n    elif size >= 8 and head.startswith(b\"\\x4d\\x4d\\x00\\x2a\"):\r\n        offset = struct.unpack('>L', head[4:8])[0]\r\n        cursor = offset\r\n        ifdsize = struct.unpack(\">H\", buffer[cursor:cursor+2])[0]\r\n        cursor += 2\r\n        for i in range(ifdsize):\r\n            tag, datatype, count, data = struct.unpack(\">HHLL\", buffer[cursor:cursor+12])\r\n            if tag == 256:\r\n                if datatype == 3:\r\n                    width = int(data / 65536)\r\n                elif datatype == 4:\r\n                    width = data\r\n                else:\r\n                    raise ValueError(\"Invalid TIFF file: width column data type should be SHORT/LONG.\")\r\n            elif tag == 257:\r\n                if datatype == 3:\r\n                    height = int(data / 65536)\r\n                elif datatype == 4:\r\n                    height = data\r\n                else:\r\n                    raise ValueError(\"Invalid TIFF file: height column data type should be SHORT/LONG.\")\r\n            if width != -1 and height != -1:\r\n                break\r\n        if width == -1 or height == -1:\r\n            raise ValueError(\"Invalid TIFF file: width and/or height IDS entries are missing.\")\r\n    elif size >= 8 and head.startswith(b\"\\x49\\x49\\x2a\\x00\"):\r\n        offset = struct.unpack('<L', head[4:8])[0]\r\n        cursor = offset\r\n        ifdsize = struct.unpack(\"<H\", buffer[cursor:cursor+2])[0]\r\n        cursor += 2\r\n        for i in range(ifdsize):\r\n            tag, datatype, count, data = struct.unpack(\"<HHLL\", buffer[cursor:cursor+12])\r\n            if tag == 256:\r\n                width = data\r\n            elif tag == 257:\r\n                height = data\r\n            if width != -1 and height != -1:\r\n                break\r\n        if width == -1 or height == -1:\r\n            raise ValueError(\"Invalid TIFF file: width and/or height IDS entries are missing.\")\r\n    return width, height\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/18", "repository_url": "https://api.github.com/repos/shibukawa/imagesize_py", "labels_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/18/comments", "events_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/18/events", "html_url": "https://github.com/shibukawa/imagesize_py/issues/18", "id": 310098025, "node_id": "MDU6SXNzdWUzMTAwOTgwMjU=", "number": 18, "title": "Create git tag for release 1.0.0", "user": {"login": "jirutka", "id": 949228, "node_id": "MDQ6VXNlcjk0OTIyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/949228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jirutka", "html_url": "https://github.com/jirutka", "followers_url": "https://api.github.com/users/jirutka/followers", "following_url": "https://api.github.com/users/jirutka/following{/other_user}", "gists_url": "https://api.github.com/users/jirutka/gists{/gist_id}", "starred_url": "https://api.github.com/users/jirutka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jirutka/subscriptions", "organizations_url": "https://api.github.com/users/jirutka/orgs", "repos_url": "https://api.github.com/users/jirutka/repos", "events_url": "https://api.github.com/users/jirutka/events{/privacy}", "received_events_url": "https://api.github.com/users/jirutka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-30T15:44:07Z", "updated_at": "2018-09-03T02:05:32Z", "closed_at": "2018-09-03T02:05:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "There\u2019s [imagesize 1.0.0](https://pypi.python.org/pypi/imagesize/1.0.0) on PyPI, but no corresponding tag in this repository. Please add it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/8", "repository_url": "https://api.github.com/repos/shibukawa/imagesize_py", "labels_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/8/comments", "events_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/8/events", "html_url": "https://github.com/shibukawa/imagesize_py/issues/8", "id": 221067738, "node_id": "MDU6SXNzdWUyMjEwNjc3Mzg=", "number": 8, "title": "TIFF support (particularly multipage)", "user": {"login": "jakirkham", "id": 3019665, "node_id": "MDQ6VXNlcjMwMTk2NjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakirkham", "html_url": "https://github.com/jakirkham", "followers_url": "https://api.github.com/users/jakirkham/followers", "following_url": "https://api.github.com/users/jakirkham/following{/other_user}", "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions", "organizations_url": "https://api.github.com/users/jakirkham/orgs", "repos_url": "https://api.github.com/users/jakirkham/repos", "events_url": "https://api.github.com/users/jakirkham/events{/privacy}", "received_events_url": "https://api.github.com/users/jakirkham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-11T20:15:47Z", "updated_at": "2018-09-03T02:18:52Z", "closed_at": "2018-09-03T02:18:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would be nice to have TIFF support. In particular, it would be nice if it could detect and properly handle multipage TIFFs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/7", "repository_url": "https://api.github.com/repos/shibukawa/imagesize_py", "labels_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/7/comments", "events_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/7/events", "html_url": "https://github.com/shibukawa/imagesize_py/issues/7", "id": 187253460, "node_id": "MDU6SXNzdWUxODcyNTM0NjA=", "number": 7, "title": "Include the test images in the PyPi release?", "user": {"login": "lfam", "id": 6568228, "node_id": "MDQ6VXNlcjY1NjgyMjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6568228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lfam", "html_url": "https://github.com/lfam", "followers_url": "https://api.github.com/users/lfam/followers", "following_url": "https://api.github.com/users/lfam/following{/other_user}", "gists_url": "https://api.github.com/users/lfam/gists{/gist_id}", "starred_url": "https://api.github.com/users/lfam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lfam/subscriptions", "organizations_url": "https://api.github.com/users/lfam/orgs", "repos_url": "https://api.github.com/users/lfam/repos", "events_url": "https://api.github.com/users/lfam/events{/privacy}", "received_events_url": "https://api.github.com/users/lfam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-04T04:51:48Z", "updated_at": "2018-09-03T02:05:50Z", "closed_at": "2018-09-03T02:05:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nCurrently, the test files 'test.png' et cetera aren't included in the PyPi tarball.\r\n\r\nWill you include the images used by the test suite in the PyPi release tarball?\r\n\r\nOr, do you prefer that packagers use the tarballs from GitHub?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/3", "repository_url": "https://api.github.com/repos/shibukawa/imagesize_py", "labels_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/3/comments", "events_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/3/events", "html_url": "https://github.com/shibukawa/imagesize_py/issues/3", "id": 150687929, "node_id": "MDU6SXNzdWUxNTA2ODc5Mjk=", "number": 3, "title": "Tag releases", "user": {"login": "kyrias", "id": 2285387, "node_id": "MDQ6VXNlcjIyODUzODc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2285387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyrias", "html_url": "https://github.com/kyrias", "followers_url": "https://api.github.com/users/kyrias/followers", "following_url": "https://api.github.com/users/kyrias/following{/other_user}", "gists_url": "https://api.github.com/users/kyrias/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyrias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyrias/subscriptions", "organizations_url": "https://api.github.com/users/kyrias/orgs", "repos_url": "https://api.github.com/users/kyrias/repos", "events_url": "https://api.github.com/users/kyrias/events{/privacy}", "received_events_url": "https://api.github.com/users/kyrias/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-24T18:23:39Z", "updated_at": "2016-04-25T03:24:26Z", "closed_at": "2016-04-25T03:24:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could you make git tags of releases that you upload to PyPI, both so that it's possible to easily find the exact commit that the release is of, and to have an alternative download location now that PyPI uses hashed URLs instead of making them predictable, which is really annoying when packaging software since now I need to go to PyPI and copy the URL instead of just changing the version number on new releases.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/2", "repository_url": "https://api.github.com/repos/shibukawa/imagesize_py", "labels_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/2/comments", "events_url": "https://api.github.com/repos/shibukawa/imagesize_py/issues/2/events", "html_url": "https://github.com/shibukawa/imagesize_py/issues/2", "id": 144686757, "node_id": "MDU6SXNzdWUxNDQ2ODY3NTc=", "number": 2, "title": "missing test.jp2 file", "user": {"login": "xantares", "id": 3265815, "node_id": "MDQ6VXNlcjMyNjU4MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3265815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xantares", "html_url": "https://github.com/xantares", "followers_url": "https://api.github.com/users/xantares/followers", "following_url": "https://api.github.com/users/xantares/following{/other_user}", "gists_url": "https://api.github.com/users/xantares/gists{/gist_id}", "starred_url": "https://api.github.com/users/xantares/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xantares/subscriptions", "organizations_url": "https://api.github.com/users/xantares/orgs", "repos_url": "https://api.github.com/users/xantares/repos", "events_url": "https://api.github.com/users/xantares/events{/privacy}", "received_events_url": "https://api.github.com/users/xantares/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-03-30T18:52:55Z", "updated_at": "2016-04-23T01:38:10Z", "closed_at": "2016-04-23T01:38:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "see test/test_get.py:\n\n```\n    def test_load_jpeg2000(self):\n        width, height = imagesize.get(os.path.join(imagedir, \"test.jp2\"))\n        self.assertEqual(width, 802)\n        self.assertEqual(height, 670)\n```\n\nalso, It could be great if you could setup travis integration to run these tests\n", "performed_via_github_app": null, "score": 1.0}]}