{"total_count": 125, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/380", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/380/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/380/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/380/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/380", "id": 638241858, "node_id": "MDU6SXNzdWU2MzgyNDE4NTg=", "number": 380, "title": "can't pickle dict_keys objects", "user": {"login": "brl0", "id": 42480289, "node_id": "MDQ6VXNlcjQyNDgwMjg5", "avatar_url": "https://avatars1.githubusercontent.com/u/42480289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brl0", "html_url": "https://github.com/brl0", "followers_url": "https://api.github.com/users/brl0/followers", "following_url": "https://api.github.com/users/brl0/following{/other_user}", "gists_url": "https://api.github.com/users/brl0/gists{/gist_id}", "starred_url": "https://api.github.com/users/brl0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brl0/subscriptions", "organizations_url": "https://api.github.com/users/brl0/orgs", "repos_url": "https://api.github.com/users/brl0/repos", "events_url": "https://api.github.com/users/brl0/events{/privacy}", "received_events_url": "https://api.github.com/users/brl0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-13T22:12:36Z", "updated_at": "2020-08-11T16:12:08Z", "closed_at": "2020-08-11T16:12:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using Dask.distributed, which uses cloudpickle for serialization, I encounter an error when passing a `dict_keys` object as a parameter to a function.  I reported the issue [there](https://github.com/dask/distributed/issues/3893), where it was suggested that I also report an issue here for consideration.\r\n\r\nAs a test, I attempted to use cloudpickle directly on this type of object and received the following error: \r\n`TypeError: can't pickle dict_keys objects`\r\n\r\nWould it be possible to add the ability to pickle `dict_keys` object?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/375", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/375/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/375/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/375", "id": 626426035, "node_id": "MDU6SXNzdWU2MjY0MjYwMzU=", "number": 375, "title": "cloudpickle extremely slow on pickling Dict[int, float]", "user": {"login": "basnijholt", "id": 6897215, "node_id": "MDQ6VXNlcjY4OTcyMTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6897215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basnijholt", "html_url": "https://github.com/basnijholt", "followers_url": "https://api.github.com/users/basnijholt/followers", "following_url": "https://api.github.com/users/basnijholt/following{/other_user}", "gists_url": "https://api.github.com/users/basnijholt/gists{/gist_id}", "starred_url": "https://api.github.com/users/basnijholt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basnijholt/subscriptions", "organizations_url": "https://api.github.com/users/basnijholt/orgs", "repos_url": "https://api.github.com/users/basnijholt/repos", "events_url": "https://api.github.com/users/basnijholt/events{/privacy}", "received_events_url": "https://api.github.com/users/basnijholt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-28T11:14:26Z", "updated_at": "2020-05-29T09:59:16Z", "closed_at": "2020-05-29T09:59:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "In an attempt to fix (circumvent) https://github.com/cloudpipe/cloudpickle/issues/374 I found that `cloudpickle` is extremely slow on pickling large dictionaries with very simple datatypes (float and int):\r\n\r\n```python\r\nimport pickle\r\nimport random\r\nimport cloudpickle\r\n\r\nfloats = {i: random.random() for i in range(30_000)}\r\nnp_floats64 = {i: np.float64(v) for i, v in floats.items()}\r\n\r\n%timeit len(pickle.dumps(floats))\r\n%timeit len(pickle.dumps(np_floats64))\r\n\r\n%timeit len(cloudpickle.dumps(floats))\r\n%timeit len(cloudpickle.dumps(np_floats64))\r\n```\r\nprints\r\n```\r\n1.3 ms \u00b1 3.19 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n82.7 ms \u00b1 1.26 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\r\n88.1 ms \u00b1 335 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\r\n519 ms \u00b1 4.65 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\r\n```\r\nWhere `cloudpickle` is about a 60x slower than `pickle` for `float`s and 6x slower for `np.float64`s.\r\n\r\n* https://github.com/cloudpipe/cloudpickle/issues/68 reports a similar issue but @pierreglaser mentions that the performance issues have been fixed [here](https://github.com/cloudpipe/cloudpickle/issues/68#issuecomment-501626240).\r\n* a similar issue has been fixed for NumPy: https://github.com/cloudpipe/cloudpickle/issues/58\r\n* I used version `cloudpickle` version 1.3.0 and Python 3.7.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/374", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/374/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/374/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/374/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/374", "id": 626361834, "node_id": "MDU6SXNzdWU2MjYzNjE4MzQ=", "number": 374, "title": "Parallelize serialization", "user": {"login": "basnijholt", "id": 6897215, "node_id": "MDQ6VXNlcjY4OTcyMTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6897215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basnijholt", "html_url": "https://github.com/basnijholt", "followers_url": "https://api.github.com/users/basnijholt/followers", "following_url": "https://api.github.com/users/basnijholt/following{/other_user}", "gists_url": "https://api.github.com/users/basnijholt/gists{/gist_id}", "starred_url": "https://api.github.com/users/basnijholt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basnijholt/subscriptions", "organizations_url": "https://api.github.com/users/basnijholt/orgs", "repos_url": "https://api.github.com/users/basnijholt/repos", "events_url": "https://api.github.com/users/basnijholt/events{/privacy}", "received_events_url": "https://api.github.com/users/basnijholt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-28T09:30:08Z", "updated_at": "2020-05-29T10:02:52Z", "closed_at": "2020-05-29T09:47:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "In [Adaptive-scheduler](https://adaptive-scheduler.readthedocs.io/) (package to run adaptive parameter sweeps on >30.000 cores) serialization takes most of the time (sending the functions (+known data) to run to the compute nodes). In [adaptive-scheduler PR #44](https://github.com/basnijholt/adaptive-scheduler/pull/44/files#diff-5e241bdb2d5e8ca5eafc63f0eaef28caR534) I am trying to have the serialization happen in threads, however, I am not observing any speedup.\r\n\r\nI can reproduce this with the following code\r\n```python\r\n%%time\r\nimport itertools\r\nimport cloudpickle\r\nfrom concurrent.futures import ThreadPoolExecutor\r\n\r\nx = np.random.rand(10000, 10000)\r\n# y = cloudpickle.dumps(x)  # <---------------- takes 1.5s\r\nwith ThreadPoolExecutor() as ex:\r\n    ex.map(cloudpickle.dumps, itertools.repeat(x, 10))\r\n```\r\nwhich takes 8s.\r\n\r\nIs this because of the GIL?\r\n\r\nUsing a `ProcessPoolExecutor` also doesn't result in any speedup.\r\n\r\nIs there a way in which I can call `cloudpickle.dumps` on different objects in parallel efficiently?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/366", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/366/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/366/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/366", "id": 614884456, "node_id": "MDU6SXNzdWU2MTQ4ODQ0NTY=", "number": 366, "title": "Expose CloudPickler as Pickler instead of pickle.Pickler", "user": {"login": "twoertwein", "id": 6618166, "node_id": "MDQ6VXNlcjY2MTgxNjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6618166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twoertwein", "html_url": "https://github.com/twoertwein", "followers_url": "https://api.github.com/users/twoertwein/followers", "following_url": "https://api.github.com/users/twoertwein/following{/other_user}", "gists_url": "https://api.github.com/users/twoertwein/gists{/gist_id}", "starred_url": "https://api.github.com/users/twoertwein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twoertwein/subscriptions", "organizations_url": "https://api.github.com/users/twoertwein/orgs", "repos_url": "https://api.github.com/users/twoertwein/repos", "events_url": "https://api.github.com/users/twoertwein/events{/privacy}", "received_events_url": "https://api.github.com/users/twoertwein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-08T17:42:08Z", "updated_at": "2020-08-13T21:43:13Z", "closed_at": "2020-08-13T21:43:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI don't know whether there is a convention what `<pickle_module>.Pickler` is but it seems that some projects [1] assume that they can use it.\r\n\r\nUnfortunately, `Cloudpickle.Pickler` is pickle's Pickler. It might be helpful if it points to `cloudpickle.CloudPickler`.\r\n\r\nIf the solution is to simply rename Pickle's Pickler to Pickler_ and to have an alias for CloudPickler, I'm happy to create a PR for that.\r\n\r\n[1] https://github.com/pytorch/pytorch/issues/38098", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/363", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/363/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/363/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/363/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/363", "id": 609310266, "node_id": "MDU6SXNzdWU2MDkzMTAyNjY=", "number": 363, "title": "cannot always reliably pickle bob.io.video.reader ", "user": {"login": "183amir", "id": 5738695, "node_id": "MDQ6VXNlcjU3Mzg2OTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/5738695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/183amir", "html_url": "https://github.com/183amir", "followers_url": "https://api.github.com/users/183amir/followers", "following_url": "https://api.github.com/users/183amir/following{/other_user}", "gists_url": "https://api.github.com/users/183amir/gists{/gist_id}", "starred_url": "https://api.github.com/users/183amir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/183amir/subscriptions", "organizations_url": "https://api.github.com/users/183amir/orgs", "repos_url": "https://api.github.com/users/183amir/repos", "events_url": "https://api.github.com/users/183amir/events{/privacy}", "received_events_url": "https://api.github.com/users/183amir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-29T19:42:32Z", "updated_at": "2020-05-04T18:24:45Z", "closed_at": "2020-05-04T08:29:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some problem pickling a function that uses `bob.io.video.reader`  (It's a C++ class wrapped for Python, implementation here: https://gitlab.idiap.ch/bob/bob.io.video/-/blob/master/bob/io/video/reader.cpp)\r\n\r\nThe steps below allows you to reproduce my issue:\r\n```sh\r\nconda create -n test -c https://www.idiap.ch/software/bob/conda bob.io.video cloudpickle\r\nconda activate test\r\nconda list # see output below\r\npython\r\n```\r\n\r\n<details><summary>conda list output</summary>\r\n<p>\r\n\r\n```\r\nconda list\r\n# packages in environment at /home/amir/miniconda/envs/test:\r\n#\r\n# Name                    Version                   Build  Channel\r\n_libgcc_mutex             0.1                        main    defaults\r\nblas                      1.0                         mkl    defaults\r\nbob.blitz                 2.0.20           py37h568732d_0    https://www.idiap.ch/software/bob/conda\r\nbob.core                  2.2.4            py37h61c8b34_0    https://www.idiap.ch/software/bob/conda\r\nbob.extension             4.0.0            py37h06b427b_0    https://www.idiap.ch/software/bob/conda\r\nbob.io.base               3.0.7            py37hd5c6fa5_0    https://www.idiap.ch/software/bob/conda\r\nbob.io.video              3.0.2            py37h67c8010_0    https://www.idiap.ch/software/bob/conda\r\nboost                     1.67.0                   py37_4    defaults\r\nbzip2                     1.0.8                h7b6447c_0    defaults\r\nca-certificates           2020.1.1                      0    defaults\r\ncertifi                   2020.4.5.1               py37_0    defaults\r\nclick                     7.1.1                      py_0    defaults\r\nclick-plugins             1.1.1                      py_0    defaults\r\ncloudpickle               1.3.0                      py_0    defaults\r\nffmpeg                    4.0                  hf6c5f75_2    https://www.idiap.ch/software/bob/conda\r\nfreetype                  2.9.1                h8a8886c_1    defaults\r\nhdf5                      1.10.2               hba1933b_1    defaults\r\nicu                       58.2                 he6710b0_3    defaults\r\nintel-openmp              2020.0                      166    defaults\r\njpeg                      9b                   h024ee3a_2    defaults\r\nld_impl_linux-64          2.33.1               h53a641e_7    defaults\r\nlibblitz                  1.0.1                hf484d3e_1    https://www.idiap.ch/software/bob/conda\r\nlibboost                  1.67.0               h46d08c1_4    defaults\r\nlibedit                   3.1.20181209         hc058e9b_0    defaults\r\nlibffi                    3.2.1                hd88cf55_4    defaults\r\nlibgcc-ng                 9.1.0                hdf63c60_0    defaults\r\nlibgfortran-ng            7.3.0                hdf63c60_0    defaults\r\nlibopus                   1.3.1                h7b6447c_0    defaults\r\nlibpng                    1.6.37               hbc83047_0    defaults\r\nlibstdcxx-ng              9.1.0                hdf63c60_0    defaults\r\nlibtiff                   4.1.0                h2733197_0    defaults\r\nlibvpx                    1.7.0                h439df22_0    defaults\r\nmkl                       2020.0                      166    defaults\r\nmkl-service               2.3.0            py37he904b0f_0    defaults\r\nmkl_fft                   1.0.15           py37ha843d7b_0    defaults\r\nmkl_random                1.1.0            py37hd6b4f25_0    defaults\r\nncurses                   6.2                  he6710b0_1    defaults\r\nnumpy                     1.18.1           py37h4f9e942_0    defaults\r\nnumpy-base                1.18.1           py37hde5b4d6_1    defaults\r\nolefile                   0.46                     py37_0    defaults\r\nopenh264                  1.7.0                hf6c5f75_2    https://www.idiap.ch/software/bob/conda\r\nopenssl                   1.1.1g               h7b6447c_0    defaults\r\npillow                    7.0.0            py37hb39fc2d_0    defaults\r\npip                       20.0.2                   py37_1    defaults\r\npy-boost                  1.67.0           py37h04863e7_4    defaults\r\npython                    3.7.7           hcf32534_0_cpython    defaults\r\nreadline                  8.0                  h7b6447c_0    defaults\r\nsetuptools                46.1.3                   py37_0    defaults\r\nsix                       1.14.0                   py37_0    defaults\r\nsqlite                    3.31.1               h62c20be_1    defaults\r\ntk                        8.6.8                hbc83047_0    defaults\r\nwheel                     0.34.2                   py37_0    defaults\r\nxz                        5.2.5                h7b6447c_0    defaults\r\nzlib                      1.2.11               h7b6447c_3    defaults\r\nzstd                      1.3.7                h0b5b093_0    defaults\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n```python\r\n>>> import bob.io.video\r\n>>> import cloudpickle\r\n>>> cloudpickle.loads(cloudpickle.dumps(bob.io.video.reader)) # it's ok that it fails\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/amir/miniconda/envs/test/lib/python3.7/site-packages/cloudpickle/cloudpickle.py\", line 1334, in _rehydrate_skeleton_class\r\n    setattr(skeleton_class, attrname, attr)\r\nTypeError: can't set attributes of built-in/extension type 'reader'\r\n>>> def load_video(path):\r\n...     return bob.io.video.reader(path).load()\r\n... \r\n>>> cloudpickle.loads(cloudpickle.dumps(load_video)) # good\r\n<function load_video at 0x7f96ccb74a70>\r\n>>> from bob.io.video import reader\r\n>>> def load_video(path):\r\n...     return reader(path).load()\r\n... \r\n>>> cloudpickle.loads(cloudpickle.dumps(load_video)) # not good! This is the issue!\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/amir/miniconda/envs/test/lib/python3.7/site-packages/cloudpickle/cloudpickle.py\", line 1334, in _rehydrate_skeleton_class\r\n    setattr(skeleton_class, attrname, attr)\r\nTypeError: can't set attributes of built-in/extension type 'reader'\r\n>>> import pickle\r\n>>> pickle.loads(pickle.dumps(bob.io.video.reader)) # it's ok that this fails\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n_pickle.PicklingError: Can't pickle <class 'reader'>: attribute lookup reader on builtins failed\r\n>>> pickle.loads(pickle.dumps(load_video)) # python's pickle works here!\r\n<function load_video at 0x7f96ccb7b170>\r\n```\r\nAs you can see I can pickle the `load_video` function only when I use `bob.io.video.reader` inside it. When I use `reader` which was imported like `from bob.io.video import reader`. It doesn't work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/360", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/360/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/360/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/360/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/360", "id": 608471739, "node_id": "MDU6SXNzdWU2MDg0NzE3Mzk=", "number": 360, "title": "1.4.0 doesn't support python 3.5.2 and below", "user": {"login": "vedran", "id": 473826, "node_id": "MDQ6VXNlcjQ3MzgyNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/473826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vedran", "html_url": "https://github.com/vedran", "followers_url": "https://api.github.com/users/vedran/followers", "following_url": "https://api.github.com/users/vedran/following{/other_user}", "gists_url": "https://api.github.com/users/vedran/gists{/gist_id}", "starred_url": "https://api.github.com/users/vedran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vedran/subscriptions", "organizations_url": "https://api.github.com/users/vedran/orgs", "repos_url": "https://api.github.com/users/vedran/repos", "events_url": "https://api.github.com/users/vedran/events{/privacy}", "received_events_url": "https://api.github.com/users/vedran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-28T16:59:46Z", "updated_at": "2020-04-29T15:07:37Z", "closed_at": "2020-04-29T08:14:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since cloudpickle 1.4.0 uses ClassVar from [this commit](https://github.com/cloudpipe/cloudpickle/commit/1ba10a5491d3f7b788d36c0d3cacc77bd41668a0#diff-d2a3618afedd4e124c532151eedbae09R64), which is only supported by [Python 3.5.3 and above](https://docs.python.org/3/library/typing.html#typing.ClassVar).\r\n\r\nI'm amateur python developer, so I'm not sure of the best way to address / announce this. But this may be worth fixing because Ubuntu 16.04 ships with python 3.5.1-2, so all users of that version of Ubuntu would be affected as well.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/355", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/355/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/355/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/355", "id": 589850581, "node_id": "MDU6SXNzdWU1ODk4NTA1ODE=", "number": 355, "title": "cloudpickle can't pickle _LazyLoader objects ", "user": {"login": "deansk90", "id": 24352160, "node_id": "MDQ6VXNlcjI0MzUyMTYw", "avatar_url": "https://avatars1.githubusercontent.com/u/24352160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deansk90", "html_url": "https://github.com/deansk90", "followers_url": "https://api.github.com/users/deansk90/followers", "following_url": "https://api.github.com/users/deansk90/following{/other_user}", "gists_url": "https://api.github.com/users/deansk90/gists{/gist_id}", "starred_url": "https://api.github.com/users/deansk90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deansk90/subscriptions", "organizations_url": "https://api.github.com/users/deansk90/orgs", "repos_url": "https://api.github.com/users/deansk90/repos", "events_url": "https://api.github.com/users/deansk90/events{/privacy}", "received_events_url": "https://api.github.com/users/deansk90/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-29T18:15:45Z", "updated_at": "2020-03-29T20:55:15Z", "closed_at": "2020-03-29T20:55:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/354", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/354/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/354/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/354/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/354", "id": 588676872, "node_id": "MDU6SXNzdWU1ODg2NzY4NzI=", "number": 354, "title": "_is_dynamic fails on submodule in .so file", "user": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-26T19:37:50Z", "updated_at": "2020-06-08T09:26:44Z", "closed_at": "2020-06-08T09:26:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "When `_is_dynamic` checks a module, it only looks for the `__spec__` and `__file__` of the module being checked, and if that is not defined, it looks for the `__path__` on the module above. For a PyBind11 module with a submodule, the `__file__` is defined on the main module, but not submodules, and there is no `__path__`. So things in submodules cannot be cloudpickled.\r\n\r\nI think the function should be recursively checking up the the module path, and shouldn't try to access `parent.__path__` without a check or try.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/349", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/349/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/349/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/349", "id": 578915333, "node_id": "MDU6SXNzdWU1Nzg5MTUzMzM=", "number": 349, "title": "1.3.0 cloudpickle.load hits AttributeError: module 'types' has no attribute 'ClassType'", "user": {"login": "mzhang-code", "id": 5080397, "node_id": "MDQ6VXNlcjUwODAzOTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/5080397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzhang-code", "html_url": "https://github.com/mzhang-code", "followers_url": "https://api.github.com/users/mzhang-code/followers", "following_url": "https://api.github.com/users/mzhang-code/following{/other_user}", "gists_url": "https://api.github.com/users/mzhang-code/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzhang-code/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzhang-code/subscriptions", "organizations_url": "https://api.github.com/users/mzhang-code/orgs", "repos_url": "https://api.github.com/users/mzhang-code/repos", "events_url": "https://api.github.com/users/mzhang-code/events{/privacy}", "received_events_url": "https://api.github.com/users/mzhang-code/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1928341653, "node_id": "MDU6TGFiZWwxOTI4MzQxNjUz", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/Regression", "name": "Regression", "color": "fc2929", "default": false, "description": ""}, {"id": 199135100, "node_id": "MDU6TGFiZWwxOTkxMzUxMDA=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-10T23:18:03Z", "updated_at": "2020-04-28T20:54:51Z", "closed_at": "2020-04-28T20:54:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "After upgrading to 1.3.0 from 1.2.2, our load() code starts having this issue.\r\n\r\n```\r\n File \"/usr/local/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 415, in _builtin_type\r\n     return getattr(types, name)\r\n AttributeError: module 'types' has no attribute 'ClassType'\r\n```\r\n\r\nAlso found this post described the same issue we got. https://github.com/mlflow/mlflow/issues/2429\r\n\r\nI suspect it is caused by https://github.com/cloudpipe/cloudpickle/pull/337 \"Fix a side effect that would redefine types.ClassTypes as type when importing cloudpickle\", which removed `types.ClassType = type`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/347", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/347/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/347/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/347/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/347", "id": 566523538, "node_id": "MDU6SXNzdWU1NjY1MjM1Mzg=", "number": 347, "title": "AttributeError when pickling generic type annotations on Python 3.6", "user": {"login": "pjwerneck", "id": 394809, "node_id": "MDQ6VXNlcjM5NDgwOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/394809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pjwerneck", "html_url": "https://github.com/pjwerneck", "followers_url": "https://api.github.com/users/pjwerneck/followers", "following_url": "https://api.github.com/users/pjwerneck/following{/other_user}", "gists_url": "https://api.github.com/users/pjwerneck/gists{/gist_id}", "starred_url": "https://api.github.com/users/pjwerneck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pjwerneck/subscriptions", "organizations_url": "https://api.github.com/users/pjwerneck/orgs", "repos_url": "https://api.github.com/users/pjwerneck/repos", "events_url": "https://api.github.com/users/pjwerneck/events{/privacy}", "received_events_url": "https://api.github.com/users/pjwerneck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-17T21:24:27Z", "updated_at": "2020-02-20T14:56:52Z", "closed_at": "2020-02-20T14:56:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I understand that type annotations are not supported for Python 3.6, but I'm getting an `AttributeError` for `abc._get_dump` when pickling generic type annotations.\r\n\r\n- Python 3.6.8\r\n- cloudpickle 1.3.0:\r\n\r\n```\r\n  File \"/home/pedro/.virtualenvs/KZG8XYVK/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 899, in save_global\r\n    self.save_dynamic_class(obj)\r\n  File \"/home/pedro/.virtualenvs/KZG8XYVK/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 642, in save_dynamic_class\r\n    (registry, _, _, _) = abc._get_dump(obj)\r\nAttributeError: module 'abc' has no attribute '_get_dump'\r\n```\r\nHere's a minimal example to reproduce the error:\r\n\r\n```python\r\nimport typing\r\nimport cloudpickle\r\n\r\nX = typing.TypeVar(\"X\")\r\n\r\nclass Input(typing.Generic[X]):\r\n    pass\r\n\r\nclass Lero:\r\n    a: Input[int]\r\n\r\nobj = Lero()\r\n\r\ncloudpickle.dumps(obj)\r\n```\r\nMy workaround for it was patching the abc module with a copy of the pure Python implementation of `_get_dump`  at https://github.com/python/cpython/blob/3.7/Lib/test/libregrtest/refleak.py#L8\r\n\r\n```python\r\ntry:\r\n    import abc\r\n    abc._get_dump\r\nexcept AttributeError:\r\n    import weakref\r\n\r\n    def _get_dump(cls):\r\n        # Reimplement _get_dump() for pure-Python implementation of\r\n        # the abc module (Lib/_py_abc.py)\r\n        registry_weakrefs = set(weakref.ref(obj) for obj in cls._abc_registry)\r\n        return (registry_weakrefs, cls._abc_cache,\r\n                cls._abc_negative_cache, cls._abc_negative_cache_version)\r\n    abc._get_dump = _get_dump\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/343", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/343/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/343/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/343/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/343", "id": 564919149, "node_id": "MDU6SXNzdWU1NjQ5MTkxNDk=", "number": 343, "title": "cloudpickle_fast causes pickled object to be uncollectable", "user": {"login": "edoakes", "id": 9871461, "node_id": "MDQ6VXNlcjk4NzE0NjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9871461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edoakes", "html_url": "https://github.com/edoakes", "followers_url": "https://api.github.com/users/edoakes/followers", "following_url": "https://api.github.com/users/edoakes/following{/other_user}", "gists_url": "https://api.github.com/users/edoakes/gists{/gist_id}", "starred_url": "https://api.github.com/users/edoakes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edoakes/subscriptions", "organizations_url": "https://api.github.com/users/edoakes/orgs", "repos_url": "https://api.github.com/users/edoakes/repos", "events_url": "https://api.github.com/users/edoakes/events{/privacy}", "received_events_url": "https://api.github.com/users/edoakes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-13T20:02:43Z", "updated_at": "2020-02-21T08:37:36Z", "closed_at": "2020-02-21T08:37:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I work on [Ray](https://github.com/ray-project/ray), where we're now using `cloudpickle_fast` for object serialization (thanks for the great work!). We have recently started working on distributed reference counting in Ray, which depends on local Python object reference counting.\r\n\r\nWhen running some tests for our reference counting implementation, we ran into an issue where some serialized objects were uncollectable (due to a circular reference), causing them not to be deleted until a call to the garbage collector. After some investigation, it seems the problem is in `cloudpickle_fast` as shown by the following example:\r\n\r\n```\r\nimport cloudpickle\r\nimport gc\r\n\r\nclass ShortLivedObject:\r\n    def __del__(self):\r\n        print(\"Went out of scope!\")\r\n\r\ncloudpickle.dumps(ShortLivedObject())\r\n\r\nprint(\"GC'ing...\")\r\ngc.collect()\r\n```\r\n\r\nWe expect that the `__del__` method of the `ShortLivedObject` will be called after `pickle.dumps` returns, as the only references to the object are removed. When running this example on Python 3.7 or earlier (not using `cloudpickle_fast`), this is indeed the case. However, when running on Python 3.8 (using `cloudpickle_fast`), `ShortLivedObject.__del__` is not called until the call to `gc.collect()`.\r\n\r\nAny help would be much appreciated!\r\n\r\nFYI: setting `gc.DEBUG_SAVEALL` and printing `gc.garbage` after the collect call shows the following:\r\n```\r\n<cell at 0x7f9030ceddc8: tuple object at 0x7f9030d30470>\r\n<cell at 0x7f9030ceddf8: type object at 0x7f90674201d8>\r\n(<class 'type'>,)\r\n(<cell at 0x7f9030ceddc8: tuple object at 0x7f9030d30470>, <cell at 0x7f9030ceddf8: type object at 0x7f90674201d8>)\r\n<function with_metaclass.<locals>.metaclass.__new__ at 0x7f9030d44158>\r\n(<cell at 0x7f9030ceddc8: tuple object at 0x7f9030d30470>, <cell at 0x7f9030ceddf8: type object at 0x7f90674201d8>)\r\n<function with_metaclass.<locals>.metaclass.__prepare__ at 0x7f9030d441e0>\r\n<classmethod object at 0x7f9030d30d30>\r\n{'__module__': 'six', '__new__': <staticmethod object at 0x7f9030d30d68>, '__prepare__': <classmethod object at 0x7f9030d30d30>, '__doc__': None}\r\n<class 'six.with_metaclass.<locals>.metaclass'>\r\n<staticmethod object at 0x7f9030d30d68>\r\n(<class 'six.with_metaclass.<locals>.metaclass'>, <class 'type'>, <class 'object'>)\r\n(<class 'object'>,)\r\n<class 'six.temporary_class'>\r\n<attribute '__dict__' of 'temporary_class' objects>\r\n{'__module__': 'six', '__dict__': <attribute '__dict__' of 'temporary_class' objects>, '__weakref__': <attribute '__weakref__' of 'temporary_class' objects>, '__doc__': None}\r\n<attribute '__weakref__' of 'temporary_class' objects>\r\n(<class 'six.temporary_class'>, <class 'object'>)\r\n<_io.BytesIO object at 0x7f9030d36200>\r\n<ray.cloudpickle.cloudpickle_fast.CloudPickler object at 0x7f9030c85948>\r\n<built-in method write of _io.BytesIO object at 0x7f9030d36200>\r\n{'globals_ref': {140258197779872: {'__package__': None, '__name__': '__main__', '__file__': 'ref2.py'}}, 'proto': 4}\r\n{<class 'complex'>: <function pickle_complex at 0x7f905817fb70>, <class '_sre.SRE_Pattern'>: <function _pickle at 0x7f905817f9d8>, <class 'numpy.ufunc'>: <function _ufunc_reduce at 0x7f9048311950>, <class 'classmethod'>: <function _classmethod_reduce at 0x7f9030399f28>, <class '_io.TextIOWrapper'>: <function _file_reduce at 0x7f903039a048>, <class 'logging.Logger'>: <function _logger_reduce at 0x7f903039a378>, <class 'logging.RootLogger'>: <function _root_logger_reduce at 0x7f903039a400>, <class 'memoryview'>: <function _memoryview_reduce at 0x7f903039a1e0>, <class 'staticmethod'>: <function _classmethod_reduce at 0x7f9030399f28>, <class 'code'>: <function _code_reduce at 0x7f9030399d90>, <class 'getset_descriptor'>: <function _getset_descriptor_reduce at 0x7f903039a0d0>, <class 'module'>: <function _module_reduce at 0x7f903039a268>, <class 'method'>: <function _method_reduce at 0x7f903039a2f0>, <class 'mappingproxy'>: <function _mappingproxy_reduce at 0x7f903039a158>, <class '_weakrefset.WeakSet'>: <function _weakset_reduce at 0x7f903039a488>, <class 'cell'>: <function _cell_reduce at 0x7f9030399ea0>, <class 'property'>: <function _property_reduce at 0x7f903039a730>}\r\n<bound method CloudPickler.reducer_override of <ray.cloudpickle.cloudpickle_fast.CloudPickler object at 0x7f9030c85948>>\r\n{140258197779872: {'__package__': None, '__name__': '__main__', '__file__': 'ref2.py'}}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/338", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/338/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/338/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/338/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/338", "id": 561651365, "node_id": "MDU6SXNzdWU1NjE2NTEzNjU=", "number": 338, "title": "[RFC] Drop Python 2 support after next release?", "user": {"login": "ogrisel", "id": 89061, "node_id": "MDQ6VXNlcjg5MDYx", "avatar_url": "https://avatars0.githubusercontent.com/u/89061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogrisel", "html_url": "https://github.com/ogrisel", "followers_url": "https://api.github.com/users/ogrisel/followers", "following_url": "https://api.github.com/users/ogrisel/following{/other_user}", "gists_url": "https://api.github.com/users/ogrisel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogrisel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogrisel/subscriptions", "organizations_url": "https://api.github.com/users/ogrisel/orgs", "repos_url": "https://api.github.com/users/ogrisel/repos", "events_url": "https://api.github.com/users/ogrisel/events{/privacy}", "received_events_url": "https://api.github.com/users/ogrisel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135105, "node_id": "MDU6TGFiZWwxOTkxMzUxMDU=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-07T13:55:02Z", "updated_at": "2020-02-27T09:36:16Z", "closed_at": "2020-02-27T09:35:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The code base could be much simpler and lighter to maintain if we decided to drop backward compat for Python 2 after the next major release.\r\n\r\nIt would also reduce the CI maintenance overhead.\r\n\r\nI would be really interested hearing from users who really need Python 2 compat for the coming years (that is for future cloudpickle releases).\r\n\r\nIn particular those users' voices would carry more weight if the said users would be ready to invest some time and efforts in maintaining this project with us.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/328", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/328/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/328/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/328/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/328", "id": 554824853, "node_id": "MDU6SXNzdWU1NTQ4MjQ4NTM=", "number": 328, "title": "can't pickle cell objects", "user": {"login": "twoertwein", "id": 6618166, "node_id": "MDQ6VXNlcjY2MTgxNjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6618166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twoertwein", "html_url": "https://github.com/twoertwein", "followers_url": "https://api.github.com/users/twoertwein/followers", "following_url": "https://api.github.com/users/twoertwein/following{/other_user}", "gists_url": "https://api.github.com/users/twoertwein/gists{/gist_id}", "starred_url": "https://api.github.com/users/twoertwein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twoertwein/subscriptions", "organizations_url": "https://api.github.com/users/twoertwein/orgs", "repos_url": "https://api.github.com/users/twoertwein/repos", "events_url": "https://api.github.com/users/twoertwein/events{/privacy}", "received_events_url": "https://api.github.com/users/twoertwein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-24T16:12:39Z", "updated_at": "2020-02-07T15:41:43Z", "closed_at": "2020-02-07T15:41:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI found an object which is pickable by python's pickle (python 3) but not by cloudpickle. The error which is thrown is from pickle, not cloudpickle.\r\n```py\r\n\r\nimport pickle\r\n\r\nimport cloudpickle\r\nfrom typeguard import typechecked  # https://github.com/agronholm/typeguard\r\n\r\n\r\nclass SomeClass:\r\n    @typechecked\r\n    def __init__(self, foo: str) -> None:\r\n        super().__init__()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    object = SomeClass(\"foo\")\r\n\r\n    # works\r\n    with open(\"foo.pickle\", mode=\"wb\") as file:\r\n        pickle.dump(object, file)\r\n\r\n    # fails\r\n    with open(\"bar.pickle\", mode=\"wb\") as file:\r\n        cloudpickle.dump(object, file)\r\n```\r\n```\r\n$ ipython foo.py\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nfoo.py in <module>\r\n     20     # fails\r\n     21     with open(\"bar.pickle\", mode=\"wb\") as file:\r\n---> 22         cloudpickle.dump(object, file)\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/site-packages/cloudpickle/cloudpickle.py in dump(obj, file, protocol)\r\n   1107     compatibility with older versions of Python.\r\n   1108     \"\"\"\r\n-> 1109     CloudPickler(file, protocol=protocol).dump(obj)\r\n   1110 \r\n   1111 \r\n\r\n~/miniconda3/envs/panama/lib/python3.7/site-packages/cloudpickle/cloudpickle.py in dump(self, obj)\r\n    480         self.inject_addons()\r\n    481         try:\r\n--> 482             return Pickler.dump(self, obj)\r\n    483         except RuntimeError as e:\r\n    484             if 'recursion' in e.args[0]:\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in dump(self, obj)\r\n    435         if self.proto >= 4:\r\n    436             self.framer.start_framing()\r\n--> 437         self.save(obj)\r\n    438         self.write(STOP)\r\n    439         self.framer.end_framing()\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    547 \r\n    548         # Save the reduce() output and finally memoize the object\r\n--> 549         self.save_reduce(obj=obj, *rv)\r\n    550 \r\n    551     def persistent_id(self, obj):\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in save_reduce(self, func, args, state, listitems, dictitems, obj)\r\n    631                     \"args[0] from __newobj__ args has the wrong class\")\r\n    632             args = args[1:]\r\n--> 633             save(cls)\r\n    634             save(args)\r\n    635             write(NEWOBJ)\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    502         f = self.dispatch.get(t)\r\n    503         if f is not None:\r\n--> 504             f(self, obj) # Call unbound method with explicit self\r\n    505             return\r\n    506 \r\n\r\n~/miniconda3/envs/panama/lib/python3.7/site-packages/cloudpickle/cloudpickle.py in save_global(self, obj, name, pack)\r\n    875             Pickler.save_global(self, obj, name=name)\r\n    876         elif not _is_global(obj, name=name):\r\n--> 877             self.save_dynamic_class(obj)\r\n    878         else:\r\n    879             Pickler.save_global(self, obj, name=name)\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/site-packages/cloudpickle/cloudpickle.py in save_dynamic_class(self, obj)\r\n    684         # Now save the rest of obj's __dict__. Any references to obj\r\n    685         # encountered while saving will point to the skeleton class.\r\n--> 686         save(clsdict)\r\n    687 \r\n    688         # Write a tuple of (skeleton_class, clsdict).\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    502         f = self.dispatch.get(t)\r\n    503         if f is not None:\r\n--> 504             f(self, obj) # Call unbound method with explicit self\r\n    505             return\r\n    506 \r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in save_dict(self, obj)\r\n    857 \r\n    858         self.memoize(obj)\r\n--> 859         self._batch_setitems(obj.items())\r\n    860 \r\n    861     dispatch[dict] = save_dict\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in _batch_setitems(self, items)\r\n    883                 for k, v in tmp:\r\n    884                     save(k)\r\n--> 885                     save(v)\r\n    886                 write(SETITEMS)\r\n    887             elif n:\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    502         f = self.dispatch.get(t)\r\n    503         if f is not None:\r\n--> 504             f(self, obj) # Call unbound method with explicit self\r\n    505             return\r\n    506 \r\n\r\n~/miniconda3/envs/panama/lib/python3.7/site-packages/cloudpickle/cloudpickle.py in save_function(self, obj, name)\r\n    554             return self.save_pypy_builtin_func(obj)\r\n    555         else:\r\n--> 556             return self.save_function_tuple(obj)\r\n    557 \r\n    558     dispatch[types.FunctionType] = save_function\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/site-packages/cloudpickle/cloudpickle.py in save_function_tuple(self, func)\r\n    756         if hasattr(func, '__kwdefaults__'):\r\n    757             state['kwdefaults'] = func.__kwdefaults__\r\n--> 758         save(state)\r\n    759         write(pickle.TUPLE)\r\n    760         write(pickle.REDUCE)  # applies _fill_function on the tuple\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    502         f = self.dispatch.get(t)\r\n    503         if f is not None:\r\n--> 504             f(self, obj) # Call unbound method with explicit self\r\n    505             return\r\n    506 \r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in save_dict(self, obj)\r\n    857 \r\n    858         self.memoize(obj)\r\n--> 859         self._batch_setitems(obj.items())\r\n    860 \r\n    861     dispatch[dict] = save_dict\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in _batch_setitems(self, items)\r\n    883                 for k, v in tmp:\r\n    884                     save(k)\r\n--> 885                     save(v)\r\n    886                 write(SETITEMS)\r\n    887             elif n:\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    502         f = self.dispatch.get(t)\r\n    503         if f is not None:\r\n--> 504             f(self, obj) # Call unbound method with explicit self\r\n    505             return\r\n    506 \r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in save_list(self, obj)\r\n    817 \r\n    818         self.memoize(obj)\r\n--> 819         self._batch_appends(obj)\r\n    820 \r\n    821     dispatch[list] = save_list\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in _batch_appends(self, items)\r\n    841                 write(MARK)\r\n    842                 for x in tmp:\r\n--> 843                     save(x)\r\n    844                 write(APPENDS)\r\n    845             elif n:\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    502         f = self.dispatch.get(t)\r\n    503         if f is not None:\r\n--> 504             f(self, obj) # Call unbound method with explicit self\r\n    505             return\r\n    506 \r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in save_dict(self, obj)\r\n    857 \r\n    858         self.memoize(obj)\r\n--> 859         self._batch_setitems(obj.items())\r\n    860 \r\n    861     dispatch[dict] = save_dict\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in _batch_setitems(self, items)\r\n    883                 for k, v in tmp:\r\n    884                     save(k)\r\n--> 885                     save(v)\r\n    886                 write(SETITEMS)\r\n    887             elif n:\r\n\r\n~/miniconda3/envs/panama/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    522             reduce = getattr(obj, \"__reduce_ex__\", None)\r\n    523             if reduce is not None:\r\n--> 524                 rv = reduce(self.proto)\r\n    525             else:\r\n    526                 reduce = getattr(obj, \"__reduce__\", None)\r\n\r\nTypeError: can't pickle cell objects\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/327", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/327/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/327/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/327/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/327", "id": 552993917, "node_id": "MDU6SXNzdWU1NTI5OTM5MTc=", "number": 327, "title": "stale reference needs a gc.collect to be collected in cloudpickle_fast", "user": {"login": "pierreglaser", "id": 18555600, "node_id": "MDQ6VXNlcjE4NTU1NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/18555600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierreglaser", "html_url": "https://github.com/pierreglaser", "followers_url": "https://api.github.com/users/pierreglaser/followers", "following_url": "https://api.github.com/users/pierreglaser/following{/other_user}", "gists_url": "https://api.github.com/users/pierreglaser/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierreglaser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierreglaser/subscriptions", "organizations_url": "https://api.github.com/users/pierreglaser/orgs", "repos_url": "https://api.github.com/users/pierreglaser/repos", "events_url": "https://api.github.com/users/pierreglaser/events{/privacy}", "received_events_url": "https://api.github.com/users/pierreglaser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-21T16:38:00Z", "updated_at": "2020-02-05T09:42:40Z", "closed_at": "2020-02-05T09:42:40Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We noticed test failures in joblib/loky#229 using `Python3.8`. After some investigations, this bug can be reproduced with `cloudpickle` only: apparently, using `Python3.8` and the new  `reducer_override` mechanism, something holds a stale reference until a `gc.collect` call is performed:\r\n\r\n```python\r\nimport threading\r\nimport weakref\r\nimport gc\r\nimport cloudpickle\r\n\r\n\r\nclass MyObject(object):\r\n    def __init__(self, value=0):\r\n        self.value = value\r\n\r\n    def __repr__(self):\r\n        return \"MyObject({})\".format(self.value)\r\n\r\n    def my_method(self):\r\n        pass\r\n\r\n\r\nmy_object = MyObject()\r\ncollect = threading.Event()\r\n_ = weakref.ref(my_object, lambda obj: collect.set())  # noqa\r\ncloudpickle.dumps(my_object)\r\n\r\ndel my_object\r\n\r\n# Uncomment this line and the reference will be collected\r\n# gc.collect()\r\n\r\ncollected = False\r\nfor i in range(5):\r\n    collected = collect.wait(timeout=1.0)\r\n    if collected:\r\n        break\r\nassert collected, \"Stale reference not collected within timeout.\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/321", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/321/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/321/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/321/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/321", "id": 547542167, "node_id": "MDU6SXNzdWU1NDc1NDIxNjc=", "number": 321, "title": "Cannot pickle properties with python 3.8", "user": {"login": "mhooreman", "id": 7373718, "node_id": "MDQ6VXNlcjczNzM3MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/7373718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mhooreman", "html_url": "https://github.com/mhooreman", "followers_url": "https://api.github.com/users/mhooreman/followers", "following_url": "https://api.github.com/users/mhooreman/following{/other_user}", "gists_url": "https://api.github.com/users/mhooreman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mhooreman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mhooreman/subscriptions", "organizations_url": "https://api.github.com/users/mhooreman/orgs", "repos_url": "https://api.github.com/users/mhooreman/repos", "events_url": "https://api.github.com/users/mhooreman/events{/privacy}", "received_events_url": "https://api.github.com/users/mhooreman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135100, "node_id": "MDU6TGFiZWwxOTkxMzUxMDA=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-09T15:17:56Z", "updated_at": "2020-01-27T12:17:51Z", "closed_at": "2020-01-27T10:53:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThe following code, which uses joblib with cloudpickle backend, crashes with python 3.8.1, but works with python 3.7.4. Can you fix it?\r\n\r\nThanks\r\n\r\nPython code:\r\n```python\r\nimport joblib as jl\r\n\r\nclass Test:\r\n    def __init__(self, a):\r\n        self._a = a \r\n\r\n    @property \r\n    def a(self): \r\n        return self._a \r\n\r\n\r\ndef jlcb(x):\r\n    Test(x).a\r\n\r\njl.Parallel(n_jobs=-1)(jl.delayed(jlcb)(z) for z in range(100))\r\n```\r\n\r\nException with python 3.8.1 (paths partially replaced with \"#########\")\r\n```text\r\njoblib.externals.loky.process_executor._RemoteTraceback: \r\n\"\"\"\r\nTraceback (most recent call last):\r\n  File \"#########/.local/share/virtualenvs/3.8-tCZLdKH5/lib/python3.8/site-packages/joblib/externals/loky/backend/queues.py\", line 150, in _feed\r\n    obj_ = dumps(obj, reducers=reducers)\r\n  File \"#########/.local/share/virtualenvs/3.8-tCZLdKH5/lib/python3.8/site-packages/joblib/externals/loky/backend/reduction.py\", line 247, in dumps\r\n    dump(obj, buf, reducers=reducers, protocol=protocol)\r\n  File \"#########/.local/share/virtualenvs/3.8-tCZLdKH5/lib/python3.8/site-packages/joblib/externals/loky/backend/reduction.py\", line 240, in dump\r\n    _LokyPickler(file, reducers=reducers, protocol=protocol).dump(obj)\r\n  File \"#########/.local/share/virtualenvs/3.8-tCZLdKH5/lib/python3.8/site-packages/joblib/externals/cloudpickle/cloudpickle_fast.py\", line 538, in dump\r\n    return Pickler.dump(self, obj)\r\nTypeError: cannot pickle 'property' object\r\n\"\"\"\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"../demo_joblib.py\", line 15, in <module>\r\n    jl.Parallel(n_jobs=-1)(jl.delayed(jlcb)(z) for z in range(100))\r\n  File \"#########/.local/share/virtualenvs/3.8-tCZLdKH5/lib/python3.8/site-packages/joblib/parallel.py\", line 1017, in __call__\r\n    self.retrieve()\r\n  File \"#########/.local/share/virtualenvs/3.8-tCZLdKH5/lib/python3.8/site-packages/joblib/parallel.py\", line 909, in retrieve\r\n    self._output.extend(job.get(timeout=self.timeout))\r\n  File \"#########/.local/share/virtualenvs/3.8-tCZLdKH5/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 562, in wrap_future_result\r\n    return future.result(timeout=timeout)\r\n  File \"/opt/python/3.8.1/lib/python3.8/concurrent/futures/_base.py\", line 439, in result\r\n    return self.__get_result()\r\n  File \"/opt/python/3.8.1/lib/python3.8/concurrent/futures/_base.py\", line 388, in __get_result\r\n    raise self._exception\r\n_pickle.PicklingError: Could not pickle the task to send it to the workers.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/319", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/319/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/319/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/319/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/319", "id": 543024201, "node_id": "MDU6SXNzdWU1NDMwMjQyMDE=", "number": 319, "title": "Can't cloudpickle gin-configured class", "user": {"login": "piojanu", "id": 23562932, "node_id": "MDQ6VXNlcjIzNTYyOTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/23562932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piojanu", "html_url": "https://github.com/piojanu", "followers_url": "https://api.github.com/users/piojanu/followers", "following_url": "https://api.github.com/users/piojanu/following{/other_user}", "gists_url": "https://api.github.com/users/piojanu/gists{/gist_id}", "starred_url": "https://api.github.com/users/piojanu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piojanu/subscriptions", "organizations_url": "https://api.github.com/users/piojanu/orgs", "repos_url": "https://api.github.com/users/piojanu/repos", "events_url": "https://api.github.com/users/piojanu/events{/privacy}", "received_events_url": "https://api.github.com/users/piojanu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-27T23:59:31Z", "updated_at": "2020-01-06T16:47:47Z", "closed_at": "2020-01-06T16:47:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "See also: https://github.com/google/gin-config/issues/42.\r\n\r\nRunning this code...\r\n\r\n```\r\nimport cloudpickle\r\nimport gin\r\nimport pickle\r\n\r\n\r\n@gin.configurable\r\ndef msg_fn(msg):\r\n    return msg\r\n\r\n\r\n@gin.configurable\r\nclass Foo:\r\n    def __init__(self, msg_fn):\r\n        self.msg = msg_fn()\r\n\r\n\r\nconfig = \"\"\"\r\nmsg_fn.msg = \"Hello World\"\r\nFoo.msg_fn = @msg_fn\r\n\"\"\"\r\ngin.parse_config(config)\r\n\r\ntry:\r\n    pkl = pickle.dumps(Foo)\r\n    foo = pickle.loads(pkl)()\r\n    print(\"Can pickle: {}!\".format(foo.msg))\r\nexcept:\r\n    print(\"Can't pickle!\")\r\n\r\ntry:\r\n    cpkl = cloudpickle.dumps(Foo)\r\n    foo = cloudpickle.loads(cpkl)()\r\n    print(\"Can cloudpickle: {}!\".format(foo.msg))\r\nexcept:\r\n    print(\"Can't cloudpickle!\")\r\n```\r\n...prints:\r\n\r\n```\r\nCan pickle: Hello World!!\r\nCan't cloudpickle!\r\n```\r\n\r\nNote that this will rise error too:\r\n\r\n```\r\n@gin.configurable\r\nclass Bar:\r\n    pass\r\ncloudpickle.dumps(Bar)\r\n```\r\n\r\nCloudpickle rises Error on `cloudpickle.dumps()`: `TypeError: can't pickle _thread.lock objects`.\r\n\r\nThis is a problem because [Ray](https://ray.readthedocs.io/en/latest/index.html) uses cloudpickle to serialize objects. We can't send [gin](https://github.com/google/gin-config) configurable classes to Ray actors or Ray object store (with `ray.put`). Is it a bug or should it be done differently? I didn't know where to open this issue (in gin-config, ray or here). Can you help us with this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/316", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/316/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/316/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/316/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/316", "id": 540234791, "node_id": "MDU6SXNzdWU1NDAyMzQ3OTE=", "number": 316, "title": "With (I guess) update to scipy 1.4.0 test_dynamic_module and test_load_dynamic_module_in_grandchild_process break", "user": {"login": "mcepl", "id": 198999, "node_id": "MDQ6VXNlcjE5ODk5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/198999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcepl", "html_url": "https://github.com/mcepl", "followers_url": "https://api.github.com/users/mcepl/followers", "following_url": "https://api.github.com/users/mcepl/following{/other_user}", "gists_url": "https://api.github.com/users/mcepl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcepl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcepl/subscriptions", "organizations_url": "https://api.github.com/users/mcepl/orgs", "repos_url": "https://api.github.com/users/mcepl/repos", "events_url": "https://api.github.com/users/mcepl/events{/privacy}", "received_events_url": "https://api.github.com/users/mcepl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135100, "node_id": "MDU6TGFiZWwxOTkxMzUxMDA=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-19T10:49:36Z", "updated_at": "2020-01-29T22:34:11Z", "closed_at": "2020-01-29T22:34:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "When building packages for openSUSE I observe this:\r\n\r\n* With Python 3.7.3, scipy 1.3.1, and cloudpickle 1.2.2 test suite passes without any problems\r\n\r\n* With the same Python, same cloudpickle, but scipy 1.4.0 I get CloudPickleTest::test_dynamic_module, CloudPickleTest::test_load_dynamic_module_in_grandchild_process, Protocol2CloudPickleTest::test_dynamic_module, and Protocol2CloudPickleTest::test_load_dynamic_module_in_grandchild_process failing:\r\n\r\n```\r\n[   40s] =================================== FAILURES ===================================\r\n[   40s] _____________________ CloudPickleTest.test_dynamic_module ______________________\r\n[   40s] \r\n[   40s] self = <tests.cloudpickle_test.CloudPickleTest testMethod=test_dynamic_module>\r\n[   40s] \r\n[   40s]     def test_dynamic_module(self):\r\n[   40s]         mod = types.ModuleType('mod')\r\n[   40s]         code = '''\r\n[   40s]         x = 1\r\n[   40s]         def f(y):\r\n[   40s]             return x + y\r\n[   40s]     \r\n[   40s]         class Foo:\r\n[   40s]             def method(self, x):\r\n[   40s]                 return f(x)\r\n[   40s]         '''\r\n[   40s]         exec(textwrap.dedent(code), mod.__dict__)\r\n[   40s] >       mod2 = pickle_depickle(mod, protocol=self.protocol)\r\n[   40s] \r\n[   40s] tests/cloudpickle_test.py:474: \r\n[   40s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[   40s] tests/cloudpickle_test.py:67: in pickle_depickle\r\n[   40s]     return pickle.loads(cloudpickle.dumps(obj, protocol=protocol))\r\n[   40s] cloudpickle/cloudpickle.py:1125: in dumps\r\n[   40s]     cp.dump(obj)\r\n[   40s] cloudpickle/cloudpickle.py:482: in dump\r\n[   40s]     return Pickler.dump(self, obj)\r\n[   40s] /usr/lib64/python3.7/pickle.py:437: in dump\r\n[   40s]     self.save(obj)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] cloudpickle/cloudpickle.py:507: in save_module\r\n[   40s]     obj=obj)\r\n[   40s] /usr/lib64/python3.7/pickle.py:638: in save_reduce\r\n[   40s]     save(args)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] /usr/lib64/python3.7/pickle.py:771: in save_tuple\r\n[   40s]     save(element)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] /usr/lib64/python3.7/pickle.py:856: in save_dict\r\n[   40s]     self._batch_setitems(obj.items())\r\n[   40s] /usr/lib64/python3.7/pickle.py:882: in _batch_setitems\r\n[   40s]     save(v)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] /usr/lib64/python3.7/pickle.py:856: in save_dict\r\n[   40s]     self._batch_setitems(obj.items())\r\n[   40s] /usr/lib64/python3.7/pickle.py:882: in _batch_setitems\r\n[   40s]     save(v)\r\n[   40s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[   40s] \r\n[   40s] self = <cloudpickle.cloudpickle.CloudPickler object at 0x7f697bee6a20>\r\n[   40s] obj = <capsule object NULL at 0x7f697cf9d660>, save_persistent_id = True\r\n[   40s] \r\n[   40s]     def save(self, obj, save_persistent_id=True):\r\n[   40s]         self.framer.commit_frame()\r\n[   40s]     \r\n[   40s]         # Check for persistent id (defined by a subclass)\r\n[   40s]         pid = self.persistent_id(obj)\r\n[   40s]         if pid is not None and save_persistent_id:\r\n[   40s]             self.save_pers(pid)\r\n[   40s]             return\r\n[   40s]     \r\n[   40s]         # Check the memo\r\n[   40s]         x = self.memo.get(id(obj))\r\n[   40s]         if x is not None:\r\n[   40s]             self.write(self.get(x[0]))\r\n[   40s]             return\r\n[   40s]     \r\n[   40s]         # Check the type dispatch table\r\n[   40s]         t = type(obj)\r\n[   40s]         f = self.dispatch.get(t)\r\n[   40s]         if f is not None:\r\n[   40s]             f(self, obj) # Call unbound method with explicit self\r\n[   40s]             return\r\n[   40s]     \r\n[   40s]         # Check private dispatch table if any, or else copyreg.dispatch_table\r\n[   40s]         reduce = getattr(self, 'dispatch_table', dispatch_table).get(t)\r\n[   40s]         if reduce is not None:\r\n[   40s]             rv = reduce(obj)\r\n[   40s]         else:\r\n[   40s]             # Check for a class with a custom metaclass; treat as regular class\r\n[   40s]             try:\r\n[   40s]                 issc = issubclass(t, type)\r\n[   40s]             except TypeError: # t is not a class (old Boost; see SF #502085)\r\n[   40s]                 issc = False\r\n[   40s]             if issc:\r\n[   40s]                 self.save_global(obj)\r\n[   40s]                 return\r\n[   40s]     \r\n[   40s]             # Check for a __reduce_ex__ method, fall back to __reduce__\r\n[   40s]             reduce = getattr(obj, \"__reduce_ex__\", None)\r\n[   40s]             if reduce is not None:\r\n[   40s] >               rv = reduce(self.proto)\r\n[   40s] E               TypeError: can't pickle PyCapsule objects\r\n[   40s] \r\n[   40s] /usr/lib64/python3.7/pickle.py:524: TypeError\r\n[   40s] ________ CloudPickleTest.test_load_dynamic_module_in_grandchild_process ________\r\n[   40s] \r\n[   40s] self = <tests.cloudpickle_test.CloudPickleTest testMethod=test_load_dynamic_module_in_grandchild_process>\r\n[   40s] \r\n[   40s]     def test_load_dynamic_module_in_grandchild_process(self):\r\n[   40s]         # Make sure that when loaded, a dynamic module preserves its dynamic\r\n[   40s]         # property. Otherwise, this will lead to an ImportError if pickled in\r\n[   40s]         # the child process and reloaded in another one.\r\n[   40s]     \r\n[   40s]         # We create a new dynamic module\r\n[   40s]         mod = types.ModuleType('mod')\r\n[   40s]         code = '''\r\n[   40s]         x = 1\r\n[   40s]         '''\r\n[   40s]         exec(textwrap.dedent(code), mod.__dict__)\r\n[   40s]     \r\n[   40s]         # This script will be ran in a separate child process. It will import\r\n[   40s]         # the pickled dynamic module, and then re-pickle it under a new name.\r\n[   40s]         # Finally, it will create a child process that will load the re-pickled\r\n[   40s]         # dynamic module.\r\n[   40s]         parent_process_module_file = os.path.join(\r\n[   40s]             self.tmpdir, 'dynamic_module_from_parent_process.pkl')\r\n[   40s]         child_process_module_file = os.path.join(\r\n[   40s]             self.tmpdir, 'dynamic_module_from_child_process.pkl')\r\n[   40s]         child_process_script = '''\r\n[   40s]             import pickle\r\n[   40s]             import textwrap\r\n[   40s]     \r\n[   40s]             import cloudpickle\r\n[   40s]             from testutils import assert_run_python_script\r\n[   40s]     \r\n[   40s]     \r\n[   40s]             child_of_child_process_script = {child_of_child_process_script}\r\n[   40s]     \r\n[   40s]             with open('{parent_process_module_file}', 'rb') as f:\r\n[   40s]                 mod = pickle.load(f)\r\n[   40s]     \r\n[   40s]             with open('{child_process_module_file}', 'wb') as f:\r\n[   40s]                 cloudpickle.dump(mod, f, protocol={protocol})\r\n[   40s]     \r\n[   40s]             assert_run_python_script(textwrap.dedent(child_of_child_process_script))\r\n[   40s]             '''\r\n[   40s]     \r\n[   40s]         # The script ran by the process created by the child process\r\n[   40s]         child_of_child_process_script = \"\"\" '''\r\n[   40s]                 import pickle\r\n[   40s]                 with open('{child_process_module_file}','rb') as fid:\r\n[   40s]                     mod = pickle.load(fid)\r\n[   40s]                 ''' \"\"\"\r\n[   40s]     \r\n[   40s]         # Filling the two scripts with the pickled modules filepaths and,\r\n[   40s]         # for the first child process, the script to be executed by its\r\n[   40s]         # own child process.\r\n[   40s]         child_of_child_process_script = child_of_child_process_script.format(\r\n[   40s]                 child_process_module_file=child_process_module_file)\r\n[   40s]     \r\n[   40s]         child_process_script = child_process_script.format(\r\n[   40s]             parent_process_module_file=_escape(parent_process_module_file),\r\n[   40s]             child_process_module_file=_escape(child_process_module_file),\r\n[   40s]             child_of_child_process_script=_escape(child_of_child_process_script),\r\n[   40s]             protocol=self.protocol)\r\n[   40s]     \r\n[   40s]         try:\r\n[   40s]             with open(parent_process_module_file, 'wb') as fid:\r\n[   40s] >               cloudpickle.dump(mod, fid, protocol=self.protocol)\r\n[   40s] \r\n[   40s] tests/cloudpickle_test.py:591: \r\n[   40s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[   40s] cloudpickle/cloudpickle.py:1109: in dump\r\n[   40s]     CloudPickler(file, protocol=protocol).dump(obj)\r\n[   40s] cloudpickle/cloudpickle.py:482: in dump\r\n[   40s]     return Pickler.dump(self, obj)\r\n[   40s] /usr/lib64/python3.7/pickle.py:437: in dump\r\n[   40s]     self.save(obj)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] cloudpickle/cloudpickle.py:507: in save_module\r\n[   40s]     obj=obj)\r\n[   40s] /usr/lib64/python3.7/pickle.py:638: in save_reduce\r\n[   40s]     save(args)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] /usr/lib64/python3.7/pickle.py:771: in save_tuple\r\n[   40s]     save(element)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] /usr/lib64/python3.7/pickle.py:856: in save_dict\r\n[   40s]     self._batch_setitems(obj.items())\r\n[   40s] /usr/lib64/python3.7/pickle.py:882: in _batch_setitems\r\n[   40s]     save(v)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] /usr/lib64/python3.7/pickle.py:856: in save_dict\r\n[   40s]     self._batch_setitems(obj.items())\r\n[   40s] /usr/lib64/python3.7/pickle.py:882: in _batch_setitems\r\n[   40s]     save(v)\r\n[   40s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[   40s] \r\n[   40s] self = <cloudpickle.cloudpickle.CloudPickler object at 0x7f697ba60550>\r\n[   40s] obj = <capsule object NULL at 0x7f697cf9d660>, save_persistent_id = True\r\n[   40s] \r\n[   40s]     def save(self, obj, save_persistent_id=True):\r\n[   40s]         self.framer.commit_frame()\r\n[   40s]     \r\n[   40s]         # Check for persistent id (defined by a subclass)\r\n[   40s]         pid = self.persistent_id(obj)\r\n[   40s]         if pid is not None and save_persistent_id:\r\n[   40s]             self.save_pers(pid)\r\n[   40s]             return\r\n[   40s]     \r\n[   40s]         # Check the memo\r\n[   40s]         x = self.memo.get(id(obj))\r\n[   40s]         if x is not None:\r\n[   40s]             self.write(self.get(x[0]))\r\n[   40s]             return\r\n[   40s]     \r\n[   40s]         # Check the type dispatch table\r\n[   40s]         t = type(obj)\r\n[   40s]         f = self.dispatch.get(t)\r\n[   40s]         if f is not None:\r\n[   40s]             f(self, obj) # Call unbound method with explicit self\r\n[   40s]             return\r\n[   40s]     \r\n[   40s]         # Check private dispatch table if any, or else copyreg.dispatch_table\r\n[   40s]         reduce = getattr(self, 'dispatch_table', dispatch_table).get(t)\r\n[   40s]         if reduce is not None:\r\n[   40s]             rv = reduce(obj)\r\n[   40s]         else:\r\n[   40s]             # Check for a class with a custom metaclass; treat as regular class\r\n[   40s]             try:\r\n[   40s]                 issc = issubclass(t, type)\r\n[   40s]             except TypeError: # t is not a class (old Boost; see SF #502085)\r\n[   40s]                 issc = False\r\n[   40s]             if issc:\r\n[   40s]                 self.save_global(obj)\r\n[   40s]                 return\r\n[   40s]     \r\n[   40s]             # Check for a __reduce_ex__ method, fall back to __reduce__\r\n[   40s]             reduce = getattr(obj, \"__reduce_ex__\", None)\r\n[   40s]             if reduce is not None:\r\n[   40s] >               rv = reduce(self.proto)\r\n[   40s] E               TypeError: can't pickle PyCapsule objects\r\n[   40s] \r\n[   40s] /usr/lib64/python3.7/pickle.py:524: TypeError\r\n[   40s] _________________ Protocol2CloudPickleTest.test_dynamic_module _________________\r\n[   40s] \r\n[   40s] self = <tests.cloudpickle_test.Protocol2CloudPickleTest testMethod=test_dynamic_module>\r\n[   40s] \r\n[   40s]     def test_dynamic_module(self):\r\n[   40s]         mod = types.ModuleType('mod')\r\n[   40s]         code = '''\r\n[   40s]         x = 1\r\n[   40s]         def f(y):\r\n[   40s]             return x + y\r\n[   40s]     \r\n[   40s]         class Foo:\r\n[   40s]             def method(self, x):\r\n[   40s]                 return f(x)\r\n[   40s]         '''\r\n[   40s]         exec(textwrap.dedent(code), mod.__dict__)\r\n[   40s] >       mod2 = pickle_depickle(mod, protocol=self.protocol)\r\n[   40s] \r\n[   40s] tests/cloudpickle_test.py:474: \r\n[   40s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[   40s] tests/cloudpickle_test.py:67: in pickle_depickle\r\n[   40s]     return pickle.loads(cloudpickle.dumps(obj, protocol=protocol))\r\n[   40s] cloudpickle/cloudpickle.py:1125: in dumps\r\n[   40s]     cp.dump(obj)\r\n[   40s] cloudpickle/cloudpickle.py:482: in dump\r\n[   40s]     return Pickler.dump(self, obj)\r\n[   40s] /usr/lib64/python3.7/pickle.py:437: in dump\r\n[   40s]     self.save(obj)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] cloudpickle/cloudpickle.py:507: in save_module\r\n[   40s]     obj=obj)\r\n[   40s] /usr/lib64/python3.7/pickle.py:638: in save_reduce\r\n[   40s]     save(args)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] /usr/lib64/python3.7/pickle.py:771: in save_tuple\r\n[   40s]     save(element)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] /usr/lib64/python3.7/pickle.py:856: in save_dict\r\n[   40s]     self._batch_setitems(obj.items())\r\n[   40s] /usr/lib64/python3.7/pickle.py:882: in _batch_setitems\r\n[   40s]     save(v)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] /usr/lib64/python3.7/pickle.py:856: in save_dict\r\n[   40s]     self._batch_setitems(obj.items())\r\n[   40s] /usr/lib64/python3.7/pickle.py:882: in _batch_setitems\r\n[   40s]     save(v)\r\n[   40s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[   40s] \r\n[   40s] self = <cloudpickle.cloudpickle.CloudPickler object at 0x7f697be7ef98>\r\n[   40s] obj = <capsule object NULL at 0x7f697cf9d660>, save_persistent_id = True\r\n[   40s] \r\n[   40s]     def save(self, obj, save_persistent_id=True):\r\n[   40s]         self.framer.commit_frame()\r\n[   40s]     \r\n[   40s]         # Check for persistent id (defined by a subclass)\r\n[   40s]         pid = self.persistent_id(obj)\r\n[   40s]         if pid is not None and save_persistent_id:\r\n[   40s]             self.save_pers(pid)\r\n[   40s]             return\r\n[   40s]     \r\n[   40s]         # Check the memo\r\n[   40s]         x = self.memo.get(id(obj))\r\n[   40s]         if x is not None:\r\n[   40s]             self.write(self.get(x[0]))\r\n[   40s]             return\r\n[   40s]     \r\n[   40s]         # Check the type dispatch table\r\n[   40s]         t = type(obj)\r\n[   40s]         f = self.dispatch.get(t)\r\n[   40s]         if f is not None:\r\n[   40s]             f(self, obj) # Call unbound method with explicit self\r\n[   40s]             return\r\n[   40s]     \r\n[   40s]         # Check private dispatch table if any, or else copyreg.dispatch_table\r\n[   40s]         reduce = getattr(self, 'dispatch_table', dispatch_table).get(t)\r\n[   40s]         if reduce is not None:\r\n[   40s]             rv = reduce(obj)\r\n[   40s]         else:\r\n[   40s]             # Check for a class with a custom metaclass; treat as regular class\r\n[   40s]             try:\r\n[   40s]                 issc = issubclass(t, type)\r\n[   40s]             except TypeError: # t is not a class (old Boost; see SF #502085)\r\n[   40s]                 issc = False\r\n[   40s]             if issc:\r\n[   40s]                 self.save_global(obj)\r\n[   40s]                 return\r\n[   40s]     \r\n[   40s]             # Check for a __reduce_ex__ method, fall back to __reduce__\r\n[   40s]             reduce = getattr(obj, \"__reduce_ex__\", None)\r\n[   40s]             if reduce is not None:\r\n[   40s] >               rv = reduce(self.proto)\r\n[   40s] E               TypeError: can't pickle PyCapsule objects\r\n[   40s] \r\n[   40s] /usr/lib64/python3.7/pickle.py:524: TypeError\r\n[   40s] ___ Protocol2CloudPickleTest.test_load_dynamic_module_in_grandchild_process ____\r\n[   40s] \r\n[   40s] self = <tests.cloudpickle_test.Protocol2CloudPickleTest testMethod=test_load_dynamic_module_in_grandchild_process>\r\n[   40s] \r\n[   40s]     def test_load_dynamic_module_in_grandchild_process(self):\r\n[   40s]         # Make sure that when loaded, a dynamic module preserves its dynamic\r\n[   40s]         # property. Otherwise, this will lead to an ImportError if pickled in\r\n[   40s]         # the child process and reloaded in another one.\r\n[   40s]     \r\n[   40s]         # We create a new dynamic module\r\n[   40s]         mod = types.ModuleType('mod')\r\n[   40s]         code = '''\r\n[   40s]         x = 1\r\n[   40s]         '''\r\n[   40s]         exec(textwrap.dedent(code), mod.__dict__)\r\n[   40s]     \r\n[   40s]         # This script will be ran in a separate child process. It will import\r\n[   40s]         # the pickled dynamic module, and then re-pickle it under a new name.\r\n[   40s]         # Finally, it will create a child process that will load the re-pickled\r\n[   40s]         # dynamic module.\r\n[   40s]         parent_process_module_file = os.path.join(\r\n[   40s]             self.tmpdir, 'dynamic_module_from_parent_process.pkl')\r\n[   40s]         child_process_module_file = os.path.join(\r\n[   40s]             self.tmpdir, 'dynamic_module_from_child_process.pkl')\r\n[   40s]         child_process_script = '''\r\n[   40s]             import pickle\r\n[   40s]             import textwrap\r\n[   40s]     \r\n[   40s]             import cloudpickle\r\n[   40s]             from testutils import assert_run_python_script\r\n[   40s]     \r\n[   40s]     \r\n[   40s]             child_of_child_process_script = {child_of_child_process_script}\r\n[   40s]     \r\n[   40s]             with open('{parent_process_module_file}', 'rb') as f:\r\n[   40s]                 mod = pickle.load(f)\r\n[   40s]     \r\n[   40s]             with open('{child_process_module_file}', 'wb') as f:\r\n[   40s]                 cloudpickle.dump(mod, f, protocol={protocol})\r\n[   40s]     \r\n[   40s]             assert_run_python_script(textwrap.dedent(child_of_child_process_script))\r\n[   40s]             '''\r\n[   40s]     \r\n[   40s]         # The script ran by the process created by the child process\r\n[   40s]         child_of_child_process_script = \"\"\" '''\r\n[   40s]                 import pickle\r\n[   40s]                 with open('{child_process_module_file}','rb') as fid:\r\n[   40s]                     mod = pickle.load(fid)\r\n[   40s]                 ''' \"\"\"\r\n[   40s]     \r\n[   40s]         # Filling the two scripts with the pickled modules filepaths and,\r\n[   40s]         # for the first child process, the script to be executed by its\r\n[   40s]         # own child process.\r\n[   40s]         child_of_child_process_script = child_of_child_process_script.format(\r\n[   40s]                 child_process_module_file=child_process_module_file)\r\n[   40s]     \r\n[   40s]         child_process_script = child_process_script.format(\r\n[   40s]             parent_process_module_file=_escape(parent_process_module_file),\r\n[   40s]             child_process_module_file=_escape(child_process_module_file),\r\n[   40s]             child_of_child_process_script=_escape(child_of_child_process_script),\r\n[   40s]             protocol=self.protocol)\r\n[   40s]     \r\n[   40s]         try:\r\n[   40s]             with open(parent_process_module_file, 'wb') as fid:\r\n[   40s] >               cloudpickle.dump(mod, fid, protocol=self.protocol)\r\n[   40s] \r\n[   40s] tests/cloudpickle_test.py:591: \r\n[   40s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[   40s] cloudpickle/cloudpickle.py:1109: in dump\r\n[   40s]     CloudPickler(file, protocol=protocol).dump(obj)\r\n[   40s] cloudpickle/cloudpickle.py:482: in dump\r\n[   40s]     return Pickler.dump(self, obj)\r\n[   40s] /usr/lib64/python3.7/pickle.py:437: in dump\r\n[   40s]     self.save(obj)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] cloudpickle/cloudpickle.py:507: in save_module\r\n[   40s]     obj=obj)\r\n[   40s] /usr/lib64/python3.7/pickle.py:638: in save_reduce\r\n[   40s]     save(args)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] /usr/lib64/python3.7/pickle.py:771: in save_tuple\r\n[   40s]     save(element)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] /usr/lib64/python3.7/pickle.py:856: in save_dict\r\n[   40s]     self._batch_setitems(obj.items())\r\n[   40s] /usr/lib64/python3.7/pickle.py:882: in _batch_setitems\r\n[   40s]     save(v)\r\n[   40s] /usr/lib64/python3.7/pickle.py:504: in save\r\n[   40s]     f(self, obj) # Call unbound method with explicit self\r\n[   40s] /usr/lib64/python3.7/pickle.py:856: in save_dict\r\n[   40s]     self._batch_setitems(obj.items())\r\n[   40s] /usr/lib64/python3.7/pickle.py:882: in _batch_setitems\r\n[   40s]     save(v)\r\n[   40s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[   40s] \r\n[   40s] self = <cloudpickle.cloudpickle.CloudPickler object at 0x7f697ba60978>\r\n[   40s] obj = <capsule object NULL at 0x7f697cf9d660>, save_persistent_id = True\r\n[   40s] \r\n[   40s]     def save(self, obj, save_persistent_id=True):\r\n[   40s]         self.framer.commit_frame()\r\n[   40s]     \r\n[   40s]         # Check for persistent id (defined by a subclass)\r\n[   40s]         pid = self.persistent_id(obj)\r\n[   40s]         if pid is not None and save_persistent_id:\r\n[   40s]             self.save_pers(pid)\r\n[   40s]             return\r\n[   40s]     \r\n[   40s]         # Check the memo\r\n[   40s]         x = self.memo.get(id(obj))\r\n[   40s]         if x is not None:\r\n[   40s]             self.write(self.get(x[0]))\r\n[   40s]             return\r\n[   40s]     \r\n[   40s]         # Check the type dispatch table\r\n[   40s]         t = type(obj)\r\n[   40s]         f = self.dispatch.get(t)\r\n[   40s]         if f is not None:\r\n[   40s]             f(self, obj) # Call unbound method with explicit self\r\n[   40s]             return\r\n[   40s]     \r\n[   40s]         # Check private dispatch table if any, or else copyreg.dispatch_table\r\n[   40s]         reduce = getattr(self, 'dispatch_table', dispatch_table).get(t)\r\n[   40s]         if reduce is not None:\r\n[   40s]             rv = reduce(obj)\r\n[   40s]         else:\r\n[   40s]             # Check for a class with a custom metaclass; treat as regular class\r\n[   40s]             try:\r\n[   40s]                 issc = issubclass(t, type)\r\n[   40s]             except TypeError: # t is not a class (old Boost; see SF #502085)\r\n[   40s]                 issc = False\r\n[   40s]             if issc:\r\n[   40s]                 self.save_global(obj)\r\n[   40s]                 return\r\n[   40s]     \r\n[   40s]             # Check for a __reduce_ex__ method, fall back to __reduce__\r\n[   40s]             reduce = getattr(obj, \"__reduce_ex__\", None)\r\n[   40s]             if reduce is not None:\r\n[   40s] >               rv = reduce(self.proto)\r\n[   40s] E               TypeError: can't pickle PyCapsule objects\r\n[   40s] \r\n[   40s] /usr/lib64/python3.7/pickle.py:524: TypeError\r\n[   40s] =================== 4 failed, 174 passed, 7 skipped in 8.99s ===================\r\n```\r\n[Full build log](https://github.com/cloudpipe/cloudpickle/files/3983154/_log.txt) is attached as well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/311", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/311/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/311/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/311/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/311", "id": 511460475, "node_id": "MDU6SXNzdWU1MTE0NjA0NzU=", "number": 311, "title": "failed to pickle objects inherited from __slots__ in 1.2.2", "user": {"login": "hotpxl", "id": 2174815, "node_id": "MDQ6VXNlcjIxNzQ4MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2174815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hotpxl", "html_url": "https://github.com/hotpxl", "followers_url": "https://api.github.com/users/hotpxl/followers", "following_url": "https://api.github.com/users/hotpxl/following{/other_user}", "gists_url": "https://api.github.com/users/hotpxl/gists{/gist_id}", "starred_url": "https://api.github.com/users/hotpxl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hotpxl/subscriptions", "organizations_url": "https://api.github.com/users/hotpxl/orgs", "repos_url": "https://api.github.com/users/hotpxl/repos", "events_url": "https://api.github.com/users/hotpxl/events{/privacy}", "received_events_url": "https://api.github.com/users/hotpxl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-23T17:12:48Z", "updated_at": "2020-02-10T13:50:58Z", "closed_at": "2020-02-10T13:50:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "My first test program is\r\n```\r\nclass Base(object):\r\n    __slots__ = []\r\n\r\nclass Inherited(Base):\r\n    def __init__(self, v):\r\n        self.v = v\r\n\r\nimport cloudpickle\r\n\r\na = Inherited(1)\r\nwith open(\"pickle\", \"wb\") as f:\r\n    cloudpickle.dump(a, f)\r\n```\r\nAnd then I read the pickle file with\r\n```\r\nimport cloudpickle\r\n\r\nwith open(\"pickle\", \"rb\") as f:\r\n    cloudpickle.load(f)\r\n```\r\n\r\nWhen I run this with Python 3 and cloudpickle 1.2.2, it gives me error\r\n```\r\nTraceback (most recent call last):\r\n  File \"algo/code2.py\", line 4, in <module>\r\n    cloudpickle.load(f)\r\nAttributeError: 'Inherited' object has no attribute '__dict__'\r\n```\r\n\r\nBut this runs fine under Python 2 and cloudpickle 0.5.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/305", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/305/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/305/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/305", "id": 490694039, "node_id": "MDU6SXNzdWU0OTA2OTQwMzk=", "number": 305, "title": "replace vendored cloudpickle in pyspark for python 3.7 support?", "user": {"login": "AlJohri", "id": 2790092, "node_id": "MDQ6VXNlcjI3OTAwOTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2790092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlJohri", "html_url": "https://github.com/AlJohri", "followers_url": "https://api.github.com/users/AlJohri/followers", "following_url": "https://api.github.com/users/AlJohri/following{/other_user}", "gists_url": "https://api.github.com/users/AlJohri/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlJohri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlJohri/subscriptions", "organizations_url": "https://api.github.com/users/AlJohri/orgs", "repos_url": "https://api.github.com/users/AlJohri/repos", "events_url": "https://api.github.com/users/AlJohri/events{/privacy}", "received_events_url": "https://api.github.com/users/AlJohri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-08T00:19:24Z", "updated_at": "2019-09-11T12:05:07Z", "closed_at": "2019-09-11T12:05:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to replace the default PySpark (python) serializer doing the following:\r\n\r\n```python\r\nimport cloudpickle\r\nfrom pyspark.serializers import PickleSerializer\r\nprint(cloudpickle.__file__) # returns my newly installed cloudpickle\r\n\r\nclass CloudPickleSerializer(PickleSerializer):\r\n\r\n    def dumps(self, obj):\r\n        print('serializing...')\r\n        print(cloudpickle.__file__)\r\n        return cloudpickle.dumps(obj, 2)\r\n\r\nsc = SparkContext(serializer=CloudPickleSerializer)\r\nspark = SparkSession(sc)\r\n```\r\n\r\nHowever, my custom `CloudPickleSerializer` never gets called. As you can see in the stacktrace below its still using the vendored cloudpickle.\r\n\r\nLooking at the `pyspark.cloudpickle` module, it doesn't have this feature https://github.com/cloudpipe/cloudpickle/pull/189. It will be released in 3.0.0 according to JIRA https://github.com/apache/spark/commit/a67e8426e37af3a19ff44fb1203c94a85c5f23c4\r\nhttps://issues.apache.org/jira/browse/SPARK-27000\r\n\r\nIs there either something wrong with the way in which I'm trying to set the pyspark serializer or is there another way to replace the cloudpickle version vendored with pyspark.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/serializers.py\", line 590, in dumps\r\n    return cloudpickle.dumps(obj, 2)\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/cloudpickle.py\", line 863, in dumps\r\n    cp.dump(obj)\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/cloudpickle.py\", line 260, in dump\r\n    return Pickler.dump(self, obj)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 437, in dump\r\n    self.save(obj)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 771, in save_tuple\r\n    save(element)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/cloudpickle.py\", line 400, in save_function\r\n    self.save_function_tuple(obj)\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/cloudpickle.py\", line 549, in save_function_tuple\r\n    save(state)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 856, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 882, in _batch_setitems\r\n    save(v)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 816, in save_list\r\n    self._batch_appends(obj)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 840, in _batch_appends\r\n    save(x)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 549, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 662, in save_reduce\r\n    save(state)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 856, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 882, in _batch_setitems\r\n    save(v)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 549, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 662, in save_reduce\r\n    save(state)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 856, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 882, in _batch_setitems\r\n    save(v)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 816, in save_list\r\n    self._batch_appends(obj)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 840, in _batch_appends\r\n    save(x)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 771, in save_tuple\r\n    save(element)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 549, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 662, in save_reduce\r\n    save(state)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 856, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 882, in _batch_setitems\r\n    save(v)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 816, in save_list\r\n    self._batch_appends(obj)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 840, in _batch_appends\r\n    save(x)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 771, in save_tuple\r\n    save(element)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 549, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 633, in save_reduce\r\n    save(cls)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 518, in save\r\n    self.save_global(obj)\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/cloudpickle.py\", line 632, in save_global\r\n    return self.save_dynamic_class(obj)\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/cloudpickle.py\", line 491, in save_dynamic_class\r\n    save(clsdict)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 856, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 882, in _batch_setitems\r\n    save(v)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 524, in save\r\n    rv = reduce(self.proto)\r\nTypeError: can't pickle _abc_data objects\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/serializers.py\", line 590, in dumps\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/cloudpickle.py\", line 863, in dumps\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/cloudpickle.py\", line 260, in dump\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 437, in dump\r\n    self.save(obj)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 771, in save_tuple\r\n    save(element)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/cloudpickle.py\", line 400, in save_function\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/cloudpickle.py\", line 549, in save_function_tuple\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 856, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 882, in _batch_setitems\r\n    save(v)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 816, in save_list\r\n    self._batch_appends(obj)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 840, in _batch_appends\r\n    save(x)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 549, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 662, in save_reduce\r\n    save(state)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 856, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 882, in _batch_setitems\r\n    save(v)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 549, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 662, in save_reduce\r\n    save(state)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 856, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 882, in _batch_setitems\r\n    save(v)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 816, in save_list\r\n    self._batch_appends(obj)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 840, in _batch_appends\r\n    save(x)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 771, in save_tuple\r\n    save(element)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 549, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 662, in save_reduce\r\n    save(state)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 856, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 882, in _batch_setitems\r\n    save(v)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 816, in save_list\r\n    self._batch_appends(obj)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 840, in _batch_appends\r\n    save(x)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 771, in save_tuple\r\n    save(element)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 549, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 633, in save_reduce\r\n    save(cls)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 518, in save\r\n    self.save_global(obj)\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/cloudpickle.py\", line 632, in save_global\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/cloudpickle.py\", line 491, in save_dynamic_class\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 504, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 856, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 882, in _batch_setitems\r\n    save(v)\r\n  File \"/opt/python3/lib/python3.7/pickle.py\", line 524, in save\r\n    rv = reduce(self.proto)\r\nTypeError: can't pickle _abc_data objects\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/mnt/repo/predictor/spark/main.py\", line 643, in <module>\r\n    H.run_days(main, dts[0], dts[-1], print_str=None)(spark_session, arg)\r\n  File \"/mnt/repo/predictor/spark/helper.py\", line 74, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/mnt/repo/predictor/spark/helper.py\", line 18, in decorator\r\n    result = func(*args, **kw)\r\n  File \"/mnt/repo/predictor/spark/main.py\", line 621, in main\r\n    df_predict = wlogger(predict)(df_sum)\r\n  File \"/mnt/repo/predictor/spark/helper.py\", line 18, in decorator\r\n    result = func(*args, **kw)\r\n  File \"/mnt/repo/predictor/spark/main.py\", line 521, in predict\r\n    return df.withColumn(\"prediction\", predict_inner(*columns))\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/sql/udf.py\", line 189, in wrapper\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/sql/udf.py\", line 167, in __call__\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/sql/udf.py\", line 151, in _judf\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/sql/udf.py\", line 160, in _create_judf\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/sql/udf.py\", line 35, in _wrap_function\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/rdd.py\", line 2420, in _prepare_for_python_RDD\r\n  File \"/usr/lib/spark/python/lib/pyspark.zip/pyspark/serializers.py\", line 600, in dumps\r\n_pickle.PicklingError: Could not serialize object: TypeError: can't pickle _abc_data objects\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/304", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/304/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/304/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/304/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/304", "id": 488284669, "node_id": "MDU6SXNzdWU0ODgyODQ2Njk=", "number": 304, "title": "cloudpickle cannot serialize tf.keras.Sequential with tensorflow 2.0.", "user": {"login": "robertnishihara", "id": 249517, "node_id": "MDQ6VXNlcjI0OTUxNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/249517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robertnishihara", "html_url": "https://github.com/robertnishihara", "followers_url": "https://api.github.com/users/robertnishihara/followers", "following_url": "https://api.github.com/users/robertnishihara/following{/other_user}", "gists_url": "https://api.github.com/users/robertnishihara/gists{/gist_id}", "starred_url": "https://api.github.com/users/robertnishihara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robertnishihara/subscriptions", "organizations_url": "https://api.github.com/users/robertnishihara/orgs", "repos_url": "https://api.github.com/users/robertnishihara/repos", "events_url": "https://api.github.com/users/robertnishihara/events{/privacy}", "received_events_url": "https://api.github.com/users/robertnishihara/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-02T18:10:11Z", "updated_at": "2020-02-10T13:59:43Z", "closed_at": "2020-02-10T13:59:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I suspect this is an issue on the TensorFlow side, but filing here as well just in case (see https://github.com/tensorflow/tensorflow/issues/32159).\r\n\r\nWhen running\r\n\r\n```python\r\nimport cloudpickle  # cloudpickle.__version__ == '1.2.1'\r\nimport tensorflow as tf  # tf.__version__ == '2.0.0-rc0'\r\n\r\ndef f():\r\n    tf.keras.Sequential\r\n\r\ncloudpickle.loads(cloudpickle.dumps(f))  # This fails.\r\n```\r\n\r\nThe last line fails with\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nRecursionError                            Traceback (most recent call last)\r\n<ipython-input-23-25cc307e6227> in <module>\r\n----> 1 cloudpickle.loads(cloudpickle.dumps(f))\r\n\r\n~/anaconda3/lib/python3.6/site-packages/tensorflow/__init__.py in __getattr__(self, item)\r\n     48 \r\n     49   def __getattr__(self, item):\r\n---> 50     module = self._load()\r\n     51     return getattr(module, item)\r\n     52 \r\n\r\n~/anaconda3/lib/python3.6/site-packages/tensorflow/__init__.py in _load(self)\r\n     42   def _load(self):\r\n     43     \"\"\"Import the target module and insert it into the parent's namespace.\"\"\"\r\n---> 44     module = _importlib.import_module(self.__name__)\r\n     45     self._parent_module_globals[self._local_name] = module\r\n     46     self.__dict__.update(module.__dict__)\r\n\r\n... last 2 frames repeated, from the frame below ...\r\n\r\n~/anaconda3/lib/python3.6/site-packages/tensorflow/__init__.py in __getattr__(self, item)\r\n     48 \r\n     49   def __getattr__(self, item):\r\n---> 50     module = self._load()\r\n     51     return getattr(module, item)\r\n     52 \r\n\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n```\r\n\r\nIt succeeds with `tensorflow==1.14.0`.\r\n\r\nOriginally reported in https://stackoverflow.com/questions/57750920/ray-tensorflow-gpu-2-0-recursionerror/57761034#57761034.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/302", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/302/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/302/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/302", "id": 475528119, "node_id": "MDU6SXNzdWU0NzU1MjgxMTk=", "number": 302, "title": "Failed to loads a dumped MetaClass object", "user": {"login": "Yitso", "id": 19208210, "node_id": "MDQ6VXNlcjE5MjA4MjEw", "avatar_url": "https://avatars2.githubusercontent.com/u/19208210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yitso", "html_url": "https://github.com/Yitso", "followers_url": "https://api.github.com/users/Yitso/followers", "following_url": "https://api.github.com/users/Yitso/following{/other_user}", "gists_url": "https://api.github.com/users/Yitso/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yitso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yitso/subscriptions", "organizations_url": "https://api.github.com/users/Yitso/orgs", "repos_url": "https://api.github.com/users/Yitso/repos", "events_url": "https://api.github.com/users/Yitso/events{/privacy}", "received_events_url": "https://api.github.com/users/Yitso/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-01T07:49:12Z", "updated_at": "2020-02-10T14:10:20Z", "closed_at": "2020-02-10T14:10:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I met a problem when i call cloudpickle.loads.\r\n\r\nThis is my code:\r\n\r\n```python\r\nimport cloudpickle\r\nfrom scrapy.item import Item, Field\r\n\r\nMyItem = type('MyItem', (Item,), dict({'id': Field()}))\r\nitem = MyItem()\r\nprint(cloudpickle.loads(cloudpickle.dumps(item))) # {}\r\nprint(isinstance(dict().values(), MyItem)) # False\r\nprint(cloudpickle.loads(cloudpickle.dumps(item))) # raise \r\n```\r\nI guess the cache of MetaClass cause to this problem.\r\n\r\n`isinstance` call `__instancecheck__` of ABCMeta and finally call `__subclasscheck__` of ABCMeta.\r\ncode: https://github.com/python/cpython/blob/3.5/Lib/abc.py#L210\r\n\r\nAnd cloudpickle.dumps will dumps the `_abc_cache` and `_abc_negative_cache` which has some invalid object, so when I call cloudpickle.loads in second , it raise exception.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/301", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/301/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/301/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/301/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/301", "id": 473568877, "node_id": "MDU6SXNzdWU0NzM1Njg4Nzc=", "number": 301, "title": "pickling NewType raises an error", "user": {"login": "djarecka", "id": 1662746, "node_id": "MDQ6VXNlcjE2NjI3NDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1662746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djarecka", "html_url": "https://github.com/djarecka", "followers_url": "https://api.github.com/users/djarecka/followers", "following_url": "https://api.github.com/users/djarecka/following{/other_user}", "gists_url": "https://api.github.com/users/djarecka/gists{/gist_id}", "starred_url": "https://api.github.com/users/djarecka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djarecka/subscriptions", "organizations_url": "https://api.github.com/users/djarecka/orgs", "repos_url": "https://api.github.com/users/djarecka/repos", "events_url": "https://api.github.com/users/djarecka/events{/privacy}", "received_events_url": "https://api.github.com/users/djarecka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-26T23:25:48Z", "updated_at": "2019-07-29T16:18:28Z", "closed_at": "2019-07-29T16:18:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to pickle a custom-designed type, that uses `typing.NewType`, and I'm getting an error:\r\n```\r\nCan't pickle local object 'NewType.<locals>.new_type'\r\n```\r\n\r\nThe easiest way to reproduce the error:\r\n```\r\nimport cloudpickle as cp\r\nimport typing as ty\r\n\r\nmy_list=ty.NewType(\"my_list\", ty.List)\r\ncp.dumps(my_list)\r\n```\r\n\r\nI'm testing on OSX, python 3.7.3 and cloudpickle 1.2.1., but see the same error testing on travis with Linux.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/298", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/298/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/298/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/298/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/298", "id": 465839313, "node_id": "MDU6SXNzdWU0NjU4MzkzMTM=", "number": 298, "title": "Parametrized type annotation raises error", "user": {"login": "adamklein", "id": 869232, "node_id": "MDQ6VXNlcjg2OTIzMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/869232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamklein", "html_url": "https://github.com/adamklein", "followers_url": "https://api.github.com/users/adamklein/followers", "following_url": "https://api.github.com/users/adamklein/following{/other_user}", "gists_url": "https://api.github.com/users/adamklein/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamklein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamklein/subscriptions", "organizations_url": "https://api.github.com/users/adamklein/orgs", "repos_url": "https://api.github.com/users/adamklein/repos", "events_url": "https://api.github.com/users/adamklein/events{/privacy}", "received_events_url": "https://api.github.com/users/adamklein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-09T15:13:48Z", "updated_at": "2019-09-11T09:16:09Z", "closed_at": "2019-09-11T09:16:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "In cloudpickle 1.2.1 \r\n\r\n```\r\nIn [6]: import typing                                   \r\n                                                                                            \r\nIn [7]: def myfun(x: typing.Union[int, list]):          \r\n   ...:     return x           \r\n   ...:                                                                                                                       \r\n                                                   \r\nIn [8]: import cloudpickle                                   \r\n                           \r\nIn [9]: cloudpickle.dumps(myfun) \r\n```\r\n\r\nresults in\r\n\r\n```\r\nPicklingError: Can't pickle typing.Union[int, list]: it's not the same object as typing.Union\r\n```\r\n\r\nwhereas in 1.1.1\r\n\r\n```\r\nIn [1]: import typing\r\n\r\nIn [2]: def myfun(x: typing.Union[int, list]):\r\n   ...:     return x\r\n   ...: \r\n\r\nIn [3]: import cloudpickle\r\n\r\nIn [4]: cloudpickle.dumps(myfun)\r\nOut[4]: b'\\x80\\x04\\x95[\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x17cloudpickle.cloudpickle\\x94\\x8c\\x0e_fill_function\\x94\\x93\\x94(h\\x00\\x8c\\x0f_make_skel_func\\x94\\x93\\x94h\\x00\\x8c\\r_builtin_type\\x94\\x93\\x94\\x8c\\x08CodeType\\x94\\x85\\x94R\\x94(K\\x01K\\x00K\\x01K\\x01KCC\\x04|\\x00S\\x00\\x94N\\x85\\x94)\\x8c\\x01x\\x94\\x85\\x94\\x8c\\x1e<ipython-input-2-c47f6a8f7a19>\\x94\\x8c\\x05myfun\\x94K\\x01C\\x02\\x00\\x01\\x94))t\\x94R\\x94J\\xff\\xff\\xff\\xff}\\x94(\\x8c\\x0b__package__\\x94N\\x8c\\x08__name__\\x94\\x8c\\x08__main__\\x94u\\x87\\x94R\\x94}\\x94(\\x8c\\x07globals\\x94}\\x94\\x8c\\x08defaults\\x94N\\x8c\\x04dict\\x94}\\x94\\x8c\\x0eclosure_values\\x94N\\x8c\\x06module\\x94h\\x16\\x8c\\x04name\\x94h\\x0f\\x8c\\x03doc\\x94N\\x8c\\x08qualname\\x94h\\x0f\\x8c\\nkwdefaults\\x94NutR.'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/297", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/297/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/297/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/297", "id": 462275926, "node_id": "MDU6SXNzdWU0NjIyNzU5MjY=", "number": 297, "title": "Test failures with py2.7 on Gentoo", "user": {"login": "mgorny", "id": 110765, "node_id": "MDQ6VXNlcjExMDc2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/110765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgorny", "html_url": "https://github.com/mgorny", "followers_url": "https://api.github.com/users/mgorny/followers", "following_url": "https://api.github.com/users/mgorny/following{/other_user}", "gists_url": "https://api.github.com/users/mgorny/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgorny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgorny/subscriptions", "organizations_url": "https://api.github.com/users/mgorny/orgs", "repos_url": "https://api.github.com/users/mgorny/repos", "events_url": "https://api.github.com/users/mgorny/events{/privacy}", "received_events_url": "https://api.github.com/users/mgorny/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-29T07:27:21Z", "updated_at": "2020-03-10T08:36:33Z", "closed_at": "2020-03-10T08:36:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Complete log: [dev-python:cloudpickle-1.2.1:20190629-071637.log](https://github.com/cloudpipe/cloudpickle/files/3341591/dev-python.cloudpickle-1.2.1.20190629-071637.log)\r\n\r\nFWICS, all the test failures boil down to:\r\n\r\n```\r\n    def example():\r\n>       x = xml.etree.ElementTree.Comment # potential AttributeError\r\nE       AttributeError: 'module' object has no attribute 'etree'\r\n```\r\n\r\nBut importing the module directly from `python2.7` works.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/296", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/296/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/296/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/296/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/296", "id": 459689230, "node_id": "MDU6SXNzdWU0NTk2ODkyMzA=", "number": 296, "title": "1.2.2 sdist missing from PyPI", "user": {"login": "koobs", "id": 1011612, "node_id": "MDQ6VXNlcjEwMTE2MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1011612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koobs", "html_url": "https://github.com/koobs", "followers_url": "https://api.github.com/users/koobs/followers", "following_url": "https://api.github.com/users/koobs/following{/other_user}", "gists_url": "https://api.github.com/users/koobs/gists{/gist_id}", "starred_url": "https://api.github.com/users/koobs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koobs/subscriptions", "organizations_url": "https://api.github.com/users/koobs/orgs", "repos_url": "https://api.github.com/users/koobs/repos", "events_url": "https://api.github.com/users/koobs/events{/privacy}", "received_events_url": "https://api.github.com/users/koobs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-24T05:03:09Z", "updated_at": "2019-09-11T10:49:06Z", "closed_at": "2019-06-25T07:49:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "The source distribution for 1.2.2 is missing from PyPI. We (FreeBSD), and I imagine other downstream packagers, use the sdist to produce packages as a canonical/primary source.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/293", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/293/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/293/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/293/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/293", "id": 456056405, "node_id": "MDU6SXNzdWU0NTYwNTY0MDU=", "number": 293, "title": "Pickled Functions seem to be incompatible between python3.5 and python3.6+ even when using pickle.DEFAULT_PROTOCOL", "user": {"login": "Ark-kun", "id": 1829149, "node_id": "MDQ6VXNlcjE4MjkxNDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1829149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ark-kun", "html_url": "https://github.com/Ark-kun", "followers_url": "https://api.github.com/users/Ark-kun/followers", "following_url": "https://api.github.com/users/Ark-kun/following{/other_user}", "gists_url": "https://api.github.com/users/Ark-kun/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ark-kun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ark-kun/subscriptions", "organizations_url": "https://api.github.com/users/Ark-kun/orgs", "repos_url": "https://api.github.com/users/Ark-kun/repos", "events_url": "https://api.github.com/users/Ark-kun/events{/privacy}", "received_events_url": "https://api.github.com/users/Ark-kun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-06-14T04:35:58Z", "updated_at": "2019-09-05T19:21:08Z", "closed_at": "2019-06-18T12:20:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Even an empty function has different 3-byte code representation in python3.5 and python3.6+.\r\nThis causes either \"SystemError: unknown opcode\" when going up or \"Segmentation fault\" when going down.\r\n\r\nI understand that the support for this is not implied, but I think the incompatibility should be stated explicitly. \"cloudpickle uses pickle.HIGHEST_PROTOCOL by default: it is meant to send objects between processes running the same version of Python.\" is not explicit here since it only talks about \"cloudpickle useing pickle.HIGHEST_PROTOCOL by default\". Which implies that using the more compatible protocol allows passing objects between different python versions.\r\n\r\nSummary of my results:\r\n\r\n```\r\ntesting python3.5 -> python3.6, 3.7\r\nXXX lineno: 10, opcode: 0\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 9, in <module>\r\n  File \"<string>\", line 10, in func\r\nSystemError: unknown opcode\r\n```\r\n```\r\ntesting python3.6,3.7 -> python3.5\r\nSegmentation fault\r\n```\r\n\r\nPoC demonstrating code difference:\r\n```python\r\ndef func():\r\n    pass\r\nprint(func.__code__.co_code)\r\n'\r\n```\r\n```\r\nOn python3.5:\r\nb'd\\x00\\x00S'\r\n\r\nOn python3.6:\r\nb'd\\x00S\\x00'\r\n```\r\n\r\nPickle structure diff: https://www.diffchecker.com/aC5PuVHy\r\n\r\n\r\nTesting code:\r\n\r\n```bash\r\nfunction test_compatibility() {\r\nv1=$1\r\nv2=$2\r\n\r\necho testing \"$v1 -> $v2\"\r\n\r\n\"$v1\" -c '\r\nimport pickle\r\nimport cloudpickle\r\nimport sys\r\n\r\ndef func():# -> str:\r\n    pass\r\n\r\npickled_func = cloudpickle.dumps(func, pickle.DEFAULT_PROTOCOL)\r\nsys.stdout.buffer.write(pickled_func)\r\n' | \"$v2\" -c '\r\nimport pickle\r\nimport sys\r\n\r\npickled_func = sys.stdin.buffer.read()\r\n\r\nfunc = pickle.loads(pickled_func)\r\n\r\nfunc()\r\n'\r\n\r\n}\r\n\r\n\r\ntest_compatibility python3.5 python3.5\r\ntest_compatibility python3.5 python3.6\r\ntest_compatibility python3.5 python3.7\r\n\r\ntest_compatibility python3.6 python3.5\r\ntest_compatibility python3.6 python3.6\r\ntest_compatibility python3.6 python3.7\r\n\r\ntest_compatibility python3.7 python3.5\r\ntest_compatibility python3.7 python3.6\r\ntest_compatibility python3.7 python3.7\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/288", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/288/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/288/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/288", "id": 455270665, "node_id": "MDU6SXNzdWU0NTUyNzA2NjU=", "number": 288, "title": "cloudpickle cannot save bound classmethods for python2.7", "user": {"login": "pierreglaser", "id": 18555600, "node_id": "MDQ6VXNlcjE4NTU1NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/18555600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierreglaser", "html_url": "https://github.com/pierreglaser", "followers_url": "https://api.github.com/users/pierreglaser/followers", "following_url": "https://api.github.com/users/pierreglaser/following{/other_user}", "gists_url": "https://api.github.com/users/pierreglaser/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierreglaser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierreglaser/subscriptions", "organizations_url": "https://api.github.com/users/pierreglaser/orgs", "repos_url": "https://api.github.com/users/pierreglaser/repos", "events_url": "https://api.github.com/users/pierreglaser/events{/privacy}", "received_events_url": "https://api.github.com/users/pierreglaser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135100, "node_id": "MDU6TGFiZWwxOTkxMzUxMDA=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-12T15:09:46Z", "updated_at": "2019-06-12T21:11:10Z", "closed_at": "2019-06-12T21:11:10Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```python\r\nIn [1]: import cloudpickle\r\n   ...: class A:\r\n   ...:     @classmethod\r\n   ...:     def f(cls):\r\n   ...:         pass\r\n   ...: cloudpickle.dumps(A.f)\r\n```\r\ngives \r\n```python-traceback\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-1-b09b8cb46375> in <module>()\r\n      4     def f(cls):\r\n      5         pass\r\n----> 6 cloudpickle.dumps(A.f)\r\n\r\n/home/pierreglaser/.virtualenvs/py27/local/lib/python2.7/site-packages/cloudpickle/cloudpickle.pyc in dumps(obj, protocol)\r\n    893     try:\r\n    894         cp = CloudPickler(file, protocol=protocol)\r\n--> 895         cp.dump(obj)\r\n    896         return file.getvalue()\r\n    897     finally:\r\n\r\n/home/pierreglaser/.virtualenvs/py27/local/lib/python2.7/site-packages/cloudpickle/cloudpickle.pyc in dump(self, obj)\r\n    266         self.inject_addons()\r\n    267         try:\r\n--> 268             return Pickler.dump(self, obj)\r\n    269         except RuntimeError as e:\r\n    270             if 'recursion' in e.args[0]:\r\n\r\n/usr/lib/python2.7/pickle.py in dump(self, obj)\r\n    222         if self.proto >= 2:\r\n    223             self.write(PROTO + chr(self.proto))\r\n--> 224         self.save(obj)\r\n    225         self.write(STOP)\r\n    226 \r\n\r\n/usr/lib/python2.7/pickle.py in save(self, obj)\r\n    284         f = self.dispatch.get(t)\r\n    285         if f:\r\n--> 286             f(self, obj) # Call unbound method with explicit self\r\n    287             return\r\n    288 \r\n\r\n/home/pierreglaser/.virtualenvs/py27/local/lib/python2.7/site-packages/cloudpickle/cloudpickle.pyc in save_instancemethod(self, obj)\r\n    667                 self.save_reduce(types.MethodType, (obj.__func__, obj.__self__), obj=obj)\r\n    668             else:\r\n--> 669                 self.save_reduce(types.MethodType, (obj.__func__, obj.__self__, obj.__self__.__class__),\r\n    670                                  obj=obj)\r\n    671 \r\n\r\nAttributeError: class A has no attribute '__class__'\r\n```\r\n\r\nThis does not seem to be a regression. The bug is present for any version of cloudpickle.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/287", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/287/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/287/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/287/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/287", "id": 455048540, "node_id": "MDU6SXNzdWU0NTUwNDg1NDA=", "number": 287, "title": "[RFC] make @pierreglaser a maintainer of cloudpickle", "user": {"login": "ogrisel", "id": 89061, "node_id": "MDQ6VXNlcjg5MDYx", "avatar_url": "https://avatars0.githubusercontent.com/u/89061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogrisel", "html_url": "https://github.com/ogrisel", "followers_url": "https://api.github.com/users/ogrisel/followers", "following_url": "https://api.github.com/users/ogrisel/following{/other_user}", "gists_url": "https://api.github.com/users/ogrisel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogrisel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogrisel/subscriptions", "organizations_url": "https://api.github.com/users/ogrisel/orgs", "repos_url": "https://api.github.com/users/ogrisel/repos", "events_url": "https://api.github.com/users/ogrisel/events{/privacy}", "received_events_url": "https://api.github.com/users/ogrisel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-12T07:14:47Z", "updated_at": "2019-06-13T02:52:01Z", "closed_at": "2019-06-12T21:06:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all,\r\n\r\n@pierreglaser has contributed numerous deep improvements to cloudpickle over the past year including a new implementation of the CloudPickler class in #253 to derive from the fast C implementation of `pickle.Pickler` in Python 3.8+ instead of the significantly slower Python implementation (along the related supporting changes in the CPython standard library python/cpython#12499 python/cpython#12588 ).\r\n\r\nAs a result Pierre is now the most familiar with the internal details of the cloudpickle code base so it would make sense to grant him the maintainers right on the github repo and on pypi.org.\r\n\r\nPinging current members with maintainers' rights: @rgbkrk @holdenk @HyukjinKwon @jakirkham @llllllllll @mrocklin @pitrou @ssanderson.\r\n\r\nBTW if anyone has any comments on how we should improve the maintenance of this project please feel free to comment on this thread.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/284", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/284/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/284/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/284/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/284", "id": 454206221, "node_id": "MDU6SXNzdWU0NTQyMDYyMjE=", "number": 284, "title": "make cloudpickle and cloudpickle_fast use the same reducers.", "user": {"login": "pierreglaser", "id": 18555600, "node_id": "MDQ6VXNlcjE4NTU1NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/18555600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierreglaser", "html_url": "https://github.com/pierreglaser", "followers_url": "https://api.github.com/users/pierreglaser/followers", "following_url": "https://api.github.com/users/pierreglaser/following{/other_user}", "gists_url": "https://api.github.com/users/pierreglaser/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierreglaser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierreglaser/subscriptions", "organizations_url": "https://api.github.com/users/pierreglaser/orgs", "repos_url": "https://api.github.com/users/pierreglaser/repos", "events_url": "https://api.github.com/users/pierreglaser/events{/privacy}", "received_events_url": "https://api.github.com/users/pierreglaser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-10T14:42:51Z", "updated_at": "2020-06-30T19:26:09Z", "closed_at": "2020-06-30T19:26:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`cloudpickle` and `cloudpickle_fast` differ in the sense that the `cloudpickle_fast`'s `CloudPickler` only has to `reduce` objects (the actual saving is taken care of by logic coded in the `pickle.Pickler` class), whereas the `cloudpickle.CloudPickler` reduces AND saves objects in one single method (`save_{object_type}(self, obj)`)\r\n\r\nRight now, the `cloudpickle.CloudPickler` reducing parts of the `save_{object_type}` methods do not use the `reduce_{object_type}` reducers implemented in `cloudpickle_fast`.\r\nTo avoid the need to write twice any change we make to a reducer, it would be great to refactor most `cloudpickle.CloudPickler.save_*` methods, to make them look like this\r\n```python\r\ndef save_{object_type}(self, obj):\r\n    rv = reduce_{object_type}(obj)\r\n    self.save_reduce(*rv, obj=obj)\r\n```\r\n`reduce_{object_type}` being used both by `cloudpickle` and `cloudpickle_fast`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/283", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/283/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/283/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/283/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/283", "id": 453886263, "node_id": "MDU6SXNzdWU0NTM4ODYyNjM=", "number": 283, "title": "Security compared to the standard pickle", "user": {"login": "dumblob", "id": 2451044, "node_id": "MDQ6VXNlcjI0NTEwNDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2451044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dumblob", "html_url": "https://github.com/dumblob", "followers_url": "https://api.github.com/users/dumblob/followers", "following_url": "https://api.github.com/users/dumblob/following{/other_user}", "gists_url": "https://api.github.com/users/dumblob/gists{/gist_id}", "starred_url": "https://api.github.com/users/dumblob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dumblob/subscriptions", "organizations_url": "https://api.github.com/users/dumblob/orgs", "repos_url": "https://api.github.com/users/dumblob/repos", "events_url": "https://api.github.com/users/dumblob/events{/privacy}", "received_events_url": "https://api.github.com/users/dumblob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-09T10:55:25Z", "updated_at": "2019-06-09T15:40:00Z", "closed_at": "2019-06-09T15:32:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "The standard Python pickle is highly insecure (mainly due to its nature). Does `cloudpickle` handle security in a better way? What are the differences from the security point of view?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/275", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/275/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/275/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/275/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/275", "id": 449446094, "node_id": "MDU6SXNzdWU0NDk0NDYwOTQ=", "number": 275, "title": "References to global objects are broken", "user": {"login": "cicdw", "id": 13255838, "node_id": "MDQ6VXNlcjEzMjU1ODM4", "avatar_url": "https://avatars0.githubusercontent.com/u/13255838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cicdw", "html_url": "https://github.com/cicdw", "followers_url": "https://api.github.com/users/cicdw/followers", "following_url": "https://api.github.com/users/cicdw/following{/other_user}", "gists_url": "https://api.github.com/users/cicdw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cicdw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cicdw/subscriptions", "organizations_url": "https://api.github.com/users/cicdw/orgs", "repos_url": "https://api.github.com/users/cicdw/repos", "events_url": "https://api.github.com/users/cicdw/events{/privacy}", "received_events_url": "https://api.github.com/users/cicdw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-28T19:49:03Z", "updated_at": "2019-05-29T17:14:40Z", "closed_at": "2019-05-29T17:14:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In `cloudpickle` v.0.8.0 and above, it seems that references to global objects are lost in the serialization -> deserialization process.  \r\n\r\nFor example, the following asserts pass in `cloudpickle` 0.7.0:\r\n```python\r\nimport cloudpickle\r\n\r\n\r\nFOO = {}\r\n\r\ndef foo_add(x):\r\n    FOO[\"x\"] = x\r\n\r\nfunc = cloudpickle.loads(cloudpickle.dumps(foo_add))\r\n\r\nassert FOO == {}, FOO\r\n\r\nfunc(66)\r\nassert FOO == {\"x\": 66}, FOO\r\n\r\nfoo_add(67)\r\nassert FOO == {\"x\": 67}, FOO\r\n```\r\n\r\nHowever, in 0.8.0 and above, the following assert fails:\r\n```python\r\nfunc(66)\r\nassert FOO == {\"x\": 66}, FOO\r\n```\r\nwith:\r\n```python\r\nAssertionError: {}\r\n```\r\ni.e., the function runs without error but doesn't actually affect the global dictionary anymore.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/272", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/272/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/272/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/272/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/272", "id": 446635764, "node_id": "MDU6SXNzdWU0NDY2MzU3NjQ=", "number": 272, "title": "test_interactive_remote_function_calls_no_memory_leak fails on python3.7+ for Mac OS", "user": {"login": "pierreglaser", "id": 18555600, "node_id": "MDQ6VXNlcjE4NTU1NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/18555600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierreglaser", "html_url": "https://github.com/pierreglaser", "followers_url": "https://api.github.com/users/pierreglaser/followers", "following_url": "https://api.github.com/users/pierreglaser/following{/other_user}", "gists_url": "https://api.github.com/users/pierreglaser/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierreglaser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierreglaser/subscriptions", "organizations_url": "https://api.github.com/users/pierreglaser/orgs", "repos_url": "https://api.github.com/users/pierreglaser/repos", "events_url": "https://api.github.com/users/pierreglaser/events{/privacy}", "received_events_url": "https://api.github.com/users/pierreglaser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-21T13:58:08Z", "updated_at": "2020-02-02T22:51:09Z", "closed_at": "2020-02-02T22:51:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Title says it all. Should we add a `skipif` directive?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/270", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/270/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/270/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/270", "id": 445680373, "node_id": "MDU6SXNzdWU0NDU2ODAzNzM=", "number": 270, "title": "1.1.1 changelog entries missing from CHANGES.md", "user": {"login": "koobs", "id": 1011612, "node_id": "MDQ6VXNlcjEwMTE2MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1011612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koobs", "html_url": "https://github.com/koobs", "followers_url": "https://api.github.com/users/koobs/followers", "following_url": "https://api.github.com/users/koobs/following{/other_user}", "gists_url": "https://api.github.com/users/koobs/gists{/gist_id}", "starred_url": "https://api.github.com/users/koobs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koobs/subscriptions", "organizations_url": "https://api.github.com/users/koobs/orgs", "repos_url": "https://api.github.com/users/koobs/repos", "events_url": "https://api.github.com/users/koobs/events{/privacy}", "received_events_url": "https://api.github.com/users/koobs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-18T05:16:28Z", "updated_at": "2019-05-22T04:21:26Z", "closed_at": "2019-05-21T14:25:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Understandably and while its a minor PyPI release-only related change, downstream packagers use authoritive links to upstream changelog documents (in this case CHANGES.md) using git tag URL's for that specific version of the document to share with users in their commit log messages.\r\n\r\nIn this case, https://github.com/cloudpipe/cloudpickle/blob/v1.1.1/CHANGES.md shows changes only up to 1.1.0, which can confuse users, leaving us only with a choice to use a versionless URL, whos content changes all the time, or not include a changelog link, which reduces the user experience and increases the burden on them to locate the changes for themselves\r\n\r\nIt would be great if the changelog document could include any/all changes, no matter how insignificant, prior to tagging a release and adding a git tag for that version.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/268", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/268/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/268/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/268/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/268", "id": 443323049, "node_id": "MDU6SXNzdWU0NDMzMjMwNDk=", "number": 268, "title": "CI for python3.8", "user": {"login": "pierreglaser", "id": 18555600, "node_id": "MDQ6VXNlcjE4NTU1NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/18555600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierreglaser", "html_url": "https://github.com/pierreglaser", "followers_url": "https://api.github.com/users/pierreglaser/followers", "following_url": "https://api.github.com/users/pierreglaser/following{/other_user}", "gists_url": "https://api.github.com/users/pierreglaser/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierreglaser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierreglaser/subscriptions", "organizations_url": "https://api.github.com/users/pierreglaser/orgs", "repos_url": "https://api.github.com/users/pierreglaser/repos", "events_url": "https://api.github.com/users/pierreglaser/events{/privacy}", "received_events_url": "https://api.github.com/users/pierreglaser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-13T10:29:56Z", "updated_at": "2019-05-15T11:06:06Z", "closed_at": "2019-05-15T11:06:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I think we should start setting up CI for python3.8. Probably something like:\r\n\r\n```yaml\r\ndist: xenial   # required for Python >= 3.7\r\nlanguage: python\r\npython:\r\n  - \"3.8-dev\"  # or maybe \"nightly\"?\r\n```\r\n\r\n@ogrisel ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/266", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/266/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/266/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/266/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/266", "id": 442907082, "node_id": "MDU6SXNzdWU0NDI5MDcwODI=", "number": 266, "title": "\"import cloudpickle\" fails  with Python-3.8.0a4", "user": {"login": "stonebig", "id": 4312421, "node_id": "MDQ6VXNlcjQzMTI0MjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4312421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stonebig", "html_url": "https://github.com/stonebig", "followers_url": "https://api.github.com/users/stonebig/followers", "following_url": "https://api.github.com/users/stonebig/following{/other_user}", "gists_url": "https://api.github.com/users/stonebig/gists{/gist_id}", "starred_url": "https://api.github.com/users/stonebig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stonebig/subscriptions", "organizations_url": "https://api.github.com/users/stonebig/orgs", "repos_url": "https://api.github.com/users/stonebig/repos", "events_url": "https://api.github.com/users/stonebig/events{/privacy}", "received_events_url": "https://api.github.com/users/stonebig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-10T21:51:01Z", "updated_at": "2019-05-14T20:07:20Z", "closed_at": "2019-05-14T20:07:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "when trying this on python-3.8.0a4 and cloudpickle-1.0.0, on Windows:\r\n\r\n````\r\nimport cloudpickle\r\n````\r\n\r\nI get that error:\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/4312421/57566795-a8915780-73d0-11e9-8d7d-1cd022db1b46.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/263", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/263/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/263/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/263/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/263", "id": 436074023, "node_id": "MDU6SXNzdWU0MzYwNzQwMjM=", "number": 263, "title": "TypeError when calling a pickled + unpickled function in __main__ with keyword-only argument", "user": {"login": "lesteve", "id": 1680079, "node_id": "MDQ6VXNlcjE2ODAwNzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1680079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lesteve", "html_url": "https://github.com/lesteve", "followers_url": "https://api.github.com/users/lesteve/followers", "following_url": "https://api.github.com/users/lesteve/following{/other_user}", "gists_url": "https://api.github.com/users/lesteve/gists{/gist_id}", "starred_url": "https://api.github.com/users/lesteve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lesteve/subscriptions", "organizations_url": "https://api.github.com/users/lesteve/orgs", "repos_url": "https://api.github.com/users/lesteve/repos", "events_url": "https://api.github.com/users/lesteve/events{/privacy}", "received_events_url": "https://api.github.com/users/lesteve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-23T08:57:10Z", "updated_at": "2019-04-30T16:23:32Z", "closed_at": "2019-04-30T16:23:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```py\r\nimport cloudpickle\r\n\r\ndef func_with_kw_only_args(a, *, b=1):\r\n    return a + b\r\n\r\n\r\nnew_func = cloudpickle.loads(cloudpickle.dumps(func_with_kw_only_args))\r\nnew_func(1)\r\n```\r\n\r\nError:\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-18-ee6063f05eec> in <module>\r\n      6 \r\n      7 new_func = cloudpickle.loads(cloudpickle.dumps(func_with_kw_only_args))\r\n----> 8 new_func(1)\r\n      9 \r\n     10 \r\n\r\nTypeError: func_with_kw_only_args() missing 1 required keyword-only argument: 'b'\r\n```\r\n\r\nOriginal bug was seen in joblib: https://github.com/joblib/joblib/issues/863\r\n\r\nNote: there is no error when putting the function with keyword-only arguments in a Python module.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/261", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/261/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/261/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/261/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/261", "id": 434338651, "node_id": "MDU6SXNzdWU0MzQzMzg2NTE=", "number": 261, "title": "Faulty modules handling", "user": {"login": "pierreglaser", "id": 18555600, "node_id": "MDQ6VXNlcjE4NTU1NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/18555600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierreglaser", "html_url": "https://github.com/pierreglaser", "followers_url": "https://api.github.com/users/pierreglaser/followers", "following_url": "https://api.github.com/users/pierreglaser/following{/other_user}", "gists_url": "https://api.github.com/users/pierreglaser/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierreglaser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierreglaser/subscriptions", "organizations_url": "https://api.github.com/users/pierreglaser/orgs", "repos_url": "https://api.github.com/users/pierreglaser/repos", "events_url": "https://api.github.com/users/pierreglaser/events{/privacy}", "received_events_url": "https://api.github.com/users/pierreglaser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-17T15:12:51Z", "updated_at": "2019-06-05T08:19:10Z", "closed_at": "2019-06-05T08:19:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "in #136,  a test testing bad interactions happening in `pickle.whichmodule` was enhanced. But actually, it mangles 2 different use-cases into one:\r\n\r\nThe first use-case is calling `pickle.whichmodule` on an object with `__module__` set to `None`. In this case, `whichmodule` loops through all imported modules, trying to find the object in each of them using the object's name.\r\n\r\nThis loop can error out if a potentially unrelated module throws an exceptions when someone tries to call `getattr` on it. Here is a reconstructed minimal example\r\n\r\n```python\r\nimport pickle\r\nimport sys\r\n\r\n\r\nclass UnrelatedTroublesomeModuleClass:\r\n    def __getattr__(self, name):\r\n        raise Exception\r\n\r\nunrelated_troublesome_module = UnrelatedTroublesomeModuleClass()\r\n\r\n# nothings prevents us from adding this instance to sys.modules\r\nsys.modules['unrelated_troublesome_module'] = unrelated_troublesome_module\r\n\r\nclass A:\r\n    def f(self):\r\n        pass\r\n    f.__module__ = None\r\n\r\n# fails when looping over sys.modules and calling\r\n# `` getattr(unrelated_troublesome_module, 'A')``\r\na = pickle.whichmodule(A, 'A')\r\n```\r\n\r\nThe second use-case is when the object **actually points to a faulty module**, via its `__module__` attribute. This module can for instance throw a Exception when calling `gettattr` on it. In this situation, exceptions can happen on `pickle.whichmodule` AND, further along the way during `getattr(module, name)` calls in `save_function`. Change the line ``f.__module__ = None`` to ``f.__module__ = 'unrelated_troublesome_module' `` to switch between the first and the second use-case.\r\n\r\n2 remarks:\r\n\r\n- I think we want to support the use-case 1, meaning that we do not want unrelated faulty modules to cause failures when trying to infer the module of a given object\r\n- However, if this object explicitally points to a faulty module, I think we should not try/except the subsequent errors, but rather do not interfere. If the module throws an error when trying to call  `getattr`, let it happen.\r\n\r\nWe may also want to implement our own `whichmodule`, that silently discards errors happening when calling `getattr`.\r\n\r\n@ogrisel ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/260", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/260/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/260/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/260", "id": 430720531, "node_id": "MDU6SXNzdWU0MzA3MjA1MzE=", "number": 260, "title": "Cut 1.0 release", "user": {"login": "mrocklin", "id": 306380, "node_id": "MDQ6VXNlcjMwNjM4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-09T01:05:05Z", "updated_at": "2019-05-06T12:55:11Z", "closed_at": "2019-05-06T11:40:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Any objection to bumping the release to 1.0 next time around?  There are a variety of reasons to do this, but the best I've heard is that some institutions have a hard time justifying using software with a version number less than 1.0 to their IT administrative staff.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/258", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/258/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/258/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/258", "id": 426478869, "node_id": "MDU6SXNzdWU0MjY0Nzg4Njk=", "number": 258, "title": "cpickle", "user": {"login": "rutujar", "id": 26456931, "node_id": "MDQ6VXNlcjI2NDU2OTMx", "avatar_url": "https://avatars3.githubusercontent.com/u/26456931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rutujar", "html_url": "https://github.com/rutujar", "followers_url": "https://api.github.com/users/rutujar/followers", "following_url": "https://api.github.com/users/rutujar/following{/other_user}", "gists_url": "https://api.github.com/users/rutujar/gists{/gist_id}", "starred_url": "https://api.github.com/users/rutujar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rutujar/subscriptions", "organizations_url": "https://api.github.com/users/rutujar/orgs", "repos_url": "https://api.github.com/users/rutujar/repos", "events_url": "https://api.github.com/users/rutujar/events{/privacy}", "received_events_url": "https://api.github.com/users/rutujar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-28T13:00:28Z", "updated_at": "2019-03-31T13:56:20Z", "closed_at": "2019-03-31T13:56:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "* how to install cpickle? for ubuntu 16.04\r\n* the part of the code\r\nimport pickle\r\ncharModel = cPickle.loads(open(args[\"char_classifier\"]).read())\r\ndigitModel = cPickle.loads(open(args[\"digit_classifier\"]).read())\r\n\r\n* error\r\n    charModel = cPickle.loads(open(args[\"char_classifier\"]).read())\r\nNameError: name 'cPickle' is not defined\r\n\r\nhow to resolve this issue help needed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/251", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/251/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/251/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/251", "id": 418110251, "node_id": "MDU6SXNzdWU0MTgxMTAyNTE=", "number": 251, "title": "__name__ being lost inside cloudpickled staticmethods? (0.8.0 regression)", "user": {"login": "tjb900", "id": 1707852, "node_id": "MDQ6VXNlcjE3MDc4NTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1707852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjb900", "html_url": "https://github.com/tjb900", "followers_url": "https://api.github.com/users/tjb900/followers", "following_url": "https://api.github.com/users/tjb900/following{/other_user}", "gists_url": "https://api.github.com/users/tjb900/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjb900/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjb900/subscriptions", "organizations_url": "https://api.github.com/users/tjb900/orgs", "repos_url": "https://api.github.com/users/tjb900/repos", "events_url": "https://api.github.com/users/tjb900/events{/privacy}", "received_events_url": "https://api.github.com/users/tjb900/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-07T03:19:22Z", "updated_at": "2019-03-25T10:45:49Z", "closed_at": "2019-03-22T15:56:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure if this is expected or not?  Reproducer below.\r\n\r\nThanks!\r\nTim\r\n\r\n----\r\n\r\nOutput with cloudpickle 0.7.0:\r\n\r\n```\r\n(cp7) $ python reproducer.py                                                                                                                                   \r\n<pkg.mymod2.MyClass object at 0x7fbf18b3d828>\r\n```\r\n\r\ncloudpickle 0.8.0:\r\n\r\n```python-traceback\r\n(cp8) $ python reproducer.py                                                                                                                                   \r\nTraceback (most recent call last):\r\n  File \"reproducer.py\", line 7, in <module>\r\n    print(f())\r\n  File \"/mypath/pkg/mymod.py\", line 4, in func\r\n    from .mymod2 import MyClass\r\nKeyError: \"'__name__' not in globals\"\r\n```\r\n\r\n```\r\npkg/\r\n   __init__.py\r\n   mymod.py\r\n   mymod2.py\r\nreproducer.py\r\n```\r\n\r\n```python\r\n# pkg/__init__.py\r\n# blank\r\n```\r\n\r\n```python\r\n# pkg/mymod.py\r\nclass Blah(object):\r\n    @staticmethod\r\n    def func():\r\n        from .mymod2 import MyClass\r\n        return MyClass()\r\n```\r\n\r\n```python\r\n# pkg/mymod2.py\r\nclass MyClass(object):\r\n    pass\r\n```\r\n\r\n```python\r\n# reproducer.py\r\nfrom pkg.mymod import Blah\r\nfrom cloudpickle import dumps\r\nfrom pickle import loads\r\n\r\nf = loads(dumps(Blah.func))\r\n\r\nprint(f())\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/250", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/250/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/250/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/250", "id": 413051179, "node_id": "MDU6SXNzdWU0MTMwNTExNzk=", "number": 250, "title": "python 3.8 breaks cloudpickle namedtuple saving", "user": {"login": "pierreglaser", "id": 18555600, "node_id": "MDQ6VXNlcjE4NTU1NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/18555600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierreglaser", "html_url": "https://github.com/pierreglaser", "followers_url": "https://api.github.com/users/pierreglaser/followers", "following_url": "https://api.github.com/users/pierreglaser/following{/other_user}", "gists_url": "https://api.github.com/users/pierreglaser/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierreglaser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierreglaser/subscriptions", "organizations_url": "https://api.github.com/users/pierreglaser/orgs", "repos_url": "https://api.github.com/users/pierreglaser/repos", "events_url": "https://api.github.com/users/pierreglaser/events{/privacy}", "received_events_url": "https://api.github.com/users/pierreglaser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-02-21T17:56:47Z", "updated_at": "2019-02-22T14:36:44Z", "closed_at": "2019-02-22T14:36:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```python\r\nimport collections\r\nimport cloudpickle\r\n\r\n\r\nMyTuple = collections.namedtuple('MyTuple', ['a', 'b', 'c'])\r\nt = MyTuple(1, 2, 3)\r\ncloudpickle.dumps(t)\r\n```\r\n\r\nfails with:\r\n\r\n```python\r\nTypeError: cannot pickle '_collections._tuplegetter' object      \r\n```\r\n\r\non a recent version of python master:\r\n`Python 3.8.0a1+ (heads/master:49fd6dd887, Feb 21 2019, 10:19:05)`\r\n\r\nReason:  optimization of `namedtuple` attribute access:\r\nhttps://bugs.python.org/issue32492\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/244", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/244/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/244/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/244", "id": 405900174, "node_id": "MDU6SXNzdWU0MDU5MDAxNzQ=", "number": 244, "title": "Pickling enum types with cloudpickle", "user": {"login": "pcmoritz", "id": 113316, "node_id": "MDQ6VXNlcjExMzMxNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/113316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcmoritz", "html_url": "https://github.com/pcmoritz", "followers_url": "https://api.github.com/users/pcmoritz/followers", "following_url": "https://api.github.com/users/pcmoritz/following{/other_user}", "gists_url": "https://api.github.com/users/pcmoritz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcmoritz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcmoritz/subscriptions", "organizations_url": "https://api.github.com/users/pcmoritz/orgs", "repos_url": "https://api.github.com/users/pcmoritz/repos", "events_url": "https://api.github.com/users/pcmoritz/events{/privacy}", "received_events_url": "https://api.github.com/users/pcmoritz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135100, "node_id": "MDU6TGFiZWwxOTkxMzUxMDA=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-02-01T22:33:53Z", "updated_at": "2019-05-29T13:15:30Z", "closed_at": "2019-05-29T13:15:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Dear all,\r\n\r\ncloudpickle currently doesn't support pickling types of type `enum.EnumMeta`. Here is an example to reproduce (on the latest release cloudpickle 0.7):\r\n\r\n```python\r\nimport cloudpickle\r\nfrom enum import IntEnum\r\n\r\nclass Color(IntEnum):\r\n    RED = 1\r\n\r\nu = cloudpickle.dumps(Color)\r\ncloudpickle.loads(u)\r\n```\r\n\r\ngives the error\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-1-ff791d51315b> in <module>\r\n      6 \r\n      7 u = cloudpickle.dumps(Color)\r\n----> 8 cloudpickle.loads(u)\r\n\r\n~/anaconda3/lib/python3.7/enum.py in __new__(metacls, cls, bases, classdict)\r\n    149         # save enum items into separate mapping so they don't get baked into\r\n    150         # the new class\r\n--> 151         enum_members = {k: classdict[k] for k in classdict._member_names}\r\n    152         for name in classdict._member_names:\r\n    153             del classdict[name]\r\n\r\nAttributeError: 'dict' object has no attribute '_member_names'\r\n```\r\n\r\nAny help with this is appreciated!\r\n\r\n-- Philipp.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/243", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/243/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/243/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/243", "id": 405530814, "node_id": "MDU6SXNzdWU0MDU1MzA4MTQ=", "number": 243, "title": "Can not pickle interactively defined property types", "user": {"login": "GreatYYX", "id": 8329846, "node_id": "MDQ6VXNlcjgzMjk4NDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8329846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GreatYYX", "html_url": "https://github.com/GreatYYX", "followers_url": "https://api.github.com/users/GreatYYX/followers", "following_url": "https://api.github.com/users/GreatYYX/following{/other_user}", "gists_url": "https://api.github.com/users/GreatYYX/gists{/gist_id}", "starred_url": "https://api.github.com/users/GreatYYX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GreatYYX/subscriptions", "organizations_url": "https://api.github.com/users/GreatYYX/orgs", "repos_url": "https://api.github.com/users/GreatYYX/repos", "events_url": "https://api.github.com/users/GreatYYX/events{/privacy}", "received_events_url": "https://api.github.com/users/GreatYYX/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135103, "node_id": "MDU6TGFiZWwxOTkxMzUxMDM=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-01T02:54:57Z", "updated_at": "2019-02-07T14:58:20Z", "closed_at": "2019-02-07T14:58:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was using Dask Distributed and found a weird exception. After tracking down, it was caused by cloudpickle. The minimal implementation is like below:\r\n\r\n```python\r\nimport cloudpickle\r\n\r\nclass dec(property):\r\n    def __init__(self, func):\r\n        self.func = func\r\n\r\n    def __get__(self, obj, cls):\r\n        if obj is None:\r\n            return self\r\n\r\n        return 'dec_{}'.format(self.func(obj))\r\n\r\nclass TestClass():\r\n    def __init__(self, x):\r\n        self.x = x\r\n\r\n    @dec\r\n    def test_property(self):\r\n        return self.x\r\n\r\nt = TestClass('test')\r\nprint(t.test_property)\r\ncloudpickle.dumps(t)\r\n```\r\n\r\nTraceback info:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/test/main.py\", line 23, in <module>\r\n    cloudpickle.dumps(t)\r\n  File \"/Users/test/anaconda2/envs/py36/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 931, in dumps\r\n    cp.dump(obj)\r\n  File \"/Users/test/anaconda2/envs/py36/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 284, in dump\r\n    return Pickler.dump(self, obj)\r\n  File \"/Users/test/anaconda2/envs/py36/lib/python3.6/pickle.py\", line 409, in dump\r\n    self.save(obj)\r\n  File \"/Users/test/anaconda2/envs/py36/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/Users/test/anaconda2/envs/py36/lib/python3.6/pickle.py\", line 605, in save_reduce\r\n    save(cls)\r\n  File \"/Users/test/anaconda2/envs/py36/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/Users/test/anaconda2/envs/py36/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 678, in save_global\r\n    return self.save_dynamic_class(obj)\r\n  File \"/Users/test/anaconda2/envs/py36/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 517, in save_dynamic_class\r\n    save(clsdict)\r\n  File \"/Users/test/anaconda2/envs/py36/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/Users/test/anaconda2/envs/py36/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/Users/test/anaconda2/envs/py36/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/Users/test/anaconda2/envs/py36/lib/python3.6/pickle.py\", line 496, in save\r\n    rv = reduce(self.proto)\r\nTypeError: can't pickle dec objects\r\n```\r\n\r\nBut if I define `TestClass` in a module instead of `__main__`, it works.\r\n\r\nmod_a.py\r\n```\r\nclass dec(property):\r\n    def __init__(self, func):\r\n        self.func = func\r\n\r\n    def __get__(self, obj, cls):\r\n        if obj is None:\r\n            return self\r\n\r\n        return 'dec_{}'.format(self.func(obj))\r\n\r\nclass TestClass():\r\n    def __init__(self, x):\r\n        self.x = x\r\n\r\n    @dec\r\n    def test_property(self):\r\n        return self.x\r\n```\r\n\r\nmain.py\r\n```\r\nimport cloudpickle\r\nfrom mod_a import *\r\n\r\nt = TestClass('test')\r\nprint(t.test_property)\r\ncloudpickle.dumps(t)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/242", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/242/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/242/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/242", "id": 404903158, "node_id": "MDU6SXNzdWU0MDQ5MDMxNTg=", "number": 242, "title": "functools.wraps can pollute a function's global namespace", "user": {"login": "pierreglaser", "id": 18555600, "node_id": "MDQ6VXNlcjE4NTU1NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/18555600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierreglaser", "html_url": "https://github.com/pierreglaser", "followers_url": "https://api.github.com/users/pierreglaser/followers", "following_url": "https://api.github.com/users/pierreglaser/following{/other_user}", "gists_url": "https://api.github.com/users/pierreglaser/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierreglaser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierreglaser/subscriptions", "organizations_url": "https://api.github.com/users/pierreglaser/orgs", "repos_url": "https://api.github.com/users/pierreglaser/repos", "events_url": "https://api.github.com/users/pierreglaser/events{/privacy}", "received_events_url": "https://api.github.com/users/pierreglaser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-30T18:26:06Z", "updated_at": "2019-02-07T14:59:25Z", "closed_at": "2019-02-07T14:59:25Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "using `functools.wraps`\r\n```python\r\nfunctools.wraps(f)\r\ndef g():\r\n    pass\r\n```\r\n changes a `g`'s `__module__` attribute to `f.__module__`, but not its `__globals__`. Because we retrieve globals from `state['module']` at unpickling time, this will pollute a depickled version of `g` with the globals of `f.__module__`\r\n\r\nAs an illustration:\r\n```python\r\nimport functools\r\nimport pickle\r\nimport cloudpickle\r\n\r\n\r\n@functools.wraps(pickle._dumps)\r\ndef f():\r\n    pass\r\n\r\n\r\ndepickled_f = pickle.loads(cloudpickle.dumps(f))\r\nassert depickled_f.__globals__ is vars(pickle)\r\n```\r\npasses.\r\n\r\nThis is tricky: \r\nOn one hand one can spot if a function is wrapping another by checking for a `__wrapped__` attribute. On the other hand, once `wraps` is used, there is no way back, and `f`'s attributes are lost forever. \r\nThe side effects are not life threatening, but this may be worth adding a warning at pickling time. I am thinking about (roughly):\r\n\r\n```python\r\nif hasattr(func, '__wrapped__'):\r\n    msg = (\"This function seems decorated by functools.wraps. This\"\r\n           \" may cause {}'s __globals__ to be populated with\"\r\n           \" unnecessary global variables at unpickling time.\"\r\n           \" To fix it, change the assigned argument of\"\r\n           \" functools.wraps so that is does not include  __module__ \")\r\n    raise UserWarning(msg.format(func.__code__.co_name))\r\n```\r\nInside `extract_func_data`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/238", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/238/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/238/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/238", "id": 404321313, "node_id": "MDU6SXNzdWU0MDQzMjEzMTM=", "number": 238, "title": "CI configuration to run the tests of Ray against development version of cloudpickle", "user": {"login": "ogrisel", "id": 89061, "node_id": "MDQ6VXNlcjg5MDYx", "avatar_url": "https://avatars0.githubusercontent.com/u/89061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogrisel", "html_url": "https://github.com/ogrisel", "followers_url": "https://api.github.com/users/ogrisel/followers", "following_url": "https://api.github.com/users/ogrisel/following{/other_user}", "gists_url": "https://api.github.com/users/ogrisel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogrisel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogrisel/subscriptions", "organizations_url": "https://api.github.com/users/ogrisel/orgs", "repos_url": "https://api.github.com/users/ogrisel/repos", "events_url": "https://api.github.com/users/ogrisel/events{/privacy}", "received_events_url": "https://api.github.com/users/ogrisel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135102, "node_id": "MDU6TGFiZWwxOTkxMzUxMDI=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 199135103, "node_id": "MDU6TGFiZWwxOTkxMzUxMDM=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-29T14:37:14Z", "updated_at": "2019-03-19T13:44:01Z", "closed_at": "2019-03-19T13:44:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the recently merged #236, @pierreglaser added the ability to launch the tests of some downstream projects (loky, joblib and dask/distributed) in order to be able to detect if a specific PR is likely to introduce a regression in a downstream project just by adding the `[ci downstream]` flag in a commit message of the last commit of the PR.\r\n\r\nIt would be great to add the build configuration to launch the Ray test suite in a similar manner.\r\n\r\nI also opened #237 to do the same for PySpark.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/230", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/230/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/230/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/230", "id": 400011480, "node_id": "MDU6SXNzdWU0MDAwMTE0ODA=", "number": 230, "title": "Pickling lambda function that accepts a global as argument is broken on windows", "user": {"login": "TheButlah", "id": 6969415, "node_id": "MDQ6VXNlcjY5Njk0MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/6969415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheButlah", "html_url": "https://github.com/TheButlah", "followers_url": "https://api.github.com/users/TheButlah/followers", "following_url": "https://api.github.com/users/TheButlah/following{/other_user}", "gists_url": "https://api.github.com/users/TheButlah/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheButlah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheButlah/subscriptions", "organizations_url": "https://api.github.com/users/TheButlah/orgs", "repos_url": "https://api.github.com/users/TheButlah/repos", "events_url": "https://api.github.com/users/TheButlah/events{/privacy}", "received_events_url": "https://api.github.com/users/TheButlah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-01-16T21:44:02Z", "updated_at": "2019-02-13T14:41:45Z", "closed_at": "2019-02-07T14:59:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to pickle a lambda function that calls another function with a global variable as an argument. It then unpickles the lambda in a new process and tries to call it. When it does so, it doesn't see the value of the global variable when it was pickled, but instead the original value of the variable, `None`. The issues goes away when I no longer modify the global variable using the global keyword in the helper function. The following is pseudocode of what fails:\r\n```python3\r\nargs = None\r\n\r\ndef parse_args():\r\n    # set up argument parser here (code omitted)\r\n\r\n    global args\r\n    args = parser.parse_args()\r\n\r\ndef main():\r\n    parse_args()\r\n    fns = [lambda: something(args)]*10\r\n    wrappers = [CloudpickleWrapper(f) for f in fns]\r\n    # For each wrapped function, start a process that calls that function (code omitted)\r\n    # In these processes, they unexpectedly see `args` as being `None` instead of the results of the argument parser\r\n\r\nif __name__==\"__main__\":\r\n    main()\r\n```\r\n\r\nI am running Windows 10, Anaconda Python 3.6. **This issue did not occur on Ubuntu when I tested it!**. \r\n\r\nThe following tests fail under windows when I run `tox`. **No tests failed under Ubuntu.** These are the tests:\r\n\r\n```\r\ntests/cloudpickle_file_test.py::CloudPickleFileTests::test_closed_file PASSED\r\ntests/cloudpickle_file_test.py::CloudPickleFileTests::test_empty_file PASSED\r\ntests/cloudpickle_file_test.py::CloudPickleFileTests::test_pickling_special_file_handles PASSED\r\ntests/cloudpickle_file_test.py::CloudPickleFileTests::test_plus_mode PASSED\r\ntests/cloudpickle_file_test.py::CloudPickleFileTests::test_r_mode PASSED\r\ntests/cloudpickle_file_test.py::CloudPickleFileTests::test_seek PASSED\r\ntests/cloudpickle_file_test.py::CloudPickleFileTests::test_temp_file SKIPPED\r\ntests/cloudpickle_file_test.py::CloudPickleFileTests::test_w_mode PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_Ellipsis PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_EllipsisType PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_NoneType PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_NotImplemented PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_NotImplementedType PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_abc PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_attrgetter PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_buffer PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_builtin_function_without_module PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_builtin_type__new__ PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_cell_manipulation PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_classmethod  PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_closure_interacting_with_a_global_variable PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_closure_none_is_preserved PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_correct_globals_import PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_cycle_in_classdict_globals PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_dynamic_module FAILED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_dynamic_modules_globals FAILED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_dynamic_pytest_module PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_dynamically_generated_class_that_uses_super PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_empty_cell_preserved PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_extended_arg PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_faulty_module PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_func_globals PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_function_from_dynamic_module_with_globals_modifications FAILED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_function_module_name PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_function_pickle_compat_0_4_0 SKIPPED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_function_pickle_compat_0_4_1 SKIPPED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_function_qualname PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_generator PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_import FAILED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_instancemethods_without_self PASSED\r\ntests/cloudpickle_test.py::CloudPickleTest::test_interactively_defined_function FAILED\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/225", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/225/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/225/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/225/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/225", "id": 395238944, "node_id": "MDU6SXNzdWUzOTUyMzg5NDQ=", "number": 225, "title": "Pickling objects with __slots__ fails", "user": {"login": "sk1p", "id": 5778, "node_id": "MDQ6VXNlcjU3Nzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sk1p", "html_url": "https://github.com/sk1p", "followers_url": "https://api.github.com/users/sk1p/followers", "following_url": "https://api.github.com/users/sk1p/following{/other_user}", "gists_url": "https://api.github.com/users/sk1p/gists{/gist_id}", "starred_url": "https://api.github.com/users/sk1p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sk1p/subscriptions", "organizations_url": "https://api.github.com/users/sk1p/orgs", "repos_url": "https://api.github.com/users/sk1p/repos", "events_url": "https://api.github.com/users/sk1p/events{/privacy}", "received_events_url": "https://api.github.com/users/sk1p/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-02T12:52:00Z", "updated_at": "2019-01-23T16:44:18Z", "closed_at": "2019-01-17T08:57:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following minimal test case:\r\n\r\n```diff\r\ndiff --git a/tests/cloudpickle_test.py b/tests/cloudpickle_test.py\r\nindex d318da7..fec779c 100644\r\n--- a/tests/cloudpickle_test.py\r\n+++ b/tests/cloudpickle_test.py\r\n@@ -1310,6 +1310,17 @@ class CloudPickleTest(unittest.TestCase):\r\n \r\n         self.assertEqual(f2.__annotations__, f.__annotations__)\r\n \r\n+    def test_slots(self):\r\n+        class WithSlots(object):\r\n+            __slots__ = [\"a\"]\r\n+\r\n+            def __init__(self):\r\n+                self.a = 42\r\n+\r\n+        obj = WithSlots()\r\n+        obj2 = pickle_depickle(obj, protocol=self.protocol)\r\n+        self.assertEqual(obj2.a, 42)\r\n+\r\n \r\n class Protocol2CloudPickleTest(CloudPickleTest):\r\n\r\n```\r\n\r\nFails with this exception:\r\n\r\n```\r\nobj = <tests.cloudpickle_test.CloudPickleTest.test_slots.<locals>.WithSlots object at 0x7f5cdc8f94c8>, protocol = 4\r\n\r\n    def pickle_depickle(obj, protocol=cloudpickle.DEFAULT_PROTOCOL):\r\n        \"\"\"Helper function to test whether object pickled with cloudpickle can be\r\n        depickled with pickle\r\n        \"\"\"\r\n>       return pickle.loads(cloudpickle.dumps(obj, protocol=protocol))\r\nE       AttributeError: type object 'WithSlots' has no attribute 'a'\r\n\r\nobj        = <tests.cloudpickle_test.CloudPickleTest.test_slots.<locals>.WithSlots object at 0x7f5cdc8f94c8>\r\nprotocol   = 4\r\n```\r\n\r\nPickling with `pickle` from the standard library works.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/223", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/223/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/223/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/223", "id": 391432581, "node_id": "MDU6SXNzdWUzOTE0MzI1ODE=", "number": 223, "title": "pickling annotations / mappingproxy objects", "user": {"login": "satra", "id": 184063, "node_id": "MDQ6VXNlcjE4NDA2Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/184063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/satra", "html_url": "https://github.com/satra", "followers_url": "https://api.github.com/users/satra/followers", "following_url": "https://api.github.com/users/satra/following{/other_user}", "gists_url": "https://api.github.com/users/satra/gists{/gist_id}", "starred_url": "https://api.github.com/users/satra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/satra/subscriptions", "organizations_url": "https://api.github.com/users/satra/orgs", "repos_url": "https://api.github.com/users/satra/repos", "events_url": "https://api.github.com/users/satra/events{/privacy}", "received_events_url": "https://api.github.com/users/satra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135102, "node_id": "MDU6TGFiZWwxOTkxMzUxMDI=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 199135103, "node_id": "MDU6TGFiZWwxOTkxMzUxMDM=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-12-16T03:48:09Z", "updated_at": "2019-02-13T14:41:24Z", "closed_at": "2019-02-06T13:07:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "cloudpickle appears to still have an issue (see #193, #209) with pickling type annotations. the reason i can't use pickle is that it doesn't support dynamic dataclasses (see: https://bugs.python.org/issue35510), which cloudpickle does support. \r\n \r\n```\r\nIn [1]: import dataclasses as dc                                                  \r\nIn [2]: import typing as ty                                                       \r\nIn [3]: import cloudpickle as cp                                                  \r\nIn [4]: @dc.dataclass \r\n   ...: class A: \r\n   ...:      a: ty.Optional[int]=None \r\n   ...:                                                                           \r\nIn [5]: cp.dumps(A)                                                               \r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-5-63d18a4a1006> in <module>\r\n----> 1 cp.dumps(A)\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/site-packages/cloudpickle/cloudpickle.py in dumps(obj, protocol)\r\n    929     try:\r\n    930         cp = CloudPickler(file, protocol=protocol)\r\n--> 931         cp.dump(obj)\r\n    932         return file.getvalue()\r\n    933     finally:\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/site-packages/cloudpickle/cloudpickle.py in dump(self, obj)\r\n    282         self.inject_addons()\r\n    283         try:\r\n--> 284             return Pickler.dump(self, obj)\r\n    285         except RuntimeError as e:\r\n    286             if 'recursion' in e.args[0]:\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in dump(self, obj)\r\n    435         if self.proto >= 4:\r\n    436             self.framer.start_framing()\r\n--> 437         self.save(obj)\r\n    438         self.write(STOP)\r\n    439         self.framer.end_framing()\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    502         f = self.dispatch.get(t)\r\n    503         if f is not None:\r\n--> 504             f(self, obj) # Call unbound method with explicit self\r\n    505             return\r\n    506 \r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/site-packages/cloudpickle/cloudpickle.py in save_global(self, obj, name, pack)\r\n    676 \r\n    677         if obj.__module__ == \"__main__\":\r\n--> 678             return self.save_dynamic_class(obj)\r\n    679 \r\n    680         try:\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/site-packages/cloudpickle/cloudpickle.py in save_dynamic_class(self, obj)\r\n    515         # Now save the rest of obj's __dict__. Any references to obj\r\n    516         # encountered while saving will point to the skeleton class.\r\n--> 517         save(clsdict)\r\n    518 \r\n    519         # Write a tuple of (skeleton_class, clsdict).\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    502         f = self.dispatch.get(t)\r\n    503         if f is not None:\r\n--> 504             f(self, obj) # Call unbound method with explicit self\r\n    505             return\r\n    506 \r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in save_dict(self, obj)\r\n    854 \r\n    855         self.memoize(obj)\r\n--> 856         self._batch_setitems(obj.items())\r\n    857 \r\n    858     dispatch[dict] = save_dict\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in _batch_setitems(self, items)\r\n    880                 for k, v in tmp:\r\n    881                     save(k)\r\n--> 882                     save(v)\r\n    883                 write(SETITEMS)\r\n    884             elif n:\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    502         f = self.dispatch.get(t)\r\n    503         if f is not None:\r\n--> 504             f(self, obj) # Call unbound method with explicit self\r\n    505             return\r\n    506 \r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in save_dict(self, obj)\r\n    854 \r\n    855         self.memoize(obj)\r\n--> 856         self._batch_setitems(obj.items())\r\n    857 \r\n    858     dispatch[dict] = save_dict\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in _batch_setitems(self, items)\r\n    885                 k, v = tmp[0]\r\n    886                 save(k)\r\n--> 887                 save(v)\r\n    888                 write(SETITEM)\r\n    889             # else tmp is empty, and we're done\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    547 \r\n    548         # Save the reduce() output and finally memoize the object\r\n--> 549         self.save_reduce(obj=obj, *rv)\r\n    550 \r\n    551     def persistent_id(self, obj):\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in save_reduce(self, func, args, state, listitems, dictitems, obj)\r\n    660 \r\n    661         if state is not None:\r\n--> 662             save(state)\r\n    663             write(BUILD)\r\n    664 \r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    502         f = self.dispatch.get(t)\r\n    503         if f is not None:\r\n--> 504             f(self, obj) # Call unbound method with explicit self\r\n    505             return\r\n    506 \r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in save_tuple(self, obj)\r\n    769         if n <= 3 and self.proto >= 2:\r\n    770             for element in obj:\r\n--> 771                 save(element)\r\n    772             # Subtle.  Same as in the big comment below.\r\n    773             if id(obj) in memo:\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    502         f = self.dispatch.get(t)\r\n    503         if f is not None:\r\n--> 504             f(self, obj) # Call unbound method with explicit self\r\n    505             return\r\n    506 \r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in save_dict(self, obj)\r\n    854 \r\n    855         self.memoize(obj)\r\n--> 856         self._batch_setitems(obj.items())\r\n    857 \r\n    858     dispatch[dict] = save_dict\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in _batch_setitems(self, items)\r\n    880                 for k, v in tmp:\r\n    881                     save(k)\r\n--> 882                     save(v)\r\n    883                 write(SETITEMS)\r\n    884             elif n:\r\n\r\n/software/miniconda3/envs/pydra-dev/lib/python3.7/pickle.py in save(self, obj, save_persistent_id)\r\n    522             reduce = getattr(obj, \"__reduce_ex__\", None)\r\n    523             if reduce is not None:\r\n--> 524                 rv = reduce(self.proto)\r\n    525             else:\r\n    526                 reduce = getattr(obj, \"__reduce__\", None)\r\n\r\nTypeError: can't pickle mappingproxy objects\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/219", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/219/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/219/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/219", "id": 383770260, "node_id": "MDU6SXNzdWUzODM3NzAyNjA=", "number": 219, "title": "TST some tests are not using self.protocol when pickling objects", "user": {"login": "pierreglaser", "id": 18555600, "node_id": "MDQ6VXNlcjE4NTU1NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/18555600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierreglaser", "html_url": "https://github.com/pierreglaser", "followers_url": "https://api.github.com/users/pierreglaser/followers", "following_url": "https://api.github.com/users/pierreglaser/following{/other_user}", "gists_url": "https://api.github.com/users/pierreglaser/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierreglaser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierreglaser/subscriptions", "organizations_url": "https://api.github.com/users/pierreglaser/orgs", "repos_url": "https://api.github.com/users/pierreglaser/repos", "events_url": "https://api.github.com/users/pierreglaser/events{/privacy}", "received_events_url": "https://api.github.com/users/pierreglaser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-23T10:25:23Z", "updated_at": "2018-11-25T08:19:36Z", "closed_at": "2018-11-25T08:19:36Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I noticed that some tests methods of CloudPickleTest are not using `self.protocol` when calling functions that involve pickling objects (e.g `pickle_depickle`, `cloudpickle.dumps` etc.). Among which:\r\n* `test_pickling_file_handles`\r\n* `test_func_globals`\r\n* `test_lambda`\r\n* `test_recursive_closure`\r\n* `test_unhashable_closure`\r\n* `test_ufunc`\r\n* `test_loads_namespace`\r\n* `test_instancemethods_without_self`\r\n* `test_dynamic_modules_globals`\r\n* `test_module_locals_behavior`\r\n* `test_load_dynamic_module_in_grandchild_process`\r\n* `test_correct_globals_import`\r\n* `test_tornado_coroutine`\r\n* `test_extended_arg`\r\n* `test_submodule`\r\n* `test_submodule_closure`\r\n* `test_multiprocess`\r\n* `test_import`\r\n* `test_dynamic_pytest_module`\r\n* `test_function_from_dynamic_module_with_globals_modifications`\r\n* `test_pickle_reraise`\r\n* `test_unhashable_function`\r\n* `test_wraps_preserves_function_name`\r\n* `test_wraps_preserves_function_doc`\r\n* `test_wraps_preserves_function_annotations`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/217", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/217/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/217/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/217", "id": 383103809, "node_id": "MDU6SXNzdWUzODMxMDM4MDk=", "number": 217, "title": "Inconsitent check when accessing __module__ attribute", "user": {"login": "pierreglaser", "id": 18555600, "node_id": "MDQ6VXNlcjE4NTU1NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/18555600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierreglaser", "html_url": "https://github.com/pierreglaser", "followers_url": "https://api.github.com/users/pierreglaser/followers", "following_url": "https://api.github.com/users/pierreglaser/following{/other_user}", "gists_url": "https://api.github.com/users/pierreglaser/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierreglaser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierreglaser/subscriptions", "organizations_url": "https://api.github.com/users/pierreglaser/orgs", "repos_url": "https://api.github.com/users/pierreglaser/repos", "events_url": "https://api.github.com/users/pierreglaser/events{/privacy}", "received_events_url": "https://api.github.com/users/pierreglaser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-21T12:50:19Z", "updated_at": "2019-01-14T10:44:44Z", "closed_at": "2019-01-14T10:44:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "in `Cloudpickler.save_function_tuple`, \r\nthe `__module__ ` attribute of the function being saved is accessed two times:\r\n * once in `Cloupickler.extract_func_data`  after this conditional statement:\r\n```python\r\nif hasattr(func, '__module__') and func.__module__ is not None\r\n```\r\n* then, further away in `save_function_tuple`, `func.__module__` is accessed without a previous `hasattr` condition.\r\n\r\nThis should be cleaned, removing the `hasattr` check in the first statement, or adding one the second time. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/214", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/214/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/214/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/214", "id": 375224903, "node_id": "MDU6SXNzdWUzNzUyMjQ5MDM=", "number": 214, "title": "New features in cloudpickle give unexpected results", "user": {"login": "suquark", "id": 13750372, "node_id": "MDQ6VXNlcjEzNzUwMzcy", "avatar_url": "https://avatars1.githubusercontent.com/u/13750372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suquark", "html_url": "https://github.com/suquark", "followers_url": "https://api.github.com/users/suquark/followers", "following_url": "https://api.github.com/users/suquark/following{/other_user}", "gists_url": "https://api.github.com/users/suquark/gists{/gist_id}", "starred_url": "https://api.github.com/users/suquark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suquark/subscriptions", "organizations_url": "https://api.github.com/users/suquark/orgs", "repos_url": "https://api.github.com/users/suquark/repos", "events_url": "https://api.github.com/users/suquark/events{/privacy}", "received_events_url": "https://api.github.com/users/suquark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-10-29T21:29:38Z", "updated_at": "2019-02-13T14:42:47Z", "closed_at": "2019-02-07T15:00:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am a developer of [Ray](https://github.com/ray-project/ray), and we have something we want to fix soon. We are updating cloudpickle to 0.6.1 to fix an [issue](https://github.com/ray-project/ray/issues/2685). However, although version 0.6.1 fixed our issue, it  [failed to pickle several objects correctly](https://github.com/ray-project/ray/pull/2928). These failures only happened when we were trying to run a complex set of unittests so we found it hard to give some simple instructions to trigger those cases. \r\n\r\nI investigated into those cases and created a [PR](https://github.com/ray-project/ray/pull/3076) which fixed those failures and this PR showed that:\r\n\r\n* When restoring the global variables, in Ray we should always give serialized global variables higher priority (that is, always overriding existing global variables). The new changes in cloudpickle gives higher priority to existing global variables.\r\n* In Ray, do not try to infer global variables from the `__module__` attribute of a function. The new changes in cloudpickle try to make use of `__module__` when it fails to fetch global variables.\r\n\r\nIt seems that these new features are not compatible with Ray, but they are not really bugs to be reverted. And since we would like to follow the cloudpickle upstream instead of maintaining our own copy, the proper way should be creating several switches to control the availability of those new features in the upstream. Could you have any suggestions about how and where should we put those switches?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/213", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/213/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/213/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/213", "id": 369225143, "node_id": "MDU6SXNzdWUzNjkyMjUxNDM=", "number": 213, "title": "cloudpickle failing to load python2 object under python3", "user": {"login": "ericksc", "id": 20059518, "node_id": "MDQ6VXNlcjIwMDU5NTE4", "avatar_url": "https://avatars0.githubusercontent.com/u/20059518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericksc", "html_url": "https://github.com/ericksc", "followers_url": "https://api.github.com/users/ericksc/followers", "following_url": "https://api.github.com/users/ericksc/following{/other_user}", "gists_url": "https://api.github.com/users/ericksc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericksc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericksc/subscriptions", "organizations_url": "https://api.github.com/users/ericksc/orgs", "repos_url": "https://api.github.com/users/ericksc/repos", "events_url": "https://api.github.com/users/ericksc/events{/privacy}", "received_events_url": "https://api.github.com/users/ericksc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-11T17:25:40Z", "updated_at": "2019-01-24T09:14:53Z", "closed_at": "2019-01-24T09:14:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Under Python3,\r\nI tried to load a pickled object on Python2,\r\nbut it is failing at function: def _builtin_type(name)\r\n\r\n`pkl = cloudpickle.load(f, fix_imports=True, encoding='bytes')`\r\n    \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\n`name = b'CodeType'`\r\n\r\n    `def _builtin_type(name):`\r\n`>       return getattr(types, name)`\r\n`E       TypeError: getattr(): attribute name must be string`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/211", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/211/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/211/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/211", "id": 368626866, "node_id": "MDU6SXNzdWUzNjg2MjY4NjY=", "number": 211, "title": "Cloudpickle 0.6.0 is broken on python3.4 for local functions", "user": {"login": "tomMoral", "id": 3321081, "node_id": "MDQ6VXNlcjMzMjEwODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3321081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomMoral", "html_url": "https://github.com/tomMoral", "followers_url": "https://api.github.com/users/tomMoral/followers", "following_url": "https://api.github.com/users/tomMoral/following{/other_user}", "gists_url": "https://api.github.com/users/tomMoral/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomMoral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomMoral/subscriptions", "organizations_url": "https://api.github.com/users/tomMoral/orgs", "repos_url": "https://api.github.com/users/tomMoral/repos", "events_url": "https://api.github.com/users/tomMoral/events{/privacy}", "received_events_url": "https://api.github.com/users/tomMoral/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-10T11:48:35Z", "updated_at": "2018-10-10T16:12:06Z", "closed_at": "2018-10-10T16:12:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The pickling of local function from a module is broken on `python3.4`. This seems to be related to #205\r\n\r\nThe way to reproduce that is having 2 files in the same directory and launching the later command line.\r\n\r\n__mk_dynamic.py__\r\n```python\r\ndef f():\r\n    def g():\r\n        return sum(range(10))\r\n\r\n    return g\r\n```\r\n\r\n__main.py__\r\n```python\r\nfrom mk_dynamic import f\r\nfrom cloudpickle import dumps\r\n\r\n\r\nprint(dumps(f()))\r\n```\r\n\r\nAnd then calling the pickled function with the following command line\r\n\r\n```\r\npython -c \"from cloudpickle import loads; g = loads($(python main.py)); print(g())\"\r\n```\r\n\r\nThe given output is\r\n```python\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/home/tom/Work/prog/stackoverflow/bug_cloudpickle_builtins/mk_nobuiltin.py\", line 5, in g\r\n    return sum(range(10))\r\nKeyError: 'sum'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/209", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/209/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/209/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/209", "id": 367299529, "node_id": "MDU6SXNzdWUzNjcyOTk1Mjk=", "number": 209, "title": "Pickling Annotations can _still_ fail", "user": {"login": "jamesstidard", "id": 1797906, "node_id": "MDQ6VXNlcjE3OTc5MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1797906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesstidard", "html_url": "https://github.com/jamesstidard", "followers_url": "https://api.github.com/users/jamesstidard/followers", "following_url": "https://api.github.com/users/jamesstidard/following{/other_user}", "gists_url": "https://api.github.com/users/jamesstidard/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesstidard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesstidard/subscriptions", "organizations_url": "https://api.github.com/users/jamesstidard/orgs", "repos_url": "https://api.github.com/users/jamesstidard/repos", "events_url": "https://api.github.com/users/jamesstidard/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesstidard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135100, "node_id": "MDU6TGFiZWwxOTkxMzUxMDA=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 199135103, "node_id": "MDU6TGFiZWwxOTkxMzUxMDM=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-05T17:22:37Z", "updated_at": "2018-10-08T14:19:44Z", "closed_at": "2018-10-08T14:19:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting some strange behaviour related to #193. Sorry to open the typing can of worms.\r\n\r\nI'm using Python 3.7 and `cloudpickle==0.5.6` but have been using cloudpickle via `distributed==1.23.2`. Which I reported over at: https://github.com/dask/distributed/issues/2291\r\n\r\nThe above code sample works for me. However, the following does not:\r\n\r\n```python\r\nfrom typing import Optional\r\nfrom distributed import Client\r\n\r\ndef f2() -> Optional[int]:\r\n    return 1\r\n\r\ndef f1() -> int:\r\n    return 1\r\n\r\ndef main():\r\n    client = Client()\r\n    print(client.submit(f1).result())  # works. prints 1\r\n    print(client.submit(f2).result())  # fail. raises\r\n    client.close()\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nApologies that this includes a dask dependency. I tried to reproduce with the above code snippet but I don't get an exception:\r\n\r\n```python\r\nfrom typing import Optional\r\nimport cloudpickle\r\n\r\ncloudpickle.dumps(Optional[int], protocol=cloudpickle.DEFAULT_PROTOCOL)\r\n```\r\n\r\nI'm a little bemused to where the problem is coming from now with those results.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/207", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/207/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/207/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/207", "id": 365374845, "node_id": "MDU6SXNzdWUzNjUzNzQ4NDU=", "number": 207, "title": "DeprecationWarning: the imp module is deprecated in favour of importlib", "user": {"login": "ogrisel", "id": 89061, "node_id": "MDQ6VXNlcjg5MDYx", "avatar_url": "https://avatars0.githubusercontent.com/u/89061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogrisel", "html_url": "https://github.com/ogrisel", "followers_url": "https://api.github.com/users/ogrisel/followers", "following_url": "https://api.github.com/users/ogrisel/following{/other_user}", "gists_url": "https://api.github.com/users/ogrisel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogrisel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogrisel/subscriptions", "organizations_url": "https://api.github.com/users/ogrisel/orgs", "repos_url": "https://api.github.com/users/ogrisel/repos", "events_url": "https://api.github.com/users/ogrisel/events{/privacy}", "received_events_url": "https://api.github.com/users/ogrisel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-01T09:21:54Z", "updated_at": "2018-10-08T14:20:31Z", "closed_at": "2018-10-08T14:20:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Modules such as scikit-learn that use cloudpickle and do not filer DeprecationWarning get the following when importing cloudpickle. \r\n\r\n```\r\nDeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses import imp\r\n```\r\n\r\nAnother way to display this is to launch python with the `-Wd` flag:\r\n\r\n```\r\n$ python -Wd -c \"import cloudpickle\"\r\n/path/to/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n  import imp\r\n```\r\n\r\nWe should therefore refactor cloudpickle to use importlib instead of imp while taking care of not breaking backward compat.\r\n\r\nWe should also run the tests of cloudpickle in a way that they would fail in case of uncaught deprecation warnings.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/203", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/203/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/203/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/203", "id": 360319651, "node_id": "MDU6SXNzdWUzNjAzMTk2NTE=", "number": 203, "title": "Add a non-regression test to ensure that we do not include un-necessary global variables in the pickles", "user": {"login": "ogrisel", "id": 89061, "node_id": "MDQ6VXNlcjg5MDYx", "avatar_url": "https://avatars0.githubusercontent.com/u/89061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogrisel", "html_url": "https://github.com/ogrisel", "followers_url": "https://api.github.com/users/ogrisel/followers", "following_url": "https://api.github.com/users/ogrisel/following{/other_user}", "gists_url": "https://api.github.com/users/ogrisel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogrisel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogrisel/subscriptions", "organizations_url": "https://api.github.com/users/ogrisel/orgs", "repos_url": "https://api.github.com/users/ogrisel/repos", "events_url": "https://api.github.com/users/ogrisel/events{/privacy}", "received_events_url": "https://api.github.com/users/ogrisel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135103, "node_id": "MDU6TGFiZWwxOTkxMzUxMDM=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-14T14:07:02Z", "updated_at": "2018-09-18T07:44:23Z", "closed_at": "2018-09-18T07:44:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Basically at least one of the following to checks should be refactored into a test part of the cloudpickle test suite:\r\n\r\n- https://github.com/cloudpipe/cloudpickle/issues/202#issuecomment-421364343\r\n- https://github.com/cloudpipe/cloudpickle/issues/202#issuecomment-421366065 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/202", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/202/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/202/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/202", "id": 360300761, "node_id": "MDU6SXNzdWUzNjAzMDA3NjE=", "number": 202, "title": "Recent release brings in all globals", "user": {"login": "mrocklin", "id": 306380, "node_id": "MDQ6VXNlcjMwNjM4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135100, "node_id": "MDU6TGFiZWwxOTkxMzUxMDA=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-09-14T13:16:44Z", "updated_at": "2018-09-14T14:09:52Z", "closed_at": "2018-09-14T14:04:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following test started to fail in the latest 0.5.6 release:\r\n\r\n```python\r\nimport numpy as np\r\nimport cloudpickle\r\n\r\ndef test_pickle_globals():\r\n    def f(x):\r\n        return np.sin(x) + np.cos(x)  # requires access to global numpy\r\n\r\n    def g():  # some other object not necessary for f\r\n        pass\r\n\r\n    d = cloudpickle.loads(cloudpickle.dumps(f)).__globals__\r\n    assert 'g' not in d\r\n    assert set(d) == {'np', '__builtins__'}\r\n```\r\n\r\nIt now seems that cloudpickle brings in many more globals into the serialization.\r\n\r\n```python\r\nIn [6]: set(d)\r\nOut[6]: \r\n{'In',\r\n 'Out',\r\n '_',\r\n '_5',\r\n '__',\r\n '___',\r\n '__builtin__',\r\n '__builtins__',\r\n '__doc__',\r\n '__loader__',\r\n '__name__',\r\n '__package__',\r\n '__spec__',\r\n '_dh',\r\n '_i',\r\n '_i1',\r\n '_i2',\r\n '_i3',\r\n '_i4',\r\n '_i5',\r\n '_i6',\r\n '_ih',\r\n '_ii',\r\n '_iii',\r\n '_oh',\r\n 'cloudpickle',\r\n 'd',\r\n 'exit',\r\n 'f',\r\n 'g',\r\n 'get_ipython',\r\n 'np',\r\n 'quit'}\r\n```\r\n\r\nThis is causing dask tests to fail", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/200", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/200/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/200/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/200", "id": 358770482, "node_id": "MDU6SXNzdWUzNTg3NzA0ODI=", "number": 200, "title": "Failure when pickling a function with type annotations", "user": {"login": "joshburkart", "id": 3888181, "node_id": "MDQ6VXNlcjM4ODgxODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/3888181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshburkart", "html_url": "https://github.com/joshburkart", "followers_url": "https://api.github.com/users/joshburkart/followers", "following_url": "https://api.github.com/users/joshburkart/following{/other_user}", "gists_url": "https://api.github.com/users/joshburkart/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshburkart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshburkart/subscriptions", "organizations_url": "https://api.github.com/users/joshburkart/orgs", "repos_url": "https://api.github.com/users/joshburkart/repos", "events_url": "https://api.github.com/users/joshburkart/events{/privacy}", "received_events_url": "https://api.github.com/users/joshburkart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-10T19:56:37Z", "updated_at": "2018-09-12T16:54:55Z", "closed_at": "2018-09-12T16:54:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example problematic code snippet:\r\n\r\n```python\r\nimport typing\r\n\r\nimport cloudpickle\r\n\r\ndef blah() -> typing.List[int]:\r\n    return [5]\r\n\r\ncloudpickle.loads(cloudpickle.dumps(blah))\r\n```\r\n\r\nThis results in a crash; traceback below. Removing the `-> typing.List[int]` works fine. Works fine regardless on Mac (Python 3.6.4 and 3.6.6). Weird!\r\n\r\nCrash traceback (Python 3.6.5, Ubuntu 18.04):\r\n\r\nTraceback:\r\n\r\n```\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-1-e35febcbc5b6> in <module>()\r\n      6     return [5]\r\n      7\r\n----> 8 cloudpickle.loads(cloudpickle.dumps(blah))\r\n\r\n/usr/lib/python3.6/typing.py in __new__(cls, name, bases, namespace, tvars, args, origin, extra, orig_bases)\r\n    946             for base in bases:\r\n    947                 if base is Generic:\r\n--> 948                     raise TypeError(\"Cannot inherit from plain Generic\")\r\n    949                 if (isinstance(base, GenericMeta) and\r\n    950                         base.__origin__ is Generic):\r\n\r\nTypeError: Cannot inherit from plain Generic\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/199", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/199/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/199/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/199", "id": 358118469, "node_id": "MDU6SXNzdWUzNTgxMTg0Njk=", "number": 199, "title": "modified dynamic module globals get overriden at load time", "user": {"login": "pierreglaser", "id": 18555600, "node_id": "MDQ6VXNlcjE4NTU1NjAw", "avatar_url": "https://avatars3.githubusercontent.com/u/18555600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierreglaser", "html_url": "https://github.com/pierreglaser", "followers_url": "https://api.github.com/users/pierreglaser/followers", "following_url": "https://api.github.com/users/pierreglaser/following{/other_user}", "gists_url": "https://api.github.com/users/pierreglaser/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierreglaser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierreglaser/subscriptions", "organizations_url": "https://api.github.com/users/pierreglaser/orgs", "repos_url": "https://api.github.com/users/pierreglaser/repos", "events_url": "https://api.github.com/users/pierreglaser/events{/privacy}", "received_events_url": "https://api.github.com/users/pierreglaser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-07T15:43:28Z", "updated_at": "2018-10-01T09:13:56Z", "closed_at": "2018-10-01T09:13:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hi all, \r\nWhile introspecting `test_dynamic_module` for #192, I wrote a script that \r\n* dumps a dynamic module,\r\n* changes a global variable inside\r\n* finally re-load the dumped module. \r\n\r\n```python\r\nimport imp\r\nimport cloudpickle\r\nimport textwrap\r\nimport sys\r\nimport pickle\r\n\r\nmod = imp.new_module('mod')\r\ncode = '''\r\nx = 1\r\n'''\r\nexec(textwrap.dedent(code), mod.__dict__)\r\n\r\n# first, dump the module\r\nfileobj = cloudpickle.dumps(mod)\r\n\r\n# change the mod's global variable x\r\nmod.x = 2\r\n\r\n# create child-process-like process environnement where\r\n# mod is already loaded with the modified variable x\r\nsys.modules['mod'] = mod\r\n\r\n# finally, re-load the dynamic module\r\nmod2 = pickle.loads(fileobj)\r\n\r\n# this fails for now\r\nassert mod2.x == mod.x\r\n```\r\nThe modified global variable gets overriden. I wonder if this is global behavior, or it needs to be changed.  \r\n\r\n\r\nUsing Python 3.7.0, cloudpickle==0.5.5\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/196", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/196/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/196/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/196/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/196", "id": 357546884, "node_id": "MDU6SXNzdWUzNTc1NDY4ODQ=", "number": 196, "title": "typing.Generic-based type annotations cannot be loaded", "user": {"login": "marcbllv", "id": 7562542, "node_id": "MDQ6VXNlcjc1NjI1NDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/7562542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcbllv", "html_url": "https://github.com/marcbllv", "followers_url": "https://api.github.com/users/marcbllv/followers", "following_url": "https://api.github.com/users/marcbllv/following{/other_user}", "gists_url": "https://api.github.com/users/marcbllv/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcbllv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcbllv/subscriptions", "organizations_url": "https://api.github.com/users/marcbllv/orgs", "repos_url": "https://api.github.com/users/marcbllv/repos", "events_url": "https://api.github.com/users/marcbllv/events{/privacy}", "received_events_url": "https://api.github.com/users/marcbllv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-06T08:23:10Z", "updated_at": "2018-09-19T14:39:17Z", "closed_at": "2018-09-19T14:39:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Cloud pickle 0.5.5 now supports pickling of type annotations, but some of them cannot be pickled and loaded. Especially generic types that are based on base class `Generic`, like Sequence, Tuple, List, ...\r\n\r\nHere is the issue:\r\n\r\n```python\r\nimport typing\r\nimport cloudpickle\r\n\r\ncloudpickle.loads(cloudpickle.dumps(typing.Sequence[int]))\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/marcbeillevaire/anaconda/envs/test/lib/python3.6/typing.py\", line 948, in __new__\r\n    raise TypeError(\"Cannot inherit from plain Generic\")\r\nTypeError: Cannot inherit from plain Generic\r\n```\r\n\r\nNote that this works fine:\r\n\r\n```python\r\nimport typing\r\nimport cloudpickle\r\ncloudpickle.loads(cloudpickle.dumps(typing.Sequence))  # Sequence, not Sequence[int]\r\n```\r\n\r\nIt looks like the arguments of `__getitem__` get lost, and only the generic class is pickled -- here: Sequence, and not Sequence[int]. \r\n\r\nThis leads to loading a class that inherits from `typing.Generic`, not `typing.Generic[int]` which raises the error (see typing.py line 948 where the error above is raised).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/195", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/195/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/195/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/195", "id": 356833963, "node_id": "MDU6SXNzdWUzNTY4MzM5NjM=", "number": 195, "title": "cloudpickle breaks isinstance", "user": {"login": "bluenote10", "id": 3620703, "node_id": "MDQ6VXNlcjM2MjA3MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3620703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluenote10", "html_url": "https://github.com/bluenote10", "followers_url": "https://api.github.com/users/bluenote10/followers", "following_url": "https://api.github.com/users/bluenote10/following{/other_user}", "gists_url": "https://api.github.com/users/bluenote10/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluenote10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluenote10/subscriptions", "organizations_url": "https://api.github.com/users/bluenote10/orgs", "repos_url": "https://api.github.com/users/bluenote10/repos", "events_url": "https://api.github.com/users/bluenote10/events{/privacy}", "received_events_url": "https://api.github.com/users/bluenote10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-09-04T14:23:06Z", "updated_at": "2019-05-15T19:49:53Z", "closed_at": "2019-05-15T19:49:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Follow up to https://github.com/dask/distributed/issues/2228\r\n\r\n```python\r\nIn [1]: import cloudpickle\r\n\r\nIn [2]: class MyObject(object):\r\n   ...:     pass\r\n   ...: \r\n   ...: \r\n\r\nIn [3]: x = MyObject()\r\n\r\nIn [4]: x2 = cloudpickle.loads(cloudpickle.dumps(x))\r\n\r\nIn [5]: isinstance(x2, MyObject)\r\nOut[5]: False\r\n```\r\n\r\nUsing `cloudpickle==0.5.5`, Python 2.7.12, Ubuntu 16.04.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/194", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/194/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/194/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/194", "id": 354123184, "node_id": "MDU6SXNzdWUzNTQxMjMxODQ=", "number": 194, "title": "Cannot pickle a python class", "user": {"login": "markb21", "id": 5913311, "node_id": "MDQ6VXNlcjU5MTMzMTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5913311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markb21", "html_url": "https://github.com/markb21", "followers_url": "https://api.github.com/users/markb21/followers", "following_url": "https://api.github.com/users/markb21/following{/other_user}", "gists_url": "https://api.github.com/users/markb21/gists{/gist_id}", "starred_url": "https://api.github.com/users/markb21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markb21/subscriptions", "organizations_url": "https://api.github.com/users/markb21/orgs", "repos_url": "https://api.github.com/users/markb21/repos", "events_url": "https://api.github.com/users/markb21/events{/privacy}", "received_events_url": "https://api.github.com/users/markb21/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-26T19:51:35Z", "updated_at": "2018-10-26T07:03:05Z", "closed_at": "2018-10-26T07:03:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI am using dask to help me distribute my computations. It seems that dask is using cloudpickle. Everytime I run it I get the following error:\r\n\r\n```python-traceback\r\nFile \"/home/ubuntu/anaconda3/envs/job_classification/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 1060, in _make_skel_func\r\n    base_globals['\\_\\_builtins\\_\\_'] = \\_\\_builtins\\_\\_\r\nTypeError: 'str' object does not support item assignment\r\n```\r\n\r\nHow can I fix this issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/193", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/193/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/193/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/193", "id": 353846208, "node_id": "MDU6SXNzdWUzNTM4NDYyMDg=", "number": 193, "title": "Pickling Annotations can fail", "user": {"login": "cicdw", "id": 13255838, "node_id": "MDQ6VXNlcjEzMjU1ODM4", "avatar_url": "https://avatars0.githubusercontent.com/u/13255838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cicdw", "html_url": "https://github.com/cicdw", "followers_url": "https://api.github.com/users/cicdw/followers", "following_url": "https://api.github.com/users/cicdw/following{/other_user}", "gists_url": "https://api.github.com/users/cicdw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cicdw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cicdw/subscriptions", "organizations_url": "https://api.github.com/users/cicdw/orgs", "repos_url": "https://api.github.com/users/cicdw/repos", "events_url": "https://api.github.com/users/cicdw/events{/privacy}", "received_events_url": "https://api.github.com/users/cicdw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-24T16:18:08Z", "updated_at": "2018-10-05T17:23:57Z", "closed_at": "2018-09-19T14:39:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Now that [cloudpickle is including annotations](https://github.com/cloudpipe/cloudpickle/commit/6d03ffe1b06d5abc8f8615ac57d475946aca4b38), there are certain `typing` classes that fail to pickle in versions of python < 3.7 that are now raising errors when included as annotations:\r\n\r\n```python\r\n## python 3.6.6\r\n\r\nimport typing\r\nimport cloudpickle\r\n\r\ntt = typing.Union[str, typing.List[str]]\r\ncloudpickle.dumps(tt, protocol=cloudpickle.DEFAULT_PROTOCOL) # always fails\r\n# _pickle.PicklingError: Can't pickle typing.Union[str, typing.List[str]]: it's not the same object as typing.Union\r\n\r\ndef f(x: tt) -> tt:\r\n    return x\r\n\r\n## passes in cloudpickle==0.5.3 because type annotations were ignored\r\n## but fails in 0.5.4+\r\ncloudpickle.dumps(f, protocol=cloudpickle.DEFAULT_PROTOCOL)\r\n```\r\n\r\nAll of this works fine in python 3.7\r\n\r\nRelated: https://github.com/python/typing/issues/511", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/187", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/187/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/187/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/187", "id": 350756212, "node_id": "MDU6SXNzdWUzNTA3NTYyMTI=", "number": 187, "title": "Incorrect re-definition of global variables", "user": {"login": "tomMoral", "id": 3321081, "node_id": "MDQ6VXNlcjMzMjEwODE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3321081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomMoral", "html_url": "https://github.com/tomMoral", "followers_url": "https://api.github.com/users/tomMoral/followers", "following_url": "https://api.github.com/users/tomMoral/following{/other_user}", "gists_url": "https://api.github.com/users/tomMoral/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomMoral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomMoral/subscriptions", "organizations_url": "https://api.github.com/users/tomMoral/orgs", "repos_url": "https://api.github.com/users/tomMoral/repos", "events_url": "https://api.github.com/users/tomMoral/events{/privacy}", "received_events_url": "https://api.github.com/users/tomMoral/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-15T10:12:37Z", "updated_at": "2018-08-23T15:25:43Z", "closed_at": "2018-08-23T15:25:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The global variable are not correctly handeled in the `__main__` module as they do not remain global.\r\n\r\n\r\n### Script\r\n```python\r\nfrom cloudpickle import dumps, loads\r\n\r\n\r\nVARIABLE = \"uninitialized\"\r\n\r\n\r\ndef func1():\r\n    global VARIABLE\r\n    print(\"[func1] global var id{}: {}\".format(id(VARIABLE), VARIABLE))\r\n    VARIABLE = \"initialized\"\r\n    return VARIABLE\r\n\r\n\r\n# Dump and reload the function\r\nreloaded_f1 = loads(dumps(func1))\r\n\r\n# The function call does not change the value of the global VARIABLE\r\nassert reloaded_f1() == \"initialized\"\r\nprint(VARIABLE)\r\n\r\n# Changing the value of VARIABLE does not affect the function\r\nVARIABLE = 'test'\r\nassert reloaded_f1() == \"initialized\"\r\n\r\n# But redumping it changes the value\r\nassert loads(dumps(func1))() == \"initialized\"\r\nprint(VARIABLE)\r\n```\r\n\r\n### Output\r\n```bash\r\n[func1] global var id140197480377584: uninitialized\r\nuninitialized\r\n[func1] global var id140197483839984: initialized\r\n[func1] global var id140197480295592: test\r\ntest\r\n```\r\n\r\nI think a way to avoid this is to pass the global variable to `_fill_function` and use `globals()`:\r\n- If the global variable is already present in `globals`, do not do anything.\r\n- If it is not present, add it with the given value.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/180", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/180/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/180/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/180", "id": 338131451, "node_id": "MDU6SXNzdWUzMzgxMzE0NTE=", "number": 180, "title": "Python 3.7 can't pickle abc.AbstractClass", "user": {"login": "detrout", "id": 975038, "node_id": "MDQ6VXNlcjk3NTAzOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/975038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrout", "html_url": "https://github.com/detrout", "followers_url": "https://api.github.com/users/detrout/followers", "following_url": "https://api.github.com/users/detrout/following{/other_user}", "gists_url": "https://api.github.com/users/detrout/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrout/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrout/subscriptions", "organizations_url": "https://api.github.com/users/detrout/orgs", "repos_url": "https://api.github.com/users/detrout/repos", "events_url": "https://api.github.com/users/detrout/events{/privacy}", "received_events_url": "https://api.github.com/users/detrout/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-04T05:06:02Z", "updated_at": "2018-08-23T09:58:58Z", "closed_at": "2018-08-23T09:58:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had two test failures while trying to update the Debian cloudpickle package to 0.5.3 running with python 3.7.\r\n\r\n```\r\ncloudpickle/cloudpickle.py:645:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <cloudpickle.cloudpickle.CloudPickler object at 0x7f34d5fd1a58>\r\nobj = <class 'abc.AbstractClass'>, name = 'AbstractClass'\r\n\r\n    def save_global(self, obj, name=None):\r\n        write = self.write\r\n        memo = self.memo\r\n    \r\n        if name is None:\r\n            name = getattr(obj, '__qualname__', None)\r\n        if name is None:\r\n            name = obj.__name__\r\n    \r\n        module_name = whichmodule(obj, name)\r\n        try:\r\n            __import__(module_name, level=0)\r\n            module = sys.modules[module_name]\r\n            obj2, parent = _getattribute(module, name)\r\n        except (ImportError, KeyError, AttributeError):\r\n            raise PicklingError(\r\n                \"Can't pickle %r: it's not found as %s.%s\" %\r\n>               (obj, module_name, name)) from None\r\nE           _pickle.PicklingError: Can't pickle <class 'abc.AbstractClass'>: it's not found as abc.AbstractClass\r\n\r\n/usr/lib/python3.7/pickle.py:957: PicklingError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n```\r\n(exception during the exception cut for brevity)\r\n\r\n\r\n```\r\nself = <cloudpickle.cloudpickle.CloudPickler object at 0x7f34d5fd1a58>\r\nobj = <_abc_data object at 0x7f34d5ff1f30>, save_persistent_id = True\r\n\r\n    def save(self, obj, save_persistent_id=True):\r\n        self.framer.commit_frame()\r\n    \r\n        # Check for persistent id (defined by a subclass)\r\n        pid = self.persistent_id(obj)\r\n        if pid is not None and save_persistent_id:\r\n            self.save_pers(pid)\r\n            return\r\n    \r\n        # Check the memo\r\n        x = self.memo.get(id(obj))\r\n        if x is not None:\r\n            self.write(self.get(x[0]))\r\n            return\r\n    \r\n        # Check the type dispatch table\r\n        t = type(obj)\r\n        f = self.dispatch.get(t)\r\n        if f is not None:\r\n            f(self, obj) # Call unbound method with explicit self\r\n            return\r\n    \r\n        # Check private dispatch table if any, or else copyreg.dispatch_table\r\n        reduce = getattr(self, 'dispatch_table', dispatch_table).get(t)\r\n        if reduce is not None:\r\n            rv = reduce(obj)\r\n        else:\r\n            # Check for a class with a custom metaclass; treat as regular class\r\n            try:\r\n                issc = issubclass(t, type)\r\n            except TypeError: # t is not a class (old Boost; see SF #502085)\r\n                issc = False\r\n            if issc:\r\n                self.save_global(obj)\r\n                return\r\n    \r\n            # Check for a __reduce_ex__ method, fall back to __reduce__\r\n            reduce = getattr(obj, \"__reduce_ex__\", None)\r\n            if reduce is not None:\r\n>               rv = reduce(self.proto)\r\nE               TypeError: can't pickle _abc_data objects\r\n\r\n/usr/lib/python3.7/pickle.py:524: TypeError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/179", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/179/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/179/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/179/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/179", "id": 335791625, "node_id": "MDU6SXNzdWUzMzU3OTE2MjU=", "number": 179, "title": "cloudpickle could extend pickle5", "user": {"login": "pitrou", "id": 1721820, "node_id": "MDQ6VXNlcjE3MjE4MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitrou", "html_url": "https://github.com/pitrou", "followers_url": "https://api.github.com/users/pitrou/followers", "following_url": "https://api.github.com/users/pitrou/following{/other_user}", "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions", "organizations_url": "https://api.github.com/users/pitrou/orgs", "repos_url": "https://api.github.com/users/pitrou/repos", "events_url": "https://api.github.com/users/pitrou/events{/privacy}", "received_events_url": "https://api.github.com/users/pitrou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-06-26T12:16:54Z", "updated_at": "2020-07-01T20:19:05Z", "closed_at": "2020-07-01T15:44:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I'm not sure how adventurous people here want to get, but cloudpickle could extend [pickle5](https://pypi.org/project/pickle5/) instead of the built-in `pickle` module, at least when available.\r\n\r\n@ogrisel ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/177", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/177/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/177/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/177", "id": 327453051, "node_id": "MDU6SXNzdWUzMjc0NTMwNTE=", "number": 177, "title": "Fails to preserve function __name__ (e.g. for decorators using @wraps)", "user": {"login": "jdanbrown", "id": 627486, "node_id": "MDQ6VXNlcjYyNzQ4Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/627486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdanbrown", "html_url": "https://github.com/jdanbrown", "followers_url": "https://api.github.com/users/jdanbrown/followers", "following_url": "https://api.github.com/users/jdanbrown/following{/other_user}", "gists_url": "https://api.github.com/users/jdanbrown/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdanbrown/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdanbrown/subscriptions", "organizations_url": "https://api.github.com/users/jdanbrown/orgs", "repos_url": "https://api.github.com/users/jdanbrown/repos", "events_url": "https://api.github.com/users/jdanbrown/events{/privacy}", "received_events_url": "https://api.github.com/users/jdanbrown/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-05-29T19:18:50Z", "updated_at": "2019-02-21T08:51:11Z", "closed_at": "2019-02-21T08:51:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "```py\r\n>>> from functools import wraps\r\n... import cloudpickle\r\n...\r\n... def f():\r\n...     pass\r\n...\r\n... @wraps(f)\r\n... def g():\r\n...     f()\r\n\r\n>>> f.__name__\r\n'f'\r\n\r\n>>> cloudpickle.loads(cloudpickle.dumps(f)).__name__\r\n'f'\r\n\r\n>>> g.__name__\r\n'f'\r\n\r\n>>> cloudpickle.loads(cloudpickle.dumps(g)).__name__\r\n'g'\r\n```\r\n\r\n## Versions\r\n```sh\r\n$ python --version\r\nPython 3.6.0\r\n$ pip freeze | grep cloudpickle\r\ncloudpickle==0.5.3\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/176", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/176/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/176/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/176", "id": 326327216, "node_id": "MDU6SXNzdWUzMjYzMjcyMTY=", "number": 176, "title": "Function attributes differ after pickling with presence of decorators", "user": {"login": "AdamGleave", "id": 1547683, "node_id": "MDQ6VXNlcjE1NDc2ODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1547683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdamGleave", "html_url": "https://github.com/AdamGleave", "followers_url": "https://api.github.com/users/AdamGleave/followers", "following_url": "https://api.github.com/users/AdamGleave/following{/other_user}", "gists_url": "https://api.github.com/users/AdamGleave/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdamGleave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdamGleave/subscriptions", "organizations_url": "https://api.github.com/users/AdamGleave/orgs", "repos_url": "https://api.github.com/users/AdamGleave/repos", "events_url": "https://api.github.com/users/AdamGleave/events{/privacy}", "received_events_url": "https://api.github.com/users/AdamGleave/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-24T23:07:03Z", "updated_at": "2019-06-13T11:53:30Z", "closed_at": "2019-06-13T11:53:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example:\r\n```python3\r\nimport functools                                                                                                                                                                                      \r\nimport cloudpickle\r\n\r\ndef identity_decorator(func):\r\n    @functools.wraps(func)\r\n    def wrapper(*args, **kwargs):\r\n        return func(*args, **kwargs)\r\n    return wrapper\r\n\r\n@identity_decorator\r\ndef identity(x):\r\n    return x\r\n\r\nidentity_pkl = cloudpickle.dumps(identity)\r\nunpickled_identity = cloudpickle.loads(identity_pkl)\r\n\r\nif __name__ == '__main__':\r\n    print('identity.__name__ =', identity.__name__)\r\n    print('unpickled_identity.__name__ =', unpickled_identity.__name__)\r\n```\r\n\r\nActual result:\r\n```\r\nidentity.__name__ = identity                                                                                                                                                                          \r\nunpickled_identity.__name__ = wrapper\r\n```\r\n\r\nExpected result:\r\n```\r\nidentity.__name__ = identity                                                                                                                                                                          \r\nunpickled_identity.__name__ = identity\r\n```\r\n\r\nThis has been problematic in my application which uses the function name to determine the root of a caching key (which then ends up being the same for all functions with a decorator applied to them!) I note dill seems to handle this case, so I believe it should be possible to add support to cloudpickle (although I'm not sure how easy a change it is).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/171", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/171/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/171/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/171", "id": 319864809, "node_id": "MDU6SXNzdWUzMTk4NjQ4MDk=", "number": 171, "title": "Python 3.5/3.6 Functions with Type Hints are lost", "user": {"login": "achapkowski", "id": 5131271, "node_id": "MDQ6VXNlcjUxMzEyNzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5131271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achapkowski", "html_url": "https://github.com/achapkowski", "followers_url": "https://api.github.com/users/achapkowski/followers", "following_url": "https://api.github.com/users/achapkowski/following{/other_user}", "gists_url": "https://api.github.com/users/achapkowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/achapkowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achapkowski/subscriptions", "organizations_url": "https://api.github.com/users/achapkowski/orgs", "repos_url": "https://api.github.com/users/achapkowski/repos", "events_url": "https://api.github.com/users/achapkowski/events{/privacy}", "received_events_url": "https://api.github.com/users/achapkowski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-05-03T10:26:35Z", "updated_at": "2019-07-18T00:33:19Z", "closed_at": "2019-06-13T09:02:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Let's say I have a simple function:\r\n\r\n```\r\nimport cloudpickle\r\nimport typing, inspect\r\n\r\n\r\ndef add(x: int=1,y: int=2 ) -> int:\r\n    return x+y\r\n```\r\n\r\nIt runs as expected:\r\n\r\n```\r\n>>> add()\r\n3\r\n>>> print(typing.get_type_hints(add))\r\n{'x': <class 'int'>, 'return': <class 'int'>, 'y': <class 'int'>}\r\n```\r\n\r\nNow if I pickle it, then unpickle the function, I lose the annotation for the typing.\r\n\r\n```\r\n>>> f = cloudpickle.loads(cloudpickle.dumps(add))\r\n>>> print(typing.get_type_hints(f))\r\n{}\r\n>>> f()\r\n3\r\n```\r\n\r\nSo when a method is pickled/unpickled the typing is dropped.  Is there anyway to include typing in the pickling process? It helps with introspection of a user's method when you send it someplace else.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/170", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/170/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/170/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/170/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/170", "id": 319639829, "node_id": "MDU6SXNzdWUzMTk2Mzk4Mjk=", "number": 170, "title": "Released v0.4.3 after v0.5.2?", "user": {"login": "colinc719", "id": 16266523, "node_id": "MDQ6VXNlcjE2MjY2NTIz", "avatar_url": "https://avatars0.githubusercontent.com/u/16266523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colinc719", "html_url": "https://github.com/colinc719", "followers_url": "https://api.github.com/users/colinc719/followers", "following_url": "https://api.github.com/users/colinc719/following{/other_user}", "gists_url": "https://api.github.com/users/colinc719/gists{/gist_id}", "starred_url": "https://api.github.com/users/colinc719/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colinc719/subscriptions", "organizations_url": "https://api.github.com/users/colinc719/orgs", "repos_url": "https://api.github.com/users/colinc719/repos", "events_url": "https://api.github.com/users/colinc719/events{/privacy}", "received_events_url": "https://api.github.com/users/colinc719/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-05-02T17:16:15Z", "updated_at": "2018-05-15T06:53:05Z", "closed_at": "2018-05-15T06:53:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why was the most recent version released as v0.4.3 when v0.5.2 already exists?\r\n\r\n@HyukjinKwon ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/155", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/155/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/155/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/155", "id": 294666507, "node_id": "MDU6SXNzdWUyOTQ2NjY1MDc=", "number": 155, "title": "PicklingError: Cannot pickle objects of type <class 'itertools.count'>", "user": {"login": "verybadsoldier", "id": 364469, "node_id": "MDQ6VXNlcjM2NDQ2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/364469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/verybadsoldier", "html_url": "https://github.com/verybadsoldier", "followers_url": "https://api.github.com/users/verybadsoldier/followers", "following_url": "https://api.github.com/users/verybadsoldier/following{/other_user}", "gists_url": "https://api.github.com/users/verybadsoldier/gists{/gist_id}", "starred_url": "https://api.github.com/users/verybadsoldier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/verybadsoldier/subscriptions", "organizations_url": "https://api.github.com/users/verybadsoldier/orgs", "repos_url": "https://api.github.com/users/verybadsoldier/repos", "events_url": "https://api.github.com/users/verybadsoldier/events{/privacy}", "received_events_url": "https://api.github.com/users/verybadsoldier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-06T08:10:25Z", "updated_at": "2018-02-06T08:23:24Z", "closed_at": "2018-02-06T08:20:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello gentlemen,\r\n\r\nam I correct that `itertools` are generally not supported by `cloudpickle`? \r\nThis codes makes me think so:\r\nhttps://github.com/cloudpipe/cloudpickle/blob/master/cloudpickle/cloudpickle.py#L293\r\n\r\n\r\nAn example script that yields a `PickleError` on version `0.5.2`:\r\n```python\r\nimport cloudpickle\r\nimport itertools\r\n\r\n\r\nclass PickleTest():\r\n    def __init__(self):\r\n        self.myattr = 5\r\n        self.iter = itertools.count(1)\r\n\r\npt = PickleTest()\r\n\r\ncloudpickle.dump(pt, open(\"C:\\\\archive\\\\pickletest.p\", \"wb\"))\r\n```\r\n\r\nError:\r\n`_pickle.PicklingError: Cannot pickle objects of type <class 'itertools.count'>`\r\n\r\nAre there any known workarounds to be able to pickle such objects?\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/147", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/147/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/147/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/147", "id": 291663678, "node_id": "MDU6SXNzdWUyOTE2NjM2Nzg=", "number": 147, "title": "cloudpickle multiprocessing Pipe", "user": {"login": "runflowcode", "id": 5005532, "node_id": "MDQ6VXNlcjUwMDU1MzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/5005532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/runflowcode", "html_url": "https://github.com/runflowcode", "followers_url": "https://api.github.com/users/runflowcode/followers", "following_url": "https://api.github.com/users/runflowcode/following{/other_user}", "gists_url": "https://api.github.com/users/runflowcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/runflowcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/runflowcode/subscriptions", "organizations_url": "https://api.github.com/users/runflowcode/orgs", "repos_url": "https://api.github.com/users/runflowcode/repos", "events_url": "https://api.github.com/users/runflowcode/events{/privacy}", "received_events_url": "https://api.github.com/users/runflowcode/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-25T18:06:30Z", "updated_at": "2018-01-26T00:25:07Z", "closed_at": "2018-01-26T00:25:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am curious as to why cloudpickle is having trouble with multiprocessing pipe.\r\n\r\n<pre>\r\nimport cloudpickle\r\nimport multiprocessing\r\ndef p_test():\r\n    p = multiprocessing.Pipe()\r\n    pickled = cloudpickle.dumps(p)\r\n    original = cloudpickle.loads(pickled)\r\n    print original\r\n</pre>\r\n\r\n>   File \"/usr/lib/python2.7/pickle.py\", line 1382, in loads\r\n    return Unpickler(file).load()\r\n  File \"/usr/lib/python2.7/pickle.py\", line 858, in load\r\n    dispatch[key](self)\r\n  File \"/usr/lib/python2.7/pickle.py\", line 1083, in load_newobj\r\n    obj = cls.__new__(cls, *args)\r\nTypeError: Required argument 'handle' (pos 1) not found", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/144", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/144/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/144/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/144", "id": 284831509, "node_id": "MDU6SXNzdWUyODQ4MzE1MDk=", "number": 144, "title": "Failure on unhashable functions in Python 2", "user": {"login": "mrocklin", "id": 306380, "node_id": "MDQ6VXNlcjMwNjM4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-28T02:56:26Z", "updated_at": "2017-12-28T15:22:30Z", "closed_at": "2017-12-28T15:22:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\nThis showed up in Dask's test suite after the recent release.  Python 2 only.\r\n\r\n```python\r\nIn [1]: d = {'a': 1}\r\n\r\nIn [2]: import cloudpickle\r\n\r\nIn [3]: cloudpickle.dumps(d.get)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-3-8adaadeed8cc> in <module>()\r\n----> 1 cloudpickle.dumps(d.get)\r\n\r\n/home/mrocklin/Software/anaconda/envs/27/lib/python2.7/site-packages/cloudpickle/cloudpickle.pyc in dumps(obj, protocol)\r\n    844     try:\r\n    845         cp = CloudPickler(file,protocol)\r\n--> 846         cp.dump(obj)\r\n    847         return file.getvalue()\r\n    848     finally:\r\n\r\n/home/mrocklin/Software/anaconda/envs/27/lib/python2.7/site-packages/cloudpickle/cloudpickle.pyc in dump(self, obj)\r\n    258         self.inject_addons()\r\n    259         try:\r\n--> 260             return Pickler.dump(self, obj)\r\n    261         except RuntimeError as e:\r\n    262             if 'recursion' in e.args[0]:\r\n\r\n/home/mrocklin/Software/anaconda/envs/27/lib/python2.7/pickle.pyc in dump(self, obj)\r\n    222         if self.proto >= 2:\r\n    223             self.write(PROTO + chr(self.proto))\r\n--> 224         self.save(obj)\r\n    225         self.write(STOP)\r\n    226 \r\n\r\n/home/mrocklin/Software/anaconda/envs/27/lib/python2.7/pickle.pyc in save(self, obj)\r\n    284         f = self.dispatch.get(t)\r\n    285         if f:\r\n--> 286             f(self, obj) # Call unbound method with explicit self\r\n    287             return\r\n    288 \r\n\r\n/home/mrocklin/Software/anaconda/envs/27/lib/python2.7/site-packages/cloudpickle/cloudpickle.pyc in save_builtin_function(self, obj)\r\n    611         if obj.__module__ == \"__builtin__\":\r\n    612             return self.save_global(obj)\r\n--> 613         return self.save_function(obj)\r\n    614     dispatch[types.BuiltinFunctionType] = save_builtin_function\r\n    615 \r\n\r\n/home/mrocklin/Software/anaconda/envs/27/lib/python2.7/site-packages/cloudpickle/cloudpickle.pyc in save_function(self, obj, name)\r\n    330         interactive prompt, etc) and handles the pickling appropriately.\r\n    331         \"\"\"\r\n--> 332         if obj in _BUILTIN_TYPE_CONSTRUCTORS:\r\n    333             # We keep a special-cased cache of built-in type constructors at\r\n    334             # global scope, because these functions are structured very\r\n\r\nTypeError: unhashable type: 'dict'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/143", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/143/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/143/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/143", "id": 284802666, "node_id": "MDU6SXNzdWUyODQ4MDI2NjY=", "number": 143, "title": "Tests fail on FreeBSD (version 0.5.2)", "user": {"login": "yurivict", "id": 271906, "node_id": "MDQ6VXNlcjI3MTkwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/271906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurivict", "html_url": "https://github.com/yurivict", "followers_url": "https://api.github.com/users/yurivict/followers", "following_url": "https://api.github.com/users/yurivict/following{/other_user}", "gists_url": "https://api.github.com/users/yurivict/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurivict/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurivict/subscriptions", "organizations_url": "https://api.github.com/users/yurivict/orgs", "repos_url": "https://api.github.com/users/yurivict/repos", "events_url": "https://api.github.com/users/yurivict/events{/privacy}", "received_events_url": "https://api.github.com/users/yurivict/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-27T21:55:27Z", "updated_at": "2019-05-18T05:47:55Z", "closed_at": "2019-05-18T05:47:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n```\r\ntest_weakset_identity_preservation (tests.cloudpickle_test.Protocol2CloudPickleTest) ... ok\r\n\r\n======================================================================\r\nERROR: test_sliced_and_non_contiguous_memoryview (tests.cloudpickle_test.CloudPickleTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/ports/devel/py-cloudpickle/work-py27/cloudpickle-0.5.2/tests/cloudpickle_test.py\", line 144, in test_sliced_and_non_contiguous_memoryview\r\n    buffer_obj = memoryview(b\"Hello!\" * 3)[2:15:2]\r\nNotImplementedError\r\n\r\n======================================================================\r\nERROR: test_sliced_and_non_contiguous_memoryview (tests.cloudpickle_test.Protocol2CloudPickleTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/ports/devel/py-cloudpickle/work-py27/cloudpickle-0.5.2/tests/cloudpickle_test.py\", line 144, in test_sliced_and_non_contiguous_memoryview\r\n    buffer_obj = memoryview(b\"Hello!\" * 3)[2:15:2]\r\nNotImplementedError\r\n\r\n----------------------------------------------------------------------\r\nRan 110 tests in 7.590s\r\n\r\nFAILED (errors=2)\r\nTest failed: <unittest.runner.TextTestResult run=110 errors=2 failures=0>\r\nerror: Test failed: <unittest.runner.TextTestResult run=110 errors=2 failures=0>\r\n*** Error code 1\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/131", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/131/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/131/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/131", "id": 272416945, "node_id": "MDU6SXNzdWUyNzI0MTY5NDU=", "number": 131, "title": "Pickling error with 0.5.1.", "user": {"login": "robertnishihara", "id": 249517, "node_id": "MDQ6VXNlcjI0OTUxNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/249517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robertnishihara", "html_url": "https://github.com/robertnishihara", "followers_url": "https://api.github.com/users/robertnishihara/followers", "following_url": "https://api.github.com/users/robertnishihara/following{/other_user}", "gists_url": "https://api.github.com/users/robertnishihara/gists{/gist_id}", "starred_url": "https://api.github.com/users/robertnishihara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robertnishihara/subscriptions", "organizations_url": "https://api.github.com/users/robertnishihara/orgs", "repos_url": "https://api.github.com/users/robertnishihara/repos", "events_url": "https://api.github.com/users/robertnishihara/events{/privacy}", "received_events_url": "https://api.github.com/users/robertnishihara/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135100, "node_id": "MDU6TGFiZWwxOTkxMzUxMDA=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/milestones/2", "html_url": "https://github.com/cloudpipe/cloudpickle/milestone/2", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/milestones/2/labels", "id": 2917346, "node_id": "MDk6TWlsZXN0b25lMjkxNzM0Ng==", "number": 2, "title": "0.5.2", "description": null, "creator": {"login": "ogrisel", "id": 89061, "node_id": "MDQ6VXNlcjg5MDYx", "avatar_url": "https://avatars0.githubusercontent.com/u/89061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogrisel", "html_url": "https://github.com/ogrisel", "followers_url": "https://api.github.com/users/ogrisel/followers", "following_url": "https://api.github.com/users/ogrisel/following{/other_user}", "gists_url": "https://api.github.com/users/ogrisel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogrisel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogrisel/subscriptions", "organizations_url": "https://api.github.com/users/ogrisel/orgs", "repos_url": "https://api.github.com/users/ogrisel/repos", "events_url": "https://api.github.com/users/ogrisel/events{/privacy}", "received_events_url": "https://api.github.com/users/ogrisel/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2017-11-16T15:04:05Z", "updated_at": "2020-04-24T07:15:44Z", "due_on": null, "closed_at": "2020-04-24T07:15:44Z"}, "comments": 5, "created_at": "2017-11-09T02:12:17Z", "updated_at": "2017-11-21T10:39:51Z", "closed_at": "2017-11-16T15:03:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following works in 0.4.1 but breaks with 0.5.1. I've tried this with Python 3.6. I've also tried using protocols 0, 1, 2, 3, 4.\r\n\r\n```python\r\nimport cloudpickle\r\n\r\nclass Foo(object):\r\n    pass\r\n\r\ndef f():\r\n    Foo\r\n\r\ncloudpickle.dumps(f)\r\n```\r\n\r\nThen in a separate Python interpreter:\r\n\r\n```python\r\n>>> import cloudpickle\r\n>>> cloudpickle.loads(...the string dumped above...)\r\nAttributeError: Can't get attribute 'Foo' on <module '__main__'>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/129", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/129/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/129/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/129", "id": 270732134, "node_id": "MDU6SXNzdWUyNzA3MzIxMzQ=", "number": 129, "title": "cloudpickle can produce incorrect pickles", "user": {"login": "pitrou", "id": 1721820, "node_id": "MDQ6VXNlcjE3MjE4MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitrou", "html_url": "https://github.com/pitrou", "followers_url": "https://api.github.com/users/pitrou/followers", "following_url": "https://api.github.com/users/pitrou/following{/other_user}", "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions", "organizations_url": "https://api.github.com/users/pitrou/orgs", "repos_url": "https://api.github.com/users/pitrou/repos", "events_url": "https://api.github.com/users/pitrou/events{/privacy}", "received_events_url": "https://api.github.com/users/pitrou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135100, "node_id": "MDU6TGFiZWwxOTkxMzUxMDA=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-02T17:03:27Z", "updated_at": "2017-12-13T15:39:06Z", "closed_at": "2017-12-13T15:39:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```\r\n>>> import multiprocessing as mp, cloudpickle, pickletools\r\n>>> v = mp.Value('i')\r\n>>> cloudpickle.dumps(v)\r\nb'\\x80\\x02'\r\n>>> import pickletools\r\n>>> pickletools.dis(cloudpickle.dumps(v))\r\n    0: \\x80 PROTO      2\r\nTraceback (most recent call last):\r\n  File \"<ipython-input-28-9e637ba398b4>\", line 1, in <module>\r\n    pickletools.dis(cloudpickle.dumps(v))\r\n  File \"/home/antoine/miniconda3/envs/dask36/lib/python3.6/pickletools.py\", line 2398, in dis\r\n    for opcode, arg, pos in genops(pickle):\r\n  File \"/home/antoine/miniconda3/envs/dask36/lib/python3.6/pickletools.py\", line 2238, in _genops\r\n    raise ValueError(\"pickle exhausted before seeing STOP\")\r\nValueError: pickle exhausted before seeing STOP\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/126", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/126/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/126/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/126", "id": 269637330, "node_id": "MDU6SXNzdWUyNjk2MzczMzA=", "number": 126, "title": "Pickled functions incompatible between 0.4.0 and 0.4.1", "user": {"login": "nikhaldi", "id": 2872635, "node_id": "MDQ6VXNlcjI4NzI2MzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2872635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikhaldi", "html_url": "https://github.com/nikhaldi", "followers_url": "https://api.github.com/users/nikhaldi/followers", "following_url": "https://api.github.com/users/nikhaldi/following{/other_user}", "gists_url": "https://api.github.com/users/nikhaldi/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikhaldi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikhaldi/subscriptions", "organizations_url": "https://api.github.com/users/nikhaldi/orgs", "repos_url": "https://api.github.com/users/nikhaldi/repos", "events_url": "https://api.github.com/users/nikhaldi/events{/privacy}", "received_events_url": "https://api.github.com/users/nikhaldi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-10-30T15:14:26Z", "updated_at": "2017-11-08T21:51:04Z", "closed_at": "2017-11-08T21:51:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When trying to unpickle a function with the 0.4.1 release from last week that was pickled with 0.4.0 I get this exception:\r\n\r\n```\r\n$ pip install cloudpickle==0.4.0\r\nCollecting cloudpickle==0.4.0\r\n  Using cached cloudpickle-0.4.0-py2.py3-none-any.whl\r\nInstalling collected packages: cloudpickle\r\n  Found existing installation: cloudpickle 0.4.1\r\n    Uninstalling cloudpickle-0.4.1:\r\n      Successfully uninstalled cloudpickle-0.4.1\r\nSuccessfully installed cloudpickle-0.4.0\r\n\r\n$ python\r\nPython 2.7.12 (default, Nov 19 2016, 06:48:10) \r\n[GCC 5.4.0 20160609] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import cloudpickle\r\n>>> with open('pickled', 'wb') as p:\r\n...    cloudpickle.dump(lambda x: x, p)\r\n... \r\n>>> \r\n\r\n$ pip install cloudpickle==0.4.1\r\nCollecting cloudpickle==0.4.1\r\n  Using cached cloudpickle-0.4.1-py2.py3-none-any.whl\r\nInstalling collected packages: cloudpickle\r\n  Found existing installation: cloudpickle 0.4.0\r\n    Uninstalling cloudpickle-0.4.0:\r\n      Successfully uninstalled cloudpickle-0.4.0\r\nSuccessfully installed cloudpickle-0.4.1\r\n\r\n$ python\r\nPython 2.7.12 (default, Nov 19 2016, 06:48:10) \r\n[GCC 5.4.0 20160609] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import cloudpickle\r\n>>> with open('pickled', 'rb') as p:\r\n...   cloudpickle.load(p)\r\n... \r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 2, in <module>\r\n  File \"/usr/lib/python2.7/pickle.py\", line 1384, in load\r\n    return Unpickler(file).load()\r\n  File \"/usr/lib/python2.7/pickle.py\", line 864, in load\r\n    dispatch[key](self)\r\n  File \"/usr/lib/python2.7/pickle.py\", line 1139, in load_reduce\r\n    value = func(*args)\r\nTypeError: _fill_function() takes exactly 6 arguments (5 given)\r\n```\r\n\r\nSame incompatibility in the other direction.\r\n\r\nI realize this is fixable by synchronizing the cloudpickle version across environments, but this is not necessarily trivial in a distributed setting and the pickle may have been persisted somewhere a while ago before the version bump.\r\n\r\nSo my question is more if this break in compatibility was intentional. I'm somewhat surprised that this would break in a minor release. Does cloudpickle have an official policy about which versions should be compatible? Would be good to know so we know how to hedge against it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/123", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/123/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/123/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/123", "id": 268868112, "node_id": "MDU6SXNzdWUyNjg4NjgxMTI=", "number": 123, "title": "cloudpickle.dumps() uses protocol 2 by default", "user": {"login": "pitrou", "id": 1721820, "node_id": "MDQ6VXNlcjE3MjE4MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitrou", "html_url": "https://github.com/pitrou", "followers_url": "https://api.github.com/users/pitrou/followers", "following_url": "https://api.github.com/users/pitrou/following{/other_user}", "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions", "organizations_url": "https://api.github.com/users/pitrou/orgs", "repos_url": "https://api.github.com/users/pitrou/repos", "events_url": "https://api.github.com/users/pitrou/events{/privacy}", "received_events_url": "https://api.github.com/users/pitrou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-10-26T18:43:21Z", "updated_at": "2017-11-10T13:54:31Z", "closed_at": "2017-11-10T13:54:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I'm not sure why that is, but protocol 3 should be the default on Python 3 and can be significantly faster:\r\n```\r\n>>> b = b\"x\" * (1024**2)\r\n>>> %timeit cloudpickle.dumps(b)\r\n1.45 ms \u00b1 5.3 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n>>> %timeit cloudpickle.dumps(b, protocol=3)\r\n586 \u00b5s \u00b1 2.67 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n```\r\nUnpickling is also faster:\r\n```\r\n>>> d1 = cloudpickle.dumps(b)\r\n>>> d2 = cloudpickle.dumps(b, protocol=3)\r\n>>> %timeit pickle.loads(d1)\r\n225 \u00b5s \u00b1 843 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n>>> %timeit pickle.loads(d2)\r\n67.1 \u00b5s \u00b1 348 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/120", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/120/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/120/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/120", "id": 267441244, "node_id": "MDU6SXNzdWUyNjc0NDEyNDQ=", "number": 120, "title": "Making cloudpickle produce \"consistent/deterministic\" results.", "user": {"login": "robertnishihara", "id": 249517, "node_id": "MDQ6VXNlcjI0OTUxNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/249517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robertnishihara", "html_url": "https://github.com/robertnishihara", "followers_url": "https://api.github.com/users/robertnishihara/followers", "following_url": "https://api.github.com/users/robertnishihara/following{/other_user}", "gists_url": "https://api.github.com/users/robertnishihara/gists{/gist_id}", "starred_url": "https://api.github.com/users/robertnishihara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robertnishihara/subscriptions", "organizations_url": "https://api.github.com/users/robertnishihara/orgs", "repos_url": "https://api.github.com/users/robertnishihara/repos", "events_url": "https://api.github.com/users/robertnishihara/events{/privacy}", "received_events_url": "https://api.github.com/users/robertnishihara/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2017-10-22T06:52:45Z", "updated_at": "2018-02-26T05:12:26Z", "closed_at": "2018-02-26T05:12:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "This question arose in the following context. I have multiple Python processes, and some classes are defined in each process. Sometimes class definitions are shipped from one process to another (using cloudpickle). Sometimes classes may be shipped multiple times or in multiple ways to a given process, and I'd like to deduplicate them based on the output of cloudpickle (that is, if `cloudpickle.dumps(class1) == cloudpickle.dumps(class2)`, then the classes are the \"same\" and I can throw away one of them. This works, but there are way too many false negatives (that is, two classes really are the same (in some sense), but `cloudpickle.dumps` gives different results on the two classes.\r\n\r\nHere's one example that sort of illustrates the issue (although there are a number of ways this kind of thing can arise).\r\n\r\nSuppose I do the following.\r\n\r\n```python\r\nimport cloudpickle\r\n\r\nclass Foo1(object):\r\n    def __init__(self):\r\n        pass\r\n\r\nserialized1 = cloudpickle.dumps(Foo1)\r\nFoo2 = cloudpickle.loads(serialized1)\r\nserialized2 = cloudpickle.dumps(Foo2)\r\n\r\nassert serialized1 == serialized2  # This assertion fails.\r\n```\r\n\r\nI'd love for this kind of assertion to succeed. **Does anyone know if this is achievable or what the main obstacles are?**\r\n\r\nInterestingly, if I iterate this a third time,\r\n\r\n```python\r\nFoo3 = cloudpickle.loads(serialized2)\r\nserialized3 = cloudpickle.dumps(Foo3)\r\n\r\nassert serialized2 == serialized3  # This succeeds.\r\n```\r\n\r\nthen the assert succeeds, so maybe it suffices to use `cloudpickle.dumps(cloudpickle.loads(cloudpickle.dumps(cls)))` to deduplicate classes (though this seems kind of insane, and I haven't tested this extensively). **Would you expect this to work?**\r\n\r\nOne thing that may be related/revealing is the outputs I get if I do something similar in an IPython interpreter (instead of a regular Python interpreter). \r\n\r\nFirst copy and paste this block into IPython.\r\n\r\n```python\r\nimport cloudpickle\r\n\r\nclass Foo(object):\r\n    def __init__(self):\r\n        pass\r\n\r\nserialized1 = cloudpickle.dumps(Foo)\r\n```\r\n\r\nThen copy and paste this block into IPython.\r\n\r\n```python\r\nclass Foo(object):\r\n    def __init__(self):\r\n        pass\r\n\r\nserialized2 = cloudpickle.dumps(Foo)\r\n```\r\n\r\nComparing `serialized1` and `serialized2` next to each other, they are\r\n\r\n```\r\nserialized1  # b'\\x80\\x02ccloudpickle.cloudpickle\\n_rehydrate_skeleton_class\\nq\\x00(ccloudpickle.cloudpickle\\n_builtin_type\\nq\\x01X\\t\\x00\\x00\\x00ClassTypeq\\x02\\x85q\\x03Rq\\x04X\\x03\\x00\\x00\\x00Fooq\\x05c__builtin__\\nobject\\nq\\x06\\x85q\\x07}q\\x08X\\x07\\x00\\x00\\x00__doc__q\\tNs\\x87q\\nRq\\x0b}q\\x0c(X\\n\\x00\\x00\\x00__module__q\\rX\\x08\\x00\\x00\\x00__main__q\\x0eX\\x08\\x00\\x00\\x00__init__q\\x0fccloudpickle.cloudpickle\\n_fill_function\\nq\\x10(ccloudpickle.cloudpickle\\n_make_skel_func\\nq\\x11h\\x01X\\x08\\x00\\x00\\x00CodeTypeq\\x12\\x85q\\x13Rq\\x14(K\\x01K\\x00K\\x01K\\x01KCc_codecs\\nencode\\nq\\x15X\\x04\\x00\\x00\\x00d\\x00S\\x00q\\x16X\\x06\\x00\\x00\\x00latin1q\\x17\\x86q\\x18Rq\\x19N\\x85q\\x1a)X\\x04\\x00\\x00\\x00selfq\\x1b\\x85q\\x1cX\\x1e\\x00\\x00\\x00<ipython-input-1-d9b5c81388ae>q\\x1dh\\x0fK\\x04h\\x15X\\x02\\x00\\x00\\x00\\x00\\x01q\\x1eh\\x17\\x86q\\x1fRq ))tq!Rq\"J\\xff\\xff\\xff\\xff}q#\\x87q$Rq%}q&N}q\\'NtRutR.'\r\nserialized2  # b'\\x80\\x02ccloudpickle.cloudpickle\\n_rehydrate_skeleton_class\\nq\\x00(ccloudpickle.cloudpickle\\n_builtin_type\\nq\\x01X\\t\\x00\\x00\\x00ClassTypeq\\x02\\x85q\\x03Rq\\x04X\\x03\\x00\\x00\\x00Fooq\\x05c__builtin__\\nobject\\nq\\x06\\x85q\\x07}q\\x08X\\x07\\x00\\x00\\x00__doc__q\\tNs\\x87q\\nRq\\x0b}q\\x0c(X\\n\\x00\\x00\\x00__module__q\\rX\\x08\\x00\\x00\\x00__main__q\\x0eX\\x08\\x00\\x00\\x00__init__q\\x0fccloudpickle.cloudpickle\\n_fill_function\\nq\\x10(ccloudpickle.cloudpickle\\n_make_skel_func\\nq\\x11h\\x01X\\x08\\x00\\x00\\x00CodeTypeq\\x12\\x85q\\x13Rq\\x14(K\\x01K\\x00K\\x01K\\x01KCc_codecs\\nencode\\nq\\x15X\\x04\\x00\\x00\\x00d\\x00S\\x00q\\x16X\\x06\\x00\\x00\\x00latin1q\\x17\\x86q\\x18Rq\\x19N\\x85q\\x1a)X\\x04\\x00\\x00\\x00selfq\\x1b\\x85q\\x1cX\\x1e\\x00\\x00\\x00<ipython-input-2-a08e1f07615d>q\\x1dh\\x0fK\\x02h\\x15X\\x02\\x00\\x00\\x00\\x00\\x01q\\x1eh\\x17\\x86q\\x1fRq ))tq!Rq\"J\\xff\\xff\\xff\\xff}q#\\x87q$Rq%}q&N}q\\'NtRutR.'\r\n```\r\n\r\nThey seem to be the same everywhere except that the first includes the string `<ipython-input-1-d9b5c81388ae>q\\x1dh\\x0fK\\x04h` and the second includes the string `<ipython-input-2-a08e1f07615d>q\\x1dh\\x0fK\\x02h`. **Any idea where these strings come from or if it is possible to remove them?**\r\n\r\ncc @Wapaul1 @mehrdadn", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/119", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/119/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/119/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/119", "id": 265145129, "node_id": "MDU6SXNzdWUyNjUxNDUxMjk=", "number": 119, "title": "Can't unpickle functions using namedtuple", "user": {"login": "rshin", "id": 13770, "node_id": "MDQ6VXNlcjEzNzcw", "avatar_url": "https://avatars0.githubusercontent.com/u/13770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rshin", "html_url": "https://github.com/rshin", "followers_url": "https://api.github.com/users/rshin/followers", "following_url": "https://api.github.com/users/rshin/following{/other_user}", "gists_url": "https://api.github.com/users/rshin/gists{/gist_id}", "starred_url": "https://api.github.com/users/rshin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rshin/subscriptions", "organizations_url": "https://api.github.com/users/rshin/orgs", "repos_url": "https://api.github.com/users/rshin/repos", "events_url": "https://api.github.com/users/rshin/events{/privacy}", "received_events_url": "https://api.github.com/users/rshin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-13T01:53:22Z", "updated_at": "2017-10-27T00:34:50Z", "closed_at": "2017-10-26T23:10:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "On Python 2.7.12 with cloudpickle 0.4.0:\r\n\r\n```\r\nPython 2.7.12 (default, Nov 19 2016, 06:48:10)\r\n[GCC 5.4.0 20160609] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import collections\r\n>>> X = collections.namedtuple('X', ['x', 'y'])\r\n>>> def f(): return X(1, 2)\r\n...\r\n>>> import cloudpickle\r\n>>> cloudpickle.loads(cloudpickle.dumps(f))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python2.7/pickle.py\", line 1388, in loads\r\n    return Unpickler(file).load()\r\n  File \"/usr/lib/python2.7/pickle.py\", line 864, in load\r\n    dispatch[key](self)\r\n  File \"/usr/lib/python2.7/pickle.py\", line 1139, in load_reduce\r\n    value = func(*args)\r\n  File \"/home/richard/.local/share/virtualenvs/cloudpickle/local/lib/python2.7/site-packages/cloudpickle/cloudpickle.py\", line 1053, in _rehydrate_skeleton_class\r\n    setattr(skeleton_class, attrname, attr)\r\nAttributeError: attribute '__dict__' of 'type' objects is not writable\r\n>>> cloudpickle.__version__\r\n'0.4.0'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/115", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/115/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/115/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/115", "id": 249072973, "node_id": "MDU6SXNzdWUyNDkwNzI5NzM=", "number": 115, "title": "infinite recursion when attempting to pickle mpmath.pi", "user": {"login": "greyltc", "id": 16778174, "node_id": "MDQ6VXNlcjE2Nzc4MTc0", "avatar_url": "https://avatars1.githubusercontent.com/u/16778174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/greyltc", "html_url": "https://github.com/greyltc", "followers_url": "https://api.github.com/users/greyltc/followers", "following_url": "https://api.github.com/users/greyltc/following{/other_user}", "gists_url": "https://api.github.com/users/greyltc/gists{/gist_id}", "starred_url": "https://api.github.com/users/greyltc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/greyltc/subscriptions", "organizations_url": "https://api.github.com/users/greyltc/orgs", "repos_url": "https://api.github.com/users/greyltc/repos", "events_url": "https://api.github.com/users/greyltc/events{/privacy}", "received_events_url": "https://api.github.com/users/greyltc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-08-09T15:36:54Z", "updated_at": "2017-11-21T15:23:04Z", "closed_at": "2017-11-21T11:43:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n$ python\r\nPython 3.6.2 (default, Jul 20 2017, 03:52:27) \r\n[GCC 7.1.1 20170630] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import mpmath\r\n>>> import cloudpickle\r\n>>> pi = mpmath.pi\r\n>>> cloudpickle.dumps(pi)\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 233, in dump\r\n    return Pickler.dump(self, obj)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 409, in dump\r\n    self.save(obj)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 694, in save_reduce\r\n    save(cls)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 727, in save_reduce\r\n    save(state)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 561, in save_instancemethod\r\n    self.save_reduce(types.MethodType, (obj.__func__, obj.__self__), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 360, in save_function\r\n    self.save_function_tuple(obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 436, in save_function_tuple\r\n    save(f_globals)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 821, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"/usr/lib/python3.6/pickle.py\", line 847, in _batch_setitems\r\n    save(v)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 521, in save\r\n    self.save_reduce(obj=obj, *rv)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 709, in save_reduce\r\n    save(args)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/pickle.py\", line 736, in save_tuple\r\n    save(element)\r\n  File \"/usr/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  ...\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 829, in dumps\r\n    cp.dump(obj)\r\n  File \"/usr/lib/python3.6/site-packages/cloudpickle/cloudpickle.py\", line 237, in dump\r\n    raise pickle.PicklingError(msg)\r\n_pickle.PicklingError: Could not pickle object as excessively deep recursion required.\r\n```\r\nGood fun! ;-)\r\nAnd setting `sys.setrecursionlimit(10000000)` just causes a segfault (linux kernel recursion limit reached I guess)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/111", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/111/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/111/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/111", "id": 247090429, "node_id": "MDU6SXNzdWUyNDcwOTA0Mjk=", "number": 111, "title": "Fail to unpickle namedtuple", "user": {"login": "AmatanHead", "id": 8481692, "node_id": "MDQ6VXNlcjg0ODE2OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8481692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AmatanHead", "html_url": "https://github.com/AmatanHead", "followers_url": "https://api.github.com/users/AmatanHead/followers", "following_url": "https://api.github.com/users/AmatanHead/following{/other_user}", "gists_url": "https://api.github.com/users/AmatanHead/gists{/gist_id}", "starred_url": "https://api.github.com/users/AmatanHead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AmatanHead/subscriptions", "organizations_url": "https://api.github.com/users/AmatanHead/orgs", "repos_url": "https://api.github.com/users/AmatanHead/repos", "events_url": "https://api.github.com/users/AmatanHead/events{/privacy}", "received_events_url": "https://api.github.com/users/AmatanHead/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-01T14:34:35Z", "updated_at": "2017-10-29T21:26:59Z", "closed_at": "2017-10-29T21:26:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nThe current upstream code can't handle namedtuples.\r\n\r\nHere's an MWE:\r\n\r\n```python\r\nimport cloudpickle\r\nfrom collections import namedtuple\r\n\r\nX = namedtuple('X', ['a'])\r\n\r\ncloudpickle.loads(cloudpickle.dumps(X))\r\n```\r\n\r\nTraceback:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"t.py\", line 6, in <module>\r\n    cloudpickle.loads(cloudpickle.dumps(X))\r\n  File \"/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py\", line 1388, in loads\r\n    return Unpickler(file).load()\r\n  File \"/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py\", line 864, in load\r\n    dispatch[key](self)\r\n  File \"/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py\", line 1139, in load_reduce\r\n    value = func(*args)\r\n  File \"/Users/amatanhead/Documents/cloudpickle/cloudpickle/cloudpickle.py\", line 1043, in _rehydrate_skeleton_class\r\n    setattr(skeleton_class, attrname, attr)\r\nAttributeError: attribute '__dict__' of 'type' objects is not writable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/109", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/109/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/109/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/109", "id": 245107938, "node_id": "MDU6SXNzdWUyNDUxMDc5Mzg=", "number": 109, "title": "The imp package is pending deprecation in favor of importlib", "user": {"login": "jfinkels", "id": 121755, "node_id": "MDQ6VXNlcjEyMTc1NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/121755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfinkels", "html_url": "https://github.com/jfinkels", "followers_url": "https://api.github.com/users/jfinkels/followers", "following_url": "https://api.github.com/users/jfinkels/following{/other_user}", "gists_url": "https://api.github.com/users/jfinkels/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfinkels/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfinkels/subscriptions", "organizations_url": "https://api.github.com/users/jfinkels/orgs", "repos_url": "https://api.github.com/users/jfinkels/repos", "events_url": "https://api.github.com/users/jfinkels/events{/privacy}", "received_events_url": "https://api.github.com/users/jfinkels/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-07-24T14:56:42Z", "updated_at": "2019-06-13T15:29:41Z", "closed_at": "2019-06-13T15:29:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to the Python documentation for the [`imp`][1] package, \"Deprecated since version 3.4: The imp package is pending deprecation in favor of importlib.\"\r\n\r\n`cloudpickle.py` uses `imp.new_module()` (https://github.com/cloudpipe/cloudpickle/blob/master/cloudpickle/cloudpickle.py#L925) and `imp.find_module()` (https://github.com/cloudpipe/cloudpickle/blob/master/cloudpickle/cloudpickle.py#L1075), each of which has an equivalent function in `importlib`.\r\n\r\n[1]: https://docs.python.org/3.7/library/imp.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/108", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/108/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/108/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/108", "id": 243334153, "node_id": "MDU6SXNzdWUyNDMzMzQxNTM=", "number": 108, "title": "The `__transient__` attribute. What is it? Could it be thrown away?", "user": {"login": "Peque", "id": 526577, "node_id": "MDQ6VXNlcjUyNjU3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/526577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Peque", "html_url": "https://github.com/Peque", "followers_url": "https://api.github.com/users/Peque/followers", "following_url": "https://api.github.com/users/Peque/following{/other_user}", "gists_url": "https://api.github.com/users/Peque/gists{/gist_id}", "starred_url": "https://api.github.com/users/Peque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Peque/subscriptions", "organizations_url": "https://api.github.com/users/Peque/orgs", "repos_url": "https://api.github.com/users/Peque/repos", "events_url": "https://api.github.com/users/Peque/events{/privacy}", "received_events_url": "https://api.github.com/users/Peque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-07-17T09:08:47Z", "updated_at": "2017-07-25T22:40:01Z", "closed_at": "2017-07-25T22:40:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It seems it is not a standard Python dunder attribute. For what I have seen it is used to exclude some attributes from `__dict__` before serialization.\r\n\r\nWhy is this used instead of `__getstate__`?\r\n\r\nIt seems in `save_inst()` you are actually trying to use `__getstate__` first if it exists, and only if it does not, then you look for `__transient__`. However, in `save_reduce()` you are always directly trying to look for this attribute (if protocol version is >= 2). Is this necessary? Couldn't `__getstate__` tried to be used as well first?\r\n\r\nCross reference: https://github.com/irmen/Pyro4/pull/179", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/103", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/103/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/103/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/103", "id": 239930665, "node_id": "MDU6SXNzdWUyMzk5MzA2NjU=", "number": 103, "title": "Fail to (un)pickle class with abc.ABCMeta metaclass (python 2.7)", "user": {"login": "AmatanHead", "id": 8481692, "node_id": "MDQ6VXNlcjg0ODE2OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8481692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AmatanHead", "html_url": "https://github.com/AmatanHead", "followers_url": "https://api.github.com/users/AmatanHead/followers", "following_url": "https://api.github.com/users/AmatanHead/following{/other_user}", "gists_url": "https://api.github.com/users/AmatanHead/gists{/gist_id}", "starred_url": "https://api.github.com/users/AmatanHead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AmatanHead/subscriptions", "organizations_url": "https://api.github.com/users/AmatanHead/orgs", "repos_url": "https://api.github.com/users/AmatanHead/repos", "events_url": "https://api.github.com/users/AmatanHead/events{/privacy}", "received_events_url": "https://api.github.com/users/AmatanHead/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135100, "node_id": "MDU6TGFiZWwxOTkxMzUxMDA=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-07-01T06:20:16Z", "updated_at": "2017-07-01T22:49:22Z", "closed_at": "2017-07-01T22:49:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nThe current code from the master branch fails to work with classes that have the `abc.ABCMeta` metaclass.\r\n\r\nMWE:\r\n\r\n```python\r\nclass Q(object):\r\n    __metaclass__ = abc.ABCMeta\r\n\r\nq = Q()\r\ncloudpickle.loads(cloudpickle.dumps(q))\r\n```\r\n\r\nWith python 2.7.3 this yields:\r\n\r\n```\r\nobject.__new__(getset_descriptor) is not safe, use getset_descriptor.__new__()\r\n```\r\n\r\nWith python 2.7.13:\r\n\r\n```\r\nTypeError: can't pickle wrapper_descriptor objects\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/101", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/101/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/101/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/101", "id": 236466571, "node_id": "MDU6SXNzdWUyMzY0NjY1NzE=", "number": 101, "title": "Enums", "user": {"login": "mrocklin", "id": 306380, "node_id": "MDQ6VXNlcjMwNjM4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-06-16T12:17:20Z", "updated_at": "2019-06-13T15:28:49Z", "closed_at": "2019-06-13T15:28:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This fails\r\n\r\n```python\r\nimport enum\r\nclass MyEnum(enum.Enum):\r\n     SPAM = 'SPAM'\r\n\r\nimport cloudpickle\r\ncloudpickle.dumps(MyEnum.SPAM)\r\n```\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nRecursionError                            Traceback (most recent call last)\r\n/home/mrocklin/Software/anaconda/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in dump(self, obj)\r\n    145         try:\r\n--> 146             return Pickler.dump(self, obj)\r\n    147         except RuntimeError as e:\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in dump(self, obj)\r\n    408             self.framer.start_framing()\r\n--> 409         self.save(obj)\r\n    410         self.write(STOP)\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    520         # Save the reduce() output and finally memoize the object\r\n--> 521         self.save_reduce(obj=obj, *rv)\r\n    522 \r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_reduce(self, func, args, state, listitems, dictitems, obj)\r\n    584         else:\r\n--> 585             save(func)\r\n    586             save(args)\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    489             if issc:\r\n--> 490                 self.save_global(obj)\r\n    491                 return\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_global(self, obj, name, pack)\r\n    424 \r\n--> 425             self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n    426         else:\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_reduce(self, func, args, state, listitems, dictitems, obj)\r\n    585             save(func)\r\n--> 586             save(args)\r\n    587             write(pickle.REDUCE)\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    475         if f is not None:\r\n--> 476             f(self, obj) # Call unbound method with explicit self\r\n    477             return\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save_tuple(self, obj)\r\n    735             for element in obj:\r\n--> 736                 save(element)\r\n    737             # Subtle.  Same as in the big comment below.\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    475         if f is not None:\r\n--> 476             f(self, obj) # Call unbound method with explicit self\r\n    477             return\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save_dict(self, obj)\r\n    820         self.memoize(obj)\r\n--> 821         self._batch_setitems(obj.items())\r\n    822 \r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in _batch_setitems(self, items)\r\n    846                     save(k)\r\n--> 847                     save(v)\r\n    848                 write(SETITEMS)\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    520         # Save the reduce() output and finally memoize the object\r\n--> 521         self.save_reduce(obj=obj, *rv)\r\n    522 \r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_reduce(self, func, args, state, listitems, dictitems, obj)\r\n    600         if dictitems is not None:\r\n--> 601             self._batch_setitems(dictitems)\r\n    602 \r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in _batch_setitems(self, items)\r\n    851                 save(k)\r\n--> 852                 save(v)\r\n    853                 write(SETITEM)\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    520         # Save the reduce() output and finally memoize the object\r\n--> 521         self.save_reduce(obj=obj, *rv)\r\n    522 \r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_reduce(self, func, args, state, listitems, dictitems, obj)\r\n    584         else:\r\n--> 585             save(func)\r\n    586             save(args)\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    489             if issc:\r\n--> 490                 self.save_global(obj)\r\n    491                 return\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_global(self, obj, name, pack)\r\n    424 \r\n--> 425             self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n    426         else:\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_reduce(self, func, args, state, listitems, dictitems, obj)\r\n    585             save(func)\r\n--> 586             save(args)\r\n    587             write(pickle.REDUCE)\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    475         if f is not None:\r\n--> 476             f(self, obj) # Call unbound method with explicit self\r\n    477             return\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save_tuple(self, obj)\r\n    735             for element in obj:\r\n--> 736                 save(element)\r\n    737             # Subtle.  Same as in the big comment below.\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    475         if f is not None:\r\n--> 476             f(self, obj) # Call unbound method with explicit self\r\n    477             return\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save_dict(self, obj)\r\n    820         self.memoize(obj)\r\n--> 821         self._batch_setitems(obj.items())\r\n    822 \r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in _batch_setitems(self, items)\r\n    846                     save(k)\r\n--> 847                     save(v)\r\n    848                 write(SETITEMS)\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    475         if f is not None:\r\n--> 476             f(self, obj) # Call unbound method with explicit self\r\n    477             return\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save_dict(self, obj)\r\n    820         self.memoize(obj)\r\n--> 821         self._batch_setitems(obj.items())\r\n    822 \r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in _batch_setitems(self, items)\r\n    851                 save(k)\r\n--> 852                 save(v)\r\n    853                 write(SETITEM)\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    520         # Save the reduce() output and finally memoize the object\r\n--> 521         self.save_reduce(obj=obj, *rv)\r\n    522 \r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_reduce(self, func, args, state, listitems, dictitems, obj)\r\n    584         else:\r\n--> 585             save(func)\r\n    586             save(args)\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    489             if issc:\r\n--> 490                 self.save_global(obj)\r\n    491                 return\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_global(self, obj, name, pack)\r\n    424 \r\n--> 425             self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n    426         else:\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_reduce(self, func, args, state, listitems, dictitems, obj)\r\n    585             save(func)\r\n--> 586             save(args)\r\n    587             write(pickle.REDUCE)\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    475         if f is not None:\r\n--> 476             f(self, obj) # Call unbound method with explicit self\r\n    477             return\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save_tuple(self, obj)\r\n    735             for element in obj:\r\n--> 736                 save(element)\r\n    737             # Subtle.  Same as in the big comment below.\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    475         if f is not None:\r\n--> 476             f(self, obj) # Call unbound method with explicit self\r\n    477             return\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save_dict(self, obj)\r\n    820         self.memoize(obj)\r\n--> 821         self._batch_setitems(obj.items())\r\n    822 \r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in _batch_setitems(self, items)\r\n    846                     save(k)\r\n--> 847                     save(v)\r\n    848                 write(SETITEMS)\r\n\r\n... last 10 frames repeated, from the frame below ...\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)\r\n    520         # Save the reduce() output and finally memoize the object\r\n--> 521         self.save_reduce(obj=obj, *rv)\r\n    522 \r\n\r\nRecursionError: maximum recursion depth exceeded\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nPicklingError                             Traceback (most recent call last)\r\n<ipython-input-3-d64a2267ce31> in <module>()\r\n----> 1 cloudpickle.dumps(MyEnum.SPAM)\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in dumps(obj, protocol)\r\n    704 \r\n    705     cp = CloudPickler(file,protocol)\r\n--> 706     cp.dump(obj)\r\n    707 \r\n    708     return file.getvalue()\r\n\r\n/home/mrocklin/Software/anaconda/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in dump(self, obj)\r\n    148             if 'recursion' in e.args[0]:\r\n    149                 msg = \"\"\"Could not pickle object as excessively deep recursion required.\"\"\"\r\n--> 150                 raise pickle.PicklingError(msg)\r\n    151 \r\n    152     def save_memoryview(self, obj):\r\n\r\nPicklingError: Could not pickle object as excessively deep recursion required.\r\n```\r\n\r\nOriginally reported here: https://github.com/dask/distributed/issues/1178 by @AndrewPashkin ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/100", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/100/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/100/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/100", "id": 235067729, "node_id": "MDU6SXNzdWUyMzUwNjc3Mjk=", "number": 100, "title": "cell_count is sometimes a list?", "user": {"login": "mrocklin", "id": 306380, "node_id": "MDQ6VXNlcjMwNjM4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-06-11T14:04:37Z", "updated_at": "2017-06-12T16:17:28Z", "closed_at": "2017-06-12T15:52:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm getting the following error within the dask/distributed test suite on newer versions of cloudpickle.  Sorry for the lack of a clean reproducible test case.  This only appears to happen in odd situations.  Hopefully the error message is somewhat informative.\r\n\r\n```\r\n>   if cell_count >= 0 else\r\n    None\r\n        )\r\nE       TypeError: '>=' not supported between instances of 'list' and 'int'\r\n```\r\n\r\ncc @llllllllll ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/99", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/99/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/99/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/99", "id": 233324978, "node_id": "MDU6SXNzdWUyMzMzMjQ5Nzg=", "number": 99, "title": "Unable to serialize function that instantiates a subclass", "user": {"login": "acommendador", "id": 6619767, "node_id": "MDQ6VXNlcjY2MTk3Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6619767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acommendador", "html_url": "https://github.com/acommendador", "followers_url": "https://api.github.com/users/acommendador/followers", "following_url": "https://api.github.com/users/acommendador/following{/other_user}", "gists_url": "https://api.github.com/users/acommendador/gists{/gist_id}", "starred_url": "https://api.github.com/users/acommendador/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acommendador/subscriptions", "organizations_url": "https://api.github.com/users/acommendador/orgs", "repos_url": "https://api.github.com/users/acommendador/repos", "events_url": "https://api.github.com/users/acommendador/events{/privacy}", "received_events_url": "https://api.github.com/users/acommendador/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-02T23:25:28Z", "updated_at": "2017-06-28T13:34:44Z", "closed_at": "2017-06-28T13:34:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using 0.3.1 the following code\r\n\r\n```\r\nimport cloudpickle\r\n\r\nclass Base:\r\n    def __init__(self, field1):\r\n        self.field1 = field1\r\n\r\nclass Child(Base):\r\n    def __init__(self, field2, field1):\r\n        super().__init__(field1)\r\n        self.field2 = field2\r\n\r\ndef test_function():\r\n    _ = Child('field-2-value', 'field-1-value')\r\n\r\n_ = cloudpickle.dumps(test_function)\r\n```\r\n\r\nresults in stacktrace:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<removed path>/experiment_cloudpickle.py\", line 18, in <module>\r\n    _ = cloudpickle.dumps(test_function)\r\n  File \"<removed path>\\Continuum\\Miniconda3\\lib\\site-packages\\cloudpickle\\cloudpickle.py\", line 829, in dumps\r\n    cp.dump(obj)\r\n  File \"<removed path>\\Continuum\\Miniconda3\\lib\\site-packages\\cloudpickle\\cloudpickle.py\", line 233, in dump\r\n    return Pickler.dump(self, obj)\r\n  File <removed path>\\Continuum\\Miniconda3\\lib\\pickle.py\", line 408, in dump\r\n    self.save(obj)\r\n  File \"<removed path>\\Continuum\\Miniconda3\\lib\\pickle.py\", line 475, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"<removed path>\\Continuum\\Miniconda3\\lib\\site-packages\\cloudpickle\\cloudpickle.py\", line 354, in save_function\r\n    self.save_function_tuple(obj)\r\n  File \"<removed path>\\Continuum\\Miniconda3\\lib\\site-packages\\cloudpickle\\cloudpickle.py\", line 436, in save_function_tuple\r\n    save(f_globals)\r\n  File \"<removed path>\\Continuum\\Miniconda3\\lib\\pickle.py\", line 475, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"<removed path>\\Continuum\\Miniconda3\\lib\\pickle.py\", line 814, in save_dict\r\n    self._batch_setitems(obj.items())\r\n  File \"<removed path>\\Continuum\\Miniconda3\\lib\\pickle.py\", line 845, in _batch_setitems\r\n    save(v)\r\n  File \"<removed path>\\Continuum\\Miniconda3\\lib\\pickle.py\", line 475, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"<removed path>\\Continuum\\Miniconda3\\lib\\site-packages\\cloudpickle\\cloudpickle.py\", line 548, in save_global\r\n    self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)\r\n  File \"<removed path>\\Continuum\\Miniconda3\\lib\\site-packages\\cloudpickle\\cloudpickle.py\", line 713, in save_reduce\r\n    self.memoize(obj)\r\n  File \"<removed path>\\Continuum\\Miniconda3\\lib\\pickle.py\", line 429, in memoize\r\n    assert id(obj) not in self.memo\r\nAssertionError\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/98", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/98/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/98/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/98", "id": 232652133, "node_id": "MDU6SXNzdWUyMzI2NTIxMzM=", "number": 98, "title": "Supported Python versions", "user": {"login": "pitrou", "id": 1721820, "node_id": "MDQ6VXNlcjE3MjE4MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitrou", "html_url": "https://github.com/pitrou", "followers_url": "https://api.github.com/users/pitrou/followers", "following_url": "https://api.github.com/users/pitrou/following{/other_user}", "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions", "organizations_url": "https://api.github.com/users/pitrou/orgs", "repos_url": "https://api.github.com/users/pitrou/repos", "events_url": "https://api.github.com/users/pitrou/events{/privacy}", "received_events_url": "https://api.github.com/users/pitrou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135105, "node_id": "MDU6TGFiZWwxOTkxMzUxMDU=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-05-31T18:19:27Z", "updated_at": "2017-10-28T15:27:07Z", "closed_at": "2017-10-28T15:27:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "cloudpickle currently tries to support Python 2.6 and 3.3. Does anyone still need support for those older Python versions, or can we drop them?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/97", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/97/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/97/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/97", "id": 232569296, "node_id": "MDU6SXNzdWUyMzI1NjkyOTY=", "number": 97, "title": "cloudpickle.loads returns a bad result on first invocation, correct on second?", "user": {"login": "ZmeiGorynych", "id": 22304254, "node_id": "MDQ6VXNlcjIyMzA0MjU0", "avatar_url": "https://avatars1.githubusercontent.com/u/22304254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZmeiGorynych", "html_url": "https://github.com/ZmeiGorynych", "followers_url": "https://api.github.com/users/ZmeiGorynych/followers", "following_url": "https://api.github.com/users/ZmeiGorynych/following{/other_user}", "gists_url": "https://api.github.com/users/ZmeiGorynych/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZmeiGorynych/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZmeiGorynych/subscriptions", "organizations_url": "https://api.github.com/users/ZmeiGorynych/orgs", "repos_url": "https://api.github.com/users/ZmeiGorynych/repos", "events_url": "https://api.github.com/users/ZmeiGorynych/events{/privacy}", "received_events_url": "https://api.github.com/users/ZmeiGorynych/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-31T13:40:53Z", "updated_at": "2017-05-31T16:46:20Z", "closed_at": "2017-05-31T16:46:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI ran into the following strange issue: I use cloudpickle to serialize my objects to send them to Kafka, and today I saw the following bug: calling cloudpickle.dumps on an object returns a malformed result that I can't load(), but calling it again on the very same object works!\r\n\r\nIncluding the output from the debug console below; the object in question is a pretty big one using internal libraries.\r\n\r\nAny idea what might be causing that?\r\n\r\n```\r\nimport cloudpickle\r\na = cloudpickle.dumps(self)\r\nb = cloudpickle.dumps(self)\r\ncloudpickle.loads(b)\r\nOut[5]: \r\n<aiostreams.runner.SendTo at 0x15383bbba20>\r\ncloudpickle.loads(a)\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Egor\\Anaconda2\\envs\\py3k\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2881, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-6-c33e741d5197>\", line 1, in <module>\r\n    cloudpickle.loads(a)\r\nEOFError: Ran out of input\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/94", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/94/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/94/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/94", "id": 232483384, "node_id": "MDU6SXNzdWUyMzI0ODMzODQ=", "number": 94, "title": "Loggers can't be pickled", "user": {"login": "pitrou", "id": 1721820, "node_id": "MDQ6VXNlcjE3MjE4MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitrou", "html_url": "https://github.com/pitrou", "followers_url": "https://api.github.com/users/pitrou/followers", "following_url": "https://api.github.com/users/pitrou/following{/other_user}", "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions", "organizations_url": "https://api.github.com/users/pitrou/orgs", "repos_url": "https://api.github.com/users/pitrou/repos", "events_url": "https://api.github.com/users/pitrou/events{/privacy}", "received_events_url": "https://api.github.com/users/pitrou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135102, "node_id": "MDU6TGFiZWwxOTkxMzUxMDI=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-05-31T07:55:07Z", "updated_at": "2017-05-31T20:07:51Z", "closed_at": "2017-05-31T20:07:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Built-in `pickle` doesn't work on Logger objects, but cloudpickle could try to be a bit smarter. Upstream issue at https://bugs.python.org/issue30520", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/86", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/86/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/86/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/86", "id": 230701888, "node_id": "MDU6SXNzdWUyMzA3MDE4ODg=", "number": 86, "title": "Regression when pickling closures", "user": {"login": "pitrou", "id": 1721820, "node_id": "MDQ6VXNlcjE3MjE4MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitrou", "html_url": "https://github.com/pitrou", "followers_url": "https://api.github.com/users/pitrou/followers", "following_url": "https://api.github.com/users/pitrou/following{/other_user}", "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions", "organizations_url": "https://api.github.com/users/pitrou/orgs", "repos_url": "https://api.github.com/users/pitrou/repos", "events_url": "https://api.github.com/users/pitrou/events{/privacy}", "received_events_url": "https://api.github.com/users/pitrou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135100, "node_id": "MDU6TGFiZWwxOTkxMzUxMDA=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-23T13:12:53Z", "updated_at": "2017-05-30T07:37:58Z", "closed_at": "2017-05-30T07:37:58Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is on git master:\r\n```\r\n>>> import cloudpickle\r\n>>> def f():\r\n...:    s = {1,2}\r\n...:    def g():\r\n...:        return len(s)\r\n...:    return g\r\n...:\r\n>>> g = f()\r\n>>> g\r\n<function __main__.f.<locals>.g>\r\n>>> cloudpickle.dumps(g)\r\nTraceback (most recent call last):\r\n  File \"<ipython-input-5-3faa44bc74aa>\", line 1, in <module>\r\n    cloudpickle.dumps(g)\r\n  File \"/home/antoine/cloudpickle/cloudpickle/cloudpickle.py\", line 734, in dumps\r\n    cp.dump(obj)\r\n  File \"/home/antoine/cloudpickle/cloudpickle/cloudpickle.py\", line 146, in dump\r\n    return Pickler.dump(self, obj)\r\n  File \"/home/antoine/miniconda3/envs/dask36/lib/python3.6/pickle.py\", line 409, in dump\r\n    self.save(obj)\r\n  File \"/home/antoine/miniconda3/envs/dask36/lib/python3.6/pickle.py\", line 476, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/home/antoine/cloudpickle/cloudpickle/cloudpickle.py\", line 267, in save_function\r\n    self.save_function_tuple(obj)\r\n  File \"/home/antoine/cloudpickle/cloudpickle/cloudpickle.py\", line 336, in save_function_tuple\r\n    self._save_subimports(code, set(f_globals.values()) | set(closure))\r\nTypeError: unhashable type: 'set'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/84", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/84/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/84/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/84", "id": 225722212, "node_id": "MDU6SXNzdWUyMjU3MjIyMTI=", "number": 84, "title": "Serializing modules can be slow", "user": {"login": "mrocklin", "id": 306380, "node_id": "MDQ6VXNlcjMwNjM4MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrocklin", "html_url": "https://github.com/mrocklin", "followers_url": "https://api.github.com/users/mrocklin/followers", "following_url": "https://api.github.com/users/mrocklin/following{/other_user}", "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions", "organizations_url": "https://api.github.com/users/mrocklin/orgs", "repos_url": "https://api.github.com/users/mrocklin/repos", "events_url": "https://api.github.com/users/mrocklin/events{/privacy}", "received_events_url": "https://api.github.com/users/mrocklin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-05-02T14:57:57Z", "updated_at": "2017-05-03T12:27:39Z", "closed_at": "2017-05-03T12:27:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here is an analysis from a colleague:\r\n\r\n### Quote\r\n\r\nThe speed-up for us seems to be coming from the fact that pickling modules takes a long time:\r\n```\r\nIn [25]: %timeit cloudpickle.dumps(numpy, -1)\r\n100 loops, best of 3: 3.03 ms per loop\r\n```\r\nIt looks like ``_find_module()`` will use ``imp.find_module()`` which traverses ``sys.path`` to look for things that look like numpy.  In our environment, sys.path tends to be long and our filesystems tend to be slow, hence the 3.03 ms. \r\n\r\n```python\r\n    def save_module(self, obj):\r\n        \"\"\"\r\n        Save a module as an import\r\n        \"\"\"\r\n        mod_name = obj.__name__\r\n        # If module is successfully found then it is not a dynamically created module\r\n        try:\r\n            _find_module(mod_name)     # EXPENSIVE!!!!!\r\n            is_dynamic = False\r\n        except ImportError:\r\n            is_dynamic = True\r\n\r\n        self.modules.add(obj)\r\n        if is_dynamic:\r\n            self.save_reduce(dynamic_subimport, (obj.__name__, vars(obj)), obj=obj)\r\n        else:\r\n            self.save_reduce(subimport, (obj.__name__,), obj=obj)\r\n    dispatch[types.ModuleType] = save_module\r\n```\r\nSo it looks like cloudpickle is trying to allow for \"dynamically created modules\".  If it didn't try to be this flexible, then the entire function should just be\r\n```python\r\nself.save_reduce(subimport, (obj.__name__,), obj=obj)\r\n```\r\nSo the danger is if people are using \"dynamically created modules\", which we don't tend to do.\r\n\r\nMaybe an easy way out is to check if ``obj.__file__`` exists (the attribute, not the file).  If it does, then immediately assume that is_dynamic=False.\r\n\r\nFwiw, I think we're pickling ``numpy`` because we're pickling functions that refer to ``numpy``.  Not positive though.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/83", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/83/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/83/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/83", "id": 223272905, "node_id": "MDU6SXNzdWUyMjMyNzI5MDU=", "number": 83, "title": "Issue deserializing scikit learn pipeline on Docker using cloudpickle", "user": {"login": "gsvijayraajaa", "id": 4327894, "node_id": "MDQ6VXNlcjQzMjc4OTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4327894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gsvijayraajaa", "html_url": "https://github.com/gsvijayraajaa", "followers_url": "https://api.github.com/users/gsvijayraajaa/followers", "following_url": "https://api.github.com/users/gsvijayraajaa/following{/other_user}", "gists_url": "https://api.github.com/users/gsvijayraajaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/gsvijayraajaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gsvijayraajaa/subscriptions", "organizations_url": "https://api.github.com/users/gsvijayraajaa/orgs", "repos_url": "https://api.github.com/users/gsvijayraajaa/repos", "events_url": "https://api.github.com/users/gsvijayraajaa/events{/privacy}", "received_events_url": "https://api.github.com/users/gsvijayraajaa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ogrisel", "id": 89061, "node_id": "MDQ6VXNlcjg5MDYx", "avatar_url": "https://avatars0.githubusercontent.com/u/89061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogrisel", "html_url": "https://github.com/ogrisel", "followers_url": "https://api.github.com/users/ogrisel/followers", "following_url": "https://api.github.com/users/ogrisel/following{/other_user}", "gists_url": "https://api.github.com/users/ogrisel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogrisel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogrisel/subscriptions", "organizations_url": "https://api.github.com/users/ogrisel/orgs", "repos_url": "https://api.github.com/users/ogrisel/repos", "events_url": "https://api.github.com/users/ogrisel/events{/privacy}", "received_events_url": "https://api.github.com/users/ogrisel/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ogrisel", "id": 89061, "node_id": "MDQ6VXNlcjg5MDYx", "avatar_url": "https://avatars0.githubusercontent.com/u/89061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogrisel", "html_url": "https://github.com/ogrisel", "followers_url": "https://api.github.com/users/ogrisel/followers", "following_url": "https://api.github.com/users/ogrisel/following{/other_user}", "gists_url": "https://api.github.com/users/ogrisel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogrisel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogrisel/subscriptions", "organizations_url": "https://api.github.com/users/ogrisel/orgs", "repos_url": "https://api.github.com/users/ogrisel/repos", "events_url": "https://api.github.com/users/ogrisel/events{/privacy}", "received_events_url": "https://api.github.com/users/ogrisel/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2017-04-21T04:29:25Z", "updated_at": "2017-11-17T10:26:47Z", "closed_at": "2017-11-17T10:26:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "#Hi,\r\n\r\nI had serialized a pipeline using cloudpickle. When I try to load it inside a docker container, I get the below error;\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python2.7/pickle.py\", line 1378, in load\r\n    return Unpickler(file).load()\r\n  File \"/usr/lib/python2.7/pickle.py\", line 858, in load\r\n    dispatch[key](self)\r\n  File \"/usr/lib/python2.7/pickle.py\", line 1246, in load_build\r\n    for k, v in slotstate.items():\r\nAttributeError: 'mtrand.RandomState' object has no attribute 'items'\r\n```\r\nLoad seems to work on the same environment / host. It doesnt load in docker container running python 2.7.\r\n\r\nI am using python2.7 , cloudpickle==0.2.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/82", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/82/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/82/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/82", "id": 216867511, "node_id": "MDU6SXNzdWUyMTY4Njc1MTE=", "number": 82, "title": "cloudpickle breaks dill deserialization across servers.", "user": {"login": "wmarshall484", "id": 4752570, "node_id": "MDQ6VXNlcjQ3NTI1NzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4752570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wmarshall484", "html_url": "https://github.com/wmarshall484", "followers_url": "https://api.github.com/users/wmarshall484/followers", "following_url": "https://api.github.com/users/wmarshall484/following{/other_user}", "gists_url": "https://api.github.com/users/wmarshall484/gists{/gist_id}", "starred_url": "https://api.github.com/users/wmarshall484/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wmarshall484/subscriptions", "organizations_url": "https://api.github.com/users/wmarshall484/orgs", "repos_url": "https://api.github.com/users/wmarshall484/repos", "events_url": "https://api.github.com/users/wmarshall484/events{/privacy}", "received_events_url": "https://api.github.com/users/wmarshall484/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-24T18:19:44Z", "updated_at": "2020-02-07T18:16:08Z", "closed_at": "2020-02-07T18:16:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following up on this issue on Stackoverflow:\r\n\r\nhttp://stackoverflow.com/questions/42960637/python-3-5-dill-pickling-unpickling-on-different-servers-keyerror-classtype/43006034#43006034\r\n\r\nIn a nutshell, with Python 3.5:\r\n\r\n**Server A** imports `cloudpickle` this causes `types.ClassType` to become defined.\r\n```\r\n>>> import types\r\n>>> dir(types)\r\n  ['BuiltinFunctionType',\r\n   'BuiltinMethodType',\r\n   'ClassType',\r\n   'CodeType',\r\n   ...\r\n  ]\r\n```\r\n**Server B** does not import `cloudpickle`, so `types.ClassType` is left undefined.\r\n```\r\n>>> import types\r\n>>> dir(types)\r\n  ['BuiltinFunctionType',\r\n   'BuiltinMethodType',\r\n   'CodeType',\r\n   ...\r\n  ]\r\n```\r\nObjects which are serialized in **server A** also seem to serialize a reference to `ClassType`. Then, when they are deserialized on **server B**, we encounter the following error:\r\n```\r\nTraceback (most recent call last):\r\n File \"/home/streamsadmin/git/streamsx.topology/test/python/topology/deleteme2.py\", line 40, in <module>\r\n   a = dill.loads(base64.b64decode(a.encode()))\r\n File \"/home/streamsadmin/anaconda3/lib/python3.5/site-packages/dill/dill.py\", line 277, in loads\r\n   return load(file)\r\n File \"/home/streamsadmin/anaconda3/lib/python3.5/site-packages/dill/dill.py\", line 266, in load\r\n   obj = pik.load()\r\n File \"/home/streamsadmin/anaconda3/lib/python3.5/site-packages/dill/dill.py\", line 524, in _load_type\r\n   return _reverse_typemap[name]\r\nKeyError: 'ClassType'\r\n```\r\n\r\nI've found a workaround, which you can see on Stackoverflow. \r\n\r\nHere's my question: `types.ClassType` was removed in 3.5, yet cloudpickle re-adds it. Is this strictly necessary? It seems to be having side effects.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/79", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/79/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/79/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/79", "id": 205565835, "node_id": "MDU6SXNzdWUyMDU1NjU4MzU=", "number": 79, "title": "Cannot serialize -> deserialize scipy.sparse.dok_matrix", "user": {"login": "tkluck-booking", "id": 16227612, "node_id": "MDQ6VXNlcjE2MjI3NjEy", "avatar_url": "https://avatars1.githubusercontent.com/u/16227612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tkluck-booking", "html_url": "https://github.com/tkluck-booking", "followers_url": "https://api.github.com/users/tkluck-booking/followers", "following_url": "https://api.github.com/users/tkluck-booking/following{/other_user}", "gists_url": "https://api.github.com/users/tkluck-booking/gists{/gist_id}", "starred_url": "https://api.github.com/users/tkluck-booking/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tkluck-booking/subscriptions", "organizations_url": "https://api.github.com/users/tkluck-booking/orgs", "repos_url": "https://api.github.com/users/tkluck-booking/repos", "events_url": "https://api.github.com/users/tkluck-booking/events{/privacy}", "received_events_url": "https://api.github.com/users/tkluck-booking/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-06T12:15:55Z", "updated_at": "2018-05-22T21:47:52Z", "closed_at": "2018-05-22T21:47:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Current behaviour: \r\n```\r\n>>> import cloudpickle; cloudpickle.__version__\r\n'0.2.2'\r\n>>> from scipy.sparse import dok_matrix\r\n>>> A = dok_matrix((2,2); A\r\n<2x2 sparse matrix of type '<type 'numpy.float64'>'\r\n\twith 0 stored elements in Dictionary Of Keys format>\r\n>>> cloudpickle.loads(cloudpickle.dumps(A))\r\n<2x2 sparse matrix of type '<type 'numpy.float64'>'\r\n\twith 0 stored elements in Dictionary Of Keys format>\r\n>>> A[0,0] = 1\r\n>>> cloudpickle.loads(cloudpickle.dumps(A))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python2.7/pickle.py\", line 1388, in loads\r\n    return Unpickler(file).load()\r\n  File \"/usr/lib/python2.7/pickle.py\", line 864, in load\r\n    dispatch[key](self)\r\n  File \"/usr/lib/python2.7/pickle.py\", line 1204, in load_setitem\r\n    dict[key] = value\r\n  File \"/usr/lib/python2.7/dist-packages/scipy/sparse/dok.py\", line 235, in __setitem__\r\n    if (isintlike(i) and isintlike(j) and 0 <= i < self.shape[0]\r\n  File \"/usr/lib/python2.7/dist-packages/scipy/sparse/base.py\", line 525, in __getattr__\r\n    raise AttributeError(attr + \" not found\")\r\nAttributeError: shape not found\r\n```\r\nExpected behaviour: an object of type `dok_matrix` properly (de)serializes regardless of content. Note that `pickle` and `cPickle` both work:\r\n```\r\n>>> import pickle\r\n>>> pickle.loads(pickle.dumps(A))\r\n<2x2 sparse matrix of type '<type 'numpy.float64'>'\r\n\twith 1 stored elements in Dictionary Of Keys format>\r\n>>> import cPickle\r\n>>> cPickle.loads(cPickle.dumps(A))\r\n<2x2 sparse matrix of type '<type 'numpy.float64'>'\r\n\twith 1 stored elements in Dictionary Of Keys format>\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/78", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/78/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/78/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/78", "id": 204491459, "node_id": "MDU6SXNzdWUyMDQ0OTE0NTk=", "number": 78, "title": "AttributeError when pickled function uses submodules", "user": {"login": "benjimin", "id": 12852539, "node_id": "MDQ6VXNlcjEyODUyNTM5", "avatar_url": "https://avatars0.githubusercontent.com/u/12852539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benjimin", "html_url": "https://github.com/benjimin", "followers_url": "https://api.github.com/users/benjimin/followers", "following_url": "https://api.github.com/users/benjimin/following{/other_user}", "gists_url": "https://api.github.com/users/benjimin/gists{/gist_id}", "starred_url": "https://api.github.com/users/benjimin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benjimin/subscriptions", "organizations_url": "https://api.github.com/users/benjimin/orgs", "repos_url": "https://api.github.com/users/benjimin/repos", "events_url": "https://api.github.com/users/benjimin/events{/privacy}", "received_events_url": "https://api.github.com/users/benjimin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-01T03:52:02Z", "updated_at": "2017-05-31T00:23:01Z", "closed_at": "2017-05-31T00:23:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This problem is when a function refers (by attribute) to a sub-module of a package. Cloudpickle appears to pickle functions not by name, but by code plus (a subset of) globals. So the parent package is injected into the pickle, but the sub-module is not. \r\n\r\n```python\r\ndef func():\r\n    # import unittest.mock\r\n    x = unittest.TestCase\r\n    x = unittest.mock.Mock\r\nimport unittest.mock\r\n\r\nimport cloudpickle as pickle\r\ns = pickle.dumps(func)\r\n\r\ndel unittest\r\nimport sys\r\ndel sys.modules['unittest']\r\ndel sys.modules['unittest.mock']\r\n\r\nf = pickle.loads(s)\r\n# import unittest.mock as anything\r\nf()\r\nAttributeError: module 'unittest' has no attribute 'mock'\r\n```\r\nThis leads to non-intuitive bugs in applications such as cluster computing (e.g. with `dask.distributed`). \r\nWorkarounds:\r\n- perform imports inside functions (contrary to PEP8).\r\n- import sub-modules (or their contents) `as` globals.\r\n- ensure (somehow) that all relevant sub-modules are automatically imported by respective parent packages (e.g. `__init__.py`).\r\n- arrange for the unpickling process to have already done an import of the sub-module (e.g. by first uncloudpickling something else that did refer to the sub-module as a global).\r\n\r\nI assume cloudpickle checks whether a global is an imported module, and if so then stores the name (rather than pickling its attributes). Is it practical to also check (via `sys.modules.keys()`) which sub-modules had previously been imported, and ensure every such module is subsequently initialised?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/77", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/77/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/77/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/77", "id": 203496148, "node_id": "MDU6SXNzdWUyMDM0OTYxNDg=", "number": 77, "title": "pickling memoryviews doesn't work", "user": {"login": "pitrou", "id": 1721820, "node_id": "MDQ6VXNlcjE3MjE4MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitrou", "html_url": "https://github.com/pitrou", "followers_url": "https://api.github.com/users/pitrou/followers", "following_url": "https://api.github.com/users/pitrou/following{/other_user}", "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions", "organizations_url": "https://api.github.com/users/pitrou/orgs", "repos_url": "https://api.github.com/users/pitrou/repos", "events_url": "https://api.github.com/users/pitrou/events{/privacy}", "received_events_url": "https://api.github.com/users/pitrou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 199135100, "node_id": "MDU6TGFiZWwxOTkxMzUxMDA=", "url": "https://api.github.com/repos/cloudpipe/cloudpickle/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-26T21:38:02Z", "updated_at": "2017-05-31T00:21:01Z", "closed_at": "2017-05-31T00:21:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is on Python 3.5. It seems cloudpickle tries to support memoryviews (the traceback shows a dedicated `save_memoryview` method, but fails:\r\n```\r\n>>> import cloudpickle\r\n>>> m = memoryview(b\"abc\")\r\n>>> cloudpickle.dumps(m)\r\nTraceback (most recent call last):\r\n  File \"<ipython-input-3-c69575090534>\", line 1, in <module>\r\n    cloudpickle.dumps(m)\r\n  File \"/home/antoine/miniconda3/envs/dask35/lib/python3.5/site-packages/cloudpickle/cloudpickle.py\", line 706, in dumps\r\n    cp.dump(obj)\r\n  File \"/home/antoine/miniconda3/envs/dask35/lib/python3.5/site-packages/cloudpickle/cloudpickle.py\", line 146, in dump\r\n    return Pickler.dump(self, obj)\r\n  File \"/home/antoine/miniconda3/envs/dask35/lib/python3.5/pickle.py\", line 408, in dump\r\n    self.save(obj)\r\n  File \"/home/antoine/miniconda3/envs/dask35/lib/python3.5/pickle.py\", line 475, in save\r\n    f(self, obj) # Call unbound method with explicit self\r\n  File \"/home/antoine/miniconda3/envs/dask35/lib/python3.5/site-packages/cloudpickle/cloudpickle.py\", line 154, in save_memoryview\r\n    Pickler.save_string(self, str(obj))\r\nAttributeError: type object '_Pickler' has no attribute 'save_string'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/76", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/76/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/76/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/76", "id": 202329414, "node_id": "MDU6SXNzdWUyMDIzMjk0MTQ=", "number": 76, "title": "PicklingError: Can't pickle <function f at ...>: it's not the same object as __main__.f", "user": {"login": "basnijholt", "id": 6897215, "node_id": "MDQ6VXNlcjY4OTcyMTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6897215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basnijholt", "html_url": "https://github.com/basnijholt", "followers_url": "https://api.github.com/users/basnijholt/followers", "following_url": "https://api.github.com/users/basnijholt/following{/other_user}", "gists_url": "https://api.github.com/users/basnijholt/gists{/gist_id}", "starred_url": "https://api.github.com/users/basnijholt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basnijholt/subscriptions", "organizations_url": "https://api.github.com/users/basnijholt/orgs", "repos_url": "https://api.github.com/users/basnijholt/repos", "events_url": "https://api.github.com/users/basnijholt/events{/privacy}", "received_events_url": "https://api.github.com/users/basnijholt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-01-21T17:48:22Z", "updated_at": "2017-01-22T11:29:08Z", "closed_at": "2017-01-22T11:29:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can anyone explain me why the following code isn't working?\r\n\r\n```python\r\nfrom cloudpickle import pickle\r\nnamespace = {}\r\nexec('def f(x): return x', namespace)\r\npickle.dumps(namespace['f'])\r\n```\r\n\r\nAnd if this is the expected behavior, you would make me very happy with a solution that uses `exec('def f(x): return x', namespace)` and results in a serializable function `f` and I prefer not to use `globals()`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/74", "repository_url": "https://api.github.com/repos/cloudpipe/cloudpickle", "labels_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/74/comments", "events_url": "https://api.github.com/repos/cloudpipe/cloudpickle/issues/74/events", "html_url": "https://github.com/cloudpipe/cloudpickle/issues/74", "id": 197115478, "node_id": "MDU6SXNzdWUxOTcxMTU0Nzg=", "number": 74, "title": "Cloud Pickle cannot serialize some objects.", "user": {"login": "arita37", "id": 18707623, "node_id": "MDQ6VXNlcjE4NzA3NjIz", "avatar_url": "https://avatars3.githubusercontent.com/u/18707623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arita37", "html_url": "https://github.com/arita37", "followers_url": "https://api.github.com/users/arita37/followers", "following_url": "https://api.github.com/users/arita37/following{/other_user}", "gists_url": "https://api.github.com/users/arita37/gists{/gist_id}", "starred_url": "https://api.github.com/users/arita37/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arita37/subscriptions", "organizations_url": "https://api.github.com/users/arita37/orgs", "repos_url": "https://api.github.com/users/arita37/repos", "events_url": "https://api.github.com/users/arita37/events{/privacy}", "received_events_url": "https://api.github.com/users/arita37/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-22T07:58:34Z", "updated_at": "2019-06-13T15:53:59Z", "closed_at": "2019-06-13T15:53:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use map to execute some code.\r\n\r\n```\r\n############## Testing of IPyrallel on DEAP  ###################################\r\ncreator.create(\"FitnessMin\", base.Fitness, weights=(-1.0,))\r\ncreator.create(\"Individual\", gp.PrimitiveTree, fitness=creator.FitnessMin)\r\n\r\ntoolbox = base.Toolbox()\r\n\r\n**#Using Parallell Processing\r\nimport ipyparallel as ipp,  time\r\nrc= ipp.Client()\r\n# pool = rc.load_balanced_view()\r\nrc[:].use_cloudpickle()\r\npool= rc[:]\r\ntoolbox.register(\"map\", pool.map)**\r\n\r\n\r\ntoolbox.register(\"expr\", gp.genHalfAndHalf, pset=pset, min_=1, max_=2)\r\ntoolbox.register(\"individual\", tools.initIterate, creator.Individual, toolbox.expr)\r\ntoolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\r\ntoolbox.register(\"compile\", gp.compile, pset=pset)\r\n\r\n\r\ndef evalSymbReg(individual, points):\r\n    func = toolbox.compile(expr=individual)   # Transform the tree expression in a callable function\r\n    # and the real function : x**4 + x**3 + x**2 + x\r\n    sqerrors = ((func(x) - x**4 - x**3 - x**2 - x)**2 for x in points)\r\n    return math.fsum(sqerrors) / len(points),\r\n\r\n\r\ntoolbox.register(\"evaluate\", evalSymbReg, points=[x/10. for x in range(-10,10)])\r\ntoolbox.register(\"select\", tools.selTournament, tournsize=3)\r\ntoolbox.register(\"mate\", gp.cxOnePoint)\r\ntoolbox.register(\"expr_mut\", gp.genFull, min_=0, max_=2)\r\ntoolbox.register(\"mutate\", gp.mutUniform, expr=toolbox.expr_mut, pset=pset)\r\n\r\ntoolbox.decorate(\"mate\", gp.staticLimit(key=operator.attrgetter(\"height\"), max_value=17))\r\ntoolbox.decorate(\"mutate\", gp.staticLimit(key=operator.attrgetter(\"height\"), max_value=17))\r\n\r\ndef main():\r\n    random.seed(318)\r\n\r\n    pop = toolbox.population(n=300)\r\n    hof = tools.HallOfFame(1)\r\n    \r\n    stats_fit = tools.Statistics(lambda ind: ind.fitness.values)\r\n    stats_size = tools.Statistics(len)\r\n    mstats = tools.MultiStatistics(fitness=stats_fit, size=stats_size)\r\n    mstats.register(\"avg\", np.mean)\r\n    mstats.register(\"std\", np.std)\r\n    mstats.register(\"min\", np.min)\r\n    mstats.register(\"max\", np.max)\r\n\r\n    pop, log = algorithms.eaSimple(pop, toolbox, 0.5, 0.1, 40, stats=mstats,\r\n                                   halloffame=hof, verbose=True)\r\n    # print log\r\n    return pop, log, hof\r\n\r\n```\r\n\r\nI got this error :   \r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-11-978da9be5b87> in <module>()\r\n      1 if __name__ == \"__main__\":\r\n----> 2     pop, log, hof= main()\r\n\r\n<ipython-input-10-6ff69ab06682> in main()\r\n     15 \r\n     16     pop, log = algorithms.eaSimple(pop, toolbox, 0.5, 0.1, 40, stats=mstats,\r\n---> 17                                    halloffame=hof, verbose=True)\r\n     18     # print log\r\n     19     return pop, log, hof\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\deap\\algorithms.pyc in eaSimple(population, toolbox, cxpb, mutpb, ngen, stats, halloffame, verbose)\r\n    145     # Evaluate the individuals with an invalid fitness\r\n    146     invalid_ind = [ind for ind in population if not ind.fitness.valid]\r\n--> 147     fitnesses = toolbox.map(toolbox.evaluate, invalid_ind)\r\n    148     for ind, fit in zip(invalid_ind, fitnesses):\r\n    149         ind.fitness.values = fit\r\n\r\n<decorator-gen-141> in map(self, f, *sequences, **kwargs)\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\ipyparallel\\client\\view.pyc in sync_results(f, self, *args, **kwargs)\r\n     48     self._in_sync_results = True\r\n     49     try:\r\n---> 50         ret = f(self, *args, **kwargs)\r\n     51     finally:\r\n     52         self._in_sync_results = False\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\ipyparallel\\client\\view.pyc in map(self, f, *sequences, **kwargs)\r\n    613         assert len(sequences) > 0, \"must have some sequences to map onto!\"\r\n    614         pf = ParallelFunction(self, f, block=block, **kwargs)\r\n--> 615         return pf.map(*sequences)\r\n    616 \r\n    617     @sync_results\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\ipyparallel\\client\\remotefunction.pyc in map(self, *sequences)\r\n    283         and mismatched sequence lengths will be padded with None.\r\n    284         \"\"\"\r\n--> 285         return self(*sequences, __ipp_mapping=True)\r\n    286 \r\n    287 __all__ = ['remote', 'parallel', 'RemoteFunction', 'ParallelFunction']\r\n\r\n<decorator-gen-131> in __call__(self, *sequences, **kwargs)\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\ipyparallel\\client\\remotefunction.pyc in sync_view_results(f, self, *args, **kwargs)\r\n     74     view = self.view\r\n     75     if view._in_sync_results:\r\n---> 76         return f(self, *args, **kwargs)\r\n     77     view._in_sync_results = True\r\n     78     try:\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\ipyparallel\\client\\remotefunction.pyc in __call__(self, *sequences, **kwargs)\r\n    257             view = self.view if balanced else client[t]\r\n    258             with view.temp_flags(block=False, **self.flags):\r\n--> 259                 ar = view.apply(f, *args)\r\n    260                 ar.owner = False\r\n    261 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\ipyparallel\\client\\view.pyc in apply(self, f, *args, **kwargs)\r\n    209         ``f(*args, **kwargs)``.\r\n    210         \"\"\"\r\n--> 211         return self._really_apply(f, args, kwargs)\r\n    212 \r\n    213     def apply_async(self, f, *args, **kwargs):\r\n\r\n<decorator-gen-140> in _really_apply(self, f, args, kwargs, targets, block, track)\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\ipyparallel\\client\\view.pyc in sync_results(f, self, *args, **kwargs)\r\n     48     self._in_sync_results = True\r\n     49     try:\r\n---> 50         ret = f(self, *args, **kwargs)\r\n     51     finally:\r\n     52         self._in_sync_results = False\r\n\r\n<decorator-gen-139> in _really_apply(self, f, args, kwargs, targets, block, track)\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\ipyparallel\\client\\view.pyc in save_ids(f, self, *args, **kwargs)\r\n     33     n_previous = len(self.client.history)\r\n     34     try:\r\n---> 35         ret = f(self, *args, **kwargs)\r\n     36     finally:\r\n     37         nmsgs = len(self.client.history) - n_previous\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\ipyparallel\\client\\view.pyc in _really_apply(self, f, args, kwargs, targets, block, track)\r\n    555         for ident in _idents:\r\n    556             future = self.client.send_apply_request(self._socket, f, args, kwargs, track=track,\r\n--> 557                                     ident=ident)\r\n    558             futures.append(future)\r\n    559         if track:\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\ipyparallel\\client\\client.pyc in send_apply_request(self, socket, f, args, kwargs, metadata, track, ident)\r\n   1387         bufs = serialize.pack_apply_message(f, args, kwargs,\r\n   1388             buffer_threshold=self.session.buffer_threshold,\r\n-> 1389             item_threshold=self.session.item_threshold,\r\n   1390         )\r\n   1391 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\ipyparallel\\serialize\\serialize.pyc in pack_apply_message(f, args, kwargs, buffer_threshold, item_threshold)\r\n    164 \r\n    165     arg_bufs = list(chain.from_iterable(\r\n--> 166         serialize_object(arg, buffer_threshold, item_threshold) for arg in args))\r\n    167 \r\n    168     kw_keys = sorted(kwargs.keys())\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\ipyparallel\\serialize\\serialize.pyc in <genexpr>((arg,))\r\n    164 \r\n    165     arg_bufs = list(chain.from_iterable(\r\n--> 166         serialize_object(arg, buffer_threshold, item_threshold) for arg in args))\r\n    167 \r\n    168     kw_keys = sorted(kwargs.keys())\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\ipyparallel\\serialize\\serialize.pyc in serialize_object(obj, buffer_threshold, item_threshold)\r\n    110         buffers.extend(_extract_buffers(cobj, buffer_threshold))\r\n    111 \r\n--> 112     buffers.insert(0, pickle.dumps(cobj, PICKLE_PROTOCOL))\r\n    113     return buffers\r\n    114 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\cloudpickle\\cloudpickle.pyc in dumps(obj, protocol)\r\n    627 \r\n    628     cp = CloudPickler(file,protocol)\r\n--> 629     cp.dump(obj)\r\n    630 \r\n    631     return file.getvalue()\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\cloudpickle\\cloudpickle.pyc in dump(self, obj)\r\n    105         self.inject_addons()\r\n    106         try:\r\n--> 107             return Pickler.dump(self, obj)\r\n    108         except RuntimeError as e:\r\n    109             if 'recursion' in e.args[0]:\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in dump(self, obj)\r\n    222         if self.proto >= 2:\r\n    223             self.write(PROTO + chr(self.proto))\r\n--> 224         self.save(obj)\r\n    225         self.write(STOP)\r\n    226 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save(self, obj)\r\n    329 \r\n    330         # Save the reduce() output and finally memoize the object\r\n--> 331         self.save_reduce(obj=obj, *rv)\r\n    332 \r\n    333     def persistent_id(self, obj):\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\cloudpickle\\cloudpickle.pyc in save_reduce(self, func, args, state, listitems, dictitems, obj)\r\n    527         else:\r\n    528             save(func)\r\n--> 529             save(args)\r\n    530             write(pickle.REDUCE)\r\n    531 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save(self, obj)\r\n    284         f = self.dispatch.get(t)\r\n    285         if f:\r\n--> 286             f(self, obj) # Call unbound method with explicit self\r\n    287             return\r\n    288 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save_tuple(self, obj)\r\n    552         if n <= 3 and proto >= 2:\r\n    553             for element in obj:\r\n--> 554                 save(element)\r\n    555             # Subtle.  Same as in the big comment below.\r\n    556             if id(obj) in memo:\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save(self, obj)\r\n    284         f = self.dispatch.get(t)\r\n    285         if f:\r\n--> 286             f(self, obj) # Call unbound method with explicit self\r\n    287             return\r\n    288 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\cloudpickle\\cloudpickle.pyc in save_function(self, obj, name)\r\n    203                 or getattr(obj.__code__, 'co_filename', None) == '<stdin>'\r\n    204                 or themodule is None):\r\n--> 205             self.save_function_tuple(obj)\r\n    206             return\r\n    207         else:\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\cloudpickle\\cloudpickle.pyc in save_function_tuple(self, func)\r\n    251 \r\n    252         # save the rest of the func data needed by _fill_function\r\n--> 253         save(f_globals)\r\n    254         save(defaults)\r\n    255         save(dct)\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save(self, obj)\r\n    284         f = self.dispatch.get(t)\r\n    285         if f:\r\n--> 286             f(self, obj) # Call unbound method with explicit self\r\n    287             return\r\n    288 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save_dict(self, obj)\r\n    653 \r\n    654         self.memoize(obj)\r\n--> 655         self._batch_setitems(obj.iteritems())\r\n    656 \r\n    657     dispatch[DictionaryType] = save_dict\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in _batch_setitems(self, items)\r\n    685                 for k, v in tmp:\r\n    686                     save(k)\r\n--> 687                     save(v)\r\n    688                 write(SETITEMS)\r\n    689             elif n:\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save(self, obj)\r\n    329 \r\n    330         # Save the reduce() output and finally memoize the object\r\n--> 331         self.save_reduce(obj=obj, *rv)\r\n    332 \r\n    333     def persistent_id(self, obj):\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\cloudpickle\\cloudpickle.pyc in save_reduce(self, func, args, state, listitems, dictitems, obj)\r\n    545 \r\n    546         if state is not None:\r\n--> 547             save(state)\r\n    548             write(pickle.BUILD)\r\n    549 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save(self, obj)\r\n    284         f = self.dispatch.get(t)\r\n    285         if f:\r\n--> 286             f(self, obj) # Call unbound method with explicit self\r\n    287             return\r\n    288 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save_dict(self, obj)\r\n    653 \r\n    654         self.memoize(obj)\r\n--> 655         self._batch_setitems(obj.iteritems())\r\n    656 \r\n    657     dispatch[DictionaryType] = save_dict\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in _batch_setitems(self, items)\r\n    685                 for k, v in tmp:\r\n    686                     save(k)\r\n--> 687                     save(v)\r\n    688                 write(SETITEMS)\r\n    689             elif n:\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save(self, obj)\r\n    329 \r\n    330         # Save the reduce() output and finally memoize the object\r\n--> 331         self.save_reduce(obj=obj, *rv)\r\n    332 \r\n    333     def persistent_id(self, obj):\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\cloudpickle\\cloudpickle.pyc in save_reduce(self, func, args, state, listitems, dictitems, obj)\r\n    545 \r\n    546         if state is not None:\r\n--> 547             save(state)\r\n    548             write(pickle.BUILD)\r\n    549 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save(self, obj)\r\n    284         f = self.dispatch.get(t)\r\n    285         if f:\r\n--> 286             f(self, obj) # Call unbound method with explicit self\r\n    287             return\r\n    288 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save_tuple(self, obj)\r\n    566         write(MARK)\r\n    567         for element in obj:\r\n--> 568             save(element)\r\n    569 \r\n    570         if id(obj) in memo:\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save(self, obj)\r\n    284         f = self.dispatch.get(t)\r\n    285         if f:\r\n--> 286             f(self, obj) # Call unbound method with explicit self\r\n    287             return\r\n    288 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save_dict(self, obj)\r\n    653 \r\n    654         self.memoize(obj)\r\n--> 655         self._batch_setitems(obj.iteritems())\r\n    656 \r\n    657     dispatch[DictionaryType] = save_dict\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in _batch_setitems(self, items)\r\n    685                 for k, v in tmp:\r\n    686                     save(k)\r\n--> 687                     save(v)\r\n    688                 write(SETITEMS)\r\n    689             elif n:\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save(self, obj)\r\n    329 \r\n    330         # Save the reduce() output and finally memoize the object\r\n--> 331         self.save_reduce(obj=obj, *rv)\r\n    332 \r\n    333     def persistent_id(self, obj):\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\site-packages\\cloudpickle\\cloudpickle.pyc in save_reduce(self, func, args, state, listitems, dictitems, obj)\r\n    545 \r\n    546         if state is not None:\r\n--> 547             save(state)\r\n    548             write(pickle.BUILD)\r\n    549 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save(self, obj)\r\n    284         f = self.dispatch.get(t)\r\n    285         if f:\r\n--> 286             f(self, obj) # Call unbound method with explicit self\r\n    287             return\r\n    288 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save_dict(self, obj)\r\n    653 \r\n    654         self.memoize(obj)\r\n--> 655         self._batch_setitems(obj.iteritems())\r\n    656 \r\n    657     dispatch[DictionaryType] = save_dict\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in _batch_setitems(self, items)\r\n    685                 for k, v in tmp:\r\n    686                     save(k)\r\n--> 687                     save(v)\r\n    688                 write(SETITEMS)\r\n    689             elif n:\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save(self, obj)\r\n    284         f = self.dispatch.get(t)\r\n    285         if f:\r\n--> 286             f(self, obj) # Call unbound method with explicit self\r\n    287             return\r\n    288 \r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save_dict(self, obj)\r\n    653 \r\n    654         self.memoize(obj)\r\n--> 655         self._batch_setitems(obj.iteritems())\r\n    656 \r\n    657     dispatch[DictionaryType] = save_dict\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in _batch_setitems(self, items)\r\n    684                 write(MARK)\r\n    685                 for k, v in tmp:\r\n--> 686                     save(k)\r\n    687                     save(v)\r\n    688                 write(SETITEMS)\r\n\r\nD:\\_devs\\Python01\\Anaconda27\\lib\\pickle.pyc in save(self, obj)\r\n    304             reduce = getattr(obj, \"__reduce_ex__\", None)\r\n    305             if reduce:\r\n--> 306                 rv = reduce(self.proto)\r\n    307             else:\r\n    308                 reduce = getattr(obj, \"__reduce__\", None)\r\n\r\nTypeError: can't pickle member_descriptor objects\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}]}