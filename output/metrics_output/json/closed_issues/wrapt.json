{"total_count": 74, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/165", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/165/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/165/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/165/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/165", "id": 655128710, "node_id": "MDU6SXNzdWU2NTUxMjg3MTA=", "number": 165, "title": "try except in wrapt decorator error", "user": {"login": "kevin0048", "id": 22660746, "node_id": "MDQ6VXNlcjIyNjYwNzQ2", "avatar_url": "https://avatars3.githubusercontent.com/u/22660746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevin0048", "html_url": "https://github.com/kevin0048", "followers_url": "https://api.github.com/users/kevin0048/followers", "following_url": "https://api.github.com/users/kevin0048/following{/other_user}", "gists_url": "https://api.github.com/users/kevin0048/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevin0048/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevin0048/subscriptions", "organizations_url": "https://api.github.com/users/kevin0048/orgs", "repos_url": "https://api.github.com/users/kevin0048/repos", "events_url": "https://api.github.com/users/kevin0048/events{/privacy}", "received_events_url": "https://api.github.com/users/kevin0048/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-11T04:03:36Z", "updated_at": "2020-07-11T04:51:03Z", "closed_at": "2020-07-11T04:51:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to use try...except in wrapt.decorator, but I got an error.The code like\r\n```python\r\nimport time\r\nimport wrapt\r\n\r\ndef decorator(try_cnt):\r\n    @wrapt.decorator\r\n    def wrapper(func, instance, args, kwargs):\r\n        print(\"try cnt: %d\" %try_cnt)\r\n        while try_cnt:\r\n            try:\r\n                func(*args, **kwargs)\r\n                print(\"success\")\r\n                break\r\n            except:\r\n                try_cnt -= 1\r\n        if try_cnt == 0:\r\n            print(\"failed\")\r\n\r\n    return wrapper\r\n\r\n@decorator(6)\r\ndef func():\r\n    print(1)\r\n    \r\nfunc()\r\n```\r\nand the error is that\r\n```\r\n---------------------------------------------------------------------------\r\nUnboundLocalError                         Traceback (most recent call last)\r\n<ipython-input-30-d616aad74082> in <module>\r\n     22     print(1)\r\n     23 \r\n---> 24 func()\r\n\r\n<ipython-input-30-d616aad74082> in wrapper(func, instance, args, kwargs)\r\n      5     @wrapt.decorator\r\n      6     def wrapper(func, instance, args, kwargs):\r\n----> 7         print(\"try cnt: %d\" %try_cnt)\r\n      8         while try_cnt:\r\n      9             try:\r\n\r\nUnboundLocalError: local variable 'try_cnt' referenced before assignment\r\n```\r\n\r\nwhen I remove try...except,\r\n```python\r\nimport time\r\nimport wrapt\r\n\r\ndef decorator(try_cnt):\r\n    @wrapt.decorator\r\n    def wrapper(func, instance, args, kwargs):\r\n        print(\"try cnt: %d\" %try_cnt)\r\n        while try_cnt:\r\n            func(*args, **kwargs)\r\n            print(\"success\")\r\n            break\r\n\r\n    return wrapper\r\n\r\n@decorator(6)\r\ndef func():\r\n    print(1)\r\n \r\nfunc()\r\n```\r\nIt is success, so how can I use try...except in wrapt.decorator? Thanks~", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/159", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/159/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/159/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/159", "id": 602299404, "node_id": "MDU6SXNzdWU2MDIyOTk0MDQ=", "number": 159, "title": "Decorators With Optional Arguments using class", "user": {"login": "drizzt", "id": 211316, "node_id": "MDQ6VXNlcjIxMTMxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/211316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drizzt", "html_url": "https://github.com/drizzt", "followers_url": "https://api.github.com/users/drizzt/followers", "following_url": "https://api.github.com/users/drizzt/following{/other_user}", "gists_url": "https://api.github.com/users/drizzt/gists{/gist_id}", "starred_url": "https://api.github.com/users/drizzt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drizzt/subscriptions", "organizations_url": "https://api.github.com/users/drizzt/orgs", "repos_url": "https://api.github.com/users/drizzt/repos", "events_url": "https://api.github.com/users/drizzt/events{/privacy}", "received_events_url": "https://api.github.com/users/drizzt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-17T23:47:54Z", "updated_at": "2020-04-18T00:41:55Z", "closed_at": "2020-04-18T00:09:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "The examples [Decorators With Arguments](https://wrapt.readthedocs.io/en/latest/decorators.html#decorators-with-arguments) specify how to create a decorator with arguments by using ` class` and `__call__`, but [Decorators With Optional Arguments](https://wrapt.readthedocs.io/en/latest/decorators.html#decorators-with-optional-arguments) doesn't specify how to do that (and I didn't find any way).\r\nCan you please tell me how to do that (if possible)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/157", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/157/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/157/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/157", "id": 586011360, "node_id": "MDU6SXNzdWU1ODYwMTEzNjA=", "number": 157, "title": "patch object in sys.modules?", "user": {"login": "benoitc", "id": 14498, "node_id": "MDQ6VXNlcjE0NDk4", "avatar_url": "https://avatars1.githubusercontent.com/u/14498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benoitc", "html_url": "https://github.com/benoitc", "followers_url": "https://api.github.com/users/benoitc/followers", "following_url": "https://api.github.com/users/benoitc/following{/other_user}", "gists_url": "https://api.github.com/users/benoitc/gists{/gist_id}", "starred_url": "https://api.github.com/users/benoitc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benoitc/subscriptions", "organizations_url": "https://api.github.com/users/benoitc/orgs", "repos_url": "https://api.github.com/users/benoitc/repos", "events_url": "https://api.github.com/users/benoitc/events{/privacy}", "received_events_url": "https://api.github.com/users/benoitc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-23T08:09:21Z", "updated_at": "2020-04-06T13:15:58Z", "closed_at": "2020-04-06T13:15:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to patch a class and replace it by a proxy in my own application to override some methods. Since the library is not under my control, i can't soimply use the decorators provided. \r\n\r\nFor example we have the object `somemodule.SomeObject`:\r\n\r\n```\r\nclass SomeObject(object):\r\n\r\n    def__init__(sefl, arg1, keyarg1=None):\r\n       pass\r\n\r\n   def somemethod(self, arg2):\r\n       pass\r\n```\r\n\r\n I would like to replace it my my object that will rfo some thing when a method is called. For example retrieving the value of the `arg1` in `__init_`_ and `arg2` in `somemethod` . What would be the best way to do it with wrapt?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/156", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/156/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/156/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/156", "id": 580446591, "node_id": "MDU6SXNzdWU1ODA0NDY1OTE=", "number": 156, "title": "Can't install wrapt with python 3.8 on windows", "user": {"login": "Xarkam", "id": 331816, "node_id": "MDQ6VXNlcjMzMTgxNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/331816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xarkam", "html_url": "https://github.com/Xarkam", "followers_url": "https://api.github.com/users/Xarkam/followers", "following_url": "https://api.github.com/users/Xarkam/following{/other_user}", "gists_url": "https://api.github.com/users/Xarkam/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xarkam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xarkam/subscriptions", "organizations_url": "https://api.github.com/users/Xarkam/orgs", "repos_url": "https://api.github.com/users/Xarkam/repos", "events_url": "https://api.github.com/users/Xarkam/events{/privacy}", "received_events_url": "https://api.github.com/users/Xarkam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-13T08:28:50Z", "updated_at": "2020-03-14T00:20:41Z", "closed_at": "2020-03-14T00:20:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I can't install wrapt dependecie for pylint:\r\n```\r\nRunning setup.py install for wrapt ... error\r\n    ERROR: Command errored out with exit status 1:\r\n     command: 'e:\\python\\python38\\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'C:\\\\Users\\\\benja\\\\AppData\\\\Local\\\\Temp\\\\pip-install-j1ejk9ds\\\\wrapt\\\\setup.py'\"'\"'; __file__='\"'\"'C:\\\\Users\\\\benja\\\\AppData\\\\Local\\\\Temp\\\\pip-install-j1ejk9ds\\\\wrapt\\\\setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record 'C:\\Users\\benja\\AppData\\Local\\Temp\\pip-record-ubpuqib4\\install-record.txt' --single-version-externally-managed --compile --install-headers 'e:\\python\\python38\\Include\\wrapt'\r\n         cwd: C:\\Users\\benja\\AppData\\Local\\Temp\\pip-install-j1ejk9ds\\wrapt\\\r\n    Complete output (61 lines):\r\n    running install\r\n    running build\r\n    running build_py\r\n    creating build\r\n    creating build\\lib.win-amd64-3.8\r\n    creating build\\lib.win-amd64-3.8\\wrapt\r\n    copying src\\wrapt\\decorators.py -> build\\lib.win-amd64-3.8\\wrapt\r\n    copying src\\wrapt\\importer.py -> build\\lib.win-amd64-3.8\\wrapt\r\n    copying src\\wrapt\\wrappers.py -> build\\lib.win-amd64-3.8\\wrapt\r\n    copying src\\wrapt\\__init__.py -> build\\lib.win-amd64-3.8\\wrapt\r\n    running build_ext\r\n    building 'wrapt._wrappers' extension\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"C:\\Users\\benja\\AppData\\Local\\Temp\\pip-install-j1ejk9ds\\wrapt\\setup.py\", line 101, in <module>\r\n        run_setup(with_extensions=True)\r\n      File \"C:\\Users\\benja\\AppData\\Local\\Temp\\pip-install-j1ejk9ds\\wrapt\\setup.py\", line 71, in run_setup\r\n        setup(**setup_kwargs_tmp)\r\n      File \"e:\\python\\python38\\lib\\distutils\\core.py\", line 148, in setup\r\n        dist.run_commands()\r\n      File \"e:\\python\\python38\\lib\\distutils\\dist.py\", line 966, in run_commands\r\n        self.run_command(cmd)\r\n      File \"e:\\python\\python38\\lib\\distutils\\dist.py\", line 985, in run_command\r\n        cmd_obj.run()\r\n      File \"e:\\python\\python38\\lib\\site-packages\\setuptools\\command\\install.py\", line 61, in run\r\n        return orig.install.run(self)\r\n      File \"e:\\python\\python38\\lib\\distutils\\command\\install.py\", line 545, in run\r\n        self.run_command('build')\r\n      File \"e:\\python\\python38\\lib\\distutils\\cmd.py\", line 313, in run_command\r\n        self.distribution.run_command(command)\r\n      File \"e:\\python\\python38\\lib\\distutils\\dist.py\", line 985, in run_command\r\n        cmd_obj.run()\r\n      File \"e:\\python\\python38\\lib\\distutils\\command\\build.py\", line 135, in run\r\n        self.run_command(cmd_name)\r\n      File \"e:\\python\\python38\\lib\\distutils\\cmd.py\", line 313, in run_command\r\n        self.distribution.run_command(command)\r\n      File \"e:\\python\\python38\\lib\\distutils\\dist.py\", line 985, in run_command\r\n        cmd_obj.run()\r\n      File \"C:\\Users\\benja\\AppData\\Local\\Temp\\pip-install-j1ejk9ds\\wrapt\\setup.py\", line 25, in run\r\n        build_ext.run(self)\r\n      File \"e:\\python\\python38\\lib\\distutils\\command\\build_ext.py\", line 340, in run\r\n        self.build_extensions()\r\n      File \"e:\\python\\python38\\lib\\distutils\\command\\build_ext.py\", line 449, in build_extensions\r\n        self._build_extensions_serial()\r\n      File \"e:\\python\\python38\\lib\\distutils\\command\\build_ext.py\", line 474, in _build_extensions_serial\r\n        self.build_extension(ext)\r\n      File \"C:\\Users\\benja\\AppData\\Local\\Temp\\pip-install-j1ejk9ds\\wrapt\\setup.py\", line 31, in build_extension\r\n        build_ext.build_extension(self, ext)\r\n      File \"e:\\python\\python38\\lib\\distutils\\command\\build_ext.py\", line 528, in build_extension\r\n        objects = self.compiler.compile(sources,\r\n      File \"e:\\python\\python38\\lib\\distutils\\_msvccompiler.py\", line 360, in compile\r\n        self.initialize()\r\n      File \"e:\\python\\python38\\lib\\distutils\\_msvccompiler.py\", line 253, in initialize\r\n        vc_env = _get_vc_env(plat_spec)\r\n      File \"e:\\python\\python38\\lib\\site-packages\\setuptools\\msvc.py\", line 171, in msvc14_get_vc_env\r\n        return EnvironmentInfo(plat_spec, vc_min_ver=14.0).return_env()\r\n      File \"e:\\python\\python38\\lib\\site-packages\\setuptools\\msvc.py\", line 1623, in return_env\r\n        if self.vs_ver >= 14 and isfile(self.VCRuntimeRedist):\r\n      File \"e:\\python\\python38\\lib\\genericpath.py\", line 30, in isfile\r\n        st = os.stat(path)\r\n    TypeError: stat: path should be string, bytes, os.PathLike or integer, not NoneType\r\n    ----------------------------------------\r\nERROR: Command errored out with exit status 1: 'e:\\python\\python38\\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'C:\\\\Users\\\\benja\\\\AppData\\\\Local\\\\Temp\\\\pip-install-j1ejk9ds\\\\wrapt\\\\setup.py'\"'\"'; __file__='\"'\"'C:\\\\Users\\\\benja\\\\AppData\\\\Local\\\\Temp\\\\pip-install-j1ejk9ds\\\\wrapt\\\\setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record 'C:\\Users\\benja\\AppData\\Local\\Temp\\pip-record-ubpuqib4\\install-record.txt' --single-version-externally-managed --compile --install-headers 'e:\\python\\python38\\Include\\wrapt' Check the logs for full command output. \r\n```\r\n\r\nPython info:\r\n`Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/153", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/153/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/153/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/153/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/153", "id": 576584333, "node_id": "MDU6SXNzdWU1NzY1ODQzMzM=", "number": 153, "title": "Function wrapper on a class staticmethod", "user": {"login": "majorgreys", "id": 155673, "node_id": "MDQ6VXNlcjE1NTY3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/155673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/majorgreys", "html_url": "https://github.com/majorgreys", "followers_url": "https://api.github.com/users/majorgreys/followers", "following_url": "https://api.github.com/users/majorgreys/following{/other_user}", "gists_url": "https://api.github.com/users/majorgreys/gists{/gist_id}", "starred_url": "https://api.github.com/users/majorgreys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/majorgreys/subscriptions", "organizations_url": "https://api.github.com/users/majorgreys/orgs", "repos_url": "https://api.github.com/users/majorgreys/repos", "events_url": "https://api.github.com/users/majorgreys/events{/privacy}", "received_events_url": "https://api.github.com/users/majorgreys/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-05T23:04:22Z", "updated_at": "2020-03-09T02:36:31Z", "closed_at": "2020-03-09T02:36:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am investigating an issue with how `wrapt` behaves when wrapping a staticmethod. \r\n\r\nTo illustrate, let's start with the simple case and wrap the function to see the error:\r\n\r\n``` python\r\nimport wrapt\r\n\r\n\r\nclass Class(object):\r\n    @staticmethod\r\n    def function(arg):\r\n        return arg\r\n\r\n\r\ndef wrapper(wrapped, instance, args, kwargs):\r\n    print(\"inside wrapper\")\r\n    return wrapped(*args, **kwargs)\r\n\r\n\r\nwrapt.wrap_function_wrapper(Class, \"function\", wrapper)\r\n```\r\n\r\nCalling the function on an instance fails after wrapping:\r\n\r\n```\r\n>>> c = Class()\r\n>>> Class.function(\"class\")\r\ninside wrapper\r\n'class'\r\n>>> c.function(\"instance\")\r\ninside wrapper\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"<stdin>\", line 3, in wrapper\r\nTypeError: function() takes 1 positional argument but 2 were given\r\n```\r\n\r\nIf I instead wrap the function on the instance, the wrapper works as expected on the instance.\r\n\r\nLooking at [wrappers.py](https://github.com/GrahamDumpleton/wrapt/blob/develop/src/wrapt/wrappers.py#L742), the helper function `resolve_path` uses `getattr` to access the class attribute. \r\n\r\nIf instead I use `inspect.getattr_static` to access the class attribute and then apply the wrapper as a patch, calling function on the instance does not raise an exception:\r\n\r\n```python\r\nfrom inspect import getattr_static\r\n\r\n\r\noriginal = getattr_static(Class, \"function\")\r\nwrapped = wrapt.FunctionWrapper(original, wrapper)\r\nsetattr(Class, \"function\", wrapped)\r\n```\r\n\r\nIs this a correct workaround for wrapping staticmethods?\r\n\r\nI can open a PR with changes if in fact the actual behavior I am finding is not what is expected.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/149", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/149/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/149/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/149", "id": 564496823, "node_id": "MDU6SXNzdWU1NjQ0OTY4MjM=", "number": 149, "title": "Doc: universal decos, would `inspect.ismethod` be better?", "user": {"login": "dimaqq", "id": 662249, "node_id": "MDQ6VXNlcjY2MjI0OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/662249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimaqq", "html_url": "https://github.com/dimaqq", "followers_url": "https://api.github.com/users/dimaqq/followers", "following_url": "https://api.github.com/users/dimaqq/following{/other_user}", "gists_url": "https://api.github.com/users/dimaqq/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimaqq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimaqq/subscriptions", "organizations_url": "https://api.github.com/users/dimaqq/orgs", "repos_url": "https://api.github.com/users/dimaqq/repos", "events_url": "https://api.github.com/users/dimaqq/events{/privacy}", "received_events_url": "https://api.github.com/users/dimaqq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-13T07:40:40Z", "updated_at": "2020-02-13T08:10:57Z", "closed_at": "2020-02-13T08:10:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "> inspect.ismethod(object)\r\n> Return True if the object is a bound method written in Python.\r\n\r\nWould this be cleaner test than `instance is not None and not isclass(wrapped)`?\r\n\r\nOr am I missing a corner case?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/148", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/148/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/148/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/148", "id": 564393635, "node_id": "MDU6SXNzdWU1NjQzOTM2MzU=", "number": 148, "title": "I'm having trouble changing the signature of unbound methods.", "user": {"login": "benfogelson", "id": 52926819, "node_id": "MDQ6VXNlcjUyOTI2ODE5", "avatar_url": "https://avatars1.githubusercontent.com/u/52926819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benfogelson", "html_url": "https://github.com/benfogelson", "followers_url": "https://api.github.com/users/benfogelson/followers", "following_url": "https://api.github.com/users/benfogelson/following{/other_user}", "gists_url": "https://api.github.com/users/benfogelson/gists{/gist_id}", "starred_url": "https://api.github.com/users/benfogelson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benfogelson/subscriptions", "organizations_url": "https://api.github.com/users/benfogelson/orgs", "repos_url": "https://api.github.com/users/benfogelson/repos", "events_url": "https://api.github.com/users/benfogelson/events{/privacy}", "received_events_url": "https://api.github.com/users/benfogelson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-13T02:10:09Z", "updated_at": "2020-02-16T23:46:31Z", "closed_at": "2020-02-16T23:46:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Below is a MWE of my attempt to change the signature of MyClass.func from (self, a, b, c) to (self, x, y, z). As you can see from the outputs, the change_sig decorator works on functions and also works on the bound method MyClass().func, but fails on the unbound method. Is there some sort of magic going on behind the scenes when I assign a callable attribute to a class that keeps this from working?\r\n\r\nMWE:\r\n```python\r\nimport wrapt\r\nimport inspect\r\n\r\ndef change_sig(func):\r\n    adapter = '(self, x, y, z)'\r\n    @wrapt.decorator(adapter=adapter)\r\n    def wrapper(wrapped, instance, args, kwargs):\r\n        pass\r\n    wrapped_func = wrapper(func)\r\n    return wrapped_func\r\n\r\n@change_sig\r\ndef func(self, a, b, c):\r\n    pass\r\n\r\nclass MyClass:\r\n    @change_sig\r\n    def func(self, a, b, c):\r\n        pass\r\n\r\nprint('inspect.signature(func):', inspect.signature(func))\r\nprint('inspect.signature(MyClass.func):', inspect.signature(MyClass.func))\r\nprint('inspect.signature(MyClass().func):', inspect.signature(MyClass().func))\r\n\r\nprint('inspect.signature(change_sig(MyClass.func)):', inspect.signature(change_sig(MyClass.func)))\r\nMyClass.wrapped_func = change_sig(MyClass.func)\r\nprint('inspect.signature(MyClass.wrapped_func):', inspect.signature(MyClass.wrapped_func))\r\n```\r\n\r\nOutputs:\r\n```\r\ninspect.signature(func): (self, x, y, z)\r\ninspect.signature(MyClass.func): (self, a, b, c)\r\ninspect.signature(MyClass().func): (x, y, z)\r\ninspect.signature(change_sig(MyClass.func)): (self, x, y, z)\r\ninspect.signature(MyClass.wrapped_func): (self, a, b, c)\r\n```\r\n\r\nI also posted about this on stackoverflow (https://stackoverflow.com/questions/60199457/how-can-i-use-wrapt-decorator-adapters-to-change-the-signature-of-unbound-method) but figured it would be good to ask here as well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/147", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/147/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/147/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/147", "id": 562302222, "node_id": "MDU6SXNzdWU1NjIzMDIyMjI=", "number": 147, "title": "NameError in signature-changing decorator with non-builtins", "user": {"login": "tlambert03", "id": 1609449, "node_id": "MDQ6VXNlcjE2MDk0NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1609449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlambert03", "html_url": "https://github.com/tlambert03", "followers_url": "https://api.github.com/users/tlambert03/followers", "following_url": "https://api.github.com/users/tlambert03/following{/other_user}", "gists_url": "https://api.github.com/users/tlambert03/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlambert03/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlambert03/subscriptions", "organizations_url": "https://api.github.com/users/tlambert03/orgs", "repos_url": "https://api.github.com/users/tlambert03/repos", "events_url": "https://api.github.com/users/tlambert03/events{/privacy}", "received_events_url": "https://api.github.com/users/tlambert03/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-10T03:26:10Z", "updated_at": "2020-02-10T15:01:56Z", "closed_at": "2020-02-10T15:01:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to create an adaptor decorator that will add/modify the annotation of an argument following the general pattern [in the docs](https://wrapt.readthedocs.io/en/latest/decorators.html#signature-changing-decorators).  However, if I try to change the annotation to anything but a builtin class, I get a `NameError` saying the module is not defined.  Here's a toy example using `requests.Response`:\r\n\r\n```python\r\nimport inspect\r\nimport wrapt\r\nimport requests\r\n\r\ndef argspec_factory(wrapped):\r\n    args, *rest, annotations = inspect.getfullargspec(wrapped)\r\n    # change annotation of first argument\r\n    annotations[args[0]] = requests.Response\r\n    return inspect.FullArgSpec(args, *rest, annotations)\r\n\r\n@wrapt.decorator(adapter=wrapt.adapter_factory(argspec_factory))\r\ndef my_adapter(wrapped, instance, args, kwargs):\r\n    return wrapped(*args, **kwargs)\r\n\r\n@my_adapter\r\ndef test(arg):\r\n    pass\r\n```\r\n\r\nraises: `NameError: name 'requests' is not defined`\r\n\r\n<details>\r\n<summary><b>Traceback</b></summary>\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"examples/test.py\", line 18, in <module>\r\n    def test(arg):\r\n  File \"...python3.8/site-packages/wrapt/decorators.py\", line 392, in _wrapper\r\n    return _build(target_wrapped, target_wrapper, _enabled, adapter)\r\n  File \"...python3.8/site-packages/wrapt/decorators.py\", line 209, in _build\r\n    exec_('def adapter{}: pass'.format(adapter), ns, ns)\r\n  File \"<string>\", line 1, in <module>\r\nNameError: name 'requests' is not defined\r\n```\r\n\r\n</details>\r\n\r\nlooking through the source code, it seems as if this is by design, as an empty namespace is handed to the `exec_` function ... presumably for security reasons.\r\nhttps://github.com/GrahamDumpleton/wrapt/blob/0c98567e78837bb39b2a498c13a0eb1403266bee/src/wrapt/decorators.py#L206-L209\r\n\r\ndo you have a suggestion for how I could accomplish what I'm trying to do?  in the example above, I would like to have the wrapped function show this signature:\r\n```python\r\ndef test(arg: requests.Response): ...\r\n```\r\nthanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/145", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/145/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/145/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/145", "id": 545560621, "node_id": "MDU6SXNzdWU1NDU1NjA2MjE=", "number": 145, "title": "issue with instance context within the synchronized decorator", "user": {"login": "daniel-o-jones", "id": 52241655, "node_id": "MDQ6VXNlcjUyMjQxNjU1", "avatar_url": "https://avatars3.githubusercontent.com/u/52241655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniel-o-jones", "html_url": "https://github.com/daniel-o-jones", "followers_url": "https://api.github.com/users/daniel-o-jones/followers", "following_url": "https://api.github.com/users/daniel-o-jones/following{/other_user}", "gists_url": "https://api.github.com/users/daniel-o-jones/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniel-o-jones/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniel-o-jones/subscriptions", "organizations_url": "https://api.github.com/users/daniel-o-jones/orgs", "repos_url": "https://api.github.com/users/daniel-o-jones/repos", "events_url": "https://api.github.com/users/daniel-o-jones/events{/privacy}", "received_events_url": "https://api.github.com/users/daniel-o-jones/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-06T06:17:07Z", "updated_at": "2020-01-07T00:22:25Z", "closed_at": "2020-01-06T06:30:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've run into an issue using wrapt's `synchronized` decorator\r\n\r\nPrevious behaviour and comment in the `_synchronized_wrapper` function implies the `instance` has to be `None` before `wrapped` is used as the context in the `_synchronized_lock` function. But the way it's working now means that a Falsey (but not None) instance isn't getting used as the `context`\r\n\r\nChanging line [499](https://github.com/GrahamDumpleton/wrapt/blob/develop/src/wrapt/decorators.py#L499) to `with _synchronized_lock(instance if instance is not None else wrapped):` is a one line solution of the problem that works for our use case", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/142", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/142/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/142/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/142", "id": 541060018, "node_id": "MDU6SXNzdWU1NDEwNjAwMTg=", "number": 142, "title": "wrapt and autospec'ed mocks not working on member functions", "user": {"login": "SeppMe", "id": 41479299, "node_id": "MDQ6VXNlcjQxNDc5Mjk5", "avatar_url": "https://avatars3.githubusercontent.com/u/41479299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SeppMe", "html_url": "https://github.com/SeppMe", "followers_url": "https://api.github.com/users/SeppMe/followers", "following_url": "https://api.github.com/users/SeppMe/following{/other_user}", "gists_url": "https://api.github.com/users/SeppMe/gists{/gist_id}", "starred_url": "https://api.github.com/users/SeppMe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SeppMe/subscriptions", "organizations_url": "https://api.github.com/users/SeppMe/orgs", "repos_url": "https://api.github.com/users/SeppMe/repos", "events_url": "https://api.github.com/users/SeppMe/events{/privacy}", "received_events_url": "https://api.github.com/users/SeppMe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-20T15:46:52Z", "updated_at": "2020-03-09T02:38:57Z", "closed_at": "2020-03-09T02:38:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given this minimal example for a decorated instance method:\r\n``` Python\r\nimport wrapt\r\n\r\n@wrapt.decorator\r\ndef pass_through(wrapped, instance, args, kwargs):\r\n    return wrapped(*args, **kwargs)\r\n\r\n\r\nclass Foo:\r\n    @pass_through\r\n    def bar(self):\r\n        pass\r\n```\r\nThen the following test using Python's unittest.mock no longer works:\r\n``` Python\r\nfrom unittest import mock\r\nmock_foo = mock.create_autospec(Foo, instance=True)\r\nmock_foo.bar()\r\n```\r\nnor does\r\n``` Python\r\nwith mock.patch(target='__main__.Foo', autospec=True) as mock_foo:\r\n    f = mock_foo()\r\n    f.bar()\r\n```\r\nBoth fail with `TypeError: missing a required argument: 'self'`.\r\n\r\nWhen saying \"no longer\" I mean that I installed Python 3.8.1 today and the code above fails in a fresh, clean virtualenv with nothing but wrapt 1.11.2 installed. I do have a very similar environment on another machine that is on Python 3.8.0 and there the code works. Also, the code worked with Python 3.7.0 on the machine where now it fails. Unfortunately, the two machines run on different OS (3.8.1 on Windows, 3.8.0 on Linux) and I am not at liberty to try every possible combination of Python interpreter and OS. Thus I cannot say with absolute certainty whether this issue only crops up on Windows or if this a general problem with Python 3.8.1. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/141", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/141/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/141/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/141", "id": 532240087, "node_id": "MDU6SXNzdWU1MzIyNDAwODc=", "number": 141, "title": "Pipenv on windows failing with error installing wrapt (python 3.6.8)", "user": {"login": "jcwork", "id": 23555414, "node_id": "MDQ6VXNlcjIzNTU1NDE0", "avatar_url": "https://avatars3.githubusercontent.com/u/23555414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcwork", "html_url": "https://github.com/jcwork", "followers_url": "https://api.github.com/users/jcwork/followers", "following_url": "https://api.github.com/users/jcwork/following{/other_user}", "gists_url": "https://api.github.com/users/jcwork/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcwork/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcwork/subscriptions", "organizations_url": "https://api.github.com/users/jcwork/orgs", "repos_url": "https://api.github.com/users/jcwork/repos", "events_url": "https://api.github.com/users/jcwork/events{/privacy}", "received_events_url": "https://api.github.com/users/jcwork/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-03T20:18:30Z", "updated_at": "2019-12-05T00:23:27Z", "closed_at": "2019-12-05T00:23:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been trying to install wrapt on a windows machine for a few days but I keep on getting the following error, even though I'm on the latest pip for python 3.6 (pip 19.3.1). \r\n\r\nDo you know what the cause could be?\r\n\r\nThis is a link to the complete output in case you can find something useful to try and clarify what's happening? https://pastebin.com/raw/8gdUUZN8\r\n\r\nThank you!!\r\n\r\n\r\n> `D:\\git_project>python --version\r\n> Python 3.6.8\r\n> \r\n> D:\\git_project>pip --version\r\n> pip 19.3.1 from c:\\python36\\lib\\site-packages\\pip (python 3.6)\r\n> \r\n> D:\\git_project>pipenv --version\r\n> pipenv, version 2018.11.27.dev0\r\n> \r\n> D:\\git_project>python -m pipenv install\r\n> Creating a virtualenv for this project\u2026\r\n> Pipfile: D:\\git_project\\Pipfile\r\n> Using C:/Python36/python.exe (3.6.8) to create virtualenv\u2026\r\n> [=== ] Creating virtual environment...Already using interpreter C:\\Python36\\python.exe\r\n> Using base prefix 'C:\\\\Python36'\r\n> New python executable in C:\\Users\\admin\\.virtualenvs\\git_project-UBvgpj5x\\Scripts\\python.exe\r\n> Installing setuptools, pip, wheel...\r\n> done.\r\n> Running virtualenv with interpreter C:/Python36/python.exe\r\n> \r\n> Successfully created virtual environment!\r\n> Virtualenv location: C:\\Users\\admin\\.virtualenvs\\git_project-UBvgpj5x\r\n> Installing dependencies from Pipfile.lock (1e32a5)\u2026\r\n> An error occurred while installing wrapt==1.11.2 --hash=sha256:565a021fd19419476b9362b05eeaa094178de64f8361e44468f9e9d7843901e1! Will try again.\r\n>   ================================ 84/84 - 00:02:14\r\n> Installing initially failed dependencies\u2026\r\n> [InstallError]:   File \"C:\\Python36\\lib\\site-packages\\pipenv\\cli\\command.py\", line 251, in install\r\n> [InstallError]:       site_packages=state.site_packages\r\n> ...\r\n> ...\r\n> [pipenv.exceptions.InstallError]:       File \"c:\\users\\admin\\.virtualenvs\\git_project-ubvgpj5x\\lib\\genericpath.py\", line 30, in isfile\r\n> [pipenv.exceptions.InstallError]:         st = os.stat(path)\r\n> [pipenv.exceptions.InstallError]:     TypeError: stat: path should be string, bytes, os.PathLike or integer, not NoneType\r\n> [pipenv.exceptions.InstallError]:     ----------------------------------------\r\n> [pipenv.exceptions.InstallError]: ERROR: Command errored out with exit status 1:`\r\n> ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/139", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/139/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/139/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/139", "id": 493839167, "node_id": "MDU6SXNzdWU0OTM4MzkxNjc=", "number": 139, "title": "pip install fails", "user": {"login": "Syrrokz", "id": 6588322, "node_id": "MDQ6VXNlcjY1ODgzMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6588322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Syrrokz", "html_url": "https://github.com/Syrrokz", "followers_url": "https://api.github.com/users/Syrrokz/followers", "following_url": "https://api.github.com/users/Syrrokz/following{/other_user}", "gists_url": "https://api.github.com/users/Syrrokz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Syrrokz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Syrrokz/subscriptions", "organizations_url": "https://api.github.com/users/Syrrokz/orgs", "repos_url": "https://api.github.com/users/Syrrokz/repos", "events_url": "https://api.github.com/users/Syrrokz/events{/privacy}", "received_events_url": "https://api.github.com/users/Syrrokz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-16T04:20:02Z", "updated_at": "2019-09-25T06:34:27Z", "closed_at": "2019-09-25T06:34:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "After upgradig to windows 10, i tried to install tensorflow over pip and it failed on installing wrapt.\r\n\r\n`pip installi wrapt`\r\n\r\nbrings up the same errors.\r\n\r\n```\r\nraise ValueError(\"Unknown MS Compiler version %s \" % msc_ver)\r\n    ValueError: Unknown MS Compiler version 1914\r\n```\r\n\r\nheres the full error-log:\r\nhttps://pastebin.com/RDN8mrL6\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/136", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/136/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/136/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/136", "id": 467694938, "node_id": "MDU6SXNzdWU0Njc2OTQ5Mzg=", "number": 136, "title": "Windows, py3.7 installation fails", "user": {"login": "antnieszka", "id": 5757700, "node_id": "MDQ6VXNlcjU3NTc3MDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5757700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antnieszka", "html_url": "https://github.com/antnieszka", "followers_url": "https://api.github.com/users/antnieszka/followers", "following_url": "https://api.github.com/users/antnieszka/following{/other_user}", "gists_url": "https://api.github.com/users/antnieszka/gists{/gist_id}", "starred_url": "https://api.github.com/users/antnieszka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antnieszka/subscriptions", "organizations_url": "https://api.github.com/users/antnieszka/orgs", "repos_url": "https://api.github.com/users/antnieszka/repos", "events_url": "https://api.github.com/users/antnieszka/events{/privacy}", "received_events_url": "https://api.github.com/users/antnieszka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-13T09:07:49Z", "updated_at": "2019-07-13T21:53:40Z", "closed_at": "2019-07-13T21:53:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI was trying to setup a project and got this error:\r\n\r\n```\r\n(venv) X:\\PycharmProjects\\project>pip install wrapt\r\nCollecting wrapt\r\n  Using cached https://files.pythonhosted.org/packages/23/84/323c2415280bc4fc880ac5050dddfb3c8062c2552b34c2e512eb4aa68f79/wrapt-1.11.2.tar.gz\r\nInstalling collected packages: wrapt\r\n  Running setup.py install for wrapt ... error\r\n    ERROR: Complete output from command 'x:\\pycharmprojects\\project\\venv\\scripts\\python.exe' -u -c 'import setuptools, tokenize;__file__='\"'\"'C:\\\\Users\\\\<user>\\\\AppData\\\\Local\\\\Temp\\\\pip-install-hf84m2f0\\\\wrapt\\\\setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"'\r\n, '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' install --record 'C:\\Users\\<user>\\AppData\\Local\\Temp\\pip-record-hvx6qjy1\\install-record.txt' --single-version-externally-managed --compile --install-headers 'x:\\pycharmprojects\\project\\venv\\include\\site\\python3.7\\wrapt':\r\n    ERROR: running install\r\n    running build\r\n    running build_py\r\n    creating build\r\n    creating build\\lib.win-amd64-3.7\r\n    creating build\\lib.win-amd64-3.7\\wrapt\r\n    copying src\\wrapt\\decorators.py -> build\\lib.win-amd64-3.7\\wrapt\r\n    copying src\\wrapt\\importer.py -> build\\lib.win-amd64-3.7\\wrapt\r\n    copying src\\wrapt\\wrappers.py -> build\\lib.win-amd64-3.7\\wrapt\r\n    copying src\\wrapt\\__init__.py -> build\\lib.win-amd64-3.7\\wrapt\r\n    running build_ext\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"C:\\Users\\<user>\\AppData\\Local\\Temp\\pip-install-hf84m2f0\\wrapt\\setup.py\", line 101, in <module>\r\n        run_setup(with_extensions=True)\r\n      File \"C:\\Users\\<user>\\AppData\\Local\\Temp\\pip-install-hf84m2f0\\wrapt\\setup.py\", line 71, in run_setup\r\n        setup(**setup_kwargs_tmp)\r\n      File \"C:\\Python37\\lib\\distutils\\core.py\", line 148, in setup\r\n        dist.run_commands()\r\n      File \"C:\\Python37\\lib\\distutils\\dist.py\", line 966, in run_commands\r\n        self.run_command(cmd)\r\n      File \"C:\\Python37\\lib\\distutils\\dist.py\", line 985, in run_command\r\n        cmd_obj.run()\r\n      File \"x:\\pycharmprojects\\project\\venv\\lib\\site-packages\\setuptools\\command\\install.py\", line 61, in run\r\n        return orig.install.run(self)\r\n      File \"C:\\Python37\\lib\\distutils\\command\\install.py\", line 545, in run\r\n        self.run_command('build')\r\n      File \"C:\\Python37\\lib\\distutils\\cmd.py\", line 313, in run_command\r\n        self.distribution.run_command(command)\r\n      File \"C:\\Python37\\lib\\distutils\\dist.py\", line 985, in run_command\r\n        cmd_obj.run()\r\n      File \"C:\\Python37\\lib\\distutils\\command\\build.py\", line 135, in run\r\n        self.run_command(cmd_name)\r\n      File \"C:\\Python37\\lib\\distutils\\cmd.py\", line 313, in run_command\r\n        self.distribution.run_command(command)\r\n      File \"C:\\Python37\\lib\\distutils\\dist.py\", line 985, in run_command\r\n        cmd_obj.run()\r\n      File \"C:\\Users\\<user>\\AppData\\Local\\Temp\\pip-install-hf84m2f0\\wrapt\\setup.py\", line 25, in run\r\n        build_ext.run(self)\r\n      File \"C:\\Python37\\lib\\distutils\\command\\build_ext.py\", line 308, in run\r\n        force=self.force)\r\n      File \"C:\\Python37\\lib\\distutils\\ccompiler.py\", line 1031, in new_compiler\r\n        return klass(None, dry_run, force)\r\n      File \"C:\\Python37\\lib\\distutils\\cygwinccompiler.py\", line 282, in __init__\r\n        CygwinCCompiler.__init__ (self, verbose, dry_run, force)\r\n      File \"C:\\Python37\\lib\\distutils\\cygwinccompiler.py\", line 126, in __init__\r\n        if self.ld_version >= \"2.10.90\":\r\n    TypeError: '>=' not supported between instances of 'NoneType' and 'str'\r\n    ----------------------------------------\r\n```\r\n\r\nAdditional info:\r\n```\r\nPython 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32\r\n\r\npip 19.1.1 from x:\\pycharmprojects\\project\\venv\\lib\\site-packages\\pip (python 3.7)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/135", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/135/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/135/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/135", "id": 455543292, "node_id": "MDU6SXNzdWU0NTU1NDMyOTI=", "number": 135, "title": "distutils ValueError not caught when MS compiler missing", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-06-13T05:36:49Z", "updated_at": "2019-06-18T05:24:10Z", "closed_at": "2019-06-18T05:24:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "On the AppVeyor CI default Python 3.4 install , the default setuptools is 18.2\r\n\r\nIt fails if the C build is unsuccessful with a `ValueError` from distutils which isnt caught by older setuptools (at least 18.2) or setup.py\r\n\r\n```console\r\nComplete output from command C:\\python\\python.exe -u -c \"import setuptools, tokenize;__file__='C:\\\\Users\\\\appveyor\\\\AppData\\\\Local\\\\Temp\\\\pip-build-3a7c7uih\\\\wrapt\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record C:\\Users\\appveyor\\AppData\\Local\\Temp\\pip-9q54jrua-record\\install-record.txt --single-version-externally-managed --compile:\r\n    running install\r\n    running build\r\n    running build_py\r\n    creating build\r\n    creating build\\lib.win-amd64-3.4\r\n    creating build\\lib.win-amd64-3.4\\wrapt\r\n    copying src\\wrapt\\decorators.py -> build\\lib.win-amd64-3.4\\wrapt\r\n    copying src\\wrapt\\importer.py -> build\\lib.win-amd64-3.4\\wrapt\r\n    copying src\\wrapt\\wrappers.py -> build\\lib.win-amd64-3.4\\wrapt\r\n    copying src\\wrapt\\__init__.py -> build\\lib.win-amd64-3.4\\wrapt\r\n    running build_ext\r\n    building 'wrapt._wrappers' extension\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"C:\\Users\\appveyor\\AppData\\Local\\Temp\\pip-build-3a7c7uih\\wrapt\\setup.py\", line 101, in <module>\r\n        run_setup(with_extensions=True)\r\n      File \"C:\\Users\\appveyor\\AppData\\Local\\Temp\\pip-build-3a7c7uih\\wrapt\\setup.py\", line 71, in run_setup\r\n        setup(**setup_kwargs_tmp)\r\n      File \"C:\\python\\lib\\distutils\\core.py\", line 148, in setup\r\n        dist.run_commands()\r\n      File \"C:\\python\\lib\\distutils\\dist.py\", line 955, in run_commands\r\n        self.run_command(cmd)\r\n      File \"C:\\python\\lib\\distutils\\dist.py\", line 974, in run_command\r\n        cmd_obj.run()\r\n      File \"C:\\python\\lib\\site-packages\\setuptools\\command\\install.py\", line 61, in run\r\n        return orig.install.run(self)\r\n      File \"C:\\python\\lib\\distutils\\command\\install.py\", line 539, in run\r\n        self.run_command('build')\r\n      File \"C:\\python\\lib\\distutils\\cmd.py\", line 313, in run_command\r\n        self.distribution.run_command(command)\r\n      File \"C:\\python\\lib\\distutils\\dist.py\", line 974, in run_command\r\n        cmd_obj.run()\r\n      File \"C:\\python\\lib\\distutils\\command\\build.py\", line 126, in run\r\n        self.run_command(cmd_name)\r\n      File \"C:\\python\\lib\\distutils\\cmd.py\", line 313, in run_command\r\n        self.distribution.run_command(command)\r\n      File \"C:\\python\\lib\\distutils\\dist.py\", line 974, in run_command\r\n        cmd_obj.run()\r\n      File \"C:\\Users\\appveyor\\AppData\\Local\\Temp\\pip-build-3a7c7uih\\wrapt\\setup.py\", line 25, in run\r\n        build_ext.run(self)\r\n      File \"C:\\python\\lib\\distutils\\command\\build_ext.py\", line 339, in run\r\n        self.build_extensions()\r\n      File \"C:\\python\\lib\\distutils\\command\\build_ext.py\", line 448, in build_extensions\r\n        self.build_extension(ext)\r\n      File \"C:\\Users\\appveyor\\AppData\\Local\\Temp\\pip-build-3a7c7uih\\wrapt\\setup.py\", line 31, in build_extension\r\n        build_ext.build_extension(self, ext)\r\n      File \"C:\\python\\lib\\distutils\\command\\build_ext.py\", line 503, in build_extension\r\n        depends=ext.depends)\r\n      File \"C:\\python\\lib\\distutils\\msvc9compiler.py\", line 460, in compile\r\n        self.initialize()\r\n      File \"C:\\python\\lib\\distutils\\msvc9compiler.py\", line 371, in initialize\r\n        vc_env = query_vcvarsall(VERSION, plat_spec)\r\n      File \"C:\\python\\lib\\site-packages\\setuptools\\msvc9_support.py\", line 52, in query_vcvarsall\r\n        return unpatched['query_vcvarsall'](version, *args, **kwargs)\r\n      File \"C:\\python\\lib\\distutils\\msvc9compiler.py\", line 287, in query_vcvarsall\r\n        raise ValueError(str(list(result.keys())))\r\n    ValueError: ['path']\r\n    \r\n    ----------------------------------------\r\nCommand \"C:\\python\\python.exe -u -c \"import setuptools, tokenize;__file__='C:\\\\Users\\\\appveyor\\\\AppData\\\\Local\\\\Temp\\\\pip-build-3a7c7uih\\\\wrapt\\\\setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" install --record C:\\Users\\appveyor\\AppData\\Local\\Temp\\pip-9q54jrua-record\\install-record.txt --single-version-externally-managed --compile\" failed with error code 1 in C:\\Users\\appveyor\\AppData\\Local\\Temp\\pip-build-3a7c7uih\\wrapt\\\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/132", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/132/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/132/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/132", "id": 437806692, "node_id": "MDU6SXNzdWU0Mzc4MDY2OTI=", "number": 132, "title": "Attribute Error using  `__setattr__` on Windows", "user": {"login": "cdgriffith", "id": 3275435, "node_id": "MDQ6VXNlcjMyNzU0MzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3275435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdgriffith", "html_url": "https://github.com/cdgriffith", "followers_url": "https://api.github.com/users/cdgriffith/followers", "following_url": "https://api.github.com/users/cdgriffith/following{/other_user}", "gists_url": "https://api.github.com/users/cdgriffith/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdgriffith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdgriffith/subscriptions", "organizations_url": "https://api.github.com/users/cdgriffith/orgs", "repos_url": "https://api.github.com/users/cdgriffith/repos", "events_url": "https://api.github.com/users/cdgriffith/events{/privacy}", "received_events_url": "https://api.github.com/users/cdgriffith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-04-26T19:05:49Z", "updated_at": "2019-04-27T03:58:34Z", "closed_at": "2019-04-27T03:53:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "When running the following code, it works fine on Python 3.6 on Ubuntu 18.02 but not Windows 10. \r\n\r\n```\r\n>>> import wrapt\r\n>>> a = wrapt.ObjectProxy(None)\r\n>>> a.__setattr__('__dict__', {})\r\n```\r\n\r\nIt errors when trying to set the attribute: \r\n\r\n```\r\nelif hasattr(type(self), name):\r\n>           object.__setattr__(self, name, value)\r\nE           AttributeError: can't set attribute\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/128", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/128/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/128/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/128", "id": 399216801, "node_id": "MDU6SXNzdWUzOTkyMTY4MDE=", "number": 128, "title": "Memory leak after upgrading to 1.11.0", "user": {"login": "NicolasLM", "id": 7612656, "node_id": "MDQ6VXNlcjc2MTI2NTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7612656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NicolasLM", "html_url": "https://github.com/NicolasLM", "followers_url": "https://api.github.com/users/NicolasLM/followers", "following_url": "https://api.github.com/users/NicolasLM/following{/other_user}", "gists_url": "https://api.github.com/users/NicolasLM/gists{/gist_id}", "starred_url": "https://api.github.com/users/NicolasLM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NicolasLM/subscriptions", "organizations_url": "https://api.github.com/users/NicolasLM/orgs", "repos_url": "https://api.github.com/users/NicolasLM/repos", "events_url": "https://api.github.com/users/NicolasLM/events{/privacy}", "received_events_url": "https://api.github.com/users/NicolasLM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-01-15T07:20:24Z", "updated_at": "2019-01-19T06:47:06Z", "closed_at": "2019-01-17T20:15:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "After upgrading from `wrapt==1.10.11` to `wrapt==1.11.0` I noticed that the memory consumption of my application started increasing continuously:\r\n\r\n![memory-leak](https://user-images.githubusercontent.com/7612656/51164598-bf4df480-189d-11e9-84c6-f0d63f124245.png)\r\n\r\nEventually the application ran out of memory and got killed. Rolling back to `1.10.11` fixed the memory issue.\r\n\r\nNote that I am not using wrapt directly, but through Datadog ddtrace.\r\n\r\n- Python 3.7.2\r\n- Linux 4.9.0-8-amd64", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/127", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/127/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/127/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/127", "id": 367493159, "node_id": "MDU6SXNzdWUzNjc0OTMxNTk=", "number": 127, "title": "ObjectProxy.__annotations__ typo references \"self.__wrapped__.__anotations__\"", "user": {"login": "austinrogers", "id": 20363564, "node_id": "MDQ6VXNlcjIwMzYzNTY0", "avatar_url": "https://avatars3.githubusercontent.com/u/20363564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austinrogers", "html_url": "https://github.com/austinrogers", "followers_url": "https://api.github.com/users/austinrogers/followers", "following_url": "https://api.github.com/users/austinrogers/following{/other_user}", "gists_url": "https://api.github.com/users/austinrogers/gists{/gist_id}", "starred_url": "https://api.github.com/users/austinrogers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austinrogers/subscriptions", "organizations_url": "https://api.github.com/users/austinrogers/orgs", "repos_url": "https://api.github.com/users/austinrogers/repos", "events_url": "https://api.github.com/users/austinrogers/events{/privacy}", "received_events_url": "https://api.github.com/users/austinrogers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-06T20:29:37Z", "updated_at": "2020-07-12T23:47:23Z", "closed_at": "2020-07-12T23:47:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "**In wrapt.wrappers.ObjectProxy:**\r\n\r\n```\r\n@property\r\ndef __annotations__(self):\r\n    return self.__wrapped__.__anotations__\r\n```\r\n\r\n**Needs to be:**\r\n\r\n```\r\n@property\r\ndef __annotations__(self):\r\n    return self.__wrapped__.__annotations__\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/125", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/125/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/125/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/125", "id": 348514847, "node_id": "MDU6SXNzdWUzNDg1MTQ4NDc=", "number": 125, "title": "__name__ and __module__ doesn't work on wrapped function", "user": {"login": "oscdc", "id": 42190490, "node_id": "MDQ6VXNlcjQyMTkwNDkw", "avatar_url": "https://avatars0.githubusercontent.com/u/42190490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oscdc", "html_url": "https://github.com/oscdc", "followers_url": "https://api.github.com/users/oscdc/followers", "following_url": "https://api.github.com/users/oscdc/following{/other_user}", "gists_url": "https://api.github.com/users/oscdc/gists{/gist_id}", "starred_url": "https://api.github.com/users/oscdc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oscdc/subscriptions", "organizations_url": "https://api.github.com/users/oscdc/orgs", "repos_url": "https://api.github.com/users/oscdc/repos", "events_url": "https://api.github.com/users/oscdc/events{/privacy}", "received_events_url": "https://api.github.com/users/oscdc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-08-07T22:52:51Z", "updated_at": "2019-07-15T01:42:16Z", "closed_at": "2019-07-15T01:42:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "If we take a decorated member function and try to call it on an object, the wrapped member function is missing its `__name__`, `__module__`, etc. Should those attributes be available on `wrapped`?\r\n\r\n```python\r\nimport wrapt\r\n\r\n@wrapt.decorator\r\ndef my_decorator(wrapped, instance, args, kwargs):\r\n    print wrapped.__name__, wrapped.__module__\r\n    return wrapped(*args, **kwargs)\r\n\r\nclass MyClass(object):\r\n    @my_decorator\r\n    def my_func(self):\r\n        pass\r\n\r\no = MyClass()\r\no.my_func()  # works\r\n\r\nmethod = MyClass.my_func\r\nmethod(o)  # crashes with AttributeError: 'functools.partial' object has no attribute '__name__'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/123", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/123/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/123/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/123", "id": 344614029, "node_id": "MDU6SXNzdWUzNDQ2MTQwMjk=", "number": 123, "title": "metaclass conflict when decorating a base class", "user": {"login": "jlinoff", "id": 2991242, "node_id": "MDQ6VXNlcjI5OTEyNDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2991242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlinoff", "html_url": "https://github.com/jlinoff", "followers_url": "https://api.github.com/users/jlinoff/followers", "following_url": "https://api.github.com/users/jlinoff/following{/other_user}", "gists_url": "https://api.github.com/users/jlinoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlinoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlinoff/subscriptions", "organizations_url": "https://api.github.com/users/jlinoff/orgs", "repos_url": "https://api.github.com/users/jlinoff/repos", "events_url": "https://api.github.com/users/jlinoff/events{/privacy}", "received_events_url": "https://api.github.com/users/jlinoff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-25T21:28:38Z", "updated_at": "2018-07-26T14:11:32Z", "closed_at": "2018-07-26T14:11:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you, this is a fantastic package. The blogs are just great.\r\n\r\nThe following code generates a metaclass conflict error in python2.7. It appears that something is confusing the metaclass resolution in the decorator. Do you have any suggestions about how this can be fixed? Other than the removing the decorator. I am afraid that that option is not available to me.\r\n\r\n### Code\r\n```python\r\n#!/usr/bin/env python2.7\r\nimport abc\r\nimport wrapt\r\n\r\n@wrapt.decorator\r\ndef pass_through(wrapped, instance, args, kwargs):\r\n    return wrapped(*args, **kwargs)\r\n\r\n@pass_through\r\nclass Metric(object):\r\n    __metaclass__ = abc.ABCMeta\r\n\r\nclass ItemwiseMetric(Metric):\r\n    __metaclass__ = abc.ABCMeta\r\n```\r\n\r\n### Error Message\r\n```\r\n$ python2.7 /tmp/i1.py\r\nTraceback (most recent call last):\r\n  File \"/tmp/i1.py\", line 15, in <module>\r\n    class ItemwiseMetric(Metric):\r\n  File \"/opt/cr/lib/python2.7/abc.py\", line 87, in __new__\r\n    cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)\r\nTypeError: Error when calling the metaclass bases\r\n    metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/120", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/120/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/120/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/120", "id": 315327997, "node_id": "MDU6SXNzdWUzMTUzMjc5OTc=", "number": 120, "title": "Code completion on object proxies", "user": {"login": "albertogomcas", "id": 8244088, "node_id": "MDQ6VXNlcjgyNDQwODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8244088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertogomcas", "html_url": "https://github.com/albertogomcas", "followers_url": "https://api.github.com/users/albertogomcas/followers", "following_url": "https://api.github.com/users/albertogomcas/following{/other_user}", "gists_url": "https://api.github.com/users/albertogomcas/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertogomcas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertogomcas/subscriptions", "organizations_url": "https://api.github.com/users/albertogomcas/orgs", "repos_url": "https://api.github.com/users/albertogomcas/repos", "events_url": "https://api.github.com/users/albertogomcas/events{/privacy}", "received_events_url": "https://api.github.com/users/albertogomcas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-18T04:34:54Z", "updated_at": "2018-04-18T11:39:49Z", "closed_at": "2018-04-18T11:39:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using wrapt.ObjectProxy to wrap some objects. The behavior is all fine, but I have noticed that, if I define additional methods on the proxy, none of my IDEs suggest any of those via code completion / TAB completion, etc.\r\n\r\nI have tried this with Spyder-Ipython console and with Pycharm.\r\n\r\nIs this intentional? Am I just stepping on an anti-pattern for adding extra methods to a proxy?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/118", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/118/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/118/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/118", "id": 305991632, "node_id": "MDU6SXNzdWUzMDU5OTE2MzI=", "number": 118, "title": "FileNotFoundError while installing wrapt", "user": {"login": "zairah10", "id": 7130568, "node_id": "MDQ6VXNlcjcxMzA1Njg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7130568?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zairah10", "html_url": "https://github.com/zairah10", "followers_url": "https://api.github.com/users/zairah10/followers", "following_url": "https://api.github.com/users/zairah10/following{/other_user}", "gists_url": "https://api.github.com/users/zairah10/gists{/gist_id}", "starred_url": "https://api.github.com/users/zairah10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zairah10/subscriptions", "organizations_url": "https://api.github.com/users/zairah10/orgs", "repos_url": "https://api.github.com/users/zairah10/repos", "events_url": "https://api.github.com/users/zairah10/events{/privacy}", "received_events_url": "https://api.github.com/users/zairah10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-16T16:20:56Z", "updated_at": "2018-03-28T14:42:27Z", "closed_at": "2018-03-28T14:42:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I am trying to install wrapt on a remote Linux machine and get the following error. \r\n\r\n```Collecting wrapt\r\n12:13:56   Downloading wrapt-1.10.11.tar.gz\r\n12:13:56 Installing collected packages: wrapt\r\n12:13:56   Running setup.py install for wrapt: started\r\n12:13:57     Running setup.py install for wrapt: finished with status 'done'\r\n12:13:57 Exception:\r\n12:13:57 Traceback (most recent call last):\r\n12:13:57   File \"/usr/local/lib/python3.5/dist-packages/pip/basecommand.py\", line 215, in main\r\n12:13:57     status = self.run(options, args)\r\n12:13:57   File \"/usr/local/lib/python3.5/dist-packages/pip/commands/install.py\", line 342, in run\r\n12:13:57     prefix=options.prefix_path,\r\n12:13:57   File \"/usr/local/lib/python3.5/dist-packages/pip/req/req_set.py\", line 784, in install\r\n12:13:57     **kwargs\r\n12:13:57   File \"/usr/local/lib/python3.5/dist-packages/pip/req/req_install.py\", line 922, in install\r\n12:13:57     with open(inst_files_path, 'w') as f:\r\n12:13:57 FileNotFoundError: [Errno 2] No such file or directory: 'target/lib/python3.5/site-packages/wrapt-1.10.11.egg-info/installed-files.txt'```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/116", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/116/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/116/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/116", "id": 303808957, "node_id": "MDU6SXNzdWUzMDM4MDg5NTc=", "number": 116, "title": "Get decorated callable information before calling it", "user": {"login": "dgrigonis1", "id": 16177720, "node_id": "MDQ6VXNlcjE2MTc3NzIw", "avatar_url": "https://avatars3.githubusercontent.com/u/16177720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgrigonis1", "html_url": "https://github.com/dgrigonis1", "followers_url": "https://api.github.com/users/dgrigonis1/followers", "following_url": "https://api.github.com/users/dgrigonis1/following{/other_user}", "gists_url": "https://api.github.com/users/dgrigonis1/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgrigonis1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgrigonis1/subscriptions", "organizations_url": "https://api.github.com/users/dgrigonis1/orgs", "repos_url": "https://api.github.com/users/dgrigonis1/repos", "events_url": "https://api.github.com/users/dgrigonis1/events{/privacy}", "received_events_url": "https://api.github.com/users/dgrigonis1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-09T11:21:38Z", "updated_at": "2018-03-09T12:54:09Z", "closed_at": "2018-03-09T11:32:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Apologies. Issue is similar, but put in a completely different way...\r\n\r\nImagine I have a decorated function:\r\n\r\n```python\r\n@decor()\r\ndef func(*args):\r\n    pass\r\n\r\n\r\nclass decor(object):\r\n    INSTANCES_PATHS = list()\r\n\r\n    def __init__(self):\r\n        self.wrapped = None\r\n\r\n    def __call__(self, wrapped):\r\n        self.wrapped = wrapped\r\n        self.INSTANCE_PATHS.append(wrapped.__module__ + ',' + wrapped.__name__)\r\n        return self._decor\r\n\r\n    def _decor(self, args, kwargs):\r\n        return self.wrapped(*args, **kwargs)\r\n```\r\n\r\nSo how can I achieve this in wrapt? Essentially I need to obtain information about decorated function before calling it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/115", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/115/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/115/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/115", "id": 297828563, "node_id": "MDU6SXNzdWUyOTc4Mjg1NjM=", "number": 115, "title": "Callable wrapped object", "user": {"login": "uSpike", "id": 5686650, "node_id": "MDQ6VXNlcjU2ODY2NTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5686650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uSpike", "html_url": "https://github.com/uSpike", "followers_url": "https://api.github.com/users/uSpike/followers", "following_url": "https://api.github.com/users/uSpike/following{/other_user}", "gists_url": "https://api.github.com/users/uSpike/gists{/gist_id}", "starred_url": "https://api.github.com/users/uSpike/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uSpike/subscriptions", "organizations_url": "https://api.github.com/users/uSpike/orgs", "repos_url": "https://api.github.com/users/uSpike/repos", "events_url": "https://api.github.com/users/uSpike/events{/privacy}", "received_events_url": "https://api.github.com/users/uSpike/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-02-16T15:47:14Z", "updated_at": "2018-02-17T07:29:26Z", "closed_at": "2018-02-17T07:23:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI've found myself needing an `ObjectProxy` for a key in a dictionary.  A generic implementation would be an `ObjectProxy` where the `__wrapped__` attribute is a callable:\r\n\r\n```python\r\nd = dict(a=\"foo\")\r\n\r\nproxy = CallableObjectProxy(lambda: d['a'])\r\nprint(proxy) # \"foo\"\r\nd['a'] = 'bar'\r\nprint(proxy) # \"bar\"\r\n```\r\n\r\nIs this possible with `wrapt` already or is it something new?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/114", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/114/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/114/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/114", "id": 288062770, "node_id": "MDU6SXNzdWUyODgwNjI3NzA=", "number": 114, "title": "How to access function for registering?", "user": {"login": "legshort", "id": 4326608, "node_id": "MDQ6VXNlcjQzMjY2MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4326608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/legshort", "html_url": "https://github.com/legshort", "followers_url": "https://api.github.com/users/legshort/followers", "following_url": "https://api.github.com/users/legshort/following{/other_user}", "gists_url": "https://api.github.com/users/legshort/gists{/gist_id}", "starred_url": "https://api.github.com/users/legshort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/legshort/subscriptions", "organizations_url": "https://api.github.com/users/legshort/orgs", "repos_url": "https://api.github.com/users/legshort/repos", "events_url": "https://api.github.com/users/legshort/events{/privacy}", "received_events_url": "https://api.github.com/users/legshort/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-01-12T09:51:05Z", "updated_at": "2018-03-28T00:53:29Z", "closed_at": "2018-03-28T00:53:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi folks!\r\nI was trying to access function for registering but I couldn't find an elegant way.\r\nNormally, I can do it without wrapt package as below.\r\n\r\nI would be very helpful anyone could help me, cheers!\r\n\r\n```python\r\n# Plain Decorator\r\ndef my_decorator(desc):\r\n    def decorate(func):\r\n        registry.append(func) # <- I would like to access func at this point\r\n        @wraps(func)\r\n        def wrapper(*args, **kwargs):\r\n            return func(*args, **kwargs)\r\n        return wrapper\r\n    return decorate\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/111", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/111/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/111/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/111", "id": 266004095, "node_id": "MDU6SXNzdWUyNjYwMDQwOTU=", "number": 111, "title": "Typo in blog 02: line 208", "user": {"login": "genkagen", "id": 7817462, "node_id": "MDQ6VXNlcjc4MTc0NjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/7817462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/genkagen", "html_url": "https://github.com/genkagen", "followers_url": "https://api.github.com/users/genkagen/followers", "following_url": "https://api.github.com/users/genkagen/following{/other_user}", "gists_url": "https://api.github.com/users/genkagen/gists{/gist_id}", "starred_url": "https://api.github.com/users/genkagen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/genkagen/subscriptions", "organizations_url": "https://api.github.com/users/genkagen/orgs", "repos_url": "https://api.github.com/users/genkagen/repos", "events_url": "https://api.github.com/users/genkagen/events{/privacy}", "received_events_url": "https://api.github.com/users/genkagen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-17T06:13:15Z", "updated_at": "2018-08-22T05:24:13Z", "closed_at": "2018-08-22T05:24:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "blog 02: line 208\r\nLooking at the body of the function, three things are being done. First **off**\r\n\r\nTypo: First off -> First of\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/107", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/107/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/107/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/107", "id": 257756666, "node_id": "MDU6SXNzdWUyNTc3NTY2NjY=", "number": 107, "title": "test_init_not_called  segmentation fault", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars3.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-14T15:14:19Z", "updated_at": "2017-09-18T17:05:09Z", "closed_at": "2017-09-18T17:05:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "sorry to be the bearer of the bad news all the time\r\n\r\nthought to update package to 1.10.11 in (Neuro)Debian, but on my laptop test segfaults badly:\r\ntwo runs -- first with python-dbg, and then regular python\r\n\r\n```shell\r\n(git)hopa:~/deb/nmu/python-wrapt[debian/pike]\r\n$> PYTHONPATH=. python-dbg -m pytest -v tests/test_object_proxy.py::TestAttributeAccess::test_init_not_called\r\n============================================= test session starts ==============================================\r\nplatform linux2 -- Python 2.7.13, pytest-3.0.6, py-1.4.32, pluggy-0.4.0 -- /usr/bin/python-dbg\r\ncachedir: .cache\r\nrootdir: /home/yoh/deb/nmu/python-wrapt, inifile: tox.ini\r\nplugins: xdist-1.15.0, localserver-0.3.6\r\ncollected 8 items \r\n\r\ntests/test_object_proxy.py::TestAttributeAccess::test_init_not_called FAILED\r\n\r\n=================================================== FAILURES ===================================================\r\n___________________________________ TestAttributeAccess.test_init_not_called ___________________________________\r\n\r\nself = <test_object_proxy.TestAttributeAccess testMethod=test_init_not_called>\r\n\r\n    def test_init_not_called(self):\r\n        a = wrapt.ObjectProxy.__new__(wrapt.ObjectProxy)\r\n        b = wrapt.ObjectProxy.__new__(wrapt.ObjectProxy)\r\n    \r\n        try:\r\n>           a.__wrapped__\r\n\r\ntests/test_object_proxy.py:38: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/usr/lib/python2.7/dist-packages/wrapt/wrappers.py:190: in __getattr__\r\n    return getattr(self.__wrapped__, name)\r\n/usr/lib/python2.7/dist-packages/wrapt/wrappers.py:190: in __getattr__\r\n    return getattr(self.__wrapped__, name)\r\n!!! Recursion detected (same locals & position)\r\n=========================================== 1 failed in 0.26 seconds ===========================================\r\n[165652 refs]\r\n\r\n$> PYTHONPATH=. python -m pytest -v tests/test_object_proxy.py::TestAttributeAccess::test_init_not_called   \r\n============================================= test session starts ==============================================\r\nplatform linux2 -- Python 2.7.13, pytest-3.0.6, py-1.4.32, pluggy-0.4.0 -- /usr/bin/python\r\ncachedir: .cache\r\nrootdir: /home/yoh/deb/nmu/python-wrapt, inifile: tox.ini\r\nplugins: xdist-1.15.0, localserver-0.3.6\r\ncollected 8 items \r\n\r\ntests/test_object_proxy.py::TestAttributeAccess::test_init_not_called [1]    5862 segmentation fault  PYTHONPATH=. python -m pytest -v \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/106", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/106/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/106/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/106", "id": 256524863, "node_id": "MDU6SXNzdWUyNTY1MjQ4NjM=", "number": 106, "title": "Possible invalid casts in WraptObjectProxy_add", "user": {"login": "DRMacIver", "id": 28623, "node_id": "MDQ6VXNlcjI4NjIz", "avatar_url": "https://avatars0.githubusercontent.com/u/28623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DRMacIver", "html_url": "https://github.com/DRMacIver", "followers_url": "https://api.github.com/users/DRMacIver/followers", "following_url": "https://api.github.com/users/DRMacIver/following{/other_user}", "gists_url": "https://api.github.com/users/DRMacIver/gists{/gist_id}", "starred_url": "https://api.github.com/users/DRMacIver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DRMacIver/subscriptions", "organizations_url": "https://api.github.com/users/DRMacIver/orgs", "repos_url": "https://api.github.com/users/DRMacIver/repos", "events_url": "https://api.github.com/users/DRMacIver/events{/privacy}", "received_events_url": "https://api.github.com/users/DRMacIver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-10T17:16:25Z", "updated_at": "2017-09-15T13:30:25Z", "closed_at": "2017-09-15T13:30:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was getting some strange `ValueError(\"wrapper has not been initialized\")` errors in some code using wrapt (I'm sorry, I don't have a simple reproducible example for them - it was quite a complex chain of events that lead to them and I ended up just throwing away the prototype instead) and this lead me to [this code](https://github.com/GrahamDumpleton/wrapt/blob/0c8c2baa6cf514181b9cd927493d92550ebf1a43/src/wrapt/_wrappers.c#L212)\r\n\r\nThe following code in particular looks wrong:\r\n\r\n```c\r\n    if (!((WraptObjectProxyObject *)o2)->wrapped) {\r\n      PyErr_SetString(PyExc_ValueError, \"wrapper has not been initialized\");\r\n      return NULL;\r\n    }\r\n```\r\n\r\nThis is unconditionally casting o2 to a WraptObjectProxyObject, but there's no guarantee at all that o2 is of that type (this appears to be being used as just the `nb_add` member, which doesn't as far as I know make any guarantees about the type of the right hand side).\r\n\r\nIndeed if we look slightly lower we have some specific checks to see whether it is:\r\n\r\n```c\r\n    if (PyObject_IsInstance(o2, (PyObject *)&WraptObjectProxy_Type))\r\n        o2 = ((WraptObjectProxyObject *)o2)->wrapped;\r\n```\r\n\r\nI'm not exactly sure what the intended behaviour is, but I think it's unlikely that the current implementation is it. Perhaps the check for initialization of o2 should be inside the check further down?\r\n\r\nBased on a casual inspection it looks like the same pattern is present in a number of other operator implementations too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/103", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/103/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/103/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/103", "id": 229238483, "node_id": "MDU6SXNzdWUyMjkyMzg0ODM=", "number": 103, "title": "Proxies lose proxy-ness inside wrapped methods", "user": {"login": "kenahoo", "id": 111939, "node_id": "MDQ6VXNlcjExMTkzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/111939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenahoo", "html_url": "https://github.com/kenahoo", "followers_url": "https://api.github.com/users/kenahoo/followers", "following_url": "https://api.github.com/users/kenahoo/following{/other_user}", "gists_url": "https://api.github.com/users/kenahoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenahoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenahoo/subscriptions", "organizations_url": "https://api.github.com/users/kenahoo/orgs", "repos_url": "https://api.github.com/users/kenahoo/repos", "events_url": "https://api.github.com/users/kenahoo/events{/privacy}", "received_events_url": "https://api.github.com/users/kenahoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-05-17T05:03:35Z", "updated_at": "2017-05-21T15:55:34Z", "closed_at": "2017-05-17T14:27:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using `ObjectProxy` to create an object `proxy` that acts just like another object `original`, except that I intercept one method `inner()`:\r\n\r\n```\r\nimport wrapt\r\n\r\nclass C(object):\r\n    def __init__(self):\r\n        pass\r\n\r\n    def outer(self):\r\n        return self.inner()\r\n\r\n    def inner(self):\r\n        return 7\r\n\r\nclass CProxy(wrapt.ObjectProxy):\r\n\r\n    def __init__(self, wrapped):\r\n        super().__init__(wrapped)\r\n\r\n    def inner(self):\r\n        return 9\r\n```\r\n\r\nI could use a normal subclass for this, but 1) I want identity to be preserved so that e.g. `x = [original]; proxy in x` returns `True`, 2) I want any modifications of `proxy` to propagate back to `original`, and 3) I don't create the `original` object (I'm only passed it as an instance), nor do I have control of its lifecycle, I just proxy it & pass it to a method that will eventually call `inner()` or `outer()` or whatever methods it wants.  So this is a great use case for a proxy.\r\n\r\nHowever, as the following shows, the `C.outer()` method gets a `self` that's no longer the proxy object, so when it calls `self.inner()`, I lose the desired hijacking:\r\n\r\n```\r\noriginal = C()\r\nproxy = CProxy(original)\r\n\r\nprint(proxy.inner())\r\n# 9\r\nprint(proxy.outer())\r\n# 7\r\n```\r\n\r\nIs this expected behavior?  If so, is there some other way for me to achieve this \"pinpoint overriding of methods for an instance\"?\r\n\r\nI'm using version 1.10.10 of `wrapt` on Python 3.6.1.  Thanks.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/95", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/95/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/95/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/95", "id": 197769647, "node_id": "MDU6SXNzdWUxOTc3Njk2NDc=", "number": 95, "title": "pip install does not fallback to python-only mode gracefully", "user": {"login": "Jerhaad", "id": 6127230, "node_id": "MDQ6VXNlcjYxMjcyMzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/6127230?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jerhaad", "html_url": "https://github.com/Jerhaad", "followers_url": "https://api.github.com/users/Jerhaad/followers", "following_url": "https://api.github.com/users/Jerhaad/following{/other_user}", "gists_url": "https://api.github.com/users/Jerhaad/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jerhaad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jerhaad/subscriptions", "organizations_url": "https://api.github.com/users/Jerhaad/orgs", "repos_url": "https://api.github.com/users/Jerhaad/repos", "events_url": "https://api.github.com/users/Jerhaad/events{/privacy}", "received_events_url": "https://api.github.com/users/Jerhaad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-12-27T23:05:24Z", "updated_at": "2017-03-30T00:45:44Z", "closed_at": "2017-03-30T00:45:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "A simple `pip install wrapt` can fail because of missing complier.  Installing from source setup.py works fine.\r\n\r\nPIP log attached.\r\n[wrapt_fail.txt](https://github.com/GrahamDumpleton/wrapt/files/674752/wrapt_fail.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/94", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/94/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/94/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/94", "id": 197449880, "node_id": "MDU6SXNzdWUxOTc0NDk4ODA=", "number": 94, "title": "Add documentation for wrapt.when_imported", "user": {"login": "wimglenn", "id": 6615374, "node_id": "MDQ6VXNlcjY2MTUzNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6615374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wimglenn", "html_url": "https://github.com/wimglenn", "followers_url": "https://api.github.com/users/wimglenn/followers", "following_url": "https://api.github.com/users/wimglenn/following{/other_user}", "gists_url": "https://api.github.com/users/wimglenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/wimglenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wimglenn/subscriptions", "organizations_url": "https://api.github.com/users/wimglenn/orgs", "repos_url": "https://api.github.com/users/wimglenn/repos", "events_url": "https://api.github.com/users/wimglenn/events{/privacy}", "received_events_url": "https://api.github.com/users/wimglenn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-24T05:53:08Z", "updated_at": "2016-12-29T01:23:45Z", "closed_at": "2016-12-29T01:23:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Graham, thanks for your great work on wrapt.  Could you please add some documentation for `wrapt.when_imported`?  I want to do some stuff in a post import hook after numpy is imported, but I was getting errors when trying to use this and I couldn't find any documentation to see how to use it properly.  Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/92", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/92/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/92/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/92", "id": 189695407, "node_id": "MDU6SXNzdWUxODk2OTU0MDc=", "number": 92, "title": "[scratch this]", "user": {"login": "JackDandy", "id": 1459670, "node_id": "MDQ6VXNlcjE0NTk2NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1459670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JackDandy", "html_url": "https://github.com/JackDandy", "followers_url": "https://api.github.com/users/JackDandy/followers", "following_url": "https://api.github.com/users/JackDandy/following{/other_user}", "gists_url": "https://api.github.com/users/JackDandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/JackDandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JackDandy/subscriptions", "organizations_url": "https://api.github.com/users/JackDandy/orgs", "repos_url": "https://api.github.com/users/JackDandy/repos", "events_url": "https://api.github.com/users/JackDandy/events{/privacy}", "received_events_url": "https://api.github.com/users/JackDandy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-11-16T12:54:49Z", "updated_at": "2016-11-16T19:22:20Z", "closed_at": "2016-11-16T19:20:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Nevermind.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/87", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/87/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/87/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/87", "id": 172976033, "node_id": "MDU6SXNzdWUxNzI5NzYwMzM=", "number": 87, "title": "Travis-ci potential build problems", "user": {"login": "RussBaz", "id": 12103281, "node_id": "MDQ6VXNlcjEyMTAzMjgx", "avatar_url": "https://avatars3.githubusercontent.com/u/12103281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RussBaz", "html_url": "https://github.com/RussBaz", "followers_url": "https://api.github.com/users/RussBaz/followers", "following_url": "https://api.github.com/users/RussBaz/following{/other_user}", "gists_url": "https://api.github.com/users/RussBaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/RussBaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RussBaz/subscriptions", "organizations_url": "https://api.github.com/users/RussBaz/orgs", "repos_url": "https://api.github.com/users/RussBaz/repos", "events_url": "https://api.github.com/users/RussBaz/events{/privacy}", "received_events_url": "https://api.github.com/users/RussBaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-08-24T15:01:13Z", "updated_at": "2016-12-18T06:14:41Z", "closed_at": "2016-12-18T06:14:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am sorry for nitpicking but Travis does not seem to be testing 'wrapt' against Python 3.5.x in your current configuration as it is shown in the logs.\n\nAlso, one more thing, you can try using 'appveyor' (https://www.appveyor.com/) for windows build testing and it can build windows wheels too (https://packaging.python.org/appveyor/).\n\nThank you.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/66", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/66/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/66/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/66", "id": 148527037, "node_id": "MDU6SXNzdWUxNDg1MjcwMzc=", "number": 66, "title": "Any way to get some info about the wrapped function before it's called?", "user": {"login": "brantlk", "id": 11064524, "node_id": "MDQ6VXNlcjExMDY0NTI0", "avatar_url": "https://avatars3.githubusercontent.com/u/11064524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brantlk", "html_url": "https://github.com/brantlk", "followers_url": "https://api.github.com/users/brantlk/followers", "following_url": "https://api.github.com/users/brantlk/following{/other_user}", "gists_url": "https://api.github.com/users/brantlk/gists{/gist_id}", "starred_url": "https://api.github.com/users/brantlk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brantlk/subscriptions", "organizations_url": "https://api.github.com/users/brantlk/orgs", "repos_url": "https://api.github.com/users/brantlk/repos", "events_url": "https://api.github.com/users/brantlk/events{/privacy}", "received_events_url": "https://api.github.com/users/brantlk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-04-15T01:18:57Z", "updated_at": "2016-07-16T09:51:08Z", "closed_at": "2016-07-16T09:51:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm attempting to change some code that used functools.wraps() to wrapt. See https://review.openstack.org/#/c/305489/3/debtcollector/updating.py for an example.\n\nThe decorator gets called with the wrapped function, it gets some info about the function and stores it away, then when the wrapped function is eventually called it uses that info. This can be more efficient since the decorator doesn't have to recalculate the same data over and over again.\n\nIs there any way to do this with wrapt? If so, I haven't been able to figure it out.\n\nIt would be handy to have a documented example of a decorator that gets some info about the wrapped function and stores it for later.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/64", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/64/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/64/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/64", "id": 145229967, "node_id": "MDU6SXNzdWUxNDUyMjk5Njc=", "number": 64, "title": "ImportError: cannot import name 'getargspec' with Python 3.6.0a0", "user": {"login": "williamjmorenor", "id": 3522386, "node_id": "MDQ6VXNlcjM1MjIzODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3522386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/williamjmorenor", "html_url": "https://github.com/williamjmorenor", "followers_url": "https://api.github.com/users/williamjmorenor/followers", "following_url": "https://api.github.com/users/williamjmorenor/following{/other_user}", "gists_url": "https://api.github.com/users/williamjmorenor/gists{/gist_id}", "starred_url": "https://api.github.com/users/williamjmorenor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/williamjmorenor/subscriptions", "organizations_url": "https://api.github.com/users/williamjmorenor/orgs", "repos_url": "https://api.github.com/users/williamjmorenor/repos", "events_url": "https://api.github.com/users/williamjmorenor/events{/privacy}", "received_events_url": "https://api.github.com/users/williamjmorenor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-04-01T16:53:27Z", "updated_at": "2016-04-11T21:55:36Z", "closed_at": "2016-04-10T23:33:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I com from: https://github.com/PyCQA/pylint/issues/863\n\nI have pylint as part of my travis checks and today i get this traceback with nigthly python tests:\n\npylint expresoerp\nTraceback (most recent call last):\nFile \"/home/travis/virtualenv/python3.6-dev/bin/pylint\", line 11, in \nsys.exit(run_pylint())\nFile \"/home/travis/virtualenv/python3.6-dev/lib/python3.6/site-packages/pylint/init.py\", line 22, in run_pylint\nfrom pylint.lint import Run\nFile \"/home/travis/virtualenv/python3.6-dev/lib/python3.6/site-packages/pylint/lint.py\", line 44, in \nimport astroid\nFile \"/home/travis/virtualenv/python3.6-dev/lib/python3.6/site-packages/astroid/init.py\", line 54, in \nfrom astroid.nodes import *\nFile \"/home/travis/virtualenv/python3.6-dev/lib/python3.6/site-packages/astroid/nodes.py\", line 39, in \nfrom astroid.node_classes import (\nFile \"/home/travis/virtualenv/python3.6-dev/lib/python3.6/site-packages/astroid/node_classes.py\", line 27, in \nfrom astroid import bases\nFile \"/home/travis/virtualenv/python3.6-dev/lib/python3.6/site-packages/astroid/bases.py\", line 25, in \nimport wrapt\nFile \"/home/travis/virtualenv/python3.6-dev/lib/python3.6/site-packages/wrapt/init.py\", line 10, in \nfrom .decorators import (adapter_factory, AdapterFactory, decorator,\nFile \"/home/travis/virtualenv/python3.6-dev/lib/python3.6/site-packages/wrapt/decorators.py\", line 34, in \nfrom inspect import getargspec, ismethod, isclass, formatargspec\nImportError: cannot import name 'getargspec'\n\nTravis build is:\n\nhttps://travis-ci.org/expresoerp/expresoerp/jobs/120105028\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/62", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/62/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/62/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/62", "id": 135414482, "node_id": "MDU6SXNzdWUxMzU0MTQ0ODI=", "number": 62, "title": "Missing mspdb80.dll on Windows 7", "user": {"login": "achapkowski", "id": 5131271, "node_id": "MDQ6VXNlcjUxMzEyNzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5131271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achapkowski", "html_url": "https://github.com/achapkowski", "followers_url": "https://api.github.com/users/achapkowski/followers", "following_url": "https://api.github.com/users/achapkowski/following{/other_user}", "gists_url": "https://api.github.com/users/achapkowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/achapkowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achapkowski/subscriptions", "organizations_url": "https://api.github.com/users/achapkowski/orgs", "repos_url": "https://api.github.com/users/achapkowski/repos", "events_url": "https://api.github.com/users/achapkowski/events{/privacy}", "received_events_url": "https://api.github.com/users/achapkowski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-22T13:17:35Z", "updated_at": "2016-12-18T06:15:39Z", "closed_at": "2016-12-18T06:15:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nWhen I do a pip -install wrapt, I get an error with the bdist_wheel when the cl.exe launches.  mspdb80.dll missing is the error message.\n\nThank you\n\nAndrew\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/61", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/61/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/61/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/61", "id": 123410385, "node_id": "MDU6SXNzdWUxMjM0MTAzODU=", "number": 61, "title": "kwargs is empty with decorator", "user": {"login": "lichen2013", "id": 3983266, "node_id": "MDQ6VXNlcjM5ODMyNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/3983266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lichen2013", "html_url": "https://github.com/lichen2013", "followers_url": "https://api.github.com/users/lichen2013/followers", "following_url": "https://api.github.com/users/lichen2013/following{/other_user}", "gists_url": "https://api.github.com/users/lichen2013/gists{/gist_id}", "starred_url": "https://api.github.com/users/lichen2013/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lichen2013/subscriptions", "organizations_url": "https://api.github.com/users/lichen2013/orgs", "repos_url": "https://api.github.com/users/lichen2013/repos", "events_url": "https://api.github.com/users/lichen2013/events{/privacy}", "received_events_url": "https://api.github.com/users/lichen2013/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-12-22T04:30:31Z", "updated_at": "2015-12-23T07:41:17Z", "closed_at": "2015-12-23T07:41:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python : 2.7, wrapt (1.10.5)\n\nTest with the following code:\n\n```\nimport wrapt\n\n@wrapt.decorator\ndef test_wrapt(wrapped, instance, *args, **kwargs):\n    print('check args:')\n    print(args)\n    print('check kwargs')\n    print(kwargs)\n    return wrapped(*args, **kwargs)\n\nclass TestObject(object):\n\n    @test_wrapt\n    def test(self, x, y, z):\n        return x + y + z\n\n\ntest = TestObject()\ntest.test(x=2,y=2,z=4)\n```\n\nThe output is:\n\n```\ncheck args:\n((), {'y': 2, 'x': 2, 'z': 4})\ncheck kwargs\n{}\nTraceback (most recent call last):\n  File \"test_wrapt.py\", line 20, in <module>\n    test.test(x=2,y=2,z=4)\n  File \"test_wrapt.py\", line 10, in test_wrapt\n    return wrapped(*args, **kwargs)\nTypeError: test() takes exactly 4 arguments (3 given)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/60", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/60/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/60/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/60", "id": 122631576, "node_id": "MDU6SXNzdWUxMjI2MzE1NzY=", "number": 60, "title": "unable to return different functions with non argument style decorator", "user": {"login": "marcstreeter", "id": 5916490, "node_id": "MDQ6VXNlcjU5MTY0OTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5916490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcstreeter", "html_url": "https://github.com/marcstreeter", "followers_url": "https://api.github.com/users/marcstreeter/followers", "following_url": "https://api.github.com/users/marcstreeter/following{/other_user}", "gists_url": "https://api.github.com/users/marcstreeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcstreeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcstreeter/subscriptions", "organizations_url": "https://api.github.com/users/marcstreeter/orgs", "repos_url": "https://api.github.com/users/marcstreeter/repos", "events_url": "https://api.github.com/users/marcstreeter/events{/privacy}", "received_events_url": "https://api.github.com/users/marcstreeter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-12-16T23:58:13Z", "updated_at": "2015-12-17T00:21:52Z", "closed_at": "2015-12-17T00:21:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "this works \n\n```\nimport wrapt\n\ndef cach():\n    pass\n\ndef cached():\n    @wrapt.decorator\n    def wrapper(wrapped, instance, args, kwargs):\n        return cach()\n    return wrapper\n\n@cached()\ndef function():\n    pass\n```\n\nthis does not\n\n```\nimport wrapt\n\ndef cach():\n    pass\n\n@wrapt.decorator\ndef cached(wrapped, instance, args, kwargs):\n    return cach()\n\n@cached()\ndef function():\n    pass\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/59", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/59/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/59/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/59", "id": 122630421, "node_id": "MDU6SXNzdWUxMjI2MzA0MjE=", "number": 59, "title": "missing properties on decorated class methods ", "user": {"login": "marcstreeter", "id": 5916490, "node_id": "MDQ6VXNlcjU5MTY0OTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5916490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcstreeter", "html_url": "https://github.com/marcstreeter", "followers_url": "https://api.github.com/users/marcstreeter/followers", "following_url": "https://api.github.com/users/marcstreeter/following{/other_user}", "gists_url": "https://api.github.com/users/marcstreeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcstreeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcstreeter/subscriptions", "organizations_url": "https://api.github.com/users/marcstreeter/orgs", "repos_url": "https://api.github.com/users/marcstreeter/repos", "events_url": "https://api.github.com/users/marcstreeter/events{/privacy}", "received_events_url": "https://api.github.com/users/marcstreeter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-12-16T23:50:26Z", "updated_at": "2016-02-04T05:06:35Z", "closed_at": "2016-02-04T05:06:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "given \n\n```\nimport wrapt\n\ndef cached():\n    @wrapt.decorator\n    def wrapper(wrapped, instance, args, kwargs):\n        return hasattr(wrapped, 'im_class')\n    return wrapper\n\nclass Classo(object):\n    @classmethod\n    @cached()\n    def methodc(cls): \n        pass\n\n    @staticmethod\n    @cached()\n    def methods():\n        pass\n\n    @cached()\n    def method(self): \n        pass\n\n@cached()\ndef methodf(hello, there):\n    pass\n```\n\nthe following results\n\n```\nprint(hasattr(Classo.method, 'im_class'))    # True\nprint(hasattr(Classo.methodc, 'im_class'))  # True\nprint(hasattr(Classo.methods, 'im_class'))  # False\nprint(hasattr(methodf, 'im_class'))  # False\n\nprint(Classo().method())  # True\nprint(Classo.methodc())   # False / I'd hoped it would be True\nprint(Classo.methods())   # False\nprint(methodf())  # False\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/55", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/55/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/55/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/55", "id": 119320113, "node_id": "MDU6SXNzdWUxMTkzMjAxMTM=", "number": 55, "title": "pip install -e from git doesn't work", "user": {"login": "agriffis", "id": 50637, "node_id": "MDQ6VXNlcjUwNjM3", "avatar_url": "https://avatars1.githubusercontent.com/u/50637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agriffis", "html_url": "https://github.com/agriffis", "followers_url": "https://api.github.com/users/agriffis/followers", "following_url": "https://api.github.com/users/agriffis/following{/other_user}", "gists_url": "https://api.github.com/users/agriffis/gists{/gist_id}", "starred_url": "https://api.github.com/users/agriffis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agriffis/subscriptions", "organizations_url": "https://api.github.com/users/agriffis/orgs", "repos_url": "https://api.github.com/users/agriffis/repos", "events_url": "https://api.github.com/users/agriffis/events{/privacy}", "received_events_url": "https://api.github.com/users/agriffis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-11-28T21:57:51Z", "updated_at": "2015-12-05T20:33:42Z", "closed_at": "2015-12-05T20:33:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\n$ pip install -e git://github.com/grahamdumpleton/wrapt.git#egg=wrapt-dev\nObtaining wrapt from git+git://github.com/grahamdumpleton/wrapt.git#egg=wrapt-dev\n  Cloning git://github.com/grahamdumpleton/wrapt.git to /home/vagrant/.virtualenvs/pp/src/wrapt\nInstalling collected packages: wrapt\n  Running setup.py develop for wrapt\nSuccessfully installed wrapt\n\n$ python\nPython 2.7.6 (default, Jun 22 2015, 17:58:13) \n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import wrapt\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nImportError: No module named wrapt\n```\n\nThe problem is that the package inside the checkout is named `src` instead of `wrapt`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/53", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/53/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/53/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/53", "id": 119313659, "node_id": "MDU6SXNzdWUxMTkzMTM2NTk=", "number": 53, "title": "register_post_import_hook references module before assignment", "user": {"login": "agriffis", "id": 50637, "node_id": "MDQ6VXNlcjUwNjM3", "avatar_url": "https://avatars1.githubusercontent.com/u/50637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agriffis", "html_url": "https://github.com/agriffis", "followers_url": "https://api.github.com/users/agriffis/followers", "following_url": "https://api.github.com/users/agriffis/following{/other_user}", "gists_url": "https://api.github.com/users/agriffis/gists{/gist_id}", "starred_url": "https://api.github.com/users/agriffis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agriffis/subscriptions", "organizations_url": "https://api.github.com/users/agriffis/orgs", "repos_url": "https://api.github.com/users/agriffis/repos", "events_url": "https://api.github.com/users/agriffis/events{/privacy}", "received_events_url": "https://api.github.com/users/agriffis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-11-28T19:15:54Z", "updated_at": "2015-12-04T21:35:46Z", "closed_at": "2015-12-04T21:35:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\n...\n  File \"wrapt/decorators.py\", line 440, in _synchronized\n    return wrapped(*args, **kwargs)\n  File \"wrapt/importer.py\", line 92, in register_post_import_hook\n    hook(module)\nUnboundLocalError: local variable 'module' referenced before assignment\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/52", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/52/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/52/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/52", "id": 110470222, "node_id": "MDU6SXNzdWUxMTA0NzAyMjI=", "number": 52, "title": "Trouble converting decorator to wrapt", "user": {"login": "stuaxo", "id": 179677, "node_id": "MDQ6VXNlcjE3OTY3Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/179677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stuaxo", "html_url": "https://github.com/stuaxo", "followers_url": "https://api.github.com/users/stuaxo/followers", "following_url": "https://api.github.com/users/stuaxo/following{/other_user}", "gists_url": "https://api.github.com/users/stuaxo/gists{/gist_id}", "starred_url": "https://api.github.com/users/stuaxo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stuaxo/subscriptions", "organizations_url": "https://api.github.com/users/stuaxo/orgs", "repos_url": "https://api.github.com/users/stuaxo/repos", "events_url": "https://api.github.com/users/stuaxo/events{/privacy}", "received_events_url": "https://api.github.com/users/stuaxo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-10-08T14:58:31Z", "updated_at": "2015-10-10T13:13:16Z", "closed_at": "2015-10-10T13:13:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been trying to convert my decorator to wrapt so that I can support method instances, but can't work out how to do it all...\n\ndecorator -\nhttps://github.com/stuaxo/mnd/blob/master/mnd/dispatch.py#L83\n\nand some usage examples -\nhttps://github.com/stuaxo/mnd\n\nMy decorator adds a function to a 'dispatcher', when you pass in matching arguments to the dispatcher, it will call the function.\n\nAt the time of calling, I guess I can use wrapt somehow to pass the right params (at the moment I can't wrap methods as self is missing) ...  I got super confused trying to use wrapt with this, I guess my use case is slightly unusual.\n- any clues as to how I can use wrapt here ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/50", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/50/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/50/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/50", "id": 107761540, "node_id": "MDU6SXNzdWUxMDc3NjE1NDA=", "number": 50, "title": "Performing computations after the decorator is applied to the function but before the decorated function is called", "user": {"login": "ceridwen", "id": 8268008, "node_id": "MDQ6VXNlcjgyNjgwMDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8268008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ceridwen", "html_url": "https://github.com/ceridwen", "followers_url": "https://api.github.com/users/ceridwen/followers", "following_url": "https://api.github.com/users/ceridwen/following{/other_user}", "gists_url": "https://api.github.com/users/ceridwen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ceridwen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ceridwen/subscriptions", "organizations_url": "https://api.github.com/users/ceridwen/orgs", "repos_url": "https://api.github.com/users/ceridwen/repos", "events_url": "https://api.github.com/users/ceridwen/events{/privacy}", "received_events_url": "https://api.github.com/users/ceridwen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2015-09-22T17:28:31Z", "updated_at": "2015-10-09T20:04:26Z", "closed_at": "2015-10-04T11:35:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to mimic Python 3's keyword-only arguments in Python 2 with a decorator.  The general pattern is,\n\n``` python\ndef decorator_factory(kwonly_args):\n    def decorator(function):\n        inspect.getargspec(function)\n        # do some calculations based on the argspec\n        def wrapper(*args, **kws):\n            # do more stuff with the previous results and args, kws\n            return function(*new_args, **new_kws)\n        return wrapper\n    return decorator\n```\n\n The full code is at https://code.activestate.com/recipes/578993-keyword-only-arguments-in-python-2x/.\n\nWith wrapt.decorator the receiving function gets the wrapped function and its arguments at the same time, which would mean redoing the work with inspect.getargspec and its sequents with every call.  If there's a way to prevent that from happening, I don't see it.  Is there a way I'm not seeing?  If not, would you. consider changing the API to make it possible? \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/48", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/48/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/48/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/48", "id": 104937962, "node_id": "MDU6SXNzdWUxMDQ5Mzc5NjI=", "number": 48, "title": "@synchronized doesn't seem to be working", "user": {"login": "jjmontesl", "id": 2786867, "node_id": "MDQ6VXNlcjI3ODY4Njc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2786867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjmontesl", "html_url": "https://github.com/jjmontesl", "followers_url": "https://api.github.com/users/jjmontesl/followers", "following_url": "https://api.github.com/users/jjmontesl/following{/other_user}", "gists_url": "https://api.github.com/users/jjmontesl/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjmontesl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjmontesl/subscriptions", "organizations_url": "https://api.github.com/users/jjmontesl/orgs", "repos_url": "https://api.github.com/users/jjmontesl/repos", "events_url": "https://api.github.com/users/jjmontesl/events{/privacy}", "received_events_url": "https://api.github.com/users/jjmontesl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-09-04T17:54:29Z", "updated_at": "2015-09-29T10:35:08Z", "closed_at": "2015-09-29T10:35:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I downloaded the package for the  @synchronized decorator. This test suggests it doesn't work:\n\n```\nfrom wrapt.decorators import synchronized\nimport threading\nimport time\nimport sys\nimport logging\nfrom threading import Thread, RLock\n\nlog = lambda x: sys.stdout.write(\"%s\\n\" % x)\n\n\nclass TestThread(Thread):\n\n    @synchronized\n    def crit(self):\n        #with self.lock:\n            log(\"%s before sleep\" % self.name)\n            time.sleep(1)\n            log(\"%s after sleep\" % self.name)\n\n    def run(self):\n        log(\"%s before calling\" % self.name)\n        self.crit()\n\n\na = TestThread()\na.name = \"A\"\nb = TestThread()\nb.name = \"B\"\n\na.start()\nb.start()\n```\n\nRunning this program finishes in 1 second and sleep methods run concurrently, whereas I'd expect them to run sequentially. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/45", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/45/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/45/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/45", "id": 98470087, "node_id": "MDU6SXNzdWU5ODQ3MDA4Nw==", "number": 45, "title": "unexpected behavior when assigning a FunctionWrapper to a static variable", "user": {"login": "IARI", "id": 1053417, "node_id": "MDQ6VXNlcjEwNTM0MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1053417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IARI", "html_url": "https://github.com/IARI", "followers_url": "https://api.github.com/users/IARI/followers", "following_url": "https://api.github.com/users/IARI/following{/other_user}", "gists_url": "https://api.github.com/users/IARI/gists{/gist_id}", "starred_url": "https://api.github.com/users/IARI/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IARI/subscriptions", "organizations_url": "https://api.github.com/users/IARI/orgs", "repos_url": "https://api.github.com/users/IARI/repos", "events_url": "https://api.github.com/users/IARI/events{/privacy}", "received_events_url": "https://api.github.com/users/IARI/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-07-31T20:58:15Z", "updated_at": "2015-08-12T07:34:37Z", "closed_at": "2015-08-12T07:34:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "have a look at this question I posted on stackoverflow:\nhttp://stackoverflow.com/questions/31753471/python-3-type-changed-after-class-variable-assignment\n\nAccording to an answer, an altered specification of `__get__` is to blame that was not considered in wrapt.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/42", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/42/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/42/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/42", "id": 92635376, "node_id": "MDU6SXNzdWU5MjYzNTM3Ng==", "number": 42, "title": "RFE: Changing unknown signatures", "user": {"login": "sils", "id": 5716520, "node_id": "MDQ6VXNlcjU3MTY1MjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5716520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sils", "html_url": "https://github.com/sils", "followers_url": "https://api.github.com/users/sils/followers", "following_url": "https://api.github.com/users/sils/following{/other_user}", "gists_url": "https://api.github.com/users/sils/gists{/gist_id}", "starred_url": "https://api.github.com/users/sils/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sils/subscriptions", "organizations_url": "https://api.github.com/users/sils/orgs", "repos_url": "https://api.github.com/users/sils/repos", "events_url": "https://api.github.com/users/sils/events{/privacy}", "received_events_url": "https://api.github.com/users/sils/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-07-02T13:19:01Z", "updated_at": "2015-07-03T07:18:09Z", "closed_at": "2015-07-03T07:18:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nyou already provide the means to change the signature of a function as documented on http://wrapt.readthedocs.org/en/latest/decorators.html#signature-changing-decorators .\n\nHowever in our project we have the need of changing the signature of an arbitrary function. Example:\n\n``` python\n@decorated\ndef some_function(arg, arg3: annotation):\n    pass  # It also may do something :)\n\n@wrapt.decorator(remove_args=[\"arg\"], add_args_before=[\"arg1\", \"arg2\"])\ndef decorated(wrapped, instance, args, kwargs):\n    return wrapped(args[0]*args[1], *(args[2:]), **kwargs)\n```\n\nSo, we want a decorator that replaces specific arguments in an unknown signature while leaving the function introspectable (including annotations especially). Would you be interested in having this in your library? Otherwise we'll have to do a nongeneralized version for ourselves only.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/40", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/40/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/40/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/40", "id": 85180672, "node_id": "MDU6SXNzdWU4NTE4MDY3Mg==", "number": 40, "title": "WeakFunctionProxy bypasses wrapt.decorator", "user": {"login": "assumptionsoup", "id": 278467, "node_id": "MDQ6VXNlcjI3ODQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/278467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/assumptionsoup", "html_url": "https://github.com/assumptionsoup", "followers_url": "https://api.github.com/users/assumptionsoup/followers", "following_url": "https://api.github.com/users/assumptionsoup/following{/other_user}", "gists_url": "https://api.github.com/users/assumptionsoup/gists{/gist_id}", "starred_url": "https://api.github.com/users/assumptionsoup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/assumptionsoup/subscriptions", "organizations_url": "https://api.github.com/users/assumptionsoup/orgs", "repos_url": "https://api.github.com/users/assumptionsoup/repos", "events_url": "https://api.github.com/users/assumptionsoup/events{/privacy}", "received_events_url": "https://api.github.com/users/assumptionsoup/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-06-04T16:47:42Z", "updated_at": "2015-07-03T00:16:24Z", "closed_at": "2015-07-03T00:16:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you for putting in the effort to write this package and explaining all the issues it addresses.  My decorators would be much more fragile without your help!\n\nWeakFunctionProxy only proxies the original function, and ignores any patching done via wrapt.decorator.  Ex (tested in python 2.7 with wrapt 1.10.4):\n\n```\nimport wrapt\n\n@wrapt.decorator\ndef bark(wrapped, instance, args, kwargs):\n    print 'The %s barks' % instance.__class__.__name__\n\nclass Animal(object):\n    @bark\n    def squeal(self):\n        print 'The %s squeals' % self.__class__.__name__\n\nanimal = Animal()\nanimal.squeal()\n```\n\nOutput: `The Animal barks`\n\n```\nweak_squeal = wrapt.WeakFunctionProxy(animal.squeal)\nweak_squeal()\n```\n\nOutput: `The Animal squeals`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/37", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/37/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/37/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/37", "id": 58027540, "node_id": "MDU6SXNzdWU1ODAyNzU0MA==", "number": 37, "title": "Best way to modify wrapped __doc__", "user": {"login": "harlowja", "id": 970458, "node_id": "MDQ6VXNlcjk3MDQ1OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/970458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harlowja", "html_url": "https://github.com/harlowja", "followers_url": "https://api.github.com/users/harlowja/followers", "following_url": "https://api.github.com/users/harlowja/following{/other_user}", "gists_url": "https://api.github.com/users/harlowja/gists{/gist_id}", "starred_url": "https://api.github.com/users/harlowja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harlowja/subscriptions", "organizations_url": "https://api.github.com/users/harlowja/orgs", "repos_url": "https://api.github.com/users/harlowja/repos", "events_url": "https://api.github.com/users/harlowja/events{/privacy}", "received_events_url": "https://api.github.com/users/harlowja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-18T05:13:54Z", "updated_at": "2015-02-18T15:58:25Z", "closed_at": "2015-02-18T15:58:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been working on a `debtcollector` library:\n\nhttp://docs.openstack.org/developer/debtcollector/\n\nIt uses wrapt now and we are currently adding the ability to automatically adjust the docstring of depreciated methods/functions... with documentation that states what is deprecated. This has turned out to be pretty easy for decorators that aren't using wrapt but I was wondering the best way to do this for decorators that are using wrapt.\n\nI came up with http://paste.openstack.org/show/176557/ but was wondering if there is a better way to do this when a object being decorated is using the wrapt decorator mechanism. Any thoughts would be appreciated.\n\nBtw the review for this kind of stuff is @ https://review.openstack.org/#/c/155988/\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/36", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/36/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/36/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/36", "id": 51327592, "node_id": "MDU6SXNzdWU1MTMyNzU5Mg==", "number": 36, "title": "Missing init checks in wrapper.c cause segfault.", "user": {"login": "ionelmc", "id": 129501, "node_id": "MDQ6VXNlcjEyOTUwMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/129501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionelmc", "html_url": "https://github.com/ionelmc", "followers_url": "https://api.github.com/users/ionelmc/followers", "following_url": "https://api.github.com/users/ionelmc/following{/other_user}", "gists_url": "https://api.github.com/users/ionelmc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionelmc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionelmc/subscriptions", "organizations_url": "https://api.github.com/users/ionelmc/orgs", "repos_url": "https://api.github.com/users/ionelmc/repos", "events_url": "https://api.github.com/users/ionelmc/events{/privacy}", "received_events_url": "https://api.github.com/users/ionelmc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-12-08T17:20:44Z", "updated_at": "2014-12-11T09:55:38Z", "closed_at": "2014-12-11T09:55:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Code to repro:\n\n```\nPython 2.7.3 (default, Sep 26 2013, 20:03:06)\n[GCC 4.6.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import wrapt\n>>> wrapt.wrappers.ObjectProxy.__new__(wrapt.wrappers.ObjectProxy) + wrapt.wrappers.ObjectProxy.__new__(wrapt.wrappers.ObjectProxy)\n[1]    25370 segmentation fault (core dumped)  .ve/bin/python\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/33", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/33/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/33/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/33", "id": 48758927, "node_id": "MDU6SXNzdWU0ODc1ODkyNw==", "number": 33, "title": "Support the dynamic generation of signatures for signature changing decorators", "user": {"login": "IvanMalison", "id": 1246619, "node_id": "MDQ6VXNlcjEyNDY2MTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1246619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IvanMalison", "html_url": "https://github.com/IvanMalison", "followers_url": "https://api.github.com/users/IvanMalison/followers", "following_url": "https://api.github.com/users/IvanMalison/following{/other_user}", "gists_url": "https://api.github.com/users/IvanMalison/gists{/gist_id}", "starred_url": "https://api.github.com/users/IvanMalison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IvanMalison/subscriptions", "organizations_url": "https://api.github.com/users/IvanMalison/orgs", "repos_url": "https://api.github.com/users/IvanMalison/repos", "events_url": "https://api.github.com/users/IvanMalison/events{/privacy}", "received_events_url": "https://api.github.com/users/IvanMalison/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2014-11-14T09:19:01Z", "updated_at": "2019-07-22T02:38:00Z", "closed_at": "2014-11-20T06:32:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "wrapt currently supports signature changing decorators with the keyword argument `adapter` which accepts a callable at the time that `wrapt.decorator` is invoked (i.e. when the decorator function is decorated). This means that the signature of functions produced by any given decorator built with `wrapt.decorator` is fixed.\n\nIt is easy to imagine a use case for a decorator that operates on functions with arbitrary signatures, and modifies their signatures in a predictable way. Consider, for example, a decorator function that skips a test function based on the value of a command line flag that was passed to pytest. In pytest, the way one obtains access to command line flags is through the request fixture, which is typically obtained with the addition of an argument to the test functions signature. As such, a decorator implementing this behavior would need to add an argument to the test functions signature. Because any given test function may request any number of other fixtures, the decorator function can not assume some fixed signature as in:\n\n``` python\n@wrapt.decorator(adapter=lambda request: None)\ndef skip_if_flag(function, instance, args, kwargs):\n    request = kwargs.pop('request')\n    if request.config.getoption('flag_name'):\n        pass\n    else:\n        return function(*args, **kwargs)\n\n```\n\nMore exactly, such a decorator would only work with test functions that don't request any fixtures.\n\nIt is actually possible to implement the more general version of this decorator with wrapt, but the code that does so borders on hideous:\n\n``` python\nclass FunctionWithSignatureBuilder(object):\n\n    NO_ARGUMENT = object()\n\n    def __init__(self, function, *arguments_to_add, **keyword_arguments_to_add):\n        self._function = function\n        self._arguments_to_add = arguments_to_add\n        self._keyword_arguments_to_add = keyword_arguments_to_add\n        self._argspec = inspect.getargspec(function)\n        defaults = self._argspec.defaults or ()\n        positional_arg_count = (len(self._argspec.args) -\n                                len(defaults))\n        self._positional_pairs = zip(\n            list(arguments_to_add) + self._argspec.args[:positional_arg_count],\n            [self.NO_ARGUMENT] * (positional_arg_count + len(arguments_to_add))\n        )\n        self._keyword_pairs = zip(\n            self._argspec.args[positional_arg_count:],\n            defaults\n        ) + keyword_arguments_to_add.items()\n        self._argument_pairs = self._positional_pairs + self._keyword_pairs\n        if self._argspec.varargs:\n            self._argument_pairs.append(\n                ('*{0}'.format(self._argspec.varargs), self.NO_ARGUMENT)\n            )\n        if self._argspec.keywords:\n            self._argument_pairs.append(\n                ('**{0}'.format(self._argspec.keywords), self.NO_ARGUMENT)\n             )\n\n    @property\n    def argument_list_string(self):\n        return ', '.join(self._build_argument_string(argument_pair)\n                         for argument_pair in self._argument_pairs)\n\n    @property\n    def null_function_string(self):\n        return 'lambda {0}: None'.format(self.argument_list_string)\n\n    @property\n    def null_function(self):\n        return eval(self.null_function_string)\n\n    def _build_argument_string(self, incoming):\n        argument_name, default = incoming\n        if default == self.NO_ARGUMENT: return argument_name\n        return '{0}={1}'.format(argument_name, repr(default))\n\n\ndef skip_if_flag(function):\n    @decorator(\n        adapter=FunctionWithSignatureBuilder(function, 'request').null_function\n    )\n    def wrapped(function, instance, args, kwargs):\n        request = kwargs.pop('request')\n        if request.config.getoption('flag_name'):\n        pass\n        else:\n            return function(*args, **kwargs)\n    return wrapped(function)\n```\n\nThis example highlights two separate issues with wrapts current `adapter` based interface:\n\na) It is not possible to create decorators that operate on functions with arbitrary signatures.\n\nb) It is more difficult than it should be to provide a modify the signature of a function in a fixed way.\n\nTo address the first of these issues I propose the addition of a keyword argument to the `wrapt.decorator` function that accepts a function that produces the output signature of the decorator given the input function. This is how you would write the decorator from my example using this new keyword:\n\n``` python\n@wrapt.decorator(signature_builder=lambda function: FunctionWithSignatureBuilder(function, 'request').null_function)\ndef skip_if_flag(function, instance, args, kwargs):\n    request = kwargs.pop('request')\n    if request.config.getoption('flag_name'):\n        pass\n    else:\n        return function(*args, **kwargs)\n```\n\nI see two viable solutions to b). The first of these is to simply include a class/function like FunctionWithSignatureBuilder in the wrapt library (it would need to support argument erasure as well as a few other things to really be a viable solution). The other option would be to change the interface to adapter/signature_builder so that they accept some type of custom object that contains argument information (or perhaps ArgSpec instances [The type returned from inspect.getargspec]) rather than function instances. I prefer the second option since it avoids adding code that eval's things to the codebase (by the way, do you know of a better way to do that), but the second option is definitely more disruptive. Perhaps the best thing to do would be to only change the expected return type of signature_builder while leaving adapter as it is.\n\nAnyway, I'm happy to implement this functionality, but I wanted to hear your thoughts before I started working on anything.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/32", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/32/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/32/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/32", "id": 46192513, "node_id": "MDU6SXNzdWU0NjE5MjUxMw==", "number": 32, "title": "Deriving from ObjectProxy (is it possible?)", "user": {"login": "harlowja", "id": 970458, "node_id": "MDQ6VXNlcjk3MDQ1OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/970458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harlowja", "html_url": "https://github.com/harlowja", "followers_url": "https://api.github.com/users/harlowja/followers", "following_url": "https://api.github.com/users/harlowja/following{/other_user}", "gists_url": "https://api.github.com/users/harlowja/gists{/gist_id}", "starred_url": "https://api.github.com/users/harlowja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harlowja/subscriptions", "organizations_url": "https://api.github.com/users/harlowja/orgs", "repos_url": "https://api.github.com/users/harlowja/repos", "events_url": "https://api.github.com/users/harlowja/events{/privacy}", "received_events_url": "https://api.github.com/users/harlowja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-10-19T01:15:13Z", "updated_at": "2014-11-20T06:33:02Z", "closed_at": "2014-11-20T06:33:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm trying to use `ObjectProxy` in my code to replace a piece of code that I have that is very similar:\n\nThe code is @ https://github.com/openstack/taskflow/blob/master/taskflow/utils/deprecation.py#L33\n\nI am trying to have the `MovedClassProxy` derive from your `ObjectProxy` so that I can take advantage of the correctness of the `ObjectProxy` base class (and still retain the ability to emit depreciation warnings like that `MovedClassProxy` does). Unfortunately when I try to do this it appears I am getting the following warning/error:\n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"taskflow/utils/misc.py\", line 395, in <module>\n    version=\"0.5\", removal_version=\"?\")\n  File \"taskflow/utils/deprecation.py\", line 116, in moved_class\n    return MovedClassProxy(new_class, \"\".join(message_components), 3)\n  File \"taskflow/utils/deprecation.py\", line 59, in __init__\n    _setattr(self, '__message__', message)\nTypeError: can't apply this __setattr__ to ObjectProxy object\n```\n\nThis appears to be due to https://github.com/openstack/taskflow/blob/master/taskflow/utils/deprecation.py#L58 which is needed to retain the depreciation message. Any ideas how this can be done correctly using `ObjectProxy` as a parent class (or maybe there is another way?).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/31", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/31/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/31/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/31", "id": 43642431, "node_id": "MDU6SXNzdWU0MzY0MjQzMQ==", "number": 31, "title": "inspect.signature() on 3.2", "user": {"login": "mdevaev", "id": 416259, "node_id": "MDQ6VXNlcjQxNjI1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/416259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdevaev", "html_url": "https://github.com/mdevaev", "followers_url": "https://api.github.com/users/mdevaev/followers", "following_url": "https://api.github.com/users/mdevaev/following{/other_user}", "gists_url": "https://api.github.com/users/mdevaev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdevaev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdevaev/subscriptions", "organizations_url": "https://api.github.com/users/mdevaev/orgs", "repos_url": "https://api.github.com/users/mdevaev/repos", "events_url": "https://api.github.com/users/mdevaev/events{/privacy}", "received_events_url": "https://api.github.com/users/mdevaev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-09-23T15:18:21Z", "updated_at": "2014-11-20T06:34:57Z", "closed_at": "2014-11-18T03:20:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can you add fallback for 3.2?\n\n```\n$ pypy3\nPython 3.2.5 (986752d005bb6c65ce418113e4c3cd115f61a9b4, Jul 08 2014, 12:36:44)\n[PyPy 2.3.1 with GCC 4.9.0 20140604 (prerelease)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>> import vcr\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/mdevaev/.local/lib/python3.2/site-packages/vcr/__init__.py\", line 2, in <module>\n    from .config import VCR\n  File \"/home/mdevaev/.local/lib/python3.2/site-packages/vcr/config.py\", line 6, in <module>\n    from .cassette import Cassette\n  File \"/home/mdevaev/.local/lib/python3.2/site-packages/vcr/cassette.py\", line 5, in <module>\n    import wrapt\n  File \"/home/mdevaev/.local/lib/python3.2/site-packages/wrapt/__init__.py\", line 10, in <module>\n    from .decorators import decorator, synchronized\n  File \"/home/mdevaev/.local/lib/python3.2/site-packages/wrapt/decorators.py\", line 17, in <module>\n    from inspect import signature\nImportError: cannot import name 'signature'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/30", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/30/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/30/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/30", "id": 42177750, "node_id": "MDU6SXNzdWU0MjE3Nzc1MA==", "number": 30, "title": "Dynamically changing 'instance' in a wrapt decorator on an instance method", "user": {"login": "jabooth", "id": 1312873, "node_id": "MDQ6VXNlcjEzMTI4NzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1312873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jabooth", "html_url": "https://github.com/jabooth", "followers_url": "https://api.github.com/users/jabooth/followers", "following_url": "https://api.github.com/users/jabooth/following{/other_user}", "gists_url": "https://api.github.com/users/jabooth/gists{/gist_id}", "starred_url": "https://api.github.com/users/jabooth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jabooth/subscriptions", "organizations_url": "https://api.github.com/users/jabooth/orgs", "repos_url": "https://api.github.com/users/jabooth/repos", "events_url": "https://api.github.com/users/jabooth/events{/privacy}", "received_events_url": "https://api.github.com/users/jabooth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-09-08T09:17:30Z", "updated_at": "2014-11-20T06:34:20Z", "closed_at": "2014-11-20T06:34:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Imagine we have the following class:\n\n``` python\nclass Image(object):\n\n    def __init__(self):\n        self.pixels = np.ones((100, 100))\n\n    def crop(self):\n        self.pixels = self.pixels[:40, :40]\n```\n\nwhich behaves as:\n\n``` python\nimg = Image()\nassert img.pixels.shape = (100, 100)\nx = img.crop()\nassert x == None\nassert img.pixels.shape = (40, 40)\n```\n\nit would be desirable to have some magic decorator `@inplace` that modifies the behaviour as follows:\n\n``` python\nclass Image(object):\n\n    def __init__(self):\n        self.pixels = np.ones((100, 100))\n\n    @inplace\n    def crop(self):\n        self.pixels = self.pixels[:40, :40]\n```\n\nwhich behaves as:\n\n``` python\nimg = Image()\nassert img.pixels.shape = (100, 100)\nx = img.crop()\nassert type(x) == Image  # decorator made a copy\nassert img.pixels.shape = (100, 100)  # original image untouched\nassert x.pixels.shape = (40, 40)  # returned image was modified\n\ny = img.crop(inplace=True)  # kwarg instructs the decorator to not interfere\nassert y == None \nassert img.pixels.shape = (40, 40)  # original 'inplace' behavior\n```\n\nIn [our project](https://github.com/menpo/menpo) we have many situations like this where a copy of the object in question may be expensive (so in performance-critical internal API you would like to modify objects in place) but for interactive exploratory work we would prefer the safely and clarity of (in effect) immutable objects.\n\nWe have a unified approach to copying objects in our framework, so in psuedocode we could do something like\n\n``` python\n@wrapt.decorator\ndef inplace(wrapped, instance, args, kwargs):\n    def _execute(*args, **kwargs):\n        inplace = kwargs.pop('inplace', False)\n        if inplace:\n            # just call the method (which is always written to modify self)\n            wrapped(*args, **kwargs) \n            return None  # prevent accidental chaining when inplace\n        else:\n            new_instance = instance.copy()  # assume we know instance has .copy() \n            # call the self-modifying method on a new self\n            new_instance.wrapped(*args, **kwargs)\n            return new_instance  # instance left unmodified\n    return _execute(*args, **kwargs)\n```\n\nMy questions is - can something like this be done in `wrapt`? I see in the docs that you say:\n\n> When calling the wrapped function in the decorator wrapper function, the instance should never be passed explicitly though. This is because the **instance is already bound to wrapped and will be passed automatically** as the first argument to the original wrapped function.\n\nWhich makes me think I am basically asking how I can circumvent that and change the instance that is passed by wrapt dynamically at the invocation of the decorated function.\n\nBest Wishes,\nJames\n\np.s. our project is using wrapt to define functions that transparently work on numpy arrays or our own datatypes, and we are really grateful for the work you have put in to developing such a solid approach to decorators.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/29", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/29/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/29/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/29", "id": 41255177, "node_id": "MDU6SXNzdWU0MTI1NTE3Nw==", "number": 29, "title": "Put test requirements into test-requirements.txt and non-test in requirements.txt", "user": {"login": "harlowja", "id": 970458, "node_id": "MDQ6VXNlcjk3MDQ1OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/970458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harlowja", "html_url": "https://github.com/harlowja", "followers_url": "https://api.github.com/users/harlowja/followers", "following_url": "https://api.github.com/users/harlowja/following{/other_user}", "gists_url": "https://api.github.com/users/harlowja/gists{/gist_id}", "starred_url": "https://api.github.com/users/harlowja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harlowja/subscriptions", "organizations_url": "https://api.github.com/users/harlowja/orgs", "repos_url": "https://api.github.com/users/harlowja/repos", "events_url": "https://api.github.com/users/harlowja/events{/privacy}", "received_events_url": "https://api.github.com/users/harlowja/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-08-27T07:18:30Z", "updated_at": "2014-09-18T05:08:06Z", "closed_at": "2014-09-18T05:08:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just a suggestion. I think this is pretty commonly done to differentiate between the 2 requirement types (one only needed for testing).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/26", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/26/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/26/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/26", "id": 36804344, "node_id": "MDU6SXNzdWUzNjgwNDM0NA==", "number": 26, "title": "Failure if combined with non-wrapt decorators", "user": {"login": "spookylukey", "id": 62745, "node_id": "MDQ6VXNlcjYyNzQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/62745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spookylukey", "html_url": "https://github.com/spookylukey", "followers_url": "https://api.github.com/users/spookylukey/followers", "following_url": "https://api.github.com/users/spookylukey/following{/other_user}", "gists_url": "https://api.github.com/users/spookylukey/gists{/gist_id}", "starred_url": "https://api.github.com/users/spookylukey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spookylukey/subscriptions", "organizations_url": "https://api.github.com/users/spookylukey/orgs", "repos_url": "https://api.github.com/users/spookylukey/repos", "events_url": "https://api.github.com/users/spookylukey/events{/privacy}", "received_events_url": "https://api.github.com/users/spookylukey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-06-30T14:49:50Z", "updated_at": "2014-08-22T11:03:28Z", "closed_at": "2014-08-22T11:03:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "When attempting to solve problems with decorating both methods/functions in Django, I came up with a short suite of tests which included real-life tricky things that people wanted to do with functions/methods/decorators that we provided. We did have an `auto_adapt_to_methods` function but came across corner cases we couldn't fix, so we ended up with the manual `method_decorator` function which has to be applied manually to make method decorators out of function decorators.\n\nSo I was intrigued to know if you've solved the problems we hit! Below is the script, adapted to implement our decorators using wrapt. You'll be glad to know if passes most of them, but it fails on the last test, where there is a simple decorator which, by definition, doesn't use our solution to these problems. (For a framework like Django, it's important that we use things that will play nice with normal Python).\n\nIf this is a known issue, then I guess it should be in the \"Known Issues\" section of the docs.\n\nThanks!\n\n```\n#!/usr/bin/env python\n\nimport wrapt\n\n@wrapt.decorator\ndef striparg(wrapped, instance, args, kwargs):\n    \"\"\"\n    Decorates functions that take a single string argument, and runs\n    strip() on that arg before calling.\n    \"\"\"\n    return wrapped(args[0].strip())\n\n\n@wrapt.decorator\ndef sign(wrapped, instance, args, kwargs):\n    \"\"\"\n    Decorates *methods* that take a single argument and return a string.\n    \"\"\"\n    return wrapped(args[0]) + \" (says \" + instance.__class__.__name__ + \")\"\n\n\ndef simple_decorator(func):\n    \"\"\"\n    No-op decorator, implemented by someone else\n    \"\"\"\n    def wrapper(*args):\n        return func(*args)\n    return wrapper\n\n\n@striparg\ndef insult(arg):\n    return arg + \" sucks!\"\n\n\nclass Stuff(object):\n    @striparg\n    def deny(self, arg):\n        return \"No you can't have \" + arg\n\n\nclass MoreStuff(Stuff):\n    deny = Stuff.deny\n    deny2 = simple_decorator(Stuff.deny)\n    deny3 = sign(Stuff.deny)\n    deny4 = striparg(Stuff.deny)\n\n    @simple_decorator\n    def deny5(self, arg):\n        return super(MoreStuff, self).deny(arg)\n\n    @sign\n    def deny6(self, arg):\n        return super(MoreStuff, self).deny(arg)\n\n    @simple_decorator\n    @striparg\n    def deny7(self, arg):\n        return super(MoreStuff, self).deny(arg)\n\n\nassert insult(\" PHP \") == \"PHP sucks!\"\nassert Stuff().deny(\" a pony \") == \"No you can't have a pony\"\nassert MoreStuff().deny(\" a backwards incompatible change \") == \"No you can't have a backwards incompatible change\"\nassert MoreStuff().deny2(\" some figgy pudding \") == \"No you can't have some figgy pudding\"\nassert MoreStuff().deny3(\" a velociraptor \") == \"No you can't have a velociraptor (says MoreStuff)\"\nassert MoreStuff().deny4(\" true freedom on your iPad \") == \"No you can't have true freedom on your iPad\"\nassert MoreStuff().deny5(\" a design contest \") == \"No you can't have a design contest\"\nassert MoreStuff().deny6(\" less politically charged example code \") == \"No you can't have less politically charged example code (says MoreStuff)\"\nassert MoreStuff().deny7(\" an auto_adapt_to_methods function that works \") == \"No you can't have an auto_adapt_to_methods function that works\" # fails\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/25", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/25/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/25/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/25", "id": 34742377, "node_id": "MDU6SXNzdWUzNDc0MjM3Nw==", "number": 25, "title": "The C extension compilation fails on Mac OS X Mavericks", "user": {"login": "christophercrouzet", "id": 1691255, "node_id": "MDQ6VXNlcjE2OTEyNTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1691255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christophercrouzet", "html_url": "https://github.com/christophercrouzet", "followers_url": "https://api.github.com/users/christophercrouzet/followers", "following_url": "https://api.github.com/users/christophercrouzet/following{/other_user}", "gists_url": "https://api.github.com/users/christophercrouzet/gists{/gist_id}", "starred_url": "https://api.github.com/users/christophercrouzet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christophercrouzet/subscriptions", "organizations_url": "https://api.github.com/users/christophercrouzet/orgs", "repos_url": "https://api.github.com/users/christophercrouzet/repos", "events_url": "https://api.github.com/users/christophercrouzet/events{/privacy}", "received_events_url": "https://api.github.com/users/christophercrouzet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-06-02T02:08:33Z", "updated_at": "2014-06-02T22:36:38Z", "closed_at": "2014-06-02T22:36:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try to install the library through `setup.py` on Mac OS X Mavericks (10.9.2), the C extension won't compile as per the log below.\n\n```\n< christopher ~/src/3rdparty/wrapt > sudo python setup.py install\nrunning install\nrunning build\nrunning build_py\ncreating build\ncreating build/lib.macosx-10.9-intel-2.7\ncreating build/lib.macosx-10.9-intel-2.7/wrapt\ncopying src/__init__.py -> build/lib.macosx-10.9-intel-2.7/wrapt\ncopying src/arguments.py -> build/lib.macosx-10.9-intel-2.7/wrapt\ncopying src/decorators.py -> build/lib.macosx-10.9-intel-2.7/wrapt\ncopying src/importer.py -> build/lib.macosx-10.9-intel-2.7/wrapt\ncopying src/six.py -> build/lib.macosx-10.9-intel-2.7/wrapt\ncopying src/wrappers.py -> build/lib.macosx-10.9-intel-2.7/wrapt\nrunning build_ext\nbuilding 'wrapt._wrappers' extension\ncreating build/temp.macosx-10.9-intel-2.7\ncreating build/temp.macosx-10.9-intel-2.7/src\ncc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -mno-fused-madd -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c src/_wrappers.c -o build/temp.macosx-10.9-intel-2.7/src/_wrappers.o\nclang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]\nclang: note: this will be a hard error (cannot be downgraded to a warning) in the future\n***************************************************************************\n\nWARNING: The C extension component for wrapt could not be compiled.\n\nINFO: Trying to build without extensions.\n\n***************************************************************************\nrunning install\nrunning build\nrunning build_py\ncreating build/lib\ncreating build/lib/wrapt\ncopying src/__init__.py -> build/lib/wrapt\ncopying src/arguments.py -> build/lib/wrapt\ncopying src/decorators.py -> build/lib/wrapt\ncopying src/importer.py -> build/lib/wrapt\ncopying src/six.py -> build/lib/wrapt\ncopying src/wrappers.py -> build/lib/wrapt\nrunning install_lib\ncreating /Library/Python/2.7/site-packages/wrapt\ncopying build/lib/wrapt/__init__.py -> /Library/Python/2.7/site-packages/wrapt\ncopying build/lib/wrapt/arguments.py -> /Library/Python/2.7/site-packages/wrapt\ncopying build/lib/wrapt/decorators.py -> /Library/Python/2.7/site-packages/wrapt\ncopying build/lib/wrapt/importer.py -> /Library/Python/2.7/site-packages/wrapt\ncopying build/lib/wrapt/six.py -> /Library/Python/2.7/site-packages/wrapt\ncopying build/lib/wrapt/wrappers.py -> /Library/Python/2.7/site-packages/wrapt\nbyte-compiling /Library/Python/2.7/site-packages/wrapt/__init__.py to __init__.pyc\nbyte-compiling /Library/Python/2.7/site-packages/wrapt/arguments.py to arguments.pyc\nbyte-compiling /Library/Python/2.7/site-packages/wrapt/decorators.py to decorators.pyc\nbyte-compiling /Library/Python/2.7/site-packages/wrapt/importer.py to importer.pyc\nbyte-compiling /Library/Python/2.7/site-packages/wrapt/six.py to six.pyc\nbyte-compiling /Library/Python/2.7/site-packages/wrapt/wrappers.py to wrappers.pyc\nrunning install_egg_info\nWriting /Library/Python/2.7/site-packages/wrapt-1.8.0-py2.7.egg-info\n***************************************************************************\n\nWARNING: The C extension component for wrapt could not be compiled.\n\nINFO: Only pure Python version of package installed.\n\n***************************************************************************\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/23", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/23/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/23/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/23", "id": 34276674, "node_id": "MDU6SXNzdWUzNDI3NjY3NA==", "number": 23, "title": "Decorating a subclass fails", "user": {"login": "christophercrouzet", "id": 1691255, "node_id": "MDQ6VXNlcjE2OTEyNTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1691255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christophercrouzet", "html_url": "https://github.com/christophercrouzet", "followers_url": "https://api.github.com/users/christophercrouzet/followers", "following_url": "https://api.github.com/users/christophercrouzet/following{/other_user}", "gists_url": "https://api.github.com/users/christophercrouzet/gists{/gist_id}", "starred_url": "https://api.github.com/users/christophercrouzet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christophercrouzet/subscriptions", "organizations_url": "https://api.github.com/users/christophercrouzet/orgs", "repos_url": "https://api.github.com/users/christophercrouzet/repos", "events_url": "https://api.github.com/users/christophercrouzet/events{/privacy}", "received_events_url": "https://api.github.com/users/christophercrouzet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-05-26T01:00:28Z", "updated_at": "2014-08-22T10:59:04Z", "closed_at": "2014-08-22T10:59:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I might be doing something wrong but in both Python 2.7.5 and Python 3.3.4, the following code fails.\n\n```\nimport wrapt\n\ndef with_arguments( value ):\n    @wrapt.decorator\n    def wrapper( wrapped, instance, args, kwargs ):\n        return wrapped( *args, **kwargs )\n    return wrapper\n\nclass Ancestor( object ):\n    @with_arguments( value='myValue' )\n    class Child( object ):\n        pass\n\nprint( Ancestor.Child )\n```\n\nThe traceback is as follows:\n\n```\nTraceback (most recent call last):\n  File \"/Users/christopher/Desktop/decorator/test.py\", line 15, in <module>\n    print( Ancestor.Child )\n  File \"/Users/christopher/Desktop/decorator/wrapt/wrappers.py\", line 428, in __get__\n    descriptor = self.__wrapped__.__get__(instance, owner)\nAttributeError: type object 'Child' has no attribute '__get__'\n```\n\nAs a temporary workaround I've wrapped the content of the `_FunctionWrapperBase::__get__()` method into a `try/except` statement that returns `self` when an exception is raised. Sounds quite hacky though! :)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/22", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/22/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/22/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/22", "id": 34267624, "node_id": "MDU6SXNzdWUzNDI2NzYyNA==", "number": 22, "title": "Can't inspect decorated class", "user": {"login": "christophercrouzet", "id": 1691255, "node_id": "MDQ6VXNlcjE2OTEyNTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1691255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christophercrouzet", "html_url": "https://github.com/christophercrouzet", "followers_url": "https://api.github.com/users/christophercrouzet/followers", "following_url": "https://api.github.com/users/christophercrouzet/following{/other_user}", "gists_url": "https://api.github.com/users/christophercrouzet/gists{/gist_id}", "starred_url": "https://api.github.com/users/christophercrouzet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christophercrouzet/subscriptions", "organizations_url": "https://api.github.com/users/christophercrouzet/orgs", "repos_url": "https://api.github.com/users/christophercrouzet/repos", "events_url": "https://api.github.com/users/christophercrouzet/events{/privacy}", "received_events_url": "https://api.github.com/users/christophercrouzet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2014-05-25T16:23:16Z", "updated_at": "2014-08-22T11:00:29Z", "closed_at": "2014-08-22T11:00:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Python 2.7.5, I can't seem to run `inspect.getmembers()` on a class that has been decorated.\n\n```\nimport inspect\nimport wrapt\n\n@wrapt.decorator\ndef pass_through(wrapped, instance, args, kwargs):\n    return wrapped(*args, **kwargs)\n\n@pass_through\nclass Class(object):\n    pass\n\nfor name, item in inspect.getmembers( Class ):\n    print( item )\n```\n\nThis snippet will return the following traceback.\n\n```\nTraceback (most recent call last):\n  File \"/Users/christopher/Desktop/decorator/test.py\", line 12, in <module>\n    for name, item in inspect.getmembers( Class ):\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/inspect.py\", line 253, in getmembers\n    value = getattr(object, key)\nTypeError: descriptor '__weakref__' for '_ObjectProxyMethods' objects doesn't apply to 'FunctionWrapper' object\n```\n\nThe same snippet is working in Python 3.3.4 though.\n\nCheers,\nChristopher.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/21", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/21/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/21/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/21", "id": 33553887, "node_id": "MDU6SXNzdWUzMzU1Mzg4Nw==", "number": 21, "title": "Subclassing proxied classes fails", "user": {"login": "ohanar", "id": 1442822, "node_id": "MDQ6VXNlcjE0NDI4MjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1442822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohanar", "html_url": "https://github.com/ohanar", "followers_url": "https://api.github.com/users/ohanar/followers", "following_url": "https://api.github.com/users/ohanar/following{/other_user}", "gists_url": "https://api.github.com/users/ohanar/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohanar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohanar/subscriptions", "organizations_url": "https://api.github.com/users/ohanar/orgs", "repos_url": "https://api.github.com/users/ohanar/repos", "events_url": "https://api.github.com/users/ohanar/events{/privacy}", "received_events_url": "https://api.github.com/users/ohanar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-05-15T04:08:04Z", "updated_at": "2014-08-22T11:01:53Z", "closed_at": "2014-08-22T11:01:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "In python 3.4 (and probably other versions, just didn't test against them), if you try the following:\n\n```\n@wrapt.CallableObjectProxy\nclass Foo:\n    pass\nclass Foo(Bar):\n    pass\n```\n\nYou will get a `TypeError` complaining about the number of arguments you are passing to the `ObjectProxy` constructor (at least with the c-extension version).\n\nI tried fiddling with this a little, but I couldn't really think of any way to fix this. At the very least, if this is not fixable, this behavior should be documented.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/20", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/20/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/20/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/20", "id": 32223152, "node_id": "MDU6SXNzdWUzMjIyMzE1Mg==", "number": 20, "title": "Add wrapper for overriding instance attribute access.", "user": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 41454862, "node_id": "MDU6TGFiZWw0MTQ1NDg2Mg==", "url": "https://api.github.com/repos/GrahamDumpleton/wrapt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-04-25T11:10:17Z", "updated_at": "2014-04-25T11:31:45Z", "closed_at": "2014-04-25T11:31:45Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Add wrapper for overriding instance attribute access.\n\nThis would be used where it is necessary to wrap the object returned when an attribute of an object is accessed. It would work by adding a data descriptor on the class corresponding to the attribute that would exist on the instance.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/19", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/19/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/19/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/19", "id": 31822682, "node_id": "MDU6SXNzdWUzMTgyMjY4Mg==", "number": 19, "title": "Testing fails", "user": {"login": "Jawabiscuit", "id": 219464, "node_id": "MDQ6VXNlcjIxOTQ2NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/219464?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jawabiscuit", "html_url": "https://github.com/Jawabiscuit", "followers_url": "https://api.github.com/users/Jawabiscuit/followers", "following_url": "https://api.github.com/users/Jawabiscuit/following{/other_user}", "gists_url": "https://api.github.com/users/Jawabiscuit/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jawabiscuit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jawabiscuit/subscriptions", "organizations_url": "https://api.github.com/users/Jawabiscuit/orgs", "repos_url": "https://api.github.com/users/Jawabiscuit/repos", "events_url": "https://api.github.com/users/Jawabiscuit/events{/privacy}", "received_events_url": "https://api.github.com/users/Jawabiscuit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-04-18T20:28:19Z", "updated_at": "2014-08-22T11:02:44Z", "closed_at": "2014-08-22T11:02:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is my first time using py.test and tox.  I'm trying to run the the test suite and ran into some errors.  The test failed to complete.  Software info is in the test log pastebin.\n\nTest log:\nhttp://pastebin.com/x0AmwTYM\n\nMore system info:\n\nOS:\nhttp://www.jonasavrin.com/wp-content/uploads/2014/04/win7_sys_info_manager_os.html\nHardware:\nhttp://www.jonasavrin.com/wp-content/uploads/2014/04/win7_sys_info_manager_hardware.html\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/18", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/18/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/18/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/18", "id": 30467727, "node_id": "MDU6SXNzdWUzMDQ2NzcyNw==", "number": 18, "title": "IndexError when calling wrapped function from the class", "user": {"login": "ionelmc", "id": 129501, "node_id": "MDQ6VXNlcjEyOTUwMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/129501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionelmc", "html_url": "https://github.com/ionelmc", "followers_url": "https://api.github.com/users/ionelmc/followers", "following_url": "https://api.github.com/users/ionelmc/following{/other_user}", "gists_url": "https://api.github.com/users/ionelmc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionelmc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionelmc/subscriptions", "organizations_url": "https://api.github.com/users/ionelmc/orgs", "repos_url": "https://api.github.com/users/ionelmc/repos", "events_url": "https://api.github.com/users/ionelmc/events{/privacy}", "received_events_url": "https://api.github.com/users/ionelmc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2014-03-30T15:50:40Z", "updated_at": "2014-04-25T12:18:47Z", "closed_at": "2014-04-25T12:18:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\nfrom wrapt import decorator\n\n@decorator\ndef simple_logger(*arg):\n    print 'prefix', arg\n\nclass A(object):\n\n    @simple_logger\n    def boo(self, *arg):\n        print arg\n\nA.boo()\n```\n\nthat will result in:\n\n```\nTraceback (most recent call last):\n  File \"test.py\", line 13, in <module>\n    A.boo()\n  File \"/local/lib/python2.7/site-packages/wrapt/wrappers.py\", line 485, in __call__\n    instance, args = args[0], args[1:]\nIndexError: tuple index out of range\n```\n\nwith the C extension installed it's:\n\n```\nTraceback (most recent call last):\n  File \"test.py\", line 13, in <module>\n    A.boo()\nIndexError: tuple index out of range\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/17", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/17/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/17/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/17", "id": 30304546, "node_id": "MDU6SXNzdWUzMDMwNDU0Ng==", "number": 17, "title": "Argument passing to decorator doesn't match \"native\" behaviour", "user": {"login": "simonpercivall", "id": 153659, "node_id": "MDQ6VXNlcjE1MzY1OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/153659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonpercivall", "html_url": "https://github.com/simonpercivall", "followers_url": "https://api.github.com/users/simonpercivall/followers", "following_url": "https://api.github.com/users/simonpercivall/following{/other_user}", "gists_url": "https://api.github.com/users/simonpercivall/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonpercivall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonpercivall/subscriptions", "organizations_url": "https://api.github.com/users/simonpercivall/orgs", "repos_url": "https://api.github.com/users/simonpercivall/repos", "events_url": "https://api.github.com/users/simonpercivall/events{/privacy}", "received_events_url": "https://api.github.com/users/simonpercivall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-03-27T14:26:35Z", "updated_at": "2014-04-25T11:06:59Z", "closed_at": "2014-04-25T11:06:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "The argument passing to a decorator is \"different\" from how an undecorated function works, in that parameters defined as regular arguments gets put into \"kwargs\" if passed by name to the decorated function:\n\n```\nimport inspect\nimport wrapt\n\n@wrapt.decorator\ndef dec(wrapped, instance, args, kwargs):\n    print instance, args, kwargs\n    return wrapped(*args, **kwargs)\n\n@dec\ndef foo(bar, baz):\n    pass\n\nfoo(1,2)\n    -> None (1, 2) {}\nfoo(baz=1,bar=2)\n    -> None () {'baz': 1, 'bar': 2}\n\ninspect.getargspec(foo)\n    -> ArgSpec(args=['bar', 'baz'], varargs=None, keywords=None, defaults=None)\n```\n\nThis is mainly an issue for argument introspection in the decorator, and the \"workaround\" to have an inner wrapper is unwieldy when it works, and doesn't work at all for some uses.\n\nThe `decorator` package solves this issue by creating a new function with the correct signature, but I'd like it a lot if I could standardize on the `wrapt` package.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/15", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/15/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/15/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/15", "id": 26908046, "node_id": "MDU6SXNzdWUyNjkwODA0Ng==", "number": 15, "title": "wrapt.decorator does not work with super", "user": {"login": "Hornswoggles", "id": 531325, "node_id": "MDQ6VXNlcjUzMTMyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/531325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hornswoggles", "html_url": "https://github.com/Hornswoggles", "followers_url": "https://api.github.com/users/Hornswoggles/followers", "following_url": "https://api.github.com/users/Hornswoggles/following{/other_user}", "gists_url": "https://api.github.com/users/Hornswoggles/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hornswoggles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hornswoggles/subscriptions", "organizations_url": "https://api.github.com/users/Hornswoggles/orgs", "repos_url": "https://api.github.com/users/Hornswoggles/repos", "events_url": "https://api.github.com/users/Hornswoggles/events{/privacy}", "received_events_url": "https://api.github.com/users/Hornswoggles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-02-04T19:23:46Z", "updated_at": "2014-04-20T21:32:33Z", "closed_at": "2014-04-20T21:32:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\nimport wrapt\n\n@wrapt.decorator\ndef wrap(wrapped, instance, args, kwargs):\n    return wrapped(*args, **kwargs)\n\n\nclass Class1(object):\n    def __init__(self):\n        print '1'\n\n@wrap\nclass Class2(Class1):\n    def __init__(self):\n        print '2'\n        super(Class2, self).__init__()\n\nd=Class2()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"wrap.py\", line 22, in <module>\n    d=Class2()\n  File \"wrap.py\", line 6, in wrap\n    return wrapped(*args, **kwargs)\n  File \"wrap.py\", line 17, in __init__\n    super(Class2, self).__init__()\nTypeError: must be type, not FunctionWrapper\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/14", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/14/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/14/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/14", "id": 24947655, "node_id": "MDU6SXNzdWUyNDk0NzY1NQ==", "number": 14, "title": "transient_function_wrapper can't be used on class methods", "user": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-01-01T23:36:08Z", "updated_at": "2014-01-02T10:10:25Z", "closed_at": "2014-01-02T10:10:25Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Cant do something like:\n\n```\nclass transient_with_arguments(object):\n\n    def __init__(self, myarg1, myarg2):\n        self.myarg1 = myarg1\n        self.myarg2 = myarg2\n\n    @wrapt.transient_function_wrapper('module', 'object')\n    def __call__(self, wrapped, instance, args, kwargs):\n        return wrapped(*args, **kwargs)\n\n@transient_with_arguments(1, 2)\ndef function():\n    pass\n```\n\nNeeds to be made aware of when being applied to class methods as was done for decorator/function_wrapper.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/13", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/13/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/13/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/13", "id": 24947468, "node_id": "MDU6SXNzdWUyNDk0NzQ2OA==", "number": 13, "title": "Better error message when transient_function_wrapper given bad target object to patch.", "user": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-01-01T23:21:14Z", "updated_at": "2014-01-02T10:10:18Z", "closed_at": "2014-01-02T10:10:18Z", "author_association": "OWNER", "active_lock_reason": null, "body": "```\ndef transient_function_wrapper(module, name):\n    def _decorator(wrapper):\n        @function_wrapper\n        def _wrapper(wrapped, instance, args, kwargs):\n            try:\n                (parent, attribute, original) = resolve_path(module, name)\n                replacement = FunctionWrapper(original, wrapper)\n                setattr(parent, attribute, replacement)\n                return wrapped(*args, **kwargs)\n            finally:\n                setattr(parent, attribute, original)\n        return _wrapper\n    return _decorator\n```\n\nIf resolve_path() fails parent will not be set, yet in the finally clause parent is used giving:\n\nUnboundLocalError: local variable 'parent' referenced before assignment\n\nNot obvious what original problem was as original exception masked.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/12", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/12/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/12/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/12", "id": 24596267, "node_id": "MDU6SXNzdWUyNDU5NjI2Nw==", "number": 12, "title": "Passing None for wrapped function to FunctionWrapper causes crash with C extension.", "user": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 41454860, "node_id": "MDU6TGFiZWw0MTQ1NDg2MA==", "url": "https://api.github.com/repos/GrahamDumpleton/wrapt/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-12-19T23:37:07Z", "updated_at": "2013-12-20T09:57:17Z", "closed_at": "2013-12-20T09:57:17Z", "author_association": "OWNER", "active_lock_reason": null, "body": "That is, if do the following it will crash.\n\n```\nwrapt.FunctionWrapper(None, wrapper)\n```\n\nIn WraptFunctionWrapperBase_descr_get() there is no check whether target has a non NULL tp_descr_get before invoking it.\n\n```\n    descriptor = (Py_TYPE(self->object_proxy.wrapped)->tp_descr_get)(\n            self->object_proxy.wrapped, obj, type);\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/10", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/10/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/10/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/10", "id": 24096055, "node_id": "MDU6SXNzdWUyNDA5NjA1NQ==", "number": 10, "title": "Need to proxy __round__.", "user": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2013-12-11T09:50:38Z", "updated_at": "2014-04-20T20:34:53Z", "closed_at": "2014-04-20T20:34:53Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Need to proxy `__round__`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/9", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/9/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/9/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/9", "id": 24096036, "node_id": "MDU6SXNzdWUyNDA5NjAzNg==", "number": 9, "title": "Need to proxy __complex__.", "user": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2013-12-11T09:50:17Z", "updated_at": "2014-04-20T20:17:19Z", "closed_at": "2014-04-20T20:17:19Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Need to proxy `__complex__`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/8", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/8/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/8/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/8", "id": 24095956, "node_id": "MDU6SXNzdWUyNDA5NTk1Ng==", "number": 8, "title": "Need to proxy __reversed__.", "user": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2013-12-11T09:48:44Z", "updated_at": "2014-04-20T13:00:30Z", "closed_at": "2014-04-20T13:00:30Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Need to proxy `__reversed__`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/7", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/7/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/7/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/7", "id": 24095849, "node_id": "MDU6SXNzdWUyNDA5NTg0OQ==", "number": 7, "title": "Need to proxy __format__.", "user": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2013-12-11T09:46:21Z", "updated_at": "2014-04-20T20:17:43Z", "closed_at": "2014-04-20T11:48:18Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Need to proxy `__format__`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/6", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/6/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/6/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/6", "id": 24095827, "node_id": "MDU6SXNzdWUyNDA5NTgyNw==", "number": 6, "title": "Need to proxy __bytes__.", "user": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 41454862, "node_id": "MDU6TGFiZWw0MTQ1NDg2Mg==", "url": "https://api.github.com/repos/GrahamDumpleton/wrapt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2013-12-11T09:46:03Z", "updated_at": "2014-04-20T11:31:18Z", "closed_at": "2014-04-20T11:31:18Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Need to proxy `__bytes__`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/4", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/4/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/4/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/4", "id": 20104782, "node_id": "MDU6SXNzdWUyMDEwNDc4Mg==", "number": 4, "title": "Only getter property in custom wrapper works, not setter/deleter.", "user": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 41454860, "node_id": "MDU6TGFiZWw0MTQ1NDg2MA==", "url": "https://api.github.com/repos/GrahamDumpleton/wrapt/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2013-09-26T11:47:58Z", "updated_at": "2013-09-27T02:23:41Z", "closed_at": "2013-09-27T02:23:41Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In code:\n\n```\nimport wrapt\n\nclass CustomProxy(wrapt.ObjectProxy):\n\n    def __init__(self, wrapped):\n        super(CustomProxy, self).__init__(wrapped)\n        self._self_attribute = 1\n\n    @property\n    def attribute(self):\n        return self._self_attribute\n\n    @attribute.setter\n    def attribute(self, value):\n        self._self_attribute = value\n\n    @attribute.deleter\n    def attribute(self):\n        del self._self_attribute\n\np = CustomProxy(None)\n\nprint p.attribute\np.attribute = 2\ndel p.attribute\n```\n\naccessing 'attribute' from the proxy works, but updating the attribute or deleting the attribute flows through and is attempted on the wrapped object.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/2", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/2/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/2/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/2", "id": 19970190, "node_id": "MDU6SXNzdWUxOTk3MDE5MA==", "number": 2, "title": "Signature preservation when using adapters not working for bound functions.", "user": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 41454860, "node_id": "MDU6TGFiZWw0MTQ1NDg2MA==", "url": "https://api.github.com/repos/GrahamDumpleton/wrapt/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2013-09-24T11:03:43Z", "updated_at": "2013-11-22T11:17:41Z", "closed_at": "2013-11-22T11:17:41Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Signature preservation when using adapters works where decorating a normal function, but where decorating an instance or class method, when the bound method is accessed, then signature preservation, as checked by inspect.getargspec() is not giving the correct result on the bound method.\n\nNote this only applies to where an adapter function is being supplied to the decorator for signature changing decorators. It is not an issue for a normal decorator which isn't changing the signature.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/1", "repository_url": "https://api.github.com/repos/GrahamDumpleton/wrapt", "labels_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/1/comments", "events_url": "https://api.github.com/repos/GrahamDumpleton/wrapt/issues/1/events", "html_url": "https://github.com/GrahamDumpleton/wrapt/issues/1", "id": 18905395, "node_id": "MDU6SXNzdWUxODkwNTM5NQ==", "number": 1, "title": "Require explicit decorator factories where appropriate", "user": {"login": "ncoghlan", "id": 1026649, "node_id": "MDQ6VXNlcjEwMjY2NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1026649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ncoghlan", "html_url": "https://github.com/ncoghlan", "followers_url": "https://api.github.com/users/ncoghlan/followers", "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}", "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions", "organizations_url": "https://api.github.com/users/ncoghlan/orgs", "repos_url": "https://api.github.com/users/ncoghlan/repos", "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}", "received_events_url": "https://api.github.com/users/ncoghlan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 41454862, "node_id": "MDU6TGFiZWw0MTQ1NDg2Mg==", "url": "https://api.github.com/repos/GrahamDumpleton/wrapt/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "GrahamDumpleton", "id": 507637, "node_id": "MDQ6VXNlcjUwNzYzNw==", "avatar_url": "https://avatars2.githubusercontent.com/u/507637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GrahamDumpleton", "html_url": "https://github.com/GrahamDumpleton", "followers_url": "https://api.github.com/users/GrahamDumpleton/followers", "following_url": "https://api.github.com/users/GrahamDumpleton/following{/other_user}", "gists_url": "https://api.github.com/users/GrahamDumpleton/gists{/gist_id}", "starred_url": "https://api.github.com/users/GrahamDumpleton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GrahamDumpleton/subscriptions", "organizations_url": "https://api.github.com/users/GrahamDumpleton/orgs", "repos_url": "https://api.github.com/users/GrahamDumpleton/repos", "events_url": "https://api.github.com/users/GrahamDumpleton/events{/privacy}", "received_events_url": "https://api.github.com/users/GrahamDumpleton/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2013-09-03T12:34:51Z", "updated_at": "2013-09-04T02:55:59Z", "closed_at": "2013-09-04T02:55:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having a real new-style proxy type available is very cool, but the current API design and docs perpetuate a terminology problem we've been trying to fix in the core docs for years. Decorators are callables that accept a callable as their sole positional argument, and return an appropriate result derived from that callable. A callable that accepts arbitrary parameters and returns a decorator is a decorator _factory_, and not itself a decorator.\n\nThe consequence of blurring the lines is clear in this paragraph in the current docs:\n\n\"Note that even if all your decorator arguments have default values, or you only have a variable arguments list or keyword argument dictionary, you must still provide the parantheses to the decorator when used. Once you opt to have the decorator be able to accept arguments the use of the parentheses is not optional.\"\n\nThis paragraph shows that wrapt.decorator is implementing _two_ different concepts: it declares a decorator, _or_ a decorator factory, but you have to look at the signature definition of the wrapped object to decide which it is. That's dubious-but-tolerable if you use it solely as a decorator expression adjacent to the signature of the wrapped function, but completely unworkable if used as a dynamic wrapper - you don't know if the result will be a decorator or a decorator factory, because it depends on the signature of the supplied callable.\n\nRather than have the behaviour magically change based on whether the wrapped callable accepts additional argument beyond the required four, why not require people to write ordinary closures:\n\n```\nimport wrapt\n\ndef with_arguments(myarg1, myarg2):\n    @wrapt.decorator\n    def wrapper(wrapped, instance, args, kwargs):\n        return wrapped(*args, **kwargs)\n    return wrapper\n\n@with_arguments(1, 2)\ndef function():\n    pass\n```\n\nThe other advantage of this approach is that any derived values of the factory arguments can be calculated _once_ in the closure, rather than needing to be recalculated on each iteration.\n", "performed_via_github_app": null, "score": 1.0}]}