{"total_count": 62, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/142", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/142/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/142/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/142", "id": 517302683, "node_id": "MDU6SXNzdWU1MTczMDI2ODM=", "number": 142, "title": "Specify multiple return values with list using CoroutineMock", "user": {"login": "elenaoat", "id": 3646926, "node_id": "MDQ6VXNlcjM2NDY5MjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3646926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elenaoat", "html_url": "https://github.com/elenaoat", "followers_url": "https://api.github.com/users/elenaoat/followers", "following_url": "https://api.github.com/users/elenaoat/following{/other_user}", "gists_url": "https://api.github.com/users/elenaoat/gists{/gist_id}", "starred_url": "https://api.github.com/users/elenaoat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elenaoat/subscriptions", "organizations_url": "https://api.github.com/users/elenaoat/orgs", "repos_url": "https://api.github.com/users/elenaoat/repos", "events_url": "https://api.github.com/users/elenaoat/events{/privacy}", "received_events_url": "https://api.github.com/users/elenaoat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-04T17:39:38Z", "updated_at": "2019-11-04T18:14:40Z", "closed_at": "2019-11-04T18:13:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to specify multiple return values, as in case of MagicMock: \r\n`MagicMock(side_effect=[1, 2])`? This doesn't seem to work with CoroutineMock.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/141", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/141/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/141/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/141", "id": 502936749, "node_id": "MDU6SXNzdWU1MDI5MzY3NDk=", "number": 141, "title": "Patching a more dififcult library like asyncpg?", "user": {"login": "fgimian", "id": 1811813, "node_id": "MDQ6VXNlcjE4MTE4MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1811813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fgimian", "html_url": "https://github.com/fgimian", "followers_url": "https://api.github.com/users/fgimian/followers", "following_url": "https://api.github.com/users/fgimian/following{/other_user}", "gists_url": "https://api.github.com/users/fgimian/gists{/gist_id}", "starred_url": "https://api.github.com/users/fgimian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fgimian/subscriptions", "organizations_url": "https://api.github.com/users/fgimian/orgs", "repos_url": "https://api.github.com/users/fgimian/repos", "events_url": "https://api.github.com/users/fgimian/events{/privacy}", "received_events_url": "https://api.github.com/users/fgimian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-05T08:52:57Z", "updated_at": "2019-10-06T04:16:41Z", "closed_at": "2019-10-06T04:16:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there, absolutely love this library! \ud83d\ude04 \r\n\r\nI'm really really struggling with something that should in theory be trivial.  I'm using the [asyncpg](https://github.com/MagicStack/asyncpg) library and am attempting to mock the `create_pool` function.\r\n\r\nThe strange thing about this library is that `connect_pool` is actually not defined as async, but it creates an instance of a class named `Pool` which has an `__await__` method which calls another method that's defined as async ... which then calls another .etc\r\n\r\nSo this seems to be the flow:\r\n\r\n`create_pool` creates a `Pool` object:\r\n\r\n```python\r\ndef create_pool(...)\r\n    return Pool(...)\r\n```\r\n\r\nThis has an `__await__` method:\r\n\r\n```python\r\n    def __await__(self):\r\n        return self._async__init__().__await__()\r\n```\r\n\r\nThat calls an async method which ultimatel calls another:\r\n\r\n```python\r\n    async def _async__init__(self):\r\n    ...\r\n            await self._initialize()\r\n    ...\r\n```\r\n\r\nAnd that finally calls the connect async method from another class `PoolConnectionHolder`:\r\n\r\n```\r\n    async def _initialize(self):\r\n        if self._minsize:\r\n    ....\r\n            first_ch = self._holders[-1]  # type: PoolConnectionHolder\r\n            await first_ch.connect()\r\n    ....\r\n```\r\n\r\nSo this is a bit of a headache to comprehend, but ultimately, a basic mock of `create_pool` doesn't work:\r\n\r\n```python\r\nimport asynctest\r\nimport asyncpg\r\n\r\nwith asynctest.patch(\"asyncpg.create_pool\") as create_pool_mock:\r\n    await asyncpg.create_pool()\r\n```\r\n\r\nThe only way I've gotten it to work so far is patching the very bottom `connect` method like so:\r\n\r\n```python\r\nwith asynctest.patch(\"asyncpg.pool.PoolConnectionHolder\") as holder_mock:\r\n    holder_mock.return_value.connect = asynctest.CoroutineMock(return_value=\"boo\")\r\n    await asyncpg.create_pool()\r\n```\r\n\r\nI'm continuing to try further ideas but ultimately, I want to mock the `create_pool` function and make it return a `MagicMock` `Pool` object so I can mock various methods in there.\r\n\r\nI realise this is more of a question than a bug, but I wonder if anyone could maybe provide some suggestions on how to handle this as I'm really stuck?\r\n\r\nHuge love and thanks\r\nFotis", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/131", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/131/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/131/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/131", "id": 462320175, "node_id": "MDU6SXNzdWU0NjIzMjAxNzU=", "number": 131, "title": "__anext__ mocking", "user": {"login": "x0zzz", "id": 24893507, "node_id": "MDQ6VXNlcjI0ODkzNTA3", "avatar_url": "https://avatars2.githubusercontent.com/u/24893507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/x0zzz", "html_url": "https://github.com/x0zzz", "followers_url": "https://api.github.com/users/x0zzz/followers", "following_url": "https://api.github.com/users/x0zzz/following{/other_user}", "gists_url": "https://api.github.com/users/x0zzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/x0zzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/x0zzz/subscriptions", "organizations_url": "https://api.github.com/users/x0zzz/orgs", "repos_url": "https://api.github.com/users/x0zzz/repos", "events_url": "https://api.github.com/users/x0zzz/events{/privacy}", "received_events_url": "https://api.github.com/users/x0zzz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-29T16:56:54Z", "updated_at": "2019-06-30T06:46:34Z", "closed_at": "2019-06-30T06:46:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, how should I mock `__anext__` method so it returns a list element with each iteration in an `async for` construct?\r\nHere's a snippet of what I tried and failed at:\r\n\r\n    from asyncio import get_event_loop\r\n    from asynctest import create_autospec\r\n\r\n    class A(object):\r\n        def __aiter__(self):\r\n            return self\r\n    \r\n        async def __anext__(self):\r\n            print('A.__anext__()')\r\n            raise StopAsyncIteration\r\n    \r\n    async def test(obj):\r\n        async for cnt in obj:\r\n            print(cnt)\r\n    \r\n    mock = create_autospec(A)\r\n    mock.__anext__.side_effect = [4,5,6]\r\n    \r\n    get_event_loop().run_until_complete(test(A()))\r\n    get_event_loop().run_until_complete(test(mock))\r\n    print(mock.mock_calls)\r\n\r\nWhen I run it I get:\r\n\r\n    A.__anext__()\r\n    [call.__aiter__()]\r\n\r\nSeems that mock's `__anext__` method is never called.\r\nWhat am I doing wrong here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/128", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/128/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/128/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/128", "id": 451544041, "node_id": "MDU6SXNzdWU0NTE1NDQwNDE=", "number": 128, "title": "TestSelector cannot find a previously opened file descriptor.", "user": {"login": "toffan", "id": 10775773, "node_id": "MDQ6VXNlcjEwNzc1Nzcz", "avatar_url": "https://avatars1.githubusercontent.com/u/10775773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toffan", "html_url": "https://github.com/toffan", "followers_url": "https://api.github.com/users/toffan/followers", "following_url": "https://api.github.com/users/toffan/following{/other_user}", "gists_url": "https://api.github.com/users/toffan/gists{/gist_id}", "starred_url": "https://api.github.com/users/toffan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toffan/subscriptions", "organizations_url": "https://api.github.com/users/toffan/orgs", "repos_url": "https://api.github.com/users/toffan/repos", "events_url": "https://api.github.com/users/toffan/events{/privacy}", "received_events_url": "https://api.github.com/users/toffan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-03T15:21:00Z", "updated_at": "2019-07-16T17:21:30Z", "closed_at": "2019-07-16T17:21:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello @Martiusweb\r\n\r\nFirst, thanks a lot for the library. We use it in my company to test our asynchronous library and it is so helpful. I encountered an issue using asynctest 0.13.0 with python 3.7.3. Here is the\r\ndescription.\r\n\r\n## Issue\r\n\r\nI want to use the same http session during all my tests. To do so I open it in `setUpClass` and then just keep it in my tests. However it results in a desynchronisation between `TestSelector._fd_to_key` and `TestSelector._selector._fd_to_key` because `cls.loop._selector` is different between `setUpClass` and a regular test (patched in `TestCase._patch_loop`).\r\n\r\nIn my example I use aiohttp to ease the reading but it is not meaningful here because the issue seems to be related to the underlying socket.\r\n\r\n## Steps to reproduce\r\n\r\nThe testcase I use.\r\n```python\r\n# test.py\r\nimport aiohttp\r\nimport asyncio\r\nimport asynctest\r\n\r\n\r\nclass TestSSCCE(asynctest.TestCase):\r\n\r\n    use_default_loop = True\r\n    forbid_get_event_loop = False\r\n\r\n    @classmethod\r\n    def setUpClass(cls):\r\n        cls.loop = asyncio.get_event_loop()\r\n        cls.loop.run_until_complete(cls.initialize())\r\n\r\n    @classmethod\r\n    async def initialize(cls):\r\n        cls.session = await aiohttp.ClientSession().__aenter__()\r\n        await cls.session.get(\"http://172.17.0.2/\")\r\n\r\n    @classmethod\r\n    def tearDownClass(cls):\r\n        try:\r\n            cls.loop.run_until_complete(\r\n                cls.session.__aexit__(None, None, None)\r\n            )\r\n        finally:\r\n            cls.loop.close()\r\n\r\n    async def test(self):\r\n        content = \"A\" * 256 * 1024\r\n        async with self.session.get(\r\n            \"http://172.17.0.2/\",\r\n            data=content\r\n        ) as resp:\r\n            print(await resp.read())\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    asynctest.main()\r\n```\r\nHere are the actual steps I use to reproduce the issue. Note that some parts have been eluded (virtualenv creation). If necessary I can provide a more complete list of steps.\r\n```console\r\n$ # First run a counterpart web server\r\n$ sudo docker run -ti --name webserver --rm nginx\r\n$ # Get the IP address of the container. Note that it is the one used in test.py\r\n$ sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}' webserver\r\n172.17.0.2\r\n$ # Install dependencies\r\n$ pip install asynctest==0.13.0 aiohttp==3.5.4\r\n$ python -V           \r\nPython 3.7.3\r\n$ python test.py\r\n[...]\r\nKeyError: '6 is not registered'\r\n[...]\r\nKeyError: '6 (FD 6) is already registered'\r\n```\r\n\r\nBelow is the complete stack trace.\r\n```text\r\n$ python test.py\r\nE\r\n======================================================================\r\nERROR: test (__main__.TestSSCCE)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/lib64/python3.7/asyncio/selector_events.py\", line 287, in _add_writer\r\n    key = self._selector.get_key(fd)\r\n  File \"/usr/lib64/python3.7/selectors.py\", line 192, in get_key\r\n    raise KeyError(\"{!r} is not registered\".format(fileobj)) from None\r\nKeyError: '6 is not registered'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/toffan/.virtualenvs/test-asynctest/lib/python3.7/site-packages/asynctest/case.py\", line 297, in run\r\n    self._run_test_method(testMethod)\r\n  File \"/home/toffan/.virtualenvs/test-asynctest/lib/python3.7/site-packages/asynctest/case.py\", line 354, in _run_test_method\r\n    self.loop.run_until_complete(result)\r\n  File \"/home/toffan/.virtualenvs/test-asynctest/lib/python3.7/site-packages/asynctest/case.py\", line 224, in wrapper\r\n    return method(*args, **kwargs)\r\n  File \"/usr/lib64/python3.7/asyncio/base_events.py\", line 584, in run_until_complete\r\n    return future.result()\r\n  File \"test.py\", line 34, in test\r\n    data=content\r\n  File \"/home/toffan/.virtualenvs/test-asynctest/lib/python3.7/site-packages/aiohttp/client.py\", line 1005, in __aenter__\r\n    self._resp = await self._coro\r\n  File \"/home/toffan/.virtualenvs/test-asynctest/lib/python3.7/site-packages/aiohttp/client.py\", line 497, in _request\r\n    await resp.start(conn)\r\n  File \"/home/toffan/.virtualenvs/test-asynctest/lib/python3.7/site-packages/aiohttp/client_reqrep.py\", line 844, in start\r\n    message, payload = await self._protocol.read()  # type: ignore  # noqa\r\n  File \"/home/toffan/.virtualenvs/test-asynctest/lib/python3.7/site-packages/aiohttp/streams.py\", line 588, in read\r\n    await self._waiter\r\n  File \"/home/toffan/.virtualenvs/test-asynctest/lib/python3.7/site-packages/aiohttp/client_reqrep.py\", line 553, in write_bytes\r\n    await self.body.write(writer)\r\n  File \"/home/toffan/.virtualenvs/test-asynctest/lib/python3.7/site-packages/aiohttp/payload.py\", line 231, in write\r\n    await writer.write(self._value)\r\n  File \"/home/toffan/.virtualenvs/test-asynctest/lib/python3.7/site-packages/aiohttp/http_writer.py\", line 101, in write\r\n    self._write(chunk)\r\n  File \"/home/toffan/.virtualenvs/test-asynctest/lib/python3.7/site-packages/aiohttp/http_writer.py\", line 68, in _write\r\n    self._transport.write(chunk)\r\n  File \"/usr/lib64/python3.7/asyncio/selector_events.py\", line 868, in write\r\n    self._loop._add_writer(self._sock_fd, self._write_ready)\r\n  File \"/usr/lib64/python3.7/asyncio/selector_events.py\", line 290, in _add_writer\r\n    (None, handle))\r\n  File \"/home/toffan/.virtualenvs/test-asynctest/lib/python3.7/site-packages/asynctest/selector.py\", line 241, in register\r\n    key = self._selector.register(fileobj, events, data)\r\n  File \"/usr/lib64/python3.7/selectors.py\", line 352, in register\r\n    key = super().register(fileobj, events, data)\r\n  File \"/usr/lib64/python3.7/selectors.py\", line 242, in register\r\n    .format(fileobj, key.fd))\r\nKeyError: '6 (FD 6) is already registered'\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.004s\r\n\r\nFAILED (errors=1)\r\n```\r\n\r\nIt has also been reproduced with python 3.5.7 or asynctest 0.12.4\r\n\r\n## Fix\r\n\r\nI have taken a look at the issue and my first idea was to copy the `_fd_to_key` dict in `TestSelector.__init__` (cf. below) . However it does not prevent a future desynchronization between the two. Typically, `asyncio.BaseSelectorEventLoop._sock_connect` defines a callback that unregister the file descriptor from the original selector and would leave `TestSelector._fd_to_key` untouched.\r\n\r\n```python\r\nclass TestSelector(selectors._BaseSelectorImpl):\r\n    def __init__(self, selector=None):\r\n        # [...]\r\n        if selector is not None:\r\n            self._fd_to_key = selector._fd_to_key.copy()\r\n```\r\n\r\nSo I guess the fix may require some deeper change in the library. Would it be possible for you to take a look at it. Thanks a lot.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/124", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/124/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/124/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/124", "id": 440741679, "node_id": "MDU6SXNzdWU0NDA3NDE2Nzk=", "number": 124, "title": "[question] TestCase inherits from unittest.case.TestCase vs unittest.TestCase", "user": {"login": "ixje", "id": 6625537, "node_id": "MDQ6VXNlcjY2MjU1Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6625537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ixje", "html_url": "https://github.com/ixje", "followers_url": "https://api.github.com/users/ixje/followers", "following_url": "https://api.github.com/users/ixje/following{/other_user}", "gists_url": "https://api.github.com/users/ixje/gists{/gist_id}", "starred_url": "https://api.github.com/users/ixje/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ixje/subscriptions", "organizations_url": "https://api.github.com/users/ixje/orgs", "repos_url": "https://api.github.com/users/ixje/repos", "events_url": "https://api.github.com/users/ixje/events{/privacy}", "received_events_url": "https://api.github.com/users/ixje/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-06T14:57:44Z", "updated_at": "2019-05-15T11:51:11Z", "closed_at": "2019-05-15T08:36:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `TestCase` class inherits from `unittest.case.TestCase`\r\nhttps://github.com/Martiusweb/asynctest/blob/2068b222fa2461572abc64e6687e2bfe4642694e/asynctest/case.py#L119\r\n as opposed to the commonly used `unittest.TestCase`. This seems to break introspection and automated test discovery in my IDE (PyCharm). I've manually changed it to use `unittest.TestCase` and so far I've not encountered issues. \r\n\r\nThis makes me wonder; why are we not inheriting from `unittest.TestCase` and what might I be breaking by doing so?\r\n\r\n-edit\r\nfwiw I'm on python 3.7.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/122", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/122/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/122/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/122", "id": 437614757, "node_id": "MDU6SXNzdWU0Mzc2MTQ3NTc=", "number": 122, "title": "ClockedTestCase not working maybe", "user": {"login": "ja8zyjits", "id": 10775161, "node_id": "MDQ6VXNlcjEwNzc1MTYx", "avatar_url": "https://avatars2.githubusercontent.com/u/10775161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ja8zyjits", "html_url": "https://github.com/ja8zyjits", "followers_url": "https://api.github.com/users/ja8zyjits/followers", "following_url": "https://api.github.com/users/ja8zyjits/following{/other_user}", "gists_url": "https://api.github.com/users/ja8zyjits/gists{/gist_id}", "starred_url": "https://api.github.com/users/ja8zyjits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ja8zyjits/subscriptions", "organizations_url": "https://api.github.com/users/ja8zyjits/orgs", "repos_url": "https://api.github.com/users/ja8zyjits/repos", "events_url": "https://api.github.com/users/ja8zyjits/events{/privacy}", "received_events_url": "https://api.github.com/users/ja8zyjits/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-26T10:47:41Z", "updated_at": "2019-04-26T15:54:42Z", "closed_at": "2019-04-26T11:45:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "### The problem\r\nI am trying to use  the `ClockedTestCase`. Iam trying to fast forward the `asyncio.sleep` in my code while testing. But iam not able to make it work.\r\n\r\n> script.py\r\n```python\r\nimport asyncio\r\n\r\n\r\n\r\nclass WorkingModel:\r\n    def __init__(self, interval=10):\r\n        self._interval = interval\r\n        self._status = None\r\n        self._statrted = False\r\n\r\n    async def start(self):\r\n        self._statrted = True\r\n        self._sync = asyncio.ensure_future(self.sync_function())\r\n\r\n    async def sync_function(self):\r\n        while self._statrted:\r\n            await asyncio.sleep(self._interval)\r\n            self._status = 1\r\n\r\n    async def stop(self):\r\n        self._statrted = False\r\n        await self._sync\r\n```\r\n\r\n> test_script.py\r\n\r\n```python\r\nimport asynctest\r\nimport asyncio\r\nimport unittest\r\nimport script\r\n\r\nclass MainTest(asynctest.ClockedTestCase):\r\n    async def test_main(self):\r\n        working_model = script.WorkingModel()\r\n        working_model.start()\r\n        await self.advance(10)\r\n        self.assertEqual(working_model._status, 1)\r\n        working_model.stop()\r\n\r\n\r\nif __name__==\"__main__\":\r\n    unittest.main()\r\n```\r\n\r\nWhen iam running the tests with `python -m unittest` the script just hangs.\r\n\r\n```shell\r\n(asynctest_issue_virtual) jzy@jzy:~/work/asynctest_issue_virtual/scripts$ python -m unittest\r\n\r\n```\r\nNothing much happens\r\n\r\nwhile the normal `asynctest.TestCase` works but it takes time like 20 seconds (10+10)\r\n\r\n> test_script.py\r\n```python\r\nimport asynctest\r\nimport asyncio\r\nimport unittest\r\nimport script\r\n\r\n#class MainTest(asynctest.ClockedTestCase):\r\nclass MainTest(asynctest.TestCase):\r\n    async def test_main(self):\r\n        working_model = script.WorkingModel()\r\n        await working_model.start()\r\n        # await self.advance(10)\r\n        await asyncio.sleep(11)\r\n        self.assertEqual(working_model._status, 1)\r\n        await working_model.stop()\r\n\r\n\r\nif __name__==\"__main__\":\r\n    unittest.main()\r\n```\r\n\r\nWhen iam running the tests with `python -m unittest` the script it executes after 20 seconds.\r\n\r\n```shell\r\n(asynctest_issue_virtual) jzy@jzy:~/work/asynctest_issue_virtual/scripts$ python -m unittest\r\n.\r\n----------------------------------------------------------------------\r\nRan 1 test in 20.022s\r\n\r\nOK\r\n```\r\n\r\n### Support information\r\n* python version `3.6.7`\r\n* asynctest version\r\n```shell\r\nName: asynctest\r\nVersion: 0.12.4\r\nSummary: Enhance the standard unittest package with features for testing asyncio libraries\r\nHome-page: https://github.com/Martiusweb/asynctest/\r\nAuthor: Martin Richard\r\nAuthor-email: martius@martiusweb.net\r\nLicense: Apache 2\r\nLocation: /home/jzy/work/asynctest_issue_virtual/lib/python3.6/site-packages\r\n```\r\n\r\nIt would be really nice if I could make the `self.advance` feature work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/121", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/121/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/121/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/121", "id": 437595484, "node_id": "MDU6SXNzdWU0Mzc1OTU0ODQ=", "number": 121, "title": "patch abnormalities", "user": {"login": "ja8zyjits", "id": 10775161, "node_id": "MDQ6VXNlcjEwNzc1MTYx", "avatar_url": "https://avatars2.githubusercontent.com/u/10775161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ja8zyjits", "html_url": "https://github.com/ja8zyjits", "followers_url": "https://api.github.com/users/ja8zyjits/followers", "following_url": "https://api.github.com/users/ja8zyjits/following{/other_user}", "gists_url": "https://api.github.com/users/ja8zyjits/gists{/gist_id}", "starred_url": "https://api.github.com/users/ja8zyjits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ja8zyjits/subscriptions", "organizations_url": "https://api.github.com/users/ja8zyjits/orgs", "repos_url": "https://api.github.com/users/ja8zyjits/repos", "events_url": "https://api.github.com/users/ja8zyjits/events{/privacy}", "received_events_url": "https://api.github.com/users/ja8zyjits/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-26T09:57:30Z", "updated_at": "2019-05-14T16:27:53Z", "closed_at": "2019-05-14T16:27:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "### The problem\r\nwhile patching and sub classing there seems to be a deviation from the normal unittests behaviour.\r\n> scritp.py\r\n```python\r\ndef run_something():\r\n    pass\r\n```\r\n> test_script.py\r\n```python\r\nimport asynctest\r\nimport asyncio\r\nimport unittest\r\nimport script\r\n\r\nclass MainTest(asynctest.TestCase):\r\n    def setUp(self):\r\n        pass\r\n\r\n    @asynctest.patch(\"script.run_something\")\r\n    async def test_main(self, mock_run):\r\n        script.run_something()\r\n        self.assertEqual(mock_run.call_count, 1)\r\n\r\nclass MainTest2(MainTest):\r\n    def setUp(self):\r\n        pass\r\n\r\nif __name__==\"__main__\":\r\n    unittest.main()\r\n```\r\n\r\nwhile running the code with `python -m unittest` iam gettting the following error\r\n\r\n```shell\r\n.F\r\n======================================================================\r\nFAIL: test_main (test_script.MainTest2)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/jzy/work/asynctest_issue_virtual/lib/python3.6/site-packages/asynctest/case.py\", line 297, in run\r\n    self._run_test_method(testMethod)\r\n  File \"/home/jzy/work/asynctest_issue_virtual/lib/python3.6/site-packages/asynctest/case.py\", line 354, in _run_test_method\r\n    self.loop.run_until_complete(result)\r\n  File \"/home/jzy/work/asynctest_issue_virtual/lib/python3.6/site-packages/asynctest/case.py\", line 224, in wrapper\r\n    return method(*args, **kwargs)\r\n  File \"/usr/lib/python3.6/asyncio/base_events.py\", line 473, in run_until_complete\r\n    return future.result()\r\n  File \"/home/jzy/work/asynctest_issue_virtual/lib/python3.6/site-packages/asynctest/_awaitable.py\", line 21, in wrapper\r\n    return await coroutine(*args, **kwargs)\r\n  File \"/home/jzy/work/asynctest_issue_virtual/lib/python3.6/site-packages/asynctest/mock.py\", line 1006, in __next__\r\n    return self.gen.send(None)\r\n  File \"/home/jzy/work/asynctest_issue_virtual/scripts/test_script.py\", line 13, in test_main\r\n    self.assertEqual(mock_run.call_count, 1)\r\nAssertionError: 2 != 1\r\n\r\n----------------------------------------------------------------------\r\nRan 2 tests in 0.002s\r\n\r\nFAILED (failures=1)\r\n```\r\n\r\nBut the same code in unittest passes.\r\n\r\n> test_script.py\r\n```python\r\nimport asynctest\r\nimport asyncio\r\nimport unittest\r\nimport script\r\n\r\nclass MainTest(asynctest.TestCase):\r\n    def setUp(self):\r\n        pass\r\n\r\n    @unittest.mock.patch(\"script.run_something\")\r\n    def test_main(self, mock_run):\r\n        script.run_something()\r\n        self.assertEqual(mock_run.call_count, 1)\r\n\r\nclass MainTest2(MainTest):\r\n    def setUp(self):\r\n        pass\r\n\r\nif __name__==\"__main__\":\r\n    unittest.main()\r\n```\r\n\r\nwhile running the code with `python -m unittest` iam gettting the following output\r\n\r\n```shell\r\n..\r\n----------------------------------------------------------------------\r\nRan 2 tests in 0.001s\r\n\r\nOK\r\n```\r\n### The workaround\r\n\r\nIam able to get around this issue by using the context managers instead of the decorators like\r\n```python\r\nwith asynctest.patch(\"script.run_something\") as mock_something:\r\n```\r\n\r\nAnd the test succeeds\r\n\r\n\r\n### Support information\r\n* python version `3.6.7`\r\n* asynctest version\r\n```shell\r\nName: asynctest\r\nVersion: 0.12.4\r\nSummary: Enhance the standard unittest package with features for testing asyncio libraries\r\nHome-page: https://github.com/Martiusweb/asynctest/\r\nAuthor: Martin Richard\r\nAuthor-email: martius@martiusweb.net\r\nLicense: Apache 2\r\nLocation: /home/jzy/work/asynctest_issue_virtual/lib/python3.6/site-packages\r\n```\r\n\r\n### The question\r\n\r\n* Is this an intended behavior?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/118", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/118/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/118/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/118", "id": 429810372, "node_id": "MDU6SXNzdWU0Mjk4MTAzNzI=", "number": 118, "title": " Builds for Python 3.4 on MacOS are broken", "user": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-05T15:22:08Z", "updated_at": "2019-05-15T08:36:29Z", "closed_at": "2019-05-15T08:36:29Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Asynctest can't be tested on MacOS with Python 3.4 anymore on travis.\r\n\r\n    ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?\r\n\r\nI suspect that the version of openssl installed by brew is too recent to be compatible with Python 3.4 (IIRC, some functions have been removed from openssl).\r\n\r\nI'm not sure I want to spend time on this, so maybe I'll just deactivate this target.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/115", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/115/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/115/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/115", "id": 428163554, "node_id": "MDU6SXNzdWU0MjgxNjM1NTQ=", "number": 115, "title": "patch.dict() does not resolve string references on Python 3.7.3", "user": {"login": "agronholm", "id": 130003, "node_id": "MDQ6VXNlcjEzMDAwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agronholm", "html_url": "https://github.com/agronholm", "followers_url": "https://api.github.com/users/agronholm/followers", "following_url": "https://api.github.com/users/agronholm/following{/other_user}", "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}", "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions", "organizations_url": "https://api.github.com/users/agronholm/orgs", "repos_url": "https://api.github.com/users/agronholm/repos", "events_url": "https://api.github.com/users/agronholm/events{/privacy}", "received_events_url": "https://api.github.com/users/agronholm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-02T11:06:30Z", "updated_at": "2019-04-03T08:42:54Z", "closed_at": "2019-04-03T08:42:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "There was a change made to `patch.dict()` which breaks the corresponding feature in `asynctest.mock`: https://bugs.python.org/issue35512\r\n\r\nAttempting to use it will give an error like this:\r\n\r\n```\r\n/usr/local/lib/python3.7/site-packages/asynctest/mock.py:1240: in _patch_dict\r\n    self._original = self.in_dict.copy()\r\nAttributeError: 'str' object has no attribute 'copy'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/114", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/114/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/114/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/114", "id": 417974923, "node_id": "MDU6SXNzdWU0MTc5NzQ5MjM=", "number": 114, "title": "CoroutineMock doesn't seems to work with asyncio.run(asyncio.gather())", "user": {"login": "Natim", "id": 229453, "node_id": "MDQ6VXNlcjIyOTQ1Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/229453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Natim", "html_url": "https://github.com/Natim", "followers_url": "https://api.github.com/users/Natim/followers", "following_url": "https://api.github.com/users/Natim/following{/other_user}", "gists_url": "https://api.github.com/users/Natim/gists{/gist_id}", "starred_url": "https://api.github.com/users/Natim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Natim/subscriptions", "organizations_url": "https://api.github.com/users/Natim/orgs", "repos_url": "https://api.github.com/users/Natim/repos", "events_url": "https://api.github.com/users/Natim/events{/privacy}", "received_events_url": "https://api.github.com/users/Natim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-06T19:38:51Z", "updated_at": "2019-03-07T09:33:21Z", "closed_at": "2019-03-07T09:33:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Any idea why this code doesn't work?\r\n\r\n```\r\nimport asyncio\r\nfrom asynctest import CoroutineMock\r\n\r\nmocked_function = CoroutineMock()\r\n\r\nasyncio.run(asyncio.gather(mocked_function()))\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"demo.py\", line 7, in <module>\r\n    asyncio.run(asyncio.gather(mocked_function()))\r\n  File \"/usr/local/lib/python3.7/asyncio/runners.py\", line 37, in run\r\n    raise ValueError(\"a coroutine was expected, got {!r}\".format(main))\r\nValueError: a coroutine was expected, got <_GatheringFuture pending>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/113", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/113/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/113/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/113", "id": 401560259, "node_id": "MDU6SXNzdWU0MDE1NjAyNTk=", "number": 113, "title": "Coroutine not patched correctly after using MagicMock as constructor", "user": {"login": "z0u", "id": 1408875, "node_id": "MDQ6VXNlcjE0MDg4NzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1408875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0u", "html_url": "https://github.com/z0u", "followers_url": "https://api.github.com/users/z0u/followers", "following_url": "https://api.github.com/users/z0u/following{/other_user}", "gists_url": "https://api.github.com/users/z0u/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0u/subscriptions", "organizations_url": "https://api.github.com/users/z0u/orgs", "repos_url": "https://api.github.com/users/z0u/repos", "events_url": "https://api.github.com/users/z0u/events{/privacy}", "received_events_url": "https://api.github.com/users/z0u/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-22T01:15:49Z", "updated_at": "2019-04-05T14:44:11Z", "closed_at": "2019-04-05T14:44:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "When mocking a class and using it in place of a constructor, async methods in the resulting mocked object are not coroutines:\r\n\r\n```python\r\n>>> import asynctest\r\n>>> class AsyncStub:\r\n...     async def do_async(self):\r\n...         await True\r\n... \r\n>>> type(asynctest.MagicMock(AsyncStub)().do_async)\r\n<class 'asynctest.mock.MagicMock'>\r\n>>> type(asynctest.MagicMock(AsyncStub()).do_async)\r\n<class 'asynctest.mock.CoroutineMock'>\r\n```\r\n\r\nI expected that in the first case, `do_async` should be a `CoroutineMock`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/107", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/107/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/107/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/107", "id": 362849285, "node_id": "MDU6SXNzdWUzNjI4NDkyODU=", "number": 107, "title": "Calling mock_add_spec on a mock created with create_autospec results in an error", "user": {"login": "Wesmania", "id": 4634112, "node_id": "MDQ6VXNlcjQ2MzQxMTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4634112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wesmania", "html_url": "https://github.com/Wesmania", "followers_url": "https://api.github.com/users/Wesmania/followers", "following_url": "https://api.github.com/users/Wesmania/following{/other_user}", "gists_url": "https://api.github.com/users/Wesmania/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wesmania/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wesmania/subscriptions", "organizations_url": "https://api.github.com/users/Wesmania/orgs", "repos_url": "https://api.github.com/users/Wesmania/repos", "events_url": "https://api.github.com/users/Wesmania/events{/privacy}", "received_events_url": "https://api.github.com/users/Wesmania/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-09-22T11:20:09Z", "updated_at": "2019-04-23T18:00:20Z", "closed_at": "2019-04-23T18:00:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Demonstrated by the following session for asynctest 0.12.2:\r\n\r\n```\r\n>>> import asynctest\r\n>>> o = object()\r\n>>> am = asynctest.create_autospec(o)\r\n>>> am.mock_add_spec([\"c\"])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/mnt/dane/common-home/Pobrane/faf/replayserver-venv/lib/python3.6/site-packages/asynctest/mock.py\", line 244, in mock_add_spec\r\n    self._mock_set_async_magics()\r\n  File \"/mnt/dane/common-home/Pobrane/faf/replayserver-venv/lib/python3.6/site-packages/asynctest/mock.py\", line 233, in _mock_set_async_magics\r\n    delattr(self, entry)\r\n  File \"/usr/lib64/python3.6/unittest/mock.py\", line 728, in __delattr__\r\n    raise AttributeError(name)\r\nAttributeError: __aiter__\r\n```\r\n\r\nOccasionally `AttributeError: __aexit__` is thrown in the same place instead. Equivalent unittest.mock session:\r\n\r\n```\r\n>>> from unittest import mock\r\n>>> o = object()\r\n>>> m = mock.create_autospec(o)\r\n>>> m.mock_add_spec([\"c\"])\r\n>>> m.c\r\n<MagicMock name='mock.c' id='139969003892632'>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/101", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/101/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/101/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/101", "id": 351266505, "node_id": "MDU6SXNzdWUzNTEyNjY1MDU=", "number": 101, "title": "iscoroutine returns false when given CoroutineMock", "user": {"login": "pzelnip", "id": 414933, "node_id": "MDQ6VXNlcjQxNDkzMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/414933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pzelnip", "html_url": "https://github.com/pzelnip", "followers_url": "https://api.github.com/users/pzelnip/followers", "following_url": "https://api.github.com/users/pzelnip/following{/other_user}", "gists_url": "https://api.github.com/users/pzelnip/gists{/gist_id}", "starred_url": "https://api.github.com/users/pzelnip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pzelnip/subscriptions", "organizations_url": "https://api.github.com/users/pzelnip/orgs", "repos_url": "https://api.github.com/users/pzelnip/repos", "events_url": "https://api.github.com/users/pzelnip/events{/privacy}", "received_events_url": "https://api.github.com/users/pzelnip/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-16T15:54:20Z", "updated_at": "2018-08-16T16:01:21Z", "closed_at": "2018-08-16T16:01:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Asyncio's ```iscoroutine()``` method returns false when given a ```CoroutineMock```:\r\n\r\n```\r\n>>> asyncio.iscoroutine(asynctest.CoroutineMock())\r\nFalse\r\n```\r\n\r\nThis means that if you're testing code where your CoroutineMock is passed to ```call_soon_threadsafe``` then it blows up with a TypeError:\r\n\r\n```\r\n    asyncio.run_coroutine_threadsafe(self.recv_queue.put(data), self.loop)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ncoro = <MagicMock name='mock.put()' id='4571939168'>, loop = <_UnixSelectorEventLoop running=False closed=False debug=False>\r\n\r\n    def run_coroutine_threadsafe(coro, loop):\r\n        \"\"\"Submit a coroutine object to a given event loop.\r\n\r\n        Return a concurrent.futures.Future to access the result.\r\n        \"\"\"\r\n        if not coroutines.iscoroutine(coro):\r\n>           raise TypeError('A coroutine object is required')\r\nE           TypeError: A coroutine object is required\r\n```\r\n\r\nYou can workaround this by giving a spec argument to the CoroutineMock, but ideally a CoroutineMock should be able to be used where any coroutine can be used (isn't that the purpose of a CoroutineMock?)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/99", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/99/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/99/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/99", "id": 346737381, "node_id": "MDU6SXNzdWUzNDY3MzczODE=", "number": 99, "title": "Add badges for AppVeyor and Travis", "user": {"login": "Kentzo", "id": 88809, "node_id": "MDQ6VXNlcjg4ODA5", "avatar_url": "https://avatars1.githubusercontent.com/u/88809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kentzo", "html_url": "https://github.com/Kentzo", "followers_url": "https://api.github.com/users/Kentzo/followers", "following_url": "https://api.github.com/users/Kentzo/following{/other_user}", "gists_url": "https://api.github.com/users/Kentzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kentzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kentzo/subscriptions", "organizations_url": "https://api.github.com/users/Kentzo/orgs", "repos_url": "https://api.github.com/users/Kentzo/repos", "events_url": "https://api.github.com/users/Kentzo/events{/privacy}", "received_events_url": "https://api.github.com/users/Kentzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-01T19:31:29Z", "updated_at": "2018-08-29T02:01:21Z", "closed_at": "2018-08-29T02:01:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The README should display whether tests are passing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/94", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/94/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/94/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/94", "id": 333781206, "node_id": "MDU6SXNzdWUzMzM3ODEyMDY=", "number": 94, "title": "Error in 'async with' statement when mocking coroutine that returns MagicMock", "user": {"login": "jamezmoran", "id": 6832121, "node_id": "MDQ6VXNlcjY4MzIxMjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6832121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamezmoran", "html_url": "https://github.com/jamezmoran", "followers_url": "https://api.github.com/users/jamezmoran/followers", "following_url": "https://api.github.com/users/jamezmoran/following{/other_user}", "gists_url": "https://api.github.com/users/jamezmoran/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamezmoran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamezmoran/subscriptions", "organizations_url": "https://api.github.com/users/jamezmoran/orgs", "repos_url": "https://api.github.com/users/jamezmoran/repos", "events_url": "https://api.github.com/users/jamezmoran/events{/privacy}", "received_events_url": "https://api.github.com/users/jamezmoran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-06-19T18:08:17Z", "updated_at": "2018-06-19T22:41:50Z", "closed_at": "2018-06-19T22:41:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "    import pytest\r\n    import asyncio\r\n    from asynctest import MagicMock, CoroutineMock\r\n\r\n    class TestClass(object):\r\n        @pytest.mark.asyncio\r\n        async def test_get_queue_url(self):\r\n            test_client = MagicMock()\r\n            test_session = MagicMock()\r\n            expected = \"testvalue\"\r\n\r\n            test_client.get_test = CoroutineMock(side_effect=[expected])\r\n            test_session.create_client = CoroutineMock(side_effect=[test_client])\r\n            async with test_session.create_client(\"something\") as client:\r\n                print(\"hello\")\r\n\r\nFor some reason, this generates the following error:\r\n\r\n\tself = <test_Distributor.TestClass object at 0x00000242FDA174A8>\r\n\r\n\t\t@pytest.mark.asyncio\r\n\t\tasync def test_get_queue_url(self):\r\n\t\t\ttest_client = MagicMock()\r\n\t\t\ttest_session = MagicMock()\r\n\t\t\texpected = \"testvalue\"\r\n\r\n\t\t\ttest_client.get_test = CoroutineMock(side_effect=[expected])\r\n\t\t\ttest_session.create_client = CoroutineMock(side_effect=[test_client])\r\n\t>       async with test_session.create_client(\"something\") as client:\r\n\tE       AttributeError: __aexit__\r\n\r\nIs this expected? I would've thought that the coroutine gets called and returns the MagicMock, which should be able to be used in the `async with` statement. Unless I'm doing something wrong, maybe someone can point me in the right direction.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/93", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/93/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/93/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/93", "id": 333132653, "node_id": "MDU6SXNzdWUzMzMxMzI2NTM=", "number": 93, "title": "Exception raised when patch a coroutine classmethod", "user": {"login": "conn4575", "id": 17477493, "node_id": "MDQ6VXNlcjE3NDc3NDkz", "avatar_url": "https://avatars1.githubusercontent.com/u/17477493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/conn4575", "html_url": "https://github.com/conn4575", "followers_url": "https://api.github.com/users/conn4575/followers", "following_url": "https://api.github.com/users/conn4575/following{/other_user}", "gists_url": "https://api.github.com/users/conn4575/gists{/gist_id}", "starred_url": "https://api.github.com/users/conn4575/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/conn4575/subscriptions", "organizations_url": "https://api.github.com/users/conn4575/orgs", "repos_url": "https://api.github.com/users/conn4575/repos", "events_url": "https://api.github.com/users/conn4575/events{/privacy}", "received_events_url": "https://api.github.com/users/conn4575/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-06-18T04:52:28Z", "updated_at": "2018-06-20T16:08:22Z", "closed_at": "2018-06-20T16:08:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I try to patch coroutinu classmethod, but it raise an exception:\r\n\r\nhere the code:\r\n```python\r\n# target.py\r\nclass Target(object):\r\n\r\n    @classmethod\r\n    async def a(cls):\r\n        return 123\r\n\r\n    async def b(self):\r\n        return 456\r\n\r\n\r\n# test_target.py\r\nimport asynctest\r\nfrom target import Target\r\n\r\n\r\nclass TargetTest(asynctest.TestCase):\r\n\r\n    @asynctest.patch('target.Target.a')\r\n    async def test_classmethod(self, mock):\r\n        print(mock) # it print a MagicMock object, not a CoroutineMock object\r\n        mock.return_value = 456\r\n        rt = await Target.a()\r\n        self.assertEqual(rt, 123)\r\n\r\n    @asynctest.patch('target.Target.b')\r\n    async def test_method(self, mock):\r\n        print(mock)\r\n        mock.return_value = 789\r\n        t = Target()\r\n        rt = await t.b()\r\n        self.assertEqual(rt, 789)\r\n\r\nif __name__ == '__main__':\r\n    asynctest.main()\r\n```\r\n\r\nHere is the Exception:\r\n```\r\nroot@xxx-VirtualBox:/code/# python3 test_target.py\r\n<MagicMock name='a' id='140488891004632'>\r\nE\r\n======================================================================\r\nERROR: test_classmethod (__main__.TargetTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/asynctest/case.py\", line 297, in run\r\n    self._run_test_method(testMethod)\r\n  File \"/usr/local/lib/python3.6/dist-packages/asynctest/case.py\", line 354, in _run_test_method\r\n    self.loop.run_until_complete(result)\r\n  File \"/usr/local/lib/python3.6/dist-packages/asynctest/case.py\", line 224, in wrapper\r\n    return method(*args, **kwargs)\r\n  File \"/usr/lib/python3.6/asyncio/base_events.py\", line 468, in run_until_complete\r\n    return future.result()\r\n  File \"/usr/local/lib/python3.6/dist-packages/asynctest/_awaitable.py\", line 21, in wrapper\r\n    return await coroutine(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.6/dist-packages/asynctest/mock.py\", line 985, in __next__\r\n    return self.gen.send(None)\r\n  File \"test_target.py\", line 11, in test_classmethod\r\n    rt = await Target.a()\r\nTypeError: object int can't be used in 'await' expression\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.004s\r\n\r\nFAILED (errors=1)\r\n```\r\n\r\nPlease tell me what's wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/92", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/92/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/92/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/92", "id": 332339370, "node_id": "MDU6SXNzdWUzMzIzMzkzNzA=", "number": 92, "title": "mocks don't seem to work with asyncio.ensure_future()", "user": {"login": "MattBlack85", "id": 4163222, "node_id": "MDQ6VXNlcjQxNjMyMjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4163222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MattBlack85", "html_url": "https://github.com/MattBlack85", "followers_url": "https://api.github.com/users/MattBlack85/followers", "following_url": "https://api.github.com/users/MattBlack85/following{/other_user}", "gists_url": "https://api.github.com/users/MattBlack85/gists{/gist_id}", "starred_url": "https://api.github.com/users/MattBlack85/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MattBlack85/subscriptions", "organizations_url": "https://api.github.com/users/MattBlack85/orgs", "repos_url": "https://api.github.com/users/MattBlack85/repos", "events_url": "https://api.github.com/users/MattBlack85/events{/privacy}", "received_events_url": "https://api.github.com/users/MattBlack85/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-14T10:16:15Z", "updated_at": "2018-06-15T08:01:51Z", "closed_at": "2018-06-15T08:01:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I have this code:\r\n```Python\r\nasync def notify(result):\r\n    ...logic...\r\n    async with aiohttp.ClientSession() as session:\r\n        await session.post(notification_url, json=payload)\r\n\r\nasync main(loop):\r\n    --- some logic ---\r\n    async with aiohttp.ClientSession() as session:\r\n        async with await session.get(blablaurl, json=payload) as resp:\r\n            res = await resp.json()\r\n    asyncio.ensure_future(notify(res))\r\n```\r\nWhile I am successful in mocking the `await session.get()` within main, when I instantiate the client within notify coroutine the real client is used, what am I doing wrong?\r\n\r\ntest:\r\n```Python\r\n@asynctest.patch('aiohttp.ClientSession')\r\nasync def test_queue_150_length_called_to_slack(self, aiohttp_mock):\r\n        response_mock = asynctest.CoroutineMock(\r\n            return_value={'backing_queue_status': {'len': 150}})\r\n        client_mock = asynctest.MagicMock()\r\n        session_mock = asynctest.MagicMock()\r\n        session_mock.get.return_value.__aenter__.return_value.json = response_mock\r\n        client_mock.__aenter__.return_value = session_mock\r\n        aiohttp_mock.return_value = client_mock\r\n\r\n        await main(self.loop)\r\n        # Wait for futures to be completed, this is done normally within run method\r\n        pending = asyncio.Task.all_tasks()\r\n        asyncio.wait(pending)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/90", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/90/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/90/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/90", "id": 328363685, "node_id": "MDU6SXNzdWUzMjgzNjM2ODU=", "number": 90, "title": "[BUG] When CoroutineMock object raised an Exception...", "user": {"login": "yeahren", "id": 961606, "node_id": "MDQ6VXNlcjk2MTYwNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/961606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yeahren", "html_url": "https://github.com/yeahren", "followers_url": "https://api.github.com/users/yeahren/followers", "following_url": "https://api.github.com/users/yeahren/following{/other_user}", "gists_url": "https://api.github.com/users/yeahren/gists{/gist_id}", "starred_url": "https://api.github.com/users/yeahren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yeahren/subscriptions", "organizations_url": "https://api.github.com/users/yeahren/orgs", "repos_url": "https://api.github.com/users/yeahren/repos", "events_url": "https://api.github.com/users/yeahren/events{/privacy}", "received_events_url": "https://api.github.com/users/yeahren/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-01T03:00:05Z", "updated_at": "2018-06-05T08:41:42Z", "closed_at": "2018-06-05T08:41:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "[ python 3.6 + asynctest 0.12.0 ]\r\n\r\n```python\r\nimport asynctest\r\n\r\nclass MyException(BaseException):\r\n     pass\r\n\r\nclass MyTestCase(asynctest.TestCase):\r\n    @staticmethod\r\n    async def test_await():\r\n        mock = asynctest.CoroutineMock()\r\n        mock.side_effect = MyException\r\n\r\n        mock.assert_not_called()\r\n        mock.assert_not_awaited()\r\n\r\n        try:\r\n            await mock()\r\n        except MyException:\r\n            pass\r\n\r\n        mock.assert_called_once()\r\n        mock.assert_awaited_once()  # FAILED,  AssertionError: Expected 'mock' to have been awaited once. Awaited 0 times.\r\n```\r\n\r\nas you've been able to notice the \"FAILED\".", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/89", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/89/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/89/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/89", "id": 321718402, "node_id": "MDU6SXNzdWUzMjE3MTg0MDI=", "number": 89, "title": "asynctest missing __main__.py", "user": {"login": "thehesiod", "id": 4001789, "node_id": "MDQ6VXNlcjQwMDE3ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4001789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thehesiod", "html_url": "https://github.com/thehesiod", "followers_url": "https://api.github.com/users/thehesiod/followers", "following_url": "https://api.github.com/users/thehesiod/following{/other_user}", "gists_url": "https://api.github.com/users/thehesiod/gists{/gist_id}", "starred_url": "https://api.github.com/users/thehesiod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thehesiod/subscriptions", "organizations_url": "https://api.github.com/users/thehesiod/orgs", "repos_url": "https://api.github.com/users/thehesiod/repos", "events_url": "https://api.github.com/users/thehesiod/events{/privacy}", "received_events_url": "https://api.github.com/users/thehesiod/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770450, "node_id": "MDU6TGFiZWwxOTU3NzA0NTA=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-09T20:40:23Z", "updated_at": "2018-05-11T15:59:34Z", "closed_at": "2018-05-11T15:59:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "this would allow it to be run from the command-line like unittest:\r\n`python3 -m asynctest discover ...`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/88", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/88/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/88/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/88", "id": 310341164, "node_id": "MDU6SXNzdWUzMTAzNDExNjQ=", "number": 88, "title": "Patch the Class object", "user": {"login": "Olegt0rr", "id": 25399456, "node_id": "MDQ6VXNlcjI1Mzk5NDU2", "avatar_url": "https://avatars2.githubusercontent.com/u/25399456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Olegt0rr", "html_url": "https://github.com/Olegt0rr", "followers_url": "https://api.github.com/users/Olegt0rr/followers", "following_url": "https://api.github.com/users/Olegt0rr/following{/other_user}", "gists_url": "https://api.github.com/users/Olegt0rr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Olegt0rr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Olegt0rr/subscriptions", "organizations_url": "https://api.github.com/users/Olegt0rr/orgs", "repos_url": "https://api.github.com/users/Olegt0rr/repos", "events_url": "https://api.github.com/users/Olegt0rr/events{/privacy}", "received_events_url": "https://api.github.com/users/Olegt0rr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-01T17:49:07Z", "updated_at": "2019-03-29T10:48:52Z", "closed_at": "2019-03-29T10:48:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can't patch Class object, only methods\r\n\r\nWorking case, but too many decorator lines...\r\n```\r\nclass TestGamePrepare(TestCase):\r\n    chat_id = -12345667890\r\n    admin_id = 987654321\r\n\r\n    async def setUp(self):\r\n        self.game = await get_game(self.chat_id)\r\n\r\n    @patch('game.Game.delete_messages', pass_func)\r\n    async def tearDown(self):\r\n        await self.game.cancel()\r\n\r\n    @patch('game.Game.say', pass_func)\r\n    @patch('game.Game.unmute', pass_func)\r\n    @patch('game.Game.read_game_settings', pass_func)\r\n    @patch('game.Game.delete_messages', pass_func)\r\n    async def test_game_prepare(self):\r\n        \"\"\" Good prepare case \"\"\"\r\n        await self.game.prepare_game(self.admin_id)\r\n        self.assertEqual(self.game.mode, GameModes.REGISTRATION)\r\n```\r\n\r\nI try to patch Class at all, but it's not working:\r\n```\r\n    @patch('game.Game', NewGame)\r\n    async def test_game_prepare(self):\r\n        \"\"\" Good prepare case \"\"\"\r\n        await self.game.prepare_game(self.admin_id)\r\n        self.assertEqual(self.game.mode, GameModes.REGISTRATION)\r\n```\r\n\r\nWhat's wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/87", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/87/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/87/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/87", "id": 305352237, "node_id": "MDU6SXNzdWUzMDUzNTIyMzc=", "number": 87, "title": "asynctest / websocket tests ", "user": {"login": "mdear", "id": 6562082, "node_id": "MDQ6VXNlcjY1NjIwODI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6562082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdear", "html_url": "https://github.com/mdear", "followers_url": "https://api.github.com/users/mdear/followers", "following_url": "https://api.github.com/users/mdear/following{/other_user}", "gists_url": "https://api.github.com/users/mdear/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdear/subscriptions", "organizations_url": "https://api.github.com/users/mdear/orgs", "repos_url": "https://api.github.com/users/mdear/repos", "events_url": "https://api.github.com/users/mdear/events{/privacy}", "received_events_url": "https://api.github.com/users/mdear/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-14T22:30:41Z", "updated_at": "2019-04-25T18:43:54Z", "closed_at": "2019-04-25T18:43:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to uplift my asynctest-based tests from py34 to py35/36.\r\n\r\nAfter receiving and implementing some suggestions in https://github.com/aaugustin/websockets/issues/359, I'm seeing new issues.\r\n\r\nI'm finding that older asynctest (prior to 0.11) are showing a problem : AttributeError: '_UnixDefaultEventLoopPolicy' object has no attribute 'reset_watcher'\r\n\r\nCommenting out the following lines allows my tests to pass as expected:\r\n```\r\n        if not self.use_default_loop:\r\n            self.loop.close()\r\n            #policy.reset_watcher()\r\n        #asyncio.set_event_loop_policy(policy.original_policy)\r\n```\r\n\r\n\r\n\r\nAnd newer asynctest (0.11.0 and newer) are showing another problem:\r\nRuntimeError: Event loop is closed\r\n\r\n\r\nAny suggestions on how to resolve ?\r\n\r\n\r\n nostg-ott-vm-8:363> python -m unittest test_laas_async.TestVmCloudRest.test_websockets_1\r\n```\r\nE\r\n======================================================================\r\nERROR: test_websockets_1 (test_laas_async.TestVmCloudRest)\r\nEnsure reserve/create/delete/release requests are made as expected.\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/ws/mdear-ott/pyatsve_36/lib/python3.6/site-packages/asynctest/case.py\", line 186, in _unset_loop\r\n    policy.reset_watcher()\r\nAttributeError: '_UnixDefaultEventLoopPolicy' object has no attribute 'reset_watcher'\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.961s\r\n\r\nFAILED (errors=1)\r\n[pyatsve_36] nostg-ott-vm-8:364> python -m unittest test_laas_async.TestVmCloudRest.test_websockets_1\r\nTraceback (most recent call last):\r\n  File \"/ws/mdear-ott/pyats_36/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/ws/mdear-ott/pyats_36/lib/python3.6/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/ws/mdear-ott/pyats_36/lib/python3.6/unittest/__main__.py\", line 18, in <module>\r\n    main(module=None)\r\n  File \"/ws/mdear-ott/pyats_36/lib/python3.6/unittest/main.py\", line 95, in __init__\r\n    self.runTests()\r\n  File \"/ws/mdear-ott/pyats_36/lib/python3.6/unittest/main.py\", line 256, in runTests\r\n    self.result = testRunner.run(self.test)\r\n  File \"/ws/mdear-ott/pyats_36/lib/python3.6/unittest/runner.py\", line 176, in run\r\n    test(result)\r\n  File \"/ws/mdear-ott/pyats_36/lib/python3.6/unittest/suite.py\", line 84, in __call__\r\n    return self.run(*args, **kwds)\r\n  File \"/ws/mdear-ott/pyats_36/lib/python3.6/unittest/suite.py\", line 122, in run\r\n    test(result)\r\n  File \"/ws/mdear-ott/pyats_36/lib/python3.6/unittest/suite.py\", line 84, in __call__\r\n    return self.run(*args, **kwds)\r\n  File \"/ws/mdear-ott/pyats_36/lib/python3.6/unittest/suite.py\", line 122, in run\r\n    test(result)\r\n  File \"/ws/mdear-ott/pyats_36/lib/python3.6/unittest/case.py\", line 653, in __call__\r\n    return self.run(*args, **kwds)\r\n  File \"/ws/mdear-ott/pyatsve_36/lib/python3.6/site-packages/asynctest/case.py\", line 302, in run\r\n    self.loop.run_until_complete(self.doCleanups())\r\n  File \"/ws/mdear-ott/pyatsve_36/lib/python3.6/site-packages/asynctest/case.py\", line 224, in wrapper\r\n    return method(*args, **kwargs)\r\n  File \"/ws/mdear-ott/pyats_36/lib/python3.6/asyncio/base_events.py\", line 443, in run_until_complete\r\n    self._check_closed()\r\n  File \"/ws/mdear-ott/pyats_36/lib/python3.6/asyncio/base_events.py\", line 357, in _check_closed\r\n    raise RuntimeError('Event loop is closed')\r\nRuntimeError: Event loop is closed\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/84", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/84/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/84/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/84", "id": 304391781, "node_id": "MDU6SXNzdWUzMDQzOTE3ODE=", "number": 84, "title": "Having trouble mocking websockets.connect in python 35/36", "user": {"login": "mdear", "id": 6562082, "node_id": "MDQ6VXNlcjY1NjIwODI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6562082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdear", "html_url": "https://github.com/mdear", "followers_url": "https://api.github.com/users/mdear/followers", "following_url": "https://api.github.com/users/mdear/following{/other_user}", "gists_url": "https://api.github.com/users/mdear/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdear/subscriptions", "organizations_url": "https://api.github.com/users/mdear/orgs", "repos_url": "https://api.github.com/users/mdear/repos", "events_url": "https://api.github.com/users/mdear/events{/privacy}", "received_events_url": "https://api.github.com/users/mdear/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-12T14:22:50Z", "updated_at": "2018-03-14T23:07:57Z", "closed_at": "2018-03-14T23:07:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to get a websockets/asyncio unittest that was working under python3.4 to work correctly in python3.5.   The websockets author is exposing a class as a coroutine when run in python 35.  I'm trying to determine how to do mocking correctly, and if asynctest can assist in this effort.\r\n\r\nI have double-raised the issue under websockets, since I am unsure where the issue would have to be resolved.   https://github.com/aaugustin/websockets/issues/359 \r\n\r\nI have enclosed a simplified version of the test for discussion purposes.\r\n\r\nasynctest == 0.5.0\r\nwebsockets == 4.0.1\r\n\r\n    protocol = yield from websockets.connect('ws://server:1234')\r\n    RuntimeError: Task <Task pending coro=<mocked_connect() running at/test_websocket_mock.py:17>> got Future <MagicMock id='140610498838480'> attached to a different loop\r\n\r\n\r\n[asynctest_websock_failure.txt](https://github.com/Martiusweb/asynctest/files/1803096/asynctest_websock_failure.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/83", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/83/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/83/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/83", "id": 300775359, "node_id": "MDU6SXNzdWUzMDA3NzUzNTk=", "number": 83, "title": "Upload all test files to PyPI", "user": {"login": "dotlambda", "id": 6806011, "node_id": "MDQ6VXNlcjY4MDYwMTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6806011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotlambda", "html_url": "https://github.com/dotlambda", "followers_url": "https://api.github.com/users/dotlambda/followers", "following_url": "https://api.github.com/users/dotlambda/following{/other_user}", "gists_url": "https://api.github.com/users/dotlambda/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotlambda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotlambda/subscriptions", "organizations_url": "https://api.github.com/users/dotlambda/orgs", "repos_url": "https://api.github.com/users/dotlambda/repos", "events_url": "https://api.github.com/users/dotlambda/events{/privacy}", "received_events_url": "https://api.github.com/users/dotlambda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-27T20:09:45Z", "updated_at": "2018-02-28T09:22:29Z", "closed_at": "2018-02-28T09:22:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "`test/__init__.py` and `test/util.py` are missing in the PyPI tarball.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/82", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/82/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/82/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/82", "id": 299540445, "node_id": "MDU6SXNzdWUyOTk1NDA0NDU=", "number": 82, "title": "New release!", "user": {"login": "aaronkavlie-wf", "id": 7768348, "node_id": "MDQ6VXNlcjc3NjgzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7768348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaronkavlie-wf", "html_url": "https://github.com/aaronkavlie-wf", "followers_url": "https://api.github.com/users/aaronkavlie-wf/followers", "following_url": "https://api.github.com/users/aaronkavlie-wf/following{/other_user}", "gists_url": "https://api.github.com/users/aaronkavlie-wf/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaronkavlie-wf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaronkavlie-wf/subscriptions", "organizations_url": "https://api.github.com/users/aaronkavlie-wf/orgs", "repos_url": "https://api.github.com/users/aaronkavlie-wf/repos", "events_url": "https://api.github.com/users/aaronkavlie-wf/events{/privacy}", "received_events_url": "https://api.github.com/users/aaronkavlie-wf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-22T23:01:20Z", "updated_at": "2018-02-27T19:59:22Z", "closed_at": "2018-02-27T19:59:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "The last release was in November, and doesn't include the `create_autospec` work that was added.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/77", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/77/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/77/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/77", "id": 287576834, "node_id": "MDU6SXNzdWUyODc1NzY4MzQ=", "number": 77, "title": "Add the examples section to the docs", "user": {"login": "Kentzo", "id": 88809, "node_id": "MDQ6VXNlcjg4ODA5", "avatar_url": "https://avatars1.githubusercontent.com/u/88809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kentzo", "html_url": "https://github.com/Kentzo", "followers_url": "https://api.github.com/users/Kentzo/followers", "following_url": "https://api.github.com/users/Kentzo/following{/other_user}", "gists_url": "https://api.github.com/users/Kentzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kentzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kentzo/subscriptions", "organizations_url": "https://api.github.com/users/Kentzo/orgs", "repos_url": "https://api.github.com/users/Kentzo/repos", "events_url": "https://api.github.com/users/Kentzo/events{/privacy}", "received_events_url": "https://api.github.com/users/Kentzo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 360059026, "node_id": "MDU6TGFiZWwzNjAwNTkwMjY=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/documentation", "name": "documentation", "color": "d4c5f9", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-01-10T21:05:03Z", "updated_at": "2019-04-19T08:41:48Z", "closed_at": "2019-04-19T08:41:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`Mock` objects can be confusing. The examples section should cover common cases to make user familiar with common tasks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/75", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/75/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/75/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/75", "id": 286686017, "node_id": "MDU6SXNzdWUyODY2ODYwMTc=", "number": 75, "title": "Patching target object with new argument results in error", "user": {"login": "jeryini", "id": 1238022, "node_id": "MDQ6VXNlcjEyMzgwMjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1238022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeryini", "html_url": "https://github.com/jeryini", "followers_url": "https://api.github.com/users/jeryini/followers", "following_url": "https://api.github.com/users/jeryini/following{/other_user}", "gists_url": "https://api.github.com/users/jeryini/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeryini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeryini/subscriptions", "organizations_url": "https://api.github.com/users/jeryini/orgs", "repos_url": "https://api.github.com/users/jeryini/repos", "events_url": "https://api.github.com/users/jeryini/events{/privacy}", "received_events_url": "https://api.github.com/users/jeryini/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770453, "node_id": "MDU6TGFiZWwxOTU3NzA0NTM=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-01-08T09:20:52Z", "updated_at": "2018-01-08T14:05:57Z", "closed_at": "2018-01-08T14:05:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nI'm trying to patch these three objects like that:\r\n```\r\n@asynctest.patch('foo.bar.method_1', new=asynctest.CoroutineMock)\r\n@asynctest.patch('foo.bar.method_2', new=asynctest.CoroutineMock)\r\n@asynctest.patch('foo.bar.method_3')\r\nasync def test_foo_bar(self, mock_method_3, method_2, method_1):\r\n```\r\nSo I'm using the `new` argument because the library doesn't properly identify the patched object (`async def statement`) as a coroutine. When running the tests I get the following error:\r\n```\r\nargs = (<tests.unit_tests.test_app.test_foo_bar.TestRunFooBar testMethod=test_foo_bar>, <CoroutineMock name='method_3' id='140075174886144'>)\r\nkeywargs = {}\r\nextra_args = [<CoroutineMock name='method_3' id='140075174886144'>]\r\npatchers_to_exit = [<asynctest.mock._patch object at 0x7f65cbb5a080>]\r\npatch_dict_with_limited_scope = []\r\nexc_info = (<class 'TypeError'>, TypeError(\"test_foo_bar() missing 2 required positional arguments: 'method_2' and 'method_1'\",), <traceback object at 0x7f65cb0a58c8>)\r\npatching = <asynctest.mock._patch object at 0x7f65cbb5a080>\r\narg = <class 'asynctest.mock.CoroutineMock'>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/71", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/71/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/71/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/71", "id": 280621489, "node_id": "MDU6SXNzdWUyODA2MjE0ODk=", "number": 71, "title": "Add macOS and Windows to the test matrix", "user": {"login": "Kentzo", "id": 88809, "node_id": "MDQ6VXNlcjg4ODA5", "avatar_url": "https://avatars1.githubusercontent.com/u/88809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kentzo", "html_url": "https://github.com/Kentzo", "followers_url": "https://api.github.com/users/Kentzo/followers", "following_url": "https://api.github.com/users/Kentzo/following{/other_user}", "gists_url": "https://api.github.com/users/Kentzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kentzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kentzo/subscriptions", "organizations_url": "https://api.github.com/users/Kentzo/orgs", "repos_url": "https://api.github.com/users/Kentzo/repos", "events_url": "https://api.github.com/users/Kentzo/events{/privacy}", "received_events_url": "https://api.github.com/users/Kentzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-12-08T21:25:16Z", "updated_at": "2018-08-01T13:21:17Z", "closed_at": "2018-08-01T13:21:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Travis can run tests on macOS like this: https://github.com/Kentzo/async_app/blob/master/.travis.yml#L3-L23\r\n\r\nAppVeyor can be used for Windows: https://github.com/Kentzo/async_app/blob/master/.appveyor.yml#L1-L15", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/70", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/70/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/70/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/70", "id": 280620927, "node_id": "MDU6SXNzdWUyODA2MjA5Mjc=", "number": 70, "title": "Add pypy to the test matrix", "user": {"login": "Kentzo", "id": 88809, "node_id": "MDQ6VXNlcjg4ODA5", "avatar_url": "https://avatars1.githubusercontent.com/u/88809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kentzo", "html_url": "https://github.com/Kentzo", "followers_url": "https://api.github.com/users/Kentzo/followers", "following_url": "https://api.github.com/users/Kentzo/following{/other_user}", "gists_url": "https://api.github.com/users/Kentzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kentzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kentzo/subscriptions", "organizations_url": "https://api.github.com/users/Kentzo/orgs", "repos_url": "https://api.github.com/users/Kentzo/repos", "events_url": "https://api.github.com/users/Kentzo/events{/privacy}", "received_events_url": "https://api.github.com/users/Kentzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-08T21:22:56Z", "updated_at": "2018-08-01T13:21:16Z", "closed_at": "2018-08-01T13:21:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "PyPy at its current state should be compatible with asynctest.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/68", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/68/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/68/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/68", "id": 280620022, "node_id": "MDU6SXNzdWUyODA2MjAwMjI=", "number": 68, "title": "Add pyproject.toml to specify min requirements for setuptools", "user": {"login": "Kentzo", "id": 88809, "node_id": "MDQ6VXNlcjg4ODA5", "avatar_url": "https://avatars1.githubusercontent.com/u/88809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kentzo", "html_url": "https://github.com/Kentzo", "followers_url": "https://api.github.com/users/Kentzo/followers", "following_url": "https://api.github.com/users/Kentzo/following{/other_user}", "gists_url": "https://api.github.com/users/Kentzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kentzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kentzo/subscriptions", "organizations_url": "https://api.github.com/users/Kentzo/orgs", "repos_url": "https://api.github.com/users/Kentzo/repos", "events_url": "https://api.github.com/users/Kentzo/events{/privacy}", "received_events_url": "https://api.github.com/users/Kentzo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770450, "node_id": "MDU6TGFiZWwxOTU3NzA0NTA=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-08T21:18:56Z", "updated_at": "2018-08-01T13:21:16Z", "closed_at": "2018-08-01T13:21:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See PEP 518", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/64", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/64/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/64/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/64", "id": 276728799, "node_id": "MDU6SXNzdWUyNzY3Mjg3OTk=", "number": 64, "title": "Full control over awaitable mock", "user": {"login": "Kentzo", "id": 88809, "node_id": "MDQ6VXNlcjg4ODA5", "avatar_url": "https://avatars1.githubusercontent.com/u/88809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kentzo", "html_url": "https://github.com/Kentzo", "followers_url": "https://api.github.com/users/Kentzo/followers", "following_url": "https://api.github.com/users/Kentzo/following{/other_user}", "gists_url": "https://api.github.com/users/Kentzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kentzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kentzo/subscriptions", "organizations_url": "https://api.github.com/users/Kentzo/orgs", "repos_url": "https://api.github.com/users/Kentzo/repos", "events_url": "https://api.github.com/users/Kentzo/events{/privacy}", "received_events_url": "https://api.github.com/users/Kentzo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770450, "node_id": "MDU6TGFiZWwxOTU3NzA0NTA=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-25T06:05:30Z", "updated_at": "2018-08-18T22:01:06Z", "closed_at": "2018-08-18T22:01:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When writing asyncio tests it is to control when and what awaitable mock should return.\r\n\r\nHere is an example to give an idea:\r\n\r\n```python\r\nclass MagicCoro(unittest.mock.Mock):\r\n    \"\"\"\r\n    >>> m = unittest.mock.MagicMock()\r\n    >>> m.coro = MagicCoro(return_value=42)\r\n    >>> assert await m.coro() == 42\r\n    >>> assert m.exit.is_set()\r\n    \"\"\"\r\n    def __init__(self, run_event=None, return_value=None):\r\n        async def coro(*args, **kwargs):\r\n            self.enter.set()\r\n\r\n            if self.run:\r\n                await self.run.wait()\r\n\r\n            self.exit.set()\r\n\r\n            return self.value\r\n\r\n        super().__init__(wraps=coro)\r\n\r\n        self.enter = asyncio.Event()\r\n        self.run = run_event\r\n        self.exit = asyncio.Event()\r\n        self.value = return_value\r\n\r\n    def _get_child_mock(self, **kw):\r\n        return unittest.mock.MagicMock(**kw)\r\n```\r\n\r\nThis allows to:\r\n- provide a return value\r\n- provide an event to wait for allowing user to control completion order\r\n- assert whether coroutine was entered or exited", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/63", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/63/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/63/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/63", "id": 275563624, "node_id": "MDU6SXNzdWUyNzU1NjM2MjQ=", "number": 63, "title": "The unused check loop method should be disabled by default for non-coroutine methods", "user": {"login": "Kentzo", "id": 88809, "node_id": "MDQ6VXNlcjg4ODA5", "avatar_url": "https://avatars1.githubusercontent.com/u/88809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kentzo", "html_url": "https://github.com/Kentzo", "followers_url": "https://api.github.com/users/Kentzo/followers", "following_url": "https://api.github.com/users/Kentzo/following{/other_user}", "gists_url": "https://api.github.com/users/Kentzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kentzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kentzo/subscriptions", "organizations_url": "https://api.github.com/users/Kentzo/orgs", "repos_url": "https://api.github.com/users/Kentzo/repos", "events_url": "https://api.github.com/users/Kentzo/events{/privacy}", "received_events_url": "https://api.github.com/users/Kentzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-21T02:21:57Z", "updated_at": "2018-06-19T19:29:06Z", "closed_at": "2018-06-19T19:29:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Normal methods are likely to be used for non-asyncio tests.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/58", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/58/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/58/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/58", "id": 275052172, "node_id": "MDU6SXNzdWUyNzUwNTIxNzI=", "number": 58, "title": "Question about setUp/tearDown vs. setup_method/teardown_method", "user": {"login": "kevinkjt2000", "id": 4098674, "node_id": "MDQ6VXNlcjQwOTg2NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/4098674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinkjt2000", "html_url": "https://github.com/kevinkjt2000", "followers_url": "https://api.github.com/users/kevinkjt2000/followers", "following_url": "https://api.github.com/users/kevinkjt2000/following{/other_user}", "gists_url": "https://api.github.com/users/kevinkjt2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinkjt2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinkjt2000/subscriptions", "organizations_url": "https://api.github.com/users/kevinkjt2000/orgs", "repos_url": "https://api.github.com/users/kevinkjt2000/repos", "events_url": "https://api.github.com/users/kevinkjt2000/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinkjt2000/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770453, "node_id": "MDU6TGFiZWwxOTU3NzA0NTM=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-18T04:24:20Z", "updated_at": "2017-11-25T17:45:44Z", "closed_at": "2017-11-25T17:45:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following xunit-style documentation that the normal pytest.TestCase is capable of https://docs.pytest.org/en/latest/xunit_setup.html\r\nI tried using setup_method and teardown_method instead of setUp and tearDown, but using the former caused one of my tests to fail.  Are these handled differently somehow by asynctest.TestCase?\r\n\r\nIf you would like to reproduce the failing tests that I am referring to:\r\nhttps://github.com/kevinkjt2000/discord-minecraft-server-status/blob/4952acf35af552941315c5c02a98ec9f1b3badfe/test/test_main.py#L31\r\nclone, `pip install -e.[dev]`, change the setUp and tearDown from that permalink, and run pytest.\r\n\r\nP.S.: Thanks a ton for supporting async MagicMocks!  That enabled me to even write these tests in the first place! :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/57", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/57/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/57/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/57", "id": 270647215, "node_id": "MDU6SXNzdWUyNzA2NDcyMTU=", "number": 57, "title": "Test that CoroutineMock returns MagicMock as children", "user": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770450, "node_id": "MDU6TGFiZWwxOTU3NzA0NTA=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-02T13:09:44Z", "updated_at": "2017-11-04T15:17:43Z", "closed_at": "2017-11-04T15:17:43Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Some users used to rely on ``CoroutineMock().whatever`` returning a ``CoroutineMock``, which is in fact incorrect, as a MagicMock should be returned (there is no reason to assume that all possible attributes of a coroutine would be coroutines themselves).\r\n\r\nHowever, it is still undefined behavior as there is no test checking this behavior. This must be fixed to avoid future regressions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/56", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/56/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/56/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/56", "id": 270644537, "node_id": "MDU6SXNzdWUyNzA2NDQ1Mzc=", "number": 56, "title": "inspect.iscoroutinefunction(MagicMock(a_function)) returns True", "user": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770448, "node_id": "MDU6TGFiZWwxOTU3NzA0NDg=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-02T13:00:59Z", "updated_at": "2017-12-29T16:06:54Z", "closed_at": "2017-12-29T16:06:54Z", "author_association": "OWNER", "active_lock_reason": null, "body": "``inspect.iscoroutinefunction()`` returns ``True`` when it tests a ``MagicMock`` which assumes that ``__code__`` exists (ie: a callable is used as spec).\r\n\r\n    >>> import inspect, asynctest, unittest\r\n    >>> def foo(): pass\r\n    ... \r\n    >>> inspect.iscoroutinefunction(foo)\r\n    False\r\n    >>> inspect.iscoroutinefunction(asynctest.mock.MagicMock(foo))\r\n    True\r\n    >>> inspect.iscoroutinefunction(unittest.mock.MagicMock(foo))\r\n    True\r\n\r\nThis is because ``MagicMock(a_callable).__code__.co_flags`` is a ``MagicMock`` by default.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/55", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/55/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/55/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/55", "id": 270641881, "node_id": "MDU6SXNzdWUyNzA2NDE4ODE=", "number": 55, "title": "MagicMock without doesn't mock __aenter__ and __aexit__ with a CoroutineMock", "user": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770448, "node_id": "MDU6TGFiZWwxOTU3NzA0NDg=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-11-02T12:51:46Z", "updated_at": "2017-11-04T15:22:03Z", "closed_at": "2017-11-04T15:22:03Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently, it is not possible to use MagicMock with asynchronous context managers without spec, because __aenter__, __aexit__ aren't mocked with CoroutineMock by default.\r\n\r\n    >>> from asynctest import MagicMock\r\n    >>> from asyncio import get_event_loop\r\n    >>> \r\n    >>> async def f():\r\n    ...    async with MagicMock():\r\n    ...        print('f()')\r\n    ...\r\n    >>> get_event_loop().run_until_complete(f())\r\n    TypeError: object MagicMock can't be used in 'await' expression", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/53", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/53/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/53/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/53", "id": 267743847, "node_id": "MDU6SXNzdWUyNjc3NDM4NDc=", "number": 53, "title": "Add long description to PYPI", "user": {"login": "webknjaz", "id": 578543, "node_id": "MDQ6VXNlcjU3ODU0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/578543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/webknjaz", "html_url": "https://github.com/webknjaz", "followers_url": "https://api.github.com/users/webknjaz/followers", "following_url": "https://api.github.com/users/webknjaz/following{/other_user}", "gists_url": "https://api.github.com/users/webknjaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/webknjaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/webknjaz/subscriptions", "organizations_url": "https://api.github.com/users/webknjaz/orgs", "repos_url": "https://api.github.com/users/webknjaz/repos", "events_url": "https://api.github.com/users/webknjaz/events{/privacy}", "received_events_url": "https://api.github.com/users/webknjaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-10-23T17:00:49Z", "updated_at": "2017-11-14T12:37:57Z", "closed_at": "2017-11-14T12:37:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See: https://pypi.org/project/asynctest/0.11.0/\r\n\r\n@Martiusweb if you're okay with sticking to `setuptools>=30.3.0`, I'd send a PR using nice feature of automatic reading of README into `long_description` using declarative `setup.cfg`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/52", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/52/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/52/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/52", "id": 267715545, "node_id": "MDU6SXNzdWUyNjc3MTU1NDU=", "number": 52, "title": "Undefined method of a CoroutineMock instance returns MagicMock instead of CoroutineMock", "user": {"login": "rodcarroll", "id": 5958214, "node_id": "MDQ6VXNlcjU5NTgyMTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/5958214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodcarroll", "html_url": "https://github.com/rodcarroll", "followers_url": "https://api.github.com/users/rodcarroll/followers", "following_url": "https://api.github.com/users/rodcarroll/following{/other_user}", "gists_url": "https://api.github.com/users/rodcarroll/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodcarroll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodcarroll/subscriptions", "organizations_url": "https://api.github.com/users/rodcarroll/orgs", "repos_url": "https://api.github.com/users/rodcarroll/repos", "events_url": "https://api.github.com/users/rodcarroll/events{/privacy}", "received_events_url": "https://api.github.com/users/rodcarroll/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-10-23T15:36:10Z", "updated_at": "2017-11-25T12:11:28Z", "closed_at": "2017-11-25T12:11:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "To reproduce:\r\n```\r\nx = CoroutineMock()\r\nprint(type(x.some_method))\r\n```\r\n\r\nIn version 0.10.1:\r\n`<class 'asynctest.mock.CoroutineMock'>`\r\n\r\nIn version 0.11.0:\r\n`<class 'asynctest.mock.MagicMock'>`\r\n\r\nThis causes an unexpected breakage in existing tests.  Is there any way to get the old behavior back?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/50", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/50/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/50/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/50", "id": 263889339, "node_id": "MDU6SXNzdWUyNjM4ODkzMzk=", "number": 50, "title": "Publish source distribution please", "user": {"login": "webknjaz", "id": 578543, "node_id": "MDQ6VXNlcjU3ODU0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/578543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/webknjaz", "html_url": "https://github.com/webknjaz", "followers_url": "https://api.github.com/users/webknjaz/followers", "following_url": "https://api.github.com/users/webknjaz/following{/other_user}", "gists_url": "https://api.github.com/users/webknjaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/webknjaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/webknjaz/subscriptions", "organizations_url": "https://api.github.com/users/webknjaz/orgs", "repos_url": "https://api.github.com/users/webknjaz/repos", "events_url": "https://api.github.com/users/webknjaz/events{/privacy}", "received_events_url": "https://api.github.com/users/webknjaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2017-10-09T13:09:35Z", "updated_at": "2017-10-09T13:48:32Z", "closed_at": "2017-10-09T13:26:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi @Martiusweb,\r\n\r\nYou publish only binary wheels, which leads to the situation where it's impossible to install it using distutils.\r\n\r\nThis happens with `pbr` tool (which is OpenStack's project being widely used in the wild):\r\nhttps://travis-ci.org/webknjaz/asap-authentication-python/jobs/285562717#L489\r\n\r\nRef: https://github.com/pytest-dev/pytest-asyncio/issues/13#issuecomment-126959408\r\n\r\nMay I ask to to publish `sdist` as well?\r\n\r\n\r\nP.S. Why not configure automatic deployment of distributions to PYPI straight from Travis CI? I could send you PR implementing this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/49", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/49/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/49/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/49", "id": 263818172, "node_id": "MDU6SXNzdWUyNjM4MTgxNzI=", "number": 49, "title": "mock_calls attribute of asynctest.Mock objects is not filled correctly", "user": {"login": "horazont", "id": 271710, "node_id": "MDQ6VXNlcjI3MTcxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/271710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/horazont", "html_url": "https://github.com/horazont", "followers_url": "https://api.github.com/users/horazont/followers", "following_url": "https://api.github.com/users/horazont/following{/other_user}", "gists_url": "https://api.github.com/users/horazont/gists{/gist_id}", "starred_url": "https://api.github.com/users/horazont/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/horazont/subscriptions", "organizations_url": "https://api.github.com/users/horazont/orgs", "repos_url": "https://api.github.com/users/horazont/repos", "events_url": "https://api.github.com/users/horazont/events{/privacy}", "received_events_url": "https://api.github.com/users/horazont/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770448, "node_id": "MDU6TGFiZWwxOTU3NzA0NDg=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-09T08:32:15Z", "updated_at": "2017-10-12T19:26:34Z", "closed_at": "2017-10-12T19:15:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Example:\r\n```python\r\nimport unittest.mock\r\n\r\nimport asynctest\r\n\r\n\r\nclass Foo:\r\n    def bar(self):\r\n        pass\r\n\r\n\r\nam = asynctest.Mock(spec=Foo)\r\nam.bar()\r\nprint(am.mock_calls)\r\n\r\nm = unittest.mock.Mock(spec=Foo)\r\nm.bar()\r\nprint(m.mock_calls)\r\n```\r\n\r\nI expect the two lines of output to be identical, but instead I get:\r\n```\r\n[call()]\r\n[call.bar()]\r\n```\r\n\r\nThis is unfortunate when testing based on e.g. assertCountEqual on mock_calls etc.\r\n\r\nFor now my workaround is to replace asynctest.Mock with unittest.mock.Mock + explicit asynctest.CoroutineMock members if I\u2019m testing against mock_calls (which is rare).\r\n\r\n\r\nThanks for asynctest! \ud83d\udc4d ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/48", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/48/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/48/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/48", "id": 245042847, "node_id": "MDU6SXNzdWUyNDUwNDI4NDc=", "number": 48, "title": "ClockedTestCase and sleep", "user": {"login": "dmzkrsk", "id": 94747, "node_id": "MDQ6VXNlcjk0NzQ3", "avatar_url": "https://avatars3.githubusercontent.com/u/94747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmzkrsk", "html_url": "https://github.com/dmzkrsk", "followers_url": "https://api.github.com/users/dmzkrsk/followers", "following_url": "https://api.github.com/users/dmzkrsk/following{/other_user}", "gists_url": "https://api.github.com/users/dmzkrsk/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmzkrsk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmzkrsk/subscriptions", "organizations_url": "https://api.github.com/users/dmzkrsk/orgs", "repos_url": "https://api.github.com/users/dmzkrsk/repos", "events_url": "https://api.github.com/users/dmzkrsk/events{/privacy}", "received_events_url": "https://api.github.com/users/dmzkrsk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-24T10:54:13Z", "updated_at": "2017-07-24T11:33:45Z", "closed_at": "2017-07-24T11:33:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need to test some `async` functions with preserving some time order.\r\nSo I created mocks with `asyncio.sleep`.\r\n\r\nThe following code doesn't work. `sleep` blocks forever.\r\n\r\n```python\r\nimport asyncio\r\nimport asynctest\r\n\r\n\r\nclass Sleep:\r\n    def __init__(self, timeout, data):\r\n        self.data = None\r\n        self._data = data\r\n        self.timeout = timeout\r\n\r\n    async def do(self):\r\n        await asyncio.sleep(self.timeout)\r\n        self.data = self._data\r\n\r\n\r\nclass TestWithSleep(asynctest.ClockedTestCase):\r\n    def setUp(self):\r\n        self.sleep = Sleep(1, 'OK')\r\n\r\n    def tearDown(self):\r\n        self.sleep = None\r\n\r\n    async def test_sleep(self):\r\n        self.assertEqual(None, self.sleep.data)\r\n        await self.advance(2)\r\n\r\n        await self.sleep.do()\r\n        self.assertEqual('OK', self.sleep.data)\r\n\r\n```\r\n\r\nThis works (but can be slow):\r\n\r\n```python\r\n\r\nclass TestWithSleep(asynctest.TestCase):\r\n    def setUp(self):\r\n        self.sleep = Sleep(1, 'OK')\r\n\r\n    def tearDown(self):\r\n        self.sleep = None\r\n\r\n    async def test_sleep(self):\r\n        self.assertEqual(None, self.sleep.data)\r\n        await self.sleep.do()\r\n        self.assertEqual('OK', self.sleep.data)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/47", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/47/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/47/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/47", "id": 239189169, "node_id": "MDU6SXNzdWUyMzkxODkxNjk=", "number": 47, "title": "Instances of a mocked class don't return coroutine mocks for coroutine methods", "user": {"login": "agronholm", "id": 130003, "node_id": "MDQ6VXNlcjEzMDAwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agronholm", "html_url": "https://github.com/agronholm", "followers_url": "https://api.github.com/users/agronholm/followers", "following_url": "https://api.github.com/users/agronholm/following{/other_user}", "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}", "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions", "organizations_url": "https://api.github.com/users/agronholm/orgs", "repos_url": "https://api.github.com/users/agronholm/repos", "events_url": "https://api.github.com/users/agronholm/events{/privacy}", "received_events_url": "https://api.github.com/users/agronholm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770451, "node_id": "MDU6TGFiZWwxOTU3NzA0NTE=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}, {"id": 195770453, "node_id": "MDU6TGFiZWwxOTU3NzA0NTM=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-28T14:46:14Z", "updated_at": "2017-11-02T13:13:57Z", "closed_at": "2017-11-02T13:13:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nfrom asynctest.mock import Mock\r\n\r\nclass Foo:\r\n    async def bar(self): pass\r\n\r\nFooMock = Mock(Foo)\r\nprint(type(FooMock.bar))\r\nprint(type(FooMock().bar))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/46", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/46/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/46/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/46", "id": 239188450, "node_id": "MDU6SXNzdWUyMzkxODg0NTA=", "number": 46, "title": "patch() returns a unittest.mock.MagicMock object", "user": {"login": "agronholm", "id": 130003, "node_id": "MDQ6VXNlcjEzMDAwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agronholm", "html_url": "https://github.com/agronholm", "followers_url": "https://api.github.com/users/agronholm/followers", "following_url": "https://api.github.com/users/agronholm/following{/other_user}", "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}", "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions", "organizations_url": "https://api.github.com/users/agronholm/orgs", "repos_url": "https://api.github.com/users/agronholm/repos", "events_url": "https://api.github.com/users/agronholm/events{/privacy}", "received_events_url": "https://api.github.com/users/agronholm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770448, "node_id": "MDU6TGFiZWwxOTU3NzA0NDg=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2017-06-28T14:44:06Z", "updated_at": "2018-02-27T19:44:28Z", "closed_at": "2018-02-27T19:44:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "The asynctest.mock.patch() function should return an async mock, but it doesn't:\r\n```python\r\nfrom asynctest.mock import patch\r\n\r\nclass Foo:\r\n    async def bar(self): pass\r\n\r\nwith patch('__main__.Foo', autospec=True) as FooMock:\r\n    print(type(FooMock))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/45", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/45/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/45/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/45", "id": 237102486, "node_id": "MDU6SXNzdWUyMzcxMDI0ODY=", "number": 45, "title": "Implement \"assert_awaited\" to CoroutineMock", "user": {"login": "peterdotran", "id": 12636300, "node_id": "MDQ6VXNlcjEyNjM2MzAw", "avatar_url": "https://avatars2.githubusercontent.com/u/12636300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterdotran", "html_url": "https://github.com/peterdotran", "followers_url": "https://api.github.com/users/peterdotran/followers", "following_url": "https://api.github.com/users/peterdotran/following{/other_user}", "gists_url": "https://api.github.com/users/peterdotran/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterdotran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterdotran/subscriptions", "organizations_url": "https://api.github.com/users/peterdotran/orgs", "repos_url": "https://api.github.com/users/peterdotran/repos", "events_url": "https://api.github.com/users/peterdotran/events{/privacy}", "received_events_url": "https://api.github.com/users/peterdotran/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770450, "node_id": "MDU6TGFiZWwxOTU3NzA0NTA=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-20T06:12:14Z", "updated_at": "2018-06-19T19:29:24Z", "closed_at": "2018-06-19T19:29:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport asyncio\r\nimport asynctest.mock\r\n\r\nasync def async_func():\r\n    ...\r\n    some_async_action()\r\n    ...\r\n\r\nasync def show_awaited():\r\n    print('Did awaited')\r\n\r\nsome_async_action = asynctest.mock.CoroutineMock(side_effect=show_awaited)\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(async_func())\r\nloop.close()\r\n\r\nprint(some_async_action.called)\r\nsome_async_action.assert_called()\r\n```\r\nsome_async_action shows that is gets the coroutine some_async_action but it did not awaited. So there is an issue that would not be detected until runtime. I have a larger project and detecting that some functions that was properly awaited is going to help to find some issues of forgetting the awaited. Other cases I pass the result from the awaited function to another function and check that the call value was correct but that cannot be done in every case.\r\n\r\nassert_awaited should assert that every call to the mock was awaited.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/38", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/38/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/38/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/38", "id": 216008811, "node_id": "MDU6SXNzdWUyMTYwMDg4MTE=", "number": 38, "title": "assertRaises should support coroutines, futures or Task", "user": {"login": "manuco", "id": 243316, "node_id": "MDQ6VXNlcjI0MzMxNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/243316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/manuco", "html_url": "https://github.com/manuco", "followers_url": "https://api.github.com/users/manuco/followers", "following_url": "https://api.github.com/users/manuco/following{/other_user}", "gists_url": "https://api.github.com/users/manuco/gists{/gist_id}", "starred_url": "https://api.github.com/users/manuco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/manuco/subscriptions", "organizations_url": "https://api.github.com/users/manuco/orgs", "repos_url": "https://api.github.com/users/manuco/repos", "events_url": "https://api.github.com/users/manuco/events{/privacy}", "received_events_url": "https://api.github.com/users/manuco/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 360059026, "node_id": "MDU6TGFiZWwzNjAwNTkwMjY=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/documentation", "name": "documentation", "color": "d4c5f9", "default": true, "description": null}, {"id": 195770450, "node_id": "MDU6TGFiZWwxOTU3NzA0NTA=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-03-22T10:03:21Z", "updated_at": "2017-05-01T16:35:17Z", "closed_at": "2017-05-01T16:33:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`assertRaises()` works with and without a callable.\r\n\r\nWithout a callable, and as a context manager, `assertRaises()` works nicely. \r\n\r\nBut with _something that can raises an exception but is not a bare callable_ such as `Task` or `Futures`, `assertRaises()` doesn't wait until the end of the _async callable like object_ to assert that no exception has been raised.\r\n\r\nWouldn't it be nice to write something like:\r\n```python\r\nimport asyncio\r\n\r\n# This is the function to be tested\r\n\r\n@asyncio.coroutine\r\ndef background_work():\r\n\tyield from asyncio.sleep(0.1)\r\n\traise RuntimeError(\"Plop\")\r\n\r\n# this is the test part\r\n\r\nimport asynctest\r\n\r\nclass MyTests(asynctest.TestCase):\r\n\r\n\tdef setUp(self):\r\n\t\tself.t = asyncio.get_event_loop().create_task(background_work())\r\n\r\n\t@asyncio.coroutine\r\n\tdef test_with_with(self):\r\n\t\t# This one is working\r\n\t\twith self.assertRaises(RuntimeError):\r\n\t\t\tyield from self.t\r\n\r\n\t@asyncio.coroutine\r\n\tdef test_with_task(self):\r\n\t\t# Not this one\r\n\t\tyield from self.assertRaises(RuntimeError, self.t)\r\n\r\n\tdef function_waiting_task(self):\r\n\t\treturn (yield from self.t)\r\n\r\n\t@asyncio.coroutine\r\n\tdef test_with_function(self):\r\n\t\t# Not this one\r\n\t\tyield from self.assertRaises(RuntimeError, self.function_waiting_task)\r\n\r\n```\r\n\r\nThe point is the same with `assertRaisesRegex()`, `assertWarns()`, `assertWarnsRegex()`.\r\n\r\nI'm not sure it is possible or easy to do, but if it is not, it should IMHO at least be documented.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/37", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/37/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/37/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/37", "id": 212788824, "node_id": "MDU6SXNzdWUyMTI3ODg4MjQ=", "number": 37, "title": "Implement create_autospec", "user": {"login": "smessmer", "id": 2373925, "node_id": "MDQ6VXNlcjIzNzM5MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2373925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smessmer", "html_url": "https://github.com/smessmer", "followers_url": "https://api.github.com/users/smessmer/followers", "following_url": "https://api.github.com/users/smessmer/following{/other_user}", "gists_url": "https://api.github.com/users/smessmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/smessmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smessmer/subscriptions", "organizations_url": "https://api.github.com/users/smessmer/orgs", "repos_url": "https://api.github.com/users/smessmer/repos", "events_url": "https://api.github.com/users/smessmer/events{/privacy}", "received_events_url": "https://api.github.com/users/smessmer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770450, "node_id": "MDU6TGFiZWwxOTU3NzA0NTA=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-03-08T16:42:41Z", "updated_at": "2017-12-27T18:33:56Z", "closed_at": "2017-12-27T18:33:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sometimes, it isn't possible for me to create instances of mocked classes, because I don't have the dependencies. So I can't call\r\n\r\n    mock = Mock(MyClass())\r\n\r\nbut I'd rather use\r\n\r\n    mock = create_autospec(MyClass)\r\n\r\nI didn't find this functionality in asynctest. Is this planned?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/36", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/36/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/36/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/36", "id": 211454807, "node_id": "MDU6SXNzdWUyMTE0NTQ4MDc=", "number": 36, "title": "missings tags in git", "user": {"login": "RemiCardona", "id": 708740, "node_id": "MDQ6VXNlcjcwODc0MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/708740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RemiCardona", "html_url": "https://github.com/RemiCardona", "followers_url": "https://api.github.com/users/RemiCardona/followers", "following_url": "https://api.github.com/users/RemiCardona/following{/other_user}", "gists_url": "https://api.github.com/users/RemiCardona/gists{/gist_id}", "starred_url": "https://api.github.com/users/RemiCardona/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RemiCardona/subscriptions", "organizations_url": "https://api.github.com/users/RemiCardona/orgs", "repos_url": "https://api.github.com/users/RemiCardona/repos", "events_url": "https://api.github.com/users/RemiCardona/events{/privacy}", "received_events_url": "https://api.github.com/users/RemiCardona/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-02T17:04:16Z", "updated_at": "2017-03-04T14:11:16Z", "closed_at": "2017-03-04T14:11:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "tags for 0.9.0 and 0.10.0 are missing in github repo. Not a big deal though, pip tarballs work ok.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/33", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/33/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/33/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/33", "id": 202401870, "node_id": "MDU6SXNzdWUyMDI0MDE4NzA=", "number": 33, "title": "AttributeError: __aexit__ on asynctest.patch", "user": {"login": "dimaqq", "id": 662249, "node_id": "MDQ6VXNlcjY2MjI0OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/662249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimaqq", "html_url": "https://github.com/dimaqq", "followers_url": "https://api.github.com/users/dimaqq/followers", "following_url": "https://api.github.com/users/dimaqq/following{/other_user}", "gists_url": "https://api.github.com/users/dimaqq/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimaqq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimaqq/subscriptions", "organizations_url": "https://api.github.com/users/dimaqq/orgs", "repos_url": "https://api.github.com/users/dimaqq/repos", "events_url": "https://api.github.com/users/dimaqq/events{/privacy}", "received_events_url": "https://api.github.com/users/dimaqq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-22T19:00:08Z", "updated_at": "2017-01-22T21:05:28Z", "closed_at": "2017-01-22T21:05:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying following test code:\r\n\r\n```\r\n@pytest.mark.asyncio\r\nasync def test_not_valid():\r\n    with asynctest.patch(\"aiohttp.ClientSession\"):\r\n        assert not await endpoint.is_valid(\"foobar\")\r\n```\r\n\r\nAnd it raises:\r\n\r\n```\r\n    @pytest.mark.asyncio\r\n    async def test_not_valid():\r\n        with asynctest.patch(\"aiohttp.ClientSession\"):\r\n>           assert not await endpoint.is_valid(\"foobar\")\r\n\r\nextimulate/test/test_endpoint.py:30:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nusername = 'foobar'\r\n\r\n    async def is_valid(username):\r\n>       async with aiohttp.ClientSession() as session:\r\nE       AttributeError: __aexit__\r\n\r\nextimulate/endpoint.py:11: AttributeError\r\n```\r\n\r\nIs it that a problem with `asynctest.patch` itself, or that I can't run it under `pytest + pytest-asyncio` ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/30", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/30/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/30/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/30", "id": 198331384, "node_id": "MDU6SXNzdWUxOTgzMzEzODQ=", "number": 30, "title": "AttributeError: 'NoneType' object has no attribute '_spec_coroutines'", "user": {"login": "siyb", "id": 1403000, "node_id": "MDQ6VXNlcjE0MDMwMDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1403000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siyb", "html_url": "https://github.com/siyb", "followers_url": "https://api.github.com/users/siyb/followers", "following_url": "https://api.github.com/users/siyb/following{/other_user}", "gists_url": "https://api.github.com/users/siyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/siyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siyb/subscriptions", "organizations_url": "https://api.github.com/users/siyb/orgs", "repos_url": "https://api.github.com/users/siyb/repos", "events_url": "https://api.github.com/users/siyb/events{/privacy}", "received_events_url": "https://api.github.com/users/siyb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-02T12:50:51Z", "updated_at": "2017-01-02T13:00:26Z", "closed_at": "2017-01-02T13:00:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Version:**\r\n0.9.0\r\n\r\n**Test Code:**\r\n    from asynctest import TestCase as AsyncTestCase\r\n    from asynctest import CoroutineMock\r\n\r\n    class WebsocketClientTest(AsyncTestCase):\r\n\r\n        def test_foo(self):\r\n            test = CoroutineMock()\r\n            ...\r\n\r\n  File \"/MYPATH/venv/lib/python3.5/site-packages/asynctest/mock.py\", line 86, in _mock_add_spec\r\n    if asyncio.iscoroutinefunction(getattr(spec, attr)):\r\nAttributeError: 'NoneType' object has no attribute '_spec_coroutines'\r\n\r\nAm I doing something wrong here? I have tried specifying a side_effect and return_value, yields same error.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/29", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/29/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/29/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/29", "id": 196546699, "node_id": "MDU6SXNzdWUxOTY1NDY2OTk=", "number": 29, "title": "MagicMock doesn't implement `__aenter__` or `__aexit__`", "user": {"login": "txomon", "id": 228250, "node_id": "MDQ6VXNlcjIyODI1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/228250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/txomon", "html_url": "https://github.com/txomon", "followers_url": "https://api.github.com/users/txomon/followers", "following_url": "https://api.github.com/users/txomon/following{/other_user}", "gists_url": "https://api.github.com/users/txomon/gists{/gist_id}", "starred_url": "https://api.github.com/users/txomon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/txomon/subscriptions", "organizations_url": "https://api.github.com/users/txomon/orgs", "repos_url": "https://api.github.com/users/txomon/repos", "events_url": "https://api.github.com/users/txomon/events{/privacy}", "received_events_url": "https://api.github.com/users/txomon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770450, "node_id": "MDU6TGFiZWwxOTU3NzA0NTA=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 42, "created_at": "2016-12-19T23:24:21Z", "updated_at": "2017-11-14T09:39:54Z", "closed_at": "2017-10-23T08:57:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "When testing asyncio code, the probability of needing to test async context manager is high. \r\n\r\nThe current code using MagicMock doesn't implement `__aenter__` or `__aexit__` methods", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/27", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/27/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/27/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/27", "id": 188917920, "node_id": "MDU6SXNzdWUxODg5MTc5MjA=", "number": 27, "title": "CoroutineMock object is not iterable", "user": {"login": "argaen", "id": 3578154, "node_id": "MDQ6VXNlcjM1NzgxNTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3578154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/argaen", "html_url": "https://github.com/argaen", "followers_url": "https://api.github.com/users/argaen/followers", "following_url": "https://api.github.com/users/argaen/following{/other_user}", "gists_url": "https://api.github.com/users/argaen/gists{/gist_id}", "starred_url": "https://api.github.com/users/argaen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/argaen/subscriptions", "organizations_url": "https://api.github.com/users/argaen/orgs", "repos_url": "https://api.github.com/users/argaen/repos", "events_url": "https://api.github.com/users/argaen/events{/privacy}", "received_events_url": "https://api.github.com/users/argaen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770448, "node_id": "MDU6TGFiZWwxOTU3NzA0NDg=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2016-11-12T15:40:05Z", "updated_at": "2017-09-22T09:42:24Z", "closed_at": "2017-01-16T20:45:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I installed ubuntu 16.10 which comes with Python version: Python 3.5.2 (default, Sep 10 2016, 08:21:44). Running the same tests that were previously working returns the following error:\r\n\r\n```python\r\n    @functools.wraps(func)\r\n    def coro(*args, **kw):\r\n        res = func(*args, **kw)\r\n        if (futures.isfuture(res) or inspect.isgenerator(res) or\r\n            isinstance(res, CoroWrapper)):\r\n>           res = yield from res\r\nE           TypeError: 'CoroutineMock' object is not iterable\r\n```\r\n\r\nAny ideas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/26", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/26/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/26/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/26", "id": 186697191, "node_id": "MDU6SXNzdWUxODY2OTcxOTE=", "number": 26, "title": "support setUpClass and tearDownClass as coroutines", "user": {"login": "thehesiod", "id": 4001789, "node_id": "MDQ6VXNlcjQwMDE3ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4001789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thehesiod", "html_url": "https://github.com/thehesiod", "followers_url": "https://api.github.com/users/thehesiod/followers", "following_url": "https://api.github.com/users/thehesiod/following{/other_user}", "gists_url": "https://api.github.com/users/thehesiod/gists{/gist_id}", "starred_url": "https://api.github.com/users/thehesiod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thehesiod/subscriptions", "organizations_url": "https://api.github.com/users/thehesiod/orgs", "repos_url": "https://api.github.com/users/thehesiod/repos", "events_url": "https://api.github.com/users/thehesiod/events{/privacy}", "received_events_url": "https://api.github.com/users/thehesiod/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 360059026, "node_id": "MDU6TGFiZWwzNjAwNTkwMjY=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/documentation", "name": "documentation", "color": "d4c5f9", "default": true, "description": null}, {"id": 195770453, "node_id": "MDU6TGFiZWwxOTU3NzA0NTM=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-02T02:28:33Z", "updated_at": "2017-10-24T11:52:09Z", "closed_at": "2017-10-24T11:52:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "per https://docs.python.org/2/library/unittest.html#unittest.TestCase.setUpClass\r\n\r\nthis happens during TestSuite.run which calls self._handleClassSetUp...which means that _init_loop would need to be called much earlier.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/25", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/25/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/25/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/25", "id": 174324872, "node_id": "MDU6SXNzdWUxNzQzMjQ4NzI=", "number": 25, "title": "unable to mock parts of asynctest after upgrading to 0.8.0", "user": {"login": "mozbhearsum", "id": 49649, "node_id": "MDQ6VXNlcjQ5NjQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/49649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mozbhearsum", "html_url": "https://github.com/mozbhearsum", "followers_url": "https://api.github.com/users/mozbhearsum/followers", "following_url": "https://api.github.com/users/mozbhearsum/following{/other_user}", "gists_url": "https://api.github.com/users/mozbhearsum/gists{/gist_id}", "starred_url": "https://api.github.com/users/mozbhearsum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mozbhearsum/subscriptions", "organizations_url": "https://api.github.com/users/mozbhearsum/orgs", "repos_url": "https://api.github.com/users/mozbhearsum/repos", "events_url": "https://api.github.com/users/mozbhearsum/events{/privacy}", "received_events_url": "https://api.github.com/users/mozbhearsum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 360059026, "node_id": "MDU6TGFiZWwzNjAwNTkwMjY=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/documentation", "name": "documentation", "color": "d4c5f9", "default": true, "description": null}, {"id": 195770450, "node_id": "MDU6TGFiZWwxOTU3NzA0NTA=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2016-08-31T16:55:28Z", "updated_at": "2016-11-02T10:19:54Z", "closed_at": "2016-11-02T10:19:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "This may be a dupe of #23, but...\n\nI have code like this:\n\n```\n@asynctest.patch(\"balrogagent.client.request\")\n@asynctest.patch(\"balrogagent.cmd.telemetry_is_ready\")\n@asynctest.patch(\"balrogagent.cmd.time_is_ready\")\nclass TestRunAgent(asynctest.TestCase):\n    def setUp(self):\n        self.loop = asyncio.get_event_loop()\n\n    async def _runAgent(self, scheduled_changes, request):\n        request.return_value = aiohttp.client.ClientResponse(\"GET\", \"http://balrog.fake/api/scheduled_changes\")\n        request.return_value.headers = {\"Content-Type\": \"application/json\"}\n        body = {\"count\": len(scheduled_changes), \"scheduled_changes\": scheduled_changes}\n        request.return_value._content = bytes(json.dumps(body), \"utf-8\")\n\n        return await run_agent(self.loop, \"http://balrog.fake\", \"balrog\", \"balrog\", \"telemetry\", once=True, raise_exceptions=True)\n```\n\n...and with asynctest 0.8.0, I get fails such as:\n\n```\nE               TypeError: 'CoroutineMock' object is not subscriptable\n```\n\nHowever, everything works fine with asynctest 0.7.1, so it seems like it's an asynctest problem (or at least something asynctest can affect) rather than an aiohttp one.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/23", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/23/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/23/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/23", "id": 171007846, "node_id": "MDU6SXNzdWUxNzEwMDc4NDY=", "number": 23, "title": "patch('aiohttp.ClientSession.get') fails to detect coroutine", "user": {"login": "rndusr", "id": 7514458, "node_id": "MDQ6VXNlcjc1MTQ0NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7514458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rndusr", "html_url": "https://github.com/rndusr", "followers_url": "https://api.github.com/users/rndusr/followers", "following_url": "https://api.github.com/users/rndusr/following{/other_user}", "gists_url": "https://api.github.com/users/rndusr/gists{/gist_id}", "starred_url": "https://api.github.com/users/rndusr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rndusr/subscriptions", "organizations_url": "https://api.github.com/users/rndusr/orgs", "repos_url": "https://api.github.com/users/rndusr/repos", "events_url": "https://api.github.com/users/rndusr/events{/privacy}", "received_events_url": "https://api.github.com/users/rndusr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-13T12:55:20Z", "updated_at": "2017-04-25T14:49:46Z", "closed_at": "2016-08-13T14:51:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to mock an aiohttp GET request, but asynctest uses MagicMock instead of CoroutineMock.\n\n``` python\nimport asynctest\nimport aiohttp\nclass TestAiohttp(asynctest.TestCase):\n    @asynctest.patch('aiohttp.ClientSession.get')\n    async def test_get_request(self, mock_get):\n        response = aiohttp.ClientSession().get('http://localhost/')\n        coro = response.text()\n        self.assertEqual(type(coro), asynctest.CoroutineMock)\n```\n\nThis test should pass, shouldn't it? I get:\n\n```\nAssertionError: <class 'asynctest.mock.MagicMock'> != <class 'asynctest.mock.CoroutineMock'>\n```\n\nI'm using the current master branch.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/21", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/21/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/21/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/21", "id": 169405467, "node_id": "MDU6SXNzdWUxNjk0MDU0Njc=", "number": 21, "title": "doCleanups() may not be callable in tearDown()", "user": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770448, "node_id": "MDU6TGFiZWwxOTU3NzA0NDg=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-08-04T15:39:01Z", "updated_at": "2017-10-24T11:41:15Z", "closed_at": "2017-10-24T11:41:15Z", "author_association": "OWNER", "active_lock_reason": null, "body": "According to unittest documentation, case.doCleanups() can be called in the case's tearDown() function.\nsee: https://docs.python.org/3/library/unittest.html#unittest.TestCase.doCleanups\n\nHowever, in order to support coroutines as cleanup callables, we register loop.run_until_complete(coroutine()), which has two unfortunate effects:\n- the created coroutine may never be awaited (for instance if an previously running cleanup raises an exception), which leads to a warning displayed,\n- doCleanups() can not be called from a coroutine (as the loop is already running and is not reentrant), especially not tearDown().\n\ndoCleanups should be converted into a coroutine, at a cost of more code duplication from unittest, probably.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/18", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/18/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/18/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/18", "id": 166473146, "node_id": "MDU6SXNzdWUxNjY0NzMxNDY=", "number": 18, "title": "conflict with sure project", "user": {"login": "hyzhak", "id": 184706, "node_id": "MDQ6VXNlcjE4NDcwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/184706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hyzhak", "html_url": "https://github.com/hyzhak", "followers_url": "https://api.github.com/users/hyzhak/followers", "following_url": "https://api.github.com/users/hyzhak/following{/other_user}", "gists_url": "https://api.github.com/users/hyzhak/gists{/gist_id}", "starred_url": "https://api.github.com/users/hyzhak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hyzhak/subscriptions", "organizations_url": "https://api.github.com/users/hyzhak/orgs", "repos_url": "https://api.github.com/users/hyzhak/repos", "events_url": "https://api.github.com/users/hyzhak/events{/privacy}", "received_events_url": "https://api.github.com/users/hyzhak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770451, "node_id": "MDU6TGFiZWwxOTU3NzA0NTE=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}, {"id": 195770453, "node_id": "MDU6TGFiZWwxOTU3NzA0NTM=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-07-20T01:09:35Z", "updated_at": "2017-02-27T12:45:51Z", "closed_at": "2017-02-10T11:51:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is deep explanation https://github.com/gabrielfalcao/sure/issues/124. Because I sent few hours on chasing this bug I think It may help other developers too, before solution will be found.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/15", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/15/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/15/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/15", "id": 159906844, "node_id": "MDU6SXNzdWUxNTk5MDY4NDQ=", "number": 15, "title": "Support mocks of asynchronous context managers and asynchronous iterators", "user": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-13T09:23:26Z", "updated_at": "2017-01-16T20:47:34Z", "closed_at": "2017-01-16T20:47:34Z", "author_association": "OWNER", "active_lock_reason": null, "body": "While we support the `async` and `await` syntax. Several features of the pep 492 aren't yet supported by asynctest.\n\nWe must support asynchronous iterators (`__aiter__`, `__anext__`) and asynchronous context managers (`__aenter__`, `__aexit__`).\n\nsee: https://www.python.org/dev/peps/pep-0492/\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/12", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/12/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/12/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/12", "id": 149166497, "node_id": "MDU6SXNzdWUxNDkxNjY0OTc=", "number": 12, "title": "Add a note about using patch decorators on coroutines", "user": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 360059026, "node_id": "MDU6TGFiZWwzNjAwNTkwMjY=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/documentation", "name": "documentation", "color": "d4c5f9", "default": true, "description": null}, {"id": 195770450, "node_id": "MDU6TGFiZWwxOTU3NzA0NTA=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2016-04-18T14:26:20Z", "updated_at": "2016-08-02T15:04:10Z", "closed_at": "2016-08-02T15:04:10Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The improved implementation of patches on coroutines, introduces subtle changes in the behavior of some tests, especially when using callbacks, for instance:\n\n```\ndef to_patch():\n    return \"not patched\"\n\nfut = asyncio.Future()\ndef callback():\n    fut.set_result(to_patch())\n\n@asynctest.mock.patch('to_patch', return_value=\"patched\"):\nasync def coroutine():\n    asyncio.get_event_loop().call_soon(callback)\n    assert (await fut) == \"patched\"  # fails!\n```\n\nThe assertion fails since the patch is only activated inside the coroutine, while the callback is not.\nIn this case, the with statement should be used instead:\n\n```\nasync def coroutine():\n    with asynctest.mock.patch('to_patch', return_value=\"patched\"):\n        asyncio.get_event_loop().call_soon(callback)\n        assert (await fut) == \"patched\"  # fails!\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/9", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/9/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/9/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/9", "id": 145545450, "node_id": "MDU6SXNzdWUxNDU1NDU0NTA=", "number": 9, "title": "missing get_child_watcher and set_child_watcher in asynctest.case._Policy", "user": {"login": "ealfie", "id": 2278691, "node_id": "MDQ6VXNlcjIyNzg2OTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2278691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ealfie", "html_url": "https://github.com/ealfie", "followers_url": "https://api.github.com/users/ealfie/followers", "following_url": "https://api.github.com/users/ealfie/following{/other_user}", "gists_url": "https://api.github.com/users/ealfie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ealfie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ealfie/subscriptions", "organizations_url": "https://api.github.com/users/ealfie/orgs", "repos_url": "https://api.github.com/users/ealfie/repos", "events_url": "https://api.github.com/users/ealfie/events{/privacy}", "received_events_url": "https://api.github.com/users/ealfie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770448, "node_id": "MDU6TGFiZWwxOTU3NzA0NDg=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2016-04-03T22:07:48Z", "updated_at": "2016-04-05T10:24:02Z", "closed_at": "2016-04-05T10:24:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had a few tests using create_subproces_shell using asynctest 0.6 which ran ok.\n\nWhen I upgraded to asynctest 0.7 those tests are now failing because the loop has no child watcher. This I believe is because the event loop policy has no `get_child_watcher` nor `set_child_watcher` methods.\n\nIn the test below, `SomeAsynctestTestCase` fails while `SomeUnittestTestCase` succeeds, while trying to call `get_child_watcher()`. I paste the output also.\n\n```\nimport asyncio\nimport unittest\nimport asynctest\n\n@asynctest.ignore_loop\nclass SomeAsynctestTestCase(asynctest.TestCase):\n    def test_get_child_watcher(self):\n        pol = asyncio.get_event_loop_policy()\n        pol.get_child_watcher()\n\nclass SomeUnittestTestCase(unittest.TestCase):\n    def test_get_child_watcher(self):\n        pol = asyncio.get_event_loop_policy()\n        pol.get_child_watcher()\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\n```\ntest_get_child_watcher (__main__.SomeAsynctestTestCase) ... ERROR\ntest_get_child_watcher (__main__.SomeUnittestTestCase) ... ok\n\n======================================================================\nERROR: test_get_child_watcher (__main__.SomeAsynctestTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/ezequiel/pyenvs/t5/lib/python3.4/site-packages/asynctest/case.py\", line 221, in run\n    self._run_test_method(testMethod)\n  File \"/home/ezequiel/pyenvs/t5/lib/python3.4/site-packages/asynctest/case.py\", line 271, in _run_test_method\n    result = method()\n  File \"./xtest.py\", line 9, in test_get_child_watcher\n    pol.get_child_watcher()\n  File \"/home/ezequiel/opt/Python-3.4.3/lib/python3.4/asyncio/events.py\", line 482, in get_child_watcher\n    raise NotImplementedError\nNotImplementedError\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nFAILED (errors=1)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/7", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/7/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/7/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/7", "id": 144195586, "node_id": "MDU6SXNzdWUxNDQxOTU1ODY=", "number": 7, "title": "Return original event loop after test case", "user": {"login": "jonatlib", "id": 1936521, "node_id": "MDQ6VXNlcjE5MzY1MjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1936521?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonatlib", "html_url": "https://github.com/jonatlib", "followers_url": "https://api.github.com/users/jonatlib/followers", "following_url": "https://api.github.com/users/jonatlib/following{/other_user}", "gists_url": "https://api.github.com/users/jonatlib/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonatlib/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonatlib/subscriptions", "organizations_url": "https://api.github.com/users/jonatlib/orgs", "repos_url": "https://api.github.com/users/jonatlib/repos", "events_url": "https://api.github.com/users/jonatlib/events{/privacy}", "received_events_url": "https://api.github.com/users/jonatlib/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770450, "node_id": "MDU6TGFiZWwxOTU3NzA0NTA=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2016-03-29T08:40:20Z", "updated_at": "2016-03-29T16:13:31Z", "closed_at": "2016-03-29T16:13:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Description\n\nAfter running any test case which is using async test, the loop will end up closed. Which is because:\n1. When `asynctest.TestCase` initializing new test it creates new loop in `_init_loop` method.\n2. Then replace current loop with this new created\n3. After test it closes TestCase's loop, which is now the current loop - and never return original one.\n\nThen this closed loop end up as current loop.\n## Issue\n\nThe problem is that, after running any async test case, the `asyncio` module end up in unusable and different state than which it was before running tests.\n## Solution\n1. In `_init_loop` store reference to original event loop, and then proceed same way.\n2. Closing of test's loop is done inside cleanup - so add another cleanup after the one which close the loop. This new cleanup will restore original loop.\n   - Or just override `_unset_loop` to set original loop back\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/5", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/5/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/5/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/5", "id": 127230558, "node_id": "MDU6SXNzdWUxMjcyMzA1NTg=", "number": 5, "title": "asynctest.mock.patch() doesn't patch correctly generators (and undecorated coroutines)", "user": {"login": "sjakthol", "id": 10127907, "node_id": "MDQ6VXNlcjEwMTI3OTA3", "avatar_url": "https://avatars1.githubusercontent.com/u/10127907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjakthol", "html_url": "https://github.com/sjakthol", "followers_url": "https://api.github.com/users/sjakthol/followers", "following_url": "https://api.github.com/users/sjakthol/following{/other_user}", "gists_url": "https://api.github.com/users/sjakthol/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjakthol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjakthol/subscriptions", "organizations_url": "https://api.github.com/users/sjakthol/orgs", "repos_url": "https://api.github.com/users/sjakthol/repos", "events_url": "https://api.github.com/users/sjakthol/events{/privacy}", "received_events_url": "https://api.github.com/users/sjakthol/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770448, "node_id": "MDU6TGFiZWwxOTU3NzA0NDg=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 195770453, "node_id": "MDU6TGFiZWwxOTU3NzA0NTM=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2016-01-18T13:54:21Z", "updated_at": "2016-02-13T08:02:06Z", "closed_at": "2016-02-13T08:02:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\n\nYou have an external package that has an async method your modules call and you want to mock out the calls to the external async method in your unittests.\n### The problem\n\nWhen you decorate your your test methods with `@asynctest.mock.patch`, the external method is not correctly patched and the original method is called. However, if you patch the external method using a `with` statement inside the test case, the method is patched correctly and the mock is called instead of the original one.\n\nTesting a similar scenario with sync methods and the unittest package, `unittest.mock.patch` works properly both as a decorator and as a context manager.\n\nI've setup a small demo about this issue in https://github.com/sjakthol/asynctest-patch-issue-demo to ease reproducing this bug.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/3", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/3/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/3/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/3", "id": 110188725, "node_id": "MDU6SXNzdWUxMTAxODg3MjU=", "number": 3, "title": "Test that when add_reader() is called, remove_reader() is also called later.", "user": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770450, "node_id": "MDU6TGFiZWwxOTU3NzA0NTA=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 195770453, "node_id": "MDU6TGFiZWwxOTU3NzA0NTM=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2015-10-07T09:49:54Z", "updated_at": "2016-11-02T10:20:11Z", "closed_at": "2016-11-02T10:20:11Z", "author_association": "OWNER", "active_lock_reason": null, "body": "A common mistake when using loop.add_reader()/add_writer() is to assume that calling loop.remove_reader()/remove_writer() is not needed as long as the file object watched is closed.\n\nIndeed, with epoll() and co, closing a watched file object removes it from the selector. But python keeps a mapping of filenos and callbacks, which is not updated when a file object is closed.\n\nI would like to catch those mistakes when tests are running, but I'm not sure the test should fail by default.\n\nI can add a set of error checks which can be disabled, like a generalized \"@ignore_loop\".\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/Martiusweb/asynctest/issues/1", "repository_url": "https://api.github.com/repos/Martiusweb/asynctest", "labels_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/1/comments", "events_url": "https://api.github.com/repos/Martiusweb/asynctest/issues/1/events", "html_url": "https://github.com/Martiusweb/asynctest/issues/1", "id": 102176805, "node_id": "MDU6SXNzdWUxMDIxNzY4MDU=", "number": 1, "title": "Option to reuse event loop instead of creating a new one", "user": {"login": "patrick-jones", "id": 10633578, "node_id": "MDQ6VXNlcjEwNjMzNTc4", "avatar_url": "https://avatars0.githubusercontent.com/u/10633578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrick-jones", "html_url": "https://github.com/patrick-jones", "followers_url": "https://api.github.com/users/patrick-jones/followers", "following_url": "https://api.github.com/users/patrick-jones/following{/other_user}", "gists_url": "https://api.github.com/users/patrick-jones/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrick-jones/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrick-jones/subscriptions", "organizations_url": "https://api.github.com/users/patrick-jones/orgs", "repos_url": "https://api.github.com/users/patrick-jones/repos", "events_url": "https://api.github.com/users/patrick-jones/events{/privacy}", "received_events_url": "https://api.github.com/users/patrick-jones/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 195770450, "node_id": "MDU6TGFiZWwxOTU3NzA0NTA=", "url": "https://api.github.com/repos/Martiusweb/asynctest/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "Martiusweb", "id": 195352, "node_id": "MDQ6VXNlcjE5NTM1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/195352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Martiusweb", "html_url": "https://github.com/Martiusweb", "followers_url": "https://api.github.com/users/Martiusweb/followers", "following_url": "https://api.github.com/users/Martiusweb/following{/other_user}", "gists_url": "https://api.github.com/users/Martiusweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Martiusweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Martiusweb/subscriptions", "organizations_url": "https://api.github.com/users/Martiusweb/orgs", "repos_url": "https://api.github.com/users/Martiusweb/repos", "events_url": "https://api.github.com/users/Martiusweb/events{/privacy}", "received_events_url": "https://api.github.com/users/Martiusweb/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2015-08-20T16:25:21Z", "updated_at": "2015-08-24T16:08:57Z", "closed_at": "2015-08-24T16:08:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using [aiopg](https://github.com/aio-libs/aiopg) in a service I am testing.  I would like to set up aiopg in a fixture and then reuse the connection pool in multiple tests. However, this is not possible because asynctest creates a new event loop for each test, meaning that the test and the connection live on separate loops.  As a result, calls from the test to aiopg code never complete.\n\nIt would be nice to optionally reuse a single event loop across many tests.\n", "performed_via_github_app": null, "score": 1.0}]}