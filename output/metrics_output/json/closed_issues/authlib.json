{"total_count": 178, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/lepture/authlib/issues/256", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/256/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/256/events", "html_url": "https://github.com/lepture/authlib/issues/256", "id": 673604356, "node_id": "MDU6SXNzdWU2NzM2MDQzNTY=", "number": 256, "title": "CSRF validation failure when running in docker", "user": {"login": "circius", "id": 14132811, "node_id": "MDQ6VXNlcjE0MTMyODEx", "avatar_url": "https://avatars1.githubusercontent.com/u/14132811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/circius", "html_url": "https://github.com/circius", "followers_url": "https://api.github.com/users/circius/followers", "following_url": "https://api.github.com/users/circius/following{/other_user}", "gists_url": "https://api.github.com/users/circius/gists{/gist_id}", "starred_url": "https://api.github.com/users/circius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/circius/subscriptions", "organizations_url": "https://api.github.com/users/circius/orgs", "repos_url": "https://api.github.com/users/circius/repos", "events_url": "https://api.github.com/users/circius/events{/privacy}", "received_events_url": "https://api.github.com/users/circius/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510050, "node_id": "MDU6TGFiZWw3MzI1MTAwNTA=", "url": "https://api.github.com/repos/lepture/authlib/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2020-08-05T14:55:38Z", "updated_at": "2020-08-12T15:16:01Z", "closed_at": "2020-08-08T09:09:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a flask / authlib client which works perfectly when run on localhost from the shell, but which consistently fails with a CSRF state-mismatch when run in a docker container. I put up a stackexchange [question](https://stackoverflow.com/questions/63228209/flask-authlib-csrf-state-mismatch-only-when-running-in-docker)  a couple of days ago which narrates the problem in more detail.\r\n\r\nthis may well not be an authlib problem, but my minimal example is very minimal and the problem is cropping up in authlib, so this seemed like the best place to report. apologies if that's in error.\r\n\r\n**Error Stacks**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib64/python3.8/site-packages/flask/app.py\", line 2464, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/usr/local/lib64/python3.8/site-packages/flask/app.py\", line 2450, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/usr/local/lib64/python3.8/site-packages/flask/app.py\", line 1867, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/local/lib64/python3.8/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"/usr/local/lib64/python3.8/site-packages/flask/app.py\", line 2447, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/usr/local/lib64/python3.8/site-packages/flask/app.py\", line 1952, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/usr/local/lib64/python3.8/site-packages/flask/app.py\", line 1821, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/local/lib64/python3.8/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"/usr/local/lib64/python3.8/site-packages/flask/app.py\", line 1950, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/usr/local/lib64/python3.8/site-packages/flask/app.py\", line 1936, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/app/src/app/flask_interface/user.py\", line 17, in auth_callback\r\n    token = extensions.auth0.authorize_access_token()\r\n  File \"/usr/local/lib/python3.8/site-packages/authlib/integrations/flask_client/remote_app.py\", line 74, in authorize_access_token\r\n    params = self.retrieve_access_token_params(flask_req, request_token)\r\n  File \"/usr/local/lib/python3.8/site-packages/authlib/integrations/base_client/base_app.py\", line 149, in retrieve_access_token_params\r\n    params = self._retrieve_oauth2_access_token_params(request, params)\r\n  File \"/usr/local/lib/python3.8/site-packages/authlib/integrations/base_client/base_app.py\", line 130, in _retrieve_oauth2_access_token_params\r\n    raise MismatchingStateError()\r\n\r\n```\r\n\r\n**To Reproduce**\r\n\r\nA minimal example can be found [here](https://github.com/circius/flask-authlib-docker-bug). It should be possible to reproduce it by registering an oauth2 client and adding the client configuration to the code.\r\n\r\n**Expected behavior**\r\n\r\nAuthentication should succeed when the client is run in a docker container.\r\n\r\n**Environment:**\r\n - OS: Fedora 32\r\n - Python Version: 3.8.3\r\n - Authlib Version: 0.14.3\r\n\r\n**Additional context**\r\n\r\nThe docker environment is based on python:slim in the code examples above, but I have tested this with a dockerfile based on the fedora:latest package with the same result.\r\n\r\nThe problem seems to arise from non-persistence of the session between the setting of `session[_auth0_authlib_state_]` before the login attempt and its getting when the callback is fired. Here's some pertinent logging:\r\n```\r\ninside set_session_data:\r\n        request: <Request 'http://localhost:5000/login' [GET]>\r\n        key: state,\r\n        value: w4SnGtxMsOrledSvTHg3YzXkwCItHU\r\n\r\n        sess_key: _auth0_authlib_state_.\r\n        setting session[_auth0_authlib_state_] to w4SnGtxMsOrledSvTHg3YzXkwCItHU\r\n\r\n        session:[_auth0_authlib_state_]: w4SnGtxMsOrledSvTHg3YzXkwCItHU\r\n\r\ninside app.flask_interface.user.auth_callback\r\ninside _retrieve_oath2_access_token_params\r\n\r\ninside get_session_data:\r\n        request: <Request 'http://localhost:5000/auth_callback?code=Sssrq1Yun_qhHkk4&state=w4SnGtxMsOrledSvTHg3YzXkwCItHU' [GET]>\r\n        key_param: state\r\n\r\n        generated session key: _auth0_authlib_state_\r\n        getting session.pop(_auth0_authlib_state_, None): no such key\r\n\r\nback in app.flask_interface.user.auth_callback\r\n        request_state: w4SnGtxMsOrledSvTHg3YzXkwCItHU,\r\n        state: None\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/254", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/254/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/254/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/254/events", "html_url": "https://github.com/lepture/authlib/issues/254", "id": 663330586, "node_id": "MDU6SXNzdWU2NjMzMzA1ODY=", "number": 254, "title": "Support both JSON and form data", "user": {"login": "quaxsze", "id": 57526019, "node_id": "MDQ6VXNlcjU3NTI2MDE5", "avatar_url": "https://avatars2.githubusercontent.com/u/57526019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quaxsze", "html_url": "https://github.com/quaxsze", "followers_url": "https://api.github.com/users/quaxsze/followers", "following_url": "https://api.github.com/users/quaxsze/following{/other_user}", "gists_url": "https://api.github.com/users/quaxsze/gists{/gist_id}", "starred_url": "https://api.github.com/users/quaxsze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quaxsze/subscriptions", "organizations_url": "https://api.github.com/users/quaxsze/orgs", "repos_url": "https://api.github.com/users/quaxsze/repos", "events_url": "https://api.github.com/users/quaxsze/events{/privacy}", "received_events_url": "https://api.github.com/users/quaxsze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-21T21:48:54Z", "updated_at": "2020-07-22T06:40:56Z", "closed_at": "2020-07-22T05:01:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "The actual method to handle the token endpoint according to the doc and the example server seems to be something like this:\r\n```\r\n@blueprint.route('/token', methods=['POST'])\r\ndef access_token():\r\n    return oauth.create_token_response()\r\n```\r\n\r\nThis method handles form data as it calls the `create_oauth_request` with the argument `use_json` set to `False`.\r\n`def create_oauth_request(request, request_cls, use_json=False)`\r\n\r\nA way to handle JSON data is to override the Authorization server and its method `create_oauth2_request` to call the one above with `use_json=True`\r\n\r\nLike this:\r\n```\r\nclass AuthServer(AuthorizationServer):\r\n    def __init__(self, query_client=None, save_token=None):\r\n        super().__init__(\r\n            query_client=query_client,\r\n            save_token=save_token,\r\n        )\r\n\r\n    def create_oauth2_request(self, request):\r\n        return create_oauth_request(request, OAuth2Request, use_json=True)\r\n```\r\n\r\nBut handling both and switching according to the incomming request's format is complicated.\r\nCan be done in such a way:\r\n```\r\n@blueprint.route('/token', methods=['POST'])\r\ndef access_token():\r\n    has_form = bool(request.form)\r\n    req = create_oauth_request(request, OAuth2Request, use_json=not has_form)\r\n    return oauth.create_token_response(request=req)\r\n```\r\nBut it feels silly to call a method that will be called again 2 levels after.\r\nIt would be nice to have an elegant way to achieve this, if it does not already exists.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/253", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/253/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/253/events", "html_url": "https://github.com/lepture/authlib/issues/253", "id": 656748188, "node_id": "MDU6SXNzdWU2NTY3NDgxODg=", "number": 253, "title": "I have troubles making the Twitch work", "user": {"login": "lipis", "id": 125676, "node_id": "MDQ6VXNlcjEyNTY3Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/125676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lipis", "html_url": "https://github.com/lipis", "followers_url": "https://api.github.com/users/lipis/followers", "following_url": "https://api.github.com/users/lipis/following{/other_user}", "gists_url": "https://api.github.com/users/lipis/gists{/gist_id}", "starred_url": "https://api.github.com/users/lipis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lipis/subscriptions", "organizations_url": "https://api.github.com/users/lipis/orgs", "repos_url": "https://api.github.com/users/lipis/repos", "events_url": "https://api.github.com/users/lipis/events{/privacy}", "received_events_url": "https://api.github.com/users/lipis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-14T16:37:04Z", "updated_at": "2020-07-15T14:49:11Z", "closed_at": "2020-07-15T14:49:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/gae-init/gae-init/pull/1494\r\n\r\nBasically I want to retrieve the email and the user handle.\r\n\r\nI'm getting the following error: \r\n\r\n```\r\nUnsupportedTokenTypeError: unsupported_token_type: Unsupported token_type: 'token_type'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/252", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/252/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/252/events", "html_url": "https://github.com/lepture/authlib/issues/252", "id": 656460795, "node_id": "MDU6SXNzdWU2NTY0NjA3OTU=", "number": 252, "title": "authorize_access_token breaks when request has extra query/path parameter", "user": {"login": "rupansh", "id": 3929608, "node_id": "MDQ6VXNlcjM5Mjk2MDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3929608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rupansh", "html_url": "https://github.com/rupansh", "followers_url": "https://api.github.com/users/rupansh/followers", "following_url": "https://api.github.com/users/rupansh/following{/other_user}", "gists_url": "https://api.github.com/users/rupansh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rupansh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rupansh/subscriptions", "organizations_url": "https://api.github.com/users/rupansh/orgs", "repos_url": "https://api.github.com/users/rupansh/repos", "events_url": "https://api.github.com/users/rupansh/events{/privacy}", "received_events_url": "https://api.github.com/users/rupansh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510050, "node_id": "MDU6TGFiZWw3MzI1MTAwNTA=", "url": "https://api.github.com/repos/lepture/authlib/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-07-14T09:15:10Z", "updated_at": "2020-07-15T14:48:36Z", "closed_at": "2020-07-15T14:48:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nI am using starlette integration with fastapi\r\nIn my auth endpoint I have another query parameter in my url called username which I am taking from the login endpoint\r\ni.e\r\nlogin endpoint:\r\n```\r\n    redirect = f\"{req.url_for('github_auth')}/?username={req.query_params['username']}\"\r\n    return await oauth.github.authorize_redirect(req, redirect)\r\n```\r\n\r\nauth endpoint:\r\n```\r\n    token = await oauth.github.authorize_access_token(req)\r\n```\r\n\r\nHowever this causes an error in httpx. \r\nIt doesn't happen when username is not passed.\r\nPath parameter isn't working either!\r\n```\r\n    redirect = req.url_for(\"github_auth\", username=req.query_params[\"username\"])\r\n```\r\n\r\n```\r\n@router.get(\"/github/auth/{username}/\")\r\nasync def github_auth(username: str, request: Request)\r\n```\r\n\r\n**Error Stacks**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 385, in run_asgi\r\n    result = await app(self.scope, self.receive, self.send)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/uvicorn/middleware/proxy_headers.py\", line 45, in __call__\r\n    return await self.app(scope, receive, send)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/fastapi/applications.py\", line 181, in __call__\r\n    await super().__call__(scope, receive, send)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/starlette/applications.py\", line 102, in __call__\r\n    await self.middleware_stack(scope, receive, send)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 181, in __call__\r\n    raise exc from None\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 159, in __call__\r\n    await self.app(scope, receive, _send)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/starlette/middleware/sessions.py\", line 75, in __call__\r\n    await self.app(scope, receive, send_wrapper)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/starlette/exceptions.py\", line 82, in __call__\r\n    raise exc from None\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/starlette/exceptions.py\", line 71, in __call__\r\n    await self.app(scope, receive, sender)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/starlette/routing.py\", line 550, in __call__\r\n    await route.handle(scope, receive, send)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/starlette/routing.py\", line 227, in handle\r\n    await self.app(scope, receive, send)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/starlette/routing.py\", line 41, in app\r\n    response = await func(request)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/fastapi/routing.py\", line 196, in app\r\n    raw_response = await run_endpoint_function(\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/fastapi/routing.py\", line 147, in run_endpoint_function\r\n    return await dependant.call(**values)\r\n  File \"./routers/oauth.py\", line 40, in github_auth\r\n    await oauth.github.authorize_access_token(request)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/authlib/integrations/starlette_client/integration.py\", line 58, in authorize_access_token\r\n    return await self.fetch_access_token(**params)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/authlib/integrations/base_client/async_app.py\", line 105, in fetch_access_token\r\n    token = await client.fetch_token(token_endpoint, **kwargs)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/authlib/integrations/httpx_client/oauth2_client.py\", line 103, in _fetch_token\r\n    resp = await self.post(\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/httpx/_client.py\", line 1374, in post\r\n    return await self.request(\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/authlib/integrations/httpx_client/oauth2_client.py\", line 84, in request\r\n    return await super(AsyncOAuth2Client, self).request(\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/httpx/_client.py\", line 1137, in request\r\n    request = self.build_request(\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/httpx/_client.py\", line 194, in build_request\r\n    url = self.merge_url(url)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/httpx/_client.py\", line 214, in merge_url\r\n    url = self.base_url.join(relative_url=url)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/httpx/_models.py\", line 222, in join\r\n    return URL(relative_url)\r\n  File \"/home/rupansh/PycharmProjects/bruh-project2/venv/lib/python3.8/site-packages/httpx/_models.py\", line 71, in __init__\r\n    self._uri_reference = url._uri_reference\r\nAttributeError: 'NoneType' object has no attribute '_uri_reference'\r\n\r\n```\r\n\r\n**To Reproduce**\r\n\r\n```\r\nfrom authlib.integrations.starlette_client import OAuth\r\nfrom fastapi import APIRouter, Request, HTTPException\r\n\r\nrouter = APIRouter()\r\noauth = OAuth()\r\noauth.register(name=\"github\", ...)\r\n\r\n@router.route(\"/github\")\r\nasync def github_login(req: Request):\r\n    if not (\"username\" in req.query_params.keys() and req.query_params[\"username\"]):\r\n        raise HTTPException(status_code=400, detail=\"invalid_username\")\r\n    redirect = req.url_for(\"github_auth\", username=req.query_params[\"username\"])\r\n    return await oauth.github.authorize_redirect(req, redirect)\r\n\r\n@router.route(\"/github/auth\")\r\nasync def github_auth(request: Request):\r\n    if not (\"username\" in request.query_params.keys() and request.query_params[\"username\"]):\r\n        raise HTTPException(status_code=400, detail=\"invalid_username\")\r\n\r\n    token = await oauth.github.authorize_access_token(request)\r\n    # do stuff with token\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThe server shouldn't error out at `token = await oauth.github.authorize_access_token(request)`\r\n\r\n**Environment:**\r\n\r\n - OS: Linux (5.7.7)\r\n - Python Version: 3.8\r\n - Authlib Version: 0.14.3\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/249", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/249/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/249/events", "html_url": "https://github.com/lepture/authlib/issues/249", "id": 654649762, "node_id": "MDU6SXNzdWU2NTQ2NDk3NjI=", "number": 249, "title": "Support both authorization code with and without PKCE?", "user": {"login": "quaxsze", "id": 57526019, "node_id": "MDQ6VXNlcjU3NTI2MDE5", "avatar_url": "https://avatars2.githubusercontent.com/u/57526019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quaxsze", "html_url": "https://github.com/quaxsze", "followers_url": "https://api.github.com/users/quaxsze/followers", "following_url": "https://api.github.com/users/quaxsze/following{/other_user}", "gists_url": "https://api.github.com/users/quaxsze/gists{/gist_id}", "starred_url": "https://api.github.com/users/quaxsze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quaxsze/subscriptions", "organizations_url": "https://api.github.com/users/quaxsze/orgs", "repos_url": "https://api.github.com/users/quaxsze/repos", "events_url": "https://api.github.com/users/quaxsze/events{/privacy}", "received_events_url": "https://api.github.com/users/quaxsze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-10T09:30:46Z", "updated_at": "2020-07-13T08:34:29Z", "closed_at": "2020-07-13T08:34:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are using Authlib on out project Udata to authenticate third party app, most of them by authorization code.\r\nWe are implementing the PKCE flow. We would like to be able to support both authorization code with and without PKCE, in order for existing apps to continue working, and new ones to use PKCE.\r\n\r\nIs this actually possible with authlib? The documentation does not seem to allow it.\r\n\r\nSupporting both options depending on if the client sends a code challenge or not to the authorize endpoint would seem feasible?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/247", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/247/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/247/events", "html_url": "https://github.com/lepture/authlib/issues/247", "id": 648708753, "node_id": "MDU6SXNzdWU2NDg3MDg3NTM=", "number": 247, "title": "Inconsistency licence statements between README and LICENSE", "user": {"login": "jorgecarleitao", "id": 2772607, "node_id": "MDQ6VXNlcjI3NzI2MDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2772607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jorgecarleitao", "html_url": "https://github.com/jorgecarleitao", "followers_url": "https://api.github.com/users/jorgecarleitao/followers", "following_url": "https://api.github.com/users/jorgecarleitao/following{/other_user}", "gists_url": "https://api.github.com/users/jorgecarleitao/gists{/gist_id}", "starred_url": "https://api.github.com/users/jorgecarleitao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jorgecarleitao/subscriptions", "organizations_url": "https://api.github.com/users/jorgecarleitao/orgs", "repos_url": "https://api.github.com/users/jorgecarleitao/repos", "events_url": "https://api.github.com/users/jorgecarleitao/events{/privacy}", "received_events_url": "https://api.github.com/users/jorgecarleitao/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-07-01T06:23:45Z", "updated_at": "2020-07-01T18:44:16Z", "closed_at": "2020-07-01T13:14:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "The README states\r\n\r\n```\r\nLicense\r\n\r\nAuthlib offers two licenses:\r\n\r\n    BSD for open source projects\r\n    Commercial license for closed source projects\r\n```\r\n\r\nhowever, the LICENSE is a BSD license, which is compliant with closed source (redistribution). As it stands, I read this as\r\n\r\n> If I develop a close source project, I must buy a commercial license; if it is an open source, I can use BSD.\r\n\r\nIf this is the case, then this project *is not* BSD licensed, as its actual license is\r\n\r\n> If usage in open source, you can use it under the terms of BSD; else, you must buy a commercial license\r\n\r\nI propose that we clarify what exactly do we mean with `Commercial license for closed source projects`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/246", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/246/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/246/events", "html_url": "https://github.com/lepture/authlib/issues/246", "id": 644722173, "node_id": "MDU6SXNzdWU2NDQ3MjIxNzM=", "number": 246, "title": "id_token always returned with access_token despite response type being 'code' ", "user": {"login": "cutenarwhal", "id": 40391421, "node_id": "MDQ6VXNlcjQwMzkxNDIx", "avatar_url": "https://avatars1.githubusercontent.com/u/40391421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cutenarwhal", "html_url": "https://github.com/cutenarwhal", "followers_url": "https://api.github.com/users/cutenarwhal/followers", "following_url": "https://api.github.com/users/cutenarwhal/following{/other_user}", "gists_url": "https://api.github.com/users/cutenarwhal/gists{/gist_id}", "starred_url": "https://api.github.com/users/cutenarwhal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cutenarwhal/subscriptions", "organizations_url": "https://api.github.com/users/cutenarwhal/orgs", "repos_url": "https://api.github.com/users/cutenarwhal/repos", "events_url": "https://api.github.com/users/cutenarwhal/events{/privacy}", "received_events_url": "https://api.github.com/users/cutenarwhal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-24T15:47:47Z", "updated_at": "2020-06-25T07:39:50Z", "closed_at": "2020-06-25T07:39:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have set up an OIDC provider using the Authlib OIDC provider example.  And defined an OIDC client with response type of 'code' only, with scope 'openid profile' as shown from this database screenshot: \r\n\r\n<img width=\"1048\" alt=\"image\" src=\"https://user-images.githubusercontent.com/40391421/85587048-64b4ec80-b67c-11ea-8997-7eb44cacd60f.png\">\r\n\r\nThe OIDC flow proceeds as one would expect except that when the client exchanges the 'code' with the token URL, an 'id_token' is returned in addition to the access_token as shown here: \r\n\r\n<img width=\"667\" alt=\"image\" src=\"https://user-images.githubusercontent.com/40391421/85586251-b8730600-b67b-11ea-8d49-3998b09d3774.png\">\r\n\r\nHow can we prevent the id_token from appearing in this ?  So that only the access_token is returned and the client then can make a separate request for the userinfo. \r\n\r\nIn terms of code, I'm basically running the sample OIDC provider.  https://docs.authlib.org/en/latest/flask/2/openid-connect.html\r\n\r\nThank you very much", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/244", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/244/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/244/events", "html_url": "https://github.com/lepture/authlib/issues/244", "id": 644087383, "node_id": "MDU6SXNzdWU2NDQwODczODM=", "number": 244, "title": "Add more specificity to docstrings", "user": {"login": "YPCrumble", "id": 12019216, "node_id": "MDQ6VXNlcjEyMDE5MjE2", "avatar_url": "https://avatars2.githubusercontent.com/u/12019216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YPCrumble", "html_url": "https://github.com/YPCrumble", "followers_url": "https://api.github.com/users/YPCrumble/followers", "following_url": "https://api.github.com/users/YPCrumble/following{/other_user}", "gists_url": "https://api.github.com/users/YPCrumble/gists{/gist_id}", "starred_url": "https://api.github.com/users/YPCrumble/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YPCrumble/subscriptions", "organizations_url": "https://api.github.com/users/YPCrumble/orgs", "repos_url": "https://api.github.com/users/YPCrumble/repos", "events_url": "https://api.github.com/users/YPCrumble/events{/privacy}", "received_events_url": "https://api.github.com/users/YPCrumble/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-23T19:24:16Z", "updated_at": "2020-07-07T05:39:16Z", "closed_at": "2020-07-07T05:39:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently in the docstrings I see various references to sections of what I presume is the documentation - see the image below for an example. Are these outdated or am I just not able to find them? Thanks for any help!\r\n\r\n![image](https://user-images.githubusercontent.com/12019216/85449301-94bd9c00-b565-11ea-9893-67e6f53f6f46.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/243", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/243/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/243/events", "html_url": "https://github.com/lepture/authlib/issues/243", "id": 643503824, "node_id": "MDU6SXNzdWU2NDM1MDM4MjQ=", "number": 243, "title": "Support response_mode=web_message", "user": {"login": "lehainam-dev", "id": 12379457, "node_id": "MDQ6VXNlcjEyMzc5NDU3", "avatar_url": "https://avatars3.githubusercontent.com/u/12379457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lehainam-dev", "html_url": "https://github.com/lehainam-dev", "followers_url": "https://api.github.com/users/lehainam-dev/followers", "following_url": "https://api.github.com/users/lehainam-dev/following{/other_user}", "gists_url": "https://api.github.com/users/lehainam-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/lehainam-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lehainam-dev/subscriptions", "organizations_url": "https://api.github.com/users/lehainam-dev/orgs", "repos_url": "https://api.github.com/users/lehainam-dev/repos", "events_url": "https://api.github.com/users/lehainam-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/lehainam-dev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-23T03:35:00Z", "updated_at": "2020-07-15T14:49:41Z", "closed_at": "2020-07-15T14:49:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello lepture,\r\nThank you for building and maintaining Authlib.\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\n\r\nI often use OAuth2 for my single page application (mostly written in React). To persist user's session, I use silent exchange flow: open an iframe with the URL of authorization request with `prompt=none` parameter. If the user still has session in the OAuth server, it will redirect `code` and `state` values in the iframe, so the client can use `code` to continue exchange new `token`. Here are the problems:\r\n- The flow depends on client source logic: what if on load, my SPA remove all query string?\r\n- Besides getting `code` and `state` values for token exchange flow, the iframe also loads unnecessary components, such as fonts, js libs, other ajax requests.\r\n\r\nI aware that the client should make a specific route (`/oauth/callback`) to handle only Authorization response, but it may difficult to apply to all SPA clients. And I often use `/` as the default `redirect_uri` (because I do want my user to redirect to the home page after logged in).\r\n\r\n**Describe the solution you'd like**\r\n\r\nHere is a [**draft** specification](https://tools.ietf.org/html/draft-sakimura-oauth-wmrm-00) that defines a new response mode: web_message. It uses HTML5 Web Messaging instead of the redirect to return Authorization response. The response from a valid authorization request is small piece of HTML with JS handle postMessage to return authorization response to the main window.\r\n\r\n**Additional context**\r\n\r\nI would love to hear about your thoughts on this specification, and if you are interested in including this feature in Authlib.\r\n\r\nIf it would be welcomed, I would be happy to make a pull request to support simple mode in the spec.\r\n\r\nSorry if my expression is confused or unnecessary long and complicated, I have a hard time written in English.\r\n\r\nHave a great day!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/239", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/239/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/239/events", "html_url": "https://github.com/lepture/authlib/issues/239", "id": 639330390, "node_id": "MDU6SXNzdWU2MzkzMzAzOTA=", "number": 239, "title": "Allow ssl verify = False on load_server_metadata (client)", "user": {"login": "christian-hawk", "id": 59786962, "node_id": "MDQ6VXNlcjU5Nzg2OTYy", "avatar_url": "https://avatars1.githubusercontent.com/u/59786962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christian-hawk", "html_url": "https://github.com/christian-hawk", "followers_url": "https://api.github.com/users/christian-hawk/followers", "following_url": "https://api.github.com/users/christian-hawk/following{/other_user}", "gists_url": "https://api.github.com/users/christian-hawk/gists{/gist_id}", "starred_url": "https://api.github.com/users/christian-hawk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christian-hawk/subscriptions", "organizations_url": "https://api.github.com/users/christian-hawk/orgs", "repos_url": "https://api.github.com/users/christian-hawk/repos", "events_url": "https://api.github.com/users/christian-hawk/events{/privacy}", "received_events_url": "https://api.github.com/users/christian-hawk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-16T02:55:30Z", "updated_at": "2020-06-22T14:03:25Z", "closed_at": "2020-06-22T14:03:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I`m using Flask integration.\r\n\r\nI always receive the SSL error when try to fetch metadata from a test OP that uses a self-signed certificate, then I receive the SSL error.\r\n\r\nChecking the package, I found:\r\n`remote_app.py:20: in load_server_metadata`\r\ntracing back to\r\n`oauth2_session.py:113: in request`\r\n\r\nwhen I call `authorize_redirect(https:.....)`, never works.\r\n\r\nI hardcoded the oauth2_session.py that uses request from requests module the argument `verify = False`, so it works.\r\n\r\nIf there isn't any other way to do it, I would like to submit this feature requests. Also opened to workarounds.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/238", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/238/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/238/events", "html_url": "https://github.com/lepture/authlib/issues/238", "id": 639274083, "node_id": "MDU6SXNzdWU2MzkyNzQwODM=", "number": 238, "title": "Allow Developers to use encrypted public and private keys for JWT", "user": {"login": "moswil", "id": 37577645, "node_id": "MDQ6VXNlcjM3NTc3NjQ1", "avatar_url": "https://avatars3.githubusercontent.com/u/37577645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moswil", "html_url": "https://github.com/moswil", "followers_url": "https://api.github.com/users/moswil/followers", "following_url": "https://api.github.com/users/moswil/following{/other_user}", "gists_url": "https://api.github.com/users/moswil/gists{/gist_id}", "starred_url": "https://api.github.com/users/moswil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moswil/subscriptions", "organizations_url": "https://api.github.com/users/moswil/orgs", "repos_url": "https://api.github.com/users/moswil/repos", "events_url": "https://api.github.com/users/moswil/events{/privacy}", "received_events_url": "https://api.github.com/users/moswil/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510049, "node_id": "MDU6TGFiZWw3MzI1MTAwNDk=", "url": "https://api.github.com/repos/lepture/authlib/labels/feature%20request", "name": "feature request", "color": "7057ff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-16T00:14:11Z", "updated_at": "2020-06-16T23:06:19Z", "closed_at": "2020-06-16T23:06:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\n- When using `jwt.encode(header, payload, key)`, if the key is protected using a paraphrase, an error is thrown. This is because when creating the classes `authlib.jose.rfc7518._backends._key_cryptography.RSAKey` and 'authlib.jose.rfc7518._backends._key_cryptography.ECKey`, when calling `load_pem_private_key` method of `cryptography.hazmat.primitives.serialization.load_pem_private_key` the `password arg` is passed as `None` by default and the developer of `authlib` is not given an option to pass in a password.\r\n\r\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\r\n\r\n**Describe the solution you'd like**\r\n- Allow the developers to use password-protected keys\r\n![Screenshot from 2020-06-16 03-07-12](https://user-images.githubusercontent.com/37577645/84717681-3ac64080-af7f-11ea-8184-764db8588361.png)\r\n![Screenshot from 2020-06-16 03-06-30](https://user-images.githubusercontent.com/37577645/84717684-3d289a80-af7f-11ea-9125-f850e5c386a9.png)\r\n\r\nA clear and concise description of what you want to happen.\r\n\r\n**Describe alternatives you've considered**\r\n\r\n\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\n\r\nAdd any other context or screenshots about the feature request here.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/237", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/237/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/237/events", "html_url": "https://github.com/lepture/authlib/issues/237", "id": 639076001, "node_id": "MDU6SXNzdWU2MzkwNzYwMDE=", "number": 237, "title": "Unauthorized Client error ", "user": {"login": "samib6", "id": 25865442, "node_id": "MDQ6VXNlcjI1ODY1NDQy", "avatar_url": "https://avatars2.githubusercontent.com/u/25865442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samib6", "html_url": "https://github.com/samib6", "followers_url": "https://api.github.com/users/samib6/followers", "following_url": "https://api.github.com/users/samib6/following{/other_user}", "gists_url": "https://api.github.com/users/samib6/gists{/gist_id}", "starred_url": "https://api.github.com/users/samib6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samib6/subscriptions", "organizations_url": "https://api.github.com/users/samib6/orgs", "repos_url": "https://api.github.com/users/samib6/repos", "events_url": "https://api.github.com/users/samib6/events{/privacy}", "received_events_url": "https://api.github.com/users/samib6/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-15T19:11:32Z", "updated_at": "2020-06-24T08:15:20Z", "closed_at": "2020-06-24T08:15:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am having the oidc provider and client in django.\r\nI have followed the flask example code for making the oidc provider from the example code itself.\r\n\r\nThe provider successfully redirects back to the client with an authorization code and state .I send a post request to fetch the token and then I get an unauthorized client error on my client side.\r\nand a bad request error on the provider side (error code =400).\r\n\r\nProviders views.py\r\n`def authorize(request):\r\n \r\n    user = request.user\r\n    print('user:',user)\r\n    if not user or request.user.is_anonymous:\r\n        return redirect('oauth_login')\r\n    if request.method == 'GET':\r\n        try:\r\n            #print(request)\r\n            grant = server.validate_consent_request(request,end_user=user)\r\n            print('grant is :',grant)\r\n            context = dict(grant=grant, user=request.user)\r\n\r\n        except OAuth2Error as error:\r\n            print('error')\r\n            return JsonResponse(dict(error.get_body()))\r\n\r\n        return render(request, 'authorize.html', context)\r\n  \r\n    confirmed = request.POST['confirm']\r\n    \r\n    if confirmed:\r\n        # granted by resource owner\r\n        print('user_confirmed authorization')\r\n        val = server.create_authorization_response(request, grant_user=request.user)\r\n     \r\n        return val\r\n\r\n    # denied by resource owner\r\n    print('out here')\r\n    return server.create_authorization_response(request, `grant_user=None)`\r\n\r\n\r\nClient Views.py\r\n`def home(request):\r\n    user = request.session.get('current_user')\r\n    print('client user: session',user)\r\n\r\n    if user:\r\n        user = json.dumps(user)\r\n    return render(request, 'home.html', context={'user': user})\r\n\r\n\r\ndef login(request):\r\n    eyantra = oauth.create_client('eyantra')\r\n    redirect_uri = \"https://127.0.0.2:8001/authorize\"\r\n\r\n    return eyantra.authorize_redirect(request,redirect_uri)\r\n    #return HttpResponse(\"login\")\r\n\r\n\r\ndef auth(request):\r\n    print('inside callback')\r\n    #eyantra = oauth.create_client('eyantra')\r\n    token = oauth.eyantra.authorize_access_token(request,verify=False)\r\n    print('token is :',token)\r\n    user = oauth.eyantra.parse_id_token(request, json.loads(token))\r\n    request.session['user'] = user\r\n    return redirect('/')\r\n\r\ndef logout(request):\r\n    request.session.pop('user',None)\r\n    return redirect('/')`\r\n\r\nHelp will be much appreciated and valued .\r\nThanks !\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/236", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/236/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/236/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/236/events", "html_url": "https://github.com/lepture/authlib/issues/236", "id": 623791044, "node_id": "MDU6SXNzdWU2MjM3OTEwNDQ=", "number": 236, "title": "Save and Update Tokens at OAuth Accounts level", "user": {"login": "leh08", "id": 37028078, "node_id": "MDQ6VXNlcjM3MDI4MDc4", "avatar_url": "https://avatars1.githubusercontent.com/u/37028078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leh08", "html_url": "https://github.com/leh08", "followers_url": "https://api.github.com/users/leh08/followers", "following_url": "https://api.github.com/users/leh08/following{/other_user}", "gists_url": "https://api.github.com/users/leh08/gists{/gist_id}", "starred_url": "https://api.github.com/users/leh08/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leh08/subscriptions", "organizations_url": "https://api.github.com/users/leh08/orgs", "repos_url": "https://api.github.com/users/leh08/repos", "events_url": "https://api.github.com/users/leh08/events{/privacy}", "received_events_url": "https://api.github.com/users/leh08/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-24T04:19:30Z", "updated_at": "2020-05-26T06:19:01Z", "closed_at": "2020-05-26T06:19:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Team,\r\n\r\nI would like to request a save and update tokens at Providers level\r\n\r\nCurrently, I want to build app that use shared tokens for example Google,.. and In google, we have like 2 accounts and everyone use them.\r\n\r\nFor now, fetch and update token just allow (name, request.user). I would like to suggest add 1 more field is (name, request.user, provider). So we can have many shared tokens with a same provider. Thank you.\r\n\r\nBest Regards,\r\nGiang\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/235", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/235/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/235/events", "html_url": "https://github.com/lepture/authlib/issues/235", "id": 623731862, "node_id": "MDU6SXNzdWU2MjM3MzE4NjI=", "number": 235, "title": "Support for EdDSA Algorithm", "user": {"login": "benwis", "id": 6953353, "node_id": "MDQ6VXNlcjY5NTMzNTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6953353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benwis", "html_url": "https://github.com/benwis", "followers_url": "https://api.github.com/users/benwis/followers", "following_url": "https://api.github.com/users/benwis/following{/other_user}", "gists_url": "https://api.github.com/users/benwis/gists{/gist_id}", "starred_url": "https://api.github.com/users/benwis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benwis/subscriptions", "organizations_url": "https://api.github.com/users/benwis/orgs", "repos_url": "https://api.github.com/users/benwis/repos", "events_url": "https://api.github.com/users/benwis/events{/privacy}", "received_events_url": "https://api.github.com/users/benwis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510049, "node_id": "MDU6TGFiZWw3MzI1MTAwNDk=", "url": "https://api.github.com/repos/lepture/authlib/labels/feature%20request", "name": "feature request", "color": "7057ff", "default": false, "description": ""}, {"id": 732510047, "node_id": "MDU6TGFiZWw3MzI1MTAwNDc=", "url": "https://api.github.com/repos/lepture/authlib/labels/spec", "name": "spec", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-23T20:01:00Z", "updated_at": "2020-05-24T07:10:36Z", "closed_at": "2020-05-24T07:01:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like this is one of the new algorithms, and is listed on jwt.io. It's the only thing on there that you don't support. Keep it up!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/234", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/234/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/234/events", "html_url": "https://github.com/lepture/authlib/issues/234", "id": 623590688, "node_id": "MDU6SXNzdWU2MjM1OTA2ODg=", "number": 234, "title": "Feature request: Validate Authorization header Bearer tokens issued by external oidc service", "user": {"login": "svinther", "id": 6243128, "node_id": "MDQ6VXNlcjYyNDMxMjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6243128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svinther", "html_url": "https://github.com/svinther", "followers_url": "https://api.github.com/users/svinther/followers", "following_url": "https://api.github.com/users/svinther/following{/other_user}", "gists_url": "https://api.github.com/users/svinther/gists{/gist_id}", "starred_url": "https://api.github.com/users/svinther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svinther/subscriptions", "organizations_url": "https://api.github.com/users/svinther/orgs", "repos_url": "https://api.github.com/users/svinther/repos", "events_url": "https://api.github.com/users/svinther/events{/privacy}", "received_events_url": "https://api.github.com/users/svinther/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510050, "node_id": "MDU6TGFiZWw3MzI1MTAwNTA=", "url": "https://api.github.com/repos/lepture/authlib/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-23T06:06:12Z", "updated_at": "2020-05-28T17:37:59Z", "closed_at": "2020-05-28T17:37:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n**Problem**\r\n\r\nIf having to protect an API resourceserver by verifying Authorization header accesstokens (jwt bearer tokens) issued elsewhere by oidc authentication server, it seems like a lot of work, and it would be better to have the auth library do most of it. \r\n\r\n**Solution I'll like**\r\n\r\nWith minimum configuration and code, be able to attach some ```@auth_required``` decorator to my endpoint functions, e.g:\r\n\r\n``` python\r\n@app.route(\"/test-bearer\")\r\n@auth_required\r\ndef r():\r\n    user = get_session_user()\r\n    return user\r\n``` \r\n\r\nThe decorator enforces verification of the presence and validity of a Authorization header bearer accesstoken.\r\n\r\nThe best solution I can come up with is like the following. It uses the oidc metadata endpoint to retrieve the public keys for verifying the accesstokens, and uses some authlib provided features for that, decoding the jwt and validating expiration etc.\r\n\r\nBesides being a lot of work, I suspect there might be missing some important validations that should always be present.\r\n\r\n\r\n``` python\r\nfrom functools import wraps\r\n\r\nimport requests\r\nfrom authlib.jose import jwt\r\nfrom authlib.jose.errors import JoseError, ExpiredTokenError\r\nfrom flask import Response, request, session, g\r\n\r\nfrom config import Config\r\n\r\n# Fetch the openid metadata so we may know the jwk endpoint uri\r\nserver_metadata_url = f\"{Config.OIDC_CONF_BASE_URL}/.well-known/openid-configuration\"\r\nserver_metadata_r = requests.get(server_metadata_url)\r\nif server_metadata_r.status_code != 200:\r\n    raise Exception(\r\n        f\"Error getting auth server metadata from url: {server_metadata_url}\"\r\n        + \", status_code: {server_metadata_r.status_code}\"\r\n    )\r\nserver_metadata = server_metadata_r.json()\r\n\r\n# Fetch the public key for validating Bearer token\r\njwk_r = requests.get(server_metadata['jwks_uri'])\r\nif jwk_r.status_code != 200:\r\n    raise Exception(\r\n        f\"Error getting jwk from url: {server_metadata['jwks_uri']}\"\r\n        + \", status_code: {jwk_r.status_code}\"\r\n    )\r\njwk = jwk_r.json()\r\n\r\n\r\n# Decorator enforcing that a request has a correct Authorization header with a valid Bearer accesstoken\r\ndef auth_required(f):\r\n    \"\"\" Besides enforcing correct Bearer token, a user object is alose stored on the request context, for later\r\n    retrieval by the application\"\"\"\r\n\r\n    @wraps(f)\r\n    def decorator(*args, **kwargs):\r\n        if 'user' in g:\r\n            raise Exception(\"auth_required called twice ?\")\r\n\r\n        authheader = request.headers.get(\"Authorization\")\r\n        if authheader and authheader.lower().startswith(\"bearer \"):\r\n            token_str = authheader[7:]\r\n            token = jwt.decode(token_str, jwk)\r\n            try:\r\n                token.validate()\r\n                session.user = token\r\n                g.user = token\r\n                return f(*args, **kwargs)\r\n            except ExpiredTokenError as e:\r\n                return Response(str(e), status=401)\r\n            except JoseError as e:\r\n                print(type(e), str(e))\r\n                return Response(status=403)\r\n        return Response(\"Bearer required\", status=401)\r\n\r\n    return decorator\r\n\r\n\r\ndef get_session_user():\r\n    return g.user\r\n```\r\n\r\n\r\nThis might be related to https://github.com/lepture/authlib/issues/89 from @jcassee as I think that my feature request could also be implemented as a standard ```BearerTokenValidator```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/231", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/231/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/231/events", "html_url": "https://github.com/lepture/authlib/issues/231", "id": 615961269, "node_id": "MDU6SXNzdWU2MTU5NjEyNjk=", "number": 231, "title": "Metadata not available when verify token is called", "user": {"login": "ayamani", "id": 697179, "node_id": "MDQ6VXNlcjY5NzE3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/697179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayamani", "html_url": "https://github.com/ayamani", "followers_url": "https://api.github.com/users/ayamani/followers", "following_url": "https://api.github.com/users/ayamani/following{/other_user}", "gists_url": "https://api.github.com/users/ayamani/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayamani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayamani/subscriptions", "organizations_url": "https://api.github.com/users/ayamani/orgs", "repos_url": "https://api.github.com/users/ayamani/repos", "events_url": "https://api.github.com/users/ayamani/events{/privacy}", "received_events_url": "https://api.github.com/users/ayamani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-11T15:10:18Z", "updated_at": "2020-06-17T15:00:30Z", "closed_at": "2020-06-17T15:00:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using the flask client for my project. My client is established by setting the SERVER_METADATA_URL. The setup is working fine but I've hit a blocker when making requests. The verify token is failing since the metadata seems to be empty when the ensure_active_token is called (integrations/requests_client/oauth2_session.py). The resulting token url is empty if I just use the server_meta_data when initializing the client. As a work around, I'm forced to specify the token url on addition to the metadata url on initialization.\r\n\r\nI realized that the metadata url was being unset after the initial load, does it have something to do with that? Should the metadata be loaded again at this point?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/229", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/229/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/229/events", "html_url": "https://github.com/lepture/authlib/issues/229", "id": 612387720, "node_id": "MDU6SXNzdWU2MTIzODc3MjA=", "number": 229, "title": "Option to configure leeway for claims validation", "user": {"login": "1wpro2", "id": 52658745, "node_id": "MDQ6VXNlcjUyNjU4NzQ1", "avatar_url": "https://avatars0.githubusercontent.com/u/52658745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1wpro2", "html_url": "https://github.com/1wpro2", "followers_url": "https://api.github.com/users/1wpro2/followers", "following_url": "https://api.github.com/users/1wpro2/following{/other_user}", "gists_url": "https://api.github.com/users/1wpro2/gists{/gist_id}", "starred_url": "https://api.github.com/users/1wpro2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1wpro2/subscriptions", "organizations_url": "https://api.github.com/users/1wpro2/orgs", "repos_url": "https://api.github.com/users/1wpro2/repos", "events_url": "https://api.github.com/users/1wpro2/events{/privacy}", "received_events_url": "https://api.github.com/users/1wpro2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-05T07:12:09Z", "updated_at": "2020-05-05T09:53:41Z", "closed_at": "2020-05-05T09:53:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nAt the moment, the existing `validate` method allows a passed in parameter to set the leeway.\r\n\r\nFor example:\r\nhttps://github.com/lepture/authlib/blob/36e2236b56274879688ecb8019bf1e9bc8e43746/authlib/oidc/core/claims.py#L26\r\n\r\nHowever, this has been hardcoded to `2 minutes` in the invocation method.\r\n\r\nFor example:\r\nhttps://github.com/lepture/authlib/blob/36e2236b56274879688ecb8019bf1e9bc8e43746/authlib/integrations/base_client/remote_app.py#L200\r\n\r\nThis will leave developers stuck at `2 minutes` leeway, which could be very critical for some highly sensitive applications.\r\n\r\n**Describe the solution you'd like**\r\n\r\nA solution to give developers an option to pass in the leeway as designated.\r\n\r\nFor example, when we call the `parse_id_token`, in addition to the existing option\r\n```\r\n        try:\r\n           # this has a default leeway of 2 minutes\r\n            userinfo = oauth.keycloak.parse_id_token(token) \r\n        except Exception as e:\r\n            log.error(f\"Got a malformed response\", e)\r\n```\r\n\r\nwe can also set up\r\n\r\n```\r\n        try:\r\n           # this has a configured leeway of 0 minutes\r\n            userinfo = oauth.keycloak.parse_id_token(token, leeway=0) \r\n        except Exception as e:\r\n            log.error(f\"Got a malformed response\", e)\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\n\r\nAdd any other context or screenshots about the feature request here.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/226", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/226/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/226/events", "html_url": "https://github.com/lepture/authlib/issues/226", "id": 608800666, "node_id": "MDU6SXNzdWU2MDg4MDA2NjY=", "number": 226, "title": "Unable to pass .post() with parameter named \"token\"", "user": {"login": "leeyc0", "id": 2221335, "node_id": "MDQ6VXNlcjIyMjEzMzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2221335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leeyc0", "html_url": "https://github.com/leeyc0", "followers_url": "https://api.github.com/users/leeyc0/followers", "following_url": "https://api.github.com/users/leeyc0/following{/other_user}", "gists_url": "https://api.github.com/users/leeyc0/gists{/gist_id}", "starred_url": "https://api.github.com/users/leeyc0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leeyc0/subscriptions", "organizations_url": "https://api.github.com/users/leeyc0/orgs", "repos_url": "https://api.github.com/users/leeyc0/repos", "events_url": "https://api.github.com/users/leeyc0/events{/privacy}", "received_events_url": "https://api.github.com/users/leeyc0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-04-29T06:01:40Z", "updated_at": "2020-04-29T08:12:27Z", "closed_at": "2020-04-29T08:12:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nI am trying to do [token introspection](https://tools.ietf.org/html/rfc7662) for my flask OIDC client. The POST parameter is named `token`. However `oauth.xxxxx.post()` interprets parameter token as oauth token (for authentication/authorization) instead of POST parameter. As such I am unable to POST introspection endpoint with parameter `token`.\r\n\r\n**Error Stacks**\r\n\r\nN/A\r\n\r\n**To Reproduce**\r\n\r\n```\r\nfrom authlib.integrations.flask_client import OAuth\r\noauth = OAuth()\r\n\r\n@app.route('/authorize')\r\ndef authorize():\r\n    oidcdemo_client = oauth.create_client('oidcdemo')\r\n    token = oidcdemo_client.authorize_access_token()\r\n    response =  oidcdemo_client.post(introspect_url, token=xxxxxx)\r\n    session['token'] = token\r\n    return redirect('/')\r\n```\r\n\r\n\r\n**Expected behavior**\r\n\r\nHave a way to pass in token as POST parameter\r\n\r\n**Environment:**\r\n\r\n - Authlib Version: 0.14.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/224", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/224/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/224/events", "html_url": "https://github.com/lepture/authlib/issues/224", "id": 608774520, "node_id": "MDU6SXNzdWU2MDg3NzQ1MjA=", "number": 224, "title": "Feature request: implement introspection API in oauth2 client", "user": {"login": "leeyc0", "id": 2221335, "node_id": "MDQ6VXNlcjIyMjEzMzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2221335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leeyc0", "html_url": "https://github.com/leeyc0", "followers_url": "https://api.github.com/users/leeyc0/followers", "following_url": "https://api.github.com/users/leeyc0/following{/other_user}", "gists_url": "https://api.github.com/users/leeyc0/gists{/gist_id}", "starred_url": "https://api.github.com/users/leeyc0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leeyc0/subscriptions", "organizations_url": "https://api.github.com/users/leeyc0/orgs", "repos_url": "https://api.github.com/users/leeyc0/repos", "events_url": "https://api.github.com/users/leeyc0/events{/privacy}", "received_events_url": "https://api.github.com/users/leeyc0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 753466877, "node_id": "MDU6TGFiZWw3NTM0NjY4Nzc=", "url": "https://api.github.com/repos/lepture/authlib/labels/client", "name": "client", "color": "bdffaf", "default": false, "description": null}, {"id": 732510048, "node_id": "MDU6TGFiZWw3MzI1MTAwNDg=", "url": "https://api.github.com/repos/lepture/authlib/labels/good%20first%20issue", "name": "good first issue", "color": "1d76db", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-29T04:46:45Z", "updated_at": "2020-05-07T13:32:24Z", "closed_at": "2020-05-07T13:32:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sometimes we need to introspect with oauth2 provider the validity of a token. As such a built-in client API for token introspection like `authlib.integrations.requests_client.OAuth2Session.revoke_token` will be useful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/222", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/222/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/222/events", "html_url": "https://github.com/lepture/authlib/issues/222", "id": 608250057, "node_id": "MDU6SXNzdWU2MDgyNTAwNTc=", "number": 222, "title": "JWK kid is optional, should not throw exception if kid is missing", "user": {"login": "leeyc0", "id": 2221335, "node_id": "MDQ6VXNlcjIyMjEzMzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2221335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leeyc0", "html_url": "https://github.com/leeyc0", "followers_url": "https://api.github.com/users/leeyc0/followers", "following_url": "https://api.github.com/users/leeyc0/following{/other_user}", "gists_url": "https://api.github.com/users/leeyc0/gists{/gist_id}", "starred_url": "https://api.github.com/users/leeyc0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leeyc0/subscriptions", "organizations_url": "https://api.github.com/users/leeyc0/orgs", "repos_url": "https://api.github.com/users/leeyc0/repos", "events_url": "https://api.github.com/users/leeyc0/events{/privacy}", "received_events_url": "https://api.github.com/users/leeyc0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-04-28T11:40:33Z", "updated_at": "2020-05-02T08:08:22Z", "closed_at": "2020-05-02T08:08:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nAccording to [RFC7517](https://tools.ietf.org/html/rfc7517#section-4.5), kid is a OPTIONAL parameter. authlib.jose.rfc7517.loads (and possibly other functions) should not completely rely on kid to look up for a key. The corresponding [RFC7515](https://tools.ietf.org/html/rfc7515#section-4.1.4) also mentions that kid is OPTIONAL.\r\n\r\n[RFC2119](https://tools.ietf.org/html/rfc2119) defines OPTIONAL as:\r\n\r\n> MAY   This word, or the adjective \"OPTIONAL\", mean that an item is truly optional.  One vendor may choose to include the item because a particular marketplace requires it or because the vendor feels that it enhances the product while another vendor may omit the same item. An implementation which does not include a particular option MUST be prepared to interoperate with another implementation which does include the option, though perhaps with reduced functionality.\r\n\r\n\r\n**Error Stacks**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/authlib/integrations/base_client/remote_app.py\", line 162, in load_key\r\n    return jwk.loads(jwk_set, header.get('kid'))\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/authlib/jose/rfc7517/jwk.py\", line 78, in loads\r\n    raise ValueError('Invalid JSON Web Key')\r\nValueError: Invalid JSON Web Key\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/werkzeug/serving.py\", line 323, in run_wsgi\r\n    execute(self.server.app)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/werkzeug/serving.py\", line 312, in execute\r\n    application_iter = app(environ, start_response)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/flask/app.py\", line 2464, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/flask/app.py\", line 2450, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/flask/app.py\", line 1867, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/flask/app.py\", line 2447, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/flask/app.py\", line 1952, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/flask/app.py\", line 1821, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/flask/app.py\", line 1950, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/flask/app.py\", line 1936, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"oidcdemo/oidcdemo.py\", line 43, in authorize\r\n    user = oauth.oidcdemo.parse_id_token(token)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/authlib/integrations/flask_client/remote_app.py\", line 81, in parse_id_token\r\n    return self._parse_id_token(flask_req, token, claims_options)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/authlib/integrations/base_client/remote_app.py\", line 192, in _parse_id_token\r\n    claims_params=claims_params,\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/authlib/jose/rfc7519/jwt.py\", line 121, in decode\r\n    data = self._jws.deserialize_compact(s, key_func, decode_payload)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/authlib/jose/rfc7515/jws.py\", line 115, in deserialize_compact\r\n    self._algorithms, jws_header, payload, key)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/authlib/jose/util.py\", line 8, in prepare_algorithm_key\r\n    key = key(header, payload)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/authlib/jose/jwk.py\", line 27, in key_func\r\n    return load_key(key, header, payload)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/authlib/jose/jwk.py\", line 21, in load_key\r\n    key = key(header, payload)\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/authlib/integrations/base_client/remote_app.py\", line 166, in load_key\r\n    return jwk.loads(jwk_set, header.get('kid'))\r\n  File \"oidcdemo/virtualenv/lib/python3.6/site-packages/authlib/jose/rfc7517/jwk.py\", line 78, in loads\r\n    raise ValueError('Invalid JSON Web Key')\r\n```\r\n\r\n\r\n**To Reproduce**\r\n\r\na JWK set which the key inside is without kid\r\n\r\n**Expected behavior**\r\n\r\nNo exception at least for the case when there is only one key in JWK set. More descriptive exception message is also recommended.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/220", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/220/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/220/events", "html_url": "https://github.com/lepture/authlib/issues/220", "id": 604665446, "node_id": "MDU6SXNzdWU2MDQ2NjU0NDY=", "number": 220, "title": "OpenID connect certification", "user": {"login": "jonas-weismueller-by", "id": 57355417, "node_id": "MDQ6VXNlcjU3MzU1NDE3", "avatar_url": "https://avatars1.githubusercontent.com/u/57355417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-weismueller-by", "html_url": "https://github.com/jonas-weismueller-by", "followers_url": "https://api.github.com/users/jonas-weismueller-by/followers", "following_url": "https://api.github.com/users/jonas-weismueller-by/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-weismueller-by/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-weismueller-by/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-weismueller-by/subscriptions", "organizations_url": "https://api.github.com/users/jonas-weismueller-by/orgs", "repos_url": "https://api.github.com/users/jonas-weismueller-by/repos", "events_url": "https://api.github.com/users/jonas-weismueller-by/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-weismueller-by/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-22T11:03:32Z", "updated_at": "2020-04-28T23:10:34Z", "closed_at": "2020-04-28T23:10:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nThe OpenID connect foundation lists certified libraries for OP and RP.\r\nOP: https://openid.net/developers/certified/#OPLibs\r\nRP: https://openid.net/developers/certified/#RPLibs\r\n\r\n**Describe the solution you'd like**\r\n\r\nThere might be an interest to test your implementation against their conformance testing tool and thus get listed as python certified OP/RP library?\r\n\r\nCertification: https://openid.net/certification/\r\nCertification Instructions: https://openid.net/certification/instructions/\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/218", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/218/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/218/events", "html_url": "https://github.com/lepture/authlib/issues/218", "id": 603505399, "node_id": "MDU6SXNzdWU2MDM1MDUzOTk=", "number": 218, "title": "Potential compliance-fix issue with Zoom refresh token headers", "user": {"login": "wgwz", "id": 10120306, "node_id": "MDQ6VXNlcjEwMTIwMzA2", "avatar_url": "https://avatars2.githubusercontent.com/u/10120306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wgwz", "html_url": "https://github.com/wgwz", "followers_url": "https://api.github.com/users/wgwz/followers", "following_url": "https://api.github.com/users/wgwz/following{/other_user}", "gists_url": "https://api.github.com/users/wgwz/gists{/gist_id}", "starred_url": "https://api.github.com/users/wgwz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wgwz/subscriptions", "organizations_url": "https://api.github.com/users/wgwz/orgs", "repos_url": "https://api.github.com/users/wgwz/repos", "events_url": "https://api.github.com/users/wgwz/events{/privacy}", "received_events_url": "https://api.github.com/users/wgwz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-20T20:14:49Z", "updated_at": "2020-05-07T12:55:21Z", "closed_at": "2020-05-07T12:55:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nThe Zoom refresh token process requires a header like so:\r\n\r\nhttps://marketplace.zoom.us/docs/guides/auth/oauth#refreshing\r\n\r\n```\r\nAuthorization | The string \"Basic\" with your Client ID and Client Secret with a colon : in between, Base64 Encoded. For example, Client_ID:Client_Secret\r\n```\r\n\r\nIs this something that needs to be fixed in a compliance fix?\r\n\r\n**Describe the solution you'd like**\r\n\r\nIf this is a non-standard issue:\r\n\r\nhttps://docs.authlib.org/en/latest/client/oauth2.html#compliance-fix-for-non-standard\r\nhttps://docs.authlib.org/en/latest/client/frameworks.html#compliance-fix-for-oauth-2-0\r\n\r\nCurrently we have:\r\n\r\n- access_token_response: invoked before token parsing.\r\n- refresh_token_response: invoked before refresh token parsing.\r\n- protected_request: invoked before making a request.\r\n\r\nCould we add:\r\n\r\n- refresh_token_request: invoked before refresh token request.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nUsing protected_request and then checking if it's the URL for the refresh token. And then adding the headers. But I'm not sure if that would work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/216", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/216/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/216/events", "html_url": "https://github.com/lepture/authlib/issues/216", "id": 596183892, "node_id": "MDU6SXNzdWU1OTYxODM4OTI=", "number": 216, "title": "PKCE and django client", "user": {"login": "rcludwick", "id": 1568675, "node_id": "MDQ6VXNlcjE1Njg2NzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1568675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcludwick", "html_url": "https://github.com/rcludwick", "followers_url": "https://api.github.com/users/rcludwick/followers", "following_url": "https://api.github.com/users/rcludwick/following{/other_user}", "gists_url": "https://api.github.com/users/rcludwick/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcludwick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcludwick/subscriptions", "organizations_url": "https://api.github.com/users/rcludwick/orgs", "repos_url": "https://api.github.com/users/rcludwick/repos", "events_url": "https://api.github.com/users/rcludwick/events{/privacy}", "received_events_url": "https://api.github.com/users/rcludwick/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-04-07T22:15:31Z", "updated_at": "2020-05-07T13:14:08Z", "closed_at": "2020-05-07T13:13:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nUsing the django client:\r\n\r\nPassing \"code_challenge\" to authorize_redirect() is ignored.  A new code verifier and code challenge is created anyway. \r\n\r\nBut passing \"code_verifier\" to authorize_access_token() works as expected.  \r\n\r\nThe end result is that for the tin foil hat types that are worried about random number generation, there's no way for the django client to create their own code_verfiers for PKCE.\r\n\r\n**Error Stacks**\r\n\r\n```\r\nn/a\r\n```\r\n\r\n**To Reproduce**\r\n\r\nA minimal example to reproduce the behavior:\r\n\r\ndjango_client.authorize_redirect(url, code_challenge=\"some_code_challenge\")\r\nassert django_client.framework.get_session_data(request, 'code_challenge') == \"some_code_challenge\"\r\n\r\n\r\n**Expected behavior**\r\n\r\nThe assert should pass\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\nThe django client should not override \"code_challenge\" passed into kwargs.\r\n\r\n**Environment:**\r\n\r\n - OS: Linux\r\n - Python Version: 3.7.3\r\n - Authlib Version: 0.14.1\r\n\r\n**Additional context**\r\n\r\nIn BaseApp._create_oauth2_authorization_url(), my kwarg \"code_challenge\" is passed into kwargs.\r\n\r\nBut on line 170, a new code verifier is created.  And then the ouath2 client create authorization url  method() overwrites the code challenge that are still passed into kwargs.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/213", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/213/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/213/events", "html_url": "https://github.com/lepture/authlib/issues/213", "id": 589870136, "node_id": "MDU6SXNzdWU1ODk4NzAxMzY=", "number": 213, "title": "ensure_active_token doesn't work for client_credentials", "user": {"login": "diogobaeder", "id": 207168, "node_id": "MDQ6VXNlcjIwNzE2OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/207168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diogobaeder", "html_url": "https://github.com/diogobaeder", "followers_url": "https://api.github.com/users/diogobaeder/followers", "following_url": "https://api.github.com/users/diogobaeder/following{/other_user}", "gists_url": "https://api.github.com/users/diogobaeder/gists{/gist_id}", "starred_url": "https://api.github.com/users/diogobaeder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diogobaeder/subscriptions", "organizations_url": "https://api.github.com/users/diogobaeder/orgs", "repos_url": "https://api.github.com/users/diogobaeder/repos", "events_url": "https://api.github.com/users/diogobaeder/events{/privacy}", "received_events_url": "https://api.github.com/users/diogobaeder/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-03-29T19:53:58Z", "updated_at": "2020-05-02T07:38:18Z", "closed_at": "2020-05-02T07:37:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nCurrently, authlib is unable to fetch a new access token if the previous one expires when the client is using a `client_credentials` `grant_type`, because at the point it tries to fetch it, it doesn't pass along the `client_id` and `client_secret` with the request to fetch it - the `kwargs` argument is empty at this point. This leads to the Authentication Server responding with an `invalid_token` error.\r\n\r\n**Error Stacks**\r\n\r\nInstead of an error stack, which is not too relevant, I'll point out to the exact place where the bug is:\r\n\r\n1. Here is where the `ensure_active_token` method uses the kwargs to fetch the token: https://github.com/lepture/authlib/blob/master/authlib/integrations/requests_client/oauth2_session.py#L28\r\n1. And here is where the class calls that method without passing along any kwargs, which leads to the call to `fetch_token` not have any `client_id` or `client_secret`, which are necessary for `OAuth2Client._prepare_token_endpoint_body`: https://github.com/lepture/authlib/blob/master/authlib/integrations/requests_client/oauth2_session.py#L35\r\n\r\n**To Reproduce**\r\n\r\nTo reproduce the error, first you have to have a way to expire the token that you get from the auth server. In my case, I store the token in an encrypted Redis item, so I just change it to expire in the past, but you could just wait for the token to expire too - or, if you have access to the auth server running locally, just make it expire tokens in a few seconds or so.\r\n\r\nThen, to reproduce:\r\n1. Make sure you have your `client_kwargs` configuration contains a `client_credentials` `grant_type`;\r\n1. Make sure the RemoteApp has access to the access token;\r\n1. Make a request to the data server;\r\n1. Ensure the access token expires somehow (see above);\r\n1. Make another request to the data server\r\n\r\n**Expected behavior**\r\n\r\nI expect the library to be able to fetch a new access token correctly.\r\n\r\n**Environment:**\r\n\r\n - OS: Arch Linux 5.5.13-arch1-1 #1 SMP PREEMPT Wed, 25 Mar 2020 16:04:40 +0000 x86_64 GNU/Linux\r\n - Python Version: 3.6.10\r\n - Authlib Version: 0.14.1\r\n\r\n**Additional context**\r\n\r\nI would try to send a PR myself, but I don't know how to approach this problem yet; The thing is, it seems that it's the RemoteApp that has access to client ID and secret, but the attempt to re-fetch a token is made inside the OAuth2Client itself, so it seems that it doesn't have access to that information.\r\n\r\n[EDIT] Just pushed a PR with the fix. I tested it locally, and it works, it fixes the issue.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/211", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/211/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/211/events", "html_url": "https://github.com/lepture/authlib/issues/211", "id": 587859985, "node_id": "MDU6SXNzdWU1ODc4NTk5ODU=", "number": 211, "title": "OAuth1Session.fetch_request_token is not sending the Authorization header", "user": {"login": "ldng", "id": 781064, "node_id": "MDQ6VXNlcjc4MTA2NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/781064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldng", "html_url": "https://github.com/ldng", "followers_url": "https://api.github.com/users/ldng/followers", "following_url": "https://api.github.com/users/ldng/following{/other_user}", "gists_url": "https://api.github.com/users/ldng/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldng/subscriptions", "organizations_url": "https://api.github.com/users/ldng/orgs", "repos_url": "https://api.github.com/users/ldng/repos", "events_url": "https://api.github.com/users/ldng/events{/privacy}", "received_events_url": "https://api.github.com/users/ldng/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-03-25T17:20:10Z", "updated_at": "2020-03-25T20:45:44Z", "closed_at": "2020-03-25T20:45:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "The private method _fetch_token called from fetch_request_token in the OAuth1Session class is not sending the Authorization header as it is using resquests.post method which does not support auth argument.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/210", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/210/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/210/events", "html_url": "https://github.com/lepture/authlib/issues/210", "id": 585330566, "node_id": "MDU6SXNzdWU1ODUzMzA1NjY=", "number": 210, "title": "httpx content_stream module import failure ", "user": {"login": "pdiwan", "id": 6749246, "node_id": "MDQ6VXNlcjY3NDkyNDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/6749246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pdiwan", "html_url": "https://github.com/pdiwan", "followers_url": "https://api.github.com/users/pdiwan/followers", "following_url": "https://api.github.com/users/pdiwan/following{/other_user}", "gists_url": "https://api.github.com/users/pdiwan/gists{/gist_id}", "starred_url": "https://api.github.com/users/pdiwan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pdiwan/subscriptions", "organizations_url": "https://api.github.com/users/pdiwan/orgs", "repos_url": "https://api.github.com/users/pdiwan/repos", "events_url": "https://api.github.com/users/pdiwan/events{/privacy}", "received_events_url": "https://api.github.com/users/pdiwan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-03-20T21:14:06Z", "updated_at": "2020-04-25T02:42:35Z", "closed_at": "2020-04-25T02:42:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\nI started getting this error since yesterday which is blocking me from deploying new version of my code. I don't know how this `content_streams` has been working for me so far but the module name seems to be `_content_streams`. https://github.com/encode/httpx/blob/master/httpx/_content_streams.py\r\n\r\n**Error Stacks**\r\n\r\n```\r\n2020-03-20T13:52:18.914-07:00 [APP/PROC/WEB/8] [ERR] from authlib.integrations.starlette_client import OAuth\r\n2020-03-20T13:52:18.914-07:00 [APP/PROC/WEB/8] [ERR] File \"/home/vcap/deps/0/python/lib/python3.7/site-packages/authlib/integrations/starlette_client/__init__.py\", line 4, in <module>\r\n2020-03-20T13:52:18.915-07:00 [APP/PROC/WEB/8] [ERR] from .integration import StartletteIntegration, StarletteRemoteApp\r\n2020-03-20T13:52:18.915-07:00 [APP/PROC/WEB/8] [ERR] File \"/home/vcap/deps/0/python/lib/python3.7/site-packages/authlib/integrations/starlette_client/integration.py\", line 2, in <module>\r\n2020-03-20T13:52:18.915-07:00 [APP/PROC/WEB/8] [ERR] from ..httpx_client import AsyncOAuth1Client, AsyncOAuth2Client\r\n2020-03-20T13:52:18.915-07:00 [APP/PROC/WEB/8] [ERR] File \"/home/vcap/deps/0/python/lib/python3.7/site-packages/authlib/integrations/httpx_client/__init__.py\", line 9, in <module>\r\n2020-03-20T13:52:18.915-07:00 [APP/PROC/WEB/8] [ERR] from .oauth1_client import OAuth1Auth, AsyncOAuth1Client\r\n2020-03-20T13:52:18.915-07:00 [APP/PROC/WEB/8] [ERR] File \"/home/vcap/deps/0/python/lib/python3.7/site-packages/authlib/integrations/httpx_client/oauth1_client.py\", line 11, in <module>\r\n2020-03-20T13:52:18.915-07:00 [APP/PROC/WEB/8] [ERR] from .utils import extract_client_kwargs, rebuild_request\r\n2020-03-20T13:52:18.915-07:00 [APP/PROC/WEB/8] [ERR] File \"/home/vcap/deps/0/python/lib/python3.7/site-packages/authlib/integrations/httpx_client/utils.py\", line 2, in <module>\r\n2020-03-20T13:52:18.915-07:00 [APP/PROC/WEB/8] [ERR] from httpx.content_streams import ByteStream\r\n2020-03-20T13:52:18.915-07:00 [APP/PROC/WEB/8] [ERR] ModuleNotFoundError: No module named 'httpx.content_streams'\r\n```\r\n\r\n**To Reproduce**\r\nimport - `from authlib.integrations.starlette_client import OAuth`\r\n\r\n**Expected behavior**\r\nThe imported module name should be accurate.\r\n\r\n**Environment:**\r\n - OS: Linux\r\n - Python Version: 3.5+ \r\n - Authlib Version: 0.14.1\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/208", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/208/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/208/events", "html_url": "https://github.com/lepture/authlib/issues/208", "id": 584930094, "node_id": "MDU6SXNzdWU1ODQ5MzAwOTQ=", "number": 208, "title": "incompatibility with new httpx version", "user": {"login": "suud", "id": 10183975, "node_id": "MDQ6VXNlcjEwMTgzOTc1", "avatar_url": "https://avatars1.githubusercontent.com/u/10183975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suud", "html_url": "https://github.com/suud", "followers_url": "https://api.github.com/users/suud/followers", "following_url": "https://api.github.com/users/suud/following{/other_user}", "gists_url": "https://api.github.com/users/suud/gists{/gist_id}", "starred_url": "https://api.github.com/users/suud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suud/subscriptions", "organizations_url": "https://api.github.com/users/suud/orgs", "repos_url": "https://api.github.com/users/suud/repos", "events_url": "https://api.github.com/users/suud/events{/privacy}", "received_events_url": "https://api.github.com/users/suud/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-03-20T09:05:10Z", "updated_at": "2020-04-25T02:42:57Z", "closed_at": "2020-04-25T02:42:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\n`httpx`'s public api has been updated (see https://github.com/encode/httpx/issues/772). `httpx.content_streams` is a private module, since Version `0.12.1` of `httpx`.\r\n\r\nI'm wondering what a reliable fix would look like. Importing (from) the private module `httpx._content_streams` might break in the future.\r\n\r\nHere, some more cases where we use `httpx` modules that are now private (there might be more):\r\n- https://github.com/lepture/authlib/blob/f754eff0c21a11c837a25bc6d4a49875de243c72/authlib/integrations/httpx_client/oauth2_client.py#L3-L6\r\n- https://github.com/lepture/authlib/blob/142a7e5b8d4290707808baa5b35635961bcb279a/tests/py3/utils.py#L3\r\n**Error Stacks**\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.8/site-packages/authlib/integrations/httpx_client/__init__.py\", line 9, in <module>\r\n    from .oauth1_client import OAuth1Auth, AsyncOAuth1Client\r\n  File \"/usr/local/lib/python3.8/site-packages/authlib/integrations/httpx_client/oauth1_client.py\", line 11, in <module>\r\n    from .utils import extract_client_kwargs, rebuild_request\r\n  File \"/usr/local/lib/python3.8/site-packages/authlib/integrations/httpx_client/utils.py\", line 2, in <module>\r\n    from httpx.content_streams import ByteStream\r\nModuleNotFoundError: No module named 'httpx.content_streams'\r\n```\r\n\r\n**To Reproduce**\r\n\r\n```python\r\nfrom authlib.integrations.httpx_client import AsyncOAuth2Client\r\n```\r\n\r\n**Environment:**\r\n\r\n - OS: Debian 10 (Buster)\r\n - Python Version: 3.8\r\n - Authlib Version: 0.14.1\r\n - httpx Version: 0.12.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/207", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/207/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/207/events", "html_url": "https://github.com/lepture/authlib/issues/207", "id": 584761335, "node_id": "MDU6SXNzdWU1ODQ3NjEzMzU=", "number": 207, "title": "httpx is not included in the package AND httpx code is outdated", "user": {"login": "jbkoh", "id": 1572627, "node_id": "MDQ6VXNlcjE1NzI2Mjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1572627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbkoh", "html_url": "https://github.com/jbkoh", "followers_url": "https://api.github.com/users/jbkoh/followers", "following_url": "https://api.github.com/users/jbkoh/following{/other_user}", "gists_url": "https://api.github.com/users/jbkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbkoh/subscriptions", "organizations_url": "https://api.github.com/users/jbkoh/orgs", "repos_url": "https://api.github.com/users/jbkoh/repos", "events_url": "https://api.github.com/users/jbkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/jbkoh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-03-19T23:40:52Z", "updated_at": "2020-03-22T00:47:43Z", "closed_at": "2020-03-20T03:20:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nHi there, thanks for sharing a great project. I cannot load `starlette_client` because 1) httpx is not included in the package, 2) the most recent version of https is not compatible.\r\n\r\nWhen I run \r\n```python\r\nfrom authlib.integrations.starlette_client import OAuth\r\n```\r\nI get `ModuleNotFoundError: No module named 'httpx'`. If I manually install httpx and then run it, I get:\r\n```\r\n  File \"/some/path/authlib/integrations/httpx_client/utils.py\", line 2, in <module>\r\n    from httpx.content_streams import ByteStream\r\nModuleNotFoundError: No module named 'httpx.content_streams'\r\n```\r\nbecause the module name has been changed in httpx to httpx._content_streams:\r\nhttps://github.com/encode/httpx/blob/430285f55be7dda017e6b9d710c5e93f26efc67b/httpx/_content_streams.py#L65\r\n\r\n**To Reproduce**\r\n\r\n1. `pip install authlib`\r\n2. Run `python -c \"from authlib.integrations.starlette_client import OAuth\"`\r\n    - It will show `ModuleNotFoundError: No module named 'httpx'`\r\n3. `pip install httpx`\r\n4. Run `python -c \"from authlib.integrations.starlette_client import OAuth\"`\r\n    - It will show `ModuleNotFoundError: No module named 'httpx.content_streams'`\r\n\r\n**Expected behavior**\r\n\r\nShows nothing by successfully importing the module.\r\n\r\n**Environment:**\r\n\r\n - OS: Ubuntu 18.04\r\n - Python Version: 3.7.4\r\n - Authlib Version: 0.14.1\r\n\r\n**Additional context**\r\n\r\nThe easiest fix is to change `from httpx.content_streams` to `from httpx._content_streams` but not sure if it is a desired usage based on the naming convention of the package.\r\n\r\nAnd I don't know why https is not loaded in the first place.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/204", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/204/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/204/events", "html_url": "https://github.com/lepture/authlib/issues/204", "id": 579996434, "node_id": "MDU6SXNzdWU1Nzk5OTY0MzQ=", "number": 204, "title": "AttributeError: 'NoneType' object has no attribute 'split' if self.scope is None", "user": {"login": "GulaAren", "id": 36400180, "node_id": "MDQ6VXNlcjM2NDAwMTgw", "avatar_url": "https://avatars0.githubusercontent.com/u/36400180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GulaAren", "html_url": "https://github.com/GulaAren", "followers_url": "https://api.github.com/users/GulaAren/followers", "following_url": "https://api.github.com/users/GulaAren/following{/other_user}", "gists_url": "https://api.github.com/users/GulaAren/gists{/gist_id}", "starred_url": "https://api.github.com/users/GulaAren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GulaAren/subscriptions", "organizations_url": "https://api.github.com/users/GulaAren/orgs", "repos_url": "https://api.github.com/users/GulaAren/repos", "events_url": "https://api.github.com/users/GulaAren/events{/privacy}", "received_events_url": "https://api.github.com/users/GulaAren/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-03-12T14:52:46Z", "updated_at": "2020-03-20T03:22:10Z", "closed_at": "2020-03-20T03:22:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`AttributeError` occurs when the client scopes is `None`\r\n\r\n**Error Stacks**\r\n\r\n```\r\n    def get_allowed_scope(self, scope):\r\n        if not scope:\r\n            return ''\r\n>       allowed = set(self.scope.split())\r\nE       AttributeError: 'NoneType' object has no attribute 'split'\r\n```\r\n\r\nAs informed in [rfc6749#section-3.3](https://tools.ietf.org/html/rfc6749#section-3.3), that \r\n\r\n```\r\n...\r\nThe authorization server MAY fully or partially ignore the scope\r\n   requested by the client, based on the authorization server policy or\r\n   the resource owner's instructions.\r\n...\r\n```\r\n\r\nI think its better if we add empty string as default value:\r\n\r\n```python\r\n...\r\n# line 68\r\n    @property\r\n    def scope(self):\r\n        return self.client_metadata.get('scope', '')\r\n...\r\n```\r\n\r\nAll tests run well\r\n\r\nPull request: [github.com/lepture/authlib/pull/205](https://github.com/lepture/authlib/pull/205)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/203", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/203/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/203/events", "html_url": "https://github.com/lepture/authlib/issues/203", "id": 574834246, "node_id": "MDU6SXNzdWU1NzQ4MzQyNDY=", "number": 203, "title": "requests library not closing connections.", "user": {"login": "JakeDEvans", "id": 5014348, "node_id": "MDQ6VXNlcjUwMTQzNDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5014348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakeDEvans", "html_url": "https://github.com/JakeDEvans", "followers_url": "https://api.github.com/users/JakeDEvans/followers", "following_url": "https://api.github.com/users/JakeDEvans/following{/other_user}", "gists_url": "https://api.github.com/users/JakeDEvans/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakeDEvans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakeDEvans/subscriptions", "organizations_url": "https://api.github.com/users/JakeDEvans/orgs", "repos_url": "https://api.github.com/users/JakeDEvans/repos", "events_url": "https://api.github.com/users/JakeDEvans/events{/privacy}", "received_events_url": "https://api.github.com/users/JakeDEvans/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-03-03T17:44:24Z", "updated_at": "2020-05-02T07:45:22Z", "closed_at": "2020-05-02T07:45:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nclient mode not setting keepalive or http connection close parameters causing multiple events of hanging tcp connections.\r\n\r\nnginx error: client 172.19.0.18 closed keepalive connection (where client is the authlib client making a request)\r\n\r\n\r\n**To Reproduce**\r\n\r\nuse authlib client against authlib server, both behind nginx proxy.\r\n\r\n**Expected behavior**\r\n\r\nrequests parameter to close the connection, as described here: https://stackoverflow.com/questions/10115126/python-requests-close-http-connection\r\n\r\n**Environment:**\r\n\r\n - OS: alpine\r\n - Python Version: 3.7\r\n - Authlib Version: 0.14.1\r\n\r\n**Additional context**\r\n\r\nAdd any other context about the problem here.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/201", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/201/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/201/events", "html_url": "https://github.com/lepture/authlib/issues/201", "id": 574422491, "node_id": "MDU6SXNzdWU1NzQ0MjI0OTE=", "number": 201, "title": "httpx async client with post throws error in refresh token", "user": {"login": "kesavkolla", "id": 274645, "node_id": "MDQ6VXNlcjI3NDY0NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/274645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kesavkolla", "html_url": "https://github.com/kesavkolla", "followers_url": "https://api.github.com/users/kesavkolla/followers", "following_url": "https://api.github.com/users/kesavkolla/following{/other_user}", "gists_url": "https://api.github.com/users/kesavkolla/gists{/gist_id}", "starred_url": "https://api.github.com/users/kesavkolla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kesavkolla/subscriptions", "organizations_url": "https://api.github.com/users/kesavkolla/orgs", "repos_url": "https://api.github.com/users/kesavkolla/repos", "events_url": "https://api.github.com/users/kesavkolla/events{/privacy}", "received_events_url": "https://api.github.com/users/kesavkolla/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-03-03T05:17:38Z", "updated_at": "2020-05-02T07:45:37Z", "closed_at": "2020-05-02T07:45:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After creating AsyncOAuth2Client if we try to make post request with form data the request fails during refreshing token.  This happens only during post method with form data.\r\n\r\nI'm using master version of authlib.\r\n\r\n**Error Stacks**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/concurrent/futures/_base.py\", line 439, in result\r\n    return self.__get_result()\r\n  File \"/usr/lib/python3.8/concurrent/futures/_base.py\", line 388, in __get_result\r\n    raise self._exception\r\n  File \"<console>\", line 1, in <module>\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/httpx/client.py\", line 1305, in post\r\n    return await self.request(\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/authlib/integrations/httpx_client/oauth2_client.py\", line 84, in request\r\n    await self.ensure_active_token(**kwargs)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/authlib/integrations/httpx_client/oauth2_client.py\", line 95, in ensure_active_token\r\n    await self.refresh_token(url, refresh_token=refresh_token, **kwargs)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/authlib/oauth2/client.py\", line 245, in refresh_token\r\n    body = prepare_token_request(\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/authlib/oauth2/rfc6749/parameters.py\", line 107, in prepare_token_request\r\n    return add_params_to_qs(body, params)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/authlib/common/urls.py\", line 107, in add_params_to_qs\r\n    return url_encode(qs)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/authlib/common/urls.py\", line 45, in url_encode\r\n    encoded.append((to_bytes(k), to_bytes(v)))\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/authlib/common/encoding.py\", line 27, in to_bytes\r\n    return byte_type(x)\r\nTypeError: 'str' object cannot be interpreted as an integer\r\n\r\n```\r\n\r\nIMO we shouldn't be passing the original request body to refresh_token request.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/199", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/199/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/199/events", "html_url": "https://github.com/lepture/authlib/issues/199", "id": 573301079, "node_id": "MDU6SXNzdWU1NzMzMDEwNzk=", "number": 199, "title": "Issue with httpx AsyncOAuth2Client", "user": {"login": "kesavkolla", "id": 274645, "node_id": "MDQ6VXNlcjI3NDY0NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/274645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kesavkolla", "html_url": "https://github.com/kesavkolla", "followers_url": "https://api.github.com/users/kesavkolla/followers", "following_url": "https://api.github.com/users/kesavkolla/following{/other_user}", "gists_url": "https://api.github.com/users/kesavkolla/gists{/gist_id}", "starred_url": "https://api.github.com/users/kesavkolla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kesavkolla/subscriptions", "organizations_url": "https://api.github.com/users/kesavkolla/orgs", "repos_url": "https://api.github.com/users/kesavkolla/repos", "events_url": "https://api.github.com/users/kesavkolla/events{/privacy}", "received_events_url": "https://api.github.com/users/kesavkolla/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-02-29T14:05:41Z", "updated_at": "2020-03-01T13:22:27Z", "closed_at": "2020-03-01T13:22:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Error in setting the Content-Length while fetching tokens.  Looks like the same httpx client is used with updated body but the Content-Lenght is not changed.\r\n\r\nI'm using latest version of libs Authlib==0.14.1 httpx==0.11.1\r\n\r\nHere is my sample code\r\n\r\n```python\r\nfrom authlib.integrations.httpx_client import AsyncOAuth2Client\r\n\r\nconfig = get_settings()\r\ntoken_endpoint = 'token_url'\r\n\r\nclient = AsyncOAuth2Client(config.keycloak.client_id,\r\n                           config.keycloak.credential.get_secret_value(),\r\n                           grant_type='client_credentials',\r\n                           scope='offline_access profile email',\r\n                           audience='auth',\r\n                           token_endpoint=token_endpoint,\r\n                           token_endpoint_auth_method='client_secret_post')\r\nawait client.fetch_token(token_endpoint)\r\n```\r\n\r\nError stack trace\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.8/concurrent/futures/_base.py\", line 439, in result\r\n    return self.__get_result()\r\n  File \"/usr/lib/python3.8/concurrent/futures/_base.py\", line 388, in __get_result\r\n    raise self._exception\r\n  File \"<console>\", line 1, in <module>\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/authlib/integrations/httpx_client/oauth2_client.py\", line 108, in _fetch_token\r\n    resp = await self.post(\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/httpx/client.py\", line 1305, in post\r\n    return await self.request(\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/authlib/integrations/httpx_client/oauth2_client.py\", line 88, in request\r\n    return await super(AsyncOAuth2Client, self).request(\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/httpx/client.py\", line 1096, in request\r\n    response = await self.send(\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/httpx/client.py\", line 1117, in send\r\n    response = await self.send_handling_redirects(\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/httpx/client.py\", line 1147, in send_handling_redirects\r\n    response = await self.send_handling_auth(\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/httpx/client.py\", line 1184, in send_handling_auth\r\n    response = await self.send_single_request(request, timeout)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/httpx/client.py\", line 1208, in send_single_request\r\n    response = await dispatcher.send(request, timeout=timeout)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/httpx/dispatch/connection_pool.py\", line 157, in send\r\n    raise exc\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/httpx/dispatch/connection_pool.py\", line 153, in send\r\n    response = await connection.send(request, timeout=timeout)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/httpx/dispatch/connection.py\", line 44, in send\r\n    return await self.connection.send(request, timeout=timeout)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/httpx/dispatch/http11.py\", line 51, in send\r\n    await self._send_request_body(request, timeout)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/httpx/dispatch/http11.py\", line 101, in _send_request_body\r\n    await self._send_event(event, timeout)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/httpx/dispatch/http11.py\", line 117, in _send_event\r\n    bytes_to_send = self.h11_state.send(event)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/h11/_connection.py\", line 469, in send\r\n    data_list = self.send_with_data_passthrough(event)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/h11/_connection.py\", line 502, in send_with_data_passthrough\r\n    writer(event, data_list.append)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/h11/_writers.py\", line 79, in __call__\r\n    self.send_data(event.data, write)\r\n  File \"/home/kesav/.virtualenvs/smtp/lib/python3.8/site-packages/h11/_writers.py\", line 101, in send_data\r\n    raise LocalProtocolError(\"Too much data for declared Content-Length\")\r\nh11._util.LocalProtocolError: Too much data for declared Content-Length\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/198", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/198/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/198/events", "html_url": "https://github.com/lepture/authlib/issues/198", "id": 570864450, "node_id": "MDU6SXNzdWU1NzA4NjQ0NTA=", "number": 198, "title": "cannot run authlib", "user": {"login": "LionelHoudelier", "id": 30937375, "node_id": "MDQ6VXNlcjMwOTM3Mzc1", "avatar_url": "https://avatars3.githubusercontent.com/u/30937375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LionelHoudelier", "html_url": "https://github.com/LionelHoudelier", "followers_url": "https://api.github.com/users/LionelHoudelier/followers", "following_url": "https://api.github.com/users/LionelHoudelier/following{/other_user}", "gists_url": "https://api.github.com/users/LionelHoudelier/gists{/gist_id}", "starred_url": "https://api.github.com/users/LionelHoudelier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LionelHoudelier/subscriptions", "organizations_url": "https://api.github.com/users/LionelHoudelier/orgs", "repos_url": "https://api.github.com/users/LionelHoudelier/repos", "events_url": "https://api.github.com/users/LionelHoudelier/events{/privacy}", "received_events_url": "https://api.github.com/users/LionelHoudelier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-25T22:03:34Z", "updated_at": "2020-02-26T00:06:40Z", "closed_at": "2020-02-26T00:06:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry for the stupid question (i am not used to python). How can I run the programm after the installation? Witch file to run with python command?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/197", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/197/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/197/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/197/events", "html_url": "https://github.com/lepture/authlib/issues/197", "id": 570619133, "node_id": "MDU6SXNzdWU1NzA2MTkxMzM=", "number": 197, "title": "TypeError: __init__() missing 1 required positional argument: 'token_endpoint'", "user": {"login": "GefenPuravida", "id": 48918701, "node_id": "MDQ6VXNlcjQ4OTE4NzAx", "avatar_url": "https://avatars0.githubusercontent.com/u/48918701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GefenPuravida", "html_url": "https://github.com/GefenPuravida", "followers_url": "https://api.github.com/users/GefenPuravida/followers", "following_url": "https://api.github.com/users/GefenPuravida/following{/other_user}", "gists_url": "https://api.github.com/users/GefenPuravida/gists{/gist_id}", "starred_url": "https://api.github.com/users/GefenPuravida/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GefenPuravida/subscriptions", "organizations_url": "https://api.github.com/users/GefenPuravida/orgs", "repos_url": "https://api.github.com/users/GefenPuravida/repos", "events_url": "https://api.github.com/users/GefenPuravida/events{/privacy}", "received_events_url": "https://api.github.com/users/GefenPuravida/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-25T14:43:23Z", "updated_at": "2020-02-28T06:47:04Z", "closed_at": "2020-02-28T06:47:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is this a bug or not , i'm not sure...\r\nTried  S.overflow and twitter and everything i could possibly thinks of regarding APIs.\r\nThanks!\r\n\r\nI was trying to use your gspread blog post with a proper services account JSON.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/196", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/196/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/196/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/196/events", "html_url": "https://github.com/lepture/authlib/issues/196", "id": 569350490, "node_id": "MDU6SXNzdWU1NjkzNTA0OTA=", "number": 196, "title": "error w/ google oauth", "user": {"login": "aogier", "id": 321364, "node_id": "MDQ6VXNlcjMyMTM2NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/321364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aogier", "html_url": "https://github.com/aogier", "followers_url": "https://api.github.com/users/aogier/followers", "following_url": "https://api.github.com/users/aogier/following{/other_user}", "gists_url": "https://api.github.com/users/aogier/gists{/gist_id}", "starred_url": "https://api.github.com/users/aogier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aogier/subscriptions", "organizations_url": "https://api.github.com/users/aogier/orgs", "repos_url": "https://api.github.com/users/aogier/repos", "events_url": "https://api.github.com/users/aogier/events{/privacy}", "received_events_url": "https://api.github.com/users/aogier/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2020-02-22T15:35:23Z", "updated_at": "2020-05-23T05:32:07Z", "closed_at": "2020-02-22T18:24:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I can't made a successful auth against google oauth because an error (that seems related or identical to https://github.com/authlib/loginpass/issues/47).\r\n\r\nHere is the relevant code:\r\n\r\n```python\r\nconfig = Config(\".env\")  # pylint: disable=invalid-name\r\noauth = OAuth(config)\r\n\r\nCONF_URL = 'https://accounts.google.com/.well-known/openid-configuration'\r\noauth.register(\r\n    name='google',\r\n    server_metadata_url=CONF_URL,\r\n    client_kwargs={\r\n        'scope': 'openid email profile'\r\n    }\r\n)\r\n\r\nasync def login(request):\r\n    redirect_uri = request.url_for('auth')\r\n    return await oauth.google.authorize_redirect(request, redirect_uri)\r\n\r\nasync def auth(request):\r\n    logging.critical(request.headers)\r\n    token = await oauth.google.authorize_access_token(request)\r\n    user = await oauth.google.parse_id_token(request, token)\r\n    request.session['user'] = dict(user)\r\n    return RedirectResponse(url='/')\r\n\r\nROUTES = [\r\n    Route('/login', endpoint=login),\r\n    Route('/auth', endpoint=auth),\r\n]\r\n\r\napp = Starlette(debug=True, routes=ROUTES)  # pylint: disable=invalid-name\r\n```\r\n\r\nwhen `/auth` endpoint is hit after a successful authentication, I get this traceback (first line is mine):\r\n\r\n```\r\n[osso] CRITICAL: Headers({'host': 'osso.dev.scimmia.net', 'x-request-id': '299db1f2a6d8f187459083ed590d4adb', 'x-real-ip': '10.42.0.1', 'x-forwarded-for': '10.42.0.1', 'x-forwarded-host': 'osso.dev.scimmia.net', 'x-forwarded-port': '443', 'x-forwarded-proto': 'https', 'x-scheme': 'https', 'user-agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:73.0) Gecko/20100101 Firefox/73.0', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'accept-language': 'en-US,en;q=0.5', 'accept-encoding': 'gzip, deflate, br', 'referer': 'https://accounts.google.com/', 'dnt': '1', 'upgrade-insecure-requests': '1'})\r\n[osso] INFO:     10.42.0.1:0 - \"GET /auth?state=VNyCSjjCXSojWBTqNjsm3XlxBSJEgg&code=4%2FwwEnVamW5jzr4hOz4agsa1kjrKBlCOrMJTdO0pbFM9nq9qDbJ7-riJQ4Sh9TeokDyvz47FnRtY4DQsMMNH3N_II&scope=email+profile+openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&authuser=0&prompt=consent HTTP/1.1\" 500 Internal Server Error\r\n[osso] ERROR:    Exception in ASGI application\r\n[osso] Traceback (most recent call last):\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 385, in run_asgi\r\n[osso]     result = await app(self.scope, self.receive, self.send)\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/uvicorn/middleware/proxy_headers.py\", line 45, in __call__\r\n[osso]     return await self.app(scope, receive, send)\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/starlette/applications.py\", line 102, in __call__\r\n[osso]     await self.middleware_stack(scope, receive, send)\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 181, in __call__\r\n[osso]     raise exc from None\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 159, in __call__\r\n[osso]     await self.app(scope, receive, _send)\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/starlette_authlib/middleware.py\", line 122, in __call__\r\n[osso]     await self.app(scope, receive, send_wrapper)\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/starlette/exceptions.py\", line 82, in __call__\r\n[osso]     raise exc from None\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/starlette/exceptions.py\", line 71, in __call__\r\n[osso]     await self.app(scope, receive, sender)\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/starlette/routing.py\", line 550, in __call__\r\n[osso]     await route.handle(scope, receive, send)\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/starlette/routing.py\", line 227, in handle\r\n[osso]     await self.app(scope, receive, send)\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/starlette/routing.py\", line 41, in app\r\n[osso]     response = await func(request)\r\n[osso]   File \"./osso/app.py\", line 79, in auth\r\n[osso]     token = await oauth.google.authorize_access_token(request)\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/authlib/integrations/starlette_client/integration.py\", line 58, in authorize_access_token\r\n[osso]     return await self.fetch_access_token(**params)\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/authlib/integrations/base_client/async_app.py\", line 105, in fetch_access_token\r\n[osso]     token = await client.fetch_token(token_endpoint, **kwargs)\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/authlib/integrations/httpx_client/oauth2_client.py\", line 120, in _fetch_token\r\n[osso]     return self.parse_response_token(resp.json())\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/authlib/oauth2/client.py\", line 348, in parse_response_token\r\n[osso]     self.handle_error(error, description)\r\n[osso]   File \"/usr/local/lib/python3.7/site-packages/authlib/integrations/httpx_client/oauth2_client.py\", line 76, in handle_error\r\n[osso]     raise OAuthError(error_type, error_description)\r\n[osso] authlib.common.errors.AuthlibBaseError: invalid_request: Missing parameter: redirect_uri\r\n```\r\n\r\n**Expected behavior**\r\n\r\nA successful login via google oauth\r\n\r\n**Environment:**\r\n\r\n - OS: python:3.7-slim docker image (alpine)\r\n - Authlib Version: 0.14.1\r\n\r\nThank you, ciao!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/195", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/195/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/195/events", "html_url": "https://github.com/lepture/authlib/issues/195", "id": 567737345, "node_id": "MDU6SXNzdWU1Njc3MzczNDU=", "number": 195, "title": "Twitter+Authlib+FastAPI works different than the docs suggest ", "user": {"login": "molten-firescar96", "id": 42944112, "node_id": "MDQ6VXNlcjQyOTQ0MTEy", "avatar_url": "https://avatars3.githubusercontent.com/u/42944112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/molten-firescar96", "html_url": "https://github.com/molten-firescar96", "followers_url": "https://api.github.com/users/molten-firescar96/followers", "following_url": "https://api.github.com/users/molten-firescar96/following{/other_user}", "gists_url": "https://api.github.com/users/molten-firescar96/gists{/gist_id}", "starred_url": "https://api.github.com/users/molten-firescar96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/molten-firescar96/subscriptions", "organizations_url": "https://api.github.com/users/molten-firescar96/orgs", "repos_url": "https://api.github.com/users/molten-firescar96/repos", "events_url": "https://api.github.com/users/molten-firescar96/events{/privacy}", "received_events_url": "https://api.github.com/users/molten-firescar96/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}, {"id": 799561986, "node_id": "MDU6TGFiZWw3OTk1NjE5ODY=", "url": "https://api.github.com/repos/lepture/authlib/labels/documentation", "name": "documentation", "color": "c5def5", "default": true, "description": null}, {"id": 732510048, "node_id": "MDU6TGFiZWw3MzI1MTAwNDg=", "url": "https://api.github.com/repos/lepture/authlib/labels/good%20first%20issue", "name": "good first issue", "color": "1d76db", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-02-19T18:00:23Z", "updated_at": "2020-05-28T16:03:21Z", "closed_at": "2020-05-06T01:00:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nThe docs describe a process for integrating Authlib, Starlette, and Twitter into an app that needs to be revised. I followed [these docs](https://docs.authlib.org/en/latest/client/starlette.html) to add Twitter OAuth 1 to my app, but got the following errors.\r\n\r\nThe example in the docs should also be edited to create a FastAPI instance instead of Starlette instance, because `@app.get(\"/login\")` decorators don't exist in Starlette. I can start a PR for the docs edit if you agree.\r\n\r\n**Error Stacks**\r\n\r\n```\r\n  File \"/home/firescar96/.local/lib/python3.7/site-packages/starlette/routing.py\", line 41, in app\r\n    response = await func(request)\r\n  File \"/home/firescar96/.local/lib/python3.7/site-packages/fastapi/routing.py\", line 133, in app\r\n    raw_response = await dependant.call(**values)\r\n  File \"./broken.py\", line 31, in auth_via_google\r\n    token = await oauth.twitter.authorize_access_token(request)\r\n  File \"/home/firescar96/.local/lib/python3.7/site-packages/authlib/integrations/starlette_client/integration.py\", line 58, in authorize_access_token\r\n    return await self.fetch_access_token(**params)\r\n  File \"/home/firescar96/.local/lib/python3.7/site-packages/authlib/integrations/base_client/async_app.py\", line 97, in fetch_access_token\r\n    token = await client.fetch_access_token(token_endpoint, **kwargs)\r\n  File \"/home/firescar96/.local/lib/python3.7/site-packages/authlib/integrations/httpx_client/oauth1_client.py\", line 61, in fetch_access_token\r\n    self.handle_error('missing_verifier', 'Missing \"verifier\" value')\r\n  File \"/home/firescar96/.local/lib/python3.7/site-packages/authlib/integrations/httpx_client/oauth1_client.py\", line 75, in handle_error\r\n    raise OAuthError(error_type, error_description)\r\nauthlib.common.errors.AuthlibBaseError: missing_verifier: Missing \"verifier\" value\r\n\r\n```\r\n\r\n**To Reproduce**\r\n\r\n```python\r\nimport os\r\nfrom starlette.requests import Request\r\nfrom fastapi import FastAPI\r\nfrom starlette.middleware.sessions import SessionMiddleware\r\nfrom ma_http_interface import config\r\nfrom authlib.integrations.starlette_client import OAuth\r\n\r\napp = FastAPI()\r\napp.add_middleware(SessionMiddleware, secret_key=\"some-random-string\")\r\n\r\noauth = OAuth()\r\noauth.register(\r\n    name='twitter',\r\n    request_token_url='https://api.twitter.com/oauth/request_token',\r\n    access_token_url='https://api.twitter.com/oauth/access_token',\r\n    authorize_url='https://api.twitter.com/oauth/authenticate',\r\n    api_base_url='https://api.twitter.com/1.1/',\r\n    access_token_params={},\r\n    authorize_params={},\r\n    client_id=os.environ['API_KEY'],\r\n    client_secret=os.environ['API_SECRET']\r\n)\r\n\r\n@app.get(\"/login\")\r\nasync def login_via_google(request: Request):\r\n    redirect_uri = 'https://example.com/auth'\r\n    return await oauth.twitter.authorize_redirect(request, redirect_uri)\r\n\r\n@app.get(\"/auth\")\r\nasync def auth_via_google(request: Request):\r\n    token = await oauth.twitter.authorize_access_token(request)\r\n    user = await oauth.twitter.parse_id_token(request, token)\r\n    return dict(user)\r\n```\r\n\r\n**Expected behavior**\r\n\r\nI added the `/auth` route to my twitter app callback routes. I expected the call to not error but it did. After reading the authlib code I found adding this line at the beginning of the `/auth` route resolved the error.\r\n\r\n```python\r\noauth.twitter.access_token_params['verifier'] = request.query_params.get('oauth_verifier', '')\r\n```\r\nDo you think is because twitter passes the verifier query parameter in a different place than google does?\r\n\r\n**Environment:**\r\n\r\n - OS: Debian 10\r\n - Python Version: 3.7.3\r\n - Authlib==0.14.1\r\n- httpx==0.11.1\r\n- starlette==0.12.9\r\n- fastapi==0.48.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/194", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/194/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/194/events", "html_url": "https://github.com/lepture/authlib/issues/194", "id": 565836605, "node_id": "MDU6SXNzdWU1NjU4MzY2MDU=", "number": 194, "title": "Token refresh doesn't work with json keyword for HTTPX integration", "user": {"login": "bobh66", "id": 4935304, "node_id": "MDQ6VXNlcjQ5MzUzMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4935304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobh66", "html_url": "https://github.com/bobh66", "followers_url": "https://api.github.com/users/bobh66/followers", "following_url": "https://api.github.com/users/bobh66/following{/other_user}", "gists_url": "https://api.github.com/users/bobh66/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobh66/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobh66/subscriptions", "organizations_url": "https://api.github.com/users/bobh66/orgs", "repos_url": "https://api.github.com/users/bobh66/repos", "events_url": "https://api.github.com/users/bobh66/events{/privacy}", "received_events_url": "https://api.github.com/users/bobh66/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-02-16T01:51:25Z", "updated_at": "2020-02-25T15:00:39Z", "closed_at": "2020-02-25T15:00:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nWhen using the HTTPX integration, token refresh fails when the session request includes the \"json\" keyword.\r\n\r\nAs a test I updated the httpx client test (tests/py3/test_httpx_client/test_async_oauth2_client.py)  with this code:\r\n\r\n```\r\nasync with AsyncOAuth2Client(\r\n            'foo', token=old_token, token_endpoint='https://i.b/token',\r\n            update_token=update_token, grant_type='client_credentials',\r\n            dispatch=dispatch,\r\n    ) as client:\r\n        await client.post('https://i.b/user', json={'foo': 'bar'})\r\n        assert update_token.called is True\r\n```\r\nand it causes the failure.\r\n\r\nIf I use data=json.dumps({'foo': 'bar'}) instead of the json keyword it works fine.  Or the test passes anyway.\r\n\r\n\r\n**Error Stacks**\r\n\r\n```\r\n======================================================================================= FAILURES ========================================================================================\r\n_______________________________________________________________________________ test_auto_refresh_token2 ________________________________________________________________________________\r\n\r\n    @pytest.mark.asyncio\r\n    async def test_auto_refresh_token2():\r\n\r\n        async def _update_token(token, refresh_token=None, access_token=None):\r\n            assert access_token == 'a'\r\n            assert token == default_token\r\n\r\n        update_token = mock.Mock(side_effect=_update_token)\r\n\r\n        old_token = dict(\r\n            access_token='a',\r\n            token_type='bearer',\r\n            expires_at=100\r\n        )\r\n\r\n        dispatch = MockDispatch(default_token)\r\n\r\n        async with AsyncOAuth2Client(\r\n                'foo', token=old_token,\r\n                token_endpoint='https://i.b/token',\r\n                grant_type='client_credentials',\r\n                dispatch=dispatch,\r\n        ) as client:\r\n            await client.get('https://i.b/user')\r\n            assert update_token.called is False\r\n\r\n        async with AsyncOAuth2Client(\r\n                'foo', token=old_token, token_endpoint='https://i.b/token',\r\n                update_token=update_token, grant_type='client_credentials',\r\n                dispatch=dispatch,\r\n        ) as client:\r\n            await client.get('https://i.b/user')\r\n            assert update_token.called is True\r\n\r\n        async with AsyncOAuth2Client(\r\n                'foo', token=old_token, token_endpoint='https://i.b/token',\r\n                update_token=update_token, grant_type='client_credentials',\r\n                dispatch=dispatch,\r\n        ) as client:\r\n>           await client.post('https://i.b/user', json={'foo': 'bar'})\r\n\r\ntests/py3/test_httpx_client/test_async_oauth2_client.py:347:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n.tox/py37-async/lib/python3.7/site-packages/httpx/client.py:1316: in post\r\n    timeout=timeout,\r\nauthlib/integrations/httpx_client/oauth2_client.py:84: in request\r\n    await self.ensure_active_token(**kwargs)\r\nauthlib/integrations/httpx_client/oauth2_client.py:98: in ensure_active_token\r\n    token = await self.fetch_token(url, grant_type='client_credentials', **kwargs)\r\nauthlib/oauth2/client.py:189: in fetch_token\r\n    body = self._prepare_token_endpoint_body(body, grant_type, **kwargs)\r\nauthlib/oauth2/client.py:361: in _prepare_token_endpoint_body\r\n    return prepare_token_request(grant_type, body, **kwargs)\r\nauthlib/oauth2/rfc6749/parameters.py:107: in prepare_token_request\r\n    return add_params_to_qs(body, params)\r\nauthlib/common/urls.py:106: in add_params_to_qs\r\n    return url_encode(qs)\r\nauthlib/common/urls.py:44: in url_encode\r\n    encoded.append((to_bytes(k), to_bytes(v)))\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nx = {'foo': 'bar'}, charset = 'utf-8', errors = 'strict'\r\n\r\n    def to_bytes(x, charset='utf-8', errors='strict'):\r\n        if x is None:\r\n            return None\r\n        if isinstance(x, byte_type):\r\n            return x\r\n        if isinstance(x, unicode_type):\r\n            return x.encode(charset, errors)\r\n        if isinstance(x, (int, float)):\r\n            return str(x).encode(charset, errors)\r\n>       return byte_type(x)\r\nE       TypeError: 'str' object cannot be interpreted as an integer\r\n\r\nauthlib/common/encoding.py:27: TypeError\r\n============================================================================= 1 failed, 41 passed in 0.73s ==============================================================================\r\nERROR: InvocationError for command /home/bobh/git/authlib/.tox/py37-async/bin/coverage run --rcfile=.asyncoverage --source=authlib -p -m pytest tests/py3 (exited with code 1)\r\n________________________________________________________________________________________ summary ________________________________________________________________________________________\r\nERROR:   py37-async: commands failed\r\n```\r\n\r\n**To Reproduce**\r\n\r\nA minimal example to reproduce the behavior:\r\n\r\n**Expected behavior**\r\n\r\nThe refresh token should work as expected\r\n\r\n**Environment:**\r\n\r\n - OS:  Centos7\r\n - Python Version: 3.7.5\r\n - Authlib Version: 0.14\r\n\r\n**Additional context**\r\n\r\nAdd any other context about the problem here.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/193", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/193/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/193/events", "html_url": "https://github.com/lepture/authlib/issues/193", "id": 564610684, "node_id": "MDU6SXNzdWU1NjQ2MTA2ODQ=", "number": 193, "title": "RemoteApp.request fails to use token_endpoint to refresh the access token", "user": {"login": "jkozera", "id": 120114, "node_id": "MDQ6VXNlcjEyMDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/120114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkozera", "html_url": "https://github.com/jkozera", "followers_url": "https://api.github.com/users/jkozera/followers", "following_url": "https://api.github.com/users/jkozera/following{/other_user}", "gists_url": "https://api.github.com/users/jkozera/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkozera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkozera/subscriptions", "organizations_url": "https://api.github.com/users/jkozera/orgs", "repos_url": "https://api.github.com/users/jkozera/repos", "events_url": "https://api.github.com/users/jkozera/events{/privacy}", "received_events_url": "https://api.github.com/users/jkozera/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}, {"id": 753466877, "node_id": "MDU6TGFiZWw3NTM0NjY4Nzc=", "url": "https://api.github.com/repos/lepture/authlib/labels/client", "name": "client", "color": "bdffaf", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-02-13T11:14:28Z", "updated_at": "2020-05-02T08:08:23Z", "closed_at": "2020-05-02T08:08:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\n`InvalidTokenError` is raised instead of refreshing the access token when `server_metadata_url` is used for specifying the server details.\r\n\r\nIt works correctly when `access_token_url` is passed directly instead of via the JSON from `server_metadata_url` (`token_endpoint` value).\r\n\r\nThis seems to be caused by server metadata missing from the `_get_oauth_client` call at https://github.com/lepture/authlib/blob/2048334/authlib/integrations/base_client/remote_app.py#L113-L117 - the `url` is `None` [in OAuth2Auth](https://github.com/lepture/authlib/blob/20483349583d8eb13f0b45a1aeb4c91aab8e0cf1/authlib/integrations/requests_client/oauth2_session.py#L23) which then causes the `InvalidTokenError`.\r\n\r\nAt the end of this issue I include a patch which fixes the issue for me, but it's not entirely clear why the metadata is missing from the call, so I'm creating this issue instead of a PR.\r\n\r\n**Error Stacks**\r\n\r\n```\r\n  File \"authlib/integrations/base_client/base_app.py\", line 208, in post\r\n    return self.request('POST', url, **kwargs)\r\n  File \"authlib/integrations/base_client/remote_app.py\", line 128, in request\r\n    return session.request(method, url, **kwargs)\r\n  File \"authlib/integrations/requests_client/oauth2_session.py\", line 114, in request\r\n    method, url, auth=auth, **kwargs)\r\n  File \"requests/sessions.py\", line 494, in request\r\n    prep = self.prepare_request(req)\r\n  File \"requests/sessions.py\", line 437, in prepare_request\r\n    hooks=merge_hooks(request.hooks, self.hooks),\r\n  File \"requests/models.py\", line 309, in prepare\r\n    self.prepare_auth(auth, url)\r\n  File \"requests/models.py\", line 540, in prepare_auth\r\n    r = auth(self)\r\n  File \"authlib/integrations/requests_client/oauth2_session.py\", line 35, in __call__\r\n    self.ensure_active_token()\r\n  File \"authlib/integrations/requests_client/oauth2_session.py\", line 32, in ensure_active_token\r\n    raise InvalidTokenError()\r\nauthlib.integrations.base_client.errors.InvalidTokenError: token_invalid:\r\n\r\n```\r\n\r\n**To Reproduce**\r\n\r\nIn my case it was using the Django integration:\r\n```\r\nfrom authlib.integrations.django_client import OAuth\r\nclient = OAuth().register(\r\n        name='...',\r\n        client_id='...',\r\n        client_secret='...',\r\n        server_metadata_url='...',\r\n        client_kwargs={\r\n            'scope': 'some scope'\r\n        },\r\n    )\r\nclient.post('some_url', token=expired_access_token)\r\n```\r\n\r\n**Expected behavior**\r\n\r\n`expired_access_token` should be renewed using the `token_endpoint` from server medatata json, instead of raising `InvalidTokenError`.\r\n\r\n**Environment:**\r\n\r\n - OS: Linux\r\n - Python Version: 3.6.10\r\n - Authlib Version: 0.14\r\n\r\n**Additional context**\r\n\r\nAdding `load_server_metadata` as below fixes the issue:\r\n```\r\ndiff --git a/authlib/integrations/base_client/remote_app.py b/authlib/integrations/base_client/remote_app.py\r\nindex c3d3e35..351287d 100644\r\n--- a/authlib/integrations/base_client/remote_app.py\r\n+++ b/authlib/integrations/base_client/remote_app.py\r\n@@ -111,10 +111,13 @@ class RemoteApp(BaseApp):\r\n             return token\r\n \r\n     def request(self, method, url, token=None, **kwargs):\r\n+        # skip server metadata for empty token, otherwise we run into infinite\r\n+        # recursive call (request -> load_server_metadata -> request -> ...)\r\n+        metadata = self.load_server_metadata() if token else {}\r\n         if self.api_base_url and not url.startswith(('https://', 'http://')):\r\n             url = urlparse.urljoin(self.api_base_url, url)\r\n \r\n-        with self._get_oauth_client() as session:\r\n+        with self._get_oauth_client(**metadata) as session:\r\n             request = kwargs.pop('request', None)\r\n             if kwargs.get('withhold_token'):\r\n                 return session.request(method, url, **kwargs)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/190", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/190/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/190/events", "html_url": "https://github.com/lepture/authlib/issues/190", "id": 563982480, "node_id": "MDU6SXNzdWU1NjM5ODI0ODA=", "number": 190, "title": "oauth2.auth.encode_none() changes the body size but leaves content-length header set to the old size", "user": {"login": "bobh66", "id": 4935304, "node_id": "MDQ6VXNlcjQ5MzUzMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4935304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobh66", "html_url": "https://github.com/bobh66", "followers_url": "https://api.github.com/users/bobh66/followers", "following_url": "https://api.github.com/users/bobh66/following{/other_user}", "gists_url": "https://api.github.com/users/bobh66/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobh66/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobh66/subscriptions", "organizations_url": "https://api.github.com/users/bobh66/orgs", "repos_url": "https://api.github.com/users/bobh66/repos", "events_url": "https://api.github.com/users/bobh66/events{/privacy}", "received_events_url": "https://api.github.com/users/bobh66/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-02-12T12:56:36Z", "updated_at": "2020-02-16T04:39:47Z", "closed_at": "2020-02-16T04:39:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nWhen using the HTTPX AsyncOAuth2Client with password grant, the httpx_client OAuth2ClientAuth.auth_flow() method modifies the body by adding the client_id, but it does not update the Content-Length header which has already been calculated.   This causes an exception in the httpx h11 processing when it deletes more characters from the stream buffer than the content-length has specified.\r\n\r\n**Error Stacks**\r\n\r\n```\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/authlib/integrations/httpx_client/oauth2_client.py:109: in _fetch_token\r\n    auth=auth, **kwargs)\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/httpx/client.py:1316: in post\r\n    timeout=timeout,\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/authlib/integrations/httpx_client/oauth2_client.py:89: in request\r\n    method, url, auth=auth, **kwargs)\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/httpx/client.py:1097: in request\r\n    request, auth=auth, allow_redirects=allow_redirects, timeout=timeout,\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/httpx/client.py:1118: in send\r\n    request, auth=auth, timeout=timeout, allow_redirects=allow_redirects,\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/httpx/client.py:1148: in send_handling_redirects\r\n    request, auth=auth, timeout=timeout, history=history\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/httpx/client.py:1184: in send_handling_auth\r\n    response = await self.send_single_request(request, timeout)\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/httpx/client.py:1208: in send_single_request\r\n    response = await dispatcher.send(request, timeout=timeout)\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/httpx/dispatch/connection_pool.py:157: in send\r\n    raise exc\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/httpx/dispatch/connection_pool.py:153: in send\r\n    response = await connection.send(request, timeout=timeout)\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/httpx/dispatch/connection.py:44: in send\r\n    return await self.connection.send(request, timeout=timeout)\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/httpx/dispatch/http11.py:51: in send\r\n    await self._send_request_body(request, timeout)\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/httpx/dispatch/http11.py:101: in _send_request_body\r\n    await self._send_event(event, timeout)\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/httpx/dispatch/http11.py:117: in _send_event\r\n    bytes_to_send = self.h11_state.send(event)\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/h11/_connection.py:464: in send\r\n    data_list = self.send_with_data_passthrough(event)\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/h11/_connection.py:498: in send_with_data_passthrough\r\n    writer(event, data_list.append)\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/h11/_writers.py:69: in __call__\r\n    self.send_data(event.data, write)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <h11._writers.ContentLengthWriter object at 0x7fdbaa265a58>\r\ndata = b'grant_type=password&username=foo&password=barbar%23123&client_id=foo-backend'\r\nwrite = <built-in method append of list object at 0x7fdbaa25ba88>\r\n\r\n    def send_data(self, data, write):\r\n        self._length -= len(data)\r\n        if self._length < 0:\r\n            raise LocalProtocolError(\r\n>               \"Too much data for declared Content-Length\")\r\nE           h11._util.LocalProtocolError: Too much data for declared Content-Length\r\n\r\n.virtualenvs/traffica_stc/lib/python3.7/site-packages/h11/_writers.py:89: LocalProtocolError\r\n---------------------------- Captured log teardown -----------------------------\r\n```\r\n\r\n**To Reproduce**\r\n\r\n```\r\nimport pytest\r\nfrom authlib.integrations.httpx_client import AsyncOAuth2Client\r\n\r\n\r\n@pytest.mark.asyncio\r\nasync def test_keycloak():\r\n    client = AsyncOAuth2Client(client_id=\"foo-backend\",\r\n                               client_secret=None,\r\n                               username=\"foo\", password=\"barbar#123\",\r\n                               token_endpoint=\"https://keycloak/auth/realms/myrealm/protocol/openid-connect/token\",\r\n                               verify=False, trust_env=False)\r\n    client.token = await client.fetch_token(url=\"https://keycloak/auth/realms/myrealm/protocol/openid-connect/token\", username=\"foo\",\r\n                                            password=\"barbar#123\")\r\n    print(client.token)\r\n```\r\n**Expected behavior**\r\n\r\nThe token should be fetched from the server\r\n\r\n**Environment:**\r\n\r\n - OS: CentOS Linux\r\n - Python Version: 3.7\r\n - Authlib Version: 0.14\r\n\r\n**Additional context**\r\n\r\nThis change in oauth2/auth.py fixes the problem:\r\n\r\n```\r\ndef encode_none(client, method, uri, headers, body):\r\n    if method == 'GET':\r\n        uri = add_params_to_uri(uri, [('client_id', client.client_id)])\r\n        return uri, headers, body\r\n    body = add_params_to_qs(body, [('client_id', client.client_id)])\r\n    # Update Content-Length header\r\n    headers['Content-Length'] = str(len(body))\r\n    return uri, headers, body\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/189", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/189/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/189/events", "html_url": "https://github.com/lepture/authlib/issues/189", "id": 563511567, "node_id": "MDU6SXNzdWU1NjM1MTE1Njc=", "number": 189, "title": "RemoteApp moved around?", "user": {"login": "mattrunchey", "id": 3580926, "node_id": "MDQ6VXNlcjM1ODA5MjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3580926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattrunchey", "html_url": "https://github.com/mattrunchey", "followers_url": "https://api.github.com/users/mattrunchey/followers", "following_url": "https://api.github.com/users/mattrunchey/following{/other_user}", "gists_url": "https://api.github.com/users/mattrunchey/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattrunchey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattrunchey/subscriptions", "organizations_url": "https://api.github.com/users/mattrunchey/orgs", "repos_url": "https://api.github.com/users/mattrunchey/repos", "events_url": "https://api.github.com/users/mattrunchey/events{/privacy}", "received_events_url": "https://api.github.com/users/mattrunchey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-02-11T22:06:08Z", "updated_at": "2020-02-12T04:40:36Z", "closed_at": "2020-02-12T04:40:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nPrevious imports are no longer working.\r\n\r\n```python\r\nPython 3.6.4 (default, Jan  8 2020, 14:32:46) \r\n[GCC 4.2.1 Compatible Apple LLVM 11.0.0 (clang-1100.0.33.8)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from authlib.flask.client import OAuth\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/mrunchey/brokerdev/lib/python3.6/site-packages/authlib/flask/client/__init__.py\", line 4, in <module>\r\n    from authlib.integrations.flask_client import OAuth, RemoteApp\r\nImportError: cannot import name 'RemoteApp'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/188", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/188/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/188/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/188/events", "html_url": "https://github.com/lepture/authlib/issues/188", "id": 562870149, "node_id": "MDU6SXNzdWU1NjI4NzAxNDk=", "number": 188, "title": "headers.append of WWW-Authenticate causing infinite loop of appending headers.", "user": {"login": "JakeDEvans", "id": 5014348, "node_id": "MDQ6VXNlcjUwMTQzNDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5014348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakeDEvans", "html_url": "https://github.com/JakeDEvans", "followers_url": "https://api.github.com/users/JakeDEvans/followers", "following_url": "https://api.github.com/users/JakeDEvans/following{/other_user}", "gists_url": "https://api.github.com/users/JakeDEvans/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakeDEvans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakeDEvans/subscriptions", "organizations_url": "https://api.github.com/users/JakeDEvans/orgs", "repos_url": "https://api.github.com/users/JakeDEvans/repos", "events_url": "https://api.github.com/users/JakeDEvans/events{/privacy}", "received_events_url": "https://api.github.com/users/JakeDEvans/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-02-10T22:35:01Z", "updated_at": "2020-02-12T04:41:57Z", "closed_at": "2020-02-11T14:14:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nhttps://github.com/lepture/authlib/commit/8b535a8b09ebeaa9d9410e4c86e0371abc7d7bd6#diff-15546a372b6f5de06be881e91fec2e24R100\r\n\r\nhttps://github.com/lepture/authlib/commit/8b535a8b09ebeaa9d9410e4c86e0371abc7d7bd6#diff-efe7a7a222a30214529e7718318c355eR63\r\n\r\nWill eventually throw: https://stackoverflow.com/questions/23055378/http-client-httpexception-got-more-than-100-headers\r\n\r\n```\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\nWWW-Authenticate: Bearer error=\"invalid_token\", error_description=\"The access token provided is expired, revoked, malformed, or invalid for other reasons.\"\r\n```\r\n\r\n**To Reproduce**\r\n\r\nContinued use of authlib\r\n\r\n**Expected behavior**\r\n\r\none instance of `WWW-Authenticate`\r\n\r\n**Environment:**\r\n\r\n - OS: alpine\r\n - Python Version: 3.7\r\n - Authlib Version: 0.12\r\n\r\n**Additional context**\r\n\r\nI suggest using headers.set to ensure only one header is added/created.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/187", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/187/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/187/events", "html_url": "https://github.com/lepture/authlib/issues/187", "id": 559258662, "node_id": "MDU6SXNzdWU1NTkyNTg2NjI=", "number": 187, "title": "Unable to decode ID Token with unicode characters - Part 1", "user": {"login": "TomAtHulu", "id": 60621093, "node_id": "MDQ6VXNlcjYwNjIxMDkz", "avatar_url": "https://avatars3.githubusercontent.com/u/60621093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TomAtHulu", "html_url": "https://github.com/TomAtHulu", "followers_url": "https://api.github.com/users/TomAtHulu/followers", "following_url": "https://api.github.com/users/TomAtHulu/following{/other_user}", "gists_url": "https://api.github.com/users/TomAtHulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/TomAtHulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TomAtHulu/subscriptions", "organizations_url": "https://api.github.com/users/TomAtHulu/orgs", "repos_url": "https://api.github.com/users/TomAtHulu/repos", "events_url": "https://api.github.com/users/TomAtHulu/events{/privacy}", "received_events_url": "https://api.github.com/users/TomAtHulu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2020-02-03T18:34:56Z", "updated_at": "2020-05-02T07:46:19Z", "closed_at": "2020-05-02T07:46:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nWe use Okta to authenticate.  We have employees in Beijing that include unicode characters in their profiles.  For a few employees the exchange of authentication code for tokens fails due to errors parsing the returned ID Tokens.  The first consequence that we experience is an 'Incorrect Padding' error which comes from the urlsafe_b64decode function while parsing the signature. We've gotten around that error by including a couple of '=' signs at the end of the signature.  Attached is [parse_token.py.zip](https://github.com/lepture/authlib/files/4149452/parse_token.py.zip) which illustrates this issue and our work-around.\r\nSince the tokens themselves contain some personally identifiable information which I cannot post to the general list, please contact me separately and I can get you a few examples.\r\n**Error Stacks**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/tom.gardner/Projects/parse-error/parse_token.py\", line 44, in <module>\r\n    signature = urlsafe_b64decode(signature)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/base64.py\", line 133, in urlsafe_b64decode\r\n    return b64decode(s)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/base64.py\", line 87, in b64decode\r\n    return binascii.a2b_base64(s)\r\nbinascii.Error: Incorrect padding\r\n```\r\n\r\n**To Reproduce**\r\n\r\nRun the attached python application with Python 2.7\r\n\r\n**Expected behavior**\r\n\r\nThe application will fail with an Incorrect padding error.\r\n\r\n**Environment:**\r\n\r\n - OS: MacOS\r\n - Python Version: 2.7\r\n - Authlib Version: Latest version in Git\r\n\r\n**Additional context**\r\n\r\nYou'll have to contact me to get an ID Token to use.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/185", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/185/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/185/events", "html_url": "https://github.com/lepture/authlib/issues/185", "id": 557150753, "node_id": "MDU6SXNzdWU1NTcxNTA3NTM=", "number": 185, "title": "Check for Secure connection should be configurable", "user": {"login": "wildex", "id": 2744527, "node_id": "MDQ6VXNlcjI3NDQ1Mjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2744527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wildex", "html_url": "https://github.com/wildex", "followers_url": "https://api.github.com/users/wildex/followers", "following_url": "https://api.github.com/users/wildex/following{/other_user}", "gists_url": "https://api.github.com/users/wildex/gists{/gist_id}", "starred_url": "https://api.github.com/users/wildex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wildex/subscriptions", "organizations_url": "https://api.github.com/users/wildex/orgs", "repos_url": "https://api.github.com/users/wildex/repos", "events_url": "https://api.github.com/users/wildex/events{/privacy}", "received_events_url": "https://api.github.com/users/wildex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-29T22:18:26Z", "updated_at": "2020-02-06T10:01:39Z", "closed_at": "2020-02-06T10:01:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nWhen I ran Flask app + Authlib behind Nginx SSL with `proxy_pass` directive, I am still getting **InsecureTransportError** exception.\r\nThis is happening because App runs inside server on the \"insecure\" http, while web facing Nginx uses secure HTTPS and then proxies requests.\r\n\r\n**Describe the solution you'd like**\r\n\r\nI know, that we can use environment variable `AUTHLIB_INSECURE_TRANSPORT=1`. But in this case transport is still secure and there should be possibility to configure library in other way to work in such stacks.\r\nFor example it can be done with some native configuration to the library.\r\n\r\n**Additional context**\r\n\r\nExample nginx config:\r\n\r\n```\r\nserver {\r\n  server_name exmple.com; \r\n  listen 443 ssl; \r\n\r\n  location / {\r\n    client_max_body_size 0;\r\n    gzip off;\r\n\r\n    proxy_http_version 1.1;\r\n\r\n    proxy_set_header    Host                $http_host;\r\n    proxy_set_header    X-Real-IP           $remote_addr;\r\n    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;\r\n    proxy_set_header    X-Forwarded-Proto   $scheme;\r\n\r\n    proxy_pass http://localhost:5000;\r\n  }\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/184", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/184/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/184/events", "html_url": "https://github.com/lepture/authlib/issues/184", "id": 556476541, "node_id": "MDU6SXNzdWU1NTY0NzY1NDE=", "number": 184, "title": "Flask JWT validation decorator", "user": {"login": "ctaggart", "id": 80104, "node_id": "MDQ6VXNlcjgwMTA0", "avatar_url": "https://avatars2.githubusercontent.com/u/80104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ctaggart", "html_url": "https://github.com/ctaggart", "followers_url": "https://api.github.com/users/ctaggart/followers", "following_url": "https://api.github.com/users/ctaggart/following{/other_user}", "gists_url": "https://api.github.com/users/ctaggart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ctaggart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ctaggart/subscriptions", "organizations_url": "https://api.github.com/users/ctaggart/orgs", "repos_url": "https://api.github.com/users/ctaggart/repos", "events_url": "https://api.github.com/users/ctaggart/events{/privacy}", "received_events_url": "https://api.github.com/users/ctaggart/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510052, "node_id": "MDU6TGFiZWw3MzI1MTAwNTI=", "url": "https://api.github.com/repos/lepture/authlib/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-28T21:22:51Z", "updated_at": "2020-02-11T07:53:52Z", "closed_at": "2020-02-11T07:53:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nWe have several Flask API apps that need to be secured [similar to this](https://auth0.com/docs/quickstart/backend/python/01-authorization#create-the-jwt-validation-decorator). OAuth 2.0 [client credentials ](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow#get-a-token) will be used, so just the authentication headers needs to be validated.\r\n\r\n**Describe the solution you'd like**\r\n\r\nA reusable Flask [JWT validation decorator](https://auth0.com/docs/quickstart/backend/python/01-authorization#create-the-jwt-validation-decorator) from Authlib sounds pretty ideal.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nhttps://github.com/auth0-samples/auth0-python-api-samples/blob/master/00-Starter-Seed/server.py\r\n\r\n**Additional context**\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/182", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/182/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/182/events", "html_url": "https://github.com/lepture/authlib/issues/182", "id": 554382303, "node_id": "MDU6SXNzdWU1NTQzODIzMDM=", "number": 182, "title": "OIDC refresh token", "user": {"login": "leogout", "id": 9843962, "node_id": "MDQ6VXNlcjk4NDM5NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/9843962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leogout", "html_url": "https://github.com/leogout", "followers_url": "https://api.github.com/users/leogout/followers", "following_url": "https://api.github.com/users/leogout/following{/other_user}", "gists_url": "https://api.github.com/users/leogout/gists{/gist_id}", "starred_url": "https://api.github.com/users/leogout/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leogout/subscriptions", "organizations_url": "https://api.github.com/users/leogout/orgs", "repos_url": "https://api.github.com/users/leogout/repos", "events_url": "https://api.github.com/users/leogout/events{/privacy}", "received_events_url": "https://api.github.com/users/leogout/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510049, "node_id": "MDU6TGFiZWw3MzI1MTAwNDk=", "url": "https://api.github.com/repos/lepture/authlib/labels/feature%20request", "name": "feature request", "color": "7057ff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-23T20:14:59Z", "updated_at": "2020-02-25T01:51:43Z", "closed_at": "2020-02-25T01:51:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello, following [this question](https://stackoverflow.com/questions/59855736/authlib-openid-connect-refresh-token) on SO, I was wondering if there is already a way to get a JWT from a refresh token exchange. For now, even when I specify the scope to be openid, I only get an id_token once and it's on the creation of the token. The refresh token exchange leaves me with a \"classical\" token, and no id_token is joined. \r\nRegarding the OIDC specification ([this part](https://openid.net/specs/openid-connect-core-1_0.html#RefreshTokenResponse)) I would like to know if there is a way to get a new id_token on refresh.\r\nI can look into implementing it if you would like.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/180", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/180/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/180/events", "html_url": "https://github.com/lepture/authlib/issues/180", "id": 549694263, "node_id": "MDU6SXNzdWU1NDk2OTQyNjM=", "number": 180, "title": "0.13 throws away oidc nonce provided by the application", "user": {"login": "ThiefMaster", "id": 179599, "node_id": "MDQ6VXNlcjE3OTU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThiefMaster", "html_url": "https://github.com/ThiefMaster", "followers_url": "https://api.github.com/users/ThiefMaster/followers", "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}", "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions", "organizations_url": "https://api.github.com/users/ThiefMaster/orgs", "repos_url": "https://api.github.com/users/ThiefMaster/repos", "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}", "received_events_url": "https://api.github.com/users/ThiefMaster/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-01-14T16:53:38Z", "updated_at": "2020-02-11T14:14:56Z", "closed_at": "2020-02-11T14:14:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "See this snippet here:\r\n\r\nhttps://github.com/lepture/authlib/blob/3834a2a80876a87cdaab4240d77185179970c3ab/authlib/integrations/_client/base_app.py#L189-L193\r\n\r\nThis is called from `RemoteApp.create_authorization_url` which is called by `RemoteApp.authorize_redirect` which is called by my application (I'm not using the registry).\r\n\r\nSo if I pass my own nonce (which I'm storing in the session myself) it gets overwritten, so when I try to parse the id token later it fails of course. I fixed it in my app [like this](https://github.com/indico/flask-multipass/commit/a1b1c66b005cf7bd3004e95f233b61f5a48304e1#diff-93b271e053133ae8d825183d84694e5aR126-R127) but it feels extremely ugly.\r\n\r\nSo it would be nice if:\r\n\r\n- no new nonce was generated if the caller already provided one\r\n- there was an api to access the session data without popping it and without using internal apis (`_get_session_data`); using `retrieve_access_token_params` just to get the nonce would be pretty inappropriate since it does much more\r\n- there was a proper OIDC client built-in in addition to the standard OAuth2 client ;)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/179", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/179/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/179/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/179/events", "html_url": "https://github.com/lepture/authlib/issues/179", "id": 547174117, "node_id": "MDU6SXNzdWU1NDcxNzQxMTc=", "number": 179, "title": "JWT validation of exp claim doesn't work if exp is 0", "user": {"login": "mivade", "id": 2805515, "node_id": "MDQ6VXNlcjI4MDU1MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2805515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mivade", "html_url": "https://github.com/mivade", "followers_url": "https://api.github.com/users/mivade/followers", "following_url": "https://api.github.com/users/mivade/following{/other_user}", "gists_url": "https://api.github.com/users/mivade/gists{/gist_id}", "starred_url": "https://api.github.com/users/mivade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mivade/subscriptions", "organizations_url": "https://api.github.com/users/mivade/orgs", "repos_url": "https://api.github.com/users/mivade/repos", "events_url": "https://api.github.com/users/mivade/events{/privacy}", "received_events_url": "https://api.github.com/users/mivade/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-01-09T00:09:51Z", "updated_at": "2020-02-11T10:59:09Z", "closed_at": "2020-02-11T10:59:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nValidation fails when the `exp` claim is 0.\r\n\r\n**To Reproduce**\r\n\r\nA minimal example to reproduce the behavior:\r\n\r\n```\r\n>>> from authlib.jose import JWTClaims\r\n>>> claims = JWTClaims({\"exp\": 0}, {\"alg\": \"HS256\"})\r\n>>> claims.validate()\r\n>>> \r\n```\r\n\r\n**Expected behavior**\r\n\r\nWhat we should see is what we see with a positive value:\r\n\r\n```\r\n>>> claims = JWTClaims({\"exp\": 1}, {\"alg\": \"HS256\"})\r\n>>> claims.validate()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/.../python3.7/site-packages/authlib/jose/rfc7519/claims.py\", line 98, in validate\r\n    self.validate_exp(now, leeway)\r\n  File \"/.../python3.7/site-packages/authlib/jose/rfc7519/claims.py\", line 171, in validate_exp\r\n    raise ExpiredTokenError()\r\nauthlib.jose.errors.ExpiredTokenError: expired_token: The token is expired\r\n```\r\n\r\n**Environment:**\r\n\r\n - OS: macOS\r\n - Python Version: 3.7.5\r\n - Authlib Version: 0.13\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/178", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/178/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/178/events", "html_url": "https://github.com/lepture/authlib/issues/178", "id": 545251785, "node_id": "MDU6SXNzdWU1NDUyNTE3ODU=", "number": 178, "title": "broken with httpx 0.10", "user": {"login": "kesavkolla", "id": 274645, "node_id": "MDQ6VXNlcjI3NDY0NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/274645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kesavkolla", "html_url": "https://github.com/kesavkolla", "followers_url": "https://api.github.com/users/kesavkolla/followers", "following_url": "https://api.github.com/users/kesavkolla/following{/other_user}", "gists_url": "https://api.github.com/users/kesavkolla/gists{/gist_id}", "starred_url": "https://api.github.com/users/kesavkolla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kesavkolla/subscriptions", "organizations_url": "https://api.github.com/users/kesavkolla/orgs", "repos_url": "https://api.github.com/users/kesavkolla/repos", "events_url": "https://api.github.com/users/kesavkolla/events{/privacy}", "received_events_url": "https://api.github.com/users/kesavkolla/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2020-01-04T07:08:41Z", "updated_at": "2020-02-11T10:59:21Z", "closed_at": "2020-02-11T10:59:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nauthlib uses old classes of httpx.  New version of httpx 0.10 removed `AsyncRequest` `AsyncResponse` and also there's no middleware.\r\n\r\n\r\n**Environment:**\r\n\r\n - OS: Linux\r\n - Python Version: 3.7\r\n - Authlib Version: 0.13\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/177", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/177/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/177/events", "html_url": "https://github.com/lepture/authlib/issues/177", "id": 544893485, "node_id": "MDU6SXNzdWU1NDQ4OTM0ODU=", "number": 177, "title": "estimated 0.14 release date", "user": {"login": "dmartin35", "id": 13771411, "node_id": "MDQ6VXNlcjEzNzcxNDEx", "avatar_url": "https://avatars2.githubusercontent.com/u/13771411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmartin35", "html_url": "https://github.com/dmartin35", "followers_url": "https://api.github.com/users/dmartin35/followers", "following_url": "https://api.github.com/users/dmartin35/following{/other_user}", "gists_url": "https://api.github.com/users/dmartin35/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmartin35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmartin35/subscriptions", "organizations_url": "https://api.github.com/users/dmartin35/orgs", "repos_url": "https://api.github.com/users/dmartin35/repos", "events_url": "https://api.github.com/users/dmartin35/events{/privacy}", "received_events_url": "https://api.github.com/users/dmartin35/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-03T08:12:37Z", "updated_at": "2020-01-06T14:18:06Z", "closed_at": "2020-01-06T14:18:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure this is the right place for asking this...\r\n\r\nDo you have estimated release date for the version 0.14 ?\r\nthanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/176", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/176/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/176/events", "html_url": "https://github.com/lepture/authlib/issues/176", "id": 543813796, "node_id": "MDU6SXNzdWU1NDM4MTM3OTY=", "number": 176, "title": "Decoding a JWS token with ES256 doesn't work", "user": {"login": "fenix01", "id": 5822286, "node_id": "MDQ6VXNlcjU4MjIyODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/5822286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fenix01", "html_url": "https://github.com/fenix01", "followers_url": "https://api.github.com/users/fenix01/followers", "following_url": "https://api.github.com/users/fenix01/following{/other_user}", "gists_url": "https://api.github.com/users/fenix01/gists{/gist_id}", "starred_url": "https://api.github.com/users/fenix01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fenix01/subscriptions", "organizations_url": "https://api.github.com/users/fenix01/orgs", "repos_url": "https://api.github.com/users/fenix01/repos", "events_url": "https://api.github.com/users/fenix01/events{/privacy}", "received_events_url": "https://api.github.com/users/fenix01/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2019-12-30T09:39:09Z", "updated_at": "2020-02-11T11:00:10Z", "closed_at": "2020-02-11T11:00:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nHi!\r\nI'm trying to implement an OAuth2 server with authlib and I found a bug in the library with ES256. I was trying to decode a JWS token signed with ES256 but the library has raised an exception.\r\nThe generation of a JWT with ES256 works, but not the decoding.\r\n\r\nHere it's the small piece of code that raises an exception :\r\n\r\n```\r\ndef gen_refresh_token(self, client, grant_type, user, scope):\r\n        jws = JsonWebSignature(algorithms=JWS_ALGORITHMS)\r\n        header = {'alg': 'ES256'}\r\n        date = datetime.utcnow()\r\n        payload = {\r\n            'client_id': client.get_client_id(),\r\n            'iat': int(date.timestamp()),\r\n            'user_id': user[\"id\"],\r\n            'scope': scope,\r\n            'exp': 604800\r\n        }\r\n        try:\r\n            key = open(\"my_ec_key.pem\", 'r').read()\r\n            s = jws.serialize_compact(header, json.dumps(payload), key)\r\n        except Exception as e:\r\n            logger.exception('JWS exception', e)\r\n        return s.decode(\"utf-8\")\r\n...\r\n\r\nclass RefreshTokenGrant(grants.RefreshTokenGrant):\r\n    INCLUDE_NEW_REFRESH_TOKEN = True\r\n\r\n    def authenticate_refresh_token(self, refresh_token):\r\n        jws = JsonWebSignature(algorithms=JWS_ALGORITHMS)\r\n        try:\r\n            key = open(\"my_ec_pub.pem\", 'r').read()\r\n            jws_obj = jws.deserialize_compact(refresh_token, key)\r\n            ...\r\n        except Exception as e:\r\n            logger.exception('JWS exception', e)\r\n```\r\n\r\nAnd the traceback :\r\n```\r\nTraceback (most recent call last):\r\n  File \"/mnt/d/documents/exo1/src/exo1/rest/flask/oauth2.py\", line 64, in authenticate_refresh_token\r\n    jws_obj = jws.deserialize_compact(refresh_token, key)\r\n  File \"/home/yohann/.local/lib/python3.6/site-packages/authlib/jose/rfc7515/jws.py\", line 115, in deserialize_compact\r\n    self._algorithms, jws_header, payload, key)\r\n  File \"/home/yohann/.local/lib/python3.6/site-packages/authlib/jose/util.py\", line 14, in prepare_algorithm_key\r\n    key = algorithm.prepare_public_key(key)\r\n  File \"/home/yohann/.local/lib/python3.6/site-packages/authlib/jose/rfc7518/_backends/_key_cryptography.py\", line 42, in prepare_public_key\r\n    if key.startswith(b'ecdsa-sha2-'):\r\nTypeError: startswith first arg must be str or a tuple of str, not bytes\r\n```\r\n\r\n**To Reproduce**\r\n\r\nI put a small example of the code above.\r\n\r\n**Expected behavior**\r\n\r\nI should get the content of the token.\r\n\r\n**Environment:**\r\n\r\n - OS: Windows Subsystem for Linux\r\n - Python Version: 3.6.8\r\n - Authlib Version: 0.13.0\r\n\r\n**Additional context**\r\n\r\nI found a patch for my use case. You have to edit the file in :\r\nauthlib/jose/rfc7518/_backends/_key_cryptography.py\r\n\r\nIn the class ECKey, the method prepare_public_key doesn't convert the key to bytes. I did the following patch :\r\n\r\n```\r\ndef prepare_public_key(self, key):\r\n        if isinstance(key, EllipticCurvePublicKey):\r\n            return key\r\n        key = to_bytes(key)\r\n        if key.startswith(b'ecdsa-sha2-'):\r\n            return load_ssh_public_key(key, backend=default_backend())\r\n        else:\r\n            return load_pem_public_key(key, backend=default_backend())\r\n```\r\n\r\nAdd any other context about the problem here.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/175", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/175/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/175/events", "html_url": "https://github.com/lepture/authlib/issues/175", "id": 541892845, "node_id": "MDU6SXNzdWU1NDE4OTI4NDU=", "number": 175, "title": "Authlib does not correctly work with httpx middleware", "user": {"login": "kkinder", "id": 1115018, "node_id": "MDQ6VXNlcjExMTUwMTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1115018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kkinder", "html_url": "https://github.com/kkinder", "followers_url": "https://api.github.com/users/kkinder/followers", "following_url": "https://api.github.com/users/kkinder/following{/other_user}", "gists_url": "https://api.github.com/users/kkinder/gists{/gist_id}", "starred_url": "https://api.github.com/users/kkinder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kkinder/subscriptions", "organizations_url": "https://api.github.com/users/kkinder/orgs", "repos_url": "https://api.github.com/users/kkinder/repos", "events_url": "https://api.github.com/users/kkinder/events{/privacy}", "received_events_url": "https://api.github.com/users/kkinder/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-12-23T20:26:46Z", "updated_at": "2020-02-11T10:59:42Z", "closed_at": "2020-02-11T10:59:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nA clear and concise description of what the bug is.\r\n\r\n**Error Stacks**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 385, in run_asgi\r\n    result = await app(self.scope, self.receive, self.send)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/uvicorn/middleware/proxy_headers.py\", line 45, in __call__\r\n    return await self.app(scope, receive, send)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/fastapi/applications.py\", line 140, in __call__\r\n    await super().__call__(scope, receive, send)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/starlette/applications.py\", line 134, in __call__\r\n    await self.error_middleware(scope, receive, send)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 178, in __call__\r\n    raise exc from None\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 156, in __call__\r\n    await self.app(scope, receive, _send)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/starlette/middleware/sessions.py\", line 75, in __call__\r\n    await self.app(scope, receive, send_wrapper)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/starlette/exceptions.py\", line 73, in __call__\r\n    raise exc from None\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/starlette/exceptions.py\", line 62, in __call__\r\n    await self.app(scope, receive, sender)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/starlette/routing.py\", line 590, in __call__\r\n    await route(scope, receive, send)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/starlette/routing.py\", line 208, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/starlette/routing.py\", line 41, in app\r\n    response = await func(request)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/fastapi/routing.py\", line 127, in app\r\n    raw_response = await dependant.call(**values)\r\n  File \"./proj/apps/auth/api.py\", line 77, in callback_oauth\r\n    token = await current_oauth.authorize_access_token(request, redirect_uri=redirect_uri)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/src/authlib/authlib/integrations/starlette_client/remote_app.py\", line 39, in authorize_access_token\r\n    return await self.fetch_access_token(**params)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/src/authlib/authlib/integrations/asgi_client/base_app.py\", line 104, in fetch_access_token\r\n    token = await client.fetch_token(token_endpoint, **kwargs)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/src/authlib/authlib/integrations/httpx_client/oauth2_client.py\", line 105, in _fetch_token\r\n    resp = await self.post(\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/httpx/client.py\", line 772, in post\r\n    return await self.request(\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/src/authlib/authlib/integrations/httpx_client/oauth2_client.py\", line 86, in request\r\n    return await super(AsyncOAuth2Client, self).request(\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/httpx/client.py\", line 259, in request\r\n    response = await self.send(\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/httpx/client.py\", line 403, in send\r\n    response = await self.send_handling_redirects(\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/httpx/client.py\", line 465, in send_handling_redirects\r\n    response = await self.send_handling_auth(\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/httpx/client.py\", line 589, in send_handling_auth\r\n    request = next(auth_flow)\r\n  File \"/home/ken/.local/share/virtualenvs/testproj-lMPjJ55e/lib/python3.8/site-packages/httpx/auth.py\", line 62, in __call__\r\n    yield self.func(request)\r\nTypeError: __call__() missing 1 required positional argument: 'get_response'\r\n```\r\n\r\n**To Reproduce**\r\n\r\n1. Install Starlette/FastAPI\r\n2. Use the current github version of authlib\r\n3. Attempt to call authorize_access_token()\r\n\r\n**Expected behavior**\r\n\r\nIt should work.\r\n\r\n**Environment:**\r\n\r\n - OS: Ubuntu 18.04\r\n - Python Version: 3.8\r\n - Authlib Version: Current master branch\r\n\r\n**Additional context**\r\n\r\nWhy this is happening is pretty obvious when you look at the code. Here's what httpx is doing:\r\n\r\n```\r\nclass FunctionAuth(Auth):\r\n    \"\"\"\r\n    Allows the 'auth' argument to be passed as a simple callable function,\r\n    that takes the request, and returns a new, modified request.\r\n    \"\"\"\r\n\r\n    def __init__(self, func: typing.Callable[[Request], Request]) -> None:\r\n        self.func = func\r\n\r\n    def __call__(self, request: Request) -> AuthFlow:\r\n        yield self.func(request)\r\n```\r\n\r\nNotice it's calling self.func(request).\r\n\r\nHere's the class it's calling __call__ on:\r\n\r\n```\r\nclass OAuth2ClientAuth(Middleware, ClientAuth):\r\n    async def __call__(\r\n        self, request: Request, get_response: typing.Callable\r\n    ) -> Response:\r\n        return await auth_call(self, request, get_response)\r\n```\r\n\r\nget_response is not passed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/173", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/173/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/173/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/173/events", "html_url": "https://github.com/lepture/authlib/issues/173", "id": 530614859, "node_id": "MDU6SXNzdWU1MzA2MTQ4NTk=", "number": 173, "title": "Startlette client no longer works with httpx 0.8.0", "user": {"login": "jorgecarleitao", "id": 2772607, "node_id": "MDQ6VXNlcjI3NzI2MDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2772607?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jorgecarleitao", "html_url": "https://github.com/jorgecarleitao", "followers_url": "https://api.github.com/users/jorgecarleitao/followers", "following_url": "https://api.github.com/users/jorgecarleitao/following{/other_user}", "gists_url": "https://api.github.com/users/jorgecarleitao/gists{/gist_id}", "starred_url": "https://api.github.com/users/jorgecarleitao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jorgecarleitao/subscriptions", "organizations_url": "https://api.github.com/users/jorgecarleitao/orgs", "repos_url": "https://api.github.com/users/jorgecarleitao/repos", "events_url": "https://api.github.com/users/jorgecarleitao/events{/privacy}", "received_events_url": "https://api.github.com/users/jorgecarleitao/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-11-30T18:31:46Z", "updated_at": "2019-12-01T09:51:11Z", "closed_at": "2019-12-01T01:47:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nWith httpx==0.7.8, the example https://github.com/authlib/demo-oauth-client/tree/master/starlette-google-login runs as is. However, with httpx==0.8.0, it does not.\r\n\r\n**Error Stacks**\r\n\r\n```\r\nImportError: cannot import name 'AsyncClient' from 'httpx' (/.../venv/lib/python3.7/site-packages/httpx/__init__.py)\r\n```\r\n\r\n**To Reproduce**\r\n\r\nRun the example code with the latest httpx, httpx==0.8.0.\r\n\r\n**Expected behavior**\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Environment:**\r\n\r\n - OS: MacOs\r\n - Python Version: 3.7\r\n - Authlib Version: 0.13\r\n\r\n**Additional context**\r\n\r\nAdd any other context about the problem here.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/171", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/171/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/171/events", "html_url": "https://github.com/lepture/authlib/issues/171", "id": 529522088, "node_id": "MDU6SXNzdWU1Mjk1MjIwODg=", "number": 171, "title": "Error for httpx.AsyncClient due to drop of sync support", "user": {"login": "rostikL", "id": 6274565, "node_id": "MDQ6VXNlcjYyNzQ1NjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6274565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rostikL", "html_url": "https://github.com/rostikL", "followers_url": "https://api.github.com/users/rostikL/followers", "following_url": "https://api.github.com/users/rostikL/following{/other_user}", "gists_url": "https://api.github.com/users/rostikL/gists{/gist_id}", "starred_url": "https://api.github.com/users/rostikL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rostikL/subscriptions", "organizations_url": "https://api.github.com/users/rostikL/orgs", "repos_url": "https://api.github.com/users/rostikL/repos", "events_url": "https://api.github.com/users/rostikL/events{/privacy}", "received_events_url": "https://api.github.com/users/rostikL/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-11-27T18:56:00Z", "updated_at": "2019-12-06T08:39:38Z", "closed_at": "2019-12-06T08:39:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nIn the `0.8.0` release of httpx the sync support was dropped and some classes have been removed:\r\n`AsyncClient, AsyncRequest, AsyncResponse` and moved to `Client, Request, Response`. Here some more information: [Commit](https://github.com/encode/httpx/commit/00e150f6a5f8d295faeadc34cfe53de254b3f264) / [Discussion](https://github.com/encode/httpx/issues/522)\r\n\r\nI tried using the starlette_client and came across the error below.\r\nUsing authlib with httpx==0.7.8 works. \r\n\r\nI also made some changes here:  \r\n- https://github.com/rostikL/authlib/commit/74d89654a048f75d1e92ef957318dd333f90877a\r\nThis works with the starlette_client, but I am not sure what effect it has on other integrations.\r\n\r\nAnyway, wanted to share in case someone has the same error. \r\n\r\n**Error Stacks**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/usr/local/lib/python3.7/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/data/api/app/__main__.py\", line 1, in <module>\r\n    from api.app.main import main\r\n  File \"/data/api/app/main.py\", line 11, in <module>\r\n    from api.app.starlette_app import app as starlette_app\r\n  File \"/data/api/app/starlette_app.py\", line 8, in <module>\r\n    from api.rest.v1.routers import api_v1_router\r\n  File \"/data/api/rest/v1/routers.py\", line 8, in <module>\r\n    from api.rest.v1.oauth import oauth\r\n  File \"/data/api/rest/v1/oauth/oauth.py\", line 4, in <module>\r\n    from authlib.integrations.starlette_client import OAuth\r\n  File \"/usr/local/lib/python3.7/site-packages/authlib/integrations/starlette_client/__init__.py\", line 3, in <module>\r\n    from .oauth_registry import OAuth as OAuth\r\n  File \"/usr/local/lib/python3.7/site-packages/authlib/integrations/starlette_client/oauth_registry.py\", line 1, in <module>\r\n    from .remote_app import RemoteApp\r\n  File \"/usr/local/lib/python3.7/site-packages/authlib/integrations/starlette_client/remote_app.py\", line 2, in <module>\r\n    from ..asgi_client import AsyncBaseApp\r\n  File \"/usr/local/lib/python3.7/site-packages/authlib/integrations/asgi_client/__init__.py\", line 1, in <module>\r\n    from .oauth_registry import OAuth\r\n  File \"/usr/local/lib/python3.7/site-packages/authlib/integrations/asgi_client/oauth_registry.py\", line 2, in <module>\r\n    from ..httpx_client import AsyncOAuth1Client, AsyncOAuth2Client\r\n  File \"/usr/local/lib/python3.7/site-packages/authlib/integrations/httpx_client/__init__.py\", line 9, in <module>\r\n    from .oauth1_client import OAuth1Auth, OAuth1Client, AsyncOAuth1Client\r\n  File \"/usr/local/lib/python3.7/site-packages/authlib/integrations/httpx_client/oauth1_client.py\", line 2, in <module>\r\n    from httpx import Client, AsyncClient\r\nImportError: cannot import name 'AsyncClient' from 'httpx' (/usr/local/lib/python3.7/site-packages/httpx/__init__.py)\r\n```\r\n\r\n**To Reproduce**\r\n\r\nExecute:\r\nhttps://github.com/authlib/demo-oauth-client/tree/master/starlette-google-login\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/169", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/169/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/169/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/169/events", "html_url": "https://github.com/lepture/authlib/issues/169", "id": 524019801, "node_id": "MDU6SXNzdWU1MjQwMTk4MDE=", "number": 169, "title": "v0.13, django client: lazy-loading server metadata breaks logout flows", "user": {"login": "kurtgn", "id": 7825762, "node_id": "MDQ6VXNlcjc4MjU3NjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/7825762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kurtgn", "html_url": "https://github.com/kurtgn", "followers_url": "https://api.github.com/users/kurtgn/followers", "following_url": "https://api.github.com/users/kurtgn/following{/other_user}", "gists_url": "https://api.github.com/users/kurtgn/gists{/gist_id}", "starred_url": "https://api.github.com/users/kurtgn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kurtgn/subscriptions", "organizations_url": "https://api.github.com/users/kurtgn/orgs", "repos_url": "https://api.github.com/users/kurtgn/repos", "events_url": "https://api.github.com/users/kurtgn/events{/privacy}", "received_events_url": "https://api.github.com/users/kurtgn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}, {"id": 799561986, "node_id": "MDU6TGFiZWw3OTk1NjE5ODY=", "url": "https://api.github.com/repos/lepture/authlib/labels/documentation", "name": "documentation", "color": "c5def5", "default": true, "description": null}, {"id": 732510048, "node_id": "MDU6TGFiZWw3MzI1MTAwNDg=", "url": "https://api.github.com/repos/lepture/authlib/labels/good%20first%20issue", "name": "good first issue", "color": "1d76db", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-11-17T17:53:57Z", "updated_at": "2020-02-11T14:06:38Z", "closed_at": "2020-02-11T14:06:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nVersion 0.13 intoduces lazy loading of server metadata on first auth request, but this breaks logout flows for some OIDC providers (in my case, Keycloak).\r\n\r\nConsider this logout view (django):\r\n```\r\ndef logout(request):\r\n    \"\"\" log user out of django and redirect to the Keycloak logout url, so that he gets logged out everywhere  \"\"\"\r\n    log_out(request)\r\n    return_to = urlencode({'redirect_uri': request.build_absolute_uri('/')})\r\n    logout_url = oauth.keycloak.server_metadata['end_session_endpoint']\r\n    logout_url += '?' + return_to\r\n    return HttpResponseRedirect(logout_url)\r\n```\r\n\r\nThis logic counts on `server_metadata['end_session_endpoint']` being available (this is a special Keycloak feature). \r\nHowever, when the django app restarts, `server metadata` is empty until someone performs a login flow. Until that, all logout flows will end up with an error.\r\n\r\n**Error Stacks**\r\n\r\n```\r\nInternal Server Error: /logout\r\nTraceback (most recent call last):\r\n  File \"/Users/1111/Library/Caches/pypoetry/virtualenvs/demo-keycloak-client-py3.7/lib/python3.7/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/Users/1111/Library/Caches/pypoetry/virtualenvs/demo-keycloak-client-py3.7/lib/python3.7/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/Users/1111/Library/Caches/pypoetry/virtualenvs/demo-keycloak-client-py3.7/lib/python3.7/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/Users/1111/_projects/fasttrack/demo_keycloak_client/auth0login/views.py\", line 28, in logout\r\n    logout_url = oauth.keycloak.server_metadata['end_session_endpoint']\r\nKeyError: 'end_session_endpoint'\r\n```\r\n\r\n**To Reproduce**\r\n\r\nInstantiate the client like so:\r\n\r\n```\r\nfrom authlib.integrations.django_client import OAuth\r\n\r\noauth = OAuth()\r\n\r\noauth.register(\r\n    'keycloak',\r\n    server_metadata_url='https://sso.fstrk.io/auth/realms/fasttrack/.well-known/openid-configuration',\r\n    client_kwargs={'scope': 'openid profile email'}\r\n)\r\n\r\nassert oauth.keycloak.server_metadata['end_session_endpoint']\r\n```\r\n\r\n\r\n**Suggestions**\r\nCurrently I am force-loading the metadata on Django startup:\r\n\r\n```\r\noauth.keycloak._load_server_metadata()\r\n```\r\nSince `end_session_endpoint` is Keycloak-specific and the library cannot be extented to provide a `deauthorize_redirect()` method, my suggestion is make `load_server_metadata()` public and document it.\r\n\r\nThanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/168", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/168/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/168/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/168/events", "html_url": "https://github.com/lepture/authlib/issues/168", "id": 523731796, "node_id": "MDU6SXNzdWU1MjM3MzE3OTY=", "number": 168, "title": "Support for prepared requests", "user": {"login": "galak75", "id": 2177369, "node_id": "MDQ6VXNlcjIxNzczNjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/2177369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/galak75", "html_url": "https://github.com/galak75", "followers_url": "https://api.github.com/users/galak75/followers", "following_url": "https://api.github.com/users/galak75/following{/other_user}", "gists_url": "https://api.github.com/users/galak75/gists{/gist_id}", "starred_url": "https://api.github.com/users/galak75/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/galak75/subscriptions", "organizations_url": "https://api.github.com/users/galak75/orgs", "repos_url": "https://api.github.com/users/galak75/repos", "events_url": "https://api.github.com/users/galak75/events{/privacy}", "received_events_url": "https://api.github.com/users/galak75/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-15T22:53:25Z", "updated_at": "2020-05-23T05:37:33Z", "closed_at": "2020-05-23T05:37:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nI would like to fire [prepared requests](https://requests.kennethreitz.org/en/master/user/advanced/#prepared-requests) using an `OAuth2Session`, but I currently have to inject an access_token myself; here is an example using the openId connect password flow:\r\n\r\n```python\r\nrequests = [requests.Request('GET', 'https://example.org/api/item', params={'id': i}) for i in range(10)]\r\n\r\nwith OAuth2Session(client_id='my-client-id', client_secret='my-client-secret', scope=['openid', 'email']) as session:\r\n    session.fetch_token(url='https://example.org/token', username='my-user', password='my-pass')\r\n\r\n    for req in requests:\r\n        session.send(session.prepare_request(req))\r\n```\r\nRequests sent to the API fail with a 401 response status, unless I inject the `session.token_auth` into each request (even if the session itself is responsible for preparing and sending these requests)\r\n\r\n**Describe the solution you'd like**\r\n\r\n`OAuth2Session` could overrive `requests.Session.prepare_request` method, and inject access token. I experimented 2 different working solutions, but I do not know which one is preferable:\r\n\r\nsolution 1:\r\n```python\r\nclass OAuth2Session(OAuth2Client, Session):\r\n\r\n    # ...\r\n\r\n    def prepare_request(self, request):\r\n        # Solution 1 : set auth to request before preparing it\r\n        if self.token and request.auth is None:\r\n            request.auth = self.token_auth\r\n        return super(OAuth2Session, self).prepare_request(request)\r\n```\r\n\r\nsolution 2:\r\n```python\r\nclass OAuth2Session(OAuth2Client, Session):\r\n\r\n    # ...\r\n\r\n    def prepare_request(self, request):\r\n        prepared_request = super(OAuth2Session, self).prepare_request(request)\r\n        # Solution 2 : prepare_auth on prepared_request when a token is there\r\n        if self.token:\r\n            prepared_request.prepare_auth(self.token_auth)\r\n        return prepared_request\r\n```\r\n\r\n**Ready to contribute**\r\n\r\nLet me know if this additional feature looks reasonable to you, I'll submit a PR\r\n\r\nThank you\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/167", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/167/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/167/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/167/events", "html_url": "https://github.com/lepture/authlib/issues/167", "id": 522723411, "node_id": "MDU6SXNzdWU1MjI3MjM0MTE=", "number": 167, "title": "Make framework integration easier", "user": {"login": "dwt", "id": 57199, "node_id": "MDQ6VXNlcjU3MTk5", "avatar_url": "https://avatars1.githubusercontent.com/u/57199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwt", "html_url": "https://github.com/dwt", "followers_url": "https://api.github.com/users/dwt/followers", "following_url": "https://api.github.com/users/dwt/following{/other_user}", "gists_url": "https://api.github.com/users/dwt/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwt/subscriptions", "organizations_url": "https://api.github.com/users/dwt/orgs", "repos_url": "https://api.github.com/users/dwt/repos", "events_url": "https://api.github.com/users/dwt/events{/privacy}", "received_events_url": "https://api.github.com/users/dwt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-14T09:17:57Z", "updated_at": "2020-02-11T14:21:16Z", "closed_at": "2020-02-11T14:16:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nI'm currently building framework integration for Zope (and will build Pyramid next). What's frustrating me is that the integration layer with these frameworks only very loosely specifies what is required of these frameworks to actually interoperate with Authlib.\r\n\r\n**Describe the solution you'd like**\r\n\r\nI've started the Zope layer from a refactoring of the flask layer, to get started, and in the process pulled out an `FramworkIntegration` object, that only has the job to describe what authlib needs from the framework. That way it is much simpler to know what has to be implemented to make things work, without having to understand so much about how authlib works. Have a look at it here. https://github.com/zms-publishing/zope.openid-connect/tree/master/zope/openid_connect/authlib_integration\r\n\r\nOf course it is still very rough, but the Idea here is to have a delegate object, that subclasses the Framework-Integration Interface, that has methods to access session and cache values and documents what kind of requirements these sessions / caches have to be viable (i.e. these values can not be user visible, but these can...). Also how to get at form or query arguments from a request, etc.\r\n\r\nThere will maybe be different interfaces to support sync and async operation, and probably some optional methods to support stuff like Flasks partially configured state (app factory pattern). See the repo for some rough sketches.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nI've tried to adapt the code from the flask example directly and found it very hard as I had to understand quite a bit about authlib to make that happen. Maybe now I do, but having a simple delegate object that just encapsulates how the specific framework accomplishes things was in the end much more viable.\r\n\r\n**Additional context**\r\n\r\nI'd like to add, that having such a delegate pattern, should also make unit testing much simpler, as it is quite easy to fake such an interface without having to bring up / in the actual frameworks.\r\n\r\nWhat I'm currently having is a simple delegate object, but this could also become a factory and holder of the Authlib objects, allowing it to make callbacks - not sure what is the best way here yet.\r\n\r\nAlso, this is very much still a work in progress, but I wanted to a) get feedback and b) see how you react, and if maybe that is something that can be extracted into a project in the authlib organisation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/166", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/166/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/166/events", "html_url": "https://github.com/lepture/authlib/issues/166", "id": 522076181, "node_id": "MDU6SXNzdWU1MjIwNzYxODE=", "number": 166, "title": "Scope value must start with `openid` to use OpenID Connect", "user": {"login": "namlh-teko", "id": 47663516, "node_id": "MDQ6VXNlcjQ3NjYzNTE2", "avatar_url": "https://avatars0.githubusercontent.com/u/47663516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/namlh-teko", "html_url": "https://github.com/namlh-teko", "followers_url": "https://api.github.com/users/namlh-teko/followers", "following_url": "https://api.github.com/users/namlh-teko/following{/other_user}", "gists_url": "https://api.github.com/users/namlh-teko/gists{/gist_id}", "starred_url": "https://api.github.com/users/namlh-teko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/namlh-teko/subscriptions", "organizations_url": "https://api.github.com/users/namlh-teko/orgs", "repos_url": "https://api.github.com/users/namlh-teko/repos", "events_url": "https://api.github.com/users/namlh-teko/events{/privacy}", "received_events_url": "https://api.github.com/users/namlh-teko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-11-13T09:39:13Z", "updated_at": "2019-11-15T02:55:10Z", "closed_at": "2019-11-15T02:55:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nIn OpenID Connect scenarios, if we call `/oauth/authorize` with scope which not start with `openid` (for example: `profile openid`), it will return BadRequest with message `invalid_scope: Missing \"openid\" scope`. \r\n\r\nIt's clear from this code:\r\nhttps://github.com/lepture/authlib/blob/master/authlib/oidc/core/grants/util.py#L17-L19\r\n\r\nFrom [OpenID Connect Core document](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), it is not imply the position of `openid` in `scope`.\r\n\r\nI'm just confused if it is your intention or not so I open an issue here. It's super easy to fix, though.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/165", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/165/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/165/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/165/events", "html_url": "https://github.com/lepture/authlib/issues/165", "id": 521670985, "node_id": "MDU6SXNzdWU1MjE2NzA5ODU=", "number": 165, "title": "create_s256_code_challenge shouldn't accept invalid code verifiers", "user": {"login": "flokli", "id": 183879, "node_id": "MDQ6VXNlcjE4Mzg3OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/183879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flokli", "html_url": "https://github.com/flokli", "followers_url": "https://api.github.com/users/flokli/followers", "following_url": "https://api.github.com/users/flokli/following{/other_user}", "gists_url": "https://api.github.com/users/flokli/gists{/gist_id}", "starred_url": "https://api.github.com/users/flokli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flokli/subscriptions", "organizations_url": "https://api.github.com/users/flokli/orgs", "repos_url": "https://api.github.com/users/flokli/repos", "events_url": "https://api.github.com/users/flokli/events{/privacy}", "received_events_url": "https://api.github.com/users/flokli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-11-12T16:50:31Z", "updated_at": "2019-11-13T23:45:58Z", "closed_at": "2019-11-13T23:45:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nRFC7636 describes the code challenge using the following ABNF:\r\n```\r\ncode-challenge = 43*128unreserved\r\nunreserved = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\r\nALPHA = %x41-5A / %x61-7A\r\nDIGIT = %x30-39\r\n```\r\n\r\nThis translates to the following regex:\r\n```\r\n[a-zA-Z0-9\\-\\.\\_\\~]{43,128}\r\n```\r\n\r\n`authlib` currently doesn't check if code challenges match the regex (but it should), and even docs and tests use invalid challenges.\r\n\r\nIMHO, `create_s256_code_challenge` should verify the `code_verifier` and raise an error if it doesn't match the regex - I don't assume it's a considerable performance penalty.\r\n\r\nWe might also want to provide a `create_code_verifier` convenience method, and use this consistently throughout docs and tests.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/162", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/162/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/162/events", "html_url": "https://github.com/lepture/authlib/issues/162", "id": 521443985, "node_id": "MDU6SXNzdWU1MjE0NDM5ODU=", "number": 162, "title": "Small typo in authlib/oauth2/client.py", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-11-12T09:56:00Z", "updated_at": "2019-11-12T11:00:00Z", "closed_at": "2019-11-12T11:00:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nShould read supported rather than supportted.\r\n\r\n**To Reproduce**\r\n\r\nObserve OAuth2Client docstring in authlib/oauth2/client.py\r\n\r\n**Expected behavior**\r\n\r\nShould read supported rather than supportted.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/160", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/160/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/160/events", "html_url": "https://github.com/lepture/authlib/issues/160", "id": 520326980, "node_id": "MDU6SXNzdWU1MjAzMjY5ODA=", "number": 160, "title": "Importing from authlib.jose when used with falcon causes Gunicorn to get stuck in boot loop under MacOS Catalina.", "user": {"login": "markandrewj", "id": 142597, "node_id": "MDQ6VXNlcjE0MjU5Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/142597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markandrewj", "html_url": "https://github.com/markandrewj", "followers_url": "https://api.github.com/users/markandrewj/followers", "following_url": "https://api.github.com/users/markandrewj/following{/other_user}", "gists_url": "https://api.github.com/users/markandrewj/gists{/gist_id}", "starred_url": "https://api.github.com/users/markandrewj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markandrewj/subscriptions", "organizations_url": "https://api.github.com/users/markandrewj/orgs", "repos_url": "https://api.github.com/users/markandrewj/repos", "events_url": "https://api.github.com/users/markandrewj/events{/privacy}", "received_events_url": "https://api.github.com/users/markandrewj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-11-09T03:48:18Z", "updated_at": "2019-11-20T20:48:46Z", "closed_at": "2019-11-09T03:56:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the bug**\r\n\r\nImporting from authlib.jose when used with falcon causes Gunicorn to get stuck in boot loop under MacOS Catalina. \r\n\r\n**Error Stacks**\r\n\r\n```\r\ngunicorn init:app\r\n[2019-11-08 20:37:38 -0700] [21033] [INFO] Starting gunicorn 19.9.0\r\n[2019-11-08 20:37:38 -0700] [21033] [INFO] Listening at: http://127.0.0.1:8000 (21033)\r\n[2019-11-08 20:37:38 -0700] [21033] [INFO] Using worker: sync\r\n[2019-11-08 20:37:38 -0700] [21036] [INFO] Booting worker with pid: 21036\r\n[2019-11-08 20:37:38 -0700] [21037] [INFO] Booting worker with pid: 21037\r\n[2019-11-08 20:37:38 -0700] [21038] [INFO] Booting worker with pid: 21038\r\n[2019-11-08 20:37:39 -0700] [21039] [INFO] Booting worker with pid: 21039\r\n[2019-11-08 20:37:39 -0700] [21042] [INFO] Booting worker with pid: 21042\r\n[2019-11-08 20:37:39 -0700] [21044] [INFO] Booting worker with pid: 21044\r\n[2019-11-08 20:37:39 -0700] [21045] [INFO] Booting worker with pid: 21045\r\n[2019-11-08 20:37:40 -0700] [21046] [INFO] Booting worker with pid: 21046\r\n[2019-11-08 20:37:40 -0700] [21047] [INFO] Booting worker with pid: 21047\r\n[2019-11-08 20:37:40 -0700] [21048] [INFO] Booting worker with pid: 21048\r\n[2019-11-08 20:37:41 -0700] [21049] [INFO] Booting worker with pid: 21049\r\n[2019-11-08 20:37:41 -0700] [21051] [INFO] Booting worker with pid: 21051\r\n[2019-11-08 20:37:41 -0700] [21052] [INFO] Booting worker with pid: 21052\r\n```\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# mkdir test && cd test\r\n# python3 --version\r\nPython 3.7.5\r\n# python3 -m venv .venv\r\n# source .venv/bin/activate\r\n# pip3 install Authlib falcon gunicorn\r\n# vim test.py\r\n```\r\n\r\n```\r\n# test.py\r\n\r\nimport falcon\r\nfrom authlib.jose import jwt\r\n\r\nclass ThingsResource(object):\r\n    def on_get(self, req, resp):\r\n        \"\"\"Handles GET requests\"\"\"\r\n        resp.status = falcon.HTTP_200  # This is the default status\r\n        resp.body = ('\\nTwo things awe me most, the starry sky '\r\n                     'above me and the moral law within me.\\n'\r\n                     '\\n'\r\n                     '    ~ Immanuel Kant\\n\\n')\r\n\r\n# falcon.API instances are callable WSGI apps\r\napp = falcon.API()\r\n\r\n# Resources are represented by long-lived class instances\r\nthings = ThingsResource()\r\n\r\n# things will handle all requests to the '/things' URL path\r\napp.add_route('/things', things)\r\n```\r\n\r\n```\r\ngunicorn test:app\r\n```\r\n\r\n**Expected behavior**\r\n\r\nServer to start properly.\r\n\r\n**Environment:**\r\n\r\n - OS: MacOS Catalina 10.15.1 \r\n - Python Version: 3.7.5\r\n - Authlib Version: 0.12.1\r\n\r\n**Additional context**\r\n\r\nI was able to use the jose module correctly before upgrading to Catalina. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/159", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/159/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/159/events", "html_url": "https://github.com/lepture/authlib/issues/159", "id": 518709005, "node_id": "MDU6SXNzdWU1MTg3MDkwMDU=", "number": 159, "title": "Documentation clarification on JWE implementation details for RFC 7516", "user": {"login": "josh-marshall-jax", "id": 52457971, "node_id": "MDQ6VXNlcjUyNDU3OTcx", "avatar_url": "https://avatars2.githubusercontent.com/u/52457971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josh-marshall-jax", "html_url": "https://github.com/josh-marshall-jax", "followers_url": "https://api.github.com/users/josh-marshall-jax/followers", "following_url": "https://api.github.com/users/josh-marshall-jax/following{/other_user}", "gists_url": "https://api.github.com/users/josh-marshall-jax/gists{/gist_id}", "starred_url": "https://api.github.com/users/josh-marshall-jax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josh-marshall-jax/subscriptions", "organizations_url": "https://api.github.com/users/josh-marshall-jax/orgs", "repos_url": "https://api.github.com/users/josh-marshall-jax/repos", "events_url": "https://api.github.com/users/josh-marshall-jax/events{/privacy}", "received_events_url": "https://api.github.com/users/josh-marshall-jax/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 799561986, "node_id": "MDU6TGFiZWw3OTk1NjE5ODY=", "url": "https://api.github.com/repos/lepture/authlib/labels/documentation", "name": "documentation", "color": "c5def5", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-11-06T20:15:27Z", "updated_at": "2019-11-07T02:24:05Z", "closed_at": "2019-11-07T02:24:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "With regard to  https://docs.authlib.org/en/latest/specs/rfc7516.html#authlib.jose.JsonWebEncryption.serialize_compact\r\n\r\nand\r\n\r\nhttps://tools.ietf.org/html/rfc7516#section-3.3\r\n\r\nFor the uninitiated (like me) on first reading, including a key, even if encrypted in the response text seems like trouble.  A quick note on why it is OK would be nice.\r\n\r\nFrom what I have read, I am inferring that core parts of the header are handled with PKI, then the ciphertext is encrypted/decrypted using a symmetric cipher using the unencrypted key.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/158", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/158/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/158/events", "html_url": "https://github.com/lepture/authlib/issues/158", "id": 510287860, "node_id": "MDU6SXNzdWU1MTAyODc4NjA=", "number": 158, "title": "Support for parameters in URI when getting access token", "user": {"login": "hillstub", "id": 4777566, "node_id": "MDQ6VXNlcjQ3Nzc1NjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/4777566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hillstub", "html_url": "https://github.com/hillstub", "followers_url": "https://api.github.com/users/hillstub/followers", "following_url": "https://api.github.com/users/hillstub/following{/other_user}", "gists_url": "https://api.github.com/users/hillstub/gists{/gist_id}", "starred_url": "https://api.github.com/users/hillstub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hillstub/subscriptions", "organizations_url": "https://api.github.com/users/hillstub/orgs", "repos_url": "https://api.github.com/users/hillstub/repos", "events_url": "https://api.github.com/users/hillstub/events{/privacy}", "received_events_url": "https://api.github.com/users/hillstub/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 799561986, "node_id": "MDU6TGFiZWw3OTk1NjE5ODY=", "url": "https://api.github.com/repos/lepture/authlib/labels/documentation", "name": "documentation", "color": "c5def5", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-21T20:55:52Z", "updated_at": "2019-10-29T14:31:25Z", "closed_at": "2019-10-29T14:31:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Love the library - it's really useful!!\r\n\r\nThere's one thing that's causing me some problems, though. I'm trying to make this library work with the bunq OAuth2 authorization process (see [https://doc.bunq.com/#/oauth](https://doc.bunq.com/#/oauth)). The problem with their implementation is that they require a POST request with ```grant_type```, ```code```, ```redirect_uri```, ```client_id```, and ```client_secret``` as GET variables (so encoded in the URL). So far, I don't see a proper way to achieve this with the authlib library. (If I understand it correctly ```register_compliance_hook``` cannot be used to form a request for an access token.)\r\n\r\nI got it working by changing the code in ```authlib/oauth2/client.py``` for the function ```_fetch_token``` and added the following\r\n\r\n```\r\n        if method.upper() == 'POST':\r\n            resp = self.session.post(\r\n                url+\"?\"+body, headers=headers,\r\n                auth=auth, **kwargs)\r\n```\r\nThis is obviously pretty hacky. Does someone has a better solution?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/157", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/157/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/157/events", "html_url": "https://github.com/lepture/authlib/issues/157", "id": 509473042, "node_id": "MDU6SXNzdWU1MDk0NzMwNDI=", "number": 157, "title": "0.12.1 ImportError: No module named 'authlib.integrations'", "user": {"login": "aradnaev", "id": 17343325, "node_id": "MDQ6VXNlcjE3MzQzMzI1", "avatar_url": "https://avatars2.githubusercontent.com/u/17343325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aradnaev", "html_url": "https://github.com/aradnaev", "followers_url": "https://api.github.com/users/aradnaev/followers", "following_url": "https://api.github.com/users/aradnaev/following{/other_user}", "gists_url": "https://api.github.com/users/aradnaev/gists{/gist_id}", "starred_url": "https://api.github.com/users/aradnaev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aradnaev/subscriptions", "organizations_url": "https://api.github.com/users/aradnaev/orgs", "repos_url": "https://api.github.com/users/aradnaev/repos", "events_url": "https://api.github.com/users/aradnaev/events{/privacy}", "received_events_url": "https://api.github.com/users/aradnaev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-10-19T16:02:48Z", "updated_at": "2019-10-24T02:05:03Z", "closed_at": "2019-10-20T07:18:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Describe the bug**\r\nCannot import OAuth following examples in https://docs.authlib.org/en/latest/client/oauth2.html\r\nusing these import statements.\r\n`from authlib.integrations.requests_client import OAuth2Session`\r\n `from authlib.integrations.django_client import OAuth`\r\n\r\nImportError: No module named 'authlib.integrations'\r\n\r\nUpon examination, indeed there is no integrations directory in installed package.\r\n\r\nWorkaround:\r\nIf installing straight from github version 0.13.dev0, there is no problem\r\nin requirements.txt:\r\ngit+git://github.com/lepture/authlib.git@master\r\n\r\n**Error Stacks**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nImportError: No module named 'authlib.integrations'\r\n\r\n\r\n```\r\n\r\n**To Reproduce**\r\n\r\n1. create and activate new virtual environment  (e.g. `conda create -n authlib_test  python=3.5`, `conda activate authlib_test`\r\n)\r\n2. install authlib with pip `pip install Authlib`\r\nand verify installation success (Successfully installed Authlib-0.12.1 cffi-1.13.0 cryptography-2.8 pycparser-2.19 six-1.12.0)\r\n3. try importing OAuth following examples https://docs.authlib.org/en/latest/client/oauth2.html\r\n`from authlib.integrations.requests_client import OAuth2Session`\r\n `from authlib.integrations.django_client import OAuth`\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nImportError: No module named 'authlib.integrations'\r\n\r\n\r\n**Expected behavior**\r\n\r\nshould be no Import error and OAuth module available\r\n\r\n**Environment:**\r\n\r\n - OS: MacOS 10.14.6\r\n - Python Version: 3.5.6\r\n - Authlib Version: 0.12.1\r\n\r\n**Additional context**\r\n\r\nNA", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/156", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/156/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/156/events", "html_url": "https://github.com/lepture/authlib/issues/156", "id": 508067104, "node_id": "MDU6SXNzdWU1MDgwNjcxMDQ=", "number": 156, "title": "create_oauth_request should support JSON payloads out of the box", "user": {"login": "mmattax", "id": 2185723, "node_id": "MDQ6VXNlcjIxODU3MjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2185723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmattax", "html_url": "https://github.com/mmattax", "followers_url": "https://api.github.com/users/mmattax/followers", "following_url": "https://api.github.com/users/mmattax/following{/other_user}", "gists_url": "https://api.github.com/users/mmattax/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmattax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmattax/subscriptions", "organizations_url": "https://api.github.com/users/mmattax/orgs", "repos_url": "https://api.github.com/users/mmattax/repos", "events_url": "https://api.github.com/users/mmattax/events{/privacy}", "received_events_url": "https://api.github.com/users/mmattax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-16T20:00:05Z", "updated_at": "2020-07-22T05:00:53Z", "closed_at": "2019-10-29T14:30:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\n\r\nThe flask and Django helpers both take `use_json` in `create_oauth_request`, but this flag is never used in the integration code itself, causing developers to have to build the request object manually if the endpoint accepts JSON. \r\n\r\nI'm porting over existing code that used Flask-OAuth2lib which seemed to do this.\r\n\r\n**Describe the solution you'd like**\r\n\r\nThe helper code should look at the headers and determine if it should use JSON automatically.\r\n\r\n```python\r\nuse_json = request.headers.get('Content-Type').find('application/json') != -1\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\nI've currently built my own helper that looks at the content type:\r\n\r\n```python\r\ndef create_oauth_request(request):\r\n    \"\"\"\r\n    Ported function from flask_helpers.py (link below) to improve JSON support.\r\n    https://github.com/lepture/authlib/blob/master/authlib/integrations/flask_helpers.py\r\n    \"\"\"\r\n    from authlib.oauth2 import OAuth2Request\r\n    from authlib.common.encoding import to_unicode\r\n    body = None\r\n    if request.method == 'POST':\r\n        if request.headers.get('Content-Type').find('application/json') != -1:\r\n            body = dict(request.json)\r\n        else:\r\n            body = request.form.to_dict(flat=True)\r\n        \r\n    url = request.base_url\r\n    if request.query_string:\r\n        url = url + '?' + to_unicode(request.query_string)\r\n\r\n    return OAuth2Request(request.method, url, body, request.headers)\r\n```\r\n\r\nI'm happy to submit a PR with this built-in if it gets your support. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/151", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/151/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/151/events", "html_url": "https://github.com/lepture/authlib/issues/151", "id": 498143484, "node_id": "MDU6SXNzdWU0OTgxNDM0ODQ=", "number": 151, "title": "Django OAuth2 Client: multiple values for keyword argument 'refresh_token_url'", "user": {"login": "KaczuH", "id": 6073498, "node_id": "MDQ6VXNlcjYwNzM0OTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6073498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KaczuH", "html_url": "https://github.com/KaczuH", "followers_url": "https://api.github.com/users/KaczuH/followers", "following_url": "https://api.github.com/users/KaczuH/following{/other_user}", "gists_url": "https://api.github.com/users/KaczuH/gists{/gist_id}", "starred_url": "https://api.github.com/users/KaczuH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KaczuH/subscriptions", "organizations_url": "https://api.github.com/users/KaczuH/orgs", "repos_url": "https://api.github.com/users/KaczuH/repos", "events_url": "https://api.github.com/users/KaczuH/events{/privacy}", "received_events_url": "https://api.github.com/users/KaczuH/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-25T08:52:48Z", "updated_at": "2019-09-25T14:22:13Z", "closed_at": "2019-09-25T14:22:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version: 0.11\r\n\r\n**How to reproduce**\r\n\r\n```python\r\nfrom authlib.django.client import OAuth\r\noauth = OAuth()\r\n\r\nclient = oauth.register(\r\n    name=\"client_name\",\r\n    client_id=\"{{ client_id }}\",\r\n    client_secret=\"{{ client_secret }}\",\r\n    access_token_url=\"{{ access_token }}\",\r\n    authorize_url=\"{{ authorize_url }}\",\r\n    api_base_url=\"{{ api_base_url }}\",\r\n    client_kwargs={\r\n        'refresh_token_url': \"{{ refresh_token_url }}\"\r\n    }\r\n)\r\n\r\nclient.get(\"{{ some_endpoint }}\")\r\n```\r\nResults in an exception\r\n`TypeError: multiple values for keyword argument 'refresh_token_url'`\r\n\r\n~Probably the same issue occurs in Flask client~\r\nIt is fixed on `master` for Flask\r\n\r\n`refresh_token_url` is required to set up the `token_update` signal.\r\n\r\nI think i know how to fix it\r\nI have created a PR #152 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/150", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/150/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/150/events", "html_url": "https://github.com/lepture/authlib/issues/150", "id": 496319275, "node_id": "MDU6SXNzdWU0OTYzMTkyNzU=", "number": 150, "title": "Support multiple audiences for OpenIDCode", "user": {"login": "cal97g", "id": 1664656, "node_id": "MDQ6VXNlcjE2NjQ2NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1664656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cal97g", "html_url": "https://github.com/cal97g", "followers_url": "https://api.github.com/users/cal97g/followers", "following_url": "https://api.github.com/users/cal97g/following{/other_user}", "gists_url": "https://api.github.com/users/cal97g/gists{/gist_id}", "starred_url": "https://api.github.com/users/cal97g/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cal97g/subscriptions", "organizations_url": "https://api.github.com/users/cal97g/orgs", "repos_url": "https://api.github.com/users/cal97g/repos", "events_url": "https://api.github.com/users/cal97g/events{/privacy}", "received_events_url": "https://api.github.com/users/cal97g/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 753466960, "node_id": "MDU6TGFiZWw3NTM0NjY5NjA=", "url": "https://api.github.com/repos/lepture/authlib/labels/server", "name": "server", "color": "0ba84a", "default": false, "description": null}, {"id": 732510047, "node_id": "MDU6TGFiZWw3MzI1MTAwNDc=", "url": "https://api.github.com/repos/lepture/authlib/labels/spec", "name": "spec", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-20T12:16:45Z", "updated_at": "2019-10-08T11:55:00Z", "closed_at": "2019-10-08T11:51:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "It should be possible to provide multiple audiences to JWT Tokens via OpenIDCode child classes.\r\n\r\n`authlib.oidc.core.grants.code.OpenIDCode` & `authlib.oidc.core.grants.implicit.OpenIDImplicitGrant` both use `generate_id_token` from `authlib.oidc.core.grants.util` to generate id_token payloads.\r\n\r\n`generate_id_token` defines the audience to be `[client.get_client_id()]`\r\n\r\nWe should add a parameter to allow a token to support multiple audiences.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/149", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/149/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/149/events", "html_url": "https://github.com/lepture/authlib/issues/149", "id": 494674345, "node_id": "MDU6SXNzdWU0OTQ2NzQzNDU=", "number": 149, "title": "ImportError: cannot import name certificate_transparency", "user": {"login": "claudiamaximus", "id": 55325877, "node_id": "MDQ6VXNlcjU1MzI1ODc3", "avatar_url": "https://avatars0.githubusercontent.com/u/55325877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claudiamaximus", "html_url": "https://github.com/claudiamaximus", "followers_url": "https://api.github.com/users/claudiamaximus/followers", "following_url": "https://api.github.com/users/claudiamaximus/following{/other_user}", "gists_url": "https://api.github.com/users/claudiamaximus/gists{/gist_id}", "starred_url": "https://api.github.com/users/claudiamaximus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claudiamaximus/subscriptions", "organizations_url": "https://api.github.com/users/claudiamaximus/orgs", "repos_url": "https://api.github.com/users/claudiamaximus/repos", "events_url": "https://api.github.com/users/claudiamaximus/events{/privacy}", "received_events_url": "https://api.github.com/users/claudiamaximus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-09-17T14:53:02Z", "updated_at": "2019-09-18T11:59:08Z", "closed_at": "2019-09-17T23:07:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Environment info\r\n\r\nOperating System: Ubuntu 16\r\nPython version: 3.6\r\nAuthlib version: 0.12.1\r\npyopnessl version: 19.0.0\r\ncryptography version: 2.7\r\ngspread version: 3.1.0\r\n\r\n### Steps to reproduce\r\n1. Use Authlib instead of oauth2client in gspread.\r\n2. Use the code mentioned [here](https://blog.authlib.org/2018/authlib-for-gspread).\r\n3. Try to open a sheet using `gc.open`.\r\n\r\n### Stack trace or other output that would be helpful\r\n```\r\n[Tue Sep 17 16:22:18.385805 2019] [wsgi:error] Traceback (most recent call last):\r\n[Tue Sep 17 16:22:18.385811 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/flask/app.py\", line 2446, in wsgi_app\r\n[Tue Sep 17 16:22:18.385816 2019] [wsgi:error]     response = self.full_dispatch_request()\r\n[Tue Sep 17 16:22:18.385821 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/flask/app.py\", line 1951, in full_dispatch_request\r\n[Tue Sep 17 16:22:18.385827 2019] [wsgi:error]     rv = self.handle_user_exception(e)\r\n[Tue Sep 17 16:22:18.385847 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/flask/app.py\", line 1820, in handle_user_exception\r\n[Tue Sep 17 16:22:18.385852 2019] [wsgi:error]     reraise(exc_type, exc_value, tb)\r\n[Tue Sep 17 16:22:18.385857 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/flask/app.py\", line 1949, in full_dispatch_request\r\n[Tue Sep 17 16:22:18.385861 2019] [wsgi:error]     rv = self.dispatch_request()\r\n[Tue Sep 17 16:22:18.385866 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/flask/app.py\", line 1935, in dispatch_request\r\n[Tue Sep 17 16:22:18.385871 2019] [wsgi:error]     return self.view_functions[rule.endpoint](**req.view_args)\r\n[Tue Sep 17 16:22:18.385875 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/myapp/views/event.py\", line 64, in validate\r\n[Tue Sep 17 16:22:18.385880 2019] [wsgi:error]     worksheet = gc.open(\"Event Validation Test\").sheet1\r\n[Tue Sep 17 16:22:18.385884 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/gspread/client.py\", line 123, in open\r\n[Tue Sep 17 16:22:18.385889 2019] [wsgi:error]     self.list_spreadsheet_files()\r\n[Tue Sep 17 16:22:18.385893 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/gspread/client.py\", line 96, in list_spreadsheet_files\r\n[Tue Sep 17 16:22:18.385898 2019] [wsgi:error]     res = self.request('get', url, params=params).json()\r\n[Tue Sep 17 16:22:18.385902 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/gspread/client.py\", line 73, in request\r\n[Tue Sep 17 16:22:18.385907 2019] [wsgi:error]     headers=headers\r\n[Tue Sep 17 16:22:18.385911 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/requests/sessions.py\", line 546, in get\r\n[Tue Sep 17 16:22:18.385916 2019] [wsgi:error]     return self.request('GET', url, **kwargs)\r\n[Tue Sep 17 16:22:18.385920 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/authlib/client/assertion_session.py\", line 43, in request\r\n[Tue Sep 17 16:22:18.385925 2019] [wsgi:error]     method, url, headers=headers, data=data, auth=auth, **kwargs)\r\n[Tue Sep 17 16:22:18.385930 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/requests/sessions.py\", line 519, in request\r\n[Tue Sep 17 16:22:18.385934 2019] [wsgi:error]     prep = self.prepare_request(req)\r\n[Tue Sep 17 16:22:18.385939 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/requests/sessions.py\", line 462, in prepare_request\r\n[Tue Sep 17 16:22:18.385944 2019] [wsgi:error]     hooks=merge_hooks(request.hooks, self.hooks),\r\n[Tue Sep 17 16:22:18.385949 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/requests/models.py\", line 317, in prepare\r\n[Tue Sep 17 16:22:18.385954 2019] [wsgi:error]     self.prepare_auth(auth, url)\r\n[Tue Sep 17 16:22:18.385966 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/requests/models.py\", line 548, in prepare_auth\r\n[Tue Sep 17 16:22:18.385971 2019] [wsgi:error]     r = auth(self)\r\n[Tue Sep 17 16:22:18.385975 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/authlib/client/assertion_session.py\", line 9, in __call__\r\n[Tue Sep 17 16:22:18.385980 2019] [wsgi:error]     self.ensure_refresh_token()\r\n[Tue Sep 17 16:22:18.385984 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/authlib/client/assertion_client.py\", line 9, in ensure_refresh_token\r\n[Tue Sep 17 16:22:18.385989 2019] [wsgi:error]     return self.client.refresh_token()\r\n[Tue Sep 17 16:22:18.385993 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/authlib/oauth2/rfc7521/client.py\", line 55, in refresh_token\r\n[Tue Sep 17 16:22:18.385998 2019] [wsgi:error]     **self._kwargs\r\n[Tue Sep 17 16:22:18.386002 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/authlib/oauth2/rfc7523/grant.py\", line 24, in sign\r\n[Tue Sep 17 16:22:18.386007 2019] [wsgi:error]     expires_at, claims, **kwargs)\r\n[Tue Sep 17 16:22:18.386012 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/authlib/oauth2/rfc7523/assertion.py\", line 36, in sign_jwt_bearer_assertion\r\n[Tue Sep 17 16:22:18.386016 2019] [wsgi:error]     return jwt.encode(header, payload, key)\r\n[Tue Sep 17 16:22:18.386021 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/authlib/jose/rfc7519/jwt.py\", line 95, in encode\r\n[Tue Sep 17 16:22:18.386025 2019] [wsgi:error]     return self._jws.serialize_compact(header, text, key)\r\n[Tue Sep 17 16:22:18.386030 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/authlib/jose/rfc7515/jws.py\", line 71, in serialize_compact\r\n[Tue Sep 17 16:22:18.386035 2019] [wsgi:error]     self._algorithms, jws_header, payload, key, private=True)\r\n[Tue Sep 17 16:22:18.386039 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/authlib/jose/util.py\", line 12, in prepare_algorithm_key\r\n[Tue Sep 17 16:22:18.386044 2019] [wsgi:error]     key = algorithm.prepare_private_key(key)\r\n[Tue Sep 17 16:22:18.386048 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/authlib/jose/rfc7518/_backends/_key_cryptography.py\", line 19, in prepare_private_key\r\n[Tue Sep 17 16:22:18.386053 2019] [wsgi:error]     return load_pem_private_key(key, password=None, backend=default_backend())\r\n[Tue Sep 17 16:22:18.386058 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/cryptography/hazmat/backends/__init__.py\", line 15, in default_backend\r\n[Tue Sep 17 16:22:18.386063 2019] [wsgi:error]     from cryptography.hazmat.backends.openssl.backend import backend\r\n[Tue Sep 17 16:22:18.386067 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/cryptography/hazmat/backends/openssl/__init__.py\", line 7, in <module>\r\n[Tue Sep 17 16:22:18.386076 2019] [wsgi:error]     from cryptography.hazmat.backends.openssl.backend import backend\r\n[Tue Sep 17 16:22:18.386081 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/cryptography/hazmat/backends/openssl/backend.py\", line 18, in <module>\r\n[Tue Sep 17 16:22:18.386085 2019] [wsgi:error]     from cryptography import utils, x509\r\n[Tue Sep 17 16:22:18.386090 2019] [wsgi:error]   File \"/var/www/abc.example.com/public_html/venv/lib/python3.6/site-packages/cryptography/x509/__init__.py\", line 7, in <module>\r\n[Tue Sep 17 16:22:18.386095 2019] [wsgi:error]     from cryptography.x509 import certificate_transparency\r\n[Tue Sep 17 16:22:18.386099 2019] [wsgi:error] ImportError: cannot import name certificate_transparency\r\n\r\n```\r\n\r\n**What I have tried so far:**\r\n\r\n1. Checked if the file path is correct. `certificate_transparency.py` does exist in `/venv/lib/python3.6/site-packages/cryptography/x509`.\r\n2. Tried the same on Windows, it works without any error.\r\n3. Reinstalled all dependencies, including `pyOpenSSL`.\r\n4. Tried importing it inside `(venv)` Python console. `>>> from cryptography.x509 import certificate_transparency` works fine.\r\n\r\n**My code:**\r\n```python\r\ndef create_assertion_session(conf_file, scopes, subject=None):\r\n    with open(conf_file, 'r') as f:\r\n        conf = json.load(f)\r\n\r\n    token_url = conf['token_uri']\r\n    issuer = conf['client_email']\r\n    key = conf['private_key']\r\n    key_id = conf.get('private_key_id')\r\n\r\n    header = {'alg': 'RS256'}\r\n    if key_id:\r\n        header['kid'] = key_id\r\n\r\n    # Google puts scope in payload\r\n    claims = {'scope': ' '.join(scopes)}\r\n    return AssertionSession(\r\n        grant_type=AssertionSession.JWT_BEARER_GRANT_TYPE,\r\n        token_url=token_url,\r\n        issuer=issuer,\r\n        audience=token_url,\r\n        claims=claims,\r\n        subject=subject,\r\n        key=key,\r\n        header=header,\r\n    )\r\n\r\nscopes = [\r\n    'https://spreadsheets.google.com/feeds',\r\n    'https://www.googleapis.com/auth/drive',\r\n]\r\nsession = create_assertion_session(json_key_file, scopes)\r\ngc = Client(None, session)\r\nworksheet = gc.open(\"Event Validation Test\").sheet1 # this causes the error\r\n```\r\n\r\n`requirements.txt`:\r\n```\r\nasn1crypto==0.24.0\r\nAuthlib==0.12.1\r\nblinker==1.4\r\ncertifi==2019.6.16\r\ncffi==1.12.3\r\nchardet==3.0.4\r\nClick==7.0\r\ncolorama==0.4.1\r\ncryptography==2.7\r\nFlask==1.1.1\r\nFlask-Mail==0.9.1\r\ngspread==3.1.0\r\nhttplib2==0.13.1\r\nidna==2.8\r\nitsdangerous==1.1.0\r\nJinja2==2.10.1\r\nMarkupSafe==1.1.1\r\npyasn1==0.4.7\r\npyasn1-modules==0.2.6\r\npycparser==2.19\r\npymaging==0.1\r\npymaging-png==0.1\r\npyOpenSSL==19.0.0\r\nrequests==2.22.0\r\nrsa==4.0\r\nsix==1.12.0\r\nurllib3==1.25.3\r\nWerkzeug==0.15.5\r\n```\r\n\r\n  [1]: https://blog.authlib.org/2018/authlib-for-gspread\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/148", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/148/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/148/events", "html_url": "https://github.com/lepture/authlib/issues/148", "id": 493676920, "node_id": "MDU6SXNzdWU0OTM2NzY5MjA=", "number": 148, "title": "RFE: integration with FastAPI/Starlette", "user": {"login": "jonathanunderwood", "id": 992114, "node_id": "MDQ6VXNlcjk5MjExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/992114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathanunderwood", "html_url": "https://github.com/jonathanunderwood", "followers_url": "https://api.github.com/users/jonathanunderwood/followers", "following_url": "https://api.github.com/users/jonathanunderwood/following{/other_user}", "gists_url": "https://api.github.com/users/jonathanunderwood/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathanunderwood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathanunderwood/subscriptions", "organizations_url": "https://api.github.com/users/jonathanunderwood/orgs", "repos_url": "https://api.github.com/users/jonathanunderwood/repos", "events_url": "https://api.github.com/users/jonathanunderwood/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathanunderwood/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 753466877, "node_id": "MDU6TGFiZWw3NTM0NjY4Nzc=", "url": "https://api.github.com/repos/lepture/authlib/labels/client", "name": "client", "color": "bdffaf", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-09-14T23:32:58Z", "updated_at": "2019-10-05T13:05:45Z", "closed_at": "2019-10-05T13:05:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[FastAPI ](https://github.com/tiangolo/fastapi)is rapidly gaining popularity as an API framework. It would be great if there was an integration client for FastAPI like there is for Flask etc.\r\n\r\nFastAPI doesn't have a plugin system like Flask, but Starlette supports middlewares, and FastAPI supports dependency injection, so I think it should be possible.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/146", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/146/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/146/events", "html_url": "https://github.com/lepture/authlib/issues/146", "id": 491297800, "node_id": "MDU6SXNzdWU0OTEyOTc4MDA=", "number": 146, "title": "PKCE client authentication in shared public/private server", "user": {"login": "night", "id": 2942184, "node_id": "MDQ6VXNlcjI5NDIxODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2942184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/night", "html_url": "https://github.com/night", "followers_url": "https://api.github.com/users/night/followers", "following_url": "https://api.github.com/users/night/following{/other_user}", "gists_url": "https://api.github.com/users/night/gists{/gist_id}", "starred_url": "https://api.github.com/users/night/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/night/subscriptions", "organizations_url": "https://api.github.com/users/night/orgs", "repos_url": "https://api.github.com/users/night/repos", "events_url": "https://api.github.com/users/night/events{/privacy}", "received_events_url": "https://api.github.com/users/night/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510047, "node_id": "MDU6TGFiZWw3MzI1MTAwNDc=", "url": "https://api.github.com/repos/lepture/authlib/labels/spec", "name": "spec", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-09-09T20:02:58Z", "updated_at": "2019-11-12T23:06:13Z", "closed_at": "2019-11-12T23:06:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "This issue is similar to my other reported issue #115 but essentially in an authorization server where applications are both public and private it isn't possible to natively authenticate to the token server as a public and private client depending on type of authorization request.\r\n\r\nThe only way to achieve this currently is to extend the client auth methods with a custom authentication scheme:\r\n\r\n```\r\ndef authenticate_rfc7636(query_client, request):\r\n    data = request.form\r\n    code_verifier = data.get('code_verifier')\r\n    if code_verifier:\r\n        return authenticate_none(query_client, request)\r\n```\r\n\r\nThis works because `rfc7636` always runs `validate_code_verifier` after `after_validate_token_request`, which validates the code verifier provided.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/145", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/145/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/145/events", "html_url": "https://github.com/lepture/authlib/issues/145", "id": 487522471, "node_id": "MDU6SXNzdWU0ODc1MjI0NzE=", "number": 145, "title": "OAuth2 client: Support expiring refresh tokens", "user": {"login": "ThiefMaster", "id": 179599, "node_id": "MDQ6VXNlcjE3OTU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThiefMaster", "html_url": "https://github.com/ThiefMaster", "followers_url": "https://api.github.com/users/ThiefMaster/followers", "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}", "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions", "organizations_url": "https://api.github.com/users/ThiefMaster/orgs", "repos_url": "https://api.github.com/users/ThiefMaster/repos", "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}", "received_events_url": "https://api.github.com/users/ThiefMaster/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 753466877, "node_id": "MDU6TGFiZWw3NTM0NjY4Nzc=", "url": "https://api.github.com/repos/lepture/authlib/labels/client", "name": "client", "color": "bdffaf", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-30T14:45:14Z", "updated_at": "2019-10-08T11:47:09Z", "closed_at": "2019-10-08T11:47:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "As annoying as it may be, there are services where the refresh tokens expire after a while (in my particular case they are only valid for 2h which sucks even more :angry:).\r\n\r\nIt would be nice if the OAuth2 client had better support for this:\r\n\r\n- handle `refresh_expires_in` (not sure if a `_at` version exists as well in some cases) in `OAuth2Token` and provide a `is_refresh_expired` method\r\n- in case of autorefresh, provide a callback in case of expired refresh tokens, where one can acquire a new one if possible (this is e.g. the case when using a `client_credentials` grant)\r\n\r\n---\r\n\r\nFWIW, this is what I did in my application for now:\r\n\r\n```python\r\nclass RefreshingOAuth2Session(OAuth2Session):\r\n    def __init__(self, client_id, client_secret, access_token_url, **kwargs):\r\n        super(RefreshingOAuth2Session, self).__init__(\r\n            client_id, client_secret, refresh_token_url=access_token_url, **kwargs\r\n        )\r\n        self.access_token_url = access_token_url\r\n\r\n    def _is_refresh_token_expired(self):\r\n        issued_time = self.token['expires_at'] - self.token['expires_in']\r\n        refresh_expires_at = issued_time + self.token['refresh_expires_in']\r\n        return refresh_expires_at < time.time()\r\n\r\n    def refresh_token(\r\n        self, url=None, refresh_token=None, body='', auth=None, headers=None, **kwargs\r\n    ):\r\n        assert refresh_token is None or refresh_token == self.token['refresh_token']\r\n        if self._is_refresh_token_expired():\r\n            self.ensure_token(force=True)\r\n            return self.token\r\n        return super(RefreshingOAuth2Session, self).refresh_token(\r\n            url, refresh_token, body, auth, headers, **kwargs\r\n        )\r\n\r\n    def ensure_token(self, force=False):\r\n        \"\"\"Retrieve a token if none is available.\r\n\r\n        Call this before using the session to make sure there is a token,\r\n        even if none was provided explicitly (e.g. from a cache).\r\n\r\n        :param force: Whether to get a new token regardless of an existing one.\r\n        \"\"\"\r\n        if self.token is None or force:\r\n            self.fetch_access_token(\r\n                self.access_token_url, grant_type='client_credentials'\r\n            )\r\n            if self.token_updater and self.token:\r\n                self.token_updater(self.token)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/144", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/144/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/144/events", "html_url": "https://github.com/lepture/authlib/issues/144", "id": 481883585, "node_id": "MDU6SXNzdWU0ODE4ODM1ODU=", "number": 144, "title": "Flask OAuth Client: refreshed token is not used", "user": {"login": "yclybouw", "id": 5329057, "node_id": "MDQ6VXNlcjUzMjkwNTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/5329057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yclybouw", "html_url": "https://github.com/yclybouw", "followers_url": "https://api.github.com/users/yclybouw/followers", "following_url": "https://api.github.com/users/yclybouw/following{/other_user}", "gists_url": "https://api.github.com/users/yclybouw/gists{/gist_id}", "starred_url": "https://api.github.com/users/yclybouw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yclybouw/subscriptions", "organizations_url": "https://api.github.com/users/yclybouw/orgs", "repos_url": "https://api.github.com/users/yclybouw/repos", "events_url": "https://api.github.com/users/yclybouw/events{/privacy}", "received_events_url": "https://api.github.com/users/yclybouw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-17T13:02:21Z", "updated_at": "2019-08-22T09:33:10Z", "closed_at": "2019-08-22T09:33:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using version 0.11\r\n\r\nFile: authlib/flask/client/oauth.py\r\nClass: RemoteApp\r\n\r\n1. The first time a \"authenticated\" request is made, the `RemoteApp.token` property will fetch the token with `RemoteApp._fetch_token` and put it on Flask's `_app_ctx_stack`.\r\n1. Each subsequent request will not use `RemoteApp._fetch_token`, but the cached token from `_app_ctx_stack`.\r\n1. If the token has expired, a new token will be requested (authlib/oauth2/client.py:OAuth2Client), it is updated in this session object, but this not propagate to RemoteApp, nor `_app_ctx_stack`.\r\n1. Next request, RemoteApp.token will still return the old token from `_app_ctx_stack`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/143", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/143/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/143/events", "html_url": "https://github.com/lepture/authlib/issues/143", "id": 481343955, "node_id": "MDU6SXNzdWU0ODEzNDM5NTU=", "number": 143, "title": "Non-Compliant refresh token params", "user": {"login": "yclybouw", "id": 5329057, "node_id": "MDQ6VXNlcjUzMjkwNTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/5329057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yclybouw", "html_url": "https://github.com/yclybouw", "followers_url": "https://api.github.com/users/yclybouw/followers", "following_url": "https://api.github.com/users/yclybouw/following{/other_user}", "gists_url": "https://api.github.com/users/yclybouw/gists{/gist_id}", "starred_url": "https://api.github.com/users/yclybouw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yclybouw/subscriptions", "organizations_url": "https://api.github.com/users/yclybouw/orgs", "repos_url": "https://api.github.com/users/yclybouw/repos", "events_url": "https://api.github.com/users/yclybouw/events{/privacy}", "received_events_url": "https://api.github.com/users/yclybouw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-15T21:19:52Z", "updated_at": "2019-08-17T14:04:47Z", "closed_at": "2019-08-17T14:03:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation states: \"If you find a non standard OAuth 2 services, and you can\u2019t fix it. Please report it in GitHub issues.\" So here is mine, found when integrating with a Ruby on Rail app:\r\n\r\nWhen refreshing a token, the spec (https://tools.ietf.org/html/rfc6749#section-6) only asks for grant_type, refres_token and (optional) scope, but that app asks additionally client_id, client_secret and redirect_uri. The first 2 can be solved with REFRESH_TOKEN_PARAMS, but the last one (redirect_uri) is not available at that moment (is used in authorize_redirect() method).\r\n\r\nThe hooks refresh_token_response and protected_request are too late in the flow.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/142", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/142/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/142/events", "html_url": "https://github.com/lepture/authlib/issues/142", "id": 477454590, "node_id": "MDU6SXNzdWU0Nzc0NTQ1OTA=", "number": 142, "title": "Redirect_uri is used before it is checked", "user": {"login": "cziebuhr", "id": 6673378, "node_id": "MDQ6VXNlcjY2NzMzNzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6673378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cziebuhr", "html_url": "https://github.com/cziebuhr", "followers_url": "https://api.github.com/users/cziebuhr/followers", "following_url": "https://api.github.com/users/cziebuhr/following{/other_user}", "gists_url": "https://api.github.com/users/cziebuhr/gists{/gist_id}", "starred_url": "https://api.github.com/users/cziebuhr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cziebuhr/subscriptions", "organizations_url": "https://api.github.com/users/cziebuhr/orgs", "repos_url": "https://api.github.com/users/cziebuhr/repos", "events_url": "https://api.github.com/users/cziebuhr/events{/privacy}", "received_events_url": "https://api.github.com/users/cziebuhr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-08-06T15:39:12Z", "updated_at": "2019-08-07T00:26:44Z", "closed_at": "2019-08-07T00:26:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "In `validate_code_authorization_request`, `redirect_uri` is used for `InvalidClientError` before it has been checked with `validate_authorization_redirect_uri`. This allows an attacker to redirect to any given uri.\r\n\r\nI did not yet consider it security relevant, as it's only in master and not released yet.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/141", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/141/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/141/events", "html_url": "https://github.com/lepture/authlib/issues/141", "id": 475422377, "node_id": "MDU6SXNzdWU0NzU0MjIzNzc=", "number": 141, "title": "Introspection endpoint using wrong client to query token", "user": {"login": "dunty", "id": 5253846, "node_id": "MDQ6VXNlcjUyNTM4NDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/5253846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dunty", "html_url": "https://github.com/dunty", "followers_url": "https://api.github.com/users/dunty/followers", "following_url": "https://api.github.com/users/dunty/following{/other_user}", "gists_url": "https://api.github.com/users/dunty/gists{/gist_id}", "starred_url": "https://api.github.com/users/dunty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dunty/subscriptions", "organizations_url": "https://api.github.com/users/dunty/orgs", "repos_url": "https://api.github.com/users/dunty/repos", "events_url": "https://api.github.com/users/dunty/events{/privacy}", "received_events_url": "https://api.github.com/users/dunty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-01T01:11:09Z", "updated_at": "2019-08-01T02:12:11Z", "closed_at": "2019-08-01T01:31:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "in ```authlib/authlib/oauth2/rfc7662/introspection.py```:\r\n```\r\n46        token = self.query_token(\r\n47            params['token'], token_type, self.request.client)\r\n```\r\nThe introspection request is sent by the protected resource actually, not the 3rd client, but the token is applied by the 3rd client. \r\nAnd according to RFC 7662 ```In this example, the protected resource uses a client identifier and\r\n   client secret to authenticate itself to the introspection endpoint.```\r\nThat means the protected resource must use its own client_id and secret (also assigined by authorization server), and there is not inluding the 3rd client's id/secret in the resource request that sent by the 3rd client.\r\nSo, when introspection endpoint querys the token, it can not use the request.client as a condition.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/140", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/140/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/140/events", "html_url": "https://github.com/lepture/authlib/issues/140", "id": 465588147, "node_id": "MDU6SXNzdWU0NjU1ODgxNDc=", "number": 140, "title": "Version 0.12", "user": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 750923160, "node_id": "MDU6TGFiZWw3NTA5MjMxNjA=", "url": "https://api.github.com/repos/lepture/authlib/labels/break%20change", "name": "break change", "color": "F55826", "default": false, "description": null}, {"id": 732510047, "node_id": "MDU6TGFiZWw3MzI1MTAwNDc=", "url": "https://api.github.com/repos/lepture/authlib/labels/spec", "name": "spec", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lepture", "id": 290496, "node_id": "MDQ6VXNlcjI5MDQ5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/290496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lepture", "html_url": "https://github.com/lepture", "followers_url": "https://api.github.com/users/lepture/followers", "following_url": "https://api.github.com/users/lepture/following{/other_user}", "gists_url": "https://api.github.com/users/lepture/gists{/gist_id}", "starred_url": "https://api.github.com/users/lepture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lepture/subscriptions", "organizations_url": "https://api.github.com/users/lepture/orgs", "repos_url": "https://api.github.com/users/lepture/repos", "events_url": "https://api.github.com/users/lepture/events{/privacy}", "received_events_url": "https://api.github.com/users/lepture/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-07-09T06:10:02Z", "updated_at": "2019-09-03T12:19:22Z", "closed_at": "2019-09-03T12:19:22Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In this release, Authlib will focus on API redesign.\r\n\r\n- [ ] OAuth2: load configuration from RFC8414\r\n- [ ] OpenID Connect: load configuration from \"Discovery\"\r\n\r\n## RFC\r\n\r\n- [x] OpenID Connect Discovery\r\n- [ ] RFC8414 integration\r\n\r\n---\r\n\r\n- [x] https://github.com/lepture/authlib/issues/118\r\n- [x] https://github.com/authlib/example-oauth2-server/issues/52\r\n- [x] Creating an example OpenID Connect Server\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/137", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/137/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/137/events", "html_url": "https://github.com/lepture/authlib/issues/137", "id": 459595234, "node_id": "MDU6SXNzdWU0NTk1OTUyMzQ=", "number": 137, "title": "Error in \u201cauthorize_redirect(redirect_uri)\u201d in Flask Client when running on cloud", "user": {"login": "MGafitescu", "id": 22680062, "node_id": "MDQ6VXNlcjIyNjgwMDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/22680062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MGafitescu", "html_url": "https://github.com/MGafitescu", "followers_url": "https://api.github.com/users/MGafitescu/followers", "following_url": "https://api.github.com/users/MGafitescu/following{/other_user}", "gists_url": "https://api.github.com/users/MGafitescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/MGafitescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MGafitescu/subscriptions", "organizations_url": "https://api.github.com/users/MGafitescu/orgs", "repos_url": "https://api.github.com/users/MGafitescu/repos", "events_url": "https://api.github.com/users/MGafitescu/events{/privacy}", "received_events_url": "https://api.github.com/users/MGafitescu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-23T16:44:29Z", "updated_at": "2019-06-24T10:35:16Z", "closed_at": "2019-06-24T10:35:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using the Flask Client (authlib.flask.client) of authlib for OAuth with Flickr. On my machine, it works perfectly, but when running both on Heroku and Cloud Run (GCP) I encounter an error in the authorize_redirect method. Both my login and authorize methods are exactly as described in the Flask Client documentation.\r\n\r\nThe code I'm using and the error:\r\n\r\n```\r\n@app.route(\"/login\")\r\ndef login():\r\n    redirect_uri = url_for('authorize', _external=True)\r\n    return oauth.flickr.authorize_redirect(redirect_uri)\r\n\r\n\r\n@app.route('/authorize')\r\ndef authorize():\r\n    token = oauth.flickr.authorize_access_token()\r\n    redirect_url = \"http://localhost:4200/#/login/\"\r\n    redirect_url = redirect_url + session.get(\"current_user\", \"\")\r\n    return redirect(redirect_url) \r\n\r\n\r\nTraceback (most recent call last): \r\nFile \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 2311, in wsgi_app response = self.full_dispatch_request() \r\nFile \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1834, in full_dispatch_request rv = self.handle_user_exception(e)\r\nFile \"/usr/local/lib/python3.7/site-packages/flask_cors/extension.py\", line 161, in wrapped_function return cors_after_request(app.make_response(f(*args, **kwargs))) \r\nFile \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1737, in handle_user_exception reraise(exc_type, exc_value, tb) \r\nFile \"/usr/local/lib/python3.7/site-packages/flask/_compat.py\", line 36, in reraise raise value \r\nFile \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1832, in full_dispatch_request rv = self.dispatch_request() \r\nFile \"/usr/local/lib/python3.7/site-packages/flask/app.py\", line 1818, in dispatch_request return self.view_functions[rule.endpoint](**req.view_args) \r\nFile \"/app/main.py\", line 130, in login return oauth.flickr.authorize_redirect(redirect_uri) \r\nFile \"/usr/local/lib/python3.7/site-packages/authlib/flask/client/oauth.py\", line 244, in authorize_redirect **kwargs) \r\nFile \"/usr/local/lib/python3.7/site-packages/authlib/client/client.py\", line 122, in generate_authorize_redirect with self._get_session() as session: \r\nFile \"/usr/local/lib/python3.7/site-packages/authlib/client/client.py\", line 181, in _get_session **self.client_kwargs \r\nTypeError: type object argument after ** must be a mapping, not str\r\n ```\r\n\r\nI tried using the name of the parameter too, as `return oauth.flickr.authorize_redirect(redirect_uri=redirect_uri)`, but I'm still getting the same error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/136", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/136/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/136/events", "html_url": "https://github.com/lepture/authlib/issues/136", "id": 459356240, "node_id": "MDU6SXNzdWU0NTkzNTYyNDA=", "number": 136, "title": "authorization.create_token_response() returns a bad Response", "user": {"login": "pksec", "id": 5330364, "node_id": "MDQ6VXNlcjUzMzAzNjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5330364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pksec", "html_url": "https://github.com/pksec", "followers_url": "https://api.github.com/users/pksec/followers", "following_url": "https://api.github.com/users/pksec/following{/other_user}", "gists_url": "https://api.github.com/users/pksec/gists{/gist_id}", "starred_url": "https://api.github.com/users/pksec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pksec/subscriptions", "organizations_url": "https://api.github.com/users/pksec/orgs", "repos_url": "https://api.github.com/users/pksec/repos", "events_url": "https://api.github.com/users/pksec/events{/privacy}", "received_events_url": "https://api.github.com/users/pksec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-21T20:14:33Z", "updated_at": "2019-06-24T04:33:52Z", "closed_at": "2019-06-24T04:33:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Error : AttributeError: 'Response' object has no attribute 'header' / 'status_code'/ 'content'**\r\n\r\nI was trying to understand what authorization.create_token_response() returns in the example https://github.com/authlib/example-oauth2-server/blob/master/website/routes.py. So I created some logging statement as below:\r\n\r\n```\r\noauthtoken = authorization.create_token_response()\r\napp.logger.debug('oauthResponse type:{}'.format(type(oauthResponse)))\r\n    app.logger.debug('oauth create token type:{} \\n status code:{} \\n header:{} \\n content:{}'.format(\r\n        type(oauthResponse),\r\n        oauthResponse.status_code,\r\n        oauthResponse.header,\r\n        oauthResponse.content\r\n    ))\r\n```\r\nI get the following response:\r\n\r\n```\r\n2019-06-21 22:00:19 routes.py DEBUG oauthResponse type:<class 'flask.wrappers.Response'>\r\n\r\n2019-06-21 22:00:19 _internal.py INFO _log (122) 127.0.0.1 - - [21/Jun/2019 22:00:19] \"POST /oauth/token HTTP/1.1\" 500 -\r\nTraceback (most recent call last):\r\n...\r\n  File \"/home/xx/virtualenvs/xxx-n_KOMqPA/lib/python3.7/site-packages/flask/app.py\", line 1818, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/home/xx/website/routes.py\", line 216, in issue_token\r\n    jwttoken = create_JWT_token (oauthtoken)\r\n  File \"/home/xx/website/routes.py\", line 203, in xxx\r\n    oauthResponse.header,\r\nAttributeError: 'Response' object has no attribute 'header'\r\n```\r\nI traced the code back to authlib.oauth2.rfc6749.grants.authorization_code.py, still couldn't figure out why this error is happening ? what am I doing wrong? or is it an issue?\r\n\r\n```\r\n    def create_token_response(self):\r\n        \"\"\"If the access token request is valid and authorized, the\r\n        authorization server issues an access token and optional refresh\r\n        token as described in Section 5.1.  If the request client\r\n        authentication failed or is invalid, the authorization server returns\r\n        an error response as described in Section 5.2. Per `Section 4.1.4`_.\r\n\r\n        An example successful response:\r\n\r\n        .. code-block:: http\r\n\r\n            HTTP/1.1 200 OK\r\n            Content-Type: application/json\r\n            Cache-Control: no-store\r\n            Pragma: no-cache\r\n\r\n            {\r\n                \"access_token\":\"2YotnFZFEjr1zCsicMWpAA\",\r\n                \"token_type\":\"example\",\r\n                \"expires_in\":3600,\r\n                \"refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\",\r\n                \"example_parameter\":\"example_value\"\r\n            }\r\n\r\n        :returns: (status_code, body, headers)\r\n\r\n        .. _`Section 4.1.4`: https://tools.ietf.org/html/rfc6749#section-4.1.4\r\n        \"\"\"\r\n...\r\n        return 200, token, self.TOKEN_RESPONSE_HEADER\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/135", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/135/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/135/events", "html_url": "https://github.com/lepture/authlib/issues/135", "id": 457386416, "node_id": "MDU6SXNzdWU0NTczODY0MTY=", "number": 135, "title": "invalid grant error", "user": {"login": "JadAaraj", "id": 26813817, "node_id": "MDQ6VXNlcjI2ODEzODE3", "avatar_url": "https://avatars2.githubusercontent.com/u/26813817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JadAaraj", "html_url": "https://github.com/JadAaraj", "followers_url": "https://api.github.com/users/JadAaraj/followers", "following_url": "https://api.github.com/users/JadAaraj/following{/other_user}", "gists_url": "https://api.github.com/users/JadAaraj/gists{/gist_id}", "starred_url": "https://api.github.com/users/JadAaraj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JadAaraj/subscriptions", "organizations_url": "https://api.github.com/users/JadAaraj/orgs", "repos_url": "https://api.github.com/users/JadAaraj/repos", "events_url": "https://api.github.com/users/JadAaraj/events{/privacy}", "received_events_url": "https://api.github.com/users/JadAaraj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-18T10:21:46Z", "updated_at": "2019-06-20T06:58:57Z", "closed_at": "2019-06-20T06:58:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please don't ask for help in issues. Use StackOverflow with a tag of\r\n**Authlib**.\r\nReporting a bug when using the validate_consent_request(end_user=user), an error of invalid grant is always returned", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/133", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/133/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/133/events", "html_url": "https://github.com/lepture/authlib/issues/133", "id": 451354393, "node_id": "MDU6SXNzdWU0NTEzNTQzOTM=", "number": 133, "title": "OpenID connect documentation improvments", "user": {"login": "leogout", "id": 9843962, "node_id": "MDQ6VXNlcjk4NDM5NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/9843962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leogout", "html_url": "https://github.com/leogout", "followers_url": "https://api.github.com/users/leogout/followers", "following_url": "https://api.github.com/users/leogout/following{/other_user}", "gists_url": "https://api.github.com/users/leogout/gists{/gist_id}", "starred_url": "https://api.github.com/users/leogout/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leogout/subscriptions", "organizations_url": "https://api.github.com/users/leogout/orgs", "repos_url": "https://api.github.com/users/leogout/repos", "events_url": "https://api.github.com/users/leogout/events{/privacy}", "received_events_url": "https://api.github.com/users/leogout/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-03T08:28:26Z", "updated_at": "2019-06-05T04:21:43Z", "closed_at": "2019-06-05T04:21:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Maybe the docs on OpenID connect should mention `OIDCAuthorizationCodeMixin` and all the `UserInfo` + `generate_user_info` stuff. I had to tryhard with my debugger to find out about both of these. Can I make a PR to tell people about it ?\r\nThanks for this library by the way, it is full of good surprises and I love it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/132", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/132/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/132/events", "html_url": "https://github.com/lepture/authlib/issues/132", "id": 448221685, "node_id": "MDU6SXNzdWU0NDgyMjE2ODU=", "number": 132, "title": "authlib fails hard when access_token endpoint does not return valid JSON", "user": {"login": "ThiefMaster", "id": 179599, "node_id": "MDQ6VXNlcjE3OTU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThiefMaster", "html_url": "https://github.com/ThiefMaster", "followers_url": "https://api.github.com/users/ThiefMaster/followers", "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}", "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions", "organizations_url": "https://api.github.com/users/ThiefMaster/orgs", "repos_url": "https://api.github.com/users/ThiefMaster/repos", "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}", "received_events_url": "https://api.github.com/users/ThiefMaster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-24T15:11:17Z", "updated_at": "2019-06-07T00:45:44Z", "closed_at": "2019-06-07T00:45:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "This happens for example with the oauth provider from Mattermost, which returns HTML crap in case of an invalid request (mattermost/mattermost-server#10924).\r\n\r\n```pythontraceback\r\n  File \"F:\\Dev\\mattergate\\mattergate\\app.py\", line 29, in authorize\r\n    token = oauth.mattermost.authorize_access_token()\r\n  File \"F:\\Dev\\mattergate\\.venv\\lib\\site-packages\\authlib\\flask\\client\\oauth.py\", line 261, in authorize_access_token\r\n    token = self.fetch_access_token(redirect_uri, request_token, **params)\r\n  File \"F:\\Dev\\mattergate\\.venv\\lib\\site-packages\\authlib\\client\\client.py\", line 174, in fetch_access_token\r\n    token = session.fetch_access_token(token_endpoint, **kwargs)\r\n  File \"F:\\Dev\\mattergate\\.venv\\lib\\site-packages\\authlib\\client\\oauth2_session.py\", line 102, in fetch_access_token\r\n    return self.fetch_token(url, **kwargs)\r\n  File \"F:\\Dev\\mattergate\\.venv\\lib\\site-packages\\authlib\\oauth2\\client.py\", line 177, in fetch_token\r\n    headers=headers, **session_kwargs\r\n  File \"F:\\Dev\\mattergate\\.venv\\lib\\site-packages\\authlib\\oauth2\\client.py\", line 195, in _fetch_token\r\n    return self.parse_response_token(resp.json())\r\n  File \"F:\\Dev\\mattergate\\.venv\\lib\\site-packages\\requests\\models.py\", line 897, in json\r\n    return complexjson.loads(self.text, **kwargs)\r\n  File \"F:\\Python\\Python37-32\\lib\\json\\__init__.py\", line 348, in loads\r\n    return _default_decoder.decode(s)\r\n  File \"F:\\Python\\Python37-32\\lib\\json\\decoder.py\", line 337, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"F:\\Python\\Python37-32\\lib\\json\\decoder.py\", line 355, in raw_decode\r\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\r\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/131", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/131/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/131/events", "html_url": "https://github.com/lepture/authlib/issues/131", "id": 443598970, "node_id": "MDU6SXNzdWU0NDM1OTg5NzA=", "number": 131, "title": "Possible Bug in RefreshTokenGrant: public clients always raise UnauthorizedClientError", "user": {"login": "dummerbd", "id": 8851361, "node_id": "MDQ6VXNlcjg4NTEzNjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/8851361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dummerbd", "html_url": "https://github.com/dummerbd", "followers_url": "https://api.github.com/users/dummerbd/followers", "following_url": "https://api.github.com/users/dummerbd/following{/other_user}", "gists_url": "https://api.github.com/users/dummerbd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dummerbd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dummerbd/subscriptions", "organizations_url": "https://api.github.com/users/dummerbd/orgs", "repos_url": "https://api.github.com/users/dummerbd/repos", "events_url": "https://api.github.com/users/dummerbd/events{/privacy}", "received_events_url": "https://api.github.com/users/dummerbd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510047, "node_id": "MDU6TGFiZWw3MzI1MTAwNDc=", "url": "https://api.github.com/repos/lepture/authlib/labels/spec", "name": "spec", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-13T20:58:55Z", "updated_at": "2019-07-09T06:47:33Z", "closed_at": "2019-07-09T06:47:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to Section 6 of RFC-6749 there is no special requirement that clients must be confidential to use the refresh_token type grant. See [line 40 in RefreshTokenGrant](https://github.com/lepture/authlib/blob/master/authlib/oauth2/rfc6749/grants/refresh_token.py#L40-L41) where there's an extra check for confidential clients:\r\n```python\r\nclass RefreshTokenGrant(BaseGrant):\r\n\r\n    def _validate_request_client(self):\r\n        # require client authentication for confidential clients or for any\r\n        # client that was issued client credentials (or with other\r\n        # authentication requirements)\r\n        client = self.authenticate_token_endpoint_client()\r\n        log.debug('Validate token request of %r', client)\r\n\r\n        if not client.check_client_type('confidential'):\r\n            raise UnauthorizedClientError()\r\n\r\n        if not client.check_grant_type(self.GRANT_TYPE):\r\n            raise UnauthorizedClientError()\r\n\r\n        return client\r\n```\r\n\r\nUnless I'm misunderstanding something, this is a bug. If someone can confirm I'll make a PR to fix.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/130", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/130/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/130/events", "html_url": "https://github.com/lepture/authlib/issues/130", "id": 443225811, "node_id": "MDU6SXNzdWU0NDMyMjU4MTE=", "number": 130, "title": "Requesting empty scope removes scope from response", "user": {"login": "sirex", "id": 297583, "node_id": "MDQ6VXNlcjI5NzU4Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/297583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirex", "html_url": "https://github.com/sirex", "followers_url": "https://api.github.com/users/sirex/followers", "following_url": "https://api.github.com/users/sirex/following{/other_user}", "gists_url": "https://api.github.com/users/sirex/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirex/subscriptions", "organizations_url": "https://api.github.com/users/sirex/orgs", "repos_url": "https://api.github.com/users/sirex/repos", "events_url": "https://api.github.com/users/sirex/events{/privacy}", "received_events_url": "https://api.github.com/users/sirex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510050, "node_id": "MDU6TGFiZWw3MzI1MTAwNTA=", "url": "https://api.github.com/repos/lepture/authlib/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-13T06:29:32Z", "updated_at": "2019-05-14T05:27:16Z", "closed_at": "2019-05-14T05:27:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "When this [request is made](https://httpie.org/doc#forms):\r\n\r\n    http -a client:secret -f :/auth/token grant_type=client_credentials scope=\r\n\r\nI get response, without `scope` even if it was given in request.\r\n\r\nCode responsible for this is here:\r\n\r\nhttps://github.com/lepture/authlib/blob/master/authlib/oauth2/rfc6750/wrappers.py#L98-L99\r\n\r\nIs this a bug? I would expect `scope` present in response since it was given in request, even if given scope was empty string.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/129", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/129/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/129/events", "html_url": "https://github.com/lepture/authlib/issues/129", "id": 442930160, "node_id": "MDU6SXNzdWU0NDI5MzAxNjA=", "number": 129, "title": "Async Client with OAuth2 and JWT Client Assertions", "user": {"login": "mfulgo", "id": 1708893, "node_id": "MDQ6VXNlcjE3MDg4OTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1708893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfulgo", "html_url": "https://github.com/mfulgo", "followers_url": "https://api.github.com/users/mfulgo/followers", "following_url": "https://api.github.com/users/mfulgo/following{/other_user}", "gists_url": "https://api.github.com/users/mfulgo/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfulgo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfulgo/subscriptions", "organizations_url": "https://api.github.com/users/mfulgo/orgs", "repos_url": "https://api.github.com/users/mfulgo/repos", "events_url": "https://api.github.com/users/mfulgo/events{/privacy}", "received_events_url": "https://api.github.com/users/mfulgo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510049, "node_id": "MDU6TGFiZWw3MzI1MTAwNDk=", "url": "https://api.github.com/repos/lepture/authlib/labels/feature%20request", "name": "feature request", "color": "7057ff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-10T23:52:33Z", "updated_at": "2019-07-02T09:07:16Z", "closed_at": "2019-07-02T09:07:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is somewhat related to #63, but it seemed like it could be tracked separately.\r\n\r\nI'm attempting to use Authlib for a JWT Bearer grant while also using `aiohttp`.\r\n1. I wasn't able to find any documentation on using the _AsyncOAuth2Client for aiohttp_, similar to the documentation for the [AsyncOAuth1Client for aiohttp](/lepture/authlib/blob/master/docs/client/oauth1.rst#asyncoauth1client-for-aiohttp).\r\n2. I'm still hacking and debugging, but there seems to be some issue(s) using the AsyncOAuth2Client in conjunction with a JWT Client Assertion. Then again, this could just be because I've configured it incorrectly. I'm attempting to adapt the information from [here](https://docs.authlib.org/en/latest/specs/rfc7523.html#jwt-oauth2session) to the async client.\r\n\r\nFor point 2, the issue I'm currently running into is that the `data` kwarg passed into `authlib.client.aiohttp.OAuthRequest` is a `dict` rather than a percent-encoded query string: It eventually ends up as the `body` parameter in `authlib/oauth2/rfc7523/auth.py` and is passed to `add_params_to_qs`, which raises an error (because it's expecting a query string). Again... this could just be because I don't have it set up correctly yet.\r\n\r\nI also see a potential issue that I haven't quite gotten to yet: I need to set a `sub` in the JWT that is different from the `iss`. However, it looks like the `_sign` method sets both values to `client_id`.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/125", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/125/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/125/events", "html_url": "https://github.com/lepture/authlib/issues/125", "id": 439621031, "node_id": "MDU6SXNzdWU0Mzk2MjEwMzE=", "number": 125, "title": "OAuth 2.0 Device Authorization Grant", "user": {"login": "asteven", "id": 684915, "node_id": "MDQ6VXNlcjY4NDkxNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/684915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asteven", "html_url": "https://github.com/asteven", "followers_url": "https://api.github.com/users/asteven/followers", "following_url": "https://api.github.com/users/asteven/following{/other_user}", "gists_url": "https://api.github.com/users/asteven/gists{/gist_id}", "starred_url": "https://api.github.com/users/asteven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asteven/subscriptions", "organizations_url": "https://api.github.com/users/asteven/orgs", "repos_url": "https://api.github.com/users/asteven/repos", "events_url": "https://api.github.com/users/asteven/events{/privacy}", "received_events_url": "https://api.github.com/users/asteven/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510049, "node_id": "MDU6TGFiZWw3MzI1MTAwNDk=", "url": "https://api.github.com/repos/lepture/authlib/labels/feature%20request", "name": "feature request", "color": "7057ff", "default": false, "description": ""}, {"id": 732510047, "node_id": "MDU6TGFiZWw3MzI1MTAwNDc=", "url": "https://api.github.com/repos/lepture/authlib/labels/spec", "name": "spec", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-02T14:28:41Z", "updated_at": "2019-10-08T11:49:38Z", "closed_at": "2019-10-08T11:49:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for writing this wonderful library!\r\nDo you think it would be difficult to add support for device flow?\r\n\r\nhttps://datatracker.ietf.org/doc/draft-ietf-oauth-device-flow/\r\nhttps://www.identityserver.com/articles/an-introduction-to-the-oauth-device-flow\r\nhttps://www.ibm.com/blogs/security-identity-access/oauth-device-flows/\r\n\r\nSomeone wrote a proxy server in PHP which may be useful to investigate.\r\nhttps://github.com/aaronpk/Device-Flow-Proxy-Server\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/124", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/124/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/124/events", "html_url": "https://github.com/lepture/authlib/issues/124", "id": 436191029, "node_id": "MDU6SXNzdWU0MzYxOTEwMjk=", "number": 124, "title": "JWE documentation examples use JWS.serialize_compact", "user": {"login": "user37596", "id": 8499516, "node_id": "MDQ6VXNlcjg0OTk1MTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8499516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/user37596", "html_url": "https://github.com/user37596", "followers_url": "https://api.github.com/users/user37596/followers", "following_url": "https://api.github.com/users/user37596/following{/other_user}", "gists_url": "https://api.github.com/users/user37596/gists{/gist_id}", "starred_url": "https://api.github.com/users/user37596/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/user37596/subscriptions", "organizations_url": "https://api.github.com/users/user37596/orgs", "repos_url": "https://api.github.com/users/user37596/repos", "events_url": "https://api.github.com/users/user37596/events{/privacy}", "received_events_url": "https://api.github.com/users/user37596/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 799561986, "node_id": "MDU6TGFiZWw3OTk1NjE5ODY=", "url": "https://api.github.com/repos/lepture/authlib/labels/documentation", "name": "documentation", "color": "c5def5", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-23T13:34:11Z", "updated_at": "2019-04-24T01:55:39Z", "closed_at": "2019-04-24T01:55:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "The JWE documentation page should probably use the JWE.serialize_compact function instead of JWS.serialize_compact.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/123", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/123/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/123/events", "html_url": "https://github.com/lepture/authlib/issues/123", "id": 432905371, "node_id": "MDU6SXNzdWU0MzI5MDUzNzE=", "number": 123, "title": "validate_xyz() in JWTClaims should use UTC?", "user": {"login": "blackmagic02881", "id": 6678156, "node_id": "MDQ6VXNlcjY2NzgxNTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6678156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blackmagic02881", "html_url": "https://github.com/blackmagic02881", "followers_url": "https://api.github.com/users/blackmagic02881/followers", "following_url": "https://api.github.com/users/blackmagic02881/following{/other_user}", "gists_url": "https://api.github.com/users/blackmagic02881/gists{/gist_id}", "starred_url": "https://api.github.com/users/blackmagic02881/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blackmagic02881/subscriptions", "organizations_url": "https://api.github.com/users/blackmagic02881/orgs", "repos_url": "https://api.github.com/users/blackmagic02881/repos", "events_url": "https://api.github.com/users/blackmagic02881/events{/privacy}", "received_events_url": "https://api.github.com/users/blackmagic02881/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-13T21:58:48Z", "updated_at": "2019-04-14T11:16:59Z", "closed_at": "2019-04-14T11:16:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "the time in validate() should be UTC? \r\n\r\nhttps://github.com/lepture/authlib/blob/master/authlib/jose/rfc7519/claims.py#L59\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/121", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/121/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/121/events", "html_url": "https://github.com/lepture/authlib/issues/121", "id": 427245501, "node_id": "MDU6SXNzdWU0MjcyNDU1MDE=", "number": 121, "title": "Token exchange should ignore mismatching redirect URI if grant didn't include one", "user": {"login": "night", "id": 2942184, "node_id": "MDQ6VXNlcjI5NDIxODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2942184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/night", "html_url": "https://github.com/night", "followers_url": "https://api.github.com/users/night/followers", "following_url": "https://api.github.com/users/night/following{/other_user}", "gists_url": "https://api.github.com/users/night/gists{/gist_id}", "starred_url": "https://api.github.com/users/night/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/night/subscriptions", "organizations_url": "https://api.github.com/users/night/orgs", "repos_url": "https://api.github.com/users/night/repos", "events_url": "https://api.github.com/users/night/events{/privacy}", "received_events_url": "https://api.github.com/users/night/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-30T05:26:13Z", "updated_at": "2019-06-30T02:59:23Z", "closed_at": "2019-06-30T02:59:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "At https://github.com/lepture/authlib/blob/b2a47923a2b5cba763e740f6c9f5a59209a5b895/authlib/oauth2/rfc6749/grants/authorization_code.py#L258 redirect uri is always compared for token exchange, even if the grant's is none. This breaks some functionality where clients send a redirect uri in the token exchange despite not including it in the authorize (which just triggers a redirect to the default). The token exchange should ignore this comparison.\r\n\r\nYou can probably update this line to be `if original_redirect_uri and redirect_uri != original_redirect_uri:` to fix\r\n\r\n> ensure that the \"redirect_uri\" parameter is present **if the\r\n> \"redirect_uri\" parameter was included** in the initial authorization\r\n> request as described in Section 4.1.1, and **if included** ensure that\r\n> their values are identical.\r\n\r\nSee https://tools.ietf.org/html/rfc6749#section-4.1.3 for more info.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/120", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/120/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/120/events", "html_url": "https://github.com/lepture/authlib/issues/120", "id": 426791236, "node_id": "MDU6SXNzdWU0MjY3OTEyMzY=", "number": 120, "title": "Refresh token flow doesn't extend access token lifetime", "user": {"login": "night", "id": 2942184, "node_id": "MDQ6VXNlcjI5NDIxODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2942184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/night", "html_url": "https://github.com/night", "followers_url": "https://api.github.com/users/night/followers", "following_url": "https://api.github.com/users/night/following{/other_user}", "gists_url": "https://api.github.com/users/night/gists{/gist_id}", "starred_url": "https://api.github.com/users/night/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/night/subscriptions", "organizations_url": "https://api.github.com/users/night/orgs", "repos_url": "https://api.github.com/users/night/repos", "events_url": "https://api.github.com/users/night/events{/privacy}", "received_events_url": "https://api.github.com/users/night/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-29T02:47:38Z", "updated_at": "2019-04-02T02:12:24Z", "closed_at": "2019-04-02T02:12:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "The existing `expires_in` gets fed into the refreshed token, which causes the token to not be renewable. Ideally a token authorization can be kept alive indefinitely through continually refreshing, but the library is currently forcing a reauthorization due to this issue.\r\n\r\nhttps://github.com/lepture/authlib/blob/master/authlib/oauth2/rfc6749/grants/refresh_token.py#L132", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/119", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/119/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/119/events", "html_url": "https://github.com/lepture/authlib/issues/119", "id": 425612094, "node_id": "MDU6SXNzdWU0MjU2MTIwOTQ=", "number": 119, "title": "Non-Compliant Responses from RFC 7009 Token Revocation", "user": {"login": "night", "id": 2942184, "node_id": "MDQ6VXNlcjI5NDIxODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2942184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/night", "html_url": "https://github.com/night", "followers_url": "https://api.github.com/users/night/followers", "following_url": "https://api.github.com/users/night/following{/other_user}", "gists_url": "https://api.github.com/users/night/gists{/gist_id}", "starred_url": "https://api.github.com/users/night/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/night/subscriptions", "organizations_url": "https://api.github.com/users/night/orgs", "repos_url": "https://api.github.com/users/night/repos", "events_url": "https://api.github.com/users/night/events{/privacy}", "received_events_url": "https://api.github.com/users/night/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-26T19:37:57Z", "updated_at": "2019-03-28T12:50:22Z", "closed_at": "2019-03-28T12:49:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Per the RFC, invalid tokens should return a 200, but `invalid_request` is raised, which makes it a 400 response status.\r\n\r\nhttps://github.com/lepture/authlib/blob/master/authlib/oauth2/rfc7009/revocation.py#L41\r\n\r\n> The authorization server responds with HTTP status code 200 if the\r\n> token has been revoked successfully or if the client submitted an\r\n> invalid token.\r\n>\r\n> Note: invalid tokens do not cause an error response since the client\r\n> cannot handle such an error in a reasonable way.  Moreover, the\r\n> purpose of the revocation request, invalidating the particular token,\r\n> is already achieved.\r\n\r\nMore details at https://tools.ietf.org/html/rfc7009#section-2.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/118", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/118/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/118/events", "html_url": "https://github.com/lepture/authlib/issues/118", "id": 423571171, "node_id": "MDU6SXNzdWU0MjM1NzExNzE=", "number": 118, "title": "OpenIDHybridGrant never call create_token_response() if OpenIDCodeGrant registered first and vice versa", "user": {"login": "namlh-teko", "id": 47663516, "node_id": "MDQ6VXNlcjQ3NjYzNTE2", "avatar_url": "https://avatars0.githubusercontent.com/u/47663516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/namlh-teko", "html_url": "https://github.com/namlh-teko", "followers_url": "https://api.github.com/users/namlh-teko/followers", "following_url": "https://api.github.com/users/namlh-teko/following{/other_user}", "gists_url": "https://api.github.com/users/namlh-teko/gists{/gist_id}", "starred_url": "https://api.github.com/users/namlh-teko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/namlh-teko/subscriptions", "organizations_url": "https://api.github.com/users/namlh-teko/orgs", "repos_url": "https://api.github.com/users/namlh-teko/repos", "events_url": "https://api.github.com/users/namlh-teko/events{/privacy}", "received_events_url": "https://api.github.com/users/namlh-teko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 750923160, "node_id": "MDU6TGFiZWw3NTA5MjMxNjA=", "url": "https://api.github.com/repos/lepture/authlib/labels/break%20change", "name": "break change", "color": "F55826", "default": false, "description": null}, {"id": 799561986, "node_id": "MDU6TGFiZWw3OTk1NjE5ODY=", "url": "https://api.github.com/repos/lepture/authlib/labels/documentation", "name": "documentation", "color": "c5def5", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-21T04:47:57Z", "updated_at": "2019-08-11T04:15:07Z", "closed_at": "2019-08-11T04:15:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "As we implement OpenID Connect for Flask as in [tutorial](https://docs.authlib.org/en/latest/flask/2/openid-connect.html), we realize that `parse_authorization_code()`, `delete_authorization_code()` and `authenticate_user()` in `OpenIDHybridGrant` class are never called.\r\n\r\nThe problem is [`check_token_endpoint()`](https://github.com/lepture/authlib/blob/master/authlib/oauth2/rfc6749/grants/base.py#L44) in [`BaseGrant`](https://github.com/lepture/authlib/blob/master/authlib/oauth2/rfc6749/grants/base.py) return `True` with both `OpenIDCodeGrant` and `OpenIDHybridGrant`. So whichever grant is registered first, get calls `create_token_response()`.\r\n\r\nShould we need to change the implementation of `check_token_endpoint()`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/116", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/116/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/116/events", "html_url": "https://github.com/lepture/authlib/issues/116", "id": 420495801, "node_id": "MDU6SXNzdWU0MjA0OTU4MDE=", "number": 116, "title": "documentation describes version that's not release yet", "user": {"login": "alantw", "id": 894256, "node_id": "MDQ6VXNlcjg5NDI1Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/894256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alantw", "html_url": "https://github.com/alantw", "followers_url": "https://api.github.com/users/alantw/followers", "following_url": "https://api.github.com/users/alantw/following{/other_user}", "gists_url": "https://api.github.com/users/alantw/gists{/gist_id}", "starred_url": "https://api.github.com/users/alantw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alantw/subscriptions", "organizations_url": "https://api.github.com/users/alantw/orgs", "repos_url": "https://api.github.com/users/alantw/repos", "events_url": "https://api.github.com/users/alantw/events{/privacy}", "received_events_url": "https://api.github.com/users/alantw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-13T13:20:51Z", "updated_at": "2019-03-18T13:29:43Z", "closed_at": "2019-03-18T13:27:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "[Current documentation](https://docs.authlib.org/en/latest/index.html) points to the lastest code which hasn't been released yet. The latest version released is 0.10, which can also be found on [Pypi](https://pypi.org/project/Authlib/). I feel like pointing the correct documentation to the corresponding release would definitely be less confusing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/115", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/115/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/115/events", "html_url": "https://github.com/lepture/authlib/issues/115", "id": 420304855, "node_id": "MDU6SXNzdWU0MjAzMDQ4NTU=", "number": 115, "title": "Implicit auth cannot be natively used by confidential clients", "user": {"login": "night", "id": 2942184, "node_id": "MDQ6VXNlcjI5NDIxODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2942184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/night", "html_url": "https://github.com/night", "followers_url": "https://api.github.com/users/night/followers", "following_url": "https://api.github.com/users/night/following{/other_user}", "gists_url": "https://api.github.com/users/night/gists{/gist_id}", "starred_url": "https://api.github.com/users/night/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/night/subscriptions", "organizations_url": "https://api.github.com/users/night/orgs", "repos_url": "https://api.github.com/users/night/repos", "events_url": "https://api.github.com/users/night/events{/privacy}", "received_events_url": "https://api.github.com/users/night/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-03-13T03:51:15Z", "updated_at": "2019-03-19T07:41:59Z", "closed_at": "2019-03-18T13:32:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "An important distinction for confidential clients versus public clients is that confidential clients can also be used as public clients (as long as the authorization server supports it). Over at https://github.com/lepture/authlib/blob/5564d2dba222453e9bad1d8ca580f032e2b863dc/authlib/oauth2/rfc6749/authenticate_client.py#L104 a check is performed to assert that a client is public, which fails for confidential clients when implicit auth is invoked. While a custom authentication scheme can be created for this specific case, there is other logic in this library which depends on clients having a fixed type too, like PKCE. `check_client_type` should probably be removed from such flows, instead relying on the request alone to dictate the authentication schemes supported for the flow (already true to an extent with `TOKEN_ENDPOINT_AUTH_METHODS`).\r\n\r\n> A client may be implemented as a distributed set of components, each\r\n> with a different client type and security context (e.g., a\r\n> distributed client with both a confidential server-based component\r\n> and a public browser-based component).  If the authorization server\r\n> does not provide support for such clients or does not provide\r\n> guidance with regard to their registration, the client SHOULD\r\n> register each component as a separate client.\r\n\r\nMore info at https://tools.ietf.org/html/rfc6749#section-2.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/114", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/114/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/114/events", "html_url": "https://github.com/lepture/authlib/issues/114", "id": 420271702, "node_id": "MDU6SXNzdWU0MjAyNzE3MDI=", "number": 114, "title": "Implicit errors are not always redirected in the fragment", "user": {"login": "night", "id": 2942184, "node_id": "MDQ6VXNlcjI5NDIxODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2942184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/night", "html_url": "https://github.com/night", "followers_url": "https://api.github.com/users/night/followers", "following_url": "https://api.github.com/users/night/following{/other_user}", "gists_url": "https://api.github.com/users/night/gists{/gist_id}", "starred_url": "https://api.github.com/users/night/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/night/subscriptions", "organizations_url": "https://api.github.com/users/night/orgs", "repos_url": "https://api.github.com/users/night/repos", "events_url": "https://api.github.com/users/night/events{/privacy}", "received_events_url": "https://api.github.com/users/night/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-13T01:07:16Z", "updated_at": "2019-03-18T14:07:23Z", "closed_at": "2019-03-18T14:03:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "All OAuth2 errors don't seem to be returned properly for implicit grants, as some are sent within the querystring as opposed to the fragment per the RFC. \r\n\r\nIt looks like the overarching error handling logic isn't customizable per grant, and the authorization server itself has a blanket catch for error handling: https://github.com/lepture/authlib/blob/master/authlib/oauth2/rfc6749/authorization_server.py#L171\r\n\r\n> If the resource owner denies the access request or if the request\r\n> fails for reasons other than a missing or invalid redirection URI,\r\n> the authorization server informs the client by adding the following\r\n> parameters *to the fragment component of the redirection URI* using the\r\n> \"application/x-www-form-urlencoded\" format, per Appendix B:\r\n\r\nSee https://tools.ietf.org/html/rfc6749#section-4.2.2.1 for more details.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/113", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/113/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/113/events", "html_url": "https://github.com/lepture/authlib/issues/113", "id": 420271532, "node_id": "MDU6SXNzdWU0MjAyNzE1MzI=", "number": 113, "title": "Invalid authorization redirect URI appears to redirect to the invalid redirect URI", "user": {"login": "night", "id": 2942184, "node_id": "MDQ6VXNlcjI5NDIxODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2942184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/night", "html_url": "https://github.com/night", "followers_url": "https://api.github.com/users/night/followers", "following_url": "https://api.github.com/users/night/following{/other_user}", "gists_url": "https://api.github.com/users/night/gists{/gist_id}", "starred_url": "https://api.github.com/users/night/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/night/subscriptions", "organizations_url": "https://api.github.com/users/night/orgs", "repos_url": "https://api.github.com/users/night/repos", "events_url": "https://api.github.com/users/night/events{/privacy}", "received_events_url": "https://api.github.com/users/night/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-13T01:06:17Z", "updated_at": "2019-03-18T14:03:18Z", "closed_at": "2019-03-18T14:03:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a user tries to authorize an authorization request containing an invalid redirect URI, the server will redirect said user to the invalid redirect URI.\r\n\r\nThe code at https://github.com/lepture/authlib/blob/5564d2dba222453e9bad1d8ca580f032e2b863dc/authlib/oauth2/rfc6749/grants/base.py#L116 is validating the redirect URI for the grant, and the code at https://github.com/lepture/authlib/blob/5564d2dba222453e9bad1d8ca580f032e2b863dc/authlib/oauth2/rfc6749/authorization_server.py#L169 is redirecting to the grant's `redirect_uri` despite it being invalid.\r\n\r\nThe server should probably be handling this by returning the standard error response, not a redirect.\r\n\r\n> If the resource owner denies the access request or if the request\r\n> fails for reasons **other than a missing or invalid redirection URI**,\r\n> the authorization server informs the client by adding the following\r\n> parameters to the query component of the redirection URI using the\r\n> \"application/x-www-form-urlencoded\" format, per Appendix B:\r\n\r\nsee https://tools.ietf.org/html/rfc6749#section-4.1.2.1 for more details", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/112", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/112/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/112/events", "html_url": "https://github.com/lepture/authlib/issues/112", "id": 419580354, "node_id": "MDU6SXNzdWU0MTk1ODAzNTQ=", "number": 112, "title": "Expired refresh_token should return invalid_grant error", "user": {"login": "xmedeko", "id": 1101801, "node_id": "MDQ6VXNlcjExMDE4MDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1101801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xmedeko", "html_url": "https://github.com/xmedeko", "followers_url": "https://api.github.com/users/xmedeko/followers", "following_url": "https://api.github.com/users/xmedeko/following{/other_user}", "gists_url": "https://api.github.com/users/xmedeko/gists{/gist_id}", "starred_url": "https://api.github.com/users/xmedeko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xmedeko/subscriptions", "organizations_url": "https://api.github.com/users/xmedeko/orgs", "repos_url": "https://api.github.com/users/xmedeko/repos", "events_url": "https://api.github.com/users/xmedeko/events{/privacy}", "received_events_url": "https://api.github.com/users/xmedeko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 732510045, "node_id": "MDU6TGFiZWw3MzI1MTAwNDU=", "url": "https://api.github.com/repos/lepture/authlib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-11T17:01:19Z", "updated_at": "2019-03-18T14:03:18Z", "closed_at": "2019-03-18T14:03:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a refresh token expired, the authlib reply with 400 `invalid_request` error: `Invalid \"refresh_token\" in request.` However, the 400 `invalid_grant` should be returned , see https://tools.ietf.org/html/rfc6749#section-5.2 : \r\n\r\n> The provided authorization grant (e.g., authorization code, resource owner credentials) or **refresh token** is invalid, expired, revoked, ...\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/111", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/111/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/111/events", "html_url": "https://github.com/lepture/authlib/issues/111", "id": 419425129, "node_id": "MDU6SXNzdWU0MTk0MjUxMjk=", "number": 111, "title": "ClientCredentialsGrant cannot use method client_secret_post", "user": {"login": "xmedeko", "id": 1101801, "node_id": "MDQ6VXNlcjExMDE4MDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1101801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xmedeko", "html_url": "https://github.com/xmedeko", "followers_url": "https://api.github.com/users/xmedeko/followers", "following_url": "https://api.github.com/users/xmedeko/following{/other_user}", "gists_url": "https://api.github.com/users/xmedeko/gists{/gist_id}", "starred_url": "https://api.github.com/users/xmedeko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xmedeko/subscriptions", "organizations_url": "https://api.github.com/users/xmedeko/orgs", "repos_url": "https://api.github.com/users/xmedeko/repos", "events_url": "https://api.github.com/users/xmedeko/events{/privacy}", "received_events_url": "https://api.github.com/users/xmedeko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-03-11T11:39:51Z", "updated_at": "2019-03-19T12:40:42Z", "closed_at": "2019-03-18T13:23:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Cannot use client_credentials and POST client secrets in to he request body. The `ClientCredentialsGrant.validate_token_request()` uses `BaseGrant.authenticate_token_endpoint_client()` which:\r\n- doc says Default available methods are: \"none\", \"client_secret_basic\" and \"client_secret_post\".\r\n- But the code uses `self.TOKEN_ENDPOINT_AUTH_METHODS` which is only `['client_secret_basic']`\r\n\r\nNote: the DB `oauth2_client.token_enpoint_auth_method` is ignored. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/110", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/110/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/110/events", "html_url": "https://github.com/lepture/authlib/issues/110", "id": 419239173, "node_id": "MDU6SXNzdWU0MTkyMzkxNzM=", "number": 110, "title": "add support for custom json serializer", "user": {"login": "unitto1", "id": 12610800, "node_id": "MDQ6VXNlcjEyNjEwODAw", "avatar_url": "https://avatars1.githubusercontent.com/u/12610800?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unitto1", "html_url": "https://github.com/unitto1", "followers_url": "https://api.github.com/users/unitto1/followers", "following_url": "https://api.github.com/users/unitto1/following{/other_user}", "gists_url": "https://api.github.com/users/unitto1/gists{/gist_id}", "starred_url": "https://api.github.com/users/unitto1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unitto1/subscriptions", "organizations_url": "https://api.github.com/users/unitto1/orgs", "repos_url": "https://api.github.com/users/unitto1/repos", "events_url": "https://api.github.com/users/unitto1/events{/privacy}", "received_events_url": "https://api.github.com/users/unitto1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 753467112, "node_id": "MDU6TGFiZWw3NTM0NjcxMTI=", "url": "https://api.github.com/repos/lepture/authlib/labels/in%20future", "name": "in future", "color": "aaaced", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-10T22:07:33Z", "updated_at": "2019-09-10T11:21:13Z", "closed_at": "2019-09-10T11:21:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey! When I checked the official site of JWT I found 4 different libs for python. Your lib is most interesting in my opinion. But I was very surprised when I wasn't found the opportunity to pass ujson for CPython or SimpleJson for Pypy as a used serializer. Also, I checked the corresponding module and I can add support for this by try \\ except in imports or via passing serializer object to the init method. Does it interesting for somebody?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/108", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/108/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/108/events", "html_url": "https://github.com/lepture/authlib/issues/108", "id": 413934823, "node_id": "MDU6SXNzdWU0MTM5MzQ4MjM=", "number": 108, "title": "Documentation for Flask, OAuth and Database Setup is unclear", "user": {"login": "proegssilb", "id": 674011, "node_id": "MDQ6VXNlcjY3NDAxMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/674011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/proegssilb", "html_url": "https://github.com/proegssilb", "followers_url": "https://api.github.com/users/proegssilb/followers", "following_url": "https://api.github.com/users/proegssilb/following{/other_user}", "gists_url": "https://api.github.com/users/proegssilb/gists{/gist_id}", "starred_url": "https://api.github.com/users/proegssilb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/proegssilb/subscriptions", "organizations_url": "https://api.github.com/users/proegssilb/orgs", "repos_url": "https://api.github.com/users/proegssilb/repos", "events_url": "https://api.github.com/users/proegssilb/events{/privacy}", "received_events_url": "https://api.github.com/users/proegssilb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 799561986, "node_id": "MDU6TGFiZWw3OTk1NjE5ODY=", "url": "https://api.github.com/repos/lepture/authlib/labels/documentation", "name": "documentation", "color": "c5def5", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-25T05:07:27Z", "updated_at": "2019-08-09T09:34:08Z", "closed_at": "2019-08-09T09:34:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "On the documentation page for the [flask client](https://docs.authlib.org/en/latest/client/flask.html), in the \"Database\" section, the following comments are made:\r\n\r\n> If OAuth login is what you need ONLY, you don\u2019t need to configure a database with fetch_token method.\r\n\r\n> To send requests on behalf of the user, you need to save user\u2019s access token into database after authorize_access_token. Then use the access token with fetch_token from database.\r\n\r\n(Note: Those two quotes are rather far apart, so if you're skimming and find one, it's easy to miss the other)\r\n\r\nThere are a few questions the database code in that section does not answer, though. Flask itself does not define an ORM (which appears to be what you're using for the code example), so I don't know which ORM you're using, nor how you set it up to work with Flask and authlib. I also don't know which particular methods are talked about for \"sending requests\", although I can infer you mean `.get(...)` and `.post(...)` based on text elsewhere on the page. Lastly, that section leaves the references to `fetch_token` undefined.\r\n\r\nLet me provide a couple ideas of how to improve the issue. Feel free to do something different.\r\n\r\nThe code clarity issue could be resolved by linking to the library used (and a tutorial of how to integrate it with Flask), and showing some more code of how the database is integrated with authlib in the \"Database\" section's code example.\r\n\r\nAdditionally, I think the description of when I need to setup a database could be made more clear. Moving the two quotes I found closer together would help, but so would focusing on positive phrasing (for example, \"You need to setup a database when you call functions that access the service's API outside of login, such as `.get` and `.post`.\").\r\n\r\nLastly, converting the references to `fetch_token` to a hyperlink to an API reference page (if one exists) or a section of the document with more information would help make sure everyone knows exactly what is being referenced.\r\n\r\nThose are just my ideas. Maybe there's a different approach that would work more effectively.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/107", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/107/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/107/events", "html_url": "https://github.com/lepture/authlib/issues/107", "id": 411742557, "node_id": "MDU6SXNzdWU0MTE3NDI1NTc=", "number": 107, "title": "Support encryption and/or hashing of client_secret", "user": {"login": "SaintSimmo", "id": 3606998, "node_id": "MDQ6VXNlcjM2MDY5OTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3606998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SaintSimmo", "html_url": "https://github.com/SaintSimmo", "followers_url": "https://api.github.com/users/SaintSimmo/followers", "following_url": "https://api.github.com/users/SaintSimmo/following{/other_user}", "gists_url": "https://api.github.com/users/SaintSimmo/gists{/gist_id}", "starred_url": "https://api.github.com/users/SaintSimmo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SaintSimmo/subscriptions", "organizations_url": "https://api.github.com/users/SaintSimmo/orgs", "repos_url": "https://api.github.com/users/SaintSimmo/repos", "events_url": "https://api.github.com/users/SaintSimmo/events{/privacy}", "received_events_url": "https://api.github.com/users/SaintSimmo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-19T04:41:02Z", "updated_at": "2019-07-04T17:23:35Z", "closed_at": "2019-04-28T23:41:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Should the `client_secret` issued to a new confidential `Client` be encrypted in the database? Considering a `client_secret` is akin to a password it stands to reason it should be encrypted at rest (or hashed with the secret being presented only a single time at Client creation). Currently the builtin OAuth2ClientMixin will store the `client_secret` in plaintext. \r\n\r\nI haven't been able to find anything related to this issue even in passing so I'm curious why it's seemingly not a consideration. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lepture/authlib/issues/106", "repository_url": "https://api.github.com/repos/lepture/authlib", "labels_url": "https://api.github.com/repos/lepture/authlib/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/lepture/authlib/issues/106/comments", "events_url": "https://api.github.com/repos/lepture/authlib/issues/106/events", "html_url": "https://github.com/lepture/authlib/issues/106", "id": 410822803, "node_id": "MDU6SXNzdWU0MTA4MjI4MDM=", "number": 106, "title": "Allow arbitrary redirect_uri", "user": {"login": "xmedeko", "id": 1101801, "node_id": "MDQ6VXNlcjExMDE4MDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1101801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xmedeko", "html_url": "https://github.com/xmedeko", "followers_url": "https://api.github.com/users/xmedeko/followers", "following_url": "https://api.github.com/users/xmedeko/following{/other_user}", "gists_url": "https://api.github.com/users/xmedeko/gists{/gist_id}", "starred_url": "https://api.github.com/users/xmedeko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xmedeko/subscriptions", "organizations_url": "https://api.github.com/users/xmedeko/orgs", "repos_url": "https://api.github.com/users/xmedeko/repos", "events_url": "https://api.github.com/users/xmedeko/events{/privacy}", "received_events_url": "https://api.github.com/users/xmedeko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-15T15:35:51Z", "updated_at": "2019-03-18T14:03:19Z", "closed_at": "2019-03-18T14:03:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to have a possibility that client may pass any redirect URI, not just URIs specified in DB. Desktop applications usually need to pass `http://localhost:xyz` where the xyz is the first free random port. E.g. if no `redirect_uri` is specified in DB, then allow all, see class `OAuth2ClientMixin`:\r\n```py\r\n   def check_redirect_uri(self, redirect_uri):\r\n        return not self.redirect_uris or redirect_uri in self.redirect_uris \r\n```\r\n(and the doc in the parent class `ClientMixin.check_redirect_uri`).\r\n\r\nI know I may override the default behaviour, but I think this behaviour should be by default. (Now, if no `redirect_uri` is specified, then all clients are blocked.)\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}]}