{"total_count": 770, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/biopython/biopython/issues/3213", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3213/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3213/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3213/events", "html_url": "https://github.com/biopython/biopython/issues/3213", "id": 679035505, "node_id": "MDU6SXNzdWU2NzkwMzU1MDU=", "number": 3213, "title": "Atom object has no attribute atom.disordered_get_list when saving PDB file", "user": {"login": "Minys233", "id": 23317405, "node_id": "MDQ6VXNlcjIzMzE3NDA1", "avatar_url": "https://avatars0.githubusercontent.com/u/23317405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Minys233", "html_url": "https://github.com/Minys233", "followers_url": "https://api.github.com/users/Minys233/followers", "following_url": "https://api.github.com/users/Minys233/following{/other_user}", "gists_url": "https://api.github.com/users/Minys233/gists{/gist_id}", "starred_url": "https://api.github.com/users/Minys233/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Minys233/subscriptions", "organizations_url": "https://api.github.com/users/Minys233/orgs", "repos_url": "https://api.github.com/users/Minys233/repos", "events_url": "https://api.github.com/users/Minys233/events{/privacy}", "received_events_url": "https://api.github.com/users/Minys233/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "JoaoRodrigues", "id": 237328, "node_id": "MDQ6VXNlcjIzNzMyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/237328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoaoRodrigues", "html_url": "https://github.com/JoaoRodrigues", "followers_url": "https://api.github.com/users/JoaoRodrigues/followers", "following_url": "https://api.github.com/users/JoaoRodrigues/following{/other_user}", "gists_url": "https://api.github.com/users/JoaoRodrigues/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoaoRodrigues/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoaoRodrigues/subscriptions", "organizations_url": "https://api.github.com/users/JoaoRodrigues/orgs", "repos_url": "https://api.github.com/users/JoaoRodrigues/repos", "events_url": "https://api.github.com/users/JoaoRodrigues/events{/privacy}", "received_events_url": "https://api.github.com/users/JoaoRodrigues/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "JoaoRodrigues", "id": 237328, "node_id": "MDQ6VXNlcjIzNzMyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/237328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoaoRodrigues", "html_url": "https://github.com/JoaoRodrigues", "followers_url": "https://api.github.com/users/JoaoRodrigues/followers", "following_url": "https://api.github.com/users/JoaoRodrigues/following{/other_user}", "gists_url": "https://api.github.com/users/JoaoRodrigues/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoaoRodrigues/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoaoRodrigues/subscriptions", "organizations_url": "https://api.github.com/users/JoaoRodrigues/orgs", "repos_url": "https://api.github.com/users/JoaoRodrigues/repos", "events_url": "https://api.github.com/users/JoaoRodrigues/events{/privacy}", "received_events_url": "https://api.github.com/users/JoaoRodrigues/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-08-14T09:37:55Z", "updated_at": "2020-08-17T22:30:48Z", "closed_at": "2020-08-17T22:30:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version)\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nimport Bio; print(Bio.__version__)\r\n```\r\n3.8.5 (default, Aug  5 2020, 08:36:46) \r\n[GCC 7.3.0]\r\nCPython\r\nLinux-5.4.0-42-generic-x86_64-with-glibc2.10\r\n1.77\r\n\r\n### Expected behaviour\r\n\r\n`PDBIO.save()` function should save a `Chain` object normally.\r\n\r\n### Actual behaviour\r\nThe function failed on calling `atom.disordered_get_list()` on some proteins. For example, `pdb/ah/pdb1ah7.ent.gz`, which was directly downloaded from RCSB PDB. \r\n\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 13, in <module>\r\n    io.save('test.pdb')\r\n  File \"/home/minys/.conda/envs/bio/lib/python3.8/site-packages/Bio/PDB/PDBIO.py\", line 339, in save\r\n    for atom in residue.get_unpacked_list():\r\n  File \"/home/minys/.conda/envs/bio/lib/python3.8/site-packages/Bio/PDB/Residue.py\", line 88, in get_unpacked_list\r\n    undisordered_atom_list += atom.disordered_get_list()\r\nAttributeError: 'Atom' object has no attribute 'disordered_get_list'\r\n```\r\n\r\n\r\n### Steps to reproduce\r\nTo run this piece of code, please download `pdb1ah7.ent.gz` in advance, for simplicity, here PDBList is not used. The task is to save a protein chain into an individual file.\r\n\r\nThis issue may be related to #455 , which seems not fixed yet.\r\n\r\n```python\r\nfrom Bio.PDB import PDBIO, PDBParser\r\nimport gzip\r\n\r\npdb_file = '/data/pdb/ah/pdb1ah7.ent.gz'\r\npdbparser = PDBParser()\r\ntarget = pdbparser.get_structure('id', gzip.open(pdb_file, 'rt'))[0]['A']\r\nio = PDBIO()\r\nio.set_structure(target)\r\nio.save('test.pdb')\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3207", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3207/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3207/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3207/events", "html_url": "https://github.com/biopython/biopython/issues/3207", "id": 678513008, "node_id": "MDU6SXNzdWU2Nzg1MTMwMDg=", "number": 3207, "title": "read ACE files  alignement", "user": {"login": "simonjuleseric2", "id": 22940349, "node_id": "MDQ6VXNlcjIyOTQwMzQ5", "avatar_url": "https://avatars2.githubusercontent.com/u/22940349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonjuleseric2", "html_url": "https://github.com/simonjuleseric2", "followers_url": "https://api.github.com/users/simonjuleseric2/followers", "following_url": "https://api.github.com/users/simonjuleseric2/following{/other_user}", "gists_url": "https://api.github.com/users/simonjuleseric2/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonjuleseric2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonjuleseric2/subscriptions", "organizations_url": "https://api.github.com/users/simonjuleseric2/orgs", "repos_url": "https://api.github.com/users/simonjuleseric2/repos", "events_url": "https://api.github.com/users/simonjuleseric2/events{/privacy}", "received_events_url": "https://api.github.com/users/simonjuleseric2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-13T15:08:13Z", "updated_at": "2020-08-14T09:31:25Z", "closed_at": "2020-08-14T09:31:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version 1.76, Python version 3.7.7, and operating\r\nsystem as follows:\r\n\r\n\r\n### Expected behaviour\r\n\r\nShown in this exemple:\r\n\r\nhttps://biopython.org/wiki/ACE_contig_to_alignment\r\n\r\n### Actual behaviour\r\nModuleNotFoundError: No module named 'Bio.Align.Generic'\r\n\r\n\r\n### Steps to reproduce\r\n\r\n(*Please fill this in *)\r\nfrom Bio.Align.Generic import Alignment", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3205", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3205/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3205/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3205/events", "html_url": "https://github.com/biopython/biopython/issues/3205", "id": 678116643, "node_id": "MDU6SXNzdWU2NzgxMTY2NDM=", "number": 3205, "title": "Allow Bio.Align.PairwiseAligner to handle letters not in the score matrix", "user": {"login": "ccwang002", "id": 1544283, "node_id": "MDQ6VXNlcjE1NDQyODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1544283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ccwang002", "html_url": "https://github.com/ccwang002", "followers_url": "https://api.github.com/users/ccwang002/followers", "following_url": "https://api.github.com/users/ccwang002/following{/other_user}", "gists_url": "https://api.github.com/users/ccwang002/gists{/gist_id}", "starred_url": "https://api.github.com/users/ccwang002/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ccwang002/subscriptions", "organizations_url": "https://api.github.com/users/ccwang002/orgs", "repos_url": "https://api.github.com/users/ccwang002/repos", "events_url": "https://api.github.com/users/ccwang002/events{/privacy}", "received_events_url": "https://api.github.com/users/ccwang002/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-13T03:15:17Z", "updated_at": "2020-08-13T15:08:01Z", "closed_at": "2020-08-13T15:08:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\n3.8.3 | packaged by conda-forge | (default, Jun  1 2020, 17:21:09) \r\n[Clang 9.0.1 ]\r\nCPython\r\nmacOS-10.15.6-x86_64-i386-64bit\r\n1.77\r\n\r\n\r\n### Expected behaviour\r\nI was trying to align [Q92813](https://www.uniprot.org/uniprot/Q92813)'s protein sequence to its isoform, which contains an amino acide Selenocysteine `U`. For simplicity, let's just align a part of this protrein's sequence to itself: `HWLEKNFSKRUKKTRLAG`. I ran the global alignment using EMBOSS Needle with the default score matrix BLOSUM62, and here is the output:\r\n\r\n```\r\n#=======================================\r\n# Matrix: EBLOSUM62\r\n# Gap_penalty: 10.0\r\n# Extend_penalty: 0.5\r\n#\r\n# Length: 18\r\n# Identity:      17/18 (94.4%)\r\n# Similarity:    17/18 (94.4%)\r\n# Gaps:           0/18 ( 0.0%)\r\n# Score: 93.0\r\n#=======================================\r\n\r\nEMBOSS_001         1 HWLEKNFSKRUKKTRLAG     18\r\n                     |||||||||| |||||||\r\nEMBOSS_001         1 HWLEKNFSKRUKKTRLAG     18\r\n```\r\n\r\nDespite that `U` is not in BLOSUM62 (should it be covered by `X`?), Needle is able to generate an alignment with `U` being mismatch. Currently Bio.Align.PairwiseAligner will raise an exception of having unknown letter in the sequence.\r\n\r\nI was wondering if there could be an option in Bio.Align.PairwiseAligner to enable the handling of unknown letter in the sequence. If so, I expect it to perform the same as Needle given the same parameters. Unfortunately, I wasn't sure how Needle handles an unknown letter (their method is in `emboss/needle.c`), nor how the Needleman\u2013Wunsch algorithm should handle it in general.\r\n\r\n\r\n### Actual behaviour\r\nCurrently, Bio.Align.PairwiseAligner will raise an exception when encountering an unknown letter in the score matrix:\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-4-b582941a1d95> in <module>\r\n----> 1 aligner.align(seq1, seq2)[0]\r\n\r\n~/miniconda3/envs/cptac/lib/python3.8/site-packages/Bio/Align/__init__.py in align(self, seqA, seqB)\r\n   1554         if isinstance(seqB, Seq):\r\n   1555             seqB = str(seqB)\r\n-> 1556         score, paths = _aligners.PairwiseAligner.align(self, seqA, seqB)\r\n   1557         alignments = PairwiseAlignments(seqA, seqB, score, paths)\r\n   1558         return alignments\r\n\r\nValueError: sequence contains letters not in the alphabet\r\n```\r\n\r\nIf the score matrix is not defined, the alignment works as expected:\r\n\r\n```pycon\r\n>>> aligner2 = Align.PairwiseAligner()\r\n>>> print(aligner2.align(seq1, seq2)[0])\r\nHWLEKNFSKRUKKTRLAG\r\n||||||||||||||||||\r\nHWLEKNFSKRUKKTRLAG\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```python\r\nfrom Bio import Align\r\nfrom Bio.Align import substitution_matrices\r\n\r\n# Act like EMBOSS Needle\r\naligner = Align.PairwiseAligner()\r\naligner.mode = \"global\"\r\naligner.open_gap_score = -10\r\naligner.extend_gap_score = -0.5\r\naligner.substitution_matrix = substitution_matrices.load(\"BLOSUM62\")\r\nseq1 = 'HWLEKNFSKRUKKTRLAG'\r\nseq2 = 'HWLEKNFSKRUKKTRLAG'\r\naligner.align(seq1, seq2)  # raise exception\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3204", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3204/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3204/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3204/events", "html_url": "https://github.com/biopython/biopython/issues/3204", "id": 677562347, "node_id": "MDU6SXNzdWU2Nzc1NjIzNDc=", "number": 3204, "title": "PDBParser not parsing all atoms", "user": {"login": "edarl", "id": 48542500, "node_id": "MDQ6VXNlcjQ4NTQyNTAw", "avatar_url": "https://avatars0.githubusercontent.com/u/48542500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edarl", "html_url": "https://github.com/edarl", "followers_url": "https://api.github.com/users/edarl/followers", "following_url": "https://api.github.com/users/edarl/following{/other_user}", "gists_url": "https://api.github.com/users/edarl/gists{/gist_id}", "starred_url": "https://api.github.com/users/edarl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edarl/subscriptions", "organizations_url": "https://api.github.com/users/edarl/orgs", "repos_url": "https://api.github.com/users/edarl/repos", "events_url": "https://api.github.com/users/edarl/events{/privacy}", "received_events_url": "https://api.github.com/users/edarl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-08-12T10:01:00Z", "updated_at": "2020-08-13T21:31:43Z", "closed_at": "2020-08-13T21:31:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython 1.77 (conda, conda-forge channel) , Python 3.8.5, and operating system as follows: \r\n\r\n```python\r\nPython 3.8.5 | packaged by conda-forge | (default, Jul 31 2020, 02:39:48)\r\n[GCC 7.5.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import sys; print(sys.version)\r\n3.8.5 | packaged by conda-forge | (default, Jul 31 2020, 02:39:48)\r\n[GCC 7.5.0]\r\n>>> import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nLinux-4.15.0-76-generic-x86_64-with-glibc2.10\r\n>>> import Bio; print(Bio.__version__)\r\n1.77\r\n```\r\n\r\n### Expected behaviour\r\n\r\nParsing all atoms in the PDB file into the Biopython `structure` object. \r\n  \r\n### Actual behaviour\r\n\r\nThe PDB file parses into a `structure` object however there are atoms missing. For reference, the PDB file has been modified from the one in the PDB by  [RING](http://old.protein.bio.unipd.it/ring/about) software. \r\n\r\nI get the warnings listed below when I parse the structure but there's nothing to suggest the missing atoms. I've parsed other PDB files and know there is normally an \"atom missing\" warning that can come up so I'm confused what's happening with this structure to parse without atom warnings and yet be missing atoms. \r\n\r\n```\r\n/home/ubuntu/miniconda3/envs/msci_vep/lib/python3.8/site-packages/Bio/PDB/StructureBuilder.py:89: PDBConstructionWarning: WARNING: Chain A is discontinuous at line 24627.\r\n  warnings.warn(\r\n/home/ubuntu/miniconda3/envs/msci_vep/lib/python3.8/site-packages/Bio/PDB/StructureBuilder.py:89: PDBConstructionWarning: WARNING: Chain B is discontinuous at line 24745.\r\n  warnings.warn(\r\n```\r\n\r\nTo work out how many atoms are missing I saved the Biopython `structure` as a pdb file, assuming all atoms not in the `structure` aren't being read/can't be accessed using Biopython. \r\n\r\nDoing a `wc -l *` of both files shows there's a difference of 137 lines. \r\n\r\n> 24882 1EWQ_RING.pdb\r\n> 24745 1EWQ_RING_bioout.pdb \r\n\r\nI also wrote [this script](https://github.com/edarl/rand-scripts/blob/master/missingHanalysis.py) to output exactly which atoms are missing, but I can't see anything in the atom list that looks like it wouldn't parse. \r\n\r\nI've attached my input file (1EWQ_RING.pdb), Biopython produced output file (1EWQ_RING_bioout.pdb) and the atom difference list (1EWQ_pdb_diff.csv) I made. \r\n\r\nAny help as to why those atoms aren't being parsed into Biopython would be greatly appreciated!\r\n\r\n\r\n```python\r\ndef PDB_parser(PDB_name, PDB_path):\r\n    parser = PDBParser(QUIET=False, PERMISSIVE=True)\r\n    structure = parser.get_structure(PDB_name, PDB_path)\r\n    return structure\r\n\r\ndef save_struct(structure, name):\r\n    io = PDBIO()\r\n    io.set_structure(structure)\r\n    try:\r\n        io.save(name)\r\n        print(f\"Successfully saved file:   {name}\")\r\n    except IOError:\r\n        print(\"Unable to save file\")\r\n```\r\n### Steps to reproduce\r\nParse PDB file to structure, save structure to a new PDB file, compare atoms in both PDB files.\r\n\r\nFILES: [1EWQ.zip](https://github.com/biopython/biopython/files/5061544/1EWQ.zip)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3197", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3197/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3197/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3197/events", "html_url": "https://github.com/biopython/biopython/issues/3197", "id": 674724362, "node_id": "MDU6SXNzdWU2NzQ3MjQzNjI=", "number": 3197, "title": "Wrappers for blastdb_aliastool, blastdbcmd in Biopython modules?", "user": {"login": "bsmith4133", "id": 69334328, "node_id": "MDQ6VXNlcjY5MzM0MzI4", "avatar_url": "https://avatars2.githubusercontent.com/u/69334328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bsmith4133", "html_url": "https://github.com/bsmith4133", "followers_url": "https://api.github.com/users/bsmith4133/followers", "following_url": "https://api.github.com/users/bsmith4133/following{/other_user}", "gists_url": "https://api.github.com/users/bsmith4133/gists{/gist_id}", "starred_url": "https://api.github.com/users/bsmith4133/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bsmith4133/subscriptions", "organizations_url": "https://api.github.com/users/bsmith4133/orgs", "repos_url": "https://api.github.com/users/bsmith4133/repos", "events_url": "https://api.github.com/users/bsmith4133/events{/privacy}", "received_events_url": "https://api.github.com/users/bsmith4133/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-07T03:11:50Z", "updated_at": "2020-08-16T21:05:35Z", "closed_at": "2020-08-16T21:05:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nI'm trying to make a pipeline using the Bio.Blast.Applications module. In the BioPython documentation, there doesn't seem to be wrappers for tools such as blastdb_aliastool and blastbcmd. Does anyone know if they exist? If not, would the best alternative be to use the Python subprocess module for command line use?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3189", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3189/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3189/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3189/events", "html_url": "https://github.com/biopython/biopython/issues/3189", "id": 669568360, "node_id": "MDU6SXNzdWU2Njk1NjgzNjA=", "number": 3189, "title": "Bio/Statistics/lowess.py trys to import non-existant  Bio.Cluster.median", "user": {"login": "mr-c", "id": 1330696, "node_id": "MDQ6VXNlcjEzMzA2OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1330696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mr-c", "html_url": "https://github.com/mr-c", "followers_url": "https://api.github.com/users/mr-c/followers", "following_url": "https://api.github.com/users/mr-c/following{/other_user}", "gists_url": "https://api.github.com/users/mr-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/mr-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mr-c/subscriptions", "organizations_url": "https://api.github.com/users/mr-c/orgs", "repos_url": "https://api.github.com/users/mr-c/repos", "events_url": "https://api.github.com/users/mr-c/events{/privacy}", "received_events_url": "https://api.github.com/users/mr-c/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-31T08:38:07Z", "updated_at": "2020-07-31T09:56:27Z", "closed_at": "2020-07-31T09:56:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/biopython/biopython/blob/master/Bio/Statistics/lowess.py#L27\r\n\r\n`Bio.Cluster.median` was removed in 2017 via bd91de581a76f6f4a8c61a2d9c54636625104c15\r\n\r\nThere's a fallback to numpy, shall I remove the `from Bio.Cluster import median` ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3181", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3181/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3181/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3181/events", "html_url": "https://github.com/biopython/biopython/issues/3181", "id": 668489273, "node_id": "MDU6SXNzdWU2Njg0ODkyNzM=", "number": 3181, "title": "ValueError: End location must be greater than or equal to start location when reading SnapGene circular map", "user": {"login": "nicolazilio", "id": 2800360, "node_id": "MDQ6VXNlcjI4MDAzNjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2800360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolazilio", "html_url": "https://github.com/nicolazilio", "followers_url": "https://api.github.com/users/nicolazilio/followers", "following_url": "https://api.github.com/users/nicolazilio/following{/other_user}", "gists_url": "https://api.github.com/users/nicolazilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolazilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolazilio/subscriptions", "organizations_url": "https://api.github.com/users/nicolazilio/orgs", "repos_url": "https://api.github.com/users/nicolazilio/repos", "events_url": "https://api.github.com/users/nicolazilio/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolazilio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-07-30T08:29:29Z", "updated_at": "2020-07-31T14:08:57Z", "closed_at": "2020-07-31T14:08:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating system as follows:\r\n\r\n```\r\n>>> import sys; print(sys.version)\r\n3.6.8 (default, May 24 2019, 19:22:50) \r\n[GCC 6.3.0 20170516]\r\n>>> import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nLinux-4.19.0-9-amd64-x86_64-with-debian-10.4\r\n>>> import Bio; print(Bio.__version__)\r\n1.77\r\n```\r\n\r\n### Expected behaviour\r\n\r\nSnapGene encodes features that span the start/end of a circular map such that their start coordinates are greater than their end coordinates (see attached example).\r\n\r\n### Actual behaviour\r\n\r\nBioPython does not like features whose start coordinates are greater than their end coordinates, for example\r\n\r\n```\r\nFile \"/home/lib/python3.6/site-packages/Bio/SeqFeature.py\", line 801, in __init__\r\n    f\"End location ({self.end}) must be greater than \"\r\nValueError: End location (2) must be greater than or equal to start location (4391)\r\n```\r\n\r\n### Steps to reproduce\r\n\r\nI have attached a relevant SnapGene file to this message, if you want to try to reproduce the issue.\r\n[example.zip](https://github.com/biopython/biopython/files/4999973/example.zip)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3180", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3180/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3180/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3180/events", "html_url": "https://github.com/biopython/biopython/issues/3180", "id": 668473278, "node_id": "MDU6SXNzdWU2Njg0NzMyNzg=", "number": 3180, "title": "UnicodeDecodeError when reading SnapGene files", "user": {"login": "nicolazilio", "id": 2800360, "node_id": "MDQ6VXNlcjI4MDAzNjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2800360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicolazilio", "html_url": "https://github.com/nicolazilio", "followers_url": "https://api.github.com/users/nicolazilio/followers", "following_url": "https://api.github.com/users/nicolazilio/following{/other_user}", "gists_url": "https://api.github.com/users/nicolazilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicolazilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicolazilio/subscriptions", "organizations_url": "https://api.github.com/users/nicolazilio/orgs", "repos_url": "https://api.github.com/users/nicolazilio/repos", "events_url": "https://api.github.com/users/nicolazilio/events{/privacy}", "received_events_url": "https://api.github.com/users/nicolazilio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-30T08:10:34Z", "updated_at": "2020-07-31T14:06:18Z", "closed_at": "2020-07-31T14:06:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating system as follows:\r\n\r\n```\r\n>>> import sys; print(sys.version)\r\n3.6.8 (default, May 24 2019, 19:22:50) \r\n[GCC 6.3.0 20170516]\r\n>>> import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nLinux-4.19.0-9-amd64-x86_64-with-debian-10.4\r\n>>> import Bio; print(Bio.__version__)\r\n1.77\r\n```\r\n\r\n### Expected behaviour\r\n\r\nI would like to get feature names for > 4000 SnapGene plasmid maps. Using SnapGene Server, I can retrieve these data from all plasmid maps. I would expect the same using BioPython.\r\n\r\n### Actual behaviour\r\n\r\nBioPython fails to retrieve feature names for > 80% of the plasmid maps due to errors similar to the following\r\n\r\n```\r\nFile \"/home/lib/python3.6/site-packages/Bio/SeqIO/SnapGeneIO.py\", line 119, in _parse_features_packet\r\n    xml = parseString(data.decode(\"ASCII\"))\r\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 709: ordinal not in range(128)\r\n```\r\n\r\n### Possible solution\r\n\r\nI amended `Bio/SeqIO/SnapGeneIO.py` to replace all occurrences of `ASCII` to `utf8`. This fixes the exception shown above. Is there a good reason for using `ASCII` rather than `utf8`, given that biologists very often use special characters and the SnapGene format does support them?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3174", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3174/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3174/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3174/events", "html_url": "https://github.com/biopython/biopython/issues/3174", "id": 667715574, "node_id": "MDU6SXNzdWU2Njc3MTU1NzQ=", "number": 3174, "title": "How to retrieve the number of articles from mesh or NCT", "user": {"login": "federiconuta", "id": 51603270, "node_id": "MDQ6VXNlcjUxNjAzMjcw", "avatar_url": "https://avatars1.githubusercontent.com/u/51603270?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federiconuta", "html_url": "https://github.com/federiconuta", "followers_url": "https://api.github.com/users/federiconuta/followers", "following_url": "https://api.github.com/users/federiconuta/following{/other_user}", "gists_url": "https://api.github.com/users/federiconuta/gists{/gist_id}", "starred_url": "https://api.github.com/users/federiconuta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federiconuta/subscriptions", "organizations_url": "https://api.github.com/users/federiconuta/orgs", "repos_url": "https://api.github.com/users/federiconuta/repos", "events_url": "https://api.github.com/users/federiconuta/events{/privacy}", "received_events_url": "https://api.github.com/users/federiconuta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-29T10:01:42Z", "updated_at": "2020-07-29T13:17:35Z", "closed_at": "2020-07-29T13:17:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nHi all,\r\n\r\nI am currently trying to extract the number of articles from a set of conditions that I have stored in my db. The point is that I cannot simply input the names that I have since variations of them (e.g. \"Diabetes\" instead of \"diabetes\" or \"short term insomnia\" rather than \"short-term insomnia\") may lead to different results.\r\nHence my ideas were basically 2: 1) associate a mesh term to each condition in the data and then associate to each mesh term the number of article referred to it; 2) better option: since I have the New Clinical trials IDs (NCTIDs) of the conditions, use the NCT as secondary identifiers to retrieve the number of articles.\r\n\r\nNow I have failed to do both since I cannot understand neither how to reteieve mesh terms (from mesh database) inputting a condition (avoiding the mentioned problems of different results for differently written conditions) nor how to input NCT as secondary IDs. For the moment I have, for a single NCT Id the following:\r\n\r\n```python\r\nfrom Bio import Entrez\r\nEntrez.email = myemail@gmail.com\r\nid = \"NCTid[si]\"  #i.e. a generic id that I have\r\nhandle = Entrez.efetch(db=\"pubmed\", id=id, rettype=\"gb\",retmode=\"xml\")\r\nrecord =Entrez.handle\r\nabstract =[\"PubmedArticle\"][0][\"MedlineCitation]\"Article]\r\n```\r\nMoreover I would like to have the number of citations in a single year fro. 2004 to 2013. So, the expected results should be:\r\nInput = NCTid\r\nOutput = number of articles for that NCT in 2004,number of articles for that NCT in 2005,...number of articles for that NCT in 2013.\r\n\r\nThe above code it's just an attempt but it does not give me what I would like.\r\n\r\nIs there a way to reach my goal?\r\n\r\nThank you,\r\n\r\nFederico\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3137", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3137/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3137/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3137/events", "html_url": "https://github.com/biopython/biopython/issues/3137", "id": 665335833, "node_id": "MDU6SXNzdWU2NjUzMzU4MzM=", "number": 3137, "title": "Dead links in the README", "user": {"login": "jvfe", "id": 43506501, "node_id": "MDQ6VXNlcjQzNTA2NTAx", "avatar_url": "https://avatars2.githubusercontent.com/u/43506501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvfe", "html_url": "https://github.com/jvfe", "followers_url": "https://api.github.com/users/jvfe/followers", "following_url": "https://api.github.com/users/jvfe/following{/other_user}", "gists_url": "https://api.github.com/users/jvfe/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvfe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvfe/subscriptions", "organizations_url": "https://api.github.com/users/jvfe/orgs", "repos_url": "https://api.github.com/users/jvfe/repos", "events_url": "https://api.github.com/users/jvfe/events{/privacy}", "received_events_url": "https://api.github.com/users/jvfe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-24T18:16:07Z", "updated_at": "2020-07-24T20:36:15Z", "closed_at": "2020-07-24T20:36:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the \"Optional Dependencies\" part, regarding networkx and pygraphviz,\r\n\r\n- Networkx should be https://networkx.github.io/ not http://networkx.lanl.gov/\r\n\r\n- Pygraphviz should be https://pygraphviz.github.io/ not http://networkx.lanl.gov/pygraphviz/\r\n\r\nI can submit a quick PR if that's all there is to it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3134", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3134/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3134/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3134/events", "html_url": "https://github.com/biopython/biopython/issues/3134", "id": 664898677, "node_id": "MDU6SXNzdWU2NjQ4OTg2Nzc=", "number": 3134, "title": "PDBIO save failed when chain_id is more that one character long", "user": {"login": "akabiraka", "id": 50527219, "node_id": "MDQ6VXNlcjUwNTI3MjE5", "avatar_url": "https://avatars2.githubusercontent.com/u/50527219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akabiraka", "html_url": "https://github.com/akabiraka", "followers_url": "https://api.github.com/users/akabiraka/followers", "following_url": "https://api.github.com/users/akabiraka/following{/other_user}", "gists_url": "https://api.github.com/users/akabiraka/gists{/gist_id}", "starred_url": "https://api.github.com/users/akabiraka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akabiraka/subscriptions", "organizations_url": "https://api.github.com/users/akabiraka/orgs", "repos_url": "https://api.github.com/users/akabiraka/repos", "events_url": "https://api.github.com/users/akabiraka/events{/privacy}", "received_events_url": "https://api.github.com/users/akabiraka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-07-24T03:55:48Z", "updated_at": "2020-07-27T16:51:06Z", "closed_at": "2020-07-27T16:51:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```\r\n1.77\r\n3.6.9 (default, Jul 17 2020, 12:50:27) \r\n[GCC 8.4.0]\r\nCPython\r\nLinux-5.4.0-42-generic-x86_64-with-Ubuntu-18.04-bionic\r\n```\r\n### Error\r\nI am trying to save a chain (BBB) of protein 6tif using PDBIO where the chains are AAA and BBB (not single character). While saving it is getting:\r\n```\r\nFile \"$HOME/python3_venv/lib/python3.6/site-packages/Bio/PDB/PDBIO.py\", line 218, in _get_atom_line\r\n    return _ATOM_FORMAT_STRING % args\r\nTypeError: %c requires int or char\r\n```\r\nBecause the expected chain_id should be 1 char long.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3118", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3118/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3118/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3118/events", "html_url": "https://github.com/biopython/biopython/issues/3118", "id": 664129296, "node_id": "MDU6SXNzdWU2NjQxMjkyOTY=", "number": 3118, "title": "How to use no parameter options in NcbiblastnCommandline", "user": {"login": "Huangzhiqang", "id": 52337195, "node_id": "MDQ6VXNlcjUyMzM3MTk1", "avatar_url": "https://avatars2.githubusercontent.com/u/52337195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Huangzhiqang", "html_url": "https://github.com/Huangzhiqang", "followers_url": "https://api.github.com/users/Huangzhiqang/followers", "following_url": "https://api.github.com/users/Huangzhiqang/following{/other_user}", "gists_url": "https://api.github.com/users/Huangzhiqang/gists{/gist_id}", "starred_url": "https://api.github.com/users/Huangzhiqang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Huangzhiqang/subscriptions", "organizations_url": "https://api.github.com/users/Huangzhiqang/orgs", "repos_url": "https://api.github.com/users/Huangzhiqang/repos", "events_url": "https://api.github.com/users/Huangzhiqang/events{/privacy}", "received_events_url": "https://api.github.com/users/Huangzhiqang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-23T00:34:21Z", "updated_at": "2020-07-23T10:19:31Z", "closed_at": "2020-07-23T10:13:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear developer:\r\n\r\nmy Python version: 3.7.4\r\nBiopython version: 1.77\r\noperating system: [GCC 7.3.0] CPython Linux-4.15.0-76-generic-x86_64-with-debian-buster-sid\r\nncbi-blast+ version: 2.10.1+\r\n\r\nexample:\r\n>>> from Bio.Blast.Applications import NcbiblastnCommandline\r\n>>> cline = NcbiblastnCommandline(query=\"m_cold.fasta\", db=\"nt\", strand=\"plus\", evalue=0.001, out=\"m_cold.xml\", outfmt=5)\r\n\r\nthis example works well in python. However for some no parameter options of blastn such as \"-subject_besthit\", \"-remote\", \"-help\", \"-version\", how to make it work in NcbiblastnCommandline? There may be same question in other wrapped softwore.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3028", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3028/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3028/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3028/events", "html_url": "https://github.com/biopython/biopython/issues/3028", "id": 650980623, "node_id": "MDU6SXNzdWU2NTA5ODA2MjM=", "number": 3028, "title": "Fix contributions listings under Biopython 1.76", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413833678, "node_id": "MDU6TGFiZWw0MTM4MzM2Nzg=", "url": "https://api.github.com/repos/biopython/biopython/labels/Documentation", "name": "Documentation", "color": "0052cc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-05T01:11:49Z", "updated_at": "2020-07-20T14:46:00Z", "closed_at": "2020-07-20T14:46:00Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The current list of names in the NEWS file for Biopython 1.76 has some duplications, and extra entries compared to the tagged release. These are most likely from pull requests merged as part of what became Biopython 1.77, and some of the names need moving up a section.\r\n\r\n(If this happens again, perhaps we should leave adding the NEWS entry to the developer merging a pull request?)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3023", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3023/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3023/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3023/events", "html_url": "https://github.com/biopython/biopython/issues/3023", "id": 650083823, "node_id": "MDU6SXNzdWU2NTAwODM4MjM=", "number": 3023, "title": "BUG: comparing two DNA strings, same length, allow IUPAC", "user": {"login": "YichaoOU", "id": 19987406, "node_id": "MDQ6VXNlcjE5OTg3NDA2", "avatar_url": "https://avatars2.githubusercontent.com/u/19987406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YichaoOU", "html_url": "https://github.com/YichaoOU", "followers_url": "https://api.github.com/users/YichaoOU/followers", "following_url": "https://api.github.com/users/YichaoOU/following{/other_user}", "gists_url": "https://api.github.com/users/YichaoOU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YichaoOU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YichaoOU/subscriptions", "organizations_url": "https://api.github.com/users/YichaoOU/orgs", "repos_url": "https://api.github.com/users/YichaoOU/repos", "events_url": "https://api.github.com/users/YichaoOU/events{/privacy}", "received_events_url": "https://api.github.com/users/YichaoOU/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-07-02T17:06:57Z", "updated_at": "2020-07-03T19:05:44Z", "closed_at": "2020-07-03T15:58:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version)\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nimport Bio; print(Bio.__version__)\r\n```\r\n\r\n```python\r\n>>> import sys; print(sys.version)\r\n3.7.3 (default, Mar 27 2019, 22:11:17)\r\n[GCC 7.3.0]\r\n>>> import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nLinux-3.10.0-957.21.3.el7.x86_64-x86_64-with-redhat-7.6-Maipo\r\n>>> import Bio; print(Bio.__version__)\r\n1.74\r\n```\r\n\r\n### Expected behaviour\r\n\r\nAGG should equal to NGG\r\nRGG should equal to NGG\r\n\r\n### Actual behaviour\r\n\r\n```python\r\n>>> from Bio.Seq import Seq\r\n>>> from Bio.Alphabet import generic_dna\r\n>>> seq1=Seq(\"AGG\",generic_dna)\r\n>>> seq2=Seq(\"NGG\",generic_dna)\r\n>>> seq1 in seq2\r\nFalse\r\n>>> seq1 == seq2\r\nFalse\r\n>>> seq1=Seq(\"RGG\",generic_dna)\r\n>>> seq2=Seq(\"NGG\",generic_dna)\r\n>>> seq1 in seq2\r\nFalse\r\n>>> seq1 == seq2\r\nFalse\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```python\r\n>>> from Bio.Seq import Seq\r\n>>> from Bio.Alphabet import generic_dna\r\n>>> seq1=Seq(\"AGG\",generic_dna)\r\n>>> seq2=Seq(\"NGG\",generic_dna)\r\n>>> seq1 in seq2\r\nFalse\r\n>>> seq1 == seq2\r\nFalse\r\n>>> seq1=Seq(\"RGG\",generic_dna)\r\n>>> seq2=Seq(\"NGG\",generic_dna)\r\n>>> seq1 in seq2\r\nFalse\r\n>>> seq1 == seq2\r\nFalse\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3015", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3015/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3015/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3015/events", "html_url": "https://github.com/biopython/biopython/issues/3015", "id": 647437356, "node_id": "MDU6SXNzdWU2NDc0MzczNTY=", "number": 3015, "title": "SeqIO.parse does not allow to close handle in 1.77.", "user": {"login": "naumenko-sa", "id": 13981803, "node_id": "MDQ6VXNlcjEzOTgxODAz", "avatar_url": "https://avatars1.githubusercontent.com/u/13981803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naumenko-sa", "html_url": "https://github.com/naumenko-sa", "followers_url": "https://api.github.com/users/naumenko-sa/followers", "following_url": "https://api.github.com/users/naumenko-sa/following{/other_user}", "gists_url": "https://api.github.com/users/naumenko-sa/gists{/gist_id}", "starred_url": "https://api.github.com/users/naumenko-sa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naumenko-sa/subscriptions", "organizations_url": "https://api.github.com/users/naumenko-sa/orgs", "repos_url": "https://api.github.com/users/naumenko-sa/repos", "events_url": "https://api.github.com/users/naumenko-sa/events{/privacy}", "received_events_url": "https://api.github.com/users/naumenko-sa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-29T14:45:33Z", "updated_at": "2020-06-29T22:20:36Z", "closed_at": "2020-06-29T18:54:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version **1.77** , Python version **3.6.10**, and operating\r\nsystem as follows:\r\n```\r\nCPython\r\nLinux-5.3.0-1028-aws-x86_64-with-debian-buster-sid\r\n```\r\n\r\n### Expected behaviour\r\n\r\nA handle closes without error\r\n\r\n### Actual behaviour\r\n\r\n```AttributeError: 'FastqPhredIterator' object has no attribute 'close'```\r\n\r\n### Steps to reproduce\r\n\r\n```python\r\n>>> from Bio import SeqIO\r\n>>> from bcbio.bam.fastq import open_fastq\r\n>>> in_handle = SeqIO.parse(open_fastq(\"test_1.fq.gz\"), \"fastq-sanger\")\r\n>>> read = next(in_handle)\r\n>>> in_handle.close()\r\n```\r\n\r\nIt passes with biopython 1.76 and earlier: https://github.com/bcbio/bcbio-nextgen/issues/3277\r\n\r\nSN", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3014", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3014/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3014/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3014/events", "html_url": "https://github.com/biopython/biopython/issues/3014", "id": 647375736, "node_id": "MDU6SXNzdWU2NDczNzU3MzY=", "number": 3014, "title": "MMCIFIO._save_structure() writes modified nucleotides as new chains", "user": {"login": "persalteas", "id": 2559434, "node_id": "MDQ6VXNlcjI1NTk0MzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2559434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/persalteas", "html_url": "https://github.com/persalteas", "followers_url": "https://api.github.com/users/persalteas/followers", "following_url": "https://api.github.com/users/persalteas/following{/other_user}", "gists_url": "https://api.github.com/users/persalteas/gists{/gist_id}", "starred_url": "https://api.github.com/users/persalteas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/persalteas/subscriptions", "organizations_url": "https://api.github.com/users/persalteas/orgs", "repos_url": "https://api.github.com/users/persalteas/repos", "events_url": "https://api.github.com/users/persalteas/events{/privacy}", "received_events_url": "https://api.github.com/users/persalteas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-29T13:26:44Z", "updated_at": "2020-06-29T14:18:32Z", "closed_at": "2020-06-29T14:18:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nPython 3.8.3, Biopython 1.76\r\n\r\nRNA structures may contain modified nucleotides that are part of the chain (e.g. PSU, 5MC, M2G...) that are NOT ligands but still marked HETATM in the official .cif files from RCSB.\r\n\r\n### Expected behaviour\r\n\r\nSaving a selection from one of those RNA .cif files with MMCIFIO should keep the residue numbering and chain names.\r\n\r\n```\r\nfrom Bio.PDB.mmcifio import MMCIFIO\r\n\r\ns = some structure\r\nselection = some selector class\r\n\r\nioobj = MMCIFIO()\r\nioobj.set_structure(s)\r\nioobj.save(filename, selection)\r\n```\r\n\r\nWe should get this kind of output in the file, for a A nucleotide in position 297 followed by a M2G in 298:\r\n\r\n```\r\n... atoms of A  A ? 297\r\nATOM   6399  N N1    . A   A ? 297 ? 131.689 25.712  9.396   1.0 191.64 943  1a 1 \r\nATOM   6400  C C2    . A   A ? 297 ? 130.494 26.218  9.066   1.0 181.75 943  1a 1 \r\nATOM   6401  N N3    . A   A ? 297 ? 129.755 27.115  9.712   1.0 188.83 943  1a 1 \r\nATOM   6402  C C4    . A   A ? 297 ? 130.369 27.508  10.841  1.0 196.62 943  1a 1 \r\nHETATM 6403  P P     . M2G A ? 298   ? 125.141 31.306  11.127  1.0 215.41 944  1a 1 \r\nHETATM 6404  O OP1   . M2G A ? 298   ? 125.114 32.498  12.054  1.0 195.75 944  1a 1 \r\nHETATM 6405  O OP2   . M2G A ? 298   ? 123.846 30.735  10.606  1.0 198.0  944  1a 1 \r\n... atoms of M2G A ? 298\r\n```\r\n\r\n### Actual behaviour\r\n\r\nmmcifio.py contains a piece of code to move HETATMs to a new chain.\r\n\r\n```\r\n# Check if the molecule changes within the chain\r\n# This will always increment for the first residue in a\r\n # chain due to the starting values above\r\nif residue_type != prev_residue_type or (\r\n     residue_type == \"HETATM\" and resname != prev_resname\r\n ):\r\n    entity_id += 1\r\n```\r\n\r\nThen, we get the output:\r\n\r\n\r\n```\r\n...\r\nATOM   6399  N N1    . A   A ? 297 ? 131.689 25.712  9.396   1.0 191.64 943  1a 1 \r\nATOM   6400  C C2    . A   A ? 297 ? 130.494 26.218  9.066   1.0 181.75 943  1a 1 \r\nATOM   6401  N N3    . A   A ? 297 ? 129.755 27.115  9.712   1.0 188.83 943  1a 1 \r\nATOM   6402  C C4    . A   A ? 297 ? 130.369 27.508  10.841  1.0 196.62 943  1a 1 \r\nHETATM 6403  P P     . M2G B ? .   ? 125.141 31.306  11.127  1.0 215.41 944  1a 1 \r\nHETATM 6404  O OP1   . M2G B ? .   ? 125.114 32.498  12.054  1.0 195.75 944  1a 1 \r\nHETATM 6405  O OP2   . M2G B ? .   ? 123.846 30.735  10.606  1.0 198.0  944  1a 1 \r\n...\r\n```\r\n\r\nThe ATOMS are correctly saved (e.g. saved to chain A, residue 297). But the following HETATMs from M2G are moved to chain B and do not save the position (expected: 298).\r\n\r\n\r\n### Steps to reproduce\r\n\r\nExample with 6czr.cif, model 1, chain '1a' (lowercase). Try to save only this chain to a new file with a selector.\r\n\r\n### Question \r\n\r\nCan we add an argument to save() to decide if we save them or not to a new chain ? Why was this code here at the first place ?\r\n\r\nThanks,\r\n\r\nLouis", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/3002", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/3002/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/3002/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/3002/events", "html_url": "https://github.com/biopython/biopython/issues/3002", "id": 645993129, "node_id": "MDU6SXNzdWU2NDU5OTMxMjk=", "number": 3002, "title": "Option to write nucleotide SeqRecord to protein FASTA", "user": {"login": "rchurt", "id": 14302923, "node_id": "MDQ6VXNlcjE0MzAyOTIz", "avatar_url": "https://avatars3.githubusercontent.com/u/14302923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchurt", "html_url": "https://github.com/rchurt", "followers_url": "https://api.github.com/users/rchurt/followers", "following_url": "https://api.github.com/users/rchurt/following{/other_user}", "gists_url": "https://api.github.com/users/rchurt/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchurt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchurt/subscriptions", "organizations_url": "https://api.github.com/users/rchurt/orgs", "repos_url": "https://api.github.com/users/rchurt/repos", "events_url": "https://api.github.com/users/rchurt/events{/privacy}", "received_events_url": "https://api.github.com/users/rchurt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-06-26T04:10:57Z", "updated_at": "2020-07-29T08:12:02Z", "closed_at": "2020-07-29T08:12:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n3.6.9 (default, Apr 18 2020, 01:56:04) \r\n[GCC 8.4.0]\r\nCPython\r\nLinux-4.19.104+-x86_64-with-Ubuntu-18.04-bionic\r\n1.77\r\n\r\n### Expected behaviour\r\n\r\nUnless I'm mistaken, the only way to write a protein FASTA is to pass a SeqRecord object containing protein sequences into SeqIO.write. However, it's commonly the case that one is working with a SeqRecord object containing _nucleotide_ sequences with CDSs annotated as features or with translation qualifiers. In this case, you would need to go through an extra step of creating a new SeqRecord object containing protein sequences before writing. It seems like you should be able to do something like SeqIO.write(nt_SeqRecord, handle, 'fasta_protein'), and have it _either_ translate CDSs annotated as features and extract them or directly extract translation qualifiers, and write those as a protein FASTA in a single step.\r\n\r\nPlease let me know if I'm mistaken and there's already a built-in command for this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2995", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2995/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2995/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2995/events", "html_url": "https://github.com/biopython/biopython/issues/2995", "id": 644141212, "node_id": "MDU6SXNzdWU2NDQxNDEyMTI=", "number": 2995, "title": "Bug identified at PDBIO.set_structure() and solution for it", "user": {"login": "alexandrefassio", "id": 42985225, "node_id": "MDQ6VXNlcjQyOTg1MjI1", "avatar_url": "https://avatars2.githubusercontent.com/u/42985225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexandrefassio", "html_url": "https://github.com/alexandrefassio", "followers_url": "https://api.github.com/users/alexandrefassio/followers", "following_url": "https://api.github.com/users/alexandrefassio/following{/other_user}", "gists_url": "https://api.github.com/users/alexandrefassio/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexandrefassio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexandrefassio/subscriptions", "organizations_url": "https://api.github.com/users/alexandrefassio/orgs", "repos_url": "https://api.github.com/users/alexandrefassio/repos", "events_url": "https://api.github.com/users/alexandrefassio/events{/privacy}", "received_events_url": "https://api.github.com/users/alexandrefassio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413833494, "node_id": "MDU6TGFiZWw0MTM4MzM0OTQ=", "url": "https://api.github.com/repos/biopython/biopython/labels/Bug", "name": "Bug", "color": "b60205", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "JoaoRodrigues", "id": 237328, "node_id": "MDQ6VXNlcjIzNzMyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/237328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoaoRodrigues", "html_url": "https://github.com/JoaoRodrigues", "followers_url": "https://api.github.com/users/JoaoRodrigues/followers", "following_url": "https://api.github.com/users/JoaoRodrigues/following{/other_user}", "gists_url": "https://api.github.com/users/JoaoRodrigues/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoaoRodrigues/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoaoRodrigues/subscriptions", "organizations_url": "https://api.github.com/users/JoaoRodrigues/orgs", "repos_url": "https://api.github.com/users/JoaoRodrigues/repos", "events_url": "https://api.github.com/users/JoaoRodrigues/events{/privacy}", "received_events_url": "https://api.github.com/users/JoaoRodrigues/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "JoaoRodrigues", "id": 237328, "node_id": "MDQ6VXNlcjIzNzMyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/237328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoaoRodrigues", "html_url": "https://github.com/JoaoRodrigues", "followers_url": "https://api.github.com/users/JoaoRodrigues/followers", "following_url": "https://api.github.com/users/JoaoRodrigues/following{/other_user}", "gists_url": "https://api.github.com/users/JoaoRodrigues/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoaoRodrigues/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoaoRodrigues/subscriptions", "organizations_url": "https://api.github.com/users/JoaoRodrigues/orgs", "repos_url": "https://api.github.com/users/JoaoRodrigues/repos", "events_url": "https://api.github.com/users/JoaoRodrigues/events{/privacy}", "received_events_url": "https://api.github.com/users/JoaoRodrigues/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-06-23T20:56:53Z", "updated_at": "2020-08-13T23:21:17Z", "closed_at": "2020-08-13T23:21:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nIn the current BioPython version, there are two bugs (lines 86 and 95) in the function **set_structure**() from the class **PDBIO** (Bio/PDB/PDBIO.py):\r\n\r\n           Line 86: sb.structure[0][\"A\"].add(pdb_object.copy())\r\n           Line 95: sb.structure[0][\"A\"].child_list[0].add(pdb_object.copy())\r\n\r\nAs you can see, it always tries to access a chain object whose id is \"A\". However, if one tries to save a Residue/Atom whose chain id is not \"A\", it raises a KeyError exception because the recently created chain (line 79) had its id updated to **pdb_object.parent.id** at line 83 (when pdb_object is a residue) or 92 (when pdb_object is an atom).\r\n\r\nThus, to fix this problem, move the parent_id to outside the try/except block and substitute the previous lines by\r\n\r\n           Line 86: sb.structure[0][parent_id].add(pdb_object.copy())\r\n           Line 95: sb.structure[0][parent_id].child_list[0].add(pdb_object.copy())\r\n\r\nbests\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2993", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2993/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2993/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2993/events", "html_url": "https://github.com/biopython/biopython/issues/2993", "id": 643418978, "node_id": "MDU6SXNzdWU2NDM0MTg5Nzg=", "number": 2993, "title": "test_codonalign.Test_dn_ds regression on scipy 1.5.0", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-22T23:20:39Z", "updated_at": "2020-06-26T09:55:29Z", "closed_at": "2020-06-26T09:55:29Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "TravisCI Python 3.7 has started failing on the master branch:\r\n\r\n```\r\ncertifi==2020.6.20,chardet==3.0.4,codecov==2.1.7,coverage==5.1,cycler==0.10.0,idna==2.9,kiwisolver==1.2.0,matplotlib==3.2.2,mmtf-python==1.1.2,msgpack==1.0.0,mysql-connector-python-rf==2.2.2,mysqlclient==1.4.6,numpy==1.19.0,psycopg2-binary==2.8.5,pyparsing==2.4.7,python-dateutil==2.8.1,requests==2.24.0,scipy==1.5.0,six==1.15.0,urllib3==1.25.9\r\n...\r\n======================================================================\r\nFAIL: test_dn_ds (test_codonalign.Test_dn_ds)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/travis/build/biopython/biopython/Tests/test_codonalign.py\", line 250, in test_dn_ds\r\n    self.assertAlmostEqual(dN, 0.0194, places=4)\r\nAssertionError: 0.018551097874995984 != 0.0194 within 4 places (0.00084890212500401616 difference)\r\n----------------------------------------------------------------------\r\n```\r\n\r\nSee https://travis-ci.org/github/biopython/biopython/jobs/700971840\r\n\r\nPrevious build worked, but had scipy 1.4.1\r\n\r\n```\r\ncertifi==2020.6.20,chardet==3.0.4,codecov==2.1.7,coverage==5.1,cycler==0.10.0,idna==2.9,kiwisolver==1.2.0,matplotlib==3.2.2,mmtf-python==1.1.2,msgpack==1.0.0,mysql-connector-python-rf==2.2.2,mysqlclient==1.4.6,numpy==1.19.0,psycopg2-binary==2.8.5,pyparsing==2.4.7,python-dateutil==2.8.1,requests==2.24.0,scipy==1.4.1,six==1.15.0,urllib3==1.25.9\r\n```\r\n\r\nSee https://travis-ci.org/github/biopython/biopython/jobs/700563827\r\n\r\nThis is currently the only TravisCI target which has SciPy installed, and thus only Python 3.7 shows the problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2983", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2983/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2983/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2983/events", "html_url": "https://github.com/biopython/biopython/issues/2983", "id": 640931581, "node_id": "MDU6SXNzdWU2NDA5MzE1ODE=", "number": 2983, "title": "ResidueDepth", "user": {"login": "DuanhaoranCC", "id": 66892515, "node_id": "MDQ6VXNlcjY2ODkyNTE1", "avatar_url": "https://avatars3.githubusercontent.com/u/66892515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DuanhaoranCC", "html_url": "https://github.com/DuanhaoranCC", "followers_url": "https://api.github.com/users/DuanhaoranCC/followers", "following_url": "https://api.github.com/users/DuanhaoranCC/following{/other_user}", "gists_url": "https://api.github.com/users/DuanhaoranCC/gists{/gist_id}", "starred_url": "https://api.github.com/users/DuanhaoranCC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DuanhaoranCC/subscriptions", "organizations_url": "https://api.github.com/users/DuanhaoranCC/orgs", "repos_url": "https://api.github.com/users/DuanhaoranCC/repos", "events_url": "https://api.github.com/users/DuanhaoranCC/events{/privacy}", "received_events_url": "https://api.github.com/users/DuanhaoranCC/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-18T05:57:26Z", "updated_at": "2020-06-27T21:39:55Z", "closed_at": "2020-06-27T21:39:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nMy biopython version is 1.73, executing `rd= PDB.ResidueDepth (model)` , but I'm sorry to report an error.`The runtime error: failed to generate surface file usingcommand:` I have downloaded the binary file of MSMS. What else should I do? Environment variable? Or something.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2970", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2970/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2970/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2970/events", "html_url": "https://github.com/biopython/biopython/issues/2970", "id": 636766060, "node_id": "MDU6SXNzdWU2MzY3NjYwNjA=", "number": 2970, "title": "Error reading msf file using Bio.AlignIO.MsfIO", "user": {"login": "Meirom-Michal", "id": 65955672, "node_id": "MDQ6VXNlcjY1OTU1Njcy", "avatar_url": "https://avatars1.githubusercontent.com/u/65955672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Meirom-Michal", "html_url": "https://github.com/Meirom-Michal", "followers_url": "https://api.github.com/users/Meirom-Michal/followers", "following_url": "https://api.github.com/users/Meirom-Michal/following{/other_user}", "gists_url": "https://api.github.com/users/Meirom-Michal/gists{/gist_id}", "starred_url": "https://api.github.com/users/Meirom-Michal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Meirom-Michal/subscriptions", "organizations_url": "https://api.github.com/users/Meirom-Michal/orgs", "repos_url": "https://api.github.com/users/Meirom-Michal/repos", "events_url": "https://api.github.com/users/Meirom-Michal/events{/privacy}", "received_events_url": "https://api.github.com/users/Meirom-Michal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-11T06:51:53Z", "updated_at": "2020-06-24T06:20:41Z", "closed_at": "2020-06-24T06:20:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "@peterjc \r\n### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\nBiopython 1.7.6\r\nPython 3.6\r\nUbuntu 18.04\r\n\r\n### Expected behaviour\r\n\r\nparsing msf file using Bio.AlignIO.MsfIO\r\n\r\n### Actual behaviour\r\n\r\nraise ValueError(\"Expected sequence for %r, got: %r\" % (name, line))\r\n\r\n### Steps to reproduce\r\n\r\nmsf file is attached\r\n\r\n[try_msf.zip](https://github.com/biopython/biopython/files/4763054/try_msf.zip)\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2963", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2963/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2963/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2963/events", "html_url": "https://github.com/biopython/biopython/issues/2963", "id": 633424080, "node_id": "MDU6SXNzdWU2MzM0MjQwODA=", "number": 2963, "title": "PDBParser does not parse all records (HETATOM->ATOM->HETATOM transition)", "user": {"login": "mcbeaker", "id": 2272762, "node_id": "MDQ6VXNlcjIyNzI3NjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2272762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcbeaker", "html_url": "https://github.com/mcbeaker", "followers_url": "https://api.github.com/users/mcbeaker/followers", "following_url": "https://api.github.com/users/mcbeaker/following{/other_user}", "gists_url": "https://api.github.com/users/mcbeaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcbeaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcbeaker/subscriptions", "organizations_url": "https://api.github.com/users/mcbeaker/orgs", "repos_url": "https://api.github.com/users/mcbeaker/repos", "events_url": "https://api.github.com/users/mcbeaker/events{/privacy}", "received_events_url": "https://api.github.com/users/mcbeaker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "JoaoRodrigues", "id": 237328, "node_id": "MDQ6VXNlcjIzNzMyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/237328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoaoRodrigues", "html_url": "https://github.com/JoaoRodrigues", "followers_url": "https://api.github.com/users/JoaoRodrigues/followers", "following_url": "https://api.github.com/users/JoaoRodrigues/following{/other_user}", "gists_url": "https://api.github.com/users/JoaoRodrigues/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoaoRodrigues/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoaoRodrigues/subscriptions", "organizations_url": "https://api.github.com/users/JoaoRodrigues/orgs", "repos_url": "https://api.github.com/users/JoaoRodrigues/repos", "events_url": "https://api.github.com/users/JoaoRodrigues/events{/privacy}", "received_events_url": "https://api.github.com/users/JoaoRodrigues/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "JoaoRodrigues", "id": 237328, "node_id": "MDQ6VXNlcjIzNzMyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/237328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoaoRodrigues", "html_url": "https://github.com/JoaoRodrigues", "followers_url": "https://api.github.com/users/JoaoRodrigues/followers", "following_url": "https://api.github.com/users/JoaoRodrigues/following{/other_user}", "gists_url": "https://api.github.com/users/JoaoRodrigues/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoaoRodrigues/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoaoRodrigues/subscriptions", "organizations_url": "https://api.github.com/users/JoaoRodrigues/orgs", "repos_url": "https://api.github.com/users/JoaoRodrigues/repos", "events_url": "https://api.github.com/users/JoaoRodrigues/events{/privacy}", "received_events_url": "https://api.github.com/users/JoaoRodrigues/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-06-07T13:39:06Z", "updated_at": "2020-08-14T00:59:06Z", "closed_at": "2020-08-14T00:59:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with my system as follows:\r\n\r\n```python commands\r\nimport sys; print(sys.version)\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nimport Bio; print(Bio.__version__)\r\n```\r\n```python output\r\n\u20293.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 22:45:29) [MSC v.1916 32 bit (Intel)]\r\nCPython\r\nWindows-10-10.0.18362-SP0\r\n1.77\r\n```\r\n### Expected behaviour\r\n\r\nPDBParser to parse all atoms within PDB - expected to parse 6 records from pdbFile.pdb below\r\n\r\n### Actual behaviour\r\n\r\nReads only atoms up to and including the record \"ATOM 2077 SG ...\" from the PDB below - output from code.py (below) print only 3 record ids\r\n\r\n### Steps to reproduce\r\n\r\n```pdbFile.pdb\r\n\r\nHETATM63667 FE1  ICS A 502      91.938  16.527 207.262  1.00 14.93          FE\r\nHETATM63678  S2A ICS A 502      94.125  16.505 206.670  1.00 11.73           S\r\nATOM   2077  SG  CYS A 275      91.258  17.999 208.896  1.00 14.12           S\r\nHETATM63682  S4A ICS A 502      90.748  16.404 205.320  1.00 15.43           S\r\nHETATM63676  S1A ICS A 502      91.635  14.498 208.320  1.00 10.45           S\r\n```\r\n\r\n```python code.py\r\nfrom Bio.PDB.PDBParser import PDBParser\r\n\r\np = PDBParser()\r\nstructure = p.get_structure(\"struct\", \"pdbFile.pdb\")\r\n\r\nfor atom in structure.get_atoms():\r\n        print(atom.get_full_id())\r\n```\r\n    \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2961", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2961/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2961/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2961/events", "html_url": "https://github.com/biopython/biopython/issues/2961", "id": 633398623, "node_id": "MDU6SXNzdWU2MzMzOTg2MjM=", "number": 2961, "title": "Removing Alphabets from Bio.CodonTable", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-06-07T13:05:53Z", "updated_at": "2020-07-29T08:13:16Z", "closed_at": "2020-07-29T08:13:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently the ``CodonTable`` class defines ``.protein_alphabet`` (apparently unused), and ``.nucleotide_alphabet`` which is used to set the letters to \"TCAG\" (DNA only) or \"UCAG\" (default, used for RNA or generic nucleotide).\r\n\r\nWorking on replacing these attributes with a simple private boolean for DNA only mode... will be an API change but direct use of these tables is presumably rare?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2957", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2957/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2957/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2957/events", "html_url": "https://github.com/biopython/biopython/issues/2957", "id": 632750185, "node_id": "MDU6SXNzdWU2MzI3NTAxODU=", "number": 2957, "title": "SwissProt.read Assertion Error", "user": {"login": "DGMichael", "id": 7682920, "node_id": "MDQ6VXNlcjc2ODI5MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/7682920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DGMichael", "html_url": "https://github.com/DGMichael", "followers_url": "https://api.github.com/users/DGMichael/followers", "following_url": "https://api.github.com/users/DGMichael/following{/other_user}", "gists_url": "https://api.github.com/users/DGMichael/gists{/gist_id}", "starred_url": "https://api.github.com/users/DGMichael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DGMichael/subscriptions", "organizations_url": "https://api.github.com/users/DGMichael/orgs", "repos_url": "https://api.github.com/users/DGMichael/repos", "events_url": "https://api.github.com/users/DGMichael/events{/privacy}", "received_events_url": "https://api.github.com/users/DGMichael/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-06T21:42:34Z", "updated_at": "2020-06-07T15:57:49Z", "closed_at": "2020-06-07T15:48:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython 1.76, Python 3.7.4, and operating\r\nsystem as follows:\r\n\r\n```from Bio import ExPASy\r\nfrom Bio import SwissProt\r\nhandle = ExPASy.get_sprot_raw('B5ZC00')\r\nrecord = SwissProt.read(handle)\r\n```\r\n\r\n(*Please copy and run the above in your Python, and copy-and-paste the output*)\r\n\r\n### Expected behaviour\r\n\r\ndir(record)\r\n [..., 'accessions', 'annotation_update', 'comments', 'created', 'cross_references',\r\n 'data_class', 'description', 'entry_name', 'features', 'gene_name', 'host_organism', 'host_taxonomy_id', 'keywords',\r\n 'molecule_type', 'organelle', 'organism', 'organism_classification', 'references', 'seqinfo', 'sequence',\r\n 'sequence_length', 'sequence_update', 'taxonomy_id']\r\n\r\n### Actual behaviour\r\n\r\n```---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-2-ed0d52f57cb2> in <module>\r\n      2 from Bio import SwissProt\r\n      3 handle = ExPASy.get_sprot_raw('B5ZC00')\r\n----> 4 record = SwissProt.read(handle)\r\n\r\n/opt/anaconda3/lib/python3.7/site-packages/Bio/SwissProt/__init__.py in read(handle)\r\n    149     Returns a Record() object.\r\n    150     \"\"\"\r\n--> 151     record = _read(handle)\r\n    152     if not record:\r\n    153         raise ValueError(\"No SwissProt record found\")\r\n\r\n/opt/anaconda3/lib/python3.7/site-packages/Bio/SwissProt/__init__.py in _read(handle)\r\n    253             _read_kw(record, value)\r\n    254         elif key == \"FT\":\r\n--> 255             _read_ft(record, line)\r\n    256         elif key == \"SQ\":\r\n    257             cols = value.split()\r\n\r\n/opt/anaconda3/lib/python3.7/site-packages/Bio/SwissProt/__init__.py in _read_ft(record, line)\r\n    592         description = line[29:70].rstrip()\r\n    593     if not name:  # is continuation of last one\r\n--> 594         assert not from_res and not to_res, line\r\n    595         name, from_res, to_res, old_description, old_ft_id = record.features[-1]\r\n    596         del record.features[-1]\r\n\r\nAssertionError:                 /note=\"Glycine--tRNA ligase\"\r\n```\r\n### Steps to reproduce\r\n\r\n1) Anaconda install of Biopython\r\n2) Run above code in jupyter notebook.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2954", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2954/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2954/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2954/events", "html_url": "https://github.com/biopython/biopython/issues/2954", "id": 630477511, "node_id": "MDU6SXNzdWU2MzA0Nzc1MTE=", "number": 2954, "title": "how to import a sequence file ?", "user": {"login": "lizza20", "id": 66400283, "node_id": "MDQ6VXNlcjY2NDAwMjgz", "avatar_url": "https://avatars1.githubusercontent.com/u/66400283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lizza20", "html_url": "https://github.com/lizza20", "followers_url": "https://api.github.com/users/lizza20/followers", "following_url": "https://api.github.com/users/lizza20/following{/other_user}", "gists_url": "https://api.github.com/users/lizza20/gists{/gist_id}", "starred_url": "https://api.github.com/users/lizza20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lizza20/subscriptions", "organizations_url": "https://api.github.com/users/lizza20/orgs", "repos_url": "https://api.github.com/users/lizza20/repos", "events_url": "https://api.github.com/users/lizza20/events{/privacy}", "received_events_url": "https://api.github.com/users/lizza20/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-04T03:14:06Z", "updated_at": "2020-06-04T03:41:55Z", "closed_at": "2020-06-04T03:41:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2942", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2942/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2942/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2942/events", "html_url": "https://github.com/biopython/biopython/issues/2942", "id": 629038471, "node_id": "MDU6SXNzdWU2MjkwMzg0NzE=", "number": 2942, "title": "Installing on old pythons.", "user": {"login": "cjw85", "id": 3592009, "node_id": "MDQ6VXNlcjM1OTIwMDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3592009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjw85", "html_url": "https://github.com/cjw85", "followers_url": "https://api.github.com/users/cjw85/followers", "following_url": "https://api.github.com/users/cjw85/following{/other_user}", "gists_url": "https://api.github.com/users/cjw85/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjw85/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjw85/subscriptions", "organizations_url": "https://api.github.com/users/cjw85/orgs", "repos_url": "https://api.github.com/users/cjw85/repos", "events_url": "https://api.github.com/users/cjw85/events{/privacy}", "received_events_url": "https://api.github.com/users/cjw85/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-02T09:12:50Z", "updated_at": "2020-06-03T13:00:04Z", "closed_at": "2020-06-03T13:00:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython source, and Python 3.5. This stems from the pypi packages not declaring for which versions of python they are compatible (not specifying `python_requires=\"....\",` in the call to `setup()` in `setup.py`.\r\n\r\n### Expected behaviour\r\n\r\nTrying to install biopython with pip should install a version of biopython that is compatible with python 3.5.\r\n\r\n### Actual behaviour\r\n\r\nWithout a version specified pip will download the latest and then when `setup.py` is invoked the python version is caught and the install exits.\r\n\r\n### Steps to reproduce\r\n\r\n```pip install biopython\r\n\r\nCollecting biopython\r\n  Downloading biopython-1.77.tar.gz (16.8 MB)\r\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16.8 MB 9.5 MB/s\r\n    ERROR: Command errored out with exit status 1:\r\n     command: /home/OXFORDNANOLABS/cwright/git/medaka/venv/bin/python3 -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-install-fal177xf/biopython/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-install-fal177xf/biopython/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' egg_info --egg-base /tmp/pip-pip-egg-info-c1oi4si4\r\n         cwd: /tmp/pip-install-fal177xf/biopython/\r\n    Complete output (1 lines):\r\n    Biopython requires Python 3.6 or later. Python 3.5 detected.\r\n    ----------------------------------------\r\nERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2936", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2936/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2936/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2936/events", "html_url": "https://github.com/biopython/biopython/issues/2936", "id": 627795641, "node_id": "MDU6SXNzdWU2Mjc3OTU2NDE=", "number": 2936, "title": "OverflowError: number of optimal alignments is larger than 9223372036854775807", "user": {"login": "mortonjt", "id": 4184797, "node_id": "MDQ6VXNlcjQxODQ3OTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4184797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mortonjt", "html_url": "https://github.com/mortonjt", "followers_url": "https://api.github.com/users/mortonjt/followers", "following_url": "https://api.github.com/users/mortonjt/following{/other_user}", "gists_url": "https://api.github.com/users/mortonjt/gists{/gist_id}", "starred_url": "https://api.github.com/users/mortonjt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mortonjt/subscriptions", "organizations_url": "https://api.github.com/users/mortonjt/orgs", "repos_url": "https://api.github.com/users/mortonjt/repos", "events_url": "https://api.github.com/users/mortonjt/events{/privacy}", "received_events_url": "https://api.github.com/users/mortonjt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-30T18:50:59Z", "updated_at": "2020-05-30T22:01:08Z", "closed_at": "2020-05-30T21:55:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version)\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nimport Bio; print(Bio.__version__)\r\n```\r\n```\r\n3.6.2 (default, Aug  2 2017, 14:29:03)\r\n[GCC 5.4.0]\r\n\r\nCPython\r\nLinux-3.10.0-1062.9.1.el7.x86_64-x86_64-with-centos-7.7.1908-Core\r\n\r\n1.77\r\n```\r\n\r\nI'm trying to run a smith waterman alignment between 2 sequences - below is an example\r\n\r\n``` python\r\nfrom Bio.Align import substitution_matrices\r\nfrom Bio import Align\r\naligner = Align.PairwiseAligner()\r\naligner.substitution_matrix = substitution_matrices.load(\"BLOSUM62\")\r\nsx='MPGDEERGFLAAREELASALRWDSAQVFPLEQLMPLLATSLPPAARYLQLDAGRLVRCNAHGEPRNYLNTLSTALNILEKYGRNLLSPQRPRYWRSVKFNNPVFRSTVDAVQGGRDVLRLYGYTEERPDGLSFPEGQEEPDEYQVAVVTLEVLLLRTELSLLLQNTHPRQNALDQLLRESVEDGMLQLSEFHPLLREIVPGPRPSAQGSTPGPCFLCGSAPGTLHCPACNQVSCPACDILFHGHPSRAHHLRQALPGSHQTASLSSSLPASSQPRPPSSSLALGDSSLSSPDPANACLPWHCLTCATLNEPWAVFCAVCSQPKGCKVPGIEGSHGTGGLEPEPARDQWACQSCTFENEAAAVLCAICERPRLAQPPSLVVDSHDAGVCQQSLKQEDPLLTAAQPQVWYCDHCTFCNSGPVWVCAMCNRTRDPIPTQPALQSYPSSLEKGRPKPGSSQHLGSSLPASCGDPEKQRQDKMRKEGLQLVSMIQEGETAGASPEEVFSALQYSGTEVPLQWLRSELSYVLEMVAELAGQQDPELGAFSCQEARKAWLDRHGNLDEAVEECVRARRRKVHELQSLGFGPKEGSLQALFQHGGDVARALTELQRQRLEPFHQRLWDRDPEPTPCWDGLDRQSLVRRLLAVYTLPSWGRAELALALLQETPRNYELLDVVEAVRHSQDRAFLRRLLAQECAVCGWALPRNRMQALISCECTICPECFRQHFTIALKEKHITDMVCPACGRPDLTDDAQLLSYFSTLDIQLRESLDPDAYALFHKKLTEAVLMRDPKFLWCAQCSFGFIYEREQLEATCPQCHQTFCVRCKRQWEEQHRGRSCEDFQNWKRTNDPEYQAQGLAMYLQENGIDCPKCKFSYALARGGCMHFHCTQCRHQFCSGCYNAFYAKNKCPDPNCKVKKSLHGHHPRDCLFYLRDWTAARLQKLLQDNNVMFNTEPPAGTRAVPGGGCRVMEQKEVHSGFRDEACGKETPPGYAGLCQAHYKEYLVSLINAHSLDPATLYEVEELETATIRYLHLAPQPADGEDLPAYQARLLQKLREEVPLGQSIARRRK'\r\nsy = 'MTTHQLLNKNVRTMPSWVMEANDRIGPKPPPTPPNGVAGGLPKAPALPPKAKSTPEPDYEIIEFSSQQYSNEPMKTTVIRTKTPDNKLKCTLCGSQNPWVTCAECAGQIFCASCDDMFHKHPKRKQHMRKAVEQGTPPIPPKAQAGGGAPPPVAPPRRSKRGLLTPFLGRKDQMLPPPSPTPSHKSLGGWRGSLGGGATPPVPPIATSSANQMNNRPLPDPPRSEGGGSSRSGTPKSVFDTIQRPPSVQLEKIKSKASATLDRMAILQQRYRQQKARQDLSANSEQHLSNEAGFEHWSNISPSPSHFRSGSMSSGLNSSHFDLSDDSQFHNSLLLQQRQAAGAQRRQMSTSVFNLNSNPRRPLSEAQNGGAWLANQRIQQAQSLAQLNCAGCQQSQQHPGWAQHPHQALPQHQHPDQWSQFGSQQQFNNSNLSLNVGPGYMSQQHHPHYPPPVFMTQRGMMPNVYPGAPGYPMMHPGVMGMPPSAASRAASRSRYAASPTPSRKSMSLRRKRNSYVDDELTDDEDSDQDDRRSLVSNRSGMTSASRSQHHQNHIQPRQRRLSSASQLIASDELDGDQVHHKMRNRRGSIAKSVQSEWLPERRENEGTLTRNKTATDSARTSRIYSDLESEGSGARALVQAKIQQKLQEADQHKSSKKAEPKRKPEMKDENTQAAAVVQKVVVPPAHEESASEYEEVVEEVTASESEAEAQTAPDPQEVPDEIGADDLGPPPSTPDHEWECEFCTFVNEPNIKICSICCKTPSKPPVQPNKAKKVEEKPQPPAEKSNNIKASSKTETKPVQKPTTKSQQPSQKSVAALSKTTHTNSTSSSKASPAVNSKTTSSIPIKTPSKSTLKTSSENESDNSLAKSLLHKESVENIWNTLDESIQAQAEQVLKKAQKVSTACGGTPPREIAAVEMGTSPPPQSISTQTYDALPFNTKQEEIIPVVPDRFTTPEPNKMERRPHYRSNSQLQQESERYRSANDLRYHDGFGLDPYSAGLVTKRPNFINELRMLQLQVSSPFDMPHETFGVKHEPARDPETEMHIILKELELYKFTVEELEAALKYCSPETHPIQWLRENWHKLVQTVQSLSTKYGQERGENTIGTVSQNEAREALRNSGGNVWQAVADCIQQRQQKYRKLAAKGNFLRDDIVNALTAHQGNVEQALVELNRTQLKPFLMRIWGSPNGVENESGVAIDTKSDIHDFLNTHALDCLQPPLAGQSPSPAQANPFDQPRTDESPVKSTYATPSPYQMEDSTLKNLEILIGNMEQNQAKQNQEVLRSIETMLDTFKGKPELEYETDPEIMRILTKSPISTMKPSGPAEDKSTDDVKNFVWQHIQEIVPNLVQQVEQELMEKPEEVAKIEAEQPKEPEPLLEPQPEPTPSVDPAVYIMEEVIKPNLREASIREEVQPSFIYATEIANFKLEFDRGTERWHEAEWESSDLTDAERIVYKCYMAPNEQPKEDVVDVAVESSVNSLPTAKAQEESAPEVPIEAQKIENTEVTQPETVNEELRQQEKLETPLVITSETISETVSQTANESDKQKSIENNLQIKQNVAEVQVQSDDQPSTSRDANRRAKRSQQSRKGRSREQSQKPTNRTKLPNNIDQKVNESKTAAKETEAVKDKDLSAAASNIQSDVTASDPKTSTPLKILSEGTNSNTLETMENVTSTDINDNVTIEVISNRSEEVPAIQDLGKTKDISEPTANPIEEITSIQNSTTISEQSEGPQEPEIPIEVSETTEALQVPREEASIEIVSPPNEEQTKSPTSQEVNIQDTSHIISLPITDVTPTPEIINIAPSTSSISKEQKQSPKRLSKIPVRTLSSSSLRSESRSSNRTPTANDEIEREETTSQGVPIGETVSSPKSEQLSDNQEVNLVSQETQSKKDTNIVEEPATQPLGLELEEHSPNATAVAVSPTDSDEVFEDAPEFSGSDGTRPHDETASDAELYSLDSDGQRAETKSPEDEVVILLDEESQMESSIAQSESNASLDSHSSESETSKVVLKEFVPSGDPAKQNLSELVEDTQRLIKQMRDEISMDEFESTDEDEYSDEYSDEYDEGEEEEWYDSEGEEEGDFDGEEGNTYNEHASYIEEASTGDEGTEIEDIMEEDEDLADDDEPLQSQIPLDIEPVISPALSVTPTNQETDTIAHTEVVSSTGTRLETELPNPAMESILPSQSVQEDIKVEAIPIQSAPPIADSETRPAEQPVELVLEIPSEVEPTPVEEPTALPITPAPPIVDSESRPVEPPVETVLEEPKKVTPSMKGKTANSGTASKGPSTSSSTKTNKSTVSKIPKPTNEPTNKSNSTPLNKKVPLRSKSFSAPMGISSVKRIQEVYLQKQSSSIATSRVPLKSSPVTKKSINDAISRFNSNQADGPSTSGAAAAAAAALLKPRSQPRIPKKKYHETCFSDDDYETSATEEEQEEPNLAEPQKAEQLKRKMSMPVFRAYPSVQEPVIEDPAILARKYVDQELVTNIAEAQIAATLVSMKFSEDVALWAARECSDLDQAIAMLQQECELCMNSYPMNQMVSMLKCLHKCCKQCAKSYFTVQITDRSINDCSCPFCKLPELSNEAQHEDEHLEYFSNLDIFLKSILDNDVHELFQRKLRDRSLLQDPNFKWCIQCSSGFFARPKQKRLICPDCGSVTCAQCRKPWERQHEGSSCEAYLEWKRENDPELQAQGVQEHLAQNGIDCPKCKFRYSLARGGCMHFTCTQCKFEFCYGCARPFMMGAKCTVSTYCAKLGLHAHHPRNCLFYLRDKIPLQLQFLLKEQNVKFDTEPMQIKDESSSSSKARAQARCPIPLQKETPQGLVDTVCNTEVPDKHAGMCRTHYVEYLAGKVAKAGIDPLPIFDLTDCVQELRRRGIALPERGPWDTDEIYKNMCSEVIKKHIPLKSA'\r\nalignments = aligner.align(sx, sy)\r\noptimal = list(sorted(alignments))[0]\r\n```\r\n\r\nRunning this gets\r\n```\r\n  File \"scripts/sw_align.py\", line 29, in <module>\r\n    dxy, _ = pairwise_align(aligner, sx, sy)\r\n  File \"/mnt/home/jmorton/research/gert/icml2020/language-alignment/src/language_alignment/smith_waterman.py\", line 41, in pairwise_align\r\n    optimal = list(sorted(alignments))[0]\r\n  File \"/mnt/home/jmorton/venvs/transformers-torch/lib/python3.6/site-packages/Bio/Align/__init__.py\", line 1359, in __len__\r\n    return len(self.paths)\r\nOverflowError: number of optimal alignments is larger than 9223372036854775807\r\n```\r\n\r\nNot sure why there are so many optimal alignments. It seems like this is unwanted behavior.\r\n\r\nI'm noticing that if I run `optimal = next(alignments)`, this issue seems to go away.\r\n\r\nRelevant issue : https://github.com/biopython/biopython/issues/2221\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2931", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2931/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2931/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2931/events", "html_url": "https://github.com/biopython/biopython/issues/2931", "id": 627435316, "node_id": "MDU6SXNzdWU2Mjc0MzUzMTY=", "number": 2931, "title": "Biopython FastaWriter AttributeError Exception", "user": {"login": "muhammadabrar78", "id": 22194847, "node_id": "MDQ6VXNlcjIyMTk0ODQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/22194847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muhammadabrar78", "html_url": "https://github.com/muhammadabrar78", "followers_url": "https://api.github.com/users/muhammadabrar78/followers", "following_url": "https://api.github.com/users/muhammadabrar78/following{/other_user}", "gists_url": "https://api.github.com/users/muhammadabrar78/gists{/gist_id}", "starred_url": "https://api.github.com/users/muhammadabrar78/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muhammadabrar78/subscriptions", "organizations_url": "https://api.github.com/users/muhammadabrar78/orgs", "repos_url": "https://api.github.com/users/muhammadabrar78/repos", "events_url": "https://api.github.com/users/muhammadabrar78/events{/privacy}", "received_events_url": "https://api.github.com/users/muhammadabrar78/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-05-29T17:51:16Z", "updated_at": "2020-06-02T11:25:00Z", "closed_at": "2020-06-02T11:24:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython 1.77.dev0, in conda environment as follow\r\n\r\n\r\n```python\r\nPython: 3.7.0 (default, Oct  9 2018, 10:31:47) \r\n[GCC 7.3.0]\r\nCPython\r\nOS: Linux-4.15.0-99-generic-x86_64-with-debian-buster-sid\r\nBiopython : 1.77.dev0\r\n```\r\nI am using the following conda environment\r\n```\r\n     active environment : bioinformatics\r\n    active env location : /home/abrar/anaconda3/envs/bioinformatics\r\n            shell level : 2\r\n       user config file : /home/abrar/.condarc\r\n    populated config files : /home/abrar/.condarc\r\n    conda version : 4.8.3\r\n    conda-build version : 3.18.11\r\n         python version : 3.7.6.final.0\r\n       virtual packages : __glibc=2.27\r\n       base environment : /home/abrar/anaconda3  (writable)\r\n           channel URLs : https://conda.anaconda.org/conda-forge/linux-64\r\n                          https://conda.anaconda.org/conda-forge/noarch\r\n                          https://conda.anaconda.org/bioconda/linux-64\r\n                          https://conda.anaconda.org/bioconda/noarch\r\n                          https://repo.anaconda.com/pkgs/main/linux-64\r\n                          https://repo.anaconda.com/pkgs/main/noarch\r\n                          https://repo.anaconda.com/pkgs/r/linux-64\r\n                          https://repo.anaconda.com/pkgs/r/noarch\r\n          package cache : /home/abrar/anaconda3/pkgs\r\n                          /home/abrar/.conda/pkgs\r\n       envs directories : /home/abrar/anaconda3/envs\r\n                          /home/abrar/.conda/envs\r\n               platform : linux-64\r\n             user-agent : conda/4.8.3 requests/2.22.0 CPython/3.7.6 Linux/4.15.0-99-generic ubuntu/18.04.1 glibc/2.27\r\n                UID:GID : 1000:1000\r\n             netrc file : None\r\n           offline mode : False\r\n```\r\n### Expected behaviour\r\nI am writing the PDB protein sequence fragment to fasta format as below. \r\n```\r\nfrom Bio.SeqIO import PdbIO, FastaIO\r\n\r\ndef get_fasta(pdb_file, fasta_file, transfer_ids=None):\r\n    fasta_writer = FastaIO.FastaWriter(fasta_file)\r\n    fasta_writer.write_header()\r\n    for rec in PdbIO.PdbSeqresIterator(pdb_file):\r\n        if len(rec.seq) == 0:\r\n            continue\r\n        if transfer_ids is not None and rec.id not in transfer_ids:\r\n            continue\r\n        print(rec.id, rec.seq, len(rec.seq))\r\n        fasta_writer.write_record(rec)\r\n        \r\nget_fasta(open('pdb1tup.ent'), open('1tup.fasta', 'w'), transfer_ids=['1TUP:B'])\r\nget_fasta(open('pdb1olg.ent'), open('1olg.fasta', 'w'), transfer_ids=['1OLG:B'])\r\nget_fasta(open('pdb1ycq.ent'), open('1ycq.fasta', 'w'), transfer_ids=['1YCQ:B'])\r\n```\r\n IN biopython 1.76 it works fine and write all the information in their respectives files which should be its normal behaviour. \r\n### Actual behaviour\r\nHowever, the biopython1.77.dev0 raised the following exception. \r\n```\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-9-8ecf92753ac9> in <module>\r\n     12         fasta_writer.write_record(rec)\r\n     13 \r\n---> 14 get_fasta(open('pdb1tup.ent'), open('1tup.fasta', 'w'), transfer_ids=['1TUP:B'])\r\n     15 get_fasta(open('pdb1olg.ent'), open('1olg.fasta', 'w'), transfer_ids=['1OLG:B'])\r\n     16 get_fasta(open('pdb1ycq.ent'), open('1ycq.fasta', 'w'), transfer_ids=['1YCQ:B'])\r\n\r\n<ipython-input-9-8ecf92753ac9> in get_fasta(pdb_file, fasta_file, transfer_ids)\r\n     10             continue\r\n     11         print(rec.id, rec.seq, len(rec.seq))\r\n---> 12         fasta_writer.write_record(rec)\r\n     13 \r\n     14 get_fasta(open('pdb1tup.ent'), open('1tup.fasta', 'w'), transfer_ids=['1TUP:B'])\r\n\r\n~/anaconda3/envs/bioinformatics/lib/python3.7/site-packages/Bio/SeqIO/FastaIO.py in write_record(self, record)\r\n    303     def write_record(self, record):\r\n    304         \"\"\"Write a single Fasta record to the file.\"\"\"\r\n--> 305         assert self._header_written\r\n    306         assert not self._footer_written\r\n    307         self._record_written = True\r\n\r\nAttributeError: 'FastaWriter' object has no attribute '_header_written'\r\n```\r\n### Steps to reproduce\r\nThe given code is part of the bioinformatics with python cookbook  [here](https://github.com/PacktPublishing/Bioinformatics-with-Python-Cookbook-Second-Edition/blob/master/Chapter07/PDB.ipynb) and the issue is at cell no 11. (the last part of the PDB.ipynb)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2928", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2928/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2928/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2928/events", "html_url": "https://github.com/biopython/biopython/issues/2928", "id": 627204761, "node_id": "MDU6SXNzdWU2MjcyMDQ3NjE=", "number": 2928, "title": "Removing AlphabetEncoder - Gapped and HasStopCodon", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2020-05-29T11:37:56Z", "updated_at": "2020-07-29T08:10:51Z", "closed_at": "2020-07-29T08:10:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Cross reference #2046, this issue is to focus on removing the AlphabetEncoder classes and associated usage in Bio.Seq for things like the translation functions.\r\n\r\n(Logging here and self-assigning to avoid duplication of effort with @mdehoon)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2919", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2919/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2919/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2919/events", "html_url": "https://github.com/biopython/biopython/issues/2919", "id": 626342463, "node_id": "MDU6SXNzdWU2MjYzNDI0NjM=", "number": 2919, "title": "Seq(\"X\").join(single_string) fails", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-28T09:00:49Z", "updated_at": "2020-05-31T11:53:31Z", "closed_at": "2020-05-31T11:53:31Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\n>>> import sys; print(sys.version)\r\n3.7.6 | packaged by conda-forge | (default, Jan  7 2020, 22:05:27) \r\n[Clang 9.0.1 ]\r\n>>> import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nDarwin-19.4.0-x86_64-i386-64bit\r\n>>> import Bio; print(Bio.__version__)\r\n1.78.dev0\r\n```\r\n\r\n### Expected behaviour\r\n\r\nThe ``Seq`` object should match the Python string's join method with single string arguments:\r\n\r\n```\r\n>>> \"X\".join(\"a\")\r\n'a'\r\n>>> \"X\".join(\"abc\")\r\n'aXbXc'\r\n```\r\n\r\n### Actual behaviour\r\n\r\n```\r\n>>> from Bio.Seq import Seq\r\n>>> Seq(\"X\").join(\"abc\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/pc40583/repositories/biopython/Bio/Seq.py\", line 1244, in join\r\n    raise ValueError(\"Input must be an iterable\")\r\nValueError: Input must be an iterable\r\n>>> Seq(\"X\").join(\"a\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/pc40583/repositories/biopython/Bio/Seq.py\", line 1244, in join\r\n    raise ValueError(\"Input must be an iterable\")\r\nValueError: Input must be an iterable\r\n```\r\n\r\n### Steps to reproduce\r\n\r\nGiven above. Noted by @chris-rands here: https://github.com/biopython/biopython/pull/2916#issuecomment-635193611", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2917", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2917/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2917/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2917/events", "html_url": "https://github.com/biopython/biopython/issues/2917", "id": 626208215, "node_id": "MDU6SXNzdWU2MjYyMDgyMTU=", "number": 2917, "title": "transition/transversion scoring matrix in Bio/Phylo/TreeConstruction.py", "user": {"login": "mdehoon", "id": 136062, "node_id": "MDQ6VXNlcjEzNjA2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/136062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdehoon", "html_url": "https://github.com/mdehoon", "followers_url": "https://api.github.com/users/mdehoon/followers", "following_url": "https://api.github.com/users/mdehoon/following{/other_user}", "gists_url": "https://api.github.com/users/mdehoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdehoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdehoon/subscriptions", "organizations_url": "https://api.github.com/users/mdehoon/orgs", "repos_url": "https://api.github.com/users/mdehoon/repos", "events_url": "https://api.github.com/users/mdehoon/events{/privacy}", "received_events_url": "https://api.github.com/users/mdehoon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "etal", "id": 52723, "node_id": "MDQ6VXNlcjUyNzIz", "avatar_url": "https://avatars1.githubusercontent.com/u/52723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etal", "html_url": "https://github.com/etal", "followers_url": "https://api.github.com/users/etal/followers", "following_url": "https://api.github.com/users/etal/following{/other_user}", "gists_url": "https://api.github.com/users/etal/gists{/gist_id}", "starred_url": "https://api.github.com/users/etal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etal/subscriptions", "organizations_url": "https://api.github.com/users/etal/orgs", "repos_url": "https://api.github.com/users/etal/repos", "events_url": "https://api.github.com/users/etal/events{/privacy}", "received_events_url": "https://api.github.com/users/etal/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "etal", "id": 52723, "node_id": "MDQ6VXNlcjUyNzIz", "avatar_url": "https://avatars1.githubusercontent.com/u/52723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etal", "html_url": "https://github.com/etal", "followers_url": "https://api.github.com/users/etal/followers", "following_url": "https://api.github.com/users/etal/following{/other_user}", "gists_url": "https://api.github.com/users/etal/gists{/gist_id}", "starred_url": "https://api.github.com/users/etal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etal/subscriptions", "organizations_url": "https://api.github.com/users/etal/orgs", "repos_url": "https://api.github.com/users/etal/repos", "events_url": "https://api.github.com/users/etal/events{/privacy}", "received_events_url": "https://api.github.com/users/etal/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2020-05-28T04:38:33Z", "updated_at": "2020-07-11T15:58:25Z", "closed_at": "2020-07-11T15:58:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In `Bio/Phylo/TreeConstruction.py`, the transition/transversion scoring matrix is defined in the `DistanceCalculator` class as \r\n```\r\n    # transition/transversion scoring matrix\r\n    trans = [[6], [-5, 6], [-5, -1, 6], [-1, -5, -5, 6]]\r\n```\r\nso\r\n```\r\n       A       T       C       G\r\nA      6      -5      -5      -1\r\nT     -5       6      -1      -5\r\nC     -5      -1       6      -5\r\nG     -1      -5      -5       6\r\n```\r\nIs there a reference for this transition/transversion scoring matrix? A commonly used transition/transversion scoring matrix is the one defined by David Wheeler (\"Weight Matrices for Sequence Similarity Scoring\", Version 2.0, May 1996):\r\n```\r\n      A      T      C      G\r\nA     0      5      5      1\r\nT     5      0      1      5\r\nC     5      1      0      5\r\nG     1      5      5      0\r\n```\r\n(defined as a penalty matrix).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2915", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2915/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2915/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2915/events", "html_url": "https://github.com/biopython/biopython/issues/2915", "id": 625656045, "node_id": "MDU6SXNzdWU2MjU2NTYwNDU=", "number": 2915, "title": "Exploring Python 3.4+ enum for alphabets / molecule types", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-27T12:33:08Z", "updated_at": "2020-07-23T09:25:48Z", "closed_at": "2020-07-23T09:25:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is my notes for a possible replacement for ``Bio.Alphabets`` as per #2050, using the relatively new Python enumerate support added in Python 3.4: https://docs.python.org/3/library/enum.html \r\n\r\nDraft docstring content with rationale:\r\n\r\n```rst\r\nThe alphabet system has been greatly simplified in Biopython 1.78, and is now\r\njust a Python enumeration offering only:\r\n\r\n - DNA (including both single and double stranded)\r\n - RNA\r\n - Nucleotide (for use when DNA versus RNA is unknown)\r\n - Protein (including any modified residues)\r\n - Other/Unknown (default)\r\n\r\nThe two primary uses of this are to track the intended meaning of sequences\r\nfrom file formats where the sequence type is explicit (e.g. GenBank and EMBL,\r\nbut not FASTA), and to prevent improper use of sequence methods (e.g. you\r\ncannot transcribe a protein sequence) or mixed concatenation (e.g. no adding\r\nDNA to protein - a simple typing system).\r\n\r\nThis is essentially a restricted molecule type, making no attempt to record or\r\nrestrict the allowed letters in the associated sequence (e.g. upper/lower or\r\nmixed case, special characters like alignment gaps or stop codons). The now\r\ndeprecated ``Bio.Alphabet`` system could record but did not enforce this.\r\n```\r\n\r\nI essentially want to simplify all the existing alphabet objects to just the following (that in itself could be a major job/milestone), and replace them with an enum:\r\n\r\n```python\r\nfrom Bio.Alphabet import generic_dna\r\nfrom Bio.Alphabet import generic_rna\r\nfrom Bio.Alphabet import generic_nucleotide\r\nfrom Bio.Alphabet import generic_protein\r\nfrom Bio.Alphabet import generic_alphabet  # see also single_letter_alphabet\r\n```\r\n\r\nNote by dropping the concern about which symbols/characters/letters are being used, from the point of view of the new enum, we no longer care about single letter vs three letter alphabets - ``single_letter_alphabet`` vs ``generic_alphabet``. Existing support for using three-letter codes in ``MutableSeq`` is incredibly fragile anyway\r\n\r\ne.g.\r\n\r\n```python\r\nimport enum\r\n\r\nclass Alphabets(enum.Enum):\r\n    DNA = enum.auto()\r\n    RNA = enum.auto()\r\n    Protein = enum.auto()\r\n    Nucleotide = enum.auto()\r\n    Other = enum.auto()\r\n```\r\n\r\nThat would implicitly use integer values underneath, and they can be made explicit, which makes sense if we want to exchange these objects as C code or any binary encoding:\r\n\r\n```\r\n>>> for a in Alphabets: print(repr(a))\r\n... \r\n<Alphabets.DNA: 1>\r\n<Alphabets.RNA: 2>\r\n<Alphabets.Protein: 3>\r\n<Alphabets.Nucleotide: 4>\r\n<Alphabets.Other: 5>\r\n```\r\n\r\nNote the default starts at 1, so that they all evaluate as true.\r\n\r\nHowever, I would not want to expose any underlying integer value too obviously. Quoting: https://docs.python.org/3.8/library/enum.html\r\n\r\n> **Note** For the majority of new code, Enum and Flag are strongly recommended, since IntEnum and IntFlag break some semantic promises of an enumeration (by being comparable to integers, and thus by transitivity to other unrelated enumerations). IntEnum and IntFlag should be used only in cases where Enum and Flag will not do; for example, when integer constants are replaced with enumerations, or for interoperability with other systems.\r\n\r\nWe _might_ be able to use ``Flag`` to encode some of the pre-existing Biopython rules about combining alphabets (e.g. We allow adding RNA+nucleotide giving a nucleotide sequence, and we disallow adding RNA+DNA), but it seems the default behaviour is an imperfect match:\r\n\r\n```python\r\nimport enum\r\n\r\nclass Alphabets(enum.Flag):\r\n    DNA = enum.auto()\r\n    RNA = enum.auto()\r\n    Protein = enum.auto()\r\n    Nucleotide = DNA | RNA\r\n    Other = enum.auto()\r\n```\r\n\r\nExample combinations:\r\n\r\n```\r\n>>> Alphabets.DNA | Alphabets.Nucleotide\r\n<Alphabets.Nucleotide: 3>\r\n>>> Alphabets.DNA | Alphabets.RNA is Alphabets.Nucleotide\r\nTrue\r\n>>> Alphabets.DNA | Alphabets.Nucleotide is Alphabets.Nucleotide\r\nTrue\r\n>>> Alphabets.DNA | Alphabets.Protein\r\n<Alphabets.Protein|DNA: 5>\r\n```\r\n\r\nHowever, we could define our own rules via ``__or__`` or ``__and__`` etc to preserve the existing ``Seq`` addition etc behaviour.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2913", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2913/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2913/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2913/events", "html_url": "https://github.com/biopython/biopython/issues/2913", "id": 625239895, "node_id": "MDU6SXNzdWU2MjUyMzk4OTU=", "number": 2913, "title": "MMCIFParser fails to load atom serial numbers.", "user": {"login": "ChrisMoth", "id": 30936704, "node_id": "MDQ6VXNlcjMwOTM2NzA0", "avatar_url": "https://avatars2.githubusercontent.com/u/30936704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisMoth", "html_url": "https://github.com/ChrisMoth", "followers_url": "https://api.github.com/users/ChrisMoth/followers", "following_url": "https://api.github.com/users/ChrisMoth/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisMoth/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisMoth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisMoth/subscriptions", "organizations_url": "https://api.github.com/users/ChrisMoth/orgs", "repos_url": "https://api.github.com/users/ChrisMoth/repos", "events_url": "https://api.github.com/users/ChrisMoth/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisMoth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "JoaoRodrigues", "id": 237328, "node_id": "MDQ6VXNlcjIzNzMyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/237328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoaoRodrigues", "html_url": "https://github.com/JoaoRodrigues", "followers_url": "https://api.github.com/users/JoaoRodrigues/followers", "following_url": "https://api.github.com/users/JoaoRodrigues/following{/other_user}", "gists_url": "https://api.github.com/users/JoaoRodrigues/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoaoRodrigues/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoaoRodrigues/subscriptions", "organizations_url": "https://api.github.com/users/JoaoRodrigues/orgs", "repos_url": "https://api.github.com/users/JoaoRodrigues/repos", "events_url": "https://api.github.com/users/JoaoRodrigues/events{/privacy}", "received_events_url": "https://api.github.com/users/JoaoRodrigues/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "JoaoRodrigues", "id": 237328, "node_id": "MDQ6VXNlcjIzNzMyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/237328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoaoRodrigues", "html_url": "https://github.com/JoaoRodrigues", "followers_url": "https://api.github.com/users/JoaoRodrigues/followers", "following_url": "https://api.github.com/users/JoaoRodrigues/following{/other_user}", "gists_url": "https://api.github.com/users/JoaoRodrigues/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoaoRodrigues/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoaoRodrigues/subscriptions", "organizations_url": "https://api.github.com/users/JoaoRodrigues/orgs", "repos_url": "https://api.github.com/users/JoaoRodrigues/repos", "events_url": "https://api.github.com/users/JoaoRodrigues/events{/privacy}", "received_events_url": "https://api.github.com/users/JoaoRodrigues/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2020-05-26T22:28:03Z", "updated_at": "2020-05-29T00:27:12Z", "closed_at": "2020-05-29T00:27:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a fix for this.  Please let me know if you approve this issue, and whether you'd like a pull request.\r\n\r\n### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\nPython 3.7.6 (default, Jan  8 2020, 19:59:22) \r\n[GCC 7.3.0] :: Anaconda, Inc. on linux\r\n\r\nI also downloaded the latest version of Biopython to verify that the problem is still in the code.\r\n\r\n### Expected behaviour\r\n\r\nWhen structure_builder.init_atom() is called from MMCIFParser.py, the atom serial_number would be initialized in of StructureBuilder.py , and in turn, the parsed structure would be saveable with the original atom serial numbers.\r\n\r\nThe demo  program below should print \"serial #1\" following both pdb and mmcif parsers.\r\n\r\npdb   first atom serial # 1\r\nmmcif first atom serial # 1\r\n\r\nThe demo program should successfully write 4 .pdb files to /tmp.\r\n\r\n\r\n### Actual behaviour\r\n\r\nAtom serial numbers, available as mmcif_dict['_atom_site.id'] are disregarded by the MMCIF parser.  Attempting to save the parsed mmCIF structure to PDB with the preserve_atom_number_flag=True crashes.\r\n\r\nSpecifically, the demo  program below outputs:\r\npdb   first atom serial # 1\r\nmmcif first atom serial # **None**\r\n\r\nand only 3 of the 4 .pdb files are properly written to temp.\r\n\r\nThe 4th, which attempts to save the mmcif structure as pdb with \"preserve_atom_number_flag=True\" generate this exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"./atom_serial_bug.py\", line 26, in <module>\r\n    pdbio.save('/tmp/cif_crashes_with_preserve.pdb',preserve_atom_numbering=True)\r\n  File \"/home/mothcw/anaconda3/lib/python3.7/site-packages/Bio/PDB/PDBIO.py\", line 353, in save\r\n    chain_id,\r\n  File \"/home/mothcw/anaconda3/lib/python3.7/site-packages/Bio/PDB/PDBIO.py\", line 218, in _get_atom_line\r\n    return _ATOM_FORMAT_STRING % args\r\n**TypeError: %i format: a number is required, not NoneType**\r\n\r\n\r\n### Steps to reproduce\r\n0) Create a working directory\r\n1) Download 1cek.pdb from rcsb.org\r\n2) Download 1cek.cif from rcsb.org\r\n\r\nRun this short program to demonstrate that atom serial numbers are not populated by the mmCIF parser:\r\n---------------------------------------------------------------------------------------------------------------------\r\n```\r\n#!/usr/bin/env python\r\n\r\n\"\"\"Short program to demonstrate that atom serial numbers are not \r\n   read by the MMCIF parser\"\"\"\r\n\r\n# Parse in the small 1cek.cif file downloaded from rcsb\r\nfrom Bio.PDB import MMCIFParser\r\nmmCIF_parser = MMCIFParser(QUIET=True)\r\nstructure_cif = mmCIF_parser.get_structure('1cek','1cek.cif')\r\n\r\n# Parse in 1cek.pdb file downloaded from rcsb\r\nfrom Bio.PDB import PDBParser\r\npdb_parser = PDBParser(QUIET=True)\r\nstructure_pdb = pdb_parser.get_structure('1cek','1cek.pdb')\r\n\r\nprint(\"pdb   first atom serial # %s\"%list(structure_pdb.get_atoms())[0].get_serial_number())\r\nprint(\"mmcif first atom serial # %s\"%list(structure_cif.get_atoms())[0].get_serial_number())\r\n\r\nfrom Bio.PDB import PDBIO\r\npdbio = PDBIO()\r\npdbio.set_structure(structure_pdb)\r\npdbio.save('/tmp/pdb_saves_ok_without_preserve.pdb',preserve_atom_numbering=False)\r\npdbio.save('/tmp/pdb_saves_ok_with_preserve.pdb',preserve_atom_numbering=True)\r\npdbio.set_structure(structure_cif)\r\npdbio.save('/tmp/cif_saves_ok_without_preserve.pdb',preserve_atom_numbering=False)\r\npdbio.save('/tmp/cif_crashes_with_preserve.pdb',preserve_atom_numbering=True)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2904", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2904/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2904/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2904/events", "html_url": "https://github.com/biopython/biopython/issues/2904", "id": 624142239, "node_id": "MDU6SXNzdWU2MjQxNDIyMzk=", "number": 2904, "title": "Version specific API links in Tutorial", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413833678, "node_id": "MDU6TGFiZWw0MTM4MzM2Nzg=", "url": "https://api.github.com/repos/biopython/biopython/labels/Documentation", "name": "Documentation", "color": "0052cc", "default": false, "description": null}, {"id": 1376985463, "node_id": "MDU6TGFiZWwxMzc2OTg1NDYz", "url": "https://api.github.com/repos/biopython/biopython/labels/Update", "name": "Update", "color": "bfdadc", "default": false, "description": "Update for data files, e.g., codon tables, restriction enzymes etc."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-25T08:40:19Z", "updated_at": "2020-07-21T21:38:01Z", "closed_at": "2020-07-21T21:38:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As of #2903 for Biopython 1.77, we replaced the links to the old epydoc generated API documentation to point at the Sphinx generated version (see #906).\r\n\r\nHowever, those URLs are deliberately version specific. That means we need a plan for the next release. Options which come to mind:\r\n\r\n- (a) Manually update the version in the document title and these links?\r\n- (b) Can we update the LaTeX to define the Biopython version once, and use that for the document title and within the links? If so, can that be adapted to RST assume we do convert away from LaTeX later on? See #907\r\n- (c) Can we add a redirecting latest version link to the website? See also how does ReadTheDocs do this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2899", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2899/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2899/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2899/events", "html_url": "https://github.com/biopython/biopython/issues/2899", "id": 622175516, "node_id": "MDU6SXNzdWU2MjIxNzU1MTY=", "number": 2899, "title": "incomplete/inaccessible SeqFeatures for SeqRecord objects of differing type (gene vs chromosome)", "user": {"login": "apsamuel", "id": 1002162, "node_id": "MDQ6VXNlcjEwMDIxNjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1002162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apsamuel", "html_url": "https://github.com/apsamuel", "followers_url": "https://api.github.com/users/apsamuel/followers", "following_url": "https://api.github.com/users/apsamuel/following{/other_user}", "gists_url": "https://api.github.com/users/apsamuel/gists{/gist_id}", "starred_url": "https://api.github.com/users/apsamuel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apsamuel/subscriptions", "organizations_url": "https://api.github.com/users/apsamuel/orgs", "repos_url": "https://api.github.com/users/apsamuel/repos", "events_url": "https://api.github.com/users/apsamuel/events{/privacy}", "received_events_url": "https://api.github.com/users/apsamuel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-21T01:03:47Z", "updated_at": "2020-05-21T11:13:13Z", "closed_at": "2020-05-21T11:13:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version 1.76 , Python version (3.7.4), and operating\r\nsystem as follows:\r\n\r\nSystem version (sys.version)\r\n```\r\n3.7.4 (default, Aug 13 2019, 15:17:50) \r\n[Clang 4.0.1 (tags/RELEASE_401/final)]\r\n```\r\n\r\nPython Version (print(platform.python_implementation()); print(platform.platform()))\r\n```\r\nprint(platform.python_implementation()); print(platform.platform())\r\nCPython\r\n\r\n$ python --version\r\nPython 3.7.4\r\n```\r\n\r\nOS\r\n```\r\nDarwin-19.4.0-x86_64-i386-64bit\r\n```\r\n\r\n### Expected behaviour\r\n\r\nfeatures attached to seqRecord objects to match the features returned in NCBI UI.\r\n\r\n\r\n\r\n\r\n\r\n### Actual behaviour\r\n\r\nThere is no exception message, but the object does not appear to have the data seen in the two equivalent records in the UI. \r\n\r\nrecord for the gene in NCBI nucleotide DB: https://www.ncbi.nlm.nih.gov/nuccore/388428999\r\nrecord for the chromosome in NCBI nucleotide DB: https://www.ncbi.nlm.nih.gov/nuccore/NC_000013.11 \r\n\r\nwhen you view the sequence features the gene, it is equivalent to the features in the object for gene (43 features), when you view the sequence features for the chromosome, there are several hundred, if not more however the corresponding sequence record object only has 1 feature, which is the `source`.\r\n\r\n### Steps to reproduce\r\nexecute the following\r\n```\r\n#ref sequence chromosome 13\r\nrec_refseq_chr = SeqIO.read( Entrez.efetch(db='nucleotide', rettype='gb', retmode='text', id='568815585'), 'gb')\r\n#ref sequence BRCA2\r\nrec_refseq_gene = SeqIO.read( Entrez.efetch(db='nucleotide', rettype='gb', retmode='text', id='388428999'), 'gb')\r\n\r\n#checking the feature counts on each\r\nlen(rec_refseq_gene.features)\r\nOut[38]: 43\r\nlen(rec_refseq_chr.features)\r\nOut[39]: 1\r\n```\r\n\r\ncompare to the following:\r\n\r\nhttps://www.ncbi.nlm.nih.gov/nuccore/568815585 (chromosome -> corresponds to rec_refseq_chr)\r\nhttps://www.ncbi.nlm.nih.gov/nuccore/NG_012772.3 (gene -> corresponds to rec_refseq_gene)\r\n\r\n\r\nThanks in advance, please let me know if i should add more info.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2895", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2895/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2895/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2895/events", "html_url": "https://github.com/biopython/biopython/issues/2895", "id": 619349499, "node_id": "MDU6SXNzdWU2MTkzNDk0OTk=", "number": 2895, "title": "Concatenate output  of different genes is not as expected .", "user": {"login": "limin321", "id": 42760669, "node_id": "MDQ6VXNlcjQyNzYwNjY5", "avatar_url": "https://avatars3.githubusercontent.com/u/42760669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/limin321", "html_url": "https://github.com/limin321", "followers_url": "https://api.github.com/users/limin321/followers", "following_url": "https://api.github.com/users/limin321/following{/other_user}", "gists_url": "https://api.github.com/users/limin321/gists{/gist_id}", "starred_url": "https://api.github.com/users/limin321/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/limin321/subscriptions", "organizations_url": "https://api.github.com/users/limin321/orgs", "repos_url": "https://api.github.com/users/limin321/repos", "events_url": "https://api.github.com/users/limin321/events{/privacy}", "received_events_url": "https://api.github.com/users/limin321/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2020-05-16T01:30:20Z", "updated_at": "2020-05-19T07:29:43Z", "closed_at": "2020-05-19T07:29:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\nI wrote the following codes to extract genes from a genome, and then concatenate them all as +1 strand.   While Concatenate output is not correct. \r\n\r\n```python\r\nfrom Bio import SeqIO\r\nfrom Bio.Seq import Seq\r\nfrom Bio.SeqRecord import SeqRecord\r\n\r\nstrains = ['But001']\r\n\r\n# create two empty lists\r\nloc_list = []\r\ngen_list = []\r\n\r\nfor strain in strains:\r\n    records = SeqIO.parse(strain+'.gb', 'genbank') # parse genbank file\r\n    for record in records:\r\n        if \"chromosome circular\" in record.description: # get circular chromosome and save it for 6 housekeeping gene extraction\r\n            cir = record\r\n            #print(cir.description)\r\n\r\n            # The for loop extracting 6 genes location and add to loc_list\r\n            for feature in cir.features:\r\n                if feature.type != 'CDS':\r\n                    continue\r\n                else:\r\n                    genes = [['glnA'], ['atpD'], ['dnaK'], ['rpoB'], ['recA'],['threonine synthase']]\r\n                    if feature.qualifiers.get('gene') in genes or feature.qualifiers['product'] in genes:\r\n                        lo = feature.location\r\n                        #print(lo)\r\n                        loc_list.append(lo)\r\n                        print(len(loc_list))\r\n     # This for loop create 6 SeqRecord based on 6 location given by loc_list and add to gene_list.\r\n    for item in loc_list:\r\n        gene = cir[item.start:item.end]\r\n        #print(gene)\r\n        gen_list.append(gene)\r\n        #print(len(gen_list))\r\n        #print(type(gene))\r\n    #print(gen_list)\r\n    gen6 = SeqRecord(\"\")\r\n    for item in gen_list:\r\n        for feature in item.features:\r\n            if feature.type != 'CDS':\r\n                continue\r\n            else:\r\n                if feature.strand == -1:\r\n                    # print(item.seq)\r\n                    item = item.seq.reverse_complement()\r\n                    print(item)\r\n                    item = item.reverse_complement()\r\n                    print(type(item))\r\n                else:\r\n                    item = item\r\n                    print(item.seq)\r\n\r\n        gen6 = gen6 + item\r\n\r\n    SeqIO.write(gen6, \"gene6_2020.fasta\", 'fasta')\r\n    print(len(gen6.seq))\r\n    print(type(gen6))\r\n    print(gen6)\r\n```\r\n(*Please copy and run the above in your Python, and copy-and-paste the output*)\r\n<img width=\"573\" alt=\"Screen Shot 2020-05-15 at 7 23 08 PM\" src=\"https://user-images.githubusercontent.com/42760669/82108173-83b97980-96e1-11ea-98a3-cb87443a4530.png\">\r\n\r\n\r\n### Expected behaviour\r\nwhy each gene I print either start with ATG or GTG, while after I concatenate them, it starts with CTA. I checked the total length is right. Just the concatenate output is not what I expected. Can anyone please explain to me what might be the problem?\r\n\r\nYour help are greatly appreciated.\r\n\r\n### Actual behaviour\r\n\r\n(*Please fill this in, and provide any exception message in full*)\r\n\r\n### Steps to reproduce\r\n\r\n(*Please fill this in *)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2894", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2894/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2894/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2894/events", "html_url": "https://github.com/biopython/biopython/issues/2894", "id": 619200913, "node_id": "MDU6SXNzdWU2MTkyMDA5MTM=", "number": 2894, "title": "SeqIO runs into \"KeyError: 'Assembly-Data\" when parsing NIH genbank files", "user": {"login": "mvhanson", "id": 10411681, "node_id": "MDQ6VXNlcjEwNDExNjgx", "avatar_url": "https://avatars3.githubusercontent.com/u/10411681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvhanson", "html_url": "https://github.com/mvhanson", "followers_url": "https://api.github.com/users/mvhanson/followers", "following_url": "https://api.github.com/users/mvhanson/following{/other_user}", "gists_url": "https://api.github.com/users/mvhanson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvhanson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvhanson/subscriptions", "organizations_url": "https://api.github.com/users/mvhanson/orgs", "repos_url": "https://api.github.com/users/mvhanson/repos", "events_url": "https://api.github.com/users/mvhanson/events{/privacy}", "received_events_url": "https://api.github.com/users/mvhanson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-15T19:43:10Z", "updated_at": "2020-05-18T20:18:33Z", "closed_at": "2020-05-17T09:06:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n>>> import sys\r\n>>> print(sys.version)\r\n3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]\r\n>>> import platform\r\n>>> print(platform.python_implementation())\r\nCPython\r\n>>> print(platform.platform())\r\nWindows-10-10.0.18362-SP0\r\n>>> print(Bio.__version__)\r\n1.76\r\n\r\n\r\n### Expected behaviour\r\n\r\nI'm working with some genbank seq files downloaded from NIH and have the following code:\r\n\r\nfor seq_record in SeqIO.parse(\"datafile_location\", \"genbank\"):\r\n\r\nAnd while it can run through most of the seqs in the seq file (which contains multiple seqs) I get the error in the \"actual behavior\" block below. Any thoughts about how to fix this?\r\n\r\nMaybe delete the offending seq? It can parse to record 92126 of 93145 and then throws the error. If you want to try it out it's gbvrl18.seq that's throwing the error. \r\n\r\nI have tried re-downloading the seq file, but that doesn't fix the problem. \r\n\r\nSeqIO is smooth as silk for hundreds of thousands of other seqs in other files. \r\n\r\nThank you guys for building this btw, it's a huge contribution to mankind. Kudos. \r\n\r\n### Actual behaviour\r\n\r\n> File \"C:\\python38\\lib\\site-packages\\Bio\\GenBank\\Scanner.py\", line 516,\r\nin parse_records record = self.parse(handle, do_features) File\r\n> \"C:\\python38\\lib\\site-packages\\Bio\\GenBank\\Scanner.py\", line 499, in\r\nparse if self.feed(handle, consumer, do_features): File\r\n> \"C:\\python38\\lib\\site-packages\\Bio\\GenBank\\Scanner.py\", line 466, in\r\nfeed self._feed_header_lines(consumer, self.parse_header()) File\r\n> \"C:\\python38\\lib\\site-packages\\Bio\\GenBank\\Scanner.py\", line 1801, in\r\nfeed_header_lines previous_value_line = structured_comment_dict[ KeyError: 'Assembly-Data'\r\n\r\n### Steps to reproduce\r\n\r\nSee above -- I'm assuming this is an error in the gbvrl18.seq seq file -- but is there a workaround for the problematic seq? Jump over it? Delete it? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2892", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2892/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2892/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2892/events", "html_url": "https://github.com/biopython/biopython/issues/2892", "id": 618203163, "node_id": "MDU6SXNzdWU2MTgyMDMxNjM=", "number": 2892, "title": "Problem in parsing pdb structures raised by Entity.py", "user": {"login": "DarioMarzella", "id": 55996385, "node_id": "MDQ6VXNlcjU1OTk2Mzg1", "avatar_url": "https://avatars0.githubusercontent.com/u/55996385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DarioMarzella", "html_url": "https://github.com/DarioMarzella", "followers_url": "https://api.github.com/users/DarioMarzella/followers", "following_url": "https://api.github.com/users/DarioMarzella/following{/other_user}", "gists_url": "https://api.github.com/users/DarioMarzella/gists{/gist_id}", "starred_url": "https://api.github.com/users/DarioMarzella/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DarioMarzella/subscriptions", "organizations_url": "https://api.github.com/users/DarioMarzella/orgs", "repos_url": "https://api.github.com/users/DarioMarzella/repos", "events_url": "https://api.github.com/users/DarioMarzella/events{/privacy}", "received_events_url": "https://api.github.com/users/DarioMarzella/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-14T12:49:05Z", "updated_at": "2020-05-14T17:55:34Z", "closed_at": "2020-05-14T17:55:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows: \r\n\r\n```\r\n>>> import sys; print(sys.version)\r\n3.7.4 (default, Aug 13 2019, 20:35:49) \r\n[GCC 7.3.0]\r\n>>> import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nLinux-3.10.0-693.2.2.el7.x86_64-x86_64-with-centos-7.4.1708-Core\r\n>>> import Bio; print(Bio.__version__)\r\n1.76\r\n\r\n```\r\n### Expected behaviour\r\n\r\nWhether a residue is defined two times, add() or insert() functions in  Entity.py should raise the following exception, that should not break the code:\r\n```\r\nPDBConstructionException(\"%s defined twice\" % entity_id)\r\n```\r\n### Actual behaviour\r\n\r\nThe Exception string is not correctly formatted, thus the following error is raised, and this blocks the running parser:\r\n```\r\n  File \"/home/dario/anaconda3/lib/python3.7/site-packages/Bio/PDB/Entity.py\", line 215, in add\r\n    raise PDBConstructionException(\"%s defined twice\" %entity_id)\r\nTypeError: not all arguments converted during string formatting\r\n```\r\n\r\n### Steps to reproduce\r\n1) Download the following pdb structure:\r\n\r\nhttp://www.imgt.org/3Dstructure-DB/IMGT-FILE/IMGT-1T0M.pdb.gz\r\n\r\n2) Unzip it to IMGT-1T0M.pdb\r\n\r\n3) run:\r\n```\r\nfrom Bio.PDB import PDBParser\r\n\r\npdbf = 'IMGT-1T0M.pdb'\r\nP = PDBParser(QUIET=1)\r\nstructure = P.get_structure('s', pdbf)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2878", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2878/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2878/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2878/events", "html_url": "https://github.com/biopython/biopython/issues/2878", "id": 616848654, "node_id": "MDU6SXNzdWU2MTY4NDg2NTQ=", "number": 2878, "title": "linting failures with flake8 v3.8", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413834067, "node_id": "MDU6TGFiZWw0MTM4MzQwNjc=", "url": "https://api.github.com/repos/biopython/biopython/labels/Style", "name": "Style", "color": "006b75", "default": false, "description": null}, {"id": 413833889, "node_id": "MDU6TGFiZWw0MTM4MzM4ODk=", "url": "https://api.github.com/repos/biopython/biopython/labels/Testing", "name": "Testing", "color": "5319e7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-05-12T17:57:18Z", "updated_at": "2020-05-13T09:23:13Z", "closed_at": "2020-05-13T09:23:13Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Yesterday flake8 v3.8.0 and v3.8.1 were released\r\n\r\nhttps://flake8.pycqa.org/en/3.8.1/release-notes/3.8.1.html\r\nhttps://flake8.pycqa.org/en/3.8.1/release-notes/3.8.0.html\r\n\r\nThis updated Pyflakes to use 2.2.x which adds F501 - F509 and F521,\r\n\r\nhttps://gitlab.com/pycqa/flake8/-/merge_requests/417/diffs\r\n\r\nAnd it now uses pycodestyle 2.6.x https://pycodestyle.pycqa.org/en/latest/developer.html#changes \r\n\r\nOur code now fails on TravisCI as seen already on pull request  #2866 with:\r\n\r\n* E741 ambiguous variable name 'l' (lots of cases)\r\n* F507 '...' % ... has 3 placeholder(s) but 2 substitution(s)\r\n\r\nWe probably need to ignore E741 for now, and fix or whitelist the single F507 case?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2860", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2860/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2860/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2860/events", "html_url": "https://github.com/biopython/biopython/issues/2860", "id": 612383545, "node_id": "MDU6SXNzdWU2MTIzODM1NDU=", "number": 2860, "title": "Return element in atom.get_full_id() ?", "user": {"login": "martinfalk", "id": 9251300, "node_id": "MDQ6VXNlcjkyNTEzMDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9251300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinfalk", "html_url": "https://github.com/martinfalk", "followers_url": "https://api.github.com/users/martinfalk/followers", "following_url": "https://api.github.com/users/martinfalk/following{/other_user}", "gists_url": "https://api.github.com/users/martinfalk/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinfalk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinfalk/subscriptions", "organizations_url": "https://api.github.com/users/martinfalk/orgs", "repos_url": "https://api.github.com/users/martinfalk/repos", "events_url": "https://api.github.com/users/martinfalk/events{/privacy}", "received_events_url": "https://api.github.com/users/martinfalk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-05T07:03:23Z", "updated_at": "2020-05-22T17:12:38Z", "closed_at": "2020-05-22T17:12:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a reason why `atom.get_full_id()` does not return the actual element? I know that you can access the element via `atom.element` but I find it a bit strange that the full ID does not know about it.\r\n \r\nhttps://github.com/biopython/biopython/blob/6c75d2da18afdc89b6b3ef994d87c601f856ae27/Bio/PDB/Atom.py#L365-L371", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2859", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2859/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2859/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2859/events", "html_url": "https://github.com/biopython/biopython/issues/2859", "id": 611967271, "node_id": "MDU6SXNzdWU2MTE5NjcyNzE=", "number": 2859, "title": "SeqIO.read GenBank Parser Error", "user": {"login": "dnanto", "id": 49757922, "node_id": "MDQ6VXNlcjQ5NzU3OTIy", "avatar_url": "https://avatars1.githubusercontent.com/u/49757922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnanto", "html_url": "https://github.com/dnanto", "followers_url": "https://api.github.com/users/dnanto/followers", "following_url": "https://api.github.com/users/dnanto/following{/other_user}", "gists_url": "https://api.github.com/users/dnanto/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnanto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnanto/subscriptions", "organizations_url": "https://api.github.com/users/dnanto/orgs", "repos_url": "https://api.github.com/users/dnanto/repos", "events_url": "https://api.github.com/users/dnanto/events{/privacy}", "received_events_url": "https://api.github.com/users/dnanto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-04T15:33:01Z", "updated_at": "2020-05-06T22:54:07Z", "closed_at": "2020-05-04T17:55:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\n>>> import sys; print(sys.version)\r\n3.7.7 (default, Mar 23 2020, 17:31:31) \r\n[Clang 4.0.1 (tags/RELEASE_401/final)]\r\n>>> import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nDarwin-18.7.0-x86_64-i386-64bit\r\n>>> import Bio; print(Bio.__version__)\r\n1.76\r\n```\r\n\r\n### Expected behaviour\r\n\r\nSuccessfully read the GenBank record.\r\n\r\n### Actual behaviour\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/dnanto/miniconda3/lib/python3.7/site-packages/Bio/SeqIO/__init__.py\", line 744, in read\r\n    first = next(iterator)\r\n  File \"/Users/dnanto/miniconda3/lib/python3.7/site-packages/Bio/GenBank/Scanner.py\", line 516, in parse_records\r\n    record = self.parse(handle, do_features)\r\n  File \"/Users/dnanto/miniconda3/lib/python3.7/site-packages/Bio/GenBank/Scanner.py\", line 499, in parse\r\n    if self.feed(handle, consumer, do_features):\r\n  File \"/Users/dnanto/miniconda3/lib/python3.7/site-packages/Bio/GenBank/Scanner.py\", line 466, in feed\r\n    self._feed_header_lines(consumer, self.parse_header())\r\n  File \"/Users/dnanto/miniconda3/lib/python3.7/site-packages/Bio/GenBank/Scanner.py\", line 1802, in _feed_header_lines\r\n    structured_comment_key\r\nKeyError: 'Assembly-Data'\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```bash\r\nefetch -db nuccore -id MF993533.1 -format gb > MF993533.1.gbk\r\npython -c 'from Bio import SeqIO; SeqIO.read(\"MF993533.1.gbk\", \"gb\");'\r\n```\r\n\r\n### Suggestion\r\n\r\n* Add a degree a permissiveness?\r\n* Ignore this kind of `KeyError`?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2855", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2855/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2855/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2855/events", "html_url": "https://github.com/biopython/biopython/issues/2855", "id": 608741309, "node_id": "MDU6SXNzdWU2MDg3NDEzMDk=", "number": 2855, "title": "SeqIO cannot parse newest swiss format", "user": {"login": "ATPs", "id": 5175685, "node_id": "MDQ6VXNlcjUxNzU2ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/5175685?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ATPs", "html_url": "https://github.com/ATPs", "followers_url": "https://api.github.com/users/ATPs/followers", "following_url": "https://api.github.com/users/ATPs/following{/other_user}", "gists_url": "https://api.github.com/users/ATPs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ATPs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ATPs/subscriptions", "organizations_url": "https://api.github.com/users/ATPs/orgs", "repos_url": "https://api.github.com/users/ATPs/repos", "events_url": "https://api.github.com/users/ATPs/events{/privacy}", "received_events_url": "https://api.github.com/users/ATPs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-29T02:51:39Z", "updated_at": "2020-04-29T17:48:48Z", "closed_at": "2020-04-29T09:24:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version 1.76, Python version 3.7.1, and operating\r\nsystem as follows:\r\n\r\n```python\r\nfrom Bio import SeqIO\r\nfor s in SeqIO.parse('uniprot_trembl_viruses.dat','swiss'):break\r\n```\r\n\r\nfile `uniprot_trembl_viruses.dat` is from `ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/taxonomic_divisions/uniprot_trembl_viruses.dat.gz`\r\n\r\n### Expected behaviour\r\n\r\nthe file can be parsed\r\n\r\n### Actual behaviour\r\n\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-14-1ef837cc9a2c> in <module>\r\n----> 1 for s in SeqIO.parse(filename,'swiss'):break\r\n\r\n~/p/anaconda3/lib/python3.7/site-packages/Bio/SeqIO/SwissIO.py in SwissIterator(handle)\r\n     90         swiss_records = SwissProt.parse(handle)\r\n     91\r\n---> 92         for swiss_record in swiss_records:\r\n     93             # Convert the SwissProt record to a SeqRecord\r\n     94             seq = Seq.Seq(swiss_record.sequence, Alphabet.generic_protein)\r\n\r\n~/p/anaconda3/lib/python3.7/site-packages/Bio/SwissProt/__init__.py in parse(handle)\r\n    138     \"\"\"\r\n    139     while True:\r\n--> 140         record = _read(handle)\r\n    141         if not record:\r\n    142             return\r\n\r\n~/p/anaconda3/lib/python3.7/site-packages/Bio/SwissProt/__init__.py in _read(handle)\r\n    253             _read_kw(record, value)\r\n    254         elif key == \"FT\":\r\n--> 255             _read_ft(record, line)\r\n    256         elif key == \"SQ\":\r\n    257             cols = value.split()\r\n\r\n~/p/anaconda3/lib/python3.7/site-packages/Bio/SwissProt/__init__.py in _read_ft(record, line)\r\n    592         description = line[29:70].rstrip()\r\n    593     if not name:  # is continuation of last one\r\n--> 594         assert not from_res and not to_res, line\r\n    595         name, from_res, to_res, old_description, old_ft_id = record.features[-1]\r\n    596         del record.features[-1]\r\n\r\nAssertionError:                 /note=\"Removed; by host\"\r\n\r\n\r\n----------\r\nit is because that the current `.dat` file changed how the 'FT' lines. Previously it is like\r\n```\r\nFT   TRANSIT       1     73       MITOCHONDRION.\r\nFT   CHAIN        74    282       COMPLEMENT COMPONENT 1, Q SUBCOMPONENT\r\nFT                                BINDING PROTEIN.\r\n```\r\n\r\ncurrently\r\n```\r\nFT   INIT_MET        1\r\nFT                   /note=\"Removed; by host\"\r\nFT                   /evidence=\"ECO:0000256|HAMAP-Rule:MF_04075\"\r\nFT   CHAIN           2..400\r\nFT                   /note=\"Large envelope protein\"\r\nFT                   /evidence=\"ECO:0000256|HAMAP-Rule:MF_04075\"\r\nFT                   /id=\"PRO_5023162156\"\r\nFT   TOPO_DOM        2..253\r\nFT                   /note=\"Intravirion; in internal conformation\"\r\nFT                   /evidence=\"ECO:0000256|HAMAP-Rule:MF_04075\"\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2844", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2844/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2844/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2844/events", "html_url": "https://github.com/biopython/biopython/issues/2844", "id": 605111338, "node_id": "MDU6SXNzdWU2MDUxMTEzMzg=", "number": 2844, "title": "Unable to parse certain Genbank format", "user": {"login": "philiptzou", "id": 809865, "node_id": "MDQ6VXNlcjgwOTg2NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/809865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philiptzou", "html_url": "https://github.com/philiptzou", "followers_url": "https://api.github.com/users/philiptzou/followers", "following_url": "https://api.github.com/users/philiptzou/following{/other_user}", "gists_url": "https://api.github.com/users/philiptzou/gists{/gist_id}", "starred_url": "https://api.github.com/users/philiptzou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philiptzou/subscriptions", "organizations_url": "https://api.github.com/users/philiptzou/orgs", "repos_url": "https://api.github.com/users/philiptzou/repos", "events_url": "https://api.github.com/users/philiptzou/events{/privacy}", "received_events_url": "https://api.github.com/users/philiptzou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-22T22:20:50Z", "updated_at": "2020-06-02T17:39:34Z", "closed_at": "2020-06-02T17:39:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version)\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nimport Bio; print(Bio.__version__)\r\n```\r\n```\r\n3.7.5 (default, Nov  7 2019, 10:50:52)\r\n[GCC 8.3.0]\r\nCPython\r\nLinux-4.15.0-88-generic-x86_64-with-Ubuntu-18.04-bionic\r\n1.76\r\n```\r\n\r\n### Expected behaviour\r\n\r\nShould be able to process [AYW00820.1](https://www.ncbi.nlm.nih.gov/protein/AYW00820.1).\r\n\r\n### Actual behaviour\r\n\r\n```\r\nTraceback (most recent call last):\r\n  ...\r\n  File \"/home/philip/.virtualenvs/.../lib/python3.7/site-packages/Bio/GenBank/Scanner.py\", line 516, in parse_records\r\n    record = self.parse(handle, do_features)\r\n  File \"/home/philip/.virtualenvs/.../lib/python3.7/site-packages/Bio/GenBank/Scanner.py\", line 499, in parse\r\n    if self.feed(handle, consumer, do_features):\r\n  File \"/home/philip/.virtualenvs/.../lib/python3.7/site-packages/Bio/GenBank/Scanner.py\", line 466, in feed\r\n    self._feed_header_lines(consumer, self.parse_header())\r\n  File \"/home/philip/.virtualenvs/.../lib/python3.7/site-packages/Bio/GenBank/Scanner.py\", line 1802, in _feed_header_lines\r\n    structured_comment_key\r\nKeyError: 'Assembly-Data'\r\n\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```python\r\nfrom Bio import SeqIO, Entrez\r\n\r\nhandle = Entrez.efetch(\r\n  db='protein', id='AYW00820.1',\r\n  rettype='gb', retmode='text')\r\nSeqIO.read(handle, format='genbank')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2842", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2842/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2842/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2842/events", "html_url": "https://github.com/biopython/biopython/issues/2842", "id": 602365185, "node_id": "MDU6SXNzdWU2MDIzNjUxODU=", "number": 2842, "title": "string formatting error when loading PDB", "user": {"login": "collinarnett", "id": 38230482, "node_id": "MDQ6VXNlcjM4MjMwNDgy", "avatar_url": "https://avatars3.githubusercontent.com/u/38230482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/collinarnett", "html_url": "https://github.com/collinarnett", "followers_url": "https://api.github.com/users/collinarnett/followers", "following_url": "https://api.github.com/users/collinarnett/following{/other_user}", "gists_url": "https://api.github.com/users/collinarnett/gists{/gist_id}", "starred_url": "https://api.github.com/users/collinarnett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/collinarnett/subscriptions", "organizations_url": "https://api.github.com/users/collinarnett/orgs", "repos_url": "https://api.github.com/users/collinarnett/repos", "events_url": "https://api.github.com/users/collinarnett/events{/privacy}", "received_events_url": "https://api.github.com/users/collinarnett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-18T03:12:39Z", "updated_at": "2020-08-14T01:22:30Z", "closed_at": "2020-08-14T01:22:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version)\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nimport Bio; print(Bio.__version__)\r\n```\r\n\r\n3.6.9 (default, Nov  7 2019, 10:44:02) \r\n[GCC 8.3.0]\r\nCPython\r\nLinux-4.15.0-96-generic-x86_64-with-Ubuntu-18.04-bionic\r\n1.76\r\n\r\n### Expected behaviour\r\n\r\nStructure loaded succesfully\r\n\r\n### Actual behaviour\r\n\r\n\"\"\"\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/multiprocessing/pool.py\", line 119, in worker\r\n    result = (True, func(*args, **kwds))\r\n  File \"<ipython-input-7-16c1a618ba3e>\", line 10, in generate_maps\r\n    structure = parser.get_structure('X', files)\r\n  File \"/home/collin/.virtualenvs/protein_gan/lib/python3.6/site-packages/Bio/PDB/PDBParser.py\", line 92, in get_structure\r\n    self._parse(lines)\r\n  File \"/home/collin/.virtualenvs/protein_gan/lib/python3.6/site-packages/Bio/PDB/PDBParser.py\", line 115, in _parse\r\n    self.trailer = self._parse_coordinates(coords_trailer)\r\n  File \"/home/collin/.virtualenvs/protein_gan/lib/python3.6/site-packages/Bio/PDB/PDBParser.py\", line 241, in _parse_coordinates\r\n    resname, hetero_flag, resseq, icode\r\n  File \"/home/collin/.virtualenvs/protein_gan/lib/python3.6/site-packages/Bio/PDB/StructureBuilder.py\", line 177, in init_residue\r\n    self.chain.add(self.residue)\r\n  File \"/home/collin/.virtualenvs/protein_gan/lib/python3.6/site-packages/Bio/PDB/Entity.py\", line 215, in add\r\n    raise PDBConstructionException(\"%s defined twice\" % entity_id)\r\nTypeError: not all arguments converted during string formatting\r\n\"\"\"\r\n\r\n### Steps to reproduce\r\n\r\nlet me run my hour long job again with logging this time to find out which file it is.\r\nEdit: it's 4uu7\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2840", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2840/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2840/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2840/events", "html_url": "https://github.com/biopython/biopython/issues/2840", "id": 602051345, "node_id": "MDU6SXNzdWU2MDIwNTEzNDU=", "number": 2840, "title": "print Feature Location in a tab-delimited format", "user": {"login": "YiweiZhu", "id": 41197115, "node_id": "MDQ6VXNlcjQxMTk3MTE1", "avatar_url": "https://avatars2.githubusercontent.com/u/41197115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YiweiZhu", "html_url": "https://github.com/YiweiZhu", "followers_url": "https://api.github.com/users/YiweiZhu/followers", "following_url": "https://api.github.com/users/YiweiZhu/following{/other_user}", "gists_url": "https://api.github.com/users/YiweiZhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/YiweiZhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YiweiZhu/subscriptions", "organizations_url": "https://api.github.com/users/YiweiZhu/orgs", "repos_url": "https://api.github.com/users/YiweiZhu/repos", "events_url": "https://api.github.com/users/YiweiZhu/events{/privacy}", "received_events_url": "https://api.github.com/users/YiweiZhu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-17T15:19:25Z", "updated_at": "2020-04-18T02:12:23Z", "closed_at": "2020-04-18T02:12:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\nI want to print the start and end sites of all CDS from a gbk file to further produce a BED file. However, I cannot print the Feature Location as a string with the code like print(\"%s\"%(location)). I wonder how to print the start and end sites with other features of genes in a tab-delimited format?\r\n\r\n### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version)\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nimport Bio; print(Bio.__version__)\r\n```\r\n\r\n```\r\n3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]\r\nCPython\r\nWindows-10-10.0.18362-SP0\r\n1.76\r\n```\r\n\r\n### Expected behaviour\r\n\r\n473144 473993 -\r\n474148 475024 +\r\n\r\n### Actual behaviour\r\n\r\n```\r\n[473144:473993](-)\r\n[474148:475024](+)\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```python\r\nfor seq_record in gbk.features:\r\n    if seq_record.type == \"CDS\":     \r\n            location=seq_record.location  \r\n            print(location)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2838", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2838/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2838/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2838/events", "html_url": "https://github.com/biopython/biopython/issues/2838", "id": 599247230, "node_id": "MDU6SXNzdWU1OTkyNDcyMzA=", "number": 2838, "title": "How to change feature caption to eithe \"product\" or \"gene\" when drawing plasmid diagram?", "user": {"login": "limin321", "id": 42760669, "node_id": "MDQ6VXNlcjQyNzYwNjY5", "avatar_url": "https://avatars3.githubusercontent.com/u/42760669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/limin321", "html_url": "https://github.com/limin321", "followers_url": "https://api.github.com/users/limin321/followers", "following_url": "https://api.github.com/users/limin321/following{/other_user}", "gists_url": "https://api.github.com/users/limin321/gists{/gist_id}", "starred_url": "https://api.github.com/users/limin321/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/limin321/subscriptions", "organizations_url": "https://api.github.com/users/limin321/orgs", "repos_url": "https://api.github.com/users/limin321/repos", "events_url": "https://api.github.com/users/limin321/events{/privacy}", "received_events_url": "https://api.github.com/users/limin321/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2020-04-14T02:15:40Z", "updated_at": "2020-05-13T16:46:33Z", "closed_at": "2020-05-13T08:54:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am trying to draw a digram of a Ti plasmid genbank file using biopython, one of the code is to add features to empty feature set:\r\nThe code is:\r\n\r\ngd_feature_set.add_feature(feature, color=color, label=True, label_size=0.7)\r\n\r\nThe above code will produce a diagram with locus tag as feature caption. What I want is using \"product\"  as feature caption, how should I modify the previous code. In the Biopython book, it said use name=\"my gene\", this will cause all features to have the same caption as \"my gene\". I want each feature to use its \"product \" as caption.\r\n\r\nMy second question is, what if I want to use \"gene\" name as feature caption. In this case, because not all CDS will be assigned a gene name since annotation won't be perfect, so if I want to use \"gene\" name as feature caption. How should I modify the previous code again?\r\n\r\nYour help are greatly appreciated.\r\n\r\nBest,\r\nLimin\r\n\r\n\r\n(*Please copy and run the above in your Python, and copy-and-paste the output*)\r\n\r\n### Expected behaviour\r\n\r\n(*Please fill this in*)\r\n\r\n### Actual behaviour\r\n\r\n(*Please fill this in, and provide any exception message in full*)\r\n\r\n### Steps to reproduce\r\n\r\n(*Please fill this in *)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2823", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2823/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2823/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2823/events", "html_url": "https://github.com/biopython/biopython/issues/2823", "id": 590100486, "node_id": "MDU6SXNzdWU1OTAxMDA0ODY=", "number": 2823, "title": "test_SeqIO_write.py skips test failures", "user": {"login": "mdehoon", "id": 136062, "node_id": "MDQ6VXNlcjEzNjA2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/136062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdehoon", "html_url": "https://github.com/mdehoon", "followers_url": "https://api.github.com/users/mdehoon/followers", "following_url": "https://api.github.com/users/mdehoon/following{/other_user}", "gists_url": "https://api.github.com/users/mdehoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdehoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdehoon/subscriptions", "organizations_url": "https://api.github.com/users/mdehoon/orgs", "repos_url": "https://api.github.com/users/mdehoon/repos", "events_url": "https://api.github.com/users/mdehoon/events{/privacy}", "received_events_url": "https://api.github.com/users/mdehoon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-03-30T08:39:40Z", "updated_at": "2020-04-01T22:39:03Z", "closed_at": "2020-04-01T22:39:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "See the `check_write_fails` method in `test_SeqIO_write.py`:\r\n\r\n```\r\n    def check_write_fails(self, records, format, err_type, err_msg=\"\"):\r\n        if format in SeqIO._BinaryFormats:\r\n            handle = BytesIO()\r\n        else:\r\n            handle = StringIO()\r\n        if err_msg:\r\n            try:\r\n                with warnings.catch_warnings():\r\n                    warnings.simplefilter(\"ignore\", BiopythonWarning)\r\n                    SeqIO.write(records, handle, format)\r\n            except err_type as err:\r\n                self.assertEqual(str(err), err_msg)\r\n        else:\r\n            self.assertRaises(err_type, SeqIO.write, records, handle, format)\r\n        handle.close()\r\n```\r\n\r\nIf there is an `err_msg`, then we never check if the error is actually raised.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2822", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2822/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2822/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2822/events", "html_url": "https://github.com/biopython/biopython/issues/2822", "id": 589132716, "node_id": "MDU6SXNzdWU1ODkxMzI3MTY=", "number": 2822, "title": "Add \"topics\" to repo", "user": {"login": "chris-rands", "id": 20436557, "node_id": "MDQ6VXNlcjIwNDM2NTU3", "avatar_url": "https://avatars3.githubusercontent.com/u/20436557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-rands", "html_url": "https://github.com/chris-rands", "followers_url": "https://api.github.com/users/chris-rands/followers", "following_url": "https://api.github.com/users/chris-rands/following{/other_user}", "gists_url": "https://api.github.com/users/chris-rands/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-rands/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-rands/subscriptions", "organizations_url": "https://api.github.com/users/chris-rands/orgs", "repos_url": "https://api.github.com/users/chris-rands/repos", "events_url": "https://api.github.com/users/chris-rands/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-rands/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-27T13:26:45Z", "updated_at": "2020-04-07T09:10:48Z", "closed_at": "2020-04-07T09:10:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In 2017 github [introduced topics](https://github.blog/2017-01-31-introducing-topics/) as a way of labelling repos, increasing visibility and search-ability. Appropriate topic tags could easily be added to this repo, e.g. bioinformatics, python, biopython, genomics etc.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2819", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2819/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2819/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2819/events", "html_url": "https://github.com/biopython/biopython/issues/2819", "id": 588003931, "node_id": "MDU6SXNzdWU1ODgwMDM5MzE=", "number": 2819, "title": "PDBParser.get_structure throws unhandled ValueError in rare case", "user": {"login": "ekiefl", "id": 8688665, "node_id": "MDQ6VXNlcjg2ODg2NjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/8688665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekiefl", "html_url": "https://github.com/ekiefl", "followers_url": "https://api.github.com/users/ekiefl/followers", "following_url": "https://api.github.com/users/ekiefl/following{/other_user}", "gists_url": "https://api.github.com/users/ekiefl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekiefl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekiefl/subscriptions", "organizations_url": "https://api.github.com/users/ekiefl/orgs", "repos_url": "https://api.github.com/users/ekiefl/repos", "events_url": "https://api.github.com/users/ekiefl/events{/privacy}", "received_events_url": "https://api.github.com/users/ekiefl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-03-25T21:31:56Z", "updated_at": "2020-04-23T10:18:11Z", "closed_at": "2020-04-23T10:18:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```\r\n3.6.7 | packaged by conda-forge | (default, Feb 28 2019, 02:16:08)\r\n[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]\r\nCPython\r\nDarwin-18.2.0-x86_64-i386-64bit\r\n1.75\r\n```\r\n\r\n### Description\r\n\r\nIn rare instances, so far 1 / 46,000 cases, this error crops up. The PDB ID in question is 3cmy\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"mre.py\", line 9, in <module>\r\n    structure = p.get_structure('3cmy', path)\r\n  File \"/Users/evan/virtual-envs/anvio-master/lib/python3.6/site-packages/Bio/PDB/PDBParser.py\", line 89, in get_structure\r\n    self._parse(handle.readlines())\r\n  File \"/Users/evan/virtual-envs/anvio-master/lib/python3.6/site-packages/Bio/PDB/PDBParser.py\", line 110, in _parse\r\n    self.header, coords_trailer = self._get_header(header_coords_trailer)\r\n  File \"/Users/evan/virtual-envs/anvio-master/lib/python3.6/site-packages/Bio/PDB/PDBParser.py\", line 128, in _get_header\r\n    header_dict = _parse_pdb_header_list(header)\r\n  File \"/Users/evan/virtual-envs/anvio-master/lib/python3.6/site-packages/Bio/PDB/parse_pdb_header.py\", line 310, in _parse_pdb_header_list\r\n    missing_res_info = _parse_remark_465(tail)\r\n  File \"/Users/evan/virtual-envs/anvio-master/lib/python3.6/site-packages/Bio/PDB/parse_pdb_header.py\", line 165, in _parse_remark_465\r\n    model, residue[\"res_name\"] = match.group(1).split(\" \")\r\nValueError: too many values to unpack (expected 2)\r\n```\r\n\r\n### Steps to reproduce\r\n\r\nPaste this in a python interpreter:\r\n\r\n```python\r\nimport Bio.PDB as PDB\r\n\r\nl = PDB.PDBList()\r\np = PDB.PDBParser()\r\n\r\npath = l.retrieve_pdb_file('3cmy', file_format='pdb', overwrite=True)\r\nstructure = p.get_structure('3cmy', path)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2817", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2817/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2817/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2817/events", "html_url": "https://github.com/biopython/biopython/issues/2817", "id": 587312265, "node_id": "MDU6SXNzdWU1ODczMTIyNjU=", "number": 2817, "title": "Biosample query throws error to \"contact Biopython developers\"", "user": {"login": "camhilker", "id": 13562689, "node_id": "MDQ6VXNlcjEzNTYyNjg5", "avatar_url": "https://avatars3.githubusercontent.com/u/13562689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camhilker", "html_url": "https://github.com/camhilker", "followers_url": "https://api.github.com/users/camhilker/followers", "following_url": "https://api.github.com/users/camhilker/following{/other_user}", "gists_url": "https://api.github.com/users/camhilker/gists{/gist_id}", "starred_url": "https://api.github.com/users/camhilker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camhilker/subscriptions", "organizations_url": "https://api.github.com/users/camhilker/orgs", "repos_url": "https://api.github.com/users/camhilker/repos", "events_url": "https://api.github.com/users/camhilker/events{/privacy}", "received_events_url": "https://api.github.com/users/camhilker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "mdehoon", "id": 136062, "node_id": "MDQ6VXNlcjEzNjA2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/136062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdehoon", "html_url": "https://github.com/mdehoon", "followers_url": "https://api.github.com/users/mdehoon/followers", "following_url": "https://api.github.com/users/mdehoon/following{/other_user}", "gists_url": "https://api.github.com/users/mdehoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdehoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdehoon/subscriptions", "organizations_url": "https://api.github.com/users/mdehoon/orgs", "repos_url": "https://api.github.com/users/mdehoon/repos", "events_url": "https://api.github.com/users/mdehoon/events{/privacy}", "received_events_url": "https://api.github.com/users/mdehoon/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mdehoon", "id": 136062, "node_id": "MDQ6VXNlcjEzNjA2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/136062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdehoon", "html_url": "https://github.com/mdehoon", "followers_url": "https://api.github.com/users/mdehoon/followers", "following_url": "https://api.github.com/users/mdehoon/following{/other_user}", "gists_url": "https://api.github.com/users/mdehoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdehoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdehoon/subscriptions", "organizations_url": "https://api.github.com/users/mdehoon/orgs", "repos_url": "https://api.github.com/users/mdehoon/repos", "events_url": "https://api.github.com/users/mdehoon/events{/privacy}", "received_events_url": "https://api.github.com/users/mdehoon/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-03-24T22:14:50Z", "updated_at": "2020-03-26T00:47:46Z", "closed_at": "2020-03-26T00:47:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version 1.74, Python version 3.7.6, and operating\r\nsystem MacOS Catalina 10.15.3 as follows:\r\n\r\n```python\r\nfrom Bio import Entrez\r\nimport pprint\r\n\r\nhandle = Entrez.efetch(db=\"biosample\", id=\"SAMEA3502652\", rettype=\"xml\", retmode=\"text\")\r\nrecord = Entrez.read(handle, validate=False)\r\n\r\npp = pprint.PrettyPrinter(indent=5)\r\npp.pprint(record)\r\n```\r\n\r\n### Error\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n~/Users/camelliahilker/miniconda3/envs/pubmed_project/lib/python3.7/site-packages/Bio/Entrez/Parser.py in read(self, handle)\r\n    344         try:\r\n--> 345             return self.record\r\n    346         except AttributeError:\r\n\r\nAttributeError: 'DataHandler' object has no attribute 'record'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-69-82ee22455e92> in <module>\r\n      2 \r\n      3 handle = Entrez.efetch(db=\"biosample\", id=\"SAMEA3502652\", rettype=\"xml\", retmode=\"text\")\r\n----> 4 record = Entrez.read(handle, validate=False)\r\n      5 \r\n      6 pp = pprint.PrettyPrinter(indent=5)\r\n\r\n~/Users/camelliahilker/miniconda3/envs/pubmed_project/lib/python3.7/site-packages/Bio/Entrez/__init__.py in read(handle, validate, escape)\r\n    472     from .Parser import DataHandler\r\n    473     handler = DataHandler(validate, escape)\r\n--> 474     record = handler.read(handle)\r\n    475     return record\r\n    476 \r\n\r\n~/Users/camelliahilker/miniconda3/envs/pubmed_project/lib/python3.7/site-packages/Bio/Entrez/Parser.py in read(self, handle)\r\n    349                 # any errors, so self.record should be defined. If not, this is\r\n    350                 # a bug.\r\n--> 351                 raise RuntimeError(\"Failed to parse the XML file correctly, possibly due to a bug in Bio.Entrez. Please contact the Biopython developers via the mailing list or GitHub for assistance.\")\r\n    352             else:\r\n    353                 # We did not see the initial <!xml declaration, so probably\r\n\r\nRuntimeError: Failed to parse the XML file correctly, possibly due to a bug in Bio.Entrez. Please contact the Biopython developers via the mailing list or GitHub for assistance.\r\n```\r\n\r\n### Expected behaviour\r\n\r\nHello, I am trying to extract information about a list of samples by using the biosample IDs via Entrez API (biosample database).\r\n\r\n### Actual behaviour\r\n\r\nThrows error. How can I successfully query this database?\r\n\r\n### Steps to reproduce", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2809", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2809/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2809/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2809/events", "html_url": "https://github.com/biopython/biopython/issues/2809", "id": 583016518, "node_id": "MDU6SXNzdWU1ODMwMTY1MTg=", "number": 2809, "title": "ImportError: cannot import name '_aligners'", "user": {"login": "udavdasha", "id": 11231448, "node_id": "MDQ6VXNlcjExMjMxNDQ4", "avatar_url": "https://avatars1.githubusercontent.com/u/11231448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udavdasha", "html_url": "https://github.com/udavdasha", "followers_url": "https://api.github.com/users/udavdasha/followers", "following_url": "https://api.github.com/users/udavdasha/following{/other_user}", "gists_url": "https://api.github.com/users/udavdasha/gists{/gist_id}", "starred_url": "https://api.github.com/users/udavdasha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udavdasha/subscriptions", "organizations_url": "https://api.github.com/users/udavdasha/orgs", "repos_url": "https://api.github.com/users/udavdasha/repos", "events_url": "https://api.github.com/users/udavdasha/events{/privacy}", "received_events_url": "https://api.github.com/users/udavdasha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2020-03-17T13:33:44Z", "updated_at": "2020-04-09T12:06:46Z", "closed_at": "2020-04-09T12:06:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version)\r\n```\r\n3.6.2 (default, Aug 11 2017, 16:17:11)\r\n[GCC 5.4.0 20160609]\r\n\r\n```python\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\n```\r\nCPython\r\nLinux-4.4.0-174-generic-x86_64-with-debian-stretch-sid\r\n```python\r\nimport Bio; print(Bio.__version__)\r\n```\r\n1.76\r\n\r\n### Expected behaviour\r\n```python\r\nfrom Bio import SeqIO\r\n```\r\nI try to import **SeqIO** module from **Bio** and expect it to be imported.\r\n\r\n### Actual behaviour\r\n\r\nWhile running this command I received an error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.5/dist-packages/Bio/SeqIO/__init__.py\", line 390, in <module>\r\n    from Bio.Align import MultipleSeqAlignment\r\n  File \"/usr/local/lib/python3.5/dist-packages/Bio/Align/__init__.py\", line 24, in <module>\r\n    from Bio.Align import _aligners\r\nImportError: cannot import name '_aligners'\r\n```\r\n\r\nWhile googling an error message, I found this issue: https://github.com/biopython/biopython/issues/1991 and checked if my `Bio.__file__` shows that I try to \"import directly from the biopython source directory\" (whatever that means) as suggested, and ran the following:\r\n```python\r\nBio.__file__\r\n```\r\nThe result was:\r\n`'/usr/local/lib/python3.5/dist-packages/Bio/__init__.py'`\r\n\r\nThus, this is not the issue. It was also mentioned that this issue could be due to some installation or compilation fail, but I installed biopython with the typical **pip** command.\r\n\r\n### Steps to reproduce\r\n```python\r\nfrom Bio import SeqIO\r\n```\r\nP.S. I am running into this issue on Ubuntu 16.04.6 LTS, but on my Windows 7 machine everything is perfect...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2808", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2808/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2808/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2808/events", "html_url": "https://github.com/biopython/biopython/issues/2808", "id": 582317853, "node_id": "MDU6SXNzdWU1ODIzMTc4NTM=", "number": 2808, "title": "Coronavirus themed Biopython tutorial notebook?", "user": {"login": "chris-rands", "id": 20436557, "node_id": "MDQ6VXNlcjIwNDM2NTU3", "avatar_url": "https://avatars3.githubusercontent.com/u/20436557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-rands", "html_url": "https://github.com/chris-rands", "followers_url": "https://api.github.com/users/chris-rands/followers", "following_url": "https://api.github.com/users/chris-rands/following{/other_user}", "gists_url": "https://api.github.com/users/chris-rands/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-rands/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-rands/subscriptions", "organizations_url": "https://api.github.com/users/chris-rands/orgs", "repos_url": "https://api.github.com/users/chris-rands/repos", "events_url": "https://api.github.com/users/chris-rands/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-rands/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2020-03-16T13:59:05Z", "updated_at": "2020-04-01T08:29:30Z", "closed_at": "2020-04-01T08:29:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I\u2019ve noticed there can be a barrier to entry for starting using Biopython. The official tutorial is excellent documentation, but too exhaustive for new users. [Peter\u2019s Biopython workshop](https://github.com/peterjc/biopython_workshop) is a great resource (and could feature more prominently on the Biopython github), but I also wanted something more biological and in a Jupter notebook.\r\n\r\nGiven the times, with people working remotely, I was motivated to finally create a draft notebook tutorial, using a genome sequence from SARS-CoV-2 as a topical theme. The idea is to use several parts of Biopython to demonstrate the broad functionality, while keeping it lightweight, and biologically informative. In this case, there is an \u201cunknown sequence\u201d, which the tutorial reveals derives from SARS-CoV-2 and shows how to extract some simple metadata and perform rather basic analyses. I'm sure it could be expanded quite a bit if people like the idea.\r\n\r\nI hope that no-one feels this is an insensitive choice on my part, given the pandemic is ongoing.\r\n\r\nCurrently, I\u2019m storing this as a gist:\r\nEDIT: the gist links have now been deleted, see instead, the [github repo](https://github.com/chris-rands/biopython-coronavirus)\r\n\r\nI would very much like any feedback on the concept and tutorial content and any suggestions to improve it?\r\n\r\nAlso, is there an interest to integrate this into Biopython or not? If not, no worries, I will put it in a separate repo. At some point, I planned to give a Biopython workshop at my university, so it might be useful for this", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2794", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2794/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2794/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2794/events", "html_url": "https://github.com/biopython/biopython/issues/2794", "id": 578885297, "node_id": "MDU6SXNzdWU1Nzg4ODUyOTc=", "number": 2794, "title": "PIL Version Error ( Unable To Open Cinnamon Settings )", "user": {"login": "LWFlouisa", "id": 9245433, "node_id": "MDQ6VXNlcjkyNDU0MzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/9245433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LWFlouisa", "html_url": "https://github.com/LWFlouisa", "followers_url": "https://api.github.com/users/LWFlouisa/followers", "following_url": "https://api.github.com/users/LWFlouisa/following{/other_user}", "gists_url": "https://api.github.com/users/LWFlouisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/LWFlouisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LWFlouisa/subscriptions", "organizations_url": "https://api.github.com/users/LWFlouisa/orgs", "repos_url": "https://api.github.com/users/LWFlouisa/repos", "events_url": "https://api.github.com/users/LWFlouisa/events{/privacy}", "received_events_url": "https://api.github.com/users/LWFlouisa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-10T21:58:47Z", "updated_at": "2020-03-11T08:49:47Z", "closed_at": "2020-03-11T08:49:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI'm not sure if this is a Python error or a Linux Mint 19.1 error:\r\n\r\n~~~\r\nTraceback (most recent call last):\r\n  File \"/usr/share/cinnamon/cinnamon-settings/cinnamon-settings.py\", line 619, in <module>\r\n    window = MainWindow()\r\n  File \"/usr/share/cinnamon/cinnamon-settings/cinnamon-settings.py\", line 247, in __init__\r\n    for module in modules:\r\n  File \"/usr/share/cinnamon/cinnamon-settings/modules/cs_backgrounds.py\", line 5, in <module>\r\n    import imtools\r\n  File \"/usr/share/cinnamon/cinnamon-settings/bin/imtools.py\", line 623, in <module>\r\n    if Image.VERSION == '1.1.7':\r\nAttributeError: module 'PIL.Image' has no attribute 'VERSION'\r\n~~~\r\n\r\nWhenever I try to install PIL, it has no matching version. I just want my cinnamon-settings to get back to normal.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2773", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2773/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2773/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2773/events", "html_url": "https://github.com/biopython/biopython/issues/2773", "id": 573478889, "node_id": "MDU6SXNzdWU1NzM0Nzg4ODk=", "number": 2773, "title": "getiterator was removed in favor of iter in Python 3.9", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-01T04:42:30Z", "updated_at": "2020-05-10T15:46:22Z", "closed_at": "2020-05-10T15:46:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/biopython/biopython/blob/2b8559b7c1409cbc48d88a209f9db15c4731e53c/Bio/SeqIO/UniprotIO.py#L255\r\n\r\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1808737", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2771", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2771/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2771/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2771/events", "html_url": "https://github.com/biopython/biopython/issues/2771", "id": 573051110, "node_id": "MDU6SXNzdWU1NzMwNTExMTA=", "number": 2771, "title": "Bio.bgzf.BgzfWriter splits lines between blocks", "user": {"login": "MatthewRalston", "id": 4308024, "node_id": "MDQ6VXNlcjQzMDgwMjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4308024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthewRalston", "html_url": "https://github.com/MatthewRalston", "followers_url": "https://api.github.com/users/MatthewRalston/followers", "following_url": "https://api.github.com/users/MatthewRalston/following{/other_user}", "gists_url": "https://api.github.com/users/MatthewRalston/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthewRalston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthewRalston/subscriptions", "organizations_url": "https://api.github.com/users/MatthewRalston/orgs", "repos_url": "https://api.github.com/users/MatthewRalston/repos", "events_url": "https://api.github.com/users/MatthewRalston/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthewRalston/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-28T22:55:22Z", "updated_at": "2020-03-01T16:37:14Z", "closed_at": "2020-03-01T16:37:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\n>import sys; print(sys.version)\r\n3.7.4 (default, Oct 25 2019 ...)\r\n[GCC 9.2.0]\r\n>import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nLinux-5.3.7-arch1-1-ARCH-x86-64-with-arch\r\n>import Bio; print(Bio.__version__)\r\n1.74\r\n```\r\n\r\n### Expected behaviour\r\n\r\nI expect the `write` method in `bgzf.BgzfWriter.write()` to not split a new line of `data` between blocks. More specifically, I am calling `bgzfout.write` like I would do do print a line of data (like a read) to the bgzf filehandle. Although the [first part of the conditional](https://github.com/biopython/biopython/blob/master/Bio/bgzf.py#L830) will restrict appends if the new data and the current buffer are less than 65536, EVENTUALLY the else statement is triggered with some amount of data preceding the split at 65536 and some following the split. If instead, the `_buffer` were scanned backwards for a newline character, the rest of the preceding text following that newline could be the first elements of the new buffer. But instead, the magic 65536 is used to split lines of text being appended to the buffer.\r\n\r\n### Actual behaviour\r\n\r\n`BgzfWriter.write` as written will take the first 65535 and pass those to _write_block. However, if that includes part of the new line i.e. `data`, then **the new line will be split between sequential blocks,** which will invalidate nearly any bgzf file that is using the write method to write lines of data expecting that not every block is necessarily packed to 65536 but instead is as close as possible while retaining the order of data on each line. \r\n\r\nI can imagine a case where instead the newline should not be the deciding factor. Most users will be writing plain ASCII text to bgzf files or will not have each block measured out before hand and rely on the write method to properly delineate (no pun intended).\r\n\r\n\r\n### Steps to reproduce\r\n\r\nWrite the following to a bgzf file, and the first break should occur at line 7788. (near the bottom of the pastebin).\r\n\r\n```\r\n7786    134\r\n7787    74\r\n7788\r\n...... new block ......\r\n    59\r\n7789    48\r\n```\r\n\r\nhttps://pastebin.com/YLZAyyAT\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2765", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2765/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2765/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2765/events", "html_url": "https://github.com/biopython/biopython/issues/2765", "id": 571733096, "node_id": "MDU6SXNzdWU1NzE3MzMwOTY=", "number": 2765, "title": " HTTP Error 404 issue", "user": {"login": "LivC182", "id": 38222294, "node_id": "MDQ6VXNlcjM4MjIyMjk0", "avatar_url": "https://avatars2.githubusercontent.com/u/38222294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LivC182", "html_url": "https://github.com/LivC182", "followers_url": "https://api.github.com/users/LivC182/followers", "following_url": "https://api.github.com/users/LivC182/following{/other_user}", "gists_url": "https://api.github.com/users/LivC182/gists{/gist_id}", "starred_url": "https://api.github.com/users/LivC182/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LivC182/subscriptions", "organizations_url": "https://api.github.com/users/LivC182/orgs", "repos_url": "https://api.github.com/users/LivC182/repos", "events_url": "https://api.github.com/users/LivC182/events{/privacy}", "received_events_url": "https://api.github.com/users/LivC182/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-26T23:57:01Z", "updated_at": "2020-07-24T07:12:59Z", "closed_at": "2020-07-24T07:12:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am reporting a problem with Biopython version 1.73, Python version 3, and operating\r\nsystem Ubuntu 18.04.\r\nI am trying to run the code below using multiprocessing package. I send less than 10 requests/second and yet I get urllib.error.HTTPError: HTTP Error 404.\r\nAnyone how knows why ?\r\n```\r\n         Entrez.email = 'my_email'\r\n         Entrez.tool = my_tool'\r\n         handle = Entrez.efetch(db = 'pubmed',\r\n                                retmode = 'text',\r\n                                rettype = 'Medline',\r\n                                id = pubmed_id,\r\n                                api_key = 'my api key')\r\n\r\n         results = handle.read()\r\n         handle.close()\r\n         rec_file = io.StringIO(results)\r\n         medline_rec = Medline.read(rec_file)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2758", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2758/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2758/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2758/events", "html_url": "https://github.com/biopython/biopython/issues/2758", "id": 570230480, "node_id": "MDU6SXNzdWU1NzAyMzA0ODA=", "number": 2758, "title": "Bio.Align.PairwiseAligner memory leak", "user": {"login": "jil24", "id": 11326697, "node_id": "MDQ6VXNlcjExMzI2Njk3", "avatar_url": "https://avatars3.githubusercontent.com/u/11326697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jil24", "html_url": "https://github.com/jil24", "followers_url": "https://api.github.com/users/jil24/followers", "following_url": "https://api.github.com/users/jil24/following{/other_user}", "gists_url": "https://api.github.com/users/jil24/gists{/gist_id}", "starred_url": "https://api.github.com/users/jil24/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jil24/subscriptions", "organizations_url": "https://api.github.com/users/jil24/orgs", "repos_url": "https://api.github.com/users/jil24/repos", "events_url": "https://api.github.com/users/jil24/events{/privacy}", "received_events_url": "https://api.github.com/users/jil24/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "mdehoon", "id": 136062, "node_id": "MDQ6VXNlcjEzNjA2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/136062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdehoon", "html_url": "https://github.com/mdehoon", "followers_url": "https://api.github.com/users/mdehoon/followers", "following_url": "https://api.github.com/users/mdehoon/following{/other_user}", "gists_url": "https://api.github.com/users/mdehoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdehoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdehoon/subscriptions", "organizations_url": "https://api.github.com/users/mdehoon/orgs", "repos_url": "https://api.github.com/users/mdehoon/repos", "events_url": "https://api.github.com/users/mdehoon/events{/privacy}", "received_events_url": "https://api.github.com/users/mdehoon/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mdehoon", "id": 136062, "node_id": "MDQ6VXNlcjEzNjA2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/136062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdehoon", "html_url": "https://github.com/mdehoon", "followers_url": "https://api.github.com/users/mdehoon/followers", "following_url": "https://api.github.com/users/mdehoon/following{/other_user}", "gists_url": "https://api.github.com/users/mdehoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdehoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdehoon/subscriptions", "organizations_url": "https://api.github.com/users/mdehoon/orgs", "repos_url": "https://api.github.com/users/mdehoon/repos", "events_url": "https://api.github.com/users/mdehoon/events{/privacy}", "received_events_url": "https://api.github.com/users/mdehoon/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-02-25T00:25:36Z", "updated_at": "2020-02-27T04:36:11Z", "closed_at": "2020-02-27T04:36:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version 1.76, CPython version 2.7.16, and operating\r\nsystem Mac OS 10.14:\r\n\r\nrepeatedly finding local alignments using Bio.Align.PairwiseAligner continually increases python memory usage. Unclear to me if this is a python problem or a problem in the C extension module. In this example no alignment results are retrieved or saved, but memory usage still accumulates.\r\n\r\n### Reproducible example\r\n\r\n```python\r\nfrom Bio import Align\r\nfrom random import randrange\r\n\r\nletters = 'ACGT'\r\nprobelength = 20\r\ntargetlength = 5000\r\n\r\ntarget = \"\".join([letters[randrange(0,3)] for x in range(targetlength)])\r\noffset = randrange(0,targetlength-probelength-1)\r\nprobe = target[offset:offset+probelength]\r\n\r\ndef align(probe, target):\r\n    aligner = Align.PairwiseAligner()\r\n    aligner.mode = 'local'\r\n    aligner.match_score = 1\r\n    aligner.mismatch_score = -1\r\n    aligner.open_gap_score = -1\r\n    aligner.extend_gap_score = -1\r\n    alignments = aligner.align(probe, target)\r\n\r\nfor iteration in range(10000):\r\n    align(probe, target)\r\n    print(\"iteration {}\".format(iteration))\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2757", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2757/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2757/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2757/events", "html_url": "https://github.com/biopython/biopython/issues/2757", "id": 569933007, "node_id": "MDU6SXNzdWU1Njk5MzMwMDc=", "number": 2757, "title": "Deprecate/remove dead code detected via 'vulture'", "user": {"login": "chris-rands", "id": 20436557, "node_id": "MDQ6VXNlcjIwNDM2NTU3", "avatar_url": "https://avatars3.githubusercontent.com/u/20436557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-rands", "html_url": "https://github.com/chris-rands", "followers_url": "https://api.github.com/users/chris-rands/followers", "following_url": "https://api.github.com/users/chris-rands/following{/other_user}", "gists_url": "https://api.github.com/users/chris-rands/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-rands/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-rands/subscriptions", "organizations_url": "https://api.github.com/users/chris-rands/orgs", "repos_url": "https://api.github.com/users/chris-rands/repos", "events_url": "https://api.github.com/users/chris-rands/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-rands/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-02-24T15:29:03Z", "updated_at": "2020-04-11T11:52:37Z", "closed_at": "2020-04-07T09:14:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Spun out from https://github.com/biopython/biopython/pull/2717#issuecomment-589177971, [`vulture`]( https://github.com/jendrikseipp/vulture) allows the detection of putatively unused code. I guess code detected by `vulture` will require one of the following actions: removal (e.g. unused imports), deprecation (e.g. unused functions/classes), modification (e.g. detected bugs), no change (e.g. false positives). One way to remove false positives would be to add unit tests.\r\n\r\nWe could proceed module by module and start with the `--min-confidence 100` flag before moving to the less clear cases.\r\n\r\nThis is probably a substantial task since `vulture` detects 1208 cases when I ran it as follows:\r\n\r\n```\r\n$ vulture Bio BioSQL Tests | wc -l\r\n    1208\r\n$ vulture Bio BioSQL Tests | head\r\nBio/Affy/CelFile.py:159: unused function 'read_v4' (60% confidence)\r\nBio/Affy/CelFile.py:168: unused function 'read_v3' (60% confidence)\r\nBio/Align/AlignInfo.py:774: unused function 'get_residue' (60% confidence)\r\nBio/AlignIO/EmbossIO.py:23: unused class 'EmbossWriter' (60% confidence)\r\nBio/AlignIO/FastaIO.py:163: unused attribute '_al_start' (60% confidence)\r\nBio/AlignIO/FastaIO.py:164: unused attribute '_al_stop' (60% confidence)\r\nBio/AlignIO/FastaIO.py:189: unused attribute '_al_start' (60% confidence)\r\nBio/AlignIO/FastaIO.py:190: unused attribute '_al_stop' (60% confidence)\r\nBio/Alphabet/__init__.py:158: unused class 'SecondaryStructure' (60% confidence)\r\nBio/Alphabet/__init__.py:490: unused function '_verify_alphabet' (60% confidence)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2756", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2756/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2756/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2756/events", "html_url": "https://github.com/biopython/biopython/issues/2756", "id": 569838368, "node_id": "MDU6SXNzdWU1Njk4MzgzNjg=", "number": 2756, "title": "No module level docstring for Bio.PDFB.kdtrees", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413833678, "node_id": "MDU6TGFiZWw0MTM4MzM2Nzg=", "url": "https://api.github.com/repos/biopython/biopython/labels/Documentation", "name": "Documentation", "color": "0052cc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-24T12:56:18Z", "updated_at": "2020-08-14T17:11:25Z", "closed_at": "2020-08-14T17:11:25Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Noted by @rob-miller here https://github.com/biopython/biopython/issues/2736#issuecomment-589960052\r\n\r\nThe class and functions within it have some documentation, but not the module itself:\r\n\r\n```\r\n>>> from Bio.PDB import kdtrees\r\n>>> help(kdtrees)\r\n(blank)\r\n>>>help(kdtrees.KDTree)\r\n(text)\r\n```\r\n\r\nSee https://github.com/biopython/biopython/blob/master/Bio/PDB/kdtrees.c\r\n\r\nRelated, the epydoc was blank (Biopython 1.75):\r\n\r\nhttp://biopython.org/DIST/docs/api/Bio.PDB.kdtrees-module.html\r\n\r\nRelated, it does not appear in the Sphinx API documentation:\r\n\r\nhttps://biopython.org/docs/1.76/api/Bio.PDB.html\r\nhttps://biopython.org/docs/dev/api/Bio.PDB.html\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2738", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2738/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2738/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2738/events", "html_url": "https://github.com/biopython/biopython/issues/2738", "id": 568678967, "node_id": "MDU6SXNzdWU1Njg2Nzg5Njc=", "number": 2738, "title": "Errors running test_NCBI_qblast.py", "user": {"login": "svalqui", "id": 6541729, "node_id": "MDQ6VXNlcjY1NDE3Mjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6541729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svalqui", "html_url": "https://github.com/svalqui", "followers_url": "https://api.github.com/users/svalqui/followers", "following_url": "https://api.github.com/users/svalqui/following{/other_user}", "gists_url": "https://api.github.com/users/svalqui/gists{/gist_id}", "starred_url": "https://api.github.com/users/svalqui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svalqui/subscriptions", "organizations_url": "https://api.github.com/users/svalqui/orgs", "repos_url": "https://api.github.com/users/svalqui/repos", "events_url": "https://api.github.com/users/svalqui/events{/privacy}", "received_events_url": "https://api.github.com/users/svalqui/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "MarkusPiotrowski", "id": 4503120, "node_id": "MDQ6VXNlcjQ1MDMxMjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4503120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarkusPiotrowski", "html_url": "https://github.com/MarkusPiotrowski", "followers_url": "https://api.github.com/users/MarkusPiotrowski/followers", "following_url": "https://api.github.com/users/MarkusPiotrowski/following{/other_user}", "gists_url": "https://api.github.com/users/MarkusPiotrowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarkusPiotrowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarkusPiotrowski/subscriptions", "organizations_url": "https://api.github.com/users/MarkusPiotrowski/orgs", "repos_url": "https://api.github.com/users/MarkusPiotrowski/repos", "events_url": "https://api.github.com/users/MarkusPiotrowski/events{/privacy}", "received_events_url": "https://api.github.com/users/MarkusPiotrowski/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "MarkusPiotrowski", "id": 4503120, "node_id": "MDQ6VXNlcjQ1MDMxMjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4503120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarkusPiotrowski", "html_url": "https://github.com/MarkusPiotrowski", "followers_url": "https://api.github.com/users/MarkusPiotrowski/followers", "following_url": "https://api.github.com/users/MarkusPiotrowski/following{/other_user}", "gists_url": "https://api.github.com/users/MarkusPiotrowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarkusPiotrowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarkusPiotrowski/subscriptions", "organizations_url": "https://api.github.com/users/MarkusPiotrowski/orgs", "repos_url": "https://api.github.com/users/MarkusPiotrowski/repos", "events_url": "https://api.github.com/users/MarkusPiotrowski/events{/privacy}", "received_events_url": "https://api.github.com/users/MarkusPiotrowski/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 18, "created_at": "2020-02-21T01:20:51Z", "updated_at": "2020-03-01T16:19:32Z", "closed_at": "2020-03-01T16:19:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nPython 3.6.9 (default, Nov  7 2019, 10:44:02) \r\n[GCC 8.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import sys; print(sys.version)\r\n3.6.9 (default, Nov  7 2019, 10:44:02) \r\n[GCC 8.3.0]\r\n>>> import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nLinux-4.15.0-88-generic-x86_64-with-Ubuntu-18.04-bionic\r\n>>> import Bio; print(Bio.__version__)\r\n1.76.dev0\r\n```\r\n\r\n(*Please copy and run the above in your Python, and copy-and-paste the output*)\r\n\r\n### Expected behaviour\r\n\r\nTest to pass\r\n\r\n### Actual behaviour\r\n\r\n```\r\ntest_blastp_nr_actin (__main__.TestQblast) ... ok\r\ntest_discomegablast (__main__.TestQblast) ... ok\r\ntest_error_conditions (__main__.TestQblast)\r\nTest if exceptions were properly handled. ... ok\r\ntest_orchid_est (__main__.TestQblast) ... ok\r\ntest_parse_qblast_ref_page (__main__.TestQblast) ... ok\r\ntest_pcr_primers (__main__.TestQblast) ... ok\r\ntest_short_query (__main__.TestQblast)\r\nTest SHORT_QUERY_ADJUST parameter. ... FAIL\r\n\r\n======================================================================\r\nFAIL: test_short_query (__main__.TestQblast)\r\nTest SHORT_QUERY_ADJUST parameter.\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"test_NCBI_qblast.py\", line 224, in test_short_query\r\n    self.assertEqual(len(my_hits.alignments), 5)\r\nAssertionError: 0 != 5\r\n\r\n----------------------------------------------------------------------\r\nRan 7 tests in 4183.082s\r\n\r\nFAILED (failures=1)\r\n\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```\r\n~/PythonProjects/biopython/Tests$ python3 test_NCBI_qblast.py \r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2736", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2736/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2736/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2736/events", "html_url": "https://github.com/biopython/biopython/issues/2736", "id": 568491728, "node_id": "MDU6SXNzdWU1Njg0OTE3Mjg=", "number": 2736, "title": "Writing TER records with PDBIO", "user": {"login": "JoaoRodrigues", "id": 237328, "node_id": "MDQ6VXNlcjIzNzMyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/237328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoaoRodrigues", "html_url": "https://github.com/JoaoRodrigues", "followers_url": "https://api.github.com/users/JoaoRodrigues/followers", "following_url": "https://api.github.com/users/JoaoRodrigues/following{/other_user}", "gists_url": "https://api.github.com/users/JoaoRodrigues/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoaoRodrigues/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoaoRodrigues/subscriptions", "organizations_url": "https://api.github.com/users/JoaoRodrigues/orgs", "repos_url": "https://api.github.com/users/JoaoRodrigues/repos", "events_url": "https://api.github.com/users/JoaoRodrigues/events{/privacy}", "received_events_url": "https://api.github.com/users/JoaoRodrigues/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413833586, "node_id": "MDU6TGFiZWw0MTM4MzM1ODY=", "url": "https://api.github.com/repos/biopython/biopython/labels/Enhancement", "name": "Enhancement", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-02-20T18:34:43Z", "updated_at": "2020-08-14T01:21:49Z", "closed_at": "2020-08-14T01:20:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Opening an issue to discuss the placement of TER records in PDB files written by `PDBIO`, derived from #2733.\r\n\r\nThe current behavior of `PDBIO` is to write TER records at the end of all atoms of a chain, HETATM inclusive. The PDB format specs state that TER records must follow the last polypeptide/nucleic acid residue in a chain (and they never mention HETATMs).\r\n\r\nThe current implementation iterates over the residue list from `chain.get_unpacked_list`, which includes both ATOM and HETATM records. Adding a comparison to check when we find the first HETATM is not a good solution because some HETATMs are modified residues that are connected to the previous residue and so should not trigger a chain termination. The simplest approach I can think of it to use our KDTree module to check, when we find a HETATM, if it is connected to the previous residue (using a simple distance cutoff to any atom should suffice). This does make things potentially slower for structures with a lot of HETATM records but should be robust enough.\r\n\r\nAny comments or other suggestions? @jgreener64 @peterjc \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2733", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2733/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2733/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2733/events", "html_url": "https://github.com/biopython/biopython/issues/2733", "id": 567624242, "node_id": "MDU6SXNzdWU1Njc2MjQyNDI=", "number": 2733, "title": "Keep TER lines inside a chain", "user": {"login": "MauriceKarrenbrock", "id": 56843667, "node_id": "MDQ6VXNlcjU2ODQzNjY3", "avatar_url": "https://avatars3.githubusercontent.com/u/56843667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MauriceKarrenbrock", "html_url": "https://github.com/MauriceKarrenbrock", "followers_url": "https://api.github.com/users/MauriceKarrenbrock/followers", "following_url": "https://api.github.com/users/MauriceKarrenbrock/following{/other_user}", "gists_url": "https://api.github.com/users/MauriceKarrenbrock/gists{/gist_id}", "starred_url": "https://api.github.com/users/MauriceKarrenbrock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MauriceKarrenbrock/subscriptions", "organizations_url": "https://api.github.com/users/MauriceKarrenbrock/orgs", "repos_url": "https://api.github.com/users/MauriceKarrenbrock/repos", "events_url": "https://api.github.com/users/MauriceKarrenbrock/events{/privacy}", "received_events_url": "https://api.github.com/users/MauriceKarrenbrock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "JoaoRodrigues", "id": 237328, "node_id": "MDQ6VXNlcjIzNzMyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/237328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoaoRodrigues", "html_url": "https://github.com/JoaoRodrigues", "followers_url": "https://api.github.com/users/JoaoRodrigues/followers", "following_url": "https://api.github.com/users/JoaoRodrigues/following{/other_user}", "gists_url": "https://api.github.com/users/JoaoRodrigues/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoaoRodrigues/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoaoRodrigues/subscriptions", "organizations_url": "https://api.github.com/users/JoaoRodrigues/orgs", "repos_url": "https://api.github.com/users/JoaoRodrigues/repos", "events_url": "https://api.github.com/users/JoaoRodrigues/events{/privacy}", "received_events_url": "https://api.github.com/users/JoaoRodrigues/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "JoaoRodrigues", "id": 237328, "node_id": "MDQ6VXNlcjIzNzMyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/237328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoaoRodrigues", "html_url": "https://github.com/JoaoRodrigues", "followers_url": "https://api.github.com/users/JoaoRodrigues/followers", "following_url": "https://api.github.com/users/JoaoRodrigues/following{/other_user}", "gists_url": "https://api.github.com/users/JoaoRodrigues/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoaoRodrigues/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoaoRodrigues/subscriptions", "organizations_url": "https://api.github.com/users/JoaoRodrigues/orgs", "repos_url": "https://api.github.com/users/JoaoRodrigues/repos", "events_url": "https://api.github.com/users/JoaoRodrigues/events{/privacy}", "received_events_url": "https://api.github.com/users/JoaoRodrigues/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-02-19T14:52:09Z", "updated_at": "2020-08-14T01:18:56Z", "closed_at": "2020-08-14T01:18:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```3.6.9 |Anaconda, Inc.| (default, Jul 30 2019, 19:07:31) \r\n[GCC 7.3.0]\r\n\r\nCPython\r\nLinux-5.3.0-28-generic-x86_64-with-debian-buster-sid\r\n\r\n1.77.dev0\r\n\r\n```\r\n### Expected behaviour\r\n\r\nSome MD programs like Gromacs rely on TER lines that are inside a chain to distinguish the different molecules that compose them (like the protein in chain A from a ligand in chain A from a metallic ion in chain A etc...). (In fact many of the structures in the wwPDB database have them)\r\n\r\nSo if I parse a PDB file that has all the needed TER lines with Biopython and then write it on a new file it would be useful if this TER lines would be kept\r\n\r\n### Actual behaviour\r\n\r\nBut this doesn't happen, the only TER line that remains is the one at the end of the chain\r\n\r\n```\r\ngrep \"TER \" 5aol_before_biopython.pdb\r\n\r\nTER    1713      THR A 312\r\nTER    3426      THR B 312\r\nTER    3441       ZN A1300\r\nTER    3443       ZN B1300\r\nTER    3735      HOH A2291\r\nTER    3999      HOH B2263\r\n```\r\n\r\n```\r\ngrep \"TER \" 5aol_after_biopython.pdb\r\n\r\nTER    2018      HOH A2291                                                       \r\nTER    3994      HOH B2263  \r\n```\r\n### Steps to reproduce\r\n\r\n```\r\nimport Bio.PDB\r\n\r\np = Bio.PDB.PDBParser()\r\nstruct = p.get_structure('5aol', '5aol_before_biopython.pdb')\r\n\r\ns = Bio.PDB.PDBIO()\r\ns.set_structure(struct)\r\ns.save('5aol_after_biopython.pdb')\r\n```\r\n\r\nboth pdb files are attached as txt files\r\n[5aol_after_biopython.txt](https://github.com/biopython/biopython/files/4225590/5aol_after_biopython.txt)\r\n[5aol_before_biopython.txt](https://github.com/biopython/biopython/files/4225591/5aol_before_biopython.txt)\r\n\r\n### Possible patch\r\n\r\nI am fair new to programming so I don't know if it could work but an idea could be to give a boolean is_TER variable to all atoms that is False for default and becomes True only if this atom had a TER line after it.\r\nIn this way the save() function could check for it and write an extra TER line if is_TER == True\r\n\r\nCould it be an idea? Or otherwise how could it be done?\r\n\r\nps it would be very useful if this TER lines would be added even when the input file is a mmCIF and the output is still a PDB, the TER line should appear any time `_atom_site.label_asym_id` changes as usually it changes any time a different molecule is met inside the same chain", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2725", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2725/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2725/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2725/events", "html_url": "https://github.com/biopython/biopython/issues/2725", "id": 566540211, "node_id": "MDU6SXNzdWU1NjY1NDAyMTE=", "number": 2725, "title": "Errors running test_Tutorial, chapter Entrez", "user": {"login": "svalqui", "id": 6541729, "node_id": "MDQ6VXNlcjY1NDE3Mjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6541729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svalqui", "html_url": "https://github.com/svalqui", "followers_url": "https://api.github.com/users/svalqui/followers", "following_url": "https://api.github.com/users/svalqui/following{/other_user}", "gists_url": "https://api.github.com/users/svalqui/gists{/gist_id}", "starred_url": "https://api.github.com/users/svalqui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svalqui/subscriptions", "organizations_url": "https://api.github.com/users/svalqui/orgs", "repos_url": "https://api.github.com/users/svalqui/repos", "events_url": "https://api.github.com/users/svalqui/events{/privacy}", "received_events_url": "https://api.github.com/users/svalqui/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-02-17T22:17:33Z", "updated_at": "2020-02-24T08:55:56Z", "closed_at": "2020-02-24T08:55:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version) 3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nLinux-4.15.0-76-generic-x86_64-with-Ubuntu-18.04-bionic\r\nimport Bio; print(Bio.__version__)\r\n1.77.dev0\r\n```\r\n\r\n### Expected behaviour\r\n\r\nRun the test and pass it\r\n\r\n### Actual behaviour\r\n\r\n```\r\nPython version: 3.6.9 (default, Nov  7 2019, 10:44:02) \r\n[GCC 8.3.0]\r\nOperating system: posix linux\r\ntest_Tutorial ... FAIL\r\n======================================================================\r\nERROR: test_doctests (test_Tutorial.TutorialTestCase)\r\nRun tutorial doctests.\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/sergio/PythonProjects/biopython/Tests/test_Tutorial.py\", line 256, in test_doctests\r\n    (len(failures), \", \".join(failures)))\r\nValueError: 4 Tutorial doctests failed: test_chapter_entrez_line_00202, test_chapter_entrez_line_00325, test_chapter_entrez_line_00419, test_chapter_entrez_line_00466\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 48.020 seconds\r\n\r\nFAILED (failures = 1)\r\n```\r\n### Steps to reproduce\r\n\r\nBuild, install and run the test:\r\n```\r\n~/PythonProjects/biopython$ sudo python3 setup.py build\r\n~/PythonProjects/biopython$ sudo python3 setup.py install\r\n~/PythonProjects/biopython$ cd Tests/\r\n~/PythonProjects/biopython/Tests$ python3 run_tests.py test_Tutorial.py\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2713", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2713/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2713/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2713/events", "html_url": "https://github.com/biopython/biopython/issues/2713", "id": 565235691, "node_id": "MDU6SXNzdWU1NjUyMzU2OTE=", "number": 2713, "title": "parsing of anisotropic B factors in MMCIFParser.py", "user": {"login": "andrei-istrate", "id": 39729457, "node_id": "MDQ6VXNlcjM5NzI5NDU3", "avatar_url": "https://avatars1.githubusercontent.com/u/39729457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrei-istrate", "html_url": "https://github.com/andrei-istrate", "followers_url": "https://api.github.com/users/andrei-istrate/followers", "following_url": "https://api.github.com/users/andrei-istrate/following{/other_user}", "gists_url": "https://api.github.com/users/andrei-istrate/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrei-istrate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrei-istrate/subscriptions", "organizations_url": "https://api.github.com/users/andrei-istrate/orgs", "repos_url": "https://api.github.com/users/andrei-istrate/repos", "events_url": "https://api.github.com/users/andrei-istrate/events{/privacy}", "received_events_url": "https://api.github.com/users/andrei-istrate/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-14T10:24:56Z", "updated_at": "2020-02-18T15:27:21Z", "closed_at": "2020-02-18T15:27:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\n>>> print(sys.version)\r\n3.7.4 (default, Aug 13 2019, 15:17:50) \r\n[Clang 4.0.1 (tags/RELEASE_401/final)]\r\n>>> import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nDarwin-19.2.0-x86_64-i386-64bit\r\n>>> import Bio; print(Bio.__version__)\r\n1.76\r\n```\r\n### Actual behaviour\r\nIn the current implementation the relation between _atom_site_anisotrop.id and _atom_site.id is not checked which means that the _atom_site_anisotrop.U values are correctly assigned only if _atom_site_anisotrop.id and _atom_site.id follow the same order and there are no missing _atom_site_anisotrop records.\r\n\r\nAn error is reported only if there are _atom_site_anisotrop records for exactly one atom:\r\n\r\nTraceback (most recent call last):\r\nFile \"/Users/andrei/PycharmProjects/3D-STRUDEL/playground/test.py\", line 11, in \r\nstructure = parser.get_structure('name', path)\r\nFile \"/Users/andrei/PycharmProjects/3D-STRUDEL/venv/lib/python3.6/site-packages/Bio/PDB/MMCIFParser.py\", line 64, in get_structure\r\nself.build_structure(structure_id)\r\nFile \"/Users/andrei/PycharmProjects/3D-STRUDEL/venv/lib/python3.6/site-packages/Bio/PDB/MMCIFParser.py\", line 203, in build_structure\r\nmapped_anisou = [float() for _ in u]\r\nFile \"/Users/andrei/PycharmProjects/3D-STRUDEL/venv/lib/python3.6/site-packages/Bio/PDB/MMCIFParser.py\", line 203, in \r\nmapped_anisou = [float() for _ in u]\r\nValueError: could not convert string to float: '.'\r\n\r\n### Steps to reproduce\r\n\r\nfrom Bio.PDB.MMCIFParser import MMCIFParser\r\nparser = MMCIFParser(QUIET=True)\r\nstructure = parser.get_structure('6v9q.cif', '6v9q.cif')\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2700", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2700/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2700/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2700/events", "html_url": "https://github.com/biopython/biopython/issues/2700", "id": 563926652, "node_id": "MDU6SXNzdWU1NjM5MjY2NTI=", "number": 2700, "title": "Use assertIsInstance and assertNotIsInstance unittest methods", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413834067, "node_id": "MDU6TGFiZWw0MTM4MzQwNjc=", "url": "https://api.github.com/repos/biopython/biopython/labels/Style", "name": "Style", "color": "006b75", "default": false, "description": null}, {"id": 413833889, "node_id": "MDU6TGFiZWw0MTM4MzM4ODk=", "url": "https://api.github.com/repos/biopython/biopython/labels/Testing", "name": "Testing", "color": "5319e7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-02-12T11:11:08Z", "updated_at": "2020-05-10T10:45:57Z", "closed_at": "2020-05-10T10:45:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We have now dropped Python 2 support, which means we can take advantage of many of the unittest framework methods where were not present on Python 2.\r\n\r\nThis issue is specifically for using ``assertIsInstance`` and ``assertNotIsInstance``, both new in Python 3.2:\r\n\r\nhttps://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsInstance\r\nhttps://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIsInstance\r\n\r\nThese grep searches find lots of candidates to update, but will miss any split over multiple lines.:\r\n\r\n```\r\n$ grep assertTrue *.py | grep \"isinstance\" | head\r\ncommon_BioSQL.py:        self.assertTrue(isinstance(test_record.seq, BioSeq.DBSeq))\r\ncommon_BioSQL.py:            self.assertTrue(isinstance(feature, SeqFeature))\r\n...\r\n$ grep assertFalse *.py | grep \"isinstance\"\r\ncommon_BioSQL.py:        self.assertFalse(isinstance(tripled, BioSeq.DBSeq))\r\ncommon_BioSQL.py:        self.assertFalse(isinstance(tripled, BioSeq.DBSeq))\r\ncommon_BioSQL.py:        self.assertFalse(isinstance(tripled, BioSeq.DBSeq))\r\n```\r\n\r\nThere are so many that it would be worthwhile trying to automate this?\r\n\r\nCross reference #2698 for ``assertIn`` and ``assertNotIn``, and #2699 for ``assertIs`` and ``assertIsNot``.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2698", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2698/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2698/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2698/events", "html_url": "https://github.com/biopython/biopython/issues/2698", "id": 563920767, "node_id": "MDU6SXNzdWU1NjM5MjA3Njc=", "number": 2698, "title": "Use assertIn and assertNotIn unittest methods", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413833586, "node_id": "MDU6TGFiZWw0MTM4MzM1ODY=", "url": "https://api.github.com/repos/biopython/biopython/labels/Enhancement", "name": "Enhancement", "color": "0e8a16", "default": false, "description": null}, {"id": 413834067, "node_id": "MDU6TGFiZWw0MTM4MzQwNjc=", "url": "https://api.github.com/repos/biopython/biopython/labels/Style", "name": "Style", "color": "006b75", "default": false, "description": null}, {"id": 413833889, "node_id": "MDU6TGFiZWw0MTM4MzM4ODk=", "url": "https://api.github.com/repos/biopython/biopython/labels/Testing", "name": "Testing", "color": "5319e7", "default": false, "description": null}, {"id": 413835256, "node_id": "MDU6TGFiZWw0MTM4MzUyNTY=", "url": "https://api.github.com/repos/biopython/biopython/labels/good%20first%20issue", "name": "good first issue", "color": "fbca04", "default": true, "description": "This should be an easy fix, suitable for beginners"}, {"id": 983806367, "node_id": "MDU6TGFiZWw5ODM4MDYzNjc=", "url": "https://api.github.com/repos/biopython/biopython/labels/help%20wanted", "name": "help wanted", "color": "ef62e6", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-12T11:00:50Z", "updated_at": "2020-02-29T15:16:38Z", "closed_at": "2020-02-29T15:16:38Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We have now dropped Python 2 support, which means we can take advantage of many of the ``unittest`` framework methods where were not present on Python 2.\r\n\r\nThis issue is specifically for using ``assertIn`` and ``assertNotIn``, both new in Python 3.1:\r\n\r\nhttps://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIn\r\nhttps://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIn\r\n\r\nExample noted on #2694,\r\n\r\n```python\r\nself.assertFalse(None in p1, \"Bad input values for %s: %r\" % (prop_name, p1))\r\n```\r\n\r\nbecomes:\r\n\r\n```python\r\nself.assertNotIn(None, p1, \"Bad input values for %s: %r\" % (prop_name, p1))\r\n```\r\n\r\nA quick grep finds a dozen easy cases which should use ``assertNotIn``, there could be more - especially multiline statements:\r\n\r\n```\r\n$ grep assertFalse test_*.py | grep \" in \"\r\ntest_Crystal.py:        self.assertFalse(\"ser\" in chain)\r\ntest_Crystal.py:        self.assertFalse(\"b\" in target.data)\r\ntest_Crystal.py:        self.assertFalse(\"z\" in self.crystal)\r\ntest_GenBank.py:        self.assertFalse(\"structured_comment\" in record.annotations)\r\ntest_Phylo_CDAO.py:                self.assertFalse(None in p1, \"Bad input values for %s: %r\" % (prop_name, p1))\r\ntest_Phylo_CDAO.py:                self.assertFalse(None in p2, \"Bad output values for %s: %r\" % (prop_name, p2))\r\ntest_SearchIO_model.py:        self.assertFalse(\"hit5\" in self.qresult)\r\ntest_SearchIO_model.py:        self.assertFalse(hit41 in self.qresult)\r\ntest_samtools_tool.py:        self.assertFalse(\"[bam_pileup_core]\" in stdout)\r\ntest_samtools_tool.py:        self.assertFalse(\"[bam_pileup_core]\" in stdout)\r\ntest_seq.py:        self.assertFalse(\"-\" in ambiguous_dna_values)\r\ntest_seq.py:        self.assertFalse(\"?\" in ambiguous_dna_values)\r\n```\r\n\r\nThere are about three times as many candidates using this search:\r\n\r\n```\r\n$ grep assertTrue test_*.py | grep \" in \"\r\ntest_BWA_tool.py:        self.assertTrue(\"Finished constructing BWT\" in str(stdout) + str(stderr),\r\ntest_BWA_tool.py:        self.assertTrue(\"fail to locate the index\" not in str(stderr) + str(stdout),\r\n...\r\n```\r\n\r\nNote that first example would be ``assertIn`` while the second example used ``not in`` and becomes ``assertNotIn`` instead.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2691", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2691/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2691/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2691/events", "html_url": "https://github.com/biopython/biopython/issues/2691", "id": 563248122, "node_id": "MDU6SXNzdWU1NjMyNDgxMjI=", "number": 2691, "title": "Question: Test for valid FASTA/Q", "user": {"login": "ms-gx", "id": 45788632, "node_id": "MDQ6VXNlcjQ1Nzg4NjMy", "avatar_url": "https://avatars1.githubusercontent.com/u/45788632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ms-gx", "html_url": "https://github.com/ms-gx", "followers_url": "https://api.github.com/users/ms-gx/followers", "following_url": "https://api.github.com/users/ms-gx/following{/other_user}", "gists_url": "https://api.github.com/users/ms-gx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ms-gx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ms-gx/subscriptions", "organizations_url": "https://api.github.com/users/ms-gx/orgs", "repos_url": "https://api.github.com/users/ms-gx/repos", "events_url": "https://api.github.com/users/ms-gx/events{/privacy}", "received_events_url": "https://api.github.com/users/ms-gx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-11T14:34:29Z", "updated_at": "2020-02-12T09:58:13Z", "closed_at": "2020-02-12T09:58:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the most elegant and efficient way to test if I have a valid FASTA/Q with Biopython?\r\n\r\nI have Biopython 1.73\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2690", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2690/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2690/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2690/events", "html_url": "https://github.com/biopython/biopython/issues/2690", "id": 563061718, "node_id": "MDU6SXNzdWU1NjMwNjE3MTg=", "number": 2690, "title": "No more cp27-cp27mu-manylinux1_x86_64 wheels?", "user": {"login": "abretaud", "id": 238755, "node_id": "MDQ6VXNlcjIzODc1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/238755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abretaud", "html_url": "https://github.com/abretaud", "followers_url": "https://api.github.com/users/abretaud/followers", "following_url": "https://api.github.com/users/abretaud/following{/other_user}", "gists_url": "https://api.github.com/users/abretaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/abretaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abretaud/subscriptions", "organizations_url": "https://api.github.com/users/abretaud/orgs", "repos_url": "https://api.github.com/users/abretaud/repos", "events_url": "https://api.github.com/users/abretaud/events{/privacy}", "received_events_url": "https://api.github.com/users/abretaud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-11T09:07:06Z", "updated_at": "2020-02-11T16:57:58Z", "closed_at": "2020-02-11T16:25:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to install biopython 1.76 in a 2.7 virtualenv in ubuntu 18.04, but pip can't find a suitable wheel, and tries to compile biopython instead (and fails as gcc is not install).\r\nRunning pip install in verbose mode gives me (kept only version 1.76 with cp27):\r\n```\r\n   Skipping link: none of the wheel's tags match: cp27-cp27m-macosx_10_6_intel: https://files.pythonhosted.org/packages/d1/c4/9a1a1d79e228cd7626b2fe5c5386cdb67a63249e03737ad7dd8a5cb4d36e/biopython-1.76-cp27-cp27m-macosx_10_6_intel.whl#sha256=76a6bee1429e88eeaed4aa858bb9f656f44c79db40f726767659e4f95b2fcdb5 (from https://pypi.org/simple/biopython/)\r\n  Skipping link: none of the wheel's tags match: cp27-cp27m-manylinux1_i686: https://files.pythonhosted.org/packages/5d/37/326dd89ad7ded90b8663732d0726e12895acf6655c96e05fd59bfa0f6656/biopython-1.76-cp27-cp27m-manylinux1_i686.whl#sha256=aee7756947bc79cbcf5a9087ae34d0318f02d85fd5e1914e7fe3dddd4df93520 (from https://pypi.org/simple/biopython/)\r\n  Skipping link: none of the wheel's tags match: cp27-cp27m-win32: https://files.pythonhosted.org/packages/1e/ef/6d4ad6e86e529812b07b5c91f80f22f34385896b7f43894004e6decc4516/biopython-1.76-cp27-cp27m-win32.whl#sha256=45d91b68f65c1ec6f9bcae1b07bd836c2b99de612d1502a2f08d59502b77e5c6 (from https://pypi.org/simple/biopython/)\r\n  Skipping link: none of the wheel's tags match: cp27-cp27m-win_amd64: https://files.pythonhosted.org/packages/e3/2a/c30007411423846ff08c20aa54a082972e6b830aa37229ea9f5dfe465372/biopython-1.76-cp27-cp27m-win_amd64.whl#sha256=e09d7ae93f93639d58d9314a47ccf8ee9fde4a9e36ba810cd0843b4afd1b1ddc (from https://pypi.org/simple/biopython/)\r\n```\r\n\r\nMy python version is looking for cp27-cp27mu-manylinux1_x86_64, which is not available for 1.75 and 1.76.\r\n\r\nFor version <=1.74, there are some cp27-cp27mu-manylinux1_x86_64 wheels, that pip could use.\r\n\r\nIs this intended?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2648", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2648/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2648/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2648/events", "html_url": "https://github.com/biopython/biopython/issues/2648", "id": 561937336, "node_id": "MDU6SXNzdWU1NjE5MzczMzY=", "number": 2648, "title": "Amend `Bio.SeqUtils.IsoelectricPoint`: updating source data", "user": {"login": "TianyiShi2001", "id": 38644266, "node_id": "MDQ6VXNlcjM4NjQ0MjY2", "avatar_url": "https://avatars0.githubusercontent.com/u/38644266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TianyiShi2001", "html_url": "https://github.com/TianyiShi2001", "followers_url": "https://api.github.com/users/TianyiShi2001/followers", "following_url": "https://api.github.com/users/TianyiShi2001/following{/other_user}", "gists_url": "https://api.github.com/users/TianyiShi2001/gists{/gist_id}", "starred_url": "https://api.github.com/users/TianyiShi2001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TianyiShi2001/subscriptions", "organizations_url": "https://api.github.com/users/TianyiShi2001/orgs", "repos_url": "https://api.github.com/users/TianyiShi2001/repos", "events_url": "https://api.github.com/users/TianyiShi2001/events{/privacy}", "received_events_url": "https://api.github.com/users/TianyiShi2001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-08T00:24:35Z", "updated_at": "2020-02-10T14:43:46Z", "closed_at": "2020-02-10T14:43:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The data used in the module `Bio.SeqUtils.IsoelectricPoint` are based on articles in the 1990s \u2014 30 years ago. Can we cite more recent literature, e.g. [Kozlowski 2016](https://doi.org/10.1186/s13062-016-0159-9) and update the data accordingly?\r\n\r\n```\r\npK values and the methos are taken from::\r\n\r\n    * Bjellqvist, B.,Hughes, G.J., Pasquali, Ch., Paquet, N., Ravier, F.,\r\n    Sanchez, J.-Ch., Frutiger, S. & Hochstrasser, D.F.\r\n    The focusing positions of polypeptides in immobilized pH gradients can be\r\n    predicted from their amino acid sequences. Electrophoresis 1993, 14,\r\n    1023-1031.\r\n\r\n    * Bjellqvist, B., Basse, B., Olsen, E. and Celis, J.E.\r\n    Reference points for comparisons of two-dimensional maps of proteins from\r\n    different human cell types defined in a pH scale where isoelectric points\r\n    correlate with polypeptide compositions. Electrophoresis 1994, 15, 529-539.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2647", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2647/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2647/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2647/events", "html_url": "https://github.com/biopython/biopython/issues/2647", "id": 561933977, "node_id": "MDU6SXNzdWU1NjE5MzM5Nzc=", "number": 2647, "title": "Amend `Bio.SeqUtils.IsoelectricPoint`: Remove unnecessarily  duplicated function ", "user": {"login": "TianyiShi2001", "id": 38644266, "node_id": "MDQ6VXNlcjM4NjQ0MjY2", "avatar_url": "https://avatars0.githubusercontent.com/u/38644266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TianyiShi2001", "html_url": "https://github.com/TianyiShi2001", "followers_url": "https://api.github.com/users/TianyiShi2001/followers", "following_url": "https://api.github.com/users/TianyiShi2001/following{/other_user}", "gists_url": "https://api.github.com/users/TianyiShi2001/gists{/gist_id}", "starred_url": "https://api.github.com/users/TianyiShi2001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TianyiShi2001/subscriptions", "organizations_url": "https://api.github.com/users/TianyiShi2001/orgs", "repos_url": "https://api.github.com/users/TianyiShi2001/repos", "events_url": "https://api.github.com/users/TianyiShi2001/events{/privacy}", "received_events_url": "https://api.github.com/users/TianyiShi2001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-08T00:11:02Z", "updated_at": "2020-02-22T19:00:24Z", "closed_at": "2020-02-22T19:00:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `charge_at_pH()` and `_chargeR()` methods are unnecessarily duplicated. `_chargeR()` is used three times in the class `IsoelectricPoint` while `charge_at_pH()` is used by other modules. There is no need for this method to be pseudo-private. I suggest merging these two into a single `charge_at_pH()` method, whose name is more intuitive than `_chargeR()`.\r\n\r\nOriginal:\r\n\r\n```python\r\n    def _chargeR(self, pH):\r\n        positive_charge = 0.0\r\n        for aa, pK in self.pos_pKs.items():\r\n            partial_charge = 1.0 / (10 ** (pH - pK) + 1.0)\r\n            positive_charge += self.charged_aas_content[aa] * partial_charge\r\n\r\n        negative_charge = 0.0\r\n        for aa, pK in self.neg_pKs.items():\r\n            partial_charge = 1.0 / (10 ** (pK - pH) + 1.0)\r\n            negative_charge += self.charged_aas_content[aa] * partial_charge\r\n\r\n        return positive_charge - negative_charge\r\n\r\n    def charge_at_pH(self, pH):\r\n        \"\"\"Calculate the charge of a protein at given pH.\"\"\"\r\n        return self._chargeR(pH)\r\n```\r\n\r\nSuggested:\r\n\r\n```python\r\n    def charge_at_pH(self, pH):\r\n        \"\"\"Calculate the charge of a protein at given pH.\"\"\"\r\n        positive_charge = 0.0\r\n        for aa, pK in self.pos_pKs.items():\r\n            partial_charge = 1.0 / (10 ** (pH - pK) + 1.0)\r\n            positive_charge += self.charged_aas_content[aa] * partial_charge\r\n\r\n        negative_charge = 0.0\r\n        for aa, pK in self.neg_pKs.items():\r\n            partial_charge = 1.0 / (10 ** (pK - pH) + 1.0)\r\n            negative_charge += self.charged_aas_content[aa] * partial_charge\r\n\r\n        return positive_charge - negative_charge\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2646", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2646/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2646/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2646/events", "html_url": "https://github.com/biopython/biopython/issues/2646", "id": 561891372, "node_id": "MDU6SXNzdWU1NjE4OTEzNzI=", "number": 2646, "title": "Amend `Bio.SeqUtils.IsoelectricPoint`: Rewrite `IsoelectricPoint.pi()`", "user": {"login": "TianyiShi2001", "id": 38644266, "node_id": "MDQ6VXNlcjM4NjQ0MjY2", "avatar_url": "https://avatars0.githubusercontent.com/u/38644266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TianyiShi2001", "html_url": "https://github.com/TianyiShi2001", "followers_url": "https://api.github.com/users/TianyiShi2001/followers", "following_url": "https://api.github.com/users/TianyiShi2001/following{/other_user}", "gists_url": "https://api.github.com/users/TianyiShi2001/gists{/gist_id}", "starred_url": "https://api.github.com/users/TianyiShi2001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TianyiShi2001/subscriptions", "organizations_url": "https://api.github.com/users/TianyiShi2001/orgs", "repos_url": "https://api.github.com/users/TianyiShi2001/repos", "events_url": "https://api.github.com/users/TianyiShi2001/events{/privacy}", "received_events_url": "https://api.github.com/users/TianyiShi2001/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-07T21:53:39Z", "updated_at": "2020-02-22T19:02:18Z", "closed_at": "2020-02-22T19:02:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I want to rewrite the pI calculation method in `Bio.SeqUtils.IsoelectricPoint`.\r\n\r\nThe original code:\r\n\r\n```python\r\nclass(IsoelectricPoint):\r\n    # ...\r\n    def pi(self):\r\n        \"\"\"Calculate and return the isoelectric point as float.\"\"\"\r\n        # Bracket between pH1 and pH2\r\n        pH = 7\r\n        charge = self._chargeR(pH)\r\n        if charge > 0.0:\r\n            pH1 = pH\r\n            charge1 = charge\r\n            while charge1 > 0.0:\r\n                pH = pH1 + 1.0\r\n                charge = self._chargeR(pH)\r\n                if charge > 0.0:\r\n                    pH1 = pH\r\n                    charge1 = charge\r\n                else:\r\n                    pH2 = pH\r\n                    charge2 = charge\r\n                    break\r\n        else:\r\n            pH2 = pH\r\n            charge2 = charge\r\n            while charge2 < 0.0:\r\n                pH = pH2 - 1.0\r\n                charge = self._chargeR(pH)\r\n                if charge < 0.0:\r\n                    pH2 = pH\r\n                    charge2 = charge\r\n                else:\r\n                    pH1 = pH\r\n                    charge1 = charge\r\n                    break\r\n\r\n        # Bisection\r\n        while pH2 - pH1 > 0.0001 and charge != 0.0:\r\n            pH = (pH1 + pH2) / 2.0\r\n            charge = self._chargeR(pH)\r\n            if charge > 0.0:\r\n                pH1 = pH\r\n                charge1 = charge\r\n            else:\r\n                pH2 = pH\r\n                charge2 = charge\r\n\r\n        return pH\r\n```\r\n\r\nMy version:\r\n\r\n```python\r\nclass(IsoelectricPoint):\r\n    # ...\r\n    def pi(self, pH=7.775, min_=3.55, max_=12):\r\n        charge = self._chargeR(pH)\r\n        if max_ - min_ > 0.0001:\r\n            if charge > 0.0:\r\n                min_ = pH\r\n            else:\r\n                max_ = pH\r\n            next_pH = (min_ + max_) / 2\r\n            return self.pi(next_pH, min_, max_)\r\n        return pH\r\n```\r\n\r\nThe original method involves two stages.\r\n\r\n1.  Start with pH 7 and calculate charge. If it's positive, increment pH by 1.0 and calculate charge again, and repeat until the charge becomes negative (if it's negative at pH7 then decrease pH until the sign turns positive). **This gives pI at a precision of 1.0.** The two integers around pI are taken to the next step.\r\n2. Then, the bisection method is applied to the two integers. The final answer is nominally precise to 3 decimals, but actually **only the first 2 decimals are significant** because that's the precision of the individual pKa values used in calculation.\r\n\r\nI think the first step is redundant, so I used the bisection approach from the start. Instead of using a while loop, I used a recursive function to make it more concise and (hopefully) more readable. The precision should be the same as the original version.\r\n\r\nHere is a test which compares the result and the speed between the two versions:\r\n\r\n```python\r\nimport time\r\nfrom statistics import mean, stdev\r\nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\r\nfrom Bio.SeqUtils.IsoelectricPoint import IsoelectricPoint\r\n\r\n\r\nclass IsoelectricPoint1(IsoelectricPoint):\r\n\r\n    def pi(self, pH=7.775, min_=3.55, max_=12):\r\n        charge = self._chargeR(pH)\r\n        if max_ - min_ > 0.0001:\r\n            if charge > 0.0:\r\n                min_ = pH\r\n            else:\r\n                max_ = pH\r\n            next_pH = (min_ + max_) / 2\r\n            return self.pi(next_pH, min_, max_)\r\n        return pH\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    # making a large protein sequence as the argument of IsoelectricPoint\r\n    ProteinAnalysisObj = ProteinAnalysis('ACDEFGHIKLS' * 88)  # 100kDa protein\r\n    sequence, content = ProteinAnalysisObj.sequence, ProteinAnalysisObj.count_amino_acids()\r\n\r\n    # speed comparison\r\n\r\n    before = []\r\n    after = []\r\n\r\n    for i in range(1000):\r\n\r\n        t0 = time.time()\r\n        IsoelectricPoint(sequence, content).pi()\r\n        t1 = time.time()\r\n        before.append(t1-t0)\r\n\r\n        t0 = time.time()\r\n        IsoelectricPoint1(sequence, content).pi()\r\n        t1 = time.time()\r\n        after.append(t1-t0)\r\n\r\n    print(f'''\\\r\nbefore:\r\n    result:    {IsoelectricPoint(sequence, content).pi()}\r\n    time:      mean: {mean(before)} sd: {stdev(before)}\r\nafter:\r\n    result:    {IsoelectricPoint1(sequence, content).pi()}\r\n    time:      {mean(after)} sd: {stdev(after)}\r\n    change: {(mean(before)-mean(after))/mean(before)*100}%\r\n        ''')\r\n```\r\n\r\nand here is a sample result:\r\n\r\n```\r\nbefore:\r\n    result:    5.30596923828125\r\n    time:      mean: 4.7277450561523436e-05 sd: 1.1096423096910158e-05\r\nafter:\r\n    result:    5.305893135070799\r\n    time:      5.063033103942871e-05 sd: 1.1653726751044847e-05\r\n    change: -7.091923185540816%\r\n```\r\n\r\nThe results are identical when rounded to 3 or less decimals (only the first 2 decimals are significant so this change is completely safe). There is a slight reduction of speed (by ~8%), but this will usually be negligible (calculating the pI for an 100 kDa protein takes only about 0.05 ms).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2641", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2641/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2641/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2641/events", "html_url": "https://github.com/biopython/biopython/issues/2641", "id": 561321225, "node_id": "MDU6SXNzdWU1NjEzMjEyMjU=", "number": 2641, "title": "Overwrite line in bgzf [Enhancement request]", "user": {"login": "MatthewRalston", "id": 4308024, "node_id": "MDQ6VXNlcjQzMDgwMjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4308024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthewRalston", "html_url": "https://github.com/MatthewRalston", "followers_url": "https://api.github.com/users/MatthewRalston/followers", "following_url": "https://api.github.com/users/MatthewRalston/following{/other_user}", "gists_url": "https://api.github.com/users/MatthewRalston/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthewRalston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthewRalston/subscriptions", "organizations_url": "https://api.github.com/users/MatthewRalston/orgs", "repos_url": "https://api.github.com/users/MatthewRalston/repos", "events_url": "https://api.github.com/users/MatthewRalston/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthewRalston/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-06T23:02:21Z", "updated_at": "2020-02-07T14:14:36Z", "closed_at": "2020-02-07T14:14:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI understand enough about the bgzf format that after obtaining the block offset and line offset (pardon if my terminology is slightly off), the pointer jumps to the position on disk where the block begins, and can begin parsing the block start bits, and then jump to the line offset, where the user is requesting read or write access.\r\n\r\nIs it possible to overwrite the current line with Bio.bgzf?\r\n\r\nSomething like\r\n\r\n```python\r\nfilehandle.seek(offset) # here offset is the output of bgzf._make_offset or whatever the function is called\r\nfilehandle.writeline(line) # this overwrites the line in the middle of the block\r\n```\r\n\r\nIf this is not possible, would it be possible to rewrite the block in the middle of the file.\r\n\r\nHow do I write data *in the middle* of a bgzf file without rewriting the entire file?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2631", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2631/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2631/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2631/events", "html_url": "https://github.com/biopython/biopython/issues/2631", "id": 560468468, "node_id": "MDU6SXNzdWU1NjA0Njg0Njg=", "number": 2631, "title": "\" cannot import name 'BiopythonWarning' from 'Bio' \"", "user": {"login": "BastianJKF", "id": 59733509, "node_id": "MDQ6VXNlcjU5NzMzNTA5", "avatar_url": "https://avatars0.githubusercontent.com/u/59733509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BastianJKF", "html_url": "https://github.com/BastianJKF", "followers_url": "https://api.github.com/users/BastianJKF/followers", "following_url": "https://api.github.com/users/BastianJKF/following{/other_user}", "gists_url": "https://api.github.com/users/BastianJKF/gists{/gist_id}", "starred_url": "https://api.github.com/users/BastianJKF/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BastianJKF/subscriptions", "organizations_url": "https://api.github.com/users/BastianJKF/orgs", "repos_url": "https://api.github.com/users/BastianJKF/repos", "events_url": "https://api.github.com/users/BastianJKF/events{/privacy}", "received_events_url": "https://api.github.com/users/BastianJKF/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-05T16:01:51Z", "updated_at": "2020-03-30T17:27:43Z", "closed_at": "2020-02-07T13:23:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there I\u00b4m just starting using Biopython and just want to start the tutorial provided on the website... this happens just in the first command line\r\n\r\n### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```\r\n>>> import sys; print(sys.version)\r\n3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]\r\n>>> import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nWindows-10-10.0.18362-SP0\r\n>>> import Bio; print(Bio.__version__) \r\n```\r\n\r\n(*Please copy and run the above in your Python, and copy-and-paste the output*)\r\n\r\n### Expected behaviour\r\n\r\n```\r\nimporting SeqIO\r\n```\r\n\r\n### Actual behaviour\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nImportError                               Traceback (most recent call last)\r\n<ipython-input-1-5d24a7c49c42> in <module>\r\n----> 1 from Bio import SeqIO\r\n\r\n~\\Anaconda3\\lib\\Bio\\SeqIO\\__init__.py in <module>\r\n    388 from Bio.File import as_handle\r\n    389 from Bio.SeqRecord import SeqRecord\r\n--> 390 from Bio.Align import MultipleSeqAlignment\r\n    391 from Bio.Alphabet import Alphabet, AlphabetEncoder, _get_base_alphabet\r\n    392 \r\n\r\n~\\Anaconda3\\lib\\Bio\\Align\\__init__.py in <module>\r\n     18 \r\n     19 from Bio._py3k import raise_from\r\n---> 20 from Bio.Seq import Seq\r\n     21 from Bio.SeqRecord import SeqRecord, _RestrictedDict\r\n     22 from Bio import Alphabet\r\n\r\n~\\Anaconda3\\lib\\Bio\\Seq.py in <module>\r\n     38 from Bio._py3k import basestring\r\n     39 \r\n---> 40 from Bio import BiopythonWarning\r\n     41 from Bio import Alphabet\r\n     42 from Bio.Alphabet import IUPAC\r\n\r\nImportError: cannot import name 'BiopythonWarning' from 'Bio' (C:\\Users\\49176\\Anaconda3\\lib\\Bio\\__init__.py)\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```\r\nfrom Bio import SeqIO\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2620", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2620/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2620/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2620/events", "html_url": "https://github.com/biopython/biopython/issues/2620", "id": 558993328, "node_id": "MDU6SXNzdWU1NTg5OTMzMjg=", "number": 2620, "title": "Support NCBI GenBank Targeted Locus Study (TLS)", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413833586, "node_id": "MDU6TGFiZWw0MTM4MzM1ODY=", "url": "https://api.github.com/repos/biopython/biopython/labels/Enhancement", "name": "Enhancement", "color": "0e8a16", "default": false, "description": null}, {"id": 413835256, "node_id": "MDU6TGFiZWw0MTM4MzUyNTY=", "url": "https://api.github.com/repos/biopython/biopython/labels/good%20first%20issue", "name": "good first issue", "color": "fbca04", "default": true, "description": "This should be an easy fix, suitable for beginners"}, {"id": 983806367, "node_id": "MDU6TGFiZWw5ODM4MDYzNjc=", "url": "https://api.github.com/repos/biopython/biopython/labels/help%20wanted", "name": "help wanted", "color": "ef62e6", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-03T10:38:08Z", "updated_at": "2020-02-11T12:47:50Z", "closed_at": "2020-02-11T12:47:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Targeted Locus Study (TLS) are defined here: https://www.ncbi.nlm.nih.gov/genbank/tls/\r\n\r\nExample https://www.ncbi.nlm.nih.gov/nuccore/KBUV00000000.1\r\n\r\n```\r\nLOCUS       KBUV01000000            3714 rc    DNA     linear   ENV 26-FEB-2018\r\nDEFINITION  TLS: soil metagenome 16S ribosomal RNA, targeted locus study.\r\nACCESSION   KBUV00000000\r\nVERSION     KBUV00000000.1\r\nDBLINK      BioProject: PRJNA420556\r\n            BioSample: SAMN08114915\r\nKEYWORDS    TLS; Targeted Locus Study.\r\nSOURCE      soil metagenome\r\n  ORGANISM  soil metagenome\r\n            unclassified sequences; metagenomes; ecological metagenomes.\r\nREFERENCE   1  (bases 1 to 3714)\r\n  AUTHORS   Buscardo,E., Geml,J., Schmidt,S., Freitas,H., Brandao,H. and\r\n            Nagy,L.\r\n  TITLE     Spatio-temporal dynamics of soil bacterial communities in function\r\n            of Amazon forest phenology\r\n  JOURNAL   Unpublished\r\nREFERENCE   2  (bases 1 to 3714)\r\n  AUTHORS   Buscardo,E., Geml,J., Schmidt,S., Freitas,H., Brandao,H. and\r\n            Nagy,L.\r\n  TITLE     Direct Submission\r\n  JOURNAL   Submitted (22-NOV-2017) Centre for Functional Ecology, University\r\n            of Coimbra, Calcada Martim de Freitas, Coimbra, Portugal\r\nCOMMENT     The soil metagenome targeted locus study (TLS) project has the\r\n            project accession KBUV00000000.  This version of the project (01)\r\n            has the accession number KBUV01000000, and consists of sequences\r\n            KBUV01000001-KBUV01003714.\r\nFEATURES             Location/Qualifiers\r\n     source          1..3714\r\n                     /organism=\"soil metagenome\"\r\n                     /mol_type=\"genomic DNA\"\r\n                     /isolation_source=\"soil samples in a lowland tropical\r\n                     evergreen rain forest in Amazonia\"\r\n                     /db_xref=\"taxon:410658\"\r\n                     /environmental_sample\r\n                     /country=\"Brazil: Manaus\"\r\n                     /lat_lon=\"2.92 S 59.95 W\"\r\n                     /collection_date=\"2013\"\r\n                     /note=\"metagenomic\"\r\nTLS         KBUV01000001-KBUV01003714\r\n//\r\n```\r\n\r\nNote the LOCUS line is in units of read count (``rc``) not base pairs (``bp``) or amino acids (``aa``).\r\n\r\nJust like WGS and transcriptome shotgun assembly records (TSA, see #2268), these do not have a sequence of their own - they are like a table of contents pointing at other accessions.\r\n\r\nBy following the work from @kblin on #2269 for TSA files, I think this would be straightforward enough to make a good issue for a first time contributor.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2616", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2616/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2616/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2616/events", "html_url": "https://github.com/biopython/biopython/issues/2616", "id": 558569315, "node_id": "MDU6SXNzdWU1NTg1NjkzMTU=", "number": 2616, "title": "None doesn't have attribute nofuzzy_start", "user": {"login": "alexlenail", "id": 2761597, "node_id": "MDQ6VXNlcjI3NjE1OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2761597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexlenail", "html_url": "https://github.com/alexlenail", "followers_url": "https://api.github.com/users/alexlenail/followers", "following_url": "https://api.github.com/users/alexlenail/following{/other_user}", "gists_url": "https://api.github.com/users/alexlenail/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexlenail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexlenail/subscriptions", "organizations_url": "https://api.github.com/users/alexlenail/orgs", "repos_url": "https://api.github.com/users/alexlenail/repos", "events_url": "https://api.github.com/users/alexlenail/events{/privacy}", "received_events_url": "https://api.github.com/users/alexlenail/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-01T17:17:56Z", "updated_at": "2020-02-03T16:00:23Z", "closed_at": "2020-02-03T16:00:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n3.7.6 (default, Dec 30 2019, 19:38:26) \r\n[Clang 11.0.0 (clang-1100.0.33.16)]\r\nCPython\r\nDarwin-19.2.0-x86_64-i386-64bit\r\n1.76\r\n```\r\n\r\nI encountered this bug about a week ago, and fixed it by changing the following code: \r\n\r\nhttps://github.com/biopython/biopython/blob/51b37542e90362fb4cccbb76a17fe6335813e19f/Bio/SeqRecord.py#L505-L509\r\n\r\nto\r\n\r\n```\r\n                    if (\r\n                        hasattr(f.location, \"nofuzzy_start\")\r\n                        and hasattr(f.location, \"nofuzzy_end\")\r\n                        and start <= f.location.nofuzzy_start\r\n                        and f.location.nofuzzy_end <= stop\r\n                    ):\r\n                        answer.features.append(f._shift(-start))\r\n```\r\n\r\nI was trying to create a new genbank SeqRecord by slicing the old SeqRecord (like `record[start:end]`).  I just moved on once I solved this bug, but I thought I should leave this here in case someone wanted to pick it up. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2615", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2615/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2615/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2615/events", "html_url": "https://github.com/biopython/biopython/issues/2615", "id": 558510364, "node_id": "MDU6SXNzdWU1NTg1MTAzNjQ=", "number": 2615, "title": "create a dssp file", "user": {"login": "koyurion", "id": 32454333, "node_id": "MDQ6VXNlcjMyNDU0MzMz", "avatar_url": "https://avatars1.githubusercontent.com/u/32454333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koyurion", "html_url": "https://github.com/koyurion", "followers_url": "https://api.github.com/users/koyurion/followers", "following_url": "https://api.github.com/users/koyurion/following{/other_user}", "gists_url": "https://api.github.com/users/koyurion/gists{/gist_id}", "starred_url": "https://api.github.com/users/koyurion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koyurion/subscriptions", "organizations_url": "https://api.github.com/users/koyurion/orgs", "repos_url": "https://api.github.com/users/koyurion/repos", "events_url": "https://api.github.com/users/koyurion/events{/privacy}", "received_events_url": "https://api.github.com/users/koyurion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-01T09:04:25Z", "updated_at": "2020-02-01T12:38:19Z", "closed_at": "2020-02-01T12:38:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version)\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nimport Bio; print(Bio.__version__)\r\n```\r\n3.7.5 (default, Oct 31 2019, 15:18:51) [MSC v.1916 64 bit (AMD64)]\r\nCPython\r\nWindows-10-10.0.18362-SP0\r\n1.74\r\n\r\n(*Please copy and run the above in your Python, and copy-and-paste the output*)\r\n\r\n### Expected behaviour\r\n\r\nHow can I create a dssp file through a PDB file? I can not find any functions.\r\n\r\n### Actual behaviour\r\n\r\n(*Please fill this in, and provide any exception message in full*)\r\n\r\n### Steps to reproduce\r\n\r\nfrom Bio.PDB import PDBParser\r\nfrom Bio.PDB.DSSP import DSSP\r\nfrom Bio.PDB import PDBIO\r\n\r\npdbfile=\"C:\\\\Users\\\\KK\\\\Desktop\\\\notebookhome-LLL\\\\dssp\\\\1qhx.pdb\"\r\ndssp_engine=\"D:\\\\pdb\\\\dssp\\\\dssp\\\\dssp-3.0.0-win32.exe\"\r\np = PDBParser()\r\nstructure = p.get_structure(\"1QHX\", pdbfile)\r\nmodel = structure[0]\r\ndssp = DSSP(model, pdbfile,dssp=dssp_engine)\r\n# TODO:  save as a dssp file\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2583", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2583/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2583/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2583/events", "html_url": "https://github.com/biopython/biopython/issues/2583", "id": 555538212, "node_id": "MDU6SXNzdWU1NTU1MzgyMTI=", "number": 2583, "title": "test_ColorSpiral missing cmath dependency", "user": {"login": "kblin", "id": 76448, "node_id": "MDQ6VXNlcjc2NDQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/76448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kblin", "html_url": "https://github.com/kblin", "followers_url": "https://api.github.com/users/kblin/followers", "following_url": "https://api.github.com/users/kblin/following{/other_user}", "gists_url": "https://api.github.com/users/kblin/gists{/gist_id}", "starred_url": "https://api.github.com/users/kblin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kblin/subscriptions", "organizations_url": "https://api.github.com/users/kblin/orgs", "repos_url": "https://api.github.com/users/kblin/repos", "events_url": "https://api.github.com/users/kblin/events{/privacy}", "received_events_url": "https://api.github.com/users/kblin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-27T12:20:04Z", "updated_at": "2020-01-27T12:26:25Z", "closed_at": "2020-01-27T12:26:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version)\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nimport Bio; print(Bio.__version__)\r\n```\r\n\r\n(*Please copy and run the above in your Python, and copy-and-paste the output*)\r\n\r\n### Expected behaviour\r\n\r\nTests pass on a clean checkout with all named dependencies installed.\r\n\r\n### Actual behaviour\r\n\r\n```\r\ntest_ColorSpiral ... loading tests failed:\r\nFailed to import test module: test_ColorSpiral\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/unittest/loader.py\", line 153, in loadTestsFromName\r\n    module = __import__(module_name)\r\n  File \"/home/kai/dev/libs/biopython/Tests/test_ColorSpiral.py\", line 14, in <module>\r\n    from cmath import rect\r\nModuleNotFoundError: No module named 'cmath'\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n__In a Python 3.6.8 virtualenv__\r\n\r\n```\r\ngit clone https://github.com/biopython/biopython\r\ncd biopython\r\npip3 install -e .\r\npython3 setup.py build\r\npython3 setup.py test\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2553", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2553/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2553/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2553/events", "html_url": "https://github.com/biopython/biopython/issues/2553", "id": 550327744, "node_id": "MDU6SXNzdWU1NTAzMjc3NDQ=", "number": 2553, "title": "Genbank IndexError: string index out of range", "user": {"login": "mortonjt", "id": 4184797, "node_id": "MDQ6VXNlcjQxODQ3OTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4184797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mortonjt", "html_url": "https://github.com/mortonjt", "followers_url": "https://api.github.com/users/mortonjt/followers", "following_url": "https://api.github.com/users/mortonjt/following{/other_user}", "gists_url": "https://api.github.com/users/mortonjt/gists{/gist_id}", "starred_url": "https://api.github.com/users/mortonjt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mortonjt/subscriptions", "organizations_url": "https://api.github.com/users/mortonjt/orgs", "repos_url": "https://api.github.com/users/mortonjt/repos", "events_url": "https://api.github.com/users/mortonjt/events{/privacy}", "received_events_url": "https://api.github.com/users/mortonjt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-15T17:28:41Z", "updated_at": "2020-01-15T22:25:17Z", "closed_at": "2020-01-15T22:19:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having a bit of trouble getting the biopython parser to read in certain genbank files.  Below is an example.  I have gotten it to work with a number of other genbank files in the past - so this looks to be more of an exception rather than the norm.\r\n\r\n### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version)\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nimport Bio; print(Bio.__version__)\r\n```\r\n\r\n```\r\n3.7.6 | packaged by conda-forge | (default, Jan  7 2020, 22:05:27)\r\n[Clang 9.0.1 ]\r\nCPython\r\nDarwin-18.7.0-x86_64-i386-64bit\r\n1.76\r\n```\r\n\r\n### Expected behaviour\r\n\r\n```python\r\nfrom Bio import SeqIO\r\ns = SeqIO.parse('lambda.gb', format='genbank')\r\nlist(s)\r\n```\r\n\r\n### Actual behaviour\r\n```\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-4-0bd5623f1e18> in <module>\r\n----> 1 list(s)\r\n\r\n~/miniconda3/envs/gert/lib/python3.7/site-packages/Bio/GenBank/Scanner.py in parse_records(self, handle, do_features)\r\n    514         with as_handle(handle, \"rU\") as handle:\r\n    515             while True:\r\n--> 516                 record = self.parse(handle, do_features)\r\n    517                 if record is None:\r\n    518                     break\r\n\r\n~/miniconda3/envs/gert/lib/python3.7/site-packages/Bio/GenBank/Scanner.py in parse(self, handle, do_features)\r\n    497         )\r\n    498\r\n--> 499         if self.feed(handle, consumer, do_features):\r\n    500             return consumer.data\r\n    501         else:\r\n\r\n~/miniconda3/envs/gert/lib/python3.7/site-packages/Bio/GenBank/Scanner.py in feed(self, handle, consumer, do_features)\r\n    468         # Features (common to both EMBL and GenBank):\r\n    469         if do_features:\r\n--> 470             self._feed_feature_table(consumer, self.parse_features(skip=False))\r\n    471         else:\r\n    472             self.parse_features(skip=True)  # ignore the data\r\n\r\n~/miniconda3/envs/gert/lib/python3.7/site-packages/Bio/GenBank/Scanner.py in parse_features(self, skip)\r\n    203                 # Build up a list of the lines making up this feature:\r\n    204                 if (\r\n--> 205                     line[self.FEATURE_QUALIFIER_INDENT] != \" \"\r\n    206                     and \" \" in line[self.FEATURE_QUALIFIER_INDENT :]\r\n    207                 ):\r\n\r\nIndexError: string index out of range\r\n```\r\n\r\n### Steps to reproduce\r\n\r\nThis was done on an ecoli phage.  See https://www.ncbi.nlm.nih.gov/nuccore/215104", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2552", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2552/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2552/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2552/events", "html_url": "https://github.com/biopython/biopython/issues/2552", "id": 550148247, "node_id": "MDU6SXNzdWU1NTAxNDgyNDc=", "number": 2552, "title": "Apply black to Tests/", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413834067, "node_id": "MDU6TGFiZWw0MTM4MzQwNjc=", "url": "https://api.github.com/repos/biopython/biopython/labels/Style", "name": "Style", "color": "006b75", "default": false, "description": null}, {"id": 413835256, "node_id": "MDU6TGFiZWw0MTM4MzUyNTY=", "url": "https://api.github.com/repos/biopython/biopython/labels/good%20first%20issue", "name": "good first issue", "color": "fbca04", "default": true, "description": "This should be an easy fix, suitable for beginners"}, {"id": 983806367, "node_id": "MDU6TGFiZWw5ODM4MDYzNjc=", "url": "https://api.github.com/repos/biopython/biopython/labels/help%20wanted", "name": "help wanted", "color": "ef62e6", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 66, "created_at": "2020-01-15T12:09:50Z", "updated_at": "2020-07-25T20:01:17Z", "closed_at": "2020-07-25T20:01:17Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is a spin out from #2008, where we have agreed to adopt the black code formatting tool for Biopython:\r\n\r\nhttps://github.com/psf/black\r\n\r\nThat issue focused on applying black to the main code base (``Bio/``, ``BioSQL/``, and also ``Scripts/`` and ``Doc/examples/``).\r\n\r\nThis issue is for applying ``black`` to the Biopython test suite.\r\n\r\nIn principle this is a good issue for new contributors. However, many of the tests include expected data values, so compared to the Biopython main code there are more likely to be cases where black does a bad job - which will need some discussion (e.g. can it be improved with extra brackets, or do we turn off black for a portion of a test file?).\r\n\r\nYou will need to install black, flake8, and associated plugins as described in https://github.com/biopython/biopython/blob/master/CONTRIBUTING.rst - and we recommend turning on the git pre-commit hook).\r\n\r\nExample workflow:\r\n\r\n```\r\ngit checkout master # and make sure it is up to date\r\ngit checkout -b black_test_XXX # start a new branch\r\nblack Tests/test_XXX.py  # do the conversion\r\nflake8 Tests/test_XXX.py # check for string concatenation etc\r\nemacs Tests/test_XXX.py  # review and make any fixes\r\ngit commit Tests/test_XXX.py -m \"Apply black to Tests/test_XXX.py\"\r\ngit push my_fork black_text_XXX  # push the branch to your personal GitHub\r\n```\r\n\r\nTo avoid duplication of effort, please comment here if you are going to work on a particular file, or group of files.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2502", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2502/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2502/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2502/events", "html_url": "https://github.com/biopython/biopython/issues/2502", "id": 546233283, "node_id": "MDU6SXNzdWU1NDYyMzMyODM=", "number": 2502, "title": "Sphinx API documentation missing __magic__ methods", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413833494, "node_id": "MDU6TGFiZWw0MTM4MzM0OTQ=", "url": "https://api.github.com/repos/biopython/biopython/labels/Bug", "name": "Bug", "color": "b60205", "default": false, "description": null}, {"id": 413833678, "node_id": "MDU6TGFiZWw0MTM4MzM2Nzg=", "url": "https://api.github.com/repos/biopython/biopython/labels/Documentation", "name": "Documentation", "color": "0052cc", "default": false, "description": null}, {"id": 983806367, "node_id": "MDU6TGFiZWw5ODM4MDYzNjc=", "url": "https://api.github.com/repos/biopython/biopython/labels/help%20wanted", "name": "help wanted", "color": "ef62e6", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-07T11:31:00Z", "updated_at": "2020-05-08T20:30:22Z", "closed_at": "2020-05-08T20:30:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "e.g. https://biopython.org/docs/dev/api/Bio.Seq.html and https://biopython.org/docs/1.76/api/Bio.SeqRecord.html are missing the ``__getitem__`` documentation which describes slicing etc.\r\n\r\nCompare with https://biopython.org/DIST/docs/api/Bio.Seq.Seq-class.html (generated with epydoc, which we intend to drop.\r\n\r\nThis is likely down to a miss-configuration in https://github.com/biopython/biopython/blob/master/Doc/api/conf.py\r\n\r\nTo build the documentation locally (see also #1803), use:\r\n\r\n```\r\npip install tox\r\ntox -c .travis-tox.ini -e api\r\nopen Doc/api/_build/html/index.html\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2500", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2500/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2500/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2500/events", "html_url": "https://github.com/biopython/biopython/issues/2500", "id": 545983663, "node_id": "MDU6SXNzdWU1NDU5ODM2NjM=", "number": 2500, "title": "ValueError: CompoundLocation should have at least 2 parts", "user": {"login": "crosenth", "id": 1760683, "node_id": "MDQ6VXNlcjE3NjA2ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1760683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crosenth", "html_url": "https://github.com/crosenth", "followers_url": "https://api.github.com/users/crosenth/followers", "following_url": "https://api.github.com/users/crosenth/following{/other_user}", "gists_url": "https://api.github.com/users/crosenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/crosenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crosenth/subscriptions", "organizations_url": "https://api.github.com/users/crosenth/orgs", "repos_url": "https://api.github.com/users/crosenth/repos", "events_url": "https://api.github.com/users/crosenth/events{/privacy}", "received_events_url": "https://api.github.com/users/crosenth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-06T22:57:00Z", "updated_at": "2020-08-19T16:33:28Z", "closed_at": "2020-08-19T16:33:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```\r\n3.6.7 (default, Apr  1 2019, 17:23:47)\r\n[GCC 7.3.0]\r\nCPython\r\nLinux-4.15.0-50-generic-x86_64-with-debian-buster-sid\r\n1.76\r\n```\r\n\r\n### Expected behaviour\r\n\r\nNo ValueError\r\n\r\n### Actual behaviour\r\n\r\n```\r\nValueError: CompoundLocation should have at least 2 parts, not [FeatureLocation(ExactPosition(1773), AfterPosition(1796), strand=1)]\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```\r\npython -c \"from Bio import Entrez, SeqIO; handle = Entrez.efetch(db='nucleotide', id='BDHI01000032', rettype='gbwithparts', retmode='text', email='crosenth@uw.edu', seq_start='5539', seq_stop='7334'); SeqIO.read(handle, 'genbank')\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2490", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2490/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2490/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2490/events", "html_url": "https://github.com/biopython/biopython/issues/2490", "id": 545272510, "node_id": "MDU6SXNzdWU1NDUyNzI1MTA=", "number": 2490, "title": "Remove/refactor redundant `sys.version_info` checks", "user": {"login": "chris-rands", "id": 20436557, "node_id": "MDQ6VXNlcjIwNDM2NTU3", "avatar_url": "https://avatars3.githubusercontent.com/u/20436557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-rands", "html_url": "https://github.com/chris-rands", "followers_url": "https://api.github.com/users/chris-rands/followers", "following_url": "https://api.github.com/users/chris-rands/following{/other_user}", "gists_url": "https://api.github.com/users/chris-rands/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-rands/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-rands/subscriptions", "organizations_url": "https://api.github.com/users/chris-rands/orgs", "repos_url": "https://api.github.com/users/chris-rands/repos", "events_url": "https://api.github.com/users/chris-rands/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-rands/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413835256, "node_id": "MDU6TGFiZWw0MTM4MzUyNTY=", "url": "https://api.github.com/repos/biopython/biopython/labels/good%20first%20issue", "name": "good first issue", "color": "fbca04", "default": true, "description": "This should be an easy fix, suitable for beginners"}, {"id": 983806367, "node_id": "MDU6TGFiZWw5ODM4MDYzNjc=", "url": "https://api.github.com/repos/biopython/biopython/labels/help%20wanted", "name": "help wanted", "color": "ef62e6", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-01-04T11:10:22Z", "updated_at": "2020-01-10T11:00:17Z", "closed_at": "2020-01-10T11:00:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As part of the upgrade to support Python 3.6+ only, many checks for `sys.version_info` are no longer required. Here is an approximate list:\r\n\r\n```\r\n$ grep \"version_info\" Bio/*.py Bio/*/*.py Bio/*/*/*.py Tests/*py \r\nBio/File.py:if (sys.version_info >= (3, 7)\r\nBio/File.py:        or (sys.version_info == (3, 6)\r\nBio/File.py:        if sys.version_info[0] >= 3 and \"U\" in mode:\r\nBio/Seq.py:    if sys.version_info[0] == 3:\r\nBio/Seq.py:        if sys.version_info[0] == 3:\r\nBio/SeqRecord.py:            if sys.version_info[0] < 3:\r\nBio/bgzf.py:    if sys.version_info[0] >= 3:\r\nBio/Phylo/BaseTree.py:if sys.version_info[0] < 3:\r\nBio/SearchIO/__init__.py:if sys.version_info < (3, 6):\r\nBio/SearchIO/__init__.py:    if format == \"blast-xml\" and sys.version_info[0] > 2:\r\nBio/SeqIO/__init__.py:if sys.version_info < (3, 6):\r\nTests/common_BioSQL.py:        if sys.version_info[0] == 2:\r\nTests/test_Phylo.py:        if sys.version_info[0] < 3:\r\nTests/test_Phylo.py:            if sys.version_info[0] < 3:\r\nTests/test_SeqIO_SeqXML.py:    if not (sys.platform == \"win32\" and sys.version_info[0] >= 3):\r\nTests/test_SeqIO_index.py:    if sys.version_info[0] < 3 or format in SeqIO._BinaryFormats:\r\nTests/test_SeqRecord.py:    if sys.version_info[0] >= 3:\r\nTests/test_Seq_objs.py:if sys.version_info[0] < 3:\r\nTests/test_SffIO.py:        if sys.platform != \"win32\" and sys.version_info[0] < 3:\r\nTests/test_geo.py:if sys.version_info[0] >= 3:\r\nTests/test_pairwise_aligner.py:        if sys.version_info[0] >= 3:\r\n```\r\n\r\nI suggest tagging this with \"Good first issue\" and \"Help wanted\"\r\n\r\nNote, the first case `sys.version_info >= (3, 7)` should be kept for now (although a separate discussion might be needed on whether or not it is safe to assume regular `dict`s retain insertion order from Python 3.6 onwards)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2488", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2488/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2488/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2488/events", "html_url": "https://github.com/biopython/biopython/issues/2488", "id": 545173773, "node_id": "MDU6SXNzdWU1NDUxNzM3NzM=", "number": 2488, "title": "Alphabet PendingDeprecationWarning when I didn't use Alphabet", "user": {"login": "donkirkby", "id": 1639148, "node_id": "MDQ6VXNlcjE2MzkxNDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1639148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/donkirkby", "html_url": "https://github.com/donkirkby", "followers_url": "https://api.github.com/users/donkirkby/followers", "following_url": "https://api.github.com/users/donkirkby/following{/other_user}", "gists_url": "https://api.github.com/users/donkirkby/gists{/gist_id}", "starred_url": "https://api.github.com/users/donkirkby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/donkirkby/subscriptions", "organizations_url": "https://api.github.com/users/donkirkby/orgs", "repos_url": "https://api.github.com/users/donkirkby/repos", "events_url": "https://api.github.com/users/donkirkby/events{/privacy}", "received_events_url": "https://api.github.com/users/donkirkby/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-01-03T21:34:57Z", "updated_at": "2020-07-29T08:10:02Z", "closed_at": "2020-07-29T08:10:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Thanks for publishing the Biopython project, my team has found it very useful.\r\n\r\n### Setup\r\n\r\nI am reporting a problem with Biopython 1.76, Python 3.6.9, PyTest 5.32, and Ubuntu 18.04 as follows:\r\n\r\n```python\r\n# test_seq.py\r\nfrom io import StringIO\r\n\r\nfrom Bio.SeqIO import parse\r\n\r\n\r\ndef test_seq():\r\n    fasta_source = StringIO(\"\"\"\\\r\n>example\r\nACTG\r\n\"\"\")\r\n    result = [(seq.name, seq.seq) for seq in parse(fasta_source, 'fasta')]\r\n\r\n    assert result == [('example', 'ACTG')]\r\n```\r\n\r\nThen run the test with Pytest like this:\r\n\r\n```\r\n$ pytest\r\n```\r\n\r\n### Expected behaviour\r\n\r\n```\r\n$ pytest\r\n================================================================================== test session starts ==================================================================================\r\nplatform linux -- Python 3.6.9, pytest-5.3.2, py-1.7.0, pluggy-0.13.1\r\nrootdir: /home/don/scratch/bio_test\r\ncollected 1 item                                                                                                                                                                        \r\n\r\ntest_seq.py .                                                                                                                                                                     [100%]\r\n\r\n=================================================================================== 1 passed in 0.01s ===================================================================================\r\n$\r\n```\r\n\r\n### Actual behaviour\r\n\r\n```\r\n$ pytest\r\n================================================================================== test session starts ==================================================================================\r\nplatform linux -- Python 3.6.9, pytest-5.3.2, py-1.7.0, pluggy-0.13.1\r\nrootdir: /home/don/scratch/bio_test\r\ncollected 1 item                                                                                                                                                                        \r\n\r\ntest_seq.py .                                                                                                                                                                     [100%]\r\n\r\n=================================================================================== warnings summary ====================================================================================\r\n/mnt/data/don/git/MiCall/venv_micall/lib/python3.6/site-packages/Bio/Alphabet/__init__.py:26\r\n  /mnt/data/don/git/MiCall/venv_micall/lib/python3.6/site-packages/Bio/Alphabet/__init__.py:26: PendingDeprecationWarning: We intend to remove or replace Bio.Alphabet in 2020, ideally avoid using it explicitly in your code. Please get in touch if you will be adversely affected by this. https://github.com/biopython/biopython/issues/2046\r\n    PendingDeprecationWarning)\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n============================================================================= 1 passed, 1 warning in 0.78s ==============================================================================\r\n$\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n1. Create a virtual environment.\r\n2. Install Pytest and Biopython.\r\n3. Create the test file shown above.\r\n4. Run Pytest.\r\n\r\n### What I'm Asking For\r\nPlease clarify whether `Bio.SeqIO.parse()` is also deprecated, because importing that generates the warning message.\r\n\r\nIf it is deprecated, I'd appreciate it if you would mark it that way and document the recommended replacement.\r\n\r\nIf it is not deprecated, I'd appreciate it if you only raise a warning when client code calls something deprecated, like directly instantiating an Alphabet object. Maybe you could swallow the warnings when you import from within Biopython, or maybe inspect the call stack? If that's not practical, perhaps you could add some details to issue #2046 about what exactly is deprecated, and how to deal with the warnings when using code that isn't actually deprecated.\r\n\r\nThe problem started when I recently upgraded Biopython from 1.72 to 1.76 and upgraded Pytest from 3.5.0 to 5.3.2. I think Pytest started reporting the warnings, and I'm not sure if Biopython was already generating the warnings.\r\n\r\nI read through issue #2046 that was mentioned in the warning message, and getting rid of `Bio.Alphabet` sounds reasonable to me. (We're not directly using it.) I was surprised that issue #2046 was locked - you might want to clarify what the warning message means by \"get in touch\".\r\n\r\nThanks again for publishing Biopython.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2483", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2483/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2483/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2483/events", "html_url": "https://github.com/biopython/biopython/issues/2483", "id": 544383534, "node_id": "MDU6SXNzdWU1NDQzODM1MzQ=", "number": 2483, "title": "Importing external code with leading underscores?", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-01T18:08:04Z", "updated_at": "2020-01-04T17:18:30Z", "closed_at": "2020-01-04T15:14:18Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Logging this as a specific issue following recent discussions with @mdehoon etc including:\r\n\r\nhttps://github.com/biopython/biopython/pull/2461#discussion_r361867697\r\nhttps://github.com/biopython/biopython/pull/2476#discussion_r362326546\r\nhttps://github.com/biopython/biopython/pull/2476#discussion_r362326641\r\n\r\nTaking ``Bio/Entrez/Parser.py`` as an example, until recently we had:\r\n\r\n```python\r\nfrom Bio._py3k import urlopen as _urlopen\r\n```\r\n\r\nAs part of #2420 (removing ``Bio._py3k`` now that we've dropped Python 2 support), I proposed:\r\n\r\n```python\r\nfrom urllib.request import urlopen as _urlopen\t\r\n```\r\n\r\nAs of #2461, Michiel used:\r\n\r\n```python\r\nfrom urllib.request import urlopen\r\n```\r\n\r\nThe leading underscore namespaces the functions as ``Bio.Entrez.Parser._urlopen`` where it is clearly private, but it is now ``Bio.Entrez.Parser.urlopen`` - to me this is now unintentionally part of the module's public API.\r\n\r\nI recall issues in the past where code relied on this kind of accidental second-hand import, although usually in combination with the frowned upon use of ``from XXX import *`` - the point being if the user did ``from Bio.Entrez.Parser import *`` this would include ``urlopen``.\r\n\r\nI think we could be more proactive in avoiding accidentally exposing our inputs by using leading underscores - but would welcome additional perspectives on this - especially from other Python libraries.\r\n\r\n(I think it is an aside, but we are not defining public interfaces with ``__all__`` either, but https://docs.python.org/3/tutorial/modules.html#importing-from-a-package suggests that is only important if we expect people to use ``from XXX import *`` which is considered bad style.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2454", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2454/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2454/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2454/events", "html_url": "https://github.com/biopython/biopython/issues/2454", "id": 543265118, "node_id": "MDU6SXNzdWU1NDMyNjUxMTg=", "number": 2454, "title": "please add support to align two or more sequences in qblast() inside NCBIWWW.py", "user": {"login": "mzhou08", "id": 12741535, "node_id": "MDQ6VXNlcjEyNzQxNTM1", "avatar_url": "https://avatars0.githubusercontent.com/u/12741535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzhou08", "html_url": "https://github.com/mzhou08", "followers_url": "https://api.github.com/users/mzhou08/followers", "following_url": "https://api.github.com/users/mzhou08/following{/other_user}", "gists_url": "https://api.github.com/users/mzhou08/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzhou08/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzhou08/subscriptions", "organizations_url": "https://api.github.com/users/mzhou08/orgs", "repos_url": "https://api.github.com/users/mzhou08/repos", "events_url": "https://api.github.com/users/mzhou08/events{/privacy}", "received_events_url": "https://api.github.com/users/mzhou08/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-28T18:20:35Z", "updated_at": "2019-12-28T23:21:30Z", "closed_at": "2019-12-28T19:38:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version)\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nimport Bio; print(Bio.__version__)\r\n```\r\n```\r\n3.7.4 (default, Jul  9 2019, 18:13:23)\r\n[Clang 10.0.1 (clang-1001.0.46.4)]\r\nCPython\r\nDarwin-19.0.0-x86_64-i386-64bit\r\n1.74\r\n```\r\n### Expected behaviour\r\n\r\nOn the [NCBI BLAST web site](https://blast.ncbi.nlm.nih.gov/Blast.cgi?PAGE=Proteins&PROGRAM=blastp&BLAST_PROGRAMS=blastp&PAGE_TYPE=BlastSearch&BLAST_SPEC=blast2seq&DATABASE=n/a&QUERY=&SUBJECTS=),  there is a choice to align two or more sequences. \r\n\r\nHowever, this function is missing from the [NCBIWWW.py](https://github.com/biopython/biopython/blob/master/Bio/Blast/NCBIWWW.py) implementation. \r\n\r\nThose two sequences would be marked as \"query\" and \"subject\" sequences for blastp algorithm.\r\n\r\nCould you please add the feature in?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2447", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2447/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2447/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2447/events", "html_url": "https://github.com/biopython/biopython/issues/2447", "id": 542946393, "node_id": "MDU6SXNzdWU1NDI5NDYzOTM=", "number": 2447, "title": "Support data_file_division of TSA for TSA GenBank files", "user": {"login": "kblin", "id": 76448, "node_id": "MDQ6VXNlcjc2NDQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/76448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kblin", "html_url": "https://github.com/kblin", "followers_url": "https://api.github.com/users/kblin/followers", "following_url": "https://api.github.com/users/kblin/following{/other_user}", "gists_url": "https://api.github.com/users/kblin/gists{/gist_id}", "starred_url": "https://api.github.com/users/kblin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kblin/subscriptions", "organizations_url": "https://api.github.com/users/kblin/orgs", "repos_url": "https://api.github.com/users/kblin/repos", "events_url": "https://api.github.com/users/kblin/events{/privacy}", "received_events_url": "https://api.github.com/users/kblin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-27T17:52:49Z", "updated_at": "2020-01-11T17:10:31Z", "closed_at": "2020-01-11T17:09:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version)\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nimport Bio; print(Bio.__version__)\r\n```\r\n```\r\n3.7.4 (default, Jul  9 2019, 18:15:00)\r\n[Clang 10.0.0 (clang-1000.11.45.5)]\r\nCPython\r\nDarwin-17.7.0-x86_64-i386-64bit\r\n/Users/kblin/dev/libs/biopython/Bio/__init__.py:128: BiopythonWarning: You may be importing Biopython from inside the source tree. This is bad practice and might lead to downstream issues. In particular, you might encounter ImportErrors due to missing compiled C extensions. We recommend that you try running your code from outside the source tree. If you are outside the source tree then you have a setup.py file in an unexpected directory: /Users/kblin/dev/libs/biopython.\r\n  format(_parent_dir), BiopythonWarning)\r\n1.77.dev0\r\n```\r\n\r\n### Expected behaviour\r\n\r\nFirst line of the GenBank file has \"TSA\" when writing TSA files.\r\n\r\n### Actual behaviour\r\n\r\nFirst lime of GenBank file has \"UNK\" when writing TSA file.\r\n\r\n### Steps to reproduce\r\n\r\nRun this in the Biopython basedir\r\n\r\n```\r\n#!/usr/bin/env python3\r\nimport io\r\n\r\nfrom Bio import SeqIO\r\n\r\n\r\nwith open(\"Tests/GenBank/tsa_acropora.gb\", \"r\") as infile:\r\n    rec = SeqIO.read(infile, \"genbank\")\r\n    infile.seek(0)\r\n    first_line = infile.readline()\r\n\r\noutfile = io.StringIO()\r\nSeqIO.write([rec], outfile, \"genbank\")\r\noutfile.seek(0)\r\nfirst_line_written = outfile.readline()\r\n\r\nassert first_line == first_line_written, \"\\n{}\\nvs.\\n{}\".format(first_line, first_line_written)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2446", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2446/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2446/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2446/events", "html_url": "https://github.com/biopython/biopython/issues/2446", "id": 542866240, "node_id": "MDU6SXNzdWU1NDI4NjYyNDA=", "number": 2446, "title": "Unable to use Entrez module to connect to NCBI databases.", "user": {"login": "dusadvarshit", "id": 7974289, "node_id": "MDQ6VXNlcjc5NzQyODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/7974289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dusadvarshit", "html_url": "https://github.com/dusadvarshit", "followers_url": "https://api.github.com/users/dusadvarshit/followers", "following_url": "https://api.github.com/users/dusadvarshit/following{/other_user}", "gists_url": "https://api.github.com/users/dusadvarshit/gists{/gist_id}", "starred_url": "https://api.github.com/users/dusadvarshit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dusadvarshit/subscriptions", "organizations_url": "https://api.github.com/users/dusadvarshit/orgs", "repos_url": "https://api.github.com/users/dusadvarshit/repos", "events_url": "https://api.github.com/users/dusadvarshit/events{/privacy}", "received_events_url": "https://api.github.com/users/dusadvarshit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-27T12:52:17Z", "updated_at": "2019-12-27T17:09:49Z", "closed_at": "2019-12-27T16:31:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python \r\npython 3.6.8\r\nBiopython 1.76\r\nOS: Ubuntu 16.04 (server)\r\n```\r\nfrom Bio import Entrez\r\nEntrez.email = \"A.N.Other@example.com\"  # Always tell NCBI who you are\r\nhandle = Entrez.esummary(db=\"nlmcatalog\", id=\"101660833\")\r\nrecord = Entrez.read(handle)\r\ninfo = record[0][\"TitleMainList\"][0]\r\nprint(\"Journal info\\nid: {}\\nTitle: {}\".format(record[0][\"Id\"], info[\"Title\"]))\r\n\r\n(*Please copy and run the above in your Python, and copy-and-paste the output*)\r\n\r\n### Expected behaviour\r\nJournal info\r\nid: 101660833\r\nTitle: IEEE transactions on computational imaging.\r\n\r\n### Actual behaviour\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nPermissionError                           Traceback (most recent call last)\r\n<ipython-input-32-0d9db7c0028e> in <module>\r\n      2 Entrez.email = \"A.N.Other@example.com\"  # Always tell NCBI who you are\r\n      3 handle = Entrez.esummary(db=\"nlmcatalog\", id=\"101660833\")\r\n----> 4 record = Entrez.read(handle)\r\n\r\n~/sdd/miniconda3/envs/python_main/lib/python3.6/site-packages/Bio/Entrez/__init__.py in read(handle, validate, escape)\r\n    485 \r\n    486     handler = DataHandler(validate, escape)\r\n--> 487     record = handler.read(handle)\r\n    488     return record\r\n    489 \r\n\r\n~/sdd/miniconda3/envs/python_main/lib/python3.6/site-packages/Bio/Entrez/Parser.py in read(self, handle)\r\n    343                 handle = BytesIO(_as_bytes(handle.read()))\r\n    344         try:\r\n--> 345             self.parser.ParseFile(handle)\r\n    346         except expat.ExpatError as e:\r\n    347             if self.parser.StartElementHandler:\r\n\r\n/tmp/build/80754af9/python_1546130271559/work/Modules/pyexpat.c in ExternalEntityRef()\r\n\r\n~/sdd/miniconda3/envs/python_main/lib/python3.6/site-packages/Bio/Entrez/Parser.py in externalEntityRefHandler(self, context, base, systemId, publicId)\r\n    981         # First, try to load the local version of the DTD file\r\n    982         location, filename = os.path.split(systemId)\r\n--> 983         handle = self.open_dtd_file(filename)\r\n    984         if not handle:\r\n    985             # DTD is not available as a local file. Try accessing it through\r\n\r\n~/sdd/miniconda3/envs/python_main/lib/python3.6/site-packages/Bio/Entrez/Parser.py in open_dtd_file(self, filename)\r\n    888     def open_dtd_file(self, filename):\r\n    889         \"\"\"Open specified DTD file.\"\"\"\r\n--> 890         self._initialize_directory()\r\n    891         path = os.path.join(self.local_dtd_dir, filename)\r\n    892         try:\r\n\r\n~/sdd/miniconda3/envs/python_main/lib/python3.6/site-packages/Bio/Entrez/Parser.py in _initialize_directory(self)\r\n   1017             else:  # Unix/Linux/Mac\r\n   1018                 home = os.path.expanduser(\"~\")\r\n-> 1019                 self.directory = os.path.join(home, \".config\", \"biopython\")\r\n   1020                 del home\r\n   1021             del platform\r\n\r\n~/sdd/miniconda3/envs/python_main/lib/python3.6/site-packages/Bio/Entrez/Parser.py in directory(self, directory)\r\n   1047         \"\"\"Allow user to set a custom directory, also triggering subdirectory initialization.\"\"\"\r\n   1048         self._directory = directory\r\n-> 1049         self._initialize_directory()\r\n\r\n~/sdd/miniconda3/envs/python_main/lib/python3.6/site-packages/Bio/Entrez/Parser.py in _initialize_directory(self)\r\n   1029             # a race condition.\r\n   1030             if not os.path.isdir(self.local_dtd_dir):\r\n-> 1031                 _raise_from(exception, None)\r\n   1032         # Create XSD local directory\r\n   1033         self.local_xsd_dir = os.path.join(self.directory, \"Bio\", \"Entrez\", \"XSDs\")\r\n\r\n~/sdd/miniconda3/envs/python_main/lib/python3.6/site-packages/Bio/_py3k/__init__.py in raise_from(value, from_value)\r\n\r\n~/sdd/miniconda3/envs/python_main/lib/python3.6/site-packages/Bio/Entrez/Parser.py in _initialize_directory(self)\r\n   1023         self.local_dtd_dir = os.path.join(self.directory, \"Bio\", \"Entrez\", \"DTDs\")\r\n   1024         try:\r\n-> 1025             os.makedirs(self.local_dtd_dir)  # use exist_ok=True on Python >= 3.2\r\n   1026         except OSError as exception:\r\n   1027             # Check if local_dtd_dir already exists, and that it is a directory.\r\n\r\n~/sdd/miniconda3/envs/python_main/lib/python3.6/os.py in makedirs(name, mode, exist_ok)\r\n    208     if head and tail and not path.exists(head):\r\n    209         try:\r\n--> 210             makedirs(head, mode, exist_ok)\r\n    211         except FileExistsError:\r\n    212             # Defeats race condition when another thread created the path\r\n\r\n~/sdd/miniconda3/envs/python_main/lib/python3.6/os.py in makedirs(name, mode, exist_ok)\r\n    208     if head and tail and not path.exists(head):\r\n    209         try:\r\n--> 210             makedirs(head, mode, exist_ok)\r\n    211         except FileExistsError:\r\n    212             # Defeats race condition when another thread created the path\r\n\r\n~/sdd/miniconda3/envs/python_main/lib/python3.6/os.py in makedirs(name, mode, exist_ok)\r\n    208     if head and tail and not path.exists(head):\r\n    209         try:\r\n--> 210             makedirs(head, mode, exist_ok)\r\n    211         except FileExistsError:\r\n    212             # Defeats race condition when another thread created the path\r\n\r\n~/sdd/miniconda3/envs/python_main/lib/python3.6/os.py in makedirs(name, mode, exist_ok)\r\n    218             return\r\n    219     try:\r\n--> 220         mkdir(name, mode)\r\n    221     except OSError:\r\n    222         # Cannot rely on checking for EEXIST, since the operating system\r\n\r\nPermissionError: [Errno 13] Permission denied: '/home/rohit/.config/biopython'\r\n```\r\n\r\n(*Please fill this in, and provide any exception message in full*)\r\n\r\n### Steps to reproduce\r\n1. Installed the biopython library using conda installation: conda install -c conda-forge biopython\r\n2. Attempted to learn the usage of biopython library from the biopython tutorial.\r\n3. The above mentioned example is from http://biopython.org/DIST/docs/tutorial/Tutorial.html#htoc111 section 9.5\r\n\r\n###------------\r\nI am new to biopython use and this was my first attempt with the same. Am I missing some sort of necessary requirement to utilize Entrez module of biopython.\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2431", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2431/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2431/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2431/events", "html_url": "https://github.com/biopython/biopython/issues/2431", "id": 542217302, "node_id": "MDU6SXNzdWU1NDIyMTczMDI=", "number": 2431, "title": "GenBank TSA parsing fails to read actual TSA line", "user": {"login": "kblin", "id": 76448, "node_id": "MDQ6VXNlcjc2NDQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/76448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kblin", "html_url": "https://github.com/kblin", "followers_url": "https://api.github.com/users/kblin/followers", "following_url": "https://api.github.com/users/kblin/following{/other_user}", "gists_url": "https://api.github.com/users/kblin/gists{/gist_id}", "starred_url": "https://api.github.com/users/kblin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kblin/subscriptions", "organizations_url": "https://api.github.com/users/kblin/orgs", "repos_url": "https://api.github.com/users/kblin/repos", "events_url": "https://api.github.com/users/kblin/events{/privacy}", "received_events_url": "https://api.github.com/users/kblin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-24T22:38:35Z", "updated_at": "2019-12-25T14:50:20Z", "closed_at": "2019-12-25T14:50:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\nimport sys; print(sys.version)\r\nimport platform; print(platform.python_implementation()); print(platform.platform())\r\nimport Bio; print(Bio.__version__)\r\n```\r\n```\r\n\u276f python\r\nPython 3.7.4 (default, Jul  9 2019, 18:15:00)\r\n[Clang 10.0.0 (clang-1000.11.45.5)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import sys; print(sys.version)\r\n3.7.4 (default, Jul  9 2019, 18:15:00)\r\n[Clang 10.0.0 (clang-1000.11.45.5)]\r\n>>> import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nDarwin-17.7.0-x86_64-i386-64bit\r\n>>> import Bio; print(Bio.__version__)\r\n/Users/kblin/dev/libs/biopython/Bio/__init__.py:128: BiopythonWarning: You may be importing Biopython from inside the source tree. This is bad practice and might lead to downstream issues. In particular, you might encounter ImportErrors due to missing compiled C extensions. We recommend that you try running your code from outside the source tree. If you are outside the source tree then you have a setup.py file in an unexpected directory: /Users/kblin/dev/libs/biopython.\r\n  format(_parent_dir), BiopythonWarning)\r\n1.77.dev0\r\n```\r\n\r\n### Expected behaviour\r\n\r\nTSA line is read correctly, and `record.annotations[\"tsa\"]` contains the right values.\r\n\r\n### Actual behaviour\r\n\r\n`record.annotations` doesn't have a \"tsa\" key.\r\n\r\n### Steps to reproduce\r\n\r\n```\r\nfrom Bio import SeqIO\r\n\r\nrec = SeqIO.read(\"Tests/GenBank/tsa_acropora.gb\", \"genbank\")\r\nassert \"tsa\" in rec.annotations\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2429", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2429/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2429/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2429/events", "html_url": "https://github.com/biopython/biopython/issues/2429", "id": 541834766, "node_id": "MDU6SXNzdWU1NDE4MzQ3NjY=", "number": 2429, "title": "Remove from __future__ import division, print_function", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413835256, "node_id": "MDU6TGFiZWw0MTM4MzUyNTY=", "url": "https://api.github.com/repos/biopython/biopython/labels/good%20first%20issue", "name": "good first issue", "color": "fbca04", "default": true, "description": "This should be an easy fix, suitable for beginners"}, {"id": 983806367, "node_id": "MDU6TGFiZWw5ODM4MDYzNjc=", "url": "https://api.github.com/repos/biopython/biopython/labels/help%20wanted", "name": "help wanted", "color": "ef62e6", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-12-23T17:06:58Z", "updated_at": "2019-12-26T11:31:26Z", "closed_at": "2019-12-26T11:29:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "We have recently dropped Python 2 support, so the following lines can be removed:\r\n\r\n```python\r\nfrom __future__ import division\r\nfrom __future__ import print_function\r\n```\r\n\r\nThere is at least one division import, and lots of print_function examples.\r\n\r\nThis was suggested by @chris-rands, but might be a good first issue for a newcomer?\r\n\r\nhttps://mailman.open-bio.org/pipermail/biopython/2019-December/016739.html\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2420", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2420/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2420/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2420/events", "html_url": "https://github.com/biopython/biopython/issues/2420", "id": 541083798, "node_id": "MDU6SXNzdWU1NDEwODM3OTg=", "number": 2420, "title": "Remove use of Bio._py3k (Python 2 / 3 compatibility)", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 983806367, "node_id": "MDU6TGFiZWw5ODM4MDYzNjc=", "url": "https://api.github.com/repos/biopython/biopython/labels/help%20wanted", "name": "help wanted", "color": "ef62e6", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 35, "created_at": "2019-12-20T16:30:51Z", "updated_at": "2020-01-10T09:47:51Z", "closed_at": "2020-01-09T16:49:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As of Biopython 1.76 (released December 2019), we are dropping Python 2 support and focusing on Python 3.6 or later. This means we no longer need our (internal) Python 2 vs 3 compatibility library ``Bio._py3k`` (which is a bit like the third party library ``six``).\r\n\r\nThis issue is suitable and specifically targeting first time contributors.\r\n\r\nThere are lots of cases:\r\n\r\n```\r\n$ grep _py3k Bio*/*.py Bio/*/*.py Bio/*/*/*.py\r\nBio/File.py:from Bio._py3k import basestring\r\nBio/MarkovModel.py:        from Bio._py3k import StringIO\r\nBio/Seq.py:from Bio._py3k import range\r\nBio/Seq.py:from Bio._py3k import basestring\r\n...\r\n```\r\n\r\nExample One\r\n------------\r\n\r\nTaking the first example, ``from Bio._py3k import basestring`` we see that this is defined under Python 3 as an alias of ``str``:\r\n\r\nhttps://github.com/biopython/biopython/blob/biopython-176/Bio/_py3k/__init__.py#L56\r\n\r\n```python\r\n    # Lots of our Python 2 code uses isinstance(x, basestring)\r\n    # which after 2to3 becomes isinstance(x, str)\r\n    basestring = str\r\n    unicode = str\r\n```\r\n\r\nTherefore the fix for ``Bio/File.py`` is to remove the ``from Bio._py3k import basestring`` line, and update where ``basestring`` was used to instead use ``str``, which in this case means editing one line:\r\n\r\n```python\r\nif isinstance(handleish, basestring):\r\n```\r\n\r\nwith:\r\n\r\n```python\r\nif isinstance(handleish, str):\r\n```\r\n\r\nExample Two\r\n------------\r\n\r\nTaking the second example, ``Bio/MarkovModel.py`` has ``from Bio._py3k import StringIO`` which we find on Python 3 can just be replaced with ``from io import StringIO``\r\n\r\nhttps://github.com/biopython/biopython/blob/biopython-176/Bio/_py3k/__init__.py#L130\r\n\r\nContributing\r\n-----------\r\n\r\nCould any newcomer wanting to work on this first comment on this issue saying which file(s) they are going to start with (e.g. ``Bio/File.py``, or ``BioSQL/``) to avoid duplication of effort.\r\n\r\n(*Update: The consensus was to switch to be function or constant instead, since they generally require the same technique/fix each time*)\r\n\r\nThen read https://github.com/biopython/biopython/blob/master/CONTRIBUTING.rst and setup ``flake8`` on your machine.\r\n\r\nThen make a pull request making the necessary changes so that those files no longer import from ``Bio._py3k``. Once that's done, you could pick some more to work on.\r\n\r\nEventually there will be nothing using ``Bio._py3k`` and that code itself can be removed, and this issue closed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2417", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2417/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2417/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2417/events", "html_url": "https://github.com/biopython/biopython/issues/2417", "id": 540256646, "node_id": "MDU6SXNzdWU1NDAyNTY2NDY=", "number": 2417, "title": "UniProt release 2019_11 changes FT and CC lines", "user": {"login": "sdecesco", "id": 36763600, "node_id": "MDQ6VXNlcjM2NzYzNjAw", "avatar_url": "https://avatars1.githubusercontent.com/u/36763600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdecesco", "html_url": "https://github.com/sdecesco", "followers_url": "https://api.github.com/users/sdecesco/followers", "following_url": "https://api.github.com/users/sdecesco/following{/other_user}", "gists_url": "https://api.github.com/users/sdecesco/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdecesco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdecesco/subscriptions", "organizations_url": "https://api.github.com/users/sdecesco/orgs", "repos_url": "https://api.github.com/users/sdecesco/repos", "events_url": "https://api.github.com/users/sdecesco/events{/privacy}", "received_events_url": "https://api.github.com/users/sdecesco/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413833586, "node_id": "MDU6TGFiZWw0MTM4MzM1ODY=", "url": "https://api.github.com/repos/biopython/biopython/labels/Enhancement", "name": "Enhancement", "color": "0e8a16", "default": false, "description": null}, {"id": 983806367, "node_id": "MDU6TGFiZWw5ODM4MDYzNjc=", "url": "https://api.github.com/repos/biopython/biopython/labels/help%20wanted", "name": "help wanted", "color": "ef62e6", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-12-19T11:31:29Z", "updated_at": "2020-05-14T12:02:07Z", "closed_at": "2020-05-14T12:02:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n3.5.5 |Anaconda custom (64-bit)| (default, Mar 12 2018, 23:12:44) \r\n[GCC 7.2.0]\r\nCPython\r\nLinux-3.10.0-862.14.4.el7.x86_64-x86_64-with-centos-7.7.1908-Core\r\n1.75\r\n\r\n### Expected behaviour\r\nreading a swissprot record, the features are supposed to be correctly parsed \r\n\r\n### Actual behaviour\r\nIt fails at the feature parsing step. throwing an assertion error. \r\n\r\n```\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-4-c5a06772857b> in <module>()\r\n      1 handle = ExPASy.get_sprot_raw('P49798')\r\n----> 2 record = SwissProt.read(handle)\r\n\r\n~/anaconda3/lib/python3.5/site-packages/Bio/SwissProt/__init__.py in read(handle)\r\n    149     Returns a Record() object.\r\n    150     \"\"\"\r\n--> 151     record = _read(handle)\r\n    152     if not record:\r\n    153         raise ValueError(\"No SwissProt record found\")\r\n\r\n~anaconda3/lib/python3.5/site-packages/Bio/SwissProt/__init__.py in _read(handle)\r\n    253             _read_kw(record, value)\r\n    254         elif key == \"FT\":\r\n--> 255             _read_ft(record, line)\r\n    256         elif key == \"SQ\":\r\n    257             cols = value.split()\r\n\r\n~/anaconda3/lib/python3.5/site-packages/Bio/SwissProt/__init__.py in _read_ft(record, line)\r\n    592         description = line[29:70].rstrip()\r\n    593     if not name:  # is continuation of last one#\r\n--> 594         assert not from_res and not to_res\r\n    595         name, from_res, to_res, old_description, old_ft_id = record.features[-1]\r\n    596         del record.features[-1]\r\nAssertionError: \r\n```\r\n### Steps to reproduce\r\n\r\n```\r\nfrom Bio import ExPASy\r\nfrom Bio import SwissProt\r\n\r\nhandle = ExPASy.get_sprot_raw('P49798')\r\nrecord = SwissProt.read(handle)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2395", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2395/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2395/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2395/events", "html_url": "https://github.com/biopython/biopython/issues/2395", "id": 536560192, "node_id": "MDU6SXNzdWU1MzY1NjAxOTI=", "number": 2395, "title": "ImportError: cannot import name 'BiopythonParserWarning' from 'Bio' (unknown location)", "user": {"login": "Nancy1030", "id": 44587309, "node_id": "MDQ6VXNlcjQ0NTg3MzA5", "avatar_url": "https://avatars0.githubusercontent.com/u/44587309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nancy1030", "html_url": "https://github.com/Nancy1030", "followers_url": "https://api.github.com/users/Nancy1030/followers", "following_url": "https://api.github.com/users/Nancy1030/following{/other_user}", "gists_url": "https://api.github.com/users/Nancy1030/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nancy1030/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nancy1030/subscriptions", "organizations_url": "https://api.github.com/users/Nancy1030/orgs", "repos_url": "https://api.github.com/users/Nancy1030/repos", "events_url": "https://api.github.com/users/Nancy1030/events{/privacy}", "received_events_url": "https://api.github.com/users/Nancy1030/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-12-11T19:08:45Z", "updated_at": "2019-12-14T17:18:55Z", "closed_at": "2019-12-14T17:18:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython module import:\r\n\r\n```python\r\nimport Bio\r\nfrom Bio import Seq\r\nfrom Bio import SeqIO\r\n```\r\n\r\n(*Please copy and run the above in your Python, and copy-and-paste the output*)\r\n\r\n### Expected behaviour\r\n\r\nimport modules\r\n\r\n### Actual behaviour\r\n\r\nImportError: cannot import name 'BiopythonParserWarning' from 'Bio' (unknown location)\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2391", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2391/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2391/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2391/events", "html_url": "https://github.com/biopython/biopython/issues/2391", "id": 534947160, "node_id": "MDU6SXNzdWU1MzQ5NDcxNjA=", "number": 2391, "title": "Use 'import numpy as np' convention?", "user": {"login": "peterjc", "id": 63959, "node_id": "MDQ6VXNlcjYzOTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/63959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterjc", "html_url": "https://github.com/peterjc", "followers_url": "https://api.github.com/users/peterjc/followers", "following_url": "https://api.github.com/users/peterjc/following{/other_user}", "gists_url": "https://api.github.com/users/peterjc/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterjc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterjc/subscriptions", "organizations_url": "https://api.github.com/users/peterjc/orgs", "repos_url": "https://api.github.com/users/peterjc/repos", "events_url": "https://api.github.com/users/peterjc/events{/privacy}", "received_events_url": "https://api.github.com/users/peterjc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 413834067, "node_id": "MDU6TGFiZWw0MTM4MzQwNjc=", "url": "https://api.github.com/repos/biopython/biopython/labels/Style", "name": "Style", "color": "006b75", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-12-09T13:54:36Z", "updated_at": "2019-12-13T13:17:02Z", "closed_at": "2019-12-13T13:17:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The convention in the NumPy documentation is to use ``import numpy as np`` and then for example``np.array(...)`` in code.\r\n\r\nCurrently Biopython for the most part uses ``import numpy`` and ``numpy.array(...)`` with only some newer code using the shorthand.\r\n\r\nI am proposing we switch all our NumPy usage and examples to use the ``import numpy as np`` style, which should be familiar to most Biopython users dealing with NumPy.\r\n\r\nIf people agree, this would be a good first-issue for newcomers to work on (e.g. taking each  different top level module one at a time).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2388", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2388/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2388/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2388/events", "html_url": "https://github.com/biopython/biopython/issues/2388", "id": 534739932, "node_id": "MDU6SXNzdWU1MzQ3Mzk5MzI=", "number": 2388, "title": "Test suite regression for arm64 architecture", "user": {"login": "tillea", "id": 9447939, "node_id": "MDQ6VXNlcjk0NDc5Mzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/9447939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tillea", "html_url": "https://github.com/tillea", "followers_url": "https://api.github.com/users/tillea/followers", "following_url": "https://api.github.com/users/tillea/following{/other_user}", "gists_url": "https://api.github.com/users/tillea/gists{/gist_id}", "starred_url": "https://api.github.com/users/tillea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tillea/subscriptions", "organizations_url": "https://api.github.com/users/tillea/orgs", "repos_url": "https://api.github.com/users/tillea/repos", "events_url": "https://api.github.com/users/tillea/events{/privacy}", "received_events_url": "https://api.github.com/users/tillea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-12-09T07:22:33Z", "updated_at": "2019-12-15T13:24:26Z", "closed_at": "2019-12-15T13:24:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nDebian has now activated Continuous Integration for arm64 (in addition to amd64).  As you can see in the [test log](https://ci.debian.net/data/autopkgtest/testing/arm64/p/python-biopython/3607200/log.gz) this leads to the following error:\r\n\r\n    ======================================================================\r\n    ERROR: test_three_letter_amino_acids_global (test_pairwise_aligner.TestSequencesAsLists)\r\n    ----------------------------------------------------------------------\r\n    Traceback (most recent call last):\r\n      File \"/tmp/autopkgtest-lxc.ld_kz9w6/downtmp/autopkgtest_tmp/Tests/test_pairwise_aligner.py\", line 1783, in test_three_letter_amino_acids_global\r\n        score = aligner.score(seq1, seq2)\r\n      File \"/usr/lib/python2.7/dist-packages/Bio/Align/__init__.py\", line 1527, in score\r\n        return _aligners.PairwiseAligner.score(self, seqA, seqB)\r\n    ValueError: sequence has unexpected format\r\n\r\n    ======================================================================\r\n    ERROR: test_three_letter_amino_acids_local (test_pairwise_aligner.TestSequencesAsLists)\r\n    ----------------------------------------------------------------------\r\n    Traceback (most recent call last):\r\n      File \"/tmp/autopkgtest-lxc.ld_kz9w6/downtmp/autopkgtest_tmp/Tests/test_pairwise_aligner.py\", line 1828, in test_three_letter_amino_acids_local\r\n        score = aligner.score(seq1, seq2)\r\n      File \"/usr/lib/python2.7/dist-packages/Bio/Align/__init__.py\", line 1527, in score\r\n        return _aligners.PairwiseAligner.score(self, seqA, seqB)\r\n    ValueError: sequence has unexpected format\r\n\r\n    ======================================================================\r\n    FAIL: test_aligner_string_errors (test_pairwise_aligner.TestArgumentErrors)\r\n    ----------------------------------------------------------------------\r\n    Traceback (most recent call last):\r\n      File \"/tmp/autopkgtest-lxc.ld_kz9w6/downtmp/autopkgtest_tmp/Tests/test_pairwise_aligner.py\", line 1859, in test_aligner_string_errors\r\n        aligner.score(\"AAA\", \"AA&\")\r\n    AssertionError: ValueError not raised\r\n\r\n    ----------------------------------------------------------------------\r\n    Ran 192 tests in 365.415 seconds\r\n\r\n    FAILED (failures = 1)\r\n    Skipping any tests requiring internet access\r\n    Python version: 2.7.17 (default, Oct 19 2019, 23:36:22)\r\n    [GCC 9.2.1 20191008]\r\n    Operating system: posix linux2\r\n\r\nAny idea what might be wrong here?\r\nKind regards, Andreas.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2360", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2360/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2360/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2360/events", "html_url": "https://github.com/biopython/biopython/issues/2360", "id": 529311114, "node_id": "MDU6SXNzdWU1MjkzMTExMTQ=", "number": 2360, "title": "Motif search slow due to inefficient logodds reformatting", "user": {"login": "Phlya", "id": 2895034, "node_id": "MDQ6VXNlcjI4OTUwMzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2895034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Phlya", "html_url": "https://github.com/Phlya", "followers_url": "https://api.github.com/users/Phlya/followers", "following_url": "https://api.github.com/users/Phlya/following{/other_user}", "gists_url": "https://api.github.com/users/Phlya/gists{/gist_id}", "starred_url": "https://api.github.com/users/Phlya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Phlya/subscriptions", "organizations_url": "https://api.github.com/users/Phlya/orgs", "repos_url": "https://api.github.com/users/Phlya/repos", "events_url": "https://api.github.com/users/Phlya/events{/privacy}", "received_events_url": "https://api.github.com/users/Phlya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 32, "created_at": "2019-11-27T12:17:30Z", "updated_at": "2019-12-23T15:12:14Z", "closed_at": "2019-12-23T15:12:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Biopython's motif search is very slow for long sequences. For example, running it for a \"random\" 500 kbp sequence for the mouse genome with a CTCF motif takes ~2.5 minutes.\r\n\r\nHere is a realistic example of a code to annotate motifs that I ran for a 500 kbp sequence:\r\n\r\n```python\r\n%%prun\r\nsites = []\r\nbg = {'A':seq.count('A')/l, 'T':seq.count('T')/l, 'G':seq.count('G')/l, 'C':seq.count('C')/l}\r\npssm = pfm.pwm.log_odds(bg)\r\nprint('Got PSSM')\r\nsl = len(pfm)\r\ni = 0\r\nt = time.time()\r\nfor pos, score in pssm.search(seq, threshold=7):\r\n    if abs(pos) >= i:\r\n        print(i, len(sites), time.time()-t)\r\n        i += 10000\r\n    if pos < 0:\r\n        strand = '-'\r\n        start = l+pos-sl          \r\n    else:\r\n        strand = '+'\r\n        start = pos\r\n    sites.append([chrom, start, start+sl, strand, score])\r\nsites = pd.DataFrame.from_records(sites, columns=['Chromosome', 'Start', 'End', 'Strand', 'Score'])\r\n```\r\n```\r\nGot PSSM\r\n0 0 2.0478174686431885\r\n10000 2 4.058326721191406\r\n20000 3 4.646576166152954\r\n30000 4 4.920068979263306\r\n40000 5 5.375012636184692\r\n50000 6 5.443111896514893\r\n60000 8 6.0875067710876465\r\n70000 13 11.027215480804443\r\n80000 15 11.987048625946045\r\n90000 19 17.511669397354126\r\n100000 21 18.390772104263306\r\n110000 25 19.8211829662323\r\n120000 27 20.215988636016846\r\n130000 28 20.231982707977295\r\n140000 29 21.383938550949097\r\n150000 31 22.255633115768433\r\n160000 32 23.772958755493164\r\n170000 33 23.932071447372437\r\n180000 34 25.212602138519287\r\n190000 35 25.851369857788086\r\n200000 36 27.52578067779541\r\n210000 40 29.91758108139038\r\n220000 41 32.79414367675781\r\n230000 42 33.60089659690857\r\n240000 44 34.95528721809387\r\n250000 46 35.159255504608154\r\n260000 47 35.528780937194824\r\n270000 48 36.44404315948486\r\n280000 49 36.45104694366455\r\n290000 50 37.153515577316284\r\n300000 55 39.4925754070282\r\n310000 58 40.15520477294922\r\n320000 59 40.58962845802307\r\n330000 60 40.729615926742554\r\n340000 62 42.952834129333496\r\n350000 65 44.504544734954834\r\n360000 160 114.50919079780579\r\n370000 167 118.49372220039368\r\n380000 169 121.2152419090271\r\n390000 175 124.65023851394653\r\n400000 179 127.58756136894226\r\n410000 185 131.23024106025696\r\n420000 190 136.9982407093048\r\n430000 191 137.73300671577454\r\n440000 196 140.6570725440979\r\n450000 204 151.1570451259613\r\n460000 206 152.5533037185669\r\n470000 207 154.19884824752808\r\n480000 210 157.08620762825012\r\n490000 211 157.83301162719727\r\n```\r\n\r\nHere are the top few lines of prun output:\r\n```\r\n637986800 function calls (637986785 primitive calls) in 152.975 seconds\r\n\r\n   Ordered by: internal time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n 75997576   69.802    0.000  110.334    0.000 matrix.py:93(__getitem__)\r\n380988464   30.814    0.000   30.814    0.000 {built-in method builtins.isinstance}\r\n 18999316   21.019    0.000  131.352    0.000 matrix.py:34(<listcomp>)\r\n   999986    8.175    0.000    8.175    0.000 {built-in method numpy.array}\r\n 75997576    5.105    0.000    5.105    0.000 {function GenericPositionMatrix.__getitem__ at 0x7f69edae3b70}\r\n77997651/77997636    4.955    0.000    4.955    0.000 {built-in method builtins.len}\r\n      216    4.300    0.020  159.012    0.736 matrix.py:408(search)\r\n   999964    2.453    0.000  150.575    0.000 matrix.py:28(_calculate)\r\n   999964    2.279    0.000  153.734    0.000 matrix.py:380(calculate)\r\n   999970    1.228    0.000    1.228    0.000 {built-in method numpy.empty}\r\n   999964    1.222    0.000    1.222    0.000 {built-in method Bio.motifs._pwm.calculate}\r\n```\r\n\r\nAs one might notice, the first line in the profiler output is `matrix.py:93(__getitem__)`, and it takes almost 2 minutes of cumtime. I think, this is coming from https://github.com/biopython/biopython/blob/7844bcaa558b7922af3601a5b82173a76bc51c69/Bio/motifs/matrix.py#L34 - basically, for every position in the sequence, every position of the matrix is extracted and reformatted into an array! This seems like a complete waste of time, when this array could be created once at object creation time, and then just used directly.\r\n\r\nI am very inexperienced with OOP, so my attempts at creating a PR failed, however I assumer it would be trivial.\r\n\r\n\r\nAnother issue, and why I added timings and number of motifs found every 10 kbp, is that clearly when there is a lot of hits with the minimum score, for some reason it slows down the code a lot, e.g. look at the jump at 360000! I am not sure why this is happening though. And I have repeated the run with all additional code for adding found motifs to a list etc commented out, and it doesn't make a difference.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2351", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2351/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2351/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2351/events", "html_url": "https://github.com/biopython/biopython/issues/2351", "id": 526234368, "node_id": "MDU6SXNzdWU1MjYyMzQzNjg=", "number": 2351, "title": "atom.transform(...) coordinates problem", "user": {"login": "MauriceKarrenbrock", "id": 56843667, "node_id": "MDQ6VXNlcjU2ODQzNjY3", "avatar_url": "https://avatars3.githubusercontent.com/u/56843667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MauriceKarrenbrock", "html_url": "https://github.com/MauriceKarrenbrock", "followers_url": "https://api.github.com/users/MauriceKarrenbrock/followers", "following_url": "https://api.github.com/users/MauriceKarrenbrock/following{/other_user}", "gists_url": "https://api.github.com/users/MauriceKarrenbrock/gists{/gist_id}", "starred_url": "https://api.github.com/users/MauriceKarrenbrock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MauriceKarrenbrock/subscriptions", "organizations_url": "https://api.github.com/users/MauriceKarrenbrock/orgs", "repos_url": "https://api.github.com/users/MauriceKarrenbrock/repos", "events_url": "https://api.github.com/users/MauriceKarrenbrock/events{/privacy}", "received_events_url": "https://api.github.com/users/MauriceKarrenbrock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-20T21:47:56Z", "updated_at": "2019-11-21T15:30:00Z", "closed_at": "2019-11-21T14:31:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```\r\n3.6.9 |Anaconda, Inc.| (default, Jul 30 2019, 19:07:31) \r\n[GCC 7.3.0]\r\n\r\nCPython\r\nLinux-4.4.180-102-default-x86_64-with-SuSE-42.3-x86_64\r\n\r\n1.76.dev0\r\n```\r\n(and both on the version you install with pip install biopython)\r\n\r\n### Expected behaviour\r\n\r\nI found a strange behaviour of atom.transform(rot_matrix, translation)\r\nUsually atom coordinates are vectors like this\r\n\r\n[x, y, z]\r\n\r\n### Actual behaviour\r\n\r\nBut after transforming my structure with atom.transform(rot_matrix, translation)\r\n\r\nthe atom coordinates become a weird 1D matrix of matrix type\r\n\r\n[ [x, y, z, ] ]\r\n\r\nThis of course makes the writing of this structure abort with\r\n\r\n```\r\nFile \"path/to/miniconda/python/lib/python3.6/site-packages/Bio/PDB/PDBIO.py\", line 280, in save\r\n    chain_id,\r\n  File \"path/to/miniconda/python/lib/python3.6/site-packages/Bio/PDB/PDBIO.py\", line 163, in _get_atom_line\r\n    x, y, z = atom.get_coord()\r\nValueError: not enough values to unpack (expected 3, got 1)\r\n\r\n```\r\n### Steps to reproduce\r\n```\r\nrot_matrix = [[ 0.83764348,  0.48183604,  0.25726918],\r\n[ 0.54088164, -0.66602131, -0.51367565],\r\n[ 0.07616068, -0.56942923,  0.81850467]]\r\n\r\ntranslation = array((0, 0, 0), 'f')\r\n\r\n\r\nPp = Bio.PDB.PDBParser()\r\nstructure = Pp.get_structure(Protein_id, Protein_filename)\r\n\r\natoms = structure.get_atoms()\r\n    \r\nfor atom in atoms:\r\n    atom.transform(rot_matrix, translation)\r\n\r\np = Bio.PDB.PDBIO()\r\n    p.set_structure(structure)\r\n    p.save(Protein_filename)\r\n```\r\n\r\nThis is the pdb I am reading (I renamed it like a TXT in order to upload it):\r\n[1df8_joined_optimized.txt](https://github.com/biopython/biopython/files/3871517/1df8_joined_optimized.txt)\r\n\r\nHoping someone knows how the problem may be solved,\r\nthank you very much and have a nice day\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2343", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2343/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2343/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2343/events", "html_url": "https://github.com/biopython/biopython/issues/2343", "id": 524295344, "node_id": "MDU6SXNzdWU1MjQyOTUzNDQ=", "number": 2343, "title": "Problems importing Bio.Align.substitution_matrices", "user": {"login": "THinnerichs", "id": 32704542, "node_id": "MDQ6VXNlcjMyNzA0NTQy", "avatar_url": "https://avatars3.githubusercontent.com/u/32704542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/THinnerichs", "html_url": "https://github.com/THinnerichs", "followers_url": "https://api.github.com/users/THinnerichs/followers", "following_url": "https://api.github.com/users/THinnerichs/following{/other_user}", "gists_url": "https://api.github.com/users/THinnerichs/gists{/gist_id}", "starred_url": "https://api.github.com/users/THinnerichs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/THinnerichs/subscriptions", "organizations_url": "https://api.github.com/users/THinnerichs/orgs", "repos_url": "https://api.github.com/users/THinnerichs/repos", "events_url": "https://api.github.com/users/THinnerichs/events{/privacy}", "received_events_url": "https://api.github.com/users/THinnerichs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-18T11:07:53Z", "updated_at": "2019-11-18T11:14:31Z", "closed_at": "2019-11-18T11:13:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear Biopython team,\r\nI tried to use the substitution_matrices example code as described in your cookbook, but am here encountering some problems and unexpected errors.\r\n\r\nCode as under 6.5.2.8 Examples:\r\n```python\r\nfrom Bio.Align import substitution_matrices\r\nfrom Bio import Align, SeqIO\r\n```\r\nto execute the following\r\n```python\r\naligner = Align.PairwiseAligner()\r\naligner.substitution_matrix = substitution_matrices.load(\"STR\")\r\n```\r\n\r\n### Setup\r\n3.6.9 |Anaconda, Inc.| (default, Jul 30 2019, 19:07:31) \r\n[GCC 7.3.0]\r\nCPython\r\nLinux-4.19.84-1-MANJARO-x86_64-with-arch-Manjaro-Linux\r\n1.74\r\n\r\n### Expected behaviour\r\nThe import to actually happen.\r\n\r\n### Actual behaviour\r\n```\r\n  File \"similarity_measurement.py\", line 240, in <module>\r\n    test_biopython_PairwiseAligner()\r\n  File \"similarity_measurement.py\", line 18, in test_biopython_PairwiseAligner\r\n    from Bio.Align import substitution_matrices\r\nImportError: cannot import name 'substitution_matrices'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2335", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2335/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2335/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2335/events", "html_url": "https://github.com/biopython/biopython/issues/2335", "id": 520149696, "node_id": "MDU6SXNzdWU1MjAxNDk2OTY=", "number": 2335, "title": "*.py{} in .gitignore is most likely not a used file extension", "user": {"login": "hwalinga", "id": 13176356, "node_id": "MDQ6VXNlcjEzMTc2MzU2", "avatar_url": "https://avatars0.githubusercontent.com/u/13176356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hwalinga", "html_url": "https://github.com/hwalinga", "followers_url": "https://api.github.com/users/hwalinga/followers", "following_url": "https://api.github.com/users/hwalinga/following{/other_user}", "gists_url": "https://api.github.com/users/hwalinga/gists{/gist_id}", "starred_url": "https://api.github.com/users/hwalinga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hwalinga/subscriptions", "organizations_url": "https://api.github.com/users/hwalinga/orgs", "repos_url": "https://api.github.com/users/hwalinga/repos", "events_url": "https://api.github.com/users/hwalinga/events{/privacy}", "received_events_url": "https://api.github.com/users/hwalinga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-08T17:51:29Z", "updated_at": "2019-11-19T10:45:50Z", "closed_at": "2019-11-19T10:45:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\n>>> import sys; print(sys.version)\r\n3.5.3 (default, Sep 27 2018, 17:25:39)\r\n[GCC 6.3.0 20170516]\r\n>>> import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nLinux-4.19.0-0.bpo.6-amd64-x86_64-with-LinuxMint-3-cindy\r\n>>> import Bio; print(Bio.__version__)\r\n1.74\r\n```\r\n\r\n#### The problem\r\n\r\nIn the `.gitignore` of this repo there is the pattern `*.py{}`. I thought this was a strange pattern and when I asked on [Stackoverflow](https://stackoverflow.com/questions/58753064/what-is-the-py-extension) nobody knew what it was and just considered it a bug. \r\n\r\nAn unused pattern in a `.gitignore` file isn't that big of a problem, but I was working on this repo and I often use `ripgrep` to quickly find stuff in files. One of the features of `ripgrep` is that when used in a `git` repo, it ignores files in the `.gitignore` file. However, ripgrep interprets the `{}` in the `.gitignore` (as a glob brace expansion) causing ripgrep to exclude all the `*.py` files in the repo, making it useless for me to use. \r\n\r\nSo, for my workflow (and others using `ripgrep`) I would appreciate it if this line was just removed, as it is unlikely this is really a file extension. Or maybe someone actually knows what program produces files with the file extension `.py{}`. (git blame shows it was introduces by @peterjc )", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2332", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2332/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2332/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2332/events", "html_url": "https://github.com/biopython/biopython/issues/2332", "id": 519952419, "node_id": "MDU6SXNzdWU1MTk5NTI0MTk=", "number": 2332, "title": "Seq __format__  should return a string", "user": {"login": "mdehoon", "id": 136062, "node_id": "MDQ6VXNlcjEzNjA2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/136062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdehoon", "html_url": "https://github.com/mdehoon", "followers_url": "https://api.github.com/users/mdehoon/followers", "following_url": "https://api.github.com/users/mdehoon/following{/other_user}", "gists_url": "https://api.github.com/users/mdehoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdehoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdehoon/subscriptions", "organizations_url": "https://api.github.com/users/mdehoon/orgs", "repos_url": "https://api.github.com/users/mdehoon/repos", "events_url": "https://api.github.com/users/mdehoon/events{/privacy}", "received_events_url": "https://api.github.com/users/mdehoon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-08T11:03:37Z", "updated_at": "2020-07-11T16:04:03Z", "closed_at": "2020-07-11T16:04:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version 1.75, Python version 3.6, and operating\r\nsystem as follows:\r\n\r\nCPython\r\nDarwin-18.7.0-x86_64-i386-64bit\r\n1.76.dev0\r\n\r\n\r\n```python\r\n>>> from Bio.Seq import Seq\r\n>>> from Bio.SeqRecord import SeqRecord\r\n>>> s = Seq(\"ACGT\")\r\n>>> record = SeqRecord(s)\r\n>>> format(record, 'xdna')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: __format__ must return a str, not bytes\r\n```\r\n\r\nThis is coming from the `__format__` method in `SeqRecord`:\r\n```python\r\n        from Bio import SeqIO\r\n\r\n        # Easy case, can call string-building function directly\r\n        if format_spec in SeqIO._FormatToString:\r\n            return SeqIO._FormatToString[format_spec](self)\r\n\r\n        # Harder case, make a temp handle instead\r\n        if format_spec in SeqIO._BinaryFormats:\r\n            # Return bytes on Python 3\r\n            from io import BytesIO\r\n            handle = BytesIO()\r\n        else:\r\n            from Bio._py3k import StringIO\r\n            handle = StringIO()\r\n        SeqIO.write(self, handle, format_spec)\r\n        return handle.getvalue()\r\n```\r\n\r\ni.e. if `format_spec` is in `SeqIO._BinaryFormats`, then on python3 we will be returning bytes.\r\n\r\nSomething along these lines  may work better:\r\n```python\r\n        from Bio import SeqIO\r\n\r\n        # Easy case, can call string-building function directly\r\n        if format_spec in SeqIO._FormatToString:\r\n            return SeqIO._FormatToString[format_spec](self)\r\n\r\n        # Harder case, make a temp handle instead\r\n        from Bio._py3k import StringIO\r\n        handle = StringIO()\r\n        try:\r\n            SeqIO.write(self, handle, format_spec)\r\n        except TypeError:\r\n            raise ValueError(\"cannot format as a string\")\r\n        return handle.getvalue()\r\n```\r\n\r\ni.e. try to make a string, and give a meaningful error message if it fails.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/biopython/biopython/issues/2328", "repository_url": "https://api.github.com/repos/biopython/biopython", "labels_url": "https://api.github.com/repos/biopython/biopython/issues/2328/labels{/name}", "comments_url": "https://api.github.com/repos/biopython/biopython/issues/2328/comments", "events_url": "https://api.github.com/repos/biopython/biopython/issues/2328/events", "html_url": "https://github.com/biopython/biopython/issues/2328", "id": 519403414, "node_id": "MDU6SXNzdWU1MTk0MDM0MTQ=", "number": 2328, "title": "Using keyword arguments in pairwise2.align.globalxx", "user": {"login": "hwalinga", "id": 13176356, "node_id": "MDQ6VXNlcjEzMTc2MzU2", "avatar_url": "https://avatars0.githubusercontent.com/u/13176356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hwalinga", "html_url": "https://github.com/hwalinga", "followers_url": "https://api.github.com/users/hwalinga/followers", "following_url": "https://api.github.com/users/hwalinga/following{/other_user}", "gists_url": "https://api.github.com/users/hwalinga/gists{/gist_id}", "starred_url": "https://api.github.com/users/hwalinga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hwalinga/subscriptions", "organizations_url": "https://api.github.com/users/hwalinga/orgs", "repos_url": "https://api.github.com/users/hwalinga/repos", "events_url": "https://api.github.com/users/hwalinga/events{/privacy}", "received_events_url": "https://api.github.com/users/hwalinga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 23, "created_at": "2019-11-07T17:18:25Z", "updated_at": "2020-01-31T13:17:07Z", "closed_at": "2020-01-31T13:17:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Setup\r\n\r\nI am reporting a problem with Biopython version, Python version, and operating\r\nsystem as follows:\r\n\r\n```python\r\n>>> import sys; print(sys.version)\r\n3.5.3 (default, Sep 27 2018, 17:25:39)\r\n[GCC 6.3.0 20170516]\r\n>>> import platform; print(platform.python_implementation()); print(platform.platform())\r\nCPython\r\nLinux-4.19.0-0.bpo.6-amd64-x86_64-with-LinuxMint-3-cindy\r\n>>> import Bio; print(Bio.__version__)\r\n1.74\r\n```\r\n\r\n(*Please copy and run the above in your Python, and copy-and-paste the output*)\r\n\r\nSo, when using the pairwise2.align function you have to pass in values to calculate the score of the alignment. These are 4 values, and it quickly becomes unreadable what these values actually are. It would be nice if we could pass them as keyword values. So, like this:\r\n\r\n```python\r\npairwise2.align.globalms(\"ACGT\", \"AGGT\", match=1, mismatch=-1, open=-1, extend=-1)\r\n```\r\n\r\nInstead of:\r\n\r\n```python\r\npairwise2.align.globalms(\"ACGT\", \"AGGT\", 1, -1, -1, -1)\r\n```", "performed_via_github_app": null, "score": 1.0}]}