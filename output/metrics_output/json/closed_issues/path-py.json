{"total_count": 119, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/jaraco/path/issues/195", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/195/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/195/events", "html_url": "https://github.com/jaraco/path/issues/195", "id": 630311888, "node_id": "MDU6SXNzdWU2MzAzMTE4ODg=", "number": 195, "title": "Conflict upgrading project to path when other dependency depends on path.py", "user": {"login": "SethMMorton", "id": 1596189, "node_id": "MDQ6VXNlcjE1OTYxODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1596189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SethMMorton", "html_url": "https://github.com/SethMMorton", "followers_url": "https://api.github.com/users/SethMMorton/followers", "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}", "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}", "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions", "organizations_url": "https://api.github.com/users/SethMMorton/orgs", "repos_url": "https://api.github.com/users/SethMMorton/repos", "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}", "received_events_url": "https://api.github.com/users/SethMMorton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-03T20:41:34Z", "updated_at": "2020-07-27T23:54:54Z", "closed_at": "2020-07-27T23:54:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following case, when `foo` has `path.py` as a dependency.\r\n\r\n```\r\n% pip install --find-links=./pypi foo \"path>=14\"\r\nLooking in links: pypi\r\nProcessing ./pypi/foo-3.0.1-py2.py3-none-any.whl\r\nCollecting path>=14\r\n  Downloading path-14.0.1-py3-none-any.whl (21 kB)\r\nCollecting path.py>=11.2\r\n  Using cached path.py-12.4.0-py3-none-any.whl (2.3 kB)\r\nCollecting importlib-metadata>=0.5; python_version < \"3.8\"\r\n  Using cached importlib_metadata-1.6.0-py2.py3-none-any.whl (30 kB)\r\nCollecting zipp>=0.5\r\n  Using cached zipp-3.1.0-py3-none-any.whl (4.9 kB)\r\nERROR: path-py 12.4.0 has requirement path<13.2, but you'll have path 14.0.1 which is incompatible.\r\nInstalling collected packages: zipp, importlib-metadata, path, path.py, foo\r\nSuccessfully installed importlib-metadata-1.6.0 path-14.0.1 path.py-12.4.0 foo-3.0.1 zipp-3.1.0\r\n```\r\n\r\nIn my project, I'd like to update to the newest `path` to remove deprecation errors when calling `lines()`, but I cannot because my project *also* depends on `foo`, which lists `path.py` and not `path` as a dep.\r\n\r\nIn the above example, things work out because `pip` does not actually offer conflict management. However, in my actual case I am using `pip-compile` to truely resolve conflicts, and for that it fails:\r\n\r\n```\r\n% cat requirements.in                                  \r\nfoo\r\npath>=14\r\n% pip-compile --find-links=./pypi\r\nCould not find a version that matches path<13.2,>=14 (from -r requirements.in (line 2))\r\nTried: 13.0.0, 13.0.0, 13.1.0, 13.1.0, 13.2.0, 13.2.0, 13.3.0, 13.3.0, 14.0.0, 14.0.0, 14.0.1, 14.0.1\r\nThere are incompatible versions in the resolved dependencies:\r\n  path>=14 (from -r requirements.in (line 2))\r\n  path<13.2 (from path.py==12.4.0->foo==3.0.1->-r requirements.in (line 1))\r\n```\r\n\r\nThe same would happen to users of `pipenv` or `poetry`. \r\n\r\nWould you be willing/interested in releasing one more major version of `path.py` that just depends on `path` without specifying a version? I realize you probably specified an upper version to force users to change their `requirements.txt` to point to `path` instead, and I definitely want to do that long term. But this conflict prevents me from doing this in the step-wise manner in which I would prefer to approach the problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/188", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/188/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/188/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/188/events", "html_url": "https://github.com/jaraco/path/issues/188", "id": 623241869, "node_id": "MDU6SXNzdWU2MjMyNDE4Njk=", "number": 188, "title": "Tests on travis failing", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-22T14:17:17Z", "updated_at": "2020-05-22T16:11:05Z", "closed_at": "2020-05-22T15:34:22Z", "author_association": "OWNER", "active_lock_reason": null, "body": "With 1b5f6363692a9f0efa742ebf68c0c36e8c45227f, tests on [Travis started failing](https://travis-ci.org/github/jaraco/path/builds/687946642).\r\n\r\nIn particular, it's the [test that asserts no dependencies](https://github.com/jaraco/path/blob/4686eae1323dd39561a63b0efe345289d4c0e56e/test_path.py#L1216-L1222). I suspect the use of `python -S` is somehow breaking the system environment now that virtualenv is used instead of tox-venv.\r\n\r\nI'm unable to replicate the behavior locally (macOS), so the issue may be isolated to Linux.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/187", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/187/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/187/events", "html_url": "https://github.com/jaraco/path/issues/187", "id": 621206217, "node_id": "MDU6SXNzdWU2MjEyMDYyMTc=", "number": 187, "title": "lines() is implemented using text(), not read_text()", "user": {"login": "SethMMorton", "id": 1596189, "node_id": "MDQ6VXNlcjE1OTYxODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1596189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SethMMorton", "html_url": "https://github.com/SethMMorton", "followers_url": "https://api.github.com/users/SethMMorton/followers", "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}", "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}", "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions", "organizations_url": "https://api.github.com/users/SethMMorton/orgs", "repos_url": "https://api.github.com/users/SethMMorton/repos", "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}", "received_events_url": "https://api.github.com/users/SethMMorton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-19T18:49:31Z", "updated_at": "2020-05-26T03:33:17Z", "closed_at": "2020-05-22T14:51:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `text()` function now has a deprecation warning telling  users to use `read_text()` instead. However, `lines()` is implemented using `text()`, not `read_text()`, so I cannot get rid of my deprecation warnings if I wish to use `lines()`.\r\n\r\nIt looks like this was introduced in 5c93ac90dace92cb2815d16d7ee87cfa8a4b6531 for #170. \r\n\r\nAs a side note, should `lines()` become `read_lines()` for symmetry?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/186", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/186/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/186/events", "html_url": "https://github.com/jaraco/path/issues/186", "id": 619596951, "node_id": "MDU6SXNzdWU2MTk1OTY5NTE=", "number": 186, "title": "test_shutil failing on Windows", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-17T02:53:13Z", "updated_at": "2020-05-22T22:57:10Z", "closed_at": "2020-05-22T22:57:10Z", "author_association": "OWNER", "active_lock_reason": null, "body": "On Windows as tested by Azure pipelines, test_shutil is failing thus:\r\n\r\n```\r\n_________________________ TestScratchDir.test_shutil __________________________\r\n\r\nself = <test_path.TestScratchDir object at 0x000001E88D5DEF40>\r\ntmpdir = local('C:\\\\Users\\\\VssAdministrator\\\\AppData\\\\Local\\\\Temp\\\\pytest-of-unknown\\\\pytest-0\\\\test_shutil0')\r\n        assert not testC.exists()\r\n    \r\n        # Copy again, preserving symlinks.\r\n        testA.copytree(testC, True)\r\n        assert testC.isdir()\r\n        self.assertSetsEqual(\r\n            testC.listdir(),\r\n            [testC / testCopy.name, testC / testFile.name, testCopyOfLink],\r\n        )\r\n        if hasattr(os, 'symlink'):\r\n            assert testCopyOfLink.islink()\r\n>           assert testCopyOfLink.readlink() == testFile\r\nE           AssertionError: assert Path('\\\\\\\\?\\\\...testfile.txt') == Path('C:\\\\Use...testfile.txt')\r\nE             - C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\pytest-of-unknown\\pytest-0\\test_shutil0\\testdir\\testfile.txt\r\nE             + \\\\?\\C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\pytest-of-unknown\\pytest-0\\test_shutil0\\testdir\\testfile.txt\r\nE             ? ++++\r\n\r\ntest_path.py:541: AssertionError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/184", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/184/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/184/events", "html_url": "https://github.com/jaraco/path/issues/184", "id": 569325545, "node_id": "MDU6SXNzdWU1NjkzMjU1NDU=", "number": 184, "title": "Fails on black format check", "user": {"login": "felixonmars", "id": 1006477, "node_id": "MDQ6VXNlcjEwMDY0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1006477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixonmars", "html_url": "https://github.com/felixonmars", "followers_url": "https://api.github.com/users/felixonmars/followers", "following_url": "https://api.github.com/users/felixonmars/following{/other_user}", "gists_url": "https://api.github.com/users/felixonmars/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixonmars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixonmars/subscriptions", "organizations_url": "https://api.github.com/users/felixonmars/orgs", "repos_url": "https://api.github.com/users/felixonmars/repos", "events_url": "https://api.github.com/users/felixonmars/events{/privacy}", "received_events_url": "https://api.github.com/users/felixonmars/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-22T12:04:17Z", "updated_at": "2020-02-23T02:01:39Z", "closed_at": "2020-02-23T02:01:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n=================================== FAILURES ===================================\r\n______________________________ Black format check ______________________________\r\n--- /build/python-path/src/path-13.1.0/test_path.py     2020-02-22 11:58:38 +0000\r\n+++ /build/python-path/src/path-13.1.0/test_path.py     2020-02-22 11:58:56.633403 +0000\r\n@@ -432,11 +432,11 @@\r\n         assert os.listdir(tmpdir_bytes)\r\n\r\n         # now try with path\r\n         results = Path(tmpdir).listdir()\r\n         assert len(results) == 1\r\n-        res, = results\r\n+        (res,) = results\r\n         assert isinstance(res, Path)\r\n         # OS X seems to encode the bytes in the filename as %XX characters.\r\n         if platform.system() == 'Darwin':\r\n             assert res.basename() == 'r%E9%F1emi'\r\n             return\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/183", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/183/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/183/events", "html_url": "https://github.com/jaraco/path/issues/183", "id": 562114943, "node_id": "MDU6SXNzdWU1NjIxMTQ5NDM=", "number": 183, "title": "from django.urls import path ImportError: cannot import name path", "user": {"login": "sthabinod", "id": 43512083, "node_id": "MDQ6VXNlcjQzNTEyMDgz", "avatar_url": "https://avatars1.githubusercontent.com/u/43512083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sthabinod", "html_url": "https://github.com/sthabinod", "followers_url": "https://api.github.com/users/sthabinod/followers", "following_url": "https://api.github.com/users/sthabinod/following{/other_user}", "gists_url": "https://api.github.com/users/sthabinod/gists{/gist_id}", "starred_url": "https://api.github.com/users/sthabinod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sthabinod/subscriptions", "organizations_url": "https://api.github.com/users/sthabinod/orgs", "repos_url": "https://api.github.com/users/sthabinod/repos", "events_url": "https://api.github.com/users/sthabinod/events{/privacy}", "received_events_url": "https://api.github.com/users/sthabinod/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3596320, "node_id": "MDU6TGFiZWwzNTk2MzIw", "url": "https://api.github.com/repos/jaraco/path/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-09T03:23:38Z", "updated_at": "2020-02-23T02:02:58Z", "closed_at": "2020-02-23T02:02:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/180", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/180/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/180/events", "html_url": "https://github.com/jaraco/path/issues/180", "id": 538865686, "node_id": "MDU6SXNzdWU1Mzg4NjU2ODY=", "number": 180, "title": "Fix simple typo: temporry -> temporary", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-17T06:29:42Z", "updated_at": "2020-02-23T02:02:16Z", "closed_at": "2020-02-23T02:02:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in test_path.py.\nShould read `temporary` rather than `temporry`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/175", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/175/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/175/events", "html_url": "https://github.com/jaraco/path/issues/175", "id": 514451491, "node_id": "MDU6SXNzdWU1MTQ0NTE0OTE=", "number": 175, "title": "Joining a drive and path results in invalid path (windows)", "user": {"login": "char101", "id": 71255, "node_id": "MDQ6VXNlcjcxMjU1", "avatar_url": "https://avatars3.githubusercontent.com/u/71255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/char101", "html_url": "https://github.com/char101", "followers_url": "https://api.github.com/users/char101/followers", "following_url": "https://api.github.com/users/char101/following{/other_user}", "gists_url": "https://api.github.com/users/char101/gists{/gist_id}", "starred_url": "https://api.github.com/users/char101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/char101/subscriptions", "organizations_url": "https://api.github.com/users/char101/orgs", "repos_url": "https://api.github.com/users/char101/repos", "events_url": "https://api.github.com/users/char101/events{/privacy}", "received_events_url": "https://api.github.com/users/char101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-30T07:25:37Z", "updated_at": "2019-11-30T06:42:54Z", "closed_at": "2019-11-30T06:42:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n>>> Path('C:\\a\\test.txt').drive / 'dir'\r\nPath('C:dir')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/174", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/174/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/174/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/174/events", "html_url": "https://github.com/jaraco/path/issues/174", "id": 511513064, "node_id": "MDU6SXNzdWU1MTE1MTMwNjQ=", "number": 174, "title": "Don't use importlib_metadata with Python 3.8", "user": {"login": "lazka", "id": 991986, "node_id": "MDQ6VXNlcjk5MTk4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/991986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lazka", "html_url": "https://github.com/lazka", "followers_url": "https://api.github.com/users/lazka/followers", "following_url": "https://api.github.com/users/lazka/following{/other_user}", "gists_url": "https://api.github.com/users/lazka/gists{/gist_id}", "starred_url": "https://api.github.com/users/lazka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lazka/subscriptions", "organizations_url": "https://api.github.com/users/lazka/orgs", "repos_url": "https://api.github.com/users/lazka/repos", "events_url": "https://api.github.com/users/lazka/events{/privacy}", "received_events_url": "https://api.github.com/users/lazka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-23T19:01:23Z", "updated_at": "2019-11-29T17:11:48Z", "closed_at": "2019-11-29T16:23:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's provided by Python itself afaics.\r\n\r\nSee a similar commit in pluggy for what needs to be changed: https://github.com/pytest-dev/pluggy/commit/c66077d8c017c2728517be74701ebf06859c980d", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/172", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/172/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/172/events", "html_url": "https://github.com/jaraco/path/issues/172", "id": 507920583, "node_id": "MDU6SXNzdWU1MDc5MjA1ODM=", "number": 172, "title": "Test failure with Pyhon 3.8", "user": {"login": "FRidh", "id": 2129135, "node_id": "MDQ6VXNlcjIxMjkxMzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2129135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FRidh", "html_url": "https://github.com/FRidh", "followers_url": "https://api.github.com/users/FRidh/followers", "following_url": "https://api.github.com/users/FRidh/following{/other_user}", "gists_url": "https://api.github.com/users/FRidh/gists{/gist_id}", "starred_url": "https://api.github.com/users/FRidh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FRidh/subscriptions", "organizations_url": "https://api.github.com/users/FRidh/orgs", "repos_url": "https://api.github.com/users/FRidh/repos", "events_url": "https://api.github.com/users/FRidh/events{/privacy}", "received_events_url": "https://api.github.com/users/FRidh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-16T15:17:19Z", "updated_at": "2019-11-29T15:33:46Z", "closed_at": "2019-11-29T15:33:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.8.0, pytest-5.2.1, py-1.8.0, pluggy-0.13.0 -- /nix/store/n483rgwmx33wd0di0dqhsfr5g291z5fr-python3-3.8.0/bin/python3.8\r\ncachedir: .pytest_cache\r\nrootdir: /build/path.py-12.0.1, inifile: pytest.ini\r\nplugins: flake8-1.0.4\r\ncollecting ... collected 80 items / 1 deselected / 79 selected\r\n\r\nsetup.py::FLAKE8 PASSED                                                  [  1%]\r\ntest_path.py::FLAKE8 PASSED                                              [  2%]\r\ntest_path.py::TestBasics::test_relpath[Path] PASSED                      [  3%]\r\ntest_path.py::TestBasics::test_construction_from_none[Path] PASSED       [  5%]\r\ntest_path.py::TestBasics::test_construction_from_int[Path] PASSED        [  6%]\r\ntest_path.py::TestBasics::test_string_compatibility[Path] PASSED         [  7%]\r\ntest_path.py::TestBasics::test_properties[Path] PASSED                   [  8%]\r\ntest_path.py::TestBasics::test_methods[Path] PASSED                      [ 10%]\r\ntest_path.py::TestBasics::test_UNC[Path] PASSED                          [ 11%]\r\ntest_path.py::TestBasics::test_explicit_module[Path] PASSED              [ 12%]\r\ntest_path.py::TestBasics::test_explicit_module_classes[Path] PASSED      [ 13%]\r\ntest_path.py::TestBasics::test_joinpath_on_instance[Path] PASSED         [ 15%]\r\ntest_path.py::TestBasics::test_joinpath_to_nothing[Path] PASSED          [ 16%]\r\ntest_path.py::TestBasics::test_joinpath_on_class[Path] PASSED            [ 17%]\r\ntest_path.py::TestBasics::test_joinpath_fails_on_empty[Path] PASSED      [ 18%]\r\ntest_path.py::TestBasics::test_joinpath_returns_same_type[Path] PASSED   [ 20%]\r\ntest_path.py::TestSelfReturn::test_makedirs_p[Path] PASSED               [ 21%]\r\ntest_path.py::TestSelfReturn::test_makedirs_p_extant[Path] PASSED        [ 22%]\r\ntest_path.py::TestSelfReturn::test_rename[Path] PASSED                   [ 24%]\r\ntest_path.py::TestSelfReturn::test_mkdir[Path] PASSED                    [ 25%]\r\ntest_path.py::TestSelfReturn::test_touch[Path] PASSED                    [ 26%]\r\ntest_path.py::TestScratchDir::test_context_manager[Path] PASSED          [ 27%]\r\ntest_path.py::TestScratchDir::test_touch[Path] PASSED                    [ 29%]\r\ntest_path.py::TestScratchDir::test_listing[Path] PASSED                  [ 30%]\r\ntest_path.py::TestScratchDir::test_listdir_other_encoding[Path] PASSED   [ 31%]\r\ntest_path.py::TestScratchDir::test_makedirs[Path] PASSED                 [ 32%]\r\ntest_path.py::TestScratchDir::test_shutil[Path] PASSED                   [ 34%]\r\ntest_path.py::TestScratchDir::test_patterns[Path] PASSED                 [ 35%]\r\ntest_path.py::TestScratchDir::test_unicode[Path] PASSED                  [ 36%]\r\ntest_path.py::TestScratchDir::test_chunks[Path] PASSED                   [ 37%]\r\ntest_path.py::TestScratchDir::test_samefile[Path] PASSED                 [ 39%]\r\ntest_path.py::TestScratchDir::test_rmtree_p[Path] PASSED                 [ 40%]\r\ntest_path.py::TestScratchDir::test_rmdir_p_exists[Path] PASSED           [ 41%]\r\ntest_path.py::TestScratchDir::test_rmdir_p_nonexistent[Path] PASSED      [ 43%]\r\ntest_path.py::TestMergeTree::test_with_nonexisting_dst_kwargs[Path] PASSED [ 44%]\r\ntest_path.py::TestMergeTree::test_with_nonexisting_dst_args[Path] PASSED [ 45%]\r\ntest_path.py::TestMergeTree::test_with_existing_dst[Path] PASSED         [ 46%]\r\ntest_path.py::TestMergeTree::test_copytree_parameters[Path] PASSED       [ 48%]\r\ntest_path.py::TestMergeTree::test_only_newer[Path] PASSED                [ 49%]\r\ntest_path.py::TestChdir::test_chdir_or_cd[Path] PASSED                   [ 50%]\r\ntest_path.py::TestSubclass::test_subclass_produces_same_class[Path] PASSED [ 51%]\r\ntest_path.py::TestTempDir::test_constructor[Path] PASSED                 [ 53%]\r\ntest_path.py::TestTempDir::test_next_class[Path] PASSED                  [ 54%]\r\ntest_path.py::TestTempDir::test_context_manager[Path] PASSED             [ 55%]\r\ntest_path.py::TestTempDir::test_context_manager_exception[Path] PASSED   [ 56%]\r\ntest_path.py::TestTempDir::test_context_manager_using_with[Path] PASSED  [ 58%]\r\ntest_path.py::TestUnicode::test_walkdirs_with_unicode_name[Path] PASSED  [ 59%]\r\ntest_path.py::TestPatternMatching::test_fnmatch_simple[Path] PASSED      [ 60%]\r\ntest_path.py::TestPatternMatching::test_fnmatch_custom_mod[Path] PASSED  [ 62%]\r\ntest_path.py::TestPatternMatching::test_fnmatch_custom_normcase[Path] PASSED [ 63%]\r\ntest_path.py::TestPatternMatching::test_listdir_simple[Path] PASSED      [ 64%]\r\ntest_path.py::TestPatternMatching::test_listdir_empty_pattern[Path] PASSED [ 65%]\r\ntest_path.py::TestPatternMatching::test_listdir_patterns[Path] PASSED    [ 67%]\r\ntest_path.py::TestPatternMatching::test_listdir_custom_module[Path] PASSED [ 68%]\r\ntest_path.py::TestPatternMatching::test_listdir_case_insensitive[Path] PASSED [ 69%]\r\ntest_path.py::TestPatternMatching::test_walk_case_insensitive[Path] PASSED [ 70%]\r\ntest_path.py::TestInPlace::test_line_by_line_rewrite[Path] PASSED        [ 72%]\r\ntest_path.py::TestInPlace::test_exception_in_context[Path] PASSED        [ 73%]\r\ntest_path.py::TestSpecialPaths::test_basic_paths[Path] SKIPPED           [ 74%]\r\ntest_path.py::TestSpecialPaths::test_unix_paths[Path] SKIPPED            [ 75%]\r\ntest_path.py::TestSpecialPaths::test_unix_paths_fallback[Path] SKIPPED   [ 77%]\r\ntest_path.py::TestSpecialPaths::test_property[Path] SKIPPED              [ 78%]\r\ntest_path.py::TestSpecialPaths::test_other_parameters[Path] SKIPPED      [ 79%]\r\ntest_path.py::TestSpecialPaths::test_multipath[Path] SKIPPED             [ 81%]\r\ntest_path.py::TestSpecialPaths::test_reused_SpecialResolver[Path] SKIPPED [ 82%]\r\ntest_path.py::TestMultiPath::test_for_class[Path] PASSED                 [ 83%]\r\ntest_path.py::TestMultiPath::test_detect_no_pathsep[Path] PASSED         [ 84%]\r\ntest_path.py::TestMultiPath::test_detect_with_pathsep[Path] PASSED       [ 86%]\r\ntest_path.py::TestMultiPath::test_iteration[Path] PASSED                 [ 87%]\r\ntest_path.py::test_no_dependencies[Path] PASSED                          [ 88%]\r\ntest_path.py::test_version[Path] FAILED                                  [ 89%]\r\ndocs/conf.py::FLAKE8 PASSED                                              [ 91%]\r\npath/__init__.py::FLAKE8 PASSED                                          [ 92%]\r\npath/__init__.py::path.Path.chunks PASSED                                [ 93%]\r\npath/__init__.py::path.Path.stem PASSED                                  [ 94%]\r\npath/__init__.py::path.Path.with_suffix PASSED                           [ 96%]\r\npath/__init__.py::path._multi_permission_mask PASSED                     [ 97%]\r\npath/__init__.py::path._permission_mask PASSED                           [ 98%]\r\npath/matchers.py::FLAKE8 PASSED                                          [100%]\r\n\r\n=================================== FAILURES ===================================\r\n______________________________ test_version[Path] ______________________________\r\n\r\n    def test_version():\r\n        \"\"\"\r\n        Under normal circumstances, path should present a\r\n        __version__.\r\n        \"\"\"\r\n>       assert re.match(r'\\d+\\.\\d+.*', path.__version__)\r\nE       AssertionError: assert None\r\nE        +  where None = <function match at 0x7fffef99edc0>('\\\\d+\\\\.\\\\d+.*', 'unknown')\r\nE        +    where <function match at 0x7fffef99edc0> = re.match\r\nE        +    and   'unknown' = path.__version__\r\n\r\ntest_path.py:1254: AssertionError\r\n=============================== warnings summary ===============================\r\ntest_path.py::test_version[Path]\r\n  /build/path.py-12.0.1/test_path.py:1254: PytestAssertRewriteWarning: asserting the value None, please use \"assert is None\"\r\n    assert re.match(r'\\d+\\.\\d+.*', path.__version__)\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n====== 1 failed, 71 passed, 7 skipped, 1 deselected, 1 warnings in 7.78s =======\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/171", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/171/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/171/events", "html_url": "https://github.com/jaraco/path/issues/171", "id": 496434382, "node_id": "MDU6SXNzdWU0OTY0MzQzODI=", "number": 171, "title": "Path().rmdir_p() errors on non-empty folder", "user": {"login": "mathause", "id": 10194086, "node_id": "MDQ6VXNlcjEwMTk0MDg2", "avatar_url": "https://avatars1.githubusercontent.com/u/10194086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathause", "html_url": "https://github.com/mathause", "followers_url": "https://api.github.com/users/mathause/followers", "following_url": "https://api.github.com/users/mathause/following{/other_user}", "gists_url": "https://api.github.com/users/mathause/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathause/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathause/subscriptions", "organizations_url": "https://api.github.com/users/mathause/orgs", "repos_url": "https://api.github.com/users/mathause/repos", "events_url": "https://api.github.com/users/mathause/events{/privacy}", "received_events_url": "https://api.github.com/users/mathause/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-20T16:08:29Z", "updated_at": "2019-11-29T16:48:16Z", "closed_at": "2019-11-29T16:19:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When I try to delete a non-empty folder with `rmdir_p` it raises an error.\r\n\r\n``` python\r\nimport path\r\nfrom path import Path\r\n\r\ntmpdir = path.tempdir()\r\nself = None # I directly created a test case for test_path.py\r\n\r\ndef test_rmdir_p_sub_sub_dir(self, tmpdir):\r\n    \"\"\"\r\n    A non-empty folder should not raise an exception.\r\n    \"\"\"\r\n    d = Path(tmpdir)\r\n    sub = d / 'subfolder'\r\n    sub.mkdir()\r\n    subsub = sub / 'subfolder'\r\n    subsub.mkdir()\r\n\r\n    sub.rmdir_p()\r\n\r\ntest_rmdir_p_sub_sub_dir(self, tmpdir)\r\n```\r\n\r\nThis raises the following error:\r\n\r\n``` python\r\n~/path.py/path/__init__.py in translate()\r\n   1459             _, e, _ = sys.exc_info()\r\n   1460             if e.errno == errno.ENOTEMPTY:\r\n-> 1461                 e.__class__ = DirectoryNotEmpty\r\n   1462             raise\r\n   1463\r\n\r\nTypeError: __class__ assignment only supported for heap types or ModuleType subclasses\r\n```\r\n\r\nAfter replacing [Line 1461](https://github.com/jaraco/path.py/blob/master/path/__init__.py#L1461) with `pass` it raises an `OSError` (according to the docstring it should not raise, or?).\r\n\r\nUsage question - should `rmdir_p()` delete a non-empty folder? Or should it silently fail? To delete non-empty folders should `rmtree` be used?\r\n\r\n\r\npython 3.7.0\r\n``` python\r\npath.__version__\r\n>>> '12.0.2.dev2+g91a5c22'\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/170", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/170/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/170/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/170/events", "html_url": "https://github.com/jaraco/path/issues/170", "id": 491627734, "node_id": "MDU6SXNzdWU0OTE2Mjc3MzQ=", "number": 170, "title": "no read_text in path.py", "user": {"login": "gsemet", "id": 133498, "node_id": "MDQ6VXNlcjEzMzQ5OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/133498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gsemet", "html_url": "https://github.com/gsemet", "followers_url": "https://api.github.com/users/gsemet/followers", "following_url": "https://api.github.com/users/gsemet/following{/other_user}", "gists_url": "https://api.github.com/users/gsemet/gists{/gist_id}", "starred_url": "https://api.github.com/users/gsemet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gsemet/subscriptions", "organizations_url": "https://api.github.com/users/gsemet/orgs", "repos_url": "https://api.github.com/users/gsemet/repos", "events_url": "https://api.github.com/users/gsemet/events{/privacy}", "received_events_url": "https://api.github.com/users/gsemet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3596319, "node_id": "MDU6TGFiZWwzNTk2MzE5", "url": "https://api.github.com/repos/jaraco/path/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 1460794497, "node_id": "MDU6TGFiZWwxNDYwNzk0NDk3", "url": "https://api.github.com/repos/jaraco/path/labels/help%20wanted", "name": "help wanted", "color": "00DD00", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-10T11:59:37Z", "updated_at": "2019-12-01T17:37:57Z", "closed_at": "2019-12-01T17:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\nI though path.Path was acting like a children of `pathlib.Path`, so that they can be converted easily, but I see `path.Path` does not have some methods such as `read_text`. Is it necessary to convert to `pathlib.Path` in order to use `read_text`?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/169", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/169/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/169/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/169/events", "html_url": "https://github.com/jaraco/path/issues/169", "id": 478955774, "node_id": "MDU6SXNzdWU0Nzg5NTU3NzQ=", "number": 169, "title": "Migrate project to 'path'", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2019-08-09T12:13:19Z", "updated_at": "2019-11-30T19:30:12Z", "closed_at": "2019-11-30T19:30:12Z", "author_association": "OWNER", "active_lock_reason": null, "body": "After some time, I've managed to get the name 'path' on PyPI (pypa/warehouse#4123). I'd like to publish this package there (and deprecate this one).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/168", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/168/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/168/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/168/events", "html_url": "https://github.com/jaraco/path/issues/168", "id": 470627172, "node_id": "MDU6SXNzdWU0NzA2MjcxNzI=", "number": 168, "title": "Add standard type hints / stub files", "user": {"login": "5j9", "id": 1055747, "node_id": "MDQ6VXNlcjEwNTU3NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1055747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5j9", "html_url": "https://github.com/5j9", "followers_url": "https://api.github.com/users/5j9/followers", "following_url": "https://api.github.com/users/5j9/following{/other_user}", "gists_url": "https://api.github.com/users/5j9/gists{/gist_id}", "starred_url": "https://api.github.com/users/5j9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5j9/subscriptions", "organizations_url": "https://api.github.com/users/5j9/orgs", "repos_url": "https://api.github.com/users/5j9/repos", "events_url": "https://api.github.com/users/5j9/events{/privacy}", "received_events_url": "https://api.github.com/users/5j9/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1460794497, "node_id": "MDU6TGFiZWwxNDYwNzk0NDk3", "url": "https://api.github.com/repos/jaraco/path/labels/help%20wanted", "name": "help wanted", "color": "00DD00", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-20T02:55:37Z", "updated_at": "2020-07-31T14:04:22Z", "closed_at": "2020-07-28T00:20:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was working with PyCharm and noticed that it does not give useful auto-completion suggestion for this module.\r\n\r\n```\r\nfrom path import Path\r\n\r\nfile_list = Path(r'.').listdir()\r\nfile_list[0].<no useful suggestion>\r\n```\r\n\r\nI guess this is because of lack of type hints/stub files.\r\nDo you have any plans for adding them?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/167", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/167/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/167/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/167/events", "html_url": "https://github.com/jaraco/path/issues/167", "id": 470244612, "node_id": "MDU6SXNzdWU0NzAyNDQ2MTI=", "number": 167, "title": "Test fails with pytest5", "user": {"login": "scarabeusiv", "id": 1055830, "node_id": "MDQ6VXNlcjEwNTU4MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1055830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scarabeusiv", "html_url": "https://github.com/scarabeusiv", "followers_url": "https://api.github.com/users/scarabeusiv/followers", "following_url": "https://api.github.com/users/scarabeusiv/following{/other_user}", "gists_url": "https://api.github.com/users/scarabeusiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/scarabeusiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scarabeusiv/subscriptions", "organizations_url": "https://api.github.com/users/scarabeusiv/orgs", "repos_url": "https://api.github.com/users/scarabeusiv/repos", "events_url": "https://api.github.com/users/scarabeusiv/events{/privacy}", "received_events_url": "https://api.github.com/users/scarabeusiv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-19T10:03:07Z", "updated_at": "2019-07-20T16:57:22Z", "closed_at": "2019-07-20T16:57:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "The raises changed behaviour a bit with 5.x release and now one of the tests fails as follows:\r\n\r\n```\r\n[   32s] =================================== FAILURES ===================================\r\n[   32s] _________________ TestInPlace.test_exception_in_context[Path] __________________\r\n[   32s] \r\n[   32s] self = <test_path.TestInPlace object at 0x7f9f89588f28>\r\n[   32s] tmpdir = local('/tmp/pytest-of-abuild/pytest-1/test_exception_in_context_Path0')\r\n[   32s] \r\n[   32s]     def test_exception_in_context(self, tmpdir):\r\n[   32s]         doc = self.create_reference(tmpdir)\r\n[   32s]         with pytest.raises(RuntimeError) as exc:\r\n[   32s]             with doc.in_place() as (reader, writer):\r\n[   32s]                 writer.write(self.alternate_content)\r\n[   32s]                 raise RuntimeError(\"some error\")\r\n[   32s] >       assert \"some error\" in str(exc)\r\n[   32s] E       AssertionError: assert 'some error' in '<ExceptionInfo RuntimeError tblen=1>'\r\n[   32s] E        +  where '<ExceptionInfo RuntimeError tblen=1>' = str(<ExceptionInfo RuntimeError tblen=1>)\r\n[   32s] \r\n[   32s] test_path.py:1103: AssertionError\r\n[   32s] ============== 1 failed, 68 passed, 1 deselected in 4.81 seconds ===============\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/166", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/166/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/166/events", "html_url": "https://github.com/jaraco/path/issues/166", "id": 432807326, "node_id": "MDU6SXNzdWU0MzI4MDczMjY=", "number": 166, "title": "Wheel on pypi has misleading name: path.py-12.0-py2.py3-none-any.whl", "user": {"login": "nehaljwani", "id": 1779189, "node_id": "MDQ6VXNlcjE3NzkxODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1779189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nehaljwani", "html_url": "https://github.com/nehaljwani", "followers_url": "https://api.github.com/users/nehaljwani/followers", "following_url": "https://api.github.com/users/nehaljwani/following{/other_user}", "gists_url": "https://api.github.com/users/nehaljwani/gists{/gist_id}", "starred_url": "https://api.github.com/users/nehaljwani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nehaljwani/subscriptions", "organizations_url": "https://api.github.com/users/nehaljwani/orgs", "repos_url": "https://api.github.com/users/nehaljwani/repos", "events_url": "https://api.github.com/users/nehaljwani/events{/privacy}", "received_events_url": "https://api.github.com/users/nehaljwani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-13T04:45:42Z", "updated_at": "2019-04-13T06:08:13Z", "closed_at": "2019-04-13T06:08:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://pypi.org/project/path.py/#files\r\n\r\n12.0 doesn't support python2 anymore, but the name claims otherwise!?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/163", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/163/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/163/events", "html_url": "https://github.com/jaraco/path/issues/163", "id": 430745516, "node_id": "MDU6SXNzdWU0MzA3NDU1MTY=", "number": 163, "title": "11.5.1 release is broken", "user": {"login": "nehaljwani", "id": 1779189, "node_id": "MDQ6VXNlcjE3NzkxODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1779189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nehaljwani", "html_url": "https://github.com/nehaljwani", "followers_url": "https://api.github.com/users/nehaljwani/followers", "following_url": "https://api.github.com/users/nehaljwani/following{/other_user}", "gists_url": "https://api.github.com/users/nehaljwani/gists{/gist_id}", "starred_url": "https://api.github.com/users/nehaljwani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nehaljwani/subscriptions", "organizations_url": "https://api.github.com/users/nehaljwani/orgs", "repos_url": "https://api.github.com/users/nehaljwani/repos", "events_url": "https://api.github.com/users/nehaljwani/events{/privacy}", "received_events_url": "https://api.github.com/users/nehaljwani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-04-09T03:09:49Z", "updated_at": "2019-04-09T05:22:38Z", "closed_at": "2019-04-09T05:22:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n\u279c pip install path.py\r\nCollecting path.py\r\n  Downloading https://files.pythonhosted.org/packages/8f/a8/0bac3671dda3b644b49f8b575cf52a6cefb88de00fb48fb3a745c1d1d182/path.py-11.5.1-py2.py3-none-any.whl\r\nCollecting importlib-metadata>=0.5 (from path.py)\r\n  Downloading https://files.pythonhosted.org/packages/58/64/1ce5a6427b9152ef71c14db9e54e74f6f11e8411995bda41979abab817b1/importlib_metadata-0.9-py2.py3-none-any.whl\r\nCollecting zipp>=0.3.2 (from importlib-metadata>=0.5->path.py)\r\n  Downloading https://files.pythonhosted.org/packages/00/42/10a1f8d29eaf9c7f2b555a5d1d602b9261f2a0cbec08f8f23d9056f5915d/zipp-0.3.3-py2.py3-none-any.whl\r\nInstalling collected packages: zipp, importlib-metadata, path.py\r\nSuccessfully installed importlib-metadata-0.9 path.py-11.5.1 zipp-0.3.3\r\n\r\n\u279c  python\r\nPython 3.7.3 (default, Mar 27 2019, 16:54:48)\r\n[Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from path import Path\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nModuleNotFoundError: No module named 'path'\r\n```\r\n\r\nWheel has no code in it!\r\n```\r\n\u279c 11.5.1 unzip -l path.py-11.5.1-py2.py3-none-any.zip\r\nArchive:  path.py-11.5.1-py2.py3-none-any.zip\r\n  Length      Date    Time    Name\r\n---------  ---------- -----   ----\r\n     1050  04-09-2019 02:05   path.py-11.5.1.dist-info/LICENSE\r\n     5997  04-09-2019 02:05   path.py-11.5.1.dist-info/METADATA\r\n      110  04-09-2019 02:05   path.py-11.5.1.dist-info/WHEEL\r\n        1  04-09-2019 02:05   path.py-11.5.1.dist-info/top_level.txt\r\n      391  04-09-2019 02:05   path.py-11.5.1.dist-info/RECORD\r\n---------                     -------\r\n     7549                     5 files\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/161", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/161/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/161/events", "html_url": "https://github.com/jaraco/path/issues/161", "id": 421142930, "node_id": "MDU6SXNzdWU0MjExNDI5MzA=", "number": 161, "title": "Path \"freezeability\"", "user": {"login": "njalerikson", "id": 4546435, "node_id": "MDQ6VXNlcjQ1NDY0MzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/4546435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njalerikson", "html_url": "https://github.com/njalerikson", "followers_url": "https://api.github.com/users/njalerikson/followers", "following_url": "https://api.github.com/users/njalerikson/following{/other_user}", "gists_url": "https://api.github.com/users/njalerikson/gists{/gist_id}", "starred_url": "https://api.github.com/users/njalerikson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njalerikson/subscriptions", "organizations_url": "https://api.github.com/users/njalerikson/orgs", "repos_url": "https://api.github.com/users/njalerikson/repos", "events_url": "https://api.github.com/users/njalerikson/events{/privacy}", "received_events_url": "https://api.github.com/users/njalerikson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-14T17:09:19Z", "updated_at": "2019-03-21T15:05:03Z", "closed_at": "2019-03-20T18:16:25Z", "author_association": "NONE", "active_lock_reason": null, "body": " I've been monkey patching Python's pathlib to introduce a freezeability logic to paths. I have been pleasantly surprised by path.py's attempt at addressing what I consider glaring weaknesses of pathlib (while also eliminating certain over-complications), so I am seeing if there is interest in incorporating this freezeability logic here.\r\n\r\nI agree that at its core, freezeability is a convenience to `abspath` and `relpath`.\r\n\r\nWith freezability I can define a path (absolute or relative), freeze said path (which then internally absolutes said path). With a frozen path I can then move around on my system but the path continues to work correctly. A frozen path has two views, relative and absolute. A Path also has control over which view to default to when stringifying. Once a Path is frozen, it can also be unfrozen which then un-absolutes a path.\r\n\r\n```\r\np1 = Path(\"../foo\")\r\np1.relative  # ../foo\r\np1.absolute  # ValueError\r\nstr(p1)  # ../foo\r\n\r\n# freeze a path\r\np1.freeze()\r\np1.relative  # ../foo\r\np1.absolute  # /bar/baz/foo\r\nstr(p1)  # ../foo\r\n\r\n# default to stringifying as absolute\r\np1.showrelative = False\r\np1.relative  # ../foo\r\np1.absolute  # /bar/baz/foo\r\nstr(p1)  # /bar/baz/foo\r\n```\r\n\r\nI've found that using freeze logic significantly simplifies and streamlines many of the confusions of dealing with lexical path operations (like `Path(\"foo\").parent.parent`) since there is an internal path on which the actual operations occur, but then the user gets to see and deal with nice relative paths if possible.\r\n\r\nIf this is of interest I will get started on a PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/160", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/160/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/160/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/160/events", "html_url": "https://github.com/jaraco/path/issues/160", "id": 414545514, "node_id": "MDU6SXNzdWU0MTQ1NDU1MTQ=", "number": 160, "title": "TestScratchDir.test_listdir_other_encoding fails on python2", "user": {"login": "scarabeusiv", "id": 1055830, "node_id": "MDQ6VXNlcjEwNTU4MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1055830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scarabeusiv", "html_url": "https://github.com/scarabeusiv", "followers_url": "https://api.github.com/users/scarabeusiv/followers", "following_url": "https://api.github.com/users/scarabeusiv/following{/other_user}", "gists_url": "https://api.github.com/users/scarabeusiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/scarabeusiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scarabeusiv/subscriptions", "organizations_url": "https://api.github.com/users/scarabeusiv/orgs", "repos_url": "https://api.github.com/users/scarabeusiv/repos", "events_url": "https://api.github.com/users/scarabeusiv/events{/privacy}", "received_events_url": "https://api.github.com/users/scarabeusiv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-26T10:44:13Z", "updated_at": "2019-02-26T10:47:04Z", "closed_at": "2019-02-26T10:47:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n[    8s]         # now try with path.py\r\n[    8s] >       results = Path(tmpdir).listdir()\r\n[    8s] \r\n[    8s] test_path.py:440: \r\n[    8s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[    8s] path.py:589: in listdir\r\n[    8s]     self / child for child in os.listdir(self)\r\n[    8s] path.py:589: in <genexpr>\r\n[    8s]     self / child for child in os.listdir(self)\r\n[    8s] path.py:282: in __div__\r\n[    8s]     return self._next_class(self.module.join(self, rel))\r\n[    8s] /usr/lib64/python2.7/posixpath.py:73: in join\r\n[    8s]     path += '/' + b\r\n[    8s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n[    8s] \r\n[    8s] self = Path(u'/tmp/pytest-of-abuild/pytest-38/test_listdir_other_encoding_Pa0')\r\n[    8s] more = '/r\\xe9\\xf1emi'\r\n[    8s] \r\n[    8s]     def __add__(self, more):\r\n[    8s]         try:\r\n[    8s] >           return self._next_class(super(Path, self).__add__(more))\r\n[    8s] E           UnicodeDecodeError: 'ascii' codec can't decode byte 0xe9 in position 2: ordinal not in range(128)\r\n```\r\n\r\nThe locale is set to en_US.utf8 and the same test works fine on python3 of course.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/159", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/159/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/159/events", "html_url": "https://github.com/jaraco/path/issues/159", "id": 414517931, "node_id": "MDU6SXNzdWU0MTQ1MTc5MzE=", "number": 159, "title": "TestPerformance.test_import_time fails on 32bit arch", "user": {"login": "scarabeusiv", "id": 1055830, "node_id": "MDQ6VXNlcjEwNTU4MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1055830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scarabeusiv", "html_url": "https://github.com/scarabeusiv", "followers_url": "https://api.github.com/users/scarabeusiv/followers", "following_url": "https://api.github.com/users/scarabeusiv/following{/other_user}", "gists_url": "https://api.github.com/users/scarabeusiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/scarabeusiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scarabeusiv/subscriptions", "organizations_url": "https://api.github.com/users/scarabeusiv/orgs", "repos_url": "https://api.github.com/users/scarabeusiv/repos", "events_url": "https://api.github.com/users/scarabeusiv/events{/privacy}", "received_events_url": "https://api.github.com/users/scarabeusiv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-26T09:43:17Z", "updated_at": "2019-07-20T18:14:12Z", "closed_at": "2019-07-20T18:14:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "When running the test on 32bit arch I get following error:\r\n\r\n[   79s] >       assert duration < limit\r\n[   79s] E       assert datetime.timedelta(microseconds=184000) < datetime.timedelta(microseconds=100000)\r\n\r\nI suppose the test shoudl be skipped on 32bit platform with acceptance of its slowness :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/157", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/157/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/157/events", "html_url": "https://github.com/jaraco/path/issues/157", "id": 369776682, "node_id": "MDU6SXNzdWUzNjk3NzY2ODI=", "number": 157, "title": "Integrated support for zip files", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3596319, "node_id": "MDU6TGFiZWwzNTk2MzE5", "url": "https://api.github.com/repos/jaraco/path/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 1460794497, "node_id": "MDU6TGFiZWwxNDYwNzk0NDk3", "url": "https://api.github.com/repos/jaraco/path/labels/help%20wanted", "name": "help wanted", "color": "00DD00", "default": true, "description": ""}, {"id": 3596322, "node_id": "MDU6TGFiZWwzNTk2MzIy", "url": "https://api.github.com/repos/jaraco/path/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-13T07:29:18Z", "updated_at": "2020-05-24T08:38:58Z", "closed_at": "2019-11-29T16:25:09Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I'd like to devise a solution to make it trivially easy to re-use patterns in the path module for zip files, such that methods like .open() and .listdir() can be used to traverse zip files within a filesystem.\r\n\r\nFor illustration, consider this tree:\r\n\r\n```\r\ndraft $ tree\r\n.\r\n\u251c\u2500\u2500 a\r\n\u2502   \u2514\u2500\u2500 bar.txt\r\n\u251c\u2500\u2500 b\r\n\u2502   \u2514\u2500\u2500 baz.txt\r\n\u2514\u2500\u2500 foo.txt\r\n\r\n2 directories, 3 files\r\ndraft $ zip -r b b\r\n  adding: b/ (stored 0%)\r\n  adding: b/baz.txt (stored 0%)\r\ndraft $ rm -r b\r\ndraft $ tree\r\n.\r\n\u251c\u2500\u2500 a\r\n\u2502   \u2514\u2500\u2500 bar.txt\r\n\u251c\u2500\u2500 b.zip\r\n\u2514\u2500\u2500 foo.txt\r\n\r\n1 directory, 3 files\r\n```\r\n\r\nI'd like for one to be able to use path.py thus:\r\n\r\n```\r\n>>>  path = ZipPath('.')\r\n>>> (path / 'a').listdir()\r\n['./a/bar.txt']\r\n>>> (path / 'b.zip').listdir()\r\n['./b.zip/baz.txt']\r\n>>> (path / 'b.zip' / 'baz.txt').open()\r\n<file handle>\r\n```\r\n\r\nAs you can see, although a is a directory and b.zip is a zipfile, they both act as directories. I would expect `walk` to behave similarly:\r\n\r\n```\r\n>>> list(path.walk())\r\n['./foo.txt', './a', './a/bar.txt', './b.zip', './b.zip/baz.txt']\r\n```\r\n\r\nI would expect paths inside an zip file to keep a reference to the container and archive:\r\n\r\n```\r\n>>> b = path / 'b.zip'\r\n>>> b.container is b\r\nTrue\r\n>>> (b / 'baz.txt').container is b\r\nTrue\r\n>>> b.archive\r\nZipFile('./b.zip')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/155", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/155/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/155/events", "html_url": "https://github.com/jaraco/path/issues/155", "id": 365558200, "node_id": "MDU6SXNzdWUzNjU1NTgyMDA=", "number": 155, "title": "pip install from wheel fails on python 2.7", "user": {"login": "stephenboulet", "id": 10341534, "node_id": "MDQ6VXNlcjEwMzQxNTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10341534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stephenboulet", "html_url": "https://github.com/stephenboulet", "followers_url": "https://api.github.com/users/stephenboulet/followers", "following_url": "https://api.github.com/users/stephenboulet/following{/other_user}", "gists_url": "https://api.github.com/users/stephenboulet/gists{/gist_id}", "starred_url": "https://api.github.com/users/stephenboulet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stephenboulet/subscriptions", "organizations_url": "https://api.github.com/users/stephenboulet/orgs", "repos_url": "https://api.github.com/users/stephenboulet/repos", "events_url": "https://api.github.com/users/stephenboulet/events{/privacy}", "received_events_url": "https://api.github.com/users/stephenboulet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-01T17:14:13Z", "updated_at": "2018-10-01T19:01:02Z", "closed_at": "2018-10-01T19:00:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Should this not work? The install computer has no internet connection. TIA.\r\n\r\nC:\\wheels>pip install path.py-11.4.1-py2.py3-none-any.whl\r\n\r\nProcessing c:\\wheels\\path.py-11.4.1-py2.py3-none-any.whl\r\nCollecting importlib-metadata>=0.5 (from path.py==11.4.1)\r\n  Retrying (Retry(total=4, connect=None, read=None, redirect=None)) after connection broken by 'NewConnectionError('<pip._vendor.requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x05C0D590>: Failed to establish a new connection: [Errno 10061] No connection could be made because the target machine actively refused it',)': /simple/importlib-metadata/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/154", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/154/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/154/events", "html_url": "https://github.com/jaraco/path/issues/154", "id": 365112590, "node_id": "MDU6SXNzdWUzNjUxMTI1OTA=", "number": 154, "title": "Develop a robust, flexible walk implementation", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-29T08:47:43Z", "updated_at": "2020-05-24T08:59:03Z", "closed_at": "2020-05-24T08:59:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In #152, @thombashi reports a failed expectation - that it should be possible not to follow symlinks when walking a directory tree. Investigating, we learn that not following symlinks is the default behavior for `os.walk`, which may be a good model to follow.\r\n\r\nBut in exploring the prospect, I wonder if there's perhaps an even more simple yet extensible design, something in which the caller can more generally customize the filtering and traversal behavior of the walk, something like:\r\n\r\n```\r\ndef walk(self, include, traverse, errors):\r\n    ...\r\n```\r\n\r\nI'd also like to explore the possibility of using yield expressions to possibly eliminate the need for a traverse parameter.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/153", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/153/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/153/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/153/events", "html_url": "https://github.com/jaraco/path/issues/153", "id": 365105055, "node_id": "MDU6SXNzdWUzNjUxMDUwNTU=", "number": 153, "title": "test_import_time fails with Python 2.7", "user": {"login": "felixonmars", "id": 1006477, "node_id": "MDQ6VXNlcjEwMDY0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1006477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixonmars", "html_url": "https://github.com/felixonmars", "followers_url": "https://api.github.com/users/felixonmars/followers", "following_url": "https://api.github.com/users/felixonmars/following{/other_user}", "gists_url": "https://api.github.com/users/felixonmars/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixonmars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixonmars/subscriptions", "organizations_url": "https://api.github.com/users/felixonmars/orgs", "repos_url": "https://api.github.com/users/felixonmars/repos", "events_url": "https://api.github.com/users/felixonmars/events{/privacy}", "received_events_url": "https://api.github.com/users/felixonmars/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-09-29T07:02:20Z", "updated_at": "2019-06-02T01:36:25Z", "closed_at": "2018-09-29T08:27:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "It can very hardly pass before (about 1/4), but since release 11.4.0 (and maybe because of backports.os?) it cannot pass here after dozens of retries. It passes very stably on Python 3.7 on the same machine, though.\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n____________________ TestPerformance.test_import_time[Path] ____________________\r\n\r\nself = <test_path.TestPerformance instance at 0x7f104f62dd88>\r\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f104f388b50>\r\n\r\n    def test_import_time(self, monkeypatch):\r\n        \"\"\"\r\n            Import of path.py should take less than 100ms.\r\n\r\n            Run tests in a subprocess to isolate from test suite overhead.\r\n            \"\"\"\r\n        cmd = [\r\n            sys.executable,\r\n            '-m', 'timeit',\r\n            '-n', '1',\r\n            '-r', '1',\r\n            'import path',\r\n        ]\r\n        res = subprocess.check_output(cmd, universal_newlines=True)\r\n        dur = re.search(r'(\\d+) msec per loop', res).group(1)\r\n        limit = datetime.timedelta(milliseconds=100)\r\n        duration = datetime.timedelta(milliseconds=int(dur))\r\n>       assert duration < limit\r\nE       assert datetime.timedelta(0, 0, 233000) < datetime.timedelta(0, 0, 100000)\r\n\r\ntest_path.py:257: AssertionError\r\n__________________ TestPerformance.test_import_time[FastPath] __________________\r\n\r\nself = <test_path.TestPerformance instance at 0x7f104f62bea8>\r\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f104f291fd0>\r\n\r\n    def test_import_time(self, monkeypatch):\r\n        \"\"\"\r\n            Import of path.py should take less than 100ms.\r\n\r\n            Run tests in a subprocess to isolate from test suite overhead.\r\n            \"\"\"\r\n        cmd = [\r\n            sys.executable,\r\n            '-m', 'timeit',\r\n            '-n', '1',\r\n            '-r', '1',\r\n            'import path',\r\n        ]\r\n        res = subprocess.check_output(cmd, universal_newlines=True)\r\n        dur = re.search(r'(\\d+) msec per loop', res).group(1)\r\n        limit = datetime.timedelta(milliseconds=100)\r\n        duration = datetime.timedelta(milliseconds=int(dur))\r\n>       assert duration < limit\r\nE       assert datetime.timedelta(0, 0, 214000) < datetime.timedelta(0, 0, 100000)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/151", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/151/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/151/events", "html_url": "https://github.com/jaraco/path/issues/151", "id": 361418468, "node_id": "MDU6SXNzdWUzNjE0MTg0Njg=", "number": 151, "title": "DeprecationWarning: 'U' mode is deprecated with Path.lines() and Python3", "user": {"login": "SethMMorton", "id": 1596189, "node_id": "MDQ6VXNlcjE1OTYxODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1596189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SethMMorton", "html_url": "https://github.com/SethMMorton", "followers_url": "https://api.github.com/users/SethMMorton/followers", "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}", "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}", "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions", "organizations_url": "https://api.github.com/users/SethMMorton/orgs", "repos_url": "https://api.github.com/users/SethMMorton/repos", "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}", "received_events_url": "https://api.github.com/users/SethMMorton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-09-18T18:02:10Z", "updated_at": "2018-09-18T21:16:37Z", "closed_at": "2018-09-18T19:48:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When I use `path.Path(file).lines()` on Python3 with deprecation warnings turned on I see\r\n\r\n```\r\nDeprecationWarning: 'U' mode is deprecated\r\n```\r\n\r\n(I never noticed before because I don't typically run with those turned on, but in the latest PyTest versions it is turned on by default)\r\n\r\nAn easy fix would be to simply remove the `'U'` option to `open` in `.lines()` post issue #148 being complete.  If a fix is needed before then, I suppose this could work:\r\n\r\n```python\r\n        if encoding is None and retain:\r\n            args = ['U'] if PY2 else []\r\n            with self.open(*args) as f:\r\n                return f.readlines()\r\n        else:\r\n            return self.text(encoding, errors).splitlines(retain)\r\n```\r\n\r\nI can submit a PR desired.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/150", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/150/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/150/events", "html_url": "https://github.com/jaraco/path/issues/150", "id": 361000182, "node_id": "MDU6SXNzdWUzNjEwMDAxODI=", "number": 150, "title": "path.__version__ == 'unknown' on Python 3.4 and 3.5", "user": {"login": "userzimmermann", "id": 2088633, "node_id": "MDQ6VXNlcjIwODg2MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2088633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/userzimmermann", "html_url": "https://github.com/userzimmermann", "followers_url": "https://api.github.com/users/userzimmermann/followers", "following_url": "https://api.github.com/users/userzimmermann/following{/other_user}", "gists_url": "https://api.github.com/users/userzimmermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/userzimmermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/userzimmermann/subscriptions", "organizations_url": "https://api.github.com/users/userzimmermann/orgs", "repos_url": "https://api.github.com/users/userzimmermann/repos", "events_url": "https://api.github.com/users/userzimmermann/events{/privacy}", "received_events_url": "https://api.github.com/users/userzimmermann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-17T19:00:56Z", "updated_at": "2018-09-19T02:06:46Z", "closed_at": "2018-09-19T02:06:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\n>>> import path      \r\n>>> path\r\n<module 'path' from 'c:\\\\tools\\\\miniconda3\\\\envs\\\\moon\\\\lib\\\\site-packages\\\\path.py'>                                            \r\n>>> path.__version__                                             \r\n'unknown'                                                              \r\n>>> from pkg_resources import get_distribution                                                      \r\n>>> get_distribution('path.py')\r\npath.py 11.2.0 (c:\\tools\\miniconda3\\envs\\moon\\lib\\site-packages)\r\n```\r\n\r\nSame on Windows and Linux. With Python 2.7 and 3.6+ `path.__version__` is correct", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/148", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/148/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/148/events", "html_url": "https://github.com/jaraco/path/issues/148", "id": 360558269, "node_id": "MDU6SXNzdWUzNjA1NTgyNjk=", "number": 148, "title": "Drop support for Python 2", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-15T17:14:05Z", "updated_at": "2019-04-12T12:43:25Z", "closed_at": "2019-04-12T12:43:25Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Given the now robust support for designating Python versions in package metadata and installer tools, I'm confident we can drop support for Python 2 without much impact for users on that platform. Soon, I'll cut a backward-incompatible release dropping this support... and leave the previous major release as a long term maintenance release.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/146", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/146/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/146/events", "html_url": "https://github.com/jaraco/path/issues/146", "id": 356659819, "node_id": "MDU6SXNzdWUzNTY2NTk4MTk=", "number": 146, "title": "Use of pkg_resources greatly adds to startup time", "user": {"login": "SethMMorton", "id": 1596189, "node_id": "MDQ6VXNlcjE1OTYxODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1596189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SethMMorton", "html_url": "https://github.com/SethMMorton", "followers_url": "https://api.github.com/users/SethMMorton/followers", "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}", "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}", "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions", "organizations_url": "https://api.github.com/users/SethMMorton/orgs", "repos_url": "https://api.github.com/users/SethMMorton/repos", "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}", "received_events_url": "https://api.github.com/users/SethMMorton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-09-04T05:40:52Z", "updated_at": "2018-09-15T12:42:39Z", "closed_at": "2018-09-15T12:42:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I would like to start by saying I genuinely love `path.py` and will continue using it no matter the outcome of filing this issue.  This is going to be yet another \"`pkg_resources` is slow\" issue... sorry.  Rather than provide new evidence to this, I will simply refer to pypa/setuptools#510 and the links/discussions therein.\r\n\r\nWhy do I think this is a big enough problem to file an issue? `path.py` is the type of module that could potentially be used in every script or command-line tool (since interacting with the filesystem is almost always unavoidable), so if a user/organization decides to use it as their primary filesystem abstraction then all of their scripts incur a startup penalty. This penalty is non-trivial - importing `path.py` makes command-line tool startup go from imperceptible to very noticeable where I work (we have many packages installed in `site-packages`). To solve this, I either have to\r\n\r\n- Create a local fork of `path.py` that removes the call to `pkg_resources` that my organization can use (instead of the version on PyPI). Not desirable, since they will become quickly out-of-sync.\r\n- Copy the `path.py` source file into the source code for the command-line tool and manually remove the call to `pkg_resources` (undesirable for all the reasons above).\r\n- Use the following hack when importing `path.py`\r\n\r\n```python\r\nimport sys\r\nsys.modules['pkg_resources'] = None\r\nimport path\r\ndel sys.modules['pkg_resources']\r\n```\r\n\r\nNone of these are desirable.\r\n\r\nI fully understand why `path.py` is using `setuptools_scm` (and thus `pkg_resources`) - there should only be one source of \"truth\" for the version, and the VCS version is an excellent way to define truth. \r\nBut perhaps there is another way?\r\n\r\n- There is a tool [`bumpversion`](https://github.com/c4urself/bump2version) that can be used to control the version of a package, and it can be used to also create the tags in your VCS. This could be used as the source for version \"truth\", and can remove the reliance on `setuptools_scm`.\r\n- There may be ways to make `__version__` a module property so that `pkg_resources` need only be imported if `__version__` is explicitly requested. [This seems rather hacky, though](https://stackoverflow.com/q/880530/1399279).\r\n\r\nMy purpose in posting this is not to complain, but hopefully to start a constructive discussion that will result in `path.py` imports being as fast as something like [`six`](https://github.com/benjaminp/six). No matter *how* this is resolved, I think it would be a big win for `path.py` if import time is reduced.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/143", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/143/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/143/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/143/events", "html_url": "https://github.com/jaraco/path/issues/143", "id": 354910218, "node_id": "MDU6SXNzdWUzNTQ5MTAyMTg=", "number": 143, "title": "Add a Path.iglob method?", "user": {"login": "SethMMorton", "id": 1596189, "node_id": "MDQ6VXNlcjE1OTYxODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1596189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SethMMorton", "html_url": "https://github.com/SethMMorton", "followers_url": "https://api.github.com/users/SethMMorton/followers", "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}", "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}", "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions", "organizations_url": "https://api.github.com/users/SethMMorton/orgs", "repos_url": "https://api.github.com/users/SethMMorton/repos", "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}", "received_events_url": "https://api.github.com/users/SethMMorton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-28T21:25:48Z", "updated_at": "2018-09-04T12:02:29Z", "closed_at": "2018-09-04T12:02:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a [`Path.glob`](https://github.com/jaraco/path.py/blob/f63d25af52a09cfc535c3a29f47cbb99acc9ff0c/path.py#L743) method, but there have been times where I wished I could use the iterator version from [`glob.iglob`](https://docs.python.org/3/library/glob.html#glob.iglob) with `path.py`.  Would it be possible to add an `iglob` method to `Path`, or conversly add a flag to `Path.glob` that uses `glob.iglob` instead of `glob.glob` under the hood?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/142", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/142/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/142/events", "html_url": "https://github.com/jaraco/path/issues/142", "id": 354908789, "node_id": "MDU6SXNzdWUzNTQ5MDg3ODk=", "number": 142, "title": "Add tempdir as part of the public API?", "user": {"login": "SethMMorton", "id": 1596189, "node_id": "MDQ6VXNlcjE1OTYxODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1596189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SethMMorton", "html_url": "https://github.com/SethMMorton", "followers_url": "https://api.github.com/users/SethMMorton/followers", "following_url": "https://api.github.com/users/SethMMorton/following{/other_user}", "gists_url": "https://api.github.com/users/SethMMorton/gists{/gist_id}", "starred_url": "https://api.github.com/users/SethMMorton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SethMMorton/subscriptions", "organizations_url": "https://api.github.com/users/SethMMorton/orgs", "repos_url": "https://api.github.com/users/SethMMorton/repos", "events_url": "https://api.github.com/users/SethMMorton/events{/privacy}", "received_events_url": "https://api.github.com/users/SethMMorton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-28T21:21:08Z", "updated_at": "2018-09-04T12:03:25Z", "closed_at": "2018-09-04T12:03:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The [`tempdir`](https://github.com/jaraco/path.py/blob/f63d25af52a09cfc535c3a29f47cbb99acc9ff0c/path.py#L1632) object is pretty useful, but it does not appear in the [API documentation](https://pathpy.readthedocs.io/en/latest/api.html).   I wonder if there a specific reason it is not advertised...  if not, I think it would be a very nice feature to add to the `path.py` toolbelt.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/141", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/141/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/141/events", "html_url": "https://github.com/jaraco/path/issues/141", "id": 348663630, "node_id": "MDU6SXNzdWUzNDg2NjM2MzA=", "number": 141, "title": "Don't use distutils at runtime", "user": {"login": "SnarkBoojum", "id": 4647429, "node_id": "MDQ6VXNlcjQ2NDc0Mjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/4647429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SnarkBoojum", "html_url": "https://github.com/SnarkBoojum", "followers_url": "https://api.github.com/users/SnarkBoojum/followers", "following_url": "https://api.github.com/users/SnarkBoojum/following{/other_user}", "gists_url": "https://api.github.com/users/SnarkBoojum/gists{/gist_id}", "starred_url": "https://api.github.com/users/SnarkBoojum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SnarkBoojum/subscriptions", "organizations_url": "https://api.github.com/users/SnarkBoojum/orgs", "repos_url": "https://api.github.com/users/SnarkBoojum/repos", "events_url": "https://api.github.com/users/SnarkBoojum/events{/privacy}", "received_events_url": "https://api.github.com/users/SnarkBoojum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-08T10:18:43Z", "updated_at": "2018-09-28T08:44:16Z", "closed_at": "2018-09-28T08:44:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nthe following patch has been proposed in Debian.\r\n[avoid-distutils.diff.txt](https://github.com/jaraco/path.py/files/2269874/avoid-distutils.diff.txt)\r\n\r\nIt might be interesting upstream too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/137", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/137/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/137/events", "html_url": "https://github.com/jaraco/path/issues/137", "id": 314612954, "node_id": "MDU6SXNzdWUzMTQ2MTI5NTQ=", "number": 137, "title": "\"pip install path.py\" failure", "user": {"login": "buemi", "id": 25685228, "node_id": "MDQ6VXNlcjI1Njg1MjI4", "avatar_url": "https://avatars1.githubusercontent.com/u/25685228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buemi", "html_url": "https://github.com/buemi", "followers_url": "https://api.github.com/users/buemi/followers", "following_url": "https://api.github.com/users/buemi/following{/other_user}", "gists_url": "https://api.github.com/users/buemi/gists{/gist_id}", "starred_url": "https://api.github.com/users/buemi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buemi/subscriptions", "organizations_url": "https://api.github.com/users/buemi/orgs", "repos_url": "https://api.github.com/users/buemi/repos", "events_url": "https://api.github.com/users/buemi/events{/privacy}", "received_events_url": "https://api.github.com/users/buemi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-16T11:38:31Z", "updated_at": "2018-04-16T12:17:57Z", "closed_at": "2018-04-16T12:10:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, i have the following output when I try to instal the package (it seems that pip doesn't work properly)\r\nThank you in advance for any suggestion.\r\n\r\n$ pip install path.py\r\n\r\nCollecting path.py\r\nException:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python2.7/dist-packages/pip/basecommand.py\", line 209, in main\r\n    status = self.run(options, args)\r\n  File \"/usr/lib/python2.7/dist-packages/pip/commands/install.py\", line 328, in run\r\n    wb.build(autobuilding=True)\r\n  File \"/usr/lib/python2.7/dist-packages/pip/wheel.py\", line 748, in build\r\n    self.requirement_set.prepare_files(self.finder)\r\n  File \"/usr/lib/python2.7/dist-packages/pip/req/req_set.py\", line 360, in prepare_files\r\n    ignore_dependencies=self.ignore_dependencies))\r\n  File \"/usr/lib/python2.7/dist-packages/pip/req/req_set.py\", line 512, in _prepare_file\r\n    finder, self.upgrade, require_hashes)\r\n  File \"/usr/lib/python2.7/dist-packages/pip/req/req_install.py\", line 273, in populate_link\r\n    self.link = finder.find_requirement(self, upgrade)\r\n  File \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 442, in find_requirement\r\n    all_candidates = self.find_all_candidates(req.name)\r\n  File \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 400, in find_all_candidates\r\n    for page in self._get_pages(url_locations, project_name):\r\n  File \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 545, in _get_pages\r\n    page = self._get_page(location)\r\n  File \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 648, in _get_page\r\n    return HTMLPage.get_page(link, session=self.session)\r\n  File \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 757, in get_page\r\n    \"Cache-Control\": \"max-age=600\",\r\n  File \"/usr/share/python-wheels/requests-2.9.1-py2.py3-none-any.whl/requests/sessions.py\", line 480, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"/usr/lib/python2.7/dist-packages/pip/download.py\", line 378, in request\r\n    return super(PipSession, self).request(method, url, *args, **kwargs)\r\n  File \"/usr/share/python-wheels/requests-2.9.1-py2.py3-none-any.whl/requests/sessions.py\", line 468, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/usr/share/python-wheels/requests-2.9.1-py2.py3-none-any.whl/requests/sessions.py\", line 576, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/usr/share/python-wheels/CacheControl-0.11.5-py2.py3-none-any.whl/cachecontrol/adapter.py\", line 46, in send\r\n    resp = super(CacheControlAdapter, self).send(request, **kw)\r\n  File \"/usr/share/python-wheels/requests-2.9.1-py2.py3-none-any.whl/requests/adapters.py\", line 376, in send\r\n    timeout=timeout\r\n  File \"/usr/share/python-wheels/urllib3-1.13.1-py2.py3-none-any.whl/urllib3/connectionpool.py\", line 610, in urlopen\r\n    _stacktrace=sys.exc_info()[2])\r\n  File \"/usr/share/python-wheels/urllib3-1.13.1-py2.py3-none-any.whl/urllib3/util/retry.py\", line 228, in increment\r\n    total -= 1\r\nTypeError: unsupported operand type(s) for -=: 'Retry' and 'int'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/136", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/136/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/136/events", "html_url": "https://github.com/jaraco/path/issues/136", "id": 299000114, "node_id": "MDU6SXNzdWUyOTkwMDAxMTQ=", "number": 136, "title": "TestScratchDir.test_touch[*] fails on FreeBSD", "user": {"login": "mgorny", "id": 110765, "node_id": "MDQ6VXNlcjExMDc2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/110765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgorny", "html_url": "https://github.com/mgorny", "followers_url": "https://api.github.com/users/mgorny/followers", "following_url": "https://api.github.com/users/mgorny/following{/other_user}", "gists_url": "https://api.github.com/users/mgorny/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgorny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgorny/subscriptions", "organizations_url": "https://api.github.com/users/mgorny/orgs", "repos_url": "https://api.github.com/users/mgorny/repos", "events_url": "https://api.github.com/users/mgorny/events{/privacy}", "received_events_url": "https://api.github.com/users/mgorny/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-21T14:52:39Z", "updated_at": "2018-03-26T18:23:50Z", "closed_at": "2018-03-26T18:23:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n==================================================================== FAILURES =====================================================================\r\n_________________________________________________________ TestScratchDir.test_touch[Path] _________________________________________________________\r\n\r\nself = <test_path.TestScratchDir object at 0x807069e80>\r\ntmpdir = local('/var/tmp/portage/dev-python/path-py-10.3.1/temp/pytest-of-portage/pytest-3/test_touch_Path_1')\r\n\r\n    def test_touch(self, tmpdir):\r\n        # NOTE: This test takes a long time to run (~10 seconds).\r\n        # It sleeps several seconds because on Windows, the resolution\r\n        # of a file's mtime and ctime is about 2 seconds.\r\n        #\r\n        # atime isn't tested because on Windows the resolution of atime\r\n        # is something like 24 hours.\r\n    \r\n        threshold = 1\r\n    \r\n        d = Path(tmpdir)\r\n        f = d / 'test.txt'\r\n        t0 = time.time() - threshold\r\n        f.touch()\r\n        t1 = time.time() + threshold\r\n    \r\n        assert f.exists()\r\n        assert f.isfile()\r\n        assert f.size == 0\r\n        assert t0 <= f.mtime <= t1\r\n        if hasattr(os.path, 'getctime'):\r\n            ct = f.ctime\r\n            assert t0 <= ct <= t1\r\n    \r\n        time.sleep(threshold*2)\r\n        fobj = open(f, 'ab')\r\n        fobj.write('some bytes'.encode('utf-8'))\r\n        fobj.close()\r\n    \r\n        time.sleep(threshold*2)\r\n        t2 = time.time() - threshold\r\n        f.touch()\r\n        t3 = time.time() + threshold\r\n    \r\n        assert t0 <= t1 < t2 <= t3  # sanity check\r\n    \r\n        assert f.exists()\r\n        assert f.isfile()\r\n        assert f.size == 10\r\n        assert t2 <= f.mtime <= t3\r\n        if hasattr(os.path, 'getctime'):\r\n            ct2 = f.ctime\r\n            if os.name == 'nt':\r\n                # On Windows, \"ctime\" is CREATION time\r\n                assert ct == ct2\r\n                assert ct2 < t2\r\n            else:\r\n                # On other systems, it might be the CHANGE time\r\n                # (especially on Unix, time of inode changes)\r\n>               assert ct == ct2 or ct2 == f.mtime\r\nE               AssertionError: assert (1519224690.72502 == 1519224694.917741 or 1519224694.917741 == 1519224694.917714)\r\nE                +  where 1519224694.917714 = Path('/var/tmp/portage/dev-python/path-py-10.3.1/temp/pytest-of-portage/pytest-3/test_touch_Path_1/test.txt').mtime\r\n\r\ntest_path.py:321: AssertionError\r\n_______________________________________________________ TestScratchDir.test_touch[FastPath] _______________________________________________________\r\n\r\nself = <test_path.TestScratchDir object at 0x8071716a0>\r\ntmpdir = local('/var/tmp/portage/dev-python/path-py-10.3.1/temp/pytest-of-portage/pytest-3/test_touch_FastPath_1')\r\n\r\n    def test_touch(self, tmpdir):\r\n        # NOTE: This test takes a long time to run (~10 seconds).\r\n        # It sleeps several seconds because on Windows, the resolution\r\n        # of a file's mtime and ctime is about 2 seconds.\r\n        #\r\n        # atime isn't tested because on Windows the resolution of atime\r\n        # is something like 24 hours.\r\n    \r\n        threshold = 1\r\n    \r\n        d = Path(tmpdir)\r\n        f = d / 'test.txt'\r\n        t0 = time.time() - threshold\r\n        f.touch()\r\n        t1 = time.time() + threshold\r\n    \r\n        assert f.exists()\r\n        assert f.isfile()\r\n        assert f.size == 0\r\n        assert t0 <= f.mtime <= t1\r\n        if hasattr(os.path, 'getctime'):\r\n            ct = f.ctime\r\n            assert t0 <= ct <= t1\r\n    \r\n        time.sleep(threshold*2)\r\n        fobj = open(f, 'ab')\r\n        fobj.write('some bytes'.encode('utf-8'))\r\n        fobj.close()\r\n    \r\n        time.sleep(threshold*2)\r\n        t2 = time.time() - threshold\r\n        f.touch()\r\n        t3 = time.time() + threshold\r\n    \r\n        assert t0 <= t1 < t2 <= t3  # sanity check\r\n    \r\n        assert f.exists()\r\n        assert f.isfile()\r\n        assert f.size == 10\r\n        assert t2 <= f.mtime <= t3\r\n        if hasattr(os.path, 'getctime'):\r\n            ct2 = f.ctime\r\n            if os.name == 'nt':\r\n                # On Windows, \"ctime\" is CREATION time\r\n                assert ct == ct2\r\n                assert ct2 < t2\r\n            else:\r\n                # On other systems, it might be the CHANGE time\r\n                # (especially on Unix, time of inode changes)\r\n>               assert ct == ct2 or ct2 == f.mtime\r\nE               AssertionError: assert (1519224694.975006 == 1519224699.010455 or 1519224699.010455 == 1519224699.010384)\r\nE                +  where 1519224699.010384 = FastPath('/var/tmp/portage/dev-python/path-py-10.3.1/temp/pytest-of-portage/pytest-3/test_touch_FastPath_1/test.txt').mtime\r\n\r\ntest_path.py:321: AssertionError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/133", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/133/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/133/events", "html_url": "https://github.com/jaraco/path/issues/133", "id": 271838283, "node_id": "MDU6SXNzdWUyNzE4MzgyODM=", "number": 133, "title": "test_listdir_other_encoding fails on Windows in Python 3", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-07T13:52:17Z", "updated_at": "2017-11-07T13:56:15Z", "closed_at": "2017-11-07T13:56:15Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In [this job](https://ci.appveyor.com/project/jaraco/path-py/build/34/job/d0nfbm25g70fd07f) and many others, the tests reveal that test_listdir_other_encoding is failing to create invalid filenames.\r\n\r\n```\r\ntox\r\npython create: C:\\projects\\path-py\\.tox\\python\r\npython develop-inst: C:\\projects\\path-py\r\npython installed: appdirs==1.4.3,collective.checkdocs==0.2,colorama==0.3.9,docutils==0.14,-e git+https://github.com/jaraco/path.py.git@889893927fe3de50a6d782210aaaa607638208c3#egg=path.py,py==1.4.34,Pygments==2.2.0,pytest==3.2.3,pytest-sugar==0.9.0,termcolor==1.1.0\r\npython runtests: PYTHONHASHSEED='698'\r\npython runtests: commands[0] | py.test\r\n============================= test session starts =============================\r\nplatform win32 -- Python 3.6.3, pytest-3.2.3, py-1.4.34, pluggy-0.4.0\r\nrootdir: C:\\projects\\path-py, inifile: pytest.ini\r\nplugins: sugar-0.9.0\r\ncollected 135 items\r\npath.py ...\r\ntest_path.py ............................................FF......................................................................................\r\n================================== FAILURES ===================================\r\n______________ TestScratchDir.test_listdir_other_encoding[Path] _______________\r\nself = <test_path.TestScratchDir object at 0x000000E8F1F59CC0>\r\ntmpdir = local('C:\\\\Users\\\\appveyor\\\\AppData\\\\Local\\\\Temp\\\\1\\\\pytest-0\\\\test_listdir_other_encoding_Pa0')\r\n    @pytest.mark.xfail(\r\n        platform.system() == 'Linux' and path.PY2,\r\n        reason=\"Can't decode bytes in FS. See #121\",\r\n    )\r\n    def test_listdir_other_encoding(self, tmpdir):\r\n        \"\"\"\r\n            Some filesystems allow non-character sequences in path names.\r\n            ``.listdir`` should still function in this case.\r\n            See issue #61 for details.\r\n            \"\"\"\r\n        assert Path(tmpdir).listdir() == []\r\n        tmpdir_bytes = str(tmpdir).encode('ascii')\r\n    \r\n        filename = 'r\\xe9\\xf1emi'.encode('latin-1')\r\n        pathname = os.path.join(tmpdir_bytes, filename)\r\n>       with open(pathname, 'wb'):\r\nE       UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 81: invalid continuation byte\r\ntest_path.py:380: UnicodeDecodeError\r\n____________ TestScratchDir.test_listdir_other_encoding[FastPath] _____________\r\nself = <test_path.TestScratchDir object at 0x000000E8F1F17D30>\r\ntmpdir = local('C:\\\\Users\\\\appveyor\\\\AppData\\\\Local\\\\Temp\\\\1\\\\pytest-0\\\\test_listdir_other_encoding_Fa0')\r\n    @pytest.mark.xfail(\r\n        platform.system() == 'Linux' and path.PY2,\r\n        reason=\"Can't decode bytes in FS. See #121\",\r\n    )\r\n    def test_listdir_other_encoding(self, tmpdir):\r\n        \"\"\"\r\n            Some filesystems allow non-character sequences in path names.\r\n            ``.listdir`` should still function in this case.\r\n            See issue #61 for details.\r\n            \"\"\"\r\n        assert Path(tmpdir).listdir() == []\r\n        tmpdir_bytes = str(tmpdir).encode('ascii')\r\n    \r\n        filename = 'r\\xe9\\xf1emi'.encode('latin-1')\r\n        pathname = os.path.join(tmpdir_bytes, filename)\r\n>       with open(pathname, 'wb'):\r\nE       UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 81: invalid continuation byte\r\ntest_path.py:380: UnicodeDecodeError\r\n==================== 2 failed, 133 passed in 8.78 seconds =====================\r\nERROR: InvocationError: 'C:\\\\projects\\\\path-py\\\\.tox\\\\python\\\\Scripts\\\\py.test.EXE'\r\n___________________________________ summary ___________________________________\r\nERROR:   python: commands failed\r\nCommand exited with code 1\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/132", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/132/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/132/events", "html_url": "https://github.com/jaraco/path/issues/132", "id": 271834109, "node_id": "MDU6SXNzdWUyNzE4MzQxMDk=", "number": 132, "title": "Tests fail on new macOS High Sierra (10.13)", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-07T13:38:25Z", "updated_at": "2017-11-07T13:48:16Z", "closed_at": "2017-11-07T13:48:16Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Beginning with macOS 10.13, two new test failures emerge:\r\n\r\n```\r\n$ tox -- -k '[Path]' \r\npython develop-inst-nodeps: /Users/jaraco/Dropbox/code/main/path.py\r\npython installed: appdirs==1.4.3,collective.checkdocs==0.2,docutils==0.14,packaging==16.8,-e git+gh://jaraco/path.py@9f3070058624b7305b59ff4c7adeae2aeecef565#egg=path.py,py==1.4.34,Pygments==2.2.0,pyparsing==2.2.0,pytest==3.2.3,pytest-sugar==0.9.0,six==1.11.0,termcolor==1.1.0\r\npython runtests: PYTHONHASHSEED='4226127528'\r\npython runtests: commands[0] | py.test -k [Path]\r\nTest session starts (platform: darwin, Python 3.6.3, pytest 3.2.3, pytest-sugar 0.9.0)\r\nrootdir: /Users/jaraco/Dropbox/code/main/path.py, inifile: pytest.ini\r\nplugins: sugar-0.9.0\r\n\r\n test_path.py \u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713                                                  30% \u2588\u2588\u2588       \r\n\r\n\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 TestScratchDir.test_touch[Path] \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\r\n\r\nself = <test_path.TestScratchDir object at 0x1056a6fd0>\r\ntmpdir = local('/private/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pytest-of-jaraco/pytest-6/test_touch_Path_1')\r\n\r\n    def test_touch(self, tmpdir):\r\n        # NOTE: This test takes a long time to run (~10 seconds).\r\n        # It sleeps several seconds because on Windows, the resolution\r\n        # of a file's mtime and ctime is about 2 seconds.\r\n        #\r\n        # atime isn't tested because on Windows the resolution of atime\r\n        # is something like 24 hours.\r\n    \r\n        threshold = 1\r\n    \r\n        d = Path(tmpdir)\r\n        f = d / 'test.txt'\r\n        t0 = time.time() - threshold\r\n        f.touch()\r\n        t1 = time.time() + threshold\r\n    \r\n        assert f.exists()\r\n        assert f.isfile()\r\n        assert f.size == 0\r\n        assert t0 <= f.mtime <= t1\r\n        if hasattr(os.path, 'getctime'):\r\n            ct = f.ctime\r\n            assert t0 <= ct <= t1\r\n    \r\n        time.sleep(threshold * 2)\r\n        fobj = open(f, 'ab')\r\n        fobj.write('some bytes'.encode('utf-8'))\r\n        fobj.close()\r\n    \r\n        time.sleep(threshold * 2)\r\n        t2 = time.time() - threshold\r\n        f.touch()\r\n        t3 = time.time() + threshold\r\n    \r\n        assert t0 <= t1 < t2 <= t3  # sanity check\r\n    \r\n        assert f.exists()\r\n        assert f.isfile()\r\n        assert f.size == 10\r\n        assert t2 <= f.mtime <= t3\r\n        if hasattr(os.path, 'getctime'):\r\n            ct2 = f.ctime\r\n            if os.name == 'nt':\r\n                # On Windows, \"ctime\" is CREATION time\r\n                assert ct == ct2\r\n                assert ct2 < t2\r\n            else:\r\n                # On other systems, it might be the CHANGE time\r\n                # (especially on Unix, time of inode changes)\r\n>               assert ct == ct2 or ct2 == f.mtime\r\nE               AssertionError: assert (1510061856.242866 == 1510061860.2463627 or 1510061860.2463627 == 1510061860.246353)\r\nE                +  where 1510061860.246353 = Path('/private/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pytest-of-jaraco/pytest-6/test_touch_Path_1/test.txt').mtime\r\n\r\ntest_path.py:321: AssertionError\r\n\r\n test_path.py \u2a2f\u2713                                                                    33% \u2588\u2588\u2588\u258d      \r\n\r\n\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 TestScratchDir.test_listdir_other_encoding[Path] \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\r\n\r\nself = <test_path.TestScratchDir object at 0x10588feb8>\r\ntmpdir = local('/private/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pytest-of-jaraco/pytest-6/test_listdir_other_encoding_Pa0')\r\n\r\n    @pytest.mark.xfail(\r\n        platform.system() == 'Linux' and path.PY2,\r\n        reason=\"Can't decode bytes in FS. See #121\",\r\n    )\r\n    def test_listdir_other_encoding(self, tmpdir):\r\n        \"\"\"\r\n            Some filesystems allow non-character sequences in path names.\r\n            ``.listdir`` should still function in this case.\r\n            See issue #61 for details.\r\n            \"\"\"\r\n        assert Path(tmpdir).listdir() == []\r\n        tmpdir_bytes = str(tmpdir).encode('ascii')\r\n    \r\n        filename = 'r\\xe9\\xf1emi'.encode('latin-1')\r\n        pathname = os.path.join(tmpdir_bytes, filename)\r\n>       with open(pathname, 'wb'):\r\nE       OSError: [Errno 92] Illegal byte sequence: b'/private/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/pytest-of-jaraco/pytest-6/test_listdir_other_encoding_Pa0/r\\xe9\\xf1emi'\r\n\r\ntest_path.py:380: OSError\r\n\r\n test_path.py \u2a2f\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713                         100% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n====================================== 69 tests deselected =======================================\r\n\r\nResults (4.74s):\r\n      64 passed\r\n       2 failed\r\n         - test_path.py:272 TestScratchDir.test_touch[Path]\r\n         - test_path.py:365 TestScratchDir.test_listdir_other_encoding[Path]\r\n      69 deselected\r\nERROR: InvocationError: '/Users/jaraco/Dropbox/code/main/path.py/.tox/python/bin/py.test -k [Path]'\r\n____________________________________________ summary _____________________________________________\r\nERROR:   python: commands failed\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/131", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/131/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/131/events", "html_url": "https://github.com/jaraco/path/issues/131", "id": 260011022, "node_id": "MDU6SXNzdWUyNjAwMTEwMjI=", "number": 131, "title": "pip3.5 install SimpleHTTPServer Collecting http.server   Could not find a version that satisfies the requirement http.server (from versions: ) No matching distribution found for http.server", "user": {"login": "talktoshishir", "id": 30610740, "node_id": "MDQ6VXNlcjMwNjEwNzQw", "avatar_url": "https://avatars0.githubusercontent.com/u/30610740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talktoshishir", "html_url": "https://github.com/talktoshishir", "followers_url": "https://api.github.com/users/talktoshishir/followers", "following_url": "https://api.github.com/users/talktoshishir/following{/other_user}", "gists_url": "https://api.github.com/users/talktoshishir/gists{/gist_id}", "starred_url": "https://api.github.com/users/talktoshishir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talktoshishir/subscriptions", "organizations_url": "https://api.github.com/users/talktoshishir/orgs", "repos_url": "https://api.github.com/users/talktoshishir/repos", "events_url": "https://api.github.com/users/talktoshishir/events{/privacy}", "received_events_url": "https://api.github.com/users/talktoshishir/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3596320, "node_id": "MDU6TGFiZWwzNTk2MzIw", "url": "https://api.github.com/repos/jaraco/path/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-23T14:18:06Z", "updated_at": "2017-09-23T15:52:17Z", "closed_at": "2017-09-23T15:52:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "pip3.5 -V\r\npip 9.0.1 from /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages (python 3.5)\r\nNeed some help here.\r\nMAC oS X 10.11.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/130", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/130/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/130/events", "html_url": "https://github.com/jaraco/path/issues/130", "id": 250279570, "node_id": "MDU6SXNzdWUyNTAyNzk1NzA=", "number": 130, "title": "Cannot walk path on Linux/Python 2 made of non-unicode/non-fs-decodable bytes ", "user": {"login": "pombredanne", "id": 675997, "node_id": "MDQ6VXNlcjY3NTk5Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/675997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pombredanne", "html_url": "https://github.com/pombredanne", "followers_url": "https://api.github.com/users/pombredanne/followers", "following_url": "https://api.github.com/users/pombredanne/following{/other_user}", "gists_url": "https://api.github.com/users/pombredanne/gists{/gist_id}", "starred_url": "https://api.github.com/users/pombredanne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pombredanne/subscriptions", "organizations_url": "https://api.github.com/users/pombredanne/orgs", "repos_url": "https://api.github.com/users/pombredanne/repos", "events_url": "https://api.github.com/users/pombredanne/events{/privacy}", "received_events_url": "https://api.github.com/users/pombredanne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-08-15T10:36:16Z", "updated_at": "2018-09-28T08:29:23Z", "closed_at": "2018-09-28T08:29:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "On Linux/Python 2/path.py 10.3.1 I am trying to `walkfiles()` a path that contains a file name which is raw bytes.  The specific of this path is that it is not in the fs.encoding (which is UTF-8) and therefore cannot be decoded to unicode as-is, unless I guess surrogate escape are used or something else.\r\n\r\nWith `os.walk` it works when the top is `bytes`, but fails if the top is `unicode`. \r\n\r\nWith `path.py` it fails both when using a `bytes` or `unicode` top input.\r\nYou can see the tests here: https://github.com/nexB/scancode-toolkit/pull/723/files#diff-ada144052a705a1e2fc3c96a033cc425R552\r\n\r\nAnd the test failures are visible here:\r\n- https://travis-ci.org/nexB/scancode-toolkit/jobs/264691364#L1786\r\n- https://travis-ci.org/nexB/scancode-toolkit/jobs/264691364#L1907\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/129", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/129/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/129/events", "html_url": "https://github.com/jaraco/path/issues/129", "id": 246449467, "node_id": "MDU6SXNzdWUyNDY0NDk0Njc=", "number": 129, "title": "Why is not `Path(\"test.txt\").parent.parent` a valid path?", "user": {"login": "Delgan", "id": 4193924, "node_id": "MDQ6VXNlcjQxOTM5MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4193924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Delgan", "html_url": "https://github.com/Delgan", "followers_url": "https://api.github.com/users/Delgan/followers", "following_url": "https://api.github.com/users/Delgan/following{/other_user}", "gists_url": "https://api.github.com/users/Delgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Delgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Delgan/subscriptions", "organizations_url": "https://api.github.com/users/Delgan/orgs", "repos_url": "https://api.github.com/users/Delgan/repos", "events_url": "https://api.github.com/users/Delgan/events{/privacy}", "received_events_url": "https://api.github.com/users/Delgan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2017-07-28T20:20:21Z", "updated_at": "2020-05-24T09:23:14Z", "closed_at": "2020-05-24T09:23:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nI love the concept of `path.py`, but this is the first time I use it and I am a bit disappointed.\r\n\r\nWhile working with relative paths, I was wondering why `Path(\"test.txt\").parent.parent` and `Path(\"test.txt\").parent` return both `\"\"` instead of  `\"../somefolder/\"` and `\".\"`.\r\n\r\nMy use case is very simple. The user gives me some string path where I need to create a file. So, I first need to create the folder where the file will be located.\r\n\r\n```python\r\nPath(\"test.txt\").parent.makedirs_p()\r\n```\r\n\r\nThis raises a `FileNotFoundError` because path `Path('')` does not exist.\r\n\r\nBy extension, I notice that `parent.parent` will unfortunately not return a relative path starting with `..`.\r\n\r\nI have the feeling that we miss the opportunity for a very useful feature here.\r\n\r\nDo you think this would make sense to implement this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/128", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/128/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/128/events", "html_url": "https://github.com/jaraco/path/issues/128", "id": 244454057, "node_id": "MDU6SXNzdWUyNDQ0NTQwNTc=", "number": 128, "title": "NameError: name 'basestring' is not defined", "user": {"login": "rcwchan", "id": 12518178, "node_id": "MDQ6VXNlcjEyNTE4MTc4", "avatar_url": "https://avatars1.githubusercontent.com/u/12518178?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcwchan", "html_url": "https://github.com/rcwchan", "followers_url": "https://api.github.com/users/rcwchan/followers", "following_url": "https://api.github.com/users/rcwchan/following{/other_user}", "gists_url": "https://api.github.com/users/rcwchan/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcwchan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcwchan/subscriptions", "organizations_url": "https://api.github.com/users/rcwchan/orgs", "repos_url": "https://api.github.com/users/rcwchan/repos", "events_url": "https://api.github.com/users/rcwchan/events{/privacy}", "received_events_url": "https://api.github.com/users/rcwchan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3596320, "node_id": "MDU6TGFiZWwzNTk2MzIw", "url": "https://api.github.com/repos/jaraco/path/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-20T18:23:07Z", "updated_at": "2017-07-20T19:13:27Z", "closed_at": "2017-07-20T19:13:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI receive the following error from a function calling `_radd_` from `path` in Python 3.6.1:\r\n\r\n```\r\n  File \"/scratch/software/lib/python3.6/site-packages/path.py\", line 111, in __radd__\r\n    if isinstance(other, basestring):\r\nNameError: name 'basestring' is not defined\r\n\r\n```\r\n\r\nAfter taking a look at the path.py source, it appears `basestring` is not imported from `past.builtins`--should that be the case?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/126", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/126/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/126/events", "html_url": "https://github.com/jaraco/path/issues/126", "id": 222014870, "node_id": "MDU6SXNzdWUyMjIwMTQ4NzA=", "number": 126, "title": "TestMergeTree tests failing on Windows on Python 2.7", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-16T15:02:34Z", "updated_at": "2017-04-16T15:19:20Z", "closed_at": "2017-04-16T15:19:20Z", "author_association": "OWNER", "active_lock_reason": null, "body": "See [this appveyor run](https://ci.appveyor.com/project/jaraco/path-py/build/job/ppb58ehbh4w976fn) for details.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/125", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/125/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/125/events", "html_url": "https://github.com/jaraco/path/issues/125", "id": 222012350, "node_id": "MDU6SXNzdWUyMjIwMTIzNTA=", "number": 125, "title": "tests failing on Windows", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-16T14:11:58Z", "updated_at": "2017-04-16T14:18:17Z", "closed_at": "2017-04-16T14:18:17Z", "author_association": "OWNER", "active_lock_reason": null, "body": "After adding appveyor support, it appears [a test is failing](https://ci.appveyor.com/project/jaraco/path-py/build/1.0.2).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/124", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/124/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/124/events", "html_url": "https://github.com/jaraco/path/issues/124", "id": 221757270, "node_id": "MDU6SXNzdWUyMjE3NTcyNzA=", "number": 124, "title": ".rmdir_p not catch error FileNotFoundError", "user": {"login": "daassh", "id": 13551272, "node_id": "MDQ6VXNlcjEzNTUxMjcy", "avatar_url": "https://avatars2.githubusercontent.com/u/13551272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daassh", "html_url": "https://github.com/daassh", "followers_url": "https://api.github.com/users/daassh/followers", "following_url": "https://api.github.com/users/daassh/following{/other_user}", "gists_url": "https://api.github.com/users/daassh/gists{/gist_id}", "starred_url": "https://api.github.com/users/daassh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daassh/subscriptions", "organizations_url": "https://api.github.com/users/daassh/orgs", "repos_url": "https://api.github.com/users/daassh/repos", "events_url": "https://api.github.com/users/daassh/events{/privacy}", "received_events_url": "https://api.github.com/users/daassh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-14T07:21:34Z", "updated_at": "2017-04-18T02:58:14Z", "closed_at": "2017-04-18T02:58:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "The description of method '.rmdir_p' in doc: \r\n_Like rmdir(), but does not raise an exception if the directory is not empty or **does not exist**._\r\nBut I try code as follow:\r\n```\r\nPath('path_to_not_exists').rmdir_p()\r\n```\r\nand got error\r\n```\r\nFileNotFoundError: [WinError 2]\r\n```\r\nI check the code and find https://github.com/jaraco/path.py/blob/master/path.py#L1234\uff0c maybe it should be:\r\n```\r\nif e.errno != errno.ENOTEMPTY and e.errno != errno.EEXIST and e.errno != errno.ENOENT:\r\n```\r\nmy ENV:\r\nos: windows 7 64bit\r\npython: 3.5.2 64bit\r\n\r\nthanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/123", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/123/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/123/events", "html_url": "https://github.com/jaraco/path/issues/123", "id": 202484416, "node_id": "MDU6SXNzdWUyMDI0ODQ0MTY=", "number": 123, "title": "Implement __fspath__", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-01-23T09:36:32Z", "updated_at": "2017-01-23T12:22:11Z", "closed_at": "2017-01-23T12:22:11Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The file system file protocol is the new blessed way to be \"file path compatible\" in Python:\r\n\r\nhttps://www.python.org/dev/peps/pep-0519/#call-fspath-off-of-the-instance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/122", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/122/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/122/events", "html_url": "https://github.com/jaraco/path/issues/122", "id": 198573785, "node_id": "MDU6SXNzdWUxOTg1NzM3ODU=", "number": 122, "title": "TestSpecialPaths.test_unix_paths_fallback fails when XDG_CONFIG_HOME is set in the calling environment", "user": {"login": "floppym", "id": 504287, "node_id": "MDQ6VXNlcjUwNDI4Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/504287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/floppym", "html_url": "https://github.com/floppym", "followers_url": "https://api.github.com/users/floppym/followers", "following_url": "https://api.github.com/users/floppym/following{/other_user}", "gists_url": "https://api.github.com/users/floppym/gists{/gist_id}", "starred_url": "https://api.github.com/users/floppym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/floppym/subscriptions", "organizations_url": "https://api.github.com/users/floppym/orgs", "repos_url": "https://api.github.com/users/floppym/repos", "events_url": "https://api.github.com/users/floppym/events{/privacy}", "received_events_url": "https://api.github.com/users/floppym/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-03T21:29:34Z", "updated_at": "2017-01-03T21:39:33Z", "closed_at": "2017-01-03T21:39:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "The test should probably explictly unset XDG_CONFIG_HOME rather than assume it is unset.\r\n```\r\nfloppym@naomi path.py % XDG_CONFIG_HOME=/fubar python3.5 -m pytest > test.log 2>&1\r\nfloppym@naomi path.py % cat test.log\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.5.2, pytest-3.0.5, py-1.4.31, pluggy-0.4.0\r\nrootdir: /home/floppym/src/path.py, inifile: pytest.ini\r\nplugins: timeout-1.2.0, pep8-1.0.6, cov-2.3.1\r\ncollected 67 items\r\n\r\npath.py ...\r\ntest_path.py .......................................................F........\r\n\r\n=================================== FAILURES ===================================\r\n__________________ TestSpecialPaths.test_unix_paths_fallback ___________________\r\n\r\nself = <test_path.TestSpecialPaths object at 0x7f9b022a9a90>\r\ntmpdir = local('/tmp/pytest-of-floppym/pytest-5/test_unix_paths_fallback0')\r\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f9b022a9320>\r\nfeign_linux = None\r\n\r\n    def test_unix_paths_fallback(self, tmpdir, monkeypatch, feign_linux):\r\n        \"Without XDG_CONFIG_HOME set, ~/.config should be used.\"\r\n        fake_home = tmpdir / '_home'\r\n        monkeypatch.setitem(os.environ, 'HOME', str(fake_home))\r\n        expected = str(tmpdir / '_home' / '.config')\r\n>       assert SpecialResolver(Path).user.config == expected\r\nE       assert Path('/fubar') == '/tmp/pytest-of-floppy...llback0/_home/.config'\r\nE         - /fubar\r\nE         + /tmp/pytest-of-floppym/pytest-5/test_unix_paths_fallback0/_home/.config\r\n\r\ntest_path.py:1031: AssertionError\r\n===================== 1 failed, 66 passed in 4.90 seconds ======================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/121", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/121/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/121/events", "html_url": "https://github.com/jaraco/path/issues/121", "id": 198368838, "node_id": "MDU6SXNzdWUxOTgzNjg4Mzg=", "number": 121, "title": "_always_unicode is unnecessary", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-02T18:36:22Z", "updated_at": "2017-01-02T18:52:41Z", "closed_at": "2017-01-02T18:52:41Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In reviewing #116, I'm suspicious that `Path._always_unicode` is unnecessary. The only place it's used is in wrapping the results from `os.listdir`, but `os.listdir` is always called with a `Path` object which is a `text_type` (unicode on Python 2 and Python 3), and [according to the docs](https://docs.python.org/2/library/os.html#os.listdir), the resulting paths will be Unicode if the input is Unicode, unless the pathname is undecodable, in which case the raw bytes are returned.\r\n\r\nI wonder how important it is for path.py to support this annoying use case, especially given the indication that the operation is [sometimes expensive](jaraco/path.py/pull/116#issuecomment-269924831).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/119", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/119/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/119/events", "html_url": "https://github.com/jaraco/path/issues/119", "id": 196147450, "node_id": "MDU6SXNzdWUxOTYxNDc0NTA=", "number": 119, "title": "Update documentation links on PyPI", "user": {"login": "edbrannin", "id": 121909, "node_id": "MDQ6VXNlcjEyMTkwOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/121909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edbrannin", "html_url": "https://github.com/edbrannin", "followers_url": "https://api.github.com/users/edbrannin/followers", "following_url": "https://api.github.com/users/edbrannin/following{/other_user}", "gists_url": "https://api.github.com/users/edbrannin/gists{/gist_id}", "starred_url": "https://api.github.com/users/edbrannin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edbrannin/subscriptions", "organizations_url": "https://api.github.com/users/edbrannin/orgs", "repos_url": "https://api.github.com/users/edbrannin/repos", "events_url": "https://api.github.com/users/edbrannin/events{/privacy}", "received_events_url": "https://api.github.com/users/edbrannin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-12-16T20:26:57Z", "updated_at": "2016-12-16T23:16:22Z", "closed_at": "2016-12-16T21:49:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [path.py page on PyPI](https://pypi.python.org/pypi/path.py#downloads) still links to the [now-absent documentation on Pythonhosted.org](http://pythonhosted.org/path.py/)\r\n\r\nIt would be nice if:\r\n1. The PyPI page pointed to https://pathpy.readthedocs.io/en/latest instead\r\n2. The Pythonhosted page had a link directing us to the new documentation location.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/118", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/118/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/118/events", "html_url": "https://github.com/jaraco/path/issues/118", "id": 190506015, "node_id": "MDU6SXNzdWUxOTA1MDYwMTU=", "number": 118, "title": "Documentation no longer hosted on PyPI", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-11-19T16:42:26Z", "updated_at": "2017-01-23T19:23:16Z", "closed_at": "2016-11-19T18:06:25Z", "author_association": "OWNER", "active_lock_reason": null, "body": "As PyPI is dropping support for documentation, I've removed the documentation from pythonhosted.org/path.py as the updated release process will not work with the old system and there's no replacement system... and I don't want stale docs on pythonhosted.org to confuse anybody.\r\n\r\nWhat we need is someone to configure the docs to be hosted elsewhere, but I don't have the time to do that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/117", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/117/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/117/events", "html_url": "https://github.com/jaraco/path/issues/117", "id": 190032156, "node_id": "MDU6SXNzdWUxOTAwMzIxNTY=", "number": 117, "title": "copytree \"The destination directory must not already exist.\"", "user": {"login": "Gurdil", "id": 8937083, "node_id": "MDQ6VXNlcjg5MzcwODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/8937083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gurdil", "html_url": "https://github.com/Gurdil", "followers_url": "https://api.github.com/users/Gurdil/followers", "following_url": "https://api.github.com/users/Gurdil/following{/other_user}", "gists_url": "https://api.github.com/users/Gurdil/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gurdil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gurdil/subscriptions", "organizations_url": "https://api.github.com/users/Gurdil/orgs", "repos_url": "https://api.github.com/users/Gurdil/repos", "events_url": "https://api.github.com/users/Gurdil/events{/privacy}", "received_events_url": "https://api.github.com/users/Gurdil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-17T12:22:05Z", "updated_at": "2017-01-02T21:43:58Z", "closed_at": "2017-01-02T21:43:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been a problem using copytree feature, I need to save regularly a result directory and \"The destination directory must not already exist.\" avoid doing it easily.\r\n\r\nBypassing example: \r\n```python\r\nfrom path import path\r\nfrom distutils.dir_util import copy_tree\r\n\r\ndirResult = path('C:\\result\\')\r\ndirSave = path('T:\\save\\')\r\n\r\nwhile True:\r\n    wait(60*10)\r\n    copy_tree(dirResult, dirSave)\r\n```\r\n\r\nDoes it seem acceptable to use the distutils copy_tree function by default in path.py?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/115", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/115/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/115/events", "html_url": "https://github.com/jaraco/path/issues/115", "id": 168182364, "node_id": "MDU6SXNzdWUxNjgxODIzNjQ=", "number": 115, "title": "Unnecessary performance penalties in .listdir()", "user": {"login": "nmaier", "id": 383665, "node_id": "MDQ6VXNlcjM4MzY2NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/383665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nmaier", "html_url": "https://github.com/nmaier", "followers_url": "https://api.github.com/users/nmaier/followers", "following_url": "https://api.github.com/users/nmaier/following{/other_user}", "gists_url": "https://api.github.com/users/nmaier/gists{/gist_id}", "starred_url": "https://api.github.com/users/nmaier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nmaier/subscriptions", "organizations_url": "https://api.github.com/users/nmaier/orgs", "repos_url": "https://api.github.com/users/nmaier/repos", "events_url": "https://api.github.com/users/nmaier/events{/privacy}", "received_events_url": "https://api.github.com/users/nmaier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-07-28T19:56:53Z", "updated_at": "2017-04-16T15:55:10Z", "closed_at": "2017-04-16T15:55:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I use path.py in various py3 applications that `.files()` or even `walkfiles()` a lot of directories and files... Thousands of  directories and hundreds of thousands of files.\nThe system has a slow CPU too (Atom SoC slow), so I noticed that a lot of time is spend within `.listdir` and/or `.walk*`, so I investigated.\n1. PY3 is penalized by calling `_always_unicode` for each file, although PY3 guarantees unicode already. Therefore `_always_unicode`should only be called at all when `not PY3`.\n2. empty (`None`) patterns aka the default will still try to do pattern matching in `listdir` by then defaulting `*` internally. This is aggravated by the `walk*` methods doing another round of pattern matching after that, but this time at least it's conditional on `pattern is not None`. Therefore pattern matching in `listdir` should onyl be carried out when the caller actually provided a pattern to match\n3. `.fnmatch`, which is also used by `listdir`/`walk*`\n   - always tries to get a `default_normcase` from `pattern` or the module. It should only do that when no `normcase` argument is provided.\n   - always applies the `normcase` to the pattern too. In the case of `listdir`/`walk*` this leads to `normcase`ing the same pattern once per item. Therefore `list`/`walk` should prepare the pattern once and avoid the additional `normcase` calls.\n\nOne script I tested, with a hackishly modified path.py to address 1. and 2., has a runtime reduction of over a minute or about 37% with a hot file system cache. But seeing that my use case is \"heavy\" and my system is \"light\", YMMV\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/114", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/114/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/114/events", "html_url": "https://github.com/jaraco/path/issues/114", "id": 157451833, "node_id": "MDU6SXNzdWUxNTc0NTE4MzM=", "number": 114, "title": "pip install fails to find a version to install", "user": {"login": "lixxu", "id": 264487, "node_id": "MDQ6VXNlcjI2NDQ4Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/264487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lixxu", "html_url": "https://github.com/lixxu", "followers_url": "https://api.github.com/users/lixxu/followers", "following_url": "https://api.github.com/users/lixxu/following{/other_user}", "gists_url": "https://api.github.com/users/lixxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/lixxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lixxu/subscriptions", "organizations_url": "https://api.github.com/users/lixxu/orgs", "repos_url": "https://api.github.com/users/lixxu/repos", "events_url": "https://api.github.com/users/lixxu/events{/privacy}", "received_events_url": "https://api.github.com/users/lixxu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-05-30T08:03:42Z", "updated_at": "2018-05-28T04:31:06Z", "closed_at": "2016-05-30T23:39:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Py version should not be specified as it's available for py2&3. \nIt causes below pip install error:\n\n```\n$ pip install path.py\nCollecting path.py\n  Could not find a version that satisfies the requirement path.py (from versions: )\nNo matching distribution found for path.py\n```\n\n![pathpy_bug](https://cloud.githubusercontent.com/assets/264487/15643399/be38d064-267f-11e6-8df8-895a84bdee3a.png)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/113", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/113/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/113/events", "html_url": "https://github.com/jaraco/path/issues/113", "id": 150558188, "node_id": "MDU6SXNzdWUxNTA1NTgxODg=", "number": 113, "title": "Issue with Python 2.7 in pip", "user": {"login": "fmwviormv", "id": 7699269, "node_id": "MDQ6VXNlcjc2OTkyNjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7699269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmwviormv", "html_url": "https://github.com/fmwviormv", "followers_url": "https://api.github.com/users/fmwviormv/followers", "following_url": "https://api.github.com/users/fmwviormv/following{/other_user}", "gists_url": "https://api.github.com/users/fmwviormv/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmwviormv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmwviormv/subscriptions", "organizations_url": "https://api.github.com/users/fmwviormv/orgs", "repos_url": "https://api.github.com/users/fmwviormv/repos", "events_url": "https://api.github.com/users/fmwviormv/events{/privacy}", "received_events_url": "https://api.github.com/users/fmwviormv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-04-23T14:10:03Z", "updated_at": "2016-04-23T14:11:40Z", "closed_at": "2016-04-23T14:11:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that this module does not appear in pypi for python 2.7:\nhttps://pypi.python.org/pypi/path.py\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/112", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/112/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/112/events", "html_url": "https://github.com/jaraco/path/issues/112", "id": 148842714, "node_id": "MDU6SXNzdWUxNDg4NDI3MTQ=", "number": 112, "title": "path.py Version incorrect in PKG-INFO", "user": {"login": "waveman68", "id": 2178946, "node_id": "MDQ6VXNlcjIxNzg5NDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2178946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/waveman68", "html_url": "https://github.com/waveman68", "followers_url": "https://api.github.com/users/waveman68/followers", "following_url": "https://api.github.com/users/waveman68/following{/other_user}", "gists_url": "https://api.github.com/users/waveman68/gists{/gist_id}", "starred_url": "https://api.github.com/users/waveman68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/waveman68/subscriptions", "organizations_url": "https://api.github.com/users/waveman68/orgs", "repos_url": "https://api.github.com/users/waveman68/repos", "events_url": "https://api.github.com/users/waveman68/events{/privacy}", "received_events_url": "https://api.github.com/users/waveman68/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-16T11:08:26Z", "updated_at": "2016-04-16T14:34:29Z", "closed_at": "2016-04-16T14:27:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the path.py PKG-INFO is:\n\n```\nMetadata-Version: 1.1\nName: path.py\nVersion: 0.0.0\n...\n```\n\nThis results in the path.py showing up twice in the PyCharm package manager (once as 8.2 and once as 0.0.0). This is corrected by:\n\n```\nMetadata-Version: 1.1\nName: path.py\nVersion: 8.2\n...\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/111", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/111/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/111/events", "html_url": "https://github.com/jaraco/path/issues/111", "id": 146758556, "node_id": "MDU6SXNzdWUxNDY3NTg1NTY=", "number": 111, "title": "pkg_resources may be undefined when catching exception", "user": {"login": "takluyver", "id": 327925, "node_id": "MDQ6VXNlcjMyNzkyNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/takluyver", "html_url": "https://github.com/takluyver", "followers_url": "https://api.github.com/users/takluyver/followers", "following_url": "https://api.github.com/users/takluyver/following{/other_user}", "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}", "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions", "organizations_url": "https://api.github.com/users/takluyver/orgs", "repos_url": "https://api.github.com/users/takluyver/repos", "events_url": "https://api.github.com/users/takluyver/events{/privacy}", "received_events_url": "https://api.github.com/users/takluyver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-07T22:22:34Z", "updated_at": "2016-04-08T12:01:58Z", "closed_at": "2016-04-08T12:01:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This was reported on Python 2 on Arch, as jupyter/notebook#1320\n\n[This code](https://github.com/jaraco/path.py/blob/9ee36737fb663cc739877c820ff376c861a81cdf/path.py#L121-L127) tries to catch an error from pkg_resources, but pkg_resources may not have successfully imported when it does.\n\n```\nTraceback (most recent call last):\n...\nFile \"/usr/lib/python2.7/site-packages/pickleshare.py\",\nline 41, in <module>\nfrom path import path as Path\nFile \"/usr/lib/python2.7/site-packages/path.py\",\nline 126, in <module>\nexcept pkg_resources.DistributionNotFound:\nNameError: name 'pkg_resources' is not defined\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/110", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/110/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/110/events", "html_url": "https://github.com/jaraco/path/issues/110", "id": 145030795, "node_id": "MDU6SXNzdWUxNDUwMzA3OTU=", "number": 110, "title": "Add \"new_filename()\" and \"new_file()\" method to tempdir", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-31T22:03:02Z", "updated_at": "2017-01-02T21:47:03Z", "closed_at": "2017-01-02T21:47:03Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I recently had to do something like this:\n\n```\nfrom path import path:\n\nwith tempdir() as d:\n    tempfile = d / str(uuid.uuid4())\n    foo(tempfile)\n    content = tempfile.bytes()\n```\n\nI wish I could have done:\n\n```\nwith tempdir() as d:\n    tempfile = d.new_filename()\n    foo(tempfile)\n    content = tempfile.bytes()\n```\n\nWhich would abstract the creation of a unique filename in this tempdir, and would save me an import.\n\nSomething similar returning a file like object would also be nice:\n\n```\nwith tempdir() as d:\n    temp_path, file_like_object = d.new_file()\n```\n\nOr a file like_object with an attribute being a path object.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/109", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/109/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/109/events", "html_url": "https://github.com/jaraco/path/issues/109", "id": 144852250, "node_id": "MDU6SXNzdWUxNDQ4NTIyNTA=", "number": 109, "title": "Adopt type compatibility with pathlib.Path", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-03-31T10:12:13Z", "updated_at": "2016-11-19T16:52:20Z", "closed_at": "2016-11-19T16:52:20Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "There is a big debate on the Python mailing list currently about how to improve pathlib integration, and some work is being done to make the stdlib accept a pathlib.Path as a parameter.\n\nShould path.Path be a subclass of pathlib.Path if available ?\n\nI'm not sure, but I'd like to raise the question here. It may help with the future stdlib integration, will pass code testing insintance(p, pathlib.Path) and the like. Maybe there will be conflicts with methods names though.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/108", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/108/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/108/events", "html_url": "https://github.com/jaraco/path/issues/108", "id": 144230336, "node_id": "MDU6SXNzdWUxNDQyMzAzMzY=", "number": 108, "title": "Sandbox directory support", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-03-29T11:09:12Z", "updated_at": "2016-11-19T16:51:21Z", "closed_at": "2016-11-19T16:51:21Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Sometime you need to create a path from the user input, and you want to prevent the user to add \"~\", \"..\" and the likes to the path and access parts of your system you don't want them to do.\n\nSuggested syntax:\n\n```\nPath('stuff') / 'foo/sandbox' // user_input\n```\n\n'//' would then do:\n\n```\nbasedir = (Path('stuff') / 'foo/sandbox').realpath()\nfulldir = (basedir / user_input).expanduser().expandvars().realpath()\nif not fulldir.startswith(basedir):\n    raise ValueError(\"%s is outside of the %s sandbox\" % (fulldir, basedir))\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/107", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/107/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/107/events", "html_url": "https://github.com/jaraco/path/issues/107", "id": 117338574, "node_id": "MDU6SXNzdWUxMTczMzg1NzQ=", "number": 107, "title": "Add a LICENSE file", "user": {"login": "BY-jk", "id": 5099251, "node_id": "MDQ6VXNlcjUwOTkyNTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5099251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BY-jk", "html_url": "https://github.com/BY-jk", "followers_url": "https://api.github.com/users/BY-jk/followers", "following_url": "https://api.github.com/users/BY-jk/following{/other_user}", "gists_url": "https://api.github.com/users/BY-jk/gists{/gist_id}", "starred_url": "https://api.github.com/users/BY-jk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BY-jk/subscriptions", "organizations_url": "https://api.github.com/users/BY-jk/orgs", "repos_url": "https://api.github.com/users/BY-jk/repos", "events_url": "https://api.github.com/users/BY-jk/events{/privacy}", "received_events_url": "https://api.github.com/users/BY-jk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-11-17T11:50:49Z", "updated_at": "2015-11-18T07:34:24Z", "closed_at": "2015-11-17T22:42:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to add a file LICENSE with the MIT license (http://opensource.org/licenses/MIT) to the repositories root directory?\nThe setup.py states this module is licensed under MIT. However, it is good and common practice to repeat the concrete license text in a LICENSE file.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/106", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/106/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/106/events", "html_url": "https://github.com/jaraco/path/issues/106", "id": 106156203, "node_id": "MDU6SXNzdWUxMDYxNTYyMDM=", "number": 106, "title": "Please remove .hgtags", "user": {"login": "SnarkBoojum", "id": 4647429, "node_id": "MDQ6VXNlcjQ2NDc0Mjk=", "avatar_url": "https://avatars2.githubusercontent.com/u/4647429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SnarkBoojum", "html_url": "https://github.com/SnarkBoojum", "followers_url": "https://api.github.com/users/SnarkBoojum/followers", "following_url": "https://api.github.com/users/SnarkBoojum/following{/other_user}", "gists_url": "https://api.github.com/users/SnarkBoojum/gists{/gist_id}", "starred_url": "https://api.github.com/users/SnarkBoojum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SnarkBoojum/subscriptions", "organizations_url": "https://api.github.com/users/SnarkBoojum/orgs", "repos_url": "https://api.github.com/users/SnarkBoojum/repos", "events_url": "https://api.github.com/users/SnarkBoojum/events{/privacy}", "received_events_url": "https://api.github.com/users/SnarkBoojum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-12T12:58:05Z", "updated_at": "2015-10-04T13:53:31Z", "closed_at": "2015-10-04T13:53:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "That file is useless when using git, but still ends up in the tarballs.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/105", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/105/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/105/events", "html_url": "https://github.com/jaraco/path/issues/105", "id": 104984893, "node_id": "MDU6SXNzdWUxMDQ5ODQ4OTM=", "number": 105, "title": "__get_owner_windows fails when trying to decode '\\\\'", "user": {"login": "theiviaxx", "id": 173465, "node_id": "MDQ6VXNlcjE3MzQ2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/173465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theiviaxx", "html_url": "https://github.com/theiviaxx", "followers_url": "https://api.github.com/users/theiviaxx/followers", "following_url": "https://api.github.com/users/theiviaxx/following{/other_user}", "gists_url": "https://api.github.com/users/theiviaxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/theiviaxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theiviaxx/subscriptions", "organizations_url": "https://api.github.com/users/theiviaxx/orgs", "repos_url": "https://api.github.com/users/theiviaxx/repos", "events_url": "https://api.github.com/users/theiviaxx/events{/privacy}", "received_events_url": "https://api.github.com/users/theiviaxx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-09-04T23:11:15Z", "updated_at": "2015-10-04T13:50:28Z", "closed_at": "2015-10-04T13:50:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "line 1110\n\n```\nC:\\Python27\\lib\\site-packages\\path.pyc in __get_owner_windows(self)\n   1108         sid = desc.GetSecurityDescriptorOwner()\n   1109         account, domain, typecode = win32security.LookupAccountSid(None, sid)\n-> 1110         return domain + u('\\\\') + account\n   1111\n   1112     def __get_owner_unix(self):\n\nC:\\Python27\\lib\\site-packages\\path.pyc in <lambda>(x)\n     92     text_type = __builtin__.unicode\n     93     getcwdu = os.getcwdu\n---> 94     u = lambda x: codecs.unicode_escape_decode(x)[0]\n     95     codecs.register_error('surrogateescape', surrogate_escape)\n     96\n```\n\ncan be reproduced by\n\n```\nimport codecs\ncodecs.unicode_escape_decode('\\\\')\n```\n\npython 2.7.4 win64\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/103", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/103/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/103/events", "html_url": "https://github.com/jaraco/path/issues/103", "id": 103110552, "node_id": "MDU6SXNzdWUxMDMxMTA1NTI=", "number": 103, "title": "Documentation for in_place is incorrect.", "user": {"login": "vamega", "id": 223408, "node_id": "MDQ6VXNlcjIyMzQwOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/223408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vamega", "html_url": "https://github.com/vamega", "followers_url": "https://api.github.com/users/vamega/followers", "following_url": "https://api.github.com/users/vamega/following{/other_user}", "gists_url": "https://api.github.com/users/vamega/gists{/gist_id}", "starred_url": "https://api.github.com/users/vamega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vamega/subscriptions", "organizations_url": "https://api.github.com/users/vamega/orgs", "repos_url": "https://api.github.com/users/vamega/repos", "events_url": "https://api.github.com/users/vamega/events{/privacy}", "received_events_url": "https://api.github.com/users/vamega/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-08-25T20:34:37Z", "updated_at": "2015-08-25T20:40:56Z", "closed_at": "2015-08-25T20:39:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation for the in_place function of path.py has incorrect syntax (at least on Python 3.4).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/102", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/102/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/102/events", "html_url": "https://github.com/jaraco/path/issues/102", "id": 102886423, "node_id": "MDU6SXNzdWUxMDI4ODY0MjM=", "number": 102, "title": "Pylint gets confused: No name 'path' in module 'path'", "user": {"login": "nedbat", "id": 23789, "node_id": "MDQ6VXNlcjIzNzg5", "avatar_url": "https://avatars1.githubusercontent.com/u/23789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nedbat", "html_url": "https://github.com/nedbat", "followers_url": "https://api.github.com/users/nedbat/followers", "following_url": "https://api.github.com/users/nedbat/following{/other_user}", "gists_url": "https://api.github.com/users/nedbat/gists{/gist_id}", "starred_url": "https://api.github.com/users/nedbat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nedbat/subscriptions", "organizations_url": "https://api.github.com/users/nedbat/orgs", "repos_url": "https://api.github.com/users/nedbat/repos", "events_url": "https://api.github.com/users/nedbat/events{/privacy}", "received_events_url": "https://api.github.com/users/nedbat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2015-08-24T20:39:07Z", "updated_at": "2020-07-27T23:39:27Z", "closed_at": "2015-08-27T12:20:06Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Pylint doesn't understand that path.py defines the name \"path\".  It does so with the @alias decorator, which is only used once in the file.  So there are six extra lines of code to define a decorator which only serves to confuse pylint.\n\nWould you mind getting rid of the decorator and replacing it with `path = Path`?  Then pylint will understand.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/101", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/101/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/101/events", "html_url": "https://github.com/jaraco/path/issues/101", "id": 101084813, "node_id": "MDU6SXNzdWUxMDEwODQ4MTM=", "number": 101, "title": "Versioning incompatibility with PyInstaller", "user": {"login": "nwhitehead", "id": 131095, "node_id": "MDQ6VXNlcjEzMTA5NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/131095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwhitehead", "html_url": "https://github.com/nwhitehead", "followers_url": "https://api.github.com/users/nwhitehead/followers", "following_url": "https://api.github.com/users/nwhitehead/following{/other_user}", "gists_url": "https://api.github.com/users/nwhitehead/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwhitehead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwhitehead/subscriptions", "organizations_url": "https://api.github.com/users/nwhitehead/orgs", "repos_url": "https://api.github.com/users/nwhitehead/repos", "events_url": "https://api.github.com/users/nwhitehead/events{/privacy}", "received_events_url": "https://api.github.com/users/nwhitehead/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-08-14T19:19:00Z", "updated_at": "2015-08-19T07:58:34Z", "closed_at": "2015-08-19T07:58:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using PyInstaller with a trivial program that uses path.py, the build finishes but then the final executable does not work.\n\nSteps to reproduce:\n\n```\npip install path.py pyinstaller\necho \"import path\" > dummy.py\npyinstaller dummy.py\n./dist/dummy/dummy\n```\n\nResults in `pkg_resources.DistributionNotFound: The 'path.py' distribution was not found and is required by the application`.\n\nMy workaround is to comment out line 122:\n\n```\n__version__ = pkg_resources.require('path.py')[0].version\n```\n\nI have no idea where exactly things are going wrong, it could be a bug in PyInstaller.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/98", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/98/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/98/events", "html_url": "https://github.com/jaraco/path/issues/98", "id": 98621217, "node_id": "MDU6SXNzdWU5ODYyMTIxNw==", "number": 98, "title": "question: why isn't `self` used as `src` for shutil-functions?", "user": {"login": "funkyfuture", "id": 2004405, "node_id": "MDQ6VXNlcjIwMDQ0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/2004405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkyfuture", "html_url": "https://github.com/funkyfuture", "followers_url": "https://api.github.com/users/funkyfuture/followers", "following_url": "https://api.github.com/users/funkyfuture/following{/other_user}", "gists_url": "https://api.github.com/users/funkyfuture/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkyfuture/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkyfuture/subscriptions", "organizations_url": "https://api.github.com/users/funkyfuture/orgs", "repos_url": "https://api.github.com/users/funkyfuture/repos", "events_url": "https://api.github.com/users/funkyfuture/events{/privacy}", "received_events_url": "https://api.github.com/users/funkyfuture/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-08-02T16:48:34Z", "updated_at": "2015-08-03T03:10:06Z", "closed_at": "2015-08-02T20:09:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "ciao,\n\ni'm thinking about using the path.py-module in a project.\n\nbut i found it counter-intuitive and less effective in terms of simplifying my code when i stumpled over the fact that an instance isn't used as `src`-argument for the functions from `shutil` like `copy` etc. i wonder if this is intentional.\n\nif it is not, i would work on patches to achieve that behaviour.\n\nwould you be interested in methods that allow merging filetrees from / to another?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/97", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/97/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/97/events", "html_url": "https://github.com/jaraco/path/issues/97", "id": 97761861, "node_id": "MDU6SXNzdWU5Nzc2MTg2MQ==", "number": 97, "title": "Define __rdiv__ and __rtruediv__", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3596319, "node_id": "MDU6TGFiZWwzNTk2MzE5", "url": "https://api.github.com/repos/jaraco/path/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-07-28T17:47:48Z", "updated_at": "2015-08-02T08:41:41Z", "closed_at": "2015-08-02T08:41:41Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Currently you can do this: \n\n```\nPath('foo') / 'bar'\n```\n\nBut not this:\n\n```\n'foo' / Path('bar')\n```\n\nThis can be solved with __rdiv__ and __rtruediv__:\n\nhttps://github.com/sametmax/path.py/commit/5649e5edcd4864b020fccfcb7f7cb67a96b30880\n\nShould I PR ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/93", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/93/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/93/events", "html_url": "https://github.com/jaraco/path/issues/93", "id": 75752100, "node_id": "MDU6SXNzdWU3NTc1MjEwMA==", "number": 93, "title": "chown does not show up in docs", "user": {"login": "mbruzek", "id": 6385185, "node_id": "MDQ6VXNlcjYzODUxODU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6385185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbruzek", "html_url": "https://github.com/mbruzek", "followers_url": "https://api.github.com/users/mbruzek/followers", "following_url": "https://api.github.com/users/mbruzek/following{/other_user}", "gists_url": "https://api.github.com/users/mbruzek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbruzek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbruzek/subscriptions", "organizations_url": "https://api.github.com/users/mbruzek/orgs", "repos_url": "https://api.github.com/users/mbruzek/repos", "events_url": "https://api.github.com/users/mbruzek/events{/privacy}", "received_events_url": "https://api.github.com/users/mbruzek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-05-12T21:53:06Z", "updated_at": "2015-07-13T02:30:12Z", "closed_at": "2015-07-13T02:30:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I can not find the chown method in path.py docs at https://pythonhosted.org/path.py/api.html\n\nIt looks like the docs do not recognize the chown method when creating documentation.  \n\nLooking at the code it is due to the if statement on line 1136.  \nhttps://github.com/jaraco/path.py/blob/master/path.py#L1136\n\nIs there any way we can make the generation of docs include this function?  \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/91", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/91/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/91/events", "html_url": "https://github.com/jaraco/path/issues/91", "id": 68334023, "node_id": "MDU6SXNzdWU2ODMzNDAyMw==", "number": 91, "title": "wheel on pypi?", "user": {"login": "davidszotten", "id": 412005, "node_id": "MDQ6VXNlcjQxMjAwNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/412005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidszotten", "html_url": "https://github.com/davidszotten", "followers_url": "https://api.github.com/users/davidszotten/followers", "following_url": "https://api.github.com/users/davidszotten/following{/other_user}", "gists_url": "https://api.github.com/users/davidszotten/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidszotten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidszotten/subscriptions", "organizations_url": "https://api.github.com/users/davidszotten/orgs", "repos_url": "https://api.github.com/users/davidszotten/repos", "events_url": "https://api.github.com/users/davidszotten/events{/privacy}", "received_events_url": "https://api.github.com/users/davidszotten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-14T10:30:01Z", "updated_at": "2015-04-14T12:42:14Z", "closed_at": "2015-04-14T11:47:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "hey, might be nice to put a wheel on the cheese shop\n\nthanks\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/90", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/90/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/90/events", "html_url": "https://github.com/jaraco/path/issues/90", "id": 64088729, "node_id": "MDU6SXNzdWU2NDA4ODcyOQ==", "number": 90, "title": "sandboxing support for Path", "user": {"login": "grimnight", "id": 1737541, "node_id": "MDQ6VXNlcjE3Mzc1NDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1737541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grimnight", "html_url": "https://github.com/grimnight", "followers_url": "https://api.github.com/users/grimnight/followers", "following_url": "https://api.github.com/users/grimnight/following{/other_user}", "gists_url": "https://api.github.com/users/grimnight/gists{/gist_id}", "starred_url": "https://api.github.com/users/grimnight/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grimnight/subscriptions", "organizations_url": "https://api.github.com/users/grimnight/orgs", "repos_url": "https://api.github.com/users/grimnight/repos", "events_url": "https://api.github.com/users/grimnight/events{/privacy}", "received_events_url": "https://api.github.com/users/grimnight/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-03-24T20:10:53Z", "updated_at": "2015-04-14T15:52:04Z", "closed_at": "2015-04-14T15:52:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to get a Path subclass with support for [sandboxing](http://docs.pyfilesystem.org/en/latest/concepts.html#sandboxing) paths?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/89", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/89/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/89/events", "html_url": "https://github.com/jaraco/path/issues/89", "id": 63588573, "node_id": "MDU6SXNzdWU2MzU4ODU3Mw==", "number": 89, "title": "Missing modes in chmod", "user": {"login": "Nodd", "id": 506348, "node_id": "MDQ6VXNlcjUwNjM0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/506348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nodd", "html_url": "https://github.com/Nodd", "followers_url": "https://api.github.com/users/Nodd/followers", "following_url": "https://api.github.com/users/Nodd/following{/other_user}", "gists_url": "https://api.github.com/users/Nodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nodd/subscriptions", "organizations_url": "https://api.github.com/users/Nodd/orgs", "repos_url": "https://api.github.com/users/Nodd/repos", "events_url": "https://api.github.com/users/Nodd/events{/privacy}", "received_events_url": "https://api.github.com/users/Nodd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3596319, "node_id": "MDU6TGFiZWwzNTk2MzE5", "url": "https://api.github.com/repos/jaraco/path/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-03-22T23:08:52Z", "updated_at": "2016-11-19T16:50:09Z", "closed_at": "2016-11-19T16:50:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "From the `chmod` man page:\n\n> execute/search only if the file is a directory or already has execute permission for some user (**X**),\n> set user or group ID on execution (**s**),\n> restricted deletion flag or sticky bit (**t**).\n> Instead of one or more of these letters, you can specify exactly one of the letters ugo:\n> the permissions granted to the user who owns the file (**u**),\n> the permissions granted to other users who  are  members  of  the file's group (**g**),\n> and the permissions granted to users that are in neither of the two preceding categories (**o**).\n\nIt would be good to support the full syntax, but the most important one is **X**, which is very useful when changing mode recursively (which could be yet another option...).\n\nThe full regexp is also given in the man page:\n\n```\n'[ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/88", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/88/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/88/events", "html_url": "https://github.com/jaraco/path/issues/88", "id": 62073083, "node_id": "MDU6SXNzdWU2MjA3MzA4Mw==", "number": 88, "title": "Add \"config_dir\" class method.", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3596319, "node_id": "MDU6TGFiZWwzNTk2MzE5", "url": "https://api.github.com/repos/jaraco/path/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2015-03-16T12:56:58Z", "updated_at": "2015-08-28T12:57:58Z", "closed_at": "2015-08-23T13:10:26Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I'd like to add a classmethod, \"config_dir\":\n\n```\n@classmethod\ndef config_dir(cls, app_name):\n    \"\"\"\n    Return a path object referencing a suitable config\n    directory for the relevant platform. Honors the\n    `XDG Base Directory Specification\n    <http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html>`_\n    on Unix and App Data conventions on Windows.\n    Ensures that directory exists.\n    \"\"\"\n```\n\nThoughts?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/83", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/83/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/83/events", "html_url": "https://github.com/jaraco/path/issues/83", "id": 57574246, "node_id": "MDU6SXNzdWU1NzU3NDI0Ng==", "number": 83, "title": "io.open is not a file object", "user": {"login": "Nodd", "id": 506348, "node_id": "MDQ6VXNlcjUwNjM0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/506348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nodd", "html_url": "https://github.com/Nodd", "followers_url": "https://api.github.com/users/Nodd/followers", "following_url": "https://api.github.com/users/Nodd/following{/other_user}", "gists_url": "https://api.github.com/users/Nodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nodd/subscriptions", "organizations_url": "https://api.github.com/users/Nodd/orgs", "repos_url": "https://api.github.com/users/Nodd/repos", "events_url": "https://api.github.com/users/Nodd/events{/privacy}", "received_events_url": "https://api.github.com/users/Nodd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-13T08:58:31Z", "updated_at": "2015-02-13T14:13:19Z", "closed_at": "2015-02-13T14:13:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Since e708619170fab2112f4bacf5693b842302d47531, Path.open uses io.open which return a stream, which apparentely is not compatible with a File object, which is what is expected for example in  [numpy.ndarray.tofile](http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.tofile.html).\n\nMaybe the fault is in numpy, but this is still a compatibility problem with previous path.py versions.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/80", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/80/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/80/events", "html_url": "https://github.com/jaraco/path/issues/80", "id": 54280837, "node_id": "MDU6SXNzdWU1NDI4MDgzNw==", "number": 80, "title": "Wondering the wisdom of using _next_class().", "user": {"login": "drakeguan", "id": 41723, "node_id": "MDQ6VXNlcjQxNzIz", "avatar_url": "https://avatars1.githubusercontent.com/u/41723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drakeguan", "html_url": "https://github.com/drakeguan", "followers_url": "https://api.github.com/users/drakeguan/followers", "following_url": "https://api.github.com/users/drakeguan/following{/other_user}", "gists_url": "https://api.github.com/users/drakeguan/gists{/gist_id}", "starred_url": "https://api.github.com/users/drakeguan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drakeguan/subscriptions", "organizations_url": "https://api.github.com/users/drakeguan/orgs", "repos_url": "https://api.github.com/users/drakeguan/repos", "events_url": "https://api.github.com/users/drakeguan/events{/privacy}", "received_events_url": "https://api.github.com/users/drakeguan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3596321, "node_id": "MDU6TGFiZWwzNTk2MzIx", "url": "https://api.github.com/repos/jaraco/path/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-01-14T03:44:16Z", "updated_at": "2015-01-15T04:19:47Z", "closed_at": "2015-01-14T13:50:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm quite curious to know the wisdom and ideas of using **_next_class**, a ClassProperty, to create instances in lots of member functions.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/79", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/79/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/79/events", "html_url": "https://github.com/jaraco/path/issues/79", "id": 45601818, "node_id": "MDU6SXNzdWU0NTYwMTgxOA==", "number": 79, "title": "Pip installation either broken or non-obvious", "user": {"login": "holdenweb", "id": 105312, "node_id": "MDQ6VXNlcjEwNTMxMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/105312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/holdenweb", "html_url": "https://github.com/holdenweb", "followers_url": "https://api.github.com/users/holdenweb/followers", "following_url": "https://api.github.com/users/holdenweb/following{/other_user}", "gists_url": "https://api.github.com/users/holdenweb/gists{/gist_id}", "starred_url": "https://api.github.com/users/holdenweb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/holdenweb/subscriptions", "organizations_url": "https://api.github.com/users/holdenweb/orgs", "repos_url": "https://api.github.com/users/holdenweb/repos", "events_url": "https://api.github.com/users/holdenweb/events{/privacy}", "received_events_url": "https://api.github.com/users/holdenweb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-10-13T02:13:28Z", "updated_at": "2015-03-16T12:52:51Z", "closed_at": "2015-03-16T12:52:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation says that `path` \"may be installed using `setuptools`, `distribute`, or `pip`\" but only gives an example of easy_install.\n\nWhich left me a little upset when I tried to install the package.\n\n```\nairhead:Projects sholden$ pip install path\nDownloading/unpacking path\n  Could not find any downloads that satisfy the requirement path\nNo distributions at all found for path\nStoring complete log in /Users/sholden/.pip/pip.log\n```\n\nPip installation should just work. Maybe the notes could mention that since path is a modue rther than a package it should be installed with\n\n```\npip install path.py\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/77", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/77/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/77/events", "html_url": "https://github.com/jaraco/path/issues/77", "id": 44190792, "node_id": "MDU6SXNzdWU0NDE5MDc5Mg==", "number": 77, "title": "New maintainer needed", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2014-09-27T20:45:24Z", "updated_at": "2015-02-01T07:28:57Z", "closed_at": "2015-02-01T07:28:57Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The time has come for me to step back and limit my involvement in this project. In order to avoid it being abandoned, I'd like to identify a successor to take over maintenance. I'm happy to mentor a new maintainer and contribute incidentally, but a volunteer is needed to maintain the project. I would like to transfer the repository and assign ownership to the path.py project in PyPI. Please express your interest here (preferred) or message me privately if appropriate.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/73", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/73/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/73/events", "html_url": "https://github.com/jaraco/path/issues/73", "id": 42926257, "node_id": "MDU6SXNzdWU0MjkyNjI1Nw==", "number": 73, "title": "Crash on walk with errors set to warn", "user": {"login": "gazpachoking", "id": 187133, "node_id": "MDQ6VXNlcjE4NzEzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/187133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gazpachoking", "html_url": "https://github.com/gazpachoking", "followers_url": "https://api.github.com/users/gazpachoking/followers", "following_url": "https://api.github.com/users/gazpachoking/following{/other_user}", "gists_url": "https://api.github.com/users/gazpachoking/gists{/gist_id}", "starred_url": "https://api.github.com/users/gazpachoking/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gazpachoking/subscriptions", "organizations_url": "https://api.github.com/users/gazpachoking/orgs", "repos_url": "https://api.github.com/users/gazpachoking/repos", "events_url": "https://api.github.com/users/gazpachoking/events{/privacy}", "received_events_url": "https://api.github.com/users/gazpachoking/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3596322, "node_id": "MDU6TGFiZWwzNTk2MzIy", "url": "https://api.github.com/repos/jaraco/path/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2014-09-16T20:00:34Z", "updated_at": "2015-07-13T02:39:47Z", "closed_at": "2015-07-13T02:39:33Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Seems there can be an issue creating the warning text when using the `walk` method in warn mode. I suspect this might only happen on python 2.\n\n```\n  File \"/usr/lib64/python2.7/site-packages/flexget/plugins/filter/exists.py\", line 44, in on_task_filter\n    for p in folder.walk(errors='warn'):\n  File \"/usr/lib64/python2.7/site-packages/path.py\", line 576, in walk\n    TreeWalkWarning)\n  File \"/usr/lib64/python2.7/warnings.py\", line 29, in _show_warning\n    file.write(formatwarning(message, category, filename, lineno, line))\n  File \"/usr/lib64/python2.7/warnings.py\", line 38, in formatwarning\n    s =  \"%s:%s: %s: %s\\n\" % (filename, lineno, category.__name__, message)\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 46-60: ordinal not in range(128)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/70", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/70/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/70/events", "html_url": "https://github.com/jaraco/path/issues/70", "id": 41870263, "node_id": "MDU6SXNzdWU0MTg3MDI2Mw==", "number": 70, "title": "test_path.py fails", "user": {"login": "Nodd", "id": 506348, "node_id": "MDQ6VXNlcjUwNjM0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/506348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nodd", "html_url": "https://github.com/Nodd", "followers_url": "https://api.github.com/users/Nodd/followers", "following_url": "https://api.github.com/users/Nodd/following{/other_user}", "gists_url": "https://api.github.com/users/Nodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nodd/subscriptions", "organizations_url": "https://api.github.com/users/Nodd/orgs", "repos_url": "https://api.github.com/users/Nodd/repos", "events_url": "https://api.github.com/users/Nodd/events{/privacy}", "received_events_url": "https://api.github.com/users/Nodd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-09-03T21:29:26Z", "updated_at": "2014-09-03T23:03:27Z", "closed_at": "2014-09-03T23:03:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In both python2.7 and python 3.4 I get:\n\n```\n======================================================================\nERROR: test_walkdirs_with_unicode_name (__main__.TestUnicodePaths)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test_path.py\", line 789, in test_walkdirs_with_unicode_name\n    p = path(self.tempdir)\nAttributeError: 'TestUnicodePaths' object has no attribute 'tempdir'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/68", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/68/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/68/events", "html_url": "https://github.com/jaraco/path/issues/68", "id": 41787464, "node_id": "MDU6SXNzdWU0MTc4NzQ2NA==", "number": 68, "title": "Possible class name change", "user": {"login": "satoon101", "id": 5043743, "node_id": "MDQ6VXNlcjUwNDM3NDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5043743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/satoon101", "html_url": "https://github.com/satoon101", "followers_url": "https://api.github.com/users/satoon101/followers", "following_url": "https://api.github.com/users/satoon101/following{/other_user}", "gists_url": "https://api.github.com/users/satoon101/gists{/gist_id}", "starred_url": "https://api.github.com/users/satoon101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/satoon101/subscriptions", "organizations_url": "https://api.github.com/users/satoon101/orgs", "repos_url": "https://api.github.com/users/satoon101/repos", "events_url": "https://api.github.com/users/satoon101/events{/privacy}", "received_events_url": "https://api.github.com/users/satoon101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-09-03T07:05:09Z", "updated_at": "2014-09-27T08:12:52Z", "closed_at": "2014-09-27T08:09:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I typically try to adhere to PEP8 standards.  So, when I update this script to be used with a project I am working on, I have to go through and change all \"path\" instances to \"Path\".  I am somewhat OCD, so I have to change it in the comments, as well.  I was wondering if there would be any consideration to changing the class name to Path and simply adding the following for backwards compatibility:\n\n``` python\npath = Path\n```\n\nAlso, slightly related to this issue is the fact that the _always_unicode classmethod uses \"path\" as a local variable name.  That is not good practice, either.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/67", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/67/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/67/events", "html_url": "https://github.com/jaraco/path/issues/67", "id": 41778805, "node_id": "MDU6SXNzdWU0MTc3ODgwNQ==", "number": 67, "title": "python setup.py install", "user": {"login": "dslackw", "id": 6345517, "node_id": "MDQ6VXNlcjYzNDU1MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6345517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dslackw", "html_url": "https://github.com/dslackw", "followers_url": "https://api.github.com/users/dslackw/followers", "following_url": "https://api.github.com/users/dslackw/following{/other_user}", "gists_url": "https://api.github.com/users/dslackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/dslackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dslackw/subscriptions", "organizations_url": "https://api.github.com/users/dslackw/orgs", "repos_url": "https://api.github.com/users/dslackw/repos", "events_url": "https://api.github.com/users/dslackw/events{/privacy}", "received_events_url": "https://api.github.com/users/dslackw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-09-03T03:36:21Z", "updated_at": "2014-09-11T00:50:57Z", "closed_at": "2014-09-11T00:50:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to install :\n\n.\n.\n.\nrunning install_egg_info\nrunning egg_info\ncreating path.py.egg-info\nwriting path.py.egg-info/PKG-INFO\nwriting top-level names to path.py.egg-info/top_level.txt\nwriting dependency_links to path.py.egg-info/dependency_links.txt\nwriting manifest file 'path.py.egg-info/SOURCES.txt'\nreading manifest file 'path.py.egg-info/SOURCES.txt'\nreading manifest template 'MANIFEST.in'\nwriting manifest file 'path.py.egg-info/SOURCES.txt'\nCopying path.py.egg-info to /tmp/SBo/package-path.py/usr/lib64/python2.7/site-packages/path.py-5.2-py2.7.egg-info\nrunning install_scripts\nUsage: grep [OPTION]... PATTERN [FILE]...\nTry 'grep --help' for more information.\n\nand broke here.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/66", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/66/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/66/events", "html_url": "https://github.com/jaraco/path/issues/66", "id": 41189776, "node_id": "MDU6SXNzdWU0MTE4OTc3Ng==", "number": 66, "title": ".copy() and shutils version", "user": {"login": "Nodd", "id": 506348, "node_id": "MDQ6VXNlcjUwNjM0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/506348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nodd", "html_url": "https://github.com/Nodd", "followers_url": "https://api.github.com/users/Nodd/followers", "following_url": "https://api.github.com/users/Nodd/following{/other_user}", "gists_url": "https://api.github.com/users/Nodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nodd/subscriptions", "organizations_url": "https://api.github.com/users/Nodd/orgs", "repos_url": "https://api.github.com/users/Nodd/repos", "events_url": "https://api.github.com/users/Nodd/events{/privacy}", "received_events_url": "https://api.github.com/users/Nodd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-08-26T16:08:09Z", "updated_at": "2015-07-13T02:37:58Z", "closed_at": "2015-07-13T02:37:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "path.copy() uses directly shutils.copy(). From python version 3.3 onwards, shutils.copy() returns the new path. It would be nice to always return the new path for all python version. This si also the case for other functions such as copy2, copyfile...\n\nIt can also be viewed as compatibility with python < 3.3.\n\nThe relevant documentation page is https://docs.python.org/3/library/shutil.html#shutil.copy\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/61", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/61/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/61/events", "html_url": "https://github.com/jaraco/path/issues/61", "id": 35104804, "node_id": "MDU6SXNzdWUzNTEwNDgwNA==", "number": 61, "title": "Chokes up on valid filenames", "user": {"login": "remram44", "id": 426784, "node_id": "MDQ6VXNlcjQyNjc4NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/remram44", "html_url": "https://github.com/remram44", "followers_url": "https://api.github.com/users/remram44/followers", "following_url": "https://api.github.com/users/remram44/following{/other_user}", "gists_url": "https://api.github.com/users/remram44/gists{/gist_id}", "starred_url": "https://api.github.com/users/remram44/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/remram44/subscriptions", "organizations_url": "https://api.github.com/users/remram44/orgs", "repos_url": "https://api.github.com/users/remram44/repos", "events_url": "https://api.github.com/users/remram44/events{/privacy}", "received_events_url": "https://api.github.com/users/remram44/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-06-05T22:40:56Z", "updated_at": "2014-09-17T21:39:10Z", "closed_at": "2014-06-12T20:34:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "path.path.listdir() can fail with UnicodeDecodeError.\n\nOn Linux with Python 2:\n\n```\n$ echo -e 'r\\xE9mi' | xargs touch\n$ python\nPython 2.7.7rc1 (default, May 21 2014, 12:59:42)\n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import path\n>>> path.path('.').listdir()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/tmp/venv/local/lib/python2.7/site-packages/path.py\", line 485, in listdir\n    if self._next_class(child).fnmatch(pattern)\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe9 in position 1: ordinal not in range(128)\n```\n\nI know you're not the only project out there that gets it wrong, but in my quest for something sensible I did test yours, so I thought I'd let you know. My search goes on!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/59", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/59/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/59/events", "html_url": "https://github.com/jaraco/path/issues/59", "id": 28155343, "node_id": "MDU6SXNzdWUyODE1NTM0Mw==", "number": 59, "title": "Unique filename", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-02-24T11:47:31Z", "updated_at": "2014-09-27T07:36:35Z", "closed_at": "2014-09-27T07:36:35Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "If we implement #58, we can start working on suche features that have more their place in the `file` namespace.\n\nThis code returns a unique filename by incrementing a counter in the name : \n\n```\nimport re\nimport os\n\ndef get_unique_path(path):\n\n    while os.path.exists(path):\n        base, ext = os.path.splitext(path)\n        try:\n            base, counter, _ = re.split(r\" \\((\\d+)\\)$\", base)\n        except ValueError:\n            counter = 0\n\n        path = \"%s (%s)%s\" % (base, int(counter) + 1, ext)\n\n    return path\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/58", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/58/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/58/events", "html_url": "https://github.com/jaraco/path/issues/58", "id": 28153466, "node_id": "MDU6SXNzdWUyODE1MzQ2Ng==", "number": 58, "title": "Namespacing for file operations", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2014-02-24T11:11:20Z", "updated_at": "2015-07-13T02:37:00Z", "closed_at": "2015-07-13T02:37:00Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I gave some thoughts to the discussion we had here : https://github.com/jaraco/path.py/issues/26\n\nThe `status` proposal gave me an idea. We could actually generalize since the `path` class is becomming big, and maybe it would be beneficial to start separating responsabilities in the lib.\n\nSome actions are clearly not related to a path, but to a file such as :\n- calculating md5\n- gettings stats\n- getting text from file\n- getting mimetype\n  etc\n\nAlso, the fact the class `path` is supposed to deal with only a path make it difficult to add handy features that are file related without making it a strange melting pot.\n\nThis is why I'm suggesting we make a namespace dedicated to file operations. We could simply name it `file`, and it would be used this way :\n\n```\n>>> p = path('/etc/fstab')\n>>> p.file.file_operation()\n```\n\nThis would remove from the main namespace a lot of methods, making shell exploration easier.  It would also be the occasion to remove duplicates, matching the Zen of Python \"there should be only one way to do it\". Currently we keep several names to match the `os.path` API and aliases for compat reasons. While this is supposed to help, with the current size of the lib, it's becoming less and less convenient to instinctly find the proper method without several trials or looking at the source code.\n\nEnventually, it allows us to make the API more modern and adopt a fluid syntaxe :\n\n```\nstatvfs() -> p.file.statvfs()\natime and getatime() -> p.file.atime\nmtime and getmtime() -> p.file.mtime\nctime and getctime() -> p.file.ctime\nutime -> p.file.utime\nwrite_text() -> p.file.write(data)\nwrite_bytes() -> p.file.write(data, 'b')\ntext() -> p.file.text\n?() -> p.file.bytes\nlstat() -> p.file.lstat()\nread_hash() -> p.file.hash()\nread_hexhash() -> p.file.hash().hexdigest()\nread_md5() -> p.file.md5()\nchunks() -> p.file.chunks()\ngetsize() -> p.file.size\nstat() -> p.file.stat()\ninplace() -> p.file.inplace()\n```\n\n`file` could also be a callable that opens the file and returns a file like object :\n\n```\nfor line in p.file():\n    # do stuff\n```\n\nThe `file()` callable would accept all the parameters `codec.open` accept, a bit like what `path.open` does, but with `encoding` as well (set to 'utf8' as default like in Python 3).\n\nHowever, it would not returns a stdlib file like object, but rather a proxy (or a monkeypatched deepcopy for perfs) with all the same attributes except an additional `.path` returning the original `path` object used to open the file :\n\n```\n>>> p.file().path is p\nTrue\n```\n\nLast time you shared with me your concern about being backward incompatible, so i'm suggesting this to be added in an experimental branch in which we can play with what can be the future of path.py. Including all rejected features that would have made it backward incompatible, just to see where it leads us.\n\nThis branch can be used for future features such as asynchronous file system manipulations, name wrangling, advanced permission checks or anything that is not acceptable to put in the good old path.py.\n\npath.py is now very stable and feature complete, and I don't think it's going to move much. We can safely support this version ad vitam and consider freezing it in the comming years while trying new things on the experimental branch.\n\nAnother benefit of the experimental branch is we can drop 2.7 support and focus on Python 3, making the codebase a bit smaller. path.py as is will always be supported for 2.7 and 3 and always be available. We don't really need to touch it.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/57", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/57/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/57/events", "html_url": "https://github.com/jaraco/path/issues/57", "id": 27133615, "node_id": "MDU6SXNzdWUyNzEzMzYxNQ==", "number": 57, "title": "Sort the globs", "user": {"login": "GaelVaroquaux", "id": 208217, "node_id": "MDQ6VXNlcjIwODIxNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/208217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GaelVaroquaux", "html_url": "https://github.com/GaelVaroquaux", "followers_url": "https://api.github.com/users/GaelVaroquaux/followers", "following_url": "https://api.github.com/users/GaelVaroquaux/following{/other_user}", "gists_url": "https://api.github.com/users/GaelVaroquaux/gists{/gist_id}", "starred_url": "https://api.github.com/users/GaelVaroquaux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GaelVaroquaux/subscriptions", "organizations_url": "https://api.github.com/users/GaelVaroquaux/orgs", "repos_url": "https://api.github.com/users/GaelVaroquaux/repos", "events_url": "https://api.github.com/users/GaelVaroquaux/events{/privacy}", "received_events_url": "https://api.github.com/users/GaelVaroquaux/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3596322, "node_id": "MDU6TGFiZWwzNTk2MzIy", "url": "https://api.github.com/repos/jaraco/path/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2014-02-07T13:06:33Z", "updated_at": "2014-02-07T17:49:43Z", "closed_at": "2014-02-07T17:07:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "As far as I can tell, the various calls to glob are not sorted by file name in path.py.\n\nIt's a common source of mistake to assume that glob sorts by file name. As path.py makes life easier for many things relative to file handling, I was wondering if you would be open to adding a 'sorted' after each call to glob? I am happy doing the pull request.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/56", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/56/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/56/events", "html_url": "https://github.com/jaraco/path/issues/56", "id": 26611686, "node_id": "MDU6SXNzdWUyNjYxMTY4Ng==", "number": 56, "title": "Allow manual error handling in walk* methods", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-01-30T16:37:09Z", "updated_at": "2014-09-23T02:29:48Z", "closed_at": "2014-09-23T02:29:48Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "When iterating over a file list, there can be errors, and for now, path.py deals it this way : \n\n```\n    def walkfiles(self, pattern=None, errors='strict'):\n        [...]\n        for child in childList:\n            try:\n                isfile = child.isfile()\n                isdir = not isfile and child.isdir()\n            except:\n                if errors == 'ignore':\n                    continue\n                elif errors == 'warn':\n                    warnings.warn(\n                        \"Unable to access '%s': %s\"\n                        % (self, sys.exc_info()[1]),\n                        TreeWalkWarning)\n                    continue\n                else:\n                    raise\n```\n\nThis does give some options, but it limits the choices between \"shut up\", \"scream\" or \"crash\". You may want to have other behaviors : logging, permission change, user change, deletion, accumulation of the errors in a list, and so on.\n\nWe could allow any behavior by just doing:\n\n```\n    def walkfiles(self, pattern=None, errors='strict'):\n        [...]\n        for child in childList:\n            try:\n                isfile = child.isfile()\n                isdir = not isfile and child.isdir()\n            except Exception as e:\n\n                # If errors is a callable, call it by passing the file\n                # file name and the exception so it can do something about it\n                if callable(errors):\n                    res = errors(child, e)\n                    # if the callable returns something, yield it (it can\n                    # this way do something to the file, \n                    # then yield it anyway if needed, considering the error\n                    # solved or just ignore the file by not calling return)\n                    if res is not None:\n                        yield res\n\n                elif errors == 'ignore':\n                    continue\n                elif errors == 'warn':\n                    warnings.warn(\n                        \"Unable to access '%s': %s\"\n                        % (self, sys.exc_info()[1]),\n                        TreeWalkWarning)\n                    continue\n                else:\n                    raise\n```\n\nThen you would use it this way :\n\n```\nerrors_to_deal_with_later = []\non_errors = lambda f, e: errors_to_deal_with_later.append((f, e))\nfor p in path('/etc').walkfiles(errors=on_errors):\n    do_stuff(p)\n\nfor f, e in errors_to_deal_with_later:\n    do_stuff_with_all_errors(on_errors)\n```\n\nOf course, the lambda could do anything : sending an email, adding the faulty path in a file, making a remote call, etc. This gives you the power to do something for each faulty files, not just the first one causing troubles and preventing the whole iteration to carry on.\n\nWe can apply this logic at several places in the path.py code and it doesn't affect the API, just add flexibility. The Overhead is not really important since we are already in an `except` clause (the whole stacktrace is been collected) so it's already a very slow logical path anyway.\n\nBTW: nothing related but, what's the use of `isdir = not isfile and child.isdir()` ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/55", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/55/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/55/events", "html_url": "https://github.com/jaraco/path/issues/55", "id": 26231417, "node_id": "MDU6SXNzdWUyNjIzMTQxNw==", "number": 55, "title": "Adding a website in the documentation category", "user": {"login": "yasoob", "id": 3696393, "node_id": "MDQ6VXNlcjM2OTYzOTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3696393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yasoob", "html_url": "https://github.com/yasoob", "followers_url": "https://api.github.com/users/yasoob/followers", "following_url": "https://api.github.com/users/yasoob/following{/other_user}", "gists_url": "https://api.github.com/users/yasoob/gists{/gist_id}", "starred_url": "https://api.github.com/users/yasoob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yasoob/subscriptions", "organizations_url": "https://api.github.com/users/yasoob/orgs", "repos_url": "https://api.github.com/users/yasoob/repos", "events_url": "https://api.github.com/users/yasoob/events{/privacy}", "received_events_url": "https://api.github.com/users/yasoob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-01-24T10:25:18Z", "updated_at": "2014-01-25T16:52:52Z", "closed_at": "2014-01-25T16:52:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have written a post about writing clean-up scripts in Python using `path.py`. It has got a lot of attention recently and I believe that it will also aid people in learning path.py. If you think this is viable then feel free to add this link to the `README.md` file. http://freepythontips.wordpress.com/2014/01/23/python-101-writing-a-cleanup-script/\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/54", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/54/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/54/events", "html_url": "https://github.com/jaraco/path/issues/54", "id": 24702501, "node_id": "MDU6SXNzdWUyNDcwMjUwMQ==", "number": 54, "title": "Implement parents[] like in pathlib", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-12-23T11:23:56Z", "updated_at": "2015-07-13T02:31:16Z", "closed_at": "2015-07-13T02:31:16Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The pathlib module is like a limited path.py. It does have some good ideas such as: \n\nhttp://docs.python.org/dev/library/pathlib.html#pathlib.PurePath.parents\n\nIt would be nice to have it in path.py. I often do p.parent.parent.parent, this would make it shorter/\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/53", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/53/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/53/events", "html_url": "https://github.com/jaraco/path/issues/53", "id": 23373170, "node_id": "MDU6SXNzdWUyMzM3MzE3MA==", "number": 53, "title": "Add inplace file modification", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-11-27T08:32:27Z", "updated_at": "2014-08-14T21:44:18Z", "closed_at": "2014-01-30T16:39:43Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "This context manager allow a shortcut to modify a file in place :\n\nhttp://www.zopatista.com/python/2013/11/26/inplace-file-rewriting/\n\nWe could use it with a syntaxe like : \n\n```\nwith path('stuff').inplace(encoding='utf8'') as (orig, res):\n    for line in orig:\n        res.write(line.upper())\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/51", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/51/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/51/events", "html_url": "https://github.com/jaraco/path/issues/51", "id": 22340511, "node_id": "MDU6SXNzdWUyMjM0MDUxMQ==", "number": 51, "title": "New Feature Request: Compare files and produce list of newer ones", "user": {"login": "BruceEckel", "id": 1001900, "node_id": "MDQ6VXNlcjEwMDE5MDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1001900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BruceEckel", "html_url": "https://github.com/BruceEckel", "followers_url": "https://api.github.com/users/BruceEckel/followers", "following_url": "https://api.github.com/users/BruceEckel/following{/other_user}", "gists_url": "https://api.github.com/users/BruceEckel/gists{/gist_id}", "starred_url": "https://api.github.com/users/BruceEckel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BruceEckel/subscriptions", "organizations_url": "https://api.github.com/users/BruceEckel/orgs", "repos_url": "https://api.github.com/users/BruceEckel/repos", "events_url": "https://api.github.com/users/BruceEckel/events{/privacy}", "received_events_url": "https://api.github.com/users/BruceEckel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-11-08T14:43:13Z", "updated_at": "2013-11-09T01:03:26Z", "closed_at": "2013-11-09T01:03:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "def newer(targets, sources, flags):\n    \"\"\"\n    Compares sources to targets and produces a list of files where the sources are\n    newer than the targets. Sources & targets can be:\n    1. Single files\n    2. Lists of files\n    3. Directories -- all files that exist in both directories are compared. Directories\n        are recursed.\n    4. Lists of files and directories. These are compared positionally.\n    5. flag indicates whether file name/contents should be the same on source as\n        target, or to compare timestamp only.\n    6. Another flag indicates that lack of target file means \"not up to date.\"\n    \"\"\"\n\n(Was using paver which doesn't have any support for this kind of checking; thought I'd float the idea by you to see if it's a fit for path).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/50", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/50/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/50/events", "html_url": "https://github.com/jaraco/path/issues/50", "id": 22304028, "node_id": "MDU6SXNzdWUyMjMwNDAyOA==", "number": 50, "title": "add ifiles and idirs for case insensitive fnmatching.", "user": {"login": "whardier", "id": 305301, "node_id": "MDQ6VXNlcjMwNTMwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/305301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whardier", "html_url": "https://github.com/whardier", "followers_url": "https://api.github.com/users/whardier/followers", "following_url": "https://api.github.com/users/whardier/following{/other_user}", "gists_url": "https://api.github.com/users/whardier/gists{/gist_id}", "starred_url": "https://api.github.com/users/whardier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whardier/subscriptions", "organizations_url": "https://api.github.com/users/whardier/orgs", "repos_url": "https://api.github.com/users/whardier/repos", "events_url": "https://api.github.com/users/whardier/events{/privacy}", "received_events_url": "https://api.github.com/users/whardier/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2013-11-07T23:16:18Z", "updated_at": "2013-11-09T00:46:20Z", "closed_at": "2013-11-09T00:46:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "first compile regex for fnmatch then apply the match using the case insensitive re flag.\n\nHonestly.. this may just be a crazy corner case.. I work with satellite imagery and it's nice to be able to match _.TIF_ and _.tif_ and _.TiF_\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/49", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/49/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/49/events", "html_url": "https://github.com/jaraco/path/issues/49", "id": 22014992, "node_id": "MDU6SXNzdWUyMjAxNDk5Mg==", "number": 49, "title": "[Feature request] Improved OSError handling", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-11-03T05:07:12Z", "updated_at": "2014-09-27T07:18:33Z", "closed_at": "2014-09-27T07:18:33Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "path.py could check the errno :\n\nhttp://docs.python.org/2/library/errno.html\n\nThen check the file permissions and user permissions/group, etc.\n\nThis way it could give a move complete error message.\n\nE.G:\n\nInstead of saying : \"permission denied\". It could say : \"permission denied : the file has 755 and belong to user \"user1\" while this script is executer as user \"user2\" and don't belong to  \"user1\" group.\n\nThis result would be of course different from OS to OS.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/46", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/46/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/46/events", "html_url": "https://github.com/jaraco/path/issues/46", "id": 21142762, "node_id": "MDU6SXNzdWUyMTE0Mjc2Mg==", "number": 46, "title": "Missing documentation", "user": {"login": "Nodd", "id": 506348, "node_id": "MDQ6VXNlcjUwNjM0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/506348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nodd", "html_url": "https://github.com/Nodd", "followers_url": "https://api.github.com/users/Nodd/followers", "following_url": "https://api.github.com/users/Nodd/following{/other_user}", "gists_url": "https://api.github.com/users/Nodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nodd/subscriptions", "organizations_url": "https://api.github.com/users/Nodd/orgs", "repos_url": "https://api.github.com/users/Nodd/repos", "events_url": "https://api.github.com/users/Nodd/events{/privacy}", "received_events_url": "https://api.github.com/users/Nodd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2013-10-17T09:55:48Z", "updated_at": "2013-10-27T18:02:59Z", "closed_at": "2013-10-27T18:02:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The sphinx documentation is missing all methods without a docstring. The best thing to do would be to add a docstring to every method, but in the meantime I think that it is possible to include methods with no docstrings in the documentation. For most methods this would be enough.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/45", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/45/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/45/events", "html_url": "https://github.com/jaraco/path/issues/45", "id": 21138606, "node_id": "MDU6SXNzdWUyMTEzODYwNg==", "number": 45, "title": "Provide format method", "user": {"login": "Nodd", "id": 506348, "node_id": "MDQ6VXNlcjUwNjM0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/506348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nodd", "html_url": "https://github.com/Nodd", "followers_url": "https://api.github.com/users/Nodd/followers", "following_url": "https://api.github.com/users/Nodd/following{/other_user}", "gists_url": "https://api.github.com/users/Nodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nodd/subscriptions", "organizations_url": "https://api.github.com/users/Nodd/orgs", "repos_url": "https://api.github.com/users/Nodd/repos", "events_url": "https://api.github.com/users/Nodd/events{/privacy}", "received_events_url": "https://api.github.com/users/Nodd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2013-10-17T08:26:17Z", "updated_at": "2013-10-18T18:09:59Z", "closed_at": "2013-10-18T18:09:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm trying to be a good boy here and use the `.format()` method rather than `%` to format my strings. The problem is that using `.format()` with a path returns a string and not a path.\n\nCould you provide a `.format()` method which returns a path ?\n\n```\n>>> from path import path\n>>> p = path(\"test {}\")\n>>> p\npath(u'test {}')\n>>> p.format(\"failed\")\nu'test failed'\n```\n\nNote tha tthe behavior is the same with `%`, i don't know if it can be changed:\n\n```\n>>> from path import path\n>>> p = path(\"test %s\")\n>>> p\npath(u'test %s')\n>>> p % \"failed\"\nu'test failed'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/43", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/43/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/43/events", "html_url": "https://github.com/jaraco/path/issues/43", "id": 19255111, "node_id": "MDU6SXNzdWUxOTI1NTExMQ==", "number": 43, "title": "Path+file name, file in path", "user": {"login": "ludoo", "id": 66007, "node_id": "MDQ6VXNlcjY2MDA3", "avatar_url": "https://avatars3.githubusercontent.com/u/66007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ludoo", "html_url": "https://github.com/ludoo", "followers_url": "https://api.github.com/users/ludoo/followers", "following_url": "https://api.github.com/users/ludoo/following{/other_user}", "gists_url": "https://api.github.com/users/ludoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ludoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ludoo/subscriptions", "organizations_url": "https://api.github.com/users/ludoo/orgs", "repos_url": "https://api.github.com/users/ludoo/repos", "events_url": "https://api.github.com/users/ludoo/events{/privacy}", "received_events_url": "https://api.github.com/users/ludoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-09-10T12:14:00Z", "updated_at": "2013-09-18T13:36:29Z", "closed_at": "2013-09-18T13:36:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I used to love jorendorff's original path module, and just picked up this updated version to use on a project I'm working on. My first quick tests in the console left me a bit puzzled with a few corner cases. Maybe they are by design, but I think intuitively they should work differently.\n### Path + file\n\n``` python\n>>> path('/tmp') + 'README.txt'\npath(u'/tmpREADME.txt')\n>>> path('/tmp/') + 'README.txt'\npath(u'/tmp/README.txt')\n```\n\nThe trailing slash makes a difference, but both paths point to the same folder, so adding a file name should intuitively yield the same path. Especially considering this:\n\n``` python\n>>> path('/tmp/').abspath()\npath(u'/tmp')\n```\n\nIf you call `abspath()` on a path, the trailing slash gets stripped.\n### File in path\n\n``` python\n>>> p = path('./')\n>>> p.files()[0]\npath(u'./README.txt')\n>>> (p + 'README.txt').isfile()\nTrue\n>>> 'README.txt' in p\nFalse\n```\n\nIt would maybe make sense if a path behaved in this respect like a collection of files and folders instead of a string.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/41", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/41/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/41/events", "html_url": "https://github.com/jaraco/path/issues/41", "id": 16728872, "node_id": "MDU6SXNzdWUxNjcyODg3Mg==", "number": 41, "title": "path.walkdirs() unicode problem", "user": {"login": "franciscolourenco", "id": 208149, "node_id": "MDQ6VXNlcjIwODE0OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/208149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/franciscolourenco", "html_url": "https://github.com/franciscolourenco", "followers_url": "https://api.github.com/users/franciscolourenco/followers", "following_url": "https://api.github.com/users/franciscolourenco/following{/other_user}", "gists_url": "https://api.github.com/users/franciscolourenco/gists{/gist_id}", "starred_url": "https://api.github.com/users/franciscolourenco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/franciscolourenco/subscriptions", "organizations_url": "https://api.github.com/users/franciscolourenco/orgs", "repos_url": "https://api.github.com/users/franciscolourenco/repos", "events_url": "https://api.github.com/users/franciscolourenco/events{/privacy}", "received_events_url": "https://api.github.com/users/franciscolourenco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2013-07-14T15:04:01Z", "updated_at": "2013-10-28T20:07:30Z", "closed_at": "2013-10-27T17:57:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\nTraceback (most recent call last):\n  File \"./cleanup.py\", line 104, in <module>\n    for subdir in reversed(list(path(dir).walkdirs())):\n  File \"/usr/local/lib/python2.7/dist-packages/path.py\", line 535, in walkdirs\n    dirs = self.dirs()\n  File \"/usr/local/lib/python2.7/dist-packages/path.py\", line 450, in dirs\n    return [p for p in self.listdir(pattern) if p.isdir()]\n  File \"/usr/local/lib/python2.7/dist-packages/path.py\", line 437, in listdir\n    return [self / child for child in names]\n  File \"/usr/local/lib/python2.7/dist-packages/path.py\", line 201, in __div__\n    return self._next_class(self.module.join(self, rel))\n  File \"/usr/lib/python2.7/posixpath.py\", line 69, in join\n    path +=  b\n  File \"/usr/local/lib/python2.7/dist-packages/path.py\", line 185, in __add__\n    return self._next_class(super(path, self).__add__(more))\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xb0 in position 11: ordinal not in range(128)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/40", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/40/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/40/events", "html_url": "https://github.com/jaraco/path/issues/40", "id": 16722392, "node_id": "MDU6SXNzdWUxNjcyMjM5Mg==", "number": 40, "title": "How to assert if path is file or directory?", "user": {"login": "franciscolourenco", "id": 208149, "node_id": "MDQ6VXNlcjIwODE0OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/208149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/franciscolourenco", "html_url": "https://github.com/franciscolourenco", "followers_url": "https://api.github.com/users/franciscolourenco/followers", "following_url": "https://api.github.com/users/franciscolourenco/following{/other_user}", "gists_url": "https://api.github.com/users/franciscolourenco/gists{/gist_id}", "starred_url": "https://api.github.com/users/franciscolourenco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/franciscolourenco/subscriptions", "organizations_url": "https://api.github.com/users/franciscolourenco/orgs", "repos_url": "https://api.github.com/users/franciscolourenco/repos", "events_url": "https://api.github.com/users/franciscolourenco/events{/privacy}", "received_events_url": "https://api.github.com/users/franciscolourenco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-07-14T01:22:31Z", "updated_at": "2013-07-14T01:33:18Z", "closed_at": "2013-07-14T01:33:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there a method to know if a path is a file or a directory?\nThanks\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/35", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/35/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/35/events", "html_url": "https://github.com/jaraco/path/issues/35", "id": 14668105, "node_id": "MDU6SXNzdWUxNDY2ODEwNQ==", "number": 35, "title": "Make write_bytes return self and write_text return the result of write_bytes", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-05-23T10:49:12Z", "updated_at": "2013-05-25T16:32:48Z", "closed_at": "2013-05-25T16:32:48Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "So we can chain these methods. \n\nThis allow to quickly create a file by doing something like: \n\n```\nfoo = (tempdir()  / 'test.txt').write_text('bar')\n```\n\nAnd have a reference to it.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/34", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/34/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/34/events", "html_url": "https://github.com/jaraco/path/issues/34", "id": 14630896, "node_id": "MDU6SXNzdWUxNDYzMDg5Ng==", "number": 34, "title": "[feature request] Add filename tools", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-05-22T16:03:53Z", "updated_at": "2014-09-27T07:17:32Z", "closed_at": "2014-09-27T07:17:32Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "There are some problems people encounter file manipulating path that could deserve some love : \n- finding a new name to create / copy a file to a place with a file with a similar name exists (with a suffix, or a counter)\n- normalizing names so they become cross platform \"safe\" such as killing non ascii chars, replacing spaces with underscore and optionaly limiting the name size.\n\nDo you think such code would have it's place in path.py ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/33", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/33/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/33/events", "html_url": "https://github.com/jaraco/path/issues/33", "id": 14630049, "node_id": "MDU6SXNzdWUxNDYzMDA0OQ==", "number": 33, "title": "Refactoring _hash", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-05-22T15:49:05Z", "updated_at": "2013-05-23T10:43:21Z", "closed_at": "2013-05-23T10:43:21Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "We could extract this piece of code from _hash():\n\n```\n\n    def _hash(self, hash_name):\n        with self.open('rb') as f:\n            m = hashlib.new(hash_name)\n\n            # from here \n            while True:\n                d = f.read(8192)\n                if not d:\n                    break\n\n            # to here\n                m.update(d)\n            return m\n```\n\nAnd make it a generator. Indeed, while loops are ugly in Python, and it would be nice to have a iterable for of doing this. E.G:\n\n```\n    def chunks(size, *args, **kwargs):\n        with open(self, *args, **kwargs) as f:\n            while True:\n                yield f.read(8192)\n                if not d:\n                    break\n```\n\nAnd so any code like _hash would become as simple as :\n\n```\n    def _hash(self, hash_name):\n        m = hashlib.new(hash_name)\n        for chunk in self.chunk(8192)\n            m.update(chunk)\n        return m\n```\n\nAgain, if you think I'm opening too many issues and not enough PL, let me know, I writting that on the fly while I'm batching the code review for #26 \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/32", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/32/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/32/events", "html_url": "https://github.com/jaraco/path/issues/32", "id": 14629418, "node_id": "MDU6SXNzdWUxNDYyOTQxOA==", "number": 32, "title": "[feature request] Provide a cd() method", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-05-22T15:37:40Z", "updated_at": "2013-07-02T15:11:00Z", "closed_at": "2013-07-02T15:11:00Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Provide a cd() method such as: \n\n```\ndef cd(self):\n    os.chdir(self)\n```\n\nIt would be very handy in the shell, where using the context manager is not confortable.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/31", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/31/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/31/events", "html_url": "https://github.com/jaraco/path/issues/31", "id": 14629097, "node_id": "MDU6SXNzdWUxNDYyOTA5Nw==", "number": 31, "title": "[feature request] Make chown() accept user names and group names as params", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-05-22T15:31:17Z", "updated_at": "2014-09-27T07:12:40Z", "closed_at": "2014-09-27T07:12:40Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Uid and Gui works, but are are to manipulate. Since path.py is all about making your life easier, what about making this as easy as knowing the username ? And if nothing is passed, it could even be the current user by default.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jaraco/path/issues/30", "repository_url": "https://api.github.com/repos/jaraco/path", "labels_url": "https://api.github.com/repos/jaraco/path/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/jaraco/path/issues/30/comments", "events_url": "https://api.github.com/repos/jaraco/path/issues/30/events", "html_url": "https://github.com/jaraco/path/issues/30", "id": 14628989, "node_id": "MDU6SXNzdWUxNDYyODk4OQ==", "number": 30, "title": "[feature request] make chown() parameters optionals", "user": {"login": "sametmax", "id": 1673950, "node_id": "MDQ6VXNlcjE2NzM5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1673950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sametmax", "html_url": "https://github.com/sametmax", "followers_url": "https://api.github.com/users/sametmax/followers", "following_url": "https://api.github.com/users/sametmax/following{/other_user}", "gists_url": "https://api.github.com/users/sametmax/gists{/gist_id}", "starred_url": "https://api.github.com/users/sametmax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sametmax/subscriptions", "organizations_url": "https://api.github.com/users/sametmax/orgs", "repos_url": "https://api.github.com/users/sametmax/repos", "events_url": "https://api.github.com/users/sametmax/events{/privacy}", "received_events_url": "https://api.github.com/users/sametmax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2013-05-22T15:29:23Z", "updated_at": "2013-05-26T14:09:36Z", "closed_at": "2013-05-26T14:06:31Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Sometime you want to change the group. Sometime you want to change the owner. But not both.\n\nThis requires reading the current ownership, to assign back the same as the original one when we don't want to change it since os.chown() force us to pass 2 params.\n", "performed_via_github_app": null, "score": 1.0}]}