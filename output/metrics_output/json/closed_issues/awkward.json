{"total_count": 110, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/253", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/253/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/253/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/253/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/253", "id": 671115489, "node_id": "MDU6SXNzdWU2NzExMTU0ODk=", "number": 253, "title": "Small detail; broadcasting seems to work a little different to what is implied in the documentation.", "user": {"login": "HenryDayHall", "id": 12996763, "node_id": "MDQ6VXNlcjEyOTk2NzYz", "avatar_url": "https://avatars3.githubusercontent.com/u/12996763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HenryDayHall", "html_url": "https://github.com/HenryDayHall", "followers_url": "https://api.github.com/users/HenryDayHall/followers", "following_url": "https://api.github.com/users/HenryDayHall/following{/other_user}", "gists_url": "https://api.github.com/users/HenryDayHall/gists{/gist_id}", "starred_url": "https://api.github.com/users/HenryDayHall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HenryDayHall/subscriptions", "organizations_url": "https://api.github.com/users/HenryDayHall/orgs", "repos_url": "https://api.github.com/users/HenryDayHall/repos", "events_url": "https://api.github.com/users/HenryDayHall/events{/privacy}", "received_events_url": "https://api.github.com/users/HenryDayHall/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 962512581, "node_id": "MDU6TGFiZWw5NjI1MTI1ODE=", "url": "https://api.github.com/repos/scikit-hep/awkward-array/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-08-01T19:06:36Z", "updated_at": "2020-08-06T16:55:05Z", "closed_at": "2020-08-02T08:09:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "So in the [documentation](https://github.com/scikit-hep/awkward-array#numpy-like-broadcasting) this numpy broadcasting is given as an example;\r\n\r\n`numpy.array([[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]]) + numpy.array([[100], [200]])`\r\n\r\nBut actually awkward, and awkward1, don't like that, they both give a ValueError;\r\n\r\n`awkward.fromiter([[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]]) + awkward.fromiter([[100], [200]])`\r\nand \r\n`awkward1.from_iter([[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]]) + awkward1.from_iter([[100], [200]])`\r\nboth give ValueError.\r\n\r\nSo something about awkward broadcasting is a little different - which isn't an issue itself, the same result can be achieved by flattening the second array. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/252", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/252/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/252/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/252", "id": 653132477, "node_id": "MDU6SXNzdWU2NTMxMzI0Nzc=", "number": 252, "title": "JaggedArray.fromiter() functions fails for python lists ", "user": {"login": "sitongan", "id": 8235751, "node_id": "MDQ6VXNlcjgyMzU3NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/8235751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sitongan", "html_url": "https://github.com/sitongan", "followers_url": "https://api.github.com/users/sitongan/followers", "following_url": "https://api.github.com/users/sitongan/following{/other_user}", "gists_url": "https://api.github.com/users/sitongan/gists{/gist_id}", "starred_url": "https://api.github.com/users/sitongan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sitongan/subscriptions", "organizations_url": "https://api.github.com/users/sitongan/orgs", "repos_url": "https://api.github.com/users/sitongan/repos", "events_url": "https://api.github.com/users/sitongan/events{/privacy}", "received_events_url": "https://api.github.com/users/sitongan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-08T09:17:06Z", "updated_at": "2020-07-08T13:43:47Z", "closed_at": "2020-07-08T12:04:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "#170 \r\n\r\n`awkward.JaggedArray.fromiter([[20.2, 10.1, 30.3, 50.5], [50.5], [60]])`\r\n\r\nfails on jupyter notebook only with numpy 1.18.5 and python 3.7.7 on awkward 0.12.22 build pyh9f0ad1d_0 from conda-forge\r\n\r\n**Update**\r\n\r\nfor fresh conda environment with numpy 1.18.5 and python 3.7.7 on awkward 0.12.22 build pyh9f0ad1d_0 from conda-forge: \r\n\r\n- on my own laptop MacOS 10.15.5 with Clang 4.0.1 it fails on jupyter notebook only, not in python\r\n\r\n- on my GPU environment with GCC 7.3.0 it fails in both python and jupyter notebook\r\n\r\n`---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-4-839607af96da> in <module>\r\n----> 1 awkward.JaggedArray.fromiter([[20.2, 10.1, 30.3, 50.5], [50.5], [60]])\r\n\r\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/awkward/array/jagged.py in fromiter(cls, iterable)\r\n    150             return cls.JaggedArray.fget(None)([], [], [])\r\n    151         else:\r\n--> 152             return awkward.generate.fromiter(iterable, awkwardlib=cls.awkward.fget(None))\r\n    153 \r\n    154     @classmethod\r\n\r\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/awkward/generate.py in fromiter(iterable, awkwardlib, **options)\r\n    440         fillable = fillable.append(obj, typeof(obj))\r\n    441 \r\n--> 442     return fillable.finalize(**options)\r\n    443 \r\n    444 def fromiterchunks(iterable, chunksize, awkwardlib=None, **options):\r\n\r\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/awkward/generate.py in finalize(self, **options)\r\n    216 \r\n    217     def finalize(self, **options):\r\n--> 218         return self.awkwardlib.JaggedArray.fromoffsets(self.offsets, self.content.finalize(**options))\r\n    219 \r\n    220 class TableFillable(Fillable):\r\n\r\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/awkward/array/jagged.py in fromoffsets(cls, offsets, content)\r\n    154     @classmethod\r\n    155     def fromoffsets(cls, offsets, content):\r\n--> 156         offsets = cls._util_toarray(offsets, cls.INDEXTYPE, cls.numpy.ndarray)\r\n    157         return cls(offsets[:-1], offsets[1:], content)\r\n    158 \r\n\r\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/awkward/array/base.py in _util_toarray(cls, value, defaultdtype, passthrough)\r\n    319         else:\r\n    320             try:\r\n--> 321                 return cls.numpy.frombuffer(value, dtype=getattr(value, \"dtype\", defaultdtype)).reshape(getattr(value, \"shape\", -1))\r\n    322             except AttributeError:\r\n    323                 if len(value) == 0:\r\n\r\nTypeError: a bytes-like object is required, not 'list'`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/250", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/250/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/250/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/250", "id": 651384936, "node_id": "MDU6SXNzdWU2NTEzODQ5MzY=", "number": 250, "title": "AttributeError when trying to read a particular format of awkward array", "user": {"login": "HenryDayHall", "id": 12996763, "node_id": "MDQ6VXNlcjEyOTk2NzYz", "avatar_url": "https://avatars3.githubusercontent.com/u/12996763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HenryDayHall", "html_url": "https://github.com/HenryDayHall", "followers_url": "https://api.github.com/users/HenryDayHall/followers", "following_url": "https://api.github.com/users/HenryDayHall/following{/other_user}", "gists_url": "https://api.github.com/users/HenryDayHall/gists{/gist_id}", "starred_url": "https://api.github.com/users/HenryDayHall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HenryDayHall/subscriptions", "organizations_url": "https://api.github.com/users/HenryDayHall/orgs", "repos_url": "https://api.github.com/users/HenryDayHall/repos", "events_url": "https://api.github.com/users/HenryDayHall/events{/privacy}", "received_events_url": "https://api.github.com/users/HenryDayHall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-06T09:22:14Z", "updated_at": "2020-07-06T16:42:52Z", "closed_at": "2020-07-06T16:42:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Reading and loading a particular shape of awkward array, that has been created by slicing a larger array, gives;\r\n`AttributeError: 'bytes' object has no attribute 'ctypes'`\r\n\r\nHere is an example that recreates the problem;\r\n```\r\nimport os\r\nimport awkward\r\n\r\n\r\ndef test_split_unfinished():\r\n    # clean any existing mess\r\n    save_name = \"test.awkd\"\r\n    try:\r\n        os.remove(save_name)\r\n    except FileNotFoundError:\r\n        pass\r\n    idxs = slice(1, None)\r\n    # works ~~~~~~~~~~~~~~~~\r\n    content = awkward.fromiter([[], []])\r\n    awkward.save(save_name, content[idxs])\r\n    found = awkward.load(save_name)\r\n    print(found)\r\n    os.remove(save_name)\r\n    # works ~~~~~~~~~~~~~~~~\r\n    content = awkward.fromiter([[], 0])\r\n    awkward.save(save_name, content[idxs])\r\n    found = awkward.load(save_name)\r\n    print(found)\r\n    os.remove(save_name)\r\n    # works ~~~~~~~~~~~~~~~~\r\n    content = awkward.fromiter([[0], []])\r\n    awkward.save(save_name, content[idxs])\r\n    found = awkward.load(save_name)\r\n    print(found)\r\n    os.remove(save_name)\r\n    # fails ~~~~~~~~~~~~~~~~\r\n    content = awkward.fromiter([[[]], []])\r\n    awkward.save(save_name, content[idxs])\r\n    found = awkward.load(save_name)\r\n    print(found)\r\n    os.remove(save_name)\r\n\r\n```\r\nI think this must be a bug, because I don't see anything wrong with what is being attempted?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/249", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/249/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/249/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/249", "id": 643207552, "node_id": "MDU6SXNzdWU2NDMyMDc1NTI=", "number": 249, "title": "mean, std fail on ChunkedArrays", "user": {"login": "lhenkelm", "id": 37067359, "node_id": "MDQ6VXNlcjM3MDY3MzU5", "avatar_url": "https://avatars3.githubusercontent.com/u/37067359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lhenkelm", "html_url": "https://github.com/lhenkelm", "followers_url": "https://api.github.com/users/lhenkelm/followers", "following_url": "https://api.github.com/users/lhenkelm/following{/other_user}", "gists_url": "https://api.github.com/users/lhenkelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/lhenkelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lhenkelm/subscriptions", "organizations_url": "https://api.github.com/users/lhenkelm/orgs", "repos_url": "https://api.github.com/users/lhenkelm/repos", "events_url": "https://api.github.com/users/lhenkelm/events{/privacy}", "received_events_url": "https://api.github.com/users/lhenkelm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-22T16:26:31Z", "updated_at": "2020-06-22T16:48:20Z", "closed_at": "2020-06-22T16:48:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like the error is specific to mean and std. Min, max, and count seem to work ok, I did not try other reducers. I am not sure where the difference originates, but I only saw it for ChunkedArrays. Here is a small example:\r\n```python\r\n>>> import awkward\r\n>>> import numpy as np\r\n>>> chunks = [\r\n...     np.arange(5),\r\n...     np.arange(5),\r\n...     np.arange(5)\r\n... ]\r\n a = awkward.ChunkedArray(chunks, [5, 5, 5])\r\n>>> a.mean()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \".../venv/lib64/python3.6/site-packages/awkward/array/base.py\", line 223, in mean\r\n    return self.numpy.true_divide(self.sum(), self.count())\r\n  File \".../venv/lib64/python3.6/site-packages/awkward/array/base.py\", line 196, in count\r\n    return self._reduce(None, 0, None)\r\n  File \".../venv/lib64/python3.6/site-packages/awkward/array/chunked.py\", line 698, in _reduce\r\n    this = self._util_reduce(chunk[:self._chunksizes[chunkid]], ufunc, identity, dtype)\r\n  File \".../venv/lib64/python3.6/site-packages/awkward/array/base.py\", line 554, in _util_reduce\r\n    return ufunc.reduce(array, axis=None)\r\nAttributeError: 'NoneType' object has no attribute 'reduce'\r\n>>> b = awkward.fromiter(np.arange(15))\r\n>>> b.mean()\r\n7.0\r\n```\r\nThis also affects the behavior when calling the numpy functions on the awkward objects:\r\n\r\n```python\r\n>>> np.mean(b)\r\n7.0\r\n>>> np.mean(a)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"<__array_function__ internals>\", line 6, in mean\r\n  File \".../venv/lib64/python3.6/site-packages/numpy/core/fromnumeric.py\", line 3370, in mean\r\n    return mean(axis=axis, dtype=dtype, out=out, **kwargs)\r\nTypeError: mean() got an unexpected keyword argument 'axis'\r\n```\r\nFor now I am working around this by constructing np.arrays and using std, mean of these, so its not super urgent.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/245", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/245/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/245/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/245", "id": 613985028, "node_id": "MDU6SXNzdWU2MTM5ODUwMjg=", "number": 245, "title": "Syntax warning due to comparison of literals using is in Python 3.8", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-07T11:32:58Z", "updated_at": "2020-05-07T13:25:37Z", "closed_at": "2020-05-07T13:24:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfind . -iname '*.py' | grep -Ev 'test.py' | xargs -P4 -I{} python3.8 -Wall -m py_compile {}\r\n./awkward/array/chunked.py:217: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\r\n  if tpe is not None and tpe is not ():\r\n./awkward/array/chunked.py:222: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\r\n  if tpe is not None and tpe is not ():\r\n./awkward/array/chunked.py:228: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\r\n  if self._types[i] is None or self._types[i] is () or self._types[i] is tpe:\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/243", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/243/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/243/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/243", "id": 609273250, "node_id": "MDU6SXNzdWU2MDkyNzMyNTA=", "number": 243, "title": "broken link in readme", "user": {"login": "cranmer", "id": 4458890, "node_id": "MDQ6VXNlcjQ0NTg4OTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/4458890?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cranmer", "html_url": "https://github.com/cranmer", "followers_url": "https://api.github.com/users/cranmer/followers", "following_url": "https://api.github.com/users/cranmer/following{/other_user}", "gists_url": "https://api.github.com/users/cranmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/cranmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cranmer/subscriptions", "organizations_url": "https://api.github.com/users/cranmer/orgs", "repos_url": "https://api.github.com/users/cranmer/repos", "events_url": "https://api.github.com/users/cranmer/events{/privacy}", "received_events_url": "https://api.github.com/users/cranmer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-29T18:41:50Z", "updated_at": "2020-04-29T19:09:33Z", "closed_at": "2020-04-29T19:09:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "The image under the introduction heading is broken.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/241", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/241/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/241/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/241", "id": 595270033, "node_id": "MDU6SXNzdWU1OTUyNzAwMzM=", "number": 241, "title": "TypeError when using array.mean(weights)", "user": {"login": "marinang", "id": 24250309, "node_id": "MDQ6VXNlcjI0MjUwMzA5", "avatar_url": "https://avatars3.githubusercontent.com/u/24250309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marinang", "html_url": "https://github.com/marinang", "followers_url": "https://api.github.com/users/marinang/followers", "following_url": "https://api.github.com/users/marinang/following{/other_user}", "gists_url": "https://api.github.com/users/marinang/gists{/gist_id}", "starred_url": "https://api.github.com/users/marinang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marinang/subscriptions", "organizations_url": "https://api.github.com/users/marinang/orgs", "repos_url": "https://api.github.com/users/marinang/repos", "events_url": "https://api.github.com/users/marinang/events{/privacy}", "received_events_url": "https://api.github.com/users/marinang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-06T16:52:39Z", "updated_at": "2020-04-06T17:03:05Z", "closed_at": "2020-04-06T17:03:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hello when I do\r\n\r\n```python \r\n\r\neff = awkward.fromiter([0.66922095, 0.62967431, 0.66882649, 0.73115299, 0.76491228, 0.7925368,\r\n 0.80567108, 0.75731822, 0.74576271, 0.75884956])\r\nerr = awkward.fromiter([0.01681407, 0.01677153, 0.01262797, 0.01043851, 0.00888083, 0.00750265,\r\n 0.00769369, 0.01317376, 0.02142619, 0.02012114])\r\n\r\neff.mean(1/err*2)\r\n\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-25-15b803a33766> in <module>\r\n----> 1 eff.mean(1/err*2)\r\n\r\n~/anaconda3/envs/tfn2/lib/python3.7/site-packages/numpy/core/_methods.py in _mean(a, axis, dtype, out, keepdims)\r\n    136 \r\n    137     is_float16_result = False\r\n--> 138     rcount = _count_reduce_items(arr, axis)\r\n    139     # Make this warning show up first\r\n    140     if rcount == 0:\r\n\r\n~/anaconda3/envs/tfn2/lib/python3.7/site-packages/numpy/core/_methods.py in _count_reduce_items(arr, axis)\r\n     55     items = 1\r\n     56     for ax in axis:\r\n---> 57         items *= arr.shape[ax]\r\n     58     return items\r\n     59 \r\n\r\nTypeError: only integer scalar arrays can be converted to a scalar index\r\n```\r\n\r\nThis was working before, I guess this is due to a change in NumPy.  I can use `np.average` instead.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/240", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/240/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/240/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/240", "id": 589580830, "node_id": "MDU6SXNzdWU1ODk1ODA4MzA=", "number": 240, "title": "awkward method names", "user": {"login": "HDembinski", "id": 2631586, "node_id": "MDQ6VXNlcjI2MzE1ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HDembinski", "html_url": "https://github.com/HDembinski", "followers_url": "https://api.github.com/users/HDembinski/followers", "following_url": "https://api.github.com/users/HDembinski/following{/other_user}", "gists_url": "https://api.github.com/users/HDembinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/HDembinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HDembinski/subscriptions", "organizations_url": "https://api.github.com/users/HDembinski/orgs", "repos_url": "https://api.github.com/users/HDembinski/repos", "events_url": "https://api.github.com/users/HDembinski/events{/privacy}", "received_events_url": "https://api.github.com/users/HDembinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-03-28T13:48:52Z", "updated_at": "2020-03-31T21:10:16Z", "closed_at": "2020-03-30T14:07:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Python uses snake_case for most methods. awkward-array has some long all-lowercase public methods in some classes without spaces, which I find very hard to read. Examples:\r\n```\r\noffsetsaliased\r\nstartsstops2parents\r\n```\r\nI suppose this style originates from numpy, some examples can be found here:\r\nhttps://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html\r\n\r\nTo my surprise, PeP8 does not prohibit this style, but at least discourages it:\r\nhttps://www.python.org/dev/peps/pep-0008/#function-and-variable-names\r\n\"Function names should be lowercase, with words separated by underscores as necessary to improve readability.\"\r\n\r\nI personally can see no advantage in naming something \"offsetsaliased\" over \"offsets_aliased\", the latter is clearly more readable. Perhaps it is not too late for awkward1 to do this better?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/238", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/238/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/238/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/238", "id": 576304584, "node_id": "MDU6SXNzdWU1NzYzMDQ1ODQ=", "number": 238, "title": "TLorentzVectorArray yields different values depending on masking order", "user": {"login": "mverzett", "id": 2329596, "node_id": "MDQ6VXNlcjIzMjk1OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2329596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mverzett", "html_url": "https://github.com/mverzett", "followers_url": "https://api.github.com/users/mverzett/followers", "following_url": "https://api.github.com/users/mverzett/following{/other_user}", "gists_url": "https://api.github.com/users/mverzett/gists{/gist_id}", "starred_url": "https://api.github.com/users/mverzett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mverzett/subscriptions", "organizations_url": "https://api.github.com/users/mverzett/orgs", "repos_url": "https://api.github.com/users/mverzett/repos", "events_url": "https://api.github.com/users/mverzett/events{/privacy}", "received_events_url": "https://api.github.com/users/mverzett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-05T14:44:56Z", "updated_at": "2020-03-06T17:00:21Z", "closed_at": "2020-03-06T17:00:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi again! Apologies for bothering you way too often. This time I am quite positive that something strange is going on, but bear with me if it is indeed the intended behaviour:\r\n\r\nBoth ```prompt_mu``` and ```second_mu``` are coffea's ```JaggedCandidateArrays``` with only one element in each event, therefore flattening makes sense. The issue appears rarely (< 0.1%) and does not seem linked to coffea's classes, I will try to make a simple set-up to reproduce the issue.\r\n\r\n```\r\n(Pdb) (skim.prompt_mu.p4[msk] + skim.second_mu.p4[msk])[0,0].mass\r\n0.1089482379549958\r\n(Pdb) (skim.prompt_mu.p4[msk] + skim.second_mu.p4[msk]).mass\r\n<JaggedArray [[nan]] at 0x7f7724f16f10>\r\n(Pdb) (skim.prompt_mu.p4 + skim.second_mu.p4).mass[msk]\r\n<JaggedArray [[nan]] at 0x7f7724d6c390>\r\n(Pdb) (skim.prompt_mu.p4.flatten() + skim.second_mu.p4.flatten()).mass[msk]\r\narray([nan])\r\n(Pdb) (skim.prompt_mu.p4.flatten()[msk] + skim.second_mu.p4.flatten()[msk]).mass\r\narray([nan])\r\n(Pdb) (skim.prompt_mu.p4.flatten() + skim.second_mu.p4.flatten())[msk].mass\r\narray([nan])\r\n(Pdb) (skim.prompt_mu.p4.flatten() + skim.second_mu.p4.flatten())[msk][0].mass\r\n0.1089482379549958\r\n(Pdb) (skim.prompt_mu.p4[msk] + skim.second_mu.p4[msk])\r\n<JaggedArrayMethods [[TLorentzVector(x=-99.746, y=118.34, z=-767.31, t=782.76)]] at 0x7f7724d660d0>\r\n(Pdb) (skim.prompt_mu.p4.flatten() + skim.second_mu.p4.flatten())[msk]\r\n<TLorentzVectorArray [TLorentzVector(x=-99.746, y=118.34, z=-767.31, t=782.76)] at 0x7f7724d6c650>\r\n(Pdb) (skim.prompt_mu.p4.flatten() + skim.second_mu.p4.flatten()).mass[msk][0]\r\nnan\r\n```\r\n\r\nSet-up:\r\n   * awkward: 0.12.20\r\n   * uproot: 3.11.2\r\n   * uproot-methods: 0.7.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/237", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/237/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/237/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/237/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/237", "id": 576165159, "node_id": "MDU6SXNzdWU1NzYxNjUxNTk=", "number": 237, "title": "Reduction of empty elements", "user": {"login": "mverzett", "id": 2329596, "node_id": "MDQ6VXNlcjIzMjk1OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2329596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mverzett", "html_url": "https://github.com/mverzett", "followers_url": "https://api.github.com/users/mverzett/followers", "following_url": "https://api.github.com/users/mverzett/following{/other_user}", "gists_url": "https://api.github.com/users/mverzett/gists{/gist_id}", "starred_url": "https://api.github.com/users/mverzett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mverzett/subscriptions", "organizations_url": "https://api.github.com/users/mverzett/orgs", "repos_url": "https://api.github.com/users/mverzett/repos", "events_url": "https://api.github.com/users/mverzett/events{/privacy}", "received_events_url": "https://api.github.com/users/mverzett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-05T10:53:34Z", "updated_at": "2020-03-05T13:57:03Z", "closed_at": "2020-03-05T13:57:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "As you might have guessed I'm currently dealing with a lot of empty elements and I'm trying to find the best way to handle them. While trying few things I stumbled across this behaviour, probably ```nan``` would be more appropriate in this case\r\n\r\n```\r\n>>> import awkward\r\n>>> a = awkward.fromiter([[1,2], [3,4], [5,], [6,7]])\r\n>>> b = awkward.fromiter([[1],[],[7],[8]])\r\n>>> l, r = a.cross(b, nested=True).unzip()\r\n>>> import numpy as np\r\n>>> diff = np.abs(l - r)\r\n>>> diff\r\n<JaggedArray [[[0] [1]] [[] []] [[2]] [[2] [1]]] at 0x7fe9dab4d290>\r\n>>> diff.min.__doc__\r\n>>> diff.min()\r\n<JaggedArray [[0 1] [9223372036854775807 9223372036854775807] [2] [2 1]] at 0x7fe9e6dfa1d0>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/236", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/236/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/236/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/236/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/236", "id": 575561179, "node_id": "MDU6SXNzdWU1NzU1NjExNzk=", "number": 236, "title": "Potential bug with subsequent masking", "user": {"login": "mverzett", "id": 2329596, "node_id": "MDQ6VXNlcjIzMjk1OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2329596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mverzett", "html_url": "https://github.com/mverzett", "followers_url": "https://api.github.com/users/mverzett/followers", "following_url": "https://api.github.com/users/mverzett/following{/other_user}", "gists_url": "https://api.github.com/users/mverzett/gists{/gist_id}", "starred_url": "https://api.github.com/users/mverzett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mverzett/subscriptions", "organizations_url": "https://api.github.com/users/mverzett/orgs", "repos_url": "https://api.github.com/users/mverzett/repos", "events_url": "https://api.github.com/users/mverzett/events{/privacy}", "received_events_url": "https://api.github.com/users/mverzett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-04T16:37:13Z", "updated_at": "2020-03-05T10:51:24Z", "closed_at": "2020-03-05T10:51:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found out that the following sequence raises an exception:\r\n```python\r\nvv = awkward.fromiter([[1.],[]])\r\nmask = np.array([False, True])\r\nidx = awkward.fromiter([[]])\r\nvv[mask]\r\n# <JaggedArray [[]] at 0x7fa8fb5e2350>\r\nvv[mask][idx]\r\n# *** IndexError: index 0 is out of bounds for axis 0 with size 0\r\n```\r\nIs that supposed to happen? How should I treat this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/234", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/234/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/234/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/234", "id": 571544152, "node_id": "MDU6SXNzdWU1NzE1NDQxNTI=", "number": 234, "title": "Achieve masking", "user": {"login": "mverzett", "id": 2329596, "node_id": "MDQ6VXNlcjIzMjk1OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2329596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mverzett", "html_url": "https://github.com/mverzett", "followers_url": "https://api.github.com/users/mverzett/followers", "following_url": "https://api.github.com/users/mverzett/following{/other_user}", "gists_url": "https://api.github.com/users/mverzett/gists{/gist_id}", "starred_url": "https://api.github.com/users/mverzett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mverzett/subscriptions", "organizations_url": "https://api.github.com/users/mverzett/orgs", "repos_url": "https://api.github.com/users/mverzett/repos", "events_url": "https://api.github.com/users/mverzett/events{/privacy}", "received_events_url": "https://api.github.com/users/mverzett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-02-26T17:29:37Z", "updated_at": "2020-03-04T16:33:28Z", "closed_at": "2020-03-04T16:33:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi All,\r\n\r\nI have a function that is only defined for a subset of events (it has to use the first muon in the event, if there) and I would like to attach it to the full event table, because I am stubborn :) and to bundle the data. I am looking for something that allows the following:\r\n```python\r\nevent_mask = np.array([True, True, False, False, True, False]) # size 6, 3 True\r\nevent_observable = awkward.JaggedArray.fromiter([[1,2,3], [4,5,6], [7,8,9]]) # jagged, size 3, only for the true events\r\nawkward.MaskedSomething(event_mask, event_observable) # --> behaves like a shape (6, -) with empty or NaN values in the false part, I don't particularly care\r\n```\r\n\r\nIs there some class that supports this functionality? How? I checked MaskedArray and IndexedMaskedArray, but both require the value to be as large as the mask, which in my case cannot be.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/232", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/232/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/232/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/232", "id": 560349079, "node_id": "MDU6SXNzdWU1NjAzNDkwNzk=", "number": 232, "title": "Processing Time Series Data", "user": {"login": "matteogales", "id": 9269326, "node_id": "MDQ6VXNlcjkyNjkzMjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/9269326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matteogales", "html_url": "https://github.com/matteogales", "followers_url": "https://api.github.com/users/matteogales/followers", "following_url": "https://api.github.com/users/matteogales/following{/other_user}", "gists_url": "https://api.github.com/users/matteogales/gists{/gist_id}", "starred_url": "https://api.github.com/users/matteogales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matteogales/subscriptions", "organizations_url": "https://api.github.com/users/matteogales/orgs", "repos_url": "https://api.github.com/users/matteogales/repos", "events_url": "https://api.github.com/users/matteogales/events{/privacy}", "received_events_url": "https://api.github.com/users/matteogales/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-02-05T12:45:59Z", "updated_at": "2020-02-05T23:00:13Z", "closed_at": "2020-02-05T23:00:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am looking at using Awkward Array for processing time series data. \r\n\r\nThe data analysed may contain several features/attributes, and each feature may be measured at a different frequency and there may be a different number of measurement for each e.g. feature 'x' may be measured hourly but feature 'y' may be measured daily, and each time series contains the measurements for a given day or week. \r\n\r\nThere may not be a measurement at each time slot for each feature e.g. feature 'x' may correspond to the measurement from some sensor that provides a reading every 5 minutes over a given day, and perhaps the battery for the sensor was dead for an hour or so. \r\n\r\nA set of time-series for all features may be grouped together as a \"case\", where each case may have (for classification problems) a corresponding classification e.g. x and y are features giving the position of different points on a person who is moving, and each set of measurements may be classified as representing a particular action or not. There may be several cases in a data set, and each case may not necessarily contain a time series for all features.\r\n\r\nGiven the above, I thought that using a scheme where each time series for a feature was represented as a SparseArray (so that I could differentiate between a lack of a data point and NaN), and the time series were stored in a Table where the values in a column represented the different time series for a feature (or classification, if appropriate), and the values in a row the time series for a particular case. If a feature was not present for a case, then None would be used. \r\n\r\nHopefully, the below code illustrates my initial thoughts.\r\n\r\n```\r\nimport awkward\r\nfrom awkward import SparseArray, Table\r\nimport numpy as np\r\n\r\n# Define the time series for feature 'x'\r\n# Each one corresponding to the measurement of x in a particular \"case\"\r\n\r\nx_0 = SparseArray(4, [0, 1, 2, 3], [0.0, 1.0, 2.0, 3.0], default=np.NaN)\r\nx_1 = SparseArray(3, [0, 1, 2], [2.0, 3.0, 4.0], default=np.NaN)\r\nx_2 = SparseArray(4, [0, 1, 3], [3.0, 4.0, 6.0], default=np.NaN)\r\nx_3 = None\r\n\r\n# Define the time series for feature 'y'\r\n# Each one corresponding to the measurement of x in a particular \"case\"\r\n\r\ny_0 = SparseArray(3, [0, 1, 2], [4.0, 5.0, 6.0], default=np.NaN)\r\ny_1 = SparseArray(3, [0, 1, 2], [5.0, 6.0, 7.0], default=np.NaN)\r\ny_2 = SparseArray(3, [0, 1, 2], [6.0, 7.0, 9.0], default=np.NaN)\r\ny_3 = SparseArray(3, [0, 1, 2], [6.0, 7.0, 9.0], default=np.NaN)\r\n\r\n# Build the table to hold the time-series\r\n# Columns hold the data for different instances of features, and rows hold cases\r\n\r\nxs = awkward.fromiter([x_0, x_1, x_2, x_3])\r\nys = awkward.fromiter([y_0, y_1, y_2, y_3])\r\ntable = Table([xs, ys])\r\n```\r\n\r\nWhen preprocessing this data (i.e. before applying some classification or forecasting model), some transformations may be applied to each value, and I have found either the Numpy ufuncs already defined in Awkward very useful for this, as were the examples provided for designing a custom ufunc using Numba.\r\n\r\nHowever, there are some occasions when I want to calculate some value from the entire data for some time-series e.g. using a simple linear regression for calculating the slope for all the time-series for a specified feature (i.e. across cases),  and/or for all features in a given case.\r\n\r\nI know that I can use the properties of the Table for iterating across a given row or column, or all rows/columns, and apply such a function to each time series as I go. However, I wanted to know if there is functionality in Awkward that would allow me to more efficiently apply a specified function across a column/row (like the 'apply' function in Pandas), or if I could perhaps represent the data in a more efficient way than the above that would help me do so?\r\n\r\nAny thoughts very much appreciated!!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/230", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/230/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/230/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/230", "id": 557619696, "node_id": "MDU6SXNzdWU1NTc2MTk2OTY=", "number": 230, "title": "counts on array.from_offsets", "user": {"login": "andrzejnovak", "id": 13226500, "node_id": "MDQ6VXNlcjEzMjI2NTAw", "avatar_url": "https://avatars1.githubusercontent.com/u/13226500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrzejnovak", "html_url": "https://github.com/andrzejnovak", "followers_url": "https://api.github.com/users/andrzejnovak/followers", "following_url": "https://api.github.com/users/andrzejnovak/following{/other_user}", "gists_url": "https://api.github.com/users/andrzejnovak/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrzejnovak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrzejnovak/subscriptions", "organizations_url": "https://api.github.com/users/andrzejnovak/orgs", "repos_url": "https://api.github.com/users/andrzejnovak/repos", "events_url": "https://api.github.com/users/andrzejnovak/events{/privacy}", "received_events_url": "https://api.github.com/users/andrzejnovak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-30T16:46:13Z", "updated_at": "2020-01-30T22:55:25Z", "closed_at": "2020-01-30T22:55:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I have a doubly jagged array (build `from_offsets` if it matters like this:\r\nActual array, shape (35580,)\r\n```[[[<Row 0> <Row 2>] [<Row 1> <Row 3>]] [[<Row 4> <Row 6>] [<Row 5> <Row 7>]] [[<Row 8> <Row 11>] [<Row 9> <Row 12>] [<Row 10> <Row 13>]] ... [[<Row 165497> <Row 165500>] [<Row 165498> <Row 165499>]] [[<Row 165501> <Row 165504>] [<Row 165502> <Row 165503>] [<Row 165505> <Row 165506>]] [[<Row 165507> <Row 165510>] [<Row 165508> <Row 165509>] [<Row 165511> <Row 165512>]]]```\r\nI would like to get counts along the inner dimension, but `.counts` returns only the top one.\r\narray.counts, len 35580\r\n`[2 2 3 ... 2 3 3]`\r\n\r\nIs there a way to get the inner dimension already? If not an API of sth like `counts(depth=n)` would be cool. Maybe also a special keyword like `counts(depth='last')`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/229", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/229/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/229/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/229", "id": 554953111, "node_id": "MDU6SXNzdWU1NTQ5NTMxMTE=", "number": 229, "title": "ChunkedArrays slice differently than JaggedArrays", "user": {"login": "tamasgal", "id": 1730350, "node_id": "MDQ6VXNlcjE3MzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1730350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasgal", "html_url": "https://github.com/tamasgal", "followers_url": "https://api.github.com/users/tamasgal/followers", "following_url": "https://api.github.com/users/tamasgal/following{/other_user}", "gists_url": "https://api.github.com/users/tamasgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasgal/subscriptions", "organizations_url": "https://api.github.com/users/tamasgal/orgs", "repos_url": "https://api.github.com/users/tamasgal/repos", "events_url": "https://api.github.com/users/tamasgal/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasgal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-24T21:03:58Z", "updated_at": "2020-01-27T17:03:49Z", "closed_at": "2020-01-27T17:03:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I discovered this behaviour while I was processing data read by `uproot`, but it seems it's `awkward` related.\r\n\r\nThe data I read it has doubly nested lists and it seems that slicing is different on `ChunkedArrays` or `ObjectArrays` (which are returned by the `lazyarray()` respectively `array()` method of the `uproot` branch). However, when I pass the data into a constructor of `JaggedArray`, the slicing does what is \"should\".\r\n\r\nHere, I try to access the first element (which is a list) of each sublist using a `[:, 0]` slice. The `ChunkedArray` returns weird values, however, if I put it into `awkward.array.from_iter` and slice afterwards, I get the correct values.\r\n\r\nHere is the file I used: \r\n[dummy.root.zip](https://github.com/scikit-hep/awkward-array/files/4110704/dummy.root.zip)\r\n\r\nI played around with different methods but could not get it work...\r\n\r\n```python\r\nIn [166]: import uproot\r\n\r\nIn [167]: f = uproot.open(\"dummy.root\")\r\n\r\nIn [168]: rs = f['E']['Evt']['trks']['trks.rec_stages'].lazyarray()\r\n\r\nIn [169]: rs\r\nOut[169]: <ChunkedArray [[[1, 3, 5, 4], [1, 3, 5], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1]] [[1, 3, 5, 4], [1, 3, 5], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1]] [[1, 3, 5, 4], [1, 3, 5], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1]] ... [[1, 3, 5, 4], [1, 3, 5], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1]] [[1, 3, 5, 4], [1, 3, 5], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1]] [[1, 3, 5, 4], [1, 3, 5], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1, 3], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]] at 0x7fec98103b90>\r\n\r\nIn [170]: rs[:, 0]\r\nOut[170]: <ChunkedArray [[0 0 0 ... 0 0 1] [0 0 0 ... 0 0 1] [0 0 0 ... 0 0 1] ... [0 0 0 ... 0 0 1] [0 0 0 ... 0 0 1] [0 0 0 ... 0 0 1]] at 0x7fec98107e50>\r\n\r\nIn [171]: import awkward\r\n\r\nIn [172]: awkward.fromiter(rs)\r\nOut[172]: <JaggedArray [[[1 3 5 4] [1 3 5] [1 3] ... [1] [1] [1]] [[1 3 5 4] [1 3 5] [1 3] ... [1] [1] [1]] [[1 3 5 4] [1 3 5] [1 3] ... [1] [1] [1]] ... [[1 3 5 4] [1 3 5] [1 3] ... [1] [1] [1]] [[1 3 5 4] [1 3 5] [1 3] ... [1] [1] [1]] [[1 3 5 4] [1 3 5] [1 3] ... [1] [1] [1]]] at 0x7fec98203b10>\r\n\r\nIn [173]: awkward.fromiter(rs)[:, 0]\r\nOut[173]: <JaggedArray [[1 3 5 4] [1 3 5 4] [1 3 5 4] ... [1 3 5 4] [1 3 5 4] [1 3 5 4]] at 0x7fec98204ad0>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/220", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/220/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/220/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/220", "id": 534051288, "node_id": "MDU6SXNzdWU1MzQwNTEyODg=", "number": 220, "title": "Failed to encode persistentvirtual LazyFiles", "user": {"login": "vargasa", "id": 16821717, "node_id": "MDQ6VXNlcjE2ODIxNzE3", "avatar_url": "https://avatars3.githubusercontent.com/u/16821717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vargasa", "html_url": "https://github.com/vargasa", "followers_url": "https://api.github.com/users/vargasa/followers", "following_url": "https://api.github.com/users/vargasa/following{/other_user}", "gists_url": "https://api.github.com/users/vargasa/gists{/gist_id}", "starred_url": "https://api.github.com/users/vargasa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vargasa/subscriptions", "organizations_url": "https://api.github.com/users/vargasa/orgs", "repos_url": "https://api.github.com/users/vargasa/repos", "events_url": "https://api.github.com/users/vargasa/events{/privacy}", "received_events_url": "https://api.github.com/users/vargasa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-06T14:58:01Z", "updated_at": "2019-12-06T15:42:36Z", "closed_at": "2019-12-06T15:42:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code works as expected:\r\n\r\n```python\r\nimport uproot\r\nimport awkward\r\n\r\nf = uproot.open(\"xfiles.root\")\r\nt = f[\"Events\"]\r\n\r\nawk = t.lazyarrays(persistvirtual=True)\r\ncut = awk[awk.nMuon >= 2]\r\nawkward.save(\"muonCut.awkd\", cut, mode=\"w\")\r\n```\r\nHowever, if I use `uproot.lazyarrays` directly:\r\n\r\n```python\r\nimport uproot\r\nimport awkward\r\n\r\nawk = uproot.lazyarrays(\"xfiles.root\",\r\n                      treepath=\"Events\",\r\n                      persistvirtual=True)\r\n\r\ncut = awk[awk.nMuon >= 2]\r\nprint(cut)\r\n\r\nawkward.save(\"muonCut.awkd\", cut, mode=\"w\")\r\n```\r\n\r\nThe second piece yields to:\r\n\r\n```\r\n[<Row 0> <Row 2> <Row 6> ... <Row 1152947> <Row 1152952> <Row 1152953>]\r\n``` \r\nwhich is expected. However when calling `awkward.save` I get:\r\n\r\n```\r\nTypeError: failed to encode <uproot.tree._LazyFiles object at 0x7fda9b511908> (type: <class 'uproot.tree._LazyFiles'>)\r\n```\r\nThe second piece is intended to be used for chaining some files instead of using only one as in the code shown. Is the *virtualness* expected to work in this case?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/215", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/215/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/215/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/215/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/215", "id": 525604505, "node_id": "MDU6SXNzdWU1MjU2MDQ1MDU=", "number": 215, "title": "Request for .frompandas() function", "user": {"login": "NumesSanguis", "id": 8008618, "node_id": "MDQ6VXNlcjgwMDg2MTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8008618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NumesSanguis", "html_url": "https://github.com/NumesSanguis", "followers_url": "https://api.github.com/users/NumesSanguis/followers", "following_url": "https://api.github.com/users/NumesSanguis/following{/other_user}", "gists_url": "https://api.github.com/users/NumesSanguis/gists{/gist_id}", "starred_url": "https://api.github.com/users/NumesSanguis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NumesSanguis/subscriptions", "organizations_url": "https://api.github.com/users/NumesSanguis/orgs", "repos_url": "https://api.github.com/users/NumesSanguis/repos", "events_url": "https://api.github.com/users/NumesSanguis/events{/privacy}", "received_events_url": "https://api.github.com/users/NumesSanguis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-11-20T06:33:26Z", "updated_at": "2019-12-03T12:08:14Z", "closed_at": "2019-12-03T12:08:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "In your documentation you often mention `awkward.topandas()`, but how about the other way, a `awkward.frompandas()`?\r\n\r\n- Say I created a Pandas DataFrame from a .csv, do some filtering and stuff, and now I want to continue with an awkward array (for example I want to add a named numpy array). Is this possible?\r\n- Or nested inside a Jagged Array is a Table (loaded from HDF5). I want to give this Table as a DataFrame to a colleague who is only familiar with Pandas. After he/she is done, I want to store it back in the HDF5 as a Jagged Array. Can this be done?\r\n\r\nI looked in the Python file where `.topandas()` was defined:\r\nhttps://github.com/scikit-hep/awkward-array/blob/d942fb8d4fae5e1dec35c70938e24c05207b3f31/awkward/util.py#L213\r\n, but nothing about loading DataFrames there.\r\n\r\nI also tried with some code, but this failed:\r\n```python\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame({\"foo\": [2, 8], \"bar\": [0.3, -0.9]})\r\nprint(type(df))\r\n# <class 'pandas.core.frame.DataFrame'>\r\nprint(df.head())\r\n#    foo  bar\r\n# 0    2  0.3\r\n# 1    8 -0.9\r\n\r\naf = awkward.fromiter(df)\r\nprint(af)\r\n# ['foo' 'bar']\r\n\r\ndf_awk = awkward.topandas(af, flatten=True)\r\nprint(type(df_awk))\r\n# <class 'pandas.core.series.Series'>\r\nprint(df_awk.head())\r\n# 0    foo\r\n# 1    bar\r\n# dtype: object\r\n```\r\n\r\nApplying `.fromiter()` only gets the column names.\r\n\r\nTL;DR How to convert a Pandas DataFrame to an awkward-array and vice-versa?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/212", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/212/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/212/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/212", "id": 523435512, "node_id": "MDU6SXNzdWU1MjM0MzU1MTI=", "number": 212, "title": "JaggedArray.cross raises TypeError when called on empty", "user": {"login": "jrueb", "id": 30041073, "node_id": "MDQ6VXNlcjMwMDQxMDcz", "avatar_url": "https://avatars2.githubusercontent.com/u/30041073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrueb", "html_url": "https://github.com/jrueb", "followers_url": "https://api.github.com/users/jrueb/followers", "following_url": "https://api.github.com/users/jrueb/following{/other_user}", "gists_url": "https://api.github.com/users/jrueb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrueb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrueb/subscriptions", "organizations_url": "https://api.github.com/users/jrueb/orgs", "repos_url": "https://api.github.com/users/jrueb/repos", "events_url": "https://api.github.com/users/jrueb/events{/privacy}", "received_events_url": "https://api.github.com/users/jrueb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-15T12:11:20Z", "updated_at": "2019-11-15T14:10:02Z", "closed_at": "2019-11-15T14:10:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please consider the following code\r\n```\r\na = awkward.JaggedArray.fromiter([])\r\nb = awkward.JaggedArray.fromiter([])\r\nc = a.cross(b)\r\n```\r\nIt raises a TypeError. I would expect it to return an empty JaggedArray. `a.argcross(b)` works fine.\r\nI guess this is another corner case like for example issue #190.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/210", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/210/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/210/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/210", "id": 521574281, "node_id": "MDU6SXNzdWU1MjE1NzQyODE=", "number": 210, "title": "Incorrect HDF5 serialization of JaggedArray with starts and stops", "user": {"login": "jrueb", "id": 30041073, "node_id": "MDQ6VXNlcjMwMDQxMDcz", "avatar_url": "https://avatars2.githubusercontent.com/u/30041073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrueb", "html_url": "https://github.com/jrueb", "followers_url": "https://api.github.com/users/jrueb/followers", "following_url": "https://api.github.com/users/jrueb/following{/other_user}", "gists_url": "https://api.github.com/users/jrueb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrueb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrueb/subscriptions", "organizations_url": "https://api.github.com/users/jrueb/orgs", "repos_url": "https://api.github.com/users/jrueb/repos", "events_url": "https://api.github.com/users/jrueb/events{/privacy}", "received_events_url": "https://api.github.com/users/jrueb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-12T14:10:27Z", "updated_at": "2019-11-12T14:40:34Z", "closed_at": "2019-11-12T14:28:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "See the following code\r\n```\r\na = awkward.JaggedArray(starts=[2], stops=[4], content=[1., 2., 3., 4.])\r\nwith h5py.File(\"test.hdf5\", \"w\") as f:\r\n    out = awkward.hdf5(f)\r\n    out[\"a\"] = a\r\n    print(\"{}, starts={} stops={} content={}\".format(a, a.starts, a.stops, a.content))\r\n    print(\"{}, starts={} stops={} content={}\".format(out[\"a\"], out[\"a\"].starts, out[\"a\"].stops, out[\"a\"].content))\r\nwith h5py.File(\"test.hdf5\", \"r\") as f:\r\n    out = awkward.hdf5(f)\r\n    print(\"{}, starts={} stops={} content={}\".format(out[\"a\"], out[\"a\"].starts, out[\"a\"].stops, out[\"a\"].content))\r\n```\r\nI would expect the three output lines to be identical. However the last two, the ones that print `out[\"a\"]`, are different from the first. It seems the JaggedArray defined by starts and stops is incorrectly serialized, thus `out` gives a different JaggedArray.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/208", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/208/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/208/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/208", "id": 520134745, "node_id": "MDU6SXNzdWU1MjAxMzQ3NDU=", "number": 208, "title": "IndexError when using MaskedArray and flatten", "user": {"login": "jrueb", "id": 30041073, "node_id": "MDQ6VXNlcjMwMDQxMDcz", "avatar_url": "https://avatars2.githubusercontent.com/u/30041073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrueb", "html_url": "https://github.com/jrueb", "followers_url": "https://api.github.com/users/jrueb/followers", "following_url": "https://api.github.com/users/jrueb/following{/other_user}", "gists_url": "https://api.github.com/users/jrueb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrueb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrueb/subscriptions", "organizations_url": "https://api.github.com/users/jrueb/orgs", "repos_url": "https://api.github.com/users/jrueb/repos", "events_url": "https://api.github.com/users/jrueb/events{/privacy}", "received_events_url": "https://api.github.com/users/jrueb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-11-08T17:19:18Z", "updated_at": "2019-11-12T15:56:28Z", "closed_at": "2019-11-12T15:56:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following two lines raise an IndexError\r\n```\r\na = awkward.MaskedArray([True, False], [1, 1])\r\nprint((a + 1).flatten())\r\n```\r\nThis is however valid code, is it not? It seems there is a problem with the implementation of flatten for IndexedMaskedArray.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/207", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/207/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/207/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/207", "id": 519097642, "node_id": "MDU6SXNzdWU1MTkwOTc2NDI=", "number": 207, "title": "\"Fixed object\" array type", "user": {"login": "benkrikler", "id": 4083697, "node_id": "MDQ6VXNlcjQwODM2OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4083697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benkrikler", "html_url": "https://github.com/benkrikler", "followers_url": "https://api.github.com/users/benkrikler/followers", "following_url": "https://api.github.com/users/benkrikler/following{/other_user}", "gists_url": "https://api.github.com/users/benkrikler/gists{/gist_id}", "starred_url": "https://api.github.com/users/benkrikler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benkrikler/subscriptions", "organizations_url": "https://api.github.com/users/benkrikler/orgs", "repos_url": "https://api.github.com/users/benkrikler/repos", "events_url": "https://api.github.com/users/benkrikler/events{/privacy}", "received_events_url": "https://api.github.com/users/benkrikler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-07T07:46:08Z", "updated_at": "2019-11-08T05:10:54Z", "closed_at": "2019-11-07T23:08:11Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### Context\r\nA very natural way to describe the physics we're doing on LZ is to use `vector<vector<vector< primitive >>>` in our files. ROOT then doesn't split these up on disk, and as a result uproot reloads these as `objarray(objarray(jaggedarray(primitive dtype)))`. This is clearly the right thing to do, however there's some loss in the process, namely that the object in each element is a) the same type, and b) more specifically, a vector of a specific dtype.\r\n\r\nIt's possible to convert these arrays into jagged arrays, using `JaggedArray.fromiter` which will look at each object and decide how to handle the overall array.  My understanding of this function is that it's a fairly generic function, which makes it slightly less efficient, in this specific case, that I think would be needed.\r\n\r\n### Request\r\nIs it possible to make a specialisation / sub-class of `ObjectArray` which has a guarantee that each object contained in the array has the same type, and then possibly a further sub-class where each contained object provides a list-like interface?  This would be similar to the `StringArray` class, but focussed on the `vector<vector<vector<...>>>` problem above.  This type of array could then be directly produced by uproot when it reads in vector<vector<...>>, rather than the current `ObjectArray` that's produced.  This information could then allow `fromiter` to make the conversion much more quickly, possibly using a built-in `tojagged` method on this sub-class.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/205", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/205/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/205/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/205", "id": 508926566, "node_id": "MDU6SXNzdWU1MDg5MjY1NjY=", "number": 205, "title": "Issue concatenating jagged arrays with axis=1", "user": {"login": "carlgwilliam", "id": 1737237, "node_id": "MDQ6VXNlcjE3MzcyMzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1737237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlgwilliam", "html_url": "https://github.com/carlgwilliam", "followers_url": "https://api.github.com/users/carlgwilliam/followers", "following_url": "https://api.github.com/users/carlgwilliam/following{/other_user}", "gists_url": "https://api.github.com/users/carlgwilliam/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlgwilliam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlgwilliam/subscriptions", "organizations_url": "https://api.github.com/users/carlgwilliam/orgs", "repos_url": "https://api.github.com/users/carlgwilliam/repos", "events_url": "https://api.github.com/users/carlgwilliam/events{/privacy}", "received_events_url": "https://api.github.com/users/carlgwilliam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-18T08:17:49Z", "updated_at": "2019-10-18T11:05:06Z", "closed_at": "2019-10-18T11:05:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nAs discussed on stack overflow\r\n\r\nhttps://stackoverflow.com/questions/58440970/how-to-combine-two-uproot-jagged-arrays-into-one\r\n\r\nin some cases I find that I concatenate inner jagged arrays with axis=1.\r\n\r\nHere is a MWE for concatenating elecs and muons to make leps\r\n\r\n```python\r\nimport uproot as up\r\nimport awkward as awk\r\n\r\nt = up.open(\"http://scikit-hep.org/uproot/examples/HZZ-objects.root\")[\"events\"]\r\n\r\nazip = awk.array.jagged.JaggedArray.zip\r\nacat = awk.concatenate\r\n\r\nadict = t.arrays([\"muonp4\", \"muoniso\", \"electronp4\", \"electroniso\"], namedecode=\"utf-8\")\r\n\r\nmdict = {k.replace(\"muon\", \"\"):v for k,v in adict.items() if k.startswith(\"muon\")}\r\nedict = {k.replace(\"electron\", \"\"):v for k,v in adict.items() if k.startswith(\"electron\")}\r\n\r\nmuons = azip(mdict)\r\nelecs = azip(edict)\r\n\r\nleps = acat([elecs, muons], axis=1)\r\n```\r\n\r\ngives\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nNotImplementedError                       Traceback (most recent call last)\r\n<ipython-input-34-6ffe1cebff62> in <module>\r\n----> 1 leps = acat([elecs, muons], axis=1)\r\n\r\n/opt/anaconda3/lib/python3.7/site-packages/awkward/__init__.py in concatenate(arrays, axis)\r\n     20 \r\n     21 def concatenate(arrays, axis=0):\r\n---> 22     return AwkwardArray.concatenate(arrays, axis=axis)\r\n     23 \r\n     24 from awkward.generate import fromiter\r\n\r\n/opt/anaconda3/lib/python3.7/site-packages/awkward/util.py in <lambda>(*args, **kwargs)\r\n     46     def __get__(self, ins, typ):\r\n     47         if ins is None:\r\n---> 48             return lambda *args, **kwargs: self.fcn(True, typ, *args, **kwargs)\r\n     49         else:\r\n     50             return lambda *args, **kwargs: self.fcn(False, ins, *args, **kwargs)\r\n\r\n/opt/anaconda3/lib/python3.7/site-packages/awkward/array/base.py in concatenate(isclassmethod, cls_or_self, arrays, axis)\r\n    589             return type(arrays[0])._concatenate_axis0(arrays)\r\n    590         elif axis == 1:\r\n--> 591             return type(arrays[0])._concatenate_axis1(arrays)\r\n    592         else:\r\n    593             raise NotImplementedError(\"axis > 1\")\r\n\r\n/opt/anaconda3/lib/python3.7/site-packages/awkward/array/jagged.py in _concatenate_axis1(cls, arrays)\r\n   1705 \r\n   1706         else:\r\n-> 1707             raise NotImplementedError(\"concatenate with axis=1 is not implemented for \" + type(arrays[0]).__name__)\r\n   1708 \r\n   1709         return arrays[0].__class__(starts[::n_arrays], stops[n_arrays-1::n_arrays], content)\r\n\r\nNotImplementedError: concatenate with axis=1 is not implemented for JaggedArray\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/203", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/203/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/203/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/203/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/203", "id": 503925267, "node_id": "MDU6SXNzdWU1MDM5MjUyNjc=", "number": 203, "title": "test_arrow_nonnullable_table fails with arrow 0.15.0", "user": {"login": "tobim", "id": 858790, "node_id": "MDQ6VXNlcjg1ODc5MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/858790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobim", "html_url": "https://github.com/tobim", "followers_url": "https://api.github.com/users/tobim/followers", "following_url": "https://api.github.com/users/tobim/following{/other_user}", "gists_url": "https://api.github.com/users/tobim/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobim/subscriptions", "organizations_url": "https://api.github.com/users/tobim/orgs", "repos_url": "https://api.github.com/users/tobim/repos", "events_url": "https://api.github.com/users/tobim/events{/privacy}", "received_events_url": "https://api.github.com/users/tobim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-08T09:14:30Z", "updated_at": "2019-10-08T14:15:47Z", "closed_at": "2019-10-08T14:15:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Test output:\r\n```\r\n============================= test session starts ==============================\r\nplatform linux2 -- Python 2.7.16, pytest-4.6.5, py-1.8.0, pluggy-0.12.0\r\nrootdir: /tmp/nix-build-python2.7-awkward-0.12.6.drv-0/awkward-0.12.6\r\ncollected 219 items / 4 skipped / 215 selected\r\n\r\ntests/test_arrow.py ...................F.........ss.....s.........       [ 21%]\r\ntests/test_chunked.py ........                                           [ 24%]\r\ntests/test_combine.py .                                                  [ 25%]\r\ntests/test_crosscut.py ..                                                [ 26%]\r\ntests/test_generate.py .....................................             [ 42%]\r\ntests/test_hdf5.py ....                                                  [ 44%]\r\ntests/test_indexed.py ............                                       [ 50%]\r\ntests/test_issues.py ...                                                 [ 51%]\r\ntests/test_jagged.py ..............................................      [ 72%]\r\ntests/test_likenumpy.py .                                                [ 73%]\r\ntests/test_masked.py ........                                            [ 76%]\r\ntests/test_methods.py .                                                  [ 77%]\r\ntests/test_objects.py ...                                                [ 78%]\r\ntests/test_persist.py ..................                                 [ 86%]\r\ntests/test_table.py .....................                                [ 96%]\r\ntests/test_union.py ...                                                  [ 97%]\r\ntests/test_virtual.py .....                                              [100%]\r\n\r\n=================================== FAILURES ===================================\r\n______________________ Test.test_arrow_nonnullable_table _______________________\r\n\r\nself = <tests.test_arrow.Test testMethod=test_arrow_nonnullable_table>\r\n\r\n    def test_arrow_nonnullable_table(self):\r\n        if pyarrow is None:\r\n            pytest.skip(\"unable to import pyarrow\")\r\n        else:\r\n            x = pyarrow.array([1, 2, 3])\r\n            y = pyarrow.array([1.1, 2.2, 3.3])\r\n            table = pyarrow.Table.from_arrays([x], [\"x\"])\r\n>           table2 = table.add_column(1, pyarrow.column(pyarrow.field(\"y\", y.type, False), numpy.array([1.1, 2.2, 3.3])))\r\nE           AttributeError: 'module' object has no attribute 'column'\r\n\r\ntests/test_arrow.py:370: AttributeError\r\n=============================== warnings summary ===============================\r\ntests/test_arrow.py::Test::test_arrow_readparquet\r\n  /tmp/nix-build-python2.7-awkward-0.12.6.drv-0/awkward-0.12.6/awkward/arrow.py:486: FutureWarning: The 'field_by_name' method is deprecated, use 'field' instead\r\n    self.type = schema2type(self.parquetfile.schema.to_arrow_schema())\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n========= 1 failed, 215 passed, 7 skipped, 1 warnings in 10.56 seconds =========\r\n```\r\n\r\nThe `arrow::Column` class and accompanying python bindings in `pyarrow` were removed in https://github.com/apache/arrow/commit/5e201fed061f2a95e66889fa527ae8ef547e9618.\r\nRelevant PR: https://github.com/apache/arrow/pull/4841", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/201", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/201/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/201/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/201", "id": 502222534, "node_id": "MDU6SXNzdWU1MDIyMjI1MzQ=", "number": 201, "title": "IndexedMaskedArray fillna", "user": {"login": "nsmith-", "id": 6587412, "node_id": "MDQ6VXNlcjY1ODc0MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6587412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsmith-", "html_url": "https://github.com/nsmith-", "followers_url": "https://api.github.com/users/nsmith-/followers", "following_url": "https://api.github.com/users/nsmith-/following{/other_user}", "gists_url": "https://api.github.com/users/nsmith-/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsmith-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsmith-/subscriptions", "organizations_url": "https://api.github.com/users/nsmith-/orgs", "repos_url": "https://api.github.com/users/nsmith-/repos", "events_url": "https://api.github.com/users/nsmith-/events{/privacy}", "received_events_url": "https://api.github.com/users/nsmith-/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-03T18:22:20Z", "updated_at": "2019-10-04T10:54:33Z", "closed_at": "2019-10-04T10:54:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n>>> x = awkward.fromiter([[3, 1], [], [2, -1]])\r\n>>> y = x.pad(1, clip=True)[:, 0]\r\n>>> z = y > 0\r\n>>> z\r\n<IndexedMaskedArray [True None True] at 0x00022bf35710>\r\n>>> z.fillna(False)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/ncsmith/src/awkward-array/awkward/array/masked.py\", line 889, in fillna\r\n    out[self.mask < 0] = value\r\nIndexError: boolean index did not match indexed array along dimension 0; dimension is 2 but corresponding boolean dimension is 3\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/200", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/200/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/200/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/200", "id": 502133402, "node_id": "MDU6SXNzdWU1MDIxMzM0MDI=", "number": 200, "title": "numpy.digitize and awkward arrays", "user": {"login": "nfoppiani", "id": 13448134, "node_id": "MDQ6VXNlcjEzNDQ4MTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/13448134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nfoppiani", "html_url": "https://github.com/nfoppiani", "followers_url": "https://api.github.com/users/nfoppiani/followers", "following_url": "https://api.github.com/users/nfoppiani/following{/other_user}", "gists_url": "https://api.github.com/users/nfoppiani/gists{/gist_id}", "starred_url": "https://api.github.com/users/nfoppiani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nfoppiani/subscriptions", "organizations_url": "https://api.github.com/users/nfoppiani/orgs", "repos_url": "https://api.github.com/users/nfoppiani/repos", "events_url": "https://api.github.com/users/nfoppiani/events{/privacy}", "received_events_url": "https://api.github.com/users/nfoppiani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-03T15:21:18Z", "updated_at": "2019-10-04T23:58:25Z", "closed_at": "2019-10-03T15:42:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to use numpy.digitize with awkward arrays but it does not work.\r\nHowever, it works if I flatten it out. Do you think there is an easy solution for that?\r\n```\r\nnp.digitize(array['my_favourite_variable'], [0, 1, 2])\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-224-e8e74a6ae969> in <module>\r\n----> 1 np.digitize(array_mc_train['abs_pitch_y'], [0, 1, 2])\r\n\r\n<__array_function__ internals> in digitize(*args, **kwargs)\r\n\r\n~/.local/lib/python3.7/site-packages/numpy/lib/function_base.py in digitize(x, bins, right)\r\n   4813         return len(bins) - _nx.searchsorted(bins[::-1], x, side=side)\r\n   4814     else:\r\n-> 4815         return _nx.searchsorted(bins, x, side=side)\r\n\r\n<__array_function__ internals> in searchsorted(*args, **kwargs)\r\n\r\n~/.local/lib/python3.7/site-packages/numpy/core/fromnumeric.py in searchsorted(a, v, side, sorter)\r\n   1294 \r\n   1295     \"\"\"\r\n-> 1296     return _wrapfunc(a, 'searchsorted', v, side=side, sorter=sorter)\r\n   1297 \r\n   1298 \r\n\r\n~/.local/lib/python3.7/site-packages/numpy/core/fromnumeric.py in _wrapfunc(obj, method, *args, **kwds)\r\n     59 \r\n     60     try:\r\n---> 61         return bound(*args, **kwds)\r\n     62     except TypeError:\r\n     63         # A TypeError occurs if the object does have such a method in its\r\n\r\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/197", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/197/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/197/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/197/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/197", "id": 500356263, "node_id": "MDU6SXNzdWU1MDAzNTYyNjM=", "number": 197, "title": "`topandas()` seems subtly broken", "user": {"login": "lukasheinrich", "id": 2318083, "node_id": "MDQ6VXNlcjIzMTgwODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2318083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukasheinrich", "html_url": "https://github.com/lukasheinrich", "followers_url": "https://api.github.com/users/lukasheinrich/followers", "following_url": "https://api.github.com/users/lukasheinrich/following{/other_user}", "gists_url": "https://api.github.com/users/lukasheinrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukasheinrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukasheinrich/subscriptions", "organizations_url": "https://api.github.com/users/lukasheinrich/orgs", "repos_url": "https://api.github.com/users/lukasheinrich/repos", "events_url": "https://api.github.com/users/lukasheinrich/events{/privacy}", "received_events_url": "https://api.github.com/users/lukasheinrich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-30T15:34:21Z", "updated_at": "2019-09-30T16:27:52Z", "closed_at": "2019-09-30T16:11:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "this works fine\r\n\r\n```\r\na = [\r\n [1.,1, 1.,1., 1.],\r\n [1.,1.,1.,1., 1.,1.]\r\n]\r\n\r\nawkward.topandas(awkward.Table(pt = awkward.fromiter(a)))\r\n```\r\n\r\nand continues to work for any two arrays except for those that are exactly the same size\r\n\r\nthis also works\r\n\r\n```\r\na = [\r\n [1.,1, 1.,1., 1.],\r\n [1.,1.,1.,1.]\r\n]\r\n\r\nawkward.topandas(awkward.Table(pt = awkward.fromiter(a)))\r\n```\r\n\r\nwhile this breaks\r\n\r\n```\r\na = [\r\n [1.,1, 1.,1.],\r\n [1.,1.,1.,1.]\r\n]\r\n\r\nawkward.topandas(awkward.Table(pt = awkward.fromiter(a)))\r\n```\r\n\r\nand does this\r\n\r\n```\r\na = [\r\n [1.,1.],\r\n [1.,1.]\r\n]\r\n\r\nawkward.topandas(awkward.Table(pt = awkward.fromiter(a)))\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/195", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/195/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/195/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/195", "id": 499912805, "node_id": "MDU6SXNzdWU0OTk5MTI4MDU=", "number": 195, "title": "concatenate on indexed selections of `Table` is broken", "user": {"login": "lukasheinrich", "id": 2318083, "node_id": "MDQ6VXNlcjIzMTgwODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2318083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukasheinrich", "html_url": "https://github.com/lukasheinrich", "followers_url": "https://api.github.com/users/lukasheinrich/followers", "following_url": "https://api.github.com/users/lukasheinrich/following{/other_user}", "gists_url": "https://api.github.com/users/lukasheinrich/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukasheinrich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukasheinrich/subscriptions", "organizations_url": "https://api.github.com/users/lukasheinrich/orgs", "repos_url": "https://api.github.com/users/lukasheinrich/repos", "events_url": "https://api.github.com/users/lukasheinrich/events{/privacy}", "received_events_url": "https://api.github.com/users/lukasheinrich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-29T12:48:58Z", "updated_at": "2019-09-29T14:00:39Z", "closed_at": "2019-09-29T14:00:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, here's a minimal example of concatenating indexed selections of a table\r\n\r\n```\r\na = awkward.fromiter([[0,1,3],[0,1],[6,5],[2]])\r\nb = awkward.fromiter([[4,5,6],[7,8],[1,2],[6]])\r\nt = awkward.Table(a = a, b = b)\r\n\r\n\r\nprint(t[[0,1]])\r\nprint(t[[2]])\r\nprint(awkward.concatenate([t[[0,1]],t[[2]]]))\r\n```\r\n\r\nI would have expected the last line to be Rows 0,1 and 2 instead I get the 2 full copies of the table t", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/192", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/192/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/192/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/192/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/192", "id": 494694931, "node_id": "MDU6SXNzdWU0OTQ2OTQ5MzE=", "number": 192, "title": "Trouble interacting with numba", "user": {"login": "OracPrime", "id": 9028003, "node_id": "MDQ6VXNlcjkwMjgwMDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/9028003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OracPrime", "html_url": "https://github.com/OracPrime", "followers_url": "https://api.github.com/users/OracPrime/followers", "following_url": "https://api.github.com/users/OracPrime/following{/other_user}", "gists_url": "https://api.github.com/users/OracPrime/gists{/gist_id}", "starred_url": "https://api.github.com/users/OracPrime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OracPrime/subscriptions", "organizations_url": "https://api.github.com/users/OracPrime/orgs", "repos_url": "https://api.github.com/users/OracPrime/repos", "events_url": "https://api.github.com/users/OracPrime/events{/privacy}", "received_events_url": "https://api.github.com/users/OracPrime/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-17T15:27:48Z", "updated_at": "2019-09-17T20:06:17Z", "closed_at": "2019-09-17T15:39:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working with Python on Windows, managed via Anaconda.  I've tried both 3.6.4 and 3.7.3 and get the same problem.  Just these three lines:\r\n\r\nimport numba\r\nimport awkward\r\nimport awkward-numba\r\n\r\ngive me an error with the following traceback:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"d:\\Anaconda3\\lib\\site-packages\\awkward\\numba\\__init__.py\", line 7, in <module>\r\n    from awkward.numba.array.base import NumbaMethods\r\n  File \"d:\\Anaconda3\\lib\\site-packages\\awkward\\numba\\array\\base.py\", line 10, in <module>\r\n    class NumbaMethods(object):\r\n  File \"d:\\Anaconda3\\lib\\site-packages\\awkward\\numba\\array\\base.py\", line 11, in NumbaMethods\r\n    NUMBA_DEFAULTTYPE = numba.from_dtype(numpy.float64)\r\n  File \"d:\\Anaconda3\\lib\\site-packages\\numba\\numpy_support.py\", line 90, in from_dtype\r\n    if dtype.fields is None:\r\nAttributeError: type object 'numpy.float64' has no attribute 'fields'\r\n\r\nNumba 0.26.2\r\nAwkward 0.12.10\r\nAwkward-numba 0.12.10\r\n\r\nAny suggestions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/190", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/190/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/190/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/190", "id": 493420150, "node_id": "MDU6SXNzdWU0OTM0MjAxNTA=", "number": 190, "title": "JaggedArray.pad fails when content is empty", "user": {"login": "benkrikler", "id": 4083697, "node_id": "MDQ6VXNlcjQwODM2OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4083697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benkrikler", "html_url": "https://github.com/benkrikler", "followers_url": "https://api.github.com/users/benkrikler/followers", "following_url": "https://api.github.com/users/benkrikler/following{/other_user}", "gists_url": "https://api.github.com/users/benkrikler/gists{/gist_id}", "starred_url": "https://api.github.com/users/benkrikler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benkrikler/subscriptions", "organizations_url": "https://api.github.com/users/benkrikler/orgs", "repos_url": "https://api.github.com/users/benkrikler/repos", "events_url": "https://api.github.com/users/benkrikler/events{/privacy}", "received_events_url": "https://api.github.com/users/benkrikler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-13T16:41:46Z", "updated_at": "2019-09-16T16:45:26Z", "closed_at": "2019-09-16T16:45:26Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Jagged array's `pad` method has troubles when the array contents is empty (even if `starts` or `stops` is not).  This is the case with the latest release at least, so version 0.12.9 \r\n\r\n#### To recreate:\r\n```python\r\nfrom awkward import JaggedArray\r\nvals = [[], []]\r\na = JaggedArray.fromiter(vals)\r\nprint(a.pad(1, clip=True))\r\n```\r\noutput:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"~/.conda/envs/fast-carpenter/lib/python2.7/site-packages/awkward/array/jagged.py\", line 1861, in pad\r\n    content = self._content[index]\r\nIndexError: index -1 is out of bounds for axis 0 with size 0\r\n```\r\nSame is true if `clip=False` or if `vals=[[]]`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/189", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/189/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/189/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/189", "id": 493051446, "node_id": "MDU6SXNzdWU0OTMwNTE0NDY=", "number": 189, "title": "overlapping names when saving", "user": {"login": "aminnj", "id": 5760027, "node_id": "MDQ6VXNlcjU3NjAwMjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5760027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aminnj", "html_url": "https://github.com/aminnj", "followers_url": "https://api.github.com/users/aminnj/followers", "following_url": "https://api.github.com/users/aminnj/following{/other_user}", "gists_url": "https://api.github.com/users/aminnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/aminnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aminnj/subscriptions", "organizations_url": "https://api.github.com/users/aminnj/orgs", "repos_url": "https://api.github.com/users/aminnj/repos", "events_url": "https://api.github.com/users/aminnj/events{/privacy}", "received_events_url": "https://api.github.com/users/aminnj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-09-12T22:05:24Z", "updated_at": "2019-09-14T01:46:07Z", "closed_at": "2019-09-14T01:46:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use `awkward.save()` on some files of CMS NanoAOD branch-by-branch with something like\r\n```python\r\nfname = \"table.awkd\"\r\nfor iname,name in enumerate(tqdm(bnames)):\r\n    arr = t.array(name)\r\n    awkward.save(fname,arr,name=name,compression=ac,mode=\"w\" if iname==0 else \"a\",)\r\n```\r\nbut eventually I run into these guys: \r\nhttps://github.com/scikit-hep/awkward-array/blob/d942fb8d4fae5e1dec35c70938e24c05207b3f31/awkward/persist.py#L689-L691\r\nhttps://github.com/scikit-hep/awkward-array/blob/d942fb8d4fae5e1dec35c70938e24c05207b3f31/awkward/persist.py#L658-L661\r\nbecause there are a lot of branches with overlapping names (e.g., `Tau_rawAntiEleCat` and `Tau_rawAntiEleCat2018`).\r\n\r\nI commented out those checks locally and converted the whole file. Comparing the awkward file with the ROOT file branch by branch with another script, everything is consistent. What exactly do those lines protect against?\r\n\r\nI'm using Python 3.7, but have not tried 2.7.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/186", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/186/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/186/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/186", "id": 491536538, "node_id": "MDU6SXNzdWU0OTE1MzY1Mzg=", "number": 186, "title": "Jagged indexing doesn't work for ChunkedArrays", "user": {"login": "masonproffitt", "id": 32773304, "node_id": "MDQ6VXNlcjMyNzczMzA0", "avatar_url": "https://avatars3.githubusercontent.com/u/32773304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/masonproffitt", "html_url": "https://github.com/masonproffitt", "followers_url": "https://api.github.com/users/masonproffitt/followers", "following_url": "https://api.github.com/users/masonproffitt/following{/other_user}", "gists_url": "https://api.github.com/users/masonproffitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/masonproffitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/masonproffitt/subscriptions", "organizations_url": "https://api.github.com/users/masonproffitt/orgs", "repos_url": "https://api.github.com/users/masonproffitt/repos", "events_url": "https://api.github.com/users/masonproffitt/events{/privacy}", "received_events_url": "https://api.github.com/users/masonproffitt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-09-10T08:49:55Z", "updated_at": "2019-09-27T15:40:08Z", "closed_at": "2019-09-27T15:40:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is somewhat similar to the problem #180. The problem here is that a ChunkedArray made out of JaggedArrays cannot be indexed by JaggedArrays:\r\n```python\r\n>>> import awkward\r\n>>> j = awkward.fromiter([[1]])\r\n>>> j\r\n<JaggedArray [[1]] at 0x7f68a3d71f60>\r\n>>> c = awkward.ChunkedArray([j])\r\n>>> c\r\n<ChunkedArray [[1]] at 0x7f68b14497f0>\r\n>>> mask = c.ones_like().astype(bool)\r\n>>> mask\r\n<ChunkedArray [[True]] at 0x7f68a3c85550>\r\n>>> c[mask]\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/mproffit/anaconda3/lib/python3.7/site-packages/awkward/array/chunked.py\", line 480, in __getitem__\r\n    raise TypeError(\"cannot interpret shape {0}, dtype {1} as a fancy index or mask\".format(head.shape, head.dtype))\r\nTypeError: cannot interpret shape (1, 1), dtype object as a fancy index or mask\r\n```\r\nThis of course works just fine for standard JaggedArrays. I run into this problem with uproot because it's much more convenient to use `lazyarrays()` (which returns ChunkedArrays), but I can't use them with this problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/185", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/185/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/185/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/185", "id": 489872664, "node_id": "MDU6SXNzdWU0ODk4NzI2NjQ=", "number": 185, "title": "count() method usage description", "user": {"login": "mverzett", "id": 2329596, "node_id": "MDQ6VXNlcjIzMjk1OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2329596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mverzett", "html_url": "https://github.com/mverzett", "followers_url": "https://api.github.com/users/mverzett/followers", "following_url": "https://api.github.com/users/mverzett/following{/other_user}", "gists_url": "https://api.github.com/users/mverzett/gists{/gist_id}", "starred_url": "https://api.github.com/users/mverzett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mverzett/subscriptions", "organizations_url": "https://api.github.com/users/mverzett/orgs", "repos_url": "https://api.github.com/users/mverzett/repos", "events_url": "https://api.github.com/users/mverzett/events{/privacy}", "received_events_url": "https://api.github.com/users/mverzett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-05T16:31:14Z", "updated_at": "2019-09-05T16:56:43Z", "closed_at": "2019-09-05T16:56:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am trying to understand the following error: I have a Jagged Table, built from coffea's `JaggedCandidateArray`. It is a `JaggedArrayMethods` class instance to be precise. \r\nWhen I call the `count()` method I get an exception:\r\n\r\n```\r\n/afs/cern.ch/work/m/mverzett/miniconda3/lib/python3.7/site-packages/awkward/array/objects.py in _prepare(self, ufunc, identity, dtype)\r\n    273 \r\n    274     def _prepare(self, ufunc, identity, dtype):\r\n--> 275         raise TypeError(\"cannot call reducer on ObjectArray\")\r\n    276 \r\n    277     def argmin(self):\r\n\r\nTypeError: cannot call reducer on ObjectArray\r\n```\r\n\r\nIf I then filter my collection, e.g.:\r\n`df['MyMuon'] = df['Muon'][(df['Muon'].pt > 3) & (np.abs(df['Muon'].eta) < 1)]`\r\n\r\nAnd I call `count()` the exception is different:\r\n```\r\n/afs/cern.ch/work/m/mverzett/miniconda3/lib/python3.7/site-packages/awkward/array/table.py in __setitem__(self, where, what)\r\n    624     def __setitem__(self, where, what):\r\n    625         if self._view is not None:\r\n--> 626             raise ValueError(\"new columns can only be attached to the original Table, not a view (try table.base['col'] = array)\")\r\n    627 \r\n    628         if isinstance(where, awkward.util.string):\r\n\r\nValueError: new columns can only be attached to the original Table, not a view (try table.base['col'] = array)\r\n```\r\n\r\nEven if I am not trying to attach any column.\r\n\r\nAre these behaviours expected? What is the best way to count the objects? Ideally one would implement such behaviour in `count()` to limit the number of methods the user has to remember :). ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/183", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/183/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/183/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/183", "id": 485258540, "node_id": "MDU6SXNzdWU0ODUyNTg1NDA=", "number": 183, "title": "Consider using simdjson", "user": {"login": "lemire", "id": 391987, "node_id": "MDQ6VXNlcjM5MTk4Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/391987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lemire", "html_url": "https://github.com/lemire", "followers_url": "https://api.github.com/users/lemire/followers", "following_url": "https://api.github.com/users/lemire/following{/other_user}", "gists_url": "https://api.github.com/users/lemire/gists{/gist_id}", "starred_url": "https://api.github.com/users/lemire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lemire/subscriptions", "organizations_url": "https://api.github.com/users/lemire/orgs", "repos_url": "https://api.github.com/users/lemire/repos", "events_url": "https://api.github.com/users/lemire/events{/privacy}", "received_events_url": "https://api.github.com/users/lemire/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-26T14:12:02Z", "updated_at": "2019-08-26T14:23:53Z", "closed_at": "2019-08-26T14:23:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Arguably, simdjson might be the fastest JSON parser available right now. As of version 0.2, simdjson runs on most hardware, including ARM processors; it has runtime dispatching. It is available as a single-hreader library.\r\n\r\nhttps://github.com/lemire/simdjson", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/181", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/181/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/181/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/181", "id": 484076757, "node_id": "MDU6SXNzdWU0ODQwNzY3NTc=", "number": 181, "title": "virtual/base/chunked array crash going through uproot.daskframe", "user": {"login": "douglasdavis", "id": 3202090, "node_id": "MDQ6VXNlcjMyMDIwOTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3202090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/douglasdavis", "html_url": "https://github.com/douglasdavis", "followers_url": "https://api.github.com/users/douglasdavis/followers", "following_url": "https://api.github.com/users/douglasdavis/following{/other_user}", "gists_url": "https://api.github.com/users/douglasdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/douglasdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/douglasdavis/subscriptions", "organizations_url": "https://api.github.com/users/douglasdavis/orgs", "repos_url": "https://api.github.com/users/douglasdavis/repos", "events_url": "https://api.github.com/users/douglasdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/douglasdavis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2019-08-22T15:47:38Z", "updated_at": "2019-08-22T20:03:38Z", "closed_at": "2019-08-22T20:03:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm seeing a crash via `uproot.daskframe` that appears to be originating from awkward but I'm not entirely sure so please correct me if I'm wrong there.\r\n\r\nThis is coming from `uproot.daskframe` for some very large \"flat\" (scalar branches only) TTrees. The crash copied below is from just trying to grab 2 branches from a list of 3 files (each file is a few GB total with about 300 branches total; I'm happy to put one in a public place if necessary). I've experimented to 1, 2, 5, 10, and all branches -- same crash every time.\r\n\r\n```\r\n>>> uproot.daskframe(files, tree_name, branches=[\"pT_lep1\", \"pT_lep2\"])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/uproot/tree.py\", line 1985, in daskframe\r\n    array = dask.array.from_array(x, x.shape, fancy=True)\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/dask/array/core.py\", line 2645, in from_array\r\n    asarray = not hasattr(x, \"__array_function__\")\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/awkward/array/base.py\", line 241, in __getattr__\r\n    if where in self.columns:\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/awkward/array/base.py\", line 648, in columns\r\n    return self._util_columns(set())\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/awkward/array/chunked.py\", line 727, in _util_columns\r\n    return self._util_columns_descend(self._chunks[chunkid], seen)\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/awkward/array/base.py\", line 644, in _util_columns_descend\r\n    return array._util_columns(seen)\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/awkward/array/virtual.py\", line 476, in _util_columns\r\n    return self._util_columns_descend(self.array, seen)\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/awkward/array/base.py\", line 644, in _util_columns_descend\r\n    return array._util_columns(seen)\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/awkward/array/chunked.py\", line 727, in _util_columns\r\n    return self._util_columns_descend(self._chunks[chunkid], seen)\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/awkward/array/base.py\", line 644, in _util_columns_descend\r\n    return array._util_columns(seen)\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/awkward/array/virtual.py\", line 476, in _util_columns\r\n    return self._util_columns_descend(self.array, seen)\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/awkward/array/virtual.py\", line 295, in array\r\n    return self.materialize()\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/awkward/array/virtual.py\", line 326, in materialize\r\n    array = self._util_toarray(self._generator(*self._args, **self._kwargs), self.DEFAULTTYPE)\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/uproot/tree.py\", line 1912, in __call__\r\n    return self.branch.array(interpretation=self.interpretation, entrystart=entrystart, entrystop=entrystop, flatten=self.flatten, awkwardlib=self.awkwardlib, cache=None, basketcache=self.basketcache, keycache=self.keycache, executor=self.executor, blocking=True)\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/uproot/tree.py\", line 1395, in array\r\n    _delayedraise(fill(j))\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/uproot/tree.py\", line 58, in _delayedraise\r\n    raise err.with_traceback(trc)\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/uproot/tree.py\", line 1363, in fill\r\n    source = self._basket(i, interpretation, local_entrystart, local_entrystop, awkward, basketcache, keycache)\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/uproot/tree.py\", line 1149, in _basket\r\n    basketcache[basketcachekey] = basketdata\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/uproot/cache.py\", line 67, in __setitem__\r\n    self._cache[where] = what\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/cachetools/lru.py\", line 21, in __setitem__\r\n    cache_setitem(self, key, value)\r\n  File \"/home/ddavis/.pyenv/versions/3.7.4/lib/python3.7/site-packages/cachetools/cache.py\", line 49, in __setitem__\r\n    raise ValueError('value too large')\r\nValueError: value too large\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/180", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/180/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/180/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/180", "id": 481367547, "node_id": "MDU6SXNzdWU0ODEzNjc1NDc=", "number": 180, "title": "argcross() problems with ChunkedArray", "user": {"login": "masonproffitt", "id": 32773304, "node_id": "MDQ6VXNlcjMyNzczMzA0", "avatar_url": "https://avatars3.githubusercontent.com/u/32773304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/masonproffitt", "html_url": "https://github.com/masonproffitt", "followers_url": "https://api.github.com/users/masonproffitt/followers", "following_url": "https://api.github.com/users/masonproffitt/following{/other_user}", "gists_url": "https://api.github.com/users/masonproffitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/masonproffitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/masonproffitt/subscriptions", "organizations_url": "https://api.github.com/users/masonproffitt/orgs", "repos_url": "https://api.github.com/users/masonproffitt/repos", "events_url": "https://api.github.com/users/masonproffitt/events{/privacy}", "received_events_url": "https://api.github.com/users/masonproffitt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-15T22:38:13Z", "updated_at": "2019-09-28T03:44:12Z", "closed_at": "2019-09-27T16:28:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've run into two different errors while trying to use `argcross()` with `ChunkedArrays`. One problem is that it doesn't work if the underlying chunks don't have an `argcross` property:\r\n```python\r\n>>> import awkward\r\n>>> c = awkward.ChunkedArray([[0]])\r\n>>> c.argcross(c)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/mproffit/anaconda3/lib/python3.7/site-packages/awkward/array/chunked.py\", line 621, in argcross\r\n    out = self.copy(chunks=[x.argcross(other, nested=nested) for x in self._chunks])\r\n  File \"/home/mproffit/anaconda3/lib/python3.7/site-packages/awkward/array/chunked.py\", line 621, in <listcomp>\r\n    out = self.copy(chunks=[x.argcross(other, nested=nested) for x in self._chunks])\r\nAttributeError: 'numpy.ndarray' object has no attribute 'argcross'\r\n```\r\n\r\nAnd even if the chunks *do* have an `argcross` (e.g., `JaggedArray`), they paradoxically can't be `argcross`ed with a `ChunkedArray`:\r\n```python\r\n>>> j = awkward.JaggedArray([0], [1], [0])\r\n>>> j\r\n<JaggedArray [[0]] at 0x7fe5543808d0>\r\n>>> cj = awkward.ChunkedArray([j]) \r\n>>> cj\r\n<ChunkedArray [[0]] at 0x7fe554380898>\r\n>>> j.argcross(j)\r\n<JaggedArray [[(0, 0)]] at 0x7fe53e9986a0>\r\n>>> cj.argcross(cj)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/mproffit/anaconda3/lib/python3.7/site-packages/awkward/array/chunked.py\", line 621, in argcross\r\n    out = self.copy(chunks=[x.argcross(other, nested=nested) for x in self._chunks])\r\n  File \"/home/mproffit/anaconda3/lib/python3.7/site-packages/awkward/array/chunked.py\", line 621, in <listcomp>\r\n    out = self.copy(chunks=[x.argcross(other, nested=nested) for x in self._chunks])\r\n  File \"/home/mproffit/anaconda3/lib/python3.7/site-packages/awkward/array/jagged.py\", line 1315, in argcross\r\n    out = self._argcross(other)\r\n  File \"/home/mproffit/anaconda3/lib/python3.7/site-packages/awkward/array/jagged.py\", line 1294, in _argcross\r\n    raise TypeError(\"both arrays must be JaggedArrays\")\r\nTypeError: both arrays must be JaggedArrays\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/176", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/176/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/176/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/176", "id": 477350302, "node_id": "MDU6SXNzdWU0NzczNTAzMDI=", "number": 176, "title": "JaggedArray.argmax() returns multiple values for some events", "user": {"login": "benkrikler", "id": 4083697, "node_id": "MDQ6VXNlcjQwODM2OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4083697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benkrikler", "html_url": "https://github.com/benkrikler", "followers_url": "https://api.github.com/users/benkrikler/followers", "following_url": "https://api.github.com/users/benkrikler/following{/other_user}", "gists_url": "https://api.github.com/users/benkrikler/gists{/gist_id}", "starred_url": "https://api.github.com/users/benkrikler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benkrikler/subscriptions", "organizations_url": "https://api.github.com/users/benkrikler/orgs", "repos_url": "https://api.github.com/users/benkrikler/repos", "events_url": "https://api.github.com/users/benkrikler/events{/privacy}", "received_events_url": "https://api.github.com/users/benkrikler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-06T12:26:15Z", "updated_at": "2019-08-12T12:55:52Z", "closed_at": "2019-08-06T13:06:55Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I'm having an issue with argmax for version 0.12.5 (current version on pypi).\r\n\r\nThe following snippet demonstrates the problem:\r\n\r\n```python\r\nmasses = [[983, 715, 796, 213, 702, 789, 404, 319, 290, 346, 693, 771, 308, 337,\r\n            236, 274, 180, 322, 361, 157, 687, 769, 317, 321, 231, 282, 148, 319,\r\n            367, 144, 189, 275, 303, 137, 62, 928, 983, 171, 726, 177, 206, 715,\r\n            380, 403, 312, 702, 295, 297, 254, 338, 698, 299, 312, 255, 339, 290],\r\n           [705, 884, 645, 377, 783, 476, 321, 738, 126, 316]]\r\nmasses = JaggedArray.fromiter(masses)\r\nprint(\"argmax\", masses.argmax())\r\nprint(\"max\", masses.max())\r\nprint(\"val of argmax\", masses[selected])\r\n```\r\nwhich will print out the following and then die on the last line:\r\n```\r\nargmax [[0] [36 1]]\r\nmax [983 884]\r\n```\r\n\r\nWhile the `max` method works as expected,  argmax seems to be confused, seemingly using the wrong starts and stops to define each event.\r\n\r\nThis might be related to issue #158 but looks distinct in that the result is greater than 1 entry in the resulting argmax array.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/172", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/172/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/172/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/172", "id": 474633401, "node_id": "MDU6SXNzdWU0NzQ2MzM0MDE=", "number": 172, "title": "Can't use gather operation on a filtered array", "user": {"login": "beojan", "id": 3727925, "node_id": "MDQ6VXNlcjM3Mjc5MjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3727925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beojan", "html_url": "https://github.com/beojan", "followers_url": "https://api.github.com/users/beojan/followers", "following_url": "https://api.github.com/users/beojan/following{/other_user}", "gists_url": "https://api.github.com/users/beojan/gists{/gist_id}", "starred_url": "https://api.github.com/users/beojan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beojan/subscriptions", "organizations_url": "https://api.github.com/users/beojan/orgs", "repos_url": "https://api.github.com/users/beojan/repos", "events_url": "https://api.github.com/users/beojan/events{/privacy}", "received_events_url": "https://api.github.com/users/beojan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 28, "created_at": "2019-07-30T14:52:43Z", "updated_at": "2019-07-31T16:39:58Z", "closed_at": "2019-07-31T16:39:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have code that looks like the following:\r\n\r\n```py\r\njets = tree['jets'][have_four_jets]\r\nquarks = tree['quarks'][have_four_jets]\r\n\r\nassoc = tree['jet_quark_assoc'][have_four_jets]\r\nassoc = assoc[assoc != 99]\r\n\r\nassoc_quarks = quarks[assoc]\r\n```\r\nHowever, `np.size(quarks.content) != np.size(assoc.content)` since `quarks.content` still points to the original unfiltered array, so this gives the error\r\n\r\n```\r\nIndexError: some indexes out of bounds for length 200000\r\n```\r\n\r\nwhere 200000 is the length of `quarks.content`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/170", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/170/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/170/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/170/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/170", "id": 473801945, "node_id": "MDU6SXNzdWU0NzM4MDE5NDU=", "number": 170, "title": "Numpy 1.17.0 causes all JaggedArray.from*() functions to fail for python lists", "user": {"login": "lgray", "id": 1068089, "node_id": "MDQ6VXNlcjEwNjgwODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1068089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lgray", "html_url": "https://github.com/lgray", "followers_url": "https://api.github.com/users/lgray/followers", "following_url": "https://api.github.com/users/lgray/following{/other_user}", "gists_url": "https://api.github.com/users/lgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/lgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lgray/subscriptions", "organizations_url": "https://api.github.com/users/lgray/orgs", "repos_url": "https://api.github.com/users/lgray/repos", "events_url": "https://api.github.com/users/lgray/events{/privacy}", "received_events_url": "https://api.github.com/users/lgray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-29T00:15:01Z", "updated_at": "2019-07-29T10:24:07Z", "closed_at": "2019-07-29T10:24:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`awkward.JaggedArray.fromiter([[20.2, 10.1, 30.3, 50.5], [50.5], [60]])`\r\n\r\nfails with numpy 1.17.0\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/anaconda3/envs/py36/lib/python3.6/site-packages/awkward/array/jagged.py\", line 132, in fromiter\r\n    return awkward.generate.fromiter(iterable, awkwardlib=cls.awkward.fget(None))\r\n  File \"/anaconda3/envs/py36/lib/python3.6/site-packages/awkward/generate.py\", line 431, in fromiter\r\n    return fillable.finalize(**options)\r\n  File \"/anaconda3/envs/py36/lib/python3.6/site-packages/awkward/generate.py\", line 196, in finalize\r\n    return self.awkwardlib.JaggedArray.fromoffsets(self.offsets, self.content.finalize(**options))\r\n  File \"/anaconda3/envs/py36/lib/python3.6/site-packages/awkward/array/jagged.py\", line 136, in fromoffsets\r\n    offsets = cls._util_toarray(offsets, cls.INDEXTYPE, cls.numpy.ndarray)\r\n  File \"/anaconda3/envs/py36/lib/python3.6/site-packages/awkward/array/base.py\", line 380, in _util_toarray\r\n    return cls.numpy.frombuffer(value, dtype=getattr(value, \"dtype\", defaultdtype)).reshape(getattr(value, \"shape\", -1))\r\nTypeError: a bytes-like object is required, not 'list'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/169", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/169/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/169/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/169/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/169", "id": 471873092, "node_id": "MDU6SXNzdWU0NzE4NzMwOTI=", "number": 169, "title": "Unable to serialize/save TLorentzVectorArray", "user": {"login": "masonproffitt", "id": 32773304, "node_id": "MDQ6VXNlcjMyNzczMzA0", "avatar_url": "https://avatars3.githubusercontent.com/u/32773304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/masonproffitt", "html_url": "https://github.com/masonproffitt", "followers_url": "https://api.github.com/users/masonproffitt/followers", "following_url": "https://api.github.com/users/masonproffitt/following{/other_user}", "gists_url": "https://api.github.com/users/masonproffitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/masonproffitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/masonproffitt/subscriptions", "organizations_url": "https://api.github.com/users/masonproffitt/orgs", "repos_url": "https://api.github.com/users/masonproffitt/repos", "events_url": "https://api.github.com/users/masonproffitt/events{/privacy}", "received_events_url": "https://api.github.com/users/masonproffitt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 962512551, "node_id": "MDU6TGFiZWw5NjI1MTI1NTE=", "url": "https://api.github.com/repos/scikit-hep/awkward-array/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-23T18:55:13Z", "updated_at": "2019-08-31T18:42:31Z", "closed_at": "2019-08-31T17:56:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is what happens if I try to save a TLorentzVectorArray with awkward:\r\n```python\r\n>>> import awkward, uproot_methods\r\n>>> a = awkward.fromiter([[], [1]])\r\n>>> tlva = uproot_methods.TLorentzVectorArray.from_ptetaphi(a, a, a, a)\r\n>>> awkward.save(\"tlva.awkd\", tlva)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/awkward/persist.py\", line 695, in save\r\n    serialize(array, wrapped, name=name, **options)\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/awkward/persist.py\", line 489, in serialize\r\n    return BlobSerializer(storage, **kwargs).store(name, obj)\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/awkward/persist.py\", line 278, in store\r\n    schema = {\"awkward\": awkward.version.__version__, \"schema\": self(obj)}\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/awkward/persist.py\", line 376, in __call__\r\n    out = self._encode_complex(obj, context)\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/awkward/persist.py\", line 327, in _encode_complex\r\n    return obj.__awkward_serialize__(self)\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/awkward/array/jagged.py\", line 278, in __awkward_serialize__\r\n    serializer(self._content, \"JaggedArray.content\"),\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/awkward/persist.py\", line 376, in __call__\r\n    out = self._encode_complex(obj, context)\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/awkward/persist.py\", line 327, in _encode_complex\r\n    return obj.__awkward_serialize__(self)\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/awkward/array/objects.py\", line 100, in __awkward_serialize__\r\n    serializer(self._generator, \"ObjectArray.generator\"),\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/awkward/persist.py\", line 378, in __call__\r\n    raise TypeError(\"failed to encode {0} (type: {1})\".format(repr(obj), type(obj)))\r\nTypeError: failed to encode <function ArrayMethods._initObjectArray.<locals>.<lambda> at 0x7f32b7d5d158> (type: <class 'function'>)\r\n```\r\nI've never tried messing with serialization, so I have no idea what the solution is here. I really just need to export the array to a file, so I'd be fine with another method to accomplish that if there is one. I haven't tried this with HDF5, for example. Also, I used JaggedArrays above, but it actually gives the same error in a case without any jaggedness.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/166", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/166/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/166/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/166", "id": 470105857, "node_id": "MDU6SXNzdWU0NzAxMDU4NTc=", "number": 166, "title": "Behavior of .all() is not consistent with numpy", "user": {"login": "masonproffitt", "id": 32773304, "node_id": "MDQ6VXNlcjMyNzczMzA0", "avatar_url": "https://avatars3.githubusercontent.com/u/32773304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/masonproffitt", "html_url": "https://github.com/masonproffitt", "followers_url": "https://api.github.com/users/masonproffitt/followers", "following_url": "https://api.github.com/users/masonproffitt/following{/other_user}", "gists_url": "https://api.github.com/users/masonproffitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/masonproffitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/masonproffitt/subscriptions", "organizations_url": "https://api.github.com/users/masonproffitt/orgs", "repos_url": "https://api.github.com/users/masonproffitt/repos", "events_url": "https://api.github.com/users/masonproffitt/events{/privacy}", "received_events_url": "https://api.github.com/users/masonproffitt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-19T02:23:22Z", "updated_at": "2020-02-16T05:21:15Z", "closed_at": "2019-07-24T21:17:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the difference between `.all()` with a `numpy.ndarray` and a `JaggedArray`:\r\n```python\r\n>>> import numpy, awkward\r\n>>> numpy_array = numpy.ndarray([1, 1], dtype=bool)\r\n>>> awkward_array = awkward.fromiter([[True]])\r\n>>> numpy_array\r\narray([[ True]])\r\n>>> awkward_array\r\n<JaggedArray [[True]] at 0x7f353ea89278>\r\n>>> numpy_array.all()\r\nTrue\r\n>>> awkward_array.all()\r\narray([ True])\r\n```\r\nOne would certainly intuitively expect `.all()` to give the same result in both of these cases, but for a `JaggedArray` an array is returned rather than a `bool`. Numpy does a logical AND over all the dimensions of the input array, whereas awkward seems to only do an AND over the final dimension. Is there a good reason why `AwkwardArray.all()` doesn't follow the same convention as numpy's default `.all()`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/163", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/163/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/163/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/163", "id": 469463665, "node_id": "MDU6SXNzdWU0Njk0NjM2NjU=", "number": 163, "title": "Multi-d slicing breaks on empty jagged arrays", "user": {"login": "nsmith-", "id": 6587412, "node_id": "MDQ6VXNlcjY1ODc0MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6587412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsmith-", "html_url": "https://github.com/nsmith-", "followers_url": "https://api.github.com/users/nsmith-/followers", "following_url": "https://api.github.com/users/nsmith-/following{/other_user}", "gists_url": "https://api.github.com/users/nsmith-/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsmith-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsmith-/subscriptions", "organizations_url": "https://api.github.com/users/nsmith-/orgs", "repos_url": "https://api.github.com/users/nsmith-/repos", "events_url": "https://api.github.com/users/nsmith-/events{/privacy}", "received_events_url": "https://api.github.com/users/nsmith-/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-17T21:50:31Z", "updated_at": "2019-07-18T08:46:52Z", "closed_at": "2019-07-18T08:46:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Example case:\r\n```python\r\nimport awkward\r\na = awkward.fromiter([[1, 3], [4, 5]])\r\nb = a[a.counts > 10]\r\nb[:,:1]\r\n```\r\nI made a patch already", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/161", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/161/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/161/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/161", "id": 468392842, "node_id": "MDU6SXNzdWU0NjgzOTI4NDI=", "number": 161, "title": "ChunkedArray ufunc bug", "user": {"login": "nsmith-", "id": 6587412, "node_id": "MDQ6VXNlcjY1ODc0MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6587412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsmith-", "html_url": "https://github.com/nsmith-", "followers_url": "https://api.github.com/users/nsmith-/followers", "following_url": "https://api.github.com/users/nsmith-/following{/other_user}", "gists_url": "https://api.github.com/users/nsmith-/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsmith-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsmith-/subscriptions", "organizations_url": "https://api.github.com/users/nsmith-/orgs", "repos_url": "https://api.github.com/users/nsmith-/repos", "events_url": "https://api.github.com/users/nsmith-/events{/privacy}", "received_events_url": "https://api.github.com/users/nsmith-/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 962512551, "node_id": "MDU6TGFiZWw5NjI1MTI1NTE=", "url": "https://api.github.com/repos/scikit-hep/awkward-array/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-16T00:38:10Z", "updated_at": "2019-09-27T16:56:10Z", "closed_at": "2019-09-27T16:56:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following particular inputs causes an error\r\n```python\r\nimport awkward\r\nimport numpy as np\r\n\r\nchunks = [\r\n    np.arange(5),\r\n    np.arange(5),\r\n    np.arange(5)\r\n]\r\na = awkward.ChunkedArray(chunks, [5, 5, 5])\r\nb = np.ones(15)\r\nc = np.array([1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1])\r\n\r\na[c > 0] + b[c > 0]\r\n```\r\nIt's sensitive to the mask array `c`, but I haven't dug much deeper yet.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/158", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/158/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/158/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/158", "id": 465966812, "node_id": "MDU6SXNzdWU0NjU5NjY4MTI=", "number": 158, "title": "JaggedArray.argmax() errors for zero-length entries even if max() works", "user": {"login": "AndreasAlbert", "id": 9568102, "node_id": "MDQ6VXNlcjk1NjgxMDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9568102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreasAlbert", "html_url": "https://github.com/AndreasAlbert", "followers_url": "https://api.github.com/users/AndreasAlbert/followers", "following_url": "https://api.github.com/users/AndreasAlbert/following{/other_user}", "gists_url": "https://api.github.com/users/AndreasAlbert/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreasAlbert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreasAlbert/subscriptions", "organizations_url": "https://api.github.com/users/AndreasAlbert/orgs", "repos_url": "https://api.github.com/users/AndreasAlbert/repos", "events_url": "https://api.github.com/users/AndreasAlbert/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreasAlbert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-09T20:19:25Z", "updated_at": "2019-07-09T21:58:37Z", "closed_at": "2019-07-09T21:33:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI encountered a problem when trying to get the `argmax` of an array I apply some selection to. If the selection happens to kill all entries, `argmax` will fail even though `max` still works. I first suspected this was a duplicate of #100, but since `max` seems to work I am not so sure. Anyway, here's a snippet of what I mean:\r\n\r\n```python\r\nfrom awkward import JaggedArray\r\nimport numpy as np\r\ncounts = np.array([ 1, 0, 3 ])\r\nvalues = np.array( [1, 2, 3, 4])\r\n\r\nj = JaggedArray.fromcounts(counts, values)\r\n\r\nj.max() # works fine\r\nj.argmax() # works fine\r\n\r\n# Apply a selection that results in zero \r\n# passing entries\r\nj2 = j[j < 0]\r\n\r\nj2.max() # works fine\r\nj2.argmax() # Error!\r\n```\r\nThe error message is:\r\n\r\n```\r\nValueError: zero-size array to reduction operation maximum which has no identity\r\n```\r\n\r\nI would have expected to get \r\n```\r\nj2.argmax() -> [[][][]]\r\n```\r\nwhich would be consistent with \r\n```\r\nj.argmax() -> [[0] [] [2]]\r\n```\r\n\r\nIs this expected?\r\n\r\nThanks\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/157", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/157/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/157/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/157", "id": 464419280, "node_id": "MDU6SXNzdWU0NjQ0MTkyODA=", "number": 157, "title": "comparison with tensorflow ragged tensors", "user": {"login": "aminnj", "id": 5760027, "node_id": "MDQ6VXNlcjU3NjAwMjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5760027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aminnj", "html_url": "https://github.com/aminnj", "followers_url": "https://api.github.com/users/aminnj/followers", "following_url": "https://api.github.com/users/aminnj/following{/other_user}", "gists_url": "https://api.github.com/users/aminnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/aminnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aminnj/subscriptions", "organizations_url": "https://api.github.com/users/aminnj/orgs", "repos_url": "https://api.github.com/users/aminnj/repos", "events_url": "https://api.github.com/users/aminnj/events{/privacy}", "received_events_url": "https://api.github.com/users/aminnj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-05T00:26:00Z", "updated_at": "2019-07-05T12:18:48Z", "closed_at": "2019-07-05T01:49:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not an issue, just a curiosity...\r\n\r\nFrom some unrelated documentation-scouring, I came across \"ragged tensors\" in tensorflow [here](https://www.tensorflow.org/guide/ragged_tensors). I'm wondering if anyone has done some comparisons of awkward vs ragged implementations. Maybe the tf thing is too new (couldn't find any mentions of tensorflow when searching issues here).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/150", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/150/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/150/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/150", "id": 458193952, "node_id": "MDU6SXNzdWU0NTgxOTM5NTI=", "number": 150, "title": "JaggedArray.tojagged(999) returns None", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-19T19:43:54Z", "updated_at": "2019-07-09T11:58:56Z", "closed_at": "2019-07-09T11:58:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Should be a result or an error, but not `None`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/149", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/149/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/149/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/149", "id": 458181380, "node_id": "MDU6SXNzdWU0NTgxODEzODA=", "number": 149, "title": "Concatenating two jagged arrays", "user": {"login": "mat-adamec", "id": 25493839, "node_id": "MDQ6VXNlcjI1NDkzODM5", "avatar_url": "https://avatars3.githubusercontent.com/u/25493839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mat-adamec", "html_url": "https://github.com/mat-adamec", "followers_url": "https://api.github.com/users/mat-adamec/followers", "following_url": "https://api.github.com/users/mat-adamec/following{/other_user}", "gists_url": "https://api.github.com/users/mat-adamec/gists{/gist_id}", "starred_url": "https://api.github.com/users/mat-adamec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mat-adamec/subscriptions", "organizations_url": "https://api.github.com/users/mat-adamec/orgs", "repos_url": "https://api.github.com/users/mat-adamec/repos", "events_url": "https://api.github.com/users/mat-adamec/events{/privacy}", "received_events_url": "https://api.github.com/users/mat-adamec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-19T19:12:00Z", "updated_at": "2019-07-09T11:42:25Z", "closed_at": "2019-07-09T11:42:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working on an analysis that has conditions based on leptons. Currently, it seems like the best way to do this is to build up multiple Jagged arrays for each lepton type, apply the same exact conditions that I want them all to meet, and then mask by every separate array. It seems like it would be simpler if there was a possibility to combine all the different Jagged arrays into one (i.e., instead of having muons and electrons, just push them into one lepton JA that I can check and mask).\r\n\r\n@nsmith- pointed out the concatenate function to me, but trying to concatenate two jagged candidate arrays with that seems to give type errors (as does specifically trying to concatenate their p4).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/144", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/144/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/144/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/144", "id": 456972159, "node_id": "MDU6SXNzdWU0NTY5NzIxNTk=", "number": 144, "title": "Awkward array throws an error when masking a jagged table by its own member", "user": {"login": "lgray", "id": 1068089, "node_id": "MDQ6VXNlcjEwNjgwODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1068089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lgray", "html_url": "https://github.com/lgray", "followers_url": "https://api.github.com/users/lgray/followers", "following_url": "https://api.github.com/users/lgray/following{/other_user}", "gists_url": "https://api.github.com/users/lgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/lgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lgray/subscriptions", "organizations_url": "https://api.github.com/users/lgray/orgs", "repos_url": "https://api.github.com/users/lgray/repos", "events_url": "https://api.github.com/users/lgray/events{/privacy}", "received_events_url": "https://api.github.com/users/lgray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-06-17T14:36:19Z", "updated_at": "2019-06-17T15:58:03Z", "closed_at": "2019-06-17T15:49:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\nfrom awkward import JaggedArray, Table\r\n\r\ntab = Table(isloose=[True], x=[0.5])\r\njagged = JaggedArray.fromcounts([0,0,0,0,0,0,1,0,0,0], tab)\r\nmasked_out = jagged[jagged['isloose']]\r\n```\r\n\r\nfails like:\r\n```\r\nTraceback (most recent call last):\r\n  File \"fail.py\", line 7, in <module>\r\n    masked_out = jagged[jagged['isloose']]\r\n  File \"/anaconda3/envs/py36/lib/python3.6/site-packages/awkward/array/jagged.py\", line 536, in __getitem__\r\n    intheadsum = inthead.sum()\r\n  File \"/anaconda3/envs/py36/lib/python3.6/site-packages/awkward/array/base.py\", line 165, in sum\r\n    return self._reduce(self.numpy.add, 0, None, regularaxis)\r\n  File \"/anaconda3/envs/py36/lib/python3.6/site-packages/awkward/array/jagged.py\", line 1447, in _reduce\r\n    out[thyself.starts == thyself.stops] = identity\r\nIndexError: boolean index did not match indexed array along dimension 0; dimension is 7 but corresponding boolean dimension is 10\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/141", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/141/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/141/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/141", "id": 453710534, "node_id": "MDU6SXNzdWU0NTM3MTA1MzQ=", "number": 141, "title": "Jagged Numba: indexing beyond the last non-empty subarray raises error", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-07T22:04:56Z", "updated_at": "2019-07-09T11:56:20Z", "closed_at": "2019-07-09T11:56:20Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It should return an empty array. The problem is that it needs to slice `content` from `i` to `i` for some index `i` beyond the range of the `content`. Normally, you shouldn't be able to index beyond the range of the `content`, but obviously you can if you're slicing _nothing_.\r\n\r\nDiscovered when preparing for Argonne tutorial.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/134", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/134/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/134/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/134", "id": 448870807, "node_id": "MDU6SXNzdWU0NDg4NzA4MDc=", "number": 134, "title": "Can't use MaskedArray when indexing another array", "user": {"login": "andrzejnovak", "id": 13226500, "node_id": "MDQ6VXNlcjEzMjI2NTAw", "avatar_url": "https://avatars1.githubusercontent.com/u/13226500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrzejnovak", "html_url": "https://github.com/andrzejnovak", "followers_url": "https://api.github.com/users/andrzejnovak/followers", "following_url": "https://api.github.com/users/andrzejnovak/following{/other_user}", "gists_url": "https://api.github.com/users/andrzejnovak/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrzejnovak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrzejnovak/subscriptions", "organizations_url": "https://api.github.com/users/andrzejnovak/orgs", "repos_url": "https://api.github.com/users/andrzejnovak/repos", "events_url": "https://api.github.com/users/andrzejnovak/events{/privacy}", "received_events_url": "https://api.github.com/users/andrzejnovak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-27T13:56:45Z", "updated_at": "2019-07-09T11:52:14Z", "closed_at": "2019-07-09T11:52:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Having an issue constructing subjets for jets, after I apply masking. Is this an inherent np property or could it be implemented?\r\n\r\n```\r\nimport awkward\r\njets = awkward.JaggedArray.fromcounts([3, 0, 2], awkward.Table(\r\n              x=[1, 2, 3, 4, 5],\r\n              subjet_ix=[0, 1, 0, 1, 0]\r\n              ))\r\n\r\nsubjets = awkward.JaggedArray.fromcounts([4, 0, 3], awkward.Table(\r\n              x=[1, 2, 3, 4, 5, 6, 7],\r\n              ))\r\n\r\nprint(jets['subjet_ix'])\r\nprint(subjets)\r\nprint(subjets[jets['subjet_ix']])\r\n\r\n# Want to mask invalid jets (for example subjet_ix is out of range for subjets)\r\njets.content = awkward.MaskedArray(jets['x'].content > 2, jets.content, maskedwhen=False)\r\nprint(jets['subjet_ix'])\r\nprint(subjets[jets['subjet_ix']])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/130", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/130/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/130/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/130", "id": 444663262, "node_id": "MDU6SXNzdWU0NDQ2NjMyNjI=", "number": 130, "title": "index dtype error in compact", "user": {"login": "jpata", "id": 69717, "node_id": "MDQ6VXNlcjY5NzE3", "avatar_url": "https://avatars0.githubusercontent.com/u/69717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpata", "html_url": "https://github.com/jpata", "followers_url": "https://api.github.com/users/jpata/followers", "following_url": "https://api.github.com/users/jpata/following{/other_user}", "gists_url": "https://api.github.com/users/jpata/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpata/subscriptions", "organizations_url": "https://api.github.com/users/jpata/orgs", "repos_url": "https://api.github.com/users/jpata/repos", "events_url": "https://api.github.com/users/jpata/events{/privacy}", "received_events_url": "https://api.github.com/users/jpata/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-15T21:56:36Z", "updated_at": "2019-05-15T22:11:26Z", "closed_at": "2019-05-15T22:04:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Reopen incorrectly created issue from https://github.com/scikit-hep/uproot/issues/277.\r\n\r\nOn compacting a masked JaggedArray of floats, I'm getting a dtype error from core uproot.\r\nEssentially, a normal-looking masked JaggedArray fails to compact.\r\n~~~\r\nimport pickle\r\nimport awkward\r\n\r\nfi = open(\"test.pickle\", \"rb\")\r\npfi = pickle.load(fi)\r\n\r\narr = pfi[\"data\"]\r\noffsets = pfi[\"offsets\"]\r\nmask = pfi[\"mask\"]\r\n\r\nprint(arr.dtype, offsets.dtype, mask.dtype)\r\n\r\nja = awkward.JaggedArray.fromoffsets(offsets, arr)\r\nja2 = ja[mask].compact()\r\n~~~\r\nHere is a test file: [test.pickle](https://cernbox.cern.ch/index.php/s/5dVXvfguqIxV9lt)\r\n\r\nI'm getting the following exception:\r\n~~~\r\n    ja_reduced = ja[mask].compact()\r\n  File \"/usr/local/lib/python3.6/dist-packages/awkward/array/jagged.py\", line 1315, in compact\r\n    out = tmp._tojagged(offsets[:-1], offsets[1:], copy=False)\r\n  File \"/usr/local/lib/python3.6/dist-packages/awkward/array/jagged.py\", line 840, in _tojagged\r\n    index += increase\r\nTypeError: Cannot cast ufunc add output from dtype('float64') to dtype('uint64') with casting rule 'same_kind'\r\n~~~\r\n\r\nBelow are what I find with PDB but so far I didn't manage to pinpoint what's happening.\r\n~~~\r\n-> ja_reduced = ja[mask].compact()\r\n  /usr/local/lib/python3.6/dist-packages/awkward/array/jagged.py(1315)compact()\r\n-> out = tmp._tojagged(offsets[:-1], offsets[1:], copy=False)\r\n> /usr/local/lib/python3.6/dist-packages/awkward/array/jagged.py(840)_tojagged()\r\n-> index += increase\r\n\r\n(Pdb) index\r\narray([     31,      31,      72, ..., 2235098, 2235108, 2235108],\r\n      dtype=uint64)\r\n(Pdb) increase\r\narray([0, 1, 0, ..., 1, 0, 1])\r\n(Pdb) increase.dtype\r\ndtype('int64')\r\n\r\n(Pdb) up\r\n(Pdb) tmp\r\n<JaggedArray [[48.76737594604492 41.7457389831543] [30.168916702270508 30.107635498046875] [40.9498405456543 31.542665481567383] ... [46.60263442993164 42.470794677734375] [53.8294792175293 34.471214294433594] [93.6303482055664 22.601713180541992]] at 0x7f54a6a5b940>\r\n(Pdb) offsets\r\narray([     0,      2,      4, ..., 112586, 112588, 112590])\r\n\r\n(Pdb) up\r\n(Pdb) ja\r\n<JaggedArray [[13.416550636291504] [26.130809783935547] [3.865323066711426] ... [32.84395980834961] [31.43795394897461] [25.133100509643555]] at 0x7f549f45ada0>\r\n(Pdb) mask\r\narray([False, False, False, ..., False, False, False])\r\n~~~\r\n\r\nThanks for any thoughts!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/128", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/128/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/128/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/128", "id": 441008718, "node_id": "MDU6SXNzdWU0NDEwMDg3MTg=", "number": 128, "title": "IndexError when creating TLorentzVectorArray from JaggedArray slices", "user": {"login": "masonproffitt", "id": 32773304, "node_id": "MDQ6VXNlcjMyNzczMzA0", "avatar_url": "https://avatars3.githubusercontent.com/u/32773304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/masonproffitt", "html_url": "https://github.com/masonproffitt", "followers_url": "https://api.github.com/users/masonproffitt/followers", "following_url": "https://api.github.com/users/masonproffitt/following{/other_user}", "gists_url": "https://api.github.com/users/masonproffitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/masonproffitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/masonproffitt/subscriptions", "organizations_url": "https://api.github.com/users/masonproffitt/orgs", "repos_url": "https://api.github.com/users/masonproffitt/repos", "events_url": "https://api.github.com/users/masonproffitt/events{/privacy}", "received_events_url": "https://api.github.com/users/masonproffitt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-07T03:26:41Z", "updated_at": "2019-05-07T15:01:50Z", "closed_at": "2019-05-07T15:01:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I ran into this use case while trying to get real four-momenta out of an ntuple via uproot. This is a dummy version:\r\n```python\r\nimport awkward, uproot_methods\r\nfull_array = awkward.fromiter([ [[1.0]], [[2.0]], [[3.0]], [[4.0]] ])\r\nprint('full array', 'type:', type(full_array), 'str:', full_array, 'content:', full_array.content)\r\npT = full_array[0]\r\neta = full_array[1]\r\nphi = full_array[2]\r\nE = full_array[3]\r\nprint('pT', 'type:', type(pT), 'str:', pT, 'content:', pT.content)\r\nprint('eta', 'type:', type(eta), 'str:', eta, 'content:', eta.content)\r\nprint('phi', 'type:', type(phi), 'str:', phi, 'content:', phi.content)\r\nprint('E', 'type:', type(E), 'str:', E, 'content:', E.content)\r\nuproot_methods.TLorentzVectorArray.from_ptetaphi(pT, eta, phi, E)\r\n```\r\nwhich produces the following output:\r\n```python\r\nfull array type: <class 'awkward.array.jagged.JaggedArray'> str: [[[1.0]] [[2.0]] [[3.0]] [[4.0]]] content: [[1.0] [2.0] [3.0] [4.0]]\r\npT type: <class 'awkward.array.jagged.JaggedArray'> str: [[1.0]] content: [1. 2. 3. 4.]\r\neta type: <class 'awkward.array.jagged.JaggedArray'> str: [[2.0]] content: [1. 2. 3. 4.]\r\nphi type: <class 'awkward.array.jagged.JaggedArray'> str: [[3.0]] content: [1. 2. 3. 4.]\r\nE type: <class 'awkward.array.jagged.JaggedArray'> str: [[4.0]] content: [1. 2. 3. 4.]\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 15, in <module>\r\n    uproot_methods.TLorentzVectorArray.from_ptetaphi(pT, eta, phi, E)\r\n  File \"awkward-array/awkward/util.py\", line 104, in func_wrapper\r\n    wrap, arrays = unwrap_jagged(cls, awkcls, _normalize_arrays(cls, arrays))\r\n  File \"awkward-array/awkward/util.py\", line 84, in _normalize_arrays\r\n    arrays[i] = jaggedtype[i](starts, stops, content) + arrays[i]    # invoke jagged broadcasting to align arrays\r\n  File \"/usr/lib/python3.7/site-packages/numpy/lib/mixins.py\", line 25, in func\r\n    return ufunc(self, other)\r\n  File \"awkward-array/awkward/array/jagged.py\", line 877, in __array_ufunc__\r\n    inputs[i] = inputs[i]._tojagged(starts, stops, copy=False)\r\n  File \"awkward-array/awkward/array/jagged.py\", line 844, in _tojagged\r\n    out = self.copy(starts=starts, stops=stops, content=self._content[index])\r\nIndexError: index 1 is out of bounds for axis 0 with size 1\r\n```\r\nI managed to get it around it with 89edaffc0c2adf43abaf8c0bd7c262d7e2bd47ce, which just makes sure no bad indices get sliced in `_tojagged()`. I have no idea if there's a better fix, but this at least doesn't break any tests as far as I can tell.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/127", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/127/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/127/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/127", "id": 435235739, "node_id": "MDU6SXNzdWU0MzUyMzU3Mzk=", "number": 127, "title": "JaggedArray.concatenate axis=1 fails for empty arrays", "user": {"login": "nsmith-", "id": 6587412, "node_id": "MDQ6VXNlcjY1ODc0MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6587412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsmith-", "html_url": "https://github.com/nsmith-", "followers_url": "https://api.github.com/users/nsmith-/followers", "following_url": "https://api.github.com/users/nsmith-/following{/other_user}", "gists_url": "https://api.github.com/users/nsmith-/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsmith-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsmith-/subscriptions", "organizations_url": "https://api.github.com/users/nsmith-/orgs", "repos_url": "https://api.github.com/users/nsmith-/repos", "events_url": "https://api.github.com/users/nsmith-/events{/privacy}", "received_events_url": "https://api.github.com/users/nsmith-/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-04-19T16:40:50Z", "updated_at": "2019-07-10T17:11:18Z", "closed_at": "2019-07-10T16:44:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For\r\n```python\r\nimport awkward\r\n\r\na = awkward.fromiter([[], [], []])\r\nb = awkward.fromiter([[], [], []])\r\n\r\nawkward.JaggedArray.concatenate([a, b], axis=1)\r\n```\r\nI would expect `<JaggedArray [[] [] []] at ...>` but instead an exception is raised (below)\r\nNo such error is encountered if either array has nonzero content.  Seems hazardous to deduce dtype in this manner.\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-43-6f2db7423a57> in <module>\r\n      4 b = awkward.fromiter([[], [], []])\r\n      5 \r\n----> 6 awkward.JaggedArray.concatenate([a, b], axis=1)\r\n\r\n/usr/local/lib/python3.7/site-packages/awkward-0.9.1-py3.7.egg/awkward/util.py in <lambda>(*args, **kwargs)\r\n     45     def __get__(self, ins, typ):\r\n     46         if ins is None:\r\n---> 47             return lambda *args, **kwargs: self.fcn(True, typ, *args, **kwargs)\r\n     48         else:\r\n     49             return lambda *args, **kwargs: self.fcn(False, ins, *args, **kwargs)\r\n\r\n/usr/local/lib/python3.7/site-packages/awkward-0.9.1-py3.7.egg/awkward/array/base.py in concatenate(isclassmethod, cls_or_self, arrays, axis)\r\n    390             return cls._concatenate_axis0(arrays)\r\n    391         elif axis == 1:\r\n--> 392             return cls._concatenate_axis1(arrays)\r\n    393         else:\r\n    394             raise NotImplementedError(\"axis > 1\")\r\n\r\n/usr/local/lib/python3.7/site-packages/awkward-0.9.1-py3.7.egg/awkward/array/jagged.py in _concatenate_axis1(cls, arrays)\r\n   1585 \r\n   1586         if content_type == np.ndarray:\r\n-> 1587             content = np.zeros(n_content, dtype=get_dtype(flatarrays))\r\n   1588             for i in range(n_arrays):\r\n   1589                 content[get_mask(i)] = flatarrays[i]\r\n\r\n/usr/local/lib/python3.7/site-packages/awkward-0.9.1-py3.7.egg/awkward/array/jagged.py in get_dtype(arrays)\r\n   1579         # except for booleans which would get promoted to integers when summing\r\n   1580         def get_dtype(arrays):\r\n-> 1581             dtype = np.dtype(sum([x[0] for x in arrays if len(x) != 0]), False)\r\n   1582             allbools = not np.any([a.dtype != np.dtype(bool) for a in arrays])\r\n   1583             dtype = np.dtype(bool) if allbools else dtype\r\n\r\nTypeError: data type not understood\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/125", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/125/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/125/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/125", "id": 433792039, "node_id": "MDU6SXNzdWU0MzM3OTIwMzk=", "number": 125, "title": "Crash when slicing JaggedArray containing a ndarray", "user": {"login": "mverzett", "id": 2329596, "node_id": "MDQ6VXNlcjIzMjk1OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2329596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mverzett", "html_url": "https://github.com/mverzett", "followers_url": "https://api.github.com/users/mverzett/followers", "following_url": "https://api.github.com/users/mverzett/following{/other_user}", "gists_url": "https://api.github.com/users/mverzett/gists{/gist_id}", "starred_url": "https://api.github.com/users/mverzett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mverzett/subscriptions", "organizations_url": "https://api.github.com/users/mverzett/orgs", "repos_url": "https://api.github.com/users/mverzett/repos", "events_url": "https://api.github.com/users/mverzett/events{/privacy}", "received_events_url": "https://api.github.com/users/mverzett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-16T13:51:12Z", "updated_at": "2019-04-16T17:34:16Z", "closed_at": "2019-04-16T17:34:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\napparently doing this causes a crash:\r\n\r\n```python\r\nja = awk.JaggedArray.fromiter([[1,1,1],[1,1],[1]])\r\nja.content = np.random.rand(6, 3)\r\nja[:,:,0]\r\n```\r\n\r\n```\r\nAttributeError: 'numpy.ndarray' object has no attribute 'stops'\r\n```\r\n\r\nWould it be possible/meaningful to fix?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/116", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/116/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/116/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/116", "id": 428288830, "node_id": "MDU6SXNzdWU0MjgyODg4MzA=", "number": 116, "title": "Attaching new columns", "user": {"login": "mverzett", "id": 2329596, "node_id": "MDQ6VXNlcjIzMjk1OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2329596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mverzett", "html_url": "https://github.com/mverzett", "followers_url": "https://api.github.com/users/mverzett/followers", "following_url": "https://api.github.com/users/mverzett/following{/other_user}", "gists_url": "https://api.github.com/users/mverzett/gists{/gist_id}", "starred_url": "https://api.github.com/users/mverzett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mverzett/subscriptions", "organizations_url": "https://api.github.com/users/mverzett/orgs", "repos_url": "https://api.github.com/users/mverzett/repos", "events_url": "https://api.github.com/users/mverzett/events{/privacy}", "received_events_url": "https://api.github.com/users/mverzett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-02T15:16:29Z", "updated_at": "2019-04-04T08:22:43Z", "closed_at": "2019-04-04T08:22:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nwhen I try to attach a new column to a table that is the result of a cut I get the following error:\r\n\r\n```\r\nValueError: new columns can only be attached to the original Table, not a view (try table.base['col'] = array)\r\n```\r\n\r\nThe error very clear and so is the cause, but I do not get the reason for such limitation, and if there is a way to circumvent it.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/115", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/115/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/115/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/115", "id": 427200581, "node_id": "MDU6SXNzdWU0MjcyMDA1ODE=", "number": 115, "title": "Tables should have an unzip method; all arrays should pass it down", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-29T22:26:57Z", "updated_at": "2019-07-02T12:38:48Z", "closed_at": "2019-07-02T12:38:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "If the `Table` has `rowname == \"tuple\"`, such a method returns a tuple of each separated column; otherwise, it returns a dict.\r\n\r\nThis would render moot the issue of whether `cross`, `pairs`, `choose` should return a jagged table of virtual tuples or a tuple of jagged arrays, because you'll easily to get the latter with\r\n\r\n```python\r\nleft, right = a.cross(b).unzip()\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/112", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/112/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/112/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/112", "id": 426557365, "node_id": "MDU6SXNzdWU0MjY1NTczNjU=", "number": 112, "title": "The awkward.arrow.toparquet function should take a filename as first argument", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-28T15:27:29Z", "updated_at": "2019-03-29T14:59:42Z", "closed_at": "2019-03-29T14:59:42Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "So that the `awkward.save` and `awkward.toparquet` have similar signatures. `awkward.save`'s filename first, object-to-save second order was chosen for consistency with `numpy.save`; `awkward.toparquet` doesn't have a model, but it might as well follow the one in the same library.\r\n\r\n(Unless `awkward.toparquet` was chosen to be consistent with some pyarrow thing; but those are less visible to the users.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/111", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/111/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/111/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/111", "id": 425492450, "node_id": "MDU6SXNzdWU0MjU0OTI0NTA=", "number": 111, "title": "All awkward types should have a \"regular\" method", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-26T15:35:30Z", "updated_at": "2019-07-09T11:44:09Z", "closed_at": "2019-07-09T11:44:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In all cases, `AwkwardArray.regular` should turn the awkward array into a plain ol' Numpy array, _if possible_. `JaggedArray` already has such a method, but it would also be useful in `UnionArray` when all `contents` are Numpy.\r\n\r\nThis is related to #84, the request for an `awkward.where(flatbool, a, b)` method that takes `a[i]` from `a` if `flatbool[i]` and `b[i]` from `b` otherwise. Such a function would always return a `UnionArray` except for some specialized cases if we choose to single them out and implement them. The simple implementation of `where` would be:\r\n\r\n```python\r\ndef where(condition, x, y):\r\n    assert len(condition) == len(x) == len(y)\r\n    return UnionArray(condition.astype(UnionArray.TAGTYPE),  # bools -> tags\r\n                      numpy.arange(len(x)),                  # trivial indexes\r\n                      [y, x])                                # false -> 0, which is y\r\n```\r\n\r\nwhich basically just delays the application of the condition. Delayed evaluation is necessary because `x` and `y` might be too complex to mix, even if they are the same type. (That's why specialized cases may be handled differently, but probably shouldn't for regularity.) This isn't a problem for analysts: you can do all the\r\n\r\n```python\r\na[\"pt\"][:, 0]\r\n```\r\n\r\nstuff on a `UnionArray` just like any jagged table or whatever.\r\n\r\nBut then, to make this useful, you need a way of eventually evaluating the `where`, once you've broken down the structure to something that can be pure Numpy. `UnionArray.regular` can be\r\n\r\n```python\r\ndef regular(self):\r\n    if not all(isinstance(x, self.numpy.ndarray) for x in self._contents):\r\n        raise TypeError(\"you stink!\")\r\n    out = self.numpy.empty(len(self.index), dtype=self.dtype)  # see UnionArray.dtype\r\n    for tag, content in enumerate(self._contents):\r\n        out[self._tags == tag] = content[self.index[self._tags == tag]]\r\n    return out\r\n```\r\n\r\nwhich is a more-than-two version of `numpy.where`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/109", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/109/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/109/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/109", "id": 425098772, "node_id": "MDU6SXNzdWU0MjUwOTg3NzI=", "number": 109, "title": "JaggedArray slicing out of bounds", "user": {"login": "zhenbinwu", "id": 1052165, "node_id": "MDQ6VXNlcjEwNTIxNjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1052165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhenbinwu", "html_url": "https://github.com/zhenbinwu", "followers_url": "https://api.github.com/users/zhenbinwu/followers", "following_url": "https://api.github.com/users/zhenbinwu/following{/other_user}", "gists_url": "https://api.github.com/users/zhenbinwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhenbinwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhenbinwu/subscriptions", "organizations_url": "https://api.github.com/users/zhenbinwu/orgs", "repos_url": "https://api.github.com/users/zhenbinwu/repos", "events_url": "https://api.github.com/users/zhenbinwu/events{/privacy}", "received_events_url": "https://api.github.com/users/zhenbinwu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-25T20:24:08Z", "updated_at": "2019-03-25T20:31:55Z", "closed_at": "2019-03-25T20:28:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "For the JaggedArray slicing, I run into an issue when the index out of bound of the smallest array as below.  Is this expected? \r\n\r\n```\r\n                                                                                                                                                                                               benwu@cmslpc24:/uscms_data/d3/benwu/temp/CMSSW_10_2_11/src/NanoUpTools/test                                                                                                                    $ python\r\nPython 2.7.14+ (default, Mar 28 2018, 11:00:06)\r\n[GCC 7.3.1 20180127] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import awkward\r\n>>> print(awkward.__version__)\r\n0.8.11\r\n>>> a = awkward.JaggedArray.fromiter([[   1,     2,    3], [1,3,5], [    4,    5]])\r\n>>> print(a[:,0])\r\n[1 1 4]\r\n>>> print(a[:,1])\r\n[2 3 5]\r\n>>> print(a[:,3])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/uscms/home/benwu/.local/lib/python2.7/site-packages/awkward/array/jagged.py\", line 600, in __getitem__\r\n    raise IndexError(\"index {0} is out of bounds for jagged min size {1}\".format(original_head, counts.min()))\r\nIndexError: index 3 is out of bounds for jagged min size 2\r\n>>>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/107", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/107/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/107/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/107", "id": 423773266, "node_id": "MDU6SXNzdWU0MjM3NzMyNjY=", "number": 107, "title": "performance of idiomatic expressions", "user": {"login": "jpata", "id": 69717, "node_id": "MDQ6VXNlcjY5NzE3", "avatar_url": "https://avatars0.githubusercontent.com/u/69717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpata", "html_url": "https://github.com/jpata", "followers_url": "https://api.github.com/users/jpata/followers", "following_url": "https://api.github.com/users/jpata/following{/other_user}", "gists_url": "https://api.github.com/users/jpata/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpata/subscriptions", "organizations_url": "https://api.github.com/users/jpata/orgs", "repos_url": "https://api.github.com/users/jpata/repos", "events_url": "https://api.github.com/users/jpata/events{/privacy}", "received_events_url": "https://api.github.com/users/jpata/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-03-21T14:55:32Z", "updated_at": "2019-07-09T11:49:05Z", "closed_at": "2019-07-09T11:49:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've noticed that a somewhat-complex reduction is much faster (~250x) as a direct numba loop over contents and offsets as opposed to an idiomatic awkward array haiku. The task I have is that given a nested list of muon charges per event, mask all muons except the first two that have an opposite sign. I wonder if there is a better way to state this operation in awkward, or perhaps there is some unexpected performance loss?\r\n\r\nAwkward-array idiomatic code: runtime 1.9s.\r\n~~~\r\n#muon_charges: JaggedArray of the form [[-1, +1, -1], [+1, +1, -1], ...]\r\n#out_muon_mask: boolean array with the same length as muon_charges.content. Mask all charges except the first two of opposite charge, i.e. [1, 1, 0, 1, 0, 1] for the above array.\r\n\r\ndef get_os_muons_awkward(muon_charges, out_muon_mask):\r\n\r\n    ch = muon_charges\r\n        \r\n    #select events with at least 2 muons\r\n    events_min2_muons = ch.count()>=2\r\n    \r\n    #get the charges of the muons in these events\r\n    ch2 = ch[events_min2_muons]\r\n\r\n    #get the index pairs of all muons on an event-by-event basis\r\n    all_muon_pairs = ch2.argcross(ch2)\r\n\r\n    #get only those index pairs where the muon is not paired with itself and is paired with another muon with a higher index\r\n    pairs_mask = (all_muon_pairs['0'] != all_muon_pairs['1']) & ((all_muon_pairs['0'] < all_muon_pairs['1']))\r\n    all_muon_pairs = all_muon_pairs[pairs_mask]\r\n    \r\n    #get the pairs with the opposite sign charges\r\n    pairs_with_os = ch2[all_muon_pairs['0']] != ch2[all_muon_pairs['1']]\r\n    \r\n    #get the indices of the pairs with the opposite sign\r\n    idxs = all_muon_pairs[pairs_with_os]\r\n\r\n    #get the events that had at least one such good pair\r\n    events_min1_os_pair = idxs['0'].count()>=1\r\n    idxs2 = idxs[events_min1_os_pair]\r\n    bestpair = idxs2[:, 0]\r\n    \r\n    first_muon_idx = bestpair['0']\r\n    second_muon_idx = bestpair['1']\r\n\r\n    #set the leading and subleading muons to pass the mask according to the pair\r\n    muon_mask_active = out_muon_mask[events_min2_muons][events_min1_os_pair]\r\n    muon_mask_active.content[muon_mask_active.starts + first_muon_idx] = True\r\n    muon_mask_active.content[muon_mask_active.starts + second_muon_idx] = True\r\n    \r\n    return\r\n~~~\r\n\r\nDirect Numba loop, runtime 7.5ms\r\n~~~\r\n@numba.jit(nopython=True)\r\ndef get_os_muons_numba(muon_charges_content, muon_charges_offsets, muon_mask_out):\r\n    for iev in range(len(muon_charges_offsets) - 1):\r\n        start = muon_charges_offsets[iev]\r\n        end = muon_charges_offsets[iev + 1]\r\n        \r\n        if end-start >= 2:\r\n            ch1 = muon_charges_content[start]\r\n            for imuon in range(start+1, end):\r\n                ch2 = muon_charges_content[imuon]\r\n                if ch2 != ch1:\r\n                    muon_mask_out[start] = True\r\n                    muon_mask_out[imuon] = True\r\n                    break\r\n    return\r\n~~~\r\n\r\n\r\nCUDA, timing ~500 microseconds:\r\n~~~\r\n@cuda.jit('void(int8[:], int64[:], int8[:])')\r\ndef get_os_muons_cuda(muon_charges_content, muon_charges_offsets, muon_mask_out):\r\n    xi = cuda.grid(1)\r\n    xstride = cuda.gridsize(1)\r\n    \r\n    for iev in range(xi, muon_charges_offsets.shape[0]-1, xstride):\r\n        start = muon_charges_offsets[iev]\r\n        end = muon_charges_offsets[iev + 1]\r\n        \r\n        ch1 = muon_charges_content[start]\r\n        \r\n        for imuon in range(start+1, end):\r\n            ch2 = muon_charges_content[imuon]\r\n            if (ch2 != ch1):\r\n                muon_mask_out[start] = 1\r\n                muon_mask_out[imuon] = 1\r\n                break\r\n    return\r\n~~~\r\n\r\nI wasn't sure what's the appropriate way to raise this, feel free to move the discussion elsewhere.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/104", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/104/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/104/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/104", "id": 421542823, "node_id": "MDU6SXNzdWU0MjE1NDI4MjM=", "number": 104, "title": "JaggedArray.tojagged does not handle empty arrays", "user": {"login": "nsmith-", "id": 6587412, "node_id": "MDQ6VXNlcjY1ODc0MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6587412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsmith-", "html_url": "https://github.com/nsmith-", "followers_url": "https://api.github.com/users/nsmith-/followers", "following_url": "https://api.github.com/users/nsmith-/following{/other_user}", "gists_url": "https://api.github.com/users/nsmith-/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsmith-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsmith-/subscriptions", "organizations_url": "https://api.github.com/users/nsmith-/orgs", "repos_url": "https://api.github.com/users/nsmith-/repos", "events_url": "https://api.github.com/users/nsmith-/events{/privacy}", "received_events_url": "https://api.github.com/users/nsmith-/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-15T14:21:56Z", "updated_at": "2019-03-15T15:20:26Z", "closed_at": "2019-03-15T15:20:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The operation\r\n```python\r\na = awkward.fromiter([[]])\r\na.tojagged(a+3)\r\n```\r\nshould return an array with the same jagged structure as `a`, as it does for the case\r\n```python\r\na = awkward.fromiter([[3],[3,4]])\r\na.tojagged(a+3)\r\n```\r\nPresently it generates an error,\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-138-a5501b4d9d76> in <module>\r\n      1 a = awkward.fromiter([[]])\r\n----> 2 a.tojagged(a+3)\r\n\r\n~/src/awkward-array/awkward/array/jagged.py in tojagged(self, data)\r\n    787 \r\n    788             data = data.compact()\r\n--> 789             return self.copy(content=data._content[self.IndexedArray.invert((index + self._starts)._content)])\r\n    790 \r\n    791         elif isinstance(data, awkward.array.base.AwkwardArray):\r\n\r\n~/src/awkward-array/awkward/array/indexed.py in invert(cls, permutation)\r\n     45     def invert(cls, permutation):\r\n     46         permutation = permutation.reshape(-1)\r\n---> 47         out = cls.numpy.zeros(permutation.max() + 1, dtype=cls.IndexedArray.fget(None).INDEXTYPE)\r\n     48         identity = cls.numpy.arange(len(permutation))\r\n     49         out[permutation] = identity\r\n\r\n/usr/local/lib/python3.7/site-packages/numpy/core/_methods.py in _amax(a, axis, out, keepdims, initial)\r\n     26 def _amax(a, axis=None, out=None, keepdims=False,\r\n     27           initial=_NoValue):\r\n---> 28     return umr_maximum(a, axis, None, out, keepdims, initial)\r\n     29 \r\n     30 def _amin(a, axis=None, out=None, keepdims=False,\r\n\r\nValueError: zero-size array to reduction operation maximum which has no identity\r\n```\r\nLooks like just need to change `permutation.max()+1` to handle empty `permutation`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/103", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/103/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/103/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/103", "id": 420596354, "node_id": "MDU6SXNzdWU0MjA1OTYzNTQ=", "number": 103, "title": "Indexing of multi-dimensional jagged arrays", "user": {"login": "mverzett", "id": 2329596, "node_id": "MDQ6VXNlcjIzMjk1OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2329596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mverzett", "html_url": "https://github.com/mverzett", "followers_url": "https://api.github.com/users/mverzett/followers", "following_url": "https://api.github.com/users/mverzett/following{/other_user}", "gists_url": "https://api.github.com/users/mverzett/gists{/gist_id}", "starred_url": "https://api.github.com/users/mverzett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mverzett/subscriptions", "organizations_url": "https://api.github.com/users/mverzett/orgs", "repos_url": "https://api.github.com/users/mverzett/repos", "events_url": "https://api.github.com/users/mverzett/events{/privacy}", "received_events_url": "https://api.github.com/users/mverzett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-03-13T16:26:19Z", "updated_at": "2019-07-09T11:48:06Z", "closed_at": "2019-07-09T11:48:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a TTree with a branch of vector of vectors, this results in a 3D jagged array. The last dimension of the vector is always filled with at least one element, but sometime are more. If I try to reduce the dimension with slicing I get an error. Minimal example:\r\n\r\n```python\r\narr = awkward.JaggedArray.fromiter([[[1],[2],[3,4]], [[5,6],[7],[8,9]]])\r\narr[:,:,0]\r\n```\r\n\r\nThis results in:\r\n```\r\nAttributeError: 'numpy.ndarray' object has no attribute 'stop\r\n```\r\n\r\nAm I doing something wrong? Related question: why uproot loads it as an ObjectArray?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/100", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/100/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/100/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/100", "id": 419153213, "node_id": "MDU6SXNzdWU0MTkxNTMyMTM=", "number": 100, "title": "Error when taking max of empty array", "user": {"login": "areinsvo", "id": 7669806, "node_id": "MDQ6VXNlcjc2Njk4MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/7669806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/areinsvo", "html_url": "https://github.com/areinsvo", "followers_url": "https://api.github.com/users/areinsvo/followers", "following_url": "https://api.github.com/users/areinsvo/following{/other_user}", "gists_url": "https://api.github.com/users/areinsvo/gists{/gist_id}", "starred_url": "https://api.github.com/users/areinsvo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/areinsvo/subscriptions", "organizations_url": "https://api.github.com/users/areinsvo/orgs", "repos_url": "https://api.github.com/users/areinsvo/repos", "events_url": "https://api.github.com/users/areinsvo/events{/privacy}", "received_events_url": "https://api.github.com/users/areinsvo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-10T06:43:25Z", "updated_at": "2019-03-10T08:31:39Z", "closed_at": "2019-03-10T08:31:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "awkward-array gives an error if an array is completely empty and you try to take the maximum. \r\n\r\nMinimum code to reproduce the problem:\r\n`test = awkward.fromiter([])`\r\n`print test.max()`\r\n\r\nIt breaks with the following error. The error can be avoided by first checking if test.size > 0.\r\n\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-17-98926b7e0b5f> in <module>()\r\n      3 if test.size <= 0:\r\n      4     print \"okay\"\r\n----> 5 print test.max()\r\n\r\n/Users/ahall/.local/lib/python2.7/site-packages/numpy/core/_methods.pyc in _amax(a, axis, out, keepdims, initial)\r\n     26 def _amax(a, axis=None, out=None, keepdims=False,\r\n     27           initial=_NoValue):\r\n---> 28     return umr_maximum(a, axis, None, out, keepdims, initial)\r\n     29 \r\n     30 def _amin(a, axis=None, out=None, keepdims=False,\r\n\r\nValueError: zero-size array to reduction operation maximum which has no identity", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/98", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/98/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/98/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/98", "id": 419023336, "node_id": "MDU6SXNzdWU0MTkwMjMzMzY=", "number": 98, "title": "Table: cannot create an OBJECT array from memory buffer", "user": {"login": "zhenbinwu", "id": 1052165, "node_id": "MDQ6VXNlcjEwNTIxNjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1052165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhenbinwu", "html_url": "https://github.com/zhenbinwu", "followers_url": "https://api.github.com/users/zhenbinwu/followers", "following_url": "https://api.github.com/users/zhenbinwu/following{/other_user}", "gists_url": "https://api.github.com/users/zhenbinwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhenbinwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhenbinwu/subscriptions", "organizations_url": "https://api.github.com/users/zhenbinwu/orgs", "repos_url": "https://api.github.com/users/zhenbinwu/repos", "events_url": "https://api.github.com/users/zhenbinwu/events{/privacy}", "received_events_url": "https://api.github.com/users/zhenbinwu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-03-09T02:26:20Z", "updated_at": "2019-03-09T21:30:41Z", "closed_at": "2019-03-09T12:46:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "OK, this might be several issues I experienced, but I am putting them here together. \r\n\r\nFrom the NanoAOD file format of CMS, a TLorentzVector Table is reconstructed via:\r\n```\r\n flatarray = uproot_methods.classes.TLorentzVector.TLorentzVectorArray.from_ptetaphim(\r\n            arrays[\"%s_pt\" % name].content, arrays[\"%s_eta\" % name].content, arrays[\"%s_phi\" % name].content, arrays[\"%s_mass\" % name].content)\r\njaggedarray = awkward.Methods.mixin(uproot_methods.classes.TLorentzVector.ArrayMethods, awkward.JaggedArray).fromoffsets(\r\n            arrays[\"%s_pt\" % name].offsets, flatarray)\r\n```\r\n\r\nThen the other property (like Jet_EMFrac etc) are associated with this Table by \r\n`jaggedarray[\"EMFrac\"] =arrays[\"Jet_EMFrac\"]`\r\nThis is OK for local test. But if I run the same code on LPC Condor, the same code crash:\r\n\r\n>   File \"/storage/local/data1/condor/execute/dir_20889/awkward/array/jagged.py\", line 749, in __setitem__\r\n>     self._content[where] = self._broadcast(what)._content\r\n>   File \"/storage/local/data1/condor/execute/dir_20889/awkward/array/jagged.py\", line 764, in _broadcast\r\n>     data = self._util_toarray(data, self._content.dtype)\r\n>   File \"/storage/local/data1/condor/execute/dir_20889/awkward/array/base.py\", line 312, in _util_toarray\r\n>     return cls.numpy.frombuffer(value, dtype=getattr(value, \"dtype\", defaultdtype)).reshape(getattr(value, \"shape\", -1))\r\n> ValueError: cannot create an OBJECT array from memory buffer\r\n\r\nI also tried another approach, by assigning attribute to the Object(awkward.Table type) by\r\n` setattr(jaggedarray, \"EMFrac\", arrays[\"Jet_EMFrac\"])`\r\nIt is my prefer way as it keeps the code development simpler, jet.EMfrac vs jet[\"EMFrac\"]. It fixed the memory buffer issue above, but created another issue that the object selection `Jet = Jet[Jet.Flag]` will result in a new awkward.Table, and lost all the attribute. \r\n\r\nSo I am in a dilemma here ..\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/96", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/96/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/96/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/96", "id": 418903234, "node_id": "MDU6SXNzdWU0MTg5MDMyMzQ=", "number": 96, "title": "Need a low-level type infrastructure", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-08T18:26:27Z", "updated_at": "2019-07-09T11:43:13Z", "closed_at": "2019-07-09T11:43:13Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Low-level type information (exactly which array types are composed with each other) are requried to compile functions with `VirtualArrays` (without simply materializing all of them). The high-level types don't have enough information. It is important to be able to compile `VirtualArrays` for iterating over large datasets, Parquet or ROOT, without entirely loading them into memory.\r\n\r\nThe low-level types should mirror the high-level types. Perhaps they should be named \"structure\". Dumping structure to the terminal, with or without array values, could be useful for diagnostics and introductions to the concepts.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/95", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/95/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/95/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/95", "id": 418860728, "node_id": "MDU6SXNzdWU0MTg4NjA3Mjg=", "number": 95, "title": "Nested table filtering", "user": {"login": "mverzett", "id": 2329596, "node_id": "MDQ6VXNlcjIzMjk1OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2329596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mverzett", "html_url": "https://github.com/mverzett", "followers_url": "https://api.github.com/users/mverzett/followers", "following_url": "https://api.github.com/users/mverzett/following{/other_user}", "gists_url": "https://api.github.com/users/mverzett/gists{/gist_id}", "starred_url": "https://api.github.com/users/mverzett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mverzett/subscriptions", "organizations_url": "https://api.github.com/users/mverzett/orgs", "repos_url": "https://api.github.com/users/mverzett/repos", "events_url": "https://api.github.com/users/mverzett/events{/privacy}", "received_events_url": "https://api.github.com/users/mverzett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-08T16:31:41Z", "updated_at": "2019-03-11T14:42:12Z", "closed_at": "2019-03-08T17:03:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm playing around a bit to understand the syntax, perks and potential pitfalls of the system, so please bear with me if the question is really trivial, but I could not find any documentation.\r\nI have the following minimal dataset:\r\n```python\r\ndataset = upfile['Events'].arrays([\r\n      'Muon_pfIsoId',\r\n      'Muon_pt',\r\n      'Muon_eta',\r\n      'Muon_phi',\r\n      'Muon_mass',\r\n      'Muon_charge',\r\n      'Muon_tightId',\r\n      'Jet_jetId',\r\n      'Jet_pt',\r\n      'Jet_eta',\r\n      'Jet_phi',\r\n      'Jet_mass',\r\n      'Jet_btagDeepFlavB',\r\n      'HLT_IsoMu24',\r\n      'Flag_HBHENoiseFilter',\r\n])\r\n```\r\nGiven I want to keep together properties for the same objects I build tables and then I nest them into a single table that I use as I would with a pandas.DataFrame.\r\n\r\n```python\r\nmuons = Table.named('muons', {i.replace('Muon_', '') : j for i, j in dataset.iteritems() if i.startswith('Muon')})\r\njets  = Table.named('jets', {i.replace('Jet_', '') : j for i, j in dataset.iteritems() if i.startswith('Jet')})\r\ndata = Table({\r\n      'muons' :\tmuons,\r\n      'jets' : jets,\r\n      'HLT_IsoMu24' : dataset['HLT_IsoMu24'],\r\n      'Flag_HBHENoiseFilter' : dataset['Flag_HBHENoiseFilter'],\r\n})\r\n```\r\nIf I cut on an event-wide variable (the trigger) everything works as expected and I get a smaller number of events\r\n\r\n```python\r\nwtrig = data[data['HLT_IsoMu24']]\r\n```\r\n\r\nWhen I try to create a mask for the muons everything works:\r\n```python\r\nmumask = wtrig['muons']['pt'] > 30\r\n```\r\n\r\nbut I cannot apply it to the muons. Naively I would:\r\n```python\r\nwtrig['muons'][mumask]\r\n```\r\nbut results in an exception\r\n```\r\nTypeError: cannot interpret dtype object as a fancy index or mask\r\n```\r\n\r\non the single array works as expected. \r\n\r\nWhat is the proper way of doing it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/94", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/94/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/94/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/94", "id": 418775307, "node_id": "MDU6SXNzdWU0MTg3NzUzMDc=", "number": 94, "title": "JaggedArray._broadcast should accept scalars and any AwkwardArray", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-08T12:53:55Z", "updated_at": "2019-03-09T12:50:37Z", "closed_at": "2019-03-09T12:50:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Two missing cases. Scalars have an obvious implementation. General AwkwardArrays would turn into `JaggedArray(IndexArray(...))`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/93", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/93/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/93/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/93", "id": 418598833, "node_id": "MDU6SXNzdWU0MTg1OTg4MzM=", "number": 93, "title": "Filter function on JaggedArrays", "user": {"login": "zhenbinwu", "id": 1052165, "node_id": "MDQ6VXNlcjEwNTIxNjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1052165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhenbinwu", "html_url": "https://github.com/zhenbinwu", "followers_url": "https://api.github.com/users/zhenbinwu/followers", "following_url": "https://api.github.com/users/zhenbinwu/following{/other_user}", "gists_url": "https://api.github.com/users/zhenbinwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhenbinwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhenbinwu/subscriptions", "organizations_url": "https://api.github.com/users/zhenbinwu/orgs", "repos_url": "https://api.github.com/users/zhenbinwu/repos", "events_url": "https://api.github.com/users/zhenbinwu/events{/privacy}", "received_events_url": "https://api.github.com/users/zhenbinwu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-08T02:06:11Z", "updated_at": "2019-03-09T19:59:02Z", "closed_at": "2019-03-09T12:54:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "From [this talk ](https://github.com/jpivarski/jupyter-talks/blob/master/2018-09-28-uproot3-update/uproot-3-evaluated.ipynb) and [this commit](https://github.com/scikit-hep/awkward-array/commit/12242b8432488423979a28e23872c8a59ceaf918), I am expecting the filter function as recommended method. But from the current awkward-array, I don't get these functions anymore.\r\n\r\nI want to apply a series of selection on a jaggedarray. But it seems` jag[jag.pt > 30 and jag.pt <50]` etc are not working as easily as expected. Is there any alternative and easy way for this? Thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/92", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/92/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/92/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/92", "id": 418559604, "node_id": "MDU6SXNzdWU0MTg1NTk2MDQ=", "number": 92, "title": "All awkward arrays must have a `nbytes` property", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-03-07T23:17:21Z", "updated_at": "2019-03-08T21:00:49Z", "closed_at": "2019-03-08T21:00:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is important! uproot's `ArrayCache` checks this property to know when to flush the cache.\r\n\r\nSee scikit-hep/uproot#247, which I'm closing in favor of this. @zhenbinwu, you'll want to follow this issue instead.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/90", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/90/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/90/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/90", "id": 416943632, "node_id": "MDU6SXNzdWU0MTY5NDM2MzI=", "number": 90, "title": "JaggedArray.nth_fill([0, 1, 5], 999) \u2192 [0.0, 1.1, 5.5], [999, 999, 999], [0, 100, 500]]", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-03-04T18:52:52Z", "updated_at": "2019-03-25T19:49:38Z", "closed_at": "2019-03-25T19:49:37Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "@benkrikler \r\n\r\nIf it weren't for the \"fill\" part, this would be just a slice:\r\n\r\n```\r\n>>> a = awkward.fromiter([[1.1, 2.2, 3.3], [3.14, 999.9], [4.4, 5.5]])\r\n>>> a[:, [1, 0, 0]].flatten()\r\narray([  2.2 ,   1.1 ,   1.1 , 999.9 ,   3.14,   3.14,   5.5 ,   4.4 ,\r\n         4.4 ])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/89", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/89/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/89/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/89", "id": 416929982, "node_id": "MDU6SXNzdWU0MTY5Mjk5ODI=", "number": 89, "title": "JaggedArray._broadcast should have a public form", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 962512555, "node_id": "MDU6TGFiZWw5NjI1MTI1NTU=", "url": "https://api.github.com/repos/scikit-hep/awkward-array/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2019-03-04T18:18:26Z", "updated_at": "2019-03-09T13:45:05Z", "closed_at": "2019-03-09T13:45:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/88", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/88/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/88/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/88", "id": 415842761, "node_id": "MDU6SXNzdWU0MTU4NDI3NjE=", "number": 88, "title": "awkward-arrays \u2192 Arrow buffers", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 962512555, "node_id": "MDU6TGFiZWw5NjI1MTI1NTU=", "url": "https://api.github.com/repos/scikit-hep/awkward-array/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-02-28T21:59:04Z", "updated_at": "2019-03-08T19:48:41Z", "closed_at": "2019-03-08T19:48:41Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The reverse (zero-copy views) are already implemented, but we'll soon want the reverse (which can't be zero-copy). Most awkward concepts have some mapping onto Arrow, but it's not complete. At least be sure that Arrow \u2192 awkward \u2192 Arrow closed loops are possible.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/85", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/85/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/85/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/85", "id": 414572472, "node_id": "MDU6SXNzdWU0MTQ1NzI0NzI=", "number": 85, "title": "Boosting by sum", "user": {"login": "beojan", "id": 3727925, "node_id": "MDQ6VXNlcjM3Mjc5MjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3727925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beojan", "html_url": "https://github.com/beojan", "followers_url": "https://api.github.com/users/beojan/followers", "following_url": "https://api.github.com/users/beojan/following{/other_user}", "gists_url": "https://api.github.com/users/beojan/gists{/gist_id}", "starred_url": "https://api.github.com/users/beojan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beojan/subscriptions", "organizations_url": "https://api.github.com/users/beojan/orgs", "repos_url": "https://api.github.com/users/beojan/repos", "events_url": "https://api.github.com/users/beojan/events{/privacy}", "received_events_url": "https://api.github.com/users/beojan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-26T11:50:56Z", "updated_at": "2019-02-26T14:25:08Z", "closed_at": "2019-02-26T14:25:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "**EDIT: For anyone trying to do this themselves, a boost to the rest frame *should* actually be `p4.boost(-p4.sum().boostp3)`.**\r\n\r\nI have a `JaggedArray` of `TLorentzVectors`. I want to boost the vectors in each row to the rest frame of that row.\r\n\r\nI'm using `p4 = p4.boost(p4.sum().boostp3)` (well the equivalent, since `hh = p4.sum()`), but I get the error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"./train.py\", line 44, in <module>\r\n    p4 = p4.boost(hh.boostp3)\r\n  File \"/usr/lib/python3.7/site-packages/uproot_methods/classes/TLorentzVector.py\", line 236, in boost\r\n    v = self.p3 + gamma2*bp*p3 + gamma*p3*self.t\r\n  File \"/usr/lib/python3.7/site-packages/numpy/lib/mixins.py\", line 25, in func\r\n    return ufunc(self, other)\r\n  File \"/usr/lib/python3.7/site-packages/awkward/array/jagged.py\", line 924, in __array_ufunc__\r\n    result = getattr(ufunc, method)(*inputs, **kwargs)\r\n  File \"/usr/lib/python3.7/site-packages/uproot_methods/classes/TLorentzVector.py\", line 301, in __array_ufunc__\r\n    raise TypeError(\"(arrays of) TLorentzVector can only be added to/subtracted from other (arrays of) TLorentzVector\")\r\nTypeError: (arrays of) TLorentzVector can only be added to/subtracted from other (arrays of) TLorentzVector\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/82", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/82/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/82/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/82", "id": 409643790, "node_id": "MDU6SXNzdWU0MDk2NDM3OTA=", "number": 82, "title": "Still wrong return values when masking (see #50)", "user": {"login": "bhgomes", "id": 9126085, "node_id": "MDQ6VXNlcjkxMjYwODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/9126085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bhgomes", "html_url": "https://github.com/bhgomes", "followers_url": "https://api.github.com/users/bhgomes/followers", "following_url": "https://api.github.com/users/bhgomes/following{/other_user}", "gists_url": "https://api.github.com/users/bhgomes/gists{/gist_id}", "starred_url": "https://api.github.com/users/bhgomes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bhgomes/subscriptions", "organizations_url": "https://api.github.com/users/bhgomes/orgs", "repos_url": "https://api.github.com/users/bhgomes/repos", "events_url": "https://api.github.com/users/bhgomes/events{/privacy}", "received_events_url": "https://api.github.com/users/bhgomes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-13T06:11:52Z", "updated_at": "2019-02-13T19:50:35Z", "closed_at": "2019-02-13T12:19:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I saw the fix in #50 but I belive that it has not been fixed completely. The following still occurs in 0.8.4:\r\n\r\n```python\r\nfrom awkward import JaggedArray\r\n\r\narray = JaggedArray.fromiter([[1, 2, 3]])\r\nempty = array[False]\r\n\r\nprint(empty.content)\r\n# array([1, 2, 3])\r\nprint(empty.flatten())\r\n# array([], dtype=int64)\r\n```\r\nwhile we also have\r\n\r\n```python\r\nprint(array[array != 1].content)\r\n# array([2, 3])\r\nprint(array[array != 1].flatten())\r\n# array([2, 3])\r\n```\r\n\r\nShould this be the behavior we expect?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/81", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/81/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/81/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/81", "id": 408561715, "node_id": "MDU6SXNzdWU0MDg1NjE3MTU=", "number": 81, "title": "Sorting", "user": {"login": "guitargeek", "id": 6578603, "node_id": "MDQ6VXNlcjY1Nzg2MDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6578603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guitargeek", "html_url": "https://github.com/guitargeek", "followers_url": "https://api.github.com/users/guitargeek/followers", "following_url": "https://api.github.com/users/guitargeek/following{/other_user}", "gists_url": "https://api.github.com/users/guitargeek/gists{/gist_id}", "starred_url": "https://api.github.com/users/guitargeek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guitargeek/subscriptions", "organizations_url": "https://api.github.com/users/guitargeek/orgs", "repos_url": "https://api.github.com/users/guitargeek/repos", "events_url": "https://api.github.com/users/guitargeek/events{/privacy}", "received_events_url": "https://api.github.com/users/guitargeek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 962512555, "node_id": "MDU6TGFiZWw5NjI1MTI1NTU=", "url": "https://api.github.com/repos/scikit-hep/awkward-array/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-10T18:09:39Z", "updated_at": "2019-07-17T00:40:45Z", "closed_at": "2019-07-17T00:40:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nI would need for my analysis the ability to sort the individual entries of a JaggedArray. Is there already such a functionality? Do you have any plans on implementing it or some ideas how to proceed?\r\n\r\nRight now I'm implementing for myself the following workaround:\r\n* Convert the jagged array to a 2d ndarray with shape `(n, max(m_i))`, where m_i are the lengths of the individual entries of the jagged array.\r\n* If there is a element with fewer sub-elements than max(m_i), the remaining elements of the ndarray will be filled with `np.nan`\r\n* I'll sort the ndarray along axis=1, conveniently the nans will be still kept in the end by `np.sort`.\r\n* Convert back to jagged array\r\n\r\nOf course that is not optimal, but for my case it's ok since the numbers of sub-entries varies within a relatively narrow range.\r\n\r\nAny plans to develop in this direction? I have to make this work for the table too. Ultimately, the goal is of course to sort a TLorentzVectorArray by transverse momentum.\r\n\r\nOh, and does this functionality of \"expanding\" the jagged in a ndarray maybe exist already? I can imagine that this might be also a relatively common operation.\r\n\r\nHave a nice Sunday!\r\nJonas", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/73", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/73/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/73/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/73", "id": 404271764, "node_id": "MDU6SXNzdWU0MDQyNzE3NjQ=", "number": 73, "title": "make jagged_array work with numba.jit(nopython=True)", "user": {"login": "HDembinski", "id": 2631586, "node_id": "MDQ6VXNlcjI2MzE1ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HDembinski", "html_url": "https://github.com/HDembinski", "followers_url": "https://api.github.com/users/HDembinski/followers", "following_url": "https://api.github.com/users/HDembinski/following{/other_user}", "gists_url": "https://api.github.com/users/HDembinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/HDembinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HDembinski/subscriptions", "organizations_url": "https://api.github.com/users/HDembinski/orgs", "repos_url": "https://api.github.com/users/HDembinski/repos", "events_url": "https://api.github.com/users/HDembinski/events{/privacy}", "received_events_url": "https://api.github.com/users/HDembinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-29T12:39:08Z", "updated_at": "2019-07-09T11:47:24Z", "closed_at": "2019-07-09T11:47:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, `jagged_array` does not work with `numba.jit(nopython=true)`, the latter complains that it does not understand the jagged array type. I don't know what has to be done or how complicated it is to teach numba about jagged arrays, but whenever I have jagged arrays, I also want to accelerate operations on them with numba. For my case, I found a workaround, which could be documented in the README:\r\n```\r\nimport numpy as np\r\nfrom numba import jit\r\n\r\njagged = ... # has only one hierarchy layer, [[1], [1,2,3], [], ...]\r\n@jit(nopython=True)\r\ndef go_fast(jagged.starts, jagged.stops, jagged.content):\r\n    # starts, stops and content are all normal numpy arrays, which are understood by numba\r\n    # do stuff\r\n```\r\nI have a problem though when I want to return a new jagged array with the same shape as the input. I can easily return a numpy array of the \"content\", but how do I generate a new jagged array from the content, the starts and the stops?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/71", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/71/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/71/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/71", "id": 403510148, "node_id": "MDU6SXNzdWU0MDM1MTAxNDg=", "number": 71, "title": "README.rst installation path is wrong", "user": {"login": "susanwl", "id": 39447343, "node_id": "MDQ6VXNlcjM5NDQ3MzQz", "avatar_url": "https://avatars1.githubusercontent.com/u/39447343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susanwl", "html_url": "https://github.com/susanwl", "followers_url": "https://api.github.com/users/susanwl/followers", "following_url": "https://api.github.com/users/susanwl/following{/other_user}", "gists_url": "https://api.github.com/users/susanwl/gists{/gist_id}", "starred_url": "https://api.github.com/users/susanwl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susanwl/subscriptions", "organizations_url": "https://api.github.com/users/susanwl/orgs", "repos_url": "https://api.github.com/users/susanwl/repos", "events_url": "https://api.github.com/users/susanwl/events{/privacy}", "received_events_url": "https://api.github.com/users/susanwl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-27T03:40:38Z", "updated_at": "2019-01-28T00:39:19Z", "closed_at": "2019-01-28T00:37:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWhen installing `awkward` package it also installs `README.rst` right in the root of the prefix directory. That is, if you install `akward` as a system package the `README.rst` file will be installed as `/usr/README.rst`, which is definitely not the proper place for a readme file. This behavior is caused by a setup configuration\r\n```\r\nsetup.py:78     data_files = [\"README.rst\"],\r\n```\r\n\r\nMaybe it is possible not to install `README.rst` at all(as majority of packages do)? Or at least install it to `${PREFIX}/share/doc/awkward/README.rst`?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/69", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/69/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/69/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/69", "id": 400664039, "node_id": "MDU6SXNzdWU0MDA2NjQwMzk=", "number": 69, "title": "Max is broken", "user": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-18T10:28:45Z", "updated_at": "2019-01-18T19:33:10Z", "closed_at": "2019-01-18T19:24:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "You can no longer calculate the maximum of an integer JaggedArray. This snippit illustrates the problem:\r\n\r\n```python\r\nimport awkward\r\nawkward.JaggedArray.fromiter([[1,2,3]]).max()\r\n```\r\n\r\nAgain, this used to work but now is broken.\r\n\r\n(I'm actually interested in `.max().max()`, so will use `content.max()` for now)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/67", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/67/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/67/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/67", "id": 400657457, "node_id": "MDU6SXNzdWU0MDA2NTc0NTc=", "number": 67, "title": "Reading hdf5 and older schemas", "user": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-18T10:12:26Z", "updated_at": "2019-01-18T19:16:20Z", "closed_at": "2019-01-18T19:13:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I updated AwkwardArray yesterday and now cannot load my awkward arrays saved in HDF5 files. \r\n\r\n<details><summary>Here is the error I get:</summary>\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-9-ff877d229c39> in <module>()\r\n----> 1 PV = collect_truth('data/Oct03_20K_val.h5', pvs=True)\r\n      2 print('PV.n.shape =    ',  PV.n.shape)\r\n      3 print('PV.n[0].shape = ', *PV.n[0].shape)\r\n      4 print('PV.x[0] =       ', *PV.x[0])\r\n      5 print('PV.y[0] =       ', *PV.y[0])\r\n\r\n~/git/ml/pv-finder/notebooks/model/collectdata.py in collect_truth(pvs, *files)\r\n     43         with Timer(msg), h5py.File(XY_file, mode='r') as XY:\r\n     44             afile = awkward.hdf5(XY)\r\n---> 45             x_list.append(afile[f\"{p}v_loc_x\"])\r\n     46             y_list.append(afile[f\"{p}v_loc_y\"])\r\n     47             z_list.append(afile[f\"{p}v_loc\"])\r\n\r\n/opt/anaconda/lib/python3.6/site-packages/awkward/persist.py in __getitem__(self, where)\r\n    648 \r\n    649     def __getitem__(self, where):\r\n--> 650         return deserialize(self._group, name=where + self.options[\"schemasuffix\"], whitelist=self.options[\"whitelist\"], cache=self.options[\"cache\"])\r\n    651 \r\n    652     def __setitem__(self, where, what):\r\n\r\n/opt/anaconda/lib/python3.6/site-packages/awkward/persist.py in deserialize(storage, name, whitelist, cache)\r\n    455             raise ValueError(\"unrecognized JSON object: {0}\".format(repr(schema)))\r\n    456 \r\n--> 457     return unfill(schema[\"schema\"])\r\n    458 \r\n    459 def keys(storage, name=\"\", subschemas=True):\r\n\r\n/opt/anaconda/lib/python3.6/site-packages/awkward/persist.py in unfill(schema)\r\n    394             if \"call\" in schema and isinstance(schema[\"call\"], list) and len(schema[\"call\"]) > 0:\r\n    395                 gen = spec2function(schema[\"call\"], whitelist=whitelist)\r\n--> 396                 args = [unfill(x) for x in schema.get(\"args\", [])]\r\n    397 \r\n    398                 kwargs = {}\r\n\r\n/opt/anaconda/lib/python3.6/site-packages/awkward/persist.py in <listcomp>(.0)\r\n    394             if \"call\" in schema and isinstance(schema[\"call\"], list) and len(schema[\"call\"]) > 0:\r\n    395                 gen = spec2function(schema[\"call\"], whitelist=whitelist)\r\n--> 396                 args = [unfill(x) for x in schema.get(\"args\", [])]\r\n    397 \r\n    398                 kwargs = {}\r\n\r\n/opt/anaconda/lib/python3.6/site-packages/awkward/persist.py in unfill(schema)\r\n    393         if isinstance(schema, dict):\r\n    394             if \"call\" in schema and isinstance(schema[\"call\"], list) and len(schema[\"call\"]) > 0:\r\n--> 395                 gen = spec2function(schema[\"call\"], whitelist=whitelist)\r\n    396                 args = [unfill(x) for x in schema.get(\"args\", [])]\r\n    397 \r\n\r\n/opt/anaconda/lib/python3.6/site-packages/awkward/persist.py in spec2function(obj, whitelist)\r\n     79             break\r\n     80     else:\r\n---> 81         raise RuntimeError(\"callable not in whitelist; add it by passing a whitelist argument:\\n\\n    whitelist = awkward.persist.whitelist + [{0}]\".format(obj))\r\n     82     return gen\r\n     83 \r\n\r\nRuntimeError: callable not in whitelist; add it by passing a whitelist argument:\r\n\r\n    whitelist = awkward.persist.whitelist + [['numpy', 'frombuffer']]\r\n```\r\n\r\n</details>\r\n\r\n<details><summary>And, here's the schema in the file:</summary>\r\n\r\n```json\r\n{\r\n  \"awkward\": \"0.4.4\",\r\n  \"schema\": {\r\n    \"id\": 0,\r\n    \"call\": [\r\n      \"awkward\",\r\n      \"JaggedArray\",\r\n      \"fromcounts\"\r\n    ],\r\n    \"args\": [\r\n      {\r\n        \"id\": 1,\r\n        \"call\": [\r\n          \"numpy\",\r\n          \"frombuffer\"\r\n        ],\r\n        \"args\": [\r\n          {\r\n            \"call\": [\r\n              \"zlib\",\r\n              \"decompress\"\r\n            ],\r\n            \"args\": [\r\n              {\r\n                \"read\": \"1\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            \"dtype\": \"int64\"\r\n          },\r\n          {\r\n            \"json\": 20000\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"id\": 2,\r\n        \"call\": [\r\n          \"numpy\",\r\n          \"frombuffer\"\r\n        ],\r\n        \"args\": [\r\n          {\r\n            \"read\": \"2\"\r\n          },\r\n          {\r\n            \"dtype\": \"float32\"\r\n          },\r\n          {\r\n            \"json\": 207850\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"prefix\": \"pv_loc_x/\"\r\n}\r\n```\r\n\r\n</details>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/65", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/65/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/65/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/65", "id": 398910335, "node_id": "MDU6SXNzdWUzOTg5MTAzMzU=", "number": 65, "title": "Implement nested parquet writing", "user": {"login": "martindurant", "id": 6042212, "node_id": "MDQ6VXNlcjYwNDIyMTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6042212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martindurant", "html_url": "https://github.com/martindurant", "followers_url": "https://api.github.com/users/martindurant/followers", "following_url": "https://api.github.com/users/martindurant/following{/other_user}", "gists_url": "https://api.github.com/users/martindurant/gists{/gist_id}", "starred_url": "https://api.github.com/users/martindurant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martindurant/subscriptions", "organizations_url": "https://api.github.com/users/martindurant/orgs", "repos_url": "https://api.github.com/users/martindurant/repos", "events_url": "https://api.github.com/users/martindurant/events{/privacy}", "received_events_url": "https://api.github.com/users/martindurant/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 962512555, "node_id": "MDU6TGFiZWw5NjI1MTI1NTU=", "url": "https://api.github.com/repos/scikit-hep/awkward-array/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-14T14:23:56Z", "updated_at": "2019-07-09T11:44:40Z", "closed_at": "2019-07-09T11:44:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Since one can construct an awkward array from a list or other iterable of lists/dicts (or indeed arrow block), I am wondering how difficult it would be to build a function which works out the various repetition/definition levels needed to store the data into parquet format. I am assuming this could even be numa-jitted. \r\n\r\n(this is pure curiosity on my part)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/63", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/63/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/63/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/63", "id": 397146731, "node_id": "MDU6SXNzdWUzOTcxNDY3MzE=", "number": 63, "title": "Proposal: jit-compilation if numba available", "user": {"login": "nsmith-", "id": 6587412, "node_id": "MDQ6VXNlcjY1ODc0MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6587412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsmith-", "html_url": "https://github.com/nsmith-", "followers_url": "https://api.github.com/users/nsmith-/followers", "following_url": "https://api.github.com/users/nsmith-/following{/other_user}", "gists_url": "https://api.github.com/users/nsmith-/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsmith-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsmith-/subscriptions", "organizations_url": "https://api.github.com/users/nsmith-/orgs", "repos_url": "https://api.github.com/users/nsmith-/repos", "events_url": "https://api.github.com/users/nsmith-/events{/privacy}", "received_events_url": "https://api.github.com/users/nsmith-/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-08T23:59:56Z", "updated_at": "2019-07-09T11:45:34Z", "closed_at": "2019-07-09T11:45:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Certain basic operations are starting to appear in profiling that could be optimized.  The first such example is `offsets2parents`\r\nFor example, here is a numba re-implementation assuming offsets is monotone (which would be a good flag to track in JaggedArray)\r\n```python\r\nimport awkward\r\nimport numba\r\ncounts = np.random.randint(8, size=100000)\r\n\r\noffsets = awkward.array.jagged.counts2offsets(counts)\r\n%timeit awkward.array.jagged.offsets2parents(offsets)\r\n\r\n@numba.njit()\r\ndef o2p_fast(offsets):\r\n    out = np.empty(offsets[-1], dtype=offsets.dtype)\r\n    j = 0\r\n    k = -1\r\n    for i in offsets:\r\n        while j < i:\r\n            out[j] = k\r\n            j += 1\r\n        k += 1\r\n    return out\r\n\r\nprint(np.all(o2p_fast(offsets)==awkward.array.jagged.offsets2parents(offsets)))\r\n%timeit o2p_fast(offsets)\r\n```\r\nwhich outputs on my laptop:\r\n```\r\n7.59 ms \u00b1 372 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\nTrue\r\n726 \u00b5s \u00b1 15.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n```\r\n\r\nWe could swap these out if numba is importable.  A more portable (but laborious) operation would be to write our own ufunc module.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/59", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/59/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/59/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/59", "id": 390406352, "node_id": "MDU6SXNzdWUzOTA0MDYzNTI=", "number": 59, "title": "numpy functions on jagged arrays don't produce compatible arrays", "user": {"login": "jpata", "id": 69717, "node_id": "MDQ6VXNlcjY5NzE3", "avatar_url": "https://avatars0.githubusercontent.com/u/69717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpata", "html_url": "https://github.com/jpata", "followers_url": "https://api.github.com/users/jpata/followers", "following_url": "https://api.github.com/users/jpata/following{/other_user}", "gists_url": "https://api.github.com/users/jpata/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpata/subscriptions", "organizations_url": "https://api.github.com/users/jpata/orgs", "repos_url": "https://api.github.com/users/jpata/repos", "events_url": "https://api.github.com/users/jpata/events{/privacy}", "received_events_url": "https://api.github.com/users/jpata/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-12-12T20:59:11Z", "updated_at": "2018-12-13T03:19:34Z", "closed_at": "2018-12-13T03:03:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wonder if this is my misunderstanding of the API, but I'm running in to the following on a CMS NanoAOD file with a varying number of muons per event:\r\n\r\n~~~\r\nmu_pt = arrs[b'Muon_pt']\r\nmu_phi = arrs[b'Muon_phi']\r\n\r\n#select events with exactly two muons with pt>20\r\ns = (mu_pt>20)\r\ndimuon = (s.counts == 2) & (s.sum()==2)\r\n\r\n#select the muon momentum components for such dimuon events\r\nmu_pt_sel = mu_pt[dimuon]\r\nmu_phi_sel = mu_phi[dimuon]\r\n~~~\r\n\r\nNow when computing the `np.sin` function on the selected subarray, the jaggedness (starts/stops structure) of the subarray changes.\r\n~~~\r\nmu_phi_sel.starts[:10]\r\narray([ 0,  2,  4,  9, 11, 13, 16, 18, 20, 22])\r\n\r\nnp.sin(mu_phi_sel).starts[:10]\r\narray([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])\r\n~~~\r\nso I can't do `mu_pt_sel * np.sin(mu_phi_sel)` as would seem natural. Is this expected?\r\n\r\nI can of course do `mu_pt_sel.regular() * np.sin(mu_phi_sel).regular()` but this seems to break the API.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/58", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/58/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/58/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/58", "id": 389490742, "node_id": "MDU6SXNzdWUzODk0OTA3NDI=", "number": 58, "title": "Tuples of lists of indices does not work as in numpy", "user": {"login": "lgray", "id": 1068089, "node_id": "MDQ6VXNlcjEwNjgwODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1068089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lgray", "html_url": "https://github.com/lgray", "followers_url": "https://api.github.com/users/lgray/followers", "following_url": "https://api.github.com/users/lgray/following{/other_user}", "gists_url": "https://api.github.com/users/lgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/lgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lgray/subscriptions", "organizations_url": "https://api.github.com/users/lgray/orgs", "repos_url": "https://api.github.com/users/lgray/repos", "events_url": "https://api.github.com/users/lgray/events{/privacy}", "received_events_url": "https://api.github.com/users/lgray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-12-10T21:19:03Z", "updated_at": "2018-12-11T05:03:12Z", "closed_at": "2018-12-11T05:03:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Making a issue for posterity after showing this to Jim in the hallway.\r\nThis is in awkward 0.5.3.\r\n\r\n```python\r\nfrom awkward import JaggedArray\r\ntest = JaggedArray.fromcounts([1,2,1],[1,2,3,4])\r\ntest[1,0]\r\n```\r\nresults in ```2```, as expected.\r\n\r\n```python\r\ntest[[1],[0]]\r\n```\r\nresults in:\r\n```python\r\narray([[1],\r\n       [2],\r\n       [4]])\r\n```\r\n\r\nWhich is incorrect compared to its equivalent for a 3x2 array in numpy (repeating values below to fill out dimension).\r\n```python\r\nimport numpy as np\r\ntemp = np.array([[1,1],[2,3],[4,4]])\r\ntemp[[1],[0]]\r\n```\r\nresults in:\r\n```python\r\narray([2])\r\n```\r\nand \r\n```python\r\ntemp[[1,0],[0,0]]\r\n```\r\nresults in:\r\n```python\r\narray([2, 1])\r\n```\r\n\r\nand\r\n```python\r\ntest[[1,0],[0,0]]\r\n```\r\nresults in:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/anaconda2/lib/python2.7/site-packages/awkward/array/jagged.py\", line 608, in __getitem__\r\n    index = (index.reshape(-1, len(head)) + self._starts.reshape(-1, 1)).reshape(-1)\r\nValueError: operands could not be broadcast together with shapes (2,2) (3,1) \r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/56", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/56/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/56/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/56", "id": 386830176, "node_id": "MDU6SXNzdWUzODY4MzAxNzY=", "number": 56, "title": "Issue 51 (slowdowns) still alive for TLorentzVectors", "user": {"login": "lgray", "id": 1068089, "node_id": "MDQ6VXNlcjEwNjgwODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1068089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lgray", "html_url": "https://github.com/lgray", "followers_url": "https://api.github.com/users/lgray/followers", "following_url": "https://api.github.com/users/lgray/following{/other_user}", "gists_url": "https://api.github.com/users/lgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/lgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lgray/subscriptions", "organizations_url": "https://api.github.com/users/lgray/orgs", "repos_url": "https://api.github.com/users/lgray/repos", "events_url": "https://api.github.com/users/lgray/events{/privacy}", "received_events_url": "https://api.github.com/users/lgray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-12-03T13:59:17Z", "updated_at": "2019-03-09T02:26:45Z", "closed_at": "2018-12-12T21:52:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Starting from #51 but in 0.5.3 + uproot_methods 0.2.10, the underlying issue seems to still be a problem when using TLorentzVectorArray mixins.\r\n\r\n```python\r\nimport numpy as np\r\nfrom awkward import JaggedArray, Table\r\nfrom uproot_methods.classes.TLorentzVector import TLorentzVectorArray,ArrayMethods\r\nJaggedTLorentzVectorArray = awkward.Methods.mixin(ArrayMethods, awkward.JaggedArray)\r\n\r\ncounts = np.random.exponential(2, size=100000).astype(int)\r\nentries = np.sum(counts)\r\nv = np.random.uniform(size=entries*4).reshape(-1,4)\r\nv[:,3] = np.sqrt(np.sum(v[:,:3]**2))\r\ntlv = TLorentzVectorArray(v[:,0],v[:,1],v[:,2],v[:,3])\r\n\r\nt1 = Table({'var0': v[:,0], 'var1': v[:,1], 'var2': v[:,2]})\r\nt2 = Table({'t1': t1, 'var3': v[:,3]})\r\nt3 = Table({'tlv': tlv})\r\nj1 = JaggedArray.fromcounts(counts, t2)\r\nj2 = JaggedArray.fromcounts(counts, t3)\r\n```\r\n\r\nwhere for primitive types:\r\n```\r\n%timeit t2.at.t1.at.var0\r\nThe slowest run took 39.76 times longer than the fastest. This could mean that an intermediate result is being cached.\r\n100000 loops, best of 3: 8.09 \u00b5s per loop\r\n%timeit JaggedArray.fromoffsets(j1.offsets, j1.content.at.t1.at.var0)\r\nThe slowest run took 53.29 times longer than the fastest. This could mean that an intermediate result is being cached.\r\n10000 loops, best of 3: 84.4 \u00b5s per loop\r\n```\r\n\r\nWhich is good, repacking should be slower!\r\n\r\nand for TLorentzVector ArrayMethods:\r\n```\r\n%timeit j2.at.tlv.eta\r\n100 loops, best of 3: 19.8 ms per loop\r\n%timeit JaggedArray.fromoffsets(j2.offsets, j2.content.at.tlv.eta)\r\nThe slowest run took 112.06 times longer than the fastest. This could mean that an intermediate result is being cached.\r\n10000 loops, best of 3: 80.4 \u00b5s per loop\r\n```\r\n\r\nNot quite the case!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/55", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/55/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/55/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/55", "id": 386777487, "node_id": "MDU6SXNzdWUzODY3Nzc0ODc=", "number": 55, "title": "Cannot perform nested ufunc math on jagged arrays", "user": {"login": "lgray", "id": 1068089, "node_id": "MDQ6VXNlcjEwNjgwODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1068089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lgray", "html_url": "https://github.com/lgray", "followers_url": "https://api.github.com/users/lgray/followers", "following_url": "https://api.github.com/users/lgray/following{/other_user}", "gists_url": "https://api.github.com/users/lgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/lgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lgray/subscriptions", "organizations_url": "https://api.github.com/users/lgray/orgs", "repos_url": "https://api.github.com/users/lgray/repos", "events_url": "https://api.github.com/users/lgray/events{/privacy}", "received_events_url": "https://api.github.com/users/lgray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-12-03T11:35:41Z", "updated_at": "2018-12-03T12:11:16Z", "closed_at": "2018-12-03T12:10:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In awkward 5.2 and 5.3 I encounter the following problem if I *do not* flatten the jagged array :\r\n```python\r\nimport numpy as np\r\nimport awkward\r\nimport uproot_methods\r\n\r\nnp.random.seed(12345)\r\nnrows = 1000\r\ncounts = np.minimum(np.random.exponential(0.5, size=nrows).astype(int), 20)\r\noffsets = np.cumsum(counts)\r\n\r\npx = np.random.normal(loc=20.0,scale=5.0,size=np.sum(counts))\r\npy = np.random.normal(loc=20.0,scale=5.0,size=np.sum(counts))\r\npz = np.random.normal(loc=0, scale=55, size=np.sum(counts))\r\nm_pi = np.full_like(px,fill_value=0.135)\r\nenergy = np.sqrt(px*px + py*py + pz*pz + m_pi*m_pi)\r\n\r\nmom = awkward.JaggedArray.fromoffsets(offsets,awkward.Table(x = px,\r\n                                                            y = py,\r\n                                                            z = pz,\r\n                                                            E = energy))\r\n\r\npzs_parts = mom['z']\r\npts_parts = np.sqrt(mom['x']**2 + mom['y']**2)\r\n\r\nassert( (mom['z'].counts == pts_parts.counts).all() )\r\nassert( (pzs_parts.counts == pts_parts.counts).all() )\r\n\r\nmom['z'] + pzs_parts\r\npts_parts + pts_parts\r\nawkward.JaggedArray.fromoffsets(offsets,mom['z'].flatten() + pts_parts.flatten())\r\nmom['z'] + pts_parts\r\n```\r\nfails with\r\n```\r\nTraceback (most recent call last):\r\n  File \"jagged_math_fail.py\", line 30, in <module>\r\n    mom['z'] + pts_parts\r\n  File \"/anaconda2/lib/python2.7/site-packages/numpy/lib/mixins.py\", line 25, in func\r\n    return ufunc(self, other)\r\n  File \"/anaconda2/lib/python2.7/site-packages/awkward/array/jagged.py\", line 727, in __array_ufunc__\r\n    inputs[i] = inputs[i]._tojagged(starts, stops, copy=False)\r\n  File \"/anaconda2/lib/python2.7/site-packages/awkward/array/jagged.py\", line 706, in _tojagged\r\n    out = self.copy(starts=starts, stops=stops, content=self._content[index])\r\nIndexError: index 155 is out of bounds for axis 1 with size 155\r\n```\r\nThis causes evaluation of pseudorapidity and other nested operations to fail when operating directly on the jagged array!\r\n\r\n\r\nNote: this example uses addition, but the same error is encountered for multiplication, division, etc.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/53", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/53/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/53/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/53", "id": 386667349, "node_id": "MDU6SXNzdWUzODY2NjczNDk=", "number": 53, "title": "Bad dtype specification for `JaggedArray.any` and `JaggedArray.all`", "user": {"login": "benkrikler", "id": 4083697, "node_id": "MDQ6VXNlcjQwODM2OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4083697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benkrikler", "html_url": "https://github.com/benkrikler", "followers_url": "https://api.github.com/users/benkrikler/followers", "following_url": "https://api.github.com/users/benkrikler/following{/other_user}", "gists_url": "https://api.github.com/users/benkrikler/gists{/gist_id}", "starred_url": "https://api.github.com/users/benkrikler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benkrikler/subscriptions", "organizations_url": "https://api.github.com/users/benkrikler/orgs", "repos_url": "https://api.github.com/users/benkrikler/repos", "events_url": "https://api.github.com/users/benkrikler/events{/privacy}", "received_events_url": "https://api.github.com/users/benkrikler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-03T05:43:21Z", "updated_at": "2018-12-03T14:13:44Z", "closed_at": "2018-12-03T14:13:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As of commit 55ca35d658745b5d5aa555826941d97b1e27a72a, [line 959](https://github.com/scikit-hep/awkward-array/blob/master/awkward/array/jagged.py#L959) and [line 980](https://github.com/scikit-hep/awkward-array/blob/master/awkward/array/jagged.py#L980) have a bug where they reference `awkward.BOOLTYPE` as opposed to `awkward.util.BOOLTYPE`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/51", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/51/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/51/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/51", "id": 386567246, "node_id": "MDU6SXNzdWUzODY1NjcyNDY=", "number": 51, "title": "Slow accessor in nested jagged table", "user": {"login": "nsmith-", "id": 6587412, "node_id": "MDQ6VXNlcjY1ODc0MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6587412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsmith-", "html_url": "https://github.com/nsmith-", "followers_url": "https://api.github.com/users/nsmith-/followers", "following_url": "https://api.github.com/users/nsmith-/following{/other_user}", "gists_url": "https://api.github.com/users/nsmith-/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsmith-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsmith-/subscriptions", "organizations_url": "https://api.github.com/users/nsmith-/orgs", "repos_url": "https://api.github.com/users/nsmith-/repos", "events_url": "https://api.github.com/users/nsmith-/events{/privacy}", "received_events_url": "https://api.github.com/users/nsmith-/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-02T14:57:47Z", "updated_at": "2018-12-03T00:37:56Z", "closed_at": "2018-12-03T00:37:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With a simple nested table structure such as\r\n```python\r\nimport numpy as np\r\nfrom awkward import JaggedArray, Table\r\n\r\ncounts = np.random.exponential(2, size=100000).astype(int)\r\nentries = np.sum(counts)\r\nv = np.random.uniform(size=entries*4).reshape(-1,4)\r\n\r\nt1 = Table({'var0': v[:,0], 'var1': v[:,1], 'var2': v[:,2]})\r\nt2 = Table({'t1': t1, 'var3': v[:,3]})\r\nj = JaggedArray.fromcounts(counts, t2)\r\n```\r\na large performance hit is encountered when accessing elements from the JaggedArray instance vs. the flat array instance:\r\n```\r\nIn [2]: %timeit t2.at.t1.at.var0\r\n4.27 \u00b5s \u00b1 32.3 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\r\n\r\nIn [3]: %timeit j.at.t1.at.var0\r\n1.18 ms \u00b1 9.47 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\r\n```\r\nOne can access the underlying content and re-construct the jagged array with a smaller performance hit,\r\n```\r\nIn [4]: %timeit JaggedArray.fromoffsets(j.offsets, j.content.at.t1.at.var0)\r\n135 \u00b5s \u00b1 1.42 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\r\n```\r\nLikely, the validation in constructing the JaggedArray is compounding in nested calls.  Perhaps for these cases it can be bypassed?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/49", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/49/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/49/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/49", "id": 386231794, "node_id": "MDU6SXNzdWUzODYyMzE3OTQ=", "number": 49, "title": "Wrong return values when masking?", "user": {"login": "lgray", "id": 1068089, "node_id": "MDQ6VXNlcjEwNjgwODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1068089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lgray", "html_url": "https://github.com/lgray", "followers_url": "https://api.github.com/users/lgray/followers", "following_url": "https://api.github.com/users/lgray/following{/other_user}", "gists_url": "https://api.github.com/users/lgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/lgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lgray/subscriptions", "organizations_url": "https://api.github.com/users/lgray/orgs", "repos_url": "https://api.github.com/users/lgray/repos", "events_url": "https://api.github.com/users/lgray/events{/privacy}", "received_events_url": "https://api.github.com/users/lgray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-30T15:24:06Z", "updated_at": "2018-11-30T19:29:40Z", "closed_at": "2018-11-30T19:29:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\nimport awkward  #version 0.5.1\r\n\r\nclass test(awkward.JaggedArray,):\r\n    def __init__(self,jagged):        \r\n        super(test, self).__init__(jagged.starts,\r\n                                   jagged.stops,\r\n                                   jagged.content)\r\n    @property\r\n    def stuff(self):\r\n        return self['stuff']\r\n\r\na = test(awkward.JaggedArray.fromcounts([2,0,3],awkward.Table(stuff=[1,2,3,4,5])))\r\nmask = [False,False,True]\r\nb = a[mask]\r\nprint(type(b),b.stuff)\r\nc = b[(b.stuff > 4)]\r\nd = (b.stuff > 4)\r\nprint(type(c),c.stuff)\r\nprint(type(d),d)\r\n```\r\n\r\nresults in the printouts:\r\n\r\n```\r\n(<class '__main__.test'>, <JaggedArray [[3 4 5]] at 000111547890>)\r\n(<class '__main__.test'>, <JaggedArray [[1]] at 00011e4302d0>)\r\n(<class 'awkward.array.jagged.JaggedArray'>, <JaggedArray [[False False  True]] at 00011e430a50>)\r\n```\r\n\r\nThe result of print(type(c),c.stuff), according to my understanding, should be ```JaggedArray [[5]]```, so something funny is happening with indices. Otherwise the mask result is correct!\r\n\r\nIf you use lorentz vector array mixins with this results in an exception when trying to evaluate a function, but I haven't gotten that to repeat in a simple example yet. However, what's shown here is clearly a problem!\r\n\r\nNote:\r\n```python\r\nimport awkward  #version 0.5.1\r\na = awkward.JaggedArray.fromcounts([2,0,3],awkward.Table(stuff=[1,2,3,4,5]))\r\nmask = [False,False,True]\r\nb = a[mask]\r\nprint(type(b),b['stuff'])\r\nc = b[(b['stuff'] > 4)]\r\nd = (b['stuff'] > 4)\r\nprint(type(c),c['stuff'])\r\nprint(type(d),d)\r\n```\r\n\r\nalso results in:\r\n```\r\n(<class 'awkward.array.jagged.JaggedArray'>, <JaggedArray [[3 4 5]] at 0001106db190>)\r\n(<class 'awkward.array.jagged.JaggedArray'>, <JaggedArray [[1]] at 00011e430b90>)\r\n(<class 'awkward.array.jagged.JaggedArray'>, <JaggedArray [[False False  True]] at 00011e430590>)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/47", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/47/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/47/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/47", "id": 385413516, "node_id": "MDU6SXNzdWUzODU0MTM1MTY=", "number": 47, "title": "JaggedArray second dimension fancy indexing", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-11-28T19:04:34Z", "updated_at": "2018-11-28T20:44:14Z", "closed_at": "2018-11-28T20:44:14Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/46", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/46/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/46/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/46", "id": 385378374, "node_id": "MDU6SXNzdWUzODUzNzgzNzQ=", "number": 46, "title": "cross, pairs, distincts must share column numbers", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-11-28T17:28:11Z", "updated_at": "2018-11-28T20:07:16Z", "closed_at": "2018-11-28T20:07:15Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/44", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/44/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/44/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/44", "id": 385357112, "node_id": "MDU6SXNzdWUzODUzNTcxMTI=", "number": 44, "title": "flatten an empty jagged array", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-28T16:40:44Z", "updated_at": "2018-11-28T17:27:12Z", "closed_at": "2018-11-28T17:27:11Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/39", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/39/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/39/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/39", "id": 384743050, "node_id": "MDU6SXNzdWUzODQ3NDMwNTA=", "number": 39, "title": "Feature request: astype", "user": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-27T11:11:57Z", "updated_at": "2018-11-27T13:00:06Z", "closed_at": "2018-11-27T13:00:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "New feature request: changing the dtype of JaggedArrays is a bit clunky:\r\n\r\n```python\r\njarr.content = jarr.content.astype(np.uint16)\r\n```\r\n\r\nIt would be nice to have:\r\n\r\n```python\r\njarr = jarr.astype(np.uint16)\r\n```\r\n\r\n(the savings in overall code lines is more noticeable when reading and immediately converting from an uproot file. Having a `dtype=` argument in uproot's `.array()` is another option)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/38", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/38/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/38/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/38", "id": 384622156, "node_id": "MDU6SXNzdWUzODQ2MjIxNTY=", "number": 38, "title": "Jagged array reductions fail after masking on first dimension", "user": {"login": "benkrikler", "id": 4083697, "node_id": "MDQ6VXNlcjQwODM2OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4083697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benkrikler", "html_url": "https://github.com/benkrikler", "followers_url": "https://api.github.com/users/benkrikler/followers", "following_url": "https://api.github.com/users/benkrikler/following{/other_user}", "gists_url": "https://api.github.com/users/benkrikler/gists{/gist_id}", "starred_url": "https://api.github.com/users/benkrikler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benkrikler/subscriptions", "organizations_url": "https://api.github.com/users/benkrikler/orgs", "repos_url": "https://api.github.com/users/benkrikler/repos", "events_url": "https://api.github.com/users/benkrikler/events{/privacy}", "received_events_url": "https://api.github.com/users/benkrikler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-27T04:51:24Z", "updated_at": "2018-11-27T13:29:43Z", "closed_at": "2018-11-27T13:29:11Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I've noticed that when using  a boolean mask over the first dimension of a jagged array, the resulting jagged array is unable to be \"reduced\" over the second dimension.  This seems to be true for `prod`, `sum`, `count_nonzero`, `min`, at least.\r\n\r\nHere's the code to reproduce this issue:\r\n```python\r\n>>> import numpy as np\r\n\r\n>>> import awkward\r\n\r\n>>> a = awkward.JaggedArray([0, 2, 5], [2, 5, 6], np.random.random(6))\r\n\r\n>>> a\r\n<JaggedArray [[0.77199625 0.08255843] [0.78680289 0.8103746  0.7055252 ] [0.9514227]] at 7f807bd19a90>\r\n\r\n>>> a.prod()\r\narray([0.0637348 , 0.44984645, 0.9514227 ])\r\n\r\n>>> a[[False, False, True]].prod()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/ben/.local/lib/python2.7/site-packages/awkward/array/jagged.py\", line 881, in prod\r\n    out[:len(nonterminal)] = awkward.util.numpy.multiply.reduceat(content[self._starts[0]:self._stops[-1]], nonterminal)\r\nIndexError: index 5 out-of-bounds in multiply.reduceat [0, 1)\r\n```\r\n\r\nThe workaround seems to be to swap the order of the masking:\r\n```python\r\n>>> a.prod()[[False, False, True]]\r\narray([0.9514227])\r\n```\r\nbut I feel like this is not what a user would expect.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/36", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/36/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/36/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/36", "id": 382887470, "node_id": "MDU6SXNzdWUzODI4ODc0NzA=", "number": 36, "title": "argpairs behavior not as expected", "user": {"login": "nsmith-", "id": 6587412, "node_id": "MDQ6VXNlcjY1ODc0MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6587412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsmith-", "html_url": "https://github.com/nsmith-", "followers_url": "https://api.github.com/users/nsmith-/followers", "following_url": "https://api.github.com/users/nsmith-/following{/other_user}", "gists_url": "https://api.github.com/users/nsmith-/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsmith-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsmith-/subscriptions", "organizations_url": "https://api.github.com/users/nsmith-/orgs", "repos_url": "https://api.github.com/users/nsmith-/repos", "events_url": "https://api.github.com/users/nsmith-/events{/privacy}", "received_events_url": "https://api.github.com/users/nsmith-/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-11-20T23:15:44Z", "updated_at": "2018-11-28T17:27:00Z", "closed_at": "2018-11-28T17:27:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The gist of it is that `JaggedArray.argpairs()` returns global indices rather than local ones, such that  `array[array.argpairs()._0]` is invalid syntax, while I would have expected it to be equivalent to `array.pairs()._0`\r\n\r\nSee https://github.com/nsmith-/coffea/blob/master/notebooks/idioms/argpairs.ipynb for a complete example.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/33", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/33/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/33/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/33", "id": 382033288, "node_id": "MDU6SXNzdWUzODIwMzMyODg=", "number": 33, "title": "JaggedArray.pairs fails for n>=24", "user": {"login": "nsmith-", "id": 6587412, "node_id": "MDQ6VXNlcjY1ODc0MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6587412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsmith-", "html_url": "https://github.com/nsmith-", "followers_url": "https://api.github.com/users/nsmith-/followers", "following_url": "https://api.github.com/users/nsmith-/following{/other_user}", "gists_url": "https://api.github.com/users/nsmith-/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsmith-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsmith-/subscriptions", "organizations_url": "https://api.github.com/users/nsmith-/orgs", "repos_url": "https://api.github.com/users/nsmith-/repos", "events_url": "https://api.github.com/users/nsmith-/events{/privacy}", "received_events_url": "https://api.github.com/users/nsmith-/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-19T02:22:56Z", "updated_at": "2018-11-19T22:04:44Z", "closed_at": "2018-11-19T21:42:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\nimport numpy as np\r\nimport awkward\r\n\r\nnmax = 35\r\ncounts = np.arange(nmax)\r\nvalues = np.ones(nmax*(nmax-1)//2)\r\nawk = awkward.JaggedArray.fromcounts(counts, values)\r\ncands = awk.pairs(same=False)\r\n\r\ncdiff = cands[\"0\"].counts - counts*(counts-1)//2\r\nprint(\"Diff:\", cdiff[cdiff!=0.])\r\nprint(\"Expected combinations:\", (counts*(counts-1)//2)[cdiff!=0.])\r\nprint(\"Actual combinations:\", cands[\"0\"].counts[cdiff!=0.])\r\n```\r\nresults in:\r\n```\r\nDiff: [-256 -256 -256 -256 -256 -256 -256 -256 -256 -512 -512]\r\nExpected combinations: [276 300 325 351 378 406 435 465 496 528 561]\r\nActual combinations: [ 20  44  69  95 122 150 179 209 240  16  49]\r\n```\r\n\r\nNote: python 3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/31", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/31/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/31/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/31", "id": 380732968, "node_id": "MDU6SXNzdWUzODA3MzI5Njg=", "number": 31, "title": "accessing columns with JaggedArray elements without a for loop", "user": {"login": "pibion", "id": 1872784, "node_id": "MDQ6VXNlcjE4NzI3ODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1872784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pibion", "html_url": "https://github.com/pibion", "followers_url": "https://api.github.com/users/pibion/followers", "following_url": "https://api.github.com/users/pibion/following{/other_user}", "gists_url": "https://api.github.com/users/pibion/gists{/gist_id}", "starred_url": "https://api.github.com/users/pibion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pibion/subscriptions", "organizations_url": "https://api.github.com/users/pibion/orgs", "repos_url": "https://api.github.com/users/pibion/repos", "events_url": "https://api.github.com/users/pibion/events{/privacy}", "received_events_url": "https://api.github.com/users/pibion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-11-14T14:49:34Z", "updated_at": "2018-11-19T18:04:04Z", "closed_at": "2018-11-19T18:04:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have data in awkward array that represents digitized pulses, and it'd be nice to have an easy way to get a container with all these traces as elements.\r\n\r\nSo, a call like\r\n\r\n`data[\"traces\"][:, start_idx:final_idx]`\r\n\r\nwould return an nxm array where n is the number of traces in the data and m is final_idx - start_idx.\r\n\r\nOr perhaps if a call like\r\n\r\n`data[\"traces\"][:]`\r\n\r\nreturned a jagged array?\r\n\r\nI should clarify, though, that all my data has traces that are the same length.  My second suggestion is motivated by the extreme laziness of not wanting to write extra code to get final_idx.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/30", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/30/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/30/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/30", "id": 379559241, "node_id": "MDU6SXNzdWUzNzk1NTkyNDE=", "number": 30, "title": "Interfacing between pandas Muiltiindex dataframe and JaggedArrays", "user": {"login": "shane-breeze", "id": 16652564, "node_id": "MDQ6VXNlcjE2NjUyNTY0", "avatar_url": "https://avatars3.githubusercontent.com/u/16652564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shane-breeze", "html_url": "https://github.com/shane-breeze", "followers_url": "https://api.github.com/users/shane-breeze/followers", "following_url": "https://api.github.com/users/shane-breeze/following{/other_user}", "gists_url": "https://api.github.com/users/shane-breeze/gists{/gist_id}", "starred_url": "https://api.github.com/users/shane-breeze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shane-breeze/subscriptions", "organizations_url": "https://api.github.com/users/shane-breeze/orgs", "repos_url": "https://api.github.com/users/shane-breeze/repos", "events_url": "https://api.github.com/users/shane-breeze/events{/privacy}", "received_events_url": "https://api.github.com/users/shane-breeze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-11-11T20:21:56Z", "updated_at": "2019-06-03T15:12:42Z", "closed_at": "2018-11-11T21:00:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm finding some of the functions such as `cross` very useful and the conversions into pandas Multiindex dataframes (with levels \"entry\" and \"subentry\"). However, I'm struggling in reversing the conversion to pandas. What is the easiest way to convert a Multiindex to start/stops?\r\n\r\nThe use case is that I have a multiindex dataframe which I've skimmed. I save the multiindex to use it later as needed. Later I want to use the `cross` function so I need to apply the multiindex on a JaggedArray to be usable with `cross`. I could convert the cross into a pandas dataframe and then apply the multiindex, however, the skimming reduces the size of the dataframe considerably and the `cross` function will create an unnecessarily large dataframe.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/25", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/25/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/25/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/25", "id": 374968975, "node_id": "MDU6SXNzdWUzNzQ5Njg5NzU=", "number": 25, "title": "Subschemas in serialization", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-29T11:21:10Z", "updated_at": "2019-07-09T11:45:19Z", "closed_at": "2019-07-09T11:45:19Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Will be necessary for datasets with a large number of chunks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/24", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/24/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/24/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/24", "id": 374965849, "node_id": "MDU6SXNzdWUzNzQ5NjU4NDk=", "number": 24, "title": "In serialization, check for \"tojson\", \"fromjson\" methods on the object", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-29T11:12:23Z", "updated_at": "2018-10-29T21:07:42Z", "closed_at": "2018-10-29T21:07:42Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As a last-ditch effort before resorting to Pickle.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/21", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/21/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/21/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/21", "id": 374565948, "node_id": "MDU6SXNzdWUzNzQ1NjU5NDg=", "number": 21, "title": "Append missing", "user": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-10-26T22:20:06Z", "updated_at": "2018-10-29T19:41:30Z", "closed_at": "2018-10-29T19:41:30Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`np.concatinate ` or `np.append` is missing from jagged arrays:\r\n\r\n```python\r\nja1 = awkward.JaggedArray.fromiter([[1,2,3],[4,5]])\r\nja2 = awkward.JaggedArray.fromiter([[7,8],[9,10,11],[12]])\r\n```\r\n\r\nThese are not available but would be numpy like:\r\n```python\r\nja12 = ja1.append(ja2) # not available in Numpy, but common in Python\r\nja12 = awkward.append(ja1, ja2) # Numpy like, but would be nice to support *args\r\nja12 = awkward.concatinate([ja1, ja2]) # Numpy like, supports multiple arrays\r\n```\r\n\r\nWhat is the correct way to do this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/20", "repository_url": "https://api.github.com/repos/scikit-hep/awkward-array", "labels_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/20/comments", "events_url": "https://api.github.com/repos/scikit-hep/awkward-array/issues/20/events", "html_url": "https://github.com/scikit-hep/awkward-array/issues/20", "id": 374515584, "node_id": "MDU6SXNzdWUzNzQ1MTU1ODQ=", "number": 20, "title": "Types need a suite of unit tests", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-26T19:22:38Z", "updated_at": "2019-07-09T11:44:56Z", "closed_at": "2019-07-09T11:44:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Especially when coming from arrays. The `Type` infrastructure was touched in the 0.3.0 \u2192 0.4.0 transition and I want to be certain that `type.to` vs `type` is consistent everywhere.", "performed_via_github_app": null, "score": 1.0}]}