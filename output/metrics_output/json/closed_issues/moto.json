{"total_count": 1166, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/spulec/moto/issues/3238", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3238/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3238/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3238/events", "html_url": "https://github.com/spulec/moto/issues/3238", "id": 680407894, "node_id": "MDU6SXNzdWU2ODA0MDc4OTQ=", "number": 3238, "title": "NotImplementedError: The update_policy action has not been implemented", "user": {"login": "harvester843", "id": 13964829, "node_id": "MDQ6VXNlcjEzOTY0ODI5", "avatar_url": "https://avatars1.githubusercontent.com/u/13964829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harvester843", "html_url": "https://github.com/harvester843", "followers_url": "https://api.github.com/users/harvester843/followers", "following_url": "https://api.github.com/users/harvester843/following{/other_user}", "gists_url": "https://api.github.com/users/harvester843/gists{/gist_id}", "starred_url": "https://api.github.com/users/harvester843/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harvester843/subscriptions", "organizations_url": "https://api.github.com/users/harvester843/orgs", "repos_url": "https://api.github.com/users/harvester843/repos", "events_url": "https://api.github.com/users/harvester843/events{/privacy}", "received_events_url": "https://api.github.com/users/harvester843/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/spulec/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-17T17:37:29Z", "updated_at": "2020-08-19T13:09:13Z", "closed_at": "2020-08-19T13:09:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Good afternoon,\r\n\r\nI came across this error while using the organizations update_policy API call:\r\n```python\r\nError\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\unittest\\case.py\", line 59, in testPartExecutor\r\n    yield\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\unittest\\case.py\", line 605, in run\r\n    testMethod()\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\moto\\core\\models.py\", line 88, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\unittest\\mock.py\", line 1179, in patched\r\n    return func(*args, **keywargs)\r\n  File \"C:\\Users\\redacted\\Desktop\\redacted\\redacted\\tests\\unit\\test_organizations.py\", line 319, in test_update_scp\r\n    Content=str(updated_scp)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\client.py\", line 316, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\client.py\", line 622, in _make_api_call\r\n    operation_model, request_dict, request_context)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\client.py\", line 641, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\endpoint.py\", line 137, in _send_request\r\n    success_response, exception):\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\endpoint.py\", line 256, in _needs_retry\r\n    caught_exception=caught_exception, request_dict=request_dict)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\retryhandler.py\", line 183, in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\retryhandler.py\", line 251, in __call__\r\n    caught_exception)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\retryhandler.py\", line 269, in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\retryhandler.py\", line 317, in __call__\r\n    caught_exception)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\retryhandler.py\", line 223, in __call__\r\n    attempt_number, caught_exception)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\retryhandler.py\", line 359, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\endpoint.py\", line 197, in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\botocore\\hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\moto\\core\\models.py\", line 272, in __call__\r\n    request, request.url, request.headers\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\moto\\core\\responses.py\", line 197, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\moto\\core\\responses.py\", line 295, in _dispatch\r\n    return self.call_action()\r\n  File \"C:\\Users\\redacted\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\moto\\core\\responses.py\", line 393, in call_action\r\n    \"The {0} action has not been implemented\".format(action)\r\nNotImplementedError: The update_policy action has not been implemented\r\n```\r\nI am calling it by creating a session, with that session I create the organizations client and call it:\r\n \r\n```python\r\n                updated_policy = self.orgs_client.update_policy(\r\n                    PolicyId=policy_id,\r\n                    Name=policy_name,\r\n                    Description=policy_description,\r\n                    Content=str(updated_scp)\r\n                )\r\n````\r\nI am expecting the API call to succeed, but it is giving me the aforementioned error\r\n\r\nCurrently installed:\r\nmoto version 1.3.14\r\nboto3 version 1.10.34\r\nbotocore version 1.17.28\r\ninstalled all libraries using pip\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3234", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3234/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3234/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3234/events", "html_url": "https://github.com/spulec/moto/issues/3234", "id": 677906786, "node_id": "MDU6SXNzdWU2Nzc5MDY3ODY=", "number": 3234, "title": "missing region: af-south-1", "user": {"login": "Chagui-", "id": 3289167, "node_id": "MDQ6VXNlcjMyODkxNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3289167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chagui-", "html_url": "https://github.com/Chagui-", "followers_url": "https://api.github.com/users/Chagui-/followers", "following_url": "https://api.github.com/users/Chagui-/following{/other_user}", "gists_url": "https://api.github.com/users/Chagui-/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chagui-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chagui-/subscriptions", "organizations_url": "https://api.github.com/users/Chagui-/orgs", "repos_url": "https://api.github.com/users/Chagui-/repos", "events_url": "https://api.github.com/users/Chagui-/events{/privacy}", "received_events_url": "https://api.github.com/users/Chagui-/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-12T18:56:30Z", "updated_at": "2020-08-12T20:28:08Z", "closed_at": "2020-08-12T20:28:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For some reason, moto fails in my computer when i'm using boto3 >= 1.12.0 (or maybe is botocore >=1.15.49). I'm getting the following error: `KeyError: 'af-south-1'`\r\nIm not even in that region. Im supposed to be using us-east-1.\r\nIn my test, i'm only using mock_dynamodb2\r\nIf i install boto3-1.11.0 botocore-1.14.17 then the error goes away and the tests are running again. \r\n\r\nthis is the complete error:\r\n```\r\ntests/get_data/test_handler.py:None (tests/get_data/test_handler.py)\r\ntest_handler.py:12: in <module>\r\n    from moto import mock_dynamodb2\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\__init__.py:3: in <module>\r\n    from .acm import mock_acm  # noqa\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\acm\\__init__.py:2: in <module>\r\n    from .models import acm_backends\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\acm\\models.py:7: in <module>\r\n    from moto.ec2 import ec2_backends\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\ec2\\__init__.py:2: in <module>\r\n    from .models import ec2_backends\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\ec2\\models.py:5162: in <module>\r\n    ec2_backends = {\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\ec2\\models.py:5163: in <dictcomp>\r\n    region.name: EC2Backend(region.name) for region in RegionsAndZonesBackend.regions\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\ec2\\models.py:5076: in __init__\r\n    super(EC2Backend, self).__init__()\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\ec2\\models.py:845: in __init__\r\n    super(InstanceBackend, self).__init__()\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\ec2\\models.py:1120: in __init__\r\n    super(TagBackend, self).__init__()\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\ec2\\models.py:2361: in __init__\r\n    super(EBSBackend, self).__init__()\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\ec2\\models.py:1897: in __init__\r\n    super(SecurityGroupBackend, self).__init__()\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\ec2\\models.py:1348: in __init__\r\n    self._load_amis()\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\ec2\\models.py:1355: in _load_amis\r\n    self.amis[ami_id] = Ami(self, **ami)\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\ec2\\models.py:1306: in __init__\r\n    volume = self.ec2_backend.create_volume(15, region_name)\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\ec2\\models.py:2365: in create_volume\r\n    zone = self.get_zone_by_name(zone_name)\r\n..\\..\\..\\..\\..\\..\\..\\pycharm-venv\\monorepo-3.8\\lib\\site-packages\\moto\\ec2\\models.py:1706: in get_zone_by_name\r\n    for zone in self.zones[self.region_name]:\r\nE   KeyError: 'af-south-1'\r\n```\r\n\r\nI found that af-south-1 was a new region, announced in this post: https://aws.amazon.com/de/blogs/aws/now-open-aws-africa-cape-town-region/\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3230", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3230/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3230/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3230/events", "html_url": "https://github.com/spulec/moto/issues/3230", "id": 677031058, "node_id": "MDU6SXNzdWU2NzcwMzEwNTg=", "number": 3230, "title": "Load balancer created by cloudformation not destroyed between tests", "user": {"login": "ipmb", "id": 319156, "node_id": "MDQ6VXNlcjMxOTE1Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/319156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipmb", "html_url": "https://github.com/ipmb", "followers_url": "https://api.github.com/users/ipmb/followers", "following_url": "https://api.github.com/users/ipmb/following{/other_user}", "gists_url": "https://api.github.com/users/ipmb/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipmb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipmb/subscriptions", "organizations_url": "https://api.github.com/users/ipmb/orgs", "repos_url": "https://api.github.com/users/ipmb/repos", "events_url": "https://api.github.com/users/ipmb/events{/privacy}", "received_events_url": "https://api.github.com/users/ipmb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-11T16:45:44Z", "updated_at": "2020-08-11T17:32:15Z", "closed_at": "2020-08-11T17:32:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using pytest and `moto.mock_cloudformation` to test a cloudformation stack. A minimal code sample is here: https://gist.github.com/ipmb/7746c429c8c2176d9dc81eecce0a26ed/98085ab2d6a758c391fe7ac88f16e9acb7016a52\r\n\r\nI expect that when I run this, the full Cloudformation stack will be torn down and recreated for each test.\r\n\r\nInstead, the first test passes, but the second test fails because the `LoadBalancer` resource still exists:\r\n\r\n```\r\ntests/test_stack.py .F                                                                                                               [100%]\r\n\r\n================================================================= FAILURES =================================================================\r\n__________________________________________________________________ test2 ___________________________________________________________________\r\n\r\ncloudformation = <botocore.client.CloudFormation object at 0x10eb4b610>\r\n\r\n    def test2(cloudformation):\r\n>       cloudformation.create_stack(\r\n            StackName=\"my-app\", TemplateBody=TEMPLATE,\r\n        )\r\n\r\ntests/test_stack.py:118:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n.venv/lib/python3.8/site-packages/botocore/client.py:316: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <botocore.client.CloudFormation object at 0x10eb4b610>, operation_name = 'CreateStack'\r\napi_params = {'StackName': 'my-app', 'TemplateBody': '{\"Outputs\": {\"LoadBalancerListenerArn\": {\"Description\": \"ARN of the Load Bala...names\": \"true\", \"EnableDnsSupport\": \"true\", \"Tags\": [{\"Key\": \"Name\", \"Value\": \"my-app\"}]}, \"Type\": \"AWS::EC2::VPC\"}}}'}\r\n\r\n    def _make_api_call(self, operation_name, api_params):\r\n        operation_model = self._service_model.operation_model(operation_name)\r\n        service_name = self._service_model.service_name\r\n        history_recorder.record('API_CALL', {\r\n            'service': service_name,\r\n            'operation': operation_name,\r\n            'params': api_params,\r\n        })\r\n        if operation_model.deprecated:\r\n            logger.debug('Warning: %s.%s() is deprecated',\r\n                         service_name, operation_name)\r\n        request_context = {\r\n            'client_region': self.meta.region_name,\r\n            'client_config': self.meta.config,\r\n            'has_streaming_input': operation_model.has_streaming_input,\r\n            'auth_type': operation_model.auth_type,\r\n        }\r\n        request_dict = self._convert_to_request_dict(\r\n            api_params, operation_model, context=request_context)\r\n\r\n        service_id = self._service_model.service_id.hyphenize()\r\n        handler, event_response = self.meta.events.emit_until_response(\r\n            'before-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            model=operation_model, params=request_dict,\r\n            request_signer=self._request_signer, context=request_context)\r\n\r\n        if event_response is not None:\r\n            http, parsed_response = event_response\r\n        else:\r\n            http, parsed_response = self._make_request(\r\n                operation_model, request_dict, request_context)\r\n\r\n        self.meta.events.emit(\r\n            'after-call.{service_id}.{operation_name}'.format(\r\n                service_id=service_id,\r\n                operation_name=operation_name),\r\n            http_response=http, parsed=parsed_response,\r\n            model=operation_model, context=request_context\r\n        )\r\n\r\n        if http.status_code >= 300:\r\n            error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\r\n            error_class = self.exceptions.from_code(error_code)\r\n>           raise error_class(parsed_response, operation_name)\r\nE           botocore.exceptions.ClientError: An error occurred (DuplicateLoadBalancerName) when calling the CreateStack operation: A load balancer with the specified name already exists.\r\n\r\n.venv/lib/python3.8/site-packages/botocore/client.py:635: ClientError\r\n```\r\n\r\n### Versions\r\n\r\n* Python 3.8\r\n* \r\n    ```\r\n    boto3==1.14.29\r\n    botocore==1.17.29\r\n    moto==1.3.14\r\n    ```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3228", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3228/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3228/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3228/events", "html_url": "https://github.com/spulec/moto/issues/3228", "id": 676849207, "node_id": "MDU6SXNzdWU2NzY4NDkyMDc=", "number": 3228, "title": "NotImplementedError: The create_db_snapshot action has not been implemented", "user": {"login": "iamyogeshg", "id": 25523197, "node_id": "MDQ6VXNlcjI1NTIzMTk3", "avatar_url": "https://avatars0.githubusercontent.com/u/25523197?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iamyogeshg", "html_url": "https://github.com/iamyogeshg", "followers_url": "https://api.github.com/users/iamyogeshg/followers", "following_url": "https://api.github.com/users/iamyogeshg/following{/other_user}", "gists_url": "https://api.github.com/users/iamyogeshg/gists{/gist_id}", "starred_url": "https://api.github.com/users/iamyogeshg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iamyogeshg/subscriptions", "organizations_url": "https://api.github.com/users/iamyogeshg/orgs", "repos_url": "https://api.github.com/users/iamyogeshg/repos", "events_url": "https://api.github.com/users/iamyogeshg/events{/privacy}", "received_events_url": "https://api.github.com/users/iamyogeshg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-11T12:47:41Z", "updated_at": "2020-08-12T07:05:42Z", "closed_at": "2020-08-12T07:05:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version:\r\nmoto                            1.3.14\r\nPython                          3.7\r\n\r\nUnit test function:\r\n\r\n```\r\n@mark.slow\r\n@mark.timeout(timeout=5)\r\ndef _create_rds_snapshots(DBInstanceIdentifier, DBSnapshotIdentifiers):\r\n    client = boto3.client('rds', region_name='ap-southeast-2')\r\n    client.create_db_instance(\r\n        DBInstanceIdentifier=DBInstanceIdentifier,\r\n        DBInstanceClass='db.t2.small',\r\n        Engine='postgres'\r\n    )\r\n    for DBSnapshotIdentifier in DBSnapshotIdentifiers:\r\n        client.create_db_snapshot(\r\n            DBSnapshotIdentifier=DBSnapshotIdentifier,\r\n            DBInstanceIdentifier=DBInstanceIdentifier\r\n        )\r\n\r\n```\r\n\r\nWhen running pytest I get following error:\r\n```\r\nE       NotImplementedError: The create_db_snapshot action has not been implemented\r\n\r\n..\\..\\test\\pytest\\lib\\site-packages\\moto\\core\\responses.py:393: NotImplementedError\r\n```\r\n\r\nThis is a sample test failing :\r\n\r\n```\r\n  def test_cleanup_snapshot(component, stack_name):\r\n        # _create_rds_instance('bar', 'db.t2.small', 'postgres')\r\n        snapshot_name = component.get('DBSnapshotBaseName', stack_name)\r\n        rds_snapshots = [\r\n          'foo-bar', snapshot_name, snapshot_name + '-10-08-2020-17-31-54',\r\n          snapshot_name + '-10-08-2020-17-31-55', snapshot_name + '-10-08-2020-17-31-56',\r\n          snapshot_name + '-10-08-2020-17-31-57', snapshot_name + '-10-08-2020-17-31-58'\r\n          ]\r\n>       _create_rds_snapshots('bar', rds_snapshots)\r\n\r\ntests\\test_rds.py:64:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  \r\ntests\\test_rds.py:95: in _create_rds_snapshots\r\n    DBInstanceIdentifier=DBInstanceIdentifier\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\client.py:316: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\client.py:622: in _make_api_call\r\n    operation_model, request_dict, request_context)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\client.py:641: in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\endpoint.py:102: in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\endpoint.py:137: in _send_request\r\n    success_response, exception):\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\endpoint.py:256: in _needs_retry\r\n    caught_exception=caught_exception, request_dict=request_dict)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\retryhandler.py:183: in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\retryhandler.py:251: in __call__\r\n    caught_exception)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\retryhandler.py:269: in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\retryhandler.py:317: in __call__\r\n    caught_exception)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\retryhandler.py:223: in __call__\r\n    attempt_number, caught_exception)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\retryhandler.py:359: in _check_caught_exception\r\n    raise caught_exception\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\endpoint.py:197: in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n..\\..\\test\\pytest\\lib\\site-packages\\botocore\\hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n..\\..\\test\\pytest\\lib\\site-packages\\moto\\core\\models.py:272: in __call__\r\n    request, request.url, request.headers\r\n..\\..\\test\\pytest\\lib\\site-packages\\moto\\core\\responses.py:197: in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n..\\..\\test\\pytest\\lib\\site-packages\\moto\\core\\responses.py:295: in _dispatch\r\n    return self.call_action()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  \r\n\r\nself = <moto.rds.responses.RDSResponse object at 0x0DE66F90>\r\n\r\n    def call_action(self):\r\n        headers = self.response_headers\r\n\r\n        try:\r\n            self._authenticate_and_authorize_normal_action()\r\n        except HTTPException as http_error:\r\n            response = http_error.description, dict(status=http_error.code)\r\n            return self._send_response(headers, response)\r\n    \r\n        action = camelcase_to_underscores(self._get_action())\r\n        method_names = method_names_from_class(self.__class__)\r\n        if action in method_names:\r\n            method = getattr(self, action)\r\n            try:\r\n                response = method()\r\n            except HTTPException as http_error:\r\n                response = http_error.description, dict(status=http_error.code)\r\n\r\n            if isinstance(response, six.string_types):\r\n                return 200, headers, response\r\n            else:\r\n                return self._send_response(headers, response)\r\n\r\n        if not action:\r\n            return 404, headers, \"\"\r\n\r\n        raise NotImplementedError(\r\n>           \"The {0} action has not been implemented\".format(action)\r\n        )\r\nE       NotImplementedError: The create_db_snapshot action has not been implemented\r\n\r\n..\\..\\test\\pytest\\lib\\site-packages\\moto\\core\\responses.py:393: NotImplementedError\r\n================================================= warnings summary ================================================= \r\nc:\\users\\yogesh.gupta\\ws\\test\\pytest\\lib\\site-packages\\moto\\cloudformation\\parsing.py:407\r\nc:\\users\\yogesh.gupta\\ws\\test\\pytest\\lib\\site-packages\\moto\\cloudformation\\parsing.py:407\r\nc:\\users\\yogesh.gupta\\ws\\test\\pytest\\lib\\site-packages\\moto\\cloudformation\\parsing.py:407\r\nc:\\users\\yogesh.gupta\\ws\\test\\pytest\\lib\\site-packages\\moto\\cloudformation\\parsing.py:407\r\nc:\\users\\yogesh.gupta\\ws\\test\\pytest\\lib\\site-packages\\moto\\cloudformation\\parsing.py:407\r\n  c:\\users\\yogesh.gupta\\ws\\test\\pytest\\lib\\site-packages\\moto\\cloudformation\\parsing.py:407: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    class ResourceMap(collections.Mapping):\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n============================================= short test summary info ============================================== \r\nFAILED tests/test_rds.py::test_cleanup_snapshot[component0-foo-bar] - NotImplementedError: \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3221", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3221/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3221/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3221/events", "html_url": "https://github.com/spulec/moto/issues/3221", "id": 675251564, "node_id": "MDU6SXNzdWU2NzUyNTE1NjQ=", "number": 3221, "title": "Trying to test list_stacks() with an existing stack", "user": {"login": "wblech", "id": 8575320, "node_id": "MDQ6VXNlcjg1NzUzMjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8575320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wblech", "html_url": "https://github.com/wblech", "followers_url": "https://api.github.com/users/wblech/followers", "following_url": "https://api.github.com/users/wblech/following{/other_user}", "gists_url": "https://api.github.com/users/wblech/gists{/gist_id}", "starred_url": "https://api.github.com/users/wblech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wblech/subscriptions", "organizations_url": "https://api.github.com/users/wblech/orgs", "repos_url": "https://api.github.com/users/wblech/repos", "events_url": "https://api.github.com/users/wblech/events{/privacy}", "received_events_url": "https://api.github.com/users/wblech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-07T20:15:50Z", "updated_at": "2020-08-08T14:03:17Z", "closed_at": "2020-08-08T14:03:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to test a function that should return True if it finds the stack using the list_stack() function. If it doesn find it returns False.\r\n\r\nThis is the test function:\r\n\r\n```Python\r\n    @mock_cloudformation\r\n    def test_check_stack_exists_with_stack(self, cf):\r\n        'Test the stack search if the stack exists'\r\n        params = self.__get_params(self.template_path)\r\n        cf.create_stack(**params)\r\n        assert check_stack_exists(\"teste\") is True\r\n```\r\n\r\nThe problem is that even using the `cf.create_stack()` it doesn't find the stack that I just created.\r\n\r\nI have other test functions that test if the stack is created and the template body uploaded and they work. But i can't manage to find when it has already a stack with the same name.\r\n\r\nThe function that is being test is this one:\r\n\r\n``` Python\r\ndef check_stack_exists(stack_name):\r\n    cf = get_client()\r\n    list_stack = cf.list_stacks()['StackSummaries']\r\n    for stack in list_stack:\r\n        if stack['StackStatus'] == 'DELETE_COMPLETE':\r\n            continue\r\n        if stack['StackName'] == stack_name:\r\n            return True\r\n    return False\r\n```\r\n\r\nCan someone help me with this?\r\nI'm using pytest and boto3\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3211", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3211/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3211/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3211/events", "html_url": "https://github.com/spulec/moto/issues/3211", "id": 671656133, "node_id": "MDU6SXNzdWU2NzE2NTYxMzM=", "number": 3211, "title": "Enhanced Kinesis Cloudformation Support: update and delete stacks, GetAtt.", "user": {"login": "jweite", "id": 8495212, "node_id": "MDQ6VXNlcjg0OTUyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8495212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jweite", "html_url": "https://github.com/jweite", "followers_url": "https://api.github.com/users/jweite/followers", "following_url": "https://api.github.com/users/jweite/following{/other_user}", "gists_url": "https://api.github.com/users/jweite/gists{/gist_id}", "starred_url": "https://api.github.com/users/jweite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jweite/subscriptions", "organizations_url": "https://api.github.com/users/jweite/orgs", "repos_url": "https://api.github.com/users/jweite/repos", "events_url": "https://api.github.com/users/jweite/events{/privacy}", "received_events_url": "https://api.github.com/users/jweite/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-02T17:26:48Z", "updated_at": "2020-08-03T15:26:16Z", "closed_at": "2020-08-03T15:26:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Can't pass these tests:\r\n\r\n```\r\nimport boto3\r\nimport sure  # noqa\r\n\r\nfrom moto import mock_kinesis, mock_cloudformation\r\n\r\n\r\n@mock_cloudformation\r\ndef test_kinesis_cloudformation_create_stream():\r\n    cf_conn = boto3.client(\"cloudformation\", region_name=\"us-east-1\")\r\n\r\n    stack_name = \"MyStack\"\r\n\r\n    template = '{\"Resources\":{\"MyStream\":{\"Type\":\"AWS::Kinesis::Stream\"}}}'\r\n\r\n    cf_conn.create_stack(StackName=stack_name, TemplateBody=template)\r\n\r\n    provisioned_resource = cf_conn.list_stack_resources(StackName=stack_name)[\r\n        \"StackResourceSummaries\"\r\n    ][0]\r\n    provisioned_resource[\"LogicalResourceId\"].should.equal(\"MyStream\")\r\n    len(provisioned_resource[\"PhysicalResourceId\"]).should.be.greater_than(0)\r\n\r\n\r\n@mock_cloudformation\r\n@mock_kinesis\r\ndef test_kinesis_cloudformation_get_attr():\r\n    cf_conn = boto3.client(\"cloudformation\", region_name=\"us-east-1\")\r\n\r\n    stack_name = \"MyStack\"\r\n\r\n    template = \"\"\"\r\nResources:\r\n  TheStream:\r\n    Type: AWS::Kinesis::Stream\r\nOutputs:\r\n  StreamName:\r\n    Value: !Ref TheStream\r\n  StreamArn:\r\n    Value: !GetAtt TheStream.Arn\r\n\"\"\".strip()\r\n\r\n    cf_conn.create_stack(StackName=stack_name, TemplateBody=template)\r\n    stack_description = cf_conn.describe_stacks(StackName=stack_name)[\"Stacks\"][0]\r\n    output_stream_name = [\r\n        output[\"OutputValue\"]\r\n        for output in stack_description[\"Outputs\"]\r\n        if output[\"OutputKey\"] == \"StreamName\"\r\n    ][0]\r\n    output_stream_arn = [\r\n        output[\"OutputValue\"]\r\n        for output in stack_description[\"Outputs\"]\r\n        if output[\"OutputKey\"] == \"StreamArn\"\r\n    ][0]\r\n\r\n    kinesis_conn = boto3.client(\"kinesis\", region_name=\"us-east-1\")\r\n    stream_description = kinesis_conn.describe_stream(StreamName=output_stream_name)[\r\n        \"StreamDescription\"\r\n    ]\r\n    output_stream_arn.should.equal(stream_description[\"StreamARN\"])\r\n\r\n\r\n@mock_cloudformation\r\n@mock_kinesis\r\ndef test_kinesis_cloudformation_update():\r\n    cf_conn = boto3.client(\"cloudformation\", region_name=\"us-east-1\")\r\n\r\n    stack_name = \"MyStack\"\r\n\r\n    template = \"\"\"\r\nResources:\r\n  TheStream:\r\n    Type: AWS::Kinesis::Stream\r\n    Properties:\r\n      Name: MyStream\r\n      ShardCount: 4\r\n\"\"\".strip()\r\n\r\n    cf_conn.create_stack(StackName=stack_name, TemplateBody=template)\r\n    stack_description = cf_conn.describe_stacks(StackName=stack_name)[\"Stacks\"][0]\r\n    stack_description[\"StackName\"].should.equal(stack_name)\r\n\r\n    kinesis_conn = boto3.client(\"kinesis\", region_name=\"us-east-1\")\r\n    stream_description = kinesis_conn.describe_stream(StreamName=\"MyStream\")[\r\n        \"StreamDescription\"\r\n    ]\r\n    shards_provisioned = len(\r\n        [\r\n            shard\r\n            for shard in stream_description[\"Shards\"]\r\n            if \"EndingSequenceNumber\" not in shard[\"SequenceNumberRange\"]\r\n        ]\r\n    )\r\n    shards_provisioned.should.equal(4)\r\n\r\n    template = \"\"\"\r\n    Resources:\r\n      TheStream:\r\n        Type: AWS::Kinesis::Stream\r\n        Properties:\r\n          ShardCount: 6\r\n    \"\"\".strip()\r\n    cf_conn.update_stack(StackName=stack_name, TemplateBody=template)\r\n\r\n    stream_description = kinesis_conn.describe_stream(StreamName=\"MyStream\")[\r\n        \"StreamDescription\"\r\n    ]\r\n    shards_provisioned = len(\r\n        [\r\n            shard\r\n            for shard in stream_description[\"Shards\"]\r\n            if \"EndingSequenceNumber\" not in shard[\"SequenceNumberRange\"]\r\n        ]\r\n    )\r\n    shards_provisioned.should.equal(6)\r\n\r\n\r\n@mock_cloudformation\r\n@mock_kinesis\r\ndef test_kinesis_cloudformation_delete():\r\n    cf_conn = boto3.client(\"cloudformation\", region_name=\"us-east-1\")\r\n\r\n    stack_name = \"MyStack\"\r\n\r\n    template = \"\"\"\r\nResources:\r\n  TheStream:\r\n    Type: AWS::Kinesis::Stream\r\n    Properties:\r\n      Name: MyStream\r\n\"\"\".strip()\r\n\r\n    cf_conn.create_stack(StackName=stack_name, TemplateBody=template)\r\n    stack_description = cf_conn.describe_stacks(StackName=stack_name)[\"Stacks\"][0]\r\n    stack_description[\"StackName\"].should.equal(stack_name)\r\n\r\n    kinesis_conn = boto3.client(\"kinesis\", region_name=\"us-east-1\")\r\n    stream_description = kinesis_conn.describe_stream(StreamName=\"MyStream\")[\r\n        \"StreamDescription\"\r\n    ]\r\n    stream_description[\"StreamName\"].should.equal(\"MyStream\")\r\n\r\n    cf_conn.delete_stack(StackName=stack_name)\r\n    streams = kinesis_conn.list_streams()[\"StreamNames\"]\r\n    len(streams).should.equal(0)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3187", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3187/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3187/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3187/events", "html_url": "https://github.com/spulec/moto/issues/3187", "id": 666381309, "node_id": "MDU6SXNzdWU2NjYzODEzMDk=", "number": 3187, "title": "Implement S3 CloudFormation Update Support", "user": {"login": "jweite", "id": 8495212, "node_id": "MDQ6VXNlcjg0OTUyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8495212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jweite", "html_url": "https://github.com/jweite", "followers_url": "https://api.github.com/users/jweite/followers", "following_url": "https://api.github.com/users/jweite/following{/other_user}", "gists_url": "https://api.github.com/users/jweite/gists{/gist_id}", "starred_url": "https://api.github.com/users/jweite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jweite/subscriptions", "organizations_url": "https://api.github.com/users/jweite/orgs", "repos_url": "https://api.github.com/users/jweite/repos", "events_url": "https://api.github.com/users/jweite/events{/privacy}", "received_events_url": "https://api.github.com/users/jweite/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-27T15:25:11Z", "updated_at": "2020-08-02T09:53:24Z", "closed_at": "2020-08-02T09:53:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "On CloudFormation update_stack operation with a stack defining an S3 bucket:\r\n\r\nAttributeError: type object 'FakeBucket' has no attribute 'update_from_cloudformation_json'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3178", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3178/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3178/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3178/events", "html_url": "https://github.com/spulec/moto/issues/3178", "id": 665602576, "node_id": "MDU6SXNzdWU2NjU2MDI1NzY=", "number": 3178, "title": "Implement UserId parameter for ModifySnapshotAttribute function.", "user": {"login": "aiell0", "id": 5505690, "node_id": "MDQ6VXNlcjU1MDU2OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5505690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aiell0", "html_url": "https://github.com/aiell0", "followers_url": "https://api.github.com/users/aiell0/followers", "following_url": "https://api.github.com/users/aiell0/following{/other_user}", "gists_url": "https://api.github.com/users/aiell0/gists{/gist_id}", "starred_url": "https://api.github.com/users/aiell0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aiell0/subscriptions", "organizations_url": "https://api.github.com/users/aiell0/orgs", "repos_url": "https://api.github.com/users/aiell0/repos", "events_url": "https://api.github.com/users/aiell0/events{/privacy}", "received_events_url": "https://api.github.com/users/aiell0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-25T15:16:53Z", "updated_at": "2020-08-01T18:50:32Z", "closed_at": "2020-08-01T18:50:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Issue Description\r\nThe boto3 function `ec2modify_snapshot_attribute()` was not implemented completely and has the potential to cause loss of code coverage in test suites where it is used.\r\n\r\n# Code\r\n```\r\nfrom moto import mock_ec2\r\nimport boto3\r\n\r\n@mock_ec2\r\ndef snapshot_modify_attribute():\r\n    ec2 = boto3.resource(\"ec2\", region_name=\"us-east-1\")\r\n    snapshot = ec2.Snapshot(\"snap-b230e53a\")\r\n    snapshot.modify_attribute(\r\n        Attribute=\"createVolumePermission\",\r\n        OperationType=\"add\",\r\n        UserIds=[\"123456789123\"]\r\n    )\r\n\r\nsnapshot_modify_attribute()\r\n```\r\n\r\n## Expected Result\r\n```\r\n{\r\n    'ResponseMetadata': {\r\n        '...': '...',\r\n    },\r\n}\r\n```\r\n\r\n## Actual Result\r\n`moto.ec2.exceptions.MotoNotImplementedError: The UserId parameter for ModifySnapshotAttribute has not been implemented in Moto yet. Feel free to open an issue at https://github.com/spulec/moto/issues`\r\n\r\nDon't mind if I do!\r\n\r\n## System Information\r\n* boto3-1.14.28\r\n* botocore-1.17.28\r\n* moto-1.3.14 installed using pipenv and using python mocks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3176", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3176/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3176/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3176/events", "html_url": "https://github.com/spulec/moto/issues/3176", "id": 665595100, "node_id": "MDU6SXNzdWU2NjU1OTUxMDA=", "number": 3176, "title": "Implement ec2.register_image()", "user": {"login": "aiell0", "id": 5505690, "node_id": "MDQ6VXNlcjU1MDU2OTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5505690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aiell0", "html_url": "https://github.com/aiell0", "followers_url": "https://api.github.com/users/aiell0/followers", "following_url": "https://api.github.com/users/aiell0/following{/other_user}", "gists_url": "https://api.github.com/users/aiell0/gists{/gist_id}", "starred_url": "https://api.github.com/users/aiell0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aiell0/subscriptions", "organizations_url": "https://api.github.com/users/aiell0/orgs", "repos_url": "https://api.github.com/users/aiell0/repos", "events_url": "https://api.github.com/users/aiell0/events{/privacy}", "received_events_url": "https://api.github.com/users/aiell0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-25T14:31:54Z", "updated_at": "2020-07-26T14:59:51Z", "closed_at": "2020-07-26T14:59:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Issue Description\r\nThe boto3 function `ec2.register_image()` was not implemented and has the potential to cause loss of code coverage in test suites where it is used.\r\n\r\n# Code\r\n```\r\nfrom moto import mock_ec2\r\nimport boto3\r\n\r\n@mock_ec2\r\ndef register_new_image():\r\n    ec2 = boto3.resource(\"ec2\", region_name=\"us-east-1\")\r\n    response = ec2.register_image(\r\n        Name=\"sometest\",\r\n        Architecture='x64',\r\n        RootDaeviceName='/dev/sda1',\r\n        VirtualizationType='hvm'\r\n    )\r\n    print(response.id)\r\n\r\nregister_new_image()\r\n```\r\n\r\n## Expected Result\r\n`ami-12345678`\r\n\r\n## Actual Result\r\n`NotImplementedError: AMIs.register_image is not yet implemented`\r\n\r\n## System Information\r\n* boto3-1.14.28\r\n* botocore-1.17.28\r\n* moto-1.3.14 installed using pipenv and using python mocks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3172", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3172/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3172/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3172/events", "html_url": "https://github.com/spulec/moto/issues/3172", "id": 665068023, "node_id": "MDU6SXNzdWU2NjUwNjgwMjM=", "number": 3172, "title": "Support --filters option in secretsmanager:ListSecrets", "user": {"login": "chriskilding", "id": 590569, "node_id": "MDQ6VXNlcjU5MDU2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/590569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriskilding", "html_url": "https://github.com/chriskilding", "followers_url": "https://api.github.com/users/chriskilding/followers", "following_url": "https://api.github.com/users/chriskilding/following{/other_user}", "gists_url": "https://api.github.com/users/chriskilding/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriskilding/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriskilding/subscriptions", "organizations_url": "https://api.github.com/users/chriskilding/orgs", "repos_url": "https://api.github.com/users/chriskilding/repos", "events_url": "https://api.github.com/users/chriskilding/events{/privacy}", "received_events_url": "https://api.github.com/users/chriskilding/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-24T10:15:05Z", "updated_at": "2020-07-31T15:32:16Z", "closed_at": "2020-07-31T14:46:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We should support the new server-side `--filters` option in `secretsmanager:ListSecrets` calls.\r\n\r\nDocumentation here: <https://docs.aws.amazon.com/cli/latest/reference/secretsmanager/list-secrets.html#options>\r\n\r\nOne implementation consideration is that AWS sometimes reuse model structures between their APIs. There is a good chance this filter structure, a List of (String key, List\\<String\\> values), has been used elsewhere. Has this been implemented before in Moto?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3167", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3167/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3167/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3167/events", "html_url": "https://github.com/spulec/moto/issues/3167", "id": 664070029, "node_id": "MDU6SXNzdWU2NjQwNzAwMjk=", "number": 3167, "title": "Creating ECS TaskSet via CF has not been implemented", "user": {"login": "pinkjosh", "id": 28514605, "node_id": "MDQ6VXNlcjI4NTE0NjA1", "avatar_url": "https://avatars1.githubusercontent.com/u/28514605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pinkjosh", "html_url": "https://github.com/pinkjosh", "followers_url": "https://api.github.com/users/pinkjosh/followers", "following_url": "https://api.github.com/users/pinkjosh/following{/other_user}", "gists_url": "https://api.github.com/users/pinkjosh/gists{/gist_id}", "starred_url": "https://api.github.com/users/pinkjosh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pinkjosh/subscriptions", "organizations_url": "https://api.github.com/users/pinkjosh/orgs", "repos_url": "https://api.github.com/users/pinkjosh/repos", "events_url": "https://api.github.com/users/pinkjosh/events{/privacy}", "received_events_url": "https://api.github.com/users/pinkjosh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-22T21:46:47Z", "updated_at": "2020-07-23T14:44:54Z", "closed_at": "2020-07-23T14:44:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to run a cloudformation template that provisions ECS Service, TaskDefinition, and TaskSet has resulted in following errors:\r\n\r\n    1. NotImplementedError: The create_task_set action has not been implemented\r\n\r\nThe Service and TaskDefinition has been created successfully though. \r\n\r\nThe error makes sense because I am using moto version 1.3.14 that was released in Nov'2019.  It looks like create_task_set feature has been added as recent as two days ago. \r\n\r\nIs there a way I could utilize this new feature or when is this going to be released?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3160", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3160/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3160/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3160/events", "html_url": "https://github.com/spulec/moto/issues/3160", "id": 663130445, "node_id": "MDU6SXNzdWU2NjMxMzA0NDU=", "number": 3160, "title": "NotImplementedError: The list_tags_for_resource action has not been implemented", "user": {"login": "MarshallMoberg", "id": 31284344, "node_id": "MDQ6VXNlcjMxMjg0MzQ0", "avatar_url": "https://avatars0.githubusercontent.com/u/31284344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarshallMoberg", "html_url": "https://github.com/MarshallMoberg", "followers_url": "https://api.github.com/users/MarshallMoberg/followers", "following_url": "https://api.github.com/users/MarshallMoberg/following{/other_user}", "gists_url": "https://api.github.com/users/MarshallMoberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarshallMoberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarshallMoberg/subscriptions", "organizations_url": "https://api.github.com/users/MarshallMoberg/orgs", "repos_url": "https://api.github.com/users/MarshallMoberg/repos", "events_url": "https://api.github.com/users/MarshallMoberg/events{/privacy}", "received_events_url": "https://api.github.com/users/MarshallMoberg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/spulec/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-21T16:01:17Z", "updated_at": "2020-07-21T19:54:22Z", "closed_at": "2020-07-21T19:54:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Traceback\r\n```\r\ndocker build -t cloud-express-api .\r\nSending build context to Docker daemon  1.268MB\r\nStep 1/8 : FROM python:alpine\r\n ---> 6c32e2504283\r\nStep 2/8 : WORKDIR /app\r\n ---> Using cache\r\n ---> 55488691e864\r\nStep 3/8 : RUN apk --update add --virtual build-dependencies libffi-dev openssl-dev python-dev py-pip build-base && pip install --upgrade pip && pip install         boto3         botocore         gitpython         moto         pylint         pytest         pytest-cov\r\n ---> Using cache\r\n ---> 4e7f1ac051e4\r\nStep 4/8 : ADD src/requirements.txt ./\r\n ---> Using cache\r\n ---> 8c04ccada292\r\nStep 5/8 : RUN apk add --no-cache --virtual .build-deps gcc musl-dev libffi-dev openssl-dev python3-dev\r\n ---> Using cache\r\n ---> 1a6401e89f9a\r\nStep 6/8 : RUN pip install -r ./requirements.txt\r\n ---> Using cache\r\n ---> 04de243beca1\r\nStep 7/8 : EXPOSE 5000\r\n ---> Using cache\r\n ---> c34b21e4c35f\r\nStep 8/8 : CMD python local.py\r\n ---> Using cache\r\n ---> 7e748b01d9ab\r\nSuccessfully built 7e748b01d9ab\r\nSuccessfully tagged cloud-express-api:latest\r\nSECURITY WARNING: You are building a Docker image from Windows against a non-Windows Docker host. All files and directories added to build context will have '-rwxr-xr-x' permissions. It is recommended to double check and reset permissions for sensitive files and directories.\r\ndocker run -it --rm \\\r\n        -w /app \\\r\n        -v C:/git/cloud-express-api:/app  \\\r\n        -e AWS_DEFAULT_REGION=us-east-1 \\\r\n        -e AWS_ACCESS_KEY_ID=fake \\\r\n        -e AWS_SECRET_ACCESS_KEY=fake \\\r\n        cloud-express-api \\\r\n        python -m pytest -v -s \\\r\n        tests/unit/repos/test_aws.py\r\n=================================================== test session starts ===================================================platform linux -- Python 3.8.2, pytest-5.4.3, py-1.9.0, pluggy-0.13.1 -- /usr/local/bin/python\r\ncachedir: .pytest_cache\r\nrootdir: /app\r\nplugins: cov-2.10.0\r\ncollected 1 item\r\n\r\ntests/unit/repos/test_aws.py::test_update_acct_tags ERROR\r\n\r\n========================================================= ERRORS ==========================================================_________________________________________ ERROR at setup of test_update_acct_tags _________________________________________\r\n    @pytest.fixture\r\n    @mock_organizations\r\n    def setup():\r\n        from src.api.repos.aws import AcctTagRepo\r\n        repo = AcctTagRepo()\r\n        org = repo.org.create_organization(FeatureSet='ALL')['Organization']\r\n        acct_id = repo.org.create_account(AccountName='mockaccount', Email='mockemail@mmm.com')[\r\n            \"CreateAccountStatus\"\r\n        ][\"AccountId\"]\r\n>       pretest_tags = repo.get_tags(acct_id=acct_id)\r\n\r\ntests/unit/repos/test_aws.py:16:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _src/api/repos/aws.py:21: in get_tags\r\n    res = self.org.list_tags_for_resource(ResourceId=acct_id)\r\n/usr/local/lib/python3.8/site-packages/botocore/client.py:316: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n/usr/local/lib/python3.8/site-packages/botocore/client.py:621: in _make_api_call\r\n    http, parsed_response = self._make_request(\r\n/usr/local/lib/python3.8/site-packages/botocore/client.py:641: in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n/usr/local/lib/python3.8/site-packages/botocore/endpoint.py:102: in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n/usr/local/lib/python3.8/site-packages/botocore/endpoint.py:136: in _send_request\r\n    while self._needs_retry(attempts, operation_model, request_dict,\r\n/usr/local/lib/python3.8/site-packages/botocore/endpoint.py:253: in _needs_retry\r\n    responses = self._event_emitter.emit(\r\n/usr/local/lib/python3.8/site-packages/botocore/hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n/usr/local/lib/python3.8/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n/usr/local/lib/python3.8/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n/usr/local/lib/python3.8/site-packages/botocore/retryhandler.py:183: in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n/usr/local/lib/python3.8/site-packages/botocore/retryhandler.py:250: in __call__\r\n    should_retry = self._should_retry(attempt_number, response,\r\n/usr/local/lib/python3.8/site-packages/botocore/retryhandler.py:269: in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n/usr/local/lib/python3.8/site-packages/botocore/retryhandler.py:316: in __call__\r\n    checker_response = checker(attempt_number, response,\r\n/usr/local/lib/python3.8/site-packages/botocore/retryhandler.py:222: in __call__\r\n    return self._check_caught_exception(\r\n/usr/local/lib/python3.8/site-packages/botocore/retryhandler.py:359: in _check_caught_exception\r\n    raise caught_exception\r\n/usr/local/lib/python3.8/site-packages/botocore/endpoint.py:197: in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n/usr/local/lib/python3.8/site-packages/botocore/hooks.py:356: in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n/usr/local/lib/python3.8/site-packages/botocore/hooks.py:228: in emit\r\n    return self._emit(event_name, kwargs)\r\n/usr/local/lib/python3.8/site-packages/botocore/hooks.py:211: in _emit\r\n    response = handler(**kwargs)\r\n/usr/local/lib/python3.8/site-packages/moto/core/models.py:271: in __call__\r\n    status, headers, body = response_callback(\r\n/usr/local/lib/python3.8/site-packages/moto/core/responses.py:197: in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n/usr/local/lib/python3.8/site-packages/moto/core/responses.py:295: in _dispatch\r\n    return self.call_action()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nself = <moto.organizations.responses.OrganizationsResponse object at 0x7f65f0500790>\r\n\r\n    def call_action(self):\r\n        headers = self.response_headers\r\n\r\n        try:\r\n            self._authenticate_and_authorize_normal_action()\r\n        except HTTPException as http_error:\r\n            response = http_error.description, dict(status=http_error.code)\r\n            return self._send_response(headers, response)\r\n\r\n        action = camelcase_to_underscores(self._get_action())\r\n        method_names = method_names_from_class(self.__class__)\r\n        if action in method_names:\r\n            method = getattr(self, action)\r\n            try:\r\n                response = method()\r\n            except HTTPException as http_error:\r\n                response = http_error.description, dict(status=http_error.code)\r\n\r\n            if isinstance(response, six.string_types):\r\n                return 200, headers, response\r\n            else:\r\n                return self._send_response(headers, response)\r\n\r\n        if not action:\r\n            return 404, headers, \"\"\r\n\r\n>       raise NotImplementedError(\r\n            \"The {0} action has not been implemented\".format(action)\r\n        )\r\nE       NotImplementedError: The list_tags_for_resource action has not been implemented\r\n\r\n/usr/local/lib/python3.8/site-packages/moto/core/responses.py:392: NotImplementedError\r\n```\r\n\r\n\r\n### src/api/repos/aws.py (main file)\r\n```\r\nimport boto3\r\n\r\nclass AcctTagRepo():\r\n    def __init__(self):\r\n        self.org = boto3.client('organizations')\r\n\r\n    def get_tags(self, acct_id: str = '', acct_name: str = ''):\r\n        if acct_id == '':\r\n            res = self.org.list_accounts()\r\n            while acct_id == '':\r\n                for acct in res['Accounts']:\r\n                    if acct['Name'] == acct_name:\r\n                        acct_id = acct['Id']\r\n                if 'NextToken' in res:\r\n                    res = self.org.list_accounts(NextToken=res['NextToken'])\r\n                else:\r\n                    return [False, f'Could not find {acct_name} in the AWS Org']\r\n        res = self.org.list_tags_for_resource(ResourceId=acct_id)\r\n        aws_tags = res['Tags']\r\n        while 'NextToken' in res:\r\n            res = self.org.list_tags_for_resource(ResourceId=acct_id, NextToken=res['NextToken'])\r\n            aws_tags.extend(res['Tags'])\r\n        current_tags = {}\r\n        for tag in aws_tags:\r\n            current_tags[tag['Key']] = tag['Value']\r\n        return current_tags\r\n```\r\n\r\n### tests/unit/repos/test_aws.py (Test File)\r\n```\r\nimport pytest\r\nimport unittest\r\nimport boto3\r\nfrom moto import mock_organizations\r\n\r\n@pytest.fixture\r\n@mock_organizations\r\ndef setup():\r\n    from src.api.repos.aws import AcctTagRepo\r\n    repo = AcctTagRepo()\r\n    org = repo.org.create_organization(FeatureSet='ALL')['Organization']\r\n    acct_id = repo.org.create_account(AccountName='mockaccount', Email='mockemail@mmm.com')[\r\n        \"CreateAccountStatus\"\r\n    ][\"AccountId\"]\r\n    pretest_tags = repo.get_tags(acct_id=acct_id)\r\n    return repo, acct_id, pretest_tags\r\n```\r\n### Makefile command used (make test_repo_aws)\r\n```\r\ntest_repo_%: build\r\n\tdocker run -it --rm \\\r\n\t-w /app \\\r\n\t-v ${CURDIR}:/app  \\\r\n\t-e AWS_DEFAULT_REGION=us-east-1 \\\r\n\t-e AWS_ACCESS_KEY_ID=fake \\\r\n\t-e AWS_SECRET_ACCESS_KEY=fake \\\r\n\tcloud-express-api \\\r\n\tpython -m pytest -v -s \\\r\n\ttests/unit/repos/test_$*.py\r\n```\r\n### Dockerfile\r\n```\r\nFROM python:alpine\r\nWORKDIR /app\r\nRUN apk --update add --virtual build-dependencies libffi-dev openssl-dev python-dev py-pip build-base \\\r\n&& pip install --upgrade pip \\\r\n&& pip install \\\r\n        boto3 \\\r\n        botocore \\\r\n        gitpython \\\r\n        moto \\\r\n        pylint \\\r\n        pytest \\\r\n        pytest-cov\r\nADD src/requirements.txt ./\r\nRUN apk add --no-cache --virtual .build-deps gcc musl-dev libffi-dev openssl-dev python3-dev\r\nRUN pip install -r ./requirements.txt\r\nEXPOSE 5000\r\nCMD python local.py\r\n```\r\n\r\n## Versions\r\nPython 3.8.2\r\nlatest versions of boto and moto\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3154", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3154/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3154/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3154/events", "html_url": "https://github.com/spulec/moto/issues/3154", "id": 661310605, "node_id": "MDU6SXNzdWU2NjEzMTA2MDU=", "number": 3154, "title": "VPN Gateway filters not implemented", "user": {"login": "alanbaldwin", "id": 165938, "node_id": "MDQ6VXNlcjE2NTkzOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/165938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanbaldwin", "html_url": "https://github.com/alanbaldwin", "followers_url": "https://api.github.com/users/alanbaldwin/followers", "following_url": "https://api.github.com/users/alanbaldwin/following{/other_user}", "gists_url": "https://api.github.com/users/alanbaldwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanbaldwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanbaldwin/subscriptions", "organizations_url": "https://api.github.com/users/alanbaldwin/orgs", "repos_url": "https://api.github.com/users/alanbaldwin/repos", "events_url": "https://api.github.com/users/alanbaldwin/events{/privacy}", "received_events_url": "https://api.github.com/users/alanbaldwin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-20T03:19:06Z", "updated_at": "2020-07-21T15:08:50Z", "closed_at": "2020-07-21T15:08:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Filters for VPN Gateway aren't implemented, specifically attachment.vpc-id. This can be reproduced via this code:\r\n\r\n```python\r\n    ec2 = boto3.client(\"ec2\", region_name=\"us-east-1\")\r\n\r\n    vpc = ec2.create_vpc(CidrBlock=\"10.0.0.0/16\")\r\n    vpc_id = vpc[\"Vpc\"][\"VpcId\"]\r\n    gateway = ec2.create_vpn_gateway(AvailabilityZone=\"us-east-1a\", Type=\"ipsec.1\")\r\n    gateway_id = gateway[\"VpnGateway\"][\"VpnGatewayId\"]\r\n\r\n    ec2.attach_vpn_gateway(VpcId=vpc_id, VpnGatewayId=gateway_id)\r\n\r\n    gateways = ec2.describe_vpn_gateways(\r\n        Filters=[{\"Name\": \"attachment.vpc-id\", \"Values\": [vpc_id]}]\r\n    )\r\n```\r\n\r\nYou would expect gateways to return a list of length 1, with the VPN gateway attached. Instead you receive:\r\n```\r\nmoto.ec2.exceptions.FilterNotImplementedError: The filter 'attachment.vpc-id' for DescribeVpnGateways has not been implemented in Moto yet. Feel free to open an issue at https://github.com/spulec/moto/issues\r\n```\r\n\r\nThis was tested with the current mainline branch, and I'll be adding a PR for this, `attachment.state`, `vpn-gateway-id` and `type` filters.  I found this originally while trying to attach a VPN gateway to a VPC via terraform in localstack - terraform searches for VPN gateways via `attachment.vpc-id`. \r\n\r\nThere are other unimplemented filters - `amazon-side-asn`, `availability-zone`, but it doesn't appear that moto is storing those values anywhere for a VPN gateway.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3151", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3151/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3151/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3151/events", "html_url": "https://github.com/spulec/moto/issues/3151", "id": 661025988, "node_id": "MDU6SXNzdWU2NjEwMjU5ODg=", "number": 3151, "title": "Implementation: Task Sets", "user": {"login": "aaronhill", "id": 1079457, "node_id": "MDQ6VXNlcjEwNzk0NTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1079457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaronhill", "html_url": "https://github.com/aaronhill", "followers_url": "https://api.github.com/users/aaronhill/followers", "following_url": "https://api.github.com/users/aaronhill/following{/other_user}", "gists_url": "https://api.github.com/users/aaronhill/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaronhill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaronhill/subscriptions", "organizations_url": "https://api.github.com/users/aaronhill/orgs", "repos_url": "https://api.github.com/users/aaronhill/repos", "events_url": "https://api.github.com/users/aaronhill/events{/privacy}", "received_events_url": "https://api.github.com/users/aaronhill/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-19T19:39:20Z", "updated_at": "2020-07-23T06:50:10Z", "closed_at": "2020-07-21T06:17:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Add support for ECS `*_task_set` endpoints for support of `CODE_DEPLOY` and `EXTERNAL` ECS service `deploymentController`.\r\n\r\nEndpoints include:\r\n * create_task_set\r\n * describe_task_sets\r\n * update_task_set\r\n * delete_task_set\r\n * update_service_primary_task_set\r\n\r\nThis implementation requires fixing a bug with moto ECS `create_service` which incorrectly assumes `taskDefinition` is a required attribute to support task set `taskDefinition` properly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3150", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3150/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3150/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3150/events", "html_url": "https://github.com/spulec/moto/issues/3150", "id": 660640887, "node_id": "MDU6SXNzdWU2NjA2NDA4ODc=", "number": 3150, "title": "AttributeError exception in _invoke_lambda", "user": {"login": "tomers", "id": 83443, "node_id": "MDQ6VXNlcjgzNDQz", "avatar_url": "https://avatars0.githubusercontent.com/u/83443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomers", "html_url": "https://github.com/tomers", "followers_url": "https://api.github.com/users/tomers/followers", "following_url": "https://api.github.com/users/tomers/following{/other_user}", "gists_url": "https://api.github.com/users/tomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomers/subscriptions", "organizations_url": "https://api.github.com/users/tomers/orgs", "repos_url": "https://api.github.com/users/tomers/repos", "events_url": "https://api.github.com/users/tomers/events{/privacy}", "received_events_url": "https://api.github.com/users/tomers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-07-19T06:39:52Z", "updated_at": "2020-07-26T20:32:12Z", "closed_at": "2020-07-26T20:32:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Moto version: https://github.com/spulec/moto/commit/80b64f9b3ff57515db1fc07329bf8e5f519597aa (but from looking at the code the issue exists even on today's HEAD https://github.com/spulec/moto/commit/09b764148cea354c790443a318dabc976a2b59df)\r\n\r\nStack track of the issue:\r\n```\r\nFile \"/usr/lib/python3.6/site-packages/flask/app.py\", line 1936, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/usr/lib/python3.6/site-packages/moto/core/utils.py\", line 146, in __call__\r\n    result = self.callback(request, request.url, {})\r\n  File \"/usr/lib/python3.6/site-packages/moto/core/utils.py\", line 239, in _wrapper\r\n    response = f(*args, **kwargs)\r\n  File \"/usr/lib/python3.6/site-packages/moto/core/utils.py\", line 271, in _wrapper\r\n    response = f(*args, **kwargs)\r\n  File \"/usr/lib/python3.6/site-packages/moto/awslambda/responses.py\", line 95, in invoke\r\n    return self._invoke(request, full_url)\r\n  File \"/usr/lib/python3.6/site-packages/moto/awslambda/responses.py\", line 182, in _invoke\r\n    function_name, qualifier, self.body, self.headers, response_headers\r\n  File \"/usr/lib/python3.6/site-packages/moto/awslambda/models.py\", line 1074, in invoke\r\n    payload = fn.invoke(body, headers, response_headers)\r\n  File \"/usr/lib/python3.6/site-packages/moto/awslambda/models.py\", line 479, in invoke\r\n    res, errored, logs = self._invoke_lambda(code=self.code, event=body)\r\n  File \"/usr/lib/python3.6/site-packages/moto/awslambda/models.py\", line 469, in _invoke_lambda\r\n    [line for line in self.convert(output).splitlines()[:-1]]\r\nAttributeError: 'NoneType' object has no attribute 'splitlines'\r\n```\r\n\r\nCode (awslambda/models.py):\r\n```\r\n    def _invoke_lambda(self, code, event=None, context=None):\r\n        ...\r\n        output = None\r\n\r\n        try:\r\n            ...\r\n            with _DockerDataVolumeContext(self) as data_vol:\r\n                try:\r\n                    ...\r\n                    container = self.docker_client.containers.run(...)  # <-- something raises, probably here\r\n                finally:\r\n                    if container:  # <-- container is probably None here\r\n                        try:\r\n                            exit_code = container.wait(timeout=300)\r\n                        except requests.exceptions.ReadTimeout:\r\n                            exit_code = -1\r\n                            container.stop()\r\n                            container.kill()\r\n                        else:\r\n                            if docker_3:\r\n                                exit_code = exit_code[\"StatusCode\"]\r\n\r\n                        output = container.logs(stdout=False, stderr=True)\r\n                        output += container.logs(stdout=True, stderr=False)\r\n                        container.remove()\r\n\r\n            output = output.decode(\"utf-8\")  # <-- this probably raises an exception since output is None\r\n            ...\r\n        except BaseException as e:\r\n            traceback.print_exc()\r\n            logs = os.linesep.join(\r\n                [line for line in self.convert(output).splitlines()[:-1]]  # <-- now output is None and throws exception\r\n            )\r\n            ...\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3144", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3144/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3144/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3144/events", "html_url": "https://github.com/spulec/moto/issues/3144", "id": 658499527, "node_id": "MDU6SXNzdWU2NTg0OTk1Mjc=", "number": 3144, "title": "Function name should not be changed when creating \"AWS::Lambda::Function\" resource type", "user": {"login": "JordanReiter", "id": 228942, "node_id": "MDQ6VXNlcjIyODk0Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/228942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JordanReiter", "html_url": "https://github.com/JordanReiter", "followers_url": "https://api.github.com/users/JordanReiter/followers", "following_url": "https://api.github.com/users/JordanReiter/following{/other_user}", "gists_url": "https://api.github.com/users/JordanReiter/gists{/gist_id}", "starred_url": "https://api.github.com/users/JordanReiter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JordanReiter/subscriptions", "organizations_url": "https://api.github.com/users/JordanReiter/orgs", "repos_url": "https://api.github.com/users/JordanReiter/repos", "events_url": "https://api.github.com/users/JordanReiter/events{/privacy}", "received_events_url": "https://api.github.com/users/JordanReiter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-16T19:34:30Z", "updated_at": "2020-07-17T06:25:39Z", "closed_at": "2020-07-17T06:25:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**how to reproduce the issue**\r\n\r\n```\r\nimport json\r\nimport boto3\r\nfrom moto import mock_iam, mock_cloudformation, mock_lambda\r\n\r\n\r\n@mock_iam\r\n@mock_cloudformation\r\n@mock_lambda\r\ndef test_create_lambda_stack():\r\n    assume_role_policy_document = {\r\n        \"Version\": \"2012-10-17\",\r\n        \"Statement\": [\r\n            {\r\n                \"Effect\": \"Allow\",\r\n                \"Principal\": {\r\n                    \"Service\": ['lambda.amazonaws.com']\r\n                },\r\n                \"Action\": \"sts:AssumeRole\"\r\n            }\r\n        ]\r\n    }\r\n    iam = boto3.client('iam')\r\n    create_role_resp = iam.create_role(\r\n        RoleName='RoleName',\r\n        AssumeRolePolicyDocument=json.dumps(assume_role_policy_document)\r\n    )\r\n    role_arn = create_role_resp['Role']['Arn']\r\n    template = {\r\n        \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n        \"Resources\": {\r\n            \"CustomNameLambdaFunction\": {\r\n                \"Type\": \"AWS::Lambda::Function\",\r\n                    \"Properties\": {\r\n                        \"Code\": {\r\n                            \"ZipFile\": (\r\n                                \"def hello(event, context):\\n\"\r\n                                \"    return { \\n\"\r\n                                \"        'message' : 'Hello'\\n\"\r\n                                \"    }\\n\"\r\n                            )\r\n                        },\r\n                        \"FunctionName\": 'CustomName',\r\n                        \"Handler\": 'handler.hello',\r\n                        \"Role\": role_arn,\r\n                        \"Runtime\": \"python3.6\",\r\n                        \"Timeout\": 30,\r\n                        \"Environment\": {\r\n                            \"Variables\": {}\r\n                        }\r\n                    }\r\n                }\r\n        },\r\n        \"Outputs\": {}\r\n    }\r\n    cf = boto3.client('cloudformation')\r\n    cf.create_stack(StackName='StackName', TemplateBody=json.dumps(template))\r\n    lmb = boto3.client('lambda')\r\n    func = lmb.list_functions()['Functions'][0]\r\n    assert func['FunctionName'] == 'CustomName', 'Function name was changed to ' + func['FunctionName']\r\n    print(\"Created function\", func['FunctionName'])\r\n\r\n\r\ntest_create_lambda_stack()\r\n``` \r\n** What I expected to happen **\r\nCloudFormation creates a function called `CustomName`\r\n\r\n** What actually happens **\r\nCloudFormation creates a function called ` StackName-CustomNameLambdaFunction-LDRA6MD8ZSE1` (last part is random string generated by `random_suffix` function).\r\n\r\nFix is straightforward: when the property `FunctionName` is provided, moto should have CloudFormation create the function using that name.\r\n\r\nThis is moto version **1.3.14**\r\n\r\nThe code to change is on `moto/cloudformation/parsing.py` under `NAME_TYPE_MAP`. You just need to add the line\r\n\r\n        \"AWS::Lambda::Function\": \"FunctionName\",\r\n\r\nto the map.\r\n\r\nThis matches up with the link immediately above NAME_TYPE_MAP, which states it is using https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html as a reference.\r\n\r\nAccording to that page, `AWS::Lambda::Function` is one of the supported resources for custom names, and the field in question is `FunctionName`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3143", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3143/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3143/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3143/events", "html_url": "https://github.com/spulec/moto/issues/3143", "id": 658436172, "node_id": "MDU6SXNzdWU2NTg0MzYxNzI=", "number": 3143, "title": "feat: organizations.tag_resource (1.3.14)", "user": {"login": "jbpratt", "id": 29494941, "node_id": "MDQ6VXNlcjI5NDk0OTQx", "avatar_url": "https://avatars0.githubusercontent.com/u/29494941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbpratt", "html_url": "https://github.com/jbpratt", "followers_url": "https://api.github.com/users/jbpratt/followers", "following_url": "https://api.github.com/users/jbpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jbpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbpratt/subscriptions", "organizations_url": "https://api.github.com/users/jbpratt/orgs", "repos_url": "https://api.github.com/users/jbpratt/repos", "events_url": "https://api.github.com/users/jbpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jbpratt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-16T18:13:40Z", "updated_at": "2020-07-18T07:50:24Z", "closed_at": "2020-07-17T18:35:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nName: moto\r\nVersion: 1.3.14\r\nSummary: A library that allows your python tests to easily mock out the boto library\r\nHome-page: https://github.com/spulec/moto\r\nAuthor: Steve Pulec\r\nAuthor-email: spulec@gmail.com\r\nLicense: Apache\r\nLocation: /..../lib/python3.8/site-packages\r\nRequires: cryptography, requests, boto, responses, PyYAML, Jinja2, cfn-lint, idna, boto3, aws-xray-sdk, python-jose, pytz, xmltodict, docker, werkzeug, botocore, jsondiff, python-dateutil, sshpubkeys, six, mock\r\nRequired-by:\r\n```\r\n\r\nMy test:\r\n```py\r\n@mock_organizations\r\ndef test_get_account_tags() -> None:\r\n    org = boto3.client(\"organizations\")\r\n    org.create_organization(FeatureSet=\"ALL\")\r\n    org.create_account(\r\n        Email=\"example@example.com\", AccountName=\"Test\", RoleName=\"SuperAdmin\"\r\n    )\r\n    acct_id = org.list_accounts()[\"Accounts\"][0][\"Id\"]\r\n    acct_tags = {\"Test\": \"example\"}\r\n    org.tag_resource(\r\n        ResourceId=acct_id,\r\n        Tags=[{\"Key\": str(k), \"Value\": str(v)} for k, v in acct_tags.items()],\r\n    )\r\n\r\n    got_acct_tags = get_account_tags(account_id=acct_id, client=org)\r\n    assert acct_tags == got_acct_tags\r\n```\r\n\r\nError:\r\n`E       NotImplementedError: The tag_resource action has not been implemented`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3141", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3141/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3141/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3141/events", "html_url": "https://github.com/spulec/moto/issues/3141", "id": 658278428, "node_id": "MDU6SXNzdWU2NTgyNzg0Mjg=", "number": 3141, "title": "Support Sagemaker EndpointConfigs, Endpoints, TrainingJobs", "user": {"login": "jweite", "id": 8495212, "node_id": "MDQ6VXNlcjg0OTUyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8495212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jweite", "html_url": "https://github.com/jweite", "followers_url": "https://api.github.com/users/jweite/followers", "following_url": "https://api.github.com/users/jweite/following{/other_user}", "gists_url": "https://api.github.com/users/jweite/gists{/gist_id}", "starred_url": "https://api.github.com/users/jweite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jweite/subscriptions", "organizations_url": "https://api.github.com/users/jweite/orgs", "repos_url": "https://api.github.com/users/jweite/repos", "events_url": "https://api.github.com/users/jweite/events{/privacy}", "received_events_url": "https://api.github.com/users/jweite/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-16T14:57:52Z", "updated_at": "2020-07-19T14:29:04Z", "closed_at": "2020-07-19T14:29:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Extended feature set", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3139", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3139/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3139/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3139/events", "html_url": "https://github.com/spulec/moto/issues/3139", "id": 658161599, "node_id": "MDU6SXNzdWU2NTgxNjE1OTk=", "number": 3139, "title": "ecs.update_service does not handle service_arns, just services names.", "user": {"login": "mkielar", "id": 2553638, "node_id": "MDQ6VXNlcjI1NTM2Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2553638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkielar", "html_url": "https://github.com/mkielar", "followers_url": "https://api.github.com/users/mkielar/followers", "following_url": "https://api.github.com/users/mkielar/following{/other_user}", "gists_url": "https://api.github.com/users/mkielar/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkielar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkielar/subscriptions", "organizations_url": "https://api.github.com/users/mkielar/orgs", "repos_url": "https://api.github.com/users/mkielar/repos", "events_url": "https://api.github.com/users/mkielar/events{/privacy}", "received_events_url": "https://api.github.com/users/mkielar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-16T12:39:58Z", "updated_at": "2020-07-26T20:31:13Z", "closed_at": "2020-07-26T20:31:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Actual:\r\nWhen running:\r\n```\r\necs_client.update_service(\r\n            cluster=cluster_arn,\r\n            service=service_arn,\r\n            desiredCount=0\r\n)\r\n```\r\nI'm getting `ServiceNotFoundException` raised, even though I'm using service and cluster ARNs returned by a call to `describe_services`, after creating the services with moto.\r\n\r\n## Expected:\r\nService/Cluster names and ARNs should both be supported.\r\n\r\n## Walkaround:\r\nI changed my application logic to make it testable with moto, and it worked, but I shouldn't have to do that, especially that both `boto3` and AWS API allow using Names/ARNs interchangeably.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3133", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3133/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3133/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3133/events", "html_url": "https://github.com/spulec/moto/issues/3133", "id": 657156143, "node_id": "MDU6SXNzdWU2NTcxNTYxNDM=", "number": 3133, "title": "Cognito Identity Provider : create_user_pool_client `GenerateSecret=True` doesn't work ", "user": {"login": "number09", "id": 12413803, "node_id": "MDQ6VXNlcjEyNDEzODAz", "avatar_url": "https://avatars3.githubusercontent.com/u/12413803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/number09", "html_url": "https://github.com/number09", "followers_url": "https://api.github.com/users/number09/followers", "following_url": "https://api.github.com/users/number09/following{/other_user}", "gists_url": "https://api.github.com/users/number09/gists{/gist_id}", "starred_url": "https://api.github.com/users/number09/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/number09/subscriptions", "organizations_url": "https://api.github.com/users/number09/orgs", "repos_url": "https://api.github.com/users/number09/repos", "events_url": "https://api.github.com/users/number09/events{/privacy}", "received_events_url": "https://api.github.com/users/number09/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-15T08:14:54Z", "updated_at": "2020-07-16T08:13:13Z", "closed_at": "2020-07-16T08:13:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Cognito Identity Provider `create_user_pool_client` should be return `ClientSecret` when given `GenerateSecret=True`  \r\nBut it's not working\r\n\r\n### Use Bote3\r\n```\r\nfrom pprint import pprint\r\nimport boto3\r\n\r\n\r\ndef handler(event, context):\r\n\r\n    client = boto3.client('cognito-idp')\r\n    pool = client.create_user_pool(PoolName='testpool')\r\n    id = pool['UserPool']['Id']\r\n\r\n    response = client.create_user_pool_client(UserPoolId=id, ClientName='testclient', GenerateSecret=True)\r\n    pprint(response)\r\n\r\n\r\nif __name__ == '__main__':\r\n    handler('', '')\r\n```\r\n```\r\n{'ResponseMetadata': {'HTTPHeaders': {'connection': 'keep-alive',\r\n                                      'content-length': '352',\r\n                                      'content-type': 'application/x-amz-json-1.1',\r\n                                      'date': 'Wed, 15 Jul 2020 06:10:55 GMT',\r\n                                      'x-amzn-requestid': '97868196-de78-415c-9ffc-f03297f0378c'},\r\n                      'HTTPStatusCode': 200,\r\n                      'RequestId': '97868196-de78-415c-9ffc-f03297f0378c',\r\n                      'RetryAttempts': 0},\r\n 'UserPoolClient': {'AllowedOAuthFlowsUserPoolClient': False,\r\n                    'ClientId': '1b4j5i6jv76q46de3r8eia636d',\r\n                    'ClientName': 'testclient',\r\n                    'ClientSecret': 'tr2up3lae31saeena2gt4v2es08hri85er66ebdtqhqt1h3fmr',\r\n                    'CreationDate': datetime.datetime(2020, 7, 15, 15, 10, 55, 845000, tzinfo=tzlocal()),\r\n                    'LastModifiedDate': datetime.datetime(2020, 7, 15, 15, 10, 55, 845000, tzinfo=tzlocal()),\r\n                    'RefreshTokenValidity': 30,\r\n                    'UserPoolId': 'ap-northeast-1_8zALBP5uj'}}\r\n\r\n```\r\n\r\n### Use moto\r\n```\r\nfrom pprint import pprint\r\nimport boto3\r\nfrom moto import mock_cognitoidp\r\n\r\n\r\n@mock_cognitoidp\r\ndef handler(event, context):\r\n\r\n    client = boto3.client('cognito-idp')\r\n    pool = client.create_user_pool(PoolName='testpool')\r\n    id = pool['UserPool']['Id']\r\n\r\n    response = client.create_user_pool_client(UserPoolId=id, ClientName='testclient', GenerateSecret=True)\r\n    pprint(response)\r\n\r\n\r\nif __name__ == '__main__':\r\n    handler('', '')\r\n\r\n```\r\n```\r\n{'ResponseMetadata': {'HTTPHeaders': {'server': 'amazon.com'},\r\n                      'HTTPStatusCode': 200,\r\n                      'RetryAttempts': 0},\r\n 'UserPoolClient': {'ClientId': '4eceed8d-60ef-44ee-8f7b-bdb8b5f4b2ae',\r\n                    'ClientName': 'testclient',\r\n                    'UserPoolId': 'ap-northeast-1_42f5e3dfbb644fa6a2643107a5856748'}}\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3131", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3131/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3131/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3131/events", "html_url": "https://github.com/spulec/moto/issues/3131", "id": 657096501, "node_id": "MDU6SXNzdWU2NTcwOTY1MDE=", "number": 3131, "title": "API Gateway:delete_api_key return wrong status code", "user": {"login": "cm-iwata", "id": 38879253, "node_id": "MDQ6VXNlcjM4ODc5MjUz", "avatar_url": "https://avatars1.githubusercontent.com/u/38879253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cm-iwata", "html_url": "https://github.com/cm-iwata", "followers_url": "https://api.github.com/users/cm-iwata/followers", "following_url": "https://api.github.com/users/cm-iwata/following{/other_user}", "gists_url": "https://api.github.com/users/cm-iwata/gists{/gist_id}", "starred_url": "https://api.github.com/users/cm-iwata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cm-iwata/subscriptions", "organizations_url": "https://api.github.com/users/cm-iwata/orgs", "repos_url": "https://api.github.com/users/cm-iwata/repos", "events_url": "https://api.github.com/users/cm-iwata/events{/privacy}", "received_events_url": "https://api.github.com/users/cm-iwata/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-15T06:28:18Z", "updated_at": "2020-07-15T13:04:53Z", "closed_at": "2020-07-15T08:41:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "API Gateway delete_api_key should return 202 for http status code.\r\nBut moto will return 200 ok.\r\n\r\n### Use boto3\r\n\r\n```\r\n>>> import moto\r\n>>> import boto3\r\n>>> from pprint import pprint\r\n>>> client = boto3.client('apigateway')\r\n>>> res = client.delete_api_key(name='xxx')\r\n>>> pprint(res)\r\n{'ResponseMetadata': {'HTTPHeaders': {'connection': 'keep-alive',\r\n                                      'content-length': '0',\r\n                                      'content-type': 'application/json',\r\n                                      'date': 'Wed, 15 Jul 2020 06:26:19 GMT',\r\n                                      'x-amz-apigw-id': 'Ps4tyJ5ANjMEbow=',\r\n                                      'x-amzn-requestid': '07ec4590-54b4-4dad-8ec5-b986a991446d'},\r\n                      'HTTPStatusCode': 202,\r\n                      'RequestId': '07ec4590-54b4-4dad-8ec5-b986a991446d',\r\n                      'RetryAttempts': 0}}\r\n```\r\n\r\n\r\n\r\n### Use moto\r\n\r\n```\r\n>>> import moto\r\n>>> import boto3\r\n>>> from pprint import pprint\r\n>>> client = boto3.client('apigateway')\r\n>>> moto.mock_apigateway().start()\r\n>>> res = client.create_api_key(apiKey='xxx')\r\n>>> pprint(res)\r\n{'ResponseMetadata': {'HTTPHeaders': {},\r\n                      'HTTPStatusCode': 200,\r\n                      'RetryAttempts': 0}}\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3129", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3129/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3129/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3129/events", "html_url": "https://github.com/spulec/moto/issues/3129", "id": 657008765, "node_id": "MDU6SXNzdWU2NTcwMDg3NjU=", "number": 3129, "title": "API Gateway create_api_key default value is wrong", "user": {"login": "cm-iwata", "id": 38879253, "node_id": "MDQ6VXNlcjM4ODc5MjUz", "avatar_url": "https://avatars1.githubusercontent.com/u/38879253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cm-iwata", "html_url": "https://github.com/cm-iwata", "followers_url": "https://api.github.com/users/cm-iwata/followers", "following_url": "https://api.github.com/users/cm-iwata/following{/other_user}", "gists_url": "https://api.github.com/users/cm-iwata/gists{/gist_id}", "starred_url": "https://api.github.com/users/cm-iwata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cm-iwata/subscriptions", "organizations_url": "https://api.github.com/users/cm-iwata/orgs", "repos_url": "https://api.github.com/users/cm-iwata/repos", "events_url": "https://api.github.com/users/cm-iwata/events{/privacy}", "received_events_url": "https://api.github.com/users/cm-iwata/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-15T02:15:04Z", "updated_at": "2020-07-15T13:04:45Z", "closed_at": "2020-07-15T06:00:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "API Gateway create_api_key wiill generate some  wrong default value.\r\nFor example, `enabled` should be False, but moto will return True.\r\n\r\n\r\n\r\n### Use boto3\r\n\r\n```\r\n>>> import moto\r\n>>> import boto3\r\n>>> from pprint import pprint\r\n>>> client = boto3.client('apigateway')\r\n>>> res = client.create_api_key(name='test')\r\n>>> pprint(res)\r\n{'ResponseMetadata': {'HTTPHeaders': {'connection': 'keep-alive',\r\n                                      'content-length': '170',\r\n                                      'content-type': 'application/json',\r\n                                      'date': 'Wed, 15 Jul 2020 02:09:07 GMT',\r\n                                      'x-amz-apigw-id': 'PsTCmK_etjMEbCQ=',\r\n                                      'x-amzn-requestid': '2743161b-503f-40ce-8f3d-b7f9d94ffc11'},\r\n                      'HTTPStatusCode': 201,\r\n                      'RequestId': '2743161b-503f-40ce-8f3d-b7f9d94ffc11',\r\n                      'RetryAttempts': 0},\r\n 'createdDate': datetime.datetime(2020, 7, 15, 11, 9, 7, tzinfo=tzlocal()),\r\n 'enabled': False,\r\n 'id': 'xxxxxxxxxx',\r\n 'lastUpdatedDate': datetime.datetime(2020, 7, 15, 11, 9, 7, tzinfo=tzlocal()),\r\n 'name': 'test',\r\n 'stageKeys': [],\r\n 'value': 'xxxxxxxxxx'}\r\n```\r\n\r\n\r\n\r\n### Use moto\r\n\r\n```\r\n>>> import moto\r\n>>> import boto3\r\n>>> from pprint import pprint\r\n>>> client = boto3.client('apigateway')\r\n>>> moto.mock_apigateway().start()\r\n>>> res = client.create_api_key(name='test')\r\n>>> pprint(res)\r\n{'ResponseMetadata': {'HTTPHeaders': {},\r\n                      'HTTPStatusCode': 200,\r\n                      'RetryAttempts': 0},\r\n 'createdDate': datetime.datetime(2020, 7, 15, 11, 9, 43, tzinfo=tzlocal()),\r\n 'enabled': True,\r\n 'id': 'xxxxxxxxxx',\r\n 'lastUpdatedDate': datetime.datetime(2020, 7, 15, 11, 9, 43, tzinfo=tzlocal()),\r\n 'name': 'test',\r\n 'value': 'xxxxxxxxxx'}\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3127", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3127/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3127/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3127/events", "html_url": "https://github.com/spulec/moto/issues/3127", "id": 656830472, "node_id": "MDU6SXNzdWU2NTY4MzA0NzI=", "number": 3127, "title": "cloudformation/parsing.py has an incomplete `UNDOCUMENTED_NAME_TYPE_MAP`", "user": {"login": "richford", "id": 7978135, "node_id": "MDQ6VXNlcjc5NzgxMzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7978135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richford", "html_url": "https://github.com/richford", "followers_url": "https://api.github.com/users/richford/followers", "following_url": "https://api.github.com/users/richford/following{/other_user}", "gists_url": "https://api.github.com/users/richford/gists{/gist_id}", "starred_url": "https://api.github.com/users/richford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richford/subscriptions", "organizations_url": "https://api.github.com/users/richford/orgs", "repos_url": "https://api.github.com/users/richford/repos", "events_url": "https://api.github.com/users/richford/events{/privacy}", "received_events_url": "https://api.github.com/users/richford/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 28886780, "node_id": "MDU6TGFiZWwyODg4Njc4MA==", "url": "https://api.github.com/repos/spulec/moto/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-14T19:00:04Z", "updated_at": "2020-08-01T16:00:17Z", "closed_at": "2020-08-01T14:23:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Issue\r\n[`cloudformation/parsing.py`](https://github.com/spulec/moto/blob/master/moto/cloudformation/parsing.py#L102) wisely has an `UNDOCUMENTED_NAME_TYPE_MAP` because the name type references in the [Amazon documentation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html) are incomplete. However, there are additional resource types that should be added. For my purposes in particular, I would like to add\r\n```python\r\n{\r\n    \"AWS::Batch::ComputeEnvironment\": \"ComputeEnvironmentName\",\r\n    \"AWS::Batch::JobDefinition\": \"JobDefinitionName\",\r\n    \"AWS::Batch::JobQueue\": \"JobQueueName\",\r\n    \"AWS::EC2::LaunchTemplate\": \"LaunchTemplateName\",\r\n}\r\n```\r\nand I will submit a PR to that effect.\r\n\r\nBut, combing through the [cloudformation documentation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html), I noticed that the following resource types could also be added:\r\n```python\r\n{\r\n    \"AWS::AccessAnalyzer::Analyzer\": \"AnalyzerName\",\r\n    \"AWS::AmazonMQ::Broker\": \"BrokerName\",\r\n    \"AWS::AmazonMQ::Configuration\": \"Name\",\r\n    \"AWS::Amplify::App\": \"Name\",\r\n    \"AWS::Amplify::Branch\": \"BranchName\",\r\n    \"AWS::Amplify::Domain\": \"DomainName\",\r\n    \"AWS::ApiGateway::Authorizer\": \"Name\",\r\n    \"AWS::ApiGateway::DomainName\": \"DomainName\",\r\n    \"AWS::ApiGateway::RequestValidator\": \"Name\",\r\n    \"AWS::ApiGateway::RestApi\": \"Name\",\r\n    \"AWS::ApiGateway::Stage\": \"StageName\",\r\n    \"AWS::ApiGateway::UsagePlan\": \"UsagePlanName\",\r\n    \"AWS::ApiGateway::VpcLink\": \"Name\",\r\n    \"AWS::ApiGatewayV2::Api\": \"Name\",\r\n    \"AWS::ApiGatewayV2::Authorizer\": \"Name\",\r\n    \"AWS::ApiGatewayV2::DomainName\": \"DomainName\",\r\n    \"AWS::ApiGatewayV2::Model\": \"Name\",\r\n    \"AWS::ApiGatewayV2::Stage\": \"StageName\",\r\n    \"AWS::ApiGatewayV2::VpcLink\": \"Name\",\r\n    \"AWS::AppConfig::Application\": \"Name\",\r\n    \"AWS::AppConfig::ConfigurationProfile\": \"Name\",\r\n    \"AWS::AppConfig::DeploymentStrategy\": \"Name\",\r\n    \"AWS::AppConfig::Environment\": \"Name\",\r\n    \"AWS::AppMesh::Mesh\": \"MeshName\",\r\n    \"AWS::AppMesh::Route\": \"RouteName\",\r\n    \"AWS::AppMesh::VirtualNode\": \"VirtualNodeName\",\r\n    \"AWS::AppMesh::VirtualRouter\": \"VirtualRouterName\",\r\n    \"AWS::AppMesh::VirtualService\": \"VirtualServiceName\",\r\n    \"AWS::AppStream::Fleet\": \"Name\",\r\n    \"AWS::AppStream::ImageBuilder\": \"Name\",\r\n    \"AWS::AppStream::Stack\": \"Name\",\r\n    \"AWS::AppSync::DataSource\": \"Name\",\r\n    \"AWS::AppSync::FunctionConfiguration\": \"Name\",\r\n    \"AWS::AppSync::GraphQLApi\": \"Name\",\r\n    \"AWS::ApplicationAutoScaling::ScalingPolicy\": \"PolicyName\",\r\n    \"AWS::Athena::DataCatalog\": \"Name\",\r\n    \"AWS::Athena::NamedQuery\": \"Name\",\r\n    \"AWS::Athena::WorkGroup\": \"Name\",\r\n    \"AWS::Backup::BackupVault\": \"BackupVaultName\",\r\n    \"AWS::CE::CostCategory\": \"Name\",\r\n    \"AWS::Cassandra::Keyspace\": \"KeyspaceName\",\r\n    \"AWS::Cassandra::Table\": \"TableName\",\r\n    \"AWS::Chatbot::SlackChannelConfiguration\": \"ConfigurationName\",\r\n    \"AWS::Cloud9::EnvironmentEC2\": \"Name\",\r\n    \"AWS::CloudFormation::Macro\": \"Name\",\r\n    \"AWS::CloudTrail::Trail\": \"TrailName\",\r\n    \"AWS::CloudWatch::CompositeAlarm\": \"AlarmName\",\r\n    \"AWS::CloudWatch::Dashboard\": \"DashboardName\",\r\n    \"AWS::CloudWatch::InsightRule\": \"RuleName\",\r\n    \"AWS::CodeBuild::Project\": \"Name\",\r\n    \"AWS::CodeBuild::ReportGroup\": \"Name\",\r\n    \"AWS::CodeCommit::Repository\": \"RepositoryName\",\r\n    \"AWS::CodeGuruProfiler::ProfilingGroup\": \"ProfilingGroupName\",\r\n    \"AWS::CodePipeline::Pipeline\": \"Name\",\r\n    \"AWS::CodePipeline::Webhook\": \"Name\",\r\n    \"AWS::CodeStarConnections::Connection\": \"ConnectionName\",\r\n    \"AWS::CodeStarNotifications::NotificationRule\": \"Name\",\r\n    \"AWS::Cognito::UserPool\": \"UserPoolName\",\r\n    \"AWS::Cognito::UserPoolClient\": \"ClientName\",\r\n    \"AWS::Cognito::UserPoolGroup\": \"GroupName\",\r\n    \"AWS::Cognito::UserPoolIdentityProvider\": \"ProviderName\",\r\n    \"AWS::Cognito::UserPoolResourceServer\": \"Name\",\r\n    \"AWS::Config::ConfigurationAggregator\": \"ConfigurationAggregatorName\",\r\n    \"AWS::Config::ConformancePack\": \"ConformancePackName\",\r\n    \"AWS::Config::OrganizationConfigRule\": \"OrganizationConfigRuleName\",\r\n    \"AWS::Config::OrganizationConformancePack\": \"OrganizationConformancePackName\",\r\n    \"AWS::Events::EventBus\": \"Name\",\r\n    \"AWS::Logs::Destination\": \"DestinationName\",\r\n    \"AWS::Logs::LogStream\": \"LogStreamName\",\r\n    \"AWS::ServiceDiscovery::HttpNamespace\": \"Name\",\r\n    \"AWS::ServiceDiscovery::PrivateDnsNamespace\": \"Name\",\r\n    \"AWS::ServiceDiscovery::PublicDnsNamespace\": \"Name\",\r\n    \"AWS::ServiceDiscovery::Service\": \"Name\",\r\n}\r\n```\r\n...and probably much more. I just stopped alphabetically after services that start with \"C\" because I was tired and also unfamiliar with those services. So the dict could wind up being pretty long. In addition to referencing my PR to add the batch services, maybe this issue could spur comments from the core devs about how to handle the large number of custom name types. I'd be happy to submit a PR for the additional service types also but don't want to make it too unwieldy to maintain.\r\n\r\n## Versions\r\n`pip list | grep oto` returns\r\n```bash\r\nboto               2.49.0\r\nboto3              1.14.20\r\nbotocore           1.17.20\r\nmoto               1.3.15.dev959\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3123", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3123/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3123/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3123/events", "html_url": "https://github.com/spulec/moto/issues/3123", "id": 656171043, "node_id": "MDU6SXNzdWU2NTYxNzEwNDM=", "number": 3123, "title": "`batch.utils.lowercase_first_key()` should be recursive", "user": {"login": "richford", "id": 7978135, "node_id": "MDQ6VXNlcjc5NzgxMzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7978135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richford", "html_url": "https://github.com/richford", "followers_url": "https://api.github.com/users/richford/followers", "following_url": "https://api.github.com/users/richford/following{/other_user}", "gists_url": "https://api.github.com/users/richford/gists{/gist_id}", "starred_url": "https://api.github.com/users/richford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richford/subscriptions", "organizations_url": "https://api.github.com/users/richford/orgs", "repos_url": "https://api.github.com/users/richford/repos", "events_url": "https://api.github.com/users/richford/events{/privacy}", "received_events_url": "https://api.github.com/users/richford/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-13T21:55:38Z", "updated_at": "2020-07-14T12:41:18Z", "closed_at": "2020-07-14T10:29:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When creating a job definition using cloudformation, I noticed that the `batch.utils.lowercase_first_key()` function does not recurse into nested dictionaries or lists of dictionaries. This is required, for example, by the \"environment,\" \"mountPoints,\" and \"linuxParameters\" values passed to the `containerProperties` parameter of boto's [register_job_definition](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/batch.html#Batch.Client.register_job_definition) function. This in turn leads to empty environment variables in the container properties when creating a job definition using CloudFormation.\r\n\r\n## How to reproduce this issue\r\n\r\nUse the following CloudFormation json template\r\n```json\r\n{\r\n    \"AWSTemplateFormatVersion\" : \"2010-09-09\",\r\n        \"Description\" : \"Test template for bug reproduction\",\r\n        \"Parameters\" : {\r\n            \"JdName\" : {\r\n                \"Type\" : \"String\",\r\n                \"Description\" : \"Name of the job definition.\",\r\n                \"MinLength\" : \"1\",\r\n                \"MaxLength\" : \"100\",\r\n                \"ConstraintDescription\" : \"The job definition name must be between 1 and 50 characters\"\r\n            },\r\n            \"JdvCpus\" : {\r\n                \"Type\" : \"Number\",\r\n                \"Default\" : \"1\",\r\n                \"Description\" : \"Number of virtual CPUs required for the job definition. Default=1\",\r\n                \"MinValue\" : \"0\",\r\n                \"ConstraintDescription\" : \"vCpus must be greater than zero.\"\r\n            },\r\n            \"JdMemory\" : {\r\n                \"Type\" : \"Number\",\r\n                \"Default\" : \"8000\",\r\n                \"Description\" : \"Memory (MiB) required for the job definition. Default=8000\",\r\n                \"MinValue\" : \"0\",\r\n                \"ConstraintDescription\" : \"Memory must be greater than zero.\"\r\n            },\r\n            \"JdRetries\" : {\r\n                \"Type\" : \"Number\",\r\n                \"Default\" : \"1\",\r\n                \"Description\" : \"Number of times a job can be moved back to 'RUNNABLE' status. Default=1\",\r\n                \"MinValue\" : \"1\",\r\n                \"MaxValue\" : \"10\",\r\n                \"ConstraintDescription\" : \"The number of retries must be between 1 and 10.\"\r\n            }\r\n        },\r\n        \"Resources\" : {\r\n            \"JobDefinition\" : {\r\n                \"Type\" : \"AWS::Batch::JobDefinition\",\r\n                \"Properties\" : {\r\n                    \"JobDefinitionName\" : { \"Ref\" : \"JdName\" },\r\n                    \"Type\" : \"container\",\r\n                    \"ContainerProperties\" : {\r\n                        \"Image\" : \"ubuntu\",\r\n                        \"Vcpus\" : { \"Ref\" : \"JdvCpus\" },\r\n                        \"Memory\" : { \"Ref\" : \"JdMemory\" },\r\n                        \"Environment\" : [\r\n                            {\r\n                                \"Name\" : \"ENV_VAR_1\",\r\n                                \"Value\" : \"ENV_VAL_1\"\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"RetryStrategy\" : {\r\n                        \"Attempts\" : { \"Ref\" : \"JdRetries\" }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"Outputs\" : {\r\n            \"JobDefinition\": {\r\n                \"Value\" : { \"Ref\" : \"JobDefinition\" }\r\n            }\r\n        }\r\n}\r\n```\r\nand the following MWE python code\r\n```python\r\nimport boto3\r\n\r\nfrom moto import mock_batch, mock_cloudformation\r\n\r\n@mock_cloudformation\r\n@mock_batch\r\ndef test_job_def_environment_with_cloudformation():\r\n    cf = boto3.client('cloudformation')\r\n\r\n    with open(\"mwe.template\", \"r\") as fp:\r\n        template_body = fp.read()\r\n\r\n    params = [\r\n        {\r\n            \"ParameterKey\": \"JdName\",\r\n            \"ParameterValue\": \"test_job_def\"\r\n        },\r\n        {\r\n            \"ParameterKey\": \"JdvCpus\",\r\n            \"ParameterValue\": str(123)\r\n        },\r\n        {\r\n            \"ParameterKey\": \"JdMemory\",\r\n            \"ParameterValue\": str(123)\r\n        },\r\n        {\r\n            \"ParameterKey\": \"JdRetries\",\r\n            \"ParameterValue\": str(3)\r\n        },\r\n    ]\r\n\r\n    response = cf.create_stack(\r\n        StackName='job_definition_stack',\r\n        TemplateBody=template_body,\r\n        Parameters=params,\r\n        Capabilities=[\"CAPABILITY_NAMED_IAM\"],\r\n    )\r\n\r\n    stack_id = response.get('StackId')\r\n    \r\n    response = cf.describe_stacks(\r\n        StackName=stack_id\r\n    )\r\n\r\n    stack_out = response.get('Stacks')[0]['Outputs']\r\n\r\n    jd_arn = stack_out[0].get('OutputValue')\r\n\r\n    batch = boto3.client('batch')\r\n    response = batch.describe_job_definitions(\r\n        jobDefinitions=[jd_arn]\r\n    )\r\n    job_def = response.get(\"jobDefinitions\")[0]\r\n    job_def_env = job_def[\"containerProperties\"][\"environment\"]\r\n\r\n    assert all([env for env in job_def_env]), \"Environment variables are empty.\"\r\n    assert('ENV_VAR_1' in [e['name'] for e in job_def_env])\r\n    assert('ENV_VAR_2' in [e['name'] for e in job_def_env])\r\n    assert('ENV_VAL_1' in [e['value'] for e in job_def_env])\r\n    assert('ENV_VAL_2' in [e['value'] for e in job_def_env])\r\n```\r\n\r\n## Expected behavior\r\nTests should pass. No assertion errors should be raised.\r\n\r\n## What happens instead\r\nI get this traceback:\r\n```bash\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-3-82b538f9bd9c> in <module>\r\n----> 1 mwe.test_job_def_environment_with_cloudformation()\r\n\r\n~/projects/oss_third_party/moto/moto/core/models.py in wrapper(*args, **kwargs)\r\n     97             self.start(reset=reset)\r\n     98             try:\r\n---> 99                 result = func(*args, **kwargs)\r\n    100             finally:\r\n    101                 self.stop()\r\n\r\n~/projects/oss_third_party/moto/moto/core/models.py in wrapper(*args, **kwargs)\r\n     97             self.start(reset=reset)\r\n     98             try:\r\n---> 99                 result = func(*args, **kwargs)\r\n    100             finally:\r\n    101                 self.stop()\r\n\r\n~/projects/oss_third_party/moto/mwe.py in test_job_def_environment_with_cloudformation()\r\n     55     print(job_def_env)\r\n     56\r\n---> 57     assert all([env for env in job_def_env]), \"Environment variables are empty.\"\r\n     58     assert('ENV_VAR_1' in [e['name'] for e in job_def_env])\r\n     59     assert('ENV_VAL_1' in [e['value'] for e in job_def_env])\r\n\r\nAssertionError: Environment variables are empty.\r\n```\r\n\r\n## What version of moto am I using\r\n\r\nThe command `pip list | grep oto` yields\r\n```bash\r\nboto               2.49.0\r\nboto3              1.14.20\r\nbotocore           1.17.20\r\nmoto               1.3.15.dev959\r\n```\r\n\r\nI will submit a PR that fixes this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3114", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3114/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3114/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3114/events", "html_url": "https://github.com/spulec/moto/issues/3114", "id": 653115883, "node_id": "MDU6SXNzdWU2NTMxMTU4ODM=", "number": 3114, "title": "CloudFormation output for DynamoDB table", "user": {"login": "tigermonkey", "id": 2547803, "node_id": "MDQ6VXNlcjI1NDc4MDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2547803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tigermonkey", "html_url": "https://github.com/tigermonkey", "followers_url": "https://api.github.com/users/tigermonkey/followers", "following_url": "https://api.github.com/users/tigermonkey/following{/other_user}", "gists_url": "https://api.github.com/users/tigermonkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tigermonkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tigermonkey/subscriptions", "organizations_url": "https://api.github.com/users/tigermonkey/orgs", "repos_url": "https://api.github.com/users/tigermonkey/repos", "events_url": "https://api.github.com/users/tigermonkey/events{/privacy}", "received_events_url": "https://api.github.com/users/tigermonkey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-08T08:54:03Z", "updated_at": "2020-07-26T20:30:29Z", "closed_at": "2020-07-26T20:30:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "## **how to reproduce the issue**\r\n\r\n```python\r\nimport json\r\nimport os\r\n\r\nimport boto3\r\nimport pytest\r\nfrom moto import mock_cloudformation\r\n\r\nCFN_TEMPLATE = {\r\n    \"Outputs\": {\r\n        \"MyTableName\": {\r\n            \"Value\": {\r\n                \"Ref\": \"MyTable\"\r\n            }\r\n        },\r\n    },\r\n    \"Resources\": {\r\n        \"MyTable\": {\r\n            \"Type\": \"AWS::DynamoDB::Table\",\r\n            \"Properties\": {\r\n                \"KeySchema\": [{\"AttributeName\": \"id\", \"KeyType\": \"HASH\"}],\r\n                \"AttributeDefinitions\": [\r\n                    {\"AttributeName\": \"id\", \"AttributeType\": \"S\"}\r\n                ],\r\n            },\r\n        },\r\n    },\r\n}\r\n\r\n\r\n@pytest.fixture(scope=\"function\")\r\ndef aws_credentials():\r\n    \"\"\"Mocked AWS Credentials for moto.\"\"\"\r\n    os.environ[\"AWS_ACCESS_KEY_ID\"] = \"testing\"\r\n    os.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"testing\"\r\n    os.environ[\"AWS_SECURITY_TOKEN\"] = \"testing\"\r\n    os.environ[\"AWS_SESSION_TOKEN\"] = \"testing\"\r\n\r\n\r\n@mock_cloudformation\r\ndef test_get_stack(aws_credentials):\r\n    stack_name = \"foobar\"\r\n    cfn = boto3.client(\"cloudformation\")\r\n    cfn.create_stack(StackName=stack_name, TemplateBody=json.dumps(CFN_TEMPLATE))\r\n    # Wait until moto creates the stack\r\n    waiter = cfn.get_waiter(\"stack_create_complete\")\r\n    waiter.wait(StackName=stack_name)\r\n    assert True\r\n\r\n```\r\n\r\n## **what you expected to happen**\r\n\r\nI have a template like that and it creates a valid stack, with the name of the table in the MyTablename CfnOutput \"MyTableName\".\r\n\r\n## **what actually happens**\r\n\r\n```\r\n======================================== FAILURES ========================================\r\n_____________________________________ test_get_stack _____________________________________\r\n\r\nself = <botocore.parsers.QueryParser object at 0x7f5ce7c3e828>\r\nxml_string = b'<DescribeStacksResponse><DescribeStacksResult><Stacks><member><StackName>foobar</StackName><StackId>arn:aws:cloudfor...ber></Outputs><Parameters></Parameters><Tags></T\r\nags></member></Stacks></DescribeStacksResult></DescribeStacksResponse>'\r\n\r\n    def _parse_xml_string_to_dom(self, xml_string):\r\n        try:\r\n            parser = xml.etree.cElementTree.XMLParser(\r\n                target=xml.etree.cElementTree.TreeBuilder(),\r\n                encoding=self.DEFAULT_ENCODING)\r\n>           parser.feed(xml_string)\r\nE             File \"<string>\", line None\r\nE           xml.etree.ElementTree.ParseError: not well-formed (invalid token): line 1, column 452\r\n\r\n../../../../.local/lib/python3.6/site-packages/botocore/parsers.py:452: ParseError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\naws_credentials = None\r\n\r\n    @mock_cloudformation\r\n    def test_get_stack(aws_credentials):\r\n        stack_name = \"foobar\"\r\n        cfn = boto3.client(\"cloudformation\")\r\n        cfn.create_stack(StackName=stack_name, TemplateBody=json.dumps(CFN_TEMPLATE))\r\n        # Wait until moto creates the stack\r\n        waiter = cfn.get_waiter(\"stack_create_complete\")\r\n>       waiter.wait(StackName=stack_name)\r\n\r\n../../../../min-test-case.py:46:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../../../../.local/lib/python3.6/site-packages/botocore/waiter.py:53: in wait\r\n    Waiter.wait(self, **kwargs)\r\n../../../../.local/lib/python3.6/site-packages/botocore/waiter.py:297: in wait\r\n    response = self._operation_method(**kwargs)\r\n../../../../.local/lib/python3.6/site-packages/botocore/waiter.py:84: in __call__\r\n    return self._client_method(**kwargs)     \r\n../../../../.local/lib/python3.6/site-packages/botocore/client.py:316: in _api_call\r\n    return self._make_api_call(operation_name, kwargs)              \r\n../../../../.local/lib/python3.6/site-packages/botocore/client.py:622: in _make_api_call\r\n    operation_model, request_dict, request_context)\r\n../../../../.local/lib/python3.6/site-packages/botocore/client.py:641: in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n../../../../.local/lib/python3.6/site-packages/botocore/endpoint.py:102: in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n../../../../.local/lib/python3.6/site-packages/botocore/endpoint.py:135: in _send_request\r\n    request, operation_model, context)\r\n../../../../.local/lib/python3.6/site-packages/botocore/endpoint.py:167: in _get_response\r\n    request, operation_model)\r\n../../../../.local/lib/python3.6/site-packages/botocore/endpoint.py:218: in _do_get_response\r\n    response_dict, operation_model.output_shape)\r\n../../../../.local/lib/python3.6/site-packages/botocore/parsers.py:246: in parse\r\n    parsed = self._do_parse(response, shape)\r\n../../../../.local/lib/python3.6/site-packages/botocore/parsers.py:524: in _do_parse\r\n    return self._parse_body_as_xml(response, shape, inject_metadata=True)\r\n../../../../.local/lib/python3.6/site-packages/botocore/parsers.py:528: in _parse_body_as_xml\r\n    root = self._parse_xml_string_to_dom(xml_contents)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <botocore.parsers.QueryParser object at 0x7f5ce7c3e828>\r\nxml_string = b'<DescribeStacksResponse><DescribeStacksResult><Stacks><member><StackName>foobar</StackName><StackId>arn:aws:cloudfor...ber></Outputs><Parameters></Parameters><Tags></T\r\nags></member></Stacks></DescribeStacksResult></DescribeStacksResponse>'\r\n\r\n    def _parse_xml_string_to_dom(self, xml_string):\r\n        try:\r\n            parser = xml.etree.cElementTree.XMLParser(\r\n                target=xml.etree.cElementTree.TreeBuilder(),\r\n                encoding=self.DEFAULT_ENCODING)\r\n            parser.feed(xml_string)\r\n            root = parser.close()\r\n        except XMLParseError as e:\r\n            raise ResponseParserError(\r\n                \"Unable to parse response (%s), \"\r\n                \"invalid XML received. Further retries may succeed:\\n%s\" %\r\n>               (e, xml_string))\r\nE           botocore.parsers.ResponseParserError: Unable to parse response (not well-formed (invalid token): line 1, column 452), invalid XML received. Further retries may succeed:\r\nE           b'<DescribeStacksResponse><DescribeStacksResult><Stacks><member><StackName>foobar</StackName><StackId>arn:aws:cloudformation:us-east-1:123456789:stack/foobar/3781cd29-805\r\nc-4564-b7e0-9ac3647f350e</StackId><CreationTime>2010-07-27T22:28:28Z</CreationTime><StackStatus>CREATE_COMPLETE</StackStatus><NotificationARNs/><DisableRollback>false</DisableRollbac\r\nk><Outputs><member><OutputKey>MyTableName</OutputKey><OutputValue><moto.dynamodb2.models.Table object at 0x7f5ce7c3b240></OutputValue></member></Outputs><Parameters></Parameters><Tag\r\ns></Tags></member></Stacks></DescribeStacksResult></DescribeStacksResponse>'\r\n\r\n../../../../.local/lib/python3.6/site-packages/botocore/parsers.py:458: ResponseParserError\r\n=================================== 1 failed in 2.23s ====================================\r\n```\r\n\r\nIt seems `Ref` for ddb tables outputs this: `<moto.dynamodb2.models.Table object at 0x7f5ce7c3b240>`, but I think it should output the name of the table: `MyTableName` as that's the behavior of AWS.\r\n\r\n## **what version of Moto you're using**, and **how you installed it**\r\n\r\nmoto 1.3.14 installed with pip\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3112", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3112/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3112/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3112/events", "html_url": "https://github.com/spulec/moto/issues/3112", "id": 652323751, "node_id": "MDU6SXNzdWU2NTIzMjM3NTE=", "number": 3112, "title": "Not able to SSH the EC2 intance ", "user": {"login": "uyadavv", "id": 67515639, "node_id": "MDQ6VXNlcjY3NTE1NjM5", "avatar_url": "https://avatars1.githubusercontent.com/u/67515639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uyadavv", "html_url": "https://github.com/uyadavv", "followers_url": "https://api.github.com/users/uyadavv/followers", "following_url": "https://api.github.com/users/uyadavv/following{/other_user}", "gists_url": "https://api.github.com/users/uyadavv/gists{/gist_id}", "starred_url": "https://api.github.com/users/uyadavv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uyadavv/subscriptions", "organizations_url": "https://api.github.com/users/uyadavv/orgs", "repos_url": "https://api.github.com/users/uyadavv/repos", "events_url": "https://api.github.com/users/uyadavv/events{/privacy}", "received_events_url": "https://api.github.com/users/uyadavv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886780, "node_id": "MDU6TGFiZWwyODg4Njc4MA==", "url": "https://api.github.com/repos/spulec/moto/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-07T13:28:41Z", "updated_at": "2020-07-08T10:39:18Z", "closed_at": "2020-07-08T10:39:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nSteps to Reproduce:\r\n1. Created security group\r\n2. Created EC2 Instance with security group using moto.\r\n3. Now try to ssh the created EC2 instance using the below mentioned code:\r\n\r\nimport paramiko\r\n\r\nkey = paramiko.RSAKey.from_private_key_file('C:/Users/Desktop/key-test.pem')\r\nclient = paramiko.SSHClient()\r\nclient.set_missing_host_key_policy(paramiko.AutoAddPolicy())\r\n\r\n\r\ntry:\r\n    client.connect(hostname='54.214.220.16', username=\"ec2-user\", pkey=key)\r\n    stdin, stdout, stderr = client.exec_command(\"cmd\")\r\n    print (stdout.read())\r\n    client.close()\r\n    \r\nexcept Exception as e:\r\n    print (e)\r\n\r\nExpected Result:\r\nAble to SSH the EC2 instance.\r\n\r\nActual Result:\r\n[WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3109", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3109/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3109/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3109/events", "html_url": "https://github.com/spulec/moto/issues/3109", "id": 650937810, "node_id": "MDU6SXNzdWU2NTA5Mzc4MTA=", "number": 3109, "title": "Possible \"NUMBER\"-type parameter validation error in CloudFormation", "user": {"login": "richford", "id": 7978135, "node_id": "MDQ6VXNlcjc5NzgxMzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7978135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richford", "html_url": "https://github.com/richford", "followers_url": "https://api.github.com/users/richford/followers", "following_url": "https://api.github.com/users/richford/following{/other_user}", "gists_url": "https://api.github.com/users/richford/gists{/gist_id}", "starred_url": "https://api.github.com/users/richford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richford/subscriptions", "organizations_url": "https://api.github.com/users/richford/orgs", "repos_url": "https://api.github.com/users/richford/repos", "events_url": "https://api.github.com/users/richford/events{/privacy}", "received_events_url": "https://api.github.com/users/richford/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-04T18:42:27Z", "updated_at": "2020-07-11T07:57:37Z", "closed_at": "2020-07-11T07:43:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When creating a JobDefinition using Cloudformation with a job definition memory parameter, I get a type error for the memory passed into the parameters of `moto.batch.JobDefinition`. Apologies for the rather long trracebacks, but I'm erring on the side of too much information rather than too little.\r\n\r\n## How to reproduce\r\nTo reproduce, use the following MWE CloudFormation Template:\r\n```json\r\n{\r\n    \"AWSTemplateFormatVersion\" : \"2010-09-09\",\r\n        \"Description\" : \"AWS CloudFormation Template: This template is to demonstrate a potential moto bug. It builds a job definition.\",\r\n        \"Parameters\" : {\r\n            \"JdMemory\" : {\r\n                \"Type\" : \"Number\",\r\n                \"Default\" : \"8000\",\r\n                \"Description\" : \"Memory (MiB) required for the job definition. Default=8000\",\r\n                \"MinValue\" : \"0\",\r\n                \"ConstraintDescription\" : \"Memory must be greater than zero.\"\r\n            }\r\n        },\r\n        \"Resources\" : {\r\n            \"JobDefinition\" : {\r\n                \"Type\" : \"AWS::Batch::JobDefinition\",\r\n                \"Properties\" : {\r\n                    \"JobDefinitionName\" : \"testJobDef\",\r\n                    \"Type\" : \"container\",\r\n                    \"ContainerProperties\" : {\r\n                        \"Image\" : \"testDockerImage\",\r\n                        \"Vcpus\" : \"2\",\r\n                        \"Memory\" : { \"Ref\" : \"JdMemory\" },\r\n                        \"Command\" : [],\r\n                        \"User\" : \"test_user\",\r\n                        \"Environment\" : []\r\n                    },\r\n                    \"RetryStrategy\" : {\r\n                        \"Attempts\" : \"3\"\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \"Outputs\" : {\r\n            \"JobDefinition\": {\r\n                \"Value\" : { \"Ref\" : \"JobDefinition\" }\r\n            }\r\n        }\r\n}\r\n```\r\nand use the following MWE test function\r\n```python\r\nimport boto3\r\nimport json\r\nimport os\r\nfrom moto import mock_cloudformation, mock_batch\r\n\r\n\r\n@mock_batch\r\n@mock_cloudformation\r\ndef test_jobdef():\r\n    memory = 8000\r\n    params = [{\"ParameterKey\": \"JdMemory\", \"ParameterValue\": str(memory)}]\r\n\r\n    template_path = os.path.abspath(\r\n        os.path.join(\r\n            os.path.dirname(__file__), \"batch-environment.template\"\r\n        )\r\n    )\r\n\r\n    with open(template_path, \"r\") as fp:\r\n        template_body = fp.read()\r\n\r\n    client = boto3.client(\"cloudformation\")\r\n    response = client.create_stack(\r\n        StackName=\"testStack\",\r\n        TemplateBody=template_body,\r\n        Parameters=params,\r\n    )\r\n\r\n    stack_id = response.get(\"StackId\")\r\n    return stack_id\r\n```\r\n\r\n## Expected behavior\r\nReturn the `stack_id` from the mocked stack containing a job definition\r\n\r\n## What actually happens\r\nThe full traceback I get is:\r\n```\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/core/models.py in wrapper(*args, **kwargs)\r\n     86             self.start(reset=reset)\r\n     87             try:\r\n---> 88                 result = func(*args, **kwargs)\r\n     89             finally:\r\n     90                 self.stop()\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/core/models.py in wrapper(*args, **kwargs)\r\n     86             self.start(reset=reset)\r\n     87             try:\r\n---> 88                 result = func(*args, **kwargs)\r\n     89             finally:\r\n     90                 self.stop()\r\n\r\n~/projects/oss_third_party/moto_bug/test_bug.py in test_jobdef()\r\n     30         TemplateBody=template_body,\r\n     31         Parameters=params,\r\n---> 32         Capabilities=[\"CAPABILITY_NAMED_IAM\"],\r\n     33     )\r\n     34\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/client.py in _api_call(self, *args, **kwargs)\r\n    314                     \"%s() only accepts keyword arguments.\" % py_operation_name)\r\n    315             # The \"self\" in this scope is referring to the BaseClient.\r\n--> 316             return self._make_api_call(operation_name, kwargs)\r\n    317\r\n    318         _api_call.__name__ = str(py_operation_name)\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/client.py in _make_api_call(self, operation_name, api_params)\r\n    620         else:\r\n    621             http, parsed_response = self._make_request(\r\n--> 622                 operation_model, request_dict, request_context)\r\n    623\r\n    624         self.meta.events.emit(\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/client.py in _make_request(self, operation_model, request_dict, request_context)\r\n    639     def _make_request(self, operation_model, request_dict, request_context):\r\n    640         try:\r\n--> 641             return self._endpoint.make_request(operation_model, request_dict)\r\n    642         except Exception as e:\r\n    643             self.meta.events.emit(\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/endpoint.py in make_request(self, operation_model, request_dict)\r\n    100         logger.debug(\"Making request for %s with params: %s\",\r\n    101                      operation_model, request_dict)\r\n--> 102         return self._send_request(request_dict, operation_model)\r\n    103\r\n    104     def create_request(self, params, operation_model=None):\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/endpoint.py in _send_request(self, request_dict, operation_model)\r\n    135             request, operation_model, context)\r\n    136         while self._needs_retry(attempts, operation_model, request_dict,\r\n--> 137                                 success_response, exception):\r\n    138             attempts += 1\r\n    139             # If there is a stream associated with the request, we need\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/endpoint.py in _needs_retry(self, attempts, operation_model, request_dict, response, caught_exception)\r\n    254             event_name, response=response, endpoint=self,\r\n    255             operation=operation_model, attempts=attempts,\r\n--> 256             caught_exception=caught_exception, request_dict=request_dict)\r\n    257         handler_response = first_non_none_response(responses)\r\n    258         if handler_response is None:\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/hooks.py in emit(self, event_name, **kwargs)\r\n    354     def emit(self, event_name, **kwargs):\r\n    355         aliased_event_name = self._alias_event_name(event_name)\r\n--> 356         return self._emitter.emit(aliased_event_name, **kwargs)\r\n    357\r\n    358     def emit_until_response(self, event_name, **kwargs):\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/hooks.py in emit(self, event_name, **kwargs)\r\n    226                  handlers.\r\n    227         \"\"\"\r\n--> 228         return self._emit(event_name, kwargs)\r\n    229\r\n    230     def emit_until_response(self, event_name, **kwargs):\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/hooks.py in _emit(self, event_name, kwargs, stop_on_response)\r\n    209         for handler in handlers_to_call:\r\n    210             logger.debug('Event %s: calling handler %s', event_name, handler)\r\n--> 211             response = handler(**kwargs)\r\n    212             responses.append((handler, response))\r\n    213             if stop_on_response and response is not None:\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/retryhandler.py in __call__(self, attempts, response, caught_exception, **kwargs)\r\n    181\r\n    182         \"\"\"\r\n--> 183         if self._checker(attempts, response, caught_exception):\r\n    184             result = self._action(attempts=attempts)\r\n    185             logger.debug(\"Retry needed, action of: %s\", result)\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/retryhandler.py in __call__(self, attempt_number, response, caught_exception)\r\n    249     def __call__(self, attempt_number, response, caught_exception):\r\n    250         should_retry = self._should_retry(attempt_number, response,\r\n--> 251                                           caught_exception)\r\n    252         if should_retry:\r\n    253             if attempt_number >= self._max_attempts:\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/retryhandler.py in _should_retry(self, attempt_number, response, caught_exception)\r\n    267                 attempt_number < self._max_attempts:\r\n    268             try:\r\n--> 269                 return self._checker(attempt_number, response, caught_exception)\r\n    270             except self._retryable_exceptions as e:\r\n    271                 logger.debug(\"retry needed, retryable exception caught: %s\",\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/retryhandler.py in __call__(self, attempt_number, response, caught_exception)\r\n    315         for checker in self._checkers:\r\n    316             checker_response = checker(attempt_number, response,\r\n--> 317                                        caught_exception)\r\n    318             if checker_response:\r\n    319                 return checker_response\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/retryhandler.py in __call__(self, attempt_number, response, caught_exception)\r\n    221         elif caught_exception is not None:\r\n    222             return self._check_caught_exception(\r\n--> 223                 attempt_number, caught_exception)\r\n    224         else:\r\n    225             raise ValueError(\"Both response and caught_exception are None.\")\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/retryhandler.py in _check_caught_exception(self, attempt_number, caught_exception)\r\n    357         # the MaxAttemptsDecorator is not interested in retrying the exception\r\n    358         # then this exception just propogates out past the retry code.\r\n--> 359         raise caught_exception\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/endpoint.py in _do_get_response(self, request, operation_model)\r\n    195             service_id = operation_model.service_model.service_id.hyphenize()\r\n    196             event_name = 'before-send.%s.%s' % (service_id, operation_model.name)\r\n--> 197             responses = self._event_emitter.emit(event_name, request=request)\r\n    198             http_response = first_non_none_response(responses)\r\n    199             if http_response is None:\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/hooks.py in emit(self, event_name, **kwargs)\r\n    354     def emit(self, event_name, **kwargs):\r\n    355         aliased_event_name = self._alias_event_name(event_name)\r\n--> 356         return self._emitter.emit(aliased_event_name, **kwargs)\r\n    357\r\n    358     def emit_until_response(self, event_name, **kwargs):\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/hooks.py in emit(self, event_name, **kwargs)\r\n    226                  handlers.\r\n    227         \"\"\"\r\n--> 228         return self._emit(event_name, kwargs)\r\n    229\r\n    230     def emit_until_response(self, event_name, **kwargs):\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/hooks.py in _emit(self, event_name, kwargs, stop_on_response)\r\n    209         for handler in handlers_to_call:\r\n    210             logger.debug('Event %s: calling handler %s', event_name, handler)\r\n--> 211             response = handler(**kwargs)\r\n    212             responses.append((handler, response))\r\n    213             if stop_on_response and response is not None:\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/core/models.py in __call__(self, event_name, request, **kwargs)\r\n    270                     request.headers[header] = value.decode(\"utf-8\")\r\n    271             status, headers, body = response_callback(\r\n--> 272                 request, request.url, request.headers\r\n    273             )\r\n    274             body = MockRawResponse(body)\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/core/responses.py in dispatch(cls, *args, **kwargs)\r\n    195     @classmethod\r\n    196     def dispatch(cls, *args, **kwargs):\r\n--> 197         return cls()._dispatch(*args, **kwargs)\r\n    198\r\n    199     def setup_class(self, request, full_url, headers):\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/core/responses.py in _dispatch(self, request, full_url, headers)\r\n    293     def _dispatch(self, request, full_url, headers):\r\n    294         self.setup_class(request, full_url, headers)\r\n--> 295         return self.call_action()\r\n    296\r\n    297     def uri_to_regexp(self, uri):\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/core/responses.py in call_action(self)\r\n    378             method = getattr(self, action)\r\n    379             try:\r\n--> 380                 response = method()\r\n    381             except HTTPException as http_error:\r\n    382                 response = http_error.description, dict(status=http_error.code)\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/cloudformation/responses.py in create_stack(self)\r\n     68             notification_arns=stack_notification_arns,\r\n     69             tags=tags,\r\n---> 70             role_arn=role_arn,\r\n     71         )\r\n     72         if self.request_json:\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/cloudformation/models.py in create_stack(self, name, template, parameters, region_name, notification_arns, tags, role_arn, create_change_set)\r\n    541             role_arn=role_arn,\r\n    542             cross_stack_resources=self.exports,\r\n--> 543             create_change_set=create_change_set,\r\n    544         )\r\n    545         self.stacks[stack_id] = new_stack\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/cloudformation/models.py in __init__(self, stack_id, name, template, parameters, region_name, notification_arns, tags, role_arn, cross_stack_resources, create_change_set)\r\n    236         self.description = self.template_dict.get(\"Description\")\r\n    237         self.cross_stack_resources = cross_stack_resources or {}\r\n--> 238         self.resource_map = self._create_resource_map()\r\n    239         self.output_map = self._create_output_map()\r\n    240         self._add_stack_event(\"CREATE_COMPLETE\")\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/cloudformation/models.py in _create_resource_map(self)\r\n    251             self.cross_stack_resources,\r\n    252         )\r\n--> 253         resource_map.create()\r\n    254         return resource_map\r\n    255\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/cloudformation/parsing.py in create(self)\r\n    527         )\r\n    528         for resource in self.resources:\r\n--> 529             if isinstance(self[resource], ec2_models.TaggedEC2Resource):\r\n    530                 self.tags[\"aws:cloudformation:logical-id\"] = resource\r\n    531                 ec2_models.ec2_backends[self._region_name].create_tags(\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/cloudformation/parsing.py in __getitem__(self, key)\r\n    451                 raise KeyError(resource_logical_id)\r\n    452             new_resource = parse_and_create_resource(\r\n--> 453                 resource_logical_id, resource_json, self, self._region_name\r\n    454             )\r\n    455             if new_resource is not None:\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/cloudformation/parsing.py in parse_and_create_resource(logical_id, resource_json, resources_map, region_name)\r\n    330     resource_class, resource_json, resource_name = resource_tuple\r\n    331     resource = resource_class.create_from_cloudformation_json(\r\n--> 332         resource_name, resource_json, region_name\r\n    333     )\r\n    334     resource.type = resource_type\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/batch/models.py in create_from_cloudformation_json(cls, resource_name, cloudformation_json, region_name)\r\n    277             _type=\"container\",\r\n    278             retry_strategy=lowercase_first_key(properties[\"RetryStrategy\"]),\r\n--> 279             container_properties=lowercase_first_key(properties[\"ContainerProperties\"]),\r\n    280         )\r\n    281\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/batch/models.py in register_job_definition(self, def_name, parameters, _type, retry_strategy, container_properties)\r\n   1137                 container_properties,\r\n   1138                 region_name=self.region_name,\r\n-> 1139                 retry_strategy=retry_strategy,\r\n   1140             )\r\n   1141         else:\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/batch/models.py in __init__(self, name, parameters, _type, container_properties, region_name, revision, retry_strategy)\r\n    189         self.parameters = parameters\r\n    190\r\n--> 191         self._validate()\r\n    192         self._update_arn()\r\n    193\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/batch/models.py in _validate(self)\r\n    214         if \"memory\" not in self.container_properties:\r\n    215             raise ClientException(\"containerProperties must contain memory\")\r\n--> 216         if self.container_properties[\"memory\"] < 4:\r\n    217             raise ClientException(\"container memory limit must be greater than 4\")\r\n    218\r\n\r\nTypeError: '<' not supported between instances of 'str' and 'int'\r\n```\r\n\r\n## What version of moto am I using\r\nInstalled through pip. The command `pip list | grep oto` yields\r\n```\r\nboto               2.49.0\r\nboto3              1.14.16\r\nbotocore           1.17.16\r\nmoto               1.3.14\r\n```\r\n\r\n## How it might be fixed\r\nI tried amending my code so that an int is passed as the memory parameter value:\r\n```\r\nparams = [{\"ParameterKey\": \"JdMemory\", \"ParameterValue\": str(memory)}]\r\n```\r\nHowever, this raises another issue:\r\n```\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/core/models.py in wrapper(*args, **kwargs)\r\n     86             self.start(reset=reset)\r\n     87             try:\r\n---> 88                 result = func(*args, **kwargs)\r\n     89             finally:\r\n     90                 self.stop()\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/moto/core/models.py in wrapper(*args, **kwargs)\r\n     86             self.start(reset=reset)\r\n     87             try:\r\n---> 88                 result = func(*args, **kwargs)\r\n     89             finally:\r\n     90                 self.stop()\r\n\r\n~/projects/oss_third_party/moto_bug/test_bug.py in test_jobdef()\r\n     30         TemplateBody=template_body,\r\n     31         Parameters=params,\r\n---> 32         Capabilities=[\"CAPABILITY_NAMED_IAM\"],\r\n     33     )\r\n     34\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/client.py in _api_call(self, *args, **kwargs)\r\n    314                     \"%s() only accepts keyword arguments.\" % py_operation_name)\r\n    315             # The \"self\" in this scope is referring to the BaseClient.\r\n--> 316             return self._make_api_call(operation_name, kwargs)\r\n    317\r\n    318         _api_call.__name__ = str(py_operation_name)\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/client.py in _make_api_call(self, operation_name, api_params)\r\n    606         }\r\n    607         request_dict = self._convert_to_request_dict(\r\n--> 608             api_params, operation_model, context=request_context)\r\n    609\r\n    610         service_id = self._service_model.service_id.hyphenize()\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/client.py in _convert_to_request_dict(self, api_params, operation_model, context)\r\n    654             api_params, operation_model, context)\r\n    655         request_dict = self._serializer.serialize_to_request(\r\n--> 656             api_params, operation_model)\r\n    657         if not self._client_config.inject_host_prefix:\r\n    658             request_dict.pop('host_prefix', None)\r\n\r\n~/miniconda3/envs/scratch/lib/python3.7/site-packages/botocore/validate.py in serialize_to_request(self, parameters, operation_model)\r\n    295                                                     operation_model.input_shape)\r\n    296             if report.has_errors():\r\n--> 297                 raise ParamValidationError(report=report.generate_report())\r\n    298         return self._serializer.serialize_to_request(parameters,\r\n    299                                                      operation_model)\r\n\r\nParamValidationError: Parameter validation failed:\r\nInvalid type for parameter Parameters[0].ParameterValue, value: 8000, type: <class 'int'>, valid types: <class 'str'>\r\n```\r\nSo the local fix to my MWE isn't really satisfactory. The immediate issue could probably be fixed by making the substitution\r\n```\r\nif int(self.container_properties[\"memory\"]) < 4:\r\n```\r\nin [this line](https://github.com/spulec/moto/blob/master/moto/batch/models.py#L216) of `moto.batch.models`.\r\nHowever, I don't think that will fix the root cause of the problem. I believe the root cause is that CloudFormation parameters of type \"NUMBER\" are not being converted into int or float inside of\r\n[`moto.cloudformation.parsing`](https://github.com/spulec/moto/blob/master/moto/cloudformation/parsing.py) before being passed onto the stack's constituent resources.\r\n\r\nI'm happy to try to fix this and submit a PR but I'm not really sure where to start and would need a few suggestions. or if it would be quicker for a more experiences moto developer to address, that's fine too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3101", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3101/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3101/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3101/events", "html_url": "https://github.com/spulec/moto/issues/3101", "id": 648158945, "node_id": "MDU6SXNzdWU2NDgxNTg5NDU=", "number": 3101, "title": "SQS messages don't contain MessageGroupId and MessageDeduplicationId when sent from batch", "user": {"login": "ryanlchandler", "id": 7116095, "node_id": "MDQ6VXNlcjcxMTYwOTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7116095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ryanlchandler", "html_url": "https://github.com/ryanlchandler", "followers_url": "https://api.github.com/users/ryanlchandler/followers", "following_url": "https://api.github.com/users/ryanlchandler/following{/other_user}", "gists_url": "https://api.github.com/users/ryanlchandler/gists{/gist_id}", "starred_url": "https://api.github.com/users/ryanlchandler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ryanlchandler/subscriptions", "organizations_url": "https://api.github.com/users/ryanlchandler/orgs", "repos_url": "https://api.github.com/users/ryanlchandler/repos", "events_url": "https://api.github.com/users/ryanlchandler/events{/privacy}", "received_events_url": "https://api.github.com/users/ryanlchandler/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-30T13:07:54Z", "updated_at": "2020-07-22T13:07:26Z", "closed_at": "2020-07-22T13:07:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When sending messages in batches to SQS each entry in the batch may contain a MessageGroupId and/or a MessageDeduplicationId that is not getting passed back when receiving the message.  \r\n\r\n\r\nIt looks like responses.py was not pulling the MessageGroupId from the query string when building the entries. \r\n\r\n**responses.py (updated)**\r\n```\r\nfor key, value in self.querystring.items():\r\n            match = re.match(r\"^SendMessageBatchRequestEntry\\.(\\d+)\\.Id\", key)\r\n            if match:\r\n                index = match.group(1)\r\n\r\n                message_attributes = parse_message_attributes(\r\n                    self.querystring,\r\n                    base=\"SendMessageBatchRequestEntry.{}.\".format(index),\r\n                )\r\n\r\n                entries[index] = {\r\n                    \"Id\": value[0],\r\n                    \"MessageBody\": self.querystring.get(\r\n                        \"SendMessageBatchRequestEntry.{}.MessageBody\".format(index)\r\n                    )[0],\r\n                    \"DelaySeconds\": self.querystring.get(\r\n                        \"SendMessageBatchRequestEntry.{}.DelaySeconds\".format(index),\r\n                        [None],\r\n                    )[0],\r\n                    \"MessageAttributes\": message_attributes,\r\n                    \"MessageGroupId\": self.querystring.get(\r\n                        \"SendMessageBatchRequestEntry.{}.MessageGroupId\".format(index)\r\n                    )[0], # <--------- added\r\n                    \"MessageDeduplicationId\": self.querystring.get(\r\n                        \"SendMessageBatchRequestEntry.{}.MessageDeduplicationId\".format(index)\r\n                    )[0] # <--------- added\r\n                }\r\n```\r\n\r\n\r\nAnd models.py needed to be updated to pass the entry's attributes to send_message(...)\r\n\r\n**models.py (updated)**\r\n```\r\n...\r\n        for index, entry in entries.items():\r\n            # Loop through looking for messages\r\n            logging.info(json.dumps(entry))\r\n            message = self.send_message(\r\n                queue_name,\r\n                entry[\"MessageBody\"],\r\n                message_attributes=entry[\"MessageAttributes\"],\r\n                delay_seconds=entry[\"DelaySeconds\"],\r\n                group_id=entry[\"MessageGroupId\"], # <--------- added\r\n                deduplication_id=entry[\"MessageDeduplicationId\"] # <--------- added\r\n            )\r\n            message.user_id = entry[\"Id\"]\r\n...\r\n```\r\n\r\nI'd be happy to put together a PR with these changes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3098", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3098/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3098/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3098/events", "html_url": "https://github.com/spulec/moto/issues/3098", "id": 646655505, "node_id": "MDU6SXNzdWU2NDY2NTU1MDU=", "number": 3098, "title": "Meta - Builds are failing in Server Mode", "user": {"login": "bblommers", "id": 6058517, "node_id": "MDQ6VXNlcjYwNTg1MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6058517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblommers", "html_url": "https://github.com/bblommers", "followers_url": "https://api.github.com/users/bblommers/followers", "following_url": "https://api.github.com/users/bblommers/following{/other_user}", "gists_url": "https://api.github.com/users/bblommers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblommers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblommers/subscriptions", "organizations_url": "https://api.github.com/users/bblommers/orgs", "repos_url": "https://api.github.com/users/bblommers/repos", "events_url": "https://api.github.com/users/bblommers/events{/privacy}", "received_events_url": "https://api.github.com/users/bblommers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "spulec", "id": 292606, "node_id": "MDQ6VXNlcjI5MjYwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/292606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spulec", "html_url": "https://github.com/spulec", "followers_url": "https://api.github.com/users/spulec/followers", "following_url": "https://api.github.com/users/spulec/following{/other_user}", "gists_url": "https://api.github.com/users/spulec/gists{/gist_id}", "starred_url": "https://api.github.com/users/spulec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spulec/subscriptions", "organizations_url": "https://api.github.com/users/spulec/orgs", "repos_url": "https://api.github.com/users/spulec/repos", "events_url": "https://api.github.com/users/spulec/events{/privacy}", "received_events_url": "https://api.github.com/users/spulec/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "spulec", "id": 292606, "node_id": "MDQ6VXNlcjI5MjYwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/292606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spulec", "html_url": "https://github.com/spulec", "followers_url": "https://api.github.com/users/spulec/followers", "following_url": "https://api.github.com/users/spulec/following{/other_user}", "gists_url": "https://api.github.com/users/spulec/gists{/gist_id}", "starred_url": "https://api.github.com/users/spulec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spulec/subscriptions", "organizations_url": "https://api.github.com/users/spulec/orgs", "repos_url": "https://api.github.com/users/spulec/repos", "events_url": "https://api.github.com/users/spulec/events{/privacy}", "received_events_url": "https://api.github.com/users/spulec/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-06-27T10:32:12Z", "updated_at": "2020-07-03T05:33:12Z", "closed_at": "2020-07-03T00:47:18Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Last successful build: https://travis-ci.org/github/spulec/moto/jobs/702363984\r\nFailing build (example): https://travis-ci.org/github/spulec/moto/jobs/702608025\r\n\r\nFailing test:\r\n```\r\n===================================================================\r\nERROR: test_cognitoidp.test_change_password\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\r\n    self.test(*self.arg)\r\n  File \"/home/travis/build/spulec/moto/moto/core/models.py\", line 98, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/home/travis/build/spulec/moto/tests/test_cognitoidp/test_cognitoidp.py\", line 1224, in test_change_password\r\n    outputs = authentication_flow(conn)\r\n  File \"/home/travis/build/spulec/moto/tests/test_cognitoidp/test_cognitoidp.py\", line 1169, in authentication_flow\r\n    ChallengeResponses={\"USERNAME\": username, \"NEW_PASSWORD\": new_password},\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/botocore/client.py\", line 316, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/botocore/client.py\", line 635, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nResourceNotFoundException: An error occurred (ResourceNotFoundException) when calling the RespondToAuthChallenge operation: b22f073c-53fb-43ef-971c-65c161cd5924\r\n```\r\n\r\nNo changes have been made to our Cognito IDP code in between.\r\n\r\n## Cause:\r\n\r\nA new version of boto3 was released (1.14.11 -> 1.14.12), which depends on a new version of botocore (1.17.11 -> 1.7.12)\r\nBotocore has made a change to the CognitoIDP RespondToAuthChallenge response format:\r\nhttps://github.com/boto/botocore/commit/2300e3a87e2835c93d832ee9c8ec7433cfa7fe18#diff-104dd1e3491647c1ef3da008f40f2abdR1331\r\n\r\nWill continue to investigate", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3094", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3094/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3094/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3094/events", "html_url": "https://github.com/spulec/moto/issues/3094", "id": 646421208, "node_id": "MDU6SXNzdWU2NDY0MjEyMDg=", "number": 3094, "title": "Support Sagemaker Notebook Create, Describe, Delete, List, Start, Stop, Update.", "user": {"login": "jweite", "id": 8495212, "node_id": "MDQ6VXNlcjg0OTUyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8495212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jweite", "html_url": "https://github.com/jweite", "followers_url": "https://api.github.com/users/jweite/followers", "following_url": "https://api.github.com/users/jweite/following{/other_user}", "gists_url": "https://api.github.com/users/jweite/gists{/gist_id}", "starred_url": "https://api.github.com/users/jweite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jweite/subscriptions", "organizations_url": "https://api.github.com/users/jweite/orgs", "repos_url": "https://api.github.com/users/jweite/repos", "events_url": "https://api.github.com/users/jweite/events{/privacy}", "received_events_url": "https://api.github.com/users/jweite/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-26T17:54:01Z", "updated_at": "2020-07-16T14:55:33Z", "closed_at": "2020-07-16T14:55:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I see that porthunt has broken ground on adding Sagemaker support.  Glad to collaborate with them (if they'll be picking their work back up soon).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3090", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3090/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3090/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3090/events", "html_url": "https://github.com/spulec/moto/issues/3090", "id": 645957867, "node_id": "MDU6SXNzdWU2NDU5NTc4Njc=", "number": 3090, "title": "elbv2 create_rule fails with (ValidationError) when calling the CreateRule operation: A condition value must be specified", "user": {"login": "adriank-convoy", "id": 40185566, "node_id": "MDQ6VXNlcjQwMTg1NTY2", "avatar_url": "https://avatars3.githubusercontent.com/u/40185566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adriank-convoy", "html_url": "https://github.com/adriank-convoy", "followers_url": "https://api.github.com/users/adriank-convoy/followers", "following_url": "https://api.github.com/users/adriank-convoy/following{/other_user}", "gists_url": "https://api.github.com/users/adriank-convoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/adriank-convoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adriank-convoy/subscriptions", "organizations_url": "https://api.github.com/users/adriank-convoy/orgs", "repos_url": "https://api.github.com/users/adriank-convoy/repos", "events_url": "https://api.github.com/users/adriank-convoy/events{/privacy}", "received_events_url": "https://api.github.com/users/adriank-convoy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-26T02:14:02Z", "updated_at": "2020-06-27T08:42:33Z", "closed_at": "2020-06-27T08:42:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\n## Summary\r\n\r\nCall to elbv2 `create_rule()` method fails when specifying a Condition with a PathPatterConfig:\r\n```\r\n\"PathPatternConfig\": {\"Values\": [\"/test_repo/test_branch/*\"]}\r\n```\r\n\r\n## Error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"convoyml/test/bug_example.py\", line 68, in <module>\r\n    bug_repro()\r\n  File \"/Users/akreuziger/virtualenvs/py3/lib/python3.7/site-packages/moto/core/models.py\", line 88, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/Users/akreuziger/virtualenvs/py3/lib/python3.7/site-packages/moto/core/models.py\", line 88, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"convoyml/test/bug_example.py\", line 54, in bug_repro\r\n    \"ContentType\": \"application/json\",\r\n  File \"/Users/akreuziger/virtualenvs/py3/lib/python3.7/site-packages/botocore/client.py\", line 276, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/akreuziger/virtualenvs/py3/lib/python3.7/site-packages/botocore/client.py\", line 586, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (ValidationError) when calling the CreateRule operation: A condition value must be specified\r\n```\r\n\r\n\r\n## Script to reproduce\r\n```python\r\nimport os\r\nfrom moto import (\r\n    mock_ec2,\r\n    mock_elbv2,\r\n)\r\nimport boto3\r\n\r\n\r\n@mock_ec2\r\n@mock_elbv2\r\ndef bug_repro():\r\n    # VPC\r\n    vpc_id = boto3.client(\"ec2\").create_vpc(CidrBlock=\"10.10.0.0/16\")[\"Vpc\"][\"VpcId\"]\r\n    # Subnet for the load balancer\r\n    subnet_id = boto3.client(\"ec2\").create_subnet(\r\n        CidrBlock=\"10.10.0.0/24\", VpcId=vpc_id\r\n    )[\"Subnet\"][\"SubnetId\"]\r\n    # Load balancer\r\n    load_balancer_arn = boto3.client(service_name=\"elbv2\").create_load_balancer(\r\n        Name=\"my-alb\", Subnets=[subnet_id]\r\n    )[\"LoadBalancers\"][0][\"LoadBalancerArn\"]\r\n    # The port 80 HTTP listener\r\n    listener_arn = boto3.client(service_name=\"elbv2\").create_listener(\r\n        LoadBalancerArn=load_balancer_arn,\r\n        Protocol=\"HTTP\",\r\n        Port=80,\r\n        DefaultActions=[\r\n            {\r\n                \"Type\": \"fixed-response\",\r\n                \"FixedResponseConfig\": {\r\n                    \"MessageBody\": \"I AM NOT REAL\",\r\n                    \"StatusCode\": \"200\",\r\n                    \"ContentType\": \"application/json\",\r\n                },\r\n            }\r\n        ],\r\n    )[\"Listeners\"][0][\"ListenerArn\"]\r\n    # rule\r\n    boto3.client(service_name=\"elbv2\").create_rule(\r\n        ListenerArn=listener_arn,\r\n        Conditions=[\r\n            {\r\n                \"Field\": \"path-pattern\",\r\n                \"PathPatternConfig\": {\"Values\": [\"/test_repo/test_branch/*\"]},\r\n            }\r\n        ],\r\n        Priority=1,\r\n        Actions=[\r\n            {\r\n                \"Type\": \"fixed-response\",\r\n                \"FixedResponseConfig\": {\r\n                    \"MessageBody\": \"NOPE =/\",\r\n                    \"StatusCode\": \"200\",\r\n                    \"ContentType\": \"application/json\",\r\n                },\r\n            },\r\n        ],\r\n    )\r\n\r\n\r\n# Suggested by the moto documentation to ensure there's no chance\r\n# of accidentally modifying real resources\r\nos.environ[\"AWS_ACCESS_KEY_ID\"] = \"test\"\r\nos.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"test\"\r\nos.environ[\"AWS_SECURITY_TOKEN\"] = \"test\"\r\nos.environ[\"AWS_SESSION_TOKEN\"] = \"test\"\r\n\r\nbug_repro()\r\n\r\n```\r\n\r\n## Info\r\nmoto version: 1.3.14\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3087", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3087/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3087/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3087/events", "html_url": "https://github.com/spulec/moto/issues/3087", "id": 644360356, "node_id": "MDU6SXNzdWU2NDQzNjAzNTY=", "number": 3087, "title": "Unable to create dynamodb table", "user": {"login": "mdavis-xyz", "id": 7035647, "node_id": "MDQ6VXNlcjcwMzU2NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7035647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdavis-xyz", "html_url": "https://github.com/mdavis-xyz", "followers_url": "https://api.github.com/users/mdavis-xyz/followers", "following_url": "https://api.github.com/users/mdavis-xyz/following{/other_user}", "gists_url": "https://api.github.com/users/mdavis-xyz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdavis-xyz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdavis-xyz/subscriptions", "organizations_url": "https://api.github.com/users/mdavis-xyz/orgs", "repos_url": "https://api.github.com/users/mdavis-xyz/repos", "events_url": "https://api.github.com/users/mdavis-xyz/events{/privacy}", "received_events_url": "https://api.github.com/users/mdavis-xyz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/spulec/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-24T06:39:37Z", "updated_at": "2020-06-30T22:45:54Z", "closed_at": "2020-06-30T22:45:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm new to moto. I was able to use moto with S3 without hassle. That was seamless. But I can't figure out this.\r\n\r\n# Steps to reproduce\r\n\r\n`pip install moto`. The latest via `pip` is 1.3.14\r\n\r\n```\r\nfrom moto import mock_dynamodb\r\n\r\n@mock_dynamodb\r\ndef test_get_latest_price():\r\n    table_name = 'fake-price-table'\r\n\r\n    # create a fake table to write to\r\n    client = boto3.client('dynamodb', region_name='ap-southeast-2')\r\n    response = client.create_table(\r\n        TableName=table_name,\r\n        AttributeDefinitions=[\r\n            {\r\n                'AttributeName': 'regionid',\r\n                'AttributeType': 'S'\r\n            },\r\n            {\r\n                'AttributeName': 'time_made',\r\n                'AttributeType': 'N'\r\n            },\r\n        ],\r\n        KeySchema=[\r\n            {\r\n                'AttributeName': 'regionid',\r\n                'KeyType': 'HASH'\r\n            },\r\n            {\r\n                'AttributeName': 'time_made',\r\n                'KeyType': 'RANGE'\r\n            },\r\n        ],\r\n        BillingMode='PAY_PER_REQUEST'\r\n    )\r\n```\r\n\r\n# Expected Result\r\n\r\nCode executes successfully\r\n\r\n# Actual result \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"dynamo.py\", line 114, in <module>\r\n    test_get_latest_price()\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/moto/core/models.py\", line 88, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"dynamo.py\", line 66, in test_get_latest_price\r\n    BillingMode='PAY_PER_REQUEST'\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/client.py\", line 316, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/client.py\", line 622, in _make_api_call\r\n    operation_model, request_dict, request_context)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/client.py\", line 641, in _make_request\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/endpoint.py\", line 102, in make_request\r\n    return self._send_request(request_dict, operation_model)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/endpoint.py\", line 137, in _send_request\r\n    success_response, exception):\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/endpoint.py\", line 256, in _needs_retry\r\n    caught_exception=caught_exception, request_dict=request_dict)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/retryhandler.py\", line 183, in __call__\r\n    if self._checker(attempts, response, caught_exception):\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/retryhandler.py\", line 251, in __call__\r\n    caught_exception)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/retryhandler.py\", line 269, in _should_retry\r\n    return self._checker(attempt_number, response, caught_exception)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/retryhandler.py\", line 317, in __call__\r\n    caught_exception)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/retryhandler.py\", line 223, in __call__\r\n    attempt_number, caught_exception)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/retryhandler.py\", line 359, in _check_caught_exception\r\n    raise caught_exception\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/endpoint.py\", line 197, in _do_get_response\r\n    responses = self._event_emitter.emit(event_name, request=request)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/hooks.py\", line 356, in emit\r\n    return self._emitter.emit(aliased_event_name, **kwargs)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/hooks.py\", line 228, in emit\r\n    return self._emit(event_name, kwargs)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/botocore/hooks.py\", line 211, in _emit\r\n    response = handler(**kwargs)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/moto/core/models.py\", line 272, in __call__\r\n    request, request.url, request.headers\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/moto/core/responses.py\", line 197, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/moto/core/responses.py\", line 295, in _dispatch\r\n    return self.call_action()\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/moto/dynamodb/responses.py\", line 30, in call_action\r\n    response = getattr(self, endpoint)()\r\n  File \"/home/ec2-user/.local/lib/python3.6/site-packages/moto/dynamodb/responses.py\", line 64, in create_table\r\n    hash_key = key_schema[\"HashKeyElement\"]\r\nTypeError: list indices must be integers or slices, not str\r\n```\r\n\r\n# Notes\r\n\r\n* When I remove the `mock_dynamodb` decorator and do a real API call, it works\r\n* Issue #3066 sounds related, but actually that's about secondary indexes, which I'm not using here", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3084", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3084/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3084/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3084/events", "html_url": "https://github.com/spulec/moto/issues/3084", "id": 642642374, "node_id": "MDU6SXNzdWU2NDI2NDIzNzQ=", "number": 3084, "title": "if_not_exists() in UpdateExpression causes remainder of the expression to be ignored", "user": {"login": "flayman", "id": 233266, "node_id": "MDQ6VXNlcjIzMzI2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/233266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flayman", "html_url": "https://github.com/flayman", "followers_url": "https://api.github.com/users/flayman/followers", "following_url": "https://api.github.com/users/flayman/following{/other_user}", "gists_url": "https://api.github.com/users/flayman/gists{/gist_id}", "starred_url": "https://api.github.com/users/flayman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flayman/subscriptions", "organizations_url": "https://api.github.com/users/flayman/orgs", "repos_url": "https://api.github.com/users/flayman/repos", "events_url": "https://api.github.com/users/flayman/events{/privacy}", "received_events_url": "https://api.github.com/users/flayman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-21T21:14:19Z", "updated_at": "2020-06-22T09:01:51Z", "closed_at": "2020-06-22T09:01:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm using moto==1.3.14 with python 3.8.3. I've found some odd behaviour when implementing a DynamoDB atomic counter that begins at zero. Doing this requires the SET command in the UpdateExpression argument to Table.update_item(). I note that this is in fact the recommended way to implement a counter. The problem is that you must use the if_not_exists() function if you want the initial value to be set to something other than zero. I'd like a counter to return its first value as zero, so I start it at -1 and add 1. My arguments look like this:\r\n\r\n```\r\nKey= my_key_goes_here,\r\nUpdateExpression=\"SET #c = if_not_exists(#c, :neg) + :n\",\r\nExpressionAttributeNames={'#c': 'my_attribute'},\r\nExpressionAttributeValues={':n': 1, ':neg': -1},\r\nReturnValues=\"ALL_NEW\"\r\n```\r\n\r\nI find that this works with a real boto3 resource, but the moto mocked resource seems to ignore the addition operation that comes after the if_not_exists function, so that I always get back `Decimal(-1)` for the attribute. \r\n\r\nI tried reversing the arguments with `UpdateExpression=\"SET #c = :n + if_not_exists(#c, :neg)\"`. The result was even stranger. Now I get back a string that looks like this:\r\n\r\n```\r\n:n+if_not_exists(my_counter, :neg)\r\n```\r\n\r\nI found some earlier issues reported where strings were coming back when if_not_exists was used in an expression. It seems this can still happen under certain circumstances.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3080", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3080/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3080/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3080/events", "html_url": "https://github.com/spulec/moto/issues/3080", "id": 641743626, "node_id": "MDU6SXNzdWU2NDE3NDM2MjY=", "number": 3080, "title": "test_streaming_upload_from_file_to_presigned_url fails", "user": {"login": "dawngerpony", "id": 161613, "node_id": "MDQ6VXNlcjE2MTYxMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/161613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dawngerpony", "html_url": "https://github.com/dawngerpony", "followers_url": "https://api.github.com/users/dawngerpony/followers", "following_url": "https://api.github.com/users/dawngerpony/following{/other_user}", "gists_url": "https://api.github.com/users/dawngerpony/gists{/gist_id}", "starred_url": "https://api.github.com/users/dawngerpony/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dawngerpony/subscriptions", "organizations_url": "https://api.github.com/users/dawngerpony/orgs", "repos_url": "https://api.github.com/users/dawngerpony/repos", "events_url": "https://api.github.com/users/dawngerpony/events{/privacy}", "received_events_url": "https://api.github.com/users/dawngerpony/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-19T06:40:05Z", "updated_at": "2020-06-19T13:17:57Z", "closed_at": "2020-06-19T10:44:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Steps to reproduce\r\n\r\n`make test` on a fresh copy of `master`.\r\n\r\n# Expected result\r\n\r\nAll tests pass.\r\n\r\n# Actual result\r\n\r\nOne S3 test (`test_streaming_upload_from_file_to_presigned_url`) produces an error:\r\n\r\n```\r\nERROR: tests.test_s3.test_s3.test_streaming_upload_from_file_to_presigned_url\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/Users/dawn.james/dev/github.com/dawngerpony/moto/.venv/lib/python3.7/site-packages/nose/case.py\", line 198, in runTest\r\n    self.test(*self.arg)\r\n  File \"/Users/dawn.james/dev/github.com/dawngerpony/moto/moto/core/models.py\", line 98, in wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/Users/dawn.james/dev/github.com/dawngerpony/moto/tests/test_s3/test_s3.py\", line 1048, in test_streaming_upload_from_file_to_presigned_url\r\n    bucket.create()\r\n  File \"/Users/dawn.james/dev/github.com/dawngerpony/moto/.venv/lib/python3.7/site-packages/boto3-1.14.6-py3.7.egg/boto3/resources/factory.py\", line 520, in do_action\r\n    response = action(self, *args, **kwargs)\r\n  File \"/Users/dawn.james/dev/github.com/dawngerpony/moto/.venv/lib/python3.7/site-packages/boto3-1.14.6-py3.7.egg/boto3/resources/action.py\", line 83, in __call__\r\n    response = getattr(parent.meta.client, operation_name)(*args, **params)\r\n  File \"/Users/dawn.james/dev/github.com/dawngerpony/moto/.venv/lib/python3.7/site-packages/botocore-1.17.6-py3.7.egg/botocore/client.py\", line 316, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/dawn.james/dev/github.com/dawngerpony/moto/.venv/lib/python3.7/site-packages/botocore-1.17.6-py3.7.egg/botocore/client.py\", line 635, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.exceptions.ClientError: An error occurred (IllegalLocationConstraintException) when calling the CreateBucket operation: The unspecified location constraint is incompatible for the region specific endpoint this request was sent to.\r\n```\r\n\r\n# Notes\r\n\r\n* The fix appears to be simple, I have included it in #3079, but I thought I should raise a separate issue anyway.\r\n* I'm not sure why this is happening today, I'm pretty sure it wasn't happening yesterday, but the fix seems harmless so I see no problem in making it.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3078", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3078/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3078/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3078/events", "html_url": "https://github.com/spulec/moto/issues/3078", "id": 641513774, "node_id": "MDU6SXNzdWU2NDE1MTM3NzQ=", "number": 3078, "title": "mock_cognitoidp idtoken is missing AWS oauth headers", "user": {"login": "Alladinsane", "id": 12090989, "node_id": "MDQ6VXNlcjEyMDkwOTg5", "avatar_url": "https://avatars2.githubusercontent.com/u/12090989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alladinsane", "html_url": "https://github.com/Alladinsane", "followers_url": "https://api.github.com/users/Alladinsane/followers", "following_url": "https://api.github.com/users/Alladinsane/following{/other_user}", "gists_url": "https://api.github.com/users/Alladinsane/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alladinsane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alladinsane/subscriptions", "organizations_url": "https://api.github.com/users/Alladinsane/orgs", "repos_url": "https://api.github.com/users/Alladinsane/repos", "events_url": "https://api.github.com/users/Alladinsane/events{/privacy}", "received_events_url": "https://api.github.com/users/Alladinsane/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-18T19:59:27Z", "updated_at": "2020-07-04T01:51:35Z", "closed_at": "2020-07-04T01:51:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am attempting to test a function that accepts a Cognito id token, fetches the public jwk for a cognito userpool, uses that key to decode and verify the token and extract the claims. It's based on sample code from an AWS tutorial. It works in a real environment with genuine Cognito id tokens, but I haven't yet gotten my moto unittests to work.\r\n\r\nI have attempted to incorporate the test_token_verification example in test_cognitoidp.\r\n\r\nThe idtoken I am generating with my mock_cognito userpool and decoding with the provided jwks-public.json only has two headers: \r\n\r\n`{'alg': 'RS256', 'typ': 'JWT'}\r\n\r\nIn order to verify the cognito id token and extract claims, the code from AWS expects a 'kid' header, which appears in the jwks-public.json but is not in the headers.\r\n\r\nFrom the token verification function:\r\n\r\n> headers = jwt.get_unverified_headers(token)\r\n        kid = headers['kid']\r\n        \r\n\r\nI seem to be encountering an issue related to the open PR [https://github.com/spulec/moto/pull/1689](https://github.com/spulec/moto/pull/1689)\r\n\r\nI've attempted to implement this fix in my own unittest, building my own payload and headers and signing them with the dummy private key from this repo, but didn't make a lot of headway.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3068", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3068/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3068/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3068/events", "html_url": "https://github.com/spulec/moto/issues/3068", "id": 637755073, "node_id": "MDU6SXNzdWU2Mzc3NTUwNzM=", "number": 3068, "title": "Make it work with terraform", "user": {"login": "benkeil", "id": 16204452, "node_id": "MDQ6VXNlcjE2MjA0NDUy", "avatar_url": "https://avatars3.githubusercontent.com/u/16204452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benkeil", "html_url": "https://github.com/benkeil", "followers_url": "https://api.github.com/users/benkeil/followers", "following_url": "https://api.github.com/users/benkeil/following{/other_user}", "gists_url": "https://api.github.com/users/benkeil/gists{/gist_id}", "starred_url": "https://api.github.com/users/benkeil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benkeil/subscriptions", "organizations_url": "https://api.github.com/users/benkeil/orgs", "repos_url": "https://api.github.com/users/benkeil/repos", "events_url": "https://api.github.com/users/benkeil/events{/privacy}", "received_events_url": "https://api.github.com/users/benkeil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-12T13:35:38Z", "updated_at": "2020-08-03T06:18:42Z", "closed_at": "2020-08-03T06:18:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version: I use the latest master.\r\n\r\nIt seems that you cant use Terraform with Moto. I use a local state and as soon as you have a state (`terraform.tfstate`) and try to apply again, everything is crashing. When you remove the file it works again.\r\n\r\nIt would be nice to use Moto together with terraform and terratest as THE solution to test serverless applications locally.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3066", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3066/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3066/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3066/events", "html_url": "https://github.com/spulec/moto/issues/3066", "id": 637750355, "node_id": "MDU6SXNzdWU2Mzc3NTAzNTU=", "number": 3066, "title": "Error: Cant create DynamoDB table", "user": {"login": "benkeil", "id": 16204452, "node_id": "MDQ6VXNlcjE2MjA0NDUy", "avatar_url": "https://avatars3.githubusercontent.com/u/16204452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benkeil", "html_url": "https://github.com/benkeil", "followers_url": "https://api.github.com/users/benkeil/followers", "following_url": "https://api.github.com/users/benkeil/following{/other_user}", "gists_url": "https://api.github.com/users/benkeil/gists{/gist_id}", "starred_url": "https://api.github.com/users/benkeil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benkeil/subscriptions", "organizations_url": "https://api.github.com/users/benkeil/orgs", "repos_url": "https://api.github.com/users/benkeil/repos", "events_url": "https://api.github.com/users/benkeil/events{/privacy}", "received_events_url": "https://api.github.com/users/benkeil/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-12T13:27:56Z", "updated_at": "2020-06-14T08:25:02Z", "closed_at": "2020-06-13T23:59:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version: I used the actual master.\r\n\r\nThe terraform code:\r\n\r\n```\r\nresource \"aws_dynamodb_table\" \"grades\" {\r\n  name         = \"${var.service_name}.grades\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key     = \"id\"\r\n  range_key    = \"reference\"\r\n\r\n  attribute {\r\n    name = \"id\"\r\n    type = \"S\"\r\n  }\r\n\r\n  attribute {\r\n    name = \"reference\"\r\n    type = \"S\"\r\n  }\r\n\r\n  global_secondary_index {\r\n    name            = \"byReference\"\r\n    hash_key        = \"reference\"\r\n    projection_type = \"ALL\"\r\n  }\r\n\r\n  lifecycle {\r\n    prevent_destroy = true\r\n  }\r\n\r\n  tags = local.tags\r\n}\r\n```\r\n\r\nThe debug output of terraform:\r\n\r\n```\r\n2020-06-12T14:48:02.175+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: 2020/06/12 14:48:02 [DEBUG] [aws-sdk-go] {\"Table\": {\"AttributeDefinitions\": [{\"AttributeName\": \"reference\", \"AttributeType\": \"S\"}, {\"AttributeName\": \"id\", \"AttributeType\": \"S\"}], \"ProvisionedThroughput\": {\"WriteCapacityUnits\": 10, \"ReadCapacityUnits\": 10, \"NumberOfDecreasesToday\": 0}, \"TableSizeBytes\": 0, \"TableName\": \"componenttest-widget-service.grades\", \"TableStatus\": \"ACTIVE\", \"TableArn\": \"arn:aws:dynamodb:us-east-1:123456789011:table/componenttest-widget-service.grades\", \"KeySchema\": [{\"AttributeName\": \"id\", \"KeyType\": \"HASH\"}, {\"AttributeName\": \"reference\", \"KeyType\": \"RANGE\"}], \"ItemCount\": 0, \"CreationDateTime\": 1591966082.035368, \"GlobalSecondaryIndexes\": [{\"IndexName\": \"byReference\", \"KeySchema\": [{\"AttributeName\": \"reference\", \"KeyType\": \"HASH\"}], \"Projection\": {\"ProjectionType\": \"ALL\"}, \"IndexStatus\": \"ACTIVE\"}], \"LocalSecondaryIndexes\": []}}\r\n```\r\n\r\n```\r\n runtime error: invalid memory address or nil pointer dereference\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: [signal SIGSEGV: segmentation violation code=0x1 addr=0x20 pc=0x4ea19ab]\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4:\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: goroutine 134 [running]:\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/terraform-providers/terraform-provider-aws/aws.flattenAwsDynamoDbTableResource(0xc001406b60, 0xc0012eec00, 0xc000652270, 0x0)\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/aws/structure.go:4149 +0x105b\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/terraform-providers/terraform-provider-aws/aws.resourceAwsDynamoDbTableRead(0xc001406b60, 0x5b37620, 0xc000301900, 0x64b2400, 0xc000e7fd20)\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/aws/resource_aws_dynamodb_table.go:665 +0x330\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/terraform-providers/terraform-provider-aws/aws.resourceAwsDynamoDbTableCreate(0xc001406b60, 0x5b37620, 0xc000301900, 0x2, 0xa406520)\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/aws/resource_aws_dynamodb_table.go:439 +0x1548\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/hashicorp/terraform-plugin-sdk/helper/schema.(*Resource).Apply(0xc000566000, 0xc000a346e0, 0xc0010007e0, 0x5b37620, 0xc000301900, 0xc0008c0701, 0xc000d52990, 0xc0008c0790)\r\n2020-06-12T15:26:43.227+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/github.com/hashicorp/terraform-plugin-sdk/helper/schema/resource.go:310 +0x365\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/hashicorp/terraform-plugin-sdk/helper/schema.(*Provider).Apply(0xc000152180, 0xc000df59c8, 0xc000a346e0, 0xc0010007e0, 0xc000881828, 0xc0011aa2e0, 0x5946b60)\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/github.com/hashicorp/terraform-plugin-sdk/helper/schema/provider.go:294 +0x99\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/hashicorp/terraform-plugin-sdk/internal/helper/plugin.(*GRPCProviderServer).ApplyResourceChange(0xc000595138, 0x702f440, 0xc000b0df80, 0xc001406540, 0xc000595138, 0xc000b0df80, 0xc000e17b30)\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/github.com/hashicorp/terraform-plugin-sdk/internal/helper/plugin/grpc_provider.go:885 +0x8b4\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: github.com/hashicorp/terraform-plugin-sdk/internal/tfplugin5._Provider_ApplyResourceChange_Handler(0x64da560, 0xc000595138, 0x702f440, 0xc000b0df80, 0xc001178ba0, 0x0, 0x702f440, 0xc000b0df80, 0xc001366b00, 0x562)\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/github.com/hashicorp/terraform-plugin-sdk/internal/tfplugin5/tfplugin5.pb.go:3305 +0x217\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: google.golang.org/grpc.(*Server).processUnaryRPC(0xc0008a9680, 0x7051c00, 0xc000e0e480, 0xc0012ee100, 0xc000958cc0, 0xa3d9780, 0x0, 0x0, 0x0)\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/google.golang.org/grpc/server.go:1024 +0x4f4\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: google.golang.org/grpc.(*Server).handleStream(0xc0008a9680, 0x7051c00, 0xc000e0e480, 0xc0012ee100, 0x0)\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/google.golang.org/grpc/server.go:1313 +0xd97\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: google.golang.org/grpc.(*Server).serveStreams.func1.1(0xc00013a0e0, 0xc0008a9680, 0x7051c00, 0xc000e0e480, 0xc0012ee100)\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/google.golang.org/grpc/server.go:722 +0xbb\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: created by google.golang.org/grpc.(*Server).serveStreams.func1\r\n2020-06-12T15:26:43.228+0200 [DEBUG] plugin.terraform-provider-aws_v2.66.0_x4: \t/opt/teamcity-agent/work/5d79fe75d4460a2f/src/github.com/terraform-providers/terraform-provider-aws/vendor/google.golang.org/grpc/server.go:720 +0xa1\r\n```\r\n\r\nThe problem seems to be the global secondary index.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3056", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3056/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3056/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3056/events", "html_url": "https://github.com/spulec/moto/issues/3056", "id": 634799358, "node_id": "MDU6SXNzdWU2MzQ3OTkzNTg=", "number": 3056, "title": "SecretsManager missing pop() override on SecretsStore when using delete_secret with \"ForceDeleteWithoutRecovery=True\"", "user": {"login": "kristopherchun", "id": 1541157, "node_id": "MDQ6VXNlcjE1NDExNTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1541157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kristopherchun", "html_url": "https://github.com/kristopherchun", "followers_url": "https://api.github.com/users/kristopherchun/followers", "following_url": "https://api.github.com/users/kristopherchun/following{/other_user}", "gists_url": "https://api.github.com/users/kristopherchun/gists{/gist_id}", "starred_url": "https://api.github.com/users/kristopherchun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kristopherchun/subscriptions", "organizations_url": "https://api.github.com/users/kristopherchun/orgs", "repos_url": "https://api.github.com/users/kristopherchun/repos", "events_url": "https://api.github.com/users/kristopherchun/events{/privacy}", "received_events_url": "https://api.github.com/users/kristopherchun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-08T17:23:32Z", "updated_at": "2020-06-10T09:22:59Z", "closed_at": "2020-06-10T09:22:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "SecretsManager delete_secret returns \"An error occurred (ResourceNotFoundException) when calling the DeleteSecret operation: Secrets Manager can't find the specified secret.\" when passing an ARN as SecretId and \"ForceDeleteWithoutRecovery=True\"\r\n\r\nThe reason for this is that when **ForceDeleteWithoutRecovery** is set to true, it tries to \"pop\" off the secret id without running get_secret_name_from_arn to get the correct secret id.\r\n\r\n```\r\nsecrets_manager.delete_secret(\r\n    SecretId='arn:aws:secretsmanager:us-west-2:1234567890:secret:2d33b720-68cb-4ee1-a804-ee4ad4357c9a-CxruW',\r\n    ForceDeleteWithoutRecovery=True\r\n)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3055", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3055/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3055/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3055/events", "html_url": "https://github.com/spulec/moto/issues/3055", "id": 634764442, "node_id": "MDU6SXNzdWU2MzQ3NjQ0NDI=", "number": 3055, "title": "DynamoDB2 global secondary indexes don't respect KEYS_ONLY projection type", "user": {"login": "mfogel", "id": 69902, "node_id": "MDQ6VXNlcjY5OTAy", "avatar_url": "https://avatars0.githubusercontent.com/u/69902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfogel", "html_url": "https://github.com/mfogel", "followers_url": "https://api.github.com/users/mfogel/followers", "following_url": "https://api.github.com/users/mfogel/following{/other_user}", "gists_url": "https://api.github.com/users/mfogel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfogel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfogel/subscriptions", "organizations_url": "https://api.github.com/users/mfogel/orgs", "repos_url": "https://api.github.com/users/mfogel/repos", "events_url": "https://api.github.com/users/mfogel/events{/privacy}", "received_events_url": "https://api.github.com/users/mfogel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-08T16:32:45Z", "updated_at": "2020-07-04T01:53:45Z", "closed_at": "2020-07-04T01:53:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It appears moto does not respect the [`ProjectionType`](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Projection.html) of a global secondary index. At least, it doesn't seem to respect it when it's set to `KEYS_ONLY`.\r\n\r\nHere's a failing test case that demonstrates the issue. This passes when run against a real dynamo table.\r\n\r\n```python\r\n@mock_dynamodb2\r\ndef test_gsi_keys_only():\r\n    table_schema = {\r\n        \"KeySchema\": [{\"AttributeName\": \"partitionKey\", \"KeyType\": \"HASH\"}],\r\n        \"GlobalSecondaryIndexes\": [\r\n            {\r\n                \"IndexName\": \"GSI-K1\",\r\n                \"KeySchema\": [\r\n                    {\"AttributeName\": \"gsiK1PartitionKey\", \"KeyType\": \"HASH\"},\r\n                    {\"AttributeName\": \"gsiK1SortKey\", \"KeyType\": \"RANGE\"},\r\n                ],\r\n                \"Projection\": {\"ProjectionType\": \"KEYS_ONLY\",},\r\n            }\r\n        ],\r\n        \"AttributeDefinitions\": [\r\n            {\"AttributeName\": \"partitionKey\", \"AttributeType\": \"S\"},\r\n            {\"AttributeName\": \"gsiK1PartitionKey\", \"AttributeType\": \"S\"},\r\n            {\"AttributeName\": \"gsiK1SortKey\", \"AttributeType\": \"S\"},\r\n        ],\r\n    }\r\n\r\n    item = {\r\n        \"partitionKey\": \"pk-1\",\r\n        \"gsiK1PartitionKey\": \"gsi-pk\",\r\n        \"gsiK1SortKey\": \"gsi-sk\",\r\n        \"someAttribute\": \"lore ipsum\",\r\n    }\r\n\r\n    dynamodb = boto3.resource(\"dynamodb\", region_name=\"us-east-1\")\r\n    dynamodb.create_table(\r\n        TableName=\"test-table\", BillingMode=\"PAY_PER_REQUEST\", **table_schema\r\n    )\r\n    table = dynamodb.Table(\"test-table\")\r\n    table.put_item(Item=item)\r\n\r\n    items = table.query(\r\n        KeyConditionExpression=Key(\"gsiK1PartitionKey\").eq(\"gsi-pk\"),\r\n        IndexName=\"GSI-K1\",\r\n    )[\"Items\"]\r\n    items.should.have.length_of(1)\r\n    items[0].shouldnt.have.key(\"someAttribute\")\r\n```\r\n\r\nLet me know if you need any more info & thanks again for this kick-ass library. This lib has made my AWS-based projects so much better.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3048", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3048/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3048/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3048/events", "html_url": "https://github.com/spulec/moto/issues/3048", "id": 630147032, "node_id": "MDU6SXNzdWU2MzAxNDcwMzI=", "number": 3048, "title": "CloudFormation support for AWS::Events::EventBus", "user": {"login": "harrydaniels-IW", "id": 60970762, "node_id": "MDQ6VXNlcjYwOTcwNzYy", "avatar_url": "https://avatars0.githubusercontent.com/u/60970762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harrydaniels-IW", "html_url": "https://github.com/harrydaniels-IW", "followers_url": "https://api.github.com/users/harrydaniels-IW/followers", "following_url": "https://api.github.com/users/harrydaniels-IW/following{/other_user}", "gists_url": "https://api.github.com/users/harrydaniels-IW/gists{/gist_id}", "starred_url": "https://api.github.com/users/harrydaniels-IW/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harrydaniels-IW/subscriptions", "organizations_url": "https://api.github.com/users/harrydaniels-IW/orgs", "repos_url": "https://api.github.com/users/harrydaniels-IW/repos", "events_url": "https://api.github.com/users/harrydaniels-IW/events{/privacy}", "received_events_url": "https://api.github.com/users/harrydaniels-IW/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-03T16:32:48Z", "updated_at": "2020-06-06T10:49:12Z", "closed_at": "2020-06-06T10:31:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Feature Request\r\n\r\nHi, I'm trying to mock the creation of an AWS EventBus using Serverless framework and local stack, however it seems there is no Moto CloudFormation support for AWS::Events::EventBus resources.\r\n\r\n### Serverless.yml:\r\n```\r\nresources:\r\n  Resources:\r\n    EventBus:\r\n        Type: AWS::Events::EventBus\r\n        Properties: \r\n          Name: New-Event-Bus\r\n```\r\n\r\nLocalStack uses the package: moto-ext>=1.3.15.12.\r\n\r\n ## Expected Results:\r\n\r\nOn deployment a new EventBus called \"New-Event-Bus\" is created.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3046", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3046/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3046/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3046/events", "html_url": "https://github.com/spulec/moto/issues/3046", "id": 630051143, "node_id": "MDU6SXNzdWU2MzAwNTExNDM=", "number": 3046, "title": "DynamoDB - BatchGetItem should throw an error when requesting more than 100 items", "user": {"login": "bblommers", "id": 6058517, "node_id": "MDQ6VXNlcjYwNTg1MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6058517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblommers", "html_url": "https://github.com/bblommers", "followers_url": "https://api.github.com/users/bblommers/followers", "following_url": "https://api.github.com/users/bblommers/following{/other_user}", "gists_url": "https://api.github.com/users/bblommers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblommers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblommers/subscriptions", "organizations_url": "https://api.github.com/users/bblommers/orgs", "repos_url": "https://api.github.com/users/bblommers/repos", "events_url": "https://api.github.com/users/bblommers/events{/privacy}", "received_events_url": "https://api.github.com/users/bblommers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-03T14:35:58Z", "updated_at": "2020-06-12T01:52:37Z", "closed_at": "2020-06-12T01:52:37Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Docs: \r\nhttps://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.batch_get_item\r\n\r\n> If you request more than 100 items, BatchGetItem returns a ValidationException with the message \"Too many items requested for the BatchGetItem call.\"\r\n\r\nThe docs fail to mention that there are two different use cases: request more than 100 keys for a single table, or request more than a 100 keys across all tables. DDB throws different error messages for both scenarios.\r\n\r\nPR that handles both cases incoming shortly.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3044", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3044/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3044/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3044/events", "html_url": "https://github.com/spulec/moto/issues/3044", "id": 629611667, "node_id": "MDU6SXNzdWU2Mjk2MTE2Njc=", "number": 3044, "title": "EventSourceMapping cloudformation", "user": {"login": "gmcrocetti", "id": 24530683, "node_id": "MDQ6VXNlcjI0NTMwNjgz", "avatar_url": "https://avatars3.githubusercontent.com/u/24530683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmcrocetti", "html_url": "https://github.com/gmcrocetti", "followers_url": "https://api.github.com/users/gmcrocetti/followers", "following_url": "https://api.github.com/users/gmcrocetti/following{/other_user}", "gists_url": "https://api.github.com/users/gmcrocetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmcrocetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmcrocetti/subscriptions", "organizations_url": "https://api.github.com/users/gmcrocetti/orgs", "repos_url": "https://api.github.com/users/gmcrocetti/repos", "events_url": "https://api.github.com/users/gmcrocetti/events{/privacy}", "received_events_url": "https://api.github.com/users/gmcrocetti/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-03T00:56:06Z", "updated_at": "2020-06-14T15:39:55Z", "closed_at": "2020-06-14T15:03:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After somer research I noticed there's the model `EventSourceMapping` has no support for cloudformation's actions. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3042", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3042/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3042/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3042/events", "html_url": "https://github.com/spulec/moto/issues/3042", "id": 629607551, "node_id": "MDU6SXNzdWU2Mjk2MDc1NTE=", "number": 3042, "title": "EventsRule Cloudformation's update", "user": {"login": "gmcrocetti", "id": 24530683, "node_id": "MDQ6VXNlcjI0NTMwNjgz", "avatar_url": "https://avatars3.githubusercontent.com/u/24530683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmcrocetti", "html_url": "https://github.com/gmcrocetti", "followers_url": "https://api.github.com/users/gmcrocetti/followers", "following_url": "https://api.github.com/users/gmcrocetti/following{/other_user}", "gists_url": "https://api.github.com/users/gmcrocetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmcrocetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmcrocetti/subscriptions", "organizations_url": "https://api.github.com/users/gmcrocetti/orgs", "repos_url": "https://api.github.com/users/gmcrocetti/repos", "events_url": "https://api.github.com/users/gmcrocetti/events{/privacy}", "received_events_url": "https://api.github.com/users/gmcrocetti/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-03T00:42:48Z", "updated_at": "2020-06-10T01:46:51Z", "closed_at": "2020-06-03T05:54:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hey guys ! Happy to be here again :)\r\n\r\nRight now I'm facing a issue related with the update of my stack. This issue was detected during a serverless deployment and after further investigation I'd figured out there's no implementation for `update_from_cloudformation_json` in Rule's model.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3041", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3041/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3041/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3041/events", "html_url": "https://github.com/spulec/moto/issues/3041", "id": 629181719, "node_id": "MDU6SXNzdWU2MjkxODE3MTk=", "number": 3041, "title": "Question: Release 1.3.15", "user": {"login": "mekza", "id": 554440, "node_id": "MDQ6VXNlcjU1NDQ0MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/554440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mekza", "html_url": "https://github.com/mekza", "followers_url": "https://api.github.com/users/mekza/followers", "following_url": "https://api.github.com/users/mekza/following{/other_user}", "gists_url": "https://api.github.com/users/mekza/gists{/gist_id}", "starred_url": "https://api.github.com/users/mekza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mekza/subscriptions", "organizations_url": "https://api.github.com/users/mekza/orgs", "repos_url": "https://api.github.com/users/mekza/repos", "events_url": "https://api.github.com/users/mekza/events{/privacy}", "received_events_url": "https://api.github.com/users/mekza/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886780, "node_id": "MDU6TGFiZWwyODg4Njc4MA==", "url": "https://api.github.com/repos/spulec/moto/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-02T12:57:03Z", "updated_at": "2020-06-20T13:45:33Z", "closed_at": "2020-06-20T03:43:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Great work! Any plan to release 1.3.15 anytime soon? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3038", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3038/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3038/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3038/events", "html_url": "https://github.com/spulec/moto/issues/3038", "id": 629046595, "node_id": "MDU6SXNzdWU2MjkwNDY1OTU=", "number": 3038, "title": "Changes are missing when creating a change set", "user": {"login": "jeremietharaud", "id": 46786750, "node_id": "MDQ6VXNlcjQ2Nzg2NzUw", "avatar_url": "https://avatars3.githubusercontent.com/u/46786750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremietharaud", "html_url": "https://github.com/jeremietharaud", "followers_url": "https://api.github.com/users/jeremietharaud/followers", "following_url": "https://api.github.com/users/jeremietharaud/following{/other_user}", "gists_url": "https://api.github.com/users/jeremietharaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremietharaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremietharaud/subscriptions", "organizations_url": "https://api.github.com/users/jeremietharaud/orgs", "repos_url": "https://api.github.com/users/jeremietharaud/repos", "events_url": "https://api.github.com/users/jeremietharaud/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremietharaud/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-02T09:24:48Z", "updated_at": "2020-06-03T05:38:32Z", "closed_at": "2020-06-03T05:38:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**moto version:**\r\n1.3.15 (spulec/moto: master)\r\n\r\n**module:**\r\nmock_cloudformation\r\n\r\n**action:**\r\n`create_change_set`\r\nWhen we create a change set and describe it using the following code, the result is not the same as running using boto3:\r\n```\r\ndummy_template = {\r\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n    \"Description\": \"Stack 1\",\r\n    \"Resources\": {\r\n        \"BucketResource\": {\r\n            \"Type\": \"AWS::S3::Bucket\",\r\n            \"Properties\": {\r\n                \"BucketName\": \"moto-test-123456789\",\r\n            },\r\n        }\r\n    },\r\n}\r\n\r\ndummy_template_json = json.dumps(dummy_template)\r\n\r\n@mock_cloudformation\r\ndef test_change_set():\r\n    cf_conn = boto3.client(\"cloudformation\", region_name=\"eu-west-1\")\r\n    cf_conn.create_change_set(\r\n        StackName=\"NewStack\",\r\n        TemplateBody=dummy_template_json,\r\n        ChangeSetName=\"NewChangeSet\",\r\n        ChangeSetType=\"CREATE\",\r\n    )\r\n\r\n    print(cf_conn.describe_change_set(ChangeSetName=\"NewChangeSet\"))\r\n\r\nif __name__ == '__main__':\r\n    test_change_set()\r\n```\r\n\r\n**expected behavior:**\r\n```\r\naws cloudformation describe-change-set --change-set-name NewChangeSet --stack-name NewStack\r\n{\r\n    \"Changes\": [\r\n        {\r\n            \"Type\": \"Resource\",\r\n            \"ResourceChange\": {\r\n                \"Action\": \"Add\",\r\n                \"LogicalResourceId\": \"BucketResource\",\r\n                \"ResourceType\": \"AWS::S3::Bucket\",\r\n                \"Scope\": [],\r\n                \"Details\": []\r\n            }\r\n        }\r\n    ],\r\n    \"ChangeSetName\": \"NewChangeSet\",\r\n    \"ChangeSetId\": \"arn:aws:cloudformation:eu-west-1:664685189390:changeSet/NewChangeSet/ae79ab51-a4a8-4f4f-8306-af6117f2a1ef\",\r\n    \"StackId\": \"arn:aws:cloudformation:eu-west-1:664685189390:stack/NewStack/0b05cf30-a0e0-11ea-9051-0aa5f1c3ad6c\",\r\n    \"StackName\": \"NewStack\",\r\n    \"Description\": \"Stack 1\",\r\n    \"Parameters\": null,\r\n    \"CreationTime\": \"2020-05-28T12:37:50.669Z\",\r\n    \"ExecutionStatus\": \"AVAILABLE\",\r\n    \"Status\": \"CREATE_COMPLETE\",\r\n    \"StatusReason\": null,\r\n    \"NotificationARNs\": [],\r\n    \"RollbackConfiguration\": {},\r\n    \"Capabilities\": [],\r\n    \"Tags\": null\r\n}\r\n```\r\n\r\n**actual behavior:**\r\n```\r\n{\r\n  'ChangeSetName': 'NewChangeSet',\r\n  'ChangeSetId': 'arn:aws:cloudformation:eu-west-1:123456789:changeSet/NewChangeSet/2db2a1e6-f825-4f81-a9f1-4d51317b4486',\r\n  'StackId': 'arn:aws:cloudformation:eu-west-1:123456789:stack/NewStack/0825614e-3634-481b-b1bc-066d63911c58',\r\n  'StackName': 'NewStack',\r\n  'Description': 'Stack 1',\r\n  'Parameters': [\r\n    \r\n  ],\r\n  'CreationTime': datetime.datetime(2020, 6, 2, 9, 22, 31, tzinfo=tzutc()),\r\n  'ExecutionStatus': 'AVAILABLE',\r\n  'Status': 'CREATE_COMPLETE',\r\n  'StatusReason': '',\r\n  'NotificationARNs': [\r\n    \r\n  ],\r\n  'ResponseMetadata': {\r\n    'HTTPStatusCode': 200,\r\n    'HTTPHeaders': {\r\n      'server': 'amazon.com'\r\n    },\r\n    'RetryAttempts': 0\r\n  }\r\n}\r\n```\r\n--> Changes are missing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3034", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3034/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3034/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3034/events", "html_url": "https://github.com/spulec/moto/issues/3034", "id": 626719794, "node_id": "MDU6SXNzdWU2MjY3MTk3OTQ=", "number": 3034, "title": "AWS IoT describe_thing_group is broken", "user": {"login": "lkong", "id": 397834, "node_id": "MDQ6VXNlcjM5NzgzNA==", "avatar_url": "https://avatars3.githubusercontent.com/u/397834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkong", "html_url": "https://github.com/lkong", "followers_url": "https://api.github.com/users/lkong/followers", "following_url": "https://api.github.com/users/lkong/following{/other_user}", "gists_url": "https://api.github.com/users/lkong/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkong/subscriptions", "organizations_url": "https://api.github.com/users/lkong/orgs", "repos_url": "https://api.github.com/users/lkong/repos", "events_url": "https://api.github.com/users/lkong/events{/privacy}", "received_events_url": "https://api.github.com/users/lkong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-28T18:26:35Z", "updated_at": "2020-05-29T05:11:54Z", "closed_at": "2020-05-28T20:49:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Verison 1.3.14\r\n**\u25cb pip3 show moto**   \r\nName: moto\r\nVersion: 1.3.14\r\nSummary: A library that allows your python tests to easily mock out the boto library\r\nHome-page: https://github.com/spulec/moto\r\nAuthor: Steve Pulec\r\nAuthor-email: spulec@gmail.com\r\nLicense: Apache\r\nLocation: /home/lkong/.local/lib/python3.8/site-packages\r\nRequires: mock, idna, sshpubkeys, python-dateutil, boto, botocore, requests, PyYAML, Jinja2, docker, cfn-lint, cryptography, responses, six, boto3, xmltodict, aws-xray-sdk, python-jose, pytz, werkzeug, jsondiff\r\nRequired-by: \r\n\r\n**Exception:**\r\nre.error: bad character in group name 'confirmationToken+' at position 25\r\n\r\n**How to reproduce:**\r\n```python\r\nfrom moto import mock_iot\r\nimport unittest\r\nimport boto3\r\nimport pytest\r\nclass TestGroupController(unittest.TestCase):\r\n\r\n    @mock_iot\r\n    def test_add_get_group(self):\r\n        \"\"\"Test case for add_group\r\n\r\n        add a group\r\n        \"\"\"\r\n        iot_client = boto3.client('iot')\r\n\r\n        response = iot_client.create_thing_group(\r\n            thingGroupName='test_group_name')\r\n        response = iot_client.describe_thing_group(\r\n            thingGroupName='test_group_name')\r\n\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3032", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3032/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3032/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3032/events", "html_url": "https://github.com/spulec/moto/issues/3032", "id": 626488102, "node_id": "MDU6SXNzdWU2MjY0ODgxMDI=", "number": 3032, "title": "Cloudformation: Incorrect/missing outputs when creating a change set", "user": {"login": "jeremietharaud", "id": 46786750, "node_id": "MDQ6VXNlcjQ2Nzg2NzUw", "avatar_url": "https://avatars3.githubusercontent.com/u/46786750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremietharaud", "html_url": "https://github.com/jeremietharaud", "followers_url": "https://api.github.com/users/jeremietharaud/followers", "following_url": "https://api.github.com/users/jeremietharaud/following{/other_user}", "gists_url": "https://api.github.com/users/jeremietharaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremietharaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremietharaud/subscriptions", "organizations_url": "https://api.github.com/users/jeremietharaud/orgs", "repos_url": "https://api.github.com/users/jeremietharaud/repos", "events_url": "https://api.github.com/users/jeremietharaud/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremietharaud/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-28T12:58:22Z", "updated_at": "2020-05-29T10:08:52Z", "closed_at": "2020-05-29T06:33:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**moto version:**\r\n1.3.15 (spulec/moto: master)\r\n\r\n**module:**\r\nmock_cloudformation\r\n\r\n**action:**\r\n`create_change_set`\r\nWhen we create a change set and describe it using the following code, the result is not the same as running using boto3:\r\n```\r\ndummy_template = {\r\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n    \"Description\": \"Stack 1\",\r\n    \"Resources\": {\r\n        \"BucketResource\": {\r\n            \"Type\": \"AWS::S3::Bucket\",\r\n            \"Properties\": {\r\n                \"BucketName\": \"moto-test-123456789\",\r\n            },\r\n        }\r\n    },\r\n}\r\n\r\ndummy_template_json = json.dumps(dummy_template)\r\n\r\n\r\n@mock_cloudformation\r\ndef test_change_set():\r\n    cf_conn = boto3.client(\"cloudformation\", region_name=\"eu-west-1\")\r\n    cf_conn.create_change_set(\r\n        StackName=\"NewStack\",\r\n        TemplateBody=dummy_template_json,\r\n        ChangeSetName=\"NewChangeSet\",\r\n        ChangeSetType=\"CREATE\",\r\n    )\r\n\r\n    print(cf_conn.describe_change_set(ChangeSetName=\"NewChangeSet\"))\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_change_set()\r\n```\r\n\r\n**expected behavior:**\r\n```\r\naws cloudformation describe-change-set --change-set-name NewChangeSet --stack-name NewStack\r\n{\r\n    \"Changes\": [\r\n        {\r\n            \"Type\": \"Resource\",\r\n            \"ResourceChange\": {\r\n                \"Action\": \"Add\",\r\n                \"LogicalResourceId\": \"BucketResource\",\r\n                \"ResourceType\": \"AWS::S3::Bucket\",\r\n                \"Scope\": [],\r\n                \"Details\": []\r\n            }\r\n        }\r\n    ],\r\n    \"ChangeSetName\": \"NewChangeSet\",\r\n    \"ChangeSetId\": \"arn:aws:cloudformation:eu-west-1:664685189390:changeSet/NewChangeSet/ae79ab51-a4a8-4f4f-8306-af6117f2a1ef\",\r\n    \"StackId\": \"arn:aws:cloudformation:eu-west-1:664685189390:stack/NewStack/0b05cf30-a0e0-11ea-9051-0aa5f1c3ad6c\",\r\n    \"StackName\": \"NewStack\",\r\n    \"Description\": \"Stack 1\",\r\n    \"Parameters\": null,\r\n    \"CreationTime\": \"2020-05-28T12:37:50.669Z\",\r\n    \"ExecutionStatus\": \"AVAILABLE\",\r\n    \"Status\": \"CREATE_COMPLETE\",\r\n    \"StatusReason\": null,\r\n    \"NotificationARNs\": [],\r\n    \"RollbackConfiguration\": {},\r\n    \"Capabilities\": [],\r\n    \"Tags\": null\r\n}\r\n```\r\n- Status should be 'CREATE_COMPLETE' (should be fixed by PR #3033)\r\n- Execution status should be 'AVAILABLE' (should be fixed by PR #3033)\r\n- Creation time should be set to the datetime.utcnow() (should be fixed by PR #3033)\r\n- Stack Id should contain the same region in its name as the change set itself, not us-east-1 (should be fixed by PR #3033)\r\n- Changes are missing\r\n\r\n**actual behavior:**\r\n```\r\n{\r\n  'ChangeSetName': 'NewChangeSet',\r\n  'ChangeSetId': 'arn:aws:cloudformation:eu-west-1:123456789:changeSet/NewChangeSet/3b0423d6-7514-4b50-91cd-46856bd251de',\r\n  'StackId': 'arn:aws:cloudformation:us-east-1:123456789:stack/NewStack/f62e9101-95c5-4967-a704-fc62190d87ee',\r\n  'StackName': 'NewStack',\r\n  'Description': 'Stack 1',\r\n  'Parameters': [\r\n    \r\n  ],\r\n  'CreationTime': datetime.datetime(2011, 5, 23, 15, 47, 44, tzinfo=tzutc()),\r\n  'ExecutionStatus': '',\r\n  'Status': 'REVIEW_IN_PROGRESS',\r\n  'StatusReason': '',\r\n  'NotificationARNs': [\r\n    \r\n  ],\r\n  'ResponseMetadata': {\r\n    'HTTPStatusCode': 200,\r\n    'HTTPHeaders': {\r\n      'server': 'amazon.com'\r\n    },\r\n    'RetryAttempts': 0\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3030", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3030/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3030/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3030/events", "html_url": "https://github.com/spulec/moto/issues/3030", "id": 626453862, "node_id": "MDU6SXNzdWU2MjY0NTM4NjI=", "number": 3030, "title": "CloudFormation : some unit tests are failing", "user": {"login": "jeremietharaud", "id": 46786750, "node_id": "MDQ6VXNlcjQ2Nzg2NzUw", "avatar_url": "https://avatars3.githubusercontent.com/u/46786750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremietharaud", "html_url": "https://github.com/jeremietharaud", "followers_url": "https://api.github.com/users/jeremietharaud/followers", "following_url": "https://api.github.com/users/jeremietharaud/following{/other_user}", "gists_url": "https://api.github.com/users/jeremietharaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremietharaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremietharaud/subscriptions", "organizations_url": "https://api.github.com/users/jeremietharaud/orgs", "repos_url": "https://api.github.com/users/jeremietharaud/repos", "events_url": "https://api.github.com/users/jeremietharaud/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremietharaud/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-28T12:03:18Z", "updated_at": "2020-05-28T13:14:19Z", "closed_at": "2020-05-28T13:14:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**moto version:**\r\n1.3.15 (spulec/moto: master)\r\n\r\n**module:**\r\nmock_cloudformation\r\n\r\n**action**:\r\nnosetests\r\n\r\n**expected behavior:**\r\nUnit tests are OK.\r\n\r\n**actual behavior:**\r\nUsing nosetests:\r\n```\r\nRan 161 tests in 10.656s\r\n\r\nFAILED (errors=4)\r\n```\r\nUsing pytest:\r\n```\r\nFAILED test_cloudformation_stack_crud_boto3.py::test_create_stack_set_from_s3_url - botocore.exceptions.ClientError: An error occurred (IllegalLocationConstraintException) when calling the CreateBucket operation: The unspecified location constraint is incompatible for the region specific endpoint this request was sent to.\r\nFAILED test_cloudformation_stack_crud_boto3.py::test_create_stack_from_s3_url - botocore.exceptions.ClientError: An error occurred (IllegalLocationConstraintException) when calling the CreateBucket operation: The unspecified location constraint is incompatible for the region specific endpoint this request was sent to.\r\nFAILED test_cloudformation_stack_crud_boto3.py::test_update_stack_from_s3_url - botocore.exceptions.ClientError: An error occurred (IllegalLocationConstraintException) when calling the CreateBucket operation: The unspecified location constraint is incompatible for the region specific endpoint this request was sent to.\r\nFAILED test_cloudformation_stack_crud_boto3.py::test_create_change_set_from_s3_url - botocore.exceptions.ClientError: An error occurred (IllegalLocationConstraintException) when calling the CreateBucket operation: The unspecified location constraint is incompatible for the region specific endpoint this request was sent to.\r\nFAILED test_validate.py::test_boto3_json_invalid_missing_resource - AttributeError: 'str' object has no attribute 'should'\r\nFAILED test_validate.py::test_boto3_yaml_invalid_missing_resource - AttributeError: 'str' object has no attribute 'should'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3027", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3027/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3027/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3027/events", "html_url": "https://github.com/spulec/moto/issues/3027", "id": 624875676, "node_id": "MDU6SXNzdWU2MjQ4NzU2NzY=", "number": 3027, "title": "SNS mocking with moto is not working correctly", "user": {"login": "red8888", "id": 6265399, "node_id": "MDQ6VXNlcjYyNjUzOTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6265399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/red8888", "html_url": "https://github.com/red8888", "followers_url": "https://api.github.com/users/red8888/followers", "following_url": "https://api.github.com/users/red8888/following{/other_user}", "gists_url": "https://api.github.com/users/red8888/gists{/gist_id}", "starred_url": "https://api.github.com/users/red8888/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/red8888/subscriptions", "organizations_url": "https://api.github.com/users/red8888/orgs", "repos_url": "https://api.github.com/users/red8888/repos", "events_url": "https://api.github.com/users/red8888/events{/privacy}", "received_events_url": "https://api.github.com/users/red8888/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-26T13:16:21Z", "updated_at": "2020-05-26T13:36:43Z", "closed_at": "2020-05-26T13:31:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "FYI I opened an SO post before reporting this here: https://stackoverflow.com/questions/62015260/sns-mocking-with-moto-is-not-working-correctly\r\n\r\nIn my unit test:\r\n```\r\n@mock_sns\r\ndef test_my_function_that_publishes_to_sns():\r\n    conn = boto3.client(\"sns\", region_name=\"us-east-1\")\r\n    mock_topic = conn.create_topic(Name=\"mock-topic\")\r\n    topic_arn = mock_topic.get(\"TopicArn\")\r\n\r\n    os.environ[\"SNS_TOPIC\"] = topic_arn\r\n    # This works inside the unit test itself, obviously useless because I want\r\n    # to mock sns for the function that uses sns, but it seems at least some part of it is working\r\n    # conn.publish(TopicArn=os.environ[\"SNS_TOPIC\"], Message=\"sdfsdsdf\") #works \r\n\r\n    # call my_function\r\n    my_module.my_method()\r\n```\r\n\r\n```\r\n# inside my_module, my_function...\r\nsns_client.publish(\r\n            TopicArn=os.environ[\"SNS_TOPIC\"], Message=\"my message\",\r\n        )\r\n```\r\n\r\nI get the error: botocore.errorfactory.NotFoundException: An error occurred (NotFound) when calling the Publish operation: Endpoint with arn arn:aws:sns:us-east-1:123456789012:mock-topic not found\r\n\r\nDoesnt make sense, thats the topic moto is suppose to have created and mocked. Why is it saying it doesnt exist? If I call conn.publish(TopicArn=topic_arn, Message=\"sdfsdsdf\") inside of the unit test itself it seems to mock it, but it doesnt mock it for my_module.my_method() which the unit test executes. Maybe its destroying the mocked topic too soon?\r\n\r\nI tried this every which way and I get the exact same error:\r\n```\r\n# Using context manager\r\ndef test_my_function_that_publishes_to_sns():\r\n    with mock_sns():\r\n        conn = boto3.client(\"sns\", region_name=\"us-east-1\")\r\n        mock_topic = conn.create_topic(Name=\"mocktopic\")\r\n        topic_arn = mock_topic.get(\"TopicArn\")\r\n\r\n        os.environ[\"SNS_TOPIC\"] = topic_arn\r\n\r\n        # call my_function\r\n        my_module.my_method()\r\n\r\n\r\n# Using decorator\r\n@mock_sns\r\ndef test_my_function_that_publishes_to_sns():\r\n    conn = boto3.client(\"sns\", region_name=\"us-east-1\")\r\n    mock_topic = conn.create_topic(Name=\"mocktopic\")\r\n    topic_arn = mock_topic.get(\"TopicArn\")\r\n\r\n    os.environ[\"SNS_TOPIC\"] = topic_arn\r\n\r\n    # call my_function\r\n    my_module.my_method()\r\n\r\n\r\n# Using decorator and context manager\r\n@mock_sns\r\ndef test_my_function_that_publishes_to_sns():\r\n    with mock_sns():\r\n        conn = boto3.client(\"sns\", region_name=\"us-east-1\")\r\n        mock_topic = conn.create_topic(Name=\"mocktopic\")\r\n        topic_arn = mock_topic.get(\"TopicArn\")\r\n\r\n        os.environ[\"SNS_TOPIC\"] = topic_arn\r\n\r\n        # call my_function\r\n        my_module.my_method()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3023", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3023/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3023/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3023/events", "html_url": "https://github.com/spulec/moto/issues/3023", "id": 623709484, "node_id": "MDU6SXNzdWU2MjM3MDk0ODQ=", "number": 3023, "title": "cloudformation validation tests failing", "user": {"login": "jweite", "id": 8495212, "node_id": "MDQ6VXNlcjg0OTUyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8495212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jweite", "html_url": "https://github.com/jweite", "followers_url": "https://api.github.com/users/jweite/followers", "following_url": "https://api.github.com/users/jweite/following{/other_user}", "gists_url": "https://api.github.com/users/jweite/gists{/gist_id}", "starred_url": "https://api.github.com/users/jweite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jweite/subscriptions", "organizations_url": "https://api.github.com/users/jweite/orgs", "repos_url": "https://api.github.com/users/jweite/repos", "events_url": "https://api.github.com/users/jweite/events{/privacy}", "received_events_url": "https://api.github.com/users/jweite/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-23T17:52:55Z", "updated_at": "2020-05-24T08:41:03Z", "closed_at": "2020-05-24T08:41:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "make test-only of current master results in failures on tests.test_cloudformation.test_validate.test_boto3_yaml_invalid_missing_resource and tests.test_cloudformation.test_validate.test_boto3_json_invalid_missing_resource.\r\n\r\nPreliminary diagnosis indicates that cfnlint is returning a slightly different error message than the test asserts.  \r\n\r\nReturned: ...Stack with id Missing top level template...\r\nExpected: ...Stack with id Missing top level item...\r\n\r\nNot sure if message being returned changed underneath moto or if it's perhaps specific to my env.\r\n\r\ncfn-lint==0.32.1\r\nmoto source version = master (80b64f9)\r\nenvironment:  python3.7 virtual env on macos.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3018", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3018/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3018/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3018/events", "html_url": "https://github.com/spulec/moto/issues/3018", "id": 623571943, "node_id": "MDU6SXNzdWU2MjM1NzE5NDM=", "number": 3018, "title": "Need s3 methods get_bucket_encryption, put_bucket_encryption, delete_bucket_encryption", "user": {"login": "jweite", "id": 8495212, "node_id": "MDQ6VXNlcjg0OTUyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8495212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jweite", "html_url": "https://github.com/jweite", "followers_url": "https://api.github.com/users/jweite/followers", "following_url": "https://api.github.com/users/jweite/following{/other_user}", "gists_url": "https://api.github.com/users/jweite/gists{/gist_id}", "starred_url": "https://api.github.com/users/jweite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jweite/subscriptions", "organizations_url": "https://api.github.com/users/jweite/orgs", "repos_url": "https://api.github.com/users/jweite/repos", "events_url": "https://api.github.com/users/jweite/events{/privacy}", "received_events_url": "https://api.github.com/users/jweite/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-23T03:31:47Z", "updated_at": "2020-05-27T16:51:33Z", "closed_at": "2020-05-27T16:51:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Not implemented in 1.3.14 or master.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3017", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3017/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3017/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3017/events", "html_url": "https://github.com/spulec/moto/issues/3017", "id": 623571707, "node_id": "MDU6SXNzdWU2MjM1NzE3MDc=", "number": 3017, "title": "Need IAM method delete_instance_profile", "user": {"login": "jweite", "id": 8495212, "node_id": "MDQ6VXNlcjg0OTUyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8495212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jweite", "html_url": "https://github.com/jweite", "followers_url": "https://api.github.com/users/jweite/followers", "following_url": "https://api.github.com/users/jweite/following{/other_user}", "gists_url": "https://api.github.com/users/jweite/gists{/gist_id}", "starred_url": "https://api.github.com/users/jweite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jweite/subscriptions", "organizations_url": "https://api.github.com/users/jweite/orgs", "repos_url": "https://api.github.com/users/jweite/repos", "events_url": "https://api.github.com/users/jweite/events{/privacy}", "received_events_url": "https://api.github.com/users/jweite/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-23T03:30:26Z", "updated_at": "2020-05-27T18:20:46Z", "closed_at": "2020-05-27T18:20:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Not currently implemented, in 1.3.14 or master.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3016", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3016/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3016/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3016/events", "html_url": "https://github.com/spulec/moto/issues/3016", "id": 623571436, "node_id": "MDU6SXNzdWU2MjM1NzE0MzY=", "number": 3016, "title": "IAM delete_role Can Delete Wrong Role If Instance Profiles Exist", "user": {"login": "jweite", "id": 8495212, "node_id": "MDQ6VXNlcjg0OTUyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8495212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jweite", "html_url": "https://github.com/jweite", "followers_url": "https://api.github.com/users/jweite/followers", "following_url": "https://api.github.com/users/jweite/following{/other_user}", "gists_url": "https://api.github.com/users/jweite/gists{/gist_id}", "starred_url": "https://api.github.com/users/jweite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jweite/subscriptions", "organizations_url": "https://api.github.com/users/jweite/orgs", "repos_url": "https://api.github.com/users/jweite/repos", "events_url": "https://api.github.com/users/jweite/events{/privacy}", "received_events_url": "https://api.github.com/users/jweite/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-23T03:28:46Z", "updated_at": "2020-05-27T16:19:29Z", "closed_at": "2020-05-27T16:19:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "How to reproduce: see attached script.\r\n\r\nWhat script does: creates Role1, adds it to an instance profile, creates Role2, deletes Role2.\r\n\r\nWhat should happen:  Role2 should have been deleted\r\n\r\nWhat does happen:  Role1 is deleted.\r\n\r\nDiagnosis:  models.py delete_role() function uses pre-existing/initialized variable _role_ in a for loop over instance profile roles, which leaves it set to the role of the last instance profile inspected instead of the role specified in the function parameter.\r\n\r\nMoto Version Tested: 1.3.14, installed with _pip install moto_ into a Python 3.7 virtual env.  Using Python Mocks.  botocore version 1.16.16.\r\n\r\n[moto_iam_delete_role_issue.py.txt](https://github.com/spulec/moto/files/4671073/moto_iam_delete_role_issue.py.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3014", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3014/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3014/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3014/events", "html_url": "https://github.com/spulec/moto/issues/3014", "id": 622796052, "node_id": "MDU6SXNzdWU2MjI3OTYwNTI=", "number": 3014, "title": "ImportError: cannot import name 'ItemSizeToUpdateTooLarge'", "user": {"login": "ronnoceel", "id": 14851896, "node_id": "MDQ6VXNlcjE0ODUxODk2", "avatar_url": "https://avatars3.githubusercontent.com/u/14851896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ronnoceel", "html_url": "https://github.com/ronnoceel", "followers_url": "https://api.github.com/users/ronnoceel/followers", "following_url": "https://api.github.com/users/ronnoceel/following{/other_user}", "gists_url": "https://api.github.com/users/ronnoceel/gists{/gist_id}", "starred_url": "https://api.github.com/users/ronnoceel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ronnoceel/subscriptions", "organizations_url": "https://api.github.com/users/ronnoceel/orgs", "repos_url": "https://api.github.com/users/ronnoceel/repos", "events_url": "https://api.github.com/users/ronnoceel/events{/privacy}", "received_events_url": "https://api.github.com/users/ronnoceel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/spulec/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-21T21:19:05Z", "updated_at": "2020-05-22T14:55:07Z", "closed_at": "2020-05-22T14:55:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Steps to reproduce:\r\n```$ moto_server```\r\n\r\nExpected: Server begins running\r\nActual: \r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/vagrant/.local/bin/moto_server\", line 5, in <module>\r\n    from moto.server import main\r\n  File \"/home/vagrant/.local/lib/python3.6/site-packages/moto/__init__.py\", line 7, in <module>\r\n    from .awslambda import mock_lambda, mock_lambda_deprecated  # noqa\r\n  File \"/home/vagrant/.local/lib/python3.6/site-packages/moto/awslambda/__init__.py\", line 2, in <module>\r\n    from .models import lambda_backends\r\n  File \"/home/vagrant/.local/lib/python3.6/site-packages/moto/awslambda/models.py\", line 36, in <module>\r\n    from moto.dynamodb2 import dynamodb_backends2\r\n  File \"/home/vagrant/.local/lib/python3.6/site-packages/moto/dynamodb2/__init__.py\", line 2, in <module>\r\n    from .models import dynamodb_backends as dynamodb_backends2\r\n  File \"/home/vagrant/.local/lib/python3.6/site-packages/moto/dynamodb2/models/__init__.py\", line 17, in <module>\r\n    from moto.dynamodb2.exceptions import (\r\nImportError: cannot import name 'ItemSizeToUpdateTooLarge'\r\n```\r\n\r\nThis happens every time I try and run moto server. I have tried importing the name manually, but `ItemSizeToUpdateTooLarge` does no appear to exist (neither does google return any results).\r\n\r\nSystem:\r\n`Linux ubuntu-xenial 4.4.0-178-generic #208-Ubuntu SMP Sun Apr 5 23:45:10 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux`\r\n\r\nInstalled with pip. I have tried uninstalling an reinstalling.\r\n```\r\n$pip -V\r\npip 20.1 from /home/vagrant/.local/lib/python3.6/site-packages/pip (python 3.6)\r\n```\r\n```\r\n$ python -V\r\nPython 3.6.10\r\n```\r\n\r\nMoto versions:\r\nmoto                    1.3.14\r\nmoto-ext                1.3.15.15\r\n\r\nBoto versions:\r\nboto                    2.49.0\r\nboto3                   1.13.6\r\nbotocore                1.16.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3013", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3013/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3013/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3013/events", "html_url": "https://github.com/spulec/moto/issues/3013", "id": 622746323, "node_id": "MDU6SXNzdWU2MjI3NDYzMjM=", "number": 3013, "title": "Moto without Boto(2)?", "user": {"login": "maxcountryman", "id": 74351, "node_id": "MDQ6VXNlcjc0MzUx", "avatar_url": "https://avatars3.githubusercontent.com/u/74351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxcountryman", "html_url": "https://github.com/maxcountryman", "followers_url": "https://api.github.com/users/maxcountryman/followers", "following_url": "https://api.github.com/users/maxcountryman/following{/other_user}", "gists_url": "https://api.github.com/users/maxcountryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxcountryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxcountryman/subscriptions", "organizations_url": "https://api.github.com/users/maxcountryman/orgs", "repos_url": "https://api.github.com/users/maxcountryman/repos", "events_url": "https://api.github.com/users/maxcountryman/events{/privacy}", "received_events_url": "https://api.github.com/users/maxcountryman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886780, "node_id": "MDU6TGFiZWwyODg4Njc4MA==", "url": "https://api.github.com/repos/spulec/moto/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-21T20:00:08Z", "updated_at": "2020-05-22T14:44:50Z", "closed_at": "2020-05-22T14:44:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm wondering if it's possible to use Moto without requiring `boto`? This seems to be causing some bizarre issues for us and so if there's some way of avoiding it that would be great.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3011", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3011/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3011/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3011/events", "html_url": "https://github.com/spulec/moto/issues/3011", "id": 622674329, "node_id": "MDU6SXNzdWU2MjI2NzQzMjk=", "number": 3011, "title": "Add tag get_resources support for target groups", "user": {"login": "ben-nz", "id": 13878060, "node_id": "MDQ6VXNlcjEzODc4MDYw", "avatar_url": "https://avatars3.githubusercontent.com/u/13878060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben-nz", "html_url": "https://github.com/ben-nz", "followers_url": "https://api.github.com/users/ben-nz/followers", "following_url": "https://api.github.com/users/ben-nz/following{/other_user}", "gists_url": "https://api.github.com/users/ben-nz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben-nz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben-nz/subscriptions", "organizations_url": "https://api.github.com/users/ben-nz/orgs", "repos_url": "https://api.github.com/users/ben-nz/repos", "events_url": "https://api.github.com/users/ben-nz/events{/privacy}", "received_events_url": "https://api.github.com/users/ben-nz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-21T17:56:27Z", "updated_at": "2020-05-24T22:06:46Z", "closed_at": "2020-05-24T09:25:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI would like to leverage the resource tagging endpoint to search for target groups. I have also noticed a small typo in the handling of tags for elbv2 in the code (is currently `elasticloadbalancer`, should be `elasticloadbalancing` as per [user guide](https://docs.aws.amazon.com/IAM/latest/UserGuide/list_elasticloadbalancingv2.html). I have linked a pull request.\r\n\r\nRegards,\r\nBen\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3009", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3009/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3009/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3009/events", "html_url": "https://github.com/spulec/moto/issues/3009", "id": 621085746, "node_id": "MDU6SXNzdWU2MjEwODU3NDY=", "number": 3009, "title": "CloudFormation autoscaling group PropagateAtLaunch not setting properly", "user": {"login": "zbrookle", "id": 39153813, "node_id": "MDQ6VXNlcjM5MTUzODEz", "avatar_url": "https://avatars1.githubusercontent.com/u/39153813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zbrookle", "html_url": "https://github.com/zbrookle", "followers_url": "https://api.github.com/users/zbrookle/followers", "following_url": "https://api.github.com/users/zbrookle/following{/other_user}", "gists_url": "https://api.github.com/users/zbrookle/gists{/gist_id}", "starred_url": "https://api.github.com/users/zbrookle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zbrookle/subscriptions", "organizations_url": "https://api.github.com/users/zbrookle/orgs", "repos_url": "https://api.github.com/users/zbrookle/repos", "events_url": "https://api.github.com/users/zbrookle/events{/privacy}", "received_events_url": "https://api.github.com/users/zbrookle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-19T15:43:21Z", "updated_at": "2020-05-24T14:30:37Z", "closed_at": "2020-05-24T11:21:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When creating a CloudFormation autoscaling group, PropagateAtLaunch for tags is being reported as 'False' even though it was set to 'True' in the template", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3008", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3008/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3008/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3008/events", "html_url": "https://github.com/spulec/moto/issues/3008", "id": 620721525, "node_id": "MDU6SXNzdWU2MjA3MjE1MjU=", "number": 3008, "title": "Meta - Build fails with botocore 1.16.12", "user": {"login": "bblommers", "id": 6058517, "node_id": "MDQ6VXNlcjYwNTg1MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6058517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblommers", "html_url": "https://github.com/bblommers", "followers_url": "https://api.github.com/users/bblommers/followers", "following_url": "https://api.github.com/users/bblommers/following{/other_user}", "gists_url": "https://api.github.com/users/bblommers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblommers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblommers/subscriptions", "organizations_url": "https://api.github.com/users/bblommers/orgs", "repos_url": "https://api.github.com/users/bblommers/repos", "events_url": "https://api.github.com/users/bblommers/events{/privacy}", "received_events_url": "https://api.github.com/users/bblommers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-19T06:44:26Z", "updated_at": "2020-05-24T08:38:47Z", "closed_at": "2020-05-24T08:38:47Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Failing test:\r\nhttps://travis-ci.org/github/spulec/moto/jobs/688592478\r\n\r\nSame problem as https://github.com/spulec/moto/issues/2774 - opening a new issue for visibility.\r\n\r\nI've asked for some clarification in the botocore-project:\r\nhttps://github.com/boto/botocore/issues/2051", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3006", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3006/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3006/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3006/events", "html_url": "https://github.com/spulec/moto/issues/3006", "id": 620518493, "node_id": "MDU6SXNzdWU2MjA1MTg0OTM=", "number": 3006, "title": "mock_sqs: Unable to retrieve multiple messages in a single request", "user": {"login": "Haklim733", "id": 7102666, "node_id": "MDQ6VXNlcjcxMDI2NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7102666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Haklim733", "html_url": "https://github.com/Haklim733", "followers_url": "https://api.github.com/users/Haklim733/followers", "following_url": "https://api.github.com/users/Haklim733/following{/other_user}", "gists_url": "https://api.github.com/users/Haklim733/gists{/gist_id}", "starred_url": "https://api.github.com/users/Haklim733/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Haklim733/subscriptions", "organizations_url": "https://api.github.com/users/Haklim733/orgs", "repos_url": "https://api.github.com/users/Haklim733/repos", "events_url": "https://api.github.com/users/Haklim733/events{/privacy}", "received_events_url": "https://api.github.com/users/Haklim733/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-18T21:30:49Z", "updated_at": "2020-05-24T18:14:46Z", "closed_at": "2020-05-24T17:06:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to receive multiple messages per request but I only see one. If I run the code without mocking, I see both messages sent below in the code. I tried introducing time.sleep(3) in between sending messages and receiving the message but I end up with the same results.\r\n\r\n**Versions**\r\nboto==2.49.0\r\nboto3==1.13.1\r\nbotocore==1.16.1\r\nmoto==1.3.14\r\n\r\n**Code**\r\n```\r\n@mock_sqs\r\ndef test_create_fifo_queue(aws_credentials):\r\n    session = boto3.Session(profile_name='testing')\r\n    sqs = session.client(\"sqs\", region_name=\"us-east-1\")\r\n    today = datetime.today().strftime('%Y-%m-%d')\r\n    queue_name = f\"{os.environ['AWS_RETRY_Q']}.fifo\"  \r\n\r\n    sqs.create_queue(QueueName=queue_name,\r\n                     Attributes={\"FifoQueue\": \"true\"})\r\n\r\n    response = sqs.get_queue_url(QueueName=queue_name)\r\n    queue_url = response['QueueUrl']\r\n    print(queue_url)\r\n\r\n    sqs.send_message(QueueUrl=queue_url,\r\n                    MessageBody=json.dumps(['A']),\r\n                    MessageAttributes={\r\n                        'Date': {'DataType': 'String',\r\n                                 'StringValue': today},\r\n                        'QueryType': {'DataType': 'String',\r\n                                   'StringValue': \"RETRY\"}\r\n                    },\r\n                     MessageGroupId='test-queue',\r\n                     MessageDeduplicationId=f'{today}-A')\r\n\r\n    sqs.send_message(QueueUrl=queue_url,\r\n                    MessageBody=json.dumps(['B']),\r\n                    MessageAttributes={\r\n                        'Date': {'DataType': 'String',\r\n                                 'StringValue': today},\r\n                        'QueryType': {'DataType': 'String',\r\n                                   'StringValue': \"NEW\"}\r\n                    },\r\n                     MessageGroupId='test-queue',\r\n                     MessageDeduplicationId=f'{today}-B')\r\n\r\n    message_resp = sqs.receive_message(QueueUrl=queue_url,\r\n                                       AttributeNames=['All'],\r\n                                       MessageAttributeNames=['All'],\r\n                                       VisibilityTimeout=20,\r\n                                       MaxNumberOfMessages=10,\r\n                                       WaitTimeSeconds=5\r\n                                       )  #this works on production, receive 2 messages\r\n    print('message1', message_resp['Messages'])\r\n    assert len(message_resp['Messages'])==2\r\n```\r\n**traceback**\r\nAssertionError: assert 1 == 2\r\nE        +  where 1 = len([{'Attributes': {'ApproximateFirstReceiveTimestamp': '1589837266039', 'ApproximateReceiveCount': '1', 'MessageDeduplic...', 'MD5OfBody': '5c24fc1df56d764b550ceae1b9319125', 'MD5OfMessageAttributes': '392230c5ed0aa0660ddc3fd110bdd305', ...}])\r\n\r\ntest_sqs.py:63: AssertionError\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3005", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3005/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3005/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3005/events", "html_url": "https://github.com/spulec/moto/issues/3005", "id": 620137592, "node_id": "MDU6SXNzdWU2MjAxMzc1OTI=", "number": 3005, "title": "Certain StepFunctions exceptions uncatchable", "user": {"login": "aidan-", "id": 327286, "node_id": "MDQ6VXNlcjMyNzI4Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/327286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidan-", "html_url": "https://github.com/aidan-", "followers_url": "https://api.github.com/users/aidan-/followers", "following_url": "https://api.github.com/users/aidan-/following{/other_user}", "gists_url": "https://api.github.com/users/aidan-/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidan-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidan-/subscriptions", "organizations_url": "https://api.github.com/users/aidan-/orgs", "repos_url": "https://api.github.com/users/aidan-/repos", "events_url": "https://api.github.com/users/aidan-/events{/privacy}", "received_events_url": "https://api.github.com/users/aidan-/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-18T11:38:02Z", "updated_at": "2020-05-24T14:30:25Z", "closed_at": "2020-05-24T14:06:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am having an issue catching certain exceptions that are being thrown by only some of the StepFunction related methods.  I have managed to break it down to this simple example to illustrate my problem:\r\n\r\n```\r\nimport pytest\r\nimport moto\r\nfrom moto import mock_stepfunctions\r\nimport boto3\r\n\r\nfrom botocore.exceptions import ClientError\r\n\r\ndef test_sfn_describe_state_machine():\r\n    with mock_stepfunctions():\r\n        with pytest.raises(ClientError):\r\n            client = boto3.client(\"stepfunctions\", region_name=\"ap-southeast-2\")\r\n            client.describe_state_machine(stateMachineArn=\"asd\")\r\n\r\ndef test_sfn_start_execution():\r\n    with mock_stepfunctions():\r\n        with pytest.raises(ClientError):\r\n            client = boto3.client(\"stepfunctions\", region_name=\"ap-southeast-2\")\r\n            client.start_execution(stateMachineArn=\"asd\")\r\n\r\n```\r\n\r\nRunning this with pytest (or anything, that part isn't relevant) will result in the first test passing, with the `ClientError` successfully being caught.  The second test will fail.  From what I can see, the two methods are raising two different exceptions:\r\n\r\n1st) `botocore.errorfactory.InvalidArn: An error occurred (InvalidArn) when calling the DescribeStateMachine operation: Invalid State Machine Arn: 'asd'`\r\n2nd) `moto.stepfunctions.exceptions.InvalidArn: Invalid State Machine Arn: 'asd'`\r\n\r\nFrom what I can see, they're both calling the same code path to validate the ARN, but only one is raising exception namespace to `moto`.  I've also had a look at the tests in the `moto` repository itself and added one that follows the pattern of my failing test, and it fails there too - so I don't think this is an environment issue.\r\n\r\nI'm sure it's something obvious, but it's got my stumped at the moment.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3001", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3001/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3001/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3001/events", "html_url": "https://github.com/spulec/moto/issues/3001", "id": 619708611, "node_id": "MDU6SXNzdWU2MTk3MDg2MTE=", "number": 3001, "title": "mocking of test assume role and Account Id not working", "user": {"login": "manas86", "id": 30902765, "node_id": "MDQ6VXNlcjMwOTAyNzY1", "avatar_url": "https://avatars0.githubusercontent.com/u/30902765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/manas86", "html_url": "https://github.com/manas86", "followers_url": "https://api.github.com/users/manas86/followers", "following_url": "https://api.github.com/users/manas86/following{/other_user}", "gists_url": "https://api.github.com/users/manas86/gists{/gist_id}", "starred_url": "https://api.github.com/users/manas86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/manas86/subscriptions", "organizations_url": "https://api.github.com/users/manas86/orgs", "repos_url": "https://api.github.com/users/manas86/repos", "events_url": "https://api.github.com/users/manas86/events{/privacy}", "received_events_url": "https://api.github.com/users/manas86/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/spulec/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-17T13:51:31Z", "updated_at": "2020-07-08T10:36:04Z", "closed_at": "2020-07-08T10:36:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "1.  Account ID not working\r\n\r\nwhen using `from moto.core import ACCOUNT_ID`  python complaining \r\nImportError: cannot import name 'ACCOUNT_ID' from 'moto.core' \r\nalso tried to use environment variable MOTO_ACCOUNT_ID still not working? \r\n\r\n2.  Test Assume Role complaining \r\n```\r\n assume_role_response = sts_resource.assume_role(\r\nAttributeError: 'function' object has no attribute 'assume_role'\r\n```\r\nI have taken the code snippet for testing assume role from [https://github.com/spulec/moto/blob/master/tests/test_sts/test_sts.py]@test_assume_role since account id is not working I replaced with 123456789012\r\n\r\n```\r\n@pytest.fixture\r\ndef aws_credentials():\r\n    \"\"\"Mocked AWS Credentials for moto.\"\"\"\r\n    os.environ['AWS_ACCESS_KEY_ID'] = 'testing'\r\n    os.environ['AWS_SECRET_ACCESS_KEY'] = 'testing'\r\n    os.environ['AWS_SECURITY_TOKEN'] = 'testing'\r\n    os.environ['AWS_SESSION_TOKEN'] = 'testing'\r\n    os.environ['RELEASE_ENVIRONMENTNAME'] = 'local'\r\n\r\n@pytest.fixture()\r\ndef sts_resource(aws_credentials):\r\n    mock = mock_sts()\r\n    mock.start()\r\n    yield boto3.resource('sts', region_name='eu-west-1')\r\n    mock.stop()\r\n\r\ndef test_assume_role(sts_resource):\r\n    # client = boto3.client(\"sts\", region_name=\"us-east-1\")\r\n\r\n    session_name = \"session-name\"\r\n    policy = json.dumps(\r\n        {\r\n            \"Statement\": [\r\n                {\r\n                    \"Sid\": \"Stmt13690092345534\",\r\n                    \"Action\": [\"S3:ListBucket\"],\r\n                    \"Effect\": \"Allow\",\r\n                    \"Resource\": [\"arn:aws:s3:::foobar-tester\"],\r\n                }\r\n            ]\r\n        }\r\n    )\r\n    role_name = \"test-role\"\r\n    s3_role = \"arn:aws:iam::{account_id}:role/{role_name}\".format(\r\n        account_id=123456789012, role_name=role_name\r\n    )\r\n    assume_role_response = sts_resource.assume_role(\r\n        RoleArn=s3_role,\r\n        RoleSessionName=session_name,\r\n        Policy=policy,\r\n        DurationSeconds=900,\r\n    )\r\n\r\n    credentials = assume_role_response[\"Credentials\"]\r\n    print(credentials)\r\n\r\nif __name__ == '__main__':\r\n   test_assume_role(sts_resource)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/3000", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/3000/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/3000/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/3000/events", "html_url": "https://github.com/spulec/moto/issues/3000", "id": 619662658, "node_id": "MDU6SXNzdWU2MTk2NjI2NTg=", "number": 3000, "title": "SNS unsubscribe: NotFound exception not thrown", "user": {"login": "tomers", "id": 83443, "node_id": "MDQ6VXNlcjgzNDQz", "avatar_url": "https://avatars0.githubusercontent.com/u/83443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomers", "html_url": "https://github.com/tomers", "followers_url": "https://api.github.com/users/tomers/followers", "following_url": "https://api.github.com/users/tomers/following{/other_user}", "gists_url": "https://api.github.com/users/tomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomers/subscriptions", "organizations_url": "https://api.github.com/users/tomers/orgs", "repos_url": "https://api.github.com/users/tomers/repos", "events_url": "https://api.github.com/users/tomers/events{/privacy}", "received_events_url": "https://api.github.com/users/tomers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-17T10:12:31Z", "updated_at": "2020-05-17T18:41:39Z", "closed_at": "2020-05-17T10:35:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to boto3 SNS documentation, there is an _NotFound_ exception thrown when unsubscribing a non-existent subscription:\r\n\r\nReference: https://docs.aws.amazon.com/sns/latest/api/API_Unsubscribe.html\r\n```\r\nErrors\r\n...\r\nNotFound\r\nIndicates that the requested resource does not exist.\r\nHTTP Status Code: 404\r\n```\r\n\r\nHowever, in _moto_'s code, such case is ignored:\r\nReference: https://github.com/spulec/moto/blob/master/moto/sns/models.py#L483\r\n```\r\n    def unsubscribe(self, subscription_arn):\r\n        self.subscriptions.pop(subscription_arn, None)\r\n```\r\n\r\nThe test code also seems to be bogus, and expect that error not to be thrown:\r\nReference: https://github.com/spulec/moto/blob/master/tests/test_sns/test_subscriptions_boto3.py#L140\r\n```\r\n    # Now delete hanging subscription\r\n    client.unsubscribe(SubscriptionArn=subscription_arn)\r\n    ...\r\n    # Deleting it again should not result in any error\r\n    client.unsubscribe(SubscriptionArn=subscription_arn)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2998", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2998/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2998/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2998/events", "html_url": "https://github.com/spulec/moto/issues/2998", "id": 619530477, "node_id": "MDU6SXNzdWU2MTk1MzA0Nzc=", "number": 2998, "title": "Can not register container instance in moto ECS in standalone server mode", "user": {"login": "walkingpendulum", "id": 7490266, "node_id": "MDQ6VXNlcjc0OTAyNjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/7490266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/walkingpendulum", "html_url": "https://github.com/walkingpendulum", "followers_url": "https://api.github.com/users/walkingpendulum/followers", "following_url": "https://api.github.com/users/walkingpendulum/following{/other_user}", "gists_url": "https://api.github.com/users/walkingpendulum/gists{/gist_id}", "starred_url": "https://api.github.com/users/walkingpendulum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/walkingpendulum/subscriptions", "organizations_url": "https://api.github.com/users/walkingpendulum/orgs", "repos_url": "https://api.github.com/users/walkingpendulum/repos", "events_url": "https://api.github.com/users/walkingpendulum/events{/privacy}", "received_events_url": "https://api.github.com/users/walkingpendulum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-16T18:27:20Z", "updated_at": "2020-05-16T22:38:05Z", "closed_at": "2020-05-16T22:38:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Issue here is that I can not use moto in server mode for stubbing ECS, because there is no way to create and register container instance in standalone ECS stub.\r\n\r\nInternally ecs_backend (which is a EC2ContainerServiceBackend) calls ec2_backend (which is a EC2Backend) during ContainerInstance instantiation https://github.com/spulec/moto/blob/master/moto/ecs/models.py#L441. Then ec2_backend raises InvalidInstanceIdError, and there is no way to change this behavior when ECS runs in separate process as `moto_server ecs`.\r\n\r\nAny ideas what should I do here?\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2997", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2997/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2997/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2997/events", "html_url": "https://github.com/spulec/moto/issues/2997", "id": 619527110, "node_id": "MDU6SXNzdWU2MTk1MjcxMTA=", "number": 2997, "title": "Add mock describe_network_acls", "user": {"login": "anardy", "id": 1678729, "node_id": "MDQ6VXNlcjE2Nzg3Mjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1678729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anardy", "html_url": "https://github.com/anardy", "followers_url": "https://api.github.com/users/anardy/followers", "following_url": "https://api.github.com/users/anardy/following{/other_user}", "gists_url": "https://api.github.com/users/anardy/gists{/gist_id}", "starred_url": "https://api.github.com/users/anardy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anardy/subscriptions", "organizations_url": "https://api.github.com/users/anardy/orgs", "repos_url": "https://api.github.com/users/anardy/repos", "events_url": "https://api.github.com/users/anardy/events{/privacy}", "received_events_url": "https://api.github.com/users/anardy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-16T18:06:42Z", "updated_at": "2020-05-26T10:52:22Z", "closed_at": "2020-05-26T10:52:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nThank you for creating this library. I'm writting my tests and I need a `describe_network_acls`, but according to [IMPLEMENTATION_COVERAGE](https://github.com/spulec/moto/blob/master/IMPLEMENTATION_COVERAGE.md) these are not yet implemented. The [CONTRIBUTING](https://github.com/spulec/moto/blob/master/CONTRIBUTING.md) document asks me to create an issue first.\r\n\r\nI'm trying to write this method, but will probably need some guidance along the way. As soon as possible, I will send PR referencing this issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2992", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2992/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2992/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2992/events", "html_url": "https://github.com/spulec/moto/issues/2992", "id": 618447490, "node_id": "MDU6SXNzdWU2MTg0NDc0OTA=", "number": 2992, "title": "Unsubscribe of in-existent SNS subscription does not throw NotFoundException", "user": {"login": "tomers", "id": 83443, "node_id": "MDQ6VXNlcjgzNDQz", "avatar_url": "https://avatars0.githubusercontent.com/u/83443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomers", "html_url": "https://github.com/tomers", "followers_url": "https://api.github.com/users/tomers/followers", "following_url": "https://api.github.com/users/tomers/following{/other_user}", "gists_url": "https://api.github.com/users/tomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomers/subscriptions", "organizations_url": "https://api.github.com/users/tomers/orgs", "repos_url": "https://api.github.com/users/tomers/repos", "events_url": "https://api.github.com/users/tomers/events{/privacy}", "received_events_url": "https://api.github.com/users/tomers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-14T18:28:58Z", "updated_at": "2020-05-17T08:34:38Z", "closed_at": "2020-05-14T22:20:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "The SNS model's unsubscribe fails on KeyError when trying to unsubscribe an SNS subscription that does not exists.\r\n\r\nInstead, the code should be:\r\n```\r\ndef unsubscribe(self, subscription_arn):\r\n        try:\r\n            self.subscriptions.pop(subscription_arn, None)\r\n        except KeyError:\r\n            raise SNSNotFoundError(\"Topic with arn {0} not found\".format(subscription_arn))\r\n```\r\n\r\nReference: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sns.html#SNS.Client.unsubscribe\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2985", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2985/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2985/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2985/events", "html_url": "https://github.com/spulec/moto/issues/2985", "id": 615868173, "node_id": "MDU6SXNzdWU2MTU4NjgxNzM=", "number": 2985, "title": "DynamoDB2 transact_write_items() raises wrong error on ConditionExpression failure", "user": {"login": "mfogel", "id": 69902, "node_id": "MDQ6VXNlcjY5OTAy", "avatar_url": "https://avatars0.githubusercontent.com/u/69902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfogel", "html_url": "https://github.com/mfogel", "followers_url": "https://api.github.com/users/mfogel/followers", "following_url": "https://api.github.com/users/mfogel/following{/other_user}", "gists_url": "https://api.github.com/users/mfogel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfogel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfogel/subscriptions", "organizations_url": "https://api.github.com/users/mfogel/orgs", "repos_url": "https://api.github.com/users/mfogel/repos", "events_url": "https://api.github.com/users/mfogel/events{/privacy}", "received_events_url": "https://api.github.com/users/mfogel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-11T13:03:25Z", "updated_at": "2020-05-15T04:18:22Z", "closed_at": "2020-05-14T22:54:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The implementation of `transact_write_items()` in #2879 appears to work well in my application (thank you!) except for one detail. Behavior differs from boto3 on transaction failure due to a failed `ConditionExpression`.\r\n\r\nOn failure of a `ConditionExpression` within a transact item, boto will raise a `TransactionCanceledException` with a message with stringified `CancellationReason`s. This allows a client to determine which of the transact items in the submitted in the transaction actually failed. Moto `1.3.15.dev842` raises a `ConditionalCheckFailedException` instead.\r\n\r\nHere's a test case demonstrating the issue. This passes when run against dynamo via boto, but fails when using moto:\r\n\r\n```python\r\n@mock_dynamodb2\r\ndef test_transact_write_items_fails_with_transaction_canceled_exception():\r\n    table_schema = {\r\n        \"KeySchema\": [{\"AttributeName\": \"id\", \"KeyType\": \"HASH\"}],\r\n        \"AttributeDefinitions\": [{\"AttributeName\": \"id\", \"AttributeType\": \"S\"},],\r\n    }\r\n    dynamodb = boto3.client(\"dynamodb\", region_name=\"us-east-1\")\r\n    dynamodb.create_table(\r\n        TableName=\"test-table\", BillingMode=\"PAY_PER_REQUEST\", **table_schema\r\n    )\r\n    # Insert one item\r\n    dynamodb.put_item(TableName=\"test-table\", Item={\"id\": {\"S\": \"foo\"}})\r\n    # Update two items, the one that exists and another that doesn't\r\n    with assert_raises(ClientError) as ex:\r\n        dynamodb.transact_write_items(\r\n            TransactItems=[\r\n                {\r\n                    \"Update\": {\r\n                        \"Key\": {\"id\": {\"S\": \"foo\"}},\r\n                        \"TableName\": \"test-table\",\r\n                        \"UpdateExpression\": \"SET #k = :v\",\r\n                        \"ConditionExpression\": \"attribute_exists(id)\",\r\n                        \"ExpressionAttributeNames\": {\"#k\": \"key\"},\r\n                        \"ExpressionAttributeValues\": {\":v\": {\"S\": \"value\"}},\r\n                    }\r\n                },\r\n                {\r\n                    \"Update\": {\r\n                        \"Key\": {\"id\": {\"S\": \"doesnotexist\"}},\r\n                        \"TableName\": \"test-table\",\r\n                        \"UpdateExpression\": \"SET #e = :v\",\r\n                        \"ConditionExpression\": \"attribute_exists(id)\",\r\n                        \"ExpressionAttributeNames\": {\"#e\": \"key\"},\r\n                        \"ExpressionAttributeValues\": {\":v\": {\"S\": \"value\"}},\r\n                    }\r\n                }\r\n            ]\r\n        )\r\n    ex.exception.response[\"Error\"][\"Code\"].should.equal(\r\n        \"TransactionCanceledException\"\r\n    )\r\n    ex.exception.response[\"ResponseMetadata\"][\"HTTPStatusCode\"].should.equal(400)\r\n    ex.exception.response[\"Error\"][\"Message\"].should.equal(\r\n        \"Transaction cancelled, please refer cancellation reasons for specific reasons [None, ConditionalCheckFailed]\"\r\n    )\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2969", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2969/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2969/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2969/events", "html_url": "https://github.com/spulec/moto/issues/2969", "id": 613557865, "node_id": "MDU6SXNzdWU2MTM1NTc4NjU=", "number": 2969, "title": "Tests that work locally fail through CI (different os)", "user": {"login": "jmackown", "id": 6086996, "node_id": "MDQ6VXNlcjYwODY5OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6086996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmackown", "html_url": "https://github.com/jmackown", "followers_url": "https://api.github.com/users/jmackown/followers", "following_url": "https://api.github.com/users/jmackown/following{/other_user}", "gists_url": "https://api.github.com/users/jmackown/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmackown/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmackown/subscriptions", "organizations_url": "https://api.github.com/users/jmackown/orgs", "repos_url": "https://api.github.com/users/jmackown/repos", "events_url": "https://api.github.com/users/jmackown/events{/privacy}", "received_events_url": "https://api.github.com/users/jmackown/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-06T19:28:11Z", "updated_at": "2020-05-07T06:06:41Z", "closed_at": "2020-05-07T06:06:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using moto to mock DynamoDB and I have found that my tests work fine locally but fail every time through CircleCI, with an error that implies the tests are **not** using the mocked database.\r\n\r\nI've tried using the latest versions of both moto and boto in both envs (boto3 1.13.3 and moto 1.3.14 ) and I tried pinning to older versions (boto3 1.7.84 and moto 1.3.5) after finding issue [#1818](https://github.com/spulec/moto/issues/1818) but it makes no difference, it fails in the same way.\r\n\r\nMy local env is a Mac running Mojave 10.14.6 using python 3.7.6 in a venv.\r\nCI env is a python container provided by CircleCI _circleci/python:3.7.6-buster_\r\n\r\nTest code (_test_code_generator.py_):\r\n```\r\nfrom moto import mock_dynamodb2\r\nfrom code_generator import get_codes\r\nimport boto3\r\n\r\n\r\n@mock_dynamodb2\r\ndef test_get_codes_no_fixture():\r\n    mock_db = boto3.resource(\"dynamodb\")\r\n    table = mock_db.create_table(\r\n        TableName=\"secret_codes\",\r\n        KeySchema=[{\"AttributeName\": \"code\", \"KeyType\": \"HASH\"}],  # Partition key\r\n        AttributeDefinitions=[{\"AttributeName\": \"code\", \"AttributeType\": \"S\"}],\r\n        ProvisionedThroughput={\"ReadCapacityUnits\": 10, \"WriteCapacityUnits\": 10},\r\n    )\r\n\r\n    data = [\r\n        {\r\n            \"active\": True,\r\n            \"code\": \"YsSu4iAztUXm\",\r\n            \"expiry_date\": \"29/03/2021\",\r\n            \"generated_date\": \"29/03/2020\",\r\n            \"last_updated_date\": \"25/08/2020\",\r\n        }\r\n    ]\r\n    for row in data:\r\n        table.put_item(Item=row)\r\n\r\n    result = get_codes(code=\"YsSu4iAztUXm\", key=None)\r\n\r\n    assert len(result) == 1\r\n\r\n```\r\n\r\nActual code (_code_generator.py_):\r\n```import boto3\r\n\r\ndef get_codes(key=None):\r\n    table = boto3.resource(\"dynamodb\").Table(\"secret_codes\")\r\n\r\n    return_fields = \"code\"\r\n\r\n    codes = []\r\n\r\n    if code:\r\n        query_result = table.get_item(\r\n            Key={\"code\": code}, ProjectionExpression=return_fields\r\n        )\r\n\r\n        try:\r\n            codes.append(query_result[\"Item\"])\r\n        except KeyError:\r\n            print(\"code does not exist\")\r\n\r\n    return codes\r\n```\r\n\r\nResult when I run locally:\r\n```python3 -m pytest\r\n====================================== test session starts ======================================\r\nplatform darwin -- Python 3.7.6, pytest-5.4.1, py-1.8.1, pluggy-0.13.1\r\nrootdir: /Users/jennifermackown/Documents/MOJ/opg-data-lpa-codes\r\nplugins: cases-1.13.1\r\ncollected 7 items                                                                               \r\n\r\nlambda_functions/v1/tests/api/test_create_endpoint.py .                                   [ 14%]\r\nlambda_functions/v1/tests/api/test_errors.py ..                                           [ 42%]\r\nlambda_functions/v1/tests/api/test_healthcheck_endpoint.py .                              [ 57%]\r\nlambda_functions/v1/tests/api/test_revoke_endpoint.py .                                   [ 71%]\r\nlambda_functions/v1/tests/api/test_validate_endpoint.py .                                 [ 85%]\r\nlambda_functions/v1/tests/code_generator/test_get_codes.py .                              [100%]\r\n\r\n\r\n================================= 7 passed, 6 warnings in 5.45s =================================\r\n```\r\n\r\nAnd when it runs on CI:\r\n```\r\n#!/bin/bash -eo pipefail\r\npython -m pytest\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.7.6, pytest-5.4.1, py-1.8.1, pluggy-0.13.1\r\nrootdir: /home/circleci/project\r\nplugins: cases-1.13.1\r\ncollected 7 items                                                              \r\n\r\nlambda_functions/v1/tests/api/test_create_endpoint.py .                  [ 14%]\r\nlambda_functions/v1/tests/api/test_errors.py ..                          [ 42%]\r\nlambda_functions/v1/tests/api/test_healthcheck_endpoint.py .             [ 57%]\r\nlambda_functions/v1/tests/api/test_revoke_endpoint.py .                  [ 71%]\r\nlambda_functions/v1/tests/api/test_validate_endpoint.py .                [ 85%]\r\nlambda_functions/v1/tests/code_generator/test_get_codes.py F             [100%]\r\n\r\n=================================== FAILURES ===================================\r\n__________________________ test_get_codes_no_fixture ___________________________\r\n\r\n    @mock_dynamodb2\r\n    def test_get_codes_no_fixture():\r\n>       mock_db = boto3.resource(\"dynamodb\")\r\n\r\nlambda_functions/v1/tests/code_generator/test_get_codes.py:8: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../.local/lib/python3.7/site-packages/boto3/__init__.py:100: in resource\r\n    return _get_default_session().resource(*args, **kwargs)\r\n../.local/lib/python3.7/site-packages/boto3/session.py:389: in resource\r\n    aws_session_token=aws_session_token, config=config)\r\n../.local/lib/python3.7/site-packages/boto3/session.py:263: in client\r\n    aws_session_token=aws_session_token, config=config)\r\n../.local/lib/python3.7/site-packages/botocore/session.py:885: in create_client\r\n    client_config=config, api_version=api_version)\r\n../.local/lib/python3.7/site-packages/botocore/client.py:76: in create_client\r\n    verify, credentials, scoped_config, client_config, endpoint_bridge)\r\n../.local/lib/python3.7/site-packages/botocore/client.py:285: in _get_client_args\r\n    verify, credentials, scoped_config, client_config, endpoint_bridge)\r\n../.local/lib/python3.7/site-packages/botocore/args.py:45: in get_client_args\r\n    endpoint_url, is_secure, scoped_config)\r\n../.local/lib/python3.7/site-packages/botocore/args.py:111: in compute_client_args\r\n    service_name, region_name, endpoint_url, is_secure)\r\n../.local/lib/python3.7/site-packages/botocore/client.py:358: in resolve\r\n    service_name, region_name)\r\n../.local/lib/python3.7/site-packages/botocore/regions.py:122: in construct_endpoint\r\n    partition, service_name, region_name)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <botocore.regions.EndpointResolver object at 0x7efec02ca890>\r\npartition = OrderedDict([('defaults', OrderedDict([('hostname', '{service}.{region}.{dnsSuffix}'), ('protocols', ['https']), ('sig...1', OrderedDict()), ('us-east-2', OrderedDict()), ('us-west-1', OrderedDict()), ('us-west-2', OrderedDict())]))]))]))])\r\nservice_name = 'dynamodb', region_name = None\r\n\r\n    def _endpoint_for_partition(self, partition, service_name, region_name):\r\n        # Get the service from the partition, or an empty template.\r\n        service_data = partition['services'].get(\r\n            service_name, DEFAULT_SERVICE_DATA)\r\n        # Use the partition endpoint if no region is supplied.\r\n        if region_name is None:\r\n            if 'partitionEndpoint' in service_data:\r\n                region_name = service_data['partitionEndpoint']\r\n            else:\r\n>               raise NoRegionError()\r\nE               botocore.exceptions.NoRegionError: You must specify a region.\r\n\r\n../.local/lib/python3.7/site-packages/botocore/regions.py:135: NoRegionError\r\n\r\n=========================== short test summary info ============================\r\nFAILED lambda_functions/v1/tests/code_generator/test_get_codes.py::test_get_codes_no_fixture\r\n=================== 1 failed, 6 passed, 4 warnings in 4.97s ====================\r\n\r\nExited with code exit status 1\r\n```\r\n\r\nEither I am doing something daft (entirely possible) or the CI environment is for some reason not using the mocked db. I have NO idea what's going on.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2967", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2967/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2967/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2967/events", "html_url": "https://github.com/spulec/moto/issues/2967", "id": 613420227, "node_id": "MDU6SXNzdWU2MTM0MjAyMjc=", "number": 2967, "title": "Redshift restore_from_cluster_snapshot should fail if cluster already exist", "user": {"login": "kennedy", "id": 854543, "node_id": "MDQ6VXNlcjg1NDU0Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/854543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennedy", "html_url": "https://github.com/kennedy", "followers_url": "https://api.github.com/users/kennedy/followers", "following_url": "https://api.github.com/users/kennedy/following{/other_user}", "gists_url": "https://api.github.com/users/kennedy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennedy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennedy/subscriptions", "organizations_url": "https://api.github.com/users/kennedy/orgs", "repos_url": "https://api.github.com/users/kennedy/repos", "events_url": "https://api.github.com/users/kennedy/events{/privacy}", "received_events_url": "https://api.github.com/users/kennedy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-06T15:42:45Z", "updated_at": "2020-05-07T05:38:12Z", "closed_at": "2020-05-07T05:38:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "moto: `1.3.14` via pip running non-server\r\nboto: `2.49.0`\r\nboto3: `1.13.2`\r\nbotocore: `1.16.2`\r\npython `3.8.2`\r\nWindows 10\r\n\r\nFollowing the documentation from AWS: [Redshift.Client.restore_from_cluster_snapshot](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/redshift.html#Redshift.Client.restore_from_cluster_snapshot)\r\n\r\n## How to reproduce \r\n\r\n```python\r\n@mock_redshift\r\ndef test_cluster_already_exist():\r\n    mock_cluster_id = \"mock_cluster\"\r\n    mock_cluster_snapshot_id = \"mock_cluster_snapshot_1\"\r\n    restore_cluster_az = \"us-east-1b\"\r\n    redshift_client = boto3.client('redshift')\r\n    redshift_client.create_cluster(\r\n        DBName=\"test-db\",\r\n        ClusterIdentifier=mock_cluster_id,\r\n        ClusterType=\"single-node\",\r\n        NodeType=\"ds2.xlarge\",\r\n        MasterUsername=\"username\",\r\n        MasterUserPassword=\"password\",\r\n    )\r\n    redshift_client.create_cluster_snapshot(\r\n        SnapshotIdentifier=mock_cluster_snapshot_id, ClusterIdentifier=mock_cluster_id\r\n    )\r\n    redshift_client.restore_from_cluster_snapshot.when.called_with(\r\n        ClusterIdentifier=mock_cluster_id,\r\n        SnapshotIdentifier=mock_cluster_snapshot_id,\r\n        AvailabilityZone=restore_cluster_az\r\n    ).should.throw(ClientError, \"ClusterAlreadyExists\")\r\n```\r\n\r\n## Expectation\r\n\r\n`client.restore_from_cluster_snapshot` should throw a `ClientError` exception saying a cluster with the same ID already exist\r\n\r\n##  Actual\r\n\r\n`client.restore_from_cluster_snapshot` does not throw a `ClientError` exception, but proceeds into creating the cluster.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2961", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2961/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2961/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2961/events", "html_url": "https://github.com/spulec/moto/issues/2961", "id": 612683165, "node_id": "MDU6SXNzdWU2MTI2ODMxNjU=", "number": 2961, "title": "iot list_thing_groups is incomplete", "user": {"login": "Chagui-", "id": 3289167, "node_id": "MDQ6VXNlcjMyODkxNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3289167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chagui-", "html_url": "https://github.com/Chagui-", "followers_url": "https://api.github.com/users/Chagui-/followers", "following_url": "https://api.github.com/users/Chagui-/following{/other_user}", "gists_url": "https://api.github.com/users/Chagui-/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chagui-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chagui-/subscriptions", "organizations_url": "https://api.github.com/users/Chagui-/orgs", "repos_url": "https://api.github.com/users/Chagui-/repos", "events_url": "https://api.github.com/users/Chagui-/events{/privacy}", "received_events_url": "https://api.github.com/users/Chagui-/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-05T15:16:10Z", "updated_at": "2020-05-06T16:00:06Z", "closed_at": "2020-05-06T16:00:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Current implementation of list_thing_groups doesn't take into account any function inputs. These are the inputs listed in boto3.\r\n```\r\nresponse = client.list_thing_groups(\r\n    nextToken='string',\r\n    maxResults=123,\r\n    parentGroup='string',\r\n    namePrefixFilter='string',\r\n    recursive=True|False\r\n)\r\n```\r\nThis is the current implementation in moto, returning all the groups always:\r\n```\r\ndef list_thing_groups(self, parent_group, name_prefix_filter, recursive):\r\n    thing_groups = self.thing_groups.values()\r\n    return thing_groups\r\n```\r\n\r\nIt must also take into account `ResourceNotFoundException`\r\n\r\nI'll be looking into this right now. \r\nI need at least an implementation for parentGroup for my project.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2960", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2960/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2960/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2960/events", "html_url": "https://github.com/spulec/moto/issues/2960", "id": 612036470, "node_id": "MDU6SXNzdWU2MTIwMzY0NzA=", "number": 2960, "title": "Dynamo UpdateExpression using ADD from zero broken on master", "user": {"login": "mfogel", "id": 69902, "node_id": "MDQ6VXNlcjY5OTAy", "avatar_url": "https://avatars0.githubusercontent.com/u/69902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfogel", "html_url": "https://github.com/mfogel", "followers_url": "https://api.github.com/users/mfogel/followers", "following_url": "https://api.github.com/users/mfogel/following{/other_user}", "gists_url": "https://api.github.com/users/mfogel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfogel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfogel/subscriptions", "organizations_url": "https://api.github.com/users/mfogel/orgs", "repos_url": "https://api.github.com/users/mfogel/repos", "events_url": "https://api.github.com/users/mfogel/events{/privacy}", "received_events_url": "https://api.github.com/users/mfogel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-04T17:19:29Z", "updated_at": "2020-05-08T14:54:01Z", "closed_at": "2020-05-08T14:54:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It appears #2924 broke some dynamo updates using `ADD`.\r\n\r\nThe issue is that dynamo allows you to use `ADD` in an `UpdateExpression` with non-existent attributes and zero will be assumed. The new AST-parsing scheme doesn't seem to honor that.\r\n\r\nThe following test case demonstrates that syntax. I've verified this worked on master right before the merge #2924, and fails right after:\r\n\r\n```python\r\n@mock_dynamodb2\r\ndef test_update_item_atomic_counter_from_zero():\r\n    table = \"table_t\"\r\n    ddb_mock = boto3.client(\"dynamodb\", region_name=\"eu-west-3\")\r\n    ddb_mock.create_table(\r\n        TableName=table,\r\n        KeySchema=[{\"AttributeName\": \"t_id\", \"KeyType\": \"HASH\"}],\r\n        AttributeDefinitions=[{\"AttributeName\": \"t_id\", \"AttributeType\": \"S\"}],\r\n        BillingMode=\"PAY_PER_REQUEST\",\r\n    )\r\n\r\n    key = {\"t_id\": {\"S\": \"item1\"}}\r\n\r\n    ddb_mock.put_item(\r\n        TableName=table,\r\n        Item={\"t_id\": {\"S\": \"item1\"}},\r\n    )\r\n\r\n    ddb_mock.update_item(\r\n        TableName=table,\r\n        Key=key,\r\n        UpdateExpression=\"add n_i :inc1, n_f :inc2\",\r\n        ExpressionAttributeValues={\":inc1\": {\"N\": \"1.2\"}, \":inc2\": {\"N\": \"-0.5\"}},\r\n    )\r\n    updated_item = ddb_mock.get_item(TableName=table, Key=key)[\"Item\"]\r\n    updated_item[\"n_i\"][\"N\"].should.equal(\"1.2\")\r\n    updated_item[\"n_f\"][\"N\"].should.equal(\"-0.5\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2959", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2959/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2959/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2959/events", "html_url": "https://github.com/spulec/moto/issues/2959", "id": 611850994, "node_id": "MDU6SXNzdWU2MTE4NTA5OTQ=", "number": 2959, "title": "SES verify_domain_identity incompatible with send_raw_email", "user": {"login": "staylor-ds", "id": 36075692, "node_id": "MDQ6VXNlcjM2MDc1Njky", "avatar_url": "https://avatars0.githubusercontent.com/u/36075692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/staylor-ds", "html_url": "https://github.com/staylor-ds", "followers_url": "https://api.github.com/users/staylor-ds/followers", "following_url": "https://api.github.com/users/staylor-ds/following{/other_user}", "gists_url": "https://api.github.com/users/staylor-ds/gists{/gist_id}", "starred_url": "https://api.github.com/users/staylor-ds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/staylor-ds/subscriptions", "organizations_url": "https://api.github.com/users/staylor-ds/orgs", "repos_url": "https://api.github.com/users/staylor-ds/repos", "events_url": "https://api.github.com/users/staylor-ds/events{/privacy}", "received_events_url": "https://api.github.com/users/staylor-ds/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-04T12:50:37Z", "updated_at": "2020-05-15T04:16:20Z", "closed_at": "2020-05-14T22:52:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/spulec/moto/blob/323877c15de6efaaa098efd282b65729fa78d3eb/moto/ses/models.py#L203\r\n\r\nShould follow the following logic:\r\nhttps://github.com/spulec/moto/blob/323877c15de6efaaa098efd282b65729fa78d3eb/moto/ses/models.py#L147", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2956", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2956/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2956/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2956/events", "html_url": "https://github.com/spulec/moto/issues/2956", "id": 611531242, "node_id": "MDU6SXNzdWU2MTE1MzEyNDI=", "number": 2956, "title": "Add managedblockchain network functions", "user": {"login": "jpbelleau", "id": 14190576, "node_id": "MDQ6VXNlcjE0MTkwNTc2", "avatar_url": "https://avatars3.githubusercontent.com/u/14190576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpbelleau", "html_url": "https://github.com/jpbelleau", "followers_url": "https://api.github.com/users/jpbelleau/followers", "following_url": "https://api.github.com/users/jpbelleau/following{/other_user}", "gists_url": "https://api.github.com/users/jpbelleau/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpbelleau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpbelleau/subscriptions", "organizations_url": "https://api.github.com/users/jpbelleau/orgs", "repos_url": "https://api.github.com/users/jpbelleau/repos", "events_url": "https://api.github.com/users/jpbelleau/events{/privacy}", "received_events_url": "https://api.github.com/users/jpbelleau/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-03T23:17:40Z", "updated_at": "2020-05-07T11:34:43Z", "closed_at": "2020-05-07T11:34:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Add managedblockchain - start with network functions\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2955", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2955/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2955/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2955/events", "html_url": "https://github.com/spulec/moto/issues/2955", "id": 611487015, "node_id": "MDU6SXNzdWU2MTE0ODcwMTU=", "number": 2955, "title": "Feature: Logs: put_subscription_filter", "user": {"login": "benkeil", "id": 16204452, "node_id": "MDQ6VXNlcjE2MjA0NDUy", "avatar_url": "https://avatars3.githubusercontent.com/u/16204452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benkeil", "html_url": "https://github.com/benkeil", "followers_url": "https://api.github.com/users/benkeil/followers", "following_url": "https://api.github.com/users/benkeil/following{/other_user}", "gists_url": "https://api.github.com/users/benkeil/gists{/gist_id}", "starred_url": "https://api.github.com/users/benkeil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benkeil/subscriptions", "organizations_url": "https://api.github.com/users/benkeil/orgs", "repos_url": "https://api.github.com/users/benkeil/repos", "events_url": "https://api.github.com/users/benkeil/events{/privacy}", "received_events_url": "https://api.github.com/users/benkeil/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-03T19:23:51Z", "updated_at": "2020-05-12T12:58:50Z", "closed_at": "2020-05-12T12:34:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "moto version: v1.3.14\r\n\r\nI try to deploy a lambda with log group and permissions and a dynamoDb table to moto with terraform.\r\n\r\nI get 2 errors:\r\n\r\n`NotImplementedError: The put_subscription_filter action has not been implemented`\r\nand\r\n`AttributeError: 'DynamoHandler' object has no attribute 'describe_continuous_backups'`\r\n\r\nAdditional it looks like I can't create a global secondary index.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2953", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2953/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2953/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2953/events", "html_url": "https://github.com/spulec/moto/issues/2953", "id": 611319982, "node_id": "MDU6SXNzdWU2MTEzMTk5ODI=", "number": 2953, "title": "api Gateway put integration response does not consider the response_templates parameter.", "user": {"login": "usmankb", "id": 45658844, "node_id": "MDQ6VXNlcjQ1NjU4ODQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/45658844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usmankb", "html_url": "https://github.com/usmankb", "followers_url": "https://api.github.com/users/usmankb/followers", "following_url": "https://api.github.com/users/usmankb/following{/other_user}", "gists_url": "https://api.github.com/users/usmankb/gists{/gist_id}", "starred_url": "https://api.github.com/users/usmankb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usmankb/subscriptions", "organizations_url": "https://api.github.com/users/usmankb/orgs", "repos_url": "https://api.github.com/users/usmankb/repos", "events_url": "https://api.github.com/users/usmankb/events{/privacy}", "received_events_url": "https://api.github.com/users/usmankb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-03T02:56:34Z", "updated_at": "2020-05-30T07:40:36Z", "closed_at": "2020-05-30T07:40:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "API gateway put integration response function accepts the parameter response_templates but always sets it to None.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2943", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2943/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2943/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2943/events", "html_url": "https://github.com/spulec/moto/issues/2943", "id": 610661241, "node_id": "MDU6SXNzdWU2MTA2NjEyNDE=", "number": 2943, "title": "placementConstraint is not stored in task definition", "user": {"login": "rifqifatih", "id": 1481852, "node_id": "MDQ6VXNlcjE0ODE4NTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1481852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rifqifatih", "html_url": "https://github.com/rifqifatih", "followers_url": "https://api.github.com/users/rifqifatih/followers", "following_url": "https://api.github.com/users/rifqifatih/following{/other_user}", "gists_url": "https://api.github.com/users/rifqifatih/gists{/gist_id}", "starred_url": "https://api.github.com/users/rifqifatih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rifqifatih/subscriptions", "organizations_url": "https://api.github.com/users/rifqifatih/orgs", "repos_url": "https://api.github.com/users/rifqifatih/repos", "events_url": "https://api.github.com/users/rifqifatih/events{/privacy}", "received_events_url": "https://api.github.com/users/rifqifatih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-01T09:24:06Z", "updated_at": "2020-05-02T17:38:33Z", "closed_at": "2020-05-02T17:38:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\nI'm trying to get the `placementConstraints` set on ecs `register_task_definition`. I assume this is not yet implemented because when I do `describe_task_definition`, it didn't return the `placementConstraints` that I described before.\r\n\r\nI'm not sure if this will complicate the mocking behavior, but returning the assigned value should be ok, I guess.\r\n\r\nReproduce:\r\n```\r\necs_client.register_task_definition(family='family',\r\n                                            containerDefinitions=[{'image': 'image',\r\n                                                                   'name': 'name'}],\r\n                                            placementConstraints=[{\r\n                                                \"type\": \"memberOf\",\r\n                                                \"expression\": \"something\"\r\n                                            }])\r\n\r\ntaskdef = ecs_client.describe_task_definition(taskDefinition='family:1')\r\ntaskdef.get(\"placementConstraints\")\r\n```\r\nMoto version: 1.3.14\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2941", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2941/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2941/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2941/events", "html_url": "https://github.com/spulec/moto/issues/2941", "id": 610397364, "node_id": "MDU6SXNzdWU2MTAzOTczNjQ=", "number": 2941, "title": "iot.delete_thing_group() should raise when deleting groups with childs", "user": {"login": "Chagui-", "id": 3289167, "node_id": "MDQ6VXNlcjMyODkxNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3289167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Chagui-", "html_url": "https://github.com/Chagui-", "followers_url": "https://api.github.com/users/Chagui-/followers", "following_url": "https://api.github.com/users/Chagui-/following{/other_user}", "gists_url": "https://api.github.com/users/Chagui-/gists{/gist_id}", "starred_url": "https://api.github.com/users/Chagui-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Chagui-/subscriptions", "organizations_url": "https://api.github.com/users/Chagui-/orgs", "repos_url": "https://api.github.com/users/Chagui-/repos", "events_url": "https://api.github.com/users/Chagui-/events{/privacy}", "received_events_url": "https://api.github.com/users/Chagui-/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-30T21:25:45Z", "updated_at": "2020-05-01T05:39:28Z", "closed_at": "2020-05-01T05:39:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Given the folowing group hierarchy:\r\n```\r\n--Group1a\r\n    |--Group2a\r\n```\r\nWhen calling `iot.delete_group_thing(\"Group1a\")`. The following error should rise:\r\n`botocore.errorfactory.InvalidRequestException: An error occurred (InvalidRequestException) when calling the DeleteThingGroup operation: Cannot delete thing group : Group1a when there are still child groups attached to it`\r\n\r\nHowever, moto just deletes the group succesfully.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2937", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2937/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2937/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2937/events", "html_url": "https://github.com/spulec/moto/issues/2937", "id": 609455896, "node_id": "MDU6SXNzdWU2MDk0NTU4OTY=", "number": 2937, "title": "S3 DeleteObjects Operation issue in Moto results failure in LocalStack", "user": {"login": "Nasrin-Shiraly", "id": 33415279, "node_id": "MDQ6VXNlcjMzNDE1Mjc5", "avatar_url": "https://avatars0.githubusercontent.com/u/33415279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nasrin-Shiraly", "html_url": "https://github.com/Nasrin-Shiraly", "followers_url": "https://api.github.com/users/Nasrin-Shiraly/followers", "following_url": "https://api.github.com/users/Nasrin-Shiraly/following{/other_user}", "gists_url": "https://api.github.com/users/Nasrin-Shiraly/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nasrin-Shiraly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nasrin-Shiraly/subscriptions", "organizations_url": "https://api.github.com/users/Nasrin-Shiraly/orgs", "repos_url": "https://api.github.com/users/Nasrin-Shiraly/repos", "events_url": "https://api.github.com/users/Nasrin-Shiraly/events{/privacy}", "received_events_url": "https://api.github.com/users/Nasrin-Shiraly/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-30T00:13:58Z", "updated_at": "2020-05-01T20:47:18Z", "closed_at": "2020-05-01T20:47:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sending a DeleteObjects request from AWS Go SDK to localStack ( set to latest, so fetched moto-ext>=1.3.15.12) results is 500 error.\r\n\r\n\r\nDeleteObject operation works successfully, it's the DeleteObject**s** that fails. Looking into the difference between the request payload (AWS Go SDK github.com/aws/aws-sdk-go v1.28.6):\r\n\r\n**DeleteObject:** \r\n`op := &request.Operation{\r\n\t\tName:       opDeleteObject,\r\n\t\tHTTPMethod: \"DELETE\",\r\n\t\tHTTPPath:   \"/{Bucket}/{Key+}\",\r\n\t}`\r\n\r\nWhere `const opDeleteObject = \"DeleteObject\"` \r\n\r\n**DeleteObjects**\r\n`op := &request.Operation{\r\n\t\tName:       opDeleteObjects,\r\n\t\tHTTPMethod: \"POST\",\r\n\t\tHTTPPath:   \"/{Bucket}?delete\",\r\n\t}`\r\n\r\nWhere `const opDeleteObjects = \"DeleteObjects\"`\r\n\r\n**In `_bucket_response_delete_keys` method of `class ResponseObject` **_line 843_** the check is:\r\n`objects = body_dict[\"Delete\"].get(\"Object\", [])`** \r\n\r\nIn case of `DeleteObjects` the key is \"Objects\", so objects variable will be []\r\n\r\nNote the difference between how each of these operations is called: \r\n\r\n**DeleteObject**\r\n\r\n`_, err := s.Client.DeleteObject(&s3.DeleteObjectInput{Bucket: aws.String(bucket), Key: aws.String(key)})\r\n`\r\n**DeleteObjects**\r\n`_, err := s.Client.DeleteObjects(&s3.DeleteObjectsInput{Bucket: aws.String(bucket), Delete: &s3.Delete{\r\n   Objects: keys,\r\n   Quiet: aws.Bool(false),\r\n}})\r\n`\r\n\r\nthe Delete struct has a field **Objects** instead of **Object**\r\n`\r\n\tObjects []*ObjectIdentifier `locationName:\"Object\" type:\"list\" flattened:\"true\" required:\"true\"`\r\n` \r\n\r\n\r\n\r\n######################################################################################\r\n\r\n\r\nHow to replicate:\r\n\r\nPlace some files in 'examplebucket'\r\ncall the DeleteObjects (code from AWS Docs) which the keys:\r\n\r\n`svc := s3.New(session.New())\r\ninput := &s3.DeleteObjectsInput{\r\n    Bucket: aws.String(\"examplebucket\"),\r\n    Delete: &s3.Delete{\r\n        Objects: []*s3.ObjectIdentifier{\r\n            {\r\n                Key: aws.String(\"objectkey1\"),\r\n            },\r\n            {\r\n                Key: aws.String(\"objectkey2\"),\r\n            },\r\n        },\r\n        Quiet: aws.Bool(false),\r\n    },\r\n}\r\n\r\nresult, err := svc.DeleteObjects(input)\r\nif err != nil {\r\n    if aerr, ok := err.(awserr.Error); ok {\r\n        switch aerr.Code() {\r\n        default:\r\n            fmt.Println(aerr.Error())\r\n        }\r\n    } else {\r\n        // Print the error, cast err to awserr.Error to get the Code and\r\n        // Message from an error.\r\n        fmt.Println(err.Error())\r\n    }\r\n    return\r\n}\r\n\r\nfmt.Println(result)\r\n}`\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2935", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2935/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2935/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2935/events", "html_url": "https://github.com/spulec/moto/issues/2935", "id": 609219654, "node_id": "MDU6SXNzdWU2MDkyMTk2NTQ=", "number": 2935, "title": "mock_sts throws ImportError: cannot import name 'sts_backend' from 'moto.sts' ", "user": {"login": "getglad", "id": 2453555, "node_id": "MDQ6VXNlcjI0NTM1NTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2453555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/getglad", "html_url": "https://github.com/getglad", "followers_url": "https://api.github.com/users/getglad/followers", "following_url": "https://api.github.com/users/getglad/following{/other_user}", "gists_url": "https://api.github.com/users/getglad/gists{/gist_id}", "starred_url": "https://api.github.com/users/getglad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/getglad/subscriptions", "organizations_url": "https://api.github.com/users/getglad/orgs", "repos_url": "https://api.github.com/users/getglad/repos", "events_url": "https://api.github.com/users/getglad/events{/privacy}", "received_events_url": "https://api.github.com/users/getglad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-29T17:12:59Z", "updated_at": "2020-05-01T13:20:25Z", "closed_at": "2020-05-01T13:02:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been tracking https://github.com/spulec/moto/issues/2836 (relax version pins in setup.py for non-Py2 users, etc) and tested it against our code base. Many seem to be working but `mock_sts` is producing an `ImportError`.\r\n\r\nAt the bottom of this ticket, I have a sample test using `pytest` pulled from the `mock_sts` tests in `moto` that is producing the same error.  \r\n\r\nI've reviewed a few dev releases and found the breaking build:\r\n\r\n- works / passes with no errors:\r\n   - 4/27 - pip install moto==1.3.15.dev758\r\n- doesn't work / fails with an `ImportError` on `mock_sts`\r\n   - 4/28 - pip install moto==1.3.15.dev765\r\n\r\nUsing `Python 3.7.3`\r\n\r\n### Sample test sourced from https://github.com/spulec/moto/blob/master/tests/test_sts/test_sts.py#L56-L84\r\n```\r\nimport pytest\r\nimport json\r\nimport boto3\r\n\r\nfrom moto import mock_sts\r\n\r\nACCOUNT_ID = '123'\r\n\r\n@mock_sts\r\ndef test_assume_role():\r\n    client = boto3.client(\"sts\", region_name=\"us-east-1\")\r\n\r\n    session_name = \"session-name\"\r\n    policy = json.dumps(\r\n        {\r\n            \"Statement\": [\r\n                {\r\n                    \"Sid\": \"Stmt13690092345534\",\r\n                    \"Action\": [\"S3:ListBucket\"],\r\n                    \"Effect\": \"Allow\",\r\n                    \"Resource\": [\"arn:aws:s3:::foobar-tester\"],\r\n                }\r\n            ]\r\n        }\r\n    )\r\n    role_name = \"test-role\"\r\n    s3_role = \"arn:aws:iam::{account_id}:role/{role_name}\".format(\r\n        account_id=ACCOUNT_ID, role_name=role_name\r\n    )\r\n    assume_role_response = client.assume_role(\r\n        RoleArn=s3_role,\r\n        RoleSessionName=session_name,\r\n        Policy=policy,\r\n        DurationSeconds=900,\r\n    )\r\n\r\n    credentials = assume_role_response[\"Credentials\"]\r\n    assert credentials[\"SessionToken\"] == 356\r\n```\r\n\r\n### Error when moto==1.3.15.dev765\r\n \r\n```\r\n================================================================ ERRORS ================================================================\r\n___________________________________________________ ERROR collecting simple_test.py ____________________________________________________\r\nImportError while importing test module '<path_to>/simple_test.py'.\r\nHint: make sure your test modules/packages have valid Python names.\r\nTraceback:\r\nsimple_test.py:11: in <module>\r\n    @mock_sts\r\n.venv/lib/python3.7/site-packages/moto/__init__.py:8: in f\r\n    module = importlib.import_module(module_name, \"moto\")\r\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/importlib/__init__.py:127: in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n.venv/lib/python3.7/site-packages/moto/sts/__init__.py:2: in <module>\r\n    from .models import sts_backend\r\n.venv/lib/python3.7/site-packages/moto/sts/models.py:5: in <module>\r\n    from moto.core import BaseBackend, BaseModel\r\n.venv/lib/python3.7/site-packages/moto/core/__init__.py:4: in <module>\r\n    from .responses import ActionAuthenticatorMixin\r\n.venv/lib/python3.7/site-packages/moto/core/responses.py:14: in <module>\r\n    from moto.core.access_control import IAMRequest, S3IAMRequest\r\n.venv/lib/python3.7/site-packages/moto/core/access_control.py:46: in <module>\r\n    from moto.sts import sts_backend\r\nE   ImportError: cannot import name 'sts_backend' from 'moto.sts' (<path_to>/.venv/lib/python3.7/site-packages/moto/sts/__init__.py)\r\n=========================================================== warnings summary ===========================================================\r\n.venv/lib/python3.7/site-packages/boto/plugin.py:40\r\n  <path_to>/.venv/lib/python3.7/site-packages/boto/plugin.py:40: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n    import imp\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n======================================================= short test summary info ========================================================\r\nERROR simple_test.py\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2928", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2928/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2928/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2928/events", "html_url": "https://github.com/spulec/moto/issues/2928", "id": 607745652, "node_id": "MDU6SXNzdWU2MDc3NDU2NTI=", "number": 2928, "title": "ApiGateway UsagePlan api does not honour API Gateway behaviour with non existing api keys and usage plans", "user": {"login": "apalumbo", "id": 1729784, "node_id": "MDQ6VXNlcjE3Mjk3ODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1729784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apalumbo", "html_url": "https://github.com/apalumbo", "followers_url": "https://api.github.com/users/apalumbo/followers", "following_url": "https://api.github.com/users/apalumbo/following{/other_user}", "gists_url": "https://api.github.com/users/apalumbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/apalumbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apalumbo/subscriptions", "organizations_url": "https://api.github.com/users/apalumbo/orgs", "repos_url": "https://api.github.com/users/apalumbo/repos", "events_url": "https://api.github.com/users/apalumbo/events{/privacy}", "received_events_url": "https://api.github.com/users/apalumbo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-27T18:07:48Z", "updated_at": "2020-04-28T00:25:08Z", "closed_at": "2020-04-28T00:25:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Instead of handling the request returning a 404 Not found error, the current version hangs with an unexpected error due to the access of non-existing keys in a python lists.\r\nThis breaks get_usage_plan and get_usage_plan_key on api gateway model\r\n\r\nI created a PR to fix this issue #2927 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2926", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2926/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2926/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2926/events", "html_url": "https://github.com/spulec/moto/issues/2926", "id": 607465671, "node_id": "MDU6SXNzdWU2MDc0NjU2NzE=", "number": 2926, "title": "download_fileobj returns an empty byte array when content-encoding is set", "user": {"login": "AmrAwadK", "id": 29049599, "node_id": "MDQ6VXNlcjI5MDQ5NTk5", "avatar_url": "https://avatars3.githubusercontent.com/u/29049599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AmrAwadK", "html_url": "https://github.com/AmrAwadK", "followers_url": "https://api.github.com/users/AmrAwadK/followers", "following_url": "https://api.github.com/users/AmrAwadK/following{/other_user}", "gists_url": "https://api.github.com/users/AmrAwadK/gists{/gist_id}", "starred_url": "https://api.github.com/users/AmrAwadK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AmrAwadK/subscriptions", "organizations_url": "https://api.github.com/users/AmrAwadK/orgs", "repos_url": "https://api.github.com/users/AmrAwadK/repos", "events_url": "https://api.github.com/users/AmrAwadK/events{/privacy}", "received_events_url": "https://api.github.com/users/AmrAwadK/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/spulec/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-27T11:23:02Z", "updated_at": "2020-05-01T13:09:46Z", "closed_at": "2020-05-01T13:09:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "My use case is I want to set the content encoding when uploading a gzipped file, while this seems to set the content correctly, `download_fileobj` returns an empty byte array.\r\n\r\nHere's a snippet that shows the problem\r\n```python\r\nimport gzip\r\nimport io\r\nimport boto3\r\nfrom moto import mock_s3\r\n\r\n@mock_s3\r\ndef test_moto():\r\n    key = 'an-object'\r\n    bucket = 'test-bucket'\r\n    content = b'1234'\r\n\r\n    s3 = boto3.resource('s3', region_name='us-east-1')\r\n    s3.create_bucket(Bucket=bucket)\r\n    obj = s3.Object(bucket, key)\r\n\r\n    args = dict(ContentEncoding='gzip')\r\n    obj.upload_fileobj(io.BytesIO(gzip.compress(content)), ExtraArgs=args)\r\n\r\n    # this works\r\n    actual_content = s3.Object(bucket, key).get()['Body'].read()\r\n    assert actual_content == gzip.compress(content)\r\n\r\n    # this doesn't\r\n    filelike = io.BytesIO()\r\n    s3.Object(bucket, key).download_fileobj(filelike)\r\n    assert filelike.read() == gzip.compress(content)\r\n```\r\n\r\nThe second asserting fails with the following exception when running the test using `pytest`:\r\n\r\n```\r\n>       assert filelike.read() == gzip.compress(content)\r\nE       AssertionError: assert b'' == b'\\x1f\\x8b\\x08\\x00\\x0b\\xbf\\...xe0\\xe3\\x9b\\x04\\x00\\x00\\x00'\r\nE         Right contains more items, first extra item: 31\r\nE         Full diff:\r\nE         - b''\r\nE         + (b'\\x1f\\x8b\\x08\\x00\\x0b\\xbf\\xa6^\\x02\\xff3426\\x01\\x00\\xa3\\xe0\\xe3\\x9b'\r\nE         +  b'\\x04\\x00\\x00\\x00')\r\n```\r\n\r\nNote that setting `ExtraArgs` to an empty dict will make both tests pass, hence why I believe the problem is related to ContentEncoding, I have not tested other `ExtraArgs`.\r\n\r\nI'm using the following package versions:\r\n```\r\n$ pip freeze | grep oto\r\nboto==2.49.0\r\nboto3==1.12.46\r\nbotocore==1.15.46\r\nmoto==1.3.14\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2923", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2923/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2923/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2923/events", "html_url": "https://github.com/spulec/moto/issues/2923", "id": 606946317, "node_id": "MDU6SXNzdWU2MDY5NDYzMTc=", "number": 2923, "title": "Odd behavior when running multiple test files.", "user": {"login": "johnwc", "id": 2798441, "node_id": "MDQ6VXNlcjI3OTg0NDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2798441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnwc", "html_url": "https://github.com/johnwc", "followers_url": "https://api.github.com/users/johnwc/followers", "following_url": "https://api.github.com/users/johnwc/following{/other_user}", "gists_url": "https://api.github.com/users/johnwc/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnwc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnwc/subscriptions", "organizations_url": "https://api.github.com/users/johnwc/orgs", "repos_url": "https://api.github.com/users/johnwc/repos", "events_url": "https://api.github.com/users/johnwc/events{/privacy}", "received_events_url": "https://api.github.com/users/johnwc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/spulec/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-26T07:42:46Z", "updated_at": "2020-04-28T03:36:26Z", "closed_at": "2020-04-28T03:36:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm finding that all my tests within a single test_ file runs successfully when run with pytest pointing at the single file. But, if I run pytest with no arguments, so that it runs all my tests in all test_ files, they all fail. I'm sure I've done something incorrect in my setup, just unsure what.\r\n\r\nMy structure is that I create mock class in the global scope, then start and stop them within pytest's start and teardown functions. At the moment, I need to monkeypatch a few functions to some of the classes in moto to add/extend missing functionality, like VPC Endpoints create/modify/describe. So I need to inject those new functions into the classes before moto initiates them within moto_*().start(). Otherwise they don't seem to be available to moto if I attempt to patch them after the call to start().\r\n\r\n```python\r\nfrom moto import mock_s3\r\nimport boto3\r\nimport pytest\r\nfrom moto.ec2.responses import VPCs\r\n\r\nMOCK_S3 = mock_s3()\r\n\r\ndef setup_function(function):\r\n    # Patch before we start\r\n    VPCs.create_vpc_endpoint = clnt_create_vpc_endpoint\r\n    VPCs.describe_vpc_endpoints = clnt_describe_vpc_endpoints\r\n    VPCs.modify_vpc_endpoint = clnt_modify_vpc_endpoint\r\n\r\n    MOCK_S3.start()\r\n\r\ndef teardown_function(function):\r\n    MOCK_S3.stop()\r\n\r\ndef test_one():\r\n    <run boto calls>\r\n\r\ndef test_two():\r\n    <run boto calls>\r\n```\r\n\r\nThese all run fine at once, when just this test file is ran, but not when a set of files are ran.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2918", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2918/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2918/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2918/events", "html_url": "https://github.com/spulec/moto/issues/2918", "id": 605341254, "node_id": "MDU6SXNzdWU2MDUzNDEyNTQ=", "number": 2918, "title": "S3 delete_objects ignores VersionId field", "user": {"login": "antoinewdg-mt", "id": 53178098, "node_id": "MDQ6VXNlcjUzMTc4MDk4", "avatar_url": "https://avatars2.githubusercontent.com/u/53178098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoinewdg-mt", "html_url": "https://github.com/antoinewdg-mt", "followers_url": "https://api.github.com/users/antoinewdg-mt/followers", "following_url": "https://api.github.com/users/antoinewdg-mt/following{/other_user}", "gists_url": "https://api.github.com/users/antoinewdg-mt/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoinewdg-mt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoinewdg-mt/subscriptions", "organizations_url": "https://api.github.com/users/antoinewdg-mt/orgs", "repos_url": "https://api.github.com/users/antoinewdg-mt/repos", "events_url": "https://api.github.com/users/antoinewdg-mt/events{/privacy}", "received_events_url": "https://api.github.com/users/antoinewdg-mt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-23T08:27:49Z", "updated_at": "2020-04-27T14:38:07Z", "closed_at": "2020-04-27T14:38:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Moto version:** 1.3.14, installed with pip (the bug is present on master)\r\n\r\nWhen calling delete_objects on a versioned bucket, the `VersionId` field is ignored, and a regular deletion is performed instead of deleting the specific version.\r\nThis is contrary to what happens when doing it with `delete_object`\r\n\r\n\r\n```python\r\nclient = boto3.client(\"s3\", region_name=DEFAULT_REGION_NAME)\r\nclient.delete_objects(\r\n        Bucket=\"blah\", Delete={\"Objects\": [{\"Key\": \"test1\", \"VersionId\": \"XX\"}]}\r\n) # Does not delete the specific version\r\nclient.delete_object(Bucket=\"blah\", Key=\"test1\", VersionId\"=\"XX\") # Works as expected\r\n```\r\n\r\nI'm preparing a PR with a fix.\r\n\r\n\r\n(thanks for the awesome lib !)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2915", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2915/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2915/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2915/events", "html_url": "https://github.com/spulec/moto/issues/2915", "id": 604539555, "node_id": "MDU6SXNzdWU2MDQ1Mzk1NTU=", "number": 2915, "title": "NoSuchBucket error when endpoint-url contain dots", "user": {"login": "tomers", "id": 83443, "node_id": "MDQ6VXNlcjgzNDQz", "avatar_url": "https://avatars0.githubusercontent.com/u/83443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomers", "html_url": "https://github.com/tomers", "followers_url": "https://api.github.com/users/tomers/followers", "following_url": "https://api.github.com/users/tomers/following{/other_user}", "gists_url": "https://api.github.com/users/tomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomers/subscriptions", "organizations_url": "https://api.github.com/users/tomers/orgs", "repos_url": "https://api.github.com/users/tomers/repos", "events_url": "https://api.github.com/users/tomers/events{/privacy}", "received_events_url": "https://api.github.com/users/tomers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-22T07:56:40Z", "updated_at": "2020-04-22T11:37:17Z", "closed_at": "2020-04-22T11:37:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "When endpoint-url parameter contain dots, e.g. `moto.microservice`, I get `NoSuchBucket` whenever I try to call any S3 operation.\r\n\r\n```\r\n# IP of moto.microservice is 202.0.0.5\r\nsome-docker:~$ ~/.local/bin/aws s3 --endpoint-url=http://202.0.0.5:5000 ls\r\n2006-02-03 16:45:09 my-bucket\r\nsome-docker:~$ ~/.local/bin/aws s3 --endpoint-url=http://moto.microservice:5000 ls\r\nAn error occurred (NoSuchBucket) when calling the ListBuckets operation: The specified bucket does not exist\r\n```\r\nIn the response, I notice that BucketName is set to `moto`, which is the first subdomain.\r\n\r\nI found that the issue is caused by the following line:\r\nhttps://github.com/spulec/moto/blob/master/moto/s3/utils.py#L31\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2912", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2912/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2912/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2912/events", "html_url": "https://github.com/spulec/moto/issues/2912", "id": 603723115, "node_id": "MDU6SXNzdWU2MDM3MjMxMTU=", "number": 2912, "title": "Not able to connect to moto standalone server when run in docker", "user": {"login": "malathit", "id": 2684148, "node_id": "MDQ6VXNlcjI2ODQxNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2684148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/malathit", "html_url": "https://github.com/malathit", "followers_url": "https://api.github.com/users/malathit/followers", "following_url": "https://api.github.com/users/malathit/following{/other_user}", "gists_url": "https://api.github.com/users/malathit/gists{/gist_id}", "starred_url": "https://api.github.com/users/malathit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/malathit/subscriptions", "organizations_url": "https://api.github.com/users/malathit/orgs", "repos_url": "https://api.github.com/users/malathit/repos", "events_url": "https://api.github.com/users/malathit/events{/privacy}", "received_events_url": "https://api.github.com/users/malathit/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/spulec/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-21T05:45:17Z", "updated_at": "2020-04-22T11:37:54Z", "closed_at": "2020-04-22T08:22:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Steps to reproduce the issue\r\n\r\nRunning moto server in docker\r\n\r\n`docker run -it --rm michaelerasmus/docker-moto-server ec2`\r\n\r\nRunning curl from the host machine\r\n\r\n`curl localost:5000/?Action=DescribeInstances`\r\n\r\n### Description\r\nAll the online examples of running moto_server in docker runs the container in 'host' mode. However in my case I use the default 'bridge' network in docker. When I run the above curl from my laptop(outside the docker-moto-server) container, it gives 'Empty response' from server.\r\n\r\nHowever when I run the cURL inside the container, it works\r\n`curl localhost:5000/?Action=DescribeInstances`\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ListAllMyBucketsResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01\">\r\n   <Owner>\r\n      <ID>bcaf1ffd86f41161ca5fb16fd081034f</ID>\r\n      <DisplayName>webfile</DisplayName>\r\n   </Owner>\r\n   <Buckets />\r\n</ListAllMyBucketsResult>\r\n```\r\n\r\nCan somebody please help me figure out how can I access the moto server outside the docker container?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2910", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2910/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2910/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2910/events", "html_url": "https://github.com/spulec/moto/issues/2910", "id": 603698297, "node_id": "MDU6SXNzdWU2MDM2OTgyOTc=", "number": 2910, "title": "IoT ListThingPrincipals should return ResourceNotFoundException if target thing does not exist", "user": {"login": "cm-iwata", "id": 38879253, "node_id": "MDQ6VXNlcjM4ODc5MjUz", "avatar_url": "https://avatars1.githubusercontent.com/u/38879253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cm-iwata", "html_url": "https://github.com/cm-iwata", "followers_url": "https://api.github.com/users/cm-iwata/followers", "following_url": "https://api.github.com/users/cm-iwata/following{/other_user}", "gists_url": "https://api.github.com/users/cm-iwata/gists{/gist_id}", "starred_url": "https://api.github.com/users/cm-iwata/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cm-iwata/subscriptions", "organizations_url": "https://api.github.com/users/cm-iwata/orgs", "repos_url": "https://api.github.com/users/cm-iwata/repos", "events_url": "https://api.github.com/users/cm-iwata/events{/privacy}", "received_events_url": "https://api.github.com/users/cm-iwata/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-21T04:35:33Z", "updated_at": "2020-04-21T06:47:12Z", "closed_at": "2020-04-21T06:47:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "IoT ListThingPrincipals should return ResourceNotFoundException if target thing does not exist.\r\nbut, moto returnes 200 OK and  empty principals\r\n\r\n## Use boto3\r\n\r\n```\r\n>>> import boto3\r\n>>> iot = boto3.client('iot')\r\n>>> iot.list_thing_principals(thingName='non_exists_thing')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/xxxxxxxxxx/.venv/lib/python3.7/site-packages/botocore/client.py\", line 276, in _api_call\r\n    return self._make_api_call(operation_name, kwargs)\r\n  File \"/Users/xxxxxxxxxx/.venv/lib/python3.7/site-packages/botocore/client.py\", line 586, in _make_api_call\r\n    raise error_class(parsed_response, operation_name)\r\nbotocore.errorfactory.ResourceNotFoundException: An error occurred (ResourceNotFoundException) when calling the ListThingPrincipals operation: Failed to list principals for thing non_exists_thing because the thing does not exist in your account\r\n>>>\r\n```\r\n\r\n## Use moto\r\n```\r\n>>> import moto\r\n>>> import boto3\r\n>>> iot = boto3.client('iot')\r\n>>> moto.mock_iot().start()\r\n>>> iot.list_thing_principals(thingName='non_exists_thing')\r\n\r\n{'ResponseMetadata': {'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'amazon.com'}, 'RetryAttempts': 0}, 'principals': []}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2903", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2903/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2903/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2903/events", "html_url": "https://github.com/spulec/moto/issues/2903", "id": 602079349, "node_id": "MDU6SXNzdWU2MDIwNzkzNDk=", "number": 2903, "title": "Add STS endpoint AssumeRoleWithSAML (assume_role_with_saml)", "user": {"login": "microe", "id": 641196, "node_id": "MDQ6VXNlcjY0MTE5Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/641196?v=4", "gravatar_id": "", "url": "https://api.github.com/users/microe", "html_url": "https://github.com/microe", "followers_url": "https://api.github.com/users/microe/followers", "following_url": "https://api.github.com/users/microe/following{/other_user}", "gists_url": "https://api.github.com/users/microe/gists{/gist_id}", "starred_url": "https://api.github.com/users/microe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/microe/subscriptions", "organizations_url": "https://api.github.com/users/microe/orgs", "repos_url": "https://api.github.com/users/microe/repos", "events_url": "https://api.github.com/users/microe/events{/privacy}", "received_events_url": "https://api.github.com/users/microe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 900587505, "node_id": "MDU6TGFiZWw5MDA1ODc1MDU=", "url": "https://api.github.com/repos/spulec/moto/labels/debugging", "name": "debugging", "color": "5319e7", "default": false, "description": "Working with user to figure out if there is an issue"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-04-17T16:02:47Z", "updated_at": "2020-04-27T19:57:14Z", "closed_at": "2020-04-27T19:57:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a module that wraps our federation service to get a credential through STS using assume_role_with_saml. I needed to test this code so I took a stab at adding this endpoint. I have a solution for this in PR #2894, but the CI is not passing all tests.\r\n\r\nI am able to get the tests to pass on both Python 2.7 and 3.8 when I call make test-only within my own tree, so I am a little stumped as to what else I need to do.\r\n\r\nHere is a small example of the 2.7 build not working:\r\n```\r\ntest_sts.test_assume_role_with_saml ... 172.17.0.1 - - [16/Apr/2020 19:14:48] \"POST /moto-api/reset HTTP/1.1\" 200 -\r\n\r\n172.17.0.1 - - [16/Apr/2020 19:14:48] \"POST / HTTP/1.1\" 200 -\r\n\r\nERROR\r\n***way farther down the log***\r\n=====================================================================\r\n\r\nERROR: test_sts.test_assume_role_with_saml\r\n\r\n----------------------------------------------------------------------\r\n\r\nTraceback (most recent call last):\r\n\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\r\n\r\n    self.test(*self.arg)\r\n\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/freezegun/api.py\", line 735, in wrapper\r\n\r\n    result = func(*args, **kwargs)\r\n\r\n  File \"/home/travis/build/spulec/moto/moto/core/models.py\", line 95, in wrapper\r\n\r\n    result = func(*args, **kwargs)\r\n\r\n  File \"/home/travis/build/spulec/moto/tests/test_sts/test_sts.py\", line 203, in test_assume_role_with_saml\r\n\r\n    SAMLAssertion=b64encode(saml_assertion.encode(\"utf-8\")).decode(\"utf-8\"),\r\n\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/botocore/client.py\", line 316, in _api_call\r\n\r\n    return self._make_api_call(operation_name, kwargs)\r\n\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/botocore/client.py\", line 613, in _make_api_call\r\n\r\n    operation_model, request_dict, request_context)\r\n\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/botocore/client.py\", line 632, in _make_request\r\n\r\n    return self._endpoint.make_request(operation_model, request_dict)\r\n\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/botocore/endpoint.py\", line 102, in make_request\r\n\r\n    return self._send_request(request_dict, operation_model)\r\n\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/botocore/endpoint.py\", line 135, in _send_request\r\n\r\n    request, operation_model, context)\r\n\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/botocore/endpoint.py\", line 167, in _get_response\r\n\r\n    request, operation_model)\r\n\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/botocore/endpoint.py\", line 218, in _do_get_response\r\n\r\n    response_dict, operation_model.output_shape)\r\n\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/botocore/parsers.py\", line 242, in parse\r\n\r\n    parsed = self._do_parse(response, shape)\r\n\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/botocore/parsers.py\", line 508, in _do_parse\r\n\r\n    root)\r\n\r\n  File \"/home/travis/virtualenv/python2.7.17/lib/python2.7/site-packages/botocore/parsers.py\", line 515, in _find_result_wrapped_shape\r\n\r\n    return mapping[element_name]\r\n\r\nKeyError: u'AssumeRoleWithSAMLResult'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2902", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2902/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2902/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2902/events", "html_url": "https://github.com/spulec/moto/issues/2902", "id": 602049029, "node_id": "MDU6SXNzdWU2MDIwNDkwMjk=", "number": 2902, "title": "describe_vpc_classic_link Implementation", "user": {"login": "ricfeatherstone", "id": 5228018, "node_id": "MDQ6VXNlcjUyMjgwMTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5228018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricfeatherstone", "html_url": "https://github.com/ricfeatherstone", "followers_url": "https://api.github.com/users/ricfeatherstone/followers", "following_url": "https://api.github.com/users/ricfeatherstone/following{/other_user}", "gists_url": "https://api.github.com/users/ricfeatherstone/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricfeatherstone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricfeatherstone/subscriptions", "organizations_url": "https://api.github.com/users/ricfeatherstone/orgs", "repos_url": "https://api.github.com/users/ricfeatherstone/repos", "events_url": "https://api.github.com/users/ricfeatherstone/events{/privacy}", "received_events_url": "https://api.github.com/users/ricfeatherstone/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-17T15:15:58Z", "updated_at": "2020-05-22T09:47:59Z", "closed_at": "2020-05-22T09:47:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are there plans to implement `describe_vpc_classic_link`?\r\n\r\nI'm trying to test `terraform` code to create a `vpc` and running into the issue described in #2551 \r\n\r\n**Terraform Config**\r\n\r\n```\r\nresource aws_vpc target {\r\n  cidr_block = \"10.0.0.0/16\"\r\n}\r\n\r\nprovider aws {\r\n  version = \"~> 2.53\"\r\n  region  = \"eu-west-1\"\r\n\r\n  endpoints {\r\n    ec2 = \"http://127.0.0.1:5000/\"\r\n  }\r\n}\r\n```\r\n**Steps**\r\n\r\n1. Start server `moto_server ec2`\r\n1. Run Terraform `terraform apply -auto-approve`\r\n\r\n**Moto Server Output**\r\n\r\n```\r\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\r\n127.0.0.1 - - [17/Apr/2020 16:09:10] \"POST  HTTP/1.1\" 200 -\r\n127.0.0.1 - - [17/Apr/2020 16:09:15] \"POST  HTTP/1.1\" 200 -\r\n127.0.0.1 - - [17/Apr/2020 16:09:15] \"POST  HTTP/1.1\" 200 -\r\n127.0.0.1 - - [17/Apr/2020 16:09:15] \"POST  HTTP/1.1\" 200 -\r\n127.0.0.1 - - [17/Apr/2020 16:09:15] \"POST  HTTP/1.1\" 200 -\r\n127.0.0.1 - - [17/Apr/2020 16:09:15] \"POST  HTTP/1.1\" 200 -\r\n127.0.0.1 - - [17/Apr/2020 16:09:15] \"POST  HTTP/1.1\" 200 -\r\n127.0.0.1 - - [17/Apr/2020 16:09:15] \"POST  HTTP/1.1\" 200 -\r\n127.0.0.1 - - [17/Apr/2020 16:09:15] \"POST  HTTP/1.1\" 500 -\r\nError on request:\r\nTraceback (most recent call last):\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/werkzeug/serving.py\", line 323, in run_wsgi\r\n    execute(self.server.app)\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/werkzeug/serving.py\", line 312, in execute\r\n    application_iter = app(environ, start_response)\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/moto/server.py\", line 135, in __call__\r\n    return backend_app(environ, start_response)\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/flask/app.py\", line 2464, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/flask/app.py\", line 2450, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/flask/app.py\", line 1867, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/flask/app.py\", line 2447, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/flask/app.py\", line 1952, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/flask/app.py\", line 1821, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/flask/_compat.py\", line 39, in reraise\r\n    raise value\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/flask/app.py\", line 1950, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/flask/app.py\", line 1936, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/moto/core/utils.py\", line 144, in __call__\r\n    result = self.callback(request, request.url, {})\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/moto/core/responses.py\", line 197, in dispatch\r\n    return cls()._dispatch(*args, **kwargs)\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/moto/core/responses.py\", line 295, in _dispatch\r\n    return self.call_action()\r\n  File \"/home/ric/git/japeoh/zone-tfmodule/.venv/lib/python3.7/site-packages/moto/core/responses.py\", line 393, in call_action\r\n    \"The {0} action has not been implemented\".format(action)\r\nNotImplementedError: The describe_vpc_classic_link action has not been implemented\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2895", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2895/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2895/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2895/events", "html_url": "https://github.com/spulec/moto/issues/2895", "id": 600763936, "node_id": "MDU6SXNzdWU2MDA3NjM5MzY=", "number": 2895, "title": "Support for secretsmanager update_secret", "user": {"login": "caphrim007", "id": 46956, "node_id": "MDQ6VXNlcjQ2OTU2", "avatar_url": "https://avatars1.githubusercontent.com/u/46956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caphrim007", "html_url": "https://github.com/caphrim007", "followers_url": "https://api.github.com/users/caphrim007/followers", "following_url": "https://api.github.com/users/caphrim007/following{/other_user}", "gists_url": "https://api.github.com/users/caphrim007/gists{/gist_id}", "starred_url": "https://api.github.com/users/caphrim007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caphrim007/subscriptions", "organizations_url": "https://api.github.com/users/caphrim007/orgs", "repos_url": "https://api.github.com/users/caphrim007/repos", "events_url": "https://api.github.com/users/caphrim007/events{/privacy}", "received_events_url": "https://api.github.com/users/caphrim007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-16T05:44:27Z", "updated_at": "2020-04-16T16:36:12Z", "closed_at": "2020-04-16T16:36:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I would like to explore the possibility of adding update_secret support to the secretsmanager endpoint and am filing this issue per the contributor guidelines.\r\n\r\nAs of moto 1.3.14 support for update_secret is not yet implemented. The following is raised when the secretsmanager client is used in my personal code\r\n\r\n```\r\nE.   NotImplementedError: The update_secret action has not been implemented\r\n.tox/unit/lib/python3.7/site-packages/moto/core/responses.py:393: NotImplementedError\r\n```\r\n\r\nI would like to take a stab at adding this so that I can use moto to test in-house code that calls this method.\r\n\r\nI'm new to the moto process though, so want to have a maintainer +1 this work before I put any serious effort into it. Preliminary toying with a fix seems relatively straightforward.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2886", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2886/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2886/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2886/events", "html_url": "https://github.com/spulec/moto/issues/2886", "id": 598346298, "node_id": "MDU6SXNzdWU1OTgzNDYyOTg=", "number": 2886, "title": "moto lambda response Payload is the log content, not function response data", "user": {"login": "dazza-codes", "id": 240623, "node_id": "MDQ6VXNlcjI0MDYyMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/240623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dazza-codes", "html_url": "https://github.com/dazza-codes", "followers_url": "https://api.github.com/users/dazza-codes/followers", "following_url": "https://api.github.com/users/dazza-codes/following{/other_user}", "gists_url": "https://api.github.com/users/dazza-codes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dazza-codes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dazza-codes/subscriptions", "organizations_url": "https://api.github.com/users/dazza-codes/orgs", "repos_url": "https://api.github.com/users/dazza-codes/repos", "events_url": "https://api.github.com/users/dazza-codes/events{/privacy}", "received_events_url": "https://api.github.com/users/dazza-codes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-11T20:35:51Z", "updated_at": "2020-05-15T04:17:48Z", "closed_at": "2020-05-14T22:53:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "See all details in https://github.com/aio-libs/aiobotocore/issues/793\r\n- https://github.com/aio-libs/aiobotocore/pull/796 demonstrates the problem\r\n\r\nAlthough I don't know how to reconcile that with the moto unit tests, i.e.\r\n- https://github.com/spulec/moto/blob/master/tests/test_awslambda/test_lambda.py#L95-L125\r\n- this appears to distinguish between the logs and payload", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2883", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2883/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2883/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2883/events", "html_url": "https://github.com/spulec/moto/issues/2883", "id": 597717699, "node_id": "MDU6SXNzdWU1OTc3MTc2OTk=", "number": 2883, "title": "Mocked SSM client can return more than 10 values from  API_GetParameters", "user": {"login": "1oglop1", "id": 7480694, "node_id": "MDQ6VXNlcjc0ODA2OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7480694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1oglop1", "html_url": "https://github.com/1oglop1", "followers_url": "https://api.github.com/users/1oglop1/followers", "following_url": "https://api.github.com/users/1oglop1/following{/other_user}", "gists_url": "https://api.github.com/users/1oglop1/gists{/gist_id}", "starred_url": "https://api.github.com/users/1oglop1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1oglop1/subscriptions", "organizations_url": "https://api.github.com/users/1oglop1/orgs", "repos_url": "https://api.github.com/users/1oglop1/repos", "events_url": "https://api.github.com/users/1oglop1/events{/privacy}", "received_events_url": "https://api.github.com/users/1oglop1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-10T06:15:11Z", "updated_at": "2020-05-06T15:55:20Z", "closed_at": "2020-05-06T15:55:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Mocked ssm client can return more than 10 parameters which is an API limit.\r\n\r\nhttps://docs.aws.amazon.com/systems-manager/latest/APIReference/API_GetParameter.html\r\n\r\nThis probably got overlooked because this is not mentioned in boto3 documentation!\r\n\r\nhttps://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ssm.html#SSM.Client.get_parameters\r\n\r\nVersions used\r\n```\r\nboto3==1.12.34\r\nbotocore==1.15.34\r\nmoto==1.3.14\r\n```\r\n\r\n## How to reproduce:\r\n\r\n```python\r\nimport moto\r\n\r\n@moto.mock_ssm\r\ndef test_resolve_12_ssm_parameters():\r\n\r\n    from string import ascii_lowercase\r\n    from random import choice\r\n\r\n    input_ssm_parameters = {letter: (f\"/{letter}/{letter}\", \"value\") for letter in ascii_lowercase[:12]}\r\n    ssm_client = boto3.client(\"ssm\")\r\n    param_types = [\"String\", \"SecureString\"]\r\n\r\n    for key, (name, value) in input_ssm_parameters.items():\r\n        ssm_client.put_parameter(Name=name, Value=value, Type=choice(param_types))\r\n\r\n    param_names = {key: name for key, (name, value) in input_ssm_parameters.items()}\r\n    response = ssm_client.get_parameters(Names=list(param_names.values()))\r\n\r\n    assert len(response['Parameters']) == 12\r\n```\r\n\r\n## Expected \r\nThe code above should fail with exception\r\n```\r\nbotocore.exceptions.ClientError: An error occurred (ValidationException) when calling the GetParameters operation: 1 validation error detected: Value '[<list of parameter names>]' at 'names' failed to satisfy constraint: Member must have length less than or equal to 10.\r\n```\r\n\r\n## Actual\r\nThe fuction `test_resolve_12_ssm_parameters()` can pass.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2877", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2877/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2877/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2877/events", "html_url": "https://github.com/spulec/moto/issues/2877", "id": 596318597, "node_id": "MDU6SXNzdWU1OTYzMTg1OTc=", "number": 2877, "title": "Fix busted availableIpAddressCount in EC2 subnets", "user": {"login": "CpuID", "id": 916201, "node_id": "MDQ6VXNlcjkxNjIwMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/916201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CpuID", "html_url": "https://github.com/CpuID", "followers_url": "https://api.github.com/users/CpuID/followers", "following_url": "https://api.github.com/users/CpuID/following{/other_user}", "gists_url": "https://api.github.com/users/CpuID/gists{/gist_id}", "starred_url": "https://api.github.com/users/CpuID/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CpuID/subscriptions", "organizations_url": "https://api.github.com/users/CpuID/orgs", "repos_url": "https://api.github.com/users/CpuID/repos", "events_url": "https://api.github.com/users/CpuID/events{/privacy}", "received_events_url": "https://api.github.com/users/CpuID/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-08T05:29:07Z", "updated_at": "2020-04-16T22:02:45Z", "closed_at": "2020-04-16T22:02:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Identified using LocalStack 0.11.0 which uses Moto 1.3.15something? (started via the Docker image `localstack/localstack:0.11.0`)\r\n\r\nThe attribute `availableIpAddressCount` in `DescribeSubnets` output is empty?\r\n\r\nRan `aws ec2 describe-subnets` against EC2 vs LocalStack, spotted the difference. Causes `awscli` to exit with this on any Subnet API calls (includes create, describe):\r\n\r\n```\r\nValueError: invalid literal for int() with base 10: ''\r\n```\r\n\r\n------------------------------\r\n\r\nEC2 response:\r\n\r\n```\r\n<DescribeSubnetsResponse xmlns=\"http://ec2.amazonaws.com/doc/2016-11-15/\">\r\n    <requestId>REDACTED-UUID</requestId>\r\n    <subnetSet>\r\n        <item>\r\n            <subnetId>subnet-REDACTED</subnetId>\r\n            <subnetArn>arn:aws:ec2:us-east-1:REDACTED:subnet/subnet-REDACTED</subnetArn>\r\n            <state>available</state>\r\n            <ownerId>REDACTED</ownerId>\r\n            <vpcId>vpc-REDACTED</vpcId>\r\n            <cidrBlock>10.REDACTED/24</cidrBlock>\r\n            <ipv6CidrBlockAssociationSet/>\r\n            <availableIpAddressCount>190</availableIpAddressCount>\r\n            <availabilityZone>us-east-1a</availabilityZone>\r\n            <availabilityZoneId>use1-az4</availabilityZoneId>\r\n            <defaultForAz>false</defaultForAz>\r\n            <mapPublicIpOnLaunch>true</mapPublicIpOnLaunch>\r\n            <tagSet>\r\n                <item>\r\n                    <key>Name</key>\r\n                    <value>REDACTED</value>\r\n                </item>\r\n                <item>\r\n                    <key>#</key>\r\n                    <value>1</value>\r\n                </item>\r\n            </tagSet>\r\n            <assignIpv6AddressOnCreation>false</assignIpv6AddressOnCreation>\r\n        </item>\r\n...\r\n```\r\n\r\nLocalStack (Moto) response:\r\n\r\n```\r\n<DescribeSubnetsResponse xmlns=\"http://ec2.amazonaws.com/doc/2013-10-15/\">\r\n  <requestId>7a62c49f-347e-4fc4-9331-6e8eEXAMPLE</requestId>\r\n  <subnetSet>\r\n    <item>\r\n      <subnetId>subnet-9eaffe1d</subnetId>\r\n      <state>available</state>\r\n      <vpcId>vpc-08c7fa4d</vpcId>\r\n      <cidrBlock>172.31.0.0/20</cidrBlock>\r\n      <availableIpAddressCount></availableIpAddressCount>\r\n      <availabilityZone>us-east-1a</availabilityZone>\r\n      <availabilityZoneId>use1-az6</availabilityZoneId>\r\n      <defaultForAz>true</defaultForAz>\r\n      <mapPublicIpOnLaunch>true</mapPublicIpOnLaunch>\r\n      <ownerId>123456789012</ownerId>\r\n      <assignIpv6AddressOnCreation>False</assignIpv6AddressOnCreation>\r\n      <ipv6CidrBlockAssociationSet>[]</ipv6CidrBlockAssociationSet>\r\n      <subnetArn>arn:aws:ec2:us-east-1:123456789012:subnet/subnet-9eaffe1d</subnetArn>\r\n    </item>\r\n...\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2872", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2872/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2872/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2872/events", "html_url": "https://github.com/spulec/moto/issues/2872", "id": 595215412, "node_id": "MDU6SXNzdWU1OTUyMTU0MTI=", "number": 2872, "title": "athena boto3 client not supported?", "user": {"login": "wierzba3", "id": 3789407, "node_id": "MDQ6VXNlcjM3ODk0MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3789407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wierzba3", "html_url": "https://github.com/wierzba3", "followers_url": "https://api.github.com/users/wierzba3/followers", "following_url": "https://api.github.com/users/wierzba3/following{/other_user}", "gists_url": "https://api.github.com/users/wierzba3/gists{/gist_id}", "starred_url": "https://api.github.com/users/wierzba3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wierzba3/subscriptions", "organizations_url": "https://api.github.com/users/wierzba3/orgs", "repos_url": "https://api.github.com/users/wierzba3/repos", "events_url": "https://api.github.com/users/wierzba3/events{/privacy}", "received_events_url": "https://api.github.com/users/wierzba3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-06T15:33:13Z", "updated_at": "2020-04-06T15:44:49Z", "closed_at": "2020-04-06T15:44:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try to use moto to implement a unit test for a function that uses `boto3.client(\"athena\")`, the code crashes with an error `NotImplementedError: The start_query_execution action has not been implemented`\r\n\r\nDoes this imply that this is not supported in moto? Or am I supposed to override / mock something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2868", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2868/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2868/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2868/events", "html_url": "https://github.com/spulec/moto/issues/2868", "id": 594914027, "node_id": "MDU6SXNzdWU1OTQ5MTQwMjc=", "number": 2868, "title": "DynamodBStreams get_records gets JSON errors when processing complex types", "user": {"login": "JessFlan", "id": 17228175, "node_id": "MDQ6VXNlcjE3MjI4MTc1", "avatar_url": "https://avatars2.githubusercontent.com/u/17228175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JessFlan", "html_url": "https://github.com/JessFlan", "followers_url": "https://api.github.com/users/JessFlan/followers", "following_url": "https://api.github.com/users/JessFlan/following{/other_user}", "gists_url": "https://api.github.com/users/JessFlan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JessFlan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JessFlan/subscriptions", "organizations_url": "https://api.github.com/users/JessFlan/orgs", "repos_url": "https://api.github.com/users/JessFlan/repos", "events_url": "https://api.github.com/users/JessFlan/events{/privacy}", "received_events_url": "https://api.github.com/users/JessFlan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-06T08:36:43Z", "updated_at": "2020-04-06T10:54:06Z", "closed_at": "2020-04-06T10:54:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "get_records causes TypeError: Object of type DynamoType is not JSON serializable when processing nested types.\r\n\r\nCode to reproduce\r\n`\r\n   import boto3\r\n    import moto\r\n \r\n    @moto.mock_dynamodb2\r\n    @moto.mock_dynamodbstreams\r\n    def test_dynamodb2():\r\n        client = boto3.client('dynamodb', region_name='us-west-1')\r\n        dynamodb_stream = boto3.client(\"dynamodbstreams\", region_name=\"us-west-1\")\r\n       dynamodb_table = client.create_table(\r\n            AttributeDefinitions=[{\"AttributeName\": \"id\", \"AttributeType\": \"S\"}, {\"AttributeName\": \"rid\", \"AttributeType\": \"S\"}],\r\n        TableName=\"TestTable\",\r\n        KeySchema=[{\"AttributeName\": \"id\", \"KeyType\": \"HASH\"}, {\"AttributeName\": \"rid\", \"KeyType\": \"RANGE\"}],\r\n        ProvisionedThroughput={\"ReadCapacityUnits\": 5, \"WriteCapacityUnits\": 5},\r\n    StreamSpecification = {\r\n        \"StreamEnabled\": True,\r\n        \"StreamViewType\": \"NEW_IMAGE\",\r\n    }\r\n    )\r\n    client.put_item(\r\n        TableName=\"TestTable\",\r\n        Item={\r\n            \"id\": {\"S\": \"nested_list_append\"},\r\n            \"rid\": {\"S\": \"range_key\"},\r\n            \"a\": {\"L\": [{\"M\": {\"b\": {\"S\": \"bar1\"}}}]},\r\n        },\r\n    )\r\n\r\n    stream_arn = dynamodb_table['TableDescription']['LatestStreamArn']\r\n    stream = dynamodb_stream.describe_stream(StreamArn=stream_arn)\r\n    shard = stream['StreamDescription']['Shards'][0]['ShardId']\r\n\r\n    shard_iterator = dynamodb_stream.get_shard_iterator(\r\n        StreamArn=stream_arn,\r\n        ShardId=shard,\r\n        ShardIteratorType='TRIM_HORIZON'\r\n    )['ShardIterator']\r\n\r\n    records = dynamodb_stream.get_records(ShardIterator=shard_iterator)\r\n\r\ndynamodb_stream.get_records(ShardIterator=shard_iterator)\r\n\r\n`\r\ncauses:\r\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\r\n                        f'is not JSON serializable')\r\nE       TypeError: Object of type DynamoType is not JSON serializable\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2867", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2867/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2867/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2867/events", "html_url": "https://github.com/spulec/moto/issues/2867", "id": 594845910, "node_id": "MDU6SXNzdWU1OTQ4NDU5MTA=", "number": 2867, "title": "S3 - PutObject/DeleteObject should have no response body", "user": {"login": "bblommers", "id": 6058517, "node_id": "MDQ6VXNlcjYwNTg1MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6058517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblommers", "html_url": "https://github.com/bblommers", "followers_url": "https://api.github.com/users/bblommers/followers", "following_url": "https://api.github.com/users/bblommers/following{/other_user}", "gists_url": "https://api.github.com/users/bblommers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblommers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblommers/subscriptions", "organizations_url": "https://api.github.com/users/bblommers/orgs", "repos_url": "https://api.github.com/users/bblommers/repos", "events_url": "https://api.github.com/users/bblommers/events{/privacy}", "received_events_url": "https://api.github.com/users/bblommers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-06T06:43:41Z", "updated_at": "2020-04-07T08:10:05Z", "closed_at": "2020-04-07T08:10:05Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Both the PutObject- and DeleteObject-methods currently have a response body, but they should only return headers.\r\n\r\nOriginally raised in #2866 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2865", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2865/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2865/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2865/events", "html_url": "https://github.com/spulec/moto/issues/2865", "id": 594413076, "node_id": "MDU6SXNzdWU1OTQ0MTMwNzY=", "number": 2865, "title": "more-itertools version pin is very old", "user": {"login": "mpenkov", "id": 1101396, "node_id": "MDQ6VXNlcjExMDEzOTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1101396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpenkov", "html_url": "https://github.com/mpenkov", "followers_url": "https://api.github.com/users/mpenkov/followers", "following_url": "https://api.github.com/users/mpenkov/following{/other_user}", "gists_url": "https://api.github.com/users/mpenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpenkov/subscriptions", "organizations_url": "https://api.github.com/users/mpenkov/orgs", "repos_url": "https://api.github.com/users/mpenkov/repos", "events_url": "https://api.github.com/users/mpenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/mpenkov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-05T11:40:30Z", "updated_at": "2020-04-05T14:50:18Z", "closed_at": "2020-04-05T14:50:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In your setup.py you're pinning the package to version 5.0.0, but they're already on version 8.2.0.\r\n\r\nhttps://github.com/spulec/moto/blob/5ac9bb1885ebc4a7ac6573645e478d914c3e657a/setup.py#L54\r\n\r\nIt looks like you're doing this just for Python 2.7 support. Is that really necessary?\r\n\r\nThe pin is causing problems for me because it results in a version conflict with other packages that require a more up-to-date itertools.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2860", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2860/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2860/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2860/events", "html_url": "https://github.com/spulec/moto/issues/2860", "id": 592926850, "node_id": "MDU6SXNzdWU1OTI5MjY4NTA=", "number": 2860, "title": "Dynamodb2 update_item operation does not always return the UPDATED_OLD attributes.", "user": {"login": "hsq125", "id": 3532677, "node_id": "MDQ6VXNlcjM1MzI2Nzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3532677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hsq125", "html_url": "https://github.com/hsq125", "followers_url": "https://api.github.com/users/hsq125/followers", "following_url": "https://api.github.com/users/hsq125/following{/other_user}", "gists_url": "https://api.github.com/users/hsq125/gists{/gist_id}", "starred_url": "https://api.github.com/users/hsq125/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hsq125/subscriptions", "organizations_url": "https://api.github.com/users/hsq125/orgs", "repos_url": "https://api.github.com/users/hsq125/repos", "events_url": "https://api.github.com/users/hsq125/events{/privacy}", "received_events_url": "https://api.github.com/users/hsq125/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886776, "node_id": "MDU6TGFiZWwyODg4Njc3Ng==", "url": "https://api.github.com/repos/spulec/moto/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-02T21:26:42Z", "updated_at": "2020-05-01T20:47:54Z", "closed_at": "2020-05-01T20:47:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Expected behaviour\r\n\r\nThe `update_item` operation can return the item attributes as they appear before or after they are updated, depending on the `ReturnValues` parameter.\r\n\r\nhttps://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html\r\n\r\nWhen set to `UPDATED_OLD` it should  \r\n> Returns only the updated attributes, as they appeared before the UpdateItem operation.\r\n\r\n# Problem\r\n\r\nWhen updating an item once (incrementing an attribute used as counter for exemple), the value of the updated attributes is correclty returned. Great.\r\n\r\nBut when updating the same item a second time in a row, the value is no longer returned at all. \r\n\r\nA minimal test for reproducing the issue is attached to the ticket (it is .txt file altougth it should have been .py; but it is not accepted by github).\r\n\r\n[moto_dynamodb_update_return_old_failure.txt](https://github.com/spulec/moto/files/4423741/moto_dynamodb_update_return_old_failure.txt)\r\n\r\n\r\n# Environment\r\n\r\nPython 3.7.5\r\n\r\nmoto (1.3.14)\r\nboto (2.49.0)\r\nboto3 (1.11.13)\r\nbotocore (1.14.13)\r\n\r\nmoto was installed well after boto*, with `pip install moto`\r\n\r\n# Thanks\r\nBecause there is no other place to say otherwise : thanks a lot for this great lib. I love it !! \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2858", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2858/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2858/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2858/events", "html_url": "https://github.com/spulec/moto/issues/2858", "id": 592216122, "node_id": "MDU6SXNzdWU1OTIyMTYxMjI=", "number": 2858, "title": "Importing moto takes ~3 seconds", "user": {"login": "rsofaer", "id": 212750, "node_id": "MDQ6VXNlcjIxMjc1MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/212750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsofaer", "html_url": "https://github.com/rsofaer", "followers_url": "https://api.github.com/users/rsofaer/followers", "following_url": "https://api.github.com/users/rsofaer/following{/other_user}", "gists_url": "https://api.github.com/users/rsofaer/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsofaer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsofaer/subscriptions", "organizations_url": "https://api.github.com/users/rsofaer/orgs", "repos_url": "https://api.github.com/users/rsofaer/repos", "events_url": "https://api.github.com/users/rsofaer/events{/privacy}", "received_events_url": "https://api.github.com/users/rsofaer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-01T21:30:24Z", "updated_at": "2020-04-28T13:30:11Z", "closed_at": "2020-04-28T13:28:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this is a known fact of using moto or something in my environment in particular, but importing moto is very slow for me, between 3 and 4 seconds.  I've included partial output of -X importtime below, but some of the big hitters are ecdsa (0.6s) and cfnlint(1s).  Is there a way to import only the parts of moto that I am using or am I making some other mistake?  Thanks in advance.\r\nTotal time:\r\n```\r\n> time python -c 'from moto import mock_s3'\r\n\r\nreal\t0m3.159s\r\nuser\t0m2.619s\r\nsys\t0m0.476s\r\n\r\n```\r\nSelected imports which take > 10msec (times are in usec, self, then cumulative):\r\n```\r\n(standard input):import time:    524898 |     527903 |                       ecdsa.ecdsa\r\n(standard input):import time:    521601 |     528135 |             cfnlint.helpers\r\n(standard input):import time:     14239 |      14239 |                           urllib3.util.url\r\n(standard input):import time:     15527 |      15527 |                                 werkzeug.useragents\r\n(standard input):import time:     56520 |     140829 |                 moto.iam.models\r\n(standard input):import time:     10083 |      31237 |                         boto\r\n(standard input):import time:     17698 |      17698 |                                 email._header_value_parser\r\n(standard input):import time:     18898 |      18898 |                 pkg_resources._vendor.pyparsing\r\n(standard input):import time:     26778 |      75835 |           pkg_resources\r\n(standard input):import time:     81031 |     632704 |         moto.ec2.models\r\n(standard input):import time:     41340 |      42453 |     moto.apigateway.models\r\n(standard input):import time:     36148 |      36148 |     moto.athena.models\r\n(standard input):import time:     39813 |      41102 |         moto.dynamodb2.models\r\n(standard input):import time:     35444 |      35444 |         moto.dynamodbstreams.models\r\n(standard input):import time:     41292 |      41559 |         moto.ecs.models\r\n(standard input):import time:     77024 |     119472 |     moto.batch.models\r\n(standard input):import time:     35944 |      36734 |           moto.sns.models\r\n(standard input):import time:     40879 |      42132 |     moto.config.models\r\n(standard input):import time:     37984 |      38249 |     moto.datasync.models\r\n(standard input):import time:     37680 |      37680 |     moto.events.models\r\n(standard input):import time:     60968 |      60968 |           boto.glacier.exceptions\r\n(standard input):import time:     46704 |      47211 |     moto.iot.models\r\n(standard input):import time:     38395 |      39751 |     moto.iotdata.models\r\n(standard input):import time:     36073 |      36507 |     moto.polly.models\r\n(standard input):import time:     34138 |      34465 |     moto.resourcegroups.models\r\n(standard input):import time:     36252 |      36252 |     moto.resourcegroupstaggingapi.models\r\n(standard input):import time:     36854 |      37551 |     moto.secretsmanager.models\r\n(standard input):import time:     87941 |     108346 |       aws_xray_sdk.core\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2849", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2849/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2849/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2849/events", "html_url": "https://github.com/spulec/moto/issues/2849", "id": 589586386, "node_id": "MDU6SXNzdWU1ODk1ODYzODY=", "number": 2849, "title": "DynamoDB put_item doesn't raise ValidationException correctly", "user": {"login": "dreamorosi", "id": 7353869, "node_id": "MDQ6VXNlcjczNTM4Njk=", "avatar_url": "https://avatars0.githubusercontent.com/u/7353869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dreamorosi", "html_url": "https://github.com/dreamorosi", "followers_url": "https://api.github.com/users/dreamorosi/followers", "following_url": "https://api.github.com/users/dreamorosi/following{/other_user}", "gists_url": "https://api.github.com/users/dreamorosi/gists{/gist_id}", "starred_url": "https://api.github.com/users/dreamorosi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dreamorosi/subscriptions", "organizations_url": "https://api.github.com/users/dreamorosi/orgs", "repos_url": "https://api.github.com/users/dreamorosi/repos", "events_url": "https://api.github.com/users/dreamorosi/events{/privacy}", "received_events_url": "https://api.github.com/users/dreamorosi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-28T14:21:58Z", "updated_at": "2020-03-29T08:42:55Z", "closed_at": "2020-03-29T08:42:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nfrom moto import mock_dynamodb2\r\nimport boto3\r\n\r\n@mock_dynamodb2\r\ndef test():\r\n    os.environ['AWS_DEFAULT_REGION'] = 'eu-west-1'\r\n    os.environ['AWS_ACCESS_KEY_ID'] = 'testing'\r\n    os.environ['AWS_SECRET_ACCESS_KEY'] = 'testing'\r\n    os.environ['AWS_SECURITY_TOKEN'] = 'testing'\r\n    os.environ['AWS_SESSION_TOKEN'] = 'testing'\r\n\r\n    client = boto3.client('dynamodb')\r\n    resource = boto3.resource('dynamodb')\r\n\r\n    response = client.create_table(\r\n        AttributeDefinitions=[\r\n            {'AttributeName': 'job_id', 'AttributeType': 'S'},\r\n            {'AttributeName': 'started_at', 'AttributeType': 'N'}\r\n        ],\r\n        TableName='ec2_job_status',\r\n        KeySchema=[\r\n            {'AttributeName': 'job_id', 'KeyType': 'HASH'},\r\n            {'AttributeName': 'started_at', 'KeyType': 'RANGE'}\r\n        ],\r\n        BillingMode='PAY_PER_REQUEST',\r\n        StreamSpecification={'StreamEnabled': False}\r\n    )\r\n    \r\n    item = {\r\n        'job_id': str(uuid4()),\r\n    }\r\n\r\n    table = resource.Table('ec2_job_status')\r\n    table.put_item(Item=item)\r\n\r\ndef test()\r\n```\r\nThe code above should raise `ValidationException` because I am not passing the range key attribute but instead raises a `TypeError: 'NoneType' object is not subscriptable`.\r\n\r\nLikewise, using the same DynamoDB table as above but inserting this\r\n```\r\nitem = {}\r\n\r\ntable = resource.Table('ec2_job_status')\r\ntable.put_item(Item=item)\r\n```\r\nor this\r\n```\r\nitem = {\r\n  'started_at': 123\r\n}\r\n\r\ntable = resource.Table('ec2_job_status')\r\ntable.put_item(Item=item)\r\n```\r\nShould also raise `ValidationException` but instead a `ConditionalCheckFailedException` is risen in both cases.\r\n\r\nI think I have an idea of where the issue is, would a PR be welcome?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2846", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2846/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2846/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2846/events", "html_url": "https://github.com/spulec/moto/issues/2846", "id": 589390814, "node_id": "MDU6SXNzdWU1ODkzOTA4MTQ=", "number": 2846, "title": "stepfunction stop_execution should result in an ABORTED status", "user": {"login": "ConstantinoSchillebeeckxSimpleRose", "id": 44036468, "node_id": "MDQ6VXNlcjQ0MDM2NDY4", "avatar_url": "https://avatars0.githubusercontent.com/u/44036468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ConstantinoSchillebeeckxSimpleRose", "html_url": "https://github.com/ConstantinoSchillebeeckxSimpleRose", "followers_url": "https://api.github.com/users/ConstantinoSchillebeeckxSimpleRose/followers", "following_url": "https://api.github.com/users/ConstantinoSchillebeeckxSimpleRose/following{/other_user}", "gists_url": "https://api.github.com/users/ConstantinoSchillebeeckxSimpleRose/gists{/gist_id}", "starred_url": "https://api.github.com/users/ConstantinoSchillebeeckxSimpleRose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ConstantinoSchillebeeckxSimpleRose/subscriptions", "organizations_url": "https://api.github.com/users/ConstantinoSchillebeeckxSimpleRose/orgs", "repos_url": "https://api.github.com/users/ConstantinoSchillebeeckxSimpleRose/repos", "events_url": "https://api.github.com/users/ConstantinoSchillebeeckxSimpleRose/events{/privacy}", "received_events_url": "https://api.github.com/users/ConstantinoSchillebeeckxSimpleRose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-27T20:16:33Z", "updated_at": "2020-03-28T09:21:38Z", "closed_at": "2020-03-28T09:21:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "https://github.com/spulec/moto/blob/95e95cc97d122d1f5efa38032147e1a17dce1564/moto/stepfunctions/models.py#L49\r\n\r\nConfirmed with actual API calls\r\n<img width=\"1462\" alt=\"Screen Shot 2020-03-27 at 3 08 54 PM\" src=\"https://user-images.githubusercontent.com/44036468/77796760-e1183f00-703d-11ea-8021-5ce235bb13c1.png\">\r\n<img width=\"1673\" alt=\"Screen_Shot_2020-03-27_at_3_14_44_PM\" src=\"https://user-images.githubusercontent.com/44036468/77796766-e2e20280-703d-11ea-962a-f7f1b696df7d.png\">\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/spulec/moto/issues/2845", "repository_url": "https://api.github.com/repos/spulec/moto", "labels_url": "https://api.github.com/repos/spulec/moto/issues/2845/labels{/name}", "comments_url": "https://api.github.com/repos/spulec/moto/issues/2845/comments", "events_url": "https://api.github.com/repos/spulec/moto/issues/2845/events", "html_url": "https://github.com/spulec/moto/issues/2845", "id": 589311390, "node_id": "MDU6SXNzdWU1ODkzMTEzOTA=", "number": 2845, "title": "Cloud formation \"depends_on\" ", "user": {"login": "zbrookle", "id": 39153813, "node_id": "MDQ6VXNlcjM5MTUzODEz", "avatar_url": "https://avatars1.githubusercontent.com/u/39153813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zbrookle", "html_url": "https://github.com/zbrookle", "followers_url": "https://api.github.com/users/zbrookle/followers", "following_url": "https://api.github.com/users/zbrookle/following{/other_user}", "gists_url": "https://api.github.com/users/zbrookle/gists{/gist_id}", "starred_url": "https://api.github.com/users/zbrookle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zbrookle/subscriptions", "organizations_url": "https://api.github.com/users/zbrookle/orgs", "repos_url": "https://api.github.com/users/zbrookle/repos", "events_url": "https://api.github.com/users/zbrookle/events{/privacy}", "received_events_url": "https://api.github.com/users/zbrookle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 28886778, "node_id": "MDU6TGFiZWwyODg4Njc3OA==", "url": "https://api.github.com/repos/spulec/moto/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-27T18:04:29Z", "updated_at": "2020-05-18T08:47:19Z", "closed_at": "2020-05-18T08:47:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When your cloud formation parser is lazily iterating through the provided resources, I don't think it's taking the depends_on variable into account, which is causing resources to be created in the wrong order, and ends up failing a cloud formation script. The example that I came up with was creating an autoscaling group before the launch configuration was created, even though the autoscaling group has a depends on flag for the launch configuration", "performed_via_github_app": null, "score": 1.0}]}