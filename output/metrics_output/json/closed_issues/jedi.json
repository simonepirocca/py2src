{"total_count": 1124, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/davidhalter/jedi/issues/1656", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1656/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1656/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1656/events", "html_url": "https://github.com/davidhalter/jedi/issues/1656", "id": 680985883, "node_id": "MDU6SXNzdWU2ODA5ODU4ODM=", "number": 1656, "title": "Jedi hangs vim when starting Macvim or terminal vim", "user": {"login": "richmeta", "id": 59289149, "node_id": "MDQ6VXNlcjU5Mjg5MTQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/59289149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richmeta", "html_url": "https://github.com/richmeta", "followers_url": "https://api.github.com/users/richmeta/followers", "following_url": "https://api.github.com/users/richmeta/following{/other_user}", "gists_url": "https://api.github.com/users/richmeta/gists{/gist_id}", "starred_url": "https://api.github.com/users/richmeta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richmeta/subscriptions", "organizations_url": "https://api.github.com/users/richmeta/orgs", "repos_url": "https://api.github.com/users/richmeta/repos", "events_url": "https://api.github.com/users/richmeta/events{/privacy}", "received_events_url": "https://api.github.com/users/richmeta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-18T12:02:20Z", "updated_at": "2020-08-18T13:14:18Z", "closed_at": "2020-08-18T13:14:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Vim Version\r\n```\r\nVIM - Vi IMproved 8.2 (2019 Dec 12, compiled Aug 15 2020 20:27:49)\r\nmacOS version\r\nIncluded patches: 1-1456\r\nCompiled by travis@Traviss-Mac.local\r\nHuge version with MacVim GUI.  Features included (+) or not (-):\r\n+acl               +file_in_path      -mouse_sysmouse    -tag_old_static\r\n+arabic            +find_in_path      +mouse_urxvt       -tag_any_white\r\n+autocmd           +float             +mouse_xterm       -tcl\r\n+autochdir         +folding           +multi_byte        +termguicolors\r\n-autoservername    -footer            +multi_lang        +terminal\r\n+balloon_eval      +fork()            -mzscheme          +terminfo\r\n+balloon_eval_term +fullscreen        +netbeans_intg     +termresponse\r\n+browse            +gettext           +num64             +textobjects\r\n++builtin_terms    -hangul_input      +odbeditor         +textprop\r\n+byte_offset       +iconv             +packages          +timers\r\n+channel           +insert_expand     +path_extra        +title\r\n+cindent           +ipv6              +perl/dyn          +toolbar\r\n+clientserver      +job               +persistent_undo   +transparency\r\n+clipboard         +jumplist          +popupwin          +user_commands\r\n+cmdline_compl     +keymap            +postscript        +vartabs\r\n+cmdline_hist      +lambda            +printer           +vertsplit\r\n+cmdline_info      +langmap           +profile           +virtualedit\r\n+comments          +libcall           +python/dyn        +visual\r\n+conceal           +linebreak         +python3/dyn       +visualextra\r\n+cryptv            +lispindent        +quickfix          +viminfo\r\n+cscope            +listcmds          +reltime           +vreplace\r\n+cursorbind        +localmap          +rightleft         +wildignore\r\n+cursorshape       +lua/dyn           +ruby/dyn          +wildmenu\r\n+dialog_con_gui    +menu              +scrollbind        +windows\r\n+diff              +mksession         +signs             +writebackup\r\n+digraphs          +modify_fname      +smartindent       -X11\r\n+dnd               +mouse             -sound             -xfontset\r\n-ebcdic            +mouseshape        +spell             +xim\r\n+emacs_tags        +mouse_dec         +startuptime       -xpm\r\n+eval              -mouse_gpm         +statusline        -xsmp\r\n+ex_extra          -mouse_jsbterm     -sun_workshop      -xterm_clipboard\r\n+extra_search      +mouse_netterm     +syntax            -xterm_save\r\n-farsi             +mouse_sgr         +tag_binary\r\n   system vimrc file: \"$VIM/vimrc\"\r\n     user vimrc file: \"$HOME/.vimrc\"\r\n 2nd user vimrc file: \"~/.vim/vimrc\"\r\n      user exrc file: \"$HOME/.exrc\"\r\n  system gvimrc file: \"$VIM/gvimrc\"\r\n    user gvimrc file: \"$HOME/.gvimrc\"\r\n2nd user gvimrc file: \"~/.vim/gvimrc\"\r\n       defaults file: \"$VIMRUNTIME/defaults.vim\"\r\n    system menu file: \"$VIMRUNTIME/menu.vim\"\r\n  fall-back for $VIM: \"/Applications/MacVim.app/Contents/Resources/vim\"\r\nCompilation: clang -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_MACVIM -Wall -Wno-unknown-pragmas -pipe  -DMACOS_X -DMACOS_X_DARWIN  -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -Wall -Wextra -Wshadow -Werror -Wno-error=missing-field-initializers -Wno-error=deprecated-declarations -Wno-error=unused-function\r\nLinking: clang   -L. -fstack-protector-strong -L/usr/local/lib -L/usr/local/opt/libyaml/lib -L/usr/local/opt/openssl@1.1/lib -L/usr/local/opt/readline/lib -L. -fstack-protector-strong -L/usr/local/lib -L/usr/local/opt/libyaml/lib -L/usr/local/opt/openssl@1.1/lib -L/usr/local/opt/readline/lib  -L/usr/local/lib -o Vim -framework Cocoa -framework Carbon       -lm  -lncurses -liconv /usr/local/lib/libintl.a -framework AppKit   -fstack-protector  -L/System/Library/Perl/5.18/darwin-thread-multi-2level/CORE\r\n```\r\n\r\nJedi Version:\r\n```\r\ncommit a17b0333031bd3652ad4c6169caaed05ffb7c49d (HEAD -> master, origin/master, origin/HEAD)\r\nAuthor: Daniel Hahler <git@thequod.de>\r\nDate:   Fri Jul 17 23:14:17 2020 +0200\r\n```\r\n\r\nMy vimrc:\r\n```\r\n\u276f cat vimrc\r\ncall plug#begin('~/.vim/bundle')\r\nPlug 'davidhalter/jedi-vim'\r\ncall plug#end()\r\n```\r\n\r\nSteps to reproduce:\r\n```\r\necho \"print('hello')\" > test.py\r\nvim test.py           \r\n```\r\nvim starts but renders nothing and does not respond to any input.  \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1654", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1654/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1654/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1654/events", "html_url": "https://github.com/davidhalter/jedi/issues/1654", "id": 679787962, "node_id": "MDU6SXNzdWU2Nzk3ODc5NjI=", "number": 1654, "title": "Broken autocorrect due to conda installing jedi 0.15", "user": {"login": "thomasaarholt", "id": 2721423, "node_id": "MDQ6VXNlcjI3MjE0MjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2721423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasaarholt", "html_url": "https://github.com/thomasaarholt", "followers_url": "https://api.github.com/users/thomasaarholt/followers", "following_url": "https://api.github.com/users/thomasaarholt/following{/other_user}", "gists_url": "https://api.github.com/users/thomasaarholt/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasaarholt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasaarholt/subscriptions", "organizations_url": "https://api.github.com/users/thomasaarholt/orgs", "repos_url": "https://api.github.com/users/thomasaarholt/repos", "events_url": "https://api.github.com/users/thomasaarholt/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasaarholt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-16T16:58:44Z", "updated_at": "2020-08-16T21:09:45Z", "closed_at": "2020-08-16T19:49:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "On Windows 10, latest conda with conda-forge added, I notice that tab-completion no longer works in IPython, Jupyter Notebook or Lab.\r\nOn inspection, I notice that I've got `jedi 0.15` (not `0.17.2`) installed, despite creating a fresh and small conda environment that day.\r\n\r\n`conda create --name test jedi` tries to install `jedi 0.15.2`. I notice that if I force `jedi=0.17`, the `parso` package goes from version 0.8 to 0.7.1. That is the only difference in the environments. (and tab-completion works now)\r\n\r\nI don't fully understand how conda resolves dependencies, so its unclear to me where the bug lies. I suspect a number of people are experiencing autocorrect not working on new environments at the moment.\r\n\r\nHere is the list of differing packages:\r\n```bash\r\n$ conda create --name test jedi\r\n  jedi               conda-forge/win-64::jedi-0.15.2-py38_0\r\n  parso              conda-forge/noarch::parso-0.8.0-pyh9f0ad1d_0\r\n```\r\n\r\n```bash\r\n$ conda create --name test jedi=0.17\r\n  jedi               conda-forge/win-64::jedi-0.17.2-py38h32f6830_0\r\n  parso              conda-forge/noarch::parso-0.7.1-pyh9f0ad1d_0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1653", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1653/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1653/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1653/events", "html_url": "https://github.com/davidhalter/jedi/issues/1653", "id": 679611704, "node_id": "MDU6SXNzdWU2Nzk2MTE3MDQ=", "number": 1653, "title": "Path error on windows", "user": {"login": "blayz3r", "id": 12205650, "node_id": "MDQ6VXNlcjEyMjA1NjUw", "avatar_url": "https://avatars2.githubusercontent.com/u/12205650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blayz3r", "html_url": "https://github.com/blayz3r", "followers_url": "https://api.github.com/users/blayz3r/followers", "following_url": "https://api.github.com/users/blayz3r/following{/other_user}", "gists_url": "https://api.github.com/users/blayz3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/blayz3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blayz3r/subscriptions", "organizations_url": "https://api.github.com/users/blayz3r/orgs", "repos_url": "https://api.github.com/users/blayz3r/repos", "events_url": "https://api.github.com/users/blayz3r/events{/privacy}", "received_events_url": "https://api.github.com/users/blayz3r/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-15T17:17:52Z", "updated_at": "2020-08-16T07:46:36Z", "closed_at": "2020-08-16T07:46:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Windows 10\r\npython 3.8.5\r\n\r\n\r\n```python\r\nimport jedi\r\n\r\nsource = \"\"\"\r\nimport os\r\nos.path.join\"\"\"\r\n\r\nscript = jedi.Script(source, path=\"doc.py\")\r\nprint(script.infer(3, len(\"os.path.join\"))[0].full_name)\r\n\r\n```\r\n\r\n\r\n\r\n\r\n**Error**\r\n```vim\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\api\\__init__.py|331 error| in _infer values = helpers.infer(self._inference_state, context, leaf)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\api\\helpers.py|164 error| in infer return inference_state.infer(context, leaf)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\__init__.py|179 error| in infer return helpers.infer_call_of_leaf(context, name)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\helpers.py|105 error| in infer_call_of_leaf values = context.infer_node(base)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\context.py|222 error| in infer_node return infer_node(self, node)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\syntax_tree.py|157 error| in infer_node return _infer_node_if_inferred(context, element)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\syntax_tree.py|170 error| in _infer_node_if_inferred return _infer_node_cached(context, element)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\cache.py|44 error| in wrapper rv = function(obj, *args, **kwargs)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\syntax_tree.py|175 error| in _infer_node_cached return _infer_node(context, element)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\debug.py|82 error| in wrapper return func(*args, **kwargs)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\syntax_tree.py|83 error| in wrapper return func(context, *args, **kwargs)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\syntax_tree.py|185 error| in _infer_node return infer_atom(context, element)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\syntax_tree.py|310 error| in infer_atom return context.py__getattribute__(atom, position=position)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\context.py|75 error| in py__getattribute__ values = ValueSet.from_sets(name.infer() for name in names)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\base_value.py|427 error| in from_sets for set_ in sets:\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\context.py|75 error| in <genexpr> values = ValueSet.from_sets(name.infer() for name in names)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\names.py|279 error| in infer return tree_name_to_values(\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\plugins\\__init__.py|21 error| in wrapper return built_functions[public_name](*args, **kwargs)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\plugins\\stdlib.py|862 error| in wrapper return func(inference_state, context, tree_name)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\plugins\\django.py|176 error| in wrapper result = func(inference_state, context, tree_name)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\syntax_tree.py|753 error| in tree_name_to_values types = imports.infer_import(context, tree_name)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\cache.py|44 error| in wrapper rv = function(obj, *args, **kwargs)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\imports.py|55 error| in infer_import _prepare_infer_import(module_context, tree_name)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\imports.py|115 error| in _prepare_infer_import importer = Importer(module_context.inference_state, tuple(import_path),\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\imports.py|169 error| in __init__ debug.speed('import %s %s' % (import_path, module_context))\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\context.py|216 error| in __repr__ return '%s(%s)' % (self.__class__.__name__, self._value)\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\value\\module.py|228 error| in __repr__ self.is_stub()\r\nE:\\ProgramFiles\\Python38\\Lib\\site-packages\\jedi\\inference\\value\\module.py|159 error| in is_stub if self._path is not None and self._path.endswith('.pyi'): AttributeError: 'WindowsPath' object has no attribute 'endswith'\r\n```\r\n\r\n**Expected result**\r\n\r\n![image](https://user-images.githubusercontent.com/12205650/90317838-2d372380-defa-11ea-9043-eade4f56909a.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1651", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1651/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1651/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1651/events", "html_url": "https://github.com/davidhalter/jedi/issues/1651", "id": 679264463, "node_id": "MDU6SXNzdWU2NzkyNjQ0NjM=", "number": 1651, "title": "Basename.docstring() returns string 'None'", "user": {"login": "bnavigator", "id": 4623504, "node_id": "MDQ6VXNlcjQ2MjM1MDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4623504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnavigator", "html_url": "https://github.com/bnavigator", "followers_url": "https://api.github.com/users/bnavigator/followers", "following_url": "https://api.github.com/users/bnavigator/following{/other_user}", "gists_url": "https://api.github.com/users/bnavigator/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnavigator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnavigator/subscriptions", "organizations_url": "https://api.github.com/users/bnavigator/orgs", "repos_url": "https://api.github.com/users/bnavigator/repos", "events_url": "https://api.github.com/users/bnavigator/events{/privacy}", "received_events_url": "https://api.github.com/users/bnavigator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-08-14T16:21:16Z", "updated_at": "2020-08-14T22:49:26Z", "closed_at": "2020-08-14T21:56:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\ncurrently the [openSUSE Tumbleweed development package for Jedi](https://build.opensuse.org/package/show/devel:languages:python/python-jedi) and packages depending on it (e.g. PyLS) fail, because the [parso package](https://build.opensuse.org/request/show/826257) is about to get updated to 0.8.0 and there is no concept of version pinning for this rolling release disribution.\r\n\r\nI don't know if you plan to release a new Jedi version in the next few days, so [I tried to cherry-pick the commits](https://github.com/davidhalter/jedi/compare/v0.17.2...bnavigator:fixpath) which look like they deal with the changed parso handling of Pathlib:\r\n- db0e907\r\n- 480a464\r\n- a16f52b9\r\n- 829dda3\r\n- f12ed208\r\n\r\nAfter resolving the merge conflicts I got all tests to pass except one: `test_inference/test_mixed.py:test_signature` fails because the returned docstring by `s.docstring()` contains `'None'` as string.\r\n\r\nhttps://github.com/davidhalter/jedi/blob/216f976fd5cab7a460e5d287e853d11759251e52/test/test_inference/test_mixed.py#L88-L102\r\n\r\n```\r\n[  127s] =================================== FAILURES ===================================\r\n[  127s] ________________________________ test_signature ________________________________\r\n[  127s] \r\n[  127s]     @pytest.mark.skipif(sys.version_info[0] == 2, reason=\"Ignore Python 2, EoL\")\r\n[  127s]     def test_signature():\r\n[  127s]         \"\"\"\r\n[  127s]         For performance reasons we use the signature of the compiled object and not\r\n[  127s]         the tree object.\r\n[  127s]         \"\"\"\r\n[  127s]         def some_signature(foo):\r\n[  127s]             pass\r\n[  127s]     \r\n[  127s]         from inspect import Signature, Parameter\r\n[  127s]         some_signature.__signature__ = Signature([\r\n[  127s]             Parameter('bar', kind=Parameter.KEYWORD_ONLY, default=1)\r\n[  127s]         ])\r\n[  127s]     \r\n[  127s]         s, = jedi.Interpreter('some_signature', [locals()]).goto()\r\n[  127s] >       assert s.docstring() == 'some_signature(*, bar=1)'\r\n[  127s] E       AssertionError: assert 'some_signatu...ar=1)\\n\\nNone' == 'some_signature(*, bar=1)'\r\n[  127s] E         - some_signature(*, bar=1)\r\n[  127s] E         + some_signature(*, bar=1)\r\n[  127s] E         ?                         +\r\n[  127s] E         + \r\n[  127s] E         + None\r\n[  127s] \r\n[  127s] test/test_inference/test_mixed.py:104: AssertionError\r\n```\r\n\r\nI could trace it to this line, but then I got lost:\r\nhttps://github.com/davidhalter/jedi/blob/216f976fd5cab7a460e5d287e853d11759251e52/jedi/api/classes.py#L298-L309\r\n\r\n```\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n> /home/abuild/rpmbuild/BUILD/jedi-0.17.2/test/test_inference/test_mixed.py(102)test_signature()\r\n-> assert s.docstring() == 'some_signature(*, bar=1)'\r\n(Pdb) print(s)\r\n<Name full_name='jedi.api.interpreter.NamespaceObject.some_signature', description='def some_signature'>\r\n(Pdb) print(s._name)\r\nMixedName(<CompiledName: (<CompiledValueName: string_name=NamespaceObject>).some_signature>)\r\n(Pdb) print(s._name.py__doc__)\r\n<bound method CompiledName.py__doc__ of <CompiledName: (<CompiledValueName: string_name=NamespaceObject>).some_signature>>\r\n(Pdb) print(type(s._name.py__doc__()))\r\n<class 'str'>\r\n(Pdb) source s._name.py__doc__\r\n333         def py__doc__(self):\r\n334             value, = self.infer()\r\n335             return value.py__doc__()\r\n(Pdb) p s._name.infer\r\n<bound method MixedName.infer of MixedName(<CompiledName: (<CompiledValueName: string_name=NamespaceObject>).some_signature>)>\r\n(Pdb) p s._name.infer()\r\nS{<MixedObject: <function test_signature.<locals>.some_signature a..; <FunctionValue: <Function: some_signature@95-97>>>}\r\n```\r\n\r\nSo I added this: (610165df9e91e658b799f184af0481b470f91298)\r\n```diff\r\ndiff --git a/jedi/api/classes.py b/jedi/api/classes.py\r\nindex 4e0d2635..a47a919a 100644\r\n--- a/jedi/api/classes.py\r\n+++ b/jedi/api/classes.py\r\n@@ -298,6 +301,8 @@ class BaseName(object):\r\n         if isinstance(self._name, ImportName) and fast:\r\n             return ''\r\n         doc = self._get_docstring()\r\n+        if doc == 'None':\r\n+            doc = ''\r\n         if raw:\r\n             return doc\r\n```\r\n\r\nI don't know if this is a result of the selective cherry-picking and not relevant for the next version or whether this information could be useful for you. So here it is.\r\n\r\nCheers,\r\nBen", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1650", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1650/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1650/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1650/events", "html_url": "https://github.com/davidhalter/jedi/issues/1650", "id": 679113727, "node_id": "MDU6SXNzdWU2NzkxMTM3Mjc=", "number": 1650, "title": "python-parso 0.8.0 breaks jedi", "user": {"login": "mcepl", "id": 198999, "node_id": "MDQ6VXNlcjE5ODk5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/198999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcepl", "html_url": "https://github.com/mcepl", "followers_url": "https://api.github.com/users/mcepl/followers", "following_url": "https://api.github.com/users/mcepl/following{/other_user}", "gists_url": "https://api.github.com/users/mcepl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcepl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcepl/subscriptions", "organizations_url": "https://api.github.com/users/mcepl/orgs", "repos_url": "https://api.github.com/users/mcepl/repos", "events_url": "https://api.github.com/users/mcepl/events{/privacy}", "received_events_url": "https://api.github.com/users/mcepl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-14T12:07:40Z", "updated_at": "2020-08-14T13:41:44Z", "closed_at": "2020-08-14T12:12:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, when trying to upgrade python-parso in openSUSE/Factory with version 0.8.0, we got 1438 tests in the jedi test suite failed.\r\n\r\nDoes this [complete log with all details](https://github.com/davidhalter/jedi/files/5074456/_log.txt.zip) make any sense to you? Do we do something wrong?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1648", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1648/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1648/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1648/events", "html_url": "https://github.com/davidhalter/jedi/issues/1648", "id": 673702542, "node_id": "MDU6SXNzdWU2NzM3MDI1NDI=", "number": 1648, "title": "[0.17.2] Keeps users from upgrading to parso>=0.8.0", "user": {"login": "hartwork", "id": 1577132, "node_id": "MDQ6VXNlcjE1NzcxMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1577132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hartwork", "html_url": "https://github.com/hartwork", "followers_url": "https://api.github.com/users/hartwork/followers", "following_url": "https://api.github.com/users/hartwork/following{/other_user}", "gists_url": "https://api.github.com/users/hartwork/gists{/gist_id}", "starred_url": "https://api.github.com/users/hartwork/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hartwork/subscriptions", "organizations_url": "https://api.github.com/users/hartwork/orgs", "repos_url": "https://api.github.com/users/hartwork/repos", "events_url": "https://api.github.com/users/hartwork/events{/privacy}", "received_events_url": "https://api.github.com/users/hartwork/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-05T16:56:39Z", "updated_at": "2020-08-05T21:23:41Z", "closed_at": "2020-08-05T21:19:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nCommit 209e2713fd699b8a54aa4c8bbd0915e6c51f2092 already has the fix to stop blocking an update to parso>=0.8.0 [like this one](https://github.com/hartwork/jawanndenn/pull/56). Would be great to have a new release containing that fix. Thanks in a advance! :pray: \r\n\r\nOn a side note, please consider dropping `<0.9.0` or at least loosening it to `<1.0.0` because it's guaranteed to become a problem at some point and [forces Linux distros to patch it away](https://github.com/gentoo/gentoo/commit/e020c002dd8839c478164f03858740d7566ce342#diff-9bf8013948a3a4f70c36f54394c56d01) again and again already \u2014 not ideal. So if that could be dropped, that would rock. Happy to make a pull request as needed.\r\n\r\nBest, Sebastian\r\n\r\nCC @davidhalter", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1647", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1647/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1647/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1647/events", "html_url": "https://github.com/davidhalter/jedi/issues/1647", "id": 671737315, "node_id": "MDU6SXNzdWU2NzE3MzczMTU=", "number": 1647, "title": "Error from jedi: Should not happen", "user": {"login": "Nudin", "id": 509205, "node_id": "MDQ6VXNlcjUwOTIwNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/509205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nudin", "html_url": "https://github.com/Nudin", "followers_url": "https://api.github.com/users/Nudin/followers", "following_url": "https://api.github.com/users/Nudin/following{/other_user}", "gists_url": "https://api.github.com/users/Nudin/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nudin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nudin/subscriptions", "organizations_url": "https://api.github.com/users/Nudin/orgs", "repos_url": "https://api.github.com/users/Nudin/repos", "events_url": "https://api.github.com/users/Nudin/events{/privacy}", "received_events_url": "https://api.github.com/users/Nudin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2020-08-03T01:38:28Z", "updated_at": "2020-08-05T21:56:31Z", "closed_at": "2020-08-05T21:55:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using jedi via deoplete, I sometimes get errors with very long stack trace.\r\n```\r\nMuster nicht gefunden \r\n[deoplete] Traceback (most recent call last): \r\n  File \"/home/michi/.vim/plugged/deoplete.nvim/rplugin/python3/deoplete/child.py\", line 194, in _gather_results  \r\n    result = self._get_result(context, source)\r\n  File \"/home/michi/.vim/plugged/deoplete.nvim/rplugin/python3/deoplete/child.py\", line 254, in _get_result      \r\n    ctx['candidates'] = source.gather_candidates(ctx)\r\n  File \"/home/michi/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi/profiler.py\", line 37, in wrapper   \r\n    return func(self, *args, **kwargs)   \r\n  File \"/home/michi/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi.py\", line 200, in gather_candidates \r\n    completions = self.get_completions(script)\r\n  File \"/home/michi/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi/profiler.py\", line 37, in wrapper   \r\n    return func(self, *args, **kwargs)   \r\n  File \"/home/michi/.vim/plugged/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi.py\", line 145, in get_completions   \r\n    return script.completions()   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/api/__init__.py\", line 291, in completions \r\n    return self.complete(*self._pos, fuzzy=fuzzy)    \r\n  File \"/usr/lib/python3.8/site-packages/jedi/api/helpers.py\", line 465, in wrapper      \r\n    return func(self, line, column, *args, **kwargs) \r\n  File \"/usr/lib/python3.8/site-packages/jedi/api/__init__.py\", line 275, in complete    \r\n    return self._complete(line, column, **kwargs)    \r\n  File \"/usr/lib/python3.8/site-packages/jedi/api/__init__.py\", line 283, in _complete   \r\n    return completion.complete()  \r\n  File \"/usr/lib/python3.8/site-packages/jedi/api/completion.py\", line 123, in complete  \r\n    prefixed_completions = complete_dict(\r\n  File \"/usr/lib/python3.8/site-packages/jedi/api/strings.py\", line 42, in complete_dict \r\n    values = infer_call_of_leaf(context, before_bracket_leaf)    \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/helpers.py\", line 80, in infer_call_of_leaf  \r\n    return context.infer_node(leaf)      \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/context.py\", line 222, in infer_node  \r\n    return infer_node(self, node) \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 137, in infer_node     \r\n    return _infer_node_if_inferred(context, element) \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 150, in _infer_node_if_inferred    \r\n    return _infer_node_cached(context, element)      \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/cache.py\", line 43, in wrapper   \r\n    rv = function(obj, *args, **kwargs)  \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 155, in _infer_node_cached  \r\n    return _infer_node(context, element) \r\n  File \"/usr/lib/python3.8/site-packages/jedi/debug.py\", line 82, in wrapper \r\n    return func(*args, **kwargs)  \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 63, in wrapper  \r\n    return func(context, *args, **kwargs)\r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 165, in _infer_node    \r\n    return infer_atom(context, element)  \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 290, in infer_atom     \r\n    return context.py__getattribute__(atom, position=position)   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__  \r\n    values = ValueSet.from_sets(name.infer() for name in names)  \r\n  File \"/usr/lib/python3.8/site-packages/jedi/common/value.py\", line 69, in from_sets    \r\n    for set_ in sets: \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/context.py\", line 75, in <genexpr>    \r\n    values = ValueSet.from_sets(name.infer() for name in names)  \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/names.py\", line 279, in infer    \r\n    return tree_name_to_values(   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper  \r\n    return built_functions[public_name](*args, **kwargs)\r\n      File \"/usr/lib/python3.8/site-packages/jedi/inference/cache.py\", line 43, in wrapper     \r\n    rv = function(obj, *args, **kwargs)   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 155, in _infer_node_cached \r\n    return _infer_node(context, element)  \r\n  File \"/usr/lib/python3.8/site-packages/jedi/debug.py\", line 82, in wrapper \r\n    return func(*args, **kwargs)   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 63, in wrapper      \r\n    return func(context, *args, **kwargs) \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 165, in _infer_node \r\n    return infer_atom(context, element)   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 290, in infer_atom  \r\n    return context.py__getattribute__(atom, position=position) \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__      \r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/usr/lib/python3.8/site-packages/jedi/common/value.py\", line 69, in from_sets      \r\n    for set_ in sets:\r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/context.py\", line 75, in <genexpr> \r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/names.py\", line 279, in infer      \r\n    return tree_name_to_values(    \r\n  File \"/usr/lib/python3.8/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper    \r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/usr/lib/python3.8/site-packages/jedi/plugins/stdlib.py\", line 842, in wrapper     \r\n    return func(inference_state, context, tree_name)    \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 709, in tree_name_to_values\r\n    types = infer_expr_stmt(context, node, tree_name)   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 63, in wrapper      \r\n    return func(context, *args, **kwargs) \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 365, in infer_expr_stmt    \r\n    return _infer_expr_stmt(context, stmt, seek_name)   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/debug.py\", line 82, in wrapper \r\n    return func(*args, **kwargs)   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 410, in _infer_expr_stmt   \r\n    left_values = context.py__getattribute__(name, position=stmt.start_pos)  \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__      \r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/usr/lib/python3.8/site-packages/jedi/common/value.py\", line 69, in from_sets      \r\n    for set_ in sets:\r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/context.py\", line 75, in <genexpr> \r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/names.py\", line 279, in infer      \r\n    return tree_name_to_values(    \r\n  File \"/usr/lib/python3.8/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper    \r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/usr/lib/python3.8/site-packages/jedi/plugins/stdlib.py\", line 842, in wrapper     \r\n    return func(inference_state, context, tree_name)    \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 709, in tree_name_to_values\r\n    types = infer_expr_stmt(context, node, tree_name)   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 63, in wrapper      \r\n    return func(context, *args, **kwargs) \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 365, in infer_expr_stmt    \r\n    return _infer_expr_stmt(context, stmt, seek_name)   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/debug.py\", line 82, in wrapper \r\n    return func(*args, **kwargs)\r\n      File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 410, in _infer_expr_stmt   \r\n    left_values = context.py__getattribute__(name, position=stmt.start_pos)  \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__      \r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/usr/lib/python3.8/site-packages/jedi/common/value.py\", line 69, in from_sets      \r\n    for set_ in sets:\r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/context.py\", line 75, in <genexpr> \r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/names.py\", line 279, in infer      \r\n    return tree_name_to_values(    \r\n  File \"/usr/lib/python3.8/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper    \r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/usr/lib/python3.8/site-packages/jedi/plugins/stdlib.py\", line 842, in wrapper     \r\n    return func(inference_state, context, tree_name)    \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 709, in tree_name_to_values\r\n    types = infer_expr_stmt(context, node, tree_name)   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 63, in wrapper      \r\n    return func(context, *args, **kwargs) \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 365, in infer_expr_stmt    \r\n    return _infer_expr_stmt(context, stmt, seek_name)   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/debug.py\", line 82, in wrapper \r\n    return func(*args, **kwargs)   \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 410, in _infer_expr_stmt   \r\n    left_values = context.py__getattribute__(name, position=stmt.start_pos)  \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__      \r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/usr/lib/python3.8/site-packages/jedi/common/value.py\", line 69, in from_sets      \r\n    for set_ in sets:\r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/context.py\", line 75, in <genexpr> \r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/names.py\", line 279, in infer      \r\n    return tree_name_to_values(    \r\n  File \"/usr/lib/python3.8/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper    \r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/usr/lib/python3.8/site-packages/jedi/plugins/stdlib.py\", line 842, in wrapper     \r\n    return func(inference_state, context, tree_name)    \r\n  File \"/usr/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 729, in tree_name_to_values\r\n    raise ValueError(\"Should not happen. type: %s\" % typ)      \r\nValueError: Should not happen. type: name \r\nError from jedi: Should not happen. type: name.  Use :messages / see above for error details.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1645", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1645/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1645/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1645/events", "html_url": "https://github.com/davidhalter/jedi/issues/1645", "id": 668943777, "node_id": "MDU6SXNzdWU2Njg5NDM3Nzc=", "number": 1645, "title": "Support SimpleNamespace", "user": {"login": "kbehlers", "id": 43154039, "node_id": "MDQ6VXNlcjQzMTU0MDM5", "avatar_url": "https://avatars2.githubusercontent.com/u/43154039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbehlers", "html_url": "https://github.com/kbehlers", "followers_url": "https://api.github.com/users/kbehlers/followers", "following_url": "https://api.github.com/users/kbehlers/following{/other_user}", "gists_url": "https://api.github.com/users/kbehlers/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbehlers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbehlers/subscriptions", "organizations_url": "https://api.github.com/users/kbehlers/orgs", "repos_url": "https://api.github.com/users/kbehlers/repos", "events_url": "https://api.github.com/users/kbehlers/events{/privacy}", "received_events_url": "https://api.github.com/users/kbehlers/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235916, "node_id": "MDU6TGFiZWwxNzIzNTkxNg==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/feature", "name": "feature", "color": "02e10c", "default": false, "description": null}, {"id": 1769857987, "node_id": "MDU6TGFiZWwxNzY5ODU3OTg3", "url": "https://api.github.com/repos/davidhalter/jedi/labels/help-wanted", "name": "help-wanted", "color": "d89217", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "kbehlers", "id": 43154039, "node_id": "MDQ6VXNlcjQzMTU0MDM5", "avatar_url": "https://avatars2.githubusercontent.com/u/43154039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbehlers", "html_url": "https://github.com/kbehlers", "followers_url": "https://api.github.com/users/kbehlers/followers", "following_url": "https://api.github.com/users/kbehlers/following{/other_user}", "gists_url": "https://api.github.com/users/kbehlers/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbehlers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbehlers/subscriptions", "organizations_url": "https://api.github.com/users/kbehlers/orgs", "repos_url": "https://api.github.com/users/kbehlers/repos", "events_url": "https://api.github.com/users/kbehlers/events{/privacy}", "received_events_url": "https://api.github.com/users/kbehlers/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "kbehlers", "id": 43154039, "node_id": "MDQ6VXNlcjQzMTU0MDM5", "avatar_url": "https://avatars2.githubusercontent.com/u/43154039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbehlers", "html_url": "https://github.com/kbehlers", "followers_url": "https://api.github.com/users/kbehlers/followers", "following_url": "https://api.github.com/users/kbehlers/following{/other_user}", "gists_url": "https://api.github.com/users/kbehlers/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbehlers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbehlers/subscriptions", "organizations_url": "https://api.github.com/users/kbehlers/orgs", "repos_url": "https://api.github.com/users/kbehlers/repos", "events_url": "https://api.github.com/users/kbehlers/events{/privacy}", "received_events_url": "https://api.github.com/users/kbehlers/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-07-30T16:33:03Z", "updated_at": "2020-08-17T22:03:00Z", "closed_at": "2020-08-17T22:02:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently `SimpleNamespace` doesn't populate autocomplete suggestions for set attributes. I've looked through the issues and haven't seen `SimpleNamespace` mentioned. Could be a similar problem to `Enum`, `namedtuple`, or `dataclass`?\r\n\r\nFWIW I see the [same issue](https://github.com/microsoft/python-language-server/issues/2108) when using the Microsoft Python Language Server in VSCode, but Jedi actually gives me different Intellisense options if you compare the screenshots between the two issues.\r\n\r\n\r\n## Environment data\r\nVSCode\r\n\r\n> Version: 1.47.2\r\n> Commit: 17299e413d5590b14ab0340ea477cdd86ff13daf\r\n> Date: 2020-07-15T18:18:50.054Z\r\n> Electron: 7.3.2\r\n> Chrome: 78.0.3904.130\r\n> Node.js: 12.8.1\r\n> V8: 7.8.279.23-electron.0\r\n> OS: Darwin x64 18.7.0\r\n\r\nPython Extension\r\n\r\n> Name: Python\r\n> Id: ms-python.python\r\n> Version: 2020.7.96456\r\n> Publisher: Microsoft\r\n\r\nLanguage Server Settings\r\n```\r\n{\r\n  \"python.languageServer\": \"Jedi\",\r\n}\r\n```\r\n\r\n## Code Example\r\n```python\r\nfrom types import SimpleNamespace\r\ncolors = SimpleNamespace(red='red', blue='blue')\r\n# this should autocomplete, it doesn't find `red` or `blue` as options\r\ncolors.red\r\n```\r\n\r\n### Screenshot\r\n![image](https://user-images.githubusercontent.com/43154039/88948743-898a1a00-d24f-11ea-8806-d4cc736e6f3a.png)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1644", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1644/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1644/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1644/events", "html_url": "https://github.com/davidhalter/jedi/issues/1644", "id": 667260513, "node_id": "MDU6SXNzdWU2NjcyNjA1MTM=", "number": 1644, "title": "Completions are broken again", "user": {"login": "KOLANICH", "id": 240344, "node_id": "MDQ6VXNlcjI0MDM0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/240344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KOLANICH", "html_url": "https://github.com/KOLANICH", "followers_url": "https://api.github.com/users/KOLANICH/followers", "following_url": "https://api.github.com/users/KOLANICH/following{/other_user}", "gists_url": "https://api.github.com/users/KOLANICH/gists{/gist_id}", "starred_url": "https://api.github.com/users/KOLANICH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KOLANICH/subscriptions", "organizations_url": "https://api.github.com/users/KOLANICH/orgs", "repos_url": "https://api.github.com/users/KOLANICH/repos", "events_url": "https://api.github.com/users/KOLANICH/events{/privacy}", "received_events_url": "https://api.github.com/users/KOLANICH/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-28T17:54:30Z", "updated_at": "2020-07-28T21:02:59Z", "closed_at": "2020-07-28T21:02:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "```pythkn\r\nIn [1]: import jedi\r\nIn [2]: jedi.Script(\"jedi.\").complete()\r\nOut[2]: []\r\n```\r\n\r\nJedi version: 9d1587a41d3847213f5d72ab95dfa2aef36b65a6\r\nParso version: 6405a1227fb17ef778164f11af0cac50d6941f84\r\nPython version: 3.8.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1640", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1640/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1640/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1640/events", "html_url": "https://github.com/davidhalter/jedi/issues/1640", "id": 665158782, "node_id": "MDU6SXNzdWU2NjUxNTg3ODI=", "number": 1640, "title": "Add completions for the replace function in dataclasses", "user": {"login": "jembishop", "id": 40360024, "node_id": "MDQ6VXNlcjQwMzYwMDI0", "avatar_url": "https://avatars1.githubusercontent.com/u/40360024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jembishop", "html_url": "https://github.com/jembishop", "followers_url": "https://api.github.com/users/jembishop/followers", "following_url": "https://api.github.com/users/jembishop/following{/other_user}", "gists_url": "https://api.github.com/users/jembishop/gists{/gist_id}", "starred_url": "https://api.github.com/users/jembishop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jembishop/subscriptions", "organizations_url": "https://api.github.com/users/jembishop/orgs", "repos_url": "https://api.github.com/users/jembishop/repos", "events_url": "https://api.github.com/users/jembishop/events{/privacy}", "received_events_url": "https://api.github.com/users/jembishop/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235916, "node_id": "MDU6TGFiZWwxNzIzNTkxNg==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/feature", "name": "feature", "color": "02e10c", "default": false, "description": null}, {"id": 1769857987, "node_id": "MDU6TGFiZWwxNzY5ODU3OTg3", "url": "https://api.github.com/repos/davidhalter/jedi/labels/help-wanted", "name": "help-wanted", "color": "d89217", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "jembishop", "id": 40360024, "node_id": "MDQ6VXNlcjQwMzYwMDI0", "avatar_url": "https://avatars1.githubusercontent.com/u/40360024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jembishop", "html_url": "https://github.com/jembishop", "followers_url": "https://api.github.com/users/jembishop/followers", "following_url": "https://api.github.com/users/jembishop/following{/other_user}", "gists_url": "https://api.github.com/users/jembishop/gists{/gist_id}", "starred_url": "https://api.github.com/users/jembishop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jembishop/subscriptions", "organizations_url": "https://api.github.com/users/jembishop/orgs", "repos_url": "https://api.github.com/users/jembishop/repos", "events_url": "https://api.github.com/users/jembishop/events{/privacy}", "received_events_url": "https://api.github.com/users/jembishop/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jembishop", "id": 40360024, "node_id": "MDQ6VXNlcjQwMzYwMDI0", "avatar_url": "https://avatars1.githubusercontent.com/u/40360024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jembishop", "html_url": "https://github.com/jembishop", "followers_url": "https://api.github.com/users/jembishop/followers", "following_url": "https://api.github.com/users/jembishop/following{/other_user}", "gists_url": "https://api.github.com/users/jembishop/gists{/gist_id}", "starred_url": "https://api.github.com/users/jembishop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jembishop/subscriptions", "organizations_url": "https://api.github.com/users/jembishop/orgs", "repos_url": "https://api.github.com/users/jembishop/repos", "events_url": "https://api.github.com/users/jembishop/events{/privacy}", "received_events_url": "https://api.github.com/users/jembishop/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2020-07-24T13:11:27Z", "updated_at": "2020-07-28T17:13:08Z", "closed_at": "2020-07-28T08:58:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi I noticed that completions work for dataclasses\r\n```python\r\nimport jedi\r\n\r\nscript = \"\"\"from dataclasses import dataclass, replace\r\n@dataclass(frozen=True)\r\nclass Hello:\r\n   foo: int\r\na = Hello(fo\"\"\"\r\nprint(jedi.Script(script).complete())\r\n```\r\n`[<Completion: foo=>, <Completion: format>]`\r\n\r\nBut the `replace` function in dataclasses does not\r\n```python\r\nscript = \"\"\"from dataclasses import dataclass, replace\r\n@dataclass(frozen=True)\r\nclass Hello:\r\n   foo: int\r\na = Hello(foo=1)\r\nb = replace(a, fo\"\"\"\r\nprint(jedi.Script(script).complete())\r\n```\r\n`[]`\r\n\r\nIs it possible to make this work? I can give it a stab myself if you are too busy (though I have zero experience with jedi). \r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1639", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1639/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1639/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1639/events", "html_url": "https://github.com/davidhalter/jedi/issues/1639", "id": 664070798, "node_id": "MDU6SXNzdWU2NjQwNzA3OTg=", "number": 1639, "title": "TypeError on cropped file size slice", "user": {"login": "agnash", "id": 3027833, "node_id": "MDQ6VXNlcjMwMjc4MzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3027833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agnash", "html_url": "https://github.com/agnash", "followers_url": "https://api.github.com/users/agnash/followers", "following_url": "https://api.github.com/users/agnash/following{/other_user}", "gists_url": "https://api.github.com/users/agnash/gists{/gist_id}", "starred_url": "https://api.github.com/users/agnash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agnash/subscriptions", "organizations_url": "https://api.github.com/users/agnash/orgs", "repos_url": "https://api.github.com/users/agnash/repos", "events_url": "https://api.github.com/users/agnash/events{/privacy}", "received_events_url": "https://api.github.com/users/agnash/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-22T21:48:26Z", "updated_at": "2020-07-22T23:33:40Z", "closed_at": "2020-07-22T23:33:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI'm running the latest update of Jedi provided via the Microsoft VSCode Python extension and hitting an error when loading a larger import. The import is `botostubs`.\r\n\r\n**Reproduction env:**\r\nMacOS\r\nVSCode v1.47.2\r\nVSCode Python extension v2020.7.94776 (w/ Jedi v17.1)\r\n\r\n**Reproduction steps:**\r\n1. `import botostubs`\r\n\r\n2. Command-click on import to go-to source\r\n\r\n**Expected result:**\r\nSource loads and auto-complete via IntelliSense should generally work\r\n\r\n**Actual result:**\r\nSource does not load and autocomplete does not work.\r\nIn VSCode's python log, the last lines of the generated stack trace are as follows:\r\n```\r\n  File \"<redacted>/.vscode/extensions/ms-python.python-2020.7.94776/pythonFiles/lib/python/jedi/inference/__init__.py\", line 191, in parse_and_get_code\r\n    code = code[:settings._cropped_file_size]\r\nTypeError: slice indices must be integers or None or have an __index__ method\r\n```\r\n**Investigation:**\r\n\r\nIn https://github.com/davidhalter/jedi/blob/master/jedi/settings.py, you're setting `_cropped_file_size = 10e6  # 1 Megabyte`.\r\n\r\nHowever, as the error states, slice indices must be int or None or have the \\_\\_index__ method, and type(10e6) is float.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1637", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1637/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1637/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1637/events", "html_url": "https://github.com/davidhalter/jedi/issues/1637", "id": 660070362, "node_id": "MDU6SXNzdWU2NjAwNzAzNjI=", "number": 1637, "title": "Use GitHub releases feature instead of issue or mailing list", "user": {"login": "bnavigator", "id": 4623504, "node_id": "MDQ6VXNlcjQ2MjM1MDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4623504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnavigator", "html_url": "https://github.com/bnavigator", "followers_url": "https://api.github.com/users/bnavigator/followers", "following_url": "https://api.github.com/users/bnavigator/following{/other_user}", "gists_url": "https://api.github.com/users/bnavigator/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnavigator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnavigator/subscriptions", "organizations_url": "https://api.github.com/users/bnavigator/orgs", "repos_url": "https://api.github.com/users/bnavigator/repos", "events_url": "https://api.github.com/users/bnavigator/events{/privacy}", "received_events_url": "https://api.github.com/users/bnavigator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-18T10:42:08Z", "updated_at": "2020-07-18T20:19:40Z", "closed_at": "2020-07-18T11:24:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/davidhalter/jedi/issues/1063#issuecomment-660322700\r\n> I am switching to a mailing list instead of this issue.\r\n>\r\n> Please write an empty email to `jedi-announce+subscribe@googlegroups.com` to subscribe. Alternatively you can of course also join here: https://groups.google.com/g/jedi-announce.\r\n>\r\n> I might post the next few updates here as well, but the mailing list will be where the releases will be announced in the future.\r\n\r\nWhy not just us the \"Releases\" feature on GitHub? If you actually release a tag instead of just tagging the version, people watching for releases get notified. And you get to write proper release announcements, too.\r\n\r\nhttps://github.com/davidhalter/jedi/releases/new", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1636", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1636/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1636/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1636/events", "html_url": "https://github.com/davidhalter/jedi/issues/1636", "id": 657565273, "node_id": "MDU6SXNzdWU2NTc1NjUyNzM=", "number": 1636, "title": "Attribute Error 'TreeInstance' object has no attribute 'negate'", "user": {"login": "Carreau", "id": 335567, "node_id": "MDQ6VXNlcjMzNTU2Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/335567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Carreau", "html_url": "https://github.com/Carreau", "followers_url": "https://api.github.com/users/Carreau/followers", "following_url": "https://api.github.com/users/Carreau/following{/other_user}", "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions", "organizations_url": "https://api.github.com/users/Carreau/orgs", "repos_url": "https://api.github.com/users/Carreau/repos", "events_url": "https://api.github.com/users/Carreau/events{/privacy}", "received_events_url": "https://api.github.com/users/Carreau/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-15T18:34:32Z", "updated_at": "2020-07-17T15:44:57Z", "closed_at": "2020-07-17T13:57:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nimport jedi\r\nimport numpy as np\r\ncode = \"x = np.linspace(-np.pi, 10)\"\r\njedi.Interpreter(code, [{'np':np}]).infer(1,0)\r\n```\r\n\r\n\r\n```\r\n[..snip many frames...]\r\n~/dev/jedi/jedi/inference/syntax_tree.py in infer_factor(value_set, operator)\r\n    498 if operator == '-':\r\n    499     if is_number(value):\r\n--> 500         yield value.negate()\r\n    501 elif operator == 'not':\r\n    502     b = value.py__bool__()\r\n\r\n~/dev/jedi/jedi/inference/base_value.py in _ValueWrapperBase.__getattr__(self, name)\r\n    328 def __getattr__(self, name):\r\n    329     assert name != '_wrapped_value', 'Problem with _get_wrapped_value'\r\n--> 330     return getattr(self._wrapped_value, name)\r\n\r\nAttributeError: 'TreeInstance' object has no attribute 'negate'\r\n```\r\n\r\n(see https://gist.github.com/Carreau/11625cb404956bf16bbc075347b0843f for full stack)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1634", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1634/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1634/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1634/events", "html_url": "https://github.com/davidhalter/jedi/issues/1634", "id": 656644015, "node_id": "MDU6SXNzdWU2NTY2NDQwMTU=", "number": 1634, "title": "Compiling jedi with cython?", "user": {"login": "laurentS", "id": 1745184, "node_id": "MDQ6VXNlcjE3NDUxODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1745184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laurentS", "html_url": "https://github.com/laurentS", "followers_url": "https://api.github.com/users/laurentS/followers", "following_url": "https://api.github.com/users/laurentS/following{/other_user}", "gists_url": "https://api.github.com/users/laurentS/gists{/gist_id}", "starred_url": "https://api.github.com/users/laurentS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laurentS/subscriptions", "organizations_url": "https://api.github.com/users/laurentS/orgs", "repos_url": "https://api.github.com/users/laurentS/repos", "events_url": "https://api.github.com/users/laurentS/events{/privacy}", "received_events_url": "https://api.github.com/users/laurentS/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-14T14:11:31Z", "updated_at": "2020-07-16T22:03:06Z", "closed_at": "2020-07-16T10:55:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\nThis is more a question than a bug report. Like many others, I've been waiting for those precious (milli)seconds while jedi is parsing a big library to deliver its magic (and I really love the magic of it!). I've looked at a few other tickets here about the issue, including #1059 and I was wondering if anyone has ever tried to compile jedi with cython.\r\nI've not used cython for anything besides the demo tutorial, so I might be missing some key info, which is partly why I'm opening this ticket. But I get the impression that there is potential for some significant speedups.\r\n\r\nHas anyone ever tried it?\r\nAre there any obvious blocking points that would make it impossible, or not worth the effort?\r\n\r\nI was tempted to give it a try, but thought it would probably make sense to check here first.\r\n\r\nIn any case, thanks for the awesome tool!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1632", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1632/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1632/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1632/events", "html_url": "https://github.com/davidhalter/jedi/issues/1632", "id": 652303269, "node_id": "MDU6SXNzdWU2NTIzMDMyNjk=", "number": 1632, "title": "CompiledValue' object has no attribute 'string_names", "user": {"login": "danzvara", "id": 15230912, "node_id": "MDQ6VXNlcjE1MjMwOTEy", "avatar_url": "https://avatars3.githubusercontent.com/u/15230912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danzvara", "html_url": "https://github.com/danzvara", "followers_url": "https://api.github.com/users/danzvara/followers", "following_url": "https://api.github.com/users/danzvara/following{/other_user}", "gists_url": "https://api.github.com/users/danzvara/gists{/gist_id}", "starred_url": "https://api.github.com/users/danzvara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danzvara/subscriptions", "organizations_url": "https://api.github.com/users/danzvara/orgs", "repos_url": "https://api.github.com/users/danzvara/repos", "events_url": "https://api.github.com/users/danzvara/events{/privacy}", "received_events_url": "https://api.github.com/users/danzvara/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-07T13:01:03Z", "updated_at": "2020-07-17T09:34:04Z", "closed_at": "2020-07-17T09:34:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all! I encountered the following error when trying to get completions for Tensorflow==1.15 with Jedi==0.17.1. Any idea what could go wrong? I could do a PR that adds `string_names` to the `CompiledValue` object, but I suspect this might have a deeper cause. \r\n\r\nThanks!\r\n\r\nCode:\r\n```\r\nimport tensorflow as tf\r\n\r\ntf.\r\n```\r\nTraceback:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/python_jsonrpc_server-0.3.4-py3.7.egg/pyls_jsonrpc/endpoint.py\", line 113, in consume\r\n    self._handle_request(message['id'], message['method'], message.get('params'))\r\n  File \"/usr/local/lib/python3.7/site-packages/python_jsonrpc_server-0.3.4-py3.7.egg/pyls_jsonrpc/endpoint.py\", line 182, in _handle_request\r\n    handler_result = handler(params)\r\n  File \"/usr/local/lib/python3.7/site-packages/python_jsonrpc_server-0.3.4-py3.7.egg/pyls_jsonrpc/dispatchers.py\", line 23, in handler\r\n    return method(**(params or {}))\r\n  File \"/Users/daniel-mbp/python-language-server/pyls/python_ls.py\", line 345, in m_text_document__completion\r\n    return self.completions(textDocument['uri'], position)\r\n  File \"/Users/daniel-mbp/python-language-server/pyls/python_ls.py\", line 259, in completions\r\n    completions = self._hook('pyls_completions', doc_uri, position=position)\r\n  File \"/Users/daniel-mbp/python-language-server/pyls/python_ls.py\", line 175, in _hook\r\n    return hook_handlers(config=self.config, workspace=workspace, document=doc, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/pluggy-0.13.0-py3.7.egg/pluggy/hooks.py\", line 286, in __call__\r\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/pluggy-0.13.0-py3.7.egg/pluggy/manager.py\", line 92, in _hookexec\r\n    return self._inner_hookexec(hook, methods, kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/pluggy-0.13.0-py3.7.egg/pluggy/manager.py\", line 335, in traced_hookexec\r\n    return outcome.get_result()\r\n  File \"/usr/local/lib/python3.7/site-packages/pluggy-0.13.0-py3.7.egg/pluggy/callers.py\", line 80, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/usr/local/lib/python3.7/site-packages/pluggy-0.13.0-py3.7.egg/pluggy/callers.py\", line 52, in from_call\r\n    result = func()\r\n  File \"/usr/local/lib/python3.7/site-packages/pluggy-0.13.0-py3.7.egg/pluggy/manager.py\", line 333, in <lambda>\r\n    outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))\r\n  File \"/usr/local/lib/python3.7/site-packages/pluggy-0.13.0-py3.7.egg/pluggy/manager.py\", line 86, in <lambda>\r\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\n  File \"/usr/local/lib/python3.7/site-packages/pluggy-0.13.0-py3.7.egg/pluggy/callers.py\", line 208, in _multicall\r\n    return outcome.get_result()\r\n  File \"/usr/local/lib/python3.7/site-packages/pluggy-0.13.0-py3.7.egg/pluggy/callers.py\", line 80, in get_result\r\n    raise ex[1].with_traceback(ex[2])\r\n  File \"/usr/local/lib/python3.7/site-packages/pluggy-0.13.0-py3.7.egg/pluggy/callers.py\", line 187, in _multicall\r\n    res = hook_impl.function(*args)\r\n  File \"/Users/daniel-mbp/python-language-server/pyls/plugins/jedi_completion.py\", line 61, in pyls_completions\r\n    completions = document.jedi_script().complete(**code_position)\r\n  File \"/usr/local/lib/python3.7/site-packages/jedi/api/helpers.py\", line 487, in wrapper\r\n    return func(self, line, column, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/jedi/api/__init__.py\", line 275, in complete\r\n    return self._complete(line, column, **kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/jedi/api/__init__.py\", line 283, in _complete\r\n    return completion.complete()\r\n  File \"/usr/local/lib/python3.7/site-packages/jedi/api/completion.py\", line 172, in complete\r\n    cached_name, completion_names = self._complete_python(leaf)\r\n  File \"/usr/local/lib/python3.7/site-packages/jedi/api/completion.py\", line 283, in _complete_python\r\n    cached_name, n = self._complete_trailer(dot.get_previous_leaf())\r\n  File \"/usr/local/lib/python3.7/site-packages/jedi/api/completion.py\", line 393, in _complete_trailer\r\n    if len(v.string_names) == 1:\r\nAttributeError: 'CompiledValue' object has no attribute 'string_names'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1631", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1631/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1631/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1631/events", "html_url": "https://github.com/davidhalter/jedi/issues/1631", "id": 652038916, "node_id": "MDU6SXNzdWU2NTIwMzg5MTY=", "number": 1631, "title": "Completion suggestions fail for inherited dictionary objects", "user": {"login": "smithsp", "id": 782050, "node_id": "MDQ6VXNlcjc4MjA1MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/782050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smithsp", "html_url": "https://github.com/smithsp", "followers_url": "https://api.github.com/users/smithsp/followers", "following_url": "https://api.github.com/users/smithsp/following{/other_user}", "gists_url": "https://api.github.com/users/smithsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/smithsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smithsp/subscriptions", "organizations_url": "https://api.github.com/users/smithsp/orgs", "repos_url": "https://api.github.com/users/smithsp/repos", "events_url": "https://api.github.com/users/smithsp/events{/privacy}", "received_events_url": "https://api.github.com/users/smithsp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-07-07T06:24:56Z", "updated_at": "2020-07-15T06:55:01Z", "closed_at": "2020-07-14T22:55:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider:\r\n```python\r\nimport jedi\r\ns = '''a = dict()\r\n\r\na['b'] = 'help'\r\nprint(isinstance(a,dict))\r\n\r\na['\r\n'''\r\ninterp = jedi.Script(s)\r\nprint(interp.complete(6,3)[0].complete)\r\n```\r\nThis appropriately suggests `b'` as the completion.  But if the type of `a` is changed to an inherited class:\r\n```python\r\nimport jedi\r\ns = '''\r\nclass adict(dict):\r\n    pass\r\na = adict()\r\n\r\na['b'] = 'help'\r\nprint(isinstance(a,dict))\r\n\r\na['\r\n'''\r\ninterp = jedi.Script(s)\r\nprint(interp.complete(9,3)[0].complete)\r\n```\r\nThen I get the contents of the current directory for completion, instead of the keys of the dictionary `a`.  Am I doing something wrong, or is this a bug?  (Otherwise jedi is awesome - thanks.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1629", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1629/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1629/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1629/events", "html_url": "https://github.com/davidhalter/jedi/issues/1629", "id": 650858038, "node_id": "MDU6SXNzdWU2NTA4NTgwMzg=", "number": 1629, "title": "Jedi should include environment variables that start with PYTHON for subprocess", "user": {"login": "wingkinl", "id": 26253549, "node_id": "MDQ6VXNlcjI2MjUzNTQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/26253549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wingkinl", "html_url": "https://github.com/wingkinl", "followers_url": "https://api.github.com/users/wingkinl/followers", "following_url": "https://api.github.com/users/wingkinl/following{/other_user}", "gists_url": "https://api.github.com/users/wingkinl/gists{/gist_id}", "starred_url": "https://api.github.com/users/wingkinl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wingkinl/subscriptions", "organizations_url": "https://api.github.com/users/wingkinl/orgs", "repos_url": "https://api.github.com/users/wingkinl/repos", "events_url": "https://api.github.com/users/wingkinl/events{/privacy}", "received_events_url": "https://api.github.com/users/wingkinl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-04T09:14:14Z", "updated_at": "2020-07-17T09:28:52Z", "closed_at": "2020-07-17T09:28:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to [python's official document](https://docs.python.org/3/using/cmdline.html#environment-variables), there are some environment variables that can influence python's behavior.\r\n\r\nI have my custom path for python modules, so on Windows, I run `set PYTHONPATH=<my custom path>` before executing python. Since `_get_process` in jedi\\inference\\compiled\\subprocess\\__init__.py uses explicit environment variables `env` that's basically empty (see the code [here](https://github.com/davidhalter/jedi/blob/a3a9ae1a262178f38ae80bd9ee4cb351893fff6b/jedi/inference/compiled/subprocess/__init__.py#L165)), the subprocess does not inherit the PYTHONPATH.\r\n\r\nSo I suggest jedi include those PYTHON* environment variables to subprocess in order for this to work.\r\n\r\nRelated issue:\r\n#1540 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1628", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1628/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1628/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1628/events", "html_url": "https://github.com/davidhalter/jedi/issues/1628", "id": 650364078, "node_id": "MDU6SXNzdWU2NTAzNjQwNzg=", "number": 1628, "title": "Issue with Interpreter completions", "user": {"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-03T06:02:01Z", "updated_at": "2020-07-12T20:36:02Z", "closed_at": "2020-07-12T20:30:39Z", "author_association": "OWNER", "active_lock_reason": null, "body": "This doesn't work, but it should (see jupyter/notebook#2435):\r\n```\r\nimport numpy as np\r\nimport jedi\r\narr = np.array([1,2])\r\njedi.Interpreter('arr = np.array([1,2])\\narr.', [{'np':np, 'arr': arr}]).complete(2,4)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1627", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1627/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1627/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1627/events", "html_url": "https://github.com/davidhalter/jedi/issues/1627", "id": 649692194, "node_id": "MDU6SXNzdWU2NDk2OTIxOTQ=", "number": 1627, "title": "jedi latest version runtime error for Windows", "user": {"login": "jdhao", "id": 16662357, "node_id": "MDQ6VXNlcjE2NjYyMzU3", "avatar_url": "https://avatars2.githubusercontent.com/u/16662357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdhao", "html_url": "https://github.com/jdhao", "followers_url": "https://api.github.com/users/jdhao/followers", "following_url": "https://api.github.com/users/jdhao/following{/other_user}", "gists_url": "https://api.github.com/users/jdhao/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdhao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdhao/subscriptions", "organizations_url": "https://api.github.com/users/jdhao/orgs", "repos_url": "https://api.github.com/users/jdhao/repos", "events_url": "https://api.github.com/users/jdhao/events{/privacy}", "received_events_url": "https://api.github.com/users/jdhao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-07-02T07:08:53Z", "updated_at": "2020-07-18T11:27:16Z", "closed_at": "2020-07-18T11:27:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using deoplete-jedi which in turn depends on Jedi. It seems that the latest version of Jedi or master branch of Jedi will error out for Windows.\r\n\r\nHere is the MWE to reproduce this issue:\r\n\r\n```\r\nimport jedi\r\n\r\nsource1 = '''\r\nimport os\r\nos.\r\n'''\r\n\r\nscript1 = jedi.Script(source1, 3, len('os.'), 'example1.py')\r\nprint(script1.completions())\r\n```\r\n\r\nHere is the test summary for different combination of platform and jedi version:\r\n\r\n| platform | jedi version | error out? |\r\n|----------|--------------|------------|\r\n| Windows  | 0.16.0       | No         |\r\n| Windows  | 0.17.0       | Yes        |\r\n| Linux    | 0.16.0       | No         |\r\n| Linux    | 0.17.0       | No         |\r\n\r\nOn both Linux and Windows, Python is provided by Anaconda and the version is 3.6.5.\r\n\r\nHere is the traceback when error occurs:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"D:\\Anaconda\\lib\\site-packages\\jedi\\inference\\compiled\\subprocess\\__init__.py\", line 261, in _send\r\n    is_exception, traceback, result = pickle_load(self._get_process().stdout)\r\n  File \"D:\\Anaconda\\lib\\site-packages\\jedi\\_compatibility.py\", line 396, in pickle_load\r\n    return pickle.load(file, encoding='bytes')\r\nEOFError: Ran out of input\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"D:\\Anaconda\\lib\\site-packages\\jedi\\api\\environment.py\", line 75, in _get_subprocess\r\n    info = self._subprocess._send(None, _get_info)\r\n  File \"D:\\Anaconda\\lib\\site-packages\\jedi\\inference\\compiled\\subprocess\\__init__.py\", line 273, in _send\r\n    stderr,\r\njedi.api.exceptions.InternalError: The subprocess D:\\Anaconda\\python.exe has crashed (EOFError('Ran out of input',), stderr=).\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"test_jedi.py\", line 8, in <module>\r\n    script1 = jedi.Script(source1, 3, len('os.'), 'example1.py')\r\n  File \"D:\\Anaconda\\lib\\site-packages\\jedi\\api\\__init__.py\", line 185, in __init__\r\n    project, environment=environment, script_path=self.path\r\n  File \"D:\\Anaconda\\lib\\site-packages\\jedi\\inference\\__init__.py\", line 90, in __init__\r\n    self.compiled_subprocess = environment.get_inference_state_subprocess(self)\r\n  File \"D:\\Anaconda\\lib\\site-packages\\jedi\\api\\environment.py\", line 114, in get_inference_state_subprocess\r\n    return InferenceStateSubprocess(inference_state, self._get_subprocess())\r\n  File \"D:\\Anaconda\\lib\\site-packages\\jedi\\api\\environment.py\", line 80, in _get_subprocess\r\n    exc))\r\njedi.api.environment.InvalidPythonEnvironment: Could not get version information for 'D:\\\\Anaconda\\\\python.exe': InternalError(\"The subprocess D:\\\\Anaconda\\\\python.exe has crashed (EOFError('Ran out of input',), stderr=).\",)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1626", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1626/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1626/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1626/events", "html_url": "https://github.com/davidhalter/jedi/issues/1626", "id": 648956738, "node_id": "MDU6SXNzdWU2NDg5NTY3Mzg=", "number": 1626, "title": "Interpreter TAB-completions hide private members (starting with _) ?", "user": {"login": "bformet", "id": 9550478, "node_id": "MDQ6VXNlcjk1NTA0Nzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/9550478?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bformet", "html_url": "https://github.com/bformet", "followers_url": "https://api.github.com/users/bformet/followers", "following_url": "https://api.github.com/users/bformet/following{/other_user}", "gists_url": "https://api.github.com/users/bformet/gists{/gist_id}", "starred_url": "https://api.github.com/users/bformet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bformet/subscriptions", "organizations_url": "https://api.github.com/users/bformet/orgs", "repos_url": "https://api.github.com/users/bformet/repos", "events_url": "https://api.github.com/users/bformet/events{/privacy}", "received_events_url": "https://api.github.com/users/bformet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-01T12:51:18Z", "updated_at": "2020-07-01T21:01:50Z", "closed_at": "2020-07-01T15:16:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nWe are doing a python REPL based on ptpython.\r\nIs there a way to hide from the completions list everything considered \"private\" (starting with `_` or `__`) ?\r\n(unless the user types the first underscore)\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1625", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1625/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1625/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1625/events", "html_url": "https://github.com/davidhalter/jedi/issues/1625", "id": 648409849, "node_id": "MDU6SXNzdWU2NDg0MDk4NDk=", "number": 1625, "title": "0.17.1 seems to be completely broken", "user": {"login": "HarryR", "id": 303926, "node_id": "MDQ6VXNlcjMwMzkyNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/303926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HarryR", "html_url": "https://github.com/HarryR", "followers_url": "https://api.github.com/users/HarryR/followers", "following_url": "https://api.github.com/users/HarryR/following{/other_user}", "gists_url": "https://api.github.com/users/HarryR/gists{/gist_id}", "starred_url": "https://api.github.com/users/HarryR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HarryR/subscriptions", "organizations_url": "https://api.github.com/users/HarryR/orgs", "repos_url": "https://api.github.com/users/HarryR/repos", "events_url": "https://api.github.com/users/HarryR/events{/privacy}", "received_events_url": "https://api.github.com/users/HarryR/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-06-30T18:41:27Z", "updated_at": "2020-08-09T00:45:08Z", "closed_at": "2020-07-01T15:22:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "ptpython derps out when trying to auto-complete (e.g. whenever you type a key) with the same error message as below, this essentially breaks jedi completely by one of the main cool projects which uses it. This only happens with Jedi 0.17.1\r\n\r\nThis **does not happen with Jedi 0.17.0**\r\n\r\nWith 0.17.0, ptpython works fine with Python 3.6.9, upgrading to 0.17.1 breaks ptpython and most other things which use jedi by `import jedi`.\r\n\r\nThe ptpython exception origin is:\r\n\r\n```\r\nUnhandled exception in event loop:\r\n  File \"/usr/lib/python3.6/concurrent/futures/thread.py\", line 56, in run\r\n    result = self.fn(*self.args, **self.kwargs)\r\n  File \"/home/user/.local/lib/python3.6/site-packages/ptpython/python_input.py\", line 828, in run\r\n    document, self.get_locals(), self.get_globals()\r\n  File \"/home/user/.local/lib/python3.6/site-packages/ptpython/utils.py\", line 46, in get_jedi_script_from_document\r\n    import jedi  # We keep this import in-line, to improve start-up time.\r\n```\r\n\r\nThe exception is caused by something in Jedi... even though `traverse_parents` exists in the `jedi/common.py` file... maybe some recursive import loop?\r\n\r\n```\r\n$ python3\r\nPython 3.6.9 (default, Apr 18 2020, 01:56:04) \r\n[GCC 8.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import jedi\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/.local/lib/python3.6/site-packages/jedi/__init__.py\", line 32, in <module>\r\n    from jedi.api import Script, Interpreter, set_debug_function, \\\r\n  File \"/home/user/.local/lib/python3.6/site-packages/jedi/api/__init__.py\", line 24, in <module>\r\n    from jedi.api import classes\r\n  File \"/home/user/.local/lib/python3.6/site-packages/jedi/api/classes.py\", line 24, in <module>\r\n    from jedi.inference.utils import unite\r\n  File \"/home/user/.local/lib/python3.6/site-packages/jedi/inference/__init__.py\", line 70, in <module>\r\n    from jedi.inference import imports\r\n  File \"/home/user/.local/lib/python3.6/site-packages/jedi/inference/imports.py\", line 24, in <module>\r\n    from jedi.inference import sys_path\r\n  File \"/home/user/.local/lib/python3.6/site-packages/jedi/inference/sys_path.py\", line 8, in <module>\r\n    from jedi.common import traverse_parents\r\nImportError: cannot import name 'traverse_parents'\r\n>>> \r\n```\r\n\r\n--------\r\n\r\nExample proof that reverting back to Jedi 0.17.0 fixes it:\r\n\r\n```\r\n$ pip3 install --user jedi==0.17.0\r\nCollecting jedi==0.17.0\r\n  Using cached https://files.pythonhosted.org/packages/f3/3f/67f027e18c60a800875df1a0894a2436ce9053637fa39725766e937c0a71/jedi-0.17.0-py2.py3-none-any.whl\r\nCollecting parso>=0.7.0 (from jedi==0.17.0)\r\n  Using cached https://files.pythonhosted.org/packages/b5/61/998cce9e7476de000d031874df26a18f67cb73448164fc44a98f0c55920b/parso-0.7.0-py2.py3-none-any.whl\r\nInstalling collected packages: parso, jedi\r\nSuccessfully installed jedi-0.17.1 parso-0.7.0\r\n\r\n$ python3\r\nPython 3.6.9 (default, Apr 18 2020, 01:56:04) \r\n[GCC 8.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import jedi\r\n>>> \r\n\r\n$ pip3 install --user jedi==0.17.1\r\nCollecting jedi==0.17.1\r\n  Using cached https://files.pythonhosted.org/packages/07/83/7e711550fcb2722f1ca9c8564d5bb23f625ae67d99f4a360b428c0f3e932/jedi-0.17.1-py2.py3-none-any.whl\r\nCollecting parso<0.8.0,>=0.7.0 (from jedi==0.17.1)\r\n  Using cached https://files.pythonhosted.org/packages/b5/61/998cce9e7476de000d031874df26a18f67cb73448164fc44a98f0c55920b/parso-0.7.0-py2.py3-none-any.whl\r\nInstalling collected packages: parso, jedi\r\nSuccessfully installed jedi-0.17.1 parso-0.7.0\r\n\r\n$ python3\r\nPython 3.6.9 (default, Apr 18 2020, 01:56:04) \r\n[GCC 8.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import jedi\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/.local/lib/python3.6/site-packages/jedi/__init__.py\", line 32, in <module>\r\n    from jedi.api import Script, Interpreter, set_debug_function, \\\r\n  File \"/home/user/.local/lib/python3.6/site-packages/jedi/api/__init__.py\", line 24, in <module>\r\n    from jedi.api import classes\r\n  File \"/home/user/.local/lib/python3.6/site-packages/jedi/api/classes.py\", line 24, in <module>\r\n    from jedi.inference.utils import unite\r\n  File \"/home/user/.local/lib/python3.6/site-packages/jedi/inference/__init__.py\", line 70, in <module>\r\n    from jedi.inference import imports\r\n  File \"/home/user/.local/lib/python3.6/site-packages/jedi/inference/imports.py\", line 24, in <module>\r\n    from jedi.inference import sys_path\r\n  File \"/home/user/.local/lib/python3.6/site-packages/jedi/inference/sys_path.py\", line 8, in <module>\r\n    from jedi.common import traverse_parents\r\nImportError: cannot import name 'traverse_parents'\r\n>>> \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1624", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1624/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1624/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1624/events", "html_url": "https://github.com/davidhalter/jedi/issues/1624", "id": 646708721, "node_id": "MDU6SXNzdWU2NDY3MDg3MjE=", "number": 1624, "title": "Support completions on contextlib.contextmanager functions", "user": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1769857987, "node_id": "MDU6TGFiZWwxNzY5ODU3OTg3", "url": "https://api.github.com/repos/davidhalter/jedi/labels/help-wanted", "name": "help-wanted", "color": "d89217", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-06-27T16:07:11Z", "updated_at": "2020-07-17T13:57:42Z", "closed_at": "2020-07-17T13:57:42Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "For example, if you have a function like this:\r\n``` python\r\n@contextlib.contextmanager\r\ndef capture_stdout() -> Iterator[io.StringIO]:\r\n    yield io.StringIO()\r\n```\r\nIt would be great if when you used that you got completions on the context object:\r\n``` python\r\nwith capture_stdout() as buffer:\r\n    buffer.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1622", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1622/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1622/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1622/events", "html_url": "https://github.com/davidhalter/jedi/issues/1622", "id": 645446467, "node_id": "MDU6SXNzdWU2NDU0NDY0Njc=", "number": 1622, "title": "Supported way to \"extract\" project's root path from a `jedi.Project` class", "user": {"login": "bstaletic", "id": 7791699, "node_id": "MDQ6VXNlcjc3OTE2OTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7791699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstaletic", "html_url": "https://github.com/bstaletic", "followers_url": "https://api.github.com/users/bstaletic/followers", "following_url": "https://api.github.com/users/bstaletic/following{/other_user}", "gists_url": "https://api.github.com/users/bstaletic/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstaletic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstaletic/subscriptions", "organizations_url": "https://api.github.com/users/bstaletic/orgs", "repos_url": "https://api.github.com/users/bstaletic/repos", "events_url": "https://api.github.com/users/bstaletic/events{/privacy}", "received_events_url": "https://api.github.com/users/bstaletic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-06-25T10:22:53Z", "updated_at": "2020-06-27T05:15:56Z", "closed_at": "2020-06-27T00:18:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "YCM currently does the following:\r\n\r\n```python\r\n    project_directory = settings.get( 'project_directory' )\r\n    if not project_directory:\r\n      default_project = jedi.get_default_project( os.path.dirname( request_data[ 'filepath' ] ) )\r\n      project_directory = default_project._path\r\n    return jedi.Project( project_directory,\r\n                         sys_path = settings[ 'sys_path' ],\r\n                         environment_path = settings[ 'interpreter_path' ] )\r\n```\r\n\r\nIn other words, if the user did not specify what is the project root, we call `get_default_project( current_file )._path`. This is because we *always* want to pass `sys_path`, but only sometimes do we have something useful to pass for the `project_directory`. Since `_path` is supposed to be \"private\", what's the supported way of doing this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1621", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1621/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1621/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1621/events", "html_url": "https://github.com/davidhalter/jedi/issues/1621", "id": 644239981, "node_id": "MDU6SXNzdWU2NDQyMzk5ODE=", "number": 1621, "title": "Docstring not showing for function wrapped with decorator w/ Anaconda plugin in ST3", "user": {"login": "wtfzambo", "id": 47462792, "node_id": "MDQ6VXNlcjQ3NDYyNzky", "avatar_url": "https://avatars3.githubusercontent.com/u/47462792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wtfzambo", "html_url": "https://github.com/wtfzambo", "followers_url": "https://api.github.com/users/wtfzambo/followers", "following_url": "https://api.github.com/users/wtfzambo/following{/other_user}", "gists_url": "https://api.github.com/users/wtfzambo/gists{/gist_id}", "starred_url": "https://api.github.com/users/wtfzambo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wtfzambo/subscriptions", "organizations_url": "https://api.github.com/users/wtfzambo/orgs", "repos_url": "https://api.github.com/users/wtfzambo/repos", "events_url": "https://api.github.com/users/wtfzambo/events{/privacy}", "received_events_url": "https://api.github.com/users/wtfzambo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-06-24T00:54:19Z", "updated_at": "2020-06-27T00:18:39Z", "closed_at": "2020-06-27T00:18:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "As asked in #906 , I open a new issue.\r\n\r\nSo, I'm using Sublime Text 3 on Windows 10, with anaconda plugin installed and python 3.7\r\n\r\nI'm working with a package called \"streamlit\", which is the one not showing docstring in certain functions.\r\nSo, to reproduce.\r\n\r\n- create a folder `my_folder`\r\n- cd into that folder\r\n- `python -m venv .env`\r\n- `pip install streamlit`  it's a bit heavy, gonna take a while\r\n- create a ST3 project and inside the sublime-project file point the python interpreter to the one inside the new folder:\r\n```json\r\n{\r\n    \"settings\":\r\n       {\r\n            \"python_interpreter\": \"~/my_folder/.env/Scripts/python.exe\"\r\n       }\r\n}\r\n```\r\n- make a new python file, inside it write:\r\n```python\r\nimport streamlit as st\r\n\r\nst.write()  # this one should show docstring normally\r\nst.title()  # this one not\r\nst.map()  # neither this\r\nst.checkbox()  # nor this\r\n```\r\n\r\nAny help is much appreciated.\r\n\r\nPic related:\r\n\r\n![85416250-858f1c00-b56e-11ea-84fc-f4c32fb4d2d4](https://user-images.githubusercontent.com/47462792/85483830-e269f100-b5c5-11ea-9ad6-96090032f042.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1620", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1620/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1620/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1620/events", "html_url": "https://github.com/davidhalter/jedi/issues/1620", "id": 643346775, "node_id": "MDU6SXNzdWU2NDMzNDY3NzU=", "number": 1620, "title": "Completion of modules which don't exist in a virtual environment", "user": {"login": "ANtlord", "id": 2972483, "node_id": "MDQ6VXNlcjI5NzI0ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2972483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ANtlord", "html_url": "https://github.com/ANtlord", "followers_url": "https://api.github.com/users/ANtlord/followers", "following_url": "https://api.github.com/users/ANtlord/following{/other_user}", "gists_url": "https://api.github.com/users/ANtlord/gists{/gist_id}", "starred_url": "https://api.github.com/users/ANtlord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ANtlord/subscriptions", "organizations_url": "https://api.github.com/users/ANtlord/orgs", "repos_url": "https://api.github.com/users/ANtlord/repos", "events_url": "https://api.github.com/users/ANtlord/events{/privacy}", "received_events_url": "https://api.github.com/users/ANtlord/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 23395212, "node_id": "MDU6TGFiZWwyMzM5NTIxMg==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/discussion", "name": "discussion", "color": "444444", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-22T20:39:40Z", "updated_at": "2020-06-23T23:08:31Z", "closed_at": "2020-06-23T23:08:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello!\r\n\r\nI've noticed that jedi provides completion for modules which don't exist in a virtual environment. Is it expected behaviour? I have `requests` library but it's not included in a virtual environment but Jedi completes it still.\r\n\r\n```sh\r\n(.venv) \u279c  atest python\r\nPython 3.8.3 (default, May 15 2020, 00:00:00)\r\n[GCC 10.1.1 20200507 (Red Hat 10.1.1-1)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import requests\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nModuleNotFoundError: No module named 'requests'\r\n>>> import sys\r\n>>> sys.path\r\n['', '/mnt/home/wantlord/develop/atest/.venv/lib64/python38.zip', '/mnt/home/wantlord/develop/atest/.venv/lib64/python3.8', '/mnt/home/wantlord/develop/atest/.venv/lib64/python3.8/lib-dynload', '/usr/lib64/python3.8', '/usr/lib/python3.8', '/mnt/home/wantlord/develop/atest/.venv/lib/python3.8/site-packages']\r\n>>> import jedi\r\n>>> jedi.Script('import requests; requests.').complete()[:5]\r\n[<Completion: adapters>, <Completion: api>, <Completion: auth>, <Completion: codes>, <Completion: compat>]\r\n>>>\r\n(.venv) \u279c  atest file /usr/lib/python3.8/site-packages/requests\r\n/usr/lib/python3.8/site-packages/requests: directory\r\n(.venv) \u279c  atest pip freeze\r\njedi==0.17.1\r\nparso==0.7.0\r\n```\r\nIt shows that the virtual environment has Jedi and Parso only. A python interactive console can't import `requests` but Jedi sees it regardless it stays outside of the virtual environment. The dump shows `sys.path` so I suspect jedi checks the paths one by one when it is looking for symbols. In my opinion it's correct behaviour but the `sys.path` consists of system paths so it confuses me.\r\n\r\nDo I have something wrong with my `virtualenv` or is it an issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1617", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1617/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1617/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1617/events", "html_url": "https://github.com/davidhalter/jedi/issues/1617", "id": 641684587, "node_id": "MDU6SXNzdWU2NDE2ODQ1ODc=", "number": 1617, "title": "Jedi has wrong sys.path when target environment has non-standard library location", "user": {"login": "mrclary", "id": 9618975, "node_id": "MDQ6VXNlcjk2MTg5NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/9618975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrclary", "html_url": "https://github.com/mrclary", "followers_url": "https://api.github.com/users/mrclary/followers", "following_url": "https://api.github.com/users/mrclary/following{/other_user}", "gists_url": "https://api.github.com/users/mrclary/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrclary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrclary/subscriptions", "organizations_url": "https://api.github.com/users/mrclary/orgs", "repos_url": "https://api.github.com/users/mrclary/repos", "events_url": "https://api.github.com/users/mrclary/events{/privacy}", "received_events_url": "https://api.github.com/users/mrclary/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-19T03:51:14Z", "updated_at": "2020-06-21T22:12:37Z", "closed_at": "2020-06-21T22:12:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "@davidhalter,\r\nOkay, when I submitted #1540, the problem arose when the host environment was a pyenv environment and the target environment was a conda environment. The solution was that the target environment should not inherit system environment variables from the host environment, i.e. the `CompiledSubprocess` should spawn a clean environment. Well, this works as it should when the target environment python libraries are in a standard relative location, i.e. `../lib` relative to the the executable. Unfortunately, this does not work for target environments where the python libraries are not in a standard location, such as for python embedded in MacOS applications (see [Spyder Mac App](https://github.com/spyder-ide/mac-application))\r\n\r\nPython provides a mechanism for handling this, namely by setting the `PYTHONHOME` environment variable to the base directory of the libraries. This, along with other potential `PYTHON...` environment variables, were causing the problem outlined in #1540. Essentially, the wrong python environment variables were being inherited by the subprocess and mucking things up. In the absence of `PYTHONHOME`, it will find the libraries in the standard location.\r\n\r\nSo, I still think that starting a python subprocess with a clean environment is the correct paradigm, I now think that the solution provided for #1540 in #1546 is incomplete and should include a mechanism for passing explicit environment variables to the subprocess. `Popen` already does this, of course, with the `env` keyword arg. I propose modifying `CompiledSubprocess` to accept an `env` keyword argument that will be passed to the subprocess. The default should be an empty dictionary, but the user has the option to pass in envrionment variables explicitly, if needed.\r\n\r\nWhat are your thougthts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1616", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1616/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1616/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1616/events", "html_url": "https://github.com/davidhalter/jedi/issues/1616", "id": 641291528, "node_id": "MDU6SXNzdWU2NDEyOTE1Mjg=", "number": 1616, "title": "Playing nicely with docker", "user": {"login": "talwrii", "id": 2955454, "node_id": "MDQ6VXNlcjI5NTU0NTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2955454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/talwrii", "html_url": "https://github.com/talwrii", "followers_url": "https://api.github.com/users/talwrii/followers", "following_url": "https://api.github.com/users/talwrii/following{/other_user}", "gists_url": "https://api.github.com/users/talwrii/gists{/gist_id}", "starred_url": "https://api.github.com/users/talwrii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/talwrii/subscriptions", "organizations_url": "https://api.github.com/users/talwrii/orgs", "repos_url": "https://api.github.com/users/talwrii/repos", "events_url": "https://api.github.com/users/talwrii/events{/privacy}", "received_events_url": "https://api.github.com/users/talwrii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-18T15:12:24Z", "updated_at": "2020-06-19T18:29:52Z", "closed_at": "2020-06-19T09:59:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Docker is really trendy, so trendy that I'm made (willing comply) with using it for development at work.  What this ends up looking like is that I bind mount a project into docker and run - docker provides the dependencies, the bind mount provides the code. I don't know how common this is is for develoment.\r\n\r\nI've made docker play nicely with pylint in emacs (I have a per docker image pylint in the container that I use for syntax checking), but I'm wondering whether I could make jedi run in the same environment as the docker component. Everything works when jumping around \"within my project\" but issues start occuring when I want to jump into external libraries.\r\n\r\nAt the moment I deal with this by having identical versions of all the libraries I use within my docker containers on my filesystem, but in practice this is a horrible mistake in understanding caused by a version mismatch waiting to happen and at some point I'm going to start having different versions of libraries in different images. \r\n\r\nIs this something you would be keen on supporting?\r\n\r\nAn issue that would affect any code that supports this would be that when you jump to an external dependency it doesn't exist on the filesystem but inside a docker container. I think the way that pycharm deals with this is copying out the code from the container and letting you jump to it. Ideally you would also be able to jump around within the code that you have copied out so you would need to keep track of the fact that you are looking at code that comes from within a docker container and work out which container you came from.  I guess the editor could handle this, my understanding is that the way jedi works is that you send it a complete file to look at rather than a filename (presumably so you can work without saving) - so this would work well.\r\n\r\nI guess what you could do is have jedi running completely within the docker container, and then have the editor map filenames.\r\n\r\nOpinions and pointers to where I might change code?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1615", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1615/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1615/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1615/events", "html_url": "https://github.com/davidhalter/jedi/issues/1615", "id": 639728812, "node_id": "MDU6SXNzdWU2Mzk3Mjg4MTI=", "number": 1615, "title": "Non-graceful handling of cache permission errors", "user": {"login": "nitrocalcite", "id": 13782231, "node_id": "MDQ6VXNlcjEzNzgyMjMx", "avatar_url": "https://avatars1.githubusercontent.com/u/13782231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nitrocalcite", "html_url": "https://github.com/nitrocalcite", "followers_url": "https://api.github.com/users/nitrocalcite/followers", "following_url": "https://api.github.com/users/nitrocalcite/following{/other_user}", "gists_url": "https://api.github.com/users/nitrocalcite/gists{/gist_id}", "starred_url": "https://api.github.com/users/nitrocalcite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nitrocalcite/subscriptions", "organizations_url": "https://api.github.com/users/nitrocalcite/orgs", "repos_url": "https://api.github.com/users/nitrocalcite/repos", "events_url": "https://api.github.com/users/nitrocalcite/events{/privacy}", "received_events_url": "https://api.github.com/users/nitrocalcite/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-16T14:47:05Z", "updated_at": "2020-06-19T18:28:00Z", "closed_at": "2020-06-19T18:28:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "For legacy reasons, sometimes I need to run `ipython` with `sudo`.  Later, I run `ipython` without `sudo`.  Trying to autocomplete will then occasionally cause this rather verbose stack trace (below) to come out of `jedi`.  \r\n\r\nIt looks like there's a `PermissionError` trying to open root-owned pickles in `~/.cache/jedi/`, which isn't caught anywhere.  Purging the cache by deleting the `~/.cache/jedi` seems to fix the problem, although it's a bit hard to tell (because I don't know what kinds of operations will trigger a call to read cached pickles, so I just have to try autocompleting until it fails).\r\n\r\nAnyway, this isn't immediately obvious from the stack trace, because it's huge, and the underlying `PermissionError` is not the last exception (there's a chain of 4).  Any chance that this could be handled more gracefully, perhaps catching the exception, ignoring the pickle, and raising a warning instead?\r\n\r\nI'm running `jedi 0.17.0` on Ubuntu 16.04, if that helps.  Thanks!\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/cache.py\", line 109, in wrapper\r\n    return dct[key]\r\nKeyError: ((), frozenset())\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/cache.py\", line 109, in wrapper\r\n    return dct[key]\r\nKeyError: ((), frozenset())\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/IPython/terminal/ptutils.py\", line 113, in get_completions\r\n    yield from self._get_completions(body, offset, cursor_position, self.ipy_completer)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/IPython/terminal/ptutils.py\", line 126, in _get_completions\r\n    for c in completions:\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/IPython/core/completer.py\", line 438, in _deduplicate_completions\r\n    completions = list(completions)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/IPython/core/completer.py\", line 1818, in completions\r\n    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/IPython/core/completer.py\", line 1875, in _completions\r\n    signature = _make_signature(jm)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/IPython/core/completer.py\", line 991, in _make_signature\r\n    return '(%s)'% ', '.join([f for f in (_formatparamchildren(p) for p in completion.params) if f])\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/cache.py\", line 111, in wrapper\r\n    result = method(self, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/api/classes.py\", line 479, in params\r\n    for signature in self._get_signatures():\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/api/classes.py\", line 561, in _get_signatures\r\n    return [sig for name in names for sig in name.infer().get_signatures()]\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/api/classes.py\", line 561, in <listcomp>\r\n    return [sig for name in names for sig in name.infer().get_signatures()]\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/cache.py\", line 111, in wrapper\r\n    result = method(self, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/compiled/mixed.py\", line 124, in infer\r\n    tree_values = tree_value.py__getattribute__(self.string_name)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 90, in py__getattribute__\r\n    values = self.py__getattribute__alternatives(n)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 239, in py__getattribute__alternatives\r\n    return self.execute_function_slots(names, name)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 130, in execute_function_slots\r\n    for name in names\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/common/value.py\", line 69, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 130, in <genexpr>\r\n    for name in names\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 390, in execute_with_values\r\n    return ValueSet.from_sets(c.execute_with_values(*args, **kwargs) for c in self._set)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/common/value.py\", line 69, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 390, in <genexpr>\r\n    return ValueSet.from_sets(c.execute_with_values(*args, **kwargs) for c in self._set)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 47, in execute_with_values\r\n    return self.inference_state.execute(self, arguments)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper\r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 123, in wrapper\r\n    return call()\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 107, in call\r\n    return callback(value, arguments=arguments)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 25, in wrapper\r\n    return callback(value, arguments)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 119, in execute\r\n    value_set = value.py__call__(arguments=arguments)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 480, in py__call__\r\n    return function_execution.infer()\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 360, in infer\r\n    return self.get_return_values()\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/recursion.py\", line 87, in wrapper\r\n    result = func(self, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 234, in get_return_values\r\n    check = flow_analysis.reachability_check(self, funcdef, r)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 83, in reachability_check\r\n    return _break_check(context, value_scope, first_flow_scope, node)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 98, in _break_check\r\n    reachable = _check_if(context, flow_node)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 118, in _check_if\r\n    types = context.infer_node(node)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 137, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 150, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 155, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 63, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 237, in _infer_node\r\n    return infer_or_test(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 467, in infer_or_test\r\n    context.infer_node(right))\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 137, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 150, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 155, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 63, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 189, in _infer_node\r\n    value_set = infer_trailer(context, value_set, trailer)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 256, in infer_trailer\r\n    name_or_str=node\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 396, in py__getattribute__\r\n    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/common/value.py\", line 69, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 396, in <genexpr>\r\n    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 87, in py__getattribute__\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/common/value.py\", line 69, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 87, in <genexpr>\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/names.py\", line 282, in infer\r\n    self.tree_name\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper\r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 842, in wrapper\r\n    return func(inference_state, context, tree_name)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 709, in tree_name_to_values\r\n    types = infer_expr_stmt(context, node, tree_name)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 63, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 365, in infer_expr_stmt\r\n    return _infer_expr_stmt(context, stmt, seek_name)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 398, in _infer_expr_stmt\r\n    value_set = context.infer_node(rhs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 137, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 150, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 155, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 63, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 189, in _infer_node\r\n    value_set = infer_trailer(context, value_set, trailer)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 261, in infer_trailer\r\n    return atom_values.execute(args)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 387, in execute\r\n    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/common/value.py\", line 69, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 387, in <genexpr>\r\n    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper\r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 132, in wrapper\r\n    return call()\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 107, in call\r\n    return callback(value, arguments=arguments)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 25, in wrapper\r\n    return callback(value, arguments)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 119, in execute\r\n    value_set = value.py__call__(arguments=arguments)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 142, in py__call__\r\n    if self.is_typeddict():\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 265, in is_typeddict\r\n    if method():\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 254, in is_typeddict\r\n    for cls in lazy_cls.infer():\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer\r\n    return self.context.infer_node(self.data)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 137, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 150, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 155, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 63, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 165, in _infer_node\r\n    return infer_atom(context, element)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 290, in infer_atom\r\n    return context.py__getattribute__(atom, position=position)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/common/value.py\", line 69, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/names.py\", line 282, in infer\r\n    self.tree_name\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper\r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 842, in wrapper\r\n    return func(inference_state, context, tree_name)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 715, in tree_name_to_values\r\n    types = imports.infer_import(context, tree_name)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/imports.py\", line 62, in infer_import\r\n    analysis_errors=False\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 396, in py__getattribute__\r\n    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/common/value.py\", line 69, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 396, in <genexpr>\r\n    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 87, in py__getattribute__\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/common/value.py\", line 69, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 87, in <genexpr>\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/names.py\", line 282, in infer\r\n    self.tree_name\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper\r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 842, in wrapper\r\n    return func(inference_state, context, tree_name)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 715, in tree_name_to_values\r\n    types = imports.infer_import(context, tree_name)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/imports.py\", line 55, in infer_import\r\n    _prepare_infer_import(module_context, tree_name)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/imports.py\", line 118, in _prepare_infer_import\r\n    return from_import_name, tuple(import_path), import_node.level, importer.follow()\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/imports.py\", line 261, in follow\r\n    self._inference_state, self.import_path, sys_path, self._module_context\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/imports.py\", line 347, in import_module_by_names\r\n    ) for parent_module_value in value_set\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/imports.py\", line 347, in <listcomp>\r\n    ) for parent_module_value in value_set\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper\r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper\r\n    return callback(inference_state, import_names, module_context, *args, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 113, in wrapper\r\n    for p in parent_module_values\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/common/value.py\", line 69, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 113, in <genexpr>\r\n    for p in parent_module_values\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/imports.py\", line 420, in import_module\r\n    is_package=is_pkg,\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/imports.py\", line 436, in _load_python_module\r\n    cache_path=settings.cache_directory,\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse\r\n    return self.parse_and_get_code(*args, **kwargs)[0]\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 194, in parse_and_get_code\r\n    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/parso/grammar.py\", line 79, in parse\r\n    return self._parse(code=code, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/parso/grammar.py\", line 154, in _parse\r\n    cache_path=cache_path)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/parso/cache.py\", line 174, in save_module\r\n    _save_to_file_system(hashed_grammar, path, item, cache_path=cache_path)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/parso/cache.py\", line 178, in _save_to_file_system\r\n    with open(_get_hashed_path(hashed_grammar, path, cache_path=cache_path), 'wb') as f:\r\nPermissionError: [Errno 13] Permission denied: '/home/empad/.cache/jedi/CPython-37-33/593d51111df2a7984c5d14ec09b1fb4e1c5fa86889ca077d5efe8caf989e2ebc-6487045d9c44b10d4917e4901fe3a8778f99fc867eb78979b28be5589cd71f13.pkl'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./ipython\", line 8, in <module>\r\n    sys.exit(start_ipython())\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/IPython/__init__.py\", line 126, in start_ipython\r\n    return launch_new_instance(argv=argv, **kwargs)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/traitlets/config/application.py\", line 664, in launch_instance\r\n    app.start()\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/IPython/terminal/ipapp.py\", line 356, in start\r\n    self.shell.mainloop()\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/IPython/terminal/interactiveshell.py\", line 563, in mainloop\r\n    self.interact()\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/IPython/terminal/interactiveshell.py\", line 546, in interact\r\n    code = self.prompt_for_code()\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/IPython/terminal/interactiveshell.py\", line 474, in prompt_for_code\r\n    **self._extra_prompt_options())\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/prompt_toolkit/shortcuts/prompt.py\", line 994, in prompt\r\n    return self.app.run(set_exception_handler=set_exception_handler)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/prompt_toolkit/application/application.py\", line 812, in run\r\n    self.run_async(pre_run=pre_run, set_exception_handler=set_exception_handler)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/asyncio/base_events.py\", line 587, in run_until_complete\r\n    return future.result()\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/prompt_toolkit/application/application.py\", line 778, in run_async\r\n    return await _run_async2()\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/prompt_toolkit/application/application.py\", line 766, in _run_async2\r\n    await self.cancel_and_wait_for_background_tasks()\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/prompt_toolkit/application/application.py\", line 867, in cancel_and_wait_for_background_tasks\r\n    await task\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/prompt_toolkit/buffer.py\", line 1854, in new_coroutine\r\n    await coroutine(*a, **kw)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/prompt_toolkit/buffer.py\", line 1684, in async_completer\r\n    document, complete_event\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/prompt_toolkit/completion/base.py\", line 270, in get_completions_async\r\n    document, complete_event\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/prompt_toolkit/completion/base.py\", line 196, in get_completions_async\r\n    for item in self.get_completions(document, complete_event):\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/site-packages/IPython/terminal/ptutils.py\", line 116, in get_completions\r\n    print_tb(e)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/traceback.py\", line 53, in print_tb\r\n    print_list(extract_tb(tb, limit=limit), file=file)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/traceback.py\", line 72, in extract_tb\r\n    return StackSummary.extract(walk_tb(tb), limit=limit)\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/traceback.py\", line 344, in extract\r\n    for f, lineno in frame_gen:\r\n  File \"/home/empad/miniconda3/envs/PyX/lib/python3.7/traceback.py\", line 309, in walk_tb\r\n    yield tb.tb_frame, tb.tb_lineno\r\nAttributeError: 'PermissionError' object has no attribute 'tb_frame'\r\n\r\nIf you suspect this is an IPython 7.15.0 bug, please report it at:\r\n    https://github.com/ipython/ipython/issues\r\nor send an email to the mailing list at ipython-dev@python.org\r\n\r\nYou can print a more detailed traceback right now with \"%tb\", or use \"%debug\"\r\nto interactively debug it.\r\n\r\nExtra-detailed tracebacks for bug-reporting purposes can be enabled via:\r\n    %config Application.verbose_crash=True\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1611", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1611/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1611/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1611/events", "html_url": "https://github.com/davidhalter/jedi/issues/1611", "id": 633482182, "node_id": "MDU6SXNzdWU2MzM0ODIxODI=", "number": 1611, "title": "`Script.extract_variable` doesn't behave as documented", "user": {"login": "pappasam", "id": 3723671, "node_id": "MDQ6VXNlcjM3MjM2NzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3723671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pappasam", "html_url": "https://github.com/pappasam", "followers_url": "https://api.github.com/users/pappasam/followers", "following_url": "https://api.github.com/users/pappasam/following{/other_user}", "gists_url": "https://api.github.com/users/pappasam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pappasam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pappasam/subscriptions", "organizations_url": "https://api.github.com/users/pappasam/orgs", "repos_url": "https://api.github.com/users/pappasam/repos", "events_url": "https://api.github.com/users/pappasam/events{/privacy}", "received_events_url": "https://api.github.com/users/pappasam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-07T14:55:05Z", "updated_at": "2020-06-12T23:36:17Z", "closed_at": "2020-06-12T23:36:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Jedi: 0.17.0\r\nPython: 3.8.2\r\n\r\nAccording to its docstring in `0.17.0`, `Script.extract_variable` should do the following:\r\n\r\n```\r\n        For example if you have the cursor on ``foo`` and provide a\r\n        ``new_name`` called ``bar``::\r\n\r\n            foo = 3.1\r\n            x = int(foo + 1)\r\n\r\n        the code above will become::\r\n\r\n            foo = 3.1\r\n            bar = foo + 1\r\n            x = int(bar)\r\n```\r\n\r\nBased on my implementation / tests, behavior does not match the above docstring. Example:\r\n\r\n```python\r\n# test.py\r\nimport jedi\r\n\r\nscript = \"\"\"foo = 3.1\r\nx = int(foo + 1)\r\n\"\"\"\r\n\r\nscript = jedi.Script(code=script, path=\"/tmp/hello.py\")\r\n\r\nrefactor = script.extract_variable(line=2, column=8, new_name=\"bar\")\r\nprint(refactor.get_diff())\r\n```\r\n\r\nThis prints:\r\n\r\n```console\r\n$ python test.py\r\n--- hello.py\r\n+++ hello.py\r\n@@ -1,3 +1,4 @@\r\n foo = 3.1\r\n-x = int(foo + 1)\r\n+bar = int(foo + 1)\r\n+x = bar\r\n```\r\n\r\nNotice how to final line is not `x = int(bar)`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1608", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1608/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1608/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1608/events", "html_url": "https://github.com/davidhalter/jedi/issues/1608", "id": 629158098, "node_id": "MDU6SXNzdWU2MjkxNTgwOTg=", "number": 1608, "title": "Python 3.9 test failures", "user": {"login": "mgorny", "id": 110765, "node_id": "MDQ6VXNlcjExMDc2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/110765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgorny", "html_url": "https://github.com/mgorny", "followers_url": "https://api.github.com/users/mgorny/followers", "following_url": "https://api.github.com/users/mgorny/following{/other_user}", "gists_url": "https://api.github.com/users/mgorny/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgorny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgorny/subscriptions", "organizations_url": "https://api.github.com/users/mgorny/orgs", "repos_url": "https://api.github.com/users/mgorny/repos", "events_url": "https://api.github.com/users/mgorny/events{/privacy}", "received_events_url": "https://api.github.com/users/mgorny/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-06-02T12:20:09Z", "updated_at": "2020-06-10T07:54:41Z", "closed_at": "2020-06-10T07:54:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When running the test suite on Python 3.9.0b1, the following tests fail:\r\n\r\n```python\r\n==================================================================== FAILURES =====================================================================\r\n__________________________________________________________ TestSetupReadline.test_import __________________________________________________________\r\n\r\nself = <test.test_utils.TestSetupReadline testMethod=test_import>\r\n\r\n    def test_import(self):\r\n        s = 'from os.path import a'\r\n        assert set(self.complete(s)) == {s + 'ltsep', s + 'bspath'}\r\n        assert self.complete('import keyword') == ['import keyword']\r\n    \r\n        import os\r\n        s = 'from os import '\r\n        goal = {s + el for el in dir(os)}\r\n        # There are minor differences, e.g. the dir doesn't include deleted\r\n        # items as well as items that are not only available on linux.\r\n        difference = set(self.complete(s)).symmetric_difference(goal)\r\n        difference = {\r\n            x for x in difference\r\n            if all(not x.startswith('from os import ' + s)\r\n                   for s in ['_', 'O_', 'EX_', 'MFD_', 'SF_', 'ST_'])\r\n        }\r\n        # There are quite a few differences, because both Windows and Linux\r\n        # (posix and nt) librariesare included.\r\n>       assert len(difference) < 22\r\nE       AssertionError: assert 26 < 22\r\nE        +  where 26 = len({'from os import CLD_KILLED', 'from os import CLD_STOPPED', 'from os import POSIX_SPAWN_CLOSE', 'from os import POSIX_SPAWN_DUP2', 'from os import POSIX_SPAWN_OPEN', 'from os import P_DETACH', ...})\r\n\r\ntest/test_utils.py:87: AssertionError\r\n_____________________________________________________________ test_infer_on_generator _____________________________________________________________\r\n\r\nScript = functools.partial(<class 'jedi.api.Script'>, environment=<Environment: 3.9.0 in /tmp/jedi/.tox/py39>)\r\n\r\n    def test_infer_on_generator(Script):\r\n        def_, = Script('def x(): yield 1\\ny=x()\\ny').infer()\r\n>       assert def_.name == 'Generator'\r\nE       AssertionError: assert '_SpecialGenericAlias' == 'Generator'\r\nE         - _SpecialGenericAlias\r\nE         + Generator\r\n\r\ntest/test_api/test_api.py:139: AssertionError\r\n========================================= 2 failed, 3570 passed, 46 skipped, 5 xfailed in 114.37 seconds ==========================================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1607", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1607/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1607/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1607/events", "html_url": "https://github.com/davidhalter/jedi/issues/1607", "id": 628356581, "node_id": "MDU6SXNzdWU2MjgzNTY1ODE=", "number": 1607, "title": "No attribute completions for instance of a decorated class", "user": {"login": "eugenhu", "id": 16740189, "node_id": "MDQ6VXNlcjE2NzQwMTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/16740189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eugenhu", "html_url": "https://github.com/eugenhu", "followers_url": "https://api.github.com/users/eugenhu/followers", "following_url": "https://api.github.com/users/eugenhu/following{/other_user}", "gists_url": "https://api.github.com/users/eugenhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/eugenhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eugenhu/subscriptions", "organizations_url": "https://api.github.com/users/eugenhu/orgs", "repos_url": "https://api.github.com/users/eugenhu/repos", "events_url": "https://api.github.com/users/eugenhu/events{/privacy}", "received_events_url": "https://api.github.com/users/eugenhu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-06-01T11:13:34Z", "updated_at": "2020-06-14T16:02:16Z", "closed_at": "2020-06-14T16:02:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run the following,\r\n```python\r\nimport jedi\r\n\r\ncode = \"\"\"from typing import TypeVar, Type\r\n\r\nT = TypeVar('T', Type)\r\n\r\ndef my_decorator(x: T) -> T:\r\n    return x\r\n\r\n@my_decorator\r\nclass MyClass:\r\n    my_attribute = 123\r\n\r\ndef my_function(x: MyClass) -> int:\r\n    return x.\"\"\"\r\n\r\nscript = jedi.Script(code)\r\ncompletion = script.complete(13, 13)\r\n\r\nprint(completion)\r\n```\r\n(trying to find completions after `return x.`), I get\r\n```\r\n[]\r\n```\r\nwhereas I would expect jedi to suggest `my_attribute`, and it seems strange that there are no completions at all.\r\n\r\nIf I change `T = TypeVar('T', Type)` to just `T = TypeVar('T')`, then the output looks about right\r\n```\r\n[<Completion: my_attribute>, <Completion: __annotations__>, <Completion: __class__>, <Completion: __delattr__>, <Completion: __dict__>, <Completion: __dir__>, <Completion: __doc__>, <Completion: __eq__>, <Completion: __format__>, <Completion: __getattribute__>, <Completion: __hash__>, <Completion: __init__>, <Completion: __init_subclass__>, <Completion: __module__>, <Completion: __ne__>, <Completion: __new__>, <Completion: __reduce__>, <Completion: __reduce_ex__>, <Completion: __repr__>, <Completion: __setattr__>, <Completion: __sizeof__>, <Completion: __slots__>, <Completion: __str__>]\r\n```\r\nHowever `T = TypeVar('T', bound=Type)` also does not work.\r\n\r\nI am using Python 3.8.2 and I've tried this both on Jedi v0.17.0 and the current latest master.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1606", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1606/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1606/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1606/events", "html_url": "https://github.com/davidhalter/jedi/issues/1606", "id": 628192192, "node_id": "MDU6SXNzdWU2MjgxOTIxOTI=", "number": 1606, "title": "Error when trying to complete attributes for an instance of a class with decorated __init__", "user": {"login": "eugenhu", "id": 16740189, "node_id": "MDQ6VXNlcjE2NzQwMTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/16740189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eugenhu", "html_url": "https://github.com/eugenhu", "followers_url": "https://api.github.com/users/eugenhu/followers", "following_url": "https://api.github.com/users/eugenhu/following{/other_user}", "gists_url": "https://api.github.com/users/eugenhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/eugenhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eugenhu/subscriptions", "organizations_url": "https://api.github.com/users/eugenhu/orgs", "repos_url": "https://api.github.com/users/eugenhu/repos", "events_url": "https://api.github.com/users/eugenhu/events{/privacy}", "received_events_url": "https://api.github.com/users/eugenhu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-01T06:37:17Z", "updated_at": "2020-06-01T11:26:45Z", "closed_at": "2020-06-01T11:26:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run\r\n```python\r\nimport jedi\r\n\r\ncode = \"\"\"from typing import TypeVar\r\n\r\nT = TypeVar('T')\r\n\r\ndef my_decorator(x: T) -> T:\r\n    return x\r\n\r\nclass MyClass:\r\n    @my_decorator\r\n    def __init__(self) -> None:\r\n        self.my_attribute = 123\r\n\r\ndef my_function(x: MyClass) -> int:\r\n    return x.\"\"\"\r\n\r\nscript = jedi.Script(code)\r\ncompletions = script.complete(14, 13)\r\n\r\nprint(completions)\r\n```\r\nI get\r\n```\r\nAttributeError: 'Class' object has no attribute 'get_params'\r\n```\r\n\r\nRunning the same code again but with the line with `@my_decorator` commented out works fine and the program prints\r\n```\r\n[<Completion: my_attribute>, <Completion: __annotations__>, <Completion: __class__>, <Completion: __delattr__>, <Completion: __dict__>, <Completion: __dir__>, <Completion: __doc__>, <Completion: __eq__>, <Completion: __format__>, <Completion: __getattribute__>, <Completion: __hash__>, <Completion: __init__>, <Completion: __init_subclass__>, <Completion: __module__>, <Completion: __ne__>, <Completion: __new__>, <Completion: __reduce__>, <Completion: __reduce_ex__>, <Completion: __repr__>, <Completion: __setattr__>, <Completion: __sizeof__>, <Completion: __slots__>, <Completion: __str__>]\r\n```\r\n\r\nI am using Python 3.8.2 and Jedi 0.17.0.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1604", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1604/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1604/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1604/events", "html_url": "https://github.com/davidhalter/jedi/issues/1604", "id": 627907618, "node_id": "MDU6SXNzdWU2Mjc5MDc2MTg=", "number": 1604, "title": "\"# -*- coding: future_fstrings -*-\" causes navigating forever", "user": {"login": "friendship1", "id": 23720749, "node_id": "MDQ6VXNlcjIzNzIwNzQ5", "avatar_url": "https://avatars0.githubusercontent.com/u/23720749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/friendship1", "html_url": "https://github.com/friendship1", "followers_url": "https://api.github.com/users/friendship1/followers", "following_url": "https://api.github.com/users/friendship1/following{/other_user}", "gists_url": "https://api.github.com/users/friendship1/gists{/gist_id}", "starred_url": "https://api.github.com/users/friendship1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/friendship1/subscriptions", "organizations_url": "https://api.github.com/users/friendship1/orgs", "repos_url": "https://api.github.com/users/friendship1/repos", "events_url": "https://api.github.com/users/friendship1/events{/privacy}", "received_events_url": "https://api.github.com/users/friendship1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-31T07:04:22Z", "updated_at": "2020-05-31T22:55:26Z", "closed_at": "2020-05-31T11:36:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nWhen \"coding: future_fstrings\" used without future-fstrings installed, (at Python 3.6.9)\r\nvscode-python extension function **\"Go to references\", \"Find all references\" and \"Go to Definition\" wait forever**\r\n\r\nexample code)\r\n```\r\n# -*- coding: future_fstrings -*- \r\ndef nothing():\r\n    print(\"hi\")\r\nnothing()\r\n```\r\n\r\nObviously, the solution is to install future-fstrings, with \"pip3 install future-fstrings\" command.\r\n\r\nBut it took quite a while to find a solution.\r\nI wish people could find this problem easily.\r\n(eg. appropriate error indication for this problem)\r\n\r\nI'm using jedi for completion. Below are some additional information.\r\n-   VS Code version: 1.45.1\r\n-   Extension version (available under the Extensions sidebar): 2020.5.80290\r\n-   OS and version: Ubuntu 18.04.1\r\n-   Python version (& distribution if applicable, e.g. Anaconda): 3.6.9\r\n-   Type of virtual environment used (N/A | venv | virtualenv | conda | ...): N/A\r\n-   Relevant/affected Python packages and their versions: future-strings\r\n-   Jedi or Language Server? (i.e. what is `\"python.jediEnabled\"` set to; more info #3977): Jedi\r\n-   Value of the `python.languageServer` setting: Microsoft\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1597", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1597/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1597/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1597/events", "html_url": "https://github.com/davidhalter/jedi/issues/1597", "id": 624784867, "node_id": "MDU6SXNzdWU2MjQ3ODQ4Njc=", "number": 1597, "title": "Question about support pep 589(TypedDict)", "user": {"login": "qmmp123", "id": 6360702, "node_id": "MDQ6VXNlcjYzNjA3MDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/6360702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmmp123", "html_url": "https://github.com/qmmp123", "followers_url": "https://api.github.com/users/qmmp123/followers", "following_url": "https://api.github.com/users/qmmp123/following{/other_user}", "gists_url": "https://api.github.com/users/qmmp123/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmmp123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmmp123/subscriptions", "organizations_url": "https://api.github.com/users/qmmp123/orgs", "repos_url": "https://api.github.com/users/qmmp123/repos", "events_url": "https://api.github.com/users/qmmp123/events{/privacy}", "received_events_url": "https://api.github.com/users/qmmp123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-26T10:41:26Z", "updated_at": "2020-05-26T22:54:32Z", "closed_at": "2020-05-26T22:54:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does jedi provide autocomplete for dictionary keys?\r\n\r\nFor example:\r\n```python\r\nfrom typing import TypedDict\r\n\r\nclass Options(TypedDict):\r\n foo_too_short_for_autocomplete: str\r\n\r\ndef foo(options: Options):\r\n options[\"foo# <- should I get completions here?\r\n options[\"foo_too_short_for_autocomplete\"].# <- or here?\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1596", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1596/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1596/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1596/events", "html_url": "https://github.com/davidhalter/jedi/issues/1596", "id": 624095923, "node_id": "MDU6SXNzdWU2MjQwOTU5MjM=", "number": 1596, "title": "Question about specify 'path' in jedi.Project", "user": {"login": "carter54", "id": 26741594, "node_id": "MDQ6VXNlcjI2NzQxNTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/26741594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carter54", "html_url": "https://github.com/carter54", "followers_url": "https://api.github.com/users/carter54/followers", "following_url": "https://api.github.com/users/carter54/following{/other_user}", "gists_url": "https://api.github.com/users/carter54/gists{/gist_id}", "starred_url": "https://api.github.com/users/carter54/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carter54/subscriptions", "organizations_url": "https://api.github.com/users/carter54/orgs", "repos_url": "https://api.github.com/users/carter54/repos", "events_url": "https://api.github.com/users/carter54/events{/privacy}", "received_events_url": "https://api.github.com/users/carter54/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-25T07:11:55Z", "updated_at": "2020-05-28T19:33:32Z", "closed_at": "2020-05-28T01:28:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for the great project. I'm using Jedi with version 0.17.0 and meet following problem.\r\n\r\nWhen I want to specify a project path in Jedi (not the current project when I executing the code), I use \r\n```\r\ncurrent_code_project_path = \"D:\\\\project1\"   # the project path contains the current executing code\r\ntarget_project_path = \"D:\\\\project2\"   # the target project path I want jedi to deal with\r\nproject = jedi.Project(path=target_project_path)  # specify the target_project_path in jedi.Project\r\nscript = jedi.Script(code=code, project=project)\r\ncompletions = script.complete(4, 10)  # completion\r\n```\r\n\r\nIn the following example, when I use the completion in\r\n```\r\n# if A2 is a module in target_project_path (project2)\r\nfrom A2.\r\n```\r\nI was expecting some completion results from the submodule from A2 in target_project_path. However, It doesn't work. \r\n\r\nBut I can get some infer results which I do not expect in the following example\r\n```\r\n# if A1 is a module in current_code_project_path (project1)\r\nfrom A1.\r\n```\r\nJedi have some completion results from the submodules in A1.\r\n\r\nIt seems like 'path' variable in the jedi.Project() class doesn't work...\r\nAt the end, I found that I should manually set 'sys_path' in the jedi.Project(), otherwise, it will use the sys_path in the default environment. \r\n```\r\nenvironment = jedi.get_default_environment()\r\nsys_path = environment.get_sys_path()\r\n```\r\nIf I want to use jedi for completion in the target_project_path, I have to delete the current_code_project_path in th sys_path, and append the target_project_path.\r\nIs there any simple way to specify a project path in jedi completion? \r\n\r\nThx in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1594", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1594/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1594/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1594/events", "html_url": "https://github.com/davidhalter/jedi/issues/1594", "id": 623319568, "node_id": "MDU6SXNzdWU2MjMzMTk1Njg=", "number": 1594, "title": "KeyError: 'not in'", "user": {"login": "d-ryzhikov", "id": 17341482, "node_id": "MDQ6VXNlcjE3MzQxNDgy", "avatar_url": "https://avatars3.githubusercontent.com/u/17341482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-ryzhikov", "html_url": "https://github.com/d-ryzhikov", "followers_url": "https://api.github.com/users/d-ryzhikov/followers", "following_url": "https://api.github.com/users/d-ryzhikov/following{/other_user}", "gists_url": "https://api.github.com/users/d-ryzhikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-ryzhikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-ryzhikov/subscriptions", "organizations_url": "https://api.github.com/users/d-ryzhikov/orgs", "repos_url": "https://api.github.com/users/d-ryzhikov/repos", "events_url": "https://api.github.com/users/d-ryzhikov/events{/privacy}", "received_events_url": "https://api.github.com/users/d-ryzhikov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1769857987, "node_id": "MDU6TGFiZWwxNzY5ODU3OTg3", "url": "https://api.github.com/repos/davidhalter/jedi/labels/help-wanted", "name": "help-wanted", "color": "d89217", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-05-22T16:15:26Z", "updated_at": "2020-05-23T12:51:02Z", "closed_at": "2020-05-23T12:48:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using jedi in vim via deoplete-jedi.\r\nThe error happens when the cursor is after a dot after webtest's [TestResponse](https://docs.pylonsproject.org/projects/webtest/en/latest/testresponse.html) (when I'm trying to access its attribute `response.json`).\r\n\r\nTraceback:\r\n```\r\n[deoplete] Traceback (most recent call last):\r\n  File \"/home/dmitry/.vim/bundle/deoplete.nvim/rplugin/python3/deoplete/child.py\", line 194, in _gather_results\r\n    result = self._get_result(context, source)\r\n  File \"/home/dmitry/.vim/bundle/deoplete.nvim/rplugin/python3/deoplete/child.py\", line 254, in _get_result\r\n    ctx['candidates'] = source.gather_candidates(ctx)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi/profiler.py\", line 37, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi.py\", line 189, in gather_candidates\r\n    completions = self.get_completions(script)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi/profiler.py\", line 37, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi.py\", line 137, in get_completions\r\n    return script.completions()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/__init__.py\", line 291, in completions\r\n    return self.complete(*self._pos, fuzzy=fuzzy)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/helpers.py\", line 482, in wrapper\r\n    return func(self, line, column, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/__init__.py\", line 275, in complete\r\n    return self._complete(line, column, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/__init__.py\", line 283, in _complete\r\n    return completion.complete()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 172, in complete\r\n    cached_name, completion_names = self._complete_python(leaf)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 284, in _complete_python\r\n    cached_name, n = self._complete_trailer(dot.get_previous_leaf())\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 398, in _complete_trailer\r\n    return cached_name, self._complete_trailer_for_values(values)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 403, in _complete_trailer_for_values\r\n    return complete_trailer(user_context, values)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 548, in complete_trailer\r\n    for filter in value.get_filters(origin_scope=user_context.tree_node):\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/value/instance.py\", line 179, in get_filters\r\n    class_value = self.get_annotated_class_object()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/value/instance.py\", line 353, in get_annotated_class_object\r\n    return self._get_annotated_class_object() or self.class_value\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/cache.py\", line 44, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/value/instance.py\", line 337, in _get_annotated_class_object\r\n    or not signature.matches_signature(args):\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/signature.py\", line 106, in matches_signature\r\n    matches = all(executed_param_name.matches_signature()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/signature.py\", line 106, in <genexpr>\r\n    matches = all(executed_param_name.matches_signature()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/param.py\", line 34, in matches_signature\r\n    argument_values = self.infer().py__class__()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/param.py\", line 29, in infer\r\n    return self._lazy_value.infer()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/lazy_value.py\", line 48, in infer\r\n    return self.context.infer_node(self.data)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/cache.py\", line 44, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 184, in _infer_node\r\n    return infer_atom(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 309, in infer_atom\r\n    return context.py__getattribute__(atom, position=position)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 75, in py__getattribute__\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/base_value.py\", line 414, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 75, in <genexpr>\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/names.py\", line 279, in infer\r\n    return tree_name_to_values(\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/plugins/__init__.py\", line 21, in wrapper\r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/plugins/stdlib.py\", line 844, in wrapper\r\n    return func(inference_state, context, tree_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 746, in tree_name_to_values\r\n    types = infer_expr_stmt(context, node, tree_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 384, in infer_expr_stmt\r\n    return _infer_expr_stmt(context, stmt, seek_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 421, in _infer_expr_stmt\r\n    value_set = check_tuple_assignments(n, value_set)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 845, in check_tuple_assignments\r\n    value_set = lazy_value.infer()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/lazy_value.py\", line 48, in infer\r\n    return self.context.infer_node(self.data)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/cache.py\", line 44, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 184, in _infer_node\r\n    return infer_atom(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 309, in infer_atom\r\n    return context.py__getattribute__(atom, position=position)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 75, in py__getattribute__\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/base_value.py\", line 414, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 75, in <genexpr>\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/names.py\", line 279, in infer\r\n    return tree_name_to_values(\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/plugins/__init__.py\", line 21, in wrapper\r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/plugins/stdlib.py\", line 844, in wrapper\r\n    return func(inference_state, context, tree_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 746, in tree_name_to_values\r\n    types = infer_expr_stmt(context, node, tree_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 384, in infer_expr_stmt\r\n    return _infer_expr_stmt(context, stmt, seek_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 417, in _infer_expr_stmt\r\n    value_set = context.infer_node(rhs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/cache.py\", line 44, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 197, in _infer_node\r\n    value_set = context.infer_node(first_child)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/cache.py\", line 44, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 184, in _infer_node\r\n    return infer_atom(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 309, in infer_atom\r\n    return context.py__getattribute__(atom, position=position)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 75, in py__getattribute__\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/base_value.py\", line 414, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 75, in <genexpr>\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/names.py\", line 538, in infer\r\n    return self.get_executed_param_name().infer()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/param.py\", line 29, in infer\r\n    return self._lazy_value.infer()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/lazy_value.py\", line 48, in infer\r\n    return self.context.infer_node(self.data)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/cache.py\", line 44, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 184, in _infer_node\r\n    return infer_atom(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 309, in infer_atom\r\n    return context.py__getattribute__(atom, position=position)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 43, in py__getattribute__\r\n    names = self.goto(name_or_str, position)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 32, in goto\r\n    names = finder.filter_name(filters, name_or_str)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/finder.py\", line 36, in filter_name\r\n    names = filter.get(string_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/filters.py\", line 81, in get\r\n    return self._convert_names(self._filter(\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/filters.py\", line 120, in _filter\r\n    return list(self._check_flows(names))\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/filters.py\", line 131, in _check_flows\r\n    check = flow_analysis.reachability_check(\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/flow_analysis.py\", line 83, in reachability_check\r\n    return _break_check(context, value_scope, first_flow_scope, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/flow_analysis.py\", line 98, in _break_check\r\n    reachable = _check_if(context, flow_node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/flow_analysis.py\", line 118, in _check_if\r\n    types = context.infer_node(node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/cache.py\", line 44, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 256, in _infer_node\r\n    return infer_or_test(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 468, in infer_or_test\r\n    types = context.infer_node(next(iterator))\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/cache.py\", line 44, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 184, in _infer_node\r\n    return infer_atom(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 309, in infer_atom\r\n    return context.py__getattribute__(atom, position=position)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 75, in py__getattribute__\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/base_value.py\", line 414, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 75, in <genexpr>\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/names.py\", line 538, in infer\r\n    return self.get_executed_param_name().infer()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/param.py\", line 29, in infer\r\n    return self._lazy_value.infer()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/lazy_value.py\", line 48, in infer\r\n    return self.context.infer_node(self.data)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/cache.py\", line 44, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 184, in _infer_node\r\n    return infer_atom(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 309, in infer_atom\r\n    return context.py__getattribute__(atom, position=position)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 75, in py__getattribute__\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/base_value.py\", line 414, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 75, in <genexpr>\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/names.py\", line 279, in infer\r\n    return tree_name_to_values(\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/plugins/__init__.py\", line 21, in wrapper\r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/plugins/stdlib.py\", line 844, in wrapper\r\n    return func(inference_state, context, tree_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 746, in tree_name_to_values\r\n    types = infer_expr_stmt(context, node, tree_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 384, in infer_expr_stmt\r\n    return _infer_expr_stmt(context, stmt, seek_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 417, in _infer_expr_stmt\r\n    value_set = context.infer_node(rhs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/cache.py\", line 44, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 224, in _infer_node\r\n    | context.infer_node(element.children[-1]))\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/cache.py\", line 44, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 208, in _infer_node\r\n    value_set = infer_trailer(context, value_set, trailer)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 273, in infer_trailer\r\n    return atom_values.py__getattribute__(\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/base_value.py\", line 481, in py__getattribute__\r\n    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/base_value.py\", line 414, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/base_value.py\", line 481, in <genexpr>\r\n    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/base_value.py\", line 81, in py__getattribute__\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/base_value.py\", line 414, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/base_value.py\", line 81, in <genexpr>\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/names.py\", line 279, in infer\r\n    return tree_name_to_values(\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/plugins/__init__.py\", line 21, in wrapper\r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/plugins/stdlib.py\", line 844, in wrapper\r\n    return func(inference_state, context, tree_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 746, in tree_name_to_values\r\n    types = infer_expr_stmt(context, node, tree_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 384, in infer_expr_stmt\r\n    return _infer_expr_stmt(context, stmt, seek_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 417, in _infer_expr_stmt\r\n    value_set = context.infer_node(rhs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/cache.py\", line 44, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 184, in _infer_node\r\n    return infer_atom(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 309, in infer_atom\r\n    return context.py__getattribute__(atom, position=position)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 43, in py__getattribute__\r\n    names = self.goto(name_or_str, position)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 32, in goto\r\n    names = finder.filter_name(filters, name_or_str)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/finder.py\", line 36, in filter_name\r\n    names = filter.get(string_name)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/filters.py\", line 81, in get\r\n    return self._convert_names(self._filter(\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/filters.py\", line 120, in _filter\r\n    return list(self._check_flows(names))\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/filters.py\", line 131, in _check_flows\r\n    check = flow_analysis.reachability_check(\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/flow_analysis.py\", line 83, in reachability_check\r\n    return _break_check(context, value_scope, first_flow_scope, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/flow_analysis.py\", line 98, in _break_check\r\n    reachable = _check_if(context, flow_node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/flow_analysis.py\", line 118, in _check_if\r\n    types = context.infer_node(node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/cache.py\", line 44, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 256, in _infer_node\r\n    return infer_or_test(context, element)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 485, in infer_or_test\r\n    types = _infer_comparison(context, types, operator,\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 537, in _infer_comparison\r\n    return ValueSet.from_sets(\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/base_value.py\", line 414, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 538, in <genexpr>\r\n    _infer_comparison_part(state, context, left, operator, right)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/inference/syntax_tree.py\", line 662, in _infer_comparison_part\r\n    method_name = operator_to_magic_method[str_operator]\r\nKeyError: 'not in'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1592", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1592/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1592/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1592/events", "html_url": "https://github.com/davidhalter/jedi/issues/1592", "id": 623106671, "node_id": "MDU6SXNzdWU2MjMxMDY2NzE=", "number": 1592, "title": "This issue error when using CoCnvim as well as Jedi only for pybullet package.", "user": {"login": "shhra", "id": 29188967, "node_id": "MDQ6VXNlcjI5MTg4OTY3", "avatar_url": "https://avatars3.githubusercontent.com/u/29188967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shhra", "html_url": "https://github.com/shhra", "followers_url": "https://api.github.com/users/shhra/followers", "following_url": "https://api.github.com/users/shhra/following{/other_user}", "gists_url": "https://api.github.com/users/shhra/gists{/gist_id}", "starred_url": "https://api.github.com/users/shhra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shhra/subscriptions", "organizations_url": "https://api.github.com/users/shhra/orgs", "repos_url": "https://api.github.com/users/shhra/repos", "events_url": "https://api.github.com/users/shhra/events{/privacy}", "received_events_url": "https://api.github.com/users/shhra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-22T10:17:17Z", "updated_at": "2020-06-01T11:45:31Z", "closed_at": "2020-06-01T11:44:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "  ```\r\nFile \"completion.py\", line 309, in _serialize_arguments\r\n    \"results\": self._get_call_signatures_with_args(script, line, column),\r\n  File \"completion.py\", line 148, in _get_call_signatures_with_args\r\n    call_signatures = script.get_signatures(line, column)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/api/helpers.py\", line 465, in wrapper\r\n    return func(self, line, column, *args, **kwargs)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/api/__init__.py\", line 547, in get_signatures\r\n    definitions = helpers.cache_signatures(\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/cache.py\", line 69, in wrapper\r\n    value = next(generator)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/api/helpers.py\", line 439, in cache_signatures\r\n    yield infer(\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/api/helpers.py\", line 164, in infer\r\n    return inference_state.infer(context, leaf)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/__init__.py\", line 179, in infer\r\n    return helpers.infer_call_of_leaf(context, name)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/helpers.py\", line 105, in infer_call_of_leaf\r\n    values = context.infer_node(base)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/context.py\", line 222, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 137, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 150, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 155, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 63, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 165, in _infer_node\r\n    return infer_atom(context, element)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 290, in infer_atom\r\n    return context.py__getattribute__(atom, position=position)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/common/value.py\", line 69, in from_sets\r\nfor set_ in sets:\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/context.py\", line 75, in <genexpr>\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/names.py\", line 279, in infer\r\n    return tree_name_to_values(\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper\r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/plugins/stdlib.py\", line 842, in wrapper\r\n    return func(inference_state, context, tree_name)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/syntax_tree.py\", line 715, in tree_name_to_values\r\n    types = imports.infer_import(context, tree_name)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/imports.py\", line 55, in infer_import\r\n    _prepare_infer_import(module_context, tree_name)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/imports.py\", line 118, in _prepare_infer_import\r\n    return from_import_name, tuple(import_path), import_node.level, importer.follow()\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/imports.py\", line 260, in follow\r\n    return import_module_by_names(\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/imports.py\", line 340, in import_module_by_names\r\n    value_set = ValueSet.from_sets([\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/imports.py\", line 341, in <listcomp>\r\n    import_module(\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper\r\n    return built_functions[public_name](*args, **kwargs)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/plugins/flask.py\", line 20, in wrapper\r\n    return callback(inference_state, import_names, module_context, *args, **kwargs)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/gradual/typeshed.py\", line 111, in wrapper\r\n    python_value_set = ValueSet.from_sets(\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/common/value.py\", line 69, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/gradual/typeshed.py\", line 112, in <genexpr>\r\n    func(inference_state, import_names, p, sys_path,)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/imports.py\", line 375, in import_module\r\n    file_io_or_ns, is_pkg = inference_state.compiled_subprocess.get_module_info(\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 118, in wrapper\r\n    result = self._compiled_subprocess.run(\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 216, in run\r\n    self._send(inference_state_id, None)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 251, in _send\r\n    is_exception, traceback, result = pickle_load(self._get_process().stdout)\r\n  File \"/home/shailesh/.virtualenvs/sim/lib/python3.8/site-packages/jedi/_compatibility.py\", line 389, in pickle_load\r\n    return pickle.load(file, encoding='bytes')\r\n_pickle.UnpicklingError: unpickling stack underflow\r\n```\r\nWhen using pybullet.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1591", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1591/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1591/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1591/events", "html_url": "https://github.com/davidhalter/jedi/issues/1591", "id": 623074601, "node_id": "MDU6SXNzdWU2MjMwNzQ2MDE=", "number": 1591, "title": "jedi infer() does not work with my custom AWS S3-based Python importer", "user": {"login": "asterkin", "id": 6297664, "node_id": "MDQ6VXNlcjYyOTc2NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/6297664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asterkin", "html_url": "https://github.com/asterkin", "followers_url": "https://api.github.com/users/asterkin/followers", "following_url": "https://api.github.com/users/asterkin/following{/other_user}", "gists_url": "https://api.github.com/users/asterkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/asterkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asterkin/subscriptions", "organizations_url": "https://api.github.com/users/asterkin/orgs", "repos_url": "https://api.github.com/users/asterkin/repos", "events_url": "https://api.github.com/users/asterkin/events{/privacy}", "received_events_url": "https://api.github.com/users/asterkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-05-22T09:19:19Z", "updated_at": "2020-05-23T21:00:42Z", "closed_at": "2020-05-22T14:27:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get a ValueError: not enough values to unpack (expected 1, got 0) exception when I'm trying to run jedi inside of AWS Lambda powered with my S3-based Python importer. I manged to make parso and jedi working with two small Python standard compliant patches, but with this one I feel clueless. Here is the stack trace, debug output and the test function code. It works locally. Any ideas where to look at would be highly appreciated. The ultimate goal is to explore possibilities of having a completely serverless Python IDE.\r\n\r\n1. Debug output and Stack trace:\r\n\r\n```\r\ndbg: Start: infer\r\ndbg: infer_node <Name: variable@16,4>@(16, 4) in MixedModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)\r\ndbg: context.goto <Name: variable@16,4> in (MixedModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)): [<TreeNameDefinition: string_name=variable start_pos=(15, 4)>]\r\ndbg: global search_module 'builtins': <CompiledModule: <module 'builtins' (built-in)>>\r\ndbg: infer_node PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Name: keyword@15,17>, <Operator: ,>, <Name: f@15,26>, <Operator: ,>, <Name: C@15,29>, <Operator: ,>, <Name: x@15,32>]), <Operator: ]>])@(15, 16) in ModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)\r\ndbg: iterate <SequenceLiteralValue of PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Name: keyword@15,17>, <Operator: ,>, <Name: f@15,26>, <Operator: ,>, <Name: C@15,29>, <Operator: ,>, <Name: x@15,32>]), <Operator: ]>])>\r\ndbg: infer_node <Name: keyword@15,17>@(15, 17) in ModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)\r\ndbg: context.goto <Name: keyword@15,17> in (ModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)): [<TreeNameDefinition: string_name=keyword start_pos=(2, 7)>]\r\ndbg: global search_module 'keyword': <ModuleValue: keyword@3-95 is_stub=False>\r\ndbg: after import: S{<ModuleValue: keyword@3-95 is_stub=False>}\r\ndbg: context.names_to_types: [<TreeNameDefinition: string_name=keyword start_pos=(2, 7)>] -> S{<ModuleValue: keyword@3-95 is_stub=False>}\r\ndbg: infer_node <Name: f@15,26>@(15, 26) in ModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)\r\ndbg: context.goto <Name: f@15,26> in (ModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)): [<TreeNameDefinition: string_name=f start_pos=(12, 4)>]\r\ndbg: context.names_to_types: [<TreeNameDefinition: string_name=f start_pos=(12, 4)>] -> S{<FunctionValue: <Function: f@12-14>>}\r\ndbg: infer_node <Name: C@15,29>@(15, 29) in ModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)\r\ndbg: context.goto <Name: C@15,29> in (ModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)): [<TreeNameDefinition: string_name=C start_pos=(4, 6)>]\r\ndbg: context.names_to_types: [<TreeNameDefinition: string_name=C start_pos=(4, 6)>] -> S{<ClassValue: <Class: C@4-6>>}\r\ndbg: infer_node <Name: x@15,32>@(15, 32) in ModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)\r\ndbg: context.goto <Name: x@15,32> in (ModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)): [<TreeNameDefinition: string_name=x start_pos=(10, 0)>]\r\ndbg: infer_expr_stmt <ExprStmt: x = D()@10,0> (<Name: x@10,0>)\r\ndbg: infer_node PythonNode(atom_expr, [<Name: D@10,4>, PythonNode(trailer, [<Operator: (>, <Operator: )>])])@(10, 4) in ModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)\r\ndbg: infer_node <Name: D@10,4>@(10, 4) in ModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)\r\ndbg: context.goto <Name: D@10,4> in (ModuleContext(<ModuleValue: __main__@2-16 is_stub=False>)): [<TreeNameDefinition: string_name=D start_pos=(7, 6)>]\r\ndbg: context.names_to_types: [<TreeNameDefinition: string_name=D start_pos=(7, 6)>] -> S{<ClassValue: <Class: D@7-9>>}\r\ndbg: infer_trailer: PythonNode(trailer, [<Operator: (>, <Operator: )>]) in S{<ClassValue: <Class: D@7-9>>}\r\ndbg: execute: <ClassValue: <Class: D@7-9>> <TreeArguments: None>\r\ndbg: context.goto 'object' in (<CompiledModule: <module 'builtins' (built-in)>>): [<CompiledName: (<CompiledValueName: string_name=builtins>).object>]\r\ndbg: context.names_to_types: [<CompiledName: (<CompiledValueName: string_name=builtins>).object>] -> S{<CompiledValue: <class 'object'>>}\r\ndbg: execute result: S{<TreeInstance of <ClassValue: <Class: D@7-9>>(<TreeArguments: None>)>} in <ClassValue: <Class: D@7-9>>\r\ndbg: infer_expr_stmt result S{<TreeInstance of <ClassValue: <Class: D@7-9>>(<TreeArguments: None>)>}\r\ndbg: context.names_to_types: [<TreeNameDefinition: string_name=x start_pos=(10, 0)>] -> S{<TreeInstance of <ClassValue: <Class: D@7-9>>(<TreeArguments: None>)>}\r\ndbg: Dynamic array search for <SequenceLiteralValue of PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Name: keyword@15,17>, <Operator: ,>, <Name: f@15,26>, <Operator: ,>, <Name: C@15,29>, <Operator: ,>, <Name: x@15,32>]), <Operator: ]>])>\r\ndbg: Start: Resolve lazy value wrapper\r\ndbg: iterate <SequenceLiteralValue of PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Name: keyword@15,17>, <Operator: ,>, <Name: f@15,26>, <Operator: ,>, <Name: C@15,29>, <Operator: ,>, <Name: x@15,32>]), <Operator: ]>])>\r\ndbg: global search_module 'types': <ModuleValue: types@1-267 is_stub=False>\r\nModule: S{<ModuleValue: types@1-267 is_stub=False>}\r\ndbg: context.goto 'FunctionType' in (<ModuleValue: types@1-267 is_stub=False>): [<TreeNameDefinition: string_name=FunctionType start_pos=(12, 0)>]\r\ndbg: infer_expr_stmt <ExprStmt: FunctionType = type(_f)@12,0> (<Name: FunctionType@12,0>)\r\ndbg: infer_node PythonNode(atom_expr, [<Name: type@12,15>, PythonNode(trailer, [<Operator: (>, <Name: _f@12,20>, <Operator: )>])])@(12, 15) in ModuleContext(<ModuleValue: types@1-267 is_stub=False>)\r\ndbg: infer_node <Name: type@12,15>@(12, 15) in ModuleContext(<ModuleValue: types@1-267 is_stub=False>)\r\ndbg: context.goto <Name: type@12,15> in (ModuleContext(<ModuleValue: types@1-267 is_stub=False>)): [<CompiledName: (<CompiledValueName: string_name=builtins>).type>]\r\ndbg: context.names_to_types: [<CompiledName: (<CompiledValueName: string_name=builtins>).type>] -> S{<CompiledValue: <class 'type'>>}\r\ndbg: infer_trailer: PythonNode(trailer, [<Operator: (>, <Name: _f@12,20>, <Operator: )>]) in S{<CompiledValue: <class 'type'>>}\r\ndbg: infer_node <Name: _f@12,20>@(12, 20) in ModuleContext(<ModuleValue: types@1-267 is_stub=False>)\r\ndbg: context.goto <Name: _f@12,20> in (ModuleContext(<ModuleValue: types@1-267 is_stub=False>)): [<TreeNameDefinition: string_name=_f start_pos=(11, 4)>]\r\ndbg: context.names_to_types: [<TreeNameDefinition: string_name=_f start_pos=(11, 4)>] -> S{<FunctionValue: <Function: _f@11-12>>}\r\ndbg: builtin start <CompiledValue: <class 'type'>>\r\nModule: S{<ModuleValue: types@1-267 is_stub=False>}\r\ndbg: context.goto 'FunctionType' in (<ModuleValue: types@1-267 is_stub=False>): [<TreeNameDefinition: string_name=FunctionType start_pos=(12, 0)>]\r\nwarning: catched stmt recursion: <ExprStmt: FunctionType = type(_f)@12,0> @(12, 0)\r\ndbg: context.names_to_types: [<TreeNameDefinition: string_name=FunctionType start_pos=(12, 0)>] -> S{}\r\nName: S{}\r\ndbg: End: Resolve lazy value wrapper\r\ndbg: End: infer\r\nnot enough values to unpack (expected 1, got 0): ValueError\r\nTraceback (most recent call last):\r\n  File \"/var/task/index.py\", line 17, in handle_event\r\n    return _test_infer_type()\r\n  File \"./service/python/_test_infer_type.py\", line 34, in _test_infer_type\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/api/helpers.py\", line 482, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/api/__init__.py\", line 311, in infer\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/api/__init__.py\", line 331, in _infer\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/api/helpers.py\", line 164, in infer\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/__init__.py\", line 179, in infer\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/helpers.py\", line 80, in infer_call_of_leaf\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/context.py\", line 222, in infer_node\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/cache.py\", line 44, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/debug.py\", line 82, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 184, in _infer_node\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 309, in infer_atom\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/context.py\", line 75, in py__getattribute__\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 414, in from_sets\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/context.py\", line 75, in <genexpr>\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/names.py\", line 282, in infer\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/plugins/__init__.py\", line 21, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/plugins/stdlib.py\", line 844, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 741, in tree_name_to_values\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 298, in iterate_values\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 414, in from_sets\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 297, in <genexpr>\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 466, in iterate\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/value/iterable.py\", line 361, in py__iter__\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/value/dynamic_arrays.py\", line 40, in check_array_additions\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/cache.py\", line 44, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/debug.py\", line 82, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/value/dynamic_arrays.py\", line 76, in _internal_check_array_additions\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/value/iterable.py\", line 190, in name\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/compiled/value.py\", line 423, in __init__\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 320, in __getattr__\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/utils.py\", line 75, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/cache.py\", line 111, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 328, in _wrapped_value\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/value/iterable.py\", line 205, in _get_wrapped_value\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/cache.py\", line 44, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/value/iterable.py\", line 197, in _cached_generics\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/value/iterable.py\", line 338, in _get_generics\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/value/iterable.py\", line 193, in _get_generics\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 461, in py__class__\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 398, in __init__\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 461, in <genexpr>\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/value/function.py\", line 164, in py__class__\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/helpers.py\", line 198, in values_from_qualified_names\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 481, in py__getattribute__\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 414, in from_sets\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 481, in <genexpr>\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 81, in py__getattribute__\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 414, in from_sets\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 81, in <genexpr>\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/names.py\", line 282, in infer\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/plugins/__init__.py\", line 21, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/plugins/stdlib.py\", line 844, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 746, in tree_name_to_values\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 384, in infer_expr_stmt\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/debug.py\", line 82, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 417, in _infer_expr_stmt\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/context.py\", line 222, in infer_node\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 156, in infer_node\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/cache.py\", line 44, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/debug.py\", line 82, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 82, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 208, in _infer_node\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/syntax_tree.py\", line 280, in infer_trailer\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 472, in execute\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 414, in from_sets\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 472, in <genexpr>\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/plugins/__init__.py\", line 21, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/plugins/stdlib.py\", line 131, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/plugins/stdlib.py\", line 173, in wrapper\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/plugins/stdlib.py\", line 219, in builtins_type\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 461, in py__class__\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 398, in __init__\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/base_value.py\", line 461, in <genexpr>\r\n  File \"/tmp/tmp9_1lc7fp/lib/python/jedi/inference/value/function.py\", line 164, in py__class__\r\nValueError: not enough values to unpack (expected 1, got 0)\r\n```\r\n\r\n 2. Test Function Code:\r\n\r\n```\r\n from jedi import settings, Interpreter, debug\r\n\r\nsettings.cache_directory = '/tmp'\r\ndebug.debug_function = debug.print_to_stdout\r\ndebug.enable_warning = True\r\ndebug.enable_notice = True\r\nnamespaces = [locals()]\r\n\r\nsource_1 = '''\r\nimport keyword\r\n\r\nclass C:\r\n    pass\r\n\r\nclass D:\r\n    pass\r\n\r\nx = D()\r\n\r\ndef f():\r\n    pass\r\n\r\nfor variable in [keyword, f, C, x]:\r\n    variable'''\r\n\r\nsource_2 = '''\r\nimport json\r\njson.lo'''\r\n\r\n\r\ndef _test_infer_type():\r\n    '''test type inference'''\r\n    script = Interpreter(source_1, namespaces)\r\n    defs = sorted(script.infer(), key=lambda d: d.line)\r\n    types = [str(d.type) for d in defs]\r\n    assert(['module', 'class', 'instance', 'function'] == types)\r\n\r\n    return 'OK'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1588", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1588/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1588/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1588/events", "html_url": "https://github.com/davidhalter/jedi/issues/1588", "id": 620529390, "node_id": "MDU6SXNzdWU2MjA1MjkzOTA=", "number": 1588, "title": "Support custom Django object managers", "user": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-05-18T21:54:41Z", "updated_at": "2020-06-14T22:41:10Z", "closed_at": "2020-06-14T22:41:09Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The new Django support unfortunately lost support for custom object managers (previously only they were offered as completions).\r\n\r\nFor example:\r\n``` python\r\nfrom django.db import models\r\n\r\nclass ThingManager(models.Manager):\r\n    def more_things(self):\r\n        return self.all()\r\n\r\nclass Thing(models.Model):\r\n    name = models.TextField()\r\n\r\n    objects = ThingManager()\r\n\r\nThing.objects.<tab>\r\n```\r\n\r\nIdeally this would offer all the usual manager completions, plus `more_things`.\r\n\r\nBonus points if Jedi can get this right for relations which reference `Thing` too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1587", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1587/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1587/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1587/events", "html_url": "https://github.com/davidhalter/jedi/issues/1587", "id": 620528004, "node_id": "MDU6SXNzdWU2MjA1MjgwMDQ=", "number": 1587, "title": "Support signatures for Django models", "user": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-05-18T21:51:43Z", "updated_at": "2020-06-14T22:38:27Z", "closed_at": "2020-06-14T22:38:27Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "For some model `Book`, we'd ideally have signatures attached to the `__init__` and `objects.create` methods so that you get useful signature information in the following cases:\r\n\r\n- `Book(author<tab>`\r\n- `Book.objects.create(author<tab>`\r\n- `Book.objects.filter(author__name<tab>`\r\n\r\n@davidhalter for the last case, were you hoping that Jedi would know that `name` is a member of the related `Author` model and offer it as a completion?\r\nThat would be really cool if so, though might take some careful experimentation to get right -- I suspect that `_` is not considered as a word separator by most editors, so Jedi might have to offer up `author__name__whatever` rather than just the `name` or `whatever` part.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1585", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1585/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1585/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1585/events", "html_url": "https://github.com/davidhalter/jedi/issues/1585", "id": 619668126, "node_id": "MDU6SXNzdWU2MTk2NjgxMjY=", "number": 1585, "title": "Error during editing doctest", "user": {"login": "d-ryzhikov", "id": 17341482, "node_id": "MDQ6VXNlcjE3MzQxNDgy", "avatar_url": "https://avatars3.githubusercontent.com/u/17341482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-ryzhikov", "html_url": "https://github.com/d-ryzhikov", "followers_url": "https://api.github.com/users/d-ryzhikov/followers", "following_url": "https://api.github.com/users/d-ryzhikov/following{/other_user}", "gists_url": "https://api.github.com/users/d-ryzhikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-ryzhikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-ryzhikov/subscriptions", "organizations_url": "https://api.github.com/users/d-ryzhikov/orgs", "repos_url": "https://api.github.com/users/d-ryzhikov/repos", "events_url": "https://api.github.com/users/d-ryzhikov/events{/privacy}", "received_events_url": "https://api.github.com/users/d-ryzhikov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}, {"id": 1769857987, "node_id": "MDU6TGFiZWwxNzY5ODU3OTg3", "url": "https://api.github.com/repos/davidhalter/jedi/labels/help-wanted", "name": "help-wanted", "color": "d89217", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-05-17T10:39:38Z", "updated_at": "2020-06-06T23:03:58Z", "closed_at": "2020-06-05T11:35:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use jedi via nvim deoplete-jedi. The error occurs when I edit doctest.\r\nTraceback:\r\n```\r\n[deoplete] Traceback (most recent call last):                                                                                                                                                \r\n  File \"/home/dmitry/.vim/bundle/deoplete.nvim/rplugin/python3/deoplete/child.py\", line 194, in _gather_results\r\n    result = self._get_result(context, source)\r\n  File \"/home/dmitry/.vim/bundle/deoplete.nvim/rplugin/python3/deoplete/child.py\", line 254, in _get_result\r\n    ctx['candidates'] = source.gather_candidates(ctx)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi/profiler.py\", line 37, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi.py\", line 189, in gather_candidates\r\n    completions = self.get_completions(script)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi/profiler.py\", line 37, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi.py\", line 137, in get_completions\r\n    return script.completions()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/__init__.py\", line 291, in completions\r\n    return self.complete(*self._pos, fuzzy=fuzzy)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/helpers.py\", line 482, in wrapper\r\n    return func(self, line, column, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/__init__.py\", line 275, in complete\r\n    return self._complete(line, column, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/__init__.py\", line 283, in _complete\r\n    return completion.complete()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 169, in complete\r\n    prefixed_completions = self._complete_in_string(start_leaf, string)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 460, in _complete_in_string\r\n    return self._complete_code_lines(relevant_code_lines)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 474, in _complete_code_lines\r\n    return Completion(\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 172, in complete\r\n    cached_name, completion_names = self._complete_python(leaf)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 259, in _complete_python\r\n    current_line = self._code_lines[self._position[0] - 1][:self._position[1]]\r\nIndexError: list index out of range\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1583", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1583/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1583/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1583/events", "html_url": "https://github.com/davidhalter/jedi/issues/1583", "id": 618327320, "node_id": "MDU6SXNzdWU2MTgzMjczMjA=", "number": 1583, "title": "error on \"extract variable\" action - it's ok?", "user": {"login": "Alexey-T", "id": 4154978, "node_id": "MDQ6VXNlcjQxNTQ5Nzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4154978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexey-T", "html_url": "https://github.com/Alexey-T", "followers_url": "https://api.github.com/users/Alexey-T/followers", "following_url": "https://api.github.com/users/Alexey-T/following{/other_user}", "gists_url": "https://api.github.com/users/Alexey-T/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexey-T/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexey-T/subscriptions", "organizations_url": "https://api.github.com/users/Alexey-T/orgs", "repos_url": "https://api.github.com/users/Alexey-T/repos", "events_url": "https://api.github.com/users/Alexey-T/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexey-T/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-14T15:32:53Z", "updated_at": "2020-05-14T20:50:17Z", "closed_at": "2020-05-14T20:50:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "![Screenshot from 2020-05-14 18-32-18](https://user-images.githubusercontent.com/4154978/81954211-41286c00-9611-11ea-8f6e-833ded80e960.png)\r\n\r\n```\r\nPython 3.8\r\nInit: cuda_project_man\r\nStartup: 860ms, plugins: 30ms (project_man 31ms)\r\nInit: cuda_addonman\r\nInit: cuda_hilite_occurrences\r\nInit: cuda_python_intel\r\nPython IntelliSense:  <Python 3.8.2 in /usr>\r\nGoto \"/home/user/.config/cudatext/py/cuda_ext/cd_ext_tabs.py\", Line 305\r\nTraceback (most recent call last):\r\n  File \"/home/user/.config/cudatext/py/cuda_python_intel/__init__.py\", line 338, in refactoring_extract_variable\r\n    item = self.app.script.extract_variable(\r\n  File \"/home/user/.config/cudatext/py/cuda_python_intel/jedi/api/__init__.py\", line 62, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/home/user/.config/cudatext/py/cuda_python_intel/jedi/api/__init__.py\", line 715, in extract_variable\r\n    return self._extract_variable(line, column, **kwargs)  # Python 2...\r\n  File \"/home/user/.config/cudatext/py/cuda_python_intel/jedi/api/helpers.py\", line 465, in wrapper\r\n    return func(self, line, column, *args, **kwargs)\r\n  File \"/home/user/.config/cudatext/py/cuda_python_intel/jedi/api/__init__.py\", line 727, in _extract_variable\r\n    return extract_variable(\r\n  File \"/home/user/.config/cudatext/py/cuda_python_intel/jedi/api/refactoring/extract.py\", line 25, in extract_variable\r\n    raise RefactoringError(message)\r\njedi.api.exceptions.RefactoringError: Cannot extract a \"trailer\"\r\n```\r\n\r\nis this ok? selection has incorrect ) char.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1582", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1582/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1582/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1582/events", "html_url": "https://github.com/davidhalter/jedi/issues/1582", "id": 618235264, "node_id": "MDU6SXNzdWU2MTgyMzUyNjQ=", "number": 1582, "title": "[Question] Inline lonely variable", "user": {"login": "muffinmad", "id": 2702727, "node_id": "MDQ6VXNlcjI3MDI3Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2702727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muffinmad", "html_url": "https://github.com/muffinmad", "followers_url": "https://api.github.com/users/muffinmad/followers", "following_url": "https://api.github.com/users/muffinmad/following{/other_user}", "gists_url": "https://api.github.com/users/muffinmad/gists{/gist_id}", "starred_url": "https://api.github.com/users/muffinmad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muffinmad/subscriptions", "organizations_url": "https://api.github.com/users/muffinmad/orgs", "repos_url": "https://api.github.com/users/muffinmad/repos", "events_url": "https://api.github.com/users/muffinmad/events{/privacy}", "received_events_url": "https://api.github.com/users/muffinmad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-14T13:32:50Z", "updated_at": "2020-05-14T21:45:48Z", "closed_at": "2020-05-14T21:45:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is this intended that `Script.inline()` delete unused variable?\r\n\r\n```python\r\n>>> print(Script('foo = 1\\n', path='foo.py').inline(1, 0).get_diff())\r\n--- foo.py\r\n+++ foo.py\r\n@@ -1,2 +1 @@\r\n-foo = 1\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1581", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1581/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1581/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1581/events", "html_url": "https://github.com/davidhalter/jedi/issues/1581", "id": 617577816, "node_id": "MDU6SXNzdWU2MTc1Nzc4MTY=", "number": 1581, "title": "Incorrect diff by ChangedFile.get_diff if there are no new line at the end", "user": {"login": "muffinmad", "id": 2702727, "node_id": "MDQ6VXNlcjI3MDI3Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2702727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muffinmad", "html_url": "https://github.com/muffinmad", "followers_url": "https://api.github.com/users/muffinmad/followers", "following_url": "https://api.github.com/users/muffinmad/following{/other_user}", "gists_url": "https://api.github.com/users/muffinmad/gists{/gist_id}", "starred_url": "https://api.github.com/users/muffinmad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muffinmad/subscriptions", "organizations_url": "https://api.github.com/users/muffinmad/orgs", "repos_url": "https://api.github.com/users/muffinmad/repos", "events_url": "https://api.github.com/users/muffinmad/events{/privacy}", "received_events_url": "https://api.github.com/users/muffinmad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-13T16:13:46Z", "updated_at": "2020-05-13T22:21:30Z", "closed_at": "2020-05-13T22:21:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n$ echo -n \"foo = 1\\nbar = foo + 1\\nbaz = int(bar + 1)\" > test-inline.py\r\n```\r\n\r\n```python\r\nPython 3.7.4 (default, Sep 28 2019, 16:39:19)\r\n>>> from jedi import Script\r\n>>> with open('test-inline.py') as f:\r\n...     script = Script(f.read(), path='test-inline.py')\r\n...\r\n>>> refactor = script.inline(2, 0)\r\n>>> print(refactor.get_diff())\r\n```\r\n\r\nResult:\r\n\r\n```\r\n--- test-inline.py\r\n+++ test-inline.py\r\n@@ -1,3 +1,2 @@\r\n foo = 1\r\n-bar = foo + 1\r\n-baz = int(bar + 1)+baz = int((foo + 1) + 1)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1580", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1580/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1580/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1580/events", "html_url": "https://github.com/davidhalter/jedi/issues/1580", "id": 617228470, "node_id": "MDU6SXNzdWU2MTcyMjg0NzA=", "number": 1580, "title": "AttributeError when trying to complete on MNE object", "user": {"login": "cbrnr", "id": 4377312, "node_id": "MDQ6VXNlcjQzNzczMTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/4377312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrnr", "html_url": "https://github.com/cbrnr", "followers_url": "https://api.github.com/users/cbrnr/followers", "following_url": "https://api.github.com/users/cbrnr/following{/other_user}", "gists_url": "https://api.github.com/users/cbrnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrnr/subscriptions", "organizations_url": "https://api.github.com/users/cbrnr/orgs", "repos_url": "https://api.github.com/users/cbrnr/repos", "events_url": "https://api.github.com/users/cbrnr/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrnr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-13T07:54:25Z", "updated_at": "2020-05-14T06:41:30Z", "closed_at": "2020-05-13T22:29:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this is a Jedi or IPython issue, but here's what happens. Consider running the following minimal example in IPython (packages `numpy` and `mne` are required):\r\n\r\n```python\r\nimport numpy as np\r\nimport mne\r\nraw = mne.io.RawArray(np.random.random((10, 1000)), mne.create_info(10, 100))\r\nraw.se<TAB>\r\n```\r\n\r\nIn the last line, I want to autocomplete a method, but nothing happens. When I hit enter, IPython crashes with the following output:\r\n\r\n<details>\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/cache.py\", line 109, in wrapper\r\n    return dct[key]\r\nKeyError: ((), frozenset())\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/cache.py\", line 109, in wrapper\r\n    return dct[key]\r\nKeyError: ((), frozenset())\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/ipython\", line 8, in <module>\r\n    sys.exit(start_ipython())\r\n  File \"/usr/local/lib/python3.8/site-packages/IPython/__init__.py\", line 126, in start_ipython\r\n    return launch_new_instance(argv=argv, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/traitlets/config/application.py\", line 664, in launch_instance\r\n    app.start()\r\n  File \"/usr/local/lib/python3.8/site-packages/IPython/terminal/ipapp.py\", line 356, in start\r\n    self.shell.mainloop()\r\n  File \"/usr/local/lib/python3.8/site-packages/IPython/terminal/interactiveshell.py\", line 559, in mainloop\r\n    self.interact()\r\n  File \"/usr/local/lib/python3.8/site-packages/IPython/terminal/interactiveshell.py\", line 542, in interact\r\n    code = self.prompt_for_code()\r\n  File \"/usr/local/lib/python3.8/site-packages/IPython/terminal/interactiveshell.py\", line 468, in prompt_for_code\r\n    text = self.pt_app.prompt(\r\n  File \"/usr/local/lib/python3.8/site-packages/prompt_toolkit/shortcuts/prompt.py\", line 994, in prompt\r\n    return self.app.run(set_exception_handler=set_exception_handler)\r\n  File \"/usr/local/lib/python3.8/site-packages/prompt_toolkit/application/application.py\", line 811, in run\r\n    return loop.run_until_complete(\r\n  File \"/usr/local/Cellar/python@3.8/3.8.2/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py\", line 616, in run_until_complete\r\n    return future.result()\r\n  File \"/usr/local/lib/python3.8/site-packages/prompt_toolkit/application/application.py\", line 778, in run_async\r\n    return await _run_async2()\r\n  File \"/usr/local/lib/python3.8/site-packages/prompt_toolkit/application/application.py\", line 766, in _run_async2\r\n    await self.cancel_and_wait_for_background_tasks()\r\n  File \"/usr/local/lib/python3.8/site-packages/prompt_toolkit/application/application.py\", line 867, in cancel_and_wait_for_background_tasks\r\n    await task\r\n  File \"/usr/local/lib/python3.8/site-packages/prompt_toolkit/buffer.py\", line 1854, in new_coroutine\r\n    await coroutine(*a, **kw)\r\n  File \"/usr/local/lib/python3.8/site-packages/prompt_toolkit/buffer.py\", line 1683, in async_completer\r\n    async for completion in self.completer.get_completions_async(\r\n  File \"/usr/local/lib/python3.8/site-packages/prompt_toolkit/completion/base.py\", line 269, in get_completions_async\r\n    async for completion in completer.get_completions_async(\r\n  File \"/usr/local/lib/python3.8/site-packages/prompt_toolkit/completion/base.py\", line 196, in get_completions_async\r\n    for item in self.get_completions(document, complete_event):\r\n  File \"/usr/local/lib/python3.8/site-packages/IPython/terminal/ptutils.py\", line 92, in get_completions\r\n    yield from self._get_completions(body, offset, cursor_position, self.ipy_completer)\r\n  File \"/usr/local/lib/python3.8/site-packages/IPython/terminal/ptutils.py\", line 102, in _get_completions\r\n    for c in completions:\r\n  File \"/usr/local/lib/python3.8/site-packages/IPython/core/completer.py\", line 438, in _deduplicate_completions\r\n    completions = list(completions)\r\n  File \"/usr/local/lib/python3.8/site-packages/IPython/core/completer.py\", line 1819, in completions\r\n    for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):\r\n  File \"/usr/local/lib/python3.8/site-packages/IPython/core/completer.py\", line 1876, in _completions\r\n    signature = _make_signature(jm)\r\n  File \"/usr/local/lib/python3.8/site-packages/IPython/core/completer.py\", line 991, in _make_signature\r\n    return '(%s)'% ', '.join([f for f in (_formatparamchildren(p) for p in completion.params) if f])\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/cache.py\", line 111, in wrapper\r\n    result = method(self, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/api/classes.py\", line 479, in params\r\n    for signature in self._get_signatures():\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/api/classes.py\", line 561, in _get_signatures\r\n    return [sig for name in names for sig in name.infer().get_signatures()]\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/api/classes.py\", line 561, in <listcomp>\r\n    return [sig for name in names for sig in name.infer().get_signatures()]\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/cache.py\", line 111, in wrapper\r\n    result = method(self, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/inference/compiled/mixed.py\", line 124, in infer\r\n    tree_values = tree_value.py__getattribute__(self.string_name)\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/inference/base_value.py\", line 86, in py__getattribute__\r\n    names = self.goto(name_or_str, name_context, analysis_errors)\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/inference/base_value.py\", line 75, in goto\r\n    names = finder.filter_name(filters, name_or_str)\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/inference/finder.py\", line 35, in filter_name\r\n    for filter in filters:\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/inference/base_value.py\", line 63, in _get_value_filters\r\n    for f in self.get_filters(origin_scope=origin_scope):\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/inference/value/instance.py\", line 179, in get_filters\r\n    class_value = self.get_annotated_class_object()\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/inference/value/instance.py\", line 352, in get_annotated_class_object\r\n    return self._get_annotated_class_object() or self.class_value\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/inference/value/instance.py\", line 341, in _get_annotated_class_object\r\n    all_annotations = py__annotations__(signature.value.tree_node)\r\n  File \"/usr/local/lib/python3.8/site-packages/jedi/inference/gradual/annotation.py\", line 187, in py__annotations__\r\n    for function_param in funcdef.get_params():\r\nAttributeError: 'Class' object has no attribute 'get_params'\r\n\r\nIf you suspect this is an IPython 7.14.0 bug, please report it at:\r\n    https://github.com/ipython/ipython/issues\r\nor send an email to the mailing list at ipython-dev@python.org\r\n\r\nYou can print a more detailed traceback right now with \"%tb\", or use \"%debug\"\r\nto interactively debug it.\r\n\r\nExtra-detailed tracebacks for bug-reporting purposes can be enabled via:\r\n    %config Application.verbose_crash=True\r\n```\r\n\r\n</details>\r\n\r\nHere's a more detailed report:\r\n\r\n<details>\r\n\r\n```\r\n---------------------------------------------------------------------------\r\n---------------------------------------------------------------------------\r\nKeyError              Python 3.8.2: /usr/local/opt/python@3.8/bin/python3.8\r\n                                                   Wed May 13 09:49:12 2020\r\nA problem occurred executing Python code.  Here is the sequence of function\r\ncalls leading up to the error, with the most recent (innermost) call last.\r\n/usr/local/lib/python3.8/site-packages/jedi/cache.py in wrapper(self=<Completion: set_annotations>, *args=(), **kwargs={})\r\n    108         try:\r\n--> 109             return dct[key]\r\n        dct = {((), frozenset()): [<Name name='annotations', description='param annotations'>, <Name name='emit_warning', description='param emit_warning=True'>]}\r\n        key = ((), frozenset())\r\n    110         except KeyError:\r\n\r\nKeyError: ((), frozenset())\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n---------------------------------------------------------------------------\r\nKeyError              Python 3.8.2: /usr/local/opt/python@3.8/bin/python3.8\r\n                                                   Wed May 13 09:49:12 2020\r\nA problem occurred executing Python code.  Here is the sequence of function\r\ncalls leading up to the error, with the most recent (innermost) call last.\r\n/usr/local/lib/python3.8/site-packages/jedi/cache.py in wrapper(self=MixedName(<CompiledName: (<CompiledValueName: string_name=RawArray>).set_annotations>), *args=(), **kwargs={})\r\n    108         try:\r\n--> 109             return dct[key]\r\n        dct = {((), frozenset()): S{<MixedObject: <bound method BaseRaw.set_annotations of <RawArray..; <BoundMethod: <MethodValue: <Function: set_annotations@574-627>>>>}}\r\n        key = ((), frozenset())\r\n    110         except KeyError:\r\n\r\nKeyError: ((), frozenset())\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n---------------------------------------------------------------------------\r\nAttributeError        Python 3.8.2: /usr/local/opt/python@3.8/bin/python3.8\r\n                                                   Wed May 13 09:49:12 2020\r\nA problem occurred executing Python code.  Here is the sequence of function\r\ncalls leading up to the error, with the most recent (innermost) call last.\r\n/usr/local/bin/ipython in <module>\r\n      1 #!/usr/local/opt/python@3.8/bin/python3.8\r\n      2 # -*- coding: utf-8 -*-\r\n      3 import re\r\n      4 import sys\r\n      5 from IPython import start_ipython\r\n      6 if __name__ == '__main__':\r\n      7     sys.argv[0] = re.sub(r'(-script\\.pyw|\\.exe)?$', '', sys.argv[0])\r\n----> 8     sys.exit(start_ipython())\r\n        global sys.exit = <built-in function exit>\r\n        global start_ipython = <function start_ipython at 0x10c71a280>\r\n\r\n/usr/local/lib/python3.8/site-packages/IPython/__init__.py in start_ipython(argv=None, **kwargs={})\r\n    111     This is a public API method, and will survive implementation changes.\r\n    112     \r\n    113     Parameters\r\n    114     ----------\r\n    115     \r\n    116     argv : list or None, optional\r\n    117         If unspecified or None, IPython will parse command-line options from sys.argv.\r\n    118         To prevent any command-line parsing, pass an empty list: `argv=[]`.\r\n    119     user_ns : dict, optional\r\n    120         specify this dictionary to initialize the IPython user namespace with particular values.\r\n    121     kwargs : various, optional\r\n    122         Any other kwargs will be passed to the Application constructor,\r\n    123         such as `config`.\r\n    124     \"\"\"\r\n    125     from IPython.terminal.ipapp import launch_new_instance\r\n--> 126     return launch_new_instance(argv=argv, **kwargs)\r\n        launch_new_instance = <bound method Application.launch_instance of <class 'IPython.terminal.ipapp.TerminalIPythonApp'>>\r\n        argv = None\r\n        kwargs = {}\r\n    127 \r\n    128 def start_kernel(argv=None, **kwargs):\r\n    129     \"\"\"Launch a normal IPython kernel instance (as opposed to embedded)\r\n    130     \r\n    131     `IPython.embed_kernel()` puts a shell in a particular calling scope,\r\n    132     such as a function or method for debugging purposes,\r\n    133     which is often not desirable.\r\n    134     \r\n    135     `start_kernel()` does full, regular IPython initialization,\r\n    136     including loading startup files, configuration, etc.\r\n    137     much of which is skipped by `embed()`.\r\n    138     \r\n    139     Parameters\r\n    140     ----------\r\n    141     \r\n\r\n/usr/local/lib/python3.8/site-packages/traitlets/config/application.py in launch_instance(cls=<class 'IPython.terminal.ipapp.TerminalIPythonApp'>, argv=None, **kwargs={})\r\n    649             lines.append(cls.class_config_section())\r\n    650         return '\\n'.join(lines)\r\n    651 \r\n    652     def exit(self, exit_status=0):\r\n    653         self.log.debug(\"Exiting application: %s\" % self.name)\r\n    654         sys.exit(exit_status)\r\n    655 \r\n    656     @classmethod\r\n    657     def launch_instance(cls, argv=None, **kwargs):\r\n    658         \"\"\"Launch a global instance of this Application\r\n    659 \r\n    660         If a global instance already exists, this reinitializes and starts it\r\n    661         \"\"\"\r\n    662         app = cls.instance(**kwargs)\r\n    663         app.initialize(argv)\r\n--> 664         app.start()\r\n        app.start = <bound method TerminalIPythonApp.start of <IPython.terminal.ipapp.TerminalIPythonApp object at 0x10ad6da90>>\r\n    665 \r\n    666 #-----------------------------------------------------------------------------\r\n    667 # utility functions, for convenience\r\n    668 #-----------------------------------------------------------------------------\r\n    669 \r\n    670 def boolean_flag(name, configurable, set_help='', unset_help=''):\r\n    671     \"\"\"Helper for building basic --trait, --no-trait flags.\r\n    672 \r\n    673     Parameters\r\n    674     ----------\r\n    675 \r\n    676     name : str\r\n    677         The name of the flag.\r\n    678     configurable : str\r\n    679         The 'Class.trait' string of the trait to be set/unset with the flag\r\n\r\n/usr/local/lib/python3.8/site-packages/IPython/terminal/ipapp.py in start(self=<IPython.terminal.ipapp.TerminalIPythonApp object>)\r\n    341         if self.log_level <= logging.INFO: print()\r\n    342 \r\n    343     def _pylab_changed(self, name, old, new):\r\n    344         \"\"\"Replace --pylab='inline' with --pylab='auto'\"\"\"\r\n    345         if new == 'inline':\r\n    346             warnings.warn(\"'inline' not available as pylab backend, \"\r\n    347                       \"using 'auto' instead.\")\r\n    348             self.pylab = 'auto'\r\n    349 \r\n    350     def start(self):\r\n    351         if self.subapp is not None:\r\n    352             return self.subapp.start()\r\n    353         # perform any prexec steps:\r\n    354         if self.interact:\r\n    355             self.log.debug(\"Starting IPython's mainloop...\")\r\n--> 356             self.shell.mainloop()\r\n        self.shell.mainloop = <bound method TerminalInteractiveShell.mainloop of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x10ad18730>>\r\n    357         else:\r\n    358             self.log.debug(\"IPython not interactive...\")\r\n    359             if not self.shell.last_execution_succeeded:\r\n    360                 sys.exit(1)\r\n    361 \r\n    362 def load_default_config(ipython_dir=None):\r\n    363     \"\"\"Load the default config file from the default ipython_dir.\r\n    364 \r\n    365     This is useful for embedded shells.\r\n    366     \"\"\"\r\n    367     if ipython_dir is None:\r\n    368         ipython_dir = get_ipython_dir()\r\n    369 \r\n    370     profile_dir = os.path.join(ipython_dir, 'profile_default')\r\n    371     app = TerminalIPythonApp()\r\n\r\n/usr/local/lib/python3.8/site-packages/IPython/terminal/interactiveshell.py in mainloop(self=<IPython.terminal.interactiveshell.TerminalInteractiveShell object>, display_banner=<object object>)\r\n    544                 if (not self.confirm_exit) \\\r\n    545                         or self.ask_yes_no('Do you really want to exit ([y]/n)?','y','n'):\r\n    546                     self.ask_exit()\r\n    547 \r\n    548             else:\r\n    549                 if code:\r\n    550                     self.run_cell(code, store_history=True)\r\n    551 \r\n    552     def mainloop(self, display_banner=DISPLAY_BANNER_DEPRECATED):\r\n    553         # An extra layer of protection in case someone mashing Ctrl-C breaks\r\n    554         # out of our internal code.\r\n    555         if display_banner is not DISPLAY_BANNER_DEPRECATED:\r\n    556             warn('mainloop `display_banner` argument is deprecated since IPython 5.0. Call `show_banner()` if needed.', DeprecationWarning, stacklevel=2)\r\n    557         while True:\r\n    558             try:\r\n--> 559                 self.interact()\r\n        self.interact = <bound method TerminalInteractiveShell.interact of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x10ad18730>>\r\n    560                 break\r\n    561             except KeyboardInterrupt as e:\r\n    562                 print(\"\\n%s escaped interact()\\n\" % type(e).__name__)\r\n    563             finally:\r\n    564                 # An interrupt during the eventloop will mess up the\r\n    565                 # internal state of the prompt_toolkit library.\r\n    566                 # Stopping the eventloop fixes this, see\r\n    567                 # https://github.com/ipython/ipython/pull/9867\r\n    568                 if hasattr(self, '_eventloop'):\r\n    569                     self._eventloop.stop()\r\n    570 \r\n    571                 self.restore_term_title()\r\n    572 \r\n    573 \r\n    574     _inputhook = None\r\n\r\n/usr/local/lib/python3.8/site-packages/IPython/terminal/interactiveshell.py in interact(self=<IPython.terminal.interactiveshell.TerminalInteractiveShell object>, display_banner=<object object>)\r\n    527     def ask_exit(self):\r\n    528         self.keep_running = False\r\n    529 \r\n    530     rl_next_input = None\r\n    531 \r\n    532     def interact(self, display_banner=DISPLAY_BANNER_DEPRECATED):\r\n    533 \r\n    534         if display_banner is not DISPLAY_BANNER_DEPRECATED:\r\n    535             warn('interact `display_banner` argument is deprecated since IPython 5.0. Call `show_banner()` if needed.', DeprecationWarning, stacklevel=2)\r\n    536 \r\n    537         self.keep_running = True\r\n    538         while self.keep_running:\r\n    539             print(self.separate_in, end='')\r\n    540 \r\n    541             try:\r\n--> 542                 code = self.prompt_for_code()\r\n        code = 'import numpy as np\\nimport mne\\nraw = mne.io.RawArray(np.random.random((10, 1000)), mne.create_info(10, 100))\\n'\r\n        self.prompt_for_code = <bound method TerminalInteractiveShell.prompt_for_code of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x10ad18730>>\r\n    543             except EOFError:\r\n    544                 if (not self.confirm_exit) \\\r\n    545                         or self.ask_yes_no('Do you really want to exit ([y]/n)?','y','n'):\r\n    546                     self.ask_exit()\r\n    547 \r\n    548             else:\r\n    549                 if code:\r\n    550                     self.run_cell(code, store_history=True)\r\n    551 \r\n    552     def mainloop(self, display_banner=DISPLAY_BANNER_DEPRECATED):\r\n    553         # An extra layer of protection in case someone mashing Ctrl-C breaks\r\n    554         # out of our internal code.\r\n    555         if display_banner is not DISPLAY_BANNER_DEPRECATED:\r\n    556             warn('mainloop `display_banner` argument is deprecated since IPython 5.0. Call `show_banner()` if needed.', DeprecationWarning, stacklevel=2)\r\n    557         while True:\r\n\r\n/usr/local/lib/python3.8/site-packages/IPython/terminal/interactiveshell.py in prompt_for_code(self=<IPython.terminal.interactiveshell.TerminalInteractiveShell object>)\r\n    453         # In order to make sure that asyncio code written in the\r\n    454         # interactive shell doesn't interfere with the prompt, we run the\r\n    455         # prompt in a different event loop.\r\n    456         # If we don't do this, people could spawn coroutine with a\r\n    457         # while/true inside which will freeze the prompt.\r\n    458 \r\n    459         try:\r\n    460             old_loop = asyncio.get_event_loop()\r\n    461         except RuntimeError:\r\n    462             # This happens when the user used `asyncio.run()`.\r\n    463             old_loop = None\r\n    464 \r\n    465         asyncio.set_event_loop(self.pt_loop)\r\n    466         try:\r\n    467             with patch_stdout(raw=True):\r\n--> 468                 text = self.pt_app.prompt(\r\n        text = undefined\r\n        self.pt_app.prompt = <bound method PromptSession.prompt of <prompt_toolkit.shortcuts.prompt.PromptSession object at 0x10c9770d0>>\r\n        default = ''\r\n        self._extra_prompt_options = <bound method TerminalInteractiveShell._extra_prompt_options of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x10ad18730>>\r\n    469                     default=default,\r\n    470                     **self._extra_prompt_options())\r\n    471         finally:\r\n    472             # Restore the original event loop.\r\n    473             asyncio.set_event_loop(old_loop)\r\n    474 \r\n    475         return text\r\n    476 \r\n    477     def enable_win_unicode_console(self):\r\n    478         # Since IPython 7.10 doesn't support python < 3.6 and PEP 528, Python uses the unicode APIs for the Windows\r\n    479         # console by default, so WUC shouldn't be needed.\r\n    480         from warnings import warn\r\n    481         warn(\"`enable_win_unicode_console` is deprecated since IPython 7.10, does not do anything and will be removed in the future\",\r\n    482              DeprecationWarning,\r\n    483              stacklevel=2)\r\n\r\n/usr/local/lib/python3.8/site-packages/prompt_toolkit/shortcuts/prompt.py in prompt(self=<prompt_toolkit.shortcuts.prompt.PromptSession object>, message=<prompt_toolkit.formatted_text.pygments.PygmentsTokens object>, editing_mode=None, refresh_interval=None, vi_mode=None, lexer=<IPython.terminal.ptutils.IPythonPTLexer object>, completer=None, complete_in_thread=False, is_password=None, key_bindings=None, bottom_toolbar=None, style=None, color_depth=None, include_default_pygments_style=None, style_transformation=None, swap_light_and_dark_colors=None, rprompt=None, multiline=True, prompt_continuation=<function TerminalInteractiveShell._extra_prompt_options.<locals>.<lambda>>, wrap_lines=None, enable_history_search=None, search_ignore_case=None, complete_while_typing=None, validate_while_typing=None, complete_style=<CompleteStyle.MULTI_COLUMN: 'MULTI_COLUMN'>, auto_suggest=None, validator=None, clipboard=None, mouse_support=None, input_processors=[ConditionalProcessor(processor=<prompt_toolkit.l...rompt_options.<locals>.<lambda> at 0x10ca3f0d0>))], reserve_space_for_menu=6, enable_system_prompt=None, enable_suspend=None, enable_open_in_editor=None, tempfile_suffix=None, tempfile=None, default='', accept_default=False, pre_run=None, set_exception_handler=True)\r\n    979             self.tempfile_suffix = tempfile_suffix\r\n    980         if tempfile is not None:\r\n    981             self.tempfile = tempfile\r\n    982 \r\n    983         self._add_pre_run_callables(pre_run, accept_default)\r\n    984         self.default_buffer.reset(\r\n    985             default if isinstance(default, Document) else Document(default)\r\n    986         )\r\n    987         self.app.refresh_interval = self.refresh_interval  # This is not reactive.\r\n    988 \r\n    989         # If we are using the default output, and have a dumb terminal. Use the\r\n    990         # dumb prompt.\r\n    991         if self._output is None and is_dumb_terminal():\r\n    992             return get_event_loop().run_until_complete(self._dumb_prompt(self.message))\r\n    993 \r\n--> 994         return self.app.run(set_exception_handler=set_exception_handler)\r\n        self.app.run = <bound method Application.run of <prompt_toolkit.application.application.Application object at 0x10c999340>>\r\n        set_exception_handler = True\r\n    995 \r\n    996     async def _dumb_prompt(self, message: AnyFormattedText = \"\") -> _T:\r\n    997         \"\"\"\r\n    998         Prompt function for dumb terminals.\r\n    999 \r\n   1000         Dumb terminals have minimum rendering capabilities. We can only print\r\n   1001         text to the screen. We can't use colors, and we can't do cursor\r\n   1002         movements. The Emacs inferior shell is an example of a dumb terminal.\r\n   1003 \r\n   1004         We will show the prompt, and wait for the input. We still handle arrow\r\n   1005         keys, and all custom key bindings, but we don't really render the\r\n   1006         cursor movements. Instead we only print the typed character that's\r\n   1007         right before the cursor.\r\n   1008         \"\"\"\r\n   1009         # Send prompt to output.\r\n\r\n/usr/local/lib/python3.8/site-packages/prompt_toolkit/application/application.py in run(self=<prompt_toolkit.application.application.Application object>, pre_run=None, set_exception_handler=True)\r\n    796         \"\"\"\r\n    797         # We don't create a new event loop by default, because we want to be\r\n    798         # sure that when this is called multiple times, each call of `run()`\r\n    799         # goes through the same event loop. This way, users can schedule\r\n    800         # background-tasks that keep running across multiple prompts.\r\n    801         try:\r\n    802             loop = get_event_loop()\r\n    803         except RuntimeError:\r\n    804             # Possibly we are not running in the main thread, where no event\r\n    805             # loop is set by default. Or somebody called `asyncio.run()`\r\n    806             # before, which closes the existing event loop. We can create a new\r\n    807             # loop.\r\n    808             loop = new_event_loop()\r\n    809             set_event_loop(loop)\r\n    810 \r\n--> 811         return loop.run_until_complete(\r\n        loop.run_until_complete = <bound method BaseEventLoop.run_until_complete of <_UnixSelectorEventLoop running=False closed=False debug=False>>\r\n        self.run_async = <bound method Application.run_async of <prompt_toolkit.application.application.Application object at 0x10c999340>>\r\n        pre_run = None\r\n        set_exception_handler = True\r\n    812             self.run_async(pre_run=pre_run, set_exception_handler=set_exception_handler)\r\n    813         )\r\n    814 \r\n    815     def _handle_exception(\r\n    816         self, loop: AbstractEventLoop, context: Dict[str, Any]\r\n    817     ) -> None:\r\n    818         \"\"\"\r\n    819         Handler for event loop exceptions.\r\n    820         This will print the exception, using run_in_terminal.\r\n    821         \"\"\"\r\n    822         # For Python 2: we have to get traceback at this point, because\r\n    823         # we're still in the 'except:' block of the event loop where the\r\n    824         # traceback is still available. Moving this code in the\r\n    825         # 'print_exception' coroutine will loose the exception.\r\n    826         tb = get_traceback_from_context(context)\r\n\r\n/usr/local/Cellar/python@3.8/3.8.2/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py in run_until_complete(self=<_UnixSelectorEventLoop running=False closed=False debug=False>, future=<Task finished name='Task-38' coro=<Application....(\"'Class' object has no attribute 'get_params'\")>)\r\n    601         future.add_done_callback(_run_until_complete_cb)\r\n    602         try:\r\n    603             self.run_forever()\r\n    604         except:\r\n    605             if new_task and future.done() and not future.cancelled():\r\n    606                 # The coroutine raised a BaseException. Consume the exception\r\n    607                 # to not log a warning, the caller doesn't have access to the\r\n    608                 # local task.\r\n    609                 future.exception()\r\n    610             raise\r\n    611         finally:\r\n    612             future.remove_done_callback(_run_until_complete_cb)\r\n    613         if not future.done():\r\n    614             raise RuntimeError('Event loop stopped before Future completed.')\r\n    615 \r\n--> 616         return future.result()\r\n        future.result = <built-in method result of _asyncio.Task object at 0x10c915d60>\r\n    617 \r\n    618     def stop(self):\r\n    619         \"\"\"Stop running the event loop.\r\n    620 \r\n    621         Every callback already scheduled will still run.  This simply informs\r\n    622         run_forever to stop looping after a complete iteration.\r\n    623         \"\"\"\r\n    624         self._stopping = True\r\n    625 \r\n    626     def close(self):\r\n    627         \"\"\"Close the event loop.\r\n    628 \r\n    629         This clears the queues and shuts down the executor,\r\n    630         but does not wait for the executor to finish.\r\n    631 \r\n\r\n/usr/local/lib/python3.8/site-packages/prompt_toolkit/application/application.py in run_async(self=<prompt_toolkit.application.application.Application object>, pre_run=None, set_exception_handler=True)\r\n    763                         # go in the finally! If `_run_async` raises\r\n    764                         # `KeyboardInterrupt`, we still want to wait for the\r\n    765                         # background tasks.\r\n    766                         await self.cancel_and_wait_for_background_tasks()\r\n    767 \r\n    768                         # Set the `_is_running` flag to `False`. Normally this\r\n    769                         # happened already in the finally block in `run_async`\r\n    770                         # above, but in case of exceptions, that's not always the\r\n    771                         # case.\r\n    772                         self._is_running = False\r\n    773                     return result\r\n    774             finally:\r\n    775                 if set_exception_handler:\r\n    776                     loop.set_exception_handler(previous_exc_handler)\r\n    777 \r\n--> 778         return await _run_async2()\r\n        _run_async2 = <function Application.run_async.<locals>._run_async2 at 0x117640040>\r\n    779 \r\n    780     def run(\r\n    781         self,\r\n    782         pre_run: Optional[Callable[[], None]] = None,\r\n    783         set_exception_handler: bool = True,\r\n    784     ) -> _AppResult:\r\n    785         \"\"\"\r\n    786         A blocking 'run' call that waits until the UI is finished.\r\n    787 \r\n    788         This will start the current asyncio event loop. If no loop is set for\r\n    789         the current thread, then it will create a new loop.\r\n    790 \r\n    791         :param pre_run: Optional callable, which is called right after the\r\n    792             \"reset\" of the application.\r\n    793         :param set_exception_handler: When set, in case of an exception, go out\r\n\r\n/usr/local/lib/python3.8/site-packages/prompt_toolkit/application/application.py in _run_async2()\r\n    751 \r\n    752             loop = get_event_loop()\r\n    753             if set_exception_handler:\r\n    754                 previous_exc_handler = loop.get_exception_handler()\r\n    755                 loop.set_exception_handler(self._handle_exception)\r\n    756 \r\n    757             try:\r\n    758                 with set_app(self):\r\n    759                     try:\r\n    760                         result = await _run_async()\r\n    761                     finally:\r\n    762                         # Wait for the background tasks to be done. This needs to\r\n    763                         # go in the finally! If `_run_async` raises\r\n    764                         # `KeyboardInterrupt`, we still want to wait for the\r\n    765                         # background tasks.\r\n--> 766                         await self.cancel_and_wait_for_background_tasks()\r\n        global self.cancel_and_wait_for_background_tasks = undefined\r\n    767 \r\n    768                         # Set the `_is_running` flag to `False`. Normally this\r\n    769                         # happened already in the finally block in `run_async`\r\n    770                         # above, but in case of exceptions, that's not always the\r\n    771                         # case.\r\n    772                         self._is_running = False\r\n    773                     return result\r\n    774             finally:\r\n    775                 if set_exception_handler:\r\n    776                     loop.set_exception_handler(previous_exc_handler)\r\n    777 \r\n    778         return await _run_async2()\r\n    779 \r\n    780     def run(\r\n    781         self,\r\n\r\n/usr/local/lib/python3.8/site-packages/prompt_toolkit/application/application.py in cancel_and_wait_for_background_tasks(self=<prompt_toolkit.application.application.Application object>)\r\n    852 \r\n    853     async def cancel_and_wait_for_background_tasks(self) -> None:\r\n    854         \"\"\"\r\n    855         Cancel all background tasks, and wait for the cancellation to be done.\r\n    856         If any of the background tasks raised an exception, this will also\r\n    857         propagate the exception.\r\n    858 \r\n    859         (If we had nurseries like Trio, this would be the `__aexit__` of a\r\n    860         nursery.)\r\n    861         \"\"\"\r\n    862         for task in self.background_tasks:\r\n    863             task.cancel()\r\n    864 \r\n    865         for task in self.background_tasks:\r\n    866             try:\r\n--> 867                 await task\r\n        task = <Task finished name='Task-76' coro=<Buffer._create_completer_coroutine.<locals>.async_completer() done, defined at /usr/local/lib/python3.8/site-packages/prompt_toolkit/buffer.py:1841> exception=AttributeError(\"'Class' object has no attribute 'get_params'\")>\r\n    868             except CancelledError:\r\n    869                 pass\r\n    870 \r\n    871     def cpr_not_supported_callback(self) -> None:\r\n    872         \"\"\"\r\n    873         Called when we don't receive the cursor position response in time.\r\n    874         \"\"\"\r\n    875         if not self.input.responds_to_cpr:\r\n    876             return  # We know about this already.\r\n    877 \r\n    878         def in_terminal() -> None:\r\n    879             self.output.write(\r\n    880                 \"WARNING: your terminal doesn't support cursor position requests (CPR).\\r\\n\"\r\n    881             )\r\n    882             self.output.flush()\r\n\r\n/usr/local/lib/python3.8/site-packages/prompt_toolkit/buffer.py in new_coroutine(*a=(), **kw={'complete_event': CompleteEvent(text_inserted=False, completion_requested=True), 'insert_common_part': True, 'select_first': False, 'select_last': False})\r\n   1839     running = False\r\n   1840 \r\n   1841     @wraps(coroutine)\r\n   1842     async def new_coroutine(*a: Any, **kw: Any) -> Any:\r\n   1843         nonlocal running\r\n   1844 \r\n   1845         # Don't start a new function, if the previous is still in progress.\r\n   1846         if running:\r\n   1847             return\r\n   1848 \r\n   1849         running = True\r\n   1850 \r\n   1851         try:\r\n   1852             while True:\r\n   1853                 try:\r\n-> 1854                     await coroutine(*a, **kw)\r\n        global coroutine = undefined\r\n        a = ()\r\n        kw = {'select_first': False, 'select_last': False, 'insert_common_part': True, 'complete_event': CompleteEvent(text_inserted=False, completion_requested=True)}\r\n   1855                 except _Retry:\r\n   1856                     continue\r\n   1857                 else:\r\n   1858                     return None\r\n   1859         finally:\r\n   1860             running = False\r\n   1861 \r\n   1862     return cast(_T, new_coroutine)\r\n   1863 \r\n   1864 \r\n   1865 class _Retry(Exception):\r\n   1866     \" Retry in `_only_one_at_a_time`. \"\r\n   1867 \r\n   1868 \r\n   1869 def indent(buffer: Buffer, from_row: int, to_row: int, count: int = 1) -> None:\r\n\r\n/usr/local/lib/python3.8/site-packages/prompt_toolkit/buffer.py in async_completer(select_first=False, select_last=False, insert_common_part=True, complete_event=CompleteEvent(text_inserted=False, completion_requested=True))\r\n   1668             complete_event = complete_event or CompleteEvent(text_inserted=True)\r\n   1669 \r\n   1670             # Don't complete when we already have completions.\r\n   1671             if self.complete_state or not self.completer:\r\n   1672                 return\r\n   1673 \r\n   1674             # Create an empty CompletionState.\r\n   1675             complete_state = CompletionState(original_document=self.document)\r\n   1676             self.complete_state = complete_state\r\n   1677 \r\n   1678             def proceed() -> bool:\r\n   1679                 \"\"\" Keep retrieving completions. Input text has not yet changed\r\n   1680                 while generating completions. \"\"\"\r\n   1681                 return self.complete_state == complete_state\r\n   1682 \r\n-> 1683             async for completion in self.completer.get_completions_async(\r\n        completion = undefined\r\n        global self.completer.get_completions_async = undefined\r\n        document = Document('raw.se', 6)\r\n        complete_event = CompleteEvent(text_inserted=False, completion_requested=True)\r\n   1684                 document, complete_event\r\n   1685             ):\r\n   1686                 complete_state.completions.append(completion)\r\n   1687                 self.on_completions_changed.fire()\r\n   1688 \r\n   1689                 # If the input text changes, abort.\r\n   1690                 if not proceed():\r\n   1691                     break\r\n   1692 \r\n   1693             completions = complete_state.completions\r\n   1694 \r\n   1695             # When there is only one completion, which has nothing to add, ignore it.\r\n   1696             if len(completions) == 1 and completion_does_nothing(\r\n   1697                 document, completions[0]\r\n   1698             ):\r\n\r\n/usr/local/lib/python3.8/site-packages/prompt_toolkit/completion/base.py in get_completions_async(self=DynamicCompleter(<function PromptSession._create...tutils.IPythonPTCompleter object at 0x10c7b83d0>), document=Document('raw.se', 6), complete_event=CompleteEvent(text_inserted=False, completion_requested=True))\r\n    254 \r\n    255     def __init__(self, get_completer: Callable[[], Optional[Completer]]) -> None:\r\n    256         self.get_completer = get_completer\r\n    257 \r\n    258     def get_completions(\r\n    259         self, document: Document, complete_event: CompleteEvent\r\n    260     ) -> Iterable[Completion]:\r\n    261         completer = self.get_completer() or DummyCompleter()\r\n    262         return completer.get_completions(document, complete_event)\r\n    263 \r\n    264     async def get_completions_async(\r\n    265         self, document: Document, complete_event: CompleteEvent\r\n    266     ) -> AsyncGenerator[Completion, None]:\r\n    267         completer = self.get_completer() or DummyCompleter()\r\n    268 \r\n--> 269         async for completion in completer.get_completions_async(\r\n        completion = undefined\r\n        completer.get_completions_async = <bound method Completer.get_completions_async of <IPython.terminal.ptutils.IPythonPTCompleter object at 0x10c7b83d0>>\r\n        document = Document('raw.se', 6)\r\n        complete_event = CompleteEvent(text_inserted=False, completion_requested=True)\r\n    270             document, complete_event\r\n    271         ):\r\n    272             yield completion\r\n    273 \r\n    274     def __repr__(self) -> str:\r\n    275         return \"DynamicCompleter(%r -> %r)\" % (self.get_completer, self.get_completer())\r\n    276 \r\n    277 \r\n    278 class _MergedCompleter(Completer):\r\n    279     \"\"\"\r\n    280     Combine several completers into one.\r\n    281     \"\"\"\r\n    282 \r\n    283     def __init__(self, completers: Sequence[Completer]) -> None:\r\n    284         self.completers = completers\r\n\r\n/usr/local/lib/python3.8/site-packages/prompt_toolkit/completion/base.py in get_completions_async(self=<IPython.terminal.ptutils.IPythonPTCompleter object>, document=Document('raw.se', 6), complete_event=CompleteEvent(text_inserted=False, completion_requested=True))\r\n    181         :param document: :class:`~prompt_toolkit.document.Document` instance.\r\n    182         :param complete_event: :class:`.CompleteEvent` instance.\r\n    183         \"\"\"\r\n    184         while False:\r\n    185             yield\r\n    186 \r\n    187     async def get_completions_async(\r\n    188         self, document: Document, complete_event: CompleteEvent\r\n    189     ) -> AsyncGenerator[Completion, None]:\r\n    190         \"\"\"\r\n    191         Asynchronous generator for completions. (Probably, you won't have to\r\n    192         override this.)\r\n    193 \r\n    194         Asynchronous generator of :class:`.Completion` objects.\r\n    195         \"\"\"\r\n--> 196         for item in self.get_completions(document, complete_event):\r\n        item = undefined\r\n        self.get_completions = <bound method IPythonPTCompleter.get_completions of <IPython.terminal.ptutils.IPythonPTCompleter object at 0x10c7b83d0>>\r\n        document = Document('raw.se', 6)\r\n        complete_event = CompleteEvent(text_inserted=False, completion_requested=True)\r\n    197             yield item\r\n    198 \r\n    199 \r\n    200 class ThreadedCompleter(Completer):\r\n    201     \"\"\"\r\n    202     Wrapper that runs the `get_completions` generator in a thread.\r\n    203 \r\n    204     (Use this to prevent the user interface from becoming unresponsive if the\r\n    205     generation of completions takes too much time.)\r\n    206 \r\n    207     The completions will be displayed as soon as they are produced. The user\r\n    208     can already select a completion, even if not all completions are displayed.\r\n    209     \"\"\"\r\n    210 \r\n    211     def __init__(self, completer: Completer) -> None:\r\n\r\n/usr/local/lib/python3.8/site-packages/IPython/terminal/ptutils.py in get_completions(self=<IPython.terminal.ptutils.IPythonPTCompleter object>, document=Document('raw.se', 6), complete_event=CompleteEvent(text_inserted=False, completion_requested=True))\r\n     77             return self.shell.Completer\r\n     78 \r\n     79     def get_completions(self, document, complete_event):\r\n     80         if not document.current_line.strip():\r\n     81             return\r\n     82         # Some bits of our completion system may print stuff (e.g. if a module\r\n     83         # is imported). This context manager ensures that doesn't interfere with\r\n     84         # the prompt.\r\n     85 \r\n     86         with patch_stdout(), provisionalcompleter():\r\n     87             body = document.text\r\n     88             cursor_row = document.cursor_position_row\r\n     89             cursor_col = document.cursor_position_col\r\n     90             cursor_position = document.cursor_position\r\n     91             offset = cursor_to_position(body, cursor_row, cursor_col)\r\n---> 92             yield from self._get_completions(body, offset, cursor_position, self.ipy_completer)\r\n        self._get_completions = <function IPythonPTCompleter._get_completions at 0x10c54f550>\r\n        body = 'raw.se'\r\n        offset = 6\r\n        cursor_position = 6\r\n        self.ipy_completer = <IPython.core.completer.IPCompleter object at 0x10c715820>\r\n     93 \r\n     94     @staticmethod\r\n     95     def _get_completions(body, offset, cursor_position, ipyc):\r\n     96         \"\"\"\r\n     97         Private equivalent of get_completions() use only for unit_testing.\r\n     98         \"\"\"\r\n     99         debug = getattr(ipyc, 'debug', False)\r\n    100         completions = _deduplicate_completions(\r\n    101             body, ipyc.completions(body, offset))\r\n    102         for c in completions:\r\n    103             if not c.text:\r\n    104                 # Guard against completion machinery giving us an empty string.\r\n    105                 continue\r\n    106             text = unicodedata.normalize('NFC', c.text)\r\n    107             # When the first character of the completion has a zero length,\r\n\r\n/usr/local/lib/python3.8/site-packages/IPython/terminal/ptutils.py in _get_completions(body='raw.se', offset=6, cursor_position=6, ipyc=<IPython.core.completer.IPCompleter object>)\r\n     87             body = document.text\r\n     88             cursor_row = document.cursor_position_row\r\n     89             cursor_col = document.cursor_position_col\r\n     90             cursor_position = document.cursor_position\r\n     91             offset = cursor_to_position(body, cursor_row, cursor_col)\r\n     92             yield from self._get_completions(body, offset, cursor_position, self.ipy_completer)\r\n     93 \r\n     94     @staticmethod\r\n     95     def _get_completions(body, offset, cursor_position, ipyc):\r\n     96         \"\"\"\r\n     97         Private equivalent of get_completions() use only for unit_testing.\r\n     98         \"\"\"\r\n     99         debug = getattr(ipyc, 'debug', False)\r\n    100         completions = _deduplicate_completions(\r\n    101             body, ipyc.completions(body, offset))\r\n--> 102         for c in completions:\r\n        c = undefined\r\n        completions = <generator object _deduplicate_completions at 0x122e8ef20>\r\n    103             if not c.text:\r\n    104                 # Guard against completion machinery giving us an empty string.\r\n    105                 continue\r\n    106             text = unicodedata.normalize('NFC', c.text)\r\n    107             # When the first character of the completion has a zero length,\r\n    108             # then it's probably a decomposed unicode character. E.g. caused by\r\n    109             # the \"\\dot\" completion. Try to compose again with the previous\r\n    110             # character.\r\n    111             if wcwidth(text[0]) == 0:\r\n    112                 if cursor_position + c.start > 0:\r\n    113                     char_before = body[c.start - 1]\r\n    114                     fixed_text = unicodedata.normalize(\r\n    115                         'NFC', char_before + text)\r\n    116 \r\n    117                     # Yield the modified completion instead, if this worked.\r\n\r\n/usr/local/lib/python3.8/site-packages/IPython/core/completer.py in _deduplicate_completions(text='raw.se', completions=<generator object IPCompleter.completions>)\r\n    423         iterator over the completions to deduplicate\r\n    424 \r\n    425     Yields\r\n    426     ------\r\n    427     `Completions` objects\r\n    428 \r\n    429 \r\n    430     Completions coming from multiple sources, may be different but end up having\r\n    431     the same effect when applied to ``text``. If this is the case, this will\r\n    432     consider completions as equal and only emit the first encountered.\r\n    433 \r\n    434     Not folded in `completions()` yet for debugging purpose, and to detect when\r\n    435     the IPython completer does return things that Jedi does not, but should be\r\n    436     at some point.\r\n    437     \"\"\"\r\n--> 438     completions = list(completions)\r\n        completions = <generator object IPCompleter.completions at 0x122e8eeb0>\r\n        global list = undefined\r\n    439     if not completions:\r\n    440         return\r\n    441 \r\n    442     new_start = min(c.start for c in completions)\r\n    443     new_end = max(c.end for c in completions)\r\n    444 \r\n    445     seen = set()\r\n    446     for c in completions:\r\n    447         new_text = text[new_start:c.start] + c.text + text[c.end:new_end]\r\n    448         if new_text not in seen:\r\n    449             yield c\r\n    450             seen.add(new_text)\r\n    451 \r\n    452 \r\n    453 def rectify_completions(text: str, completions: _IC, *, _debug=False)->_IC:\r\n\r\n/usr/local/lib/python3.8/site-packages/IPython/core/completer.py in completions(self=<IPython.core.completer.IPCompleter object>, text='raw.se', offset=6)\r\n   1804             and usual IPython completion.\r\n   1805 \r\n   1806         .. note::\r\n   1807 \r\n   1808             Completions are not completely deduplicated yet. If identical\r\n   1809             completions are coming from different sources this function does not\r\n   1810             ensure that each completion object will only be present once.\r\n   1811         \"\"\"\r\n   1812         warnings.warn(\"_complete is a provisional API (as of IPython 6.0). \"\r\n   1813                       \"It may change without warnings. \"\r\n   1814                       \"Use in corresponding context manager.\",\r\n   1815                       category=ProvisionalCompleterWarning, stacklevel=2)\r\n   1816 \r\n   1817         seen = set()\r\n   1818         try:\r\n-> 1819             for c in self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/1000):\r\n        c = undefined\r\n        self._completions = <bound method IPCompleter._completions of <IPython.core.completer.IPCompleter object at 0x10c715820>>\r\n        text = 'raw.se'\r\n        offset = 6\r\n        global _timeout = undefined\r\n        self.jedi_compute_type_timeout = 400\r\n   1820                 if c and (c in seen):\r\n   1821                     continue\r\n   1822                 yield c\r\n   1823                 seen.add(c)\r\n   1824         except KeyboardInterrupt:\r\n   1825             \"\"\"if completions take too long and users send keyboard interrupt,\r\n   1826             do not crash and return ASAP. \"\"\"\r\n   1827             pass\r\n   1828 \r\n   1829     def _completions(self, full_text: str, offset: int, *, _timeout)->Iterator[Completion]:\r\n   1830         \"\"\"\r\n   1831         Core completion module.Same signature as :any:`completions`, with the\r\n   1832         extra `timeout` parameter (in seconds).\r\n   1833 \r\n   1834 \r\n\r\n/usr/local/lib/python3.8/site-packages/IPython/core/completer.py in _completions(self=<IPython.core.completer.IPCompleter object>, full_text='raw.se', offset=6, _timeout=0.4)\r\n   1861 \r\n   1862         matched_text, matches, matches_origin, jedi_matches = self._complete(\r\n   1863             full_text=full_text, cursor_line=cursor_line, cursor_pos=cursor_column)\r\n   1864 \r\n   1865         iter_jm = iter(jedi_matches)\r\n   1866         if _timeout:\r\n   1867             for jm in iter_jm:\r\n   1868                 try:\r\n   1869                     type_ = jm.type\r\n   1870                 except Exception:\r\n   1871                     if self.debug:\r\n   1872                         print(\"Error in Jedi getting type of \", jm)\r\n   1873                     type_ = None\r\n   1874                 delta = len(jm.name_with_symbols) - len(jm.complete)\r\n   1875                 if type_ == 'function':\r\n-> 1876                     signature = _make_signature(jm)\r\n        signature = undefined\r\n        global _make_signature = <function _make_signature at 0x10c54b160>\r\n        jm = <Completion: set_annotations>\r\n   1877                 else:\r\n   1878                     signature = ''\r\n   1879                 yield Completion(start=offset - delta,\r\n   1880                                  end=offset,\r\n   1881                                  text=jm.name_with_symbols,\r\n   1882                                  type=type_,\r\n   1883                                  signature=signature,\r\n   1884                                  _origin='jedi')\r\n   1885 \r\n   1886                 if time.monotonic() > deadline:\r\n   1887                     break\r\n   1888 \r\n   1889         for jm in iter_jm:\r\n   1890             delta = len(jm.name_with_symbols) - len(jm.complete)\r\n   1891             yield Completion(start=offset - delta,\r\n\r\n/usr/local/lib/python3.8/site-packages/IPython/core/completer.py in _make_signature(completion=<Completion: set_annotations>)\r\n    976     Parameter\r\n    977     =========\r\n    978 \r\n    979     completion: jedi.Completion\r\n    980         object does not complete a function type\r\n    981 \r\n    982     Returns\r\n    983     =======\r\n    984 \r\n    985     a string consisting of the function signature, with the parenthesis but\r\n    986     without the function name. example:\r\n    987     `(a, *args, b=1, **kwargs)`\r\n    988 \r\n    989     \"\"\"\r\n    990 \r\n--> 991     return '(%s)'% ', '.join([f for f in (_formatparamchildren(p) for p in completion.params) if f])\r\n        global join = undefined\r\n        global f = undefined\r\n        global _formatparamchildren = <function _formatparamchildren at 0x10c54b0d0>\r\n        global p = undefined\r\n        completion.params = [<Name name='annotations', description='param annotations'>, <Name name='emit_warning', description='param emit_warning=True'>]\r\n    992 \r\n    993 class IPCompleter(Completer):\r\n    994     \"\"\"Extension of the completer class with IPython-specific features\"\"\"\r\n    995 \r\n    996     _names = None\r\n    997 \r\n    998     @observe('greedy')\r\n    999     def _greedy_changed(self, change):\r\n   1000         \"\"\"update the splitter and readline delims when greedy is changed\"\"\"\r\n   1001         if change['new']:\r\n   1002             self.splitter.delims = GREEDY_DELIMS\r\n   1003         else:\r\n   1004             self.splitter.delims = DELIMS\r\n   1005 \r\n   1006     dict_keys_only = Bool(False,\r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/cache.py in wrapper(self=<Completion: set_annotations>, *args=(), **kwargs={})\r\n     96         return wrapper\r\n     97 \r\n     98     return decorator\r\n     99 \r\n    100 \r\n    101 def memoize_method(method):\r\n    102     \"\"\"A normal memoize function.\"\"\"\r\n    103     @wraps(method)\r\n    104     def wrapper(self, *args, **kwargs):\r\n    105         cache_dict = self.__dict__.setdefault('_memoize_method_dct', {})\r\n    106         dct = cache_dict.setdefault(method, {})\r\n    107         key = (args, frozenset(kwargs.items()))\r\n    108         try:\r\n    109             return dct[key]\r\n    110         except KeyError:\r\n--> 111             result = method(self, *args, **kwargs)\r\n        result = undefined\r\n        global method = undefined\r\n        self = <Completion: set_annotations>\r\n        args = ()\r\n        kwargs = {}\r\n    112             dct[key] = result\r\n    113             return result\r\n    114     return wrapper\r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/api/classes.py in params(self=<Completion: set_annotations>)\r\n    464         )\r\n    465         resulting_names = [c.name for c in values]\r\n    466         return [self if n == self._name else Name(self._inference_state, n)\r\n    467                 for n in resulting_names]\r\n    468 \r\n    469     @property\r\n    470     @memoize_method\r\n    471     def params(self):\r\n    472         warnings.warn(\r\n    473             \"Deprecated since version 0.16.0. Use get_signatures()[...].params\",\r\n    474             DeprecationWarning,\r\n    475             stacklevel=2\r\n    476         )\r\n    477         # Only return the first one. There might be multiple one, especially\r\n    478         # with overloading.\r\n--> 479         for signature in self._get_signatures():\r\n        signature = undefined\r\n        self._get_signatures = <bound method BaseName._get_signatures of <Completion: set_annotations>>\r\n    480             return [\r\n    481                 Name(self._inference_state, n)\r\n    482                 for n in signature.get_param_names(resolve_stars=True)\r\n    483             ]\r\n    484 \r\n    485         if self.type == 'function' or self.type == 'class':\r\n    486             # Fallback, if no signatures were defined (which is probably by\r\n    487             # itself a bug).\r\n    488             return []\r\n    489         raise AttributeError('There are no params defined on this.')\r\n    490 \r\n    491     def parent(self):\r\n    492         \"\"\"\r\n    493         Returns the parent scope of this identifier.\r\n    494 \r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/api/classes.py in _get_signatures(self=<Completion: set_annotations>, for_docstring=False)\r\n    546         if lines is None:\r\n    547             # Probably a builtin module, just ignore in that case.\r\n    548             return ''\r\n    549 \r\n    550         index = self._name.start_pos[0] - 1\r\n    551         start_index = max(index - before, 0)\r\n    552         return ''.join(lines[start_index:index + after + 1])\r\n    553 \r\n    554     def _get_signatures(self, for_docstring=False):\r\n    555         if for_docstring and self._name.api_type == 'statement' and not self.is_stub():\r\n    556             # For docstrings we don't resolve signatures if they are simple\r\n    557             # statements and not stubs. This is a speed optimization.\r\n    558             return []\r\n    559 \r\n    560         names = convert_names([self._name], prefer_stubs=True)\r\n--> 561         return [sig for name in names for sig in name.infer().get_signatures()]\r\n        global sig = undefined\r\n        global name = undefined\r\n        names = [MixedName(<CompiledName: (<CompiledValueName: string_name=RawArray>).set_annotations>)]\r\n        global name.infer.get_signatures = undefined\r\n    562 \r\n    563     def get_signatures(self):\r\n    564         \"\"\"\r\n    565         Returns all potential signatures for a function or a class. Multiple\r\n    566         signatures are typical if you use Python stubs with ``@overload``.\r\n    567 \r\n    568         :rtype: list of :class:`BaseSignature`\r\n    569         \"\"\"\r\n    570         return [\r\n    571             BaseSignature(self._inference_state, s)\r\n    572             for s in self._get_signatures()\r\n    573         ]\r\n    574 \r\n    575     def execute(self):\r\n    576         \"\"\"\r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/api/classes.py in <listcomp>(.0=<list_iterator object>)\r\n    546         if lines is None:\r\n    547             # Probably a builtin module, just ignore in that case.\r\n    548             return ''\r\n    549 \r\n    550         index = self._name.start_pos[0] - 1\r\n    551         start_index = max(index - before, 0)\r\n    552         return ''.join(lines[start_index:index + after + 1])\r\n    553 \r\n    554     def _get_signatures(self, for_docstring=False):\r\n    555         if for_docstring and self._name.api_type == 'statement' and not self.is_stub():\r\n    556             # For docstrings we don't resolve signatures if they are simple\r\n    557             # statements and not stubs. This is a speed optimization.\r\n    558             return []\r\n    559 \r\n    560         names = convert_names([self._name], prefer_stubs=True)\r\n--> 561         return [sig for name in names for sig in name.infer().get_signatures()]\r\n        sig = undefined\r\n        name = MixedName(<CompiledName: (<CompiledValueName: string_name=RawArray>).set_annotations>)\r\n        global names = undefined\r\n        name.infer.get_signatures = undefined\r\n    562 \r\n    563     def get_signatures(self):\r\n    564         \"\"\"\r\n    565         Returns all potential signatures for a function or a class. Multiple\r\n    566         signatures are typical if you use Python stubs with ``@overload``.\r\n    567 \r\n    568         :rtype: list of :class:`BaseSignature`\r\n    569         \"\"\"\r\n    570         return [\r\n    571             BaseSignature(self._inference_state, s)\r\n    572             for s in self._get_signatures()\r\n    573         ]\r\n    574 \r\n    575     def execute(self):\r\n    576         \"\"\"\r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/cache.py in wrapper(self=MixedName(<CompiledName: (<CompiledValueName: string_name=RawArray>).set_annotations>), *args=(), **kwargs={})\r\n     96         return wrapper\r\n     97 \r\n     98     return decorator\r\n     99 \r\n    100 \r\n    101 def memoize_method(method):\r\n    102     \"\"\"A normal memoize function.\"\"\"\r\n    103     @wraps(method)\r\n    104     def wrapper(self, *args, **kwargs):\r\n    105         cache_dict = self.__dict__.setdefault('_memoize_method_dct', {})\r\n    106         dct = cache_dict.setdefault(method, {})\r\n    107         key = (args, frozenset(kwargs.items()))\r\n    108         try:\r\n    109             return dct[key]\r\n    110         except KeyError:\r\n--> 111             result = method(self, *args, **kwargs)\r\n        result = undefined\r\n        global method = undefined\r\n        self = MixedName(<CompiledName: (<CompiledValueName: string_name=RawArray>).set_annotations>)\r\n        args = ()\r\n        kwargs = {}\r\n    112             dct[key] = result\r\n    113             return result\r\n    114     return wrapper\r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/inference/compiled/mixed.py in infer(self=MixedName(<CompiledName: (<CompiledValueName: string_name=RawArray>).set_annotations>))\r\n    109         self._parent_tree_value = parent_tree_value\r\n    110 \r\n    111     @property\r\n    112     def start_pos(self):\r\n    113         values = list(self.infer())\r\n    114         if not values:\r\n    115             # This means a start_pos that doesn't exist (compiled objects).\r\n    116             return 0, 0\r\n    117         return values[0].name.start_pos\r\n    118 \r\n    119     @memoize_method\r\n    120     def infer(self):\r\n    121         compiled_value = self._wrapped_name.infer_compiled_value()\r\n    122         tree_value = self._parent_tree_value\r\n    123         if tree_value.is_instance() or tree_value.is_class():\r\n--> 124             tree_values = tree_value.py__getattribute__(self.string_name)\r\n        tree_values = undefined\r\n        tree_value.py__getattribute__ = <bound method HelperValueMixin.py__getattribute__ of <TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>>\r\n        self.string_name = 'set_annotations'\r\n    125             if compiled_value.is_function():\r\n    126                 return ValueSet({MixedObject(compiled_value, v) for v in tree_values})\r\n    127 \r\n    128         module_context = tree_value.get_root_context()\r\n    129         return _create(self._inference_state, compiled_value, module_context)\r\n    130 \r\n    131 \r\n    132 class MixedObjectFilter(compiled.CompiledValueFilter):\r\n    133     def __init__(self, inference_state, compiled_value, tree_value):\r\n    134         super(MixedObjectFilter, self).__init__(inference_state, compiled_value)\r\n    135         self._tree_value = tree_value\r\n    136 \r\n    137     def _create_name(self, name):\r\n    138         return MixedName(\r\n    139             super(MixedObjectFilter, self)._create_name(name),\r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/inference/base_value.py in py__getattribute__(self=<TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>, name_or_str='set_annotations', name_context=<TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>, position=None, analysis_errors=True)\r\n     71 \r\n     72     def goto(self, name_or_str, name_context=None, analysis_errors=True):\r\n     73         from jedi.inference import finder\r\n     74         filters = self._get_value_filters(name_or_str)\r\n     75         names = finder.filter_name(filters, name_or_str)\r\n     76         debug.dbg('context.goto %s in (%s): %s', name_or_str, self, names)\r\n     77         return names\r\n     78 \r\n     79     def py__getattribute__(self, name_or_str, name_context=None, position=None,\r\n     80                            analysis_errors=True):\r\n     81         \"\"\"\r\n     82         :param position: Position of the last statement -> tuple of line, column\r\n     83         \"\"\"\r\n     84         if name_context is None:\r\n     85             name_context = self\r\n---> 86         names = self.goto(name_or_str, name_context, analysis_errors)\r\n        names = undefined\r\n        self.goto = <bound method HelperValueMixin.goto of <TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>>\r\n        name_or_str = 'set_annotations'\r\n        name_context = <TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>\r\n        analysis_errors = True\r\n     87         values = ValueSet.from_sets(name.infer() for name in names)\r\n     88         if not values:\r\n     89             n = name_or_str.value if isinstance(name_or_str, Name) else name_or_str\r\n     90             values = self.py__getattribute__alternatives(n)\r\n     91 \r\n     92         if not names and not values and analysis_errors:\r\n     93             if isinstance(name_or_str, Name):\r\n     94                 from jedi.inference import analysis\r\n     95                 analysis.add_attribute_error(\r\n     96                     name_context, self, name_or_str)\r\n     97         debug.dbg('context.names_to_types: %s -> %s', names, values)\r\n     98         return values\r\n     99 \r\n    100     def py__await__(self):\r\n    101         await_value_set = self.py__getattribute__(u\"__await__\")\r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/inference/base_value.py in goto(self=<TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>, name_or_str='set_annotations', name_context=<TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>, analysis_errors=True)\r\n     60 \r\n     61     def _get_value_filters(self, name_or_str):\r\n     62         origin_scope = name_or_str if isinstance(name_or_str, Name) else None\r\n     63         for f in self.get_filters(origin_scope=origin_scope):\r\n     64             yield f\r\n     65         # This covers the case where a stub files are incomplete.\r\n     66         if self.is_stub():\r\n     67             from jedi.inference.gradual.conversion import convert_values\r\n     68             for c in convert_values(ValueSet({self})):\r\n     69                 for f in c.get_filters():\r\n     70                     yield f\r\n     71 \r\n     72     def goto(self, name_or_str, name_context=None, analysis_errors=True):\r\n     73         from jedi.inference import finder\r\n     74         filters = self._get_value_filters(name_or_str)\r\n---> 75         names = finder.filter_name(filters, name_or_str)\r\n        names = undefined\r\n        finder.filter_name = <function filter_name at 0x122eb08b0>\r\n        filters = <generator object HelperValueMixin._get_value_filters at 0x123cb2ac0>\r\n        name_or_str = 'set_annotations'\r\n     76         debug.dbg('context.goto %s in (%s): %s', name_or_str, self, names)\r\n     77         return names\r\n     78 \r\n     79     def py__getattribute__(self, name_or_str, name_context=None, position=None,\r\n     80                            analysis_errors=True):\r\n     81         \"\"\"\r\n     82         :param position: Position of the last statement -> tuple of line, column\r\n     83         \"\"\"\r\n     84         if name_context is None:\r\n     85             name_context = self\r\n     86         names = self.goto(name_or_str, name_context, analysis_errors)\r\n     87         values = ValueSet.from_sets(name.infer() for name in names)\r\n     88         if not values:\r\n     89             n = name_or_str.value if isinstance(name_or_str, Name) else name_or_str\r\n     90             values = self.py__getattribute__alternatives(n)\r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/inference/finder.py in filter_name(filters=<generator object HelperValueMixin._get_value_filters>, name_or_str='set_annotations')\r\n     20 \r\n     21 from jedi import settings\r\n     22 from jedi.inference.arguments import TreeArguments\r\n     23 from jedi.inference.value import iterable\r\n     24 from jedi.inference.base_value import NO_VALUES\r\n     25 from jedi.parser_utils import is_scope\r\n     26 \r\n     27 \r\n     28 def filter_name(filters, name_or_str):\r\n     29     \"\"\"\r\n     30     Searches names that are defined in a scope (the different\r\n     31     ``filters``), until a name fits.\r\n     32     \"\"\"\r\n     33     string_name = name_or_str.value if isinstance(name_or_str, Name) else name_or_str\r\n     34     names = []\r\n---> 35     for filter in filters:\r\n        filter = undefined\r\n        filters = <generator object HelperValueMixin._get_value_filters at 0x123cb2ac0>\r\n     36         names = filter.get(string_name)\r\n     37         if names:\r\n     38             break\r\n     39 \r\n     40     return list(_remove_del_stmt(names))\r\n     41 \r\n     42 \r\n     43 def _remove_del_stmt(names):\r\n     44     # Catch del statements and remove them from results.\r\n     45     for name in names:\r\n     46         if name.tree_name is not None:\r\n     47             definition = name.tree_name.get_definition()\r\n     48             if definition is not None and definition.type == 'del_stmt':\r\n     49                 continue\r\n     50         yield name\r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/inference/base_value.py in _get_value_filters(self=<TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>, name_or_str='set_annotations')\r\n     48 \r\n     49     def execute_annotation(self):\r\n     50         return self.execute_with_values()\r\n     51 \r\n     52     def gather_annotation_classes(self):\r\n     53         return ValueSet([self])\r\n     54 \r\n     55     def merge_types_of_iterate(self, contextualized_node=None, is_async=False):\r\n     56         return ValueSet.from_sets(\r\n     57             lazy_value.infer()\r\n     58             for lazy_value in self.iterate(contextualized_node, is_async)\r\n     59         )\r\n     60 \r\n     61     def _get_value_filters(self, name_or_str):\r\n     62         origin_scope = name_or_str if isinstance(name_or_str, Name) else None\r\n---> 63         for f in self.get_filters(origin_scope=origin_scope):\r\n        f = undefined\r\n        self.get_filters = <bound method _BaseTreeInstance.get_filters of <TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>>\r\n        origin_scope = None\r\n     64             yield f\r\n     65         # This covers the case where a stub files are incomplete.\r\n     66         if self.is_stub():\r\n     67             from jedi.inference.gradual.conversion import convert_values\r\n     68             for c in convert_values(ValueSet({self})):\r\n     69                 for f in c.get_filters():\r\n     70                     yield f\r\n     71 \r\n     72     def goto(self, name_or_str, name_context=None, analysis_errors=True):\r\n     73         from jedi.inference import finder\r\n     74         filters = self._get_value_filters(name_or_str)\r\n     75         names = finder.filter_name(filters, name_or_str)\r\n     76         debug.dbg('context.goto %s in (%s): %s', name_or_str, self, names)\r\n     77         return names\r\n     78 \r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/inference/value/instance.py in get_filters(self=<TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>, origin_scope=None, include_self_names=True)\r\n    164 \r\n    165 class _BaseTreeInstance(AbstractInstanceValue):\r\n    166     @property\r\n    167     def array_type(self):\r\n    168         name = self.class_value.py__name__()\r\n    169         if name in ['list', 'set', 'dict'] \\\r\n    170                 and self.parent_context.get_root_context().is_builtins_module():\r\n    171             return name\r\n    172         return None\r\n    173 \r\n    174     @property\r\n    175     def name(self):\r\n    176         return ValueName(self, self.class_value.name.tree_name)\r\n    177 \r\n    178     def get_filters(self, origin_scope=None, include_self_names=True):\r\n--> 179         class_value = self.get_annotated_class_object()\r\n        class_value = undefined\r\n        self.get_annotated_class_object = <bound method TreeInstance.get_annotated_class_object of <TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>>\r\n    180         if include_self_names:\r\n    181             for cls in class_value.py__mro__():\r\n    182                 if not cls.is_compiled():\r\n    183                     # In this case we're excluding compiled objects that are\r\n    184                     # not fake objects. It doesn't make sense for normal\r\n    185                     # compiled objects to search for self variables.\r\n    186                     yield SelfAttributeFilter(self, class_value, cls.as_context(), origin_scope)\r\n    187 \r\n    188         class_filters = class_value.get_filters(\r\n    189             origin_scope=origin_scope,\r\n    190             is_instance=True,\r\n    191         )\r\n    192         for f in class_filters:\r\n    193             if isinstance(f, ClassFilter):\r\n    194                 yield InstanceClassFilter(self, f)\r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/inference/value/instance.py in get_annotated_class_object(self=<TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>)\r\n    337                 # First check if the signature even matches, if not we don't\r\n    338                 # need to infer anything.\r\n    339                 continue\r\n    340             bound_method = BoundMethod(self, self.class_value.as_context(), signature.value)\r\n    341             all_annotations = py__annotations__(signature.value.tree_node)\r\n    342             type_var_dict = infer_type_vars_for_execution(bound_method, args, all_annotations)\r\n    343             if type_var_dict:\r\n    344                 defined, = self.class_value.define_generics(\r\n    345                     infer_type_vars_for_execution(signature.value, args, all_annotations),\r\n    346                 )\r\n    347                 debug.dbg('Inferred instance value as %s', defined, color='BLUE')\r\n    348                 return defined\r\n    349         return None\r\n    350 \r\n    351     def get_annotated_class_object(self):\r\n--> 352         return self._get_annotated_class_object() or self.class_value\r\n        self._get_annotated_class_object = <bound method _memoize_default.<locals>.func.<locals>.wrapper of <TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>>\r\n        self.class_value = <ClassValue: <Class: RawArray@14-88>>\r\n    353 \r\n    354     def get_key_values(self):\r\n    355         values = NO_VALUES\r\n    356         if self.array_type == 'dict':\r\n    357             for i, (key, instance) in enumerate(self._arguments.unpack()):\r\n    358                 if key is None and i == 0:\r\n    359                     values |= ValueSet.from_sets(\r\n    360                         v.get_key_values()\r\n    361                         for v in instance.infer()\r\n    362                         if v.array_type == 'dict'\r\n    363                     )\r\n    364                 if key:\r\n    365                     values |= ValueSet([compiled.create_simple_object(\r\n    366                         self.inference_state,\r\n    367                         key,\r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/inference/cache.py in wrapper(obj=<TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>, *args=(), **kwargs={})\r\n     28                 cache = args[0].memoize_cache  # needed for meta classes\r\n     29             else:\r\n     30                 cache = obj.inference_state.memoize_cache\r\n     31 \r\n     32             try:\r\n     33                 memo = cache[function]\r\n     34             except KeyError:\r\n     35                 cache[function] = memo = {}\r\n     36 \r\n     37             key = (obj, args, frozenset(kwargs.items()))\r\n     38             if key in memo:\r\n     39                 return memo[key]\r\n     40             else:\r\n     41                 if default is not _NO_DEFAULT:\r\n     42                     memo[key] = default\r\n---> 43                 rv = function(obj, *args, **kwargs)\r\n        rv = undefined\r\n        global function = undefined\r\n        obj = <TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>\r\n        args = ()\r\n        kwargs = {}\r\n     44                 memo[key] = rv\r\n     45                 return rv\r\n     46         return wrapper\r\n     47 \r\n     48     return func\r\n     49 \r\n     50 \r\n     51 def inference_state_function_cache(default=_NO_DEFAULT):\r\n     52     def decorator(func):\r\n     53         return _memoize_default(default=default, inference_state_is_first_arg=True)(func)\r\n     54 \r\n     55     return decorator\r\n     56 \r\n     57 \r\n     58 def inference_state_method_cache(default=_NO_DEFAULT):\r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/inference/value/instance.py in _get_annotated_class_object(self=<TreeInstance of <ClassValue: <Class: RawArray@14-88>>(<ValuesArguments: []>)>)\r\n    326     @inference_state_method_cache(default=None)\r\n    327     def _get_annotated_class_object(self):\r\n    328         from jedi.inference.gradual.annotation import py__annotations__, \\\r\n    329             infer_type_vars_for_execution\r\n    330 \r\n    331         args = InstanceArguments(self, self._arguments)\r\n    332         for signature in self.class_value.py__getattribute__('__init__').get_signatures():\r\n    333             # Just take the first result, it should always be one, because we\r\n    334             # control the typeshed code.\r\n    335             if not signature.matches_signature(args) \\\r\n    336                     or signature.value.tree_node is None:\r\n    337                 # First check if the signature even matches, if not we don't\r\n    338                 # need to infer anything.\r\n    339                 continue\r\n    340             bound_method = BoundMethod(self, self.class_value.as_context(), signature.value)\r\n--> 341             all_annotations = py__annotations__(signature.value.tree_node)\r\n        all_annotations = undefined\r\n        py__annotations__ = <function py__annotations__ at 0x10c453ca0>\r\n        signature.value.tree_node = <Class: MethodType@189-196>\r\n    342             type_var_dict = infer_type_vars_for_execution(bound_method, args, all_annotations)\r\n    343             if type_var_dict:\r\n    344                 defined, = self.class_value.define_generics(\r\n    345                     infer_type_vars_for_execution(signature.value, args, all_annotations),\r\n    346                 )\r\n    347                 debug.dbg('Inferred instance value as %s', defined, color='BLUE')\r\n    348                 return defined\r\n    349         return None\r\n    350 \r\n    351     def get_annotated_class_object(self):\r\n    352         return self._get_annotated_class_object() or self.class_value\r\n    353 \r\n    354     def get_key_values(self):\r\n    355         values = NO_VALUES\r\n    356         if self.array_type == 'dict':\r\n\r\n/usr/local/lib/python3.8/site-packages/jedi/inference/gradual/annotation.py in py__annotations__(funcdef=<Class: MethodType@189-196>)\r\n    172         if index >= len(params_comments):\r\n    173             return NO_VALUES\r\n    174 \r\n    175         param_comment = params_comments[index]\r\n    176         return _infer_annotation_string(\r\n    177             function_value.get_default_param_context(),\r\n    178             param_comment\r\n    179         )\r\n    180     # Annotations are like default params and resolve in the same way.\r\n    181     context = function_value.get_default_param_context()\r\n    182     return infer_annotation(context, annotation)\r\n    183 \r\n    184 \r\n    185 def py__annotations__(funcdef):\r\n    186     dct = {}\r\n--> 187     for function_param in funcdef.get_params():\r\n        function_param = undefined\r\n        funcdef.get_params = undefined\r\n    188         param_annotation = function_param.annotation\r\n    189         if param_annotation is not None:\r\n    190             dct[function_param.name.value] = param_annotation\r\n    191 \r\n    192     return_annotation = funcdef.annotation\r\n    193     if return_annotation:\r\n    194         dct['return'] = return_annotation\r\n    195     return dct\r\n    196 \r\n    197 \r\n    198 @inference_state_method_cache()\r\n    199 def infer_return_types(function, arguments):\r\n    200     \"\"\"\r\n    201     Infers the type of a function's return value,\r\n    202     according to type annotations.\r\n\r\nAttributeError: 'Class' object has no attribute 'get_params'\r\n```\r\n\r\n</details>\r\n\r\nI'm on macOS 10.15.4, Python 3.8.2 installed via Homebrew (but this also happens with Anaconda Python 3.7.7), IPython 7.14.0. Another user reported the same problem on Linux (https://github.com/mne-tools/mne-python/issues/7315). Other people have mentioned in this issue that they are not able to reproduce it so it seems a bit hit or miss.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1578", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1578/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1578/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1578/events", "html_url": "https://github.com/davidhalter/jedi/issues/1578", "id": 616213949, "node_id": "MDU6SXNzdWU2MTYyMTM5NDk=", "number": 1578, "title": "`_pseudotreenameclass` as `BaseName` type", "user": {"login": "muffinmad", "id": 2702727, "node_id": "MDQ6VXNlcjI3MDI3Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2702727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muffinmad", "html_url": "https://github.com/muffinmad", "followers_url": "https://api.github.com/users/muffinmad/followers", "following_url": "https://api.github.com/users/muffinmad/following{/other_user}", "gists_url": "https://api.github.com/users/muffinmad/gists{/gist_id}", "starred_url": "https://api.github.com/users/muffinmad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muffinmad/subscriptions", "organizations_url": "https://api.github.com/users/muffinmad/orgs", "repos_url": "https://api.github.com/users/muffinmad/repos", "events_url": "https://api.github.com/users/muffinmad/events{/privacy}", "received_events_url": "https://api.github.com/users/muffinmad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-11T21:55:13Z", "updated_at": "2020-05-13T16:59:08Z", "closed_at": "2020-05-13T16:59:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\nPython 3.7.4 (default, Sep 28 2019, 16:39:19) \r\n>>> from jedi import Script\r\n>>> Script('from typing import Any\\n').get_names()[0].type\r\n'_pseudotreenameclass'\r\n```\r\n\r\nPlease consider adding `_pseudotreenameclass` to the valid values list for [`BaseName.type`](https://jedi.readthedocs.io/en/latest/docs/api-classes.html#jedi.api.classes.BaseName.type) or maybe return `class` instead.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1577", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1577/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1577/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1577/events", "html_url": "https://github.com/davidhalter/jedi/issues/1577", "id": 616128903, "node_id": "MDU6SXNzdWU2MTYxMjg5MDM=", "number": 1577, "title": " Type of substraction result of datetime and datetime is not reported as timedelta", "user": {"login": "luabud", "id": 45497113, "node_id": "MDQ6VXNlcjQ1NDk3MTEz", "avatar_url": "https://avatars0.githubusercontent.com/u/45497113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luabud", "html_url": "https://github.com/luabud", "followers_url": "https://api.github.com/users/luabud/followers", "following_url": "https://api.github.com/users/luabud/following{/other_user}", "gists_url": "https://api.github.com/users/luabud/gists{/gist_id}", "starred_url": "https://api.github.com/users/luabud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luabud/subscriptions", "organizations_url": "https://api.github.com/users/luabud/orgs", "repos_url": "https://api.github.com/users/luabud/repos", "events_url": "https://api.github.com/users/luabud/events{/privacy}", "received_events_url": "https://api.github.com/users/luabud/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235916, "node_id": "MDU6TGFiZWwxNzIzNTkxNg==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/feature", "name": "feature", "color": "02e10c", "default": false, "description": null}, {"id": 1769857987, "node_id": "MDU6TGFiZWwxNzY5ODU3OTg3", "url": "https://api.github.com/repos/davidhalter/jedi/labels/help-wanted", "name": "help-wanted", "color": "d89217", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-11T19:32:43Z", "updated_at": "2020-05-15T21:57:57Z", "closed_at": "2020-05-15T21:53:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Reported in https://github.com/microsoft/python-language-server/issues/1542#issuecomment-624205386 by @cdeil \r\n\r\nI see a related bug in the vscode type inference - with Jedi enabled.\r\n\r\nReproducer:\r\n```python\r\nfrom datetime import datetime, timedelta\r\nnow = datetime.utcnow()\r\nfuture = datetime(2020, 6, 1)\r\ndelta = future - now\r\n```\r\n\r\nVSCode thinks delta is `datetime.datetime`, but it's a `datetime.timedelta` object.\r\n\r\n![Screenshot 2020-05-05 at 19 40 58](https://user-images.githubusercontent.com/852409/81097822-b8227e00-8f08-11ea-8628-52acf2fc9bda.png)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1576", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1576/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1576/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1576/events", "html_url": "https://github.com/davidhalter/jedi/issues/1576", "id": 615496809, "node_id": "MDU6SXNzdWU2MTU0OTY4MDk=", "number": 1576, "title": "Feature: end_line and end_column for api.classes.BaseName", "user": {"login": "pappasam", "id": 3723671, "node_id": "MDQ6VXNlcjM3MjM2NzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3723671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pappasam", "html_url": "https://github.com/pappasam", "followers_url": "https://api.github.com/users/pappasam/followers", "following_url": "https://api.github.com/users/pappasam/following{/other_user}", "gists_url": "https://api.github.com/users/pappasam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pappasam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pappasam/subscriptions", "organizations_url": "https://api.github.com/users/pappasam/orgs", "repos_url": "https://api.github.com/users/pappasam/repos", "events_url": "https://api.github.com/users/pappasam/events{/privacy}", "received_events_url": "https://api.github.com/users/pappasam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2020-05-10T23:08:02Z", "updated_at": "2020-05-17T23:14:01Z", "closed_at": "2020-05-17T23:14:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Feature\r\n\r\nWhen receiving a `Name`, there are use-cases where it's helpful to know the `end_line` and `end_column` associated with a symbol.\r\n\r\nName already supports `line` and `column`, so it doesn't seem like too much of a stretch to add these two new attributes.\r\n\r\n## Use case\r\n\r\nIn [jedi-language-server](https://github.com/pappasam/jedi-language-server), these values would be useful to support symbol range selection (used to create text objects based on symbols found in the document, including Functions, Classes, whatever LSP defines).\r\n\r\nI currently support this by accessing a hidden variable, and the result isn't perfect. The `end_column` is normally `0` and does not cover the full range of characters (eg, it'll omit the return statement of a function). I therefore hack it by adding a huge number in my return value. It'd be nice if Name's public API supported this so it doesn't need to be a hack.\r\n\r\n```python\r\ndef _document_symbol_range(name: Name) -> Range:\r\n    \"\"\"Get accurate full range of function\r\n\r\n    Thanks https://github.com/CXuesong from\r\n    https://github.com/palantir/python-language-server/pull/537/files for the\r\n    inspiration!\r\n\r\n    Note: I add tons of extra space to make dictionary completions work. Jedi\r\n    cuts off the end sometimes before the final function statement. This may be\r\n    the cause of bugs at some point.\r\n    \"\"\"\r\n    _name = (\r\n        name._name.tree_name.get_definition()  # pylint: disable=protected-access\r\n    )\r\n    (start_line, start_column) = _name.start_pos\r\n    (end_line, end_column) = _name.end_pos\r\n    return Range(\r\n        start=Position(start_line - 1, start_column),\r\n        end=Position(end_line - 1, end_column + 20000),\r\n    )\r\n```\r\n\r\nSee here for this function in context: https://github.com/pappasam/jedi-language-server/blob/v0.13.1/jedi_language_server/jedi_utils.py#L87", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1574", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1574/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1574/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1574/events", "html_url": "https://github.com/davidhalter/jedi/issues/1574", "id": 615292495, "node_id": "MDU6SXNzdWU2MTUyOTI0OTU=", "number": 1574, "title": "KeyError: 'arguments' when working with streamlit", "user": {"login": "sergei-grechanik", "id": 1084979, "node_id": "MDQ6VXNlcjEwODQ5Nzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1084979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergei-grechanik", "html_url": "https://github.com/sergei-grechanik", "followers_url": "https://api.github.com/users/sergei-grechanik/followers", "following_url": "https://api.github.com/users/sergei-grechanik/following{/other_user}", "gists_url": "https://api.github.com/users/sergei-grechanik/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergei-grechanik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergei-grechanik/subscriptions", "organizations_url": "https://api.github.com/users/sergei-grechanik/orgs", "repos_url": "https://api.github.com/users/sergei-grechanik/repos", "events_url": "https://api.github.com/users/sergei-grechanik/events{/privacy}", "received_events_url": "https://api.github.com/users/sergei-grechanik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-10T01:15:27Z", "updated_at": "2020-05-10T11:27:43Z", "closed_at": "2020-05-10T11:27:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code results in `KeyError: 'arguments' `:\r\n```\r\nimport jedi\r\njedi.Script(\"import streamlit; streamlit.altair_chart.\").complete()\r\n```\r\n\r\nPython 3.6.9 \r\nstreamlit 0.58.0 (installed from pip)\r\n\r\nStack trace: https://gist.github.com/sergei-grechanik/9f27cb4e5efdd4f4ba3d9a16b1a77e4f\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1573", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1573/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1573/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1573/events", "html_url": "https://github.com/davidhalter/jedi/issues/1573", "id": 615202705, "node_id": "MDU6SXNzdWU2MTUyMDI3MDU=", "number": 1573, "title": "AttributeError: 'NoneType' object has no attribute 'iter_return_stmts'", "user": {"login": "d-ryzhikov", "id": 17341482, "node_id": "MDQ6VXNlcjE3MzQxNDgy", "avatar_url": "https://avatars3.githubusercontent.com/u/17341482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-ryzhikov", "html_url": "https://github.com/d-ryzhikov", "followers_url": "https://api.github.com/users/d-ryzhikov/followers", "following_url": "https://api.github.com/users/d-ryzhikov/following{/other_user}", "gists_url": "https://api.github.com/users/d-ryzhikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-ryzhikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-ryzhikov/subscriptions", "organizations_url": "https://api.github.com/users/d-ryzhikov/orgs", "repos_url": "https://api.github.com/users/d-ryzhikov/repos", "events_url": "https://api.github.com/users/d-ryzhikov/events{/privacy}", "received_events_url": "https://api.github.com/users/d-ryzhikov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-09T15:42:19Z", "updated_at": "2020-05-10T15:12:43Z", "closed_at": "2020-05-10T09:38:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Discovered while using with deoplete-jedi in vim.\r\n\r\nStacktrace:\r\n```\r\n[deoplete] Traceback (most recent call last):\r\n  File \"/home/dmitry/.vim/bundle/deoplete.nvim/rplugin/python3/deoplete/child.py\", line 194, in _gather_results\r\n    result = self._get_result(context, source)\r\n  File \"/home/dmitry/.vim/bundle/deoplete.nvim/rplugin/python3/deoplete/child.py\", line 254, in _get_result\r\n    ctx['candidates'] = source.gather_candidates(ctx)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi/profiler.py\", line 37, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi.py\", line 189, in gather_candidates\r\n    completions = self.get_completions(script)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi/profiler.py\", line 37, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/sources/deoplete_jedi.py\", line 137, in get_completions\r\n    return script.completions()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/__init__.py\", line 291, in completions\r\n    return self.complete(*self._pos, fuzzy=fuzzy)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/helpers.py\", line 465, in wrapper\r\n    return func(self, line, column, *args, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/__init__.py\", line 275, in complete\r\n    return self._complete(line, column, **kwargs)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/__init__.py\", line 283, in _complete\r\n    return completion.complete()\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 145, in complete\r\n    cached_name, completion_names = self._complete_python(leaf)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 262, in _complete_python\r\n    cached_name, n = self._complete_trailer(dot.get_previous_leaf())\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 355, in _complete_trailer\r\n    return cached_name, self._complete_trailer_for_values(values)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 360, in _complete_trailer_for_values\r\n    return complete_trailer(user_context, values)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 509, in complete_trailer\r\n    completion_names += _complete_getattr(user_context, value)\r\n  File \"/home/dmitry/.vim/bundle/deoplete-jedi/rplugin/python3/deoplete/vendored/jedi/jedi/api/completion.py\", line 547, in _complete_getattr\r\n    for return_stmt in tree_node.iter_return_stmts():\r\nAttributeError: 'NoneType' object has no attribute 'iter_return_stmts'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1571", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1571/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1571/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1571/events", "html_url": "https://github.com/davidhalter/jedi/issues/1571", "id": 612914547, "node_id": "MDU6SXNzdWU2MTI5MTQ1NDc=", "number": 1571, "title": "jedi gives case-insensitive results", "user": {"login": "smithsp", "id": 782050, "node_id": "MDQ6VXNlcjc4MjA1MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/782050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smithsp", "html_url": "https://github.com/smithsp", "followers_url": "https://api.github.com/users/smithsp/followers", "following_url": "https://api.github.com/users/smithsp/following{/other_user}", "gists_url": "https://api.github.com/users/smithsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/smithsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smithsp/subscriptions", "organizations_url": "https://api.github.com/users/smithsp/orgs", "repos_url": "https://api.github.com/users/smithsp/repos", "events_url": "https://api.github.com/users/smithsp/events{/privacy}", "received_events_url": "https://api.github.com/users/smithsp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-05T21:45:22Z", "updated_at": "2020-05-06T21:25:28Z", "closed_at": "2020-05-06T21:14:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "jedi completions are great, but I just came across where the completions are matching on case insensitivity:\r\n```python\r\nimport jedi\r\nimport numpy\r\ns = 'numpy.A'\r\nS = jedi.Interpreter(s, [locals()])\r\nprint(S.complete(1,len(s)))#[0].complete)\r\n```\r\nThis yields all of the numpy functions that start with `a` or `A`:\r\n```\r\n[<Completion: abs>, <Completion: absolute>, <Completion: absolute_import>, <Completion: add>, <Completion: add_docstring>, <Completion: add_newdoc>, <Completion: add_newdoc_ufunc>, <Completion: alen>, <Completion: all>, <Completion: allclose>, <Completion: ALLOW_THREADS>, <Completion: alltrue>, <Completion: amax>, <Completion: amin>, <Completion: angle>, <Completion: any>, <Completion: append>, <Completion: apply_along_axis>, <Completion: apply_over_axes>, <Completion: arange>, <Completion: arccos>, <Completion: arccosh>, <Completion: arcsin>, <Completion: arcsinh>, <Completion: arctan>, <Completion: arctan2>, <Completion: arctanh>, <Completion: argmax>, <Completion: argmin>, <Completion: argpartition>, <Completion: argsort>, <Completion: argwhere>, <Completion: around>, <Completion: array>, <Completion: array2string>, <Completion: array_equal>, <Completion: array_equiv>, <Completion: array_repr>, <Completion: array_split>, <Completion: array_str>, <Completion: asanyarray>, <Completion: asarray>, <Completion: asarray_chkfinite>, <Completion: ascontiguousarray>, <Completion: asfarray>, <Completion: asfortranarray>, <Completion: asmatrix>, <Completion: asscalar>, <Completion: atleast_1d>, <Completion: atleast_2d>, <Completion: atleast_3d>, <Completion: average>, <Completion: AxisError>]\r\n```\r\nIs there a way to turn this matching case insensitivity off?\r\nMention @TimSlendebroek \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1569", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1569/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1569/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1569/events", "html_url": "https://github.com/davidhalter/jedi/issues/1569", "id": 612726503, "node_id": "MDU6SXNzdWU2MTI3MjY1MDM=", "number": 1569, "title": "Exclude `'` from completion name when inside string", "user": {"login": "muffinmad", "id": 2702727, "node_id": "MDQ6VXNlcjI3MDI3Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2702727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muffinmad", "html_url": "https://github.com/muffinmad", "followers_url": "https://api.github.com/users/muffinmad/followers", "following_url": "https://api.github.com/users/muffinmad/following{/other_user}", "gists_url": "https://api.github.com/users/muffinmad/gists{/gist_id}", "starred_url": "https://api.github.com/users/muffinmad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muffinmad/subscriptions", "organizations_url": "https://api.github.com/users/muffinmad/orgs", "repos_url": "https://api.github.com/users/muffinmad/repos", "events_url": "https://api.github.com/users/muffinmad/events{/privacy}", "received_events_url": "https://api.github.com/users/muffinmad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-05T16:17:53Z", "updated_at": "2020-05-05T21:28:48Z", "closed_at": "2020-05-05T21:28:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\nPython 3.7.4 (default, Sep 28 2019, 16:39:19) \r\n[Clang 11.0.0 (clang-1100.0.33.8)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import jedi\r\n>>> script = jedi.Script(\"foo = {'key': 0}; foo['\")\r\n>>> print(script.complete(1, 22)[0].name) #  point is after [\r\n'key'\r\n>>> print(script.complete(1, 23)[0].name) #  point is after last '\r\n'key'\r\n```\r\n\r\nInserting completion name at the end of in this code:\r\n```python\r\nfoo = {'key': 0}; foo[\r\n```\r\nwill result\r\n```python\r\nfoo = {'key': 0}; foo['key'\r\n```\r\n\r\nBut inserting completion name at the end of this code:\r\n```python\r\nfoo = {'key': 0}; foo['\r\n```\r\nwill result\r\n```python\r\nfoo = {'key': 0}; foo[''key'\r\n```\r\n\r\nIMO it would be better to not completion name include `'` in the later case.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1568", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1568/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1568/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1568/events", "html_url": "https://github.com/davidhalter/jedi/issues/1568", "id": 612175021, "node_id": "MDU6SXNzdWU2MTIxNzUwMjE=", "number": 1568, "title": "Go to definition doesn't highlight the last character", "user": {"login": "karrtikr", "id": 13199757, "node_id": "MDQ6VXNlcjEzMTk5NzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/13199757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karrtikr", "html_url": "https://github.com/karrtikr", "followers_url": "https://api.github.com/users/karrtikr/followers", "following_url": "https://api.github.com/users/karrtikr/following{/other_user}", "gists_url": "https://api.github.com/users/karrtikr/gists{/gist_id}", "starred_url": "https://api.github.com/users/karrtikr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karrtikr/subscriptions", "organizations_url": "https://api.github.com/users/karrtikr/orgs", "repos_url": "https://api.github.com/users/karrtikr/repos", "events_url": "https://api.github.com/users/karrtikr/events{/privacy}", "received_events_url": "https://api.github.com/users/karrtikr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-04T21:18:47Z", "updated_at": "2020-05-05T19:11:12Z", "closed_at": "2020-05-05T19:11:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please try this out in VSCode.\r\n\r\nThis is a screenshot with an example of code affected:\r\n![peek-definitions](https://user-images.githubusercontent.com/10964663/80796835-8627b980-8ba0-11ea-9810-002ca587855f.png)\r\n\r\n```python\r\ndef foo(a):\r\n    return a\r\n\r\nfoo(True)\r\n```\r\n\r\nRight click on `foo` and click `Go to definition`. The last character is not highlighted.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1567", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1567/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1567/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1567/events", "html_url": "https://github.com/davidhalter/jedi/issues/1567", "id": 611985364, "node_id": "MDU6SXNzdWU2MTE5ODUzNjQ=", "number": 1567, "title": "GoTo jumps to /jedi../stdlib", "user": {"login": "nusstter", "id": 63564407, "node_id": "MDQ6VXNlcjYzNTY0NDA3", "avatar_url": "https://avatars2.githubusercontent.com/u/63564407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nusstter", "html_url": "https://github.com/nusstter", "followers_url": "https://api.github.com/users/nusstter/followers", "following_url": "https://api.github.com/users/nusstter/following{/other_user}", "gists_url": "https://api.github.com/users/nusstter/gists{/gist_id}", "starred_url": "https://api.github.com/users/nusstter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nusstter/subscriptions", "organizations_url": "https://api.github.com/users/nusstter/orgs", "repos_url": "https://api.github.com/users/nusstter/repos", "events_url": "https://api.github.com/users/nusstter/events{/privacy}", "received_events_url": "https://api.github.com/users/nusstter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-04T15:57:39Z", "updated_at": "2020-05-04T16:36:27Z", "closed_at": "2020-05-04T16:36:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Issue\r\nGoTo goes to wrong location\r\n<!--\r\n\r\nPlease describe the issue here.\r\n\r\nIf you are not using jedi-vim from Git (but e.g. from a distribution's package,\r\nplease try it with jedi-vim's Git master, too).\r\n-->\r\nWhen i use goto on builtins it jumps to jedi-vim/pythonx/jedi/jedi/third_party/typeshed/stdlib/2and3/\r\nExample when i jump to assertRaises from unittest \r\ni jump to `/pythonx/jedi/jedi/third_party/typeshed/stdlib/3/unittest/case.pyi` but instead i want to jump to `/usr/lib/python3/unittest/case.py`\r\n\r\n\r\n:py3 print(sys.path) : \r\n```\r\n['/usr/lib/python37.zip', '/usr/lib/python3.7', '/usr/lib/python3.7/lib-dynload', '/home/lev/.local/l\r\nib/python3.7/site-packages', '/usr/local/lib/python3.7/dist-packages', '/usr/lib/python3/dist-package\r\ns', '_vim_path_']\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1566", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1566/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1566/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1566/events", "html_url": "https://github.com/davidhalter/jedi/issues/1566", "id": 610516080, "node_id": "MDU6SXNzdWU2MTA1MTYwODA=", "number": 1566, "title": "Add \".venv\" to `jedi.inference.references._IGNORE_FOLDERS`", "user": {"login": "pappasam", "id": 3723671, "node_id": "MDQ6VXNlcjM3MjM2NzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3723671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pappasam", "html_url": "https://github.com/pappasam", "followers_url": "https://api.github.com/users/pappasam/followers", "following_url": "https://api.github.com/users/pappasam/following{/other_user}", "gists_url": "https://api.github.com/users/pappasam/gists{/gist_id}", "starred_url": "https://api.github.com/users/pappasam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pappasam/subscriptions", "organizations_url": "https://api.github.com/users/pappasam/orgs", "repos_url": "https://api.github.com/users/pappasam/repos", "events_url": "https://api.github.com/users/pappasam/events{/privacy}", "received_events_url": "https://api.github.com/users/pappasam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235916, "node_id": "MDU6TGFiZWwxNzIzNTkxNg==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/feature", "name": "feature", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-01T02:21:59Z", "updated_at": "2020-05-05T19:15:19Z", "closed_at": "2020-05-05T19:15:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\".venv\" is a popular virtual environment folder name; `project.search` gets really mucked up when it isn't ignored.\r\n\r\nI've gotten around this issue in https://github.com/pappasam/jedi-language-server with the following line:\r\n\r\n```python\r\nimport jedi.inference.references\r\n# TODO: remove this once Jedi ignores '.venv' folders by default\r\n# without this line, Jedi will search in '.venv' folders\r\njedi.inference.references._IGNORE_FOLDERS = (\r\n    *jedi.inference.references._IGNORE_FOLDERS,\r\n    \".venv\",\r\n)\r\n```\r\n\r\nWe can also consider making this `_IGNORE_FOLDERS` a jedi configuration. I can make it configurable in my language server for end users, but I figure we probably want an official jedi API that isn't quite as \"private\" as the above. What do you think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1565", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1565/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1565/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1565/events", "html_url": "https://github.com/davidhalter/jedi/issues/1565", "id": 610414210, "node_id": "MDU6SXNzdWU2MTA0MTQyMTA=", "number": 1565, "title": "RecursionError on Completion.docstring() call", "user": {"login": "konomith", "id": 5632138, "node_id": "MDQ6VXNlcjU2MzIxMzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5632138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konomith", "html_url": "https://github.com/konomith", "followers_url": "https://api.github.com/users/konomith/followers", "following_url": "https://api.github.com/users/konomith/following{/other_user}", "gists_url": "https://api.github.com/users/konomith/gists{/gist_id}", "starred_url": "https://api.github.com/users/konomith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konomith/subscriptions", "organizations_url": "https://api.github.com/users/konomith/orgs", "repos_url": "https://api.github.com/users/konomith/repos", "events_url": "https://api.github.com/users/konomith/events{/privacy}", "received_events_url": "https://api.github.com/users/konomith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-30T21:58:33Z", "updated_at": "2020-05-01T16:06:33Z", "closed_at": "2020-05-01T16:06:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "`jedi` is unable to extract the docstring of `django.db.models.ExpressionList`, resulting in a `RecursionError`.  \r\nSteps to reproduce:  \r\n* Tested on a fresh virtualenv with `python 3.8.0`.\r\n``` bash\r\n/tmp$ pip list\r\nPackage    Version\r\n---------- -------\r\nDjango     2.2.12 \r\njedi       0.17.0 \r\nparso      0.7.0  \r\npip        20.0.2 \r\npytz       2020.1 \r\nsetuptools 46.1.3 \r\nsqlparse   0.3.1  \r\nwheel      0.34.2 \r\n``` \r\n\r\n* Narrowing down the offending object:  \r\n``` python\r\n>>> import jedi\r\n>>> s = jedi.Script('from django.db import models; models.')\r\n>>> compls = s.complete()\r\n>>> for c in compls:\r\n>>>     try:\r\n>>>         d = c.docstring()\r\n>>>     except Exception:  # remove this to get the stacktrace\r\n>>>         print(c)\r\n<Completion: ExpressionList>\r\n```\r\n* The full stacktrace can be found here: https://pastebin.com/QAPNmvDc\r\n* The docstring can be found here: https://github.com/django/django/blob/2.2.12/django/db/models/expressions.py#L819", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1563", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1563/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1563/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1563/events", "html_url": "https://github.com/davidhalter/jedi/issues/1563", "id": 607715852, "node_id": "MDU6SXNzdWU2MDc3MTU4NTI=", "number": 1563, "title": "crash on Python 3.7", "user": {"login": "Akuli", "id": 18505570, "node_id": "MDQ6VXNlcjE4NTA1NTcw", "avatar_url": "https://avatars1.githubusercontent.com/u/18505570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Akuli", "html_url": "https://github.com/Akuli", "followers_url": "https://api.github.com/users/Akuli/followers", "following_url": "https://api.github.com/users/Akuli/following{/other_user}", "gists_url": "https://api.github.com/users/Akuli/gists{/gist_id}", "starred_url": "https://api.github.com/users/Akuli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Akuli/subscriptions", "organizations_url": "https://api.github.com/users/Akuli/orgs", "repos_url": "https://api.github.com/users/Akuli/repos", "events_url": "https://api.github.com/users/Akuli/events{/privacy}", "received_events_url": "https://api.github.com/users/Akuli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-27T17:18:27Z", "updated_at": "2020-04-28T18:37:40Z", "closed_at": "2020-04-28T18:37:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nPython 3.7.3 (default, Dec 20 2019, 18:57:59) \r\n[GCC 8.3.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import jedi\r\n>>> jedi.__version__\r\n'0.15.2'\r\n>>> jedi.Script('import os\\nos.').completions()\r\nTraceback (most recent call last):\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/cache.py\", line 141, in wrapper\r\n    return dct[key]\r\nKeyError: ((), frozenset())\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/api/__init__.py\", line 217, in completions\r\n    return completion.completions(fuzzy)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/api/completion.py\", line 94, in completions\r\n    return self._completions(fuzzy, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/api/completion.py\", line 109, in _completions\r\n    completion_names = self._get_value_completions(leaf)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/api/completion.py\", line 218, in _get_value_completions\r\n    completion_names += self._trailer_completions(dot.get_previous_leaf())\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/api/completion.py\", line 270, in _trailer_completions\r\n    completion_names += filter.values()\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/filters.py\", line 243, in values\r\n    return [n for filter in self._filters for n in filter.values()]\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/filters.py\", line 243, in <listcomp>\r\n    return [n for filter in self._filters for n in filter.values()]\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/filters.py\", line 92, in values\r\n    for name_key in self._used_names\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/filters.py\", line 87, in _convert_names\r\n    return [self.name_class(self.parent_context, name) for name in names]\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/filters.py\", line 87, in <listcomp>\r\n    return [self.name_class(self.parent_context, name) for name in names]\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>\r\n    **filter_kwargs\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter\r\n    return list(self._check_flows(names))\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows\r\n    origin_scope=self._origin_scope\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 78, in reachability_check\r\n    return _break_check(context, value_scope, first_flow_scope, node)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check\r\n    reachable = _check_if(context, flow_node)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 113, in _check_if\r\n    types = context.infer_node(node)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/context.py\", line 210, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 148, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 161, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/cache.py\", line 42, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 166, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 62, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 248, in _infer_node\r\n    return infer_or_test(context, element)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 453, in infer_or_test\r\n    types = context.infer_node(next(iterator))\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/context.py\", line 210, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 148, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 161, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/cache.py\", line 42, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 166, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 62, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 248, in _infer_node\r\n    return infer_or_test(context, element)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 471, in infer_or_test\r\n    context.infer_node(right))\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 524, in _infer_comparison\r\n    for left in left_values\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/common/value.py\", line 32, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 525, in <genexpr>\r\n    for right in right_values\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 601, in _infer_comparison_part\r\n    if left.is_compiled() and right.is_compiled():\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 287, in __getattr__\r\n    return getattr(self._wrapped_value, name)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/utils.py\", line 75, in wrapper\r\n    return func(*args, **kwds)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/cache.py\", line 143, in wrapper\r\n    result = method(self, *args, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 295, in _wrapped_value\r\n    return self._get_wrapped_value()\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 202, in _get_wrapped_value\r\n    TupleGenericManager(self._get_generics())\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 194, in _get_generics\r\n    return (self.merge_types_of_iterate().py__class__(),)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 58, in merge_types_of_iterate\r\n    for lazy_value in self.iterate(contextualized_node, is_async)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/common/value.py\", line 32, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 57, in <genexpr>\r\n    lazy_value.infer()\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 346, in py__iter__\r\n    for addition in check_array_additions(self._defining_context, self):\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/value/dynamic_arrays.py\", line 40, in check_array_additions\r\n    return _internal_check_array_additions(context, sequence)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/cache.py\", line 42, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/value/dynamic_arrays.py\", line 110, in _internal_check_array_additions\r\n    cut_own_trailer=True\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/helpers.py\", line 106, in infer_call_of_leaf\r\n    values = context.infer_node(base)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/context.py\", line 210, in infer_node\r\n    return infer_node(self, node)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 148, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 161, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/cache.py\", line 42, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 166, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 62, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 176, in _infer_node\r\n    return infer_atom(context, element)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 301, in infer_atom\r\n    return context.py__getattribute__(atom, position=position)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/common/value.py\", line 32, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>\r\n    values = ValueSet.from_sets(name.infer() for name in names)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/names.py\", line 237, in infer\r\n    self.tree_name\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper\r\n    return built_functions[name](*args, **kwargs)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 827, in wrapper\r\n    return func(inference_state, context, tree_name)\r\n  File \"/home/akuli/porcu/env/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 744, in tree_name_to_values\r\n    raise ValueError(\"Should not happen. type: %s\" % typ)\r\nValueError: Should not happen. type: del_stmt\r\n>>> \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1560", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1560/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1560/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1560/events", "html_url": "https://github.com/davidhalter/jedi/issues/1560", "id": 606876636, "node_id": "MDU6SXNzdWU2MDY4NzY2MzY=", "number": 1560, "title": "No completions for method returning class generic type when __init__ contains nested tuple type", "user": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidhalter", "id": 748594, "node_id": "MDQ6VXNlcjc0ODU5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/748594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhalter", "html_url": "https://github.com/davidhalter", "followers_url": "https://api.github.com/users/davidhalter/followers", "following_url": "https://api.github.com/users/davidhalter/following{/other_user}", "gists_url": "https://api.github.com/users/davidhalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhalter/subscriptions", "organizations_url": "https://api.github.com/users/davidhalter/orgs", "repos_url": "https://api.github.com/users/davidhalter/repos", "events_url": "https://api.github.com/users/davidhalter/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhalter/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-04-25T23:26:45Z", "updated_at": "2020-06-14T16:12:45Z", "closed_at": "2020-06-14T16:11:57Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "(Discovered while exploring a issue with `NamedTuple`s)\r\n``` python\r\nfrom typing import List, Tuple, TypeVar, Generic, NewType\r\n\r\nT = TypeVar('T')\r\n\r\n\r\nclass That(Generic[T]):\r\n    # It doesn't seem to matter where the `T` comes in this signature - just\r\n    # somewhere so that it's valid from an annotation perspective.\r\n    def __init__(self, items: List[Tuple[str, T]]) -> None:\r\n        pass\r\n\r\n    # I don't think it matters that this is `T` specifically - it just needs to\r\n    # be something non-concrete, so that jedi is forced to evaluate the class\r\n    # rather than being able to short-circuit that by looking only at the annotation.\r\n    def get(self) -> T:\r\n        pass\r\n\r\ninst = That([(\"abc\", 2)])\r\n\r\n# No completions here, but should have completions for `int`\r\ninst.get().\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1557", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1557/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1557/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1557/events", "html_url": "https://github.com/davidhalter/jedi/issues/1557", "id": 605816230, "node_id": "MDU6SXNzdWU2MDU4MTYyMzA=", "number": 1557, "title": "Script.help after closing parenthesis", "user": {"login": "muffinmad", "id": 2702727, "node_id": "MDQ6VXNlcjI3MDI3Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2702727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muffinmad", "html_url": "https://github.com/muffinmad", "followers_url": "https://api.github.com/users/muffinmad/followers", "following_url": "https://api.github.com/users/muffinmad/following{/other_user}", "gists_url": "https://api.github.com/users/muffinmad/gists{/gist_id}", "starred_url": "https://api.github.com/users/muffinmad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muffinmad/subscriptions", "organizations_url": "https://api.github.com/users/muffinmad/orgs", "repos_url": "https://api.github.com/users/muffinmad/repos", "events_url": "https://api.github.com/users/muffinmad/events{/privacy}", "received_events_url": "https://api.github.com/users/muffinmad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-23T19:45:18Z", "updated_at": "2020-04-25T22:35:27Z", "closed_at": "2020-04-25T22:35:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\n>>> print(Script('f()').help(1, 3)[0].docstring())\r\nSequence Types \u2014 \"list\", \"tuple\", \"range\"\r\n```\r\n\r\nLooks like help for sequence types is always showed after `)`, e.g. `def foo()` or `if foo and (bar or baz)`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1556", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1556/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1556/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1556/events", "html_url": "https://github.com/davidhalter/jedi/issues/1556", "id": 604672790, "node_id": "MDU6SXNzdWU2MDQ2NzI3OTA=", "number": 1556, "title": "Script('\\n').help(1, 0): 'NoneType' object has no attribute 'type'", "user": {"login": "muffinmad", "id": 2702727, "node_id": "MDQ6VXNlcjI3MDI3Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2702727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/muffinmad", "html_url": "https://github.com/muffinmad", "followers_url": "https://api.github.com/users/muffinmad/followers", "following_url": "https://api.github.com/users/muffinmad/following{/other_user}", "gists_url": "https://api.github.com/users/muffinmad/gists{/gist_id}", "starred_url": "https://api.github.com/users/muffinmad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/muffinmad/subscriptions", "organizations_url": "https://api.github.com/users/muffinmad/orgs", "repos_url": "https://api.github.com/users/muffinmad/repos", "events_url": "https://api.github.com/users/muffinmad/events{/privacy}", "received_events_url": "https://api.github.com/users/muffinmad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-22T11:15:45Z", "updated_at": "2020-04-22T15:32:50Z", "closed_at": "2020-04-22T15:32:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "With Jedi 0.17.0/latest master:\r\n\r\n```\r\nPython 3.7.4 (default, Sep 28 2019, 16:39:19) \r\n[Clang 11.0.0 (clang-1100.0.33.8)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from jedi import Script\r\n>>> Script('\\n').help(1, 0)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/mad/.virtualenvs/jedi/lib/python3.7/site-packages/jedi/api/helpers.py\", line 482, in wrapper\r\n    return func(self, line, column, *args, **kwargs)\r\n  File \"/Users/mad/.virtualenvs/jedi/lib/python3.7/site-packages/jedi/api/__init__.py\", line 475, in help\r\n    if leaf.type in ('keyword', 'operator', 'error_leaf'):\r\nAttributeError: 'NoneType' object has no attribute 'type'\r\n```\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1555", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1555/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1555/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1555/events", "html_url": "https://github.com/davidhalter/jedi/issues/1555", "id": 602788314, "node_id": "MDU6SXNzdWU2MDI3ODgzMTQ=", "number": 1555, "title": "Autocompletion error for python while using CoC - VIM", "user": {"login": "surmish", "id": 33273194, "node_id": "MDQ6VXNlcjMzMjczMTk0", "avatar_url": "https://avatars2.githubusercontent.com/u/33273194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/surmish", "html_url": "https://github.com/surmish", "followers_url": "https://api.github.com/users/surmish/followers", "following_url": "https://api.github.com/users/surmish/following{/other_user}", "gists_url": "https://api.github.com/users/surmish/gists{/gist_id}", "starred_url": "https://api.github.com/users/surmish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/surmish/subscriptions", "organizations_url": "https://api.github.com/users/surmish/orgs", "repos_url": "https://api.github.com/users/surmish/repos", "events_url": "https://api.github.com/users/surmish/events{/privacy}", "received_events_url": "https://api.github.com/users/surmish/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-19T18:31:24Z", "updated_at": "2020-04-20T08:12:29Z", "closed_at": "2020-04-19T20:22:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why does this keep showing up? I have jedi and python installed. I saw a similar issue but the submitter closed it without posting the resolution.\r\n\r\n```\r\n[coc.nvim] Jedi error: Traceback (most recent call last):\r\n  File \"completion.py\", line 624, in watch\r\n    response = self._process_request(rq)\r\n  File \"completion.py\", line 574, in _process_request\r\n    sys_path=sys.path, environment=self.environment)\r\n  File \"/home/ubuntu/.local/lib/python3.7/site-packages/jedi/api/__init__.py\", line 133, in __init__\r\n    project._sys_path = sys_path\r\nAttributeError: 'NoneType' object has no attribute '_sys_path'\r\n```\r\n\r\nThe line 133 in __init__.py mentioned above has the following code with a TODO:\r\n```python\r\n# TODO deprecate and remove sys_path from the Script API.\r\nif sys_path is not None:\r\n  project._sys_path = sys_path                                                                                              \r\n  warnings.warn(\r\n    \"Deprecated since version 0.17.0. Use the project API instead, \"\r\n    \"which means Script(project=Project(dir, sys_path=sys_path)) instead.\",\r\n    DeprecationWarning,\r\n    stacklevel=2\r\n  )\r\n```       \r\nIs the TODO relevant to the error I'm seeing? It seems so because `project._sys_path` seems to be `NoneType` and due to this looking for the attribute `._sys_path` results in an error. Can you please look into this? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1552", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1552/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1552/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1552/events", "html_url": "https://github.com/davidhalter/jedi/issues/1552", "id": 602511988, "node_id": "MDU6SXNzdWU2MDI1MTE5ODg=", "number": 1552, "title": "NotADirectoryError passing a file path to get_default_project", "user": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 23395212, "node_id": "MDU6TGFiZWwyMzM5NTIxMg==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/discussion", "name": "discussion", "color": "444444", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-18T17:39:42Z", "updated_at": "2020-04-25T22:36:16Z", "closed_at": "2020-04-25T22:35:27Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "It _looks_ like `get_default_project` might be able to cope with file paths (certainly the logic at the end of the function checks `isdir`), however in practise we get an error if the path to an existing file is given.\r\n\r\nStacktrace:\r\n```\r\n  File \".../jedi/api/project.py\", line 383, in get_default_project\r\n    return Project.load(dir)\r\n  File \".../jedi/api/project.py\", line 92, in load\r\n    with open(cls._get_json_path(path)) as f:\r\nNotADirectoryError: [Errno 20] Not a directory: '.../project/demo.py/.jedi/project.json'\r\n```\r\n\r\nIf this is expected, it might be worth updating the docstring to clarify that a directory path is expected (and remove the `isdir` check at the bottom of the function?).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1551", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1551/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1551/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1551/events", "html_url": "https://github.com/davidhalter/jedi/issues/1551", "id": 602508227, "node_id": "MDU6SXNzdWU2MDI1MDgyMjc=", "number": 1551, "title": "Specifying sys_path without a project errors", "user": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-18T17:20:50Z", "updated_at": "2020-04-18T17:22:21Z", "closed_at": "2020-04-18T17:22:21Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Not sure if this was intentional with the introduction of projects, however the construction of a `Script` using the `sys_path` kwarg in `0.17.0` errors because `jedi` attempts to assign `project._sys_path = sys_path` yet `project` is `None` at this point.\r\n\r\nA possible fix might be to construct the default `project` earlier in `Script.__init__`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1550", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1550/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1550/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1550/events", "html_url": "https://github.com/davidhalter/jedi/issues/1550", "id": 601866326, "node_id": "MDU6SXNzdWU2MDE4NjYzMjY=", "number": 1550, "title": "Using astropy.units.quantity_input decorator on __init__ crashes completition", "user": {"login": "noc0lour", "id": 4438327, "node_id": "MDQ6VXNlcjQ0MzgzMjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4438327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noc0lour", "html_url": "https://github.com/noc0lour", "followers_url": "https://api.github.com/users/noc0lour/followers", "following_url": "https://api.github.com/users/noc0lour/following{/other_user}", "gists_url": "https://api.github.com/users/noc0lour/gists{/gist_id}", "starred_url": "https://api.github.com/users/noc0lour/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noc0lour/subscriptions", "organizations_url": "https://api.github.com/users/noc0lour/orgs", "repos_url": "https://api.github.com/users/noc0lour/repos", "events_url": "https://api.github.com/users/noc0lour/events{/privacy}", "received_events_url": "https://api.github.com/users/noc0lour/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-17T10:20:38Z", "updated_at": "2020-04-18T20:16:19Z", "closed_at": "2020-04-17T22:39:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using jedi inside of `anaconda-mode` in Emacs for autocompletion and if a class in a module uses [`astropy.units.quantity_input`](https://github.com/astropy/astropy/blob/d91f4441ee45f406efa3a470fa092392b806190d/astropy/units/decorators.py#L243) as decorator I get following traceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/service_factory-0.1.6-py3.8.egg/service_factory/service.py\", line 101, in apply\r\n    result = method(**params)\r\n  File \"<string>\", line 99, in wrapper\r\n  File \"<string>\", line 126, in company_complete\r\n  File \"<string>\", line 128, in <listcomp>\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/api/classes.py\", line 592, in docstring\r\n    return super(Completion, self).docstring(raw=raw, fast=fast)\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/api/classes.py\", line 250, in docstring\r\n    signature_text = self._get_docstring_signature()\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/api/classes.py\", line 610, in _get_docstring_signature\r\n    return super(Completion, self)._get_docstring_signature()\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/api/classes.py\", line 262, in _get_docstring_signature\r\n    for signature in self._get_signatures(for_docstring=True)\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/api/classes.py\", line 505, in _get_signatures\r\n    return [sig for name in names for sig in name.infer().get_signatures()]\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/api/classes.py\", line 505, in <listcomp>\r\n    return [sig for name in names for sig in name.infer().get_signatures()]\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/base_value.py\", line 415, in get_signatures\r\n    return [sig for c in self._set for sig in c.get_signatures()]\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/base_value.py\", line 415, in <listcomp>\r\n    return [sig for c in self._set for sig in c.get_signatures()]\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/value/klass.py\", line 218, in get_signatures\r\n    init_funcs = self.py__call__(args).py__getattribute__('__init__')\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/base_value.py\", line 395, in py__getattribute__\r\n    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/common/value.py\", line 32, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/base_value.py\", line 395, in <genexpr>\r\n    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/base_value.py\", line 88, in py__getattribute__\r\n    names = self.goto(name_or_str, name_context, analysis_errors)\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/base_value.py\", line 77, in goto\r\n    names = finder.filter_name(filters, name_or_str)\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/finder.py\", line 35, in filter_name\r\n    for filter in filters:\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/base_value.py\", line 63, in _get_value_filters\r\n    for f in self.get_filters(origin_scope=origin_scope):\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/value/instance.py\", line 176, in get_filters\r\n    class_value = self.get_annotated_class_object()\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/value/instance.py\", line 350, in get_annotated_class_object\r\n    return self._get_annotated_class_object() or self.class_value\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/value/instance.py\", line 339, in _get_annotated_class_object\r\n    all_annotations = py__annotations__(signature.value.tree_node)\r\n  File \"/home/andrej/.emacs.d/.cache/anaconda-mode/0.1.13/jedi-0.16.0-py3.8.egg/jedi/inference/gradual/annotation.py\", line 189, in py__annotations__\r\n    for function_param in funcdef.get_params():\r\nAttributeError: 'Class' object has no attribute 'get_params'\r\n```\r\n\r\nI've tried to look into how to reproduce/create simple test case for this but somehow it escapes me how to do this.\r\nI've tested with anaconda-mode on two files:\r\n`test.py`\r\n```\r\nimport astropy.units as u\r\n\r\nclass my_class:\r\n    @u.quantity_input\r\n    def __init__(self):\r\n        print(\"foo\")\r\n\r\n    def foo():\r\n        print(\"bar\")\r\n```\r\n\r\n`test2.py`\r\n```\r\nimport test\r\n\r\nimport astropy.units as u\r\n\r\ntest.my_class\r\n```\r\nIf I try to auto-complete inside `test2.py` with the decorator on `__init__` I get the traceback & crash with other decorators it works fine. \r\nMaybe you have a pointer what is the special case for this decorator? As other decorators work fine on `__init__`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1548", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1548/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1548/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1548/events", "html_url": "https://github.com/davidhalter/jedi/issues/1548", "id": 601832677, "node_id": "MDU6SXNzdWU2MDE4MzI2Nzc=", "number": 1548, "title": "Use the `project` variable before setting the default value.", "user": {"login": "haoqixu", "id": 9400582, "node_id": "MDQ6VXNlcjk0MDA1ODI=", "avatar_url": "https://avatars2.githubusercontent.com/u/9400582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haoqixu", "html_url": "https://github.com/haoqixu", "followers_url": "https://api.github.com/users/haoqixu/followers", "following_url": "https://api.github.com/users/haoqixu/following{/other_user}", "gists_url": "https://api.github.com/users/haoqixu/gists{/gist_id}", "starred_url": "https://api.github.com/users/haoqixu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haoqixu/subscriptions", "organizations_url": "https://api.github.com/users/haoqixu/orgs", "repos_url": "https://api.github.com/users/haoqixu/repos", "events_url": "https://api.github.com/users/haoqixu/events{/privacy}", "received_events_url": "https://api.github.com/users/haoqixu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-17T09:27:59Z", "updated_at": "2020-04-17T17:24:07Z", "closed_at": "2020-04-17T17:24:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This function use `project` variable before setting the default value causing an `AttributeError` in jedi v0.17.01 when the user is using the old api.\r\n\r\nFor example, this code will raise an `AttributeError` with jedi v0.17.0:\r\nhttps://github.com/neoclide/coc-python/blob/6a5104d18ae5ebf7d9b84af7c4a34c6ced62aee8/pythonFiles/completion.py#L571-L574\r\n\r\nhttps://github.com/davidhalter/jedi/blob/8aaa8e00446f801c023bb4b056f51ac6f3d99e99/jedi/api/__init__.py#L131-L133", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1547", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1547/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1547/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1547/events", "html_url": "https://github.com/davidhalter/jedi/issues/1547", "id": 600452914, "node_id": "MDU6SXNzdWU2MDA0NTI5MTQ=", "number": 1547, "title": "Help on debug output", "user": {"login": "Ekopalypse", "id": 47723516, "node_id": "MDQ6VXNlcjQ3NzIzNTE2", "avatar_url": "https://avatars2.githubusercontent.com/u/47723516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ekopalypse", "html_url": "https://github.com/Ekopalypse", "followers_url": "https://api.github.com/users/Ekopalypse/followers", "following_url": "https://api.github.com/users/Ekopalypse/following{/other_user}", "gists_url": "https://api.github.com/users/Ekopalypse/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ekopalypse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ekopalypse/subscriptions", "organizations_url": "https://api.github.com/users/Ekopalypse/orgs", "repos_url": "https://api.github.com/users/Ekopalypse/repos", "events_url": "https://api.github.com/users/Ekopalypse/events{/privacy}", "received_events_url": "https://api.github.com/users/Ekopalypse/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-04-15T17:04:02Z", "updated_at": "2020-08-21T12:59:42Z", "closed_at": "2020-04-22T07:51:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using the jedi 0.17 on windows 7 x64 with python37 x64.\r\n\r\nI have a crash (python37.dll stack overflow) and wanted to do some investigation about what the problem could be therefore I set **_jedi.set_debug_function()_**\r\nThis gives ~1100 lines of debug output for a single complete action.\r\nIs there anything I can do in addition to track down what causes it?\r\nSomething to read which helps understanding the output a little bit better?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1544", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1544/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1544/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1544/events", "html_url": "https://github.com/davidhalter/jedi/issues/1544", "id": 600042950, "node_id": "MDU6SXNzdWU2MDAwNDI5NTA=", "number": 1544, "title": "Jedi 0.17.0 broke 3.5, 3.6, 3.7 CI build on JPype due to TypeError", "user": {"login": "Thrameos", "id": 29045329, "node_id": "MDQ6VXNlcjI5MDQ1MzI5", "avatar_url": "https://avatars1.githubusercontent.com/u/29045329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thrameos", "html_url": "https://github.com/Thrameos", "followers_url": "https://api.github.com/users/Thrameos/followers", "following_url": "https://api.github.com/users/Thrameos/following{/other_user}", "gists_url": "https://api.github.com/users/Thrameos/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thrameos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thrameos/subscriptions", "organizations_url": "https://api.github.com/users/Thrameos/orgs", "repos_url": "https://api.github.com/users/Thrameos/repos", "events_url": "https://api.github.com/users/Thrameos/events{/privacy}", "received_events_url": "https://api.github.com/users/Thrameos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-15T06:01:30Z", "updated_at": "2020-04-15T21:07:42Z", "closed_at": "2020-04-15T19:16:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\nAll of the build failed on the same problem.  It does not happen in Python3.8.  Rolling back to 0.16.0 fixes it.   It was a fairly simple test to see if jedi could properly interpret our private CPython classes.  Unfortunately something seems to have died along the way in jedi.\r\n\r\nhttps://dev.azure.com/jpype-project/ba4e7288-580f-4fd7-8fc3-ab4a373a1291/_apis/build/builds/52/logs/73\r\n\r\n```\r\n20-04-15T05:42:55.1910412Z self = <test_jedi.JediTestCase testMethod=testCompleteField>\r\n2020-04-15T05:42:55.1910592Z \r\n2020-04-15T05:42:55.1910811Z     @common.unittest.skipUnless(have_jedi, \"jedi not available\")\r\n2020-04-15T05:42:55.1911077Z     def testCompleteField(self):\r\n2020-04-15T05:42:55.1911506Z         src = 'self.obj.CASE_INSENSITIVE_ORDER.wa'\r\n2020-04-15T05:42:55.1911790Z         script = jedi.Interpreter(src, [locals()])\r\n2020-04-15T05:42:55.1912055Z >       compl = [i.name for i in script.completions()]\r\n2020-04-15T05:42:55.1912227Z \r\n2020-04-15T05:42:55.1912395Z test/jpypetest/test_jedi.py:60: \r\n2020-04-15T05:42:55.1912702Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n2020-04-15T05:42:55.1913330Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/api/__init__.py:291: in completions\r\n2020-04-15T05:42:55.1913683Z     return self.complete(*self._pos, fuzzy=fuzzy)\r\n2020-04-15T05:42:55.1914269Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/api/helpers.py:465: in wrapper\r\n2020-04-15T05:42:55.1914619Z     return func(self, line, column, *args, **kwargs)\r\n2020-04-15T05:42:55.1915294Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/api/__init__.py:275: in complete\r\n2020-04-15T05:42:55.1915616Z     return self._complete(line, column, **kwargs)\r\n2020-04-15T05:42:55.1916278Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/api/__init__.py:283: in _complete\r\n2020-04-15T05:42:55.1916595Z     return completion.complete()\r\n2020-04-15T05:42:55.1917108Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/api/completion.py:145: in complete\r\n2020-04-15T05:42:55.1917623Z     cached_name, completion_names = self._complete_python(leaf)\r\n2020-04-15T05:42:55.1918144Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/api/completion.py:262: in _complete_python\r\n2020-04-15T05:42:55.1918465Z     cached_name, n = self._complete_trailer(dot.get_previous_leaf())\r\n2020-04-15T05:42:55.1919164Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/api/completion.py:341: in _complete_trailer\r\n2020-04-15T05:42:55.1919534Z     values = infer_call_of_leaf(inferred_context, previous_leaf)\r\n2020-04-15T05:42:55.1920116Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/helpers.py:108: in infer_call_of_leaf\r\n2020-04-15T05:42:55.1920469Z     values = infer_trailer(context, values, trailer)\r\n2020-04-15T05:42:55.1921049Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/syntax_tree.py:256: in infer_trailer\r\n2020-04-15T05:42:55.1921356Z     name_or_str=node\r\n2020-04-15T05:42:55.1921885Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:396: in py__getattribute__\r\n2020-04-15T05:42:55.1922492Z     return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)\r\n2020-04-15T05:42:55.1923117Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/common/value.py:69: in from_sets\r\n2020-04-15T05:42:55.1923447Z     for set_ in sets:\r\n2020-04-15T05:42:55.1924011Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:396: in <genexpr>\r\n2020-04-15T05:42:55.1924431Z     return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)\r\n2020-04-15T05:42:55.1925116Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:87: in py__getattribute__\r\n2020-04-15T05:42:55.1925507Z     values = ValueSet.from_sets(name.infer() for name in names)\r\n2020-04-15T05:42:55.1926135Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/common/value.py:69: in from_sets\r\n2020-04-15T05:42:55.1941124Z     for set_ in sets:\r\n2020-04-15T05:42:55.1944049Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:87: in <genexpr>\r\n2020-04-15T05:42:55.1945277Z     values = ValueSet.from_sets(name.infer() for name in names)\r\n2020-04-15T05:42:55.1947593Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/cache.py:111: in wrapper\r\n2020-04-15T05:42:55.1948580Z     result = method(self, *args, **kwargs)\r\n2020-04-15T05:42:55.1950770Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/compiled/mixed.py:124: in infer\r\n2020-04-15T05:42:55.1951838Z     tree_values = tree_value.py__getattribute__(self.string_name)\r\n2020-04-15T05:42:55.1954509Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:86: in py__getattribute__\r\n2020-04-15T05:42:55.1955711Z     names = self.goto(name_or_str, name_context, analysis_errors)\r\n2020-04-15T05:42:55.1958592Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:75: in goto\r\n2020-04-15T05:42:55.1959659Z     names = finder.filter_name(filters, name_or_str)\r\n2020-04-15T05:42:55.1961760Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/finder.py:35: in filter_name\r\n2020-04-15T05:42:55.1963531Z     for filter in filters:\r\n2020-04-15T05:42:55.1965629Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:63: in _get_value_filters\r\n2020-04-15T05:42:55.1967167Z     for f in self.get_filters(origin_scope=origin_scope):\r\n2020-04-15T05:42:55.1968942Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/value/instance.py:179: in get_filters\r\n2020-04-15T05:42:55.1970673Z     class_value = self.get_annotated_class_object()\r\n2020-04-15T05:42:55.1973109Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/value/instance.py:352: in get_annotated_class_object\r\n2020-04-15T05:42:55.1975219Z     return self._get_annotated_class_object() or self.class_value\r\n2020-04-15T05:42:55.1981736Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/cache.py:43: in wrapper\r\n2020-04-15T05:42:55.1984878Z     rv = function(obj, *args, **kwargs)\r\n2020-04-15T05:42:55.1988157Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/value/instance.py:332: in _get_annotated_class_object\r\n2020-04-15T05:42:55.1990374Z     for signature in self.class_value.py__getattribute__('__init__').get_signatures():\r\n2020-04-15T05:42:55.1992436Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:86: in py__getattribute__\r\n2020-04-15T05:42:55.1994328Z     names = self.goto(name_or_str, name_context, analysis_errors)\r\n2020-04-15T05:42:55.1997993Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:75: in goto\r\n2020-04-15T05:42:55.1998771Z     names = finder.filter_name(filters, name_or_str)\r\n2020-04-15T05:42:55.1999782Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/finder.py:35: in filter_name\r\n2020-04-15T05:42:55.2000775Z     for filter in filters:\r\n2020-04-15T05:42:55.2003925Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:63: in _get_value_filters\r\n2020-04-15T05:42:55.2005122Z     for f in self.get_filters(origin_scope=origin_scope):\r\n2020-04-15T05:42:55.2008116Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/value/klass.py:190: in get_filters\r\n2020-04-15T05:42:55.2009453Z     metaclasses = self.get_metaclasses()\r\n2020-04-15T05:42:55.2011855Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/cache.py:43: in wrapper\r\n2020-04-15T05:42:55.2012921Z     rv = function(obj, *args, **kwargs)\r\n2020-04-15T05:42:55.2015041Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/value/klass.py:376: in get_metaclasses\r\n2020-04-15T05:42:55.2016132Z     values = value.get_metaclasses()\r\n2020-04-15T05:42:55.2018201Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/cache.py:43: in wrapper\r\n2020-04-15T05:42:55.2019247Z     rv = function(obj, *args, **kwargs)\r\n2020-04-15T05:42:55.2022153Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/value/klass.py:374: in get_metaclasses\r\n2020-04-15T05:42:55.2023187Z     for value in lazy_base.infer():\r\n2020-04-15T05:42:55.2031889Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/lazy_value.py:48: in infer\r\n2020-04-15T05:42:55.2032966Z     return self.context.infer_node(self.data)\r\n2020-04-15T05:42:55.2035885Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/context.py:222: in infer_node\r\n2020-04-15T05:42:55.2036654Z     return infer_node(self, node)\r\n2020-04-15T05:42:55.2039933Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/syntax_tree.py:137: in infer_node\r\n2020-04-15T05:42:55.2041072Z     return _infer_node_if_inferred(context, element)\r\n2020-04-15T05:42:55.2043951Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/syntax_tree.py:150: in _infer_node_if_inferred\r\n2020-04-15T05:42:55.2045041Z     return _infer_node_cached(context, element)\r\n2020-04-15T05:42:55.2047694Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/cache.py:43: in wrapper\r\n2020-04-15T05:42:55.2048861Z     rv = function(obj, *args, **kwargs)\r\n2020-04-15T05:42:55.2050989Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/syntax_tree.py:155: in _infer_node_cached\r\n2020-04-15T05:42:55.2052926Z     return _infer_node(context, element)\r\n2020-04-15T05:42:55.2053926Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/debug.py:82: in wrapper\r\n2020-04-15T05:42:55.2054246Z     return func(*args, **kwargs)\r\n2020-04-15T05:42:55.2054778Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/syntax_tree.py:63: in wrapper\r\n2020-04-15T05:42:55.2055197Z     return func(context, *args, **kwargs)\r\n2020-04-15T05:42:55.2055769Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/syntax_tree.py:189: in _infer_node\r\n2020-04-15T05:42:55.2056124Z     value_set = infer_trailer(context, value_set, trailer)\r\n2020-04-15T05:42:55.2058768Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/syntax_tree.py:256: in infer_trailer\r\n2020-04-15T05:42:55.2059122Z     name_or_str=node\r\n2020-04-15T05:42:55.2059702Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:396: in py__getattribute__\r\n2020-04-15T05:42:55.2060167Z     return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)\r\n2020-04-15T05:42:55.2060798Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/common/value.py:69: in from_sets\r\n2020-04-15T05:42:55.2061502Z     for set_ in sets:\r\n2020-04-15T05:42:55.2062088Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:396: in <genexpr>\r\n2020-04-15T05:42:55.2062512Z     return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)\r\n2020-04-15T05:42:55.2063198Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:86: in py__getattribute__\r\n2020-04-15T05:42:55.2063598Z     names = self.goto(name_or_str, name_context, analysis_errors)\r\n2020-04-15T05:42:55.2064204Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:75: in goto\r\n2020-04-15T05:42:55.2064577Z     names = finder.filter_name(filters, name_or_str)\r\n2020-04-15T05:42:55.2065176Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/finder.py:35: in filter_name\r\n2020-04-15T05:42:55.2065509Z     for filter in filters:\r\n2020-04-15T05:42:55.2066118Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/base_value.py:63: in _get_value_filters\r\n2020-04-15T05:42:55.2066536Z     for f in self.get_filters(origin_scope=origin_scope):\r\n2020-04-15T05:42:55.2067193Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/gradual/stub_value.py:45: in get_filters\r\n2020-04-15T05:42:55.2067613Z     stub_filters = self._get_stub_filters(origin_scope=origin_scope)\r\n2020-04-15T05:42:55.2068272Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/gradual/stub_value.py:40: in _get_stub_filters\r\n2020-04-15T05:42:55.2068659Z     )] + list(self.iter_star_filters())\r\n2020-04-15T05:42:55.2069267Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/value/module.py:101: in iter_star_filters\r\n2020-04-15T05:42:55.2069658Z     for star_module in self.star_imports():\r\n2020-04-15T05:42:55.2070340Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/cache.py:43: in wrapper\r\n2020-04-15T05:42:55.2070646Z     rv = function(obj, *args, **kwargs)\r\n2020-04-15T05:42:55.2071199Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/value/module.py:121: in star_imports\r\n2020-04-15T05:42:55.2071510Z     level=i.level\r\n2020-04-15T05:42:55.2072005Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/imports.py:261: in follow\r\n2020-04-15T05:42:55.2072366Z     self._inference_state, self.import_path, sys_path, self._module_context\r\n2020-04-15T05:42:55.2072990Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/imports.py:347: in import_module_by_names\r\n2020-04-15T05:42:55.2073326Z     ) for parent_module_value in value_set\r\n2020-04-15T05:42:55.2073860Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/imports.py:347: in <listcomp>\r\n2020-04-15T05:42:55.2074326Z     ) for parent_module_value in value_set\r\n2020-04-15T05:42:55.2074858Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/plugins/__init__.py:21: in wrapper\r\n2020-04-15T05:42:55.2075639Z     return built_functions[public_name](*args, **kwargs)\r\n2020-04-15T05:42:55.2076204Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/plugins/flask.py:20: in wrapper\r\n2020-04-15T05:42:55.2076573Z     return callback(inference_state, import_names, module_context, *args, **kwargs)\r\n2020-04-15T05:42:55.2077178Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py:113: in wrapper\r\n2020-04-15T05:42:55.2077511Z     for p in parent_module_values\r\n2020-04-15T05:42:55.2078207Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/common/value.py:69: in from_sets\r\n2020-04-15T05:42:55.2078522Z     for set_ in sets:\r\n2020-04-15T05:42:55.2079123Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py:113: in <genexpr>\r\n2020-04-15T05:42:55.2079468Z     for p in parent_module_values\r\n2020-04-15T05:42:55.2080038Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/imports.py:398: in import_module\r\n2020-04-15T05:42:55.2080389Z     is_global_search=False,\r\n2020-04-15T05:42:55.2081010Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/functions.py:38: in get_module_info\r\n2020-04-15T05:42:55.2081427Z     return find_module(full_name=full_name, **kwargs)\r\n2020-04-15T05:42:55.2081738Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n2020-04-15T05:42:55.2081949Z \r\n2020-04-15T05:42:55.2082245Z string = 'async_case'\r\n2020-04-15T05:42:55.2082714Z path = ['/opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/unittest']\r\n2020-04-15T05:42:55.2083207Z full_name = 'unittest.async_case', is_global_search = False\r\n2020-04-15T05:42:55.2083396Z \r\n2020-04-15T05:42:55.2083688Z     def find_module_py34(string, path=None, full_name=None, is_global_search=True):\r\n2020-04-15T05:42:55.2083990Z         spec = None\r\n2020-04-15T05:42:55.2084160Z         loader = None\r\n2020-04-15T05:42:55.2084326Z     \r\n2020-04-15T05:42:55.2084514Z         for finder in sys.meta_path:\r\n2020-04-15T05:42:55.2084845Z             if is_global_search and finder != importlib.machinery.PathFinder:\r\n2020-04-15T05:42:55.2085138Z                 p = None\r\n2020-04-15T05:42:55.2085331Z             else:\r\n2020-04-15T05:42:55.2085509Z                 p = path\r\n2020-04-15T05:42:55.2085685Z             try:\r\n2020-04-15T05:42:55.2085909Z                 find_spec = finder.find_spec\r\n2020-04-15T05:42:55.2086152Z             except AttributeError:\r\n2020-04-15T05:42:55.2086666Z                 # These are old-school clases that still have a different API, just\r\n2020-04-15T05:42:55.2086967Z                 # ignore those.\r\n2020-04-15T05:42:55.2087161Z                 continue\r\n2020-04-15T05:42:55.2087319Z     \r\n2020-04-15T05:42:55.2087507Z >           spec = find_spec(string, p)\r\n2020-04-15T05:42:55.2088045Z E           TypeError: find_spec() missing 1 required positional argument: 'target'\r\n2020-04-15T05:42:55.2088294Z \r\n2020-04-15T05:42:55.2095669Z /opt/hostedtoolcache/Python/3.7.6/x64/lib/python3.7/site-packages/jedi/_compatibility.py:78: TypeError\r\n``", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1542", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1542/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1542/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1542/events", "html_url": "https://github.com/davidhalter/jedi/issues/1542", "id": 600036211, "node_id": "MDU6SXNzdWU2MDAwMzYyMTE=", "number": 1542, "title": "Multiple test_project.py::test_search tests fail due to wrong order", "user": {"login": "mgorny", "id": 110765, "node_id": "MDQ6VXNlcjExMDc2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/110765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgorny", "html_url": "https://github.com/mgorny", "followers_url": "https://api.github.com/users/mgorny/followers", "following_url": "https://api.github.com/users/mgorny/following{/other_user}", "gists_url": "https://api.github.com/users/mgorny/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgorny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgorny/subscriptions", "organizations_url": "https://api.github.com/users/mgorny/orgs", "repos_url": "https://api.github.com/users/mgorny/repos", "events_url": "https://api.github.com/users/mgorny/events{/privacy}", "received_events_url": "https://api.github.com/users/mgorny/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-15T05:42:32Z", "updated_at": "2020-04-15T15:21:41Z", "closed_at": "2020-04-15T15:21:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Not sure if jedi is supposed to return results in a specific order, or if sorting needs to be added to the test to account for different return order:\r\n\r\n```\r\n=============================================================== test session starts ===============================================================\r\nplatform linux -- Python 3.8.2, pytest-5.4.1, py-1.8.0, pluggy-0.13.1 -- /usr/bin/python3.8\r\ncachedir: .pytest_cache\r\nhypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp/jedi/.hypothesis/examples')\r\nrootdir: /tmp/jedi, inifile: pytest.ini\r\nplugins: expect-1.1.0, django-3.8.0, requests-mock-1.7.0, aiohttp-0.3.0, betamax-0.8.1, httpbin-1.0.0, mock-1.11.2, shutil-1.7.0, virtualenv-1.7.0, timeout-1.3.3, xprocess-0.13.1, flaky-3.6.1, hypothesis-5.8.3\r\ncollected 1 item                                                                                                                                  \r\n\r\ntest/test_api/test_project.py::test_search[implicit_namespace_package.-full_names22-kwargs22] FAILED                                        [100%]\r\n\r\n==================================================================== FAILURES =====================================================================\r\n_________________________________________ test_search[implicit_namespace_package.-full_names22-kwargs22] __________________________________________\r\n\r\nstring = 'implicit_namespace_package.', full_names = ['examples.implicit_namespace_package.ns1', 'examples.implicit_namespace_package.ns2']\r\nkwargs = {}, skip_pre_python36 = None\r\n\r\n    @pytest.mark.parametrize(\r\n        'string, full_names, kwargs', [\r\n            ('test_load_save_project', ['test_api.test_project.test_load_save_project'], {}),\r\n            ('test_load_savep', [], dict(complete=True)),\r\n            ('test_load_save_p', ['test_api.test_project.test_load_save_project'],\r\n             dict(complete=True)),\r\n            ('test_load_save_p', ['test_api.test_project.test_load_save_project'],\r\n             dict(complete=True, all_scopes=True)),\r\n    \r\n            ('some_search_test_var', [], {}),\r\n            ('some_search_test_var', ['test_api.test_project.test_search.some_search_test_var'],\r\n             dict(all_scopes=True)),\r\n            ('some_search_test_var', ['test_api.test_project.test_search.some_search_test_var'],\r\n             dict(complete=True, all_scopes=True)),\r\n    \r\n            ('sample_int', ['helpers.sample_int'], {}),\r\n            ('sample_int', ['helpers.sample_int'], dict(all_scopes=True)),\r\n            ('sample_int.real', ['stub:builtins.int.real'], {}),\r\n    \r\n            ('class sample_int.real', [], {}),\r\n            ('foo sample_int.real', [], {}),\r\n            ('def sample_int.real', ['stub:builtins.int.real'], {}),\r\n            ('function sample_int.real', ['stub:builtins.int.real'], {}),\r\n    \r\n            # With modules\r\n            ('test_project.test_search', ['test_api.test_project.test_search'], {}),\r\n            ('test_project.test_searc', ['test_api.test_project.test_search'], dict(complete=True)),\r\n            ('test_api.test_project.test_search', ['test_api.test_project.test_search'], {}),\r\n            ('test_api.test_project.test_sear', ['test_api.test_project.test_search'],\r\n             dict(complete=True)),\r\n    \r\n            # With namespace\r\n            ('implicit_namespace_package.ns1.pkg',\r\n             ['examples.implicit_namespace_package.ns1.pkg'], {}),\r\n            ('implicit_namespace_package.ns1.pkg.ns1_file',\r\n             ['examples.implicit_namespace_package.ns1.pkg.ns1_file'], {}),\r\n            ('examples.implicit_namespace_package.ns1.pkg.ns1_file',\r\n             ['examples.implicit_namespace_package.ns1.pkg.ns1_file'], {}),\r\n            ('implicit_namespace_package.ns1.pkg.',\r\n             ['examples.implicit_namespace_package.ns1.pkg.ns1_file'],\r\n             dict(complete=True)),\r\n            ('implicit_namespace_package.',\r\n             ['examples.implicit_namespace_package.ns1',\r\n              'examples.implicit_namespace_package.ns2'],\r\n             dict(complete=True)),\r\n    \r\n            # With stubs\r\n            ('with_python.module', ['examples.stub_packages.with_python.module'], {}),\r\n            ('with_python.modul', ['examples.stub_packages.with_python.module'],\r\n             dict(complete=True)),\r\n            ('no_python.foo', ['stub:examples.stub_packages.no_python.foo'], {}),\r\n            ('no_python.fo', ['stub:examples.stub_packages.no_python.foo'],\r\n             dict(complete=True)),\r\n            ('with_python-stubs.module', [], {}),\r\n            ('no_python-stubs.foo', [], {}),\r\n            # Both locations are given, because they live in separate folders (one\r\n            # suffixed with -stubs.\r\n            ('with_python', ['examples.stub_packages.with_python'], {}),\r\n            ('no_python', ['stub:examples.stub_packages.no_python'], {}),\r\n            # Completion stubs\r\n            ('stub_only', ['stub:completion.stub_folder.stub_only',\r\n                           'stub:examples.stub_packages.with_python.stub_only'], {}),\r\n            ('with_stub', ['completion.stub_folder.with_stub'], {}),\r\n            ('with_stub.in_with_stub_both',\r\n             ['completion.stub_folder.with_stub.in_with_stub_both'], {}),\r\n            ('with_stub.in_with_stub_python',\r\n             ['completion.stub_folder.with_stub.in_with_stub_python'], {}),\r\n            ('with_stub.in_with_stub_stub',\r\n             ['stub:completion.stub_folder.with_stub.in_with_stub_stub'], {}),\r\n            # Completion stubs: Folder\r\n            ('with_stub_folder', ['completion.stub_folder.with_stub_folder'], {}),\r\n            ('with_stub_folder.nested_with_stub',\r\n             ['completion.stub_folder.with_stub_folder.nested_with_stub'], {}),\r\n            ('nested_with_stub',\r\n             ['completion.stub_folder.stub_only_folder.nested_with_stub',\r\n              'completion.stub_folder.with_stub_folder.nested_with_stub'], {}),\r\n    \r\n            # On sys path\r\n            ('sys.path', ['stub:sys.path'], {}),\r\n            ('json.dumps', ['json.dumps'], {}),  # stdlib + stub\r\n            ('multiprocessing', ['multiprocessing'], {}),\r\n            ('multiprocessin', ['multiprocessing'], dict(complete=True)),\r\n        ]\r\n    )\r\n    @pytest.mark.skipif(sys.version_info < (3, 6), reason=\"Ignore Python 2, because EOL\")\r\n    def test_search(string, full_names, kwargs, skip_pre_python36):\r\n        some_search_test_var = 1.0\r\n        project = Project(test_dir)\r\n        if kwargs.pop('complete', False) is True:\r\n            defs = project.complete_search(string, **kwargs)\r\n        else:\r\n            defs = project.search(string, **kwargs)\r\n>       assert [('stub:' if d.is_stub() else '') + d.full_name for d in defs] == full_names\r\nE       AssertionError: assert ['examples.implicit_namespace_package.ns2',\\n 'examples.implicit_namespace_package.ns1'] == ['examples.implicit_namespace_package.ns1',\\n 'examples.implicit_namespace_package.ns2']\r\nE         At index 0 diff: 'examples.implicit_namespace_package.ns2' != 'examples.implicit_namespace_package.ns1'\r\nE         Full diff:\r\nE           [\r\nE         +  'examples.implicit_namespace_package.ns2',\r\nE            'examples.implicit_namespace_package.ns1',\r\nE         -  'examples.implicit_namespace_package.ns2',\r\nE           ]\r\n\r\ntest/test_api/test_project.py:138: AssertionError\r\n============================================================= short test summary info =============================================================\r\nFAILED test/test_api/test_project.py::test_search[implicit_namespace_package.-full_names22-kwargs22] - AssertionError: assert ['examples.implici...\r\n================================================================ 1 failed in 2.99s ================================================================\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1541", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1541/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1541/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1541/events", "html_url": "https://github.com/davidhalter/jedi/issues/1541", "id": 599032482, "node_id": "MDU6SXNzdWU1OTkwMzI0ODI=", "number": 1541, "title": "Inference should not suggest local variables when only kwargs are legal", "user": {"login": "eric-wieser", "id": 425260, "node_id": "MDQ6VXNlcjQyNTI2MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/425260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eric-wieser", "html_url": "https://github.com/eric-wieser", "followers_url": "https://api.github.com/users/eric-wieser/followers", "following_url": "https://api.github.com/users/eric-wieser/following{/other_user}", "gists_url": "https://api.github.com/users/eric-wieser/gists{/gist_id}", "starred_url": "https://api.github.com/users/eric-wieser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eric-wieser/subscriptions", "organizations_url": "https://api.github.com/users/eric-wieser/orgs", "repos_url": "https://api.github.com/users/eric-wieser/repos", "events_url": "https://api.github.com/users/eric-wieser/events{/privacy}", "received_events_url": "https://api.github.com/users/eric-wieser/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235916, "node_id": "MDU6TGFiZWwxNzIzNTkxNg==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/feature", "name": "feature", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-13T17:49:43Z", "updated_at": "2020-04-17T21:02:28Z", "closed_at": "2020-04-17T20:59:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given the following function:\r\n```python\r\ndef foo(*, a=1, z=2):\r\n    pass\r\n```\r\nAnd the following input\r\n```\r\nfoo(\r\n```\r\nThere are only 3 legal completions:\r\n\r\n* `a=`\r\n* `z=`\r\n* `**`\r\n\r\nHowever, jedi offers the entire local, global, and builtin namespace:\r\n```\r\nIn [1]: import jedi\r\n\r\nIn [2]: s = jedi.Script(\"def foo(*, a=1, z=2): pass\\nfoo(\")\r\n\r\nIn [3]: s.complete(2, 4)\r\nOut[3]:\r\n[<Completion: a=>,\r\n <Completion: abs>,\r\n ...\r\n```\r\neven though\r\n```python\r\nfoo(abs)\r\n```\r\nwould be a `TypeError`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1540", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1540/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1540/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1540/events", "html_url": "https://github.com/davidhalter/jedi/issues/1540", "id": 598068529, "node_id": "MDU6SXNzdWU1OTgwNjg1Mjk=", "number": 1540, "title": "Jedi has wrong sys.path when started from pyenv virtual environment ", "user": {"login": "mrclary", "id": 9618975, "node_id": "MDQ6VXNlcjk2MTg5NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/9618975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrclary", "html_url": "https://github.com/mrclary", "followers_url": "https://api.github.com/users/mrclary/followers", "following_url": "https://api.github.com/users/mrclary/following{/other_user}", "gists_url": "https://api.github.com/users/mrclary/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrclary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrclary/subscriptions", "organizations_url": "https://api.github.com/users/mrclary/orgs", "repos_url": "https://api.github.com/users/mrclary/repos", "events_url": "https://api.github.com/users/mrclary/events{/privacy}", "received_events_url": "https://api.github.com/users/mrclary/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 23395212, "node_id": "MDU6TGFiZWwyMzM5NTIxMg==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/discussion", "name": "discussion", "color": "444444", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-10T20:04:31Z", "updated_at": "2020-04-15T22:52:45Z", "closed_at": "2020-04-15T22:52:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "### The Problem\r\nWhen working from a pyenv virtual environment and attempting to get completions for a conda envrionment, jedi does not establish the correct sys.path, resulting in failed completion. Working from an anaconda environment and attemping to get completions for a pyenv environment works properly.\r\n\r\n### MWE summary\r\n* create two virtual environments\r\n  * Anaconda environment with `jedi` and `scipy`\r\n  * Pyenv envrionment with `jedi` and `pandas`\r\n* Use jedi in one environment and get completion from the other environment\r\n\r\n### Example 1: use conda; completions from pyenv; successful\r\n```\r\n$ conda create -n conda-jedi python=3.7.7 jedi scipy\r\n$ conda activate conda-jedi\r\n(conda-jedi) $ python\r\nPython 3.7.7 (default, Mar 26 2020, 10:32:53) \r\n[Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import jedi\r\n>>> env = jedi.create_environment('/Users/rclary/.pyenv/versions/pyenv-jedi/bin/python', safe=False)\r\n>>> env\r\n<Environment: 3.7.7 in /Users/rclary/.pyenv/versions/3.7.7/envs/pyenv-jedi>\r\n>>> env.get_sys_path()\r\n['/usr/local/mdsplus/pydevices', '/Users/rclary/.pyenv/versions/3.7.7/Python.framework/Versions/3.7/lib/python37.zip', '/Users/rclary/.pyenv/versions/3.7.7/Python.framework/Versions/3.7/lib/python3.7', '/Users/rclary/.pyenv/versions/3.7.7/Python.framework/Versions/3.7/lib/python3.7/lib-dynload', '/Users/rclary/.pyenv/versions/3.7.7/envs/pyenv-jedi/lib/python3.7/site-packages']\r\n>>> jedi.Script(r\"\"\"import pa\\n\"\"\", line=1, column=len('import pa'), environment=env).completions()\r\n[<Completion: pandas>, <Completion: parser>, <Completion: parso>, <Completion: pathlib>]\r\n>>> \r\n```\r\n\r\n### Example 2: use pyenv; completions in conda; unsuccessful\r\n```\r\n$ pyenv virtualenv 3.7.7 pyenv-jedi\r\n$ pyenv activate pyenv-jedi\r\n(pyenv-jedi) $ pip install jedi pandas\r\n(pyenv-jedi) $ python\r\nPython 3.7.7 (default, Apr  6 2020, 11:49:38) \r\n[Clang 11.0.0 (clang-1100.0.33.17)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import jedi\r\n>>> env = jedi.create_environment('/Users/rclary/anaconda3/envs/conda-jedi/bin/python', safe=False)\r\n>>> env\r\n<Environment: 3.7.7 in /Users/rclary/.pyenv/versions/3.7.7/envs/pyenv-jedi>\r\n>>> env.get_sys_path()\r\n['/usr/local/mdsplus/pydevices', '/Users/rclary/anaconda3/envs/conda-jedi/lib/python37.zip', '/Users/rclary/anaconda3/envs/conda-jedi/lib/python3.7', '/Users/rclary/anaconda3/envs/conda-jedi/lib/python3.7/lib-dynload', '/Users/rclary/.pyenv/versions/3.7.7/envs/pyenv-jedi/lib/python3.7/site-packages']\r\n>>> jedi.Script(r\"\"\"import sc\\n\"\"\", line=1, column=len('import sc'), environment=env).completions()\r\n[<Completion: sched>, <Completion: scripts>]\r\n>>> \r\n```\r\n\r\nNotice that for the unsuccessful case, the environment description incorrectly indicates the pyenv-jedi environment and the `get_sys_path()` returns the wrong site-package path. The result is missing `<Completions: scipy>`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1539", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1539/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1539/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1539/events", "html_url": "https://github.com/davidhalter/jedi/issues/1539", "id": 596652431, "node_id": "MDU6SXNzdWU1OTY2NTI0MzE=", "number": 1539, "title": "Get jedi working in Kate", "user": {"login": "Palexer", "id": 40514802, "node_id": "MDQ6VXNlcjQwNTE0ODAy", "avatar_url": "https://avatars1.githubusercontent.com/u/40514802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Palexer", "html_url": "https://github.com/Palexer", "followers_url": "https://api.github.com/users/Palexer/followers", "following_url": "https://api.github.com/users/Palexer/following{/other_user}", "gists_url": "https://api.github.com/users/Palexer/gists{/gist_id}", "starred_url": "https://api.github.com/users/Palexer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Palexer/subscriptions", "organizations_url": "https://api.github.com/users/Palexer/orgs", "repos_url": "https://api.github.com/users/Palexer/repos", "events_url": "https://api.github.com/users/Palexer/events{/privacy}", "received_events_url": "https://api.github.com/users/Palexer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-08T15:10:11Z", "updated_at": "2020-04-13T21:33:41Z", "closed_at": "2020-04-13T21:33:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nThis is not really an issue but a question:\r\nI wanted to use Kate for small Python projects for a long time now, so I'm happy that I found jedi.\r\nBut I can't get it to work and I don't really know what to do even though I read the the docs. I'm using Manjaro Linux (based on Arch) as my OS.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1538", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1538/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1538/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1538/events", "html_url": "https://github.com/davidhalter/jedi/issues/1538", "id": 593802765, "node_id": "MDU6SXNzdWU1OTM4MDI3NjU=", "number": 1538, "title": "SUBCLASSES AND METHOD OVERRIDES", "user": {"login": "shrhawk-entertainer", "id": 30106364, "node_id": "MDQ6VXNlcjMwMTA2MzY0", "avatar_url": "https://avatars1.githubusercontent.com/u/30106364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shrhawk-entertainer", "html_url": "https://github.com/shrhawk-entertainer", "followers_url": "https://api.github.com/users/shrhawk-entertainer/followers", "following_url": "https://api.github.com/users/shrhawk-entertainer/following{/other_user}", "gists_url": "https://api.github.com/users/shrhawk-entertainer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shrhawk-entertainer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shrhawk-entertainer/subscriptions", "organizations_url": "https://api.github.com/users/shrhawk-entertainer/orgs", "repos_url": "https://api.github.com/users/shrhawk-entertainer/repos", "events_url": "https://api.github.com/users/shrhawk-entertainer/events{/privacy}", "received_events_url": "https://api.github.com/users/shrhawk-entertainer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-04T11:26:51Z", "updated_at": "2020-04-04T22:33:40Z", "closed_at": "2020-04-04T22:33:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to find all the subclasses and method overrides using the library?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1534", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1534/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1534/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1534/events", "html_url": "https://github.com/davidhalter/jedi/issues/1534", "id": 591685262, "node_id": "MDU6SXNzdWU1OTE2ODUyNjI=", "number": 1534, "title": "Python jedi intellisense is stuck on loading  in VSCODE ", "user": {"login": "CatNofishing", "id": 33288114, "node_id": "MDQ6VXNlcjMzMjg4MTE0", "avatar_url": "https://avatars0.githubusercontent.com/u/33288114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CatNofishing", "html_url": "https://github.com/CatNofishing", "followers_url": "https://api.github.com/users/CatNofishing/followers", "following_url": "https://api.github.com/users/CatNofishing/following{/other_user}", "gists_url": "https://api.github.com/users/CatNofishing/gists{/gist_id}", "starred_url": "https://api.github.com/users/CatNofishing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CatNofishing/subscriptions", "organizations_url": "https://api.github.com/users/CatNofishing/orgs", "repos_url": "https://api.github.com/users/CatNofishing/repos", "events_url": "https://api.github.com/users/CatNofishing/events{/privacy}", "received_events_url": "https://api.github.com/users/CatNofishing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-01T07:19:21Z", "updated_at": "2020-04-01T11:19:41Z", "closed_at": "2020-04-01T11:19:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some function documents that are not recognized by Jedi will cause Jedi to be stuck in the loading state for a long time. expecially for 'pyi' file.\r\n\r\nFor example , If you write the code, \u201cfrom PyQt5.QtWidgets import QApplication\u201d \uff0cand through the shortcut key to view the function document of QApplication, Jedi will be stuck in the loading state. Of course, this problem is not limited to pyqt5 module. Some functions in other modules that are not recognized by Jedi will cause the same problem.\r\n\r\nHere is a GIF demo file\uff1a\r\n\r\n![GIF 2020-4-1 11-06-34](https://user-images.githubusercontent.com/33288114/78109624-25378500-742c-11ea-9084-a43b091beb8d.gif)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1533", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1533/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1533/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1533/events", "html_url": "https://github.com/davidhalter/jedi/issues/1533", "id": 591408947, "node_id": "MDU6SXNzdWU1OTE0MDg5NDc=", "number": 1533, "title": "Internal type annotations?", "user": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 23395212, "node_id": "MDU6TGFiZWwyMzM5NTIxMg==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/discussion", "name": "discussion", "color": "444444", "default": false, "description": null}, {"id": 1769857987, "node_id": "MDU6TGFiZWwxNzY5ODU3OTg3", "url": "https://api.github.com/repos/davidhalter/jedi/labels/help-wanted", "name": "help-wanted", "color": "d89217", "default": false, "description": ""}, {"id": 44227641, "node_id": "MDU6TGFiZWw0NDIyNzY0MQ==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/low-prio", "name": "low-prio", "color": "bfe5bf", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-31T20:37:28Z", "updated_at": "2020-08-04T23:09:50Z", "closed_at": "2020-08-04T23:09:50Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Would there be interest in adding type annotations within jedi?\r\n\r\nI realise the codebase currently supports Python 2.7 still, which would complicate things a bit, though I think this could help both catch some errors and also make it a bit easier for newcomers to navigate the code.\r\n\r\nThere are definitely some patterns within jedi which aren't immediately obvious how to type (`ValueSet` is going to be very interesting), but I still think there could be some value in this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1532", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1532/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1532/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1532/events", "html_url": "https://github.com/davidhalter/jedi/issues/1532", "id": 591406744, "node_id": "MDU6SXNzdWU1OTE0MDY3NDQ=", "number": 1532, "title": "Support for old-style typed namedtuples", "user": {"login": "PeterJCLaw", "id": 336212, "node_id": "MDQ6VXNlcjMzNjIxMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/336212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeterJCLaw", "html_url": "https://github.com/PeterJCLaw", "followers_url": "https://api.github.com/users/PeterJCLaw/followers", "following_url": "https://api.github.com/users/PeterJCLaw/following{/other_user}", "gists_url": "https://api.github.com/users/PeterJCLaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeterJCLaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeterJCLaw/subscriptions", "organizations_url": "https://api.github.com/users/PeterJCLaw/orgs", "repos_url": "https://api.github.com/users/PeterJCLaw/repos", "events_url": "https://api.github.com/users/PeterJCLaw/events{/privacy}", "received_events_url": "https://api.github.com/users/PeterJCLaw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-31T20:33:54Z", "updated_at": "2020-04-02T19:11:04Z", "closed_at": "2020-03-31T22:07:42Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "jedi has some support for untyped `namedtuple`s` and for typed `NamedTuple`s which are constructed as classes, however doesn't seem to do much for typed `NamedTuple`s which are spelled using the legacy construction:\r\n\r\n``` python\r\nTNT = NamedTuple('TNT', (\r\n    ('value', int),\r\n))\r\n```\r\n\r\nI appreciate that this style is becoming less popular now that Python 3.5 is getting quite old, though there's probably still a lot of code which uses it.\r\n\r\nSince there does seem to be support for untyped named tuples:\r\n``` python\r\nNT = namedtuple('NT', (\r\n    'value',\r\n))\r\n\r\nnt = NT(value=42)\r\nprint(nt.value)\r\n#        ^ you do get completions here\r\n```\r\n\r\nI'm hoping that this would be relatively easy to add.\r\n\r\nMy original use case was hoping for completions from a function annotated as returning a typed named tuple, though I think the issue comes down to the named tuple being declared using the older syntax (the codebase I was in is Python 3.5).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1531", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1531/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1531/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1531/events", "html_url": "https://github.com/davidhalter/jedi/issues/1531", "id": 590120762, "node_id": "MDU6SXNzdWU1OTAxMjA3NjI=", "number": 1531, "title": "any way to support portable python?", "user": {"login": "carter54", "id": 26741594, "node_id": "MDQ6VXNlcjI2NzQxNTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/26741594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carter54", "html_url": "https://github.com/carter54", "followers_url": "https://api.github.com/users/carter54/followers", "following_url": "https://api.github.com/users/carter54/following{/other_user}", "gists_url": "https://api.github.com/users/carter54/gists{/gist_id}", "starred_url": "https://api.github.com/users/carter54/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carter54/subscriptions", "organizations_url": "https://api.github.com/users/carter54/orgs", "repos_url": "https://api.github.com/users/carter54/repos", "events_url": "https://api.github.com/users/carter54/events{/privacy}", "received_events_url": "https://api.github.com/users/carter54/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-30T09:07:48Z", "updated_at": "2020-04-02T19:00:25Z", "closed_at": "2020-04-02T18:59:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "when I used jedi in a portable python, which is packed by Pyinstaller\r\n```\r\njedi.find_system_environments()\r\n```\r\nreturn no result.\r\nwhen I specified a system 'python_path' in jedi.Project by\r\n```\r\npython_path = 'C:\\\\Users\\\\xx\\\\AppData\\\\Local\\\\Continuum\\\\anaconda3\\\\python.exe'\r\nproject = jedi.Project(path=project_path,\r\n                                   python_path=python_path\r\n                                  )\r\n```\r\nit ended up with an error when calling 'jedi.create_environment' api\r\n```\r\nTraceback (most recent call last):\r\n  File \"jedi\\inference\\compiled\\subprocess\\__init__.py\", line 251, in _send\r\n  File \"jedi\\_compatibility.py\", line 390, in pickle_load\r\nEOFError: Ran out of input\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"jedi\\api\\environment.py\", line 75, in _get_subprocess\r\n  File \"jedi\\inference\\compiled\\subprocess\\__init__.py\", line 263, in _send\r\njedi.api.exceptions.InternalError: The subprocess C:\\Users\\h00416555\\AppData\\Local\\Continuum\\anaconda3\\python.exe has crashed (EOFError('Ran out of input'), stderr=).\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 53, in prediction_by_jedi\r\n  File \"jedi\\api\\__init__.py\", line 185, in __init__\r\n  File \"jedi\\inference\\__init__.py\", line 88, in __init__\r\n  File \"jedi\\api\\project.py\", line 209, in get_environment\r\n  File \"jedi\\api\\environment.py\", line 369, in create_environment\r\n  File \"jedi\\api\\environment.py\", line 67, in __init__\r\n  File \"jedi\\api\\environment.py\", line 80, in _get_subprocess\r\njedi.api.environment.InvalidPythonEnvironment: Could not get version information for 'C:\\\\Users\\\\xx\\\\AppData\\\\Local\\\\Continuum\\\\anaconda3\\\\python.exe': InternalError(\"The subprocess C:\\\\Users\\\\xx\\\\AppData\\\\Local\\\\Continuum\\\\anaconda3\\\\python.exe has crashed (EOFError('Ran out of input'), stderr=).\")\r\n```\r\n\r\nthis error only happened when I use a portable python packed by Pyinstaller. Any way to get around with it? Thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1530", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1530/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1530/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1530/events", "html_url": "https://github.com/davidhalter/jedi/issues/1530", "id": 589929925, "node_id": "MDU6SXNzdWU1ODk5Mjk5MjU=", "number": 1530, "title": "Taking all possible return types from a function", "user": {"login": "LimaEduardo", "id": 22041670, "node_id": "MDQ6VXNlcjIyMDQxNjcw", "avatar_url": "https://avatars2.githubusercontent.com/u/22041670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LimaEduardo", "html_url": "https://github.com/LimaEduardo", "followers_url": "https://api.github.com/users/LimaEduardo/followers", "following_url": "https://api.github.com/users/LimaEduardo/following{/other_user}", "gists_url": "https://api.github.com/users/LimaEduardo/gists{/gist_id}", "starred_url": "https://api.github.com/users/LimaEduardo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LimaEduardo/subscriptions", "organizations_url": "https://api.github.com/users/LimaEduardo/orgs", "repos_url": "https://api.github.com/users/LimaEduardo/repos", "events_url": "https://api.github.com/users/LimaEduardo/events{/privacy}", "received_events_url": "https://api.github.com/users/LimaEduardo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-30T01:09:53Z", "updated_at": "2020-03-31T20:47:28Z", "closed_at": "2020-03-31T20:46:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nAs the title says, i'm trying to get all possible return types from a function. I'm using the code below for testing \r\n\r\n![image](https://user-images.githubusercontent.com/22041670/77866194-62bbc880-7208-11ea-900d-dc16a7d87bab.png)\r\n\r\nI'm using jedi like this:\r\n![image](https://user-images.githubusercontent.com/22041670/77866332-f392a400-7208-11ea-98ba-eada1e9a3d10.png)\r\n\r\nFrom what I understand from the documentation, when I call name.infer() in the definition with the name \"result\" it should return a list of possible inferences (bool and str). However, only \"str\" is returning.\r\n\r\nIs this a bug or am I using the tool in the wrong way?\r\n\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1529", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1529/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1529/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1529/events", "html_url": "https://github.com/davidhalter/jedi/issues/1529", "id": 589802438, "node_id": "MDU6SXNzdWU1ODk4MDI0Mzg=", "number": 1529, "title": "Jedi crashes on pandas.NamedAgg", "user": {"login": "Foxboron", "id": 1042946, "node_id": "MDQ6VXNlcjEwNDI5NDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1042946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Foxboron", "html_url": "https://github.com/Foxboron", "followers_url": "https://api.github.com/users/Foxboron/followers", "following_url": "https://api.github.com/users/Foxboron/following{/other_user}", "gists_url": "https://api.github.com/users/Foxboron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Foxboron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Foxboron/subscriptions", "organizations_url": "https://api.github.com/users/Foxboron/orgs", "repos_url": "https://api.github.com/users/Foxboron/repos", "events_url": "https://api.github.com/users/Foxboron/events{/privacy}", "received_events_url": "https://api.github.com/users/Foxboron/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-03-29T14:18:20Z", "updated_at": "2020-03-30T15:02:09Z", "closed_at": "2020-03-29T17:36:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Seems like there is something the typshed integration doesn't like about [pandas.NamedAgg](https://github.com/pandas-dev/pandas/blob/v1.0.3/pandas/core/groupby/generic.py#L80). The error is confusing and It's unclear to me where the problem is.\r\n\r\n```python\r\npy3.8 >>> import jedi\r\npy3.8 >>> jedi.Script(\"import pandas as pd; pd.Named\").complete()[0].get_signatures()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/fox/Git/prosjekter/Python/python-language-server/.venv/lib/python3.8/site-packages/jedi/api/classes.py\", line 510, in get_signatures\r\n    for s in self._get_signatures()\r\n  File \"/home/fox/Git/prosjekter/Python/python-language-server/.venv/lib/python3.8/site-packages/jedi/api/classes.py\", line 504, in _get_signatures\r\n    names = convert_names([self._name], prefer_stubs=True)\r\n  File \"/home/fox/Git/prosjekter/Python/python-language-server/.venv/lib/python3.8/site-packages/jedi/inference/gradual/conversion.py\", line 138, in convert_names\r\n    return _python_to_stub_names(names, fallback_to_python=prefer_stubs)\r\n  File \"/home/fox/Git/prosjekter/Python/python-language-server/.venv/lib/python3.8/site-packages/jedi/inference/utils.py\", line 20, in wrapper\r\n    return list(func(*args, **kwargs))\r\n  File \"/home/fox/Git/prosjekter/Python/python-language-server/.venv/lib/python3.8/site-packages/jedi/inference/gradual/conversion.py\", line 106, in _python_to_stub_names\r\n    values = convert_values(n.infer(), only_stubs=True)\r\n  File \"/home/fox/Git/prosjekter/Python/python-language-server/.venv/lib/python3.8/site-packages/jedi/inference/gradual/conversion.py\", line 148, in convert_values\r\n    return ValueSet.from_sets(\r\n  File \"/home/fox/Git/prosjekter/Python/python-language-server/.venv/lib/python3.8/site-packages/jedi/common/value.py\", line 32, in from_sets\r\n    for set_ in sets:\r\n  File \"/home/fox/Git/prosjekter/Python/python-language-server/.venv/lib/python3.8/site-packages/jedi/inference/gradual/conversion.py\", line 149, in <genexpr>\r\n    to_stub(value)\r\n  File \"/home/fox/Git/prosjekter/Python/python-language-server/.venv/lib/python3.8/site-packages/jedi/inference/gradual/conversion.py\", line 170, in to_stub\r\n    stub_module = _load_stub_module(value.get_root_context().get_value())\r\n  File \"/home/fox/Git/prosjekter/Python/python-language-server/.venv/lib/python3.8/site-packages/jedi/inference/gradual/conversion.py\", line 85, in _load_stub_module\r\n    return _try_to_load_stub_cached(\r\n  File \"/home/fox/Git/prosjekter/Python/python-language-server/.venv/lib/python3.8/site-packages/jedi/inference/gradual/typeshed.py\", line 141, in _try_to_load_stub_cached\r\n    _try_to_load_stub(inference_state, import_names, *args, **kwargs)\r\n  File \"/home/fox/Git/prosjekter/Python/python-language-server/.venv/lib/python3.8/site-packages/jedi/inference/gradual/typeshed.py\", line 153, in _try_to_load_stub\r\n    if parent_module_value is None and len(import_names) > 1:\r\nTypeError: object of type 'NoneType' has no len()\r\n```\r\n\r\n```shell\r\n(.venv) \u03bb python-language-server develop\u00bb pip list \r\nPackage                Version                 Location                                                                                                                                         \r\n---------------------- ----------------------- -------------------------------------------------------------------------------------------------------------------------------------------------\r\nastroid                2.3.3                   \r\nattrs                  19.3.0                  \r\nautopep8               1.5                     \r\ncoverage               5.0.4                   \r\ncycler                 0.10.0                  \r\nisort                  4.3.21                  \r\njedi                   0.16.0                  \r\nkiwisolver             1.1.0                   \r\nlazy-object-proxy      1.4.3                   \r\nmatplotlib             3.2.1                   \r\nmccabe                 0.6.1                   \r\nmock                   4.0.2                   \r\nmore-itertools         8.2.0                   \r\nmypy                   0.770                   \r\nmypy-extensions        0.4.3                   \r\nnumpy                  1.18.2                  \r\npackaging              20.3                    \r\npandas                 1.0.3                   \r\nparso                  0.6.2                   \r\npip                    19.2.3                  \r\npluggy                 0.13.1                  \r\npy                     1.8.1                   \r\npycodestyle            2.5.0                   \r\npydocstyle             5.0.2                   \r\npyflakes               2.1.1                   \r\npylint                 2.4.4                   \r\npyparsing              2.4.6                   \r\nPyQt5                  5.14.1                  \r\nPyQt5-sip              12.7.1                  \r\npytest                 5.4.1                   \r\npytest-cov             2.8.1                   \r\npython-dateutil        2.8.1                   \r\npython-jsonrpc-server  0.3.4                   \r\npython-language-server 0.31.9+0.g21833ea.dirty /home/fox/Git/prosjekter/Python/python-language-server/.venv/lib/python3.8/site-packages/python_language_server-0.31.9+0.g21833ea.dirty-py3.8.egg\r\npytz                   2019.3                  \r\nrope                   0.16.0                  \r\nsetuptools             41.2.0                  \r\nsix                    1.14.0                  \r\nsnowballstemmer        2.0.0                   \r\ntyped-ast              1.4.1                   \r\ntyping-extensions      3.7.4.1                 \r\nujson                  1.35                    \r\nversioneer             0.18                    \r\nwcwidth                0.1.9                   \r\nwrapt                  1.11.2                  \r\nyapf                   0.29.0                  \r\nWARNING: You are using pip version 19.2.3, however version 20.0.2 is available.\r\nYou should consider upgrading via the 'pip install --upgrade pip' command.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1528", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1528/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1528/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1528/events", "html_url": "https://github.com/davidhalter/jedi/issues/1528", "id": 587374633, "node_id": "MDU6SXNzdWU1ODczNzQ2MzM=", "number": 1528, "title": "'a'<blank>'b' blows up deoplete", "user": {"login": "lriuui0x0", "id": 33423526, "node_id": "MDQ6VXNlcjMzNDIzNTI2", "avatar_url": "https://avatars2.githubusercontent.com/u/33423526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lriuui0x0", "html_url": "https://github.com/lriuui0x0", "followers_url": "https://api.github.com/users/lriuui0x0/followers", "following_url": "https://api.github.com/users/lriuui0x0/following{/other_user}", "gists_url": "https://api.github.com/users/lriuui0x0/gists{/gist_id}", "starred_url": "https://api.github.com/users/lriuui0x0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lriuui0x0/subscriptions", "organizations_url": "https://api.github.com/users/lriuui0x0/orgs", "repos_url": "https://api.github.com/users/lriuui0x0/repos", "events_url": "https://api.github.com/users/lriuui0x0/events{/privacy}", "received_events_url": "https://api.github.com/users/lriuui0x0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-25T01:12:47Z", "updated_at": "2020-03-27T21:49:46Z", "closed_at": "2020-03-26T14:47:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please check this issue: https://github.com/deoplete-plugins/deoplete-jedi/issues/254", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1527", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1527/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1527/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1527/events", "html_url": "https://github.com/davidhalter/jedi/issues/1527", "id": 582348440, "node_id": "MDU6SXNzdWU1ODIzNDg0NDA=", "number": 1527, "title": "x.real crashes deoplete", "user": {"login": "SolidTux", "id": 17935831, "node_id": "MDQ6VXNlcjE3OTM1ODMx", "avatar_url": "https://avatars2.githubusercontent.com/u/17935831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SolidTux", "html_url": "https://github.com/SolidTux", "followers_url": "https://api.github.com/users/SolidTux/followers", "following_url": "https://api.github.com/users/SolidTux/following{/other_user}", "gists_url": "https://api.github.com/users/SolidTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/SolidTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SolidTux/subscriptions", "organizations_url": "https://api.github.com/users/SolidTux/orgs", "repos_url": "https://api.github.com/users/SolidTux/repos", "events_url": "https://api.github.com/users/SolidTux/events{/privacy}", "received_events_url": "https://api.github.com/users/SolidTux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-16T14:36:54Z", "updated_at": "2020-03-29T17:37:57Z", "closed_at": "2020-03-29T17:37:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using jedi 0.16.0 on Fedora 31 with Python 3.7.6 with deoplete in neovim.\r\n\r\n```python\r\nimport numpy as np\r\nimport scipy.optimize as opt\r\n\r\n\r\ndef analytic(x, c, phi):\r\n    x = x.astype(np.complex)\r\n    res = c * np.power(np.tan(np.pi/4 + phi), -x/beta)\r\n    res[x > 0] *= -1\r\n    return res\r\n\r\n\r\npopt, pcov = opt.curve_fit(\r\n    lambda x, c, phi: np.real(analytic(x, c, phi)), x, y)\r\nanalytic(df['tau'], *popt)\r\n```\r\n\r\nThe crash happens when I change `res[x > 0]` to `res[x.real > 0]` (or .anything for that matter) and exit insert mode (see screencast below). Strangely it is really sensitive to changes to anything. With `res = np.sin(x)` or `res = np.zeros_like(x)` etc. instead of the power-tan line it doesn't crash. Also removing any line changes the behaviour as well.\r\n\r\n![screencast](https://user-images.githubusercontent.com/17935831/76767737-58c2b000-679a-11ea-9c1f-70b4a5185857.gif)\r\n\r\nI tried to get a log from that with\r\n\r\n```vim\r\ncall deoplete#custom#option('profile', v:true)\r\ncall deoplete#enable_logging('DEBUG', 'deoplete.log')\r\ncall deoplete#custom#source('jedi', 'is_debug_enabled', 1)\r\n```\r\n\r\nBut only deoplete stuff appeared in the [log](https://gitlab.com/snippets/1953803).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1525", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1525/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1525/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1525/events", "html_url": "https://github.com/davidhalter/jedi/issues/1525", "id": 581681079, "node_id": "MDU6SXNzdWU1ODE2ODEwNzk=", "number": 1525, "title": "is it possible to use *.pyi instead of *.py", "user": {"login": "Levitanus", "id": 29713891, "node_id": "MDQ6VXNlcjI5NzEzODkx", "avatar_url": "https://avatars0.githubusercontent.com/u/29713891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Levitanus", "html_url": "https://github.com/Levitanus", "followers_url": "https://api.github.com/users/Levitanus/followers", "following_url": "https://api.github.com/users/Levitanus/following{/other_user}", "gists_url": "https://api.github.com/users/Levitanus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Levitanus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Levitanus/subscriptions", "organizations_url": "https://api.github.com/users/Levitanus/orgs", "repos_url": "https://api.github.com/users/Levitanus/repos", "events_url": "https://api.github.com/users/Levitanus/events{/privacy}", "received_events_url": "https://api.github.com/users/Levitanus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-15T13:45:56Z", "updated_at": "2020-03-15T18:05:38Z", "closed_at": "2020-03-15T18:05:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using jedi through anaconda SublimeText3 plugin, but if it's already implemented and can be specified via other realization \u2014 I would be grateful for the advice.\r\n\r\nI keep the stub (`*.pyi`) files for the pypi package, and, recently, noticed that jedi resolves much more complex cases within code typed inside the main code base (`*.py`), than when type hints are placed at the stubs. So, I would like to use stub files primarily, within fallback to the raw source (like mypy does).\r\n\r\nFor example, now some constructions look like this:\r\n\r\n```Python\r\nimport reapy as rpr\r\n\r\ntr = rpr.Project().get_selected_track(0)  # Type here is rpr.Track,\r\n                                          # but jedi doesn't know.\r\n                                          # But it is in the stubs.\r\nsend = tr.sends[0]\r\n# send = rpr.Send()  # need this line for make jedi completion work\r\nprint(send, send.midi_source)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1524", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1524/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1524/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1524/events", "html_url": "https://github.com/davidhalter/jedi/issues/1524", "id": 581180921, "node_id": "MDU6SXNzdWU1ODExODA5MjE=", "number": 1524, "title": "UncaughtAttributeError: 'PythonNode' object has no attribute 'context'", "user": {"login": "OutOfFocus4", "id": 50265209, "node_id": "MDQ6VXNlcjUwMjY1MjA5", "avatar_url": "https://avatars3.githubusercontent.com/u/50265209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OutOfFocus4", "html_url": "https://github.com/OutOfFocus4", "followers_url": "https://api.github.com/users/OutOfFocus4/followers", "following_url": "https://api.github.com/users/OutOfFocus4/following{/other_user}", "gists_url": "https://api.github.com/users/OutOfFocus4/gists{/gist_id}", "starred_url": "https://api.github.com/users/OutOfFocus4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OutOfFocus4/subscriptions", "organizations_url": "https://api.github.com/users/OutOfFocus4/orgs", "repos_url": "https://api.github.com/users/OutOfFocus4/repos", "events_url": "https://api.github.com/users/OutOfFocus4/events{/privacy}", "received_events_url": "https://api.github.com/users/OutOfFocus4/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-14T12:08:31Z", "updated_at": "2020-03-21T17:13:09Z", "closed_at": "2020-03-21T17:10:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Ran into this while using VSCode.\r\n\r\nHave reproduced using Jedi v0.16.\r\n\r\n### Setup\r\n1. Install Django (I used version 3.0.4) and Jedi\r\n2. Run this:\r\n```python\r\nimport jedi\r\nsite_packages = '***path to django install***'\r\nscript = jedi.Script(path=f'{site_packages}/django/core/management/base.py', line=13, column=45)\r\nscript.goto_definitions()\r\n```\r\n\r\n### Expected Output\r\nJedi finds the definition of the function `color_style` in `base.py`\r\n\r\n### Actual Output\r\nReally long stacktrace, ending with\r\n```python\r\njedi.inference.utils.UncaughtAttributeError: 'PythonNode' object has no attribute 'context'\r\n```\r\n\r\nSee https://github.com/microsoft/vscode-python/issues/10468 for the output from VSCode.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1523", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1523/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1523/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1523/events", "html_url": "https://github.com/davidhalter/jedi/issues/1523", "id": 580429951, "node_id": "MDU6SXNzdWU1ODA0Mjk5NTE=", "number": 1523, "title": "Arguments to a  `lambda` aren't autocompleted", "user": {"login": "siddhant3s", "id": 295892, "node_id": "MDQ6VXNlcjI5NTg5Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/295892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhant3s", "html_url": "https://github.com/siddhant3s", "followers_url": "https://api.github.com/users/siddhant3s/followers", "following_url": "https://api.github.com/users/siddhant3s/following{/other_user}", "gists_url": "https://api.github.com/users/siddhant3s/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhant3s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhant3s/subscriptions", "organizations_url": "https://api.github.com/users/siddhant3s/orgs", "repos_url": "https://api.github.com/users/siddhant3s/repos", "events_url": "https://api.github.com/users/siddhant3s/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhant3s/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235916, "node_id": "MDU6TGFiZWwxNzIzNTkxNg==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/feature", "name": "feature", "color": "02e10c", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-13T07:51:19Z", "updated_at": "2020-03-21T17:29:42Z", "closed_at": "2020-03-21T17:29:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I just started using Jedi in VSCode. First of all, I'm impressed by how far this tool is able to work. \r\nI had a small question or bug or perhaps a feature request. Let's say I have a higher-order-function which takes argument of type `Data` and a Callable from `Data -> int`:\r\n```python\r\n@dataclass\r\nclass Data:\r\n  name: str\r\n  value: int\r\ndef operate(a: Data, op: Callable[[Data], int]) -> int:\r\n  return op(a)\r\n```\r\n\r\nNow when I try to use `operate`, I would likely be passing a `lambda` as second argument:\r\n```python\r\noperate(Data(\"foo\", 42), lambda x: x.| # doesn't auto-complete\r\n```\r\nThe above code doesn't auto-complete. Is this expected? It would be great if we can have this auto-complete as many Data-manipulation libraries could benefit from it. \r\nMyPy for example, can correctly infer the type of `x` and complains if I do `x.asdf`\r\nThank you.\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1521", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1521/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1521/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1521/events", "html_url": "https://github.com/davidhalter/jedi/issues/1521", "id": 578448583, "node_id": "MDU6SXNzdWU1Nzg0NDg1ODM=", "number": 1521, "title": "goto() doesn't work on Types enclosed by quotes", "user": {"login": "davafons", "id": 29177698, "node_id": "MDQ6VXNlcjI5MTc3Njk4", "avatar_url": "https://avatars3.githubusercontent.com/u/29177698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davafons", "html_url": "https://github.com/davafons", "followers_url": "https://api.github.com/users/davafons/followers", "following_url": "https://api.github.com/users/davafons/following{/other_user}", "gists_url": "https://api.github.com/users/davafons/gists{/gist_id}", "starred_url": "https://api.github.com/users/davafons/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davafons/subscriptions", "organizations_url": "https://api.github.com/users/davafons/orgs", "repos_url": "https://api.github.com/users/davafons/repos", "events_url": "https://api.github.com/users/davafons/events{/privacy}", "received_events_url": "https://api.github.com/users/davafons/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-10T09:36:31Z", "updated_at": "2020-03-10T19:06:03Z", "closed_at": "2020-03-10T18:34:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport jedi\r\n\r\nsource = \"\"\"\r\nclass Foo:\r\n    def __init__(self):\r\n        self.msg = \"foo\"\r\n\r\ndef fun(foo: \"Foo\"):   # line 6\r\n    print(foo.msg)\r\n\r\ndef fun(foo: Foo):   # line 9\r\n    print(foo.msg)\r\n\"\"\"\r\n\r\nscript  = jedi.Script(source, path=\"test.py\")\r\ndefinitions = script.goto(line=6, column=16)\r\nprint(definitions)\r\ndefinitions = script.goto(line=9, column=16)\r\nprint(definitions)\r\n```\r\nThe output is:\r\n```\r\n[]\r\n[<Definition full_name='test.Foo', description='class Foo'>]\r\n```\r\nBut I think it should return the class definition in both cases, as \"Foo\" is being used as a type hint.\r\n\r\nA deeper look at `parso` shows that the param type is treated as a string instead of being resolved to Foo class.\r\n```python\r\nimport parso\r\n\r\nmodule = parso.parse(source, version=\"3.6\")\r\nprint(module.children[1].get_params())\r\nprint(module.children[2].get_params())\r\n```\r\nThis prints:\r\n```\r\n[<Param: PythonNode(tfpdef, [<Name: foo@6,8>, <Operator: :>, <String: \"Foo\">])>]\r\n[<Param: PythonNode(tfpdef, [<Name: foo@9.8>, <Operator: :>, <Name: Foo@9, 13>])>]\r\n```\r\nThe conflicting code is here:\r\n\r\nhttps://github.com/davidhalter/jedi/blob/8df917f1df9ff001b33b7ae91af2c4fc6c549011/jedi/api/__init__.py#L287-L293\r\n\r\n`tree_name` is `None` because `get_name_of_position` treats \"Foo\" just as a string.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1520", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1520/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1520/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1520/events", "html_url": "https://github.com/davidhalter/jedi/issues/1520", "id": 576361388, "node_id": "MDU6SXNzdWU1NzYzNjEzODg=", "number": 1520, "title": "All references are not listed, when use find all references", "user": {"login": "iyuhang", "id": 14176635, "node_id": "MDQ6VXNlcjE0MTc2NjM1", "avatar_url": "https://avatars1.githubusercontent.com/u/14176635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iyuhang", "html_url": "https://github.com/iyuhang", "followers_url": "https://api.github.com/users/iyuhang/followers", "following_url": "https://api.github.com/users/iyuhang/following{/other_user}", "gists_url": "https://api.github.com/users/iyuhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/iyuhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iyuhang/subscriptions", "organizations_url": "https://api.github.com/users/iyuhang/orgs", "repos_url": "https://api.github.com/users/iyuhang/repos", "events_url": "https://api.github.com/users/iyuhang/events{/privacy}", "received_events_url": "https://api.github.com/users/iyuhang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-05T16:03:32Z", "updated_at": "2020-03-05T20:56:44Z", "closed_at": "2020-03-05T20:56:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Environment data\r\nVS Code version: 1.42.1\r\nPython Extension version: 2020.2.64\r\nPython Version: 3.7, 64-bit\r\nOS and version: mac os\r\n\r\nActual behavior\r\nIn the project, if you right click on the function definition for \"configure_params\" in the contrived.py file, and click \"Find All References\", it will not find any references outside of the current file. However, if you click \"Find All References\" in the prove_its_broken.py, it will find two references - one from prove_its_broken.py and the other from contrived.py.\r\n\r\nExpected behavior\r\nI would expect ALL references to be found when you click find all references on the function header.\r\n\r\nas report in this issue, today I have the same issue , Find all references can only show partly\r\n#810", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1519", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1519/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1519/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1519/events", "html_url": "https://github.com/davidhalter/jedi/issues/1519", "id": 575668589, "node_id": "MDU6SXNzdWU1NzU2Njg1ODk=", "number": 1519, "title": "No signature for functools partialmethod", "user": {"login": "ffe4", "id": 61800298, "node_id": "MDQ6VXNlcjYxODAwMjk4", "avatar_url": "https://avatars0.githubusercontent.com/u/61800298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ffe4", "html_url": "https://github.com/ffe4", "followers_url": "https://api.github.com/users/ffe4/followers", "following_url": "https://api.github.com/users/ffe4/following{/other_user}", "gists_url": "https://api.github.com/users/ffe4/gists{/gist_id}", "starred_url": "https://api.github.com/users/ffe4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ffe4/subscriptions", "organizations_url": "https://api.github.com/users/ffe4/orgs", "repos_url": "https://api.github.com/users/ffe4/repos", "events_url": "https://api.github.com/users/ffe4/events{/privacy}", "received_events_url": "https://api.github.com/users/ffe4/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235916, "node_id": "MDU6TGFiZWwxNzIzNTkxNg==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/feature", "name": "feature", "color": "02e10c", "default": false, "description": null}, {"id": 1769857987, "node_id": "MDU6TGFiZWwxNzY5ODU3OTg3", "url": "https://api.github.com/repos/davidhalter/jedi/labels/help-wanted", "name": "help-wanted", "color": "d89217", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-04T18:50:50Z", "updated_at": "2020-03-14T00:38:30Z", "closed_at": "2020-03-14T00:38:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`Script.get_signatures()` does not return function signatures for `functools.partialmethod`. Same issue was raised and fixed for `functools.partial` #1371\r\n\r\nexample:\r\n```python\r\nimport jedi\r\n\r\npartialmethod = '''\r\nimport functools\r\n\r\nclass X:\r\n    def a(self, n, m):\r\n        print(n, m)\r\n    \r\n    b = functools.partialmethod(a, 1)\r\n\r\nX().a(1, 2)\r\nX().b(2)\r\n'''\r\n\r\nscript = jedi.Script(partialmethod)\r\nprint(script.get_signatures(line=10, column=len('X().a(')))\r\nprint(script.get_signatures(line=11, column=len('X().b(')))\r\n```\r\noutput:\r\n```\r\n[<Signature: index=0 a(n, m)>]\r\n[]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1518", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1518/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1518/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1518/events", "html_url": "https://github.com/davidhalter/jedi/issues/1518", "id": 575048743, "node_id": "MDU6SXNzdWU1NzUwNDg3NDM=", "number": 1518, "title": "Cached properties without triggering the cache?", "user": {"login": "tamasgal", "id": 1730350, "node_id": "MDQ6VXNlcjE3MzAzNTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1730350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasgal", "html_url": "https://github.com/tamasgal", "followers_url": "https://api.github.com/users/tamasgal/followers", "following_url": "https://api.github.com/users/tamasgal/following{/other_user}", "gists_url": "https://api.github.com/users/tamasgal/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasgal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasgal/subscriptions", "organizations_url": "https://api.github.com/users/tamasgal/orgs", "repos_url": "https://api.github.com/users/tamasgal/repos", "events_url": "https://api.github.com/users/tamasgal/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasgal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-04T00:33:11Z", "updated_at": "2020-03-05T20:45:39Z", "closed_at": "2020-03-05T20:45:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "In a library I work on, we have several \"heavy\" properties which look something like this (dummy example):\r\n\r\n```python\r\nimport time\r\n\r\nclass Foo:\r\n    def __init__(self):\r\n        self._bar = None\r\n        self._baz = None\r\n\r\n    @property\r\n    def bar(self):\r\n        if self._bar is None:\r\n            time.sleep(5)\r\n            self._bar = 23\r\n        return self._bar\r\n\r\n    @property\r\n    def baz(self):\r\n        if self._bar is None:\r\n            time.sleep(5)\r\n            self._baz = 23\r\n        return self._baz\r\n\r\n```\r\n\r\netc. (dozens of properties).\r\n\r\nThe problem is that creating an instance and hitting `TAB` will evaluate all the code inside the `if`-blocks since `Jedi` sees that the values are `None`, which means the REPL is hanging for several seconds (up to minutes).\r\n\r\n```python\r\n>>> from foo import Foo\r\n>>> f = Foo()\r\n>>> f.<TAB>    # hangs for a few seconds\r\n```\r\n\r\nIs there a way to e.g. tell Jedi beforehand about the signature of these properties to prevent this huge lag? I also tried using different implementations of `@cached_property` decorators but they have the same problems.\r\n\r\nI also tried with type hints without success:\r\n\r\n```python\r\nclass Foo:\r\n    def __init__(self):\r\n        self._bar = None\r\n        self._baz = None\r\n\r\n    @property\r\n    def bar(self) -> int:\r\n        if self._bar is None:\r\n            time.sleep(5)\r\n            self._bar = 23\r\n        return self._bar\r\n\r\n    @property\r\n    def baz(self) -> int:\r\n        if self._bar is None:\r\n            time.sleep(5)\r\n            self._baz = 23\r\n        return self._baz\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1517", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1517/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1517/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1517/events", "html_url": "https://github.com/davidhalter/jedi/issues/1517", "id": 574505314, "node_id": "MDU6SXNzdWU1NzQ1MDUzMTQ=", "number": 1517, "title": "completion broken for pyvista under ipython", "user": {"login": "jfmoulin", "id": 2844284, "node_id": "MDQ6VXNlcjI4NDQyODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2844284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfmoulin", "html_url": "https://github.com/jfmoulin", "followers_url": "https://api.github.com/users/jfmoulin/followers", "following_url": "https://api.github.com/users/jfmoulin/following{/other_user}", "gists_url": "https://api.github.com/users/jfmoulin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfmoulin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfmoulin/subscriptions", "organizations_url": "https://api.github.com/users/jfmoulin/orgs", "repos_url": "https://api.github.com/users/jfmoulin/repos", "events_url": "https://api.github.com/users/jfmoulin/events{/privacy}", "received_events_url": "https://api.github.com/users/jfmoulin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-03-03T08:44:14Z", "updated_at": "2020-03-06T13:40:22Z", "closed_at": "2020-03-06T09:07:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nUnder IPython I get autocompletion for the pyvista package but not for objects it creates:\r\n\r\n    In [1]: import pyvista, pylab                                                         \r\n    In [2]: import jedi, sys                                                \r\n    In [3]: import IPython                                                         \r\n    In [4]: ipy = IPython.get_ipython()                                            \r\n    In [5]: data = pylab.rand(10,3)                                                    \r\n    In [6]: mesh = pyvista.PolyData(data)                                          \r\n    In [7]: ipy.Completer.all_completions(\"mesh.\")                                 \r\n    Out[7]: []\r\n    In [8]: ipy.Completer.all_completions(\"pyvista.\")                              \r\n    Out[8]: \r\n    ['pyvista.appdirs',\r\n     'pyvista.Arrow',\r\n     'pyvista.assert_empty_kwargs',\r\n     'pyvista.BackgroundPlotter',.....\r\n\r\n \r\nIf I run the same code in IPython after deactivating Jedi, completion works both for the package and the objects it creates:\r\n    \r\n    In [1]: import IPython                                                         \r\n    In [2]: import pyvista, pylab                                                  \r\n    In [3]: ipy = IPython.get_ipython()                                            \r\n    In [4]: data = p.rand(10,3)                                                    \r\n    In [5]: mesh = pyvista.PolyData(data)                                          \r\n    In [6]: ipy.Completer.all_completions(\"mesh.\")                                 \r\n    Out[6]: \r\n    ['mesh.ALL_PIECES_EXTENT',\r\n     'mesh.AddCellReference',\r\n     'mesh.AddObserver',\r\n     'mesh.AddReferenceToCell',\r\n\r\nThe issue https://github.com/davidhalter/jedi/issues/1415 seems very similar to this one but is not fixed for  \r\n\r\n    In [9]: jedi.__version__                                                       \r\n    Out[9]: '0.16.0'\r\n    In [10]: IPython.__version__                                                   \r\n    Out[10]: '7.13.0'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1516", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1516/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1516/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1516/events", "html_url": "https://github.com/davidhalter/jedi/issues/1516", "id": 574458887, "node_id": "MDU6SXNzdWU1NzQ0NTg4ODc=", "number": 1516, "title": "Absent `__init__.py` breaks autocomplete and goto functionality", "user": {"login": "ak04nv", "id": 73960, "node_id": "MDQ6VXNlcjczOTYw", "avatar_url": "https://avatars2.githubusercontent.com/u/73960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ak04nv", "html_url": "https://github.com/ak04nv", "followers_url": "https://api.github.com/users/ak04nv/followers", "following_url": "https://api.github.com/users/ak04nv/following{/other_user}", "gists_url": "https://api.github.com/users/ak04nv/gists{/gist_id}", "starred_url": "https://api.github.com/users/ak04nv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ak04nv/subscriptions", "organizations_url": "https://api.github.com/users/ak04nv/orgs", "repos_url": "https://api.github.com/users/ak04nv/repos", "events_url": "https://api.github.com/users/ak04nv/events{/privacy}", "received_events_url": "https://api.github.com/users/ak04nv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-03T07:03:08Z", "updated_at": "2020-03-06T14:34:29Z", "closed_at": "2020-03-06T14:34:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Starting Python version 3.3 it uses [Implicit Namespace Packages](https://www.python.org/dev/peps/pep-0420/). This Python version has been included in the Sublime Text 3. But if an empty `__init__.py` isn't contained in the module autocomplete and goto definition doesn't work cause `goto` daemon returns an empty suggestions list.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1515", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1515/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1515/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1515/events", "html_url": "https://github.com/davidhalter/jedi/issues/1515", "id": 573669165, "node_id": "MDU6SXNzdWU1NzM2NjkxNjU=", "number": 1515, "title": "should jedi handle recursion in HelpervalueMixin.goto!?", "user": {"login": "ocehugo", "id": 1202691, "node_id": "MDQ6VXNlcjEyMDI2OTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1202691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ocehugo", "html_url": "https://github.com/ocehugo", "followers_url": "https://api.github.com/users/ocehugo/followers", "following_url": "https://api.github.com/users/ocehugo/following{/other_user}", "gists_url": "https://api.github.com/users/ocehugo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ocehugo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ocehugo/subscriptions", "organizations_url": "https://api.github.com/users/ocehugo/orgs", "repos_url": "https://api.github.com/users/ocehugo/repos", "events_url": "https://api.github.com/users/ocehugo/events{/privacy}", "received_events_url": "https://api.github.com/users/ocehugo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-03-02T01:58:28Z", "updated_at": "2020-03-15T09:08:00Z", "closed_at": "2020-03-13T22:27:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm facing a recursionError in completions when jedi inspect a very deep/recursed and complex docstring.  The completion failed and leave me with a big stacktrace in my editor, interrupting the workflow everytime I had to access anything belonging to the related import.\r\n\r\nI solved the problem by ignoring the blamed docstring. I did a RecursionError handling in HelperValueMixin.goto around the filter_name call:\r\n```python \r\n            try:\r\n                 names = finder.filter_name(filters, name_or_str)\r\n            except RecursionError as e:\r\n                 names = []\r\n                 debug.db('context.goto RecursionError at %s in (%s)', name_or_str, self)\r\n```\r\n\r\nSo I got some questions:\r\n\r\n1. legit solution for upstream?\r\n2. I need a way to find the location within the docstring that is triggering the infinite recursion. I couldn't understand the ```__repr__``` of the Name (tree.py) class: I got a Classname, line number and column but the line number is the class definition, and column did not represent the exact column in the source code. I feel that i'm close but not familair with the API.\r\n\r\nPS: Obviously I can't provide the docstring/code.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1514", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1514/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1514/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1514/events", "html_url": "https://github.com/davidhalter/jedi/issues/1514", "id": 573413967, "node_id": "MDU6SXNzdWU1NzM0MTM5Njc=", "number": 1514, "title": "Script.goto_assignments might return duplicates", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-29T21:23:58Z", "updated_at": "2020-03-13T01:22:14Z", "closed_at": "2020-03-13T01:22:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Noticed this with jedi-vim on https://github.com/pytest-dev/pytest/blob/ff7b5db/src/_pytest/config/argparsing.py#L118 on `names`, where it returns:\r\n\r\n```\r\n[\r\n  <Definition full_name='_pytest.config.argparsing.Argument.names', description=\r\n'def names'>,\r\n  <Definition full_name='_pytest.config.argparsing.Argument.names', description='de\r\nf names'>,\r\n]\r\n```\r\n\r\nComparing them with `==` results in `True`, but ids are different.\r\n\r\nWhile jedi-vim could filter out duplicates this appears to indicate an issue with Jedi.\r\n\r\nI hope this is easily reproducible for you.\r\n\r\nJedi master (30738a0), parso master (287a86c).\r\n\r\nRelated issue: https://github.com/davidhalter/jedi/issues/1434.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1513", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1513/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1513/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1513/events", "html_url": "https://github.com/davidhalter/jedi/issues/1513", "id": 572976493, "node_id": "MDU6SXNzdWU1NzI5NzY0OTM=", "number": 1513, "title": "Jedi doesn't respect import paths", "user": {"login": "hutchisr", "id": 42283663, "node_id": "MDQ6VXNlcjQyMjgzNjYz", "avatar_url": "https://avatars3.githubusercontent.com/u/42283663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hutchisr", "html_url": "https://github.com/hutchisr", "followers_url": "https://api.github.com/users/hutchisr/followers", "following_url": "https://api.github.com/users/hutchisr/following{/other_user}", "gists_url": "https://api.github.com/users/hutchisr/gists{/gist_id}", "starred_url": "https://api.github.com/users/hutchisr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hutchisr/subscriptions", "organizations_url": "https://api.github.com/users/hutchisr/orgs", "repos_url": "https://api.github.com/users/hutchisr/repos", "events_url": "https://api.github.com/users/hutchisr/events{/privacy}", "received_events_url": "https://api.github.com/users/hutchisr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-28T20:04:23Z", "updated_at": "2020-03-24T23:15:38Z", "closed_at": "2020-03-14T00:43:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given a local sub-package or module that has the same name as a top level package or module, for example:\r\n\r\n```\r\nmy_project\r\n|   my_package\r\n    |    __init__.py\r\n    |    celery.py\r\n```\r\n\r\nContents of `my_project/my_package/celery.py`:\r\n\r\n```python\r\nfrom __future__ import absolute_import # for compatibility with python2, not needed in python3\r\n\r\nimport celery\r\n\r\n\r\ncelery.Celery('tasks')\r\n```\r\n\r\nContents of `my_project/my_package/__init__.py`:\r\n```python\r\n```\r\nJedi treats `import celery` line as importing local module (the current file, which is actually `my_package.celery`) into its self instead of the top level package (the one actually named `celery`).\r\n\r\nExpected behavior\r\n\r\n `import celery` should import `celery`, not the local module, `my_package.celery`\r\n\r\nSteps to reproduce:\r\n\r\n1. create a package or module inside another package with the same local name as another package or module in python's path.\r\n2. import the package or module\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1510", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1510/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1510/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1510/events", "html_url": "https://github.com/davidhalter/jedi/issues/1510", "id": 568329555, "node_id": "MDU6SXNzdWU1NjgzMjk1NTU=", "number": 1510, "title": "Wrong highlighting of current argument", "user": {"login": "orgads", "id": 1246544, "node_id": "MDQ6VXNlcjEyNDY1NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1246544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orgads", "html_url": "https://github.com/orgads", "followers_url": "https://api.github.com/users/orgads/followers", "following_url": "https://api.github.com/users/orgads/following{/other_user}", "gists_url": "https://api.github.com/users/orgads/gists{/gist_id}", "starred_url": "https://api.github.com/users/orgads/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orgads/subscriptions", "organizations_url": "https://api.github.com/users/orgads/orgs", "repos_url": "https://api.github.com/users/orgads/repos", "events_url": "https://api.github.com/users/orgads/events{/privacy}", "received_events_url": "https://api.github.com/users/orgads/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-20T14:13:45Z", "updated_at": "2020-02-20T23:56:47Z", "closed_at": "2020-02-20T23:56:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\ndef foo(b: 'Test a b c', c: 'Test a b c'):\r\n    return b\r\n\r\nfoo()\r\n```\r\n\r\nWhen you open the parentheses, the last b (from c's annotation) is highlighted, and after comma, the last c is highlighted.\r\n\r\n![image](https://user-images.githubusercontent.com/1246544/74825221-3c099880-5312-11ea-96a8-f7eb647898ff.png)\r\n![image](https://user-images.githubusercontent.com/1246544/74825250-475cc400-5312-11ea-8dcd-7f242960f0ca.png)\r\n\r\nAlso happens without annotations:\r\n\r\n```\r\ndef bar(b, abc, c, kcj):\r\n    return b\r\n\r\nbar() # b from abc is highlighted, then abc, then c from kcj\r\n```\r\n\r\nReported on microsoft/vscode-python#10197", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1509", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1509/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1509/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1509/events", "html_url": "https://github.com/davidhalter/jedi/issues/1509", "id": 568124830, "node_id": "MDU6SXNzdWU1NjgxMjQ4MzA=", "number": 1509, "title": "How to analyze a folder with multiple python files?", "user": {"login": "WanCC1995", "id": 16075617, "node_id": "MDQ6VXNlcjE2MDc1NjE3", "avatar_url": "https://avatars2.githubusercontent.com/u/16075617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WanCC1995", "html_url": "https://github.com/WanCC1995", "followers_url": "https://api.github.com/users/WanCC1995/followers", "following_url": "https://api.github.com/users/WanCC1995/following{/other_user}", "gists_url": "https://api.github.com/users/WanCC1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/WanCC1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WanCC1995/subscriptions", "organizations_url": "https://api.github.com/users/WanCC1995/orgs", "repos_url": "https://api.github.com/users/WanCC1995/repos", "events_url": "https://api.github.com/users/WanCC1995/events{/privacy}", "received_events_url": "https://api.github.com/users/WanCC1995/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-20T08:13:50Z", "updated_at": "2020-02-20T08:37:27Z", "closed_at": "2020-02-20T08:37:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to apply static analysis on python projects, with contain multiple python files with dependency. I noticed that there's an API jedi.Script for analyzing a single file, but haven't found one for whole project. My current implementation is merging multiple files into one and then use this API. However, it's not scalable and incurs other related problems.\r\nIs there anyway neat way to use Jedi analyze a whole project?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1507", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1507/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1507/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1507/events", "html_url": "https://github.com/davidhalter/jedi/issues/1507", "id": 566419784, "node_id": "MDU6SXNzdWU1NjY0MTk3ODQ=", "number": 1507, "title": "goto() does not always return a definition for the target node", "user": {"login": "mlangkabel", "id": 16242920, "node_id": "MDQ6VXNlcjE2MjQyOTIw", "avatar_url": "https://avatars0.githubusercontent.com/u/16242920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlangkabel", "html_url": "https://github.com/mlangkabel", "followers_url": "https://api.github.com/users/mlangkabel/followers", "following_url": "https://api.github.com/users/mlangkabel/following{/other_user}", "gists_url": "https://api.github.com/users/mlangkabel/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlangkabel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlangkabel/subscriptions", "organizations_url": "https://api.github.com/users/mlangkabel/orgs", "repos_url": "https://api.github.com/users/mlangkabel/repos", "events_url": "https://api.github.com/users/mlangkabel/events{/privacy}", "received_events_url": "https://api.github.com/users/mlangkabel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 23395212, "node_id": "MDU6TGFiZWwyMzM5NTIxMg==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/discussion", "name": "discussion", "color": "444444", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-17T16:53:44Z", "updated_at": "2020-02-21T10:50:07Z", "closed_at": "2020-02-21T10:50:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I see that for implementing issue #1175 the behavior of the `goto` function has been changed slightly to return the definition of the overridden method if the node at the target location is already a definition. \r\n\r\nThis may be handy for some usecases, but others (like me) may rely on the old behavior. As an example: I am using the `goto()` function to get a \"canonical\" version of a node.\r\n\r\nWould it be possible to add an optional parameter to the `goto()` function that prevents this new behavior? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1506", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1506/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1506/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1506/events", "html_url": "https://github.com/davidhalter/jedi/issues/1506", "id": 565954160, "node_id": "MDU6SXNzdWU1NjU5NTQxNjA=", "number": 1506, "title": "typeshed module try_to_load_stub method TypeError", "user": {"login": "petobens", "id": 2583971, "node_id": "MDQ6VXNlcjI1ODM5NzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/2583971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petobens", "html_url": "https://github.com/petobens", "followers_url": "https://api.github.com/users/petobens/followers", "following_url": "https://api.github.com/users/petobens/following{/other_user}", "gists_url": "https://api.github.com/users/petobens/gists{/gist_id}", "starred_url": "https://api.github.com/users/petobens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petobens/subscriptions", "organizations_url": "https://api.github.com/users/petobens/orgs", "repos_url": "https://api.github.com/users/petobens/repos", "events_url": "https://api.github.com/users/petobens/events{/privacy}", "received_events_url": "https://api.github.com/users/petobens/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-16T19:15:57Z", "updated_at": "2020-03-10T23:14:43Z", "closed_at": "2020-03-10T19:11:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Reproducible steps in https://github.com/deoplete-plugins/deoplete-jedi/issues/248", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1504", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1504/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1504/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1504/events", "html_url": "https://github.com/davidhalter/jedi/issues/1504", "id": 565554049, "node_id": "MDU6SXNzdWU1NjU1NTQwNDk=", "number": 1504, "title": "RecursionError with `import pdb; pdb = pdb`", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-14T21:01:27Z", "updated_at": "2020-03-13T06:41:38Z", "closed_at": "2020-03-13T00:00:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following script causes a recursion error:\r\n```python\r\nimport jedi\r\nsource = \"\"\"\r\nimport pdb\r\npdb = pdb  # type: pdb\r\nclass MyPdb(pdb.Pdb):\r\n    ...\r\n\"\"\"\r\n\r\nscript = jedi.Script(source, 4, 14, '')\r\ncompletions = script.completions()\r\nout = [x.complete for x in completions]\r\nprint(out)\r\n```\r\n\r\nI've noticed this with pdbpp when giving a type hint to https://github.com/pdbpp/pdbpp/blob/cb56e1b6126bb87597684d01af6f18c873be85ee/src/pdbpp.py#L85.\r\n\r\n(mypy appears to handle it as expected.)\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/gradual/annotation.py\", line 54, in _infer_annotation_string\r\n    value_set = context.infer_node(node)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/context.py\", line 216, in infer_node\r\n    return infer_node(self, node)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 137, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 150, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 155, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 63, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 220, in _infer_node\r\n    return context.infer_node(element.children[0])\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/context.py\", line 216, in infer_node\r\n    return infer_node(self, node)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 137, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 150, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 155, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  \u2026\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 137, in infer_node\r\n    return _infer_node_if_inferred(context, element)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 150, in _infer_node_if_inferred\r\n    return _infer_node_cached(context, element)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/cache.py\", line 43, in wrapper\r\n    rv = function(obj, *args, **kwargs)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 155, in _infer_node_cached\r\n    return _infer_node(context, element)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/debug.py\", line 82, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 63, in wrapper\r\n    return func(context, *args, **kwargs)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 165, in _infer_node\r\n    return infer_atom(context, element)\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 283, in infer_atom\r\n    if _is_annotation_name(atom):\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/jedi/inference/syntax_tree.py\", line 519, in _is_annotation_name\r\n    ancestor = tree.search_ancestor(name, 'param', 'funcdef', 'expr_stmt')\r\n  File \"\u2026/vim/plugged/jedi-vim/pythonx/jedi/.venv/lib/python3.8/site-packages/parso/tree.py\", line 18, in search_ancestor\r\n    if node is None or node.type in node_types:\r\nRecursionError: maximum recursion depth exceeded in comparison\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1503", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1503/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1503/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1503/events", "html_url": "https://github.com/davidhalter/jedi/issues/1503", "id": 565334213, "node_id": "MDU6SXNzdWU1NjUzMzQyMTM=", "number": 1503, "title": "TypeError: object of type 'NoneType' has no len()", "user": {"login": "Ekopalypse", "id": 47723516, "node_id": "MDQ6VXNlcjQ3NzIzNTE2", "avatar_url": "https://avatars2.githubusercontent.com/u/47723516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ekopalypse", "html_url": "https://github.com/Ekopalypse", "followers_url": "https://api.github.com/users/Ekopalypse/followers", "following_url": "https://api.github.com/users/Ekopalypse/following{/other_user}", "gists_url": "https://api.github.com/users/Ekopalypse/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ekopalypse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ekopalypse/subscriptions", "organizations_url": "https://api.github.com/users/Ekopalypse/orgs", "repos_url": "https://api.github.com/users/Ekopalypse/repos", "events_url": "https://api.github.com/users/Ekopalypse/events{/privacy}", "received_events_url": "https://api.github.com/users/Ekopalypse/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-14T13:43:12Z", "updated_at": "2020-03-11T18:34:54Z", "closed_at": "2020-03-11T18:34:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "[_get_string_prefix_and_quote](https://github.com/davidhalter/jedi/blob/master/jedi/api/strings.py#L92) may return None, but [_patches_quote_at_position](https://github.com/davidhalter/jedi/blob/master/jedi/api/strings.py#L101) does not take this into account.\r\n\r\nHappens to me when trying to write a byte string like b' or b\"\r\nbut does not happen when writing f' or f\"\r\n\r\nWindows7 x64\r\nPython 3.7\r\nJedi 0.16.0\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1502", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1502/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1502/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1502/events", "html_url": "https://github.com/davidhalter/jedi/issues/1502", "id": 565019167, "node_id": "MDU6SXNzdWU1NjUwMTkxNjc=", "number": 1502, "title": "goto() returns nothing for class attribute with type annotation", "user": {"login": "xiaochuanyu", "id": 1718745, "node_id": "MDQ6VXNlcjE3MTg3NDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1718745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaochuanyu", "html_url": "https://github.com/xiaochuanyu", "followers_url": "https://api.github.com/users/xiaochuanyu/followers", "following_url": "https://api.github.com/users/xiaochuanyu/following{/other_user}", "gists_url": "https://api.github.com/users/xiaochuanyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaochuanyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaochuanyu/subscriptions", "organizations_url": "https://api.github.com/users/xiaochuanyu/orgs", "repos_url": "https://api.github.com/users/xiaochuanyu/repos", "events_url": "https://api.github.com/users/xiaochuanyu/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaochuanyu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 17235917, "node_id": "MDU6TGFiZWwxNzIzNTkxNw==", "url": "https://api.github.com/repos/davidhalter/jedi/labels/bug", "name": "bug", "color": "e10c02", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-13T23:54:03Z", "updated_at": "2020-03-13T11:54:44Z", "closed_at": "2020-03-13T11:54:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport jedi # version 0.16\r\n\r\nsource = '''\r\nclass A:\r\n    class_attr = 1\r\n    class_attr_with_hint: int = 2\r\n\r\n    @classmethod\r\n    def do(cls):\r\n        cls.class_attr = 2  # line 8\r\n        cls.class_attr_with_hint = 2  # line 9\r\n'''\r\nscript = jedi.Script(source, path='test.py')\r\ndefinitions = script.goto(line=8, column=13)\r\nprint(definitions)\r\ndefinitions = script.goto(line=9, column=13)\r\nprint(definitions)\r\n```\r\nThis prints:\r\n```\r\n[<Definition full_name='test.A.class_attr', description='class_attr = 1'>]\r\n[]\r\n```\r\nBut I was expecting something like:\r\n```\r\n[<Definition full_name='test.A.class_attr', description='class_attr = 1'>]\r\n[<Definition full_name='test.A.class_attr_with_hint', description='class_attr_with_hint = 2'>]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/davidhalter/jedi/issues/1500", "repository_url": "https://api.github.com/repos/davidhalter/jedi", "labels_url": "https://api.github.com/repos/davidhalter/jedi/issues/1500/labels{/name}", "comments_url": "https://api.github.com/repos/davidhalter/jedi/issues/1500/comments", "events_url": "https://api.github.com/repos/davidhalter/jedi/issues/1500/events", "html_url": "https://github.com/davidhalter/jedi/issues/1500", "id": 563881479, "node_id": "MDU6SXNzdWU1NjM4ODE0Nzk=", "number": 1500, "title": "0.16.0: test suite is failing", "user": {"login": "kloczek", "id": 31284574, "node_id": "MDQ6VXNlcjMxMjg0NTc0", "avatar_url": "https://avatars0.githubusercontent.com/u/31284574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kloczek", "html_url": "https://github.com/kloczek", "followers_url": "https://api.github.com/users/kloczek/followers", "following_url": "https://api.github.com/users/kloczek/following{/other_user}", "gists_url": "https://api.github.com/users/kloczek/gists{/gist_id}", "starred_url": "https://api.github.com/users/kloczek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kloczek/subscriptions", "organizations_url": "https://api.github.com/users/kloczek/orgs", "repos_url": "https://api.github.com/users/kloczek/repos", "events_url": "https://api.github.com/users/kloczek/events{/privacy}", "received_events_url": "https://api.github.com/users/kloczek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-12T09:56:35Z", "updated_at": "2020-02-12T18:30:52Z", "closed_at": "2020-02-12T18:25:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n[tkloczko@barrel jedi-0.16.0]$ tox -e py38\r\nGLOB sdist-make: /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/setup.py\r\npy38 create: /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/.tox/py38\r\npy38 installdeps: numpydoc, sphinx < 2.0, git+https://github.com/davidhalter/parso.git\r\npy38 inst: /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/.tox/.tmp/package/1/jedi-0.16.0.zip\r\npy38 installed: alabaster==0.7.12,atomicwrites==1.3.0,attrs==19.3.0,Babel==2.8.0,certifi==2019.11.28,chardet==3.0.4,colorama==0.4.1,docopt==0.6.2,docutils==0.16,idna==2.8,imagesize==1.2.0,jedi==0.16.0,Jinja2==2.11.1,MarkupSafe==1.1.1,more-itertools==8.2.0,numpydoc==0.9.2,packaging==20.1,parso==0.6.1,pluggy==0.13.1,py==1.8.1,Pygments==2.5.2,pyparsing==2.4.6,pytest==4.6.9,pytz==2019.3,requests==2.22.0,six==1.14.0,snowballstemmer==2.0.0,Sphinx==1.8.5,sphinxcontrib-websupport==1.2.0,urllib3==1.25.8,wcwidth==0.1.8\r\npy38 run-test-pre: PYTHONHASHSEED='3286169064'\r\npy38 run-test: commands[0] | pytest\r\n/home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/.tox/py38/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:9: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\r\n  import imp\r\n========================================================================================= test session starts ==========================================================================================\r\nplatform linux -- Python 3.8.1, pytest-4.6.9, py-1.8.1, pluggy-0.13.1\r\ncachedir: .tox/py38/.pytest_cache\r\nrootdir: /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0, inifile: pytest.ini, testpaths: jedi, test\r\ncollected 3094 items\r\n\r\njedi/__init__.py .                                                                                                                                                                               [  0%]\r\njedi/api/__init__.py .                                                                                                                                                                           [  0%]\r\njedi/api/classes.py .....                                                                                                                                                                        [  0%]\r\njedi/api/replstartup.py .                                                                                                                                                                        [  0%]\r\njedi/inference/context.py .                                                                                                                                                                      [  0%]\r\njedi/inference/docstrings.py ..                                                                                                                                                                  [  0%]\r\njedi/inference/sys_path.py .                                                                                                                                                                     [  0%]\r\ntest/conftest.py .                                                                                                                                                                               [  0%]\r\ntest/test_cache.py ..                                                                                                                                                                            [  0%]\r\ntest/test_compatibility.py .                                                                                                                                                                     [  0%]\r\ntest/test_debug.py .                                                                                                                                                                             [  0%]\r\ntest/test_deprecation.py .....                                                                                                                                                                   [  0%]\r\ntest/test_file_io.py ..                                                                                                                                                                          [  0%]\r\ntest/test_integration.py ....................................................................................................................................................................... [  6%]\r\n................................................................................................................................................................................................ [ 12%]\r\n................................................................................................................................................................................................ [ 18%]\r\n................................................................................................................................................................................................ [ 24%]\r\n.....................................................................................................................................................................................FFF........ [ 30%]\r\n................................................................................................................................................................................................ [ 37%]\r\n...........................................sssssssssssssssssssssssssssssssssss.................................................................................................................. [ 43%]\r\n................................................................................................................................................................................................ [ 49%]\r\n................................................................................................................................................................................................ [ 55%]\r\n..........................................................................s.........s..............                                                                                              [ 59%]\r\ntest/test_settings.py ...                                                                                                                                                                        [ 59%]\r\ntest/test_speed.py ....                                                                                                                                                                          [ 59%]\r\ntest/test_utils.py ..........                                                                                                                                                                    [ 59%]\r\ntest/test_api/test_analysis.py .                                                                                                                                                                 [ 59%]\r\ntest/test_api/test_api.py ..............................                                                                                                                                         [ 60%]\r\ntest/test_api/test_api_classes_follow_definition.py ....                                                                                                                                         [ 60%]\r\ntest/test_api/test_call_signatures.py .......................................................................................................................................................... [ 65%]\r\n..................................................                                                                                                                                               [ 67%]\r\ntest/test_api/test_classes.py ..............................................................                                                                                                     [ 69%]\r\ntest/test_api/test_completion.py ...........................................................................................................................................                     [ 73%]\r\ntest/test_api/test_context.py .........................................                                                                                                                          [ 75%]\r\ntest/test_api/test_defined_names.py ............                                                                                                                                                 [ 75%]\r\ntest/test_api/test_documentation.py .......................                                                                                                                                      [ 76%]\r\ntest/test_api/test_environment.py ..sssss..............                                                                                                                                          [ 76%]\r\ntest/test_api/test_full_name.py ..........F.                                                                                                                                                     [ 77%]\r\ntest/test_api/test_interpreter.py ...............................................................................................................                                                [ 80%]\r\ntest/test_api/test_keyword.py ....                                                                                                                                                               [ 81%]\r\ntest/test_api/test_project.py ..                                                                                                                                                                 [ 81%]\r\ntest/test_api/test_settings.py s.                                                                                                                                                                [ 81%]\r\ntest/test_api/test_signatures.py ...................                                                                                                                                             [ 81%]\r\ntest/test_api/test_unicode.py .......                                                                                                                                                            [ 81%]\r\ntest/test_api/test_usages.py ..                                                                                                                                                                  [ 82%]\r\ntest/test_inference/test_absolute_import.py .                                                                                                                                                    [ 82%]\r\ntest/test_inference/test_annotations.py .......                                                                                                                                                  [ 82%]\r\ntest/test_inference/test_buildout_detection.py ......                                                                                                                                            [ 82%]\r\ntest/test_inference/test_compiled.py ...........................                                                                                                                                 [ 83%]\r\ntest/test_inference/test_context.py ..                                                                                                                                                           [ 83%]\r\ntest/test_inference/test_docstring.py .......................ss...                                                                                                                               [ 84%]\r\ntest/test_inference/test_extension.py ...s                                                                                                                                                       [ 84%]\r\ntest/test_inference/test_fstring.py .                                                                                                                                                            [ 84%]\r\ntest/test_inference/test_implicit_namespace_package.py ......                                                                                                                                    [ 84%]\r\ntest/test_inference/test_imports.py ........................xxxx........s.....................................                                                                                   [ 87%]\r\ntest/test_inference/test_literals.py ...                                                                                                                                                         [ 87%]\r\ntest/test_inference/test_mixed.py ...............                                                                                                                                                [ 87%]\r\ntest/test_inference/test_namespace_package.py ................                                                                                                                                   [ 88%]\r\ntest/test_inference/test_precedence.py ..x                                                                                                                                                       [ 88%]\r\ntest/test_inference/test_pyc.py .                                                                                                                                                                [ 88%]\r\ntest/test_inference/test_representation.py ..                                                                                                                                                    [ 88%]\r\ntest/test_inference/test_signature.py .........................................................................                                                                                  [ 90%]\r\ntest/test_inference/test_stdlib.py .......                                                                                                                                                       [ 90%]\r\ntest/test_inference/test_sys_path.py .F................ss.....                                                                                                                                   [ 91%]\r\ntest/test_inference/test_gradual/test_conversion.py ....                                                                                                                                         [ 91%]\r\ntest/test_inference/test_gradual/test_stub_loading.py ...........................                                                                                                                [ 92%]\r\ntest/test_inference/test_gradual/test_stubs.py ................................................................................................................................................. [ 97%]\r\n...................................                                                                                                                                                              [ 98%]\r\ntest/test_inference/test_gradual/test_typeshed.py ..........................                                                                                                                     [ 99%]\r\ntest/test_parso_integration/test_basic.py ......                                                                                                                                                 [ 99%]\r\ntest/test_parso_integration/test_error_correction.py ....                                                                                                                                        [ 99%]\r\ntest/test_parso_integration/test_parser_utils.py .......                                                                                                                                         [100%]\r\n\r\n=============================================================================================== FAILURES ===============================================================================================\r\n______________________________________________________________________________________ test_completion[basic:212] ______________________________________________________________________________________\r\n\r\ncase = <IntegrationTestCase: /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/test/completion/basic.py:212 'deleted_var'>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7efdff13b3a0>\r\nenvironment = <Environment: 3.8.1 in /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/.tox/py38>, has_typing = True\r\n\r\n    def test_completion(case, monkeypatch, environment, has_typing):\r\n        skip_reason = case.get_skip_reason(environment)\r\n        if skip_reason is not None:\r\n            pytest.skip(skip_reason)\r\n\r\n        _CONTAINS_TYPING = ('pep0484_typing', 'pep0484_comments', 'pep0526_variables')\r\n        if not has_typing and any(x in case.path for x in _CONTAINS_TYPING):\r\n            pytest.skip('Needs the typing module installed to run this test.')\r\n        repo_root = helpers.root_dir\r\n        monkeypatch.chdir(os.path.join(repo_root, 'jedi'))\r\n>       case.run(assert_case_equal, environment)\r\n\r\n../test/test_integration.py:44:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../test/run.py:215: in run\r\n    return testers[self.test_type](compare_cb, environment)\r\n../test/run.py:257: in run_inference\r\n    return compare_cb(self, is_str, should)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ncase = <IntegrationTestCase: /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/test/completion/basic.py:212 'deleted_var'>, actual = set(), desired = {'builtins:instance int()'}\r\n\r\n    def assert_case_equal(case, actual, desired):\r\n        \"\"\"\r\n        Assert ``actual == desired`` with formatted message.\r\n\r\n        This is not needed for typical pytest use case, but as we need\r\n        ``--assert=plain`` (see ../pytest.ini) to workaround some issue\r\n        due to pytest magic, let's format the message by hand.\r\n        \"\"\"\r\n>       assert actual == desired, \"\"\"\r\n    Test %r failed.\r\n    actual  = %s\r\n    desired = %s\r\n    \"\"\" % (case, actual, desired)\r\nE       AssertionError:\r\nE         Test <IntegrationTestCase: /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/test/completion/basic.py:212 'deleted_var'> failed.\r\nE         actual  = set()\r\nE         desired = {'builtins:instance int()'}\r\nE\r\nE       assert set() == {'builtins:instance int()'}\r\nE         Extra items in the right set:\r\nE         'builtins:instance int()'\r\nE         Use -v to get the full diff\r\n\r\n../test/test_integration.py:16: AssertionError\r\n______________________________________________________________________________________ test_completion[basic:214] ______________________________________________________________________________________\r\n\r\ncase = <IntegrationTestCase: /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/test/completion/basic.py:214 'deleted_var'>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7efdfef9d3a0>\r\nenvironment = <Environment: 3.8.1 in /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/.tox/py38>, has_typing = True\r\n\r\n    def test_completion(case, monkeypatch, environment, has_typing):\r\n        skip_reason = case.get_skip_reason(environment)\r\n        if skip_reason is not None:\r\n            pytest.skip(skip_reason)\r\n\r\n        _CONTAINS_TYPING = ('pep0484_typing', 'pep0484_comments', 'pep0526_variables')\r\n        if not has_typing and any(x in case.path for x in _CONTAINS_TYPING):\r\n            pytest.skip('Needs the typing module installed to run this test.')\r\n        repo_root = helpers.root_dir\r\n        monkeypatch.chdir(os.path.join(repo_root, 'jedi'))\r\n>       case.run(assert_case_equal, environment)\r\n\r\n../test/test_integration.py:44:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../test/run.py:215: in run\r\n    return testers[self.test_type](compare_cb, environment)\r\n../test/run.py:222: in run_completion\r\n    return compare_cb(self, comp_str, set(literal_eval(self.correct)))\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ncase = <IntegrationTestCase: /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/test/completion/basic.py:214 'deleted_var'>, actual = set(), desired = {'deleted_var'}\r\n\r\n    def assert_case_equal(case, actual, desired):\r\n        \"\"\"\r\n        Assert ``actual == desired`` with formatted message.\r\n\r\n        This is not needed for typical pytest use case, but as we need\r\n        ``--assert=plain`` (see ../pytest.ini) to workaround some issue\r\n        due to pytest magic, let's format the message by hand.\r\n        \"\"\"\r\n>       assert actual == desired, \"\"\"\r\n    Test %r failed.\r\n    actual  = %s\r\n    desired = %s\r\n    \"\"\" % (case, actual, desired)\r\nE       AssertionError:\r\nE         Test <IntegrationTestCase: /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/test/completion/basic.py:214 'deleted_var'> failed.\r\nE         actual  = set()\r\nE         desired = {'deleted_var'}\r\nE\r\nE       assert set() == {'deleted_var'}\r\nE         Extra items in the right set:\r\nE         'deleted_var'\r\nE         Use -v to get the full diff\r\n\r\n../test/test_integration.py:16: AssertionError\r\n______________________________________________________________________________________ test_completion[basic:216] ______________________________________________________________________________________\r\n\r\ncase = <IntegrationTestCase: /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/test/completion/basic.py:216 'deleted_var'>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7efdff136e20>\r\nenvironment = <Environment: 3.8.1 in /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/.tox/py38>, has_typing = True\r\n\r\n    def test_completion(case, monkeypatch, environment, has_typing):\r\n        skip_reason = case.get_skip_reason(environment)\r\n        if skip_reason is not None:\r\n            pytest.skip(skip_reason)\r\n\r\n        _CONTAINS_TYPING = ('pep0484_typing', 'pep0484_comments', 'pep0526_variables')\r\n        if not has_typing and any(x in case.path for x in _CONTAINS_TYPING):\r\n            pytest.skip('Needs the typing module installed to run this test.')\r\n        repo_root = helpers.root_dir\r\n        monkeypatch.chdir(os.path.join(repo_root, 'jedi'))\r\n>       case.run(assert_case_equal, environment)\r\n\r\n../test/test_integration.py:44:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../test/run.py:215: in run\r\n    return testers[self.test_type](compare_cb, environment)\r\n../test/run.py:262: in run_goto\r\n    return compare_cb(self, comp_str, self.correct)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ncase = <IntegrationTestCase: /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/test/completion/basic.py:216 'deleted_var'>, actual = '[]', desired = \"['deleted_var = 3']\"\r\n\r\n    def assert_case_equal(case, actual, desired):\r\n        \"\"\"\r\n        Assert ``actual == desired`` with formatted message.\r\n\r\n        This is not needed for typical pytest use case, but as we need\r\n        ``--assert=plain`` (see ../pytest.ini) to workaround some issue\r\n        due to pytest magic, let's format the message by hand.\r\n        \"\"\"\r\n>       assert actual == desired, \"\"\"\r\n    Test %r failed.\r\n    actual  = %s\r\n    desired = %s\r\n    \"\"\" % (case, actual, desired)\r\nE       AssertionError:\r\nE         Test <IntegrationTestCase: /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/test/completion/basic.py:216 'deleted_var'> failed.\r\nE         actual  = []\r\nE         desired = ['deleted_var = 3']\r\nE\r\nE       assert '[]' == \"['deleted_var = 3']\"\r\nE         - []\r\nE         + ['deleted_var = 3']\r\n\r\n../test/test_integration.py:16: AssertionError\r\n____________________________________________________________________________________________ test_os_issues ____________________________________________________________________________________________\r\n\r\nScript = functools.partial(<class 'jedi.api.Script'>, environment=<Environment: 3.8.1 in /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/.tox/py38>)\r\n\r\n    def test_os_issues(Script):\r\n        \"\"\"Issue #873\"\"\"\r\n>       assert [c.name for c in Script('import os\\nos.nt''').complete()] == ['nt']\r\nE       AssertionError: assert [] == ['nt']\r\nE         Right contains one more item: 'nt'\r\nE         Use -v to get the full diff\r\n\r\ntest/test_api/test_full_name.py:115: AssertionError\r\n__________________________________________________________________________________________ test_venv_and_pths __________________________________________________________________________________________\r\n\r\nvenv_path = '/tmp/pytest-of-tkloczko/pytest-0/venv_path0/venv'\r\n\r\n    def test_venv_and_pths(venv_path):\r\n        pjoin = os.path.join\r\n\r\n        site_pkg_path = pjoin(venv_path, 'lib')\r\n        if os.name == 'nt':\r\n            site_pkg_path = pjoin(site_pkg_path, 'site-packages')\r\n        else:\r\n            site_pkg_path = glob(pjoin(site_pkg_path, 'python*', 'site-packages'))[0]\r\n        shutil.rmtree(site_pkg_path)\r\n        shutil.copytree(get_example_dir('sample_venvs', 'pth_directory'), site_pkg_path)\r\n\r\n        virtualenv = create_environment(venv_path)\r\n        venv_paths = virtualenv.get_sys_path()\r\n\r\n        ETALON = [\r\n            # For now disable egg-links. I have no idea how they work... ~ dave\r\n            #pjoin('/path', 'from', 'egg-link'),\r\n            #pjoin(site_pkg_path, '.', 'relative', 'egg-link', 'path'),\r\n            site_pkg_path,\r\n            pjoin(site_pkg_path, 'dir-from-foo-pth'),\r\n            '/foo/smth.py:module',\r\n            # Not sure why it's added twice. It has to do with site.py which is not\r\n            # something we can change. However this obviously also doesn't matter.\r\n            '/foo/smth.py:from_func',\r\n            '/foo/smth.py:from_func',\r\n        ]\r\n\r\n        # Ensure that pth and egg-link paths were added.\r\n>       assert venv_paths[-len(ETALON):] == ETALON\r\nE       AssertionError: assert ['/tmp/pytest...py:from_func'] == ['/tmp/pytest-...py:from_func']\r\nE         At index 2 diff: '/foo/smth.py:from_func' != '/foo/smth.py:module'\r\nE         Use -v to get the full diff\r\n\r\ntest/test_inference/test_sys_path.py:60: AssertionError\r\n==================================================================== 5 failed, 3035 passed, 49 skipped, 5 xfailed in 76.35 seconds =====================================================================\r\nERROR: InvocationError for command /home/tkloczko/rpmbuild/BUILD/jedi-0.16.0/.tox/py38/bin/pytest (exited with code 1)\r\n_______________________________________________________________________________________________ summary ________________________________________________________________________________________________\r\nERROR:   py38: commands failed\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}]}