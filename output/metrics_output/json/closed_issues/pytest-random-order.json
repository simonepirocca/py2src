{"total_count": 13, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/42", "repository_url": "https://api.github.com/repos/jbasko/pytest-random-order", "labels_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/42/comments", "events_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/42/events", "html_url": "https://github.com/jbasko/pytest-random-order/issues/42", "id": 644703010, "node_id": "MDU6SXNzdWU2NDQ3MDMwMTA=", "number": 42, "title": "v0.8.0 breaks pytest==4.6.11", "user": {"login": "IlieIoana", "id": 19429402, "node_id": "MDQ6VXNlcjE5NDI5NDAy", "avatar_url": "https://avatars2.githubusercontent.com/u/19429402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IlieIoana", "html_url": "https://github.com/IlieIoana", "followers_url": "https://api.github.com/users/IlieIoana/followers", "following_url": "https://api.github.com/users/IlieIoana/following{/other_user}", "gists_url": "https://api.github.com/users/IlieIoana/gists{/gist_id}", "starred_url": "https://api.github.com/users/IlieIoana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IlieIoana/subscriptions", "organizations_url": "https://api.github.com/users/IlieIoana/orgs", "repos_url": "https://api.github.com/users/IlieIoana/repos", "events_url": "https://api.github.com/users/IlieIoana/events{/privacy}", "received_events_url": "https://api.github.com/users/IlieIoana/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-24T15:21:08Z", "updated_at": "2020-06-24T15:31:35Z", "closed_at": "2020-06-24T15:31:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Seems that pytest-random-order version 0.8.0 is breaking the latest version of pytest that works for python2.7\r\n\r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/_pytest/main.py\", line 206, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/_pytest/main.py\", line 249, in _main\r\nINTERNALERROR>     config.hook.pytest_collection(session=session)\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/pluggy/manager.py\", line 87, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/pluggy/callers.py\", line 81, in get_result\r\nINTERNALERROR>     _reraise(*ex)  # noqa\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/_pytest/main.py\", line 259, in pytest_collection\r\nINTERNALERROR>     return session.perform_collect()\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/_pytest/main.py\", line 498, in perform_collect\r\nINTERNALERROR>     session=self, config=self.config, items=items\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/pluggy/manager.py\", line 87, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/pluggy/callers.py\", line 81, in get_result\r\nINTERNALERROR>     _reraise(*ex)  # noqa\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python2.7/site-packages/pytest_random_order/plugin.py\", line 74, in pytest_collection_modifyitems\r\nINTERNALERROR>     config.warn(0, failure, None)\r\nINTERNALERROR> AttributeError: 'Config' object has no attribute 'warn'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/39", "repository_url": "https://api.github.com/repos/jbasko/pytest-random-order", "labels_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/39/comments", "events_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/39/events", "html_url": "https://github.com/jbasko/pytest-random-order/issues/39", "id": 416029971, "node_id": "MDU6SXNzdWU0MTYwMjk5NzE=", "number": 39, "title": "Get following error after installing the plugins, seems to be caused by version compatibility", "user": {"login": "hdw868", "id": 34624897, "node_id": "MDQ6VXNlcjM0NjI0ODk3", "avatar_url": "https://avatars2.githubusercontent.com/u/34624897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hdw868", "html_url": "https://github.com/hdw868", "followers_url": "https://api.github.com/users/hdw868/followers", "following_url": "https://api.github.com/users/hdw868/following{/other_user}", "gists_url": "https://api.github.com/users/hdw868/gists{/gist_id}", "starred_url": "https://api.github.com/users/hdw868/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hdw868/subscriptions", "organizations_url": "https://api.github.com/users/hdw868/orgs", "repos_url": "https://api.github.com/users/hdw868/repos", "events_url": "https://api.github.com/users/hdw868/events{/privacy}", "received_events_url": "https://api.github.com/users/hdw868/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-01T10:09:23Z", "updated_at": "2019-03-02T00:52:44Z", "closed_at": "2019-03-02T00:52:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "tjust run pytest will call following error:\r\n============================= test session starts =============================\r\nplatform win32 -- Python 2.7.14, pytest-4.1.0, py-1.6.0, pluggy-0.7.1 -- c:\\python27\\python.exe\r\ncachedir: .pytest_cache\r\nUsing --random-order-bucket=module\r\nUsing --random-order-seed=571428\r\n\r\nmetadata: {'Python': '2.7.14', 'Platform': 'Windows-10-10.0.16299', 'Packages': {'py': '1.6.0', 'pytest': '4.1.0', 'pluggy': '0.7.1'}, 'JAVA_HOME': 'C:\\\\Program Files\\\\Java\\\\jdk1.8.0_181', 'Plugins': {'bdd': '3.0.1', 'repeat': '0.7.0', 'datadir': '1.2.1', 'xdist': '1.25.0', 'random-order': '0.8.0', 'json': '0.4.0', 'html': '1.20.0', 'forked': '0.2', 'regressions': '1.0.5', 'metadata': '1.8.0'}}\r\nrootdir: E:\\Dev\\test_mstr_rest\\tests, inifile: pytest.ini\r\nplugins: xdist-1.25.0, repeat-0.7.0, regressions-1.0.5, random-order-0.8.0, metadata-1.8.0, json-0.4.0, html-1.20.0, forked-0.2, datadir-1.2.1, bdd-3.0.1\r\ncollecting ... INTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\_pytest\\main.py\", line 203, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\_pytest\\main.py\", line 242, in _main\r\nINTERNALERROR>     config.hook.pytest_collection(session=session)\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\pluggy\\hooks.py\", line 258, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\pluggy\\manager.py\", line 67, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\pluggy\\manager.py\", line 61, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec_opts.get('firstresult'),\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\pluggy\\callers.py\", line 201, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\pluggy\\callers.py\", line 77, in get_result\r\nINTERNALERROR>     _reraise(*ex)  # noqa\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\pluggy\\callers.py\", line 180, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\_pytest\\main.py\", line 252, in pytest_collection\r\nINTERNALERROR>     return session.perform_collect()\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\_pytest\\main.py\", line 468, in perform_collect\r\nINTERNALERROR>     session=self, config=self.config, items=items\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\pluggy\\hooks.py\", line 258, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\pluggy\\manager.py\", line 67, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\pluggy\\manager.py\", line 61, in <lambda>\r\nINTERNALERROR>     firstresult=hook.spec_opts.get('firstresult'),\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\pluggy\\callers.py\", line 201, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\pluggy\\callers.py\", line 77, in get_result\r\nINTERNALERROR>     _reraise(*ex)  # noqa\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\pluggy\\callers.py\", line 180, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"c:\\python27\\lib\\site-packages\\pytest_random_order\\plugin.py\", line 74, in pytest_collection_modifyitems\r\nINTERNALERROR>     config.warn(0, failure, None)\r\nINTERNALERROR> AttributeError: 'Config' object has no attribute 'warn'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/36", "repository_url": "https://api.github.com/repos/jbasko/pytest-random-order", "labels_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/36/comments", "events_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/36/events", "html_url": "https://github.com/jbasko/pytest-random-order/issues/36", "id": 385494416, "node_id": "MDU6SXNzdWUzODU0OTQ0MTY=", "number": 36, "title": "Some buckets don't work with doctests", "user": {"login": "tobywf", "id": 2903454, "node_id": "MDQ6VXNlcjI5MDM0NTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2903454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobywf", "html_url": "https://github.com/tobywf", "followers_url": "https://api.github.com/users/tobywf/followers", "following_url": "https://api.github.com/users/tobywf/following{/other_user}", "gists_url": "https://api.github.com/users/tobywf/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobywf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobywf/subscriptions", "organizations_url": "https://api.github.com/users/tobywf/orgs", "repos_url": "https://api.github.com/users/tobywf/repos", "events_url": "https://api.github.com/users/tobywf/events{/privacy}", "received_events_url": "https://api.github.com/users/tobywf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jbasko", "id": 632910, "node_id": "MDQ6VXNlcjYzMjkxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/632910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbasko", "html_url": "https://github.com/jbasko", "followers_url": "https://api.github.com/users/jbasko/followers", "following_url": "https://api.github.com/users/jbasko/following{/other_user}", "gists_url": "https://api.github.com/users/jbasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbasko/subscriptions", "organizations_url": "https://api.github.com/users/jbasko/orgs", "repos_url": "https://api.github.com/users/jbasko/repos", "events_url": "https://api.github.com/users/jbasko/events{/privacy}", "received_events_url": "https://api.github.com/users/jbasko/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jbasko", "id": 632910, "node_id": "MDQ6VXNlcjYzMjkxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/632910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbasko", "html_url": "https://github.com/jbasko", "followers_url": "https://api.github.com/users/jbasko/followers", "following_url": "https://api.github.com/users/jbasko/following{/other_user}", "gists_url": "https://api.github.com/users/jbasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbasko/subscriptions", "organizations_url": "https://api.github.com/users/jbasko/orgs", "repos_url": "https://api.github.com/users/jbasko/repos", "events_url": "https://api.github.com/users/jbasko/events{/privacy}", "received_events_url": "https://api.github.com/users/jbasko/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-11-28T23:01:14Z", "updated_at": "2018-11-30T18:50:50Z", "closed_at": "2018-11-30T15:19:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "When running tests against [doctests](https://docs.pytest.org/en/latest/doctest.html), a warning is printed for these buckets: `package`, `module`, and `class`. The buckets `global`, `parent`, `grandparent`, and `none` work fine. Seems to be because [DoctestItems](https://github.com/pytest-dev/pytest/blob/d8e00c983ef4e0b663ce908c2db263416d2b6e2f/src/_pytest/doctest.py#L176) don't have `module` or `cls` attributes (see further down for output).\r\n\r\nI'm not hugely familiar with pytest, so I don't know if this needs fixing on their side. Poking around with ipdb, there doesn't seem to be any attribute that could be used instead.\r\n\r\nA simple solution for now might be to simply point out that some buckets aren't available when running against doctests in the pytest-random-order documentation, and to leave the warning as is.\r\n\r\nI've come up with a minimal working example to reproduce, I'm using `Python 3.7.1, pytest-4.0.1, py-1.7.0, pluggy-0.8.0` and `random-order-1.0.3`. Let me know if you need anything else!\r\n\r\n---\r\n\r\n`foo.py`:\r\n```python\r\ndef add(a, b):\r\n    \"\"\"\r\n    >>> add(1, 1)\r\n    2\r\n    >>> add(0, 0)\r\n    0\r\n    \"\"\"\r\n    return a + b\r\n```\r\nInside fresh virtualenv, using `class` in this case:\r\n```\r\n$ pip install pytest pytest-random-order\r\n$ pytest --doctest-modules --random-order-bucket=class foo.py\r\n=== test session starts ===\r\nplatform darwin -- Python 3.7.1, pytest-4.0.1, py-1.7.0, pluggy-0.8.0\r\nUsing --random-order-bucket=class\r\nUsing --random-order-seed=151339\r\n\r\nrootdir: ., inifile:\r\nplugins: random-order-1.0.3\r\ncollected 1 item\r\n\r\nfoo.py .            [100%]\r\n\r\n=== warnings summary ===\r\nenv/lib/python3.7/site-packages/random_order/plugin.py:87\r\n  env/lib/python3.7/site-packages/random_order/plugin.py:87: PytestWarning: pytest-random-order plugin has failed with AttributeError(\"'DoctestItem' object has no attribute 'cls'\"):\r\n    File \"env/lib/python3.7/site-packages/random_order/plugin.py\", line 75, in pytest_collection_modifyitems\r\n      session=session,\r\n    File \"env/lib/python3.7/site-packages/random_order/shuffler.py\", line 63, in _shuffle_items\r\n      full_bucket_key = get_full_bucket_key(item)\r\n    File \"env/lib/python3.7/site-packages/random_order/shuffler.py\", line 52, in get_full_bucket_key\r\n      return ItemKey(bucket=bucket_key(item, session), disabled=disable(item, session))\r\n    File \"env/lib/python3.7/site-packages/random_order/bucket_types.py\", line 16, in wrapped\r\n      key = f(item)\r\n    File \"env/lib/python3.7/site-packages/random_order/bucket_types.py\", line 47, in get_class_key\r\n      if item.cls:\r\n  \r\n    warnings.warn(pytest.PytestWarning(failure))\r\n\r\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\r\n=== 1 passed, 1 warnings in 0.01 seconds ===\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/35", "repository_url": "https://api.github.com/repos/jbasko/pytest-random-order", "labels_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/35/comments", "events_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/35/events", "html_url": "https://github.com/jbasko/pytest-random-order/issues/35", "id": 380698625, "node_id": "MDU6SXNzdWUzODA2OTg2MjU=", "number": 35, "title": "Add tests to PyPI sources", "user": {"login": "seifertm", "id": 8395347, "node_id": "MDQ6VXNlcjgzOTUzNDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/8395347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seifertm", "html_url": "https://github.com/seifertm", "followers_url": "https://api.github.com/users/seifertm/followers", "following_url": "https://api.github.com/users/seifertm/following{/other_user}", "gists_url": "https://api.github.com/users/seifertm/gists{/gist_id}", "starred_url": "https://api.github.com/users/seifertm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seifertm/subscriptions", "organizations_url": "https://api.github.com/users/seifertm/orgs", "repos_url": "https://api.github.com/users/seifertm/repos", "events_url": "https://api.github.com/users/seifertm/events{/privacy}", "received_events_url": "https://api.github.com/users/seifertm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-14T13:30:02Z", "updated_at": "2018-11-16T14:46:40Z", "closed_at": "2018-11-16T14:46:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am currently trying to package `pytest-random-order-1.0.2` for Gentoo Linux. Gentoo packages are generally compiled from source. The installation process involves a test phase which executes the package's tests in order to verify that the installed software is working. However, the source tarball for `pytest-random-order-1.0.2` does not include the tests.\r\n\r\nWould it be possible to add tests to the PyPI source tarball for future releases?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/32", "repository_url": "https://api.github.com/repos/jbasko/pytest-random-order", "labels_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/32/comments", "events_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/32/events", "html_url": "https://github.com/jbasko/pytest-random-order/issues/32", "id": 370841592, "node_id": "MDU6SXNzdWUzNzA4NDE1OTI=", "number": 32, "title": "switching to not enabled by default.", "user": {"login": "stas00", "id": 10676103, "node_id": "MDQ6VXNlcjEwNjc2MTAz", "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stas00", "html_url": "https://github.com/stas00", "followers_url": "https://api.github.com/users/stas00/followers", "following_url": "https://api.github.com/users/stas00/following{/other_user}", "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}", "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stas00/subscriptions", "organizations_url": "https://api.github.com/users/stas00/orgs", "repos_url": "https://api.github.com/users/stas00/repos", "events_url": "https://api.github.com/users/stas00/events{/privacy}", "received_events_url": "https://api.github.com/users/stas00/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-10-16T23:39:18Z", "updated_at": "2018-10-20T13:44:41Z", "closed_at": "2018-10-20T13:44:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "To \"The plugin is enabled by default\" - would it be an unreasonable request to change the module not to be enabled by default and use a flag to enable it instead? Perhaps an env variable could be used to enable it globally w/o a flag. I'd like to start using this module in our environment, but its default behavior is not suitable for everybody. \r\n\r\nAlternatively, do you know of any other similar modules that don't enable themselves by default? The only other I found of the same quality is `pytest-randomly` which has a similar issue.\r\n\r\nI'm not questioning your choice in the matter of implementing it this way, just asking if perhaps it can be made more flexible so that it'll be accessible to more people.\r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/31", "repository_url": "https://api.github.com/repos/jbasko/pytest-random-order", "labels_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/31/comments", "events_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/31/events", "html_url": "https://github.com/jbasko/pytest-random-order/issues/31", "id": 369860533, "node_id": "MDU6SXNzdWUzNjk4NjA1MzM=", "number": 31, "title": "pytest-repeat integration", "user": {"login": "stas00", "id": 10676103, "node_id": "MDQ6VXNlcjEwNjc2MTAz", "avatar_url": "https://avatars2.githubusercontent.com/u/10676103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stas00", "html_url": "https://github.com/stas00", "followers_url": "https://api.github.com/users/stas00/followers", "following_url": "https://api.github.com/users/stas00/following{/other_user}", "gists_url": "https://api.github.com/users/stas00/gists{/gist_id}", "starred_url": "https://api.github.com/users/stas00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stas00/subscriptions", "organizations_url": "https://api.github.com/users/stas00/orgs", "repos_url": "https://api.github.com/users/stas00/repos", "events_url": "https://api.github.com/users/stas00/events{/privacy}", "received_events_url": "https://api.github.com/users/stas00/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-10-14T02:27:11Z", "updated_at": "2018-10-20T13:10:49Z", "closed_at": "2018-10-20T13:09:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to integrate [`pytest-repeat`](https://github.com/pytest-dev/pytest-repeat). That is if I have that and `pytest-random-order`installed and I run:\r\n\r\n   pytest --count=10 \r\n\r\nit'll repeat the tests and shuffle the whole extended set. Currently the shuffle happens first and then the tests are repeated. What I'd like is for the shuffle to take the list of [tests * count] and to shuffle that. \r\n\r\nOr perhaps it'd be just easier to just add repeat function to this module as it fits in quite closely.\r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/29", "repository_url": "https://api.github.com/repos/jbasko/pytest-random-order", "labels_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/29/comments", "events_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/29/events", "html_url": "https://github.com/jbasko/pytest-random-order/issues/29", "id": 331096245, "node_id": "MDU6SXNzdWUzMzEwOTYyNDU=", "number": 29, "title": "Do not randomize initial tests", "user": {"login": "michalsimek", "id": 4162584, "node_id": "MDQ6VXNlcjQxNjI1ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4162584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michalsimek", "html_url": "https://github.com/michalsimek", "followers_url": "https://api.github.com/users/michalsimek/followers", "following_url": "https://api.github.com/users/michalsimek/following{/other_user}", "gists_url": "https://api.github.com/users/michalsimek/gists{/gist_id}", "starred_url": "https://api.github.com/users/michalsimek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michalsimek/subscriptions", "organizations_url": "https://api.github.com/users/michalsimek/orgs", "repos_url": "https://api.github.com/users/michalsimek/repos", "events_url": "https://api.github.com/users/michalsimek/events{/privacy}", "received_events_url": "https://api.github.com/users/michalsimek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-11T08:45:06Z", "updated_at": "2018-10-20T13:45:25Z", "closed_at": "2018-10-20T13:45:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI would like to use this module for test randomization but I need to run some initial setup first before other tests. I would expect that It is possible to move them to different file and never randomize files but will be the best if I can simply mark tests which shouldn't be randomized and should run first before others.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/28", "repository_url": "https://api.github.com/repos/jbasko/pytest-random-order", "labels_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/28/comments", "events_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/28/events", "html_url": "https://github.com/jbasko/pytest-random-order/issues/28", "id": 330999343, "node_id": "MDU6SXNzdWUzMzA5OTkzNDM=", "number": 28, "title": "support failed-first", "user": {"login": "oppianmatt", "id": 48596, "node_id": "MDQ6VXNlcjQ4NTk2", "avatar_url": "https://avatars0.githubusercontent.com/u/48596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oppianmatt", "html_url": "https://github.com/oppianmatt", "followers_url": "https://api.github.com/users/oppianmatt/followers", "following_url": "https://api.github.com/users/oppianmatt/following{/other_user}", "gists_url": "https://api.github.com/users/oppianmatt/gists{/gist_id}", "starred_url": "https://api.github.com/users/oppianmatt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oppianmatt/subscriptions", "organizations_url": "https://api.github.com/users/oppianmatt/orgs", "repos_url": "https://api.github.com/users/oppianmatt/repos", "events_url": "https://api.github.com/users/oppianmatt/events{/privacy}", "received_events_url": "https://api.github.com/users/oppianmatt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-10T20:20:50Z", "updated_at": "2018-06-13T00:30:32Z", "closed_at": "2018-06-13T00:30:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would like to be able to use this and --failed-first at the same time.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/26", "repository_url": "https://api.github.com/repos/jbasko/pytest-random-order", "labels_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/26/comments", "events_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/26/events", "html_url": "https://github.com/jbasko/pytest-random-order/issues/26", "id": 317256533, "node_id": "MDU6SXNzdWUzMTcyNTY1MzM=", "number": 26, "title": "Randomisation not compatible with custom test collection", "user": {"login": "ringods", "id": 77923, "node_id": "MDQ6VXNlcjc3OTIz", "avatar_url": "https://avatars2.githubusercontent.com/u/77923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ringods", "html_url": "https://github.com/ringods", "followers_url": "https://api.github.com/users/ringods/followers", "following_url": "https://api.github.com/users/ringods/following{/other_user}", "gists_url": "https://api.github.com/users/ringods/gists{/gist_id}", "starred_url": "https://api.github.com/users/ringods/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ringods/subscriptions", "organizations_url": "https://api.github.com/users/ringods/orgs", "repos_url": "https://api.github.com/users/ringods/repos", "events_url": "https://api.github.com/users/ringods/events{/privacy}", "received_events_url": "https://api.github.com/users/ringods/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-24T14:37:16Z", "updated_at": "2018-04-26T08:09:47Z", "closed_at": "2018-04-25T16:36:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have written two custom pytest plugins to test different aspects of an internal product. Each of these plugins has a custom way of collecting tests, passing custom subclasses of `pytest.File`, `pytest.Collector` and `pytest.Item` back to pytest.\r\n\r\nThe `pytest-random-order` only works with the `global` random *bucket-type*. [All other bucket-type functions](https://github.com/jbasko/pytest-random-order/blob/66cb6775d6619a1b18ad6b3b8fd4bec7396c1dc4/pytest_random_order/plugin.py#L72-L74) use the member `module`, which is defined in the pytest `python` plugin:\r\n\r\nhttps://github.com/pytest-dev/pytest/blob/d61a7670a1d50eab367dfac03896d2811dbf5279/_pytest/python.py#L210\r\n\r\nSince I pass back a tree with collections of tests (`root -> File* -> Collector* -> Item*`), it would be nice if randomisation could happen at the different levels of my custom pytest plugin.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/23", "repository_url": "https://api.github.com/repos/jbasko/pytest-random-order", "labels_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/23/comments", "events_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/23/events", "html_url": "https://github.com/jbasko/pytest-random-order/issues/23", "id": 305777587, "node_id": "MDU6SXNzdWUzMDU3Nzc1ODc=", "number": 23, "title": "support --random-order-bucket=no (or =none)", "user": {"login": "anntzer", "id": 1322974, "node_id": "MDQ6VXNlcjEzMjI5NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1322974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anntzer", "html_url": "https://github.com/anntzer", "followers_url": "https://api.github.com/users/anntzer/followers", "following_url": "https://api.github.com/users/anntzer/following{/other_user}", "gists_url": "https://api.github.com/users/anntzer/gists{/gist_id}", "starred_url": "https://api.github.com/users/anntzer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anntzer/subscriptions", "organizations_url": "https://api.github.com/users/anntzer/orgs", "repos_url": "https://api.github.com/users/anntzer/repos", "events_url": "https://api.github.com/users/anntzer/events{/privacy}", "received_events_url": "https://api.github.com/users/anntzer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-16T01:58:41Z", "updated_at": "2018-03-16T09:01:26Z", "closed_at": "2018-03-16T09:01:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Supporting `--random-order-bucket=no` (or `none`, I don't really care) would allow that option to be listed in the output of `pytest -h`, avoiding the need for the occasional user to lookup online the syntax to disable a plugin (`-p no:random-order`).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/22", "repository_url": "https://api.github.com/repos/jbasko/pytest-random-order", "labels_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/22/comments", "events_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/22/events", "html_url": "https://github.com/jbasko/pytest-random-order/issues/22", "id": 253548530, "node_id": "MDU6SXNzdWUyNTM1NDg1MzA=", "number": 22, "title": "Parallel testing support (xdist)", "user": {"login": "dex6", "id": 5950550, "node_id": "MDQ6VXNlcjU5NTA1NTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5950550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dex6", "html_url": "https://github.com/dex6", "followers_url": "https://api.github.com/users/dex6/followers", "following_url": "https://api.github.com/users/dex6/following{/other_user}", "gists_url": "https://api.github.com/users/dex6/gists{/gist_id}", "starred_url": "https://api.github.com/users/dex6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dex6/subscriptions", "organizations_url": "https://api.github.com/users/dex6/orgs", "repos_url": "https://api.github.com/users/dex6/repos", "events_url": "https://api.github.com/users/dex6/events{/privacy}", "received_events_url": "https://api.github.com/users/dex6/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-29T07:03:58Z", "updated_at": "2018-03-19T21:56:40Z", "closed_at": "2018-03-19T21:56:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for great plugin. However, there's one problem for me: my test suite uses xdist to run tests on multiple CPU cores, and it completely breaks with pytest-random-order.\r\n\r\nHere's some fake tests to demonstrate the problem:\r\n```\r\n# cat /tmp/some_tests.py \r\ndef test_1():\r\n        pass\r\ndef test_2():\r\n        pass\r\ndef test_3():\r\n        pass\r\ndef test_4():\r\n        pass\r\n```\r\n\r\nAnd here it is executed in two parallel processes:\r\n```\r\n# pytest /tmp/some_tests.py -n2\r\n============================ test session starts ============================\r\nplatform linux2 -- Python 2.7.5, pytest-3.2.1, py-1.4.34, pluggy-0.4.0\r\nUsing --randomly-seed=1503989180\r\nUsing --random-order-bucket=module\r\nUsing --random-order-seed=249480\r\n\r\nrootdir: /tmp, inifile:\r\nplugins: xdist-1.20.0, timeout-1.2.0, repeat-0.4.1, randomly-1.2.1, random-order-0.5.4, raisesregexp-2.1, pythonpath-0.7.1, mock-1.6.2, logging-2015.11.4, instafail-0.3.0, forked-0.2, faker-2.0.0, cov-2.5.1, browser-0.2.0\r\ngw0 [4] / gw1 [4]\r\nscheduling tests via LoadScheduling\r\ncollecting 0 items / 1 errors                                                \r\n================================== ERRORS ===================================\r\n___________________________ ERROR collecting gw1 ____________________________\r\nDifferent tests were collected between gw0 and gw1. The difference is:\r\n--- gw0\r\n\r\n+++ gw1\r\n\r\n@@ -1,4 +1,4 @@\r\n\r\n some_tests.py::test_3\r\n-some_tests.py::test_4\r\n some_tests.py::test_2\r\n some_tests.py::test_1\r\n+some_tests.py::test_4\r\n========================== 1 error in 0.51 seconds ==========================\r\n```\r\n\r\nIt gets worse the more tests and CPU cores you have. I suppose that every subprocess generates a different seed and executes other test cases than it was expected to, because when a seed is specified using --random-order-seed, it always seem to work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/21", "repository_url": "https://api.github.com/repos/jbasko/pytest-random-order", "labels_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/21/comments", "events_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/21/events", "html_url": "https://github.com/jbasko/pytest-random-order/issues/21", "id": 219014780, "node_id": "MDU6SXNzdWUyMTkwMTQ3ODA=", "number": 21, "title": "pytest-warning: Module already imported so can not be re-written", "user": {"login": "jbasko", "id": 632910, "node_id": "MDQ6VXNlcjYzMjkxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/632910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbasko", "html_url": "https://github.com/jbasko", "followers_url": "https://api.github.com/users/jbasko/followers", "following_url": "https://api.github.com/users/jbasko/following{/other_user}", "gists_url": "https://api.github.com/users/jbasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbasko/subscriptions", "organizations_url": "https://api.github.com/users/jbasko/orgs", "repos_url": "https://api.github.com/users/jbasko/repos", "events_url": "https://api.github.com/users/jbasko/events{/privacy}", "received_events_url": "https://api.github.com/users/jbasko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 505153372, "node_id": "MDU6TGFiZWw1MDUxNTMzNzI=", "url": "https://api.github.com/repos/jbasko/pytest-random-order/labels/invalid", "name": "invalid", "color": "e6e6e6", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-03T18:04:03Z", "updated_at": "2017-05-09T07:45:15Z", "closed_at": "2017-05-09T07:45:15Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Hadn't noticed this before, but on Python 3 I'm seeing a `pytest-warning` at the end of every run:\r\n\r\n`WP1 None Module already imported so can not be re-written: pytest_random_order`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/18", "repository_url": "https://api.github.com/repos/jbasko/pytest-random-order", "labels_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/18/comments", "events_url": "https://api.github.com/repos/jbasko/pytest-random-order/issues/18/events", "html_url": "https://github.com/jbasko/pytest-random-order/issues/18", "id": 211147739, "node_id": "MDU6SXNzdWUyMTExNDc3Mzk=", "number": 18, "title": "test_markers not testing properly", "user": {"login": "eLRuLL", "id": 1459486, "node_id": "MDQ6VXNlcjE0NTk0ODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1459486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eLRuLL", "html_url": "https://github.com/eLRuLL", "followers_url": "https://api.github.com/users/eLRuLL/followers", "following_url": "https://api.github.com/users/eLRuLL/following{/other_user}", "gists_url": "https://api.github.com/users/eLRuLL/gists{/gist_id}", "starred_url": "https://api.github.com/users/eLRuLL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eLRuLL/subscriptions", "organizations_url": "https://api.github.com/users/eLRuLL/orgs", "repos_url": "https://api.github.com/users/eLRuLL/repos", "events_url": "https://api.github.com/users/eLRuLL/events{/privacy}", "received_events_url": "https://api.github.com/users/eLRuLL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-01T17:12:49Z", "updated_at": "2017-03-02T21:38:30Z", "closed_at": "2017-03-02T21:35:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I was checking the tests in `test_makers`, specifically `test_marker_disables_random_order_in_module` and `test_marker_disables_random_order_in_class` and saw you are calling:\r\n\r\n    result = testdir.runpytest('--random-order-bucket=module', '-v')\r\n    result.assert_outcomes(passed=20)\r\n\r\nAre those lines really necessary? If they are, I would really appreciate if you could explain how they are relevant for the test.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}]}