{"total_count": 13, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/nats-io/stan.py/issues/37", "repository_url": "https://api.github.com/repos/nats-io/stan.py", "labels_url": "https://api.github.com/repos/nats-io/stan.py/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/nats-io/stan.py/issues/37/comments", "events_url": "https://api.github.com/repos/nats-io/stan.py/issues/37/events", "html_url": "https://github.com/nats-io/stan.py/issues/37", "id": 589923105, "node_id": "MDU6SXNzdWU1ODk5MjMxMDU=", "number": 37, "title": "Do you have plans and timelines for supporting sync subscriptions?", "user": {"login": "3asm", "id": 1726895, "node_id": "MDQ6VXNlcjE3MjY4OTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1726895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/3asm", "html_url": "https://github.com/3asm", "followers_url": "https://api.github.com/users/3asm/followers", "following_url": "https://api.github.com/users/3asm/following{/other_user}", "gists_url": "https://api.github.com/users/3asm/gists{/gist_id}", "starred_url": "https://api.github.com/users/3asm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/3asm/subscriptions", "organizations_url": "https://api.github.com/users/3asm/orgs", "repos_url": "https://api.github.com/users/3asm/repos", "events_url": "https://api.github.com/users/3asm/events{/privacy}", "received_events_url": "https://api.github.com/users/3asm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-30T00:38:17Z", "updated_at": "2020-04-08T17:00:35Z", "closed_at": "2020-04-08T17:00:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am exploring using Nats and the chosen implementation requires reading one single message at a time.\r\nSync subscription is currently supported in Go and Java, but I didn't find any information on plans or timelines to do so in Python.\r\n\r\nDo you have plans and timelines for supporting sync subscriptions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nats-io/stan.py/issues/29", "repository_url": "https://api.github.com/repos/nats-io/stan.py", "labels_url": "https://api.github.com/repos/nats-io/stan.py/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/nats-io/stan.py/issues/29/comments", "events_url": "https://api.github.com/repos/nats-io/stan.py/issues/29/events", "html_url": "https://github.com/nats-io/stan.py/issues/29", "id": 447861984, "node_id": "MDU6SXNzdWU0NDc4NjE5ODQ=", "number": 29, "title": "Support for PINGs from client to server to detect connection loss", "user": {"login": "viktorm77", "id": 31017616, "node_id": "MDQ6VXNlcjMxMDE3NjE2", "avatar_url": "https://avatars1.githubusercontent.com/u/31017616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viktorm77", "html_url": "https://github.com/viktorm77", "followers_url": "https://api.github.com/users/viktorm77/followers", "following_url": "https://api.github.com/users/viktorm77/following{/other_user}", "gists_url": "https://api.github.com/users/viktorm77/gists{/gist_id}", "starred_url": "https://api.github.com/users/viktorm77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viktorm77/subscriptions", "organizations_url": "https://api.github.com/users/viktorm77/orgs", "repos_url": "https://api.github.com/users/viktorm77/repos", "events_url": "https://api.github.com/users/viktorm77/events{/privacy}", "received_events_url": "https://api.github.com/users/viktorm77/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-23T20:37:11Z", "updated_at": "2019-05-27T06:48:38Z", "closed_at": "2019-05-27T06:48:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Client library should detect and report that the connection to the Streaming server is permanently lost.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nats-io/stan.py/issues/25", "repository_url": "https://api.github.com/repos/nats-io/stan.py", "labels_url": "https://api.github.com/repos/nats-io/stan.py/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/nats-io/stan.py/issues/25/comments", "events_url": "https://api.github.com/repos/nats-io/stan.py/issues/25/events", "html_url": "https://github.com/nats-io/stan.py/issues/25", "id": 443383956, "node_id": "MDU6SXNzdWU0NDMzODM5NTY=", "number": 25, "title": "Inconsistent naming of subscription inbox compare to other clients", "user": {"login": "viktorm77", "id": 31017616, "node_id": "MDQ6VXNlcjMxMDE3NjE2", "avatar_url": "https://avatars1.githubusercontent.com/u/31017616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viktorm77", "html_url": "https://github.com/viktorm77", "followers_url": "https://api.github.com/users/viktorm77/followers", "following_url": "https://api.github.com/users/viktorm77/following{/other_user}", "gists_url": "https://api.github.com/users/viktorm77/gists{/gist_id}", "starred_url": "https://api.github.com/users/viktorm77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viktorm77/subscriptions", "organizations_url": "https://api.github.com/users/viktorm77/orgs", "repos_url": "https://api.github.com/users/viktorm77/repos", "events_url": "https://api.github.com/users/viktorm77/events{/privacy}", "received_events_url": "https://api.github.com/users/viktorm77/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-13T12:57:37Z", "updated_at": "2019-05-13T17:38:45Z", "closed_at": "2019-05-13T17:38:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "new_guid() is being used to create a name of the subscription inbox. This is not inline with other clients , where prefix \"_INBOX.\" is being used.  That situation causes an issue when you have services in multiple languages accessing NATS Streaming, forcing to relax authorization on subscription to \">\" instead of \"_INBOX.>\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nats-io/stan.py/issues/23", "repository_url": "https://api.github.com/repos/nats-io/stan.py", "labels_url": "https://api.github.com/repos/nats-io/stan.py/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/nats-io/stan.py/issues/23/comments", "events_url": "https://api.github.com/repos/nats-io/stan.py/issues/23/events", "html_url": "https://github.com/nats-io/stan.py/issues/23", "id": 438907476, "node_id": "MDU6SXNzdWU0Mzg5MDc0NzY=", "number": 23, "title": "Do NATS has asynchronous publisher in another language besides Python?", "user": {"login": "mcnl", "id": 10136352, "node_id": "MDQ6VXNlcjEwMTM2MzUy", "avatar_url": "https://avatars1.githubusercontent.com/u/10136352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcnl", "html_url": "https://github.com/mcnl", "followers_url": "https://api.github.com/users/mcnl/followers", "following_url": "https://api.github.com/users/mcnl/following{/other_user}", "gists_url": "https://api.github.com/users/mcnl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcnl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcnl/subscriptions", "organizations_url": "https://api.github.com/users/mcnl/orgs", "repos_url": "https://api.github.com/users/mcnl/repos", "events_url": "https://api.github.com/users/mcnl/events{/privacy}", "received_events_url": "https://api.github.com/users/mcnl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-30T18:09:47Z", "updated_at": "2019-04-30T19:02:43Z", "closed_at": "2019-04-30T19:02:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was looking for an asynchoronous publisher code but I just find it in python? Do NATS have natively another asynchronous publisher implementation or example that is not in Python?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nats-io/stan.py/issues/17", "repository_url": "https://api.github.com/repos/nats-io/stan.py", "labels_url": "https://api.github.com/repos/nats-io/stan.py/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/nats-io/stan.py/issues/17/comments", "events_url": "https://api.github.com/repos/nats-io/stan.py/issues/17/events", "html_url": "https://github.com/nats-io/stan.py/issues/17", "id": 376955362, "node_id": "MDU6SXNzdWUzNzY5NTUzNjI=", "number": 17, "title": "Could we push the v0.1.2 to pip?", "user": {"login": "juandiegopalomino", "id": 10430635, "node_id": "MDQ6VXNlcjEwNDMwNjM1", "avatar_url": "https://avatars0.githubusercontent.com/u/10430635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juandiegopalomino", "html_url": "https://github.com/juandiegopalomino", "followers_url": "https://api.github.com/users/juandiegopalomino/followers", "following_url": "https://api.github.com/users/juandiegopalomino/following{/other_user}", "gists_url": "https://api.github.com/users/juandiegopalomino/gists{/gist_id}", "starred_url": "https://api.github.com/users/juandiegopalomino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juandiegopalomino/subscriptions", "organizations_url": "https://api.github.com/users/juandiegopalomino/orgs", "repos_url": "https://api.github.com/users/juandiegopalomino/repos", "events_url": "https://api.github.com/users/juandiegopalomino/events{/privacy}", "received_events_url": "https://api.github.com/users/juandiegopalomino/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-02T20:22:52Z", "updated_at": "2018-11-02T20:24:10Z", "closed_at": "2018-11-02T20:23:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nats-io/stan.py/issues/16", "repository_url": "https://api.github.com/repos/nats-io/stan.py", "labels_url": "https://api.github.com/repos/nats-io/stan.py/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/nats-io/stan.py/issues/16/comments", "events_url": "https://api.github.com/repos/nats-io/stan.py/issues/16/events", "html_url": "https://github.com/nats-io/stan.py/issues/16", "id": 366784061, "node_id": "MDU6SXNzdWUzNjY3ODQwNjE=", "number": 16, "title": "Running multiple callbacks asynchronously for a subscriber", "user": {"login": "bobthekingofegypt", "id": 332141, "node_id": "MDQ6VXNlcjMzMjE0MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/332141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobthekingofegypt", "html_url": "https://github.com/bobthekingofegypt", "followers_url": "https://api.github.com/users/bobthekingofegypt/followers", "following_url": "https://api.github.com/users/bobthekingofegypt/following{/other_user}", "gists_url": "https://api.github.com/users/bobthekingofegypt/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobthekingofegypt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobthekingofegypt/subscriptions", "organizations_url": "https://api.github.com/users/bobthekingofegypt/orgs", "repos_url": "https://api.github.com/users/bobthekingofegypt/repos", "events_url": "https://api.github.com/users/bobthekingofegypt/events{/privacy}", "received_events_url": "https://api.github.com/users/bobthekingofegypt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-04T13:14:45Z", "updated_at": "2019-04-06T14:23:24Z", "closed_at": "2019-04-06T14:23:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is my first time using pythons asyncio and nats so I maybe not understand how everything should fit together but I was expecting the cb argument to be running async upto the max_inflight value.\r\n\r\nFor example in a script like this\r\n```\r\nimport asyncio\r\nimport random\r\nfrom nats.aio.client import Client as NATS\r\nfrom stan.aio.client import Client as STAN\r\n\r\nasync def run(loop):\r\n    nc = NATS()\r\n    sc = STAN()\r\n\r\n    await nc.connect(io_loop=loop)\r\n    await sc.connect(\"test-cluster\", \"client-demo\", nats=nc)\r\n\r\n    async def cb(msg):\r\n        wait_time = random.randint(0, 6)\r\n        print(\"Wait time \" + str(wait_time))\r\n        await asyncio.sleep(wait_time)\r\n\r\n        print(\"Received a message (seq={}): {}\".format(msg.seq, msg.data))\r\n        await sc.ack(msg)\r\n\r\n    # Subscribe to get all messages from the beginning.\r\n    await sc.subscribe(\"greetings\", start_at='first', cb=cb, max_inflight=5, manual_acks=True, ack_wait=60)\r\n\r\nif __name__ == '__main__':\r\n    loop = asyncio.get_event_loop()\r\n    loop.run_until_complete(run(loop))\r\n    loop.run_forever()\r\n```\r\n\r\nIf I published 5 messages onto the greetings channel I was hoping for 5 intertwined cb calls running together but they each run sequentially waiting for the previous one to finish.  Does the library support have multiple callbacks running in async?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nats-io/stan.py/issues/14", "repository_url": "https://api.github.com/repos/nats-io/stan.py", "labels_url": "https://api.github.com/repos/nats-io/stan.py/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/nats-io/stan.py/issues/14/comments", "events_url": "https://api.github.com/repos/nats-io/stan.py/issues/14/events", "html_url": "https://github.com/nats-io/stan.py/issues/14", "id": 346944523, "node_id": "MDU6SXNzdWUzNDY5NDQ1MjM=", "number": 14, "title": "last_received not work", "user": {"login": "nghuyong", "id": 16462374, "node_id": "MDQ6VXNlcjE2NDYyMzc0", "avatar_url": "https://avatars0.githubusercontent.com/u/16462374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nghuyong", "html_url": "https://github.com/nghuyong", "followers_url": "https://api.github.com/users/nghuyong/followers", "following_url": "https://api.github.com/users/nghuyong/following{/other_user}", "gists_url": "https://api.github.com/users/nghuyong/gists{/gist_id}", "starred_url": "https://api.github.com/users/nghuyong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nghuyong/subscriptions", "organizations_url": "https://api.github.com/users/nghuyong/orgs", "repos_url": "https://api.github.com/users/nghuyong/repos", "events_url": "https://api.github.com/users/nghuyong/events{/privacy}", "received_events_url": "https://api.github.com/users/nghuyong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-02T10:04:22Z", "updated_at": "2018-08-02T12:49:18Z", "closed_at": "2018-08-02T12:49:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use the sample code below:\r\nsend.py\r\n```Python\r\n#!/usr/bin/env python\r\n# encoding: utf-8\r\nimport asyncio\r\nfrom nats.aio.client import Client as NATS\r\nfrom stan.aio.client import Client as STAN\r\n\r\n\r\nasync def run(loop):\r\n    nc = NATS()\r\n    sc = STAN()\r\n\r\n    # First connect to NATS, then start session with NATS Streaming.\r\n    await nc.connect(io_loop=loop)\r\n    await sc.connect(\"test-cluster\", \"client-456\", nats=nc)\r\n\r\n    # Periodically send a message\r\n    while True:\r\n        await sc.publish(\"greetings\", b'new message')\r\n        await asyncio.sleep(1, loop=loop)\r\n\r\n\r\nif __name__ == '__main__':\r\n    loop = asyncio.get_event_loop()\r\n    loop.run_until_complete(run(loop))\r\n    loop.run_forever()\r\n```\r\n\r\nreceive.py\r\n```Python\r\n#!/usr/bin/env python\r\n# encoding: utf-8\r\nimport asyncio\r\nfrom nats.aio.client import Client as NATS\r\nfrom stan.aio.client import Client as STAN\r\n\r\n\r\nasync def run(loop):\r\n    nc = NATS()\r\n    sc = STAN()\r\n\r\n    # Start session with NATS Streaming cluster using\r\n    # the established NATS connection.\r\n    await nc.connect(io_loop=loop)\r\n    await sc.connect(\"test-cluster\", \"client-123\", nats=nc)\r\n\r\n    # Example async subscriber\r\n    async def cb(msg):\r\n        print(\"Received a message (seq={}): {}\".format(msg.seq, msg.data))\r\n\r\n    # Subscribe to get all messages from the beginning.\r\n    await sc.subscribe(\"greetings\", start_at='last_received', cb=cb, ack_wait=3)\r\n\r\n\r\nif __name__ == '__main__':\r\n    loop = asyncio.get_event_loop()\r\n    loop.run_until_complete(run(loop))\r\n    loop.run_forever()\r\n```\r\n\r\nin the receive.py , i set the subscribe start_at the 'last_received' , but I stop the receive program and run next time , I receive the data is like start at \"only_new\", and lose the data in the stop time.\r\nso how can I ,stop the program and can continue receive from last_received ?\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nats-io/stan.py/issues/12", "repository_url": "https://api.github.com/repos/nats-io/stan.py", "labels_url": "https://api.github.com/repos/nats-io/stan.py/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/nats-io/stan.py/issues/12/comments", "events_url": "https://api.github.com/repos/nats-io/stan.py/issues/12/events", "html_url": "https://github.com/nats-io/stan.py/issues/12", "id": 336357157, "node_id": "MDU6SXNzdWUzMzYzNTcxNTc=", "number": 12, "title": "Example of a subscriber on an infinite loop", "user": {"login": "yanpozka", "id": 3849391, "node_id": "MDQ6VXNlcjM4NDkzOTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3849391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanpozka", "html_url": "https://github.com/yanpozka", "followers_url": "https://api.github.com/users/yanpozka/followers", "following_url": "https://api.github.com/users/yanpozka/following{/other_user}", "gists_url": "https://api.github.com/users/yanpozka/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanpozka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanpozka/subscriptions", "organizations_url": "https://api.github.com/users/yanpozka/orgs", "repos_url": "https://api.github.com/users/yanpozka/repos", "events_url": "https://api.github.com/users/yanpozka/events{/privacy}", "received_events_url": "https://api.github.com/users/yanpozka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-06-27T19:26:10Z", "updated_at": "2019-06-09T19:53:12Z", "closed_at": "2018-06-29T15:13:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi thanks for publishing a Python client for nats-streaming, results that asyncio is relative new for a lot of Python developers (like me) Is possible to add an example with a subscriber listening messages forever e.i. inside of an infinite loop or something equivalent on the asyncio way ? I want to have a service to listening updates from NATS.\r\n\r\nGeneric examples:\r\nhttps://gist.github.com/Integralist/6f34e23f71340a1a23e846cd2f64cf32\r\nhttps://tutorialedge.net/python/concurrency/asyncio-event-loops-tutorial/\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nats-io/stan.py/issues/7", "repository_url": "https://api.github.com/repos/nats-io/stan.py", "labels_url": "https://api.github.com/repos/nats-io/stan.py/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/nats-io/stan.py/issues/7/comments", "events_url": "https://api.github.com/repos/nats-io/stan.py/issues/7/events", "html_url": "https://github.com/nats-io/stan.py/issues/7", "id": 292758720, "node_id": "MDU6SXNzdWUyOTI3NTg3MjA=", "number": 7, "title": "Library reconnects only once", "user": {"login": "pvanderlinden", "id": 391586, "node_id": "MDQ6VXNlcjM5MTU4Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/391586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvanderlinden", "html_url": "https://github.com/pvanderlinden", "followers_url": "https://api.github.com/users/pvanderlinden/followers", "following_url": "https://api.github.com/users/pvanderlinden/following{/other_user}", "gists_url": "https://api.github.com/users/pvanderlinden/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvanderlinden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvanderlinden/subscriptions", "organizations_url": "https://api.github.com/users/pvanderlinden/orgs", "repos_url": "https://api.github.com/users/pvanderlinden/repos", "events_url": "https://api.github.com/users/pvanderlinden/events{/privacy}", "received_events_url": "https://api.github.com/users/pvanderlinden/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-30T12:05:42Z", "updated_at": "2018-07-17T16:08:07Z", "closed_at": "2018-07-17T16:08:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I can not get reconnects working, I have tested it with a program publishing and consuming, if I shut down the server for a few seconds, they both will stop working (the publisher will timeout on publishing, the consumer will just not receive any messages anymore)\r\n\r\nConnection code:\r\n```\r\nfrom functools import partial\r\n\r\n\r\nasync def test_cb(cb_type, *args, **kwargs):\r\n    print(cb_type, args, kwargs)\r\n\r\nnc = NATS()\r\nawait nc.connect(io_loop=loop, error_cb=partial(test_cb, 'error'), disconnected_cb=partial(test_cb, 'disconnect'), closed_cb=partial(test_cb, 'closed'), reconnected_cb=partial(test_cb, 'reconnect'), ping_interval=25)\r\n```\r\n\r\nOutput:\r\n```\r\nerror (NatsError('nats: empty response from server when expecting INFO message',),) {}\r\nreconnect () {}\r\nerror (<class 'nats.aio.errors.ErrStaleConnection'>,) {}\r\ndisconnect () {}\r\nerror (NatsError('nats: empty response from server when expecting INFO message',),) {}\r\nerror (ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 4222)\"),) {}\r\ndisconnect () {}\r\nclosed () {}\r\n```\r\n\r\nWhat I understand from the defaults it should try to reconnect 10 times with a delay of 2 seconds, which means if the server is down for less then 20 seconds it should at least reconnect and resume operation, unfortunately it won't resume operation (the consumer will just not receive anything anymore, the producer will timeout on a publish call, even when the server is back up again).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nats-io/stan.py/issues/5", "repository_url": "https://api.github.com/repos/nats-io/stan.py", "labels_url": "https://api.github.com/repos/nats-io/stan.py/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/nats-io/stan.py/issues/5/comments", "events_url": "https://api.github.com/repos/nats-io/stan.py/issues/5/events", "html_url": "https://github.com/nats-io/stan.py/issues/5", "id": 280114578, "node_id": "MDU6SXNzdWUyODAxMTQ1Nzg=", "number": 5, "title": "Ack does not work", "user": {"login": "eelcocramer", "id": 795579, "node_id": "MDQ6VXNlcjc5NTU3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/795579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eelcocramer", "html_url": "https://github.com/eelcocramer", "followers_url": "https://api.github.com/users/eelcocramer/followers", "following_url": "https://api.github.com/users/eelcocramer/following{/other_user}", "gists_url": "https://api.github.com/users/eelcocramer/gists{/gist_id}", "starred_url": "https://api.github.com/users/eelcocramer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eelcocramer/subscriptions", "organizations_url": "https://api.github.com/users/eelcocramer/orgs", "repos_url": "https://api.github.com/users/eelcocramer/repos", "events_url": "https://api.github.com/users/eelcocramer/events{/privacy}", "received_events_url": "https://api.github.com/users/eelcocramer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-12-07T12:36:47Z", "updated_at": "2019-04-08T05:48:06Z", "closed_at": "2019-04-08T05:48:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there,\r\n\r\nWe are currently working on a streaming python client that reads from NATS streaming, does some processing and then publishes the result into another subject in NATS streaming. See the code below:\r\n\r\n```python\r\n    # ---8< code was cut here >8---\r\n\r\n    async def cb(msg):\r\n        nonlocal sc\r\n        \r\n        # when I ack the message directly the code works fine\r\n        # await sc.ack(msg)\r\n\r\n        # doing some processing here to create pubmsg\r\n        pubmsg = ...\r\n\r\n        await sc.publish('processed', pubmsg)\r\n        # this ack does not keep NATS streaming from resending the message after 30s\r\n        await sc.ack(msg)\r\n\r\n    await sc.subscribe('notprocessed', start_at='first', cb=cb, manual_acks=True, ack_wait=30)\r\n\r\n    # ---8< code was cut here >8---\r\n```\r\n\r\nThe processing takes way shorter than the 30 seconds timeout for re-sends. Pulling the ack up in the code makes this sample work like expected.\r\n\r\nAny ideas of what we do wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nats-io/stan.py/issues/4", "repository_url": "https://api.github.com/repos/nats-io/stan.py", "labels_url": "https://api.github.com/repos/nats-io/stan.py/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/nats-io/stan.py/issues/4/comments", "events_url": "https://api.github.com/repos/nats-io/stan.py/issues/4/events", "html_url": "https://github.com/nats-io/stan.py/issues/4", "id": 278353277, "node_id": "MDU6SXNzdWUyNzgzNTMyNzc=", "number": 4, "title": "examples/basic.py returns None", "user": {"login": "aharol", "id": 21985010, "node_id": "MDQ6VXNlcjIxOTg1MDEw", "avatar_url": "https://avatars0.githubusercontent.com/u/21985010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aharol", "html_url": "https://github.com/aharol", "followers_url": "https://api.github.com/users/aharol/followers", "following_url": "https://api.github.com/users/aharol/following{/other_user}", "gists_url": "https://api.github.com/users/aharol/gists{/gist_id}", "starred_url": "https://api.github.com/users/aharol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aharol/subscriptions", "organizations_url": "https://api.github.com/users/aharol/orgs", "repos_url": "https://api.github.com/users/aharol/repos", "events_url": "https://api.github.com/users/aharol/events{/privacy}", "received_events_url": "https://api.github.com/users/aharol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-12-01T04:20:36Z", "updated_at": "2018-06-01T15:41:11Z", "closed_at": "2018-06-01T00:45:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to run the the `examples/basic.py`, which shows nothing on a screen (no print statement is executed). Running stan server in debug mode using `-SD` flag, I see the client connecting to the stream, successfully subscribing, removing subscription and closing down. At the same time, adding an extra line `await asyncio.sleep(0.1)` after `await sc.subscribe` prints the result successfully, which makes me think that the execution of `run` finishes before stan returns any results. Could you comment on this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nats-io/stan.py/issues/3", "repository_url": "https://api.github.com/repos/nats-io/stan.py", "labels_url": "https://api.github.com/repos/nats-io/stan.py/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/nats-io/stan.py/issues/3/comments", "events_url": "https://api.github.com/repos/nats-io/stan.py/issues/3/events", "html_url": "https://github.com/nats-io/stan.py/issues/3", "id": 277087894, "node_id": "MDU6SXNzdWUyNzcwODc4OTQ=", "number": 3, "title": "ModuleNotFoundError: No module named 'google'", "user": {"login": "barrachri", "id": 4802083, "node_id": "MDQ6VXNlcjQ4MDIwODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4802083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barrachri", "html_url": "https://github.com/barrachri", "followers_url": "https://api.github.com/users/barrachri/followers", "following_url": "https://api.github.com/users/barrachri/following{/other_user}", "gists_url": "https://api.github.com/users/barrachri/gists{/gist_id}", "starred_url": "https://api.github.com/users/barrachri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barrachri/subscriptions", "organizations_url": "https://api.github.com/users/barrachri/orgs", "repos_url": "https://api.github.com/users/barrachri/repos", "events_url": "https://api.github.com/users/barrachri/events{/privacy}", "received_events_url": "https://api.github.com/users/barrachri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-11-27T16:45:05Z", "updated_at": "2018-02-15T10:29:21Z", "closed_at": "2018-01-29T12:37:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using `docker run -it --rm python:3.6 bash`\r\n\r\n```python\r\nroot@a104391a705f:/# pip install asyncio-nats-streaming\r\nCollecting asyncio-nats-streaming\r\n  Using cached asyncio-nats-streaming-0.1.0.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-build-zh3tfsa3/asyncio-nats-streaming/setup.py\", line 2, in <module>\r\n        from stan.aio.client import __version__\r\n      File \"/tmp/pip-build-zh3tfsa3/asyncio-nats-streaming/stan/aio/client.py\", line 5, in <module>\r\n        import stan.pb.protocol_pb2 as protocol\r\n      File \"/tmp/pip-build-zh3tfsa3/asyncio-nats-streaming/stan/pb/protocol_pb2.py\", line 6, in <module>\r\n        from google.protobuf.internal import enum_type_wrapper\r\n    ModuleNotFoundError: No module named 'google'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/nats-io/stan.py/issues/1", "repository_url": "https://api.github.com/repos/nats-io/stan.py", "labels_url": "https://api.github.com/repos/nats-io/stan.py/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/nats-io/stan.py/issues/1/comments", "events_url": "https://api.github.com/repos/nats-io/stan.py/issues/1/events", "html_url": "https://github.com/nats-io/stan.py/issues/1", "id": 272208394, "node_id": "MDU6SXNzdWUyNzIyMDgzOTQ=", "number": 1, "title": "missing statement in basic.py", "user": {"login": "Bartcardi", "id": 11993543, "node_id": "MDQ6VXNlcjExOTkzNTQz", "avatar_url": "https://avatars0.githubusercontent.com/u/11993543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bartcardi", "html_url": "https://github.com/Bartcardi", "followers_url": "https://api.github.com/users/Bartcardi/followers", "following_url": "https://api.github.com/users/Bartcardi/following{/other_user}", "gists_url": "https://api.github.com/users/Bartcardi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bartcardi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bartcardi/subscriptions", "organizations_url": "https://api.github.com/users/Bartcardi/orgs", "repos_url": "https://api.github.com/users/Bartcardi/repos", "events_url": "https://api.github.com/users/Bartcardi/events{/privacy}", "received_events_url": "https://api.github.com/users/Bartcardi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-08T14:00:58Z", "updated_at": "2018-06-01T00:45:14Z", "closed_at": "2018-06-01T00:45:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think you forgot a statement like `await asyncio.sleep(1, loop=loop)` in [basic.py](https://github.com/nats-io/asyncio-nats-streaming/blob/6a9c87cdb6f10a37d941caa845d866bf4e1aeda9/examples/basic.py#L26) after the subscription to see the prints from the call back.", "performed_via_github_app": null, "score": 1.0}]}